ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                     13 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     15 
                                     16 ;===============================================================
                                     17 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     18 ;  Date: 2020-06-07 
                                     19 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     20 ;  Date: 2019-10-26
                                     21 ;  Changes to memory map:
                                     22 ;       0x16f0  Data Stack, growing downward
                                     23 ;       0x1700  Terminal input buffer TIB
                                     24 ;       0x17ff  Return Stack, growing downard
                                     25 ;================================================================
                                     26 ;       STM8EF, Version 2.1, 13 July
                                     27 ;               Implemented on STM8S-Discovery Board.
                                     28 ;               Assembled by ST VisualDevelop STVD 
                                     29 ;               Bootup on internal 2 MHz clock
                                     30 ;               Switch to external 16 MHz crystal clock
                                     31 ;
                                     32 ; FORTH Virtual Machine:
                                     33 ; Subroutine threaded model
                                     34 ; SP Return stack pointer
                                     35 ; X Data stack pointer
                                     36 ; A,Y Scratch pad registers
                                     37 ;
                                     38 ; Memory Map:
                                     39 ; 0x0 RAM memory, system variables
                                     40 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     41 ; 0x780 Data stack, growing downward
                                     42 ; 0x790 Terminal input buffer TIB
                                     43 ; 0x7FF Return stack, growing downward
                                     44 ; 0x8000 Interrupt vector table
                                     45 ; 0x8080 FORTH startup code
                                     46 ; 0x80E7 Start of FORTH dictionary in ROM
                                     47 ; 0x9584 End of FORTH dictionary
                                     48 ;
                                     49 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     50 ;                  use UART1 instead of UART3 for communication with user.
                                     51 ;                  UART1 is available as ttyACM* device via USB connection.
                                     52 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     53 ;                  and MSEC word that return MS value.
                                     54 ;
                                     55 ;       EF12, Version 2.1, 18apr00cht
                                     56 ;               move to 8000H replacing WHYP.
                                     57 ;               copy interrupt vectors from WHYPFLSH.S19
                                     58 ;               to EF12.S19 before flashing
                                     59 ;               add TICKS1 and DELAY1 for motor stepping
                                     60 ;
                                     61 ;       EF12, 02/18/00, C. H. Ting
                                     62 ;       Adapt 86eForth v2.02 to 68HC12.
                                     63 ;               Use WHYP to seed EF12.ASM
                                     64 ;               Use AS12 native 68HC12 assembler:
                                     65 ;               as12 ef12.asm >ef12.lst
                                     66 ;       EF12A, add ADC code, 02mar00cht
                                     67 ;       EF12B, 01mar00cht
                                     68 ;               stack to 0x78, return stack to 0xf8.
                                     69 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     70 ;               add PWM registers
                                     71 ;               add SPI registers and code
                                     72 ;       EF12C, 12mar00cht
                                     73 ;               add MAX5250 D/A converter
                                     74 ;       EF12D, 15mar00cht
                                     75 ;               add all the Lexel interface words
                                     76 ;       EF12E, 18apr00cht, save for reference
                                     77 ;
                                     78 ;       Copyright (c) 2000
                                     79 ;       Dr. C. H. Ting
                                     80 ;       156 14th Avenue
                                     81 ;       San Mateo, CA 94402
                                     82 ;       (650) 571-7639
                                     83 ;
                                     84 
                                     85 ;*************************************
                                     86 ; constant used for conditationnal 
                                     87 ; assembly for those word I converted 
                                     88 ; to code.
                                     89 ; Added by Picatout 2020-05-24 
                                     90 ;*************************************
                           000001    91 CONVERT_TO_CODE=1 ; words converted in assembly by Picatout
                           000001    92 PICATOUT_MOD=1  ; code modified by Picatout 
                                     93 
                                     94 ;*********************************************************
                                     95 ;	Assembler constants
                                     96 ;*********************************************************
                           000000    97 RAMBASE =	0x0000	   ;ram base
                           0017FF    98 STACK   =	0x17FF 	;system (return) stack empty 
                           001670    99 DATSTK  =	0x1670	;data stack  empty
                           001680   100 TBUFFBASE =     0x1680  ; flash read/write transaction buffer 
                           001700   101 TIBBASE =       0X1700  ; tib addr.
                                    102 
                                    103 
                                    104 
                                    105 ;; Memory allocation
                                    106 
                           000006   107 UPP     =     RAMBASE+6
                           001670   108 SPP     =     RAMBASE+DATSTK
                           0017FF   109 RPP     =     RAMBASE+STACK
                           001680   110 ROWBUFF =     RAMBASE+TBUFFBASE 
                           001700   111 TIBB    =     RAMBASE+TIBBASE
                           000080   112 CTOP    =     RAMBASE+0x80
                                    113 
                           000001   114 .if PICATOUT_MOD 
                                    115 ; user variables constants 
                           000006   116 UBASE = UPP       ; numeric base 
                           000008   117 UTMP = UBASE+2    ; temporary storage
                           00000A   118 UINN = UTMP+2     ; >IN tib pointer 
                           00000C   119 UCTIB = UINN+2    ; tib count 
                           00000E   120 UTIB = UCTIB+2    ; tib address 
                           000010   121 UINTER = UTIB+2   ; interpreter vector 
                           000012   122 UHLD = UINTER+2   ; hold 
                           000014   123 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000016   124 UVP = UCNTXT+2    ; variable pointer 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000018   125 UCP = UVP+2      ; code pointer
                           00001A   126 ULAST = UCP+2    ; last dictionary pointer 
                           00001C   127 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
                           00001E   128 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
                                    129 .endif ; PICATOUT_MOD
                                    130 ;******  System Variables  ******
                           000020   131 XTEMP	=	UTFLASH +2;address called by CREATE
                           000022   132 YTEMP	=	XTEMP+2	;address called by CREATE
                           000020   133 PROD1 = XTEMP	;space for UM*
                           000022   134 PROD2 = PROD1+2
                           000024   135 PROD3 = PROD2+2
                           000026   136 CARRY = PROD3+2
                           000028   137 SP0	= CARRY+2	;initial data stack pointer
                           00002A   138 RP0	= SP0+2		;initial return stack pointer
                           00002C   139 MS    =   RP0+2         ; millisecond counter 
                           00002E   140 CNTDWN =  MS+2          ; count down timer 
                           000030   141 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000031   142 PTR16 = FPTR+1          ; middle byte of farptr 
                           000032   143 PTR8 = FPTR+2           ; least byte of farptr 
                                    144 
                           000001   145 .if PICATOUT_MOD
                                    146 ; EEPROM persistant data  
                           004000   147 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   148 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   149 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   150 APP_VP = APP_CP+2  ; free data space pointer 
                                    151 .endif ;PICATOUT_MOD
                                    152 
                                    153 
                                    154 ;***********************************************
                                    155 ;; Version control
                                    156 
                           000003   157 VER     =     3         ;major release version
                           000000   158 EXT     =     0         ;minor extension
                                    159 
                                    160 ;; Constants
                                    161 
                           00FFFF   162 TRUEE   =     0xFFFF      ;true flag
                                    163 
                           000040   164 COMPO   =     0x40     ;lexicon compile only bit
                           000080   165 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   166 MASKK   =     0x1F7F  ;lexicon bit mask
                                    167 
                           000002   168 CELLL   =     2       ;size of a cell
                           00000A   169 BASEE   =     10      ;default radix
                           000008   170 BKSPP   =     8       ;back space
                           00000A   171 LF      =     10      ;line feed
                           00000D   172 CRR     =     13      ;carriage return
                           00001B   173 ERR     =     27      ;error escape
                           000027   174 TIC     =     39      ;tick
                           0000CD   175 CALLL   =     0xCD     ;CALL opcodes
                           000080   176 IRET_CODE =   0x80    ; IRET opcode 
                                    177 
                                    178         .macro _ledon
                                    179         bset PC_ODR,#LED2_BIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    180         .endm
                                    181 
                                    182         .macro _ledoff
                                    183         bres PC_ODR,#LED2_BIT
                                    184         .endm
                                    185 
                                    186 ;**********************************************************
                                    187         .area DATA (ABS)
      000000                        188         .org RAMBASE 
                                    189 ;**********************************************************
                                    190 
                                    191 ;**********************************************************
                                    192         .area SSEG (ABS) ; STACK
      001700                        193         .org 0x1700
      001700                        194         .ds 256 
                                    195 ; space for DATSTK,TIB and STACK         
                                    196 ;**********************************************************
                                    197 
                                    198 ;**********************************************************
                                    199         .area HOME ; vectors table
                                    200 ;**********************************************************
      000000 82 00 00 16            201 	int main	        ; reset
      000004 82 00 00 00            202 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            203 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            204 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            205 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            206 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            207 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            208 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            209 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            210 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            211 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            212 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            213 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            214 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            215 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            216 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            217 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            218 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            219 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            220 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            221 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            222 	int NonHandledInterrupt	; irq19
      000058 82 00 00 00            223 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            224 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            225 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            226 	int Timer4Handler	; irq23
      000068 82 00 00 00            227 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            228 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            229 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            230 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            231 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            232 	int NonHandledInterrupt	; irq29
                                    233 
                                    234 ;**********************************************************
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    235         .area CODE
                                    236 ;**********************************************************
                                    237 
                                    238 ; non handled interrupt reset MCU
      000000                        239 NonHandledInterrupt:
      000000 A6 80            [ 1]  240         ld a, #0x80
      000002 C7 50 D1         [ 1]  241         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    242 	;iret
                                    243 
                                    244 ; used for milliseconds counter 
                                    245 ; MS is 16 bits counter 
      000005                        246 Timer4Handler:
      000005 72 5F 53 42      [ 1]  247 	clr TIM4_SR 
      000009 BE 2C            [ 2]  248         ldw x,MS 
      00000B 5C               [ 2]  249         incw x 
      00000C BF 2C            [ 2]  250         ldw MS,x
      00000E BE 2E            [ 2]  251         ldw x,CNTDWN 
      000010 27 03            [ 1]  252         jreq 1$
      000012 5A               [ 2]  253         decw x 
      000013 BF 2E            [ 2]  254         ldw CNTDWN,x 
      000015                        255 1$:         
      000015 80               [11]  256         iret 
                                    257 
                                    258 
                                    259 ;; Main entry points and COLD start data
      000016                        260 main:
                                    261 ; clear all RAM
      000016 AE 00 00         [ 2]  262 	ldw X,#RAMBASE
      000019                        263 clear_ram0:
      000019 7F               [ 1]  264 	clr (X)
      00001A 5C               [ 2]  265 	incw X
      00001B A3 17 FF         [ 2]  266 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  267 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  268         ldw x,#RPP
      000023 94               [ 1]  269         ldw sp,x 
      000024 CC 00 43         [ 2]  270 	jp ORIG
                                    271 
                                    272 ; COLD initialize these variables.
      000027                        273 UZERO:
      000027 00 0A                  274         .word      BASEE   ;BASE
      000029 00 00                  275         .word      0       ;tmp
      00002B 00 00                  276         .word      0       ;>IN
      00002D 00 00                  277         .word      0       ;#TIB
      00002F 17 00                  278         .word      TIBB    ;TIB
      000031 11 FE                  279         .word      INTER   ;'EVAL
      000033 00 00                  280         .word      0       ;HLD
      000035 1F 78                  281         .word      LASTN  ;CNTXT pointer
      000037 00 80                  282         .word      CTOP   ;CP in RAM
      000039 20 00                  283         .word      app_space ; CP in FLASH 
      00003B 1F 78                  284         .word      LASTN   ;LAST
      00003D 00 00                  285         .word      0        ; OFFSET 
      00003F 00 00                  286         .word      0       ; TFLASH 
      000041 00 00                  287 UEND:   .word      0
                                    288 
      000043                        289 ORIG:   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                    290 ; initialize SP
      000043 AE 17 FF         [ 2]  291         LDW     X,#STACK  ;initialize return stack
      000046 94               [ 1]  292         LDW     SP,X
      000047 BF 2A            [ 2]  293         LDW     RP0,X
      000049 AE 16 70         [ 2]  294         LDW     X,#DATSTK ;initialize data stack
      00004C BF 28            [ 2]  295         LDW     SP0,X
                                    296 ; initialize PC_5 as output to control LED2
                                    297 ; added by Picatout 
      00004E 72 1A 50 0D      [ 1]  298         bset PC_CR1,#LED2_BIT
      000052 72 1A 50 0E      [ 1]  299         bset PC_CR2,#LED2_BIT
      000056 72 1A 50 0C      [ 1]  300         bset PC_DDR,#LED2_BIT
      00005A                        301         _ledoff
      00005A 72 1B 50 0A      [ 1]    1         bres PC_ODR,#LED2_BIT
                                    302 ; initialize clock to HSI
                                    303 ; no divisor 16Mhz 
                                    304 ; Added by Picatout 
      00005E                        305 clock_init:
      00005E 72 5F 50 C6      [ 1]  306         clr CLK_CKDIVR
      000062 72 12 50 C5      [ 1]  307 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000066 A6 E1            [ 1]  308 	ld a,#CLK_SWR_HSI
      000068 C7 50 C4         [ 1]  309 	ld CLK_SWR,a
      00006B C1 50 C3         [ 1]  310 1$:	cp a,CLK_CMSR
      00006E 26 FB            [ 1]  311 	jrne 1$
                                    312         
                                    313 ; initialize UART1, 115200 8N1
      000070                        314 uart1_init:
      000070 72 14 50 C7      [ 1]  315 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    316 	; configure tx pin
      000074 72 1A 50 02      [ 1]  317 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      000078 72 1A 50 03      [ 1]  318 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      00007C 72 1A 50 04      [ 1]  319 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    320 	; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
      000080 35 0B 52 33      [ 1]  321 	mov UART1_BRR2,#0x0b ; must be loaded first
      000084 35 08 52 32      [ 1]  322 	mov UART1_BRR1,#0x8
      000088 35 0C 52 35      [ 1]  323 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    324 ; initialize timer4, used for millisecond interrupt  
      00008C 35 07 53 45      [ 1]  325 	mov TIM4_PSCR,#7 ; prescale 128  
      000090 35 7D 53 46      [ 1]  326 	mov TIM4_ARR,#125 ; set for 1msec.
      000094 35 05 53 40      [ 1]  327 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      000098 72 10 53 41      [ 1]  328 	bset TIM4_IER,#TIM4_IER_UIE 
                                    329 ; set TIM4 interrupt priority to highest
      00009C A6 3F            [ 1]  330         ld a,#~(IPR_MASK<<6)
      00009E C4 7F 75         [ 1]  331         and a,ITC_SPR6
      0000A1 AA C0            [ 1]  332         or a,#(IPR3<<6)
      0000A3 C7 7F 75         [ 1]  333         ld ITC_SPR6,a 
      0000A6 9A               [ 1]  334         rim
      0000A7 CC 18 97         [ 2]  335         jp  COLD   ;default=MN1
                                    336 
                                    337 
                                    338 ;; place MCU in sleep mode with
                                    339 ;; halt opcode 
                                    340 ;; BYE ( -- )
      0000AA 00 00                  341         .word 0
                           0000AC   342         LINK=.
      0000AC 03                     343         .byte 3 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      0000AD 42 59 45               344         .ascii "BYE"
      0000B0                        345 BYE: 
      0000B0 8E               [10]  346         halt 
      0000B1 81               [ 4]  347         ret 
                                    348 
                                    349 ; Enable interrupts 
                                    350 ; EI ( -- )
      0000B2 00 AC                  351         .word LINK 
                           0000B4   352         LINK=.
      0000B4 02                     353         .byte 2
      0000B5 45 49                  354         .ascii "EI"
      0000B7                        355 EI:
      0000B7 9A               [ 1]  356         rim 
      0000B8 81               [ 4]  357         ret 
                                    358 
                                    359 ; Disable interrupts
                                    360 ; DI ( -- )
      0000B9 00 B4                  361         .word LINK 
                           0000BB   362         LINK=.
      0000BB 02                     363         .byte 2 
      0000BC 44 49                  364         .ascii "DI"
      0000BE                        365 DI:
      0000BE 9B               [ 1]  366         sim 
      0000BF 81               [ 4]  367         ret 
                                    368 
                                    369 ; set interrupt priority level 
                                    370 ; SET-ISP ( n1 n2 -- )
                                    371 ; n1 level {1..3}
                                    372 ; n2 vector {0..29}
      0000C0 00 BB                  373         .word LINK 
                           0000C2   374         LINK=.
      0000C2 07                     375         .byte 7 
      0000C3 53 45 54 2D 49 53 50   376         .ascii "SET-ISP"
      0000CA                        377 SETISP:
      0000CA 90 93            [ 1]  378         ldw y,x 
      0000CC 90 FE            [ 2]  379         ldw y,(y)
      0000CE A6 04            [ 1]  380         ld a,#4 ; 4 slot per register 
                                    381 ;  quotient select register, remainder select slot in register.        
      0000D0 90 62            [ 2]  382         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000D2 A4 03            [ 1]  383         and a,#3 
      0000D4 48               [ 1]  384         sll a ; 2*SLOT  lshift 
      0000D5 72 A9 7F 70      [ 2]  385         addw y,#ITC_SPR1 
      0000D9 FF               [ 2]  386         ldw (x),y  ; ( level reg -- )
      0000DA 90 5F            [ 1]  387         clrw y 
      0000DC 90 97            [ 1]  388         ld yl,a 
      0000DE 1D 00 02         [ 2]  389         subw x,#CELLL 
      0000E1 FF               [ 2]  390         ldw (x),y  ; ( level reg lshift -- )
      0000E2 90 93            [ 1]  391         ldw y,x 
      0000E4 90 EE 02         [ 2]  392         ldw y,(2,y) 
      0000E7 90 F6            [ 1]  393         ld a,(y)   ; reg_value
      0000E9 1D 00 02         [ 2]  394         subw x,#CELLL 
      0000EC FF               [ 2]  395         ldw (x),y ; ( level reg lshift rval -- )
      0000ED CD 04 42         [ 4]  396         call OVER ; ( level reg lshift rval lshift -- )
      0000F0 CD 02 E9         [ 4]  397         call DOLIT 
      0000F3 00 03                  398         .word 3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      0000F5 CD 04 28         [ 4]  399         call SWAPP  ; ( level reg lshift rval 3 lshift )
      0000F8 CD 08 FD         [ 4]  400         call LSHIFT ; creat slot mask 
      0000FB CD 06 1A         [ 4]  401         call INVER  ; ( level reg lshift rval mask )
      0000FE CD 04 64         [ 4]  402         call ANDD ; ( level reg lshift slot_masked )
      000101 CD 03 E1         [ 4]  403         call TOR  ; ( level reg lshift -- R: slot_masked )
      000104 CD 05 C0         [ 4]  404         call ROT  ; ( reg lshift level )
      000107 CD 04 28         [ 4]  405         call SWAPP ; ( reg level lshift )
      00010A CD 08 FD         [ 4]  406         call LSHIFT  ; ( reg slot_level -- )
      00010D CD 03 C2         [ 4]  407         call RFROM ; ( reg slot_level masked_val )
      000110 CD 04 78         [ 4]  408         call ORR   ; ( reg updated_rval )
      000113 CD 04 28         [ 4]  409         call SWAPP 
      000116 CD 03 7E         [ 4]  410         call CSTOR
                                    411 
                                    412 ; sélectionne l'application 
                                    413 ; qui démarre automatique lors 
                                    414 ; d'un COLD start 
      000119 00 C2                  415         .word LINK 
                           00011B   416         LINK=.
      00011B 07                     417         .byte 7
      00011C 41 55 54 4F 52 55 4E   418         .ascii "AUTORUN"
      000123                        419 AUTORUN:
      000123 CD 0F C3         [ 4]  420         call TOKEN 
      000126 CD 04 18         [ 4]  421         call DUPP 
      000129 CD 03 1C         [ 4]  422         call QBRAN 
      00012C 01 DC                  423         .word FORGET2
      00012E CD 10 C0         [ 4]  424         call NAMEQ
      000131 CD 05 AF         [ 4]  425         call QDUP 
      000134 CD 03 1C         [ 4]  426         call QBRAN 
      000137 01 DC                  427         .word FORGET2
      000139 CD 04 0E         [ 4]  428         call DROP 
      00013C 1D 00 04         [ 2]  429         subw x,#2*CELLL 
      00013F 90 5F            [ 1]  430         clrw y 
      000141 FF               [ 2]  431         ldw (x),y 
      000142 90 AE 40 02      [ 2]  432         ldw y,#APP_RUN 
      000146 EF 02            [ 2]  433         ldw (2,x),y 
      000148 CC 1B 16         [ 2]  434         jp ee_store 
                                    435 
                                    436 
                                    437 ;; Reset dictionary pointer before 
                                    438 ;; forgotten word. RAM SPACE and 
                                    439 ;; interrupt vector defineD after 
                                    440 ;; must be resetted also.
      00014B 01 1B                  441         .word LINK 
                           00014D   442         LINK=.
      00014D 06                     443         .byte 6
      00014E 46 4F 52 47 45 54      444         .ascii "FORGET" 
      000154                        445 FORGET: 
      000154 CD 0F C3         [ 4]  446         call TOKEN
      000157 CD 04 18         [ 4]  447         call DUPP 
      00015A CD 03 1C         [ 4]  448         call QBRAN 
      00015D 01 DC                  449         .word FORGET2
      00015F CD 10 C0         [ 4]  450         call NAMEQ ; ( a -- ca na | a F )
      000162 CD 05 AF         [ 4]  451         call QDUP 
      000165 CD 03 1C         [ 4]  452         call QBRAN 
      000168 01 DC                  453         .word FORGET2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                                    454 ; only forget users words 
      00016A CD 04 18         [ 4]  455         call DUPP ; ( ca na na )
      00016D CD 02 E9         [ 4]  456         call DOLIT 
      000170 20 00                  457         .word app_space 
      000172 CD 04 28         [ 4]  458         call SWAPP 
      000175 CD 06 5E         [ 4]  459         call SUBB 
      000178 CD 04 51         [ 4]  460         call  ZLESS 
      00017B CD 03 1C         [ 4]  461         call QBRAN 
      00017E 01 CE                  462         .word CANT_FORGET 
                                    463 ; ( ca na -- )        
                                    464 ;reset ivec with address >= ca
      000180 CD 04 28         [ 4]  465         call SWAPP ; ( na ca -- ) 
      000183 CD 1D 07         [ 4]  466         call CHKIVEC ; ( na -- ) 
                                    467 ; start at LAST and link back to na 
                                    468 ; if variable found reset VP at that point.
      000186                        469 FORGET1:
      000186 CD 05 84         [ 4]  470         call LAST 
      000189 CD 03 71         [ 4]  471         call AT 
      00018C CD 04 18         [ 4]  472         call DUPP  ; ( -- na last last )
      00018F CD 01 F2         [ 4]  473         call FREEVAR ; ( -- na last )
      000192 CD 04 18         [ 4]  474         call DUPP 
      000195 CD 02 E9         [ 4]  475         call DOLIT 
      000198 00 02                  476         .word 2 
      00019A CD 06 5E         [ 4]  477         call SUBB ; ( na last -- na last lfa ) link address 
      00019D CD 03 71         [ 4]  478         call AT 
      0001A0 CD 04 18         [ 4]  479         call DUPP ; ( -- na last a a )
      0001A3 CD 05 58         [ 4]  480         call CNTXT 
      0001A6 CD 03 5A         [ 4]  481         call STORE
      0001A9 CD 05 84         [ 4]  482         call LAST  
      0001AC CD 03 5A         [ 4]  483         call STORE ; ( --  na last )
      0001AF CD 04 42         [ 4]  484         call OVER 
      0001B2 CD 06 86         [ 4]  485         call EQUAL ; ( na last na -- na T|F ) 
      0001B5 CD 03 1C         [ 4]  486         call QBRAN 
      0001B8 01 86                  487         .word FORGET1 
                                    488 ; ( na -- )
      0001BA CD 02 E9         [ 4]  489         call DOLIT 
      0001BD 00 02                  490         .word 2 
      0001BF CD 06 5E         [ 4]  491         call SUBB 
      0001C2 CD 05 74         [ 4]  492         call CPP 
      0001C5 CD 03 5A         [ 4]  493         call STORE  
      0001C8 CD 19 C3         [ 4]  494         call UPDATCP 
      0001CB CC 19 9A         [ 2]  495         jp UPDATLAST 
      0001CE                        496 CANT_FORGET:
      0001CE CD 11 CC         [ 4]  497         call ABORQ
      0001D1 0A                     498         .byte 10
      0001D2 20 50 72 6F 74 65 63   499         .ascii " Protected"
             74 65 64
      0001DC                        500 FORGET2:
      0001DC CD 11 CC         [ 4]  501         call ABORQ
      0001DF 05                     502         .byte 5
      0001E0 20 77 68 61 74         503         .ascii " what"
      0001E5                        504 FORGET4:
      0001E5 CC 04 0E         [ 2]  505         jp DROP 
                                    506 
                                    507 ;---------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                                    508 ; if na is variable 
                                    509 ; free variable data  
                                    510 ; FREEVAR ( na -- )
                                    511 ;---------------------------------
      0001E8 01 4D                  512         .word LINK 
                           0001EA   513         LINK=.
      0001EA 07                     514         .byte 7 
      0001EB 46 52 45 45 56 41 52   515         .ascii "FREEVAR"
      0001F2                        516 FREEVAR:
      0001F2 CD 04 18         [ 4]  517         call DUPP ; ( na na -- )
      0001F5 CD 03 8F         [ 4]  518         CALL CAT  ; ( na c -- )
      0001F8 CD 08 DF         [ 4]  519         call ONEP ;
      0001FB CD 06 00         [ 4]  520         CALL PLUS ; ( na c+1 -- ca ) 
      0001FE CD 08 DF         [ 4]  521         call ONEP ; ( ca+ -- ) to get routne address 
      000201 CD 04 18         [ 4]  522         call DUPP ; ( ca+ ca+ -- )
      000204 CD 03 71         [ 4]  523         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      000207 CD 02 E9         [ 4]  524         call DOLIT 
      00020A 04 C5                  525         .word DOVAR ; if routine address is DOVAR then variable 
      00020C CD 06 86         [ 4]  526         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      00020F CD 03 1C         [ 4]  527         call QBRAN 
      000212 02 28                  528         .word FREEVAR4 
      000214 CD 02 E9         [ 4]  529         call DOLIT 
      000217 00 02                  530         .word 2 
      000219 CD 06 00         [ 4]  531         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      00021C CD 03 71         [ 4]  532         call AT 
      00021F CD 05 66         [ 4]  533         call VPP   
      000222 CD 03 5A         [ 4]  534         call STORE 
      000225 CC 19 DA         [ 2]  535         jp UPDATVP 
      000228                        536 FREEVAR4: ; not variable
      000228 CC 04 0E         [ 2]  537         jp  DROP 
                                    538 
                                    539 ;;
                                    540 ;; get millisecond counter 
                                    541 ;; msec ( -- u )
                                    542 ;; Added by Picatout 2020-04-26
      00022B 01 EA                  543         .word LINK  
                           00022D   544         LINK = . 
      00022D 04                     545         .byte 4
      00022E 4D 53 45 43            546         .ascii "MSEC"
      000232                        547 MSEC: 
      000232 1D 00 02         [ 2]  548         subw x,#CELLL 
      000235 90 BE 2C         [ 2]  549         ldw y,MS 
      000238 FF               [ 2]  550         ldw (x),y 
      000239 81               [ 4]  551         ret 
                                    552 
                                    553 ; suspend execution for u msec 
                                    554 ;  pause ( u -- )
      00023A 02 2D                  555         .word LINK 
                           00023C   556         LINK=.
      00023C 05                     557         .byte 5 
      00023D 50 41 55 53 45         558         .ascii "PAUSE"
      000242                        559 PAUSE:
      000242 90 93            [ 1]  560         ldw y,x
      000244 90 FE            [ 2]  561         ldw y,(y)
      000246 72 B9 00 2C      [ 2]  562         addw y,MS 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      00024A 8F               [10]  563 1$:     wfi  
      00024B 90 B3 2C         [ 2]  564         cpw y,MS  
      00024E 26 FA            [ 1]  565         jrne 1$        
      000250 1C 00 02         [ 2]  566         addw x,#CELLL 
      000253 81               [ 4]  567         ret 
                                    568 
                                    569 ; initialize count down timer 
                                    570 ;  TIMER ( u -- )  milliseconds 
      000254 02 3C                  571         .word LINK 
                           000256   572         LINK=.
      000256 05                     573         .byte 5 
      000257 54 49 4D 45 52         574         .ascii "TIMER" 
      00025C                        575 TIMER:
      00025C 90 93            [ 1]  576         ldw y,x
      00025E 90 FE            [ 2]  577         ldw y,(y) 
      000260 90 BF 2E         [ 2]  578         ldw CNTDWN,y
      000263 1C 00 02         [ 2]  579         addw x,#CELLL 
      000266 81               [ 4]  580         ret 
                                    581 
                                    582 ; check for TIMER exiparition 
                                    583 ;  TIMEOUT? ( -- 0|-1 )
      000267 02 56                  584         .word LINK 
                           000269   585         LINK=. 
      000269 08                     586         .byte 8 
      00026A 54 49 4D 45 4F 55 54   587         .ascii "TIMEOUT?"
             3F
      000272                        588 TIMEOUTQ: 
      000272 4F               [ 1]  589         clr a
      000273 1D 00 02         [ 2]  590         subw x,#CELLL 
      000276 90 BE 2E         [ 2]  591         ldw y,CNTDWN 
      000279 26 01            [ 1]  592         jrne 1$ 
      00027B 43               [ 1]  593         cpl a 
      00027C E7 01            [ 1]  594 1$:     ld (1,x),a 
      00027E F7               [ 1]  595         ld (x),a 
      00027F 81               [ 4]  596         ret         
                                    597 
                                    598 ; reboot MCU 
                                    599 ; REBOOT ( -- )
      000280 02 69                  600         .word LINK 
                           000282   601         LINK=. 
      000282 06                     602         .byte 6 
      000283 52 45 42 4F 4F 54      603         .ascii "REBOOT"
      000289                        604 reboot:
      000289 CC 00 00         [ 2]  605         jp NonHandledInterrupt
                                    606 
                                    607 ; compile to flash memory 
                                    608 ; TO-FLASH ( -- )
      00028C 02 82                  609         .word LINK 
                           00028E   610         LINK=.
      00028E 08                     611         .byte 8
      00028F 54 4F 2D 46 4C 41 53   612         .ascii "TO-FLASH"
             48
      000297                        613 TOFLASH:
      000297 90 AE FF FF      [ 2]  614         ldw y,#-1 
      00029B 90 BF 1E         [ 2]  615         ldw UTFLASH,y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      00029E 81               [ 4]  616         ret 
                                    617 
                                    618 ; compile to RAM 
                                    619 ; TO-RAM ( -- )
      00029F 02 8E                  620         .word LINK 
                           0002A1   621         LINK=.
      0002A1 06                     622         .byte 6 
      0002A2 54 4F 2D 52 41 4D      623         .ascii "TO-RAM"
      0002A8                        624 TORAM:
      0002A8 90 5F            [ 1]  625         clrw y 
      0002AA 90 BF 1E         [ 2]  626         ldw UTFLASH,y 
      0002AD 81               [ 4]  627         ret 
                                    628         
                                    629 
                                    630 ;; Device dependent I/O
                                    631 ;       ?RX     ( -- c T | F )
                                    632 ;         Return input byte and true, or false.
      0002AE 02 A1                  633         .word      LINK 
                           0002B0   634 LINK	= .
      0002B0 04                     635         .byte      4
      0002B1 3F 4B 45 59            636         .ascii     "?KEY"
      0002B5                        637 QKEY:
      0002B5 90 5F            [ 1]  638         CLRW Y 
      0002B7 72 0B 52 30 0B   [ 2]  639         BTJF UART1_SR,#UART_SR_RXNE,INCH   ;check status
      0002BC C6 52 31         [ 1]  640         LD    A,UART1_DR   ;get char in A
      0002BF 1D 00 02         [ 2]  641 	SUBW	X,#2
      0002C2 E7 01            [ 1]  642         LD     (1,X),A
      0002C4 7F               [ 1]  643 	CLR	(X)
      0002C5 90 53            [ 2]  644         CPLW     Y
      0002C7                        645 INCH:
      0002C7 1D 00 02         [ 2]  646 	SUBW	X,#2
      0002CA FF               [ 2]  647         LDW     (X),Y
      0002CB 81               [ 4]  648         RET
                                    649 
                                    650 ;       TX!     ( c -- )
                                    651 ;       Send character c to  output device.
      0002CC 02 B0                  652         .word      LINK
                           0002CE   653 LINK	= .
      0002CE 04                     654         .byte      4
      0002CF 45 4D 49 54            655         .ascii     "EMIT"
      0002D3                        656 EMIT:
      0002D3 E6 01            [ 1]  657         LD     A,(1,X)
      0002D5 1C 00 02         [ 2]  658 	ADDW	X,#2
      0002D8 72 0F 52 30 FB   [ 2]  659 OUTPUT: BTJF UART1_SR,#UART_SR_TXE,OUTPUT  ;loop until tdre
      0002DD C7 52 31         [ 1]  660         LD    UART1_DR,A   ;send A
      0002E0 81               [ 4]  661         RET
                                    662 
                                    663 ;; The kernel
                                    664 
                                    665 ;       doLIT   ( -- w )
                                    666 ;       Push an inline literal.
      0002E1 02 CE                  667         .word      LINK
                           0002E3   668 LINK	= 	.
      0002E3 45                     669 	.byte      COMPO+5
      0002E4 44 4F 4C 49 54         670         .ascii     "DOLIT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      0002E9                        671 DOLIT:
      0002E9 1D 00 02         [ 2]  672 	SUBW X,#2
                           000001   673 .if PICATOUT_MOD 
      0002EC 16 01            [ 2]  674         ldw y,(1,sp)
      0002EE 90 FE            [ 2]  675         ldw y,(y)
      0002F0 FF               [ 2]  676         ldw (x),y
      0002F1 90 85            [ 2]  677         popw y 
      0002F3 90 EC 02         [ 2]  678         jp (2,y)
                           000000   679 .else 
                                    680         POPW Y
                                    681 	LDW YTEMP,Y
                                    682 	LDW Y,(Y)
                                    683         LDW (X),Y
                                    684         LDW Y,YTEMP
                                    685 	JP (2,Y)
                                    686 .endif 
                                    687 
                                    688 ;       next    ( -- )
                                    689 ;       Code for  single index loop.
      0002F6 02 E3                  690         .word      LINK
                           0002F8   691 LINK	= 	.
      0002F8 44                     692 	.byte      COMPO+4
      0002F9 4E 45 58 54            693         .ascii     "NEXT"
      0002FD                        694 DONXT:
      0002FD 16 03            [ 2]  695 	LDW Y,(3,SP)
      0002FF 90 5A            [ 2]  696 	DECW Y
      000301 2A 07            [ 1]  697 	JRPL NEX1 ; jump if N=0
      000303 90 85            [ 2]  698 	POPW Y
                           000001   699 .if PICATOUT_MOD
      000305 5B 02            [ 2]  700         addw sp,#2
                           000000   701 .else        
                                    702 	POP A
                                    703 	POP A
                                    704 .endif         
      000307 90 EC 02         [ 2]  705         JP (2,Y)
      00030A                        706 NEX1:
      00030A 17 03            [ 2]  707         LDW (3,SP),Y
      00030C 90 85            [ 2]  708         POPW Y
      00030E 90 FE            [ 2]  709 	LDW Y,(Y)
      000310 90 FC            [ 2]  710 	JP (Y)
                                    711 
                                    712 ;       ?branch ( f -- )
                                    713 ;       Branch if flag is zero.
      000312 02 F8                  714         .word      LINK
                           000314   715 LINK	= 	.
      000314 47                     716 	.byte      COMPO+7
      000315 3F 42 52 41 4E 43 48   717         .ascii     "?BRANCH"
      00031C                        718 QBRAN:	
      00031C 90 93            [ 1]  719         LDW Y,X
      00031E 1C 00 02         [ 2]  720 	ADDW X,#2
      000321 90 FE            [ 2]  721 	LDW Y,(Y)
      000323 27 0E            [ 1]  722         JREQ     BRAN
      000325 90 85            [ 2]  723 	POPW Y
      000327 90 EC 02         [ 2]  724 	JP (2,Y)
                                    725         
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                                    726 ;       branch  ( -- )
                                    727 ;       Branch to an inline address.
      00032A 03 14                  728         .word      LINK
                           00032C   729 LINK	= 	.
      00032C 46                     730 	.byte      COMPO+6
      00032D 42 52 41 4E 43 48      731         .ascii     "BRANCH"
      000333                        732 BRAN:
      000333 90 85            [ 2]  733         POPW Y
      000335 90 FE            [ 2]  734 	LDW Y,(Y)
      000337 90 FC            [ 2]  735         JP     (Y)
                                    736 
                                    737 ;       EXECUTE ( ca -- )
                                    738 ;       Execute  word at ca.
      000339 03 2C                  739         .word      LINK
                           00033B   740 LINK	= 	.
      00033B 07                     741         .byte       7
      00033C 45 58 45 43 55 54 45   742         .ascii     "EXECUTE"
      000343                        743 EXECU:
      000343 90 93            [ 1]  744         LDW Y,X
      000345 1C 00 02         [ 2]  745 	ADDW X,#2
      000348 90 FE            [ 2]  746 	LDW  Y,(Y)
      00034A 90 FC            [ 2]  747         JP   (Y)
                                    748 
                                    749 ;       EXIT    ( -- )
                                    750 ;       Terminate a colon definition.
      00034C 03 3B                  751         .word      LINK
                           00034E   752 LINK = .
      00034E 04                     753         .byte      4
      00034F 45 58 49 54            754         .ascii     "EXIT"
      000353                        755 EXIT:
      000353 90 85            [ 2]  756         POPW Y
      000355 81               [ 4]  757         RET
                                    758 
                                    759 ;       !       ( w a -- )
                                    760 ;       Pop  data stack to memory.
      000356 03 4E                  761         .word      LINK
                           000358   762 LINK = .
      000358 01                     763         .byte      1
      000359 21                     764         .ascii     "!"
      00035A                        765 STORE:
      00035A 90 93            [ 1]  766         LDW Y,X
      00035C 90 FE            [ 2]  767         LDW Y,(Y)    ;Y=a
      00035E 90 BF 22         [ 2]  768         LDW YTEMP,Y
      000361 90 93            [ 1]  769         LDW Y,X
      000363 90 EE 02         [ 2]  770         LDW Y,(2,Y)
      000366 91 CF 22         [ 5]  771         LDW [YTEMP],Y ;store w at a
      000369 1C 00 04         [ 2]  772         ADDW X,#4 ; DDROP 
      00036C 81               [ 4]  773         RET     
                                    774 
                                    775 ;       @       ( a -- w )
                                    776 ;       Push memory location to stack.
      00036D 03 58                  777         .word      LINK
                           00036F   778 LINK	= 	.
      00036F 01                     779         .byte    1
      000370 40                     780         .ascii	"@"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      000371                        781 AT:
      000371 90 93            [ 1]  782         LDW Y,X     ;Y = a
      000373 90 FE            [ 2]  783         LDW Y,(Y)   ; address 
      000375 90 FE            [ 2]  784         LDW Y,(Y)   ; value 
      000377 FF               [ 2]  785         LDW (X),Y ;w = @Y
      000378 81               [ 4]  786         RET     
                                    787 
                                    788 ;       C!      ( c b -- )
                                    789 ;       Pop  data stack to byte memory.
      000379 03 6F                  790         .word      LINK
                           00037B   791 LINK	= .
      00037B 02                     792         .byte      2
      00037C 43 21                  793         .ascii     "C!"
      00037E                        794 CSTOR:
      00037E 90 93            [ 1]  795         LDW Y,X
      000380 90 FE            [ 2]  796 	LDW Y,(Y)    ;Y=b
      000382 E6 03            [ 1]  797         LD A,(3,X)    ;D = c
      000384 90 F7            [ 1]  798         LD  (Y),A     ;store c at b
      000386 1C 00 04         [ 2]  799 	ADDW X,#4 ; DDROP 
      000389 81               [ 4]  800         RET     
                                    801 
                                    802 ;       C@      ( b -- c )
                                    803 ;       Push byte in memory to  stack.
      00038A 03 7B                  804         .word      LINK
                           00038C   805 LINK	= 	.
      00038C 02                     806         .byte      2
      00038D 43 40                  807         .ascii     "C@"
      00038F                        808 CAT:
      00038F 90 93            [ 1]  809         LDW Y,X     ;Y=b
      000391 90 FE            [ 2]  810         LDW Y,(Y)
      000393 90 F6            [ 1]  811         LD A,(Y)
      000395 E7 01            [ 1]  812         LD (1,X),A
      000397 7F               [ 1]  813         CLR (X)
      000398 81               [ 4]  814         RET     
                                    815 
                                    816 ;       RP@     ( -- a )
                                    817 ;       Push current RP to data stack.
      000399 03 8C                  818         .word      LINK
                           00039B   819 LINK	= .
      00039B 03                     820         .byte      3
      00039C 52 50 40               821         .ascii     "RP@"
      00039F                        822 RPAT:
      00039F 90 96            [ 1]  823         LDW Y,SP    ;save return addr
      0003A1 1D 00 02         [ 2]  824         SUBW X,#2
      0003A4 FF               [ 2]  825         LDW (X),Y
      0003A5 81               [ 4]  826         RET     
                                    827 
                                    828 ;       RP!     ( a -- )
                                    829 ;       Set  return stack pointer.
      0003A6 03 9B                  830         .word      LINK
                           0003A8   831 LINK	= 	. 
      0003A8 43                     832 	.byte      COMPO+3
      0003A9 52 50 21               833         .ascii     "RP!"
      0003AC                        834 RPSTO:
      0003AC 90 85            [ 2]  835         POPW Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      0003AE 90 BF 22         [ 2]  836         LDW YTEMP,Y
      0003B1 90 93            [ 1]  837         LDW Y,X
      0003B3 90 FE            [ 2]  838         LDW Y,(Y)
      0003B5 90 94            [ 1]  839         LDW SP,Y
      0003B7 1C 00 02         [ 2]  840         ADDW x,#CELLL ; a was not dropped, Picatout 2020-05-24
      0003BA 92 CC 22         [ 5]  841         JP [YTEMP]
                                    842 
                                    843 ;       R>      ( -- w )
                                    844 ;       Pop return stack to data stack.
      0003BD 03 A8                  845         .word      LINK
                           0003BF   846 LINK	= 	. 
      0003BF 42                     847 	.byte      COMPO+2
      0003C0 52 3E                  848         .ascii     "R>"
      0003C2                        849 RFROM:
      0003C2 90 85            [ 2]  850         POPW Y    ;save return addr
      0003C4 90 BF 22         [ 2]  851         LDW YTEMP,Y
      0003C7 90 85            [ 2]  852         POPW Y
      0003C9 1D 00 02         [ 2]  853         SUBW X,#2
      0003CC FF               [ 2]  854         LDW (X),Y
      0003CD 92 CC 22         [ 5]  855         JP [YTEMP]
                                    856 
                                    857 ;       R@      ( -- w )
                                    858 ;       Copy top of return stack to stack.
      0003D0 03 BF                  859         .word      LINK
                           0003D2   860 LINK	= 	. 
      0003D2 02                     861         .byte      2
      0003D3 52 40                  862         .ascii     "R@"
      0003D5                        863 RAT:
                           000001   864 .if PICATOUT_MOD
      0003D5 16 03            [ 2]  865         ldw y,(3,sp)
      0003D7 1D 00 02         [ 2]  866         subw x,#CELLL 
      0003DA FF               [ 2]  867         ldw (x),y 
      0003DB 81               [ 4]  868         ret 
                           000000   869 .else 
                                    870         POPW Y
                                    871         LDW YTEMP,Y
                                    872         POPW Y
                                    873         PUSHW Y
                                    874         SUBW X,#2
                                    875         LDW (X),Y
                                    876         JP [YTEMP]
                                    877 .endif         
                                    878 
                                    879 ;       >R      ( w -- )
                                    880 ;       Push data stack to return stack.
      0003DC 03 D2                  881         .word      LINK
                           0003DE   882 LINK	= 	. 
      0003DE 42                     883 	.byte      COMPO+2
      0003DF 3E 52                  884         .ascii     ">R"
      0003E1                        885 TOR:
      0003E1 90 85            [ 2]  886         POPW Y    ;save return addr
      0003E3 90 BF 22         [ 2]  887         LDW YTEMP,Y
      0003E6 90 93            [ 1]  888         LDW Y,X
      0003E8 90 FE            [ 2]  889         LDW Y,(Y)
      0003EA 90 89            [ 2]  890         PUSHW Y    ;restore return addr
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      0003EC 1C 00 02         [ 2]  891         ADDW X,#2
      0003EF 92 CC 22         [ 5]  892         JP [YTEMP]
                                    893 
                                    894 ;       SP@     ( -- a )
                                    895 ;       Push current stack pointer.
      0003F2 03 DE                  896         .word      LINK
                           0003F4   897 LINK	= 	. 
      0003F4 03                     898         .byte      3
      0003F5 53 50 40               899         .ascii     "SP@"
      0003F8                        900 SPAT:
      0003F8 90 93            [ 1]  901 	LDW Y,X
      0003FA 1D 00 02         [ 2]  902         SUBW X,#2
      0003FD FF               [ 2]  903 	LDW (X),Y
      0003FE 81               [ 4]  904         RET     
                                    905 
                                    906 ;       SP!     ( a -- )
                                    907 ;       Set  data stack pointer.
      0003FF 03 F4                  908         .word      LINK
                           000401   909 LINK	= 	. 
      000401 03                     910         .byte      3
      000402 53 50 21               911         .ascii     "SP!"
      000405                        912 SPSTO:
      000405 FE               [ 2]  913         LDW     X,(X)     ;X = a
      000406 81               [ 4]  914         RET     
                                    915 
                                    916 ;       DROP    ( w -- )
                                    917 ;       Discard top stack item.
      000407 04 01                  918         .word      LINK
                           000409   919 LINK	= 	. 
      000409 04                     920         .byte      4
      00040A 44 52 4F 50            921         .ascii     "DROP"
      00040E                        922 DROP:
      00040E 1C 00 02         [ 2]  923         ADDW X,#2     
      000411 81               [ 4]  924         RET     
                                    925 
                                    926 ;       DUP     ( w -- w w )
                                    927 ;       Duplicate  top stack item.
      000412 04 09                  928         .word      LINK
                           000414   929 LINK	= 	. 
      000414 03                     930         .byte      3
      000415 44 55 50               931         .ascii     "DUP"
      000418                        932 DUPP:
      000418 90 93            [ 1]  933 	LDW Y,X
      00041A 1D 00 02         [ 2]  934         SUBW X,#2
      00041D 90 FE            [ 2]  935 	LDW Y,(Y)
      00041F FF               [ 2]  936 	LDW (X),Y
      000420 81               [ 4]  937         RET     
                                    938 
                                    939 ;       SWAP    ( w1 w2 -- w2 w1 )
                                    940 ;       Exchange top two stack items.
      000421 04 14                  941         .word      LINK
                           000423   942 LINK	= 	. 
      000423 04                     943         .byte      4
      000424 53 57 41 50            944         .ascii     "SWAP"
      000428                        945 SWAPP:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      000428 90 93            [ 1]  946         LDW Y,X
      00042A 90 FE            [ 2]  947         LDW Y,(Y)
      00042C 90 BF 22         [ 2]  948         LDW YTEMP,Y
      00042F 90 93            [ 1]  949         LDW Y,X
      000431 90 EE 02         [ 2]  950         LDW Y,(2,Y)
      000434 FF               [ 2]  951         LDW (X),Y
      000435 90 BE 22         [ 2]  952         LDW Y,YTEMP
      000438 EF 02            [ 2]  953         LDW (2,X),Y
      00043A 81               [ 4]  954         RET     
                                    955 
                                    956 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                    957 ;       Copy second stack item to top.
      00043B 04 23                  958         .word      LINK
                           00043D   959 LINK	= . 
      00043D 04                     960         .byte      4
      00043E 4F 56 45 52            961         .ascii     "OVER"
      000442                        962 OVER:
      000442 1D 00 02         [ 2]  963         SUBW X,#2
      000445 90 93            [ 1]  964         LDW Y,X
      000447 90 EE 04         [ 2]  965         LDW Y,(4,Y)
      00044A FF               [ 2]  966         LDW (X),Y
      00044B 81               [ 4]  967         RET     
                                    968 
                                    969 ;       0<      ( n -- t )
                                    970 ;       Return true if n is negative.
      00044C 04 3D                  971         .word      LINK
                           00044E   972 LINK	= . 
      00044E 02                     973         .byte      2
      00044F 30 3C                  974         .ascii     "0<"
      000451                        975 ZLESS:
      000451 A6 FF            [ 1]  976         LD A,#0xFF
      000453 90 93            [ 1]  977         LDW Y,X
      000455 90 FE            [ 2]  978         LDW Y,(Y)
      000457 2B 01            [ 1]  979         JRMI     ZL1
      000459 4F               [ 1]  980         CLR A   ;false
      00045A F7               [ 1]  981 ZL1:    LD     (X),A
      00045B E7 01            [ 1]  982         LD (1,X),A
      00045D 81               [ 4]  983 	RET     
                                    984 
                                    985 ;       AND     ( w w -- w )
                                    986 ;       Bitwise AND.
      00045E 04 4E                  987         .word      LINK
                           000460   988 LINK	= . 
      000460 03                     989         .byte      3
      000461 41 4E 44               990         .ascii     "AND"
      000464                        991 ANDD:
      000464 F6               [ 1]  992         LD  A,(X)    ;D=w
      000465 E4 02            [ 1]  993         AND A,(2,X)
      000467 E7 02            [ 1]  994         LD (2,X),A
      000469 E6 01            [ 1]  995         LD A,(1,X)
      00046B E4 03            [ 1]  996         AND A,(3,X)
      00046D E7 03            [ 1]  997         LD (3,X),A
      00046F 1C 00 02         [ 2]  998         ADDW X,#2
      000472 81               [ 4]  999         RET
                                   1000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                                   1001 ;       OR      ( w w -- w )
                                   1002 ;       Bitwise inclusive OR.
      000473 04 60                 1003         .word      LINK
                           000475  1004 LINK = . 
      000475 02                    1005         .byte      2
      000476 4F 52                 1006         .ascii     "OR"
      000478                       1007 ORR:
      000478 F6               [ 1] 1008         LD A,(X)    ;D=w
      000479 EA 02            [ 1] 1009         OR A,(2,X)
      00047B E7 02            [ 1] 1010         LD (2,X),A
      00047D E6 01            [ 1] 1011         LD A,(1,X)
      00047F EA 03            [ 1] 1012         OR A,(3,X)
      000481 E7 03            [ 1] 1013         LD (3,X),A
      000483 1C 00 02         [ 2] 1014         ADDW X,#2
      000486 81               [ 4] 1015         RET
                                   1016 
                                   1017 ;       XOR     ( w w -- w )
                                   1018 ;       Bitwise exclusive OR.
      000487 04 75                 1019         .word      LINK
                           000489  1020 LINK	= . 
      000489 03                    1021         .byte      3
      00048A 58 4F 52              1022         .ascii     "XOR"
      00048D                       1023 XORR:
      00048D F6               [ 1] 1024         LD A,(X)    ;D=w
      00048E E8 02            [ 1] 1025         XOR A,(2,X)
      000490 E7 02            [ 1] 1026         LD (2,X),A
      000492 E6 01            [ 1] 1027         LD A,(1,X)
      000494 E8 03            [ 1] 1028         XOR A,(3,X)
      000496 E7 03            [ 1] 1029         LD (3,X),A
      000498 1C 00 02         [ 2] 1030         ADDW X,#2
      00049B 81               [ 4] 1031         RET
                                   1032 
                                   1033 ;       UM+     ( u u -- udsum )
                                   1034 ;       Add two unsigned single
                                   1035 ;       and return a double sum.
      00049C 04 89                 1036         .word      LINK
                           00049E  1037 LINK	= . 
      00049E 03                    1038         .byte      3
      00049F 55 4D 2B              1039         .ascii     "UM+"
      0004A2                       1040 UPLUS:
      0004A2 A6 01            [ 1] 1041         LD A,#1
      0004A4 90 93            [ 1] 1042         LDW Y,X
      0004A6 90 EE 02         [ 2] 1043         LDW Y,(2,Y)
      0004A9 90 BF 22         [ 2] 1044         LDW YTEMP,Y
      0004AC 90 93            [ 1] 1045         LDW Y,X
      0004AE 90 FE            [ 2] 1046         LDW Y,(Y)
      0004B0 72 B9 00 22      [ 2] 1047         ADDW Y,YTEMP
      0004B4 EF 02            [ 2] 1048         LDW (2,X),Y
      0004B6 25 01            [ 1] 1049         JRC     UPL1
      0004B8 4F               [ 1] 1050         CLR A
      0004B9 E7 01            [ 1] 1051 UPL1:   LD     (1,X),A
      0004BB 7F               [ 1] 1052         CLR (X)
      0004BC 81               [ 4] 1053         RET
                                   1054 
                                   1055 ;; System and user variables
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                   1056 
                                   1057 ;       doVAR   ( -- a )
                                   1058 ;       Code for VARIABLE and CREATE.
      0004BD 04 9E                 1059         .word      LINK
                           0004BF  1060 LINK	= . 
      0004BF 45                    1061 	.byte      COMPO+5
      0004C0 44 4F 56 41 52        1062         .ascii     "DOVAR"
      0004C5                       1063 DOVAR:
      0004C5 1D 00 02         [ 2] 1064 	SUBW X,#2
      0004C8 90 85            [ 2] 1065         POPW Y    ;get return addr (pfa)
                           000001  1066 .if PICATOUT_MOD
      0004CA 90 FE            [ 2] 1067         LDW Y,(Y) ; indirect address 
                                   1068 .endif ;PICATOUT_MOD        
      0004CC FF               [ 2] 1069         LDW (X),Y    ;push on stack
      0004CD 81               [ 4] 1070         RET     ;go to RET of EXEC
                                   1071 
                                   1072 ;       BASE    ( -- a )
                                   1073 ;       Radix base for numeric I/O.
      0004CE 04 BF                 1074         .word      LINK        
                           0004D0  1075 LINK = . 
      0004D0 04                    1076         .byte      4
      0004D1 42 41 53 45           1077         .ascii     "BASE"
      0004D5                       1078 BASE:
      0004D5 90 AE 00 06      [ 2] 1079 	LDW Y,#UBASE 
      0004D9 1D 00 02         [ 2] 1080 	SUBW X,#2
      0004DC FF               [ 2] 1081         LDW (X),Y
      0004DD 81               [ 4] 1082         RET
                                   1083 
                                   1084 ;       tmp     ( -- a )
                                   1085 ;       A temporary storage.
      0004DE 04 D0                 1086         .word      LINK
                                   1087         
                           0004E0  1088 LINK = . 
      0004E0 03                    1089 	.byte      3
      0004E1 54 4D 50              1090         .ascii     "TMP"
      0004E4                       1091 TEMP:
      0004E4 90 AE 00 08      [ 2] 1092 	LDW Y,#UTMP
      0004E8 1D 00 02         [ 2] 1093 	SUBW X,#2
      0004EB FF               [ 2] 1094         LDW (X),Y
      0004EC 81               [ 4] 1095         RET
                                   1096 
                                   1097 ;       >IN     ( -- a )
                                   1098 ;        Hold parsing pointer.
      0004ED 04 E0                 1099         .word      LINK
                           0004EF  1100 LINK = . 
      0004EF 03                    1101         .byte      3
      0004F0 3E 49 4E              1102         .ascii    ">IN"
      0004F3                       1103 INN:
      0004F3 90 AE 00 0A      [ 2] 1104 	LDW Y,#UINN 
      0004F7 1D 00 02         [ 2] 1105 	SUBW X,#2
      0004FA FF               [ 2] 1106         LDW (X),Y
      0004FB 81               [ 4] 1107         RET
                                   1108 
                                   1109 ;       #TIB    ( -- a )
                                   1110 ;       Count in terminal input buffer.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      0004FC 04 EF                 1111         .word      LINK
                           0004FE  1112 LINK = . 
      0004FE 04                    1113         .byte      4
      0004FF 23 54 49 42           1114         .ascii     "#TIB"
      000503                       1115 NTIB:
      000503 90 AE 00 0C      [ 2] 1116 	LDW Y,#UCTIB 
      000507 1D 00 02         [ 2] 1117 	SUBW X,#2
      00050A FF               [ 2] 1118         LDW (X),Y
      00050B 81               [ 4] 1119         RET
                                   1120 
                           000001  1121 .if PICATOUT_MOD
                                   1122 ;       TBUF ( -- a )
                                   1123 ;       address of 128 bytes transaction buffer 
      00050C 04 FE                 1124         .word LINK 
                           00050E  1125         LINK=.
      00050E 04                    1126         .byte 4 
      00050F 54 42 55 46           1127         .ascii "TBUF"
      000513                       1128 TBUF:
      000513 90 AE 16 80      [ 2] 1129         ldw y,#ROWBUFF
      000517 1D 00 02         [ 2] 1130         subw x,#CELLL
      00051A FF               [ 2] 1131         ldw (x),y 
      00051B 81               [ 4] 1132         ret 
                                   1133 
                                   1134 ; systeme variable 
                                   1135 ; compilation destination 
                                   1136 ; TFLASH ( -- A )
      00051C 05 0E                 1137         .word LINK 
                           00051E  1138         LINK=.
      00051E 06                    1139         .byte 6 
      00051F 54 46 4C 41 53 48     1140         .ascii "TFLASH"         
      000525                       1141 TFLASH:
      000525 1D 00 02         [ 2] 1142         subw x,#CELLL 
      000528 90 AE 00 1E      [ 2] 1143         ldw y,#UTFLASH
      00052C FF               [ 2] 1144         ldw (x),y 
      00052D 81               [ 4] 1145         ret 
                                   1146 
                                   1147 .endif ;PICATOUT_MOD
                                   1148 
                                   1149 ;       "EVAL   ( -- a )
                                   1150 ;       Execution vector of EVAL.
      00052E 05 1E                 1151         .word      LINK
                           000530  1152 LINK = . 
      000530 05                    1153         .byte      5
      000531 27 45 56 41 4C        1154         .ascii     "'EVAL"
      000536                       1155 TEVAL:
      000536 90 AE 00 10      [ 2] 1156 	LDW Y,#UINTER 
      00053A 1D 00 02         [ 2] 1157 	SUBW X,#2
      00053D FF               [ 2] 1158         LDW (X),Y
      00053E 81               [ 4] 1159         RET
                                   1160 
                                   1161 ;       HLD     ( -- a )
                                   1162 ;       Hold a pointer of output string.
      00053F 05 30                 1163         .word      LINK
                           000541  1164 LINK = . 
      000541 03                    1165         .byte      3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      000542 48 4C 44              1166         .ascii     "HLD"
      000545                       1167 HLD:
      000545 90 AE 00 12      [ 2] 1168 	LDW Y,#UHLD 
      000549 1D 00 02         [ 2] 1169 	SUBW X,#2
      00054C FF               [ 2] 1170         LDW (X),Y
      00054D 81               [ 4] 1171         RET
                                   1172 
                                   1173 ;       CONTEXT ( -- a )
                                   1174 ;       Start vocabulary search.
      00054E 05 41                 1175         .word      LINK
                           000550  1176 LINK = . 
      000550 07                    1177         .byte      7
      000551 43 4F 4E 54 45 58 54  1178         .ascii     "CONTEXT"
      000558                       1179 CNTXT:
      000558 90 AE 00 14      [ 2] 1180 	LDW Y,#UCNTXT
      00055C 1D 00 02         [ 2] 1181 	SUBW X,#2
      00055F FF               [ 2] 1182         LDW (X),Y
      000560 81               [ 4] 1183         RET
                                   1184 
                                   1185 ;       VP      ( -- a )
                                   1186 ;       Point to top of variables
      000561 05 50                 1187         .word      LINK
                           000563  1188 LINK = . 
      000563 02                    1189         .byte      2
      000564 56 50                 1190         .ascii     "VP"
      000566                       1191 VPP:
      000566 90 AE 00 16      [ 2] 1192 	LDW Y,#UVP 
      00056A 1D 00 02         [ 2] 1193 	SUBW X,#2
      00056D FF               [ 2] 1194         LDW (X),Y
      00056E 81               [ 4] 1195         RET
                                   1196 
                           000001  1197 .if PICATOUT_MOD
                                   1198 ;       CP    ( -- a )
                                   1199 ;       Pointer to top of FLASH 
      00056F 05 63                 1200         .word LINK 
                           000571  1201         LINK=.
      000571 03                    1202         .byte 3 
      000572 43 50                 1203         .ascii "CP"
      000574                       1204 CPP: 
      000574 90 AE 00 18      [ 2] 1205         ldw y,#UCP 
      000578 1D 00 02         [ 2] 1206         subw x,#CELLL 
      00057B FF               [ 2] 1207         ldw (x),y 
      00057C 81               [ 4] 1208         ret                
                                   1209 .endif ;PICATOUT_MOD
                                   1210 
                                   1211 ;       LAST    ( -- a )
                                   1212 ;       Point to last name in dictionary.
      00057D 05 71                 1213         .word      LINK
                           00057F  1214 LINK = . 
      00057F 04                    1215         .byte      4
      000580 4C 41 53 54           1216         .ascii     "LAST"
      000584                       1217 LAST:
      000584 90 AE 00 1A      [ 2] 1218 	LDW Y,#ULAST 
      000588 1D 00 02         [ 2] 1219 	SUBW X,#2
      00058B FF               [ 2] 1220         LDW (X),Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      00058C 81               [ 4] 1221         RET
                                   1222 
                           000001  1223 .if PICATOUT_MOD
      00058D 05 7F                 1224         .word LINK 
                           00058F  1225         LINK=.
      00058F 06                    1226         .byte 6
      000590 4F 46 46 53 45 54     1227         .ascii "OFFSET" 
      000596                       1228 OFFSET: 
      000596 1D 00 02         [ 2] 1229         subw x,#CELLL
      000599 90 AE 00 1C      [ 2] 1230         ldw y,#UOFFSET 
      00059D FF               [ 2] 1231         ldw (x),y 
      00059E 81               [ 4] 1232         ret 
                                   1233 
                                   1234 ; adjust jump address adding OFFSET
                                   1235 ; ADR-ADJ ( a -- a+offset )
      00059F                       1236 ADRADJ: 
      00059F CD 05 96         [ 4] 1237         call OFFSET 
      0005A2 CD 03 71         [ 4] 1238         call AT 
      0005A5 CC 06 00         [ 2] 1239         jp PLUS 
                                   1240 
                                   1241 .endif ; PICATOUT_MOD
                                   1242 
                                   1243 ;; Common functions
                                   1244 
                                   1245 ;       ?DUP    ( w -- w w | 0 )
                                   1246 ;       Dup tos if its is not zero.
      0005A8 05 8F                 1247         .word      LINK
                           0005AA  1248 LINK = . 
      0005AA 04                    1249         .byte      4
      0005AB 3F 44 55 50           1250         .ascii     "?DUP"
      0005AF                       1251 QDUP:
      0005AF 90 93            [ 1] 1252         LDW Y,X
      0005B1 90 FE            [ 2] 1253 	LDW Y,(Y)
      0005B3 27 04            [ 1] 1254         JREQ     QDUP1
      0005B5 1D 00 02         [ 2] 1255 	SUBW X,#2
      0005B8 FF               [ 2] 1256         LDW (X),Y
      0005B9 81               [ 4] 1257 QDUP1:  RET
                                   1258 
                                   1259 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1260 ;       Rot 3rd item to top.
      0005BA 05 AA                 1261         .word      LINK
                           0005BC  1262 LINK = . 
      0005BC 03                    1263         .byte      3
      0005BD 52 4F 54              1264         .ascii     "ROT"
      0005C0                       1265 ROT:
                           000001  1266 .if PICATOUT_MOD
      0005C0 90 93            [ 1] 1267         ldw y,x 
      0005C2 90 FE            [ 2] 1268         ldw y,(y)
      0005C4 90 89            [ 2] 1269         pushw y 
      0005C6 90 93            [ 1] 1270         ldw y,x 
      0005C8 90 EE 04         [ 2] 1271         ldw y,(4,y)
      0005CB FF               [ 2] 1272         ldw (x),y 
      0005CC 90 93            [ 1] 1273         ldw y,x 
      0005CE 90 EE 02         [ 2] 1274         ldw y,(2,y)
      0005D1 EF 04            [ 2] 1275         ldw (4,x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      0005D3 90 85            [ 2] 1276         popw y 
      0005D5 EF 02            [ 2] 1277         ldw (2,x),y
      0005D7 81               [ 4] 1278         ret 
                           000000  1279 .else 
                                   1280         LDW Y,X
                                   1281 	LDW Y,(4,Y)
                                   1282 	LDW YTEMP,Y
                                   1283         LDW Y,X
                                   1284         LDW Y,(2,Y)
                                   1285         LDW XTEMP,Y
                                   1286         LDW Y,X
                                   1287         LDW Y,(Y)
                                   1288         LDW (2,X),Y
                                   1289         LDW Y,XTEMP
                                   1290         LDW (4,X),Y
                                   1291         LDW Y,YTEMP
                                   1292         LDW (X),Y
                                   1293         RET
                                   1294 .endif 
                                   1295 
                                   1296 ;       2DROP   ( w w -- )
                                   1297 ;       Discard two items on stack.
      0005D8 05 BC                 1298         .word      LINK
                           0005DA  1299 LINK = . 
      0005DA 05                    1300         .byte      5
      0005DB 32 44 52 4F 50        1301         .ascii     "2DROP"
      0005E0                       1302 DDROP:
      0005E0 1C 00 04         [ 2] 1303         ADDW X,#4
      0005E3 81               [ 4] 1304         RET
                                   1305 
                                   1306 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1307 ;       Duplicate top two items.
      0005E4 05 DA                 1308         .word      LINK
                           0005E6  1309 LINK = . 
      0005E6 04                    1310         .byte      4
      0005E7 32 44 55 50           1311         .ascii     "2DUP"
      0005EB                       1312 DDUP:
      0005EB 1D 00 04         [ 2] 1313         SUBW X,#4
      0005EE 90 93            [ 1] 1314         LDW Y,X
      0005F0 90 EE 06         [ 2] 1315         LDW Y,(6,Y)
      0005F3 EF 02            [ 2] 1316         LDW (2,X),Y
      0005F5 90 93            [ 1] 1317         LDW Y,X
      0005F7 90 EE 04         [ 2] 1318         LDW Y,(4,Y)
      0005FA FF               [ 2] 1319         LDW (X),Y
      0005FB 81               [ 4] 1320         RET
                                   1321 
                                   1322 ;       +       ( w w -- sum )
                                   1323 ;       Add top two items.
      0005FC 05 E6                 1324         .word      LINK
                           0005FE  1325 LINK = . 
      0005FE 01                    1326         .byte      1
      0005FF 2B                    1327         .ascii     "+"
      000600                       1328 PLUS:
      000600 90 93            [ 1] 1329         LDW Y,X
      000602 90 FE            [ 2] 1330         LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      000604 90 BF 22         [ 2] 1331         LDW YTEMP,Y
      000607 1C 00 02         [ 2] 1332         ADDW X,#2
      00060A 90 93            [ 1] 1333         LDW Y,X
      00060C 90 FE            [ 2] 1334         LDW Y,(Y)
      00060E 72 B9 00 22      [ 2] 1335         ADDW Y,YTEMP
      000612 FF               [ 2] 1336         LDW (X),Y
      000613 81               [ 4] 1337         RET
                                   1338 
                                   1339 ;       NOT     ( w -- w )
                                   1340 ;       One's complement of tos.
      000614 05 FE                 1341         .word      LINK
                           000616  1342 LINK = . 
      000616 03                    1343         .byte      3
      000617 4E 4F 54              1344         .ascii     "NOT"
      00061A                       1345 INVER:
      00061A 90 93            [ 1] 1346         LDW Y,X
      00061C 90 FE            [ 2] 1347         LDW Y,(Y)
      00061E 90 53            [ 2] 1348         CPLW Y
      000620 FF               [ 2] 1349         LDW (X),Y
      000621 81               [ 4] 1350         RET
                                   1351 
                                   1352 ;       NEGATE  ( n -- -n )
                                   1353 ;       Two's complement of tos.
      000622 06 16                 1354         .word      LINK
                           000624  1355 LINK = . 
      000624 06                    1356         .byte      6
      000625 4E 45 47 41 54 45     1357         .ascii     "NEGATE"
      00062B                       1358 NEGAT:
      00062B 90 93            [ 1] 1359         LDW Y,X
      00062D 90 FE            [ 2] 1360         LDW Y,(Y)
      00062F 90 50            [ 2] 1361         NEGW Y
      000631 FF               [ 2] 1362         LDW (X),Y
      000632 81               [ 4] 1363         RET
                                   1364 
                                   1365 ;       DNEGATE ( d -- -d )
                                   1366 ;       Two's complement of top double.
      000633 06 24                 1367         .word      LINK
                           000635  1368 LINK = . 
      000635 07                    1369         .byte      7
      000636 44 4E 45 47 41 54 45  1370         .ascii     "DNEGATE"
      00063D                       1371 DNEGA:
      00063D 90 93            [ 1] 1372         LDW Y,X
      00063F 90 FE            [ 2] 1373 	LDW Y,(Y)
      000641 90 53            [ 2] 1374         CPLW Y     
      000643 90 BF 22         [ 2] 1375 	LDW YTEMP,Y
      000646 90 93            [ 1] 1376         LDW Y,X
      000648 90 EE 02         [ 2] 1377         LDW Y,(2,Y)
      00064B 90 53            [ 2] 1378         CPLW Y
      00064D 90 5C            [ 2] 1379         INCW Y
      00064F EF 02            [ 2] 1380         LDW (2,X),Y
      000651 90 BE 22         [ 2] 1381         LDW Y,YTEMP
      000654 24 02            [ 1] 1382         JRNC DN1 
      000656 90 5C            [ 2] 1383         INCW Y
      000658 FF               [ 2] 1384 DN1:    LDW (X),Y
      000659 81               [ 4] 1385         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                   1386 
                                   1387 ;       -       ( n1 n2 -- n1-n2 )
                                   1388 ;       Subtraction.
      00065A 06 35                 1389         .word      LINK
                           00065C  1390 LINK = . 
      00065C 01                    1391         .byte      1
      00065D 2D                    1392         .ascii     "-"
      00065E                       1393 SUBB:
      00065E 90 93            [ 1] 1394         LDW Y,X
      000660 90 FE            [ 2] 1395         LDW Y,(Y)
      000662 90 BF 22         [ 2] 1396         LDW YTEMP,Y
      000665 1C 00 02         [ 2] 1397         ADDW X,#2
      000668 90 93            [ 1] 1398         LDW Y,X
      00066A 90 FE            [ 2] 1399         LDW Y,(Y)
      00066C 72 B2 00 22      [ 2] 1400         SUBW Y,YTEMP
      000670 FF               [ 2] 1401         LDW (X),Y
      000671 81               [ 4] 1402         RET
                                   1403 
                                   1404 ;       ABS     ( n -- n )
                                   1405 ;       Return  absolute value of n.
      000672 06 5C                 1406         .word      LINK
                           000674  1407 LINK = . 
      000674 03                    1408         .byte      3
      000675 41 42 53              1409         .ascii     "ABS"
      000678                       1410 ABSS:
      000678 90 93            [ 1] 1411         LDW Y,X
      00067A 90 FE            [ 2] 1412 	LDW Y,(Y)
      00067C 2A 03            [ 1] 1413         JRPL     AB1     ;negate:
      00067E 90 50            [ 2] 1414         NEGW     Y     ;else negate hi byte
      000680 FF               [ 2] 1415         LDW (X),Y
      000681 81               [ 4] 1416 AB1:    RET
                                   1417 
                                   1418 ;       =       ( w w -- t )
                                   1419 ;       Return true if top two are =al.
      000682 06 74                 1420         .word      LINK
                           000684  1421 LINK = . 
      000684 01                    1422         .byte      1
      000685 3D                    1423         .ascii     "="
      000686                       1424 EQUAL:
      000686 A6 FF            [ 1] 1425         LD A,#0xFF  ;true
      000688 90 93            [ 1] 1426         LDW Y,X    ;D = n2
      00068A 90 FE            [ 2] 1427         LDW Y,(Y)
      00068C 90 BF 22         [ 2] 1428         LDW YTEMP,Y
      00068F 1C 00 02         [ 2] 1429         ADDW X,#2
      000692 90 93            [ 1] 1430         LDW Y,X
      000694 90 FE            [ 2] 1431         LDW Y,(Y)
      000696 90 B3 22         [ 2] 1432         CPW Y,YTEMP     ;if n2 <> n1
      000699 27 01            [ 1] 1433         JREQ     EQ1
      00069B 4F               [ 1] 1434         CLR A
      00069C F7               [ 1] 1435 EQ1:    LD (X),A
      00069D E7 01            [ 1] 1436         LD (1,X),A
      00069F 81               [ 4] 1437 	RET     
                                   1438 
                                   1439 ;       U<      ( u u -- t )
                                   1440 ;       Unsigned compare of top two items.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      0006A0 06 84                 1441         .word      LINK
                           0006A2  1442 LINK = . 
      0006A2 02                    1443         .byte      2
      0006A3 55 3C                 1444         .ascii     "U<"
      0006A5                       1445 ULESS:
      0006A5 A6 FF            [ 1] 1446         LD A,#0xFF  ;true
      0006A7 90 93            [ 1] 1447         LDW Y,X    ;D = n2
      0006A9 90 FE            [ 2] 1448         LDW Y,(Y)
      0006AB 90 BF 22         [ 2] 1449         LDW YTEMP,Y
      0006AE 1C 00 02         [ 2] 1450         ADDW X,#2
      0006B1 90 93            [ 1] 1451         LDW Y,X
      0006B3 90 FE            [ 2] 1452         LDW Y,(Y)
      0006B5 90 B3 22         [ 2] 1453         CPW Y,YTEMP     ;if n2 <> n1
      0006B8 25 01            [ 1] 1454         JRULT     ULES1
      0006BA 4F               [ 1] 1455         CLR A
      0006BB F7               [ 1] 1456 ULES1:  LD (X),A
      0006BC E7 01            [ 1] 1457         LD (1,X),A
      0006BE 81               [ 4] 1458 	RET     
                                   1459 
                                   1460 ;       <       ( n1 n2 -- t )
                                   1461 ;       Signed compare of top two items.
      0006BF 06 A2                 1462         .word      LINK
                           0006C1  1463 LINK = . 
      0006C1 01                    1464         .byte      1
      0006C2 3C                    1465         .ascii     "<"
      0006C3                       1466 LESS:
      0006C3 A6 FF            [ 1] 1467         LD A,#0xFF  ;true
      0006C5 90 93            [ 1] 1468         LDW Y,X    ;D = n2
      0006C7 90 FE            [ 2] 1469         LDW Y,(Y)
      0006C9 90 BF 22         [ 2] 1470         LDW YTEMP,Y
      0006CC 1C 00 02         [ 2] 1471         ADDW X,#2
      0006CF 90 93            [ 1] 1472         LDW Y,X
      0006D1 90 FE            [ 2] 1473         LDW Y,(Y)
      0006D3 90 B3 22         [ 2] 1474         CPW Y,YTEMP     ;if n2 <> n1
      0006D6 2F 01            [ 1] 1475         JRSLT     LT1
      0006D8 4F               [ 1] 1476         CLR A
      0006D9 F7               [ 1] 1477 LT1:    LD (X),A
      0006DA E7 01            [ 1] 1478         LD (1,X),A
      0006DC 81               [ 4] 1479 	RET     
                                   1480 
                                   1481 ;       MAX     ( n n -- n )
                                   1482 ;       Return greater of two top items.
      0006DD 06 C1                 1483         .word      LINK
                           0006DF  1484 LINK = . 
      0006DF 03                    1485         .byte      3
      0006E0 4D 41 58              1486         .ascii     "MAX"
      0006E3                       1487 MAX:
      0006E3 90 93            [ 1] 1488         LDW Y,X    ;D = n2
      0006E5 90 EE 02         [ 2] 1489         LDW Y,(2,Y)
      0006E8 90 BF 22         [ 2] 1490         LDW YTEMP,Y
      0006EB 90 93            [ 1] 1491         LDW Y,X
      0006ED 90 FE            [ 2] 1492         LDW Y,(Y)
      0006EF 90 B3 22         [ 2] 1493         CPW Y,YTEMP     ;if n2 <> n1
      0006F2 2F 02            [ 1] 1494         JRSLT     MAX1
      0006F4 EF 02            [ 2] 1495         LDW (2,X),Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      0006F6 1C 00 02         [ 2] 1496 MAX1:   ADDW X,#2
      0006F9 81               [ 4] 1497 	RET     
                                   1498 
                                   1499 ;       MIN     ( n n -- n )
                                   1500 ;       Return smaller of top two items.
      0006FA 06 DF                 1501         .word      LINK
                           0006FC  1502 LINK = . 
      0006FC 03                    1503         .byte      3
      0006FD 4D 49 4E              1504         .ascii     "MIN"
      000700                       1505 MIN:
      000700 90 93            [ 1] 1506         LDW Y,X    ;D = n2
      000702 90 EE 02         [ 2] 1507         LDW Y,(2,Y)
      000705 90 BF 22         [ 2] 1508         LDW YTEMP,Y
      000708 90 93            [ 1] 1509         LDW Y,X
      00070A 90 FE            [ 2] 1510         LDW Y,(Y)
      00070C 90 B3 22         [ 2] 1511         CPW Y,YTEMP     ;if n2 <> n1
      00070F 2C 02            [ 1] 1512         JRSGT     MIN1
      000711 EF 02            [ 2] 1513         LDW (2,X),Y
      000713 1C 00 02         [ 2] 1514 MIN1:	ADDW X,#2
      000716 81               [ 4] 1515 	RET     
                                   1516 
                                   1517 ;       WITHIN  ( u ul uh -- t )
                                   1518 ;       Return true if u is within
                                   1519 ;       range of ul and uh. ( ul <= u < uh )
      000717 06 FC                 1520         .word      LINK
                           000719  1521 LINK = . 
      000719 06                    1522         .byte      6
      00071A 57 49 54 48 49 4E     1523         .ascii     "WITHIN"
      000720                       1524 WITHI:
      000720 CD 04 42         [ 4] 1525         CALL     OVER
      000723 CD 06 5E         [ 4] 1526         CALL     SUBB
      000726 CD 03 E1         [ 4] 1527         CALL     TOR
      000729 CD 06 5E         [ 4] 1528         CALL     SUBB
      00072C CD 03 C2         [ 4] 1529         CALL     RFROM
      00072F CC 06 A5         [ 2] 1530         JP     ULESS
                                   1531 
                                   1532 ;; Divide
                                   1533 
                                   1534 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1535 ;       Unsigned divide of a double by a
                                   1536 ;       single. Return mod and quotient.
      000732 07 19                 1537         .word      LINK
                           000734  1538 LINK = . 
      000734 06                    1539         .byte      6
      000735 55 4D 2F 4D 4F 44     1540         .ascii     "UM/MOD"
      00073B                       1541 UMMOD:
      00073B BF 20            [ 2] 1542 	LDW XTEMP,X	; save stack pointer
      00073D FE               [ 2] 1543 	LDW X,(X)	; un
      00073E BF 22            [ 2] 1544 	LDW YTEMP,X     ; save un
      000740 90 BE 20         [ 2] 1545 	LDW Y,XTEMP	; stack pointer
      000743 90 EE 04         [ 2] 1546 	LDW Y,(4,Y)     ; Y=udl
      000746 BE 20            [ 2] 1547 	LDW X,XTEMP
      000748 EE 02            [ 2] 1548 	LDW X,(2,X)	; X=udh
      00074A B3 22            [ 2] 1549 	CPW X,YTEMP
      00074C 23 0F            [ 2] 1550 	JRULE MMSM1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      00074E BE 20            [ 2] 1551 	LDW X,XTEMP
      000750 1C 00 02         [ 2] 1552 	ADDW X,#2	; pop off 1 level
      000753 90 AE FF FF      [ 2] 1553 	LDW Y,#0xFFFF
      000757 FF               [ 2] 1554 	LDW (X),Y
      000758 90 5F            [ 1] 1555 	CLRW Y
      00075A EF 02            [ 2] 1556 	LDW (2,X),Y
      00075C 81               [ 4] 1557 	RET
      00075D                       1558 MMSM1:
                           000001  1559 .if  PICATOUT_MOD 
                                   1560 ; take advantage of divw x,y when udh==0
      00075D 5D               [ 2] 1561         tnzw x  ; is udh==0?
      00075E 26 11            [ 1] 1562         jrne MMSM2 
      000760 93               [ 1] 1563         ldw x,y    ;udl 
      000761 90 BE 22         [ 2] 1564         ldw y,YTEMP ; divisor 
      000764 65               [ 2] 1565         divw x,y 
      000765 89               [ 2] 1566         pushw x     ; quotient 
      000766 BE 20            [ 2] 1567         ldw x,XTEMP 
      000768 1C 00 02         [ 2] 1568         addw x,#CELLL 
      00076B EF 02            [ 2] 1569         ldw (2,x),y  ; ur
      00076D 90 85            [ 2] 1570         popw y 
      00076F FF               [ 2] 1571         ldw (x),y ; uq 
      000770 81               [ 4] 1572         ret 
      000771                       1573 MMSM2:        
                                   1574 .endif 
      000771 A6 11            [ 1] 1575 	LD A,#17	; loop count
      000773                       1576 MMSM3:
      000773 B3 22            [ 2] 1577 	CPW X,YTEMP	; compare udh to un
      000775 25 04            [ 1] 1578 	JRULT MMSM4	; can't subtract
      000777 72 B0 00 22      [ 2] 1579 	SUBW X,YTEMP	; can subtract
      00077B                       1580 MMSM4:
      00077B 8C               [ 1] 1581 	CCF	; quotient bit
      00077C 90 59            [ 2] 1582 	RLCW Y	; rotate into quotient
      00077E 59               [ 2] 1583 	RLCW X	; rotate into remainder
      00077F 4A               [ 1] 1584 	DEC A	; repeat
      000780 22 F1            [ 1] 1585 	JRUGT MMSM3
      000782 57               [ 2] 1586 	SRAW X
      000783 BF 22            [ 2] 1587 	LDW YTEMP,X	; done, save remainder
      000785 BE 20            [ 2] 1588 	LDW X,XTEMP
      000787 1C 00 02         [ 2] 1589 	ADDW X,#2	; drop
      00078A FF               [ 2] 1590 	LDW (X),Y
      00078B 90 BE 22         [ 2] 1591 	LDW Y,YTEMP	; save quotient
      00078E EF 02            [ 2] 1592 	LDW (2,X),Y
      000790 81               [ 4] 1593 	RET
                                   1594 	
                                   1595 ;       M/MOD   ( d n -- r q )
                                   1596 ;       Signed floored divide of double by
                                   1597 ;       single. Return mod and quotient.
      000791 07 34                 1598         .word      LINK
                           000793  1599 LINK = . 
      000793 05                    1600         .byte      5
      000794 4D 2F 4D 4F 44        1601         .ascii     "M/MOD"
      000799                       1602 MSMOD:  
      000799 CD 04 18         [ 4] 1603         CALL	DUPP
      00079C CD 04 51         [ 4] 1604         CALL	ZLESS
      00079F CD 04 18         [ 4] 1605         CALL	DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      0007A2 CD 03 E1         [ 4] 1606         CALL	TOR
      0007A5 CD 03 1C         [ 4] 1607         CALL	QBRAN
      0007A8 07 B6                 1608         .word	MMOD1
      0007AA CD 06 2B         [ 4] 1609         CALL	NEGAT
      0007AD CD 03 E1         [ 4] 1610         CALL	TOR
      0007B0 CD 06 3D         [ 4] 1611         CALL	DNEGA
      0007B3 CD 03 C2         [ 4] 1612         CALL	RFROM
      0007B6 CD 03 E1         [ 4] 1613 MMOD1:	CALL	TOR
      0007B9 CD 04 18         [ 4] 1614         CALL	DUPP
      0007BC CD 04 51         [ 4] 1615         CALL	ZLESS
      0007BF CD 03 1C         [ 4] 1616         CALL	QBRAN
      0007C2 07 CA                 1617         .word	MMOD2
      0007C4 CD 03 D5         [ 4] 1618         CALL	RAT
      0007C7 CD 06 00         [ 4] 1619         CALL	PLUS
      0007CA CD 03 C2         [ 4] 1620 MMOD2:	CALL	RFROM
      0007CD CD 07 3B         [ 4] 1621         CALL	UMMOD
      0007D0 CD 03 C2         [ 4] 1622         CALL	RFROM
      0007D3 CD 03 1C         [ 4] 1623         CALL	QBRAN
      0007D6 07 E1                 1624         .word	MMOD3
      0007D8 CD 04 28         [ 4] 1625         CALL	SWAPP
      0007DB CD 06 2B         [ 4] 1626         CALL	NEGAT
      0007DE CD 04 28         [ 4] 1627         CALL	SWAPP
      0007E1 81               [ 4] 1628 MMOD3:	RET
                                   1629 
                                   1630 ;       /MOD    ( n n -- r q )
                                   1631 ;       Signed divide. Return mod and quotient.
      0007E2 07 93                 1632         .word      LINK
                           0007E4  1633 LINK = . 
      0007E4 04                    1634         .byte      4
      0007E5 2F 4D 4F 44           1635         .ascii     "/MOD"
      0007E9                       1636 SLMOD:
      0007E9 CD 04 42         [ 4] 1637         CALL	OVER
      0007EC CD 04 51         [ 4] 1638         CALL	ZLESS
      0007EF CD 04 28         [ 4] 1639         CALL	SWAPP
      0007F2 CC 07 99         [ 2] 1640         JP	MSMOD
                                   1641 
                                   1642 ;       MOD     ( n n -- r )
                                   1643 ;       Signed divide. Return mod only.
      0007F5 07 E4                 1644         .word      LINK
                           0007F7  1645 LINK = . 
      0007F7 03                    1646         .byte      3
      0007F8 4D 4F 44              1647         .ascii     "MOD"
      0007FB                       1648 MODD:
      0007FB CD 07 E9         [ 4] 1649 	CALL	SLMOD
      0007FE CC 04 0E         [ 2] 1650 	JP	DROP
                                   1651 
                                   1652 ;       /       ( n n -- q )
                                   1653 ;       Signed divide. Return quotient only.
      000801 07 F7                 1654         .word      LINK
                           000803  1655 LINK = . 
      000803 01                    1656         .byte      1
      000804 2F                    1657         .ascii     "/"
      000805                       1658 SLASH:
      000805 CD 07 E9         [ 4] 1659         CALL	SLMOD
      000808 CD 04 28         [ 4] 1660         CALL	SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      00080B CC 04 0E         [ 2] 1661         JP	DROP
                                   1662 
                                   1663 ;; Multiply
                                   1664 
                                   1665 ;       UM*     ( u u -- ud )
                                   1666 ;       Unsigned multiply. Return double product.
      00080E 08 03                 1667         .word      LINK
                           000810  1668 LINK = . 
      000810 03                    1669         .byte      3
      000811 55 4D 2A              1670         .ascii     "UM*"
      000814                       1671 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
                           000001  1672 .if PICATOUT_MOD 
                                   1673 ; take advantage of SP addressing modes
                                   1674 ; these PRODx in RAM are not required
                                   1675 ; the product is kept on stack as local variable 
                                   1676         ;; bytes offset on data stack 
                           000002  1677         da=2 
                           000003  1678         db=3 
                           000000  1679         dc=0 
                           000001  1680         dd=1 
                                   1681         ;; product bytes offset on return stack 
                           000001  1682         UD1=1  ; ud bits 31..24
                           000002  1683         UD2=2  ; ud bits 23..16
                           000003  1684         UD3=3  ; ud bits 15..8 
                           000004  1685         UD4=4  ; ud bits 7..0 
                                   1686         ;; local variable for product set to zero   
      000814 90 5F            [ 1] 1687         clrw y 
      000816 90 89            [ 2] 1688         pushw y  ; bits 15..0
      000818 90 89            [ 2] 1689         pushw y  ; bits 31..16 
      00081A E6 03            [ 1] 1690         ld a,(db,x) ; b 
      00081C 90 97            [ 1] 1691         ld yl,a 
      00081E E6 01            [ 1] 1692         ld a,(dd,x)   ; d
      000820 90 42            [ 4] 1693         mul y,a    ; b*d  
      000822 17 03            [ 2] 1694         ldw (UD3,sp),y ; lowest weight product 
      000824 E6 03            [ 1] 1695         ld a,(db,x)
      000826 90 97            [ 1] 1696         ld yl,a 
      000828 E6 00            [ 1] 1697         ld a,(dc,x)
      00082A 90 42            [ 4] 1698         mul y,a  ; b*c 
                                   1699         ;;; do the partial sum 
      00082C 72 F9 02         [ 2] 1700         addw y,(UD2,sp)
      00082F 4F               [ 1] 1701         clr a 
      000830 49               [ 1] 1702         rlc a
      000831 6B 01            [ 1] 1703         ld (UD1,sp),a 
      000833 17 02            [ 2] 1704         ldw (UD2,sp),y 
      000835 E6 02            [ 1] 1705         ld a,(da,x)
      000837 90 97            [ 1] 1706         ld yl,a 
      000839 E6 01            [ 1] 1707         ld a,(dd,x)
      00083B 90 42            [ 4] 1708         mul y,a   ; a*d 
                                   1709         ;; do partial sum 
      00083D 72 F9 02         [ 2] 1710         addw y,(UD2,sp)
      000840 4F               [ 1] 1711         clr a 
      000841 19 01            [ 1] 1712         adc a,(UD1,sp)
      000843 6B 01            [ 1] 1713         ld (UD1,sp),a  
      000845 17 02            [ 2] 1714         ldw (UD2,sp),y 
      000847 E6 02            [ 1] 1715         ld a,(da,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      000849 90 97            [ 1] 1716         ld yl,a 
      00084B E6 00            [ 1] 1717         ld a,(dc,x)
      00084D 90 42            [ 4] 1718         mul y,a  ;  a*c highest weight product 
                                   1719         ;;; do partial sum 
      00084F 72 F9 01         [ 2] 1720         addw y,(UD1,sp)
      000852 FF               [ 2] 1721         ldw (x),y  ; udh 
      000853 16 03            [ 2] 1722         ldw y,(UD3,sp)
      000855 EF 02            [ 2] 1723         ldw (2,x),y  ; udl  
      000857 5B 04            [ 2] 1724         addw sp,#4 ; drop local variable 
      000859 81               [ 4] 1725         ret  
                           000000  1726 .else
                                   1727 	LD A,(2,X)	; b
                                   1728 	LD YL,A
                                   1729 	LD A,(X)	; d
                                   1730 	MUL Y,A
                                   1731 	LDW PROD1,Y
                                   1732 	LD A,(3,X)	; a
                                   1733 	LD YL,A
                                   1734 	LD A,(X)	; d
                                   1735 	MUL Y,A
                                   1736 	LDW PROD2,Y
                                   1737 	LD A,(2,X)	; b
                                   1738 	LD YL,A
                                   1739 	LD A,(1,X)	; c
                                   1740 	MUL Y,A
                                   1741 	LDW PROD3,Y
                                   1742 	LD A,(3,X)	; a
                                   1743 	LD YL,A
                                   1744 	LD A,(1,X)	; c
                                   1745 	MUL Y,A	; least signifiant product
                                   1746 	CLR A
                                   1747 	RRWA Y
                                   1748 	LD (3,X),A	; store least significant byte
                                   1749 	ADDW Y,PROD3
                                   1750 	CLR A
                                   1751 	ADC A,#0	; save carry
                                   1752 	LD CARRY,A
                                   1753 	ADDW Y,PROD2
                                   1754 	LD A,CARRY
                                   1755 	ADC A,#0	; add 2nd carry
                                   1756 	LD CARRY,A
                                   1757 	CLR A
                                   1758 	RRWA Y
                                   1759 	LD (2,X),A	; 2nd product byte
                                   1760 	ADDW Y,PROD1
                                   1761 	RRWA Y
                                   1762 	LD (1,X),A	; 3rd product byte
                                   1763 	RRWA Y  	; 4th product byte now in A
                                   1764 	ADC A,CARRY	; fill in carry bits
                                   1765 	LD (X),A
                                   1766 	RET
                                   1767 .endif 
                                   1768 
                                   1769 
                                   1770 ;       *       ( n n -- n )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                                   1771 ;       Signed multiply. Return single product.
      00085A 08 10                 1772         .word      LINK
                           00085C  1773 LINK = . 
      00085C 01                    1774         .byte      1
      00085D 2A                    1775         .ascii     "*"
      00085E                       1776 STAR:
      00085E CD 08 14         [ 4] 1777 	CALL	UMSTA
      000861 CC 04 0E         [ 2] 1778 	JP	DROP
                                   1779 
                                   1780 ;       M*      ( n n -- d )
                                   1781 ;       Signed multiply. Return double product.
      000864 08 5C                 1782         .word      LINK
                           000866  1783 LINK = . 
      000866 02                    1784         .byte      2
      000867 4D 2A                 1785         .ascii     "M*"
      000869                       1786 MSTAR:      
      000869 CD 05 EB         [ 4] 1787         CALL	DDUP
      00086C CD 04 8D         [ 4] 1788         CALL	XORR
      00086F CD 04 51         [ 4] 1789         CALL	ZLESS
      000872 CD 03 E1         [ 4] 1790         CALL	TOR
      000875 CD 06 78         [ 4] 1791         CALL	ABSS
      000878 CD 04 28         [ 4] 1792         CALL	SWAPP
      00087B CD 06 78         [ 4] 1793         CALL	ABSS
      00087E CD 08 14         [ 4] 1794         CALL	UMSTA
      000881 CD 03 C2         [ 4] 1795         CALL	RFROM
      000884 CD 03 1C         [ 4] 1796         CALL	QBRAN
      000887 08 8C                 1797         .word	MSTA1
      000889 CD 06 3D         [ 4] 1798         CALL	DNEGA
      00088C 81               [ 4] 1799 MSTA1:	RET
                                   1800 
                                   1801 ;       . /MOD   ( n1 n2 n3 -- r q )
                                   1802 ;       Multiply n1 and n2, then divide
                                   1803 ;       by n3. Return mod and quotient.
      00088D 08 66                 1804         .word      LINK
                           00088F  1805 LINK = . 
      00088F 05                    1806         .byte      5
      000890 2A 2F 4D 4F 44        1807         .ascii     "*/MOD"
      000895                       1808 SSMOD:
      000895 CD 03 E1         [ 4] 1809         CALL     TOR
      000898 CD 08 69         [ 4] 1810         CALL     MSTAR
      00089B CD 03 C2         [ 4] 1811         CALL     RFROM
      00089E CC 07 99         [ 2] 1812         JP     MSMOD
                                   1813 
                                   1814 ;       */      ( n1 n2 n3 -- q )
                                   1815 ;       Multiply n1 by n2, then divide
                                   1816 ;       by n3. Return quotient only.
      0008A1 08 8F                 1817         .word      LINK
                           0008A3  1818 LINK = . 
      0008A3 02                    1819         .byte      2
      0008A4 2A 2F                 1820         .ascii     "*/"
      0008A6                       1821 STASL:
      0008A6 CD 08 95         [ 4] 1822         CALL	SSMOD
      0008A9 CD 04 28         [ 4] 1823         CALL	SWAPP
      0008AC CC 04 0E         [ 2] 1824         JP	DROP
                                   1825 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                   1826 ;; Miscellaneous
                                   1827 
                                   1828 ;       CELL+   ( a -- a )
                                   1829 ;       Add cell size in byte to address.
      0008AF 08 A3                 1830         .word      LINK
                           0008B1  1831 LINK = . 
      0008B1 02                    1832         .byte       2
      0008B2 32 2B                 1833         .ascii     "2+"
      0008B4                       1834 CELLP:
      0008B4 90 93            [ 1] 1835         LDW Y,X
      0008B6 90 FE            [ 2] 1836 	LDW Y,(Y)
      0008B8 72 A9 00 02      [ 2] 1837         ADDW Y,#CELLL 
      0008BC FF               [ 2] 1838         LDW (X),Y
      0008BD 81               [ 4] 1839         RET
                                   1840 
                                   1841 ;       CELL-   ( a -- a )
                                   1842 ;       Subtract 2 from address.
      0008BE 08 B1                 1843         .word      LINK
                           0008C0  1844 LINK = . 
      0008C0 02                    1845         .byte       2
      0008C1 32 2D                 1846         .ascii     "2-"
      0008C3                       1847 CELLM:
      0008C3 90 93            [ 1] 1848         LDW Y,X
      0008C5 90 FE            [ 2] 1849 	LDW Y,(Y)
      0008C7 72 A2 00 02      [ 2] 1850         SUBW Y,#CELLL
      0008CB FF               [ 2] 1851         LDW (X),Y
      0008CC 81               [ 4] 1852         RET
                                   1853 
                                   1854 ;       CELLS   ( n -- n )
                                   1855 ;       Multiply tos by 2.
      0008CD 08 C0                 1856         .word      LINK
                           0008CF  1857 LINK = . 
      0008CF 02                    1858         .byte       2
      0008D0 32 2A                 1859         .ascii     "2*"
      0008D2                       1860 CELLS:
      0008D2 90 93            [ 1] 1861         LDW Y,X
      0008D4 90 FE            [ 2] 1862 	LDW Y,(Y)
      0008D6 90 58            [ 2] 1863         SLAW Y
      0008D8 FF               [ 2] 1864         LDW (X),Y
      0008D9 81               [ 4] 1865         RET
                                   1866 
                                   1867 ;       1+      ( a -- a )
                                   1868 ;       Add cell size in byte to address.
      0008DA 08 CF                 1869         .word      LINK
                           0008DC  1870 LINK = . 
      0008DC 02                    1871         .byte      2
      0008DD 31 2B                 1872         .ascii     "1+"
      0008DF                       1873 ONEP:
      0008DF 90 93            [ 1] 1874         LDW Y,X
      0008E1 90 FE            [ 2] 1875 	LDW Y,(Y)
      0008E3 90 5C            [ 2] 1876         INCW Y
      0008E5 FF               [ 2] 1877         LDW (X),Y
      0008E6 81               [ 4] 1878         RET
                                   1879 
                                   1880 ;       1-      ( a -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                   1881 ;       Subtract 2 from address.
      0008E7 08 DC                 1882         .word      LINK
                           0008E9  1883 LINK = . 
      0008E9 02                    1884         .byte      2
      0008EA 31 2D                 1885         .ascii     "1-"
      0008EC                       1886 ONEM:
      0008EC 90 93            [ 1] 1887         LDW Y,X
      0008EE 90 FE            [ 2] 1888 	LDW Y,(Y)
      0008F0 90 5A            [ 2] 1889         DECW Y
      0008F2 FF               [ 2] 1890         LDW (X),Y
      0008F3 81               [ 4] 1891         RET
                                   1892 
                                   1893 ;  shift left n times 
                                   1894 ; LSHIFT ( n1 n2 -- n1<<n2 )
      0008F4 08 E9                 1895         .word LINK 
                           0008F6  1896         LINK=.
      0008F6 06                    1897         .byte 6 
      0008F7 4C 53 48 49 46 54     1898         .ascii "LSHIFT"
      0008FD                       1899 LSHIFT:
      0008FD E6 01            [ 1] 1900         ld a,(1,x)
      0008FF 1C 00 02         [ 2] 1901         addw x,#CELLL 
      000902 90 93            [ 1] 1902         ldw y,x 
      000904 90 FE            [ 2] 1903         ldw y,(y)
      000906                       1904 LSHIFT1:
      000906 4D               [ 1] 1905         tnz a 
      000907 27 05            [ 1] 1906         jreq LSHIFT4 
      000909 90 58            [ 2] 1907         sllw y 
      00090B 4A               [ 1] 1908         dec a 
      00090C 20 F8            [ 2] 1909         jra LSHIFT1 
      00090E                       1910 LSHIFT4:
      00090E FF               [ 2] 1911         ldw (x),y 
      00090F 81               [ 4] 1912         ret 
                                   1913 
                                   1914 ; shift right n times                 
                                   1915 ; RSHIFT (n1 n2 -- n1>>n2 )
      000910 08 F6                 1916         .word LINK 
                           000912  1917         LINK=.
      000912 06                    1918         .byte 6
      000913 52 53 48 49 46 54     1919         .ascii "RSHIFT"
      000919                       1920 RSHIFT:
      000919 E6 01            [ 1] 1921         ld a,(1,x)
      00091B 1C 00 02         [ 2] 1922         addw x,#CELLL 
      00091E 90 93            [ 1] 1923         ldw y,x 
      000920 90 FE            [ 2] 1924         ldw y,(y)
      000922                       1925 RSHIFT1:
      000922 4D               [ 1] 1926         tnz a 
      000923 27 05            [ 1] 1927         jreq RSHIFT4 
      000925 90 54            [ 2] 1928         srlw y 
      000927 4A               [ 1] 1929         dec a 
      000928 20 F8            [ 2] 1930         jra RSHIFT1 
      00092A                       1931 RSHIFT4:
      00092A FF               [ 2] 1932         ldw (x),y 
      00092B 81               [ 4] 1933         ret 
                                   1934 
                                   1935 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                                   1936 ;       2/      ( n -- n )
                                   1937 ;       Multiply tos by 2.
      00092C 09 12                 1938         .word      LINK
                           00092E  1939 LINK = . 
      00092E 02                    1940         .byte      2
      00092F 32 2F                 1941         .ascii     "2/"
      000931                       1942 TWOSL:
      000931 90 93            [ 1] 1943         LDW Y,X
      000933 90 FE            [ 2] 1944 	LDW Y,(Y)
      000935 90 57            [ 2] 1945         SRAW Y
      000937 FF               [ 2] 1946         LDW (X),Y
      000938 81               [ 4] 1947         RET
                                   1948 
                                   1949 ;       BL      ( -- 32 )
                                   1950 ;       Return 32,  blank character.
      000939 09 2E                 1951         .word      LINK
                           00093B  1952 LINK = . 
      00093B 02                    1953         .byte      2
      00093C 42 4C                 1954         .ascii     "BL"
      00093E                       1955 BLANK:
      00093E 1D 00 02         [ 2] 1956         SUBW X,#2
      000941 90 AE 00 20      [ 2] 1957 	LDW Y,#32
      000945 FF               [ 2] 1958         LDW (X),Y
      000946 81               [ 4] 1959         RET
                                   1960 
                                   1961 ;         0     ( -- 0)
                                   1962 ;         Return 0.
      000947 09 3B                 1963         .word      LINK
                           000949  1964 LINK = . 
      000949 01                    1965         .byte       1
      00094A 30                    1966         .ascii     "0"
      00094B                       1967 ZERO:
      00094B 1D 00 02         [ 2] 1968         SUBW X,#2
      00094E 90 5F            [ 1] 1969 	CLRW Y
      000950 FF               [ 2] 1970         LDW (X),Y
      000951 81               [ 4] 1971         RET
                                   1972 
                                   1973 ;         1     ( -- 1)
                                   1974 ;         Return 1.
      000952 09 49                 1975         .word      LINK
                           000954  1976 LINK = . 
      000954 01                    1977         .byte       1
      000955 31                    1978         .ascii     "1"
      000956                       1979 ONE:
      000956 1D 00 02         [ 2] 1980         SUBW X,#2
      000959 90 AE 00 01      [ 2] 1981 	LDW Y,#1
      00095D FF               [ 2] 1982         LDW (X),Y
      00095E 81               [ 4] 1983         RET
                                   1984 
                                   1985 ;         -1    ( -- -1)
                                   1986 ;         Return 32,  blank character.
      00095F 09 54                 1987         .word      LINK
                           000961  1988 LINK = . 
      000961 02                    1989         .byte       2
      000962 2D 31                 1990         .ascii     "-1"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      000964                       1991 MONE:
      000964 1D 00 02         [ 2] 1992         SUBW X,#2
      000967 90 AE FF FF      [ 2] 1993 	LDW Y,#0xFFFF
      00096B FF               [ 2] 1994         LDW (X),Y
      00096C 81               [ 4] 1995         RET
                                   1996 
                                   1997 ;       >CHAR   ( c -- c )
                                   1998 ;       Filter non-printing characters.
      00096D 09 61                 1999         .word      LINK
                           00096F  2000 LINK = . 
      00096F 05                    2001         .byte      5
      000970 3E 43 48 41 52        2002         .ascii     ">CHAR"
      000975                       2003 TCHAR:
                           000001  2004 .if CONVERT_TO_CODE
      000975 E6 01            [ 1] 2005         ld a,(1,x)
      000977 A1 20            [ 1] 2006         cp a,#32  
      000979 2B 05            [ 1] 2007         jrmi 1$ 
      00097B A1 7F            [ 1] 2008         cp a,#127 
      00097D 2A 01            [ 1] 2009         jrpl 1$ 
      00097F 81               [ 4] 2010         ret 
      000980 A6 5F            [ 1] 2011 1$:     ld a,#'_ 
      000982 E7 01            [ 1] 2012         ld (1,x),a 
      000984 81               [ 4] 2013         ret 
                           000000  2014 .else
                                   2015         CALL     DOLIT
                                   2016         .word       0x7F
                                   2017         CALL     ANDD
                                   2018         CALL     DUPP    ;mask msb
                                   2019         CALL     DOLIT
                                   2020         .word      127
                                   2021         CALL     BLANK
                                   2022         CALL     WITHI   ;check for printable
                                   2023         CALL     QBRAN
                                   2024         .word    TCHA1
                                   2025         CALL     DROP
                                   2026         CALL     DOLIT
                                   2027         .word     0x5F		; "_"     ;replace non-printables
                                   2028 .endif 
      000985 81               [ 4] 2029 TCHA1:  RET
                                   2030 
                                   2031 ;       DEPTH   ( -- n )
                                   2032 ;       Return  depth of  data stack.
      000986 09 6F                 2033         .word      LINK
                           000988  2034 LINK = . 
      000988 05                    2035         .byte      5
      000989 44 45 50 54 48        2036         .ascii     "DEPTH"
      00098E                       2037 DEPTH: 
      00098E 90 BE 28         [ 2] 2038         LDW Y,SP0    ;save data stack ptr
      000991 BF 20            [ 2] 2039 	LDW XTEMP,X
      000993 72 B2 00 20      [ 2] 2040         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000997 90 57            [ 2] 2041         SRAW Y    ;Y = #stack items
                           000001  2042 .if PICATOUT_MOD
                                   2043 ; why ? 
                                   2044 ;      	DECW Y
                                   2045 .endif 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000999 1D 00 02         [ 2] 2046 	SUBW X,#2
      00099C FF               [ 2] 2047         LDW (X),Y     ; if neg, underflow
      00099D 81               [ 4] 2048         RET
                                   2049 
                                   2050 ;       PICK    ( ... +n -- ... w )
                                   2051 ;       Copy  nth stack item to tos.
      00099E 09 88                 2052         .word      LINK
                           0009A0  2053 LINK = . 
      0009A0 04                    2054         .byte      4
      0009A1 50 49 43 4B           2055         .ascii     "PICK"
      0009A5                       2056 PICK:
      0009A5 90 93            [ 1] 2057         LDW Y,X   ;D = n1
      0009A7 90 FE            [ 2] 2058         LDW Y,(Y)
      0009A9 90 58            [ 2] 2059         SLAW Y
      0009AB BF 20            [ 2] 2060         LDW XTEMP,X
      0009AD 72 B9 00 20      [ 2] 2061         ADDW Y,XTEMP
      0009B1 90 FE            [ 2] 2062         LDW Y,(Y)
      0009B3 FF               [ 2] 2063         LDW (X),Y
      0009B4 81               [ 4] 2064         RET
                                   2065 
                                   2066 ;; Memory access
                                   2067 
                                   2068 ;       +!      ( n a -- )
                                   2069 ;       Add n to  contents at address a.
      0009B5 09 A0                 2070         .word      LINK
                           0009B7  2071 LINK = . 
      0009B7 02                    2072         .byte      2
      0009B8 2B 21                 2073         .ascii     "+!"
      0009BA                       2074 PSTOR:
                           000001  2075 .if CONVERT_TO_CODE
      0009BA 90 93            [ 1] 2076         ldw y,x 
      0009BC 90 FE            [ 2] 2077         ldw y,(y)
      0009BE 90 BF 22         [ 2] 2078         ldw YTEMP,y  ; address
      0009C1 90 FE            [ 2] 2079         ldw y,(y)  
      0009C3 90 89            [ 2] 2080         pushw y  ; value at address 
      0009C5 90 93            [ 1] 2081         ldw y,x 
      0009C7 90 EE 02         [ 2] 2082         ldw y,(2,y) ; n 
      0009CA 72 F9 01         [ 2] 2083         addw y,(1,sp) ; n+value
      0009CD 91 CF 22         [ 5] 2084         ldw [YTEMP],y ;  a!
      0009D0 90 85            [ 2] 2085         popw y    ;drop local var
      0009D2 1C 00 04         [ 2] 2086         addw x,#4 ; DDROP 
      0009D5 81               [ 4] 2087         ret 
                           000000  2088 .else
                                   2089         CALL	SWAPP
                                   2090         CALL	OVER
                                   2091         CALL	AT
                                   2092         CALL	PLUS
                                   2093         CALL	SWAPP
                                   2094         JP	STORE
                                   2095 .endif 
                                   2096 
                                   2097 ;       2!      ( d a -- )
                                   2098 ;       Store  double integer to address a.
      0009D6 09 B7                 2099         .word      LINK
                           0009D8  2100 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      0009D8 02                    2101         .byte      2
      0009D9 32 21                 2102         .ascii     "2!"
      0009DB                       2103 DSTOR:
                           000001  2104 .if CONVERT_TO_CODE
      0009DB 90 93            [ 1] 2105         ldw y,x 
      0009DD 90 FE            [ 2] 2106         ldw y,(y)
      0009DF 90 BF 22         [ 2] 2107         ldw YTEMP,y ; address 
      0009E2 1C 00 02         [ 2] 2108         addw x,#CELLL ; drop a 
      0009E5 90 93            [ 1] 2109         ldw y,x 
      0009E7 90 FE            [ 2] 2110         ldw y,(y) ; hi word 
      0009E9 89               [ 2] 2111         pushw x 
      0009EA EE 02            [ 2] 2112         ldw x,(2,x) ; lo word 
      0009EC 91 CF 22         [ 5] 2113         ldw [YTEMP],y
      0009EF 90 93            [ 1] 2114         ldw y,x 
      0009F1 AE 00 02         [ 2] 2115         ldw x,#2 
      0009F4 92 DF 22         [ 5] 2116         ldw ([YTEMP],x),y 
      0009F7 85               [ 2] 2117         popw x 
      0009F8 1C 00 04         [ 2] 2118         addw x,#4 ; DDROP 
      0009FB 81               [ 4] 2119         ret 
                           000000  2120 .else
                                   2121         CALL	SWAPP
                                   2122         CALL	OVER
                                   2123         CALL	STORE
                                   2124         CALL	CELLP
                                   2125         JP	STORE
                                   2126 .endif 
                                   2127 ;       2@      ( a -- d )
                                   2128 ;       Fetch double integer from address a.
      0009FC 09 D8                 2129         .word      LINK
                           0009FE  2130 LINK = . 
      0009FE 02                    2131         .byte      2
      0009FF 32 40                 2132         .ascii     "2@"
      000A01                       2133 DAT:
                           000001  2134 .if CONVERT_TO_CODE
      000A01 90 93            [ 1] 2135         ldw y,x 
      000A03 90 FE            [ 2] 2136         ldw y,(y) ;address 
      000A05 90 BF 22         [ 2] 2137         ldw YTEMP,y 
      000A08 1D 00 02         [ 2] 2138         subw x,#CELLL ; space for udh 
      000A0B 91 CE 22         [ 5] 2139         ldw y,[YTEMP] ; udh 
      000A0E FF               [ 2] 2140         ldw (x),y 
      000A0F 90 AE 00 02      [ 2] 2141         ldw y,#2
      000A13 91 DE 22         [ 5] 2142         ldw y,([YTEMP],y) ; udl 
      000A16 EF 02            [ 2] 2143         ldw (2,x),y
      000A18 81               [ 4] 2144         ret 
                           000000  2145 .else 
                                   2146         CALL	DUPP
                                   2147         CALL	CELLP
                                   2148         CALL	AT
                                   2149         CALL	SWAPP
                                   2150         JP	AT
                                   2151 .endif 
                                   2152 
                                   2153 ;       COUNT   ( b -- b +n )
                                   2154 ;       Return count byte of a string
                                   2155 ;       and add 1 to byte address.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000A19 09 FE                 2156         .word      LINK
                           000A1B  2157 LINK = . 
      000A1B 05                    2158         .byte      5
      000A1C 43 4F 55 4E 54        2159         .ascii     "COUNT"
      000A21                       2160 COUNT:
                           000001  2161 .if CONVERT_TO_CODE
      000A21 90 93            [ 1] 2162         ldw y,x 
      000A23 90 FE            [ 2] 2163         ldw y,(y) ; address 
      000A25 90 F6            [ 1] 2164         ld a,(y)  ; count 
      000A27 90 5C            [ 2] 2165         incw y 
      000A29 FF               [ 2] 2166         ldw (x),y 
      000A2A 1D 00 02         [ 2] 2167         subw x,#CELLL 
      000A2D E7 01            [ 1] 2168         ld (1,x),a 
      000A2F 7F               [ 1] 2169         clr (x)
      000A30 81               [ 4] 2170         ret 
                           000000  2171 .else 
                                   2172         CALL     DUPP
                                   2173         CALL     ONEP
                                   2174         CALL     SWAPP
                                   2175         JP     CAT
                                   2176 .endif 
                                   2177 
                                   2178 ;       HERE    ( -- a )
                                   2179 ;       Return  top of  variables
      000A31 0A 1B                 2180         .word      LINK
                           000A33  2181 LINK = . 
      000A33 04                    2182         .byte      4
      000A34 48 45 52 45           2183         .ascii     "HERE"
      000A38                       2184 HERE:
                           000001  2185 .if CONVERT_TO_CODE
      000A38 90 AE 00 16      [ 2] 2186       	ldw y,#UVP 
      000A3C 90 FE            [ 2] 2187         ldw y,(y)
      000A3E 1D 00 02         [ 2] 2188         subw x,#CELLL 
      000A41 FF               [ 2] 2189         ldw (x),y 
      000A42 81               [ 4] 2190         ret 
                           000000  2191 .else
                                   2192         CALL     VPP
                                   2193         JP     AT
                                   2194 .endif 
                                   2195 
                                   2196 ;       PAD     ( -- a )
                                   2197 ;       Return address of text buffer
                                   2198 ;       above  code dictionary.
      000A43 0A 33                 2199         .word      LINK
                           000A45  2200 LINK = . 
      000A45 03                    2201         .byte      3
      000A46 50 41 44              2202         .ascii     "PAD"
      000A49                       2203 PAD:
      000A49 CD 0A 38         [ 4] 2204         CALL     HERE
      000A4C CD 02 E9         [ 4] 2205         CALL     DOLIT
      000A4F 00 50                 2206         .word      80
      000A51 CC 06 00         [ 2] 2207         JP     PLUS
                                   2208 
                                   2209 ;       TIB     ( -- a )
                                   2210 ;       Return address of terminal input buffer.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000A54 0A 45                 2211         .word      LINK
                           000A56  2212 LINK = . 
      000A56 03                    2213         .byte      3
      000A57 54 49 42              2214         .ascii     "TIB"
      000A5A                       2215 TIB:
      000A5A CD 05 03         [ 4] 2216         CALL     NTIB
      000A5D CD 08 B4         [ 4] 2217         CALL     CELLP
      000A60 CC 03 71         [ 2] 2218         JP     AT
                                   2219 
                                   2220 ;       @EXECUTE        ( a -- )
                                   2221 ;       Execute vector stored in address a.
      000A63 0A 56                 2222         .word      LINK
                           000A65  2223 LINK = . 
      000A65 08                    2224         .byte      8
      000A66 40 45 58 45 43 55 54  2225         .ascii     "@EXECUTE"
             45
      000A6E                       2226 ATEXE:
      000A6E CD 03 71         [ 4] 2227         CALL     AT
      000A71 CD 05 AF         [ 4] 2228         CALL     QDUP    ;?address or zero
      000A74 CD 03 1C         [ 4] 2229         CALL     QBRAN
      000A77 0A 7C                 2230         .word      EXE1
      000A79 CD 03 43         [ 4] 2231         CALL     EXECU   ;execute if non-zero
      000A7C 81               [ 4] 2232 EXE1:   RET     ;do nothing if zero
                                   2233 
                                   2234 ;       CMOVE   ( b1 b2 u -- )
                                   2235 ;       Copy u bytes from b1 to b2.
      000A7D 0A 65                 2236         .word      LINK
                           000A7F  2237 LINK = . 
      000A7F 05                    2238         .byte      5
      000A80 43 4D 4F 56 45        2239         .ascii     "CMOVE"
      000A85                       2240 CMOVE:
      000A85 CD 03 E1         [ 4] 2241         CALL	TOR
      000A88 CD 03 33         [ 4] 2242         CALL	BRAN
      000A8B 0A A5                 2243         .word	CMOV2
      000A8D CD 03 E1         [ 4] 2244 CMOV1:	CALL	TOR
      000A90 CD 04 18         [ 4] 2245         CALL	DUPP
      000A93 CD 03 8F         [ 4] 2246         CALL	CAT
      000A96 CD 03 D5         [ 4] 2247         CALL	RAT
      000A99 CD 03 7E         [ 4] 2248         CALL	CSTOR
      000A9C CD 08 DF         [ 4] 2249         CALL	ONEP
      000A9F CD 03 C2         [ 4] 2250         CALL	RFROM
      000AA2 CD 08 DF         [ 4] 2251         CALL	ONEP
      000AA5 CD 02 FD         [ 4] 2252 CMOV2:	CALL	DONXT
      000AA8 0A 8D                 2253         .word	CMOV1
      000AAA CC 05 E0         [ 2] 2254         JP	DDROP
                                   2255 
                                   2256 ;       FILL    ( b u c -- )
                                   2257 ;       Fill u bytes of character c
                                   2258 ;       to area beginning at b.
      000AAD 0A 7F                 2259         .word       LINK
                           000AAF  2260 LINK = . 
      000AAF 04                    2261         .byte       4
      000AB0 46 49 4C 4C           2262         .ascii     "FILL"
      000AB4                       2263 FILL:
                           000001  2264 .if CONVERT_TO_CODE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000AB4 90 93            [ 1] 2265         ldw y,x 
      000AB6 90 E6 01         [ 1] 2266         ld a,(1,y) ; c 
      000AB9 1C 00 02         [ 2] 2267         addw x,#CELLL ; drop c 
      000ABC 90 93            [ 1] 2268         ldw y,x 
      000ABE 90 FE            [ 2] 2269         ldw y,(y) ; count
      000AC0 90 89            [ 2] 2270         pushw y 
      000AC2 1C 00 02         [ 2] 2271         addw x,#CELLL ; drop u 
      000AC5 90 93            [ 1] 2272         ldw y,x 
      000AC7 1C 00 02         [ 2] 2273         addw x,#CELLL ; drop b 
      000ACA 90 FE            [ 2] 2274         ldw y,(y) ; address
      000ACC 90 BF 22         [ 2] 2275         ldw YTEMP,y
      000ACF 90 85            [ 2] 2276         popw y ; count 
      000AD1                       2277 FILL1:  
      000AD1 92 C7 22         [ 4] 2278         ld [YTEMP],a 
      000AD4 3C 23            [ 1] 2279         inc YTEMP+1
      000AD6 24 02            [ 1] 2280         jrnc FILL2 
      000AD8 3C 22            [ 1] 2281         inc YTEMP
      000ADA                       2282 FILL2: 
      000ADA 90 5A            [ 2] 2283         decw y ; count 
      000ADC 26 F3            [ 1] 2284         jrne FILL1  
      000ADE 81               [ 4] 2285         ret 
                           000000  2286 .else 
                                   2287         CALL	SWAPP
                                   2288         CALL	TOR
                                   2289         CALL	SWAPP
                                   2290         CALL	BRAN
                                   2291         .word	FILL2
                                   2292 FILL1:	CALL	DDUP
                                   2293         CALL	CSTOR
                                   2294         CALL	ONEP
                                   2295 FILL2:	CALL	DONXT
                                   2296         .word	FILL1
                                   2297         JP	DDROP
                                   2298 .endif
                                   2299 
                                   2300 ;       ERASE   ( b u -- )
                                   2301 ;       Erase u bytes beginning at b.
      000ADF 0A AF                 2302         .word      LINK
                           000AE1  2303 LINK = . 
      000AE1 05                    2304         .byte      5
      000AE2 45 52 41 53 45        2305         .ascii     "ERASE"
      000AE7                       2306 ERASE:
                           000001  2307 .if CONVERT_TO_CODE
      000AE7 90 5F            [ 1] 2308         clrw y 
      000AE9 1D 00 02         [ 2] 2309         subw x,#CELLL 
      000AEC FF               [ 2] 2310         ldw (x),y 
      000AED CC 0A B4         [ 2] 2311         jp FILL 
                           000000  2312 .else 
                                   2313         CALL     ZERO
                                   2314         JP     FILL
                                   2315 .endif 
                                   2316 ;       PACK0x   ( b u a -- a )
                                   2317 ;       Build a counted string with
                                   2318 ;       u characters from b. Null fill.
      000AF0 0A E1                 2319         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



                           000AF2  2320 LINK = . 
      000AF2 05                    2321         .byte      5
      000AF3 50 41 43 4B 30 58     2322         .ascii     "PACK0X"
      000AF9                       2323 PACKS:
      000AF9 CD 04 18         [ 4] 2324         CALL     DUPP
      000AFC CD 03 E1         [ 4] 2325         CALL     TOR     ;strings only on cell boundary
      000AFF CD 05 EB         [ 4] 2326         CALL     DDUP
      000B02 CD 03 7E         [ 4] 2327         CALL     CSTOR
      000B05 CD 08 DF         [ 4] 2328         CALL     ONEP ;save count
      000B08 CD 04 28         [ 4] 2329         CALL     SWAPP
      000B0B CD 0A 85         [ 4] 2330         CALL     CMOVE
      000B0E CD 03 C2         [ 4] 2331         CALL     RFROM
      000B11 81               [ 4] 2332         RET
                                   2333 
                                   2334 ;; Numeric output, single precision
                                   2335 
                                   2336 ;       DIGIT   ( u -- c )
                                   2337 ;       Convert digit u to a character.
      000B12 0A F2                 2338         .word      LINK
                           000B14  2339 LINK = . 
      000B14 05                    2340         .byte      5
      000B15 44 49 47 49 54        2341         .ascii     "DIGIT"
      000B1A                       2342 DIGIT:
      000B1A CD 02 E9         [ 4] 2343         CALL	DOLIT
      000B1D 00 09                 2344         .word	9
      000B1F CD 04 42         [ 4] 2345         CALL	OVER
      000B22 CD 06 C3         [ 4] 2346         CALL	LESS
      000B25 CD 02 E9         [ 4] 2347         CALL	DOLIT
      000B28 00 07                 2348         .word	7
      000B2A CD 04 64         [ 4] 2349         CALL	ANDD
      000B2D CD 06 00         [ 4] 2350         CALL	PLUS
      000B30 CD 02 E9         [ 4] 2351         CALL	DOLIT
      000B33 00 30                 2352         .word	48	;'0'
      000B35 CC 06 00         [ 2] 2353         JP	PLUS
                                   2354 
                                   2355 ;       EXTRACT ( n base -- n c )
                                   2356 ;       Extract least significant digit from n.
      000B38 0B 14                 2357         .word      LINK
                           000B3A  2358 LINK = . 
      000B3A 07                    2359         .byte      7
      000B3B 45 58 54 52 41 43 54  2360         .ascii     "EXTRACT"
      000B42                       2361 EXTRC:
      000B42 CD 09 4B         [ 4] 2362         CALL     ZERO
      000B45 CD 04 28         [ 4] 2363         CALL     SWAPP
      000B48 CD 07 3B         [ 4] 2364         CALL     UMMOD
      000B4B CD 04 28         [ 4] 2365         CALL     SWAPP
      000B4E CC 0B 1A         [ 2] 2366         JP     DIGIT
                                   2367 
                                   2368 ;       <#      ( -- )
                                   2369 ;       Initiate  numeric output process.
      000B51 0B 3A                 2370         .word      LINK
                           000B53  2371 LINK = . 
      000B53 02                    2372         .byte      2
      000B54 3C 23                 2373         .ascii     "<#"
      000B56                       2374 BDIGS:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000B56 CD 0A 49         [ 4] 2375         CALL     PAD
      000B59 CD 05 45         [ 4] 2376         CALL     HLD
      000B5C CC 03 5A         [ 2] 2377         JP     STORE
                                   2378 
                                   2379 ;       HOLD    ( c -- )
                                   2380 ;       Insert a character into output string.
      000B5F 0B 53                 2381         .word      LINK
                           000B61  2382 LINK = . 
      000B61 04                    2383         .byte      4
      000B62 48 4F 4C 44           2384         .ascii     "HOLD"
      000B66                       2385 HOLD:
      000B66 CD 05 45         [ 4] 2386         CALL     HLD
      000B69 CD 03 71         [ 4] 2387         CALL     AT
      000B6C CD 08 EC         [ 4] 2388         CALL     ONEM
      000B6F CD 04 18         [ 4] 2389         CALL     DUPP
      000B72 CD 05 45         [ 4] 2390         CALL     HLD
      000B75 CD 03 5A         [ 4] 2391         CALL     STORE
      000B78 CC 03 7E         [ 2] 2392         JP     CSTOR
                                   2393 
                                   2394 ;       #       ( u -- u )
                                   2395 ;       Extract one digit from u and
                                   2396 ;       append digit to output string.
      000B7B 0B 61                 2397         .word      LINK
                           000B7D  2398 LINK = . 
      000B7D 01                    2399         .byte      1
      000B7E 23                    2400         .ascii     "#"
      000B7F                       2401 DIG:
      000B7F CD 04 D5         [ 4] 2402         CALL     BASE
      000B82 CD 03 71         [ 4] 2403         CALL     AT
      000B85 CD 0B 42         [ 4] 2404         CALL     EXTRC
      000B88 CC 0B 66         [ 2] 2405         JP     HOLD
                                   2406 
                                   2407 ;       #S      ( u -- 0 )
                                   2408 ;       Convert u until all digits
                                   2409 ;       are added to output string.
      000B8B 0B 7D                 2410         .word      LINK
                           000B8D  2411 LINK = . 
      000B8D 02                    2412         .byte      2
      000B8E 23 53                 2413         .ascii     "#S"
      000B90                       2414 DIGS:
      000B90 CD 0B 7F         [ 4] 2415 DIGS1:  CALL     DIG
      000B93 CD 04 18         [ 4] 2416         CALL     DUPP
      000B96 CD 03 1C         [ 4] 2417         CALL     QBRAN
      000B99 0B 9D                 2418         .word      DIGS2
      000B9B 20 F3            [ 2] 2419         JRA     DIGS1
      000B9D 81               [ 4] 2420 DIGS2:  RET
                                   2421 
                                   2422 ;       SIGN    ( n -- )
                                   2423 ;       Add a minus sign to
                                   2424 ;       numeric output string.
      000B9E 0B 8D                 2425         .word      LINK
                           000BA0  2426 LINK = . 
      000BA0 04                    2427         .byte      4
      000BA1 53 49 47 4E           2428         .ascii     "SIGN"
      000BA5                       2429 SIGN:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000BA5 CD 04 51         [ 4] 2430         CALL     ZLESS
      000BA8 CD 03 1C         [ 4] 2431         CALL     QBRAN
      000BAB 0B B5                 2432         .word      SIGN1
      000BAD CD 02 E9         [ 4] 2433         CALL     DOLIT
      000BB0 00 2D                 2434         .word      45	;"-"
      000BB2 CC 0B 66         [ 2] 2435         JP     HOLD
      000BB5 81               [ 4] 2436 SIGN1:  RET
                                   2437 
                                   2438 ;       #>      ( w -- b u )
                                   2439 ;       Prepare output string.
      000BB6 0B A0                 2440         .word      LINK
                           000BB8  2441 LINK = . 
      000BB8 02                    2442         .byte      2
      000BB9 23 3E                 2443         .ascii     "#>"
      000BBB                       2444 EDIGS:
      000BBB CD 04 0E         [ 4] 2445         CALL     DROP
      000BBE CD 05 45         [ 4] 2446         CALL     HLD
      000BC1 CD 03 71         [ 4] 2447         CALL     AT
      000BC4 CD 0A 49         [ 4] 2448         CALL     PAD
      000BC7 CD 04 42         [ 4] 2449         CALL     OVER
      000BCA CC 06 5E         [ 2] 2450         JP     SUBB
                                   2451 
                                   2452 ;       str     ( w -- b u )
                                   2453 ;       Convert a signed integer
                                   2454 ;       to a numeric string.
      000BCD 0B B8                 2455         .word      LINK
                           000BCF  2456 LINK = . 
      000BCF 03                    2457         .byte      3
      000BD0 53 54 52              2458         .ascii     "STR"
      000BD3                       2459 STR:
      000BD3 CD 04 18         [ 4] 2460         CALL     DUPP
      000BD6 CD 03 E1         [ 4] 2461         CALL     TOR
      000BD9 CD 06 78         [ 4] 2462         CALL     ABSS
      000BDC CD 0B 56         [ 4] 2463         CALL     BDIGS
      000BDF CD 0B 90         [ 4] 2464         CALL     DIGS
      000BE2 CD 03 C2         [ 4] 2465         CALL     RFROM
      000BE5 CD 0B A5         [ 4] 2466         CALL     SIGN
      000BE8 CC 0B BB         [ 2] 2467         JP     EDIGS
                                   2468 
                                   2469 ;       HEX     ( -- )
                                   2470 ;       Use radix 16 as base for
                                   2471 ;       numeric conversions.
      000BEB 0B CF                 2472         .word      LINK
                           000BED  2473 LINK = . 
      000BED 03                    2474         .byte      3
      000BEE 48 45 58              2475         .ascii     "HEX"
      000BF1                       2476 HEX:
      000BF1 CD 02 E9         [ 4] 2477         CALL     DOLIT
      000BF4 00 10                 2478         .word      16
      000BF6 CD 04 D5         [ 4] 2479         CALL     BASE
      000BF9 CC 03 5A         [ 2] 2480         JP     STORE
                                   2481 
                                   2482 ;       DECIMAL ( -- )
                                   2483 ;       Use radix 10 as base
                                   2484 ;       for numeric conversions.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000BFC 0B ED                 2485         .word      LINK
                           000BFE  2486 LINK = . 
      000BFE 07                    2487         .byte      7
      000BFF 44 45 43 49 4D 41 4C  2488         .ascii     "DECIMAL"
      000C06                       2489 DECIM:
      000C06 CD 02 E9         [ 4] 2490         CALL     DOLIT
      000C09 00 0A                 2491         .word      10
      000C0B CD 04 D5         [ 4] 2492         CALL     BASE
      000C0E CC 03 5A         [ 2] 2493         JP     STORE
                                   2494 
                                   2495 ;; Numeric input, single precision
                                   2496 
                                   2497 ;       DIGIT?  ( c base -- u t )
                                   2498 ;       Convert a character to its numeric
                                   2499 ;       value. A flag indicates success.
      000C11 0B FE                 2500         .word      LINK
                           000C13  2501 LINK = . 
      000C13 06                    2502         .byte       6
      000C14 44 49 47 49 54 3F     2503         .ascii     "DIGIT?"
      000C1A                       2504 DIGTQ:
      000C1A CD 03 E1         [ 4] 2505         CALL     TOR
      000C1D CD 02 E9         [ 4] 2506         CALL     DOLIT
      000C20 00 30                 2507         .word     48	; "0"
      000C22 CD 06 5E         [ 4] 2508         CALL     SUBB
      000C25 CD 02 E9         [ 4] 2509         CALL     DOLIT
      000C28 00 09                 2510         .word      9
      000C2A CD 04 42         [ 4] 2511         CALL     OVER
      000C2D CD 06 C3         [ 4] 2512         CALL     LESS
      000C30 CD 03 1C         [ 4] 2513         CALL     QBRAN
      000C33 0C 4B                 2514         .word      DGTQ1
      000C35 CD 02 E9         [ 4] 2515         CALL     DOLIT
      000C38 00 07                 2516         .word      7
      000C3A CD 06 5E         [ 4] 2517         CALL     SUBB
      000C3D CD 04 18         [ 4] 2518         CALL     DUPP
      000C40 CD 02 E9         [ 4] 2519         CALL     DOLIT
      000C43 00 0A                 2520         .word      10
      000C45 CD 06 C3         [ 4] 2521         CALL     LESS
      000C48 CD 04 78         [ 4] 2522         CALL     ORR
      000C4B CD 04 18         [ 4] 2523 DGTQ1:  CALL     DUPP
      000C4E CD 03 C2         [ 4] 2524         CALL     RFROM
      000C51 CC 06 A5         [ 2] 2525         JP     ULESS
                                   2526 
                                   2527 ;       NUMBER? ( a -- n T | a F )
                                   2528 ;       Convert a number string to
                                   2529 ;       integer. Push a flag on tos.
      000C54 0C 13                 2530         .word      LINK
                           000C56  2531 LINK = . 
      000C56 07                    2532         .byte      7
      000C57 4E 55 4D 42 45 52 3F  2533         .ascii     "NUMBER?"
      000C5E                       2534 NUMBQ:
      000C5E CD 04 D5         [ 4] 2535         CALL     BASE
      000C61 CD 03 71         [ 4] 2536         CALL     AT
      000C64 CD 03 E1         [ 4] 2537         CALL     TOR
      000C67 CD 09 4B         [ 4] 2538         CALL     ZERO
      000C6A CD 04 42         [ 4] 2539         CALL     OVER
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000C6D CD 0A 21         [ 4] 2540         CALL     COUNT
      000C70 CD 04 42         [ 4] 2541         CALL     OVER
      000C73 CD 03 8F         [ 4] 2542         CALL     CAT
      000C76 CD 02 E9         [ 4] 2543         CALL     DOLIT
      000C79 00 24                 2544         .word     36	; "0x"
      000C7B CD 06 86         [ 4] 2545         CALL     EQUAL
      000C7E CD 03 1C         [ 4] 2546         CALL     QBRAN
      000C81 0C 92                 2547         .word      NUMQ1
      000C83 CD 0B F1         [ 4] 2548         CALL     HEX
      000C86 CD 04 28         [ 4] 2549         CALL     SWAPP
      000C89 CD 08 DF         [ 4] 2550         CALL     ONEP
      000C8C CD 04 28         [ 4] 2551         CALL     SWAPP
      000C8F CD 08 EC         [ 4] 2552         CALL     ONEM
      000C92 CD 04 42         [ 4] 2553 NUMQ1:  CALL     OVER
      000C95 CD 03 8F         [ 4] 2554         CALL     CAT
      000C98 CD 02 E9         [ 4] 2555         CALL     DOLIT
      000C9B 00 2D                 2556         .word     45	; "-"
      000C9D CD 06 86         [ 4] 2557         CALL     EQUAL
      000CA0 CD 03 E1         [ 4] 2558         CALL     TOR
      000CA3 CD 04 28         [ 4] 2559         CALL     SWAPP
      000CA6 CD 03 D5         [ 4] 2560         CALL     RAT
      000CA9 CD 06 5E         [ 4] 2561         CALL     SUBB
      000CAC CD 04 28         [ 4] 2562         CALL     SWAPP
      000CAF CD 03 D5         [ 4] 2563         CALL     RAT
      000CB2 CD 06 00         [ 4] 2564         CALL     PLUS
      000CB5 CD 05 AF         [ 4] 2565         CALL     QDUP
      000CB8 CD 03 1C         [ 4] 2566         CALL     QBRAN
      000CBB 0D 1C                 2567         .word      NUMQ6
      000CBD CD 08 EC         [ 4] 2568         CALL     ONEM
      000CC0 CD 03 E1         [ 4] 2569         CALL     TOR
      000CC3 CD 04 18         [ 4] 2570 NUMQ2:  CALL     DUPP
      000CC6 CD 03 E1         [ 4] 2571         CALL     TOR
      000CC9 CD 03 8F         [ 4] 2572         CALL     CAT
      000CCC CD 04 D5         [ 4] 2573         CALL     BASE
      000CCF CD 03 71         [ 4] 2574         CALL     AT
      000CD2 CD 0C 1A         [ 4] 2575         CALL     DIGTQ
      000CD5 CD 03 1C         [ 4] 2576         CALL     QBRAN
      000CD8 0D 0A                 2577         .word      NUMQ4
      000CDA CD 04 28         [ 4] 2578         CALL     SWAPP
      000CDD CD 04 D5         [ 4] 2579         CALL     BASE
      000CE0 CD 03 71         [ 4] 2580         CALL     AT
      000CE3 CD 08 5E         [ 4] 2581         CALL     STAR
      000CE6 CD 06 00         [ 4] 2582         CALL     PLUS
      000CE9 CD 03 C2         [ 4] 2583         CALL     RFROM
      000CEC CD 08 DF         [ 4] 2584         CALL     ONEP
      000CEF CD 02 FD         [ 4] 2585         CALL     DONXT
      000CF2 0C C3                 2586         .word      NUMQ2
      000CF4 CD 03 D5         [ 4] 2587         CALL     RAT
      000CF7 CD 04 28         [ 4] 2588         CALL     SWAPP
      000CFA CD 04 0E         [ 4] 2589         CALL     DROP
      000CFD CD 03 1C         [ 4] 2590         CALL     QBRAN
      000D00 0D 05                 2591         .word      NUMQ3
      000D02 CD 06 2B         [ 4] 2592         CALL     NEGAT
      000D05 CD 04 28         [ 4] 2593 NUMQ3:  CALL     SWAPP
      000D08 20 0F            [ 2] 2594         JRA     NUMQ5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000D0A CD 03 C2         [ 4] 2595 NUMQ4:  CALL     RFROM
      000D0D CD 03 C2         [ 4] 2596         CALL     RFROM
      000D10 CD 05 E0         [ 4] 2597         CALL     DDROP
      000D13 CD 05 E0         [ 4] 2598         CALL     DDROP
      000D16 CD 09 4B         [ 4] 2599         CALL     ZERO
      000D19 CD 04 18         [ 4] 2600 NUMQ5:  CALL     DUPP
      000D1C CD 03 C2         [ 4] 2601 NUMQ6:  CALL     RFROM
      000D1F CD 05 E0         [ 4] 2602         CALL     DDROP
      000D22 CD 03 C2         [ 4] 2603         CALL     RFROM
      000D25 CD 04 D5         [ 4] 2604         CALL     BASE
      000D28 CC 03 5A         [ 2] 2605         JP     STORE
                                   2606 
                                   2607 ;; Basic I/O
                                   2608 
                                   2609 ;       KEY     ( -- c )
                                   2610 ;       Wait for and return an
                                   2611 ;       input character.
      000D2B 0C 56                 2612         .word      LINK
                           000D2D  2613 LINK = . 
      000D2D 03                    2614         .byte      3
      000D2E 4B 45 59              2615         .ascii     "KEY"
      000D31                       2616 KEY:
                           000001  2617 .if CONVERT_TO_CODE
      000D31 72 0B 52 30 FB   [ 2] 2618         btjf UART1_SR,#UART_SR_RXNE,. 
      000D36 C6 52 31         [ 1] 2619         ld a,UART1_DR 
      000D39 1D 00 02         [ 2] 2620         subw x,#CELLL 
      000D3C E7 01            [ 1] 2621         ld (1,x),a 
      000D3E 7F               [ 1] 2622         clr (x)
      000D3F 81               [ 4] 2623         ret 
                           000000  2624 .else 
                                   2625 KEY1:   CALL     QKEY
                                   2626         CALL     QBRAN
                                   2627         .word      KEY1
                                   2628         RET
                                   2629 .endif 
                                   2630 
                                   2631 ;       NUF?    ( -- t )
                                   2632 ;       Return false if no input,
                                   2633 ;       else pause and if CR return true.
      000D40 0D 2D                 2634         .word      LINK
                           000D42  2635 LINK = . 
      000D42 04                    2636         .byte      4
      000D43 4E 55 46 3F           2637         .ascii     "NUF?"
      000D47                       2638 NUFQ:
      000D47 CD 02 B5         [ 4] 2639         CALL     QKEY
      000D4A CD 04 18         [ 4] 2640         CALL     DUPP
      000D4D CD 03 1C         [ 4] 2641         CALL     QBRAN
      000D50 0D 60                 2642         .word    NUFQ1
      000D52 CD 05 E0         [ 4] 2643         CALL     DDROP
      000D55 CD 0D 31         [ 4] 2644         CALL     KEY
      000D58 CD 02 E9         [ 4] 2645         CALL     DOLIT
      000D5B 00 0D                 2646         .word      CRR
      000D5D CC 06 86         [ 2] 2647         JP     EQUAL
      000D60 81               [ 4] 2648 NUFQ1:  RET
                                   2649 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                   2650 ;       SPACE   ( -- )
                                   2651 ;       Send  blank character to
                                   2652 ;       output device.
      000D61 0D 42                 2653         .word      LINK
                           000D63  2654 LINK = . 
      000D63 05                    2655         .byte      5
      000D64 53 50 41 43 45        2656         .ascii     "SPACE"
      000D69                       2657 SPACE:
      000D69 CD 09 3E         [ 4] 2658         CALL     BLANK
      000D6C CC 02 D3         [ 2] 2659         JP     EMIT
                                   2660 
                                   2661 ;       SPACES  ( +n -- )
                                   2662 ;       Send n spaces to output device.
      000D6F 0D 63                 2663         .word      LINK
                           000D71  2664 LINK = . 
      000D71 06                    2665         .byte      6
      000D72 53 50 41 43 45 53     2666         .ascii     "SPACES"
      000D78                       2667 SPACS:
      000D78 CD 09 4B         [ 4] 2668         CALL     ZERO
      000D7B CD 06 E3         [ 4] 2669         CALL     MAX
      000D7E CD 03 E1         [ 4] 2670         CALL     TOR
      000D81 20 03            [ 2] 2671         JRA      CHAR2
      000D83 CD 0D 69         [ 4] 2672 CHAR1:  CALL     SPACE
      000D86 CD 02 FD         [ 4] 2673 CHAR2:  CALL     DONXT
      000D89 0D 83                 2674         .word    CHAR1
      000D8B 81               [ 4] 2675         RET
                                   2676 
                                   2677 ;       TYPE    ( b u -- )
                                   2678 ;       Output u characters from b.
      000D8C 0D 71                 2679         .word      LINK
                           000D8E  2680 LINK = . 
      000D8E 04                    2681         .byte      4
      000D8F 54 59 50 45           2682         .ascii     "TYPE"
      000D93                       2683 TYPES:
      000D93 CD 03 E1         [ 4] 2684         CALL     TOR
      000D96 20 0C            [ 2] 2685         JRA     TYPE2
      000D98 CD 04 18         [ 4] 2686 TYPE1:  CALL     DUPP
      000D9B CD 03 8F         [ 4] 2687         CALL     CAT
      000D9E CD 02 D3         [ 4] 2688         CALL     EMIT
      000DA1 CD 08 DF         [ 4] 2689         CALL     ONEP
      000DA4 CD 02 FD         [ 4] 2690 TYPE2:  CALL     DONXT
      000DA7 0D 98                 2691         .word      TYPE1
      000DA9 CC 04 0E         [ 2] 2692         JP     DROP
                                   2693 
                                   2694 ;       CR      ( -- )
                                   2695 ;       Output a carriage return
                                   2696 ;       and a line feed.
      000DAC 0D 8E                 2697         .word      LINK
                           000DAE  2698 LINK = . 
      000DAE 02                    2699         .byte      2
      000DAF 43 52                 2700         .ascii     "CR"
      000DB1                       2701 CR:
      000DB1 CD 02 E9         [ 4] 2702         CALL     DOLIT
      000DB4 00 0D                 2703         .word      CRR
      000DB6 CD 02 D3         [ 4] 2704         CALL     EMIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000DB9 CD 02 E9         [ 4] 2705         CALL     DOLIT
      000DBC 00 0A                 2706         .word      LF
      000DBE CC 02 D3         [ 2] 2707         JP     EMIT
                                   2708 
                                   2709 ;       do$     ( -- a )
                                   2710 ;       Return  address of a compiled
                                   2711 ;       string.
      000DC1 0D AE                 2712         .word      LINK
                           000DC3  2713 LINK = . 
      000DC3 43                    2714 	.byte      COMPO+3
      000DC4 44 4F 24              2715         .ascii     "DO$"
      000DC7                       2716 DOSTR:
      000DC7 CD 03 C2         [ 4] 2717         CALL     RFROM
      000DCA CD 03 D5         [ 4] 2718         CALL     RAT
      000DCD CD 03 C2         [ 4] 2719         CALL     RFROM
      000DD0 CD 0A 21         [ 4] 2720         CALL     COUNT
      000DD3 CD 06 00         [ 4] 2721         CALL     PLUS
      000DD6 CD 03 E1         [ 4] 2722         CALL     TOR
      000DD9 CD 04 28         [ 4] 2723         CALL     SWAPP
      000DDC CD 03 E1         [ 4] 2724         CALL     TOR
      000DDF 81               [ 4] 2725         RET
                                   2726 
                                   2727 ;       $"|     ( -- a )
                                   2728 ;       Run time routine compiled by $".
                                   2729 ;       Return address of a compiled string.
      000DE0 0D C3                 2730         .word      LINK
                           000DE2  2731 LINK = . 
      000DE2 43                    2732 	.byte      COMPO+3
      000DE3 24 22 7C              2733         .byte     '$','"','|'
      000DE6                       2734 STRQP:
      000DE6 CD 0D C7         [ 4] 2735         CALL     DOSTR
      000DE9 81               [ 4] 2736         RET
                                   2737 
                                   2738 ;       ."|     ( -- )
                                   2739 ;       Run time routine of ." .
                                   2740 ;       Output a compiled string.
      000DEA 0D E2                 2741         .word      LINK
                           000DEC  2742 LINK = . 
      000DEC 43                    2743 	.byte      COMPO+3
      000DED 2E 22 7C              2744         .byte     '.','"','|'
      000DF0                       2745 DOTQP:
      000DF0 CD 0D C7         [ 4] 2746         CALL     DOSTR
      000DF3 CD 0A 21         [ 4] 2747         CALL     COUNT
      000DF6 CC 0D 93         [ 2] 2748         JP     TYPES
                                   2749 
                                   2750 ;       .R      ( n +n -- )
                                   2751 ;       Display an integer in a field
                                   2752 ;       of n columns, right justified.
      000DF9 0D EC                 2753         .word      LINK
                           000DFB  2754 LINK = . 
      000DFB 02                    2755         .byte      2
      000DFC 2E 52                 2756         .ascii     ".R"
      000DFE                       2757 DOTR:
      000DFE CD 03 E1         [ 4] 2758         CALL     TOR
      000E01 CD 0B D3         [ 4] 2759         CALL     STR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000E04 CD 03 C2         [ 4] 2760         CALL     RFROM
      000E07 CD 04 42         [ 4] 2761         CALL     OVER
      000E0A CD 06 5E         [ 4] 2762         CALL     SUBB
      000E0D CD 0D 78         [ 4] 2763         CALL     SPACS
      000E10 CC 0D 93         [ 2] 2764         JP     TYPES
                                   2765 
                                   2766 ;       U.R     ( u +n -- )
                                   2767 ;       Display an unsigned integer
                                   2768 ;       in n column, right justified.
      000E13 0D FB                 2769         .word      LINK
                           000E15  2770 LINK = . 
      000E15 03                    2771         .byte      3
      000E16 55 2E 52              2772         .ascii     "U.R"
      000E19                       2773 UDOTR:
      000E19 CD 03 E1         [ 4] 2774         CALL     TOR
      000E1C CD 0B 56         [ 4] 2775         CALL     BDIGS
      000E1F CD 0B 90         [ 4] 2776         CALL     DIGS
      000E22 CD 0B BB         [ 4] 2777         CALL     EDIGS
      000E25 CD 03 C2         [ 4] 2778         CALL     RFROM
      000E28 CD 04 42         [ 4] 2779         CALL     OVER
      000E2B CD 06 5E         [ 4] 2780         CALL     SUBB
      000E2E CD 0D 78         [ 4] 2781         CALL     SPACS
      000E31 CC 0D 93         [ 2] 2782         JP     TYPES
                                   2783 
                                   2784 ;       U.      ( u -- )
                                   2785 ;       Display an unsigned integer
                                   2786 ;       in free format.
      000E34 0E 15                 2787         .word      LINK
                           000E36  2788 LINK = . 
      000E36 02                    2789         .byte      2
      000E37 55 2E                 2790         .ascii     "U."
      000E39                       2791 UDOT:
      000E39 CD 0B 56         [ 4] 2792         CALL     BDIGS
      000E3C CD 0B 90         [ 4] 2793         CALL     DIGS
      000E3F CD 0B BB         [ 4] 2794         CALL     EDIGS
      000E42 CD 0D 69         [ 4] 2795         CALL     SPACE
      000E45 CC 0D 93         [ 2] 2796         JP     TYPES
                                   2797 
                                   2798 ;       .       ( w -- )
                                   2799 ;       Display an integer in free
                                   2800 ;       format, preceeded by a space.
      000E48 0E 36                 2801         .word      LINK
                           000E4A  2802 LINK = . 
      000E4A 01                    2803         .byte      1
      000E4B 2E                    2804         .ascii     "."
      000E4C                       2805 DOT:
      000E4C CD 04 D5         [ 4] 2806         CALL     BASE
      000E4F CD 03 71         [ 4] 2807         CALL     AT
      000E52 CD 02 E9         [ 4] 2808         CALL     DOLIT
      000E55 00 0A                 2809         .word      10
      000E57 CD 04 8D         [ 4] 2810         CALL     XORR    ;?decimal
      000E5A CD 03 1C         [ 4] 2811         CALL     QBRAN
      000E5D 0E 62                 2812         .word      DOT1
      000E5F CC 0E 39         [ 2] 2813         JP     UDOT
      000E62 CD 0B D3         [ 4] 2814 DOT1:   CALL     STR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000E65 CD 0D 69         [ 4] 2815         CALL     SPACE
      000E68 CC 0D 93         [ 2] 2816         JP     TYPES
                                   2817 
                                   2818 ;       ?       ( a -- )
                                   2819 ;       Display contents in memory cell.
      000E6B 0E 4A                 2820         .word      LINK
                                   2821         
                           000E6D  2822 LINK = . 
      000E6D 01                    2823         .byte      1
      000E6E 3F                    2824         .ascii     "?"
      000E6F                       2825 QUEST:
      000E6F CD 03 71         [ 4] 2826         CALL     AT
      000E72 CC 0E 4C         [ 2] 2827         JP     DOT
                                   2828 
                                   2829 ;; Parsing
                                   2830 
                                   2831 ;       parse   ( b u c -- b u delta ; <string> )
                                   2832 ;       Scan string delimited by c.
                                   2833 ;       Return found string and its offset.
      000E75 0E 6D                 2834         .word      LINK
                           000E77  2835 LINK = . 
      000E77 05                    2836         .byte      5
      000E78 70 61 72 73 65        2837         .ascii     "parse"
      000E7D                       2838 PARS:
      000E7D CD 04 E4         [ 4] 2839         CALL     TEMP
      000E80 CD 03 5A         [ 4] 2840         CALL     STORE
      000E83 CD 04 42         [ 4] 2841         CALL     OVER
      000E86 CD 03 E1         [ 4] 2842         CALL     TOR
      000E89 CD 04 18         [ 4] 2843         CALL     DUPP
      000E8C CD 03 1C         [ 4] 2844         CALL     QBRAN
      000E8F 0F 35                 2845         .word    PARS8
      000E91 CD 08 EC         [ 4] 2846         CALL     ONEM
      000E94 CD 04 E4         [ 4] 2847         CALL     TEMP
      000E97 CD 03 71         [ 4] 2848         CALL     AT
      000E9A CD 09 3E         [ 4] 2849         CALL     BLANK
      000E9D CD 06 86         [ 4] 2850         CALL     EQUAL
      000EA0 CD 03 1C         [ 4] 2851         CALL     QBRAN
      000EA3 0E D6                 2852         .word      PARS3
      000EA5 CD 03 E1         [ 4] 2853         CALL     TOR
      000EA8 CD 09 3E         [ 4] 2854 PARS1:  CALL     BLANK
      000EAB CD 04 42         [ 4] 2855         CALL     OVER
      000EAE CD 03 8F         [ 4] 2856         CALL     CAT     ;skip leading blanks ONLY
      000EB1 CD 06 5E         [ 4] 2857         CALL     SUBB
      000EB4 CD 04 51         [ 4] 2858         CALL     ZLESS
      000EB7 CD 06 1A         [ 4] 2859         CALL     INVER
      000EBA CD 03 1C         [ 4] 2860         CALL     QBRAN
      000EBD 0E D3                 2861         .word      PARS2
      000EBF CD 08 DF         [ 4] 2862         CALL     ONEP
      000EC2 CD 02 FD         [ 4] 2863         CALL     DONXT
      000EC5 0E A8                 2864         .word      PARS1
      000EC7 CD 03 C2         [ 4] 2865         CALL     RFROM
      000ECA CD 04 0E         [ 4] 2866         CALL     DROP
      000ECD CD 09 4B         [ 4] 2867         CALL     ZERO
      000ED0 CC 04 18         [ 2] 2868         JP     DUPP
      000ED3 CD 03 C2         [ 4] 2869 PARS2:  CALL     RFROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000ED6 CD 04 42         [ 4] 2870 PARS3:  CALL     OVER
      000ED9 CD 04 28         [ 4] 2871         CALL     SWAPP
      000EDC CD 03 E1         [ 4] 2872         CALL     TOR
      000EDF CD 04 E4         [ 4] 2873 PARS4:  CALL     TEMP
      000EE2 CD 03 71         [ 4] 2874         CALL     AT
      000EE5 CD 04 42         [ 4] 2875         CALL     OVER
      000EE8 CD 03 8F         [ 4] 2876         CALL     CAT
      000EEB CD 06 5E         [ 4] 2877         CALL     SUBB    ;scan for delimiter
      000EEE CD 04 E4         [ 4] 2878         CALL     TEMP
      000EF1 CD 03 71         [ 4] 2879         CALL     AT
      000EF4 CD 09 3E         [ 4] 2880         CALL     BLANK
      000EF7 CD 06 86         [ 4] 2881         CALL     EQUAL
      000EFA CD 03 1C         [ 4] 2882         CALL     QBRAN
      000EFD 0F 02                 2883         .word      PARS5
      000EFF CD 04 51         [ 4] 2884         CALL     ZLESS
      000F02 CD 03 1C         [ 4] 2885 PARS5:  CALL     QBRAN
      000F05 0F 17                 2886         .word      PARS6
      000F07 CD 08 DF         [ 4] 2887         CALL     ONEP
      000F0A CD 02 FD         [ 4] 2888         CALL     DONXT
      000F0D 0E DF                 2889         .word      PARS4
      000F0F CD 04 18         [ 4] 2890         CALL     DUPP
      000F12 CD 03 E1         [ 4] 2891         CALL     TOR
      000F15 20 0F            [ 2] 2892         JRA     PARS7
      000F17 CD 03 C2         [ 4] 2893 PARS6:  CALL     RFROM
      000F1A CD 04 0E         [ 4] 2894         CALL     DROP
      000F1D CD 04 18         [ 4] 2895         CALL     DUPP
      000F20 CD 08 DF         [ 4] 2896         CALL     ONEP
      000F23 CD 03 E1         [ 4] 2897         CALL     TOR
      000F26 CD 04 42         [ 4] 2898 PARS7:  CALL     OVER
      000F29 CD 06 5E         [ 4] 2899         CALL     SUBB
      000F2C CD 03 C2         [ 4] 2900         CALL     RFROM
      000F2F CD 03 C2         [ 4] 2901         CALL     RFROM
      000F32 CC 06 5E         [ 2] 2902         JP     SUBB
      000F35 CD 04 42         [ 4] 2903 PARS8:  CALL     OVER
      000F38 CD 03 C2         [ 4] 2904         CALL     RFROM
      000F3B CC 06 5E         [ 2] 2905         JP     SUBB
                                   2906 
                                   2907 ;       PARSE   ( c -- b u ; <string> )
                                   2908 ;       Scan input stream and return
                                   2909 ;       counted string delimited by c.
      000F3E 0E 77                 2910         .word      LINK
                           000F40  2911 LINK = . 
      000F40 05                    2912         .byte      5
      000F41 50 41 52 53 45        2913         .ascii     "PARSE"
      000F46                       2914 PARSE:
      000F46 CD 03 E1         [ 4] 2915         CALL     TOR
      000F49 CD 0A 5A         [ 4] 2916         CALL     TIB
      000F4C CD 04 F3         [ 4] 2917         CALL     INN
      000F4F CD 03 71         [ 4] 2918         CALL     AT
      000F52 CD 06 00         [ 4] 2919         CALL     PLUS    ;current input buffer pointer
      000F55 CD 05 03         [ 4] 2920         CALL     NTIB
      000F58 CD 03 71         [ 4] 2921         CALL     AT
      000F5B CD 04 F3         [ 4] 2922         CALL     INN
      000F5E CD 03 71         [ 4] 2923         CALL     AT
      000F61 CD 06 5E         [ 4] 2924         CALL     SUBB    ;remaining count
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000F64 CD 03 C2         [ 4] 2925         CALL     RFROM
      000F67 CD 0E 7D         [ 4] 2926         CALL     PARS
      000F6A CD 04 F3         [ 4] 2927         CALL     INN
      000F6D CC 09 BA         [ 2] 2928         JP     PSTOR
                                   2929 
                                   2930 ;       .(      ( -- )
                                   2931 ;       Output following string up to next ) .
      000F70 0F 40                 2932         .word      LINK
                           000F72  2933 LINK = . 
      000F72 82                    2934 	.byte      IMEDD+2
      000F73 2E 28                 2935         .ascii     ".("
      000F75                       2936 DOTPR:
      000F75 CD 02 E9         [ 4] 2937         CALL     DOLIT
      000F78 00 29                 2938         .word     41	; ")"
      000F7A CD 0F 46         [ 4] 2939         CALL     PARSE
      000F7D CC 0D 93         [ 2] 2940         JP     TYPES
                                   2941 
                                   2942 ;       (       ( -- )
                                   2943 ;       Ignore following string up to next ).
                                   2944 ;       A comment.
      000F80 0F 72                 2945         .word      LINK
                           000F82  2946 LINK = . 
      000F82 81                    2947 	.byte      IMEDD+1
      000F83 28                    2948         .ascii     "("
      000F84                       2949 PAREN:
      000F84 CD 02 E9         [ 4] 2950         CALL     DOLIT
      000F87 00 29                 2951         .word     41	; ")"
      000F89 CD 0F 46         [ 4] 2952         CALL     PARSE
      000F8C CC 05 E0         [ 2] 2953         JP     DDROP
                                   2954 
                                   2955 ;       \       ( -- )
                                   2956 ;       Ignore following text till
                                   2957 ;       end of line.
      000F8F 0F 82                 2958         .word      LINK
                           000F91  2959 LINK = . 
      000F91 81                    2960 	.byte      IMEDD+1
      000F92 5C                    2961         .ascii     "\"
      000F93                       2962 BKSLA:
                           000001  2963 .if CONVERT_TO_CODE
      000F93 90 AE 00 0C      [ 2] 2964         ldw y,#UCTIB ; #TIB  
      000F97 90 FE            [ 2] 2965         ldw y,(y)
      000F99 90 89            [ 2] 2966         pushw y ; count in TIB 
      000F9B 90 AE 00 0A      [ 2] 2967         ldw y,#UINN ; >IN 
      000F9F 90 BF 22         [ 2] 2968         ldw YTEMP,y
      000FA2 90 85            [ 2] 2969         popw y 
      000FA4 91 CF 22         [ 5] 2970         ldw [YTEMP],y
      000FA7 81               [ 4] 2971         ret 
                           000000  2972 .else
                                   2973         CALL     NTIB
                                   2974         CALL     AT
                                   2975         CALL     INN
                                   2976         JP     STORE
                                   2977 .endif 
                                   2978 
                                   2979 ;       WORD    ( c -- a ; <string> )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



                                   2980 ;       Parse a word from input stream
                                   2981 ;       and copy it to code dictionary.
      000FA8 0F 91                 2982         .word      LINK
                           000FAA  2983 LINK = . 
      000FAA 04                    2984         .byte      4
      000FAB 57 4F 52 44           2985         .ascii     "WORD"
      000FAF                       2986 WORDD:
      000FAF CD 0F 46         [ 4] 2987         CALL     PARSE
      000FB2 CD 0A 38         [ 4] 2988         CALL     HERE
      000FB5 CD 08 B4         [ 4] 2989         CALL     CELLP
      000FB8 CC 0A F9         [ 2] 2990         JP     PACKS
                                   2991 
                                   2992 ;       TOKEN   ( -- a ; <string> )
                                   2993 ;       Parse a word from input stream
                                   2994 ;       and copy it to name dictionary.
      000FBB 0F AA                 2995         .word      LINK
                           000FBD  2996 LINK = . 
      000FBD 05                    2997         .byte      5
      000FBE 54 4F 4B 45 4E        2998         .ascii     "TOKEN"
      000FC3                       2999 TOKEN:
      000FC3 CD 09 3E         [ 4] 3000         CALL     BLANK
      000FC6 CC 0F AF         [ 2] 3001         JP     WORDD
                                   3002 
                                   3003 ;; Dictionary search
                                   3004 
                                   3005 ;       NAME>   ( na -- ca )
                                   3006 ;       Return a code address given
                                   3007 ;       a name address.
      000FC9 0F BD                 3008         .word      LINK
                           000FCB  3009 LINK = . 
      000FCB 05                    3010         .byte      5
      000FCC 4E 41 4D 45 3E        3011         .ascii     "NAME>"
      000FD1                       3012 NAMET:
      000FD1 CD 0A 21         [ 4] 3013         CALL     COUNT
      000FD4 CD 02 E9         [ 4] 3014         CALL     DOLIT
      000FD7 00 1F                 3015         .word      31
      000FD9 CD 04 64         [ 4] 3016         CALL     ANDD
      000FDC CC 06 00         [ 2] 3017         JP     PLUS
                                   3018 
                                   3019 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   3020 ;       Compare u cells in two
                                   3021 ;       strings. Return 0 if identical.
      000FDF 0F CB                 3022         .word      LINK
                           000FE1  3023 LINK = . 
      000FE1 05                    3024         .byte       5
      000FE2 53 41 4D 45 3F        3025         .ascii     "SAME?"
      000FE7                       3026 SAMEQ:
      000FE7 CD 08 EC         [ 4] 3027         CALL     ONEM
      000FEA CD 03 E1         [ 4] 3028         CALL     TOR
      000FED 20 29            [ 2] 3029         JRA     SAME2
      000FEF CD 04 42         [ 4] 3030 SAME1:  CALL     OVER
      000FF2 CD 03 D5         [ 4] 3031         CALL     RAT
      000FF5 CD 06 00         [ 4] 3032         CALL     PLUS
      000FF8 CD 03 8F         [ 4] 3033         CALL     CAT
      000FFB CD 04 42         [ 4] 3034         CALL     OVER
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      000FFE CD 03 D5         [ 4] 3035         CALL     RAT
      001001 CD 06 00         [ 4] 3036         CALL     PLUS
      001004 CD 03 8F         [ 4] 3037         CALL     CAT
      001007 CD 06 5E         [ 4] 3038         CALL     SUBB
      00100A CD 05 AF         [ 4] 3039         CALL     QDUP
      00100D CD 03 1C         [ 4] 3040         CALL     QBRAN
      001010 10 18                 3041         .word      SAME2
      001012 CD 03 C2         [ 4] 3042         CALL     RFROM
      001015 CC 04 0E         [ 2] 3043         JP     DROP
      001018 CD 02 FD         [ 4] 3044 SAME2:  CALL     DONXT
      00101B 0F EF                 3045         .word      SAME1
      00101D CC 09 4B         [ 2] 3046         JP     ZERO
                                   3047 
                                   3048 ;       find    ( a va -- ca na | a F )
                                   3049 ;       Search vocabulary for string.
                                   3050 ;       Return ca and na if succeeded.
      001020 0F E1                 3051         .word      LINK
                           001022  3052 LINK = . 
      001022 04                    3053         .byte      4
      001023 46 49 4E 44           3054         .ascii     "FIND"
      001027                       3055 FIND:
      001027 CD 04 28         [ 4] 3056         CALL     SWAPP
      00102A CD 04 18         [ 4] 3057         CALL     DUPP
      00102D CD 03 8F         [ 4] 3058         CALL     CAT
      001030 CD 04 E4         [ 4] 3059         CALL     TEMP
      001033 CD 03 5A         [ 4] 3060         CALL     STORE
      001036 CD 04 18         [ 4] 3061         CALL     DUPP
      001039 CD 03 71         [ 4] 3062         CALL     AT
      00103C CD 03 E1         [ 4] 3063         CALL     TOR
      00103F CD 08 B4         [ 4] 3064         CALL     CELLP
      001042 CD 04 28         [ 4] 3065         CALL     SWAPP
      001045 CD 03 71         [ 4] 3066 FIND1:  CALL     AT
      001048 CD 04 18         [ 4] 3067         CALL     DUPP
      00104B CD 03 1C         [ 4] 3068         CALL     QBRAN
      00104E 10 84                 3069         .word      FIND6
      001050 CD 04 18         [ 4] 3070         CALL     DUPP
      001053 CD 03 71         [ 4] 3071         CALL     AT
      001056 CD 02 E9         [ 4] 3072         CALL     DOLIT
      001059 1F 7F                 3073         .word      MASKK
      00105B CD 04 64         [ 4] 3074         CALL     ANDD
      00105E CD 03 D5         [ 4] 3075         CALL     RAT
      001061 CD 04 8D         [ 4] 3076         CALL     XORR
      001064 CD 03 1C         [ 4] 3077         CALL     QBRAN
      001067 10 73                 3078         .word      FIND2
      001069 CD 08 B4         [ 4] 3079         CALL     CELLP
      00106C CD 02 E9         [ 4] 3080         CALL     DOLIT
      00106F FF FF                 3081         .word     0xFFFF
      001071 20 0C            [ 2] 3082         JRA     FIND3
      001073 CD 08 B4         [ 4] 3083 FIND2:  CALL     CELLP
      001076 CD 04 E4         [ 4] 3084         CALL     TEMP
      001079 CD 03 71         [ 4] 3085         CALL     AT
      00107C CD 0F E7         [ 4] 3086         CALL     SAMEQ
      00107F CD 03 33         [ 4] 3087 FIND3:  CALL     BRAN
      001082 10 93                 3088         .word      FIND4
      001084 CD 03 C2         [ 4] 3089 FIND6:  CALL     RFROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      001087 CD 04 0E         [ 4] 3090         CALL     DROP
      00108A CD 04 28         [ 4] 3091         CALL     SWAPP
      00108D CD 08 C3         [ 4] 3092         CALL     CELLM
      001090 CC 04 28         [ 2] 3093         JP     SWAPP
      001093 CD 03 1C         [ 4] 3094 FIND4:  CALL     QBRAN
      001096 10 A0                 3095         .word      FIND5
      001098 CD 08 C3         [ 4] 3096         CALL     CELLM
      00109B CD 08 C3         [ 4] 3097         CALL     CELLM
      00109E 20 A5            [ 2] 3098         JRA     FIND1
      0010A0 CD 03 C2         [ 4] 3099 FIND5:  CALL     RFROM
      0010A3 CD 04 0E         [ 4] 3100         CALL     DROP
      0010A6 CD 04 28         [ 4] 3101         CALL     SWAPP
      0010A9 CD 04 0E         [ 4] 3102         CALL     DROP
      0010AC CD 08 C3         [ 4] 3103         CALL     CELLM
      0010AF CD 04 18         [ 4] 3104         CALL     DUPP
      0010B2 CD 0F D1         [ 4] 3105         CALL     NAMET
      0010B5 CC 04 28         [ 2] 3106         JP     SWAPP
                                   3107 
                                   3108 ;       NAME?   ( a -- ca na | a F )
                                   3109 ;       Search vocabularies for a string.
      0010B8 10 22                 3110         .word      LINK
                           0010BA  3111 LINK = . 
      0010BA 05                    3112         .byte      5
      0010BB 4E 41 4D 45 3F        3113         .ascii     "NAME?"
      0010C0                       3114 NAMEQ:
      0010C0 CD 05 58         [ 4] 3115         CALL   CNTXT
      0010C3 CC 10 27         [ 2] 3116         JP     FIND
                                   3117 
                                   3118 ;; Terminal response
                                   3119 
                                   3120 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3121 ;       Backup cursor by one character.
      0010C6 10 BA                 3122         .word      LINK
                           0010C8  3123 LINK = . 
      0010C8 02                    3124         .byte      2
      0010C9 5E 48                 3125         .ascii     "^H"
      0010CB                       3126 BKSP:
      0010CB CD 03 E1         [ 4] 3127         CALL     TOR
      0010CE CD 04 42         [ 4] 3128         CALL     OVER
      0010D1 CD 03 C2         [ 4] 3129         CALL     RFROM
      0010D4 CD 04 28         [ 4] 3130         CALL     SWAPP
      0010D7 CD 04 42         [ 4] 3131         CALL     OVER
      0010DA CD 04 8D         [ 4] 3132         CALL     XORR
      0010DD CD 03 1C         [ 4] 3133         CALL     QBRAN
      0010E0 10 FB                 3134         .word      BACK1
      0010E2 CD 02 E9         [ 4] 3135         CALL     DOLIT
      0010E5 00 08                 3136         .word      BKSPP
      0010E7 CD 02 D3         [ 4] 3137         CALL     EMIT
      0010EA CD 08 EC         [ 4] 3138         CALL     ONEM
      0010ED CD 09 3E         [ 4] 3139         CALL     BLANK
      0010F0 CD 02 D3         [ 4] 3140         CALL     EMIT
      0010F3 CD 02 E9         [ 4] 3141         CALL     DOLIT
      0010F6 00 08                 3142         .word      BKSPP
      0010F8 CC 02 D3         [ 2] 3143         JP     EMIT
      0010FB 81               [ 4] 3144 BACK1:  RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                   3145 
                                   3146 ;       TAP     ( bot eot cur c -- bot eot cur )
                                   3147 ;       Accept and echo key stroke
                                   3148 ;       and bump cursor.
      0010FC 10 C8                 3149         .word      LINK
                           0010FE  3150 LINK = . 
      0010FE 03                    3151         .byte      3
      0010FF 54 41 50              3152         .ascii     "TAP"
      001102                       3153 TAP:
      001102 CD 04 18         [ 4] 3154         CALL     DUPP
      001105 CD 02 D3         [ 4] 3155         CALL     EMIT
      001108 CD 04 42         [ 4] 3156         CALL     OVER
      00110B CD 03 7E         [ 4] 3157         CALL     CSTOR
      00110E CC 08 DF         [ 2] 3158         JP     ONEP
                                   3159 
                                   3160 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3161 ;       Process a key stroke,
                                   3162 ;       CR or backspace.
      001111 10 FE                 3163         .word      LINK
                           001113  3164 LINK = . 
      001113 04                    3165         .byte      4
      001114 4B 54 41 50           3166         .ascii     "KTAP"
      001118                       3167 KTAP:
      001118 CD 04 18         [ 4] 3168         CALL     DUPP
      00111B CD 02 E9         [ 4] 3169         CALL     DOLIT
      00111E 00 0D                 3170         .word      CRR
      001120 CD 04 8D         [ 4] 3171         CALL     XORR
      001123 CD 03 1C         [ 4] 3172         CALL     QBRAN
      001126 11 3E                 3173         .word      KTAP2
      001128 CD 02 E9         [ 4] 3174         CALL     DOLIT
      00112B 00 08                 3175         .word      BKSPP
      00112D CD 04 8D         [ 4] 3176         CALL     XORR
      001130 CD 03 1C         [ 4] 3177         CALL     QBRAN
      001133 11 3B                 3178         .word      KTAP1
      001135 CD 09 3E         [ 4] 3179         CALL     BLANK
      001138 CC 11 02         [ 2] 3180         JP     TAP
      00113B CC 10 CB         [ 2] 3181 KTAP1:  JP     BKSP
      00113E CD 04 0E         [ 4] 3182 KTAP2:  CALL     DROP
      001141 CD 04 28         [ 4] 3183         CALL     SWAPP
      001144 CD 04 0E         [ 4] 3184         CALL     DROP
      001147 CC 04 18         [ 2] 3185         JP     DUPP
                                   3186 
                                   3187 ;       accept  ( b u -- b u )
                                   3188 ;       Accept characters to input
                                   3189 ;       buffer. Return with actual count.
      00114A 11 13                 3190         .word      LINK
                           00114C  3191 LINK = . 
      00114C 06                    3192         .byte      6
      00114D 41 43 43 45 50 54     3193         .ascii     "ACCEPT"
      001153                       3194 ACCEP:
      001153 CD 04 42         [ 4] 3195         CALL     OVER
      001156 CD 06 00         [ 4] 3196         CALL     PLUS
      001159 CD 04 42         [ 4] 3197         CALL     OVER
      00115C CD 05 EB         [ 4] 3198 ACCP1:  CALL     DDUP
      00115F CD 04 8D         [ 4] 3199         CALL     XORR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      001162 CD 03 1C         [ 4] 3200         CALL     QBRAN
      001165 11 87                 3201         .word      ACCP4
      001167 CD 0D 31         [ 4] 3202         CALL     KEY
      00116A CD 04 18         [ 4] 3203         CALL     DUPP
      00116D CD 09 3E         [ 4] 3204         CALL     BLANK
      001170 CD 02 E9         [ 4] 3205         CALL     DOLIT
      001173 00 7F                 3206         .word      127
      001175 CD 07 20         [ 4] 3207         CALL     WITHI
      001178 CD 03 1C         [ 4] 3208         CALL     QBRAN
      00117B 11 82                 3209         .word      ACCP2
      00117D CD 11 02         [ 4] 3210         CALL     TAP
      001180 20 03            [ 2] 3211         JRA     ACCP3
      001182 CD 11 18         [ 4] 3212 ACCP2:  CALL     KTAP
      001185 20 D5            [ 2] 3213 ACCP3:  JRA     ACCP1
      001187 CD 04 0E         [ 4] 3214 ACCP4:  CALL     DROP
      00118A CD 04 42         [ 4] 3215         CALL     OVER
      00118D CC 06 5E         [ 2] 3216         JP     SUBB
                                   3217 
                                   3218 ;       QUERY   ( -- )
                                   3219 ;       Accept input stream to
                                   3220 ;       terminal input buffer.
      001190 11 4C                 3221         .word      LINK
                                   3222         
                           001192  3223 LINK = . 
      001192 05                    3224         .byte      5
      001193 51 55 45 52 59        3225         .ascii     "QUERY"
      001198                       3226 QUERY:
      001198 CD 0A 5A         [ 4] 3227         CALL     TIB
      00119B CD 02 E9         [ 4] 3228         CALL     DOLIT
      00119E 00 50                 3229         .word      80
      0011A0 CD 11 53         [ 4] 3230         CALL     ACCEP
      0011A3 CD 05 03         [ 4] 3231         CALL     NTIB
      0011A6 CD 03 5A         [ 4] 3232         CALL     STORE
      0011A9 CD 04 0E         [ 4] 3233         CALL     DROP
      0011AC CD 09 4B         [ 4] 3234         CALL     ZERO
      0011AF CD 04 F3         [ 4] 3235         CALL     INN
      0011B2 CC 03 5A         [ 2] 3236         JP     STORE
                                   3237 
                                   3238 ;       ABORT   ( -- )
                                   3239 ;       Reset data stack and
                                   3240 ;       jump to QUIT.
      0011B5 11 92                 3241         .word      LINK
                           0011B7  3242 LINK = . 
      0011B7 05                    3243         .byte      5
      0011B8 41 42 4F 52 54        3244         .ascii     "ABORT"
      0011BD                       3245 ABORT:
      0011BD CD 12 B4         [ 4] 3246         CALL     PRESE
      0011C0 CC 12 D1         [ 2] 3247         JP     QUIT
                                   3248 
                                   3249 ;       abort"  ( f -- )
                                   3250 ;       Run time routine of ABORT".
                                   3251 ;       Abort with a message.
      0011C3 11 B7                 3252         .word      LINK
                           0011C5  3253 LINK = . 
      0011C5 46                    3254 	.byte      COMPO+6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      0011C6 41 42 4F 52 54        3255         .ascii     "ABORT"
      0011CB 22                    3256         .byte      '"'
      0011CC                       3257 ABORQ:
      0011CC CD 03 1C         [ 4] 3258         CALL     QBRAN
      0011CF 11 EB                 3259         .word      ABOR2   ;text flag
      0011D1 CD 0D C7         [ 4] 3260         CALL     DOSTR
      0011D4 CD 0D 69         [ 4] 3261 ABOR1:  CALL     SPACE
      0011D7 CD 0A 21         [ 4] 3262         CALL     COUNT
      0011DA CD 0D 93         [ 4] 3263         CALL     TYPES
      0011DD CD 02 E9         [ 4] 3264         CALL     DOLIT
      0011E0 00 3F                 3265         .word     63 ; "?"
      0011E2 CD 02 D3         [ 4] 3266         CALL     EMIT
      0011E5 CD 0D B1         [ 4] 3267         CALL     CR
      0011E8 CC 11 BD         [ 2] 3268         JP     ABORT   ;pass error string
      0011EB CD 0D C7         [ 4] 3269 ABOR2:  CALL     DOSTR
      0011EE CC 04 0E         [ 2] 3270         JP     DROP
                                   3271 
                                   3272 ;; The text interpreter
                                   3273 
                                   3274 ;       $INTERPRET      ( a -- )
                                   3275 ;       Interpret a word. If failed,
                                   3276 ;       try to convert it to an integer.
      0011F1 11 C5                 3277         .word      LINK
                           0011F3  3278 LINK = . 
      0011F3 0A                    3279         .byte      10
      0011F4 24 49 4E 54 45 52 50  3280         .ascii     "$INTERPRET"
             52 45 54
      0011FE                       3281 INTER:
      0011FE CD 10 C0         [ 4] 3282         CALL     NAMEQ
      001201 CD 05 AF         [ 4] 3283         CALL     QDUP    ;?defined
      001204 CD 03 1C         [ 4] 3284         CALL     QBRAN
      001207 12 28                 3285         .word      INTE1
      001209 CD 03 71         [ 4] 3286         CALL     AT
      00120C CD 02 E9         [ 4] 3287         CALL     DOLIT
      00120F 40 00                 3288 	.word       0x4000	; COMPO*256
      001211 CD 04 64         [ 4] 3289         CALL     ANDD    ;?compile only lexicon bits
      001214 CD 11 CC         [ 4] 3290         CALL     ABORQ
      001217 0D                    3291         .byte      13
      001218 20 63 6F 6D 70 69 6C  3292         .ascii     " compile only"
             65 20 6F 6E 6C 79
      001225 CC 03 43         [ 2] 3293         JP     EXECU
      001228 CD 0C 5E         [ 4] 3294 INTE1:  CALL     NUMBQ   ;convert a number
      00122B CD 03 1C         [ 4] 3295         CALL     QBRAN
      00122E 11 D4                 3296         .word    ABOR1
      001230 81               [ 4] 3297         RET
                                   3298 
                                   3299 ;       [       ( -- )
                                   3300 ;       Start  text interpreter.
      001231 11 F3                 3301         .word      LINK
                           001233  3302 LINK = . 
      001233 81                    3303 	.byte      IMEDD+1
      001234 5B                    3304         .ascii     "["
      001235                       3305 LBRAC:
      001235 CD 02 E9         [ 4] 3306         CALL   DOLIT
      001238 11 FE                 3307         .word  INTER
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      00123A CD 05 36         [ 4] 3308         CALL   TEVAL
      00123D CC 03 5A         [ 2] 3309         JP     STORE
                                   3310 
                                   3311 ;       .OK     ( -- )
                                   3312 ;       Display 'ok' while interpreting.
      001240 12 33                 3313         .word      LINK
                           001242  3314 LINK = . 
      001242 03                    3315         .byte      3
      001243 2E 4F 4B              3316         .ascii     ".OK"
      001246                       3317 DOTOK:
      001246 CD 02 E9         [ 4] 3318         CALL     DOLIT
      001249 11 FE                 3319         .word      INTER
      00124B CD 05 36         [ 4] 3320         CALL     TEVAL
      00124E CD 03 71         [ 4] 3321         CALL     AT
      001251 CD 06 86         [ 4] 3322         CALL     EQUAL
      001254 CD 03 1C         [ 4] 3323         CALL     QBRAN
      001257 12 60                 3324         .word      DOTO1
      001259 CD 0D F0         [ 4] 3325         CALL     DOTQP
      00125C 03                    3326         .byte      3
      00125D 20 6F 6B              3327         .ascii     " ok"
      001260 CC 0D B1         [ 2] 3328 DOTO1:  JP     CR
                                   3329 
                                   3330 ;       ?STACK  ( -- )
                                   3331 ;       Abort if stack underflows.
      001263 12 42                 3332         .word      LINK
                           001265  3333 LINK = . 
      001265 06                    3334         .byte      6
      001266 3F 53 54 41 43 4B     3335         .ascii     "?STACK"
      00126C                       3336 QSTAC: 
      00126C CD 09 8E         [ 4] 3337         CALL     DEPTH
      00126F CD 04 51         [ 4] 3338         CALL     ZLESS   ;check only for underflow
      001272 CD 11 CC         [ 4] 3339         CALL     ABORQ
      001275 0B                    3340         .byte      11
      001276 20 75 6E 64 65 72 66  3341         .ascii     " underflow "
             6C 6F 77 20
      001281 81               [ 4] 3342         RET
                                   3343 
                                   3344 ;       EVAL    ( -- )
                                   3345 ;       Interpret  input stream.
      001282 12 65                 3346         .word      LINK
                           001284  3347 LINK = . 
      001284 04                    3348         .byte      4
      001285 45 56 41 4C           3349         .ascii     "EVAL"
      001289                       3350 EVAL:
      001289 CD 0F C3         [ 4] 3351 EVAL1:  CALL     TOKEN
      00128C CD 04 18         [ 4] 3352         CALL     DUPP
      00128F CD 03 8F         [ 4] 3353         CALL     CAT     ;?input stream empty
      001292 CD 03 1C         [ 4] 3354         CALL     QBRAN
      001295 12 A5                 3355         .word    EVAL2
      001297 CD 05 36         [ 4] 3356         CALL     TEVAL
      00129A CD 0A 6E         [ 4] 3357         CALL     ATEXE
      00129D CD 12 6C         [ 4] 3358         CALL     QSTAC   ;evaluate input, check stack
      0012A0 CD 03 33         [ 4] 3359         CALL     BRAN
      0012A3 12 89                 3360         .word    EVAL1
      0012A5 CD 04 0E         [ 4] 3361 EVAL2:  CALL     DROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      0012A8 CC 12 46         [ 2] 3362         JP       DOTOK
                                   3363 
                                   3364 ;       PRESET  ( -- )
                                   3365 ;       Reset data stack pointer and
                                   3366 ;       terminal input buffer.
      0012AB 12 84                 3367         .word      LINK
                           0012AD  3368 LINK = . 
      0012AD 06                    3369         .byte      6
      0012AE 50 52 45 53 45 54     3370         .ascii     "PRESET"
      0012B4                       3371 PRESE:
      0012B4 CD 02 E9         [ 4] 3372         CALL     DOLIT
      0012B7 16 70                 3373         .word      SPP
      0012B9 CD 04 05         [ 4] 3374         CALL     SPSTO
      0012BC CD 02 E9         [ 4] 3375         CALL     DOLIT
      0012BF 17 00                 3376         .word      TIBB
      0012C1 CD 05 03         [ 4] 3377         CALL     NTIB
      0012C4 CD 08 B4         [ 4] 3378         CALL     CELLP
      0012C7 CC 03 5A         [ 2] 3379         JP     STORE
                                   3380 
                                   3381 ;       QUIT    ( -- )
                                   3382 ;       Reset return stack pointer
                                   3383 ;       and start text interpreter.
      0012CA 12 AD                 3384         .word      LINK
                           0012CC  3385 LINK = . 
      0012CC 04                    3386         .byte      4
      0012CD 51 55 49 54           3387         .ascii     "QUIT"
      0012D1                       3388 QUIT:
      0012D1 CD 02 E9         [ 4] 3389         CALL     DOLIT
      0012D4 17 FF                 3390         .word      RPP
      0012D6 CD 03 AC         [ 4] 3391         CALL     RPSTO   ;reset return stack pointer
      0012D9 CD 12 35         [ 4] 3392 QUIT1:  CALL     LBRAC   ;start interpretation
      0012DC CD 11 98         [ 4] 3393 QUIT2:  CALL     QUERY   ;get input
      0012DF CD 12 89         [ 4] 3394         CALL     EVAL
      0012E2 20 F8            [ 2] 3395         JRA     QUIT2   ;continue till error
                                   3396 
                                   3397 ;; The compiler
                                   3398 
                                   3399 ;       '       ( -- ca )
                                   3400 ;       Search vocabularies for
                                   3401 ;       next word in input stream.
      0012E4 12 CC                 3402         .word      LINK
                           0012E6  3403 LINK = . 
      0012E6 01                    3404         .byte      1
      0012E7 27                    3405         .ascii     "'"
      0012E8                       3406 TICK:
      0012E8 CD 0F C3         [ 4] 3407         CALL     TOKEN
      0012EB CD 10 C0         [ 4] 3408         CALL     NAMEQ   ;?defined
      0012EE CD 03 1C         [ 4] 3409         CALL     QBRAN
      0012F1 11 D4                 3410         .word      ABOR1
      0012F3 81               [ 4] 3411         RET     ;yes, push code address
                                   3412 
                                   3413 ;       ALLOT   ( n -- )
                           000001  3414 .if PICATOUT_MOD
                                   3415 ;       Allocate n bytes to RAM 
                           000000  3416 .else 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                   3417 ;       Allocate n bytes to  code dictionary.
                                   3418 .endif 
      0012F4 12 E6                 3419         .word      LINK
                           0012F6  3420 LINK = . 
      0012F6 05                    3421         .byte      5
      0012F7 41 4C 4C 4F 54        3422         .ascii     "ALLOT"
      0012FC                       3423 ALLOT:
      0012FC CD 05 66         [ 4] 3424         CALL     VPP
                           000001  3425 .if PICATOUT_MOD
                                   3426 ; must update APP_VP each time VP is modidied
      0012FF CD 09 BA         [ 4] 3427         call PSTOR 
      001302 CD 19 DA         [ 4] 3428         call UPDATVP 
                           000000  3429 .else
                                   3430         JP     PSTOR
                                   3431 .endif ;PICATOUT_MOD
                                   3432 
                                   3433 ;       ,       ( w -- )
                                   3434 ;         Compile an integer into
                                   3435 ;         variable space.
      001305 12 F6                 3436         .word      LINK
                           001307  3437 LINK = . 
      001307 01                    3438         .byte      1
      001308 2C                    3439         .ascii     ","
      001309                       3440 COMMA:
      001309 CD 0A 38         [ 4] 3441         CALL     HERE
      00130C CD 04 18         [ 4] 3442         CALL     DUPP
      00130F CD 08 B4         [ 4] 3443         CALL     CELLP   ;cell boundary
      001312 CD 05 66         [ 4] 3444         CALL     VPP
      001315 CD 03 5A         [ 4] 3445         CALL     STORE
      001318 CC 03 5A         [ 2] 3446         JP     STORE
                                   3447 
                                   3448 ;       C,      ( c -- )
                                   3449 ;       Compile a byte into
                                   3450 ;       variables space.
      00131B 13 07                 3451        .word      LINK
                           00131D  3452 LINK = . 
      00131D 02                    3453         .byte      2
      00131E 43 2C                 3454         .ascii     "C,"
      001320                       3455 CCOMMA:
      001320 CD 0A 38         [ 4] 3456         CALL     HERE
      001323 CD 04 18         [ 4] 3457         CALL     DUPP
      001326 CD 08 DF         [ 4] 3458         CALL     ONEP
      001329 CD 05 66         [ 4] 3459         CALL     VPP
      00132C CD 03 5A         [ 4] 3460         CALL     STORE
      00132F CC 03 7E         [ 2] 3461         JP     CSTOR
                                   3462 
                                   3463 ;       [COMPILE]       ( -- ; <string> )
                                   3464 ;       Compile next immediate
                                   3465 ;       word into code dictionary.
      001332 13 1D                 3466         .word      LINK
                           001334  3467 LINK = . 
      001334 89                    3468 	.byte      IMEDD+9
      001335 5B 43 4F 4D 50 49 4C  3469         .ascii     "[COMPILE]"
             45 5D
      00133E                       3470 BCOMP:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      00133E CD 12 E8         [ 4] 3471         CALL     TICK
      001341 CC 16 01         [ 2] 3472         JP     JSRC
                                   3473 
                                   3474 ;       COMPILE ( -- )
                                   3475 ;       Compile next jsr in
                                   3476 ;       colon list to code dictionary.
      001344 13 34                 3477         .word      LINK
                           001346  3478 LINK = . 
      001346 47                    3479 	.byte      COMPO+7
      001347 43 4F 4D 50 49 4C 45  3480         .ascii     "COMPILE"
      00134E                       3481 COMPI:
      00134E CD 03 C2         [ 4] 3482         CALL     RFROM
                           000001  3483 .if PICATOUT_MOD
                                   3484 ; no need to increment
                           000000  3485 .else
                                   3486         CALL     ONEP
                                   3487 .endif 
      001351 CD 04 18         [ 4] 3488         CALL     DUPP
      001354 CD 03 71         [ 4] 3489         CALL     AT
      001357 CD 16 01         [ 4] 3490         CALL     JSRC    ;compile subroutine
      00135A CD 08 B4         [ 4] 3491         CALL     CELLP
                           000001  3492 .if PICATOUT_MOD
      00135D 90 93            [ 1] 3493         ldw y,x 
      00135F 90 FE            [ 2] 3494         ldw y,(y)
      001361 1C 00 02         [ 2] 3495         addw x,#CELLL 
      001364 90 FC            [ 2] 3496         jp (y)
                           000000  3497 .else 
                                   3498         JP     TOR
                                   3499 .endif 
                                   3500 
                                   3501 ;       LITERAL ( w -- )
                                   3502 ;       Compile tos to dictionary
                                   3503 ;       as an integer literal.
      001366 13 46                 3504         .word      LINK
                           001368  3505 LINK = . 
      001368 87                    3506 	.byte      IMEDD+7
      001369 4C 49 54 45 52 41 4C  3507         .ascii     "LITERAL"
      001370                       3508 LITER:
      001370 CD 13 4E         [ 4] 3509         CALL     COMPI
                           000001  3510 .if PICATOUT_MOD
      001373 02 E9                 3511         .word DOLIT 
                           000000  3512 .else         
                                   3513         CALL     DOLIT
                                   3514 .endif 
      001375 CC 13 09         [ 2] 3515         JP     COMMA
                                   3516 
                                   3517 ;       $,"     ( -- )
                                   3518 ;       Compile a literal string
                                   3519 ;       up to next " .
      001378 13 68                 3520         .word      LINK
                           00137A  3521 LINK = . 
      00137A 03                    3522         .byte      3
      00137B 24 2C 22              3523         .byte     '$',',','"'
      00137E                       3524 STRCQ:
      00137E CD 02 E9         [ 4] 3525         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      001381 00 22                 3526         .word     34	; "
      001383 CD 0F 46         [ 4] 3527         CALL     PARSE
      001386 CD 0A 38         [ 4] 3528         CALL     HERE
      001389 CD 0A F9         [ 4] 3529         CALL     PACKS   ;string to code dictionary
      00138C CD 0A 21         [ 4] 3530         CALL     COUNT
      00138F CD 06 00         [ 4] 3531         CALL     PLUS    ;calculate aligned end of string
      001392 CD 05 66         [ 4] 3532         CALL     VPP
      001395 CC 03 5A         [ 2] 3533         JP     STORE
                                   3534 
                                   3535 ;; Structures
                                   3536 
                                   3537 ;       FOR     ( -- a )
                                   3538 ;       Start a FOR-NEXT loop
                                   3539 ;       structure in a colon definition.
      001398 13 7A                 3540         .word      LINK
                           00139A  3541 LINK = . 
      00139A 83                    3542 	.byte      IMEDD+3
      00139B 46 4F 52              3543         .ascii     "FOR"
      00139E                       3544 FOR:
      00139E CD 13 4E         [ 4] 3545         CALL     COMPI
                           000001  3546 .if PICATOUT_MOD
      0013A1 03 E1                 3547         .word TOR 
                           000000  3548 .else
                                   3549         CALL     TOR
                                   3550 .endif
      0013A3 CC 0A 38         [ 2] 3551         JP     HERE
                                   3552 
                                   3553 ;       NEXT    ( a -- )
                                   3554 ;       Terminate a FOR-NEXT loop.
      0013A6 13 9A                 3555         .word      LINK
                           0013A8  3556 LINK = . 
      0013A8 84                    3557 	.byte      IMEDD+4
      0013A9 4E 45 58 54           3558         .ascii     "NEXT"
      0013AD                       3559 NEXT:
      0013AD CD 13 4E         [ 4] 3560         CALL     COMPI
                           000001  3561 .if PICATOUT_MOD
      0013B0 02 FD                 3562         .word DONXT 
                           000000  3563 .else 
                                   3564         CALL     DONXT
                                   3565 .endif         
                           000001  3566 .if PICATOUT_MOD
      0013B2 CD 05 9F         [ 4] 3567         call ADRADJ
                                   3568 .endif ; PICATOUT_MOD
      0013B5 CC 13 09         [ 2] 3569         JP     COMMA
                                   3570 
                                   3571 ;       I ( -- n )
                                   3572 ;       stack FOR-NEXT COUNTER 
      0013B8 13 A8                 3573         .word LINK 
                           0013BA  3574         LINK=.
      0013BA 01                    3575         .byte 1 
      0013BB 49                    3576         .ascii "I"
      0013BC                       3577 IFETCH: 
      0013BC 1D 00 02         [ 2] 3578         subw x,#CELLL 
      0013BF 16 03            [ 2] 3579         ldw y,(3,sp)
      0013C1 FF               [ 2] 3580         ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      0013C2 81               [ 4] 3581         ret 
                                   3582 
                                   3583 ;       BEGIN   ( -- a )
                                   3584 ;       Start an infinite or
                                   3585 ;       indefinite loop structure.
      0013C3 13 BA                 3586         .word      LINK
                           0013C5  3587 LINK = . 
      0013C5 85                    3588 	.byte      IMEDD+5
      0013C6 42 45 47 49 4E        3589         .ascii     "BEGIN"
      0013CB                       3590 BEGIN:
      0013CB CC 0A 38         [ 2] 3591         JP     HERE
                                   3592 
                                   3593 ;       UNTIL   ( a -- )
                                   3594 ;       Terminate a BEGIN-UNTIL
                                   3595 ;       indefinite loop structure.
      0013CE 13 C5                 3596         .word      LINK
                           0013D0  3597 LINK = . 
      0013D0 85                    3598 	.byte      IMEDD+5
      0013D1 55 4E 54 49 4C        3599         .ascii     "UNTIL"
      0013D6                       3600 UNTIL:
      0013D6 CD 13 4E         [ 4] 3601         CALL     COMPI
                           000001  3602 .if PICATOUT_MOD
      0013D9 03 1C                 3603         .word    QBRAN 
                           000000  3604 .else 
                                   3605         CALL     QBRAN
                                   3606 .endif 
                           000001  3607 .if PICATOUT_MOD 
      0013DB CD 05 9F         [ 4] 3608         call ADRADJ
                                   3609 .endif ; PICATOUT_MOD
      0013DE CC 13 09         [ 2] 3610         JP     COMMA
                                   3611 
                                   3612 ;       AGAIN   ( a -- )
                                   3613 ;       Terminate a BEGIN-AGAIN
                                   3614 ;       infinite loop structure.
      0013E1 13 D0                 3615         .word      LINK
                           0013E3  3616 LINK = . 
      0013E3 85                    3617 	.byte      IMEDD+5
      0013E4 41 47 41 49 4E        3618         .ascii     "AGAIN"
      0013E9                       3619 AGAIN:
      0013E9 CD 13 4E         [ 4] 3620         CALL     COMPI
                           000001  3621 .if PICATOUT_MOD
      0013EC 03 33                 3622         .word BRAN
                           000000  3623 .else
                                   3624         CALL     BRAN
                                   3625 .endif 
                           000001  3626 .if PICATOUT_MOD 
      0013EE CD 05 9F         [ 4] 3627         call ADRADJ 
                                   3628 .endif ; PICATOUT_MOD
      0013F1 CC 13 09         [ 2] 3629         JP     COMMA
                                   3630 
                                   3631 ;       IF      ( -- A )
                                   3632 ;       Begin a conditional branch.
      0013F4 13 E3                 3633         .word      LINK
                           0013F6  3634 LINK = . 
      0013F6 82                    3635 	.byte      IMEDD+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      0013F7 49 46                 3636         .ascii     "IF"
      0013F9                       3637 IFF:
      0013F9 CD 13 4E         [ 4] 3638         CALL     COMPI
                           000001  3639 .if PICATOUT_MOD
      0013FC 03 1C                 3640         .word QBRAN
                           000000  3641 .else
                                   3642         CALL     QBRAN
                                   3643 .endif 
      0013FE CD 0A 38         [ 4] 3644         CALL     HERE
      001401 CD 09 4B         [ 4] 3645         CALL     ZERO
      001404 CC 13 09         [ 2] 3646         JP     COMMA
                                   3647 
                                   3648 ;       THEN        ( A -- )
                                   3649 ;       Terminate a conditional branch structure.
      001407 13 F6                 3650         .word      LINK
                           001409  3651 LINK = . 
      001409 84                    3652 	.byte      IMEDD+4
      00140A 54 48 45 4E           3653         .ascii     "THEN"
      00140E                       3654 THENN:
      00140E CD 0A 38         [ 4] 3655         CALL     HERE
                           000001  3656 .if PICATOUT_MOD 
      001411 CD 05 9F         [ 4] 3657         call ADRADJ 
                                   3658 .endif ; PICATOUT_MOD
      001414 CD 04 28         [ 4] 3659         CALL     SWAPP
      001417 CC 03 5A         [ 2] 3660         JP     STORE
                                   3661 
                                   3662 ;       ELSE        ( A -- A )
                                   3663 ;       Start the false clause in an IF-ELSE-THEN structure.
      00141A 14 09                 3664         .word      LINK
                           00141C  3665 LINK = . 
      00141C 84                    3666 	.byte      IMEDD+4
      00141D 45 4C 53 45           3667         .ascii     "ELSE"
      001421                       3668 ELSEE:
      001421 CD 13 4E         [ 4] 3669         CALL     COMPI
                           000001  3670 .if PICATOUT_MOD
      001424 03 33                 3671         .word BRAN
                           000000  3672 .else
                                   3673         CALL     BRAN
                                   3674 .endif 
      001426 CD 0A 38         [ 4] 3675         CALL     HERE
      001429 CD 09 4B         [ 4] 3676         CALL     ZERO
      00142C CD 13 09         [ 4] 3677         CALL     COMMA
      00142F CD 04 28         [ 4] 3678         CALL     SWAPP
      001432 CD 0A 38         [ 4] 3679         CALL     HERE
                           000001  3680 .if PICATOUT_MOD 
      001435 CD 05 9F         [ 4] 3681         call ADRADJ 
                                   3682 .endif ; PICATOUT_MOD
      001438 CD 04 28         [ 4] 3683         CALL     SWAPP
      00143B CC 03 5A         [ 2] 3684         JP     STORE
                                   3685 
                                   3686 ;       AHEAD       ( -- A )
                                   3687 ;       Compile a forward branch instruction.
      00143E 14 1C                 3688         .word      LINK
                           001440  3689 LINK = . 
      001440 85                    3690 	.byte      IMEDD+5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      001441 41 48 45 41 44        3691         .ascii     "AHEAD"
      001446                       3692 AHEAD:
      001446 CD 13 4E         [ 4] 3693         CALL     COMPI
                           000001  3694 .if PICATOUT_MOD
      001449 03 33                 3695         .word BRAN
                           000000  3696 .else
                                   3697         CALL     BRAN
                                   3698 .endif 
      00144B CD 0A 38         [ 4] 3699         CALL     HERE
      00144E CD 09 4B         [ 4] 3700         CALL     ZERO
      001451 CC 13 09         [ 2] 3701         JP     COMMA
                                   3702 
                                   3703 ;       WHILE       ( a -- A a )
                                   3704 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      001454 14 40                 3705         .word      LINK
                           001456  3706 LINK = . 
      001456 85                    3707 	.byte      IMEDD+5
      001457 57 48 49 4C 45        3708         .ascii     "WHILE"
      00145C                       3709 WHILE:
      00145C CD 13 4E         [ 4] 3710         CALL     COMPI
                           000001  3711 .if PICATOUT_MOD
      00145F 03 1C                 3712         .word QBRAN
                           000000  3713 .else
                                   3714         CALL     QBRAN
                                   3715 .endif 
      001461 CD 0A 38         [ 4] 3716         CALL     HERE
      001464 CD 09 4B         [ 4] 3717         CALL     ZERO
      001467 CD 13 09         [ 4] 3718         CALL     COMMA
      00146A CC 04 28         [ 2] 3719         JP     SWAPP
                                   3720 
                                   3721 ;       REPEAT      ( A a -- )
                                   3722 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      00146D 14 56                 3723         .word      LINK
                           00146F  3724 LINK = . 
      00146F 86                    3725         .byte      IMEDD+6
      001470 52 45 50 45 41 54     3726         .ascii     "REPEAT"
      001476                       3727 REPEA:
      001476 CD 13 4E         [ 4] 3728         CALL     COMPI
                           000001  3729 .if PICATOUT_MOD
      001479 03 33                 3730         .word BRAN
                           000000  3731 .else
                                   3732         CALL     BRAN
                                   3733 .endif 
                           000001  3734 .if PICATOUT_MOD 
      00147B CD 05 9F         [ 4] 3735         call ADRADJ 
                                   3736 .endif ; PICATOUT_MOD
      00147E CD 13 09         [ 4] 3737         CALL     COMMA
      001481 CD 0A 38         [ 4] 3738         CALL     HERE
                           000001  3739 .if PICATOUT_MOD 
      001484 CD 05 9F         [ 4] 3740         call ADRADJ 
                                   3741 .endif ; PICATOUT_MOD
      001487 CD 04 28         [ 4] 3742         CALL     SWAPP
      00148A CC 03 5A         [ 2] 3743         JP     STORE
                                   3744 
                                   3745 ;       AFT         ( a -- a A )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



                                   3746 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      00148D 14 6F                 3747         .word      LINK
                           00148F  3748 LINK = . 
      00148F 83                    3749 	.byte      IMEDD+3
      001490 41 46 54              3750         .ascii     "AFT"
      001493                       3751 AFT:
      001493 CD 04 0E         [ 4] 3752         CALL     DROP
      001496 CD 14 46         [ 4] 3753         CALL     AHEAD
      001499 CD 0A 38         [ 4] 3754         CALL     HERE
      00149C CC 04 28         [ 2] 3755         JP     SWAPP
                                   3756 
                                   3757 ;       ABORT"      ( -- ; <string> )
                                   3758 ;       Conditional abort with an error message.
      00149F 14 8F                 3759         .word      LINK
                           0014A1  3760 LINK = . 
      0014A1 86                    3761 	.byte      IMEDD+6
      0014A2 41 42 4F 52 54        3762         .ascii     "ABORT"
      0014A7 22                    3763         .byte      '"'
      0014A8                       3764 ABRTQ:
      0014A8 CD 13 4E         [ 4] 3765         CALL     COMPI
                           000001  3766 .if PICATOUT_MOD
      0014AB 11 CC                 3767         .word ABORQ
                           000000  3768 .else
                                   3769         CALL     ABORQ
                                   3770 .endif
      0014AD CC 13 7E         [ 2] 3771         JP     STRCQ
                                   3772 
                                   3773 ;       $"     ( -- ; <string> )
                                   3774 ;       Compile an inline string literal.
      0014B0 14 A1                 3775         .word      LINK
                           0014B2  3776 LINK = . 
      0014B2 82                    3777 	.byte      IMEDD+2
      0014B3 24 22                 3778         .byte     '$','"'
      0014B5                       3779 STRQ:
      0014B5 CD 13 4E         [ 4] 3780         CALL     COMPI
                           000001  3781 .if PICATOUT_MOD
      0014B8 0D E6                 3782         .word STRQP 
                           000000  3783 .else
                                   3784         CALL     STRQP
                                   3785 .endif
      0014BA CC 13 7E         [ 2] 3786         JP     STRCQ
                                   3787 
                                   3788 ;       ."          ( -- ; <string> )
                                   3789 ;       Compile an inline string literal to be typed out at run time.
      0014BD 14 B2                 3790         .word      LINK
                           0014BF  3791 LINK = . 
      0014BF 82                    3792 	.byte      IMEDD+2
      0014C0 2E 22                 3793         .byte     '.','"'
      0014C2                       3794 DOTQ:
      0014C2 CD 13 4E         [ 4] 3795         CALL     COMPI
                           000001  3796 .if PICATOUT_MOD
      0014C5 0D F0                 3797         .word DOTQP 
                           000000  3798 .else
                                   3799         CALL     DOTQP
                                   3800 .endif 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      0014C7 CC 13 7E         [ 2] 3801         JP     STRCQ
                                   3802 
                                   3803 ;; Name compiler
                                   3804 
                                   3805 ;       ?UNIQUE ( a -- a )
                                   3806 ;       Display a warning message
                                   3807 ;       if word already exists.
      0014CA 14 BF                 3808         .word      LINK
                           0014CC  3809 LINK = . 
      0014CC 07                    3810         .byte      7
      0014CD 3F 55 4E 49 51 55 45  3811         .ascii     "?UNIQUE"
      0014D4                       3812 UNIQU:
      0014D4 CD 04 18         [ 4] 3813         CALL     DUPP
      0014D7 CD 10 C0         [ 4] 3814         CALL     NAMEQ   ;?name exists
      0014DA CD 03 1C         [ 4] 3815         CALL     QBRAN
      0014DD 14 F3                 3816         .word      UNIQ1
      0014DF CD 0D F0         [ 4] 3817         CALL     DOTQP   ;redef are OK
      0014E2 07                    3818         .byte       7
      0014E3 20 72 65 44 65 66 20  3819         .ascii     " reDef "       
      0014EA CD 04 42         [ 4] 3820         CALL     OVER
      0014ED CD 0A 21         [ 4] 3821         CALL     COUNT
      0014F0 CD 0D 93         [ 4] 3822         CALL     TYPES   ;just in case
      0014F3 CC 04 0E         [ 2] 3823 UNIQ1:  JP     DROP
                                   3824 
                                   3825 ;       $,n     ( na -- )
                                   3826 ;       Build a new dictionary name
                                   3827 ;       using string at na.
                           000001  3828 .if PICATOUT_MOD
                                   3829 ; compile dans l'espace des variables 
                                   3830 .endif 
      0014F6 14 CC                 3831         .word      LINK
                           0014F8  3832 LINK = . 
      0014F8 03                    3833         .byte      3
      0014F9 24 2C 6E              3834         .ascii     "$,n"
      0014FC                       3835 SNAME:
      0014FC CD 04 18         [ 4] 3836         CALL     DUPP
      0014FF CD 03 8F         [ 4] 3837         CALL     CAT     ;?null input
      001502 CD 03 1C         [ 4] 3838         CALL     QBRAN
      001505 15 32                 3839         .word      PNAM1
      001507 CD 14 D4         [ 4] 3840         CALL     UNIQU   ;?redefinition
      00150A CD 04 18         [ 4] 3841         CALL     DUPP
      00150D CD 0A 21         [ 4] 3842         CALL     COUNT
      001510 CD 06 00         [ 4] 3843         CALL     PLUS
      001513 CD 05 66         [ 4] 3844         CALL     VPP
      001516 CD 03 5A         [ 4] 3845         CALL     STORE
      001519 CD 04 18         [ 4] 3846         CALL     DUPP
      00151C CD 05 84         [ 4] 3847         CALL     LAST
      00151F CD 03 5A         [ 4] 3848         CALL     STORE   ;save na for vocabulary link
      001522 CD 08 C3         [ 4] 3849         CALL     CELLM   ;link address
      001525 CD 05 58         [ 4] 3850         CALL     CNTXT
      001528 CD 03 71         [ 4] 3851         CALL     AT
      00152B CD 04 28         [ 4] 3852         CALL     SWAPP
      00152E CD 03 5A         [ 4] 3853         CALL     STORE
      001531 81               [ 4] 3854         RET     ;save code pointer
      001532 CD 0D E6         [ 4] 3855 PNAM1:  CALL     STRQP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      001535 05                    3856         .byte      5
      001536 20 6E 61 6D 65        3857         .ascii     " name" ;null input
      00153B CC 11 D4         [ 2] 3858         JP     ABOR1
                                   3859 
                                   3860 ;; FORTH compiler
                                   3861 
                                   3862 ;       $COMPILE        ( a -- )
                                   3863 ;       Compile next word to
                                   3864 ;       dictionary as a token or literal.
      00153E 14 F8                 3865         .word      LINK
                           001540  3866 LINK = . 
      001540 08                    3867         .byte      8
      001541 24 43 4F 4D 50 49 4C  3868         .ascii     "$COMPILE"
             45
      001549                       3869 SCOMP:
      001549 CD 10 C0         [ 4] 3870         CALL     NAMEQ
      00154C CD 05 AF         [ 4] 3871         CALL     QDUP    ;?defined
      00154F CD 03 1C         [ 4] 3872         CALL     QBRAN
      001552 15 6A                 3873         .word      SCOM2
      001554 CD 03 71         [ 4] 3874         CALL     AT
      001557 CD 02 E9         [ 4] 3875         CALL     DOLIT
      00155A 80 00                 3876         .word     0x8000	;  IMEDD*256
      00155C CD 04 64         [ 4] 3877         CALL     ANDD    ;?immediate
      00155F CD 03 1C         [ 4] 3878         CALL     QBRAN
      001562 15 67                 3879         .word      SCOM1
      001564 CC 03 43         [ 2] 3880         JP     EXECU
      001567 CC 16 01         [ 2] 3881 SCOM1:  JP     JSRC
      00156A CD 0C 5E         [ 4] 3882 SCOM2:  CALL     NUMBQ   ;try to convert to number
      00156D CD 03 1C         [ 4] 3883         CALL     QBRAN
      001570 11 D4                 3884         .word      ABOR1
      001572 CC 13 70         [ 2] 3885         JP     LITER
                                   3886 
                                   3887 ;       OVERT   ( -- )
                                   3888 ;       Link a new word into vocabulary.
      001575 15 40                 3889         .word      LINK
                           001577  3890 LINK = . 
      001577 05                    3891         .byte      5
      001578 4F 56 45 52 54        3892         .ascii     "OVERT"
      00157D                       3893 OVERT:
      00157D CD 05 84         [ 4] 3894         CALL     LAST
      001580 CD 03 71         [ 4] 3895         CALL     AT
      001583 CD 05 58         [ 4] 3896         CALL     CNTXT
      001586 CC 03 5A         [ 2] 3897         JP     STORE
                                   3898 
                                   3899 ;       ;       ( -- )
                                   3900 ;       Terminate a colon definition.
      001589 15 77                 3901         .word      LINK
                           00158B  3902 LINK = . 
      00158B C1                    3903 	.byte      IMEDD+COMPO+1
      00158C 3B                    3904         .ascii     ";"
      00158D                       3905 SEMIS:
      00158D CD 13 4E         [ 4] 3906         CALL     COMPI
                           000001  3907 .if PICATOUT_MOD
      001590 03 53                 3908         .word EXIT 
                           000000  3909 .else
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                   3910         CALL     EXIT
                                   3911 .endif 
      001592 CD 12 35         [ 4] 3912         CALL     LBRAC
                           000001  3913 .if PICATOUT_MOD
      001595 CD 15 7D         [ 4] 3914         call OVERT 
      001598 CD 1E A6         [ 4] 3915         CALL FMOVE
      00159B CD 05 AF         [ 4] 3916         call QDUP 
      00159E CD 03 1C         [ 4] 3917         call QBRAN 
      0015A1 15 A6                 3918         .word 1$ 
      0015A3 CD 1F 3A         [ 4] 3919         CALL UPDATPTR 
      0015A6 81               [ 4] 3920 1$:     RET 
                           000000  3921 .else 
                                   3922         JP     OVERT
                                   3923 .endif 
                                   3924 
                           000001  3925 .if PICATOUT_MOD
                                   3926 ;       Terminate an ISR definition 
                                   3927 ;       retourn ca of ISR as double
                                   3928 ;       I; ( -- ud )
      0015A7 15 8B                 3929         .word LINK 
                           0015A9  3930         LINK=.
      0015A9 C2                    3931         .byte 2+IMEDD+COMPO 
      0015AA 49 3B                 3932         .ascii "I;" 
      0015AC                       3933 ISEMI:
      0015AC 1D 00 02         [ 2] 3934         subw x,#CELLL  
      0015AF 90 AE 00 80      [ 2] 3935         ldw y,#IRET_CODE 
      0015B3 FF               [ 2] 3936         ldw (x),y 
      0015B4 CD 13 20         [ 4] 3937         call CCOMMA
      0015B7 CD 12 35         [ 4] 3938         call LBRAC 
      0015BA CD 1F 7F         [ 4] 3939         call IFMOVE
      0015BD CD 05 AF         [ 4] 3940         call QDUP 
      0015C0 CD 03 1C         [ 4] 3941         CALL QBRAN 
      0015C3 15 E9                 3942         .word 1$ 
      0015C5 CD 05 74         [ 4] 3943         CALL CPP
      0015C8 CD 03 71         [ 4] 3944         call AT 
      0015CB CD 04 28         [ 4] 3945         call SWAPP 
      0015CE CD 05 74         [ 4] 3946         CALL CPP 
      0015D1 CD 03 5A         [ 4] 3947         call STORE 
      0015D4 CD 19 C3         [ 4] 3948         call UPDATCP 
      0015D7 CD 19 80         [ 4] 3949         call EEPVP 
      0015DA CD 04 0E         [ 4] 3950         call DROP 
      0015DD CD 03 71         [ 4] 3951         call AT 
      0015E0 CD 05 66         [ 4] 3952         call VPP 
      0015E3 CD 03 5A         [ 4] 3953         call STORE 
      0015E6 CC 09 4B         [ 2] 3954         jp ZERO
      0015E9 81               [ 4] 3955 1$:     ret           
                                   3956         
                                   3957 .endif ;PICATOUT_MOD
                                   3958 
                                   3959 ;       ]       ( -- )
                                   3960 ;       Start compiling words in
                                   3961 ;       input stream.
      0015EA 15 A9                 3962         .word      LINK
                           0015EC  3963 LINK = . 
      0015EC 01                    3964         .byte      1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      0015ED 5D                    3965         .ascii     "]"
      0015EE                       3966 RBRAC:
      0015EE CD 02 E9         [ 4] 3967         CALL   DOLIT
      0015F1 15 49                 3968         .word  SCOMP
      0015F3 CD 05 36         [ 4] 3969         CALL   TEVAL
      0015F6 CC 03 5A         [ 2] 3970         JP     STORE
                                   3971 
                                   3972 ;       CALL,    ( ca -- )
                                   3973 ;       Compile a subroutine call.
      0015F9 15 EC                 3974         .word      LINK
                           0015FB  3975 LINK = . 
      0015FB 04                    3976         .byte      4
      0015FC 43 41 4C 4C 2C        3977         .ascii     "CALL,"
      001601                       3978 JSRC:
      001601 CD 02 E9         [ 4] 3979         CALL     DOLIT
      001604 00 CD                 3980         .word     CALLL     ;CALL
      001606 CD 13 20         [ 4] 3981         CALL     CCOMMA
      001609 CC 13 09         [ 2] 3982         JP     COMMA
                                   3983 
                           000001  3984 .if PICATOUT_MOD
                                   3985 ;       INIT-OFS ( -- )
                                   3986 ;       compute offset to adjust jump address 
                                   3987 ;       set variable OFFSET 
      00160C 15 FB                 3988         .word LINK 
                           00160E  3989         LINK=.
      00160E 08                    3990         .byte 8 
      00160F 49 4E 49 54 2D 4F 46  3991         .ascii "INIT-OFS" 
             53
      001617                       3992 INITOFS:
      001617 CD 05 25         [ 4] 3993         call TFLASH 
      00161A CD 03 71         [ 4] 3994         CALL AT 
      00161D CD 04 18         [ 4] 3995         CALL DUPP 
      001620 CD 03 1C         [ 4] 3996         call QBRAN
      001623 16 34                 3997         .word 1$
      001625 CD 04 0E         [ 4] 3998         call DROP  
      001628 CD 05 74         [ 4] 3999         call CPP 
      00162B CD 03 71         [ 4] 4000         call AT 
      00162E CD 0A 38         [ 4] 4001         call HERE
      001631 CD 06 5E         [ 4] 4002         call SUBB 
      001634 CD 05 96         [ 4] 4003 1$:     call OFFSET 
      001637 CC 03 5A         [ 2] 4004         jp STORE  
                                   4005 .endif 
                                   4006 
                                   4007 ;       :       ( -- ; <string> )
                                   4008 ;       Start a new colon definition
                                   4009 ;       using next word as its name.
      00163A 16 0E                 4010         .word      LINK
                           00163C  4011 LINK = . 
      00163C 01                    4012         .byte      1
      00163D 3A                    4013         .ascii     ":"
      00163E                       4014 COLON:
                           000001  4015 .if PICATOUT_MOD
      00163E CD 16 17         [ 4] 4016         call INITOFS       
                                   4017 .endif ; PICATOUT_MOD
      001641 CD 0F C3         [ 4] 4018         CALL   TOKEN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      001644 CD 14 FC         [ 4] 4019         CALL   SNAME
      001647 CC 15 EE         [ 2] 4020         JP     RBRAC
                                   4021 
                           000001  4022 .if PICATOUT_MOD 
                                   4023 ;       I:  ( -- )
                                   4024 ;       Start interrupt service routine definition
                                   4025 ;       those definition have no name.
      00164A 16 3C                 4026         .word LINK
                           00164C  4027         LINK=.
      00164C 02                    4028         .byte 2 
      00164D 49 3A                 4029         .ascii "I:" 
      00164F                       4030 ICOLON:
      00164F CD 16 17         [ 4] 4031         call INITOFS 
      001652 CC 15 EE         [ 2] 4032         jp RBRAC  
                                   4033 .endif ; PICATOUT_MOD
                                   4034 
                                   4035 ;       IMMEDIATE       ( -- )
                                   4036 ;       Make last compiled word
                                   4037 ;       an immediate word.
      001655 16 4C                 4038         .word      LINK
                           001657  4039 LINK = . 
      001657 09                    4040         .byte      9
      001658 49 4D 4D 45 44 49 41  4041         .ascii     "IMMEDIATE"
             54 45
      001661                       4042 IMMED:
      001661 CD 02 E9         [ 4] 4043         CALL     DOLIT
      001664 80 00                 4044         .word     0x8000	;  IMEDD*256
      001666 CD 05 84         [ 4] 4045         CALL     LAST
      001669 CD 03 71         [ 4] 4046         CALL     AT
      00166C CD 03 71         [ 4] 4047         CALL     AT
      00166F CD 04 78         [ 4] 4048         CALL     ORR
      001672 CD 05 84         [ 4] 4049         CALL     LAST
      001675 CD 03 71         [ 4] 4050         CALL     AT
      001678 CC 03 5A         [ 2] 4051         JP     STORE
                                   4052 
                                   4053 ;; Defining words
                                   4054 
                                   4055 ;       CREATE  ( -- ; <string> )
                                   4056 ;       Compile a new array
                                   4057 ;       without allocating space.
      00167B 16 57                 4058         .word      LINK
                           00167D  4059 LINK = . 
      00167D 06                    4060         .byte      6
      00167E 43 52 45 41 54 45     4061         .ascii     "CREATE"
      001684                       4062 CREAT:
      001684 CD 0F C3         [ 4] 4063         CALL     TOKEN
      001687 CD 14 FC         [ 4] 4064         CALL     SNAME
      00168A CD 15 7D         [ 4] 4065         CALL     OVERT        
      00168D CD 13 4E         [ 4] 4066         CALL     COMPI 
                           000001  4067 .if PICATOUT_MOD
      001690 04 C5                 4068         .word DOVAR 
                           000000  4069 .else
                                   4070         CALL     DOVAR
                                   4071 .endif 
      001692 81               [ 4] 4072         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                   4073 
                                   4074 ;       VARIABLE        ( -- ; <string> )
                                   4075 ;       Compile a new variable
                                   4076 ;       initialized to 0.
      001693 16 7D                 4077         .word      LINK
                           001695  4078 LINK = . 
      001695 08                    4079         .byte      8
      001696 56 41 52 49 41 42 4C  4080         .ascii     "VARIABLE"
             45
      00169E                       4081 VARIA:
                           000001  4082 .if PICATOUT_MOD
                                   4083 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      00169E CD 0A 38         [ 4] 4084         CALL HERE
      0016A1 CD 04 18         [ 4] 4085         CALL DUPP 
      0016A4 CD 08 B4         [ 4] 4086         CALL CELLP
      0016A7 CD 05 66         [ 4] 4087         CALL VPP 
      0016AA CD 03 5A         [ 4] 4088         CALL STORE
      0016AD CD 19 DA         [ 4] 4089         call UPDATVP 
                                   4090 .endif         
      0016B0 CD 16 84         [ 4] 4091         CALL CREAT
      0016B3 CD 04 18         [ 4] 4092         CALL DUPP
      0016B6 CD 13 09         [ 4] 4093         CALL COMMA
      0016B9 CD 09 4B         [ 4] 4094         CALL ZERO
                           000001  4095 .if PICATOUT_MOD 
      0016BC CD 04 28         [ 4] 4096         call SWAPP 
      0016BF CD 03 5A         [ 4] 4097         CALL STORE 
      0016C2 CD 1E A6         [ 4] 4098         CALL FMOVE ; move definition to FLASH
      0016C5 CD 05 AF         [ 4] 4099         CALL QDUP 
      0016C8 CD 03 1C         [ 4] 4100         CALL QBRAN 
      0016CB 16 D0                 4101         .word 1$
      0016CD CD 1F 3A         [ 4] 4102         CALL UPDATPTR
      0016D0 81               [ 4] 4103 1$:     RET 
                                   4104 .endif ;PICATOUT_MOD        
                                   4105 
                           000001  4106 .if PICATOUT_MOD
                                   4107 ;       CONSTANT  ( n -- ; <string> )
                                   4108 ;       Compile a new constant 
                                   4109 ;       n CONSTANT name 
      0016D1 16 95                 4110         .word LINK 
                           0016D3  4111         LINK=. 
      0016D3 08                    4112         .byte 8 
      0016D4 43 4F 4E 53 54 41 4E  4113         .ascii "CONSTANT" 
             54
      0016DC                       4114 CONSTANT:          
      0016DC CD 0F C3         [ 4] 4115         CALL TOKEN
      0016DF CD 14 FC         [ 4] 4116         CALL SNAME 
      0016E2 CD 15 7D         [ 4] 4117         CALL OVERT 
      0016E5 CD 13 4E         [ 4] 4118         CALL COMPI 
                           000001  4119 .if PICATOUT_MOD
      0016E8 17 06                 4120         .word DOCONST
                           000000  4121 .else
                                   4122         CALL DOCONST
                                   4123 .endif 
      0016EA CD 13 09         [ 4] 4124         CALL COMMA 
      0016ED CD 1E A6         [ 4] 4125         CALL FMOVE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      0016F0 CD 05 AF         [ 4] 4126         CALL QDUP 
      0016F3 CD 03 1C         [ 4] 4127         CALL QBRAN 
      0016F6 16 FB                 4128         .word 1$ 
      0016F8 CD 1F 3A         [ 4] 4129         CALL UPDATPTR  
      0016FB 81               [ 4] 4130 1$:     RET          
                                   4131 
                                   4132 ; CONSTANT runtime semantic 
                                   4133 ; doCONST  ( -- n )
      0016FC 16 D3                 4134         .word LINK 
                           0016FE  4135         LINK=.
      0016FE 07                    4136         .byte 7
      0016FF 44 4F 43 4F 4E 53 54  4137         .ascii "DOCONST"
      001706                       4138 DOCONST:
      001706 1D 00 02         [ 2] 4139         subw x,#CELLL
      001709 90 85            [ 2] 4140         popw y 
      00170B 90 FE            [ 2] 4141         ldw y,(y) 
      00170D FF               [ 2] 4142         ldw (x),y 
      00170E 81               [ 4] 4143         ret 
                                   4144 .endif ;PICATOUT_MOD
                                   4145 
                                   4146 
                                   4147 ;; Tools
                                   4148 
                                   4149 ;       _TYPE   ( b u -- )
                                   4150 ;       Display a string. Filter
                                   4151 ;       non-printing characters.
      00170F 16 FE                 4152         .word      LINK
                           001711  4153 LINK = . 
      001711 05                    4154         .byte      5
      001712 5F 54 59 50 45        4155         .ascii     "_TYPE"
      001717                       4156 UTYPE:
      001717 CD 03 E1         [ 4] 4157         CALL     TOR     ;start count down loop
      00171A 20 0F            [ 2] 4158         JRA     UTYP2   ;skip first pass
      00171C CD 04 18         [ 4] 4159 UTYP1:  CALL     DUPP
      00171F CD 03 8F         [ 4] 4160         CALL     CAT
      001722 CD 09 75         [ 4] 4161         CALL     TCHAR
      001725 CD 02 D3         [ 4] 4162         CALL     EMIT    ;display only printable
      001728 CD 08 DF         [ 4] 4163         CALL     ONEP    ;increment address
      00172B CD 02 FD         [ 4] 4164 UTYP2:  CALL     DONXT
      00172E 17 1C                 4165         .word      UTYP1   ;loop till done
      001730 CC 04 0E         [ 2] 4166         JP     DROP
                                   4167 
                                   4168 ;       dm+     ( a u -- a )
                                   4169 ;       Dump u bytes from ,
                                   4170 ;       leaving a+u on  stack.
      001733 17 11                 4171         .word      LINK
                           001735  4172 LINK = . 
      001735 03                    4173         .byte      3
      001736 64 6D 2B              4174         .ascii     "dm+"
      001739                       4175 DUMPP:
      001739 CD 04 42         [ 4] 4176         CALL     OVER
      00173C CD 02 E9         [ 4] 4177         CALL     DOLIT
      00173F 00 04                 4178         .word      4
      001741 CD 0E 19         [ 4] 4179         CALL     UDOTR   ;display address
      001744 CD 0D 69         [ 4] 4180         CALL     SPACE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      001747 CD 03 E1         [ 4] 4181         CALL     TOR     ;start count down loop
      00174A 20 11            [ 2] 4182         JRA     PDUM2   ;skip first pass
      00174C CD 04 18         [ 4] 4183 PDUM1:  CALL     DUPP
      00174F CD 03 8F         [ 4] 4184         CALL     CAT
      001752 CD 02 E9         [ 4] 4185         CALL     DOLIT
      001755 00 03                 4186         .word      3
      001757 CD 0E 19         [ 4] 4187         CALL     UDOTR   ;display numeric data
      00175A CD 08 DF         [ 4] 4188         CALL     ONEP    ;increment address
      00175D CD 02 FD         [ 4] 4189 PDUM2:  CALL     DONXT
      001760 17 4C                 4190         .word      PDUM1   ;loop till done
      001762 81               [ 4] 4191         RET
                                   4192 
                                   4193 ;       DUMP    ( a u -- )
                                   4194 ;       Dump u bytes from a,
                                   4195 ;       in a formatted manner.
      001763 17 35                 4196         .word      LINK
                           001765  4197 LINK = . 
      001765 04                    4198         .byte      4
      001766 44 55 4D 50           4199         .ascii     "DUMP"
      00176A                       4200 DUMP:
      00176A CD 04 D5         [ 4] 4201         CALL     BASE
      00176D CD 03 71         [ 4] 4202         CALL     AT
      001770 CD 03 E1         [ 4] 4203         CALL     TOR
      001773 CD 0B F1         [ 4] 4204         CALL     HEX     ;save radix, set hex
      001776 CD 02 E9         [ 4] 4205         CALL     DOLIT
      001779 00 10                 4206         .word      16
      00177B CD 08 05         [ 4] 4207         CALL     SLASH   ;change count to lines
      00177E CD 03 E1         [ 4] 4208         CALL     TOR     ;start count down loop
      001781 CD 0D B1         [ 4] 4209 DUMP1:  CALL     CR
      001784 CD 02 E9         [ 4] 4210         CALL     DOLIT
      001787 00 10                 4211         .word      16
      001789 CD 05 EB         [ 4] 4212         CALL     DDUP
      00178C CD 17 39         [ 4] 4213         CALL     DUMPP   ;display numeric
      00178F CD 05 C0         [ 4] 4214         CALL     ROT
      001792 CD 05 C0         [ 4] 4215         CALL     ROT
      001795 CD 0D 69         [ 4] 4216         CALL     SPACE
      001798 CD 0D 69         [ 4] 4217         CALL     SPACE
      00179B CD 17 17         [ 4] 4218         CALL     UTYPE   ;display printable characters
      00179E CD 02 FD         [ 4] 4219         CALL     DONXT
      0017A1 17 81                 4220         .word      DUMP1   ;loop till done
      0017A3 CD 04 0E         [ 4] 4221 DUMP3:  CALL     DROP
      0017A6 CD 03 C2         [ 4] 4222         CALL     RFROM
      0017A9 CD 04 D5         [ 4] 4223         CALL     BASE
      0017AC CC 03 5A         [ 2] 4224         JP     STORE   ;restore radix
                                   4225 
                                   4226 ;       .S      ( ... -- ... )
                                   4227 ;        Display  contents of stack.
      0017AF 17 65                 4228         .word      LINK
                           0017B1  4229 LINK = . 
      0017B1 02                    4230         .byte      2
      0017B2 2E 53                 4231         .ascii     ".S"
      0017B4                       4232 DOTS:
      0017B4 CD 0D B1         [ 4] 4233         CALL     CR
      0017B7 CD 09 8E         [ 4] 4234         CALL     DEPTH   ;stack depth
      0017BA CD 03 E1         [ 4] 4235         CALL     TOR     ;start count down loop
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      0017BD 20 0C            [ 2] 4236         JRA     DOTS2   ;skip first pass
      0017BF CD 03 D5         [ 4] 4237 DOTS1:  CALL     RAT
      0017C2 CD 08 DF         [ 4] 4238         CALL ONEP
      0017C5 CD 09 A5         [ 4] 4239 	CALL     PICK
      0017C8 CD 0E 4C         [ 4] 4240         CALL     DOT     ;index stack, display contents
      0017CB CD 02 FD         [ 4] 4241 DOTS2:  CALL     DONXT
      0017CE 17 BF                 4242         .word      DOTS1   ;loop till done
      0017D0 CD 0D F0         [ 4] 4243         CALL     DOTQP
      0017D3 05                    4244         .byte      5
      0017D4 20 3C 73 70 20        4245         .ascii     " <sp "
      0017D9 81               [ 4] 4246         RET
                                   4247 
                                   4248 ;       >NAME   ( ca -- na | F )
                                   4249 ;       Convert code address
                                   4250 ;       to a name address.
      0017DA 17 B1                 4251         .word      LINK
                           0017DC  4252 LINK = . 
      0017DC 05                    4253         .byte      5
      0017DD 3E 4E 41 4D 45        4254         .ascii     ">NAME"
      0017E2                       4255 TNAME:
      0017E2 CD 05 58         [ 4] 4256         CALL     CNTXT   ;vocabulary link
      0017E5 CD 03 71         [ 4] 4257 TNAM2:  CALL     AT
      0017E8 CD 04 18         [ 4] 4258         CALL     DUPP    ;?last word in a vocabulary
      0017EB CD 03 1C         [ 4] 4259         CALL     QBRAN
      0017EE 18 09                 4260         .word      TNAM4
      0017F0 CD 05 EB         [ 4] 4261         CALL     DDUP
      0017F3 CD 0F D1         [ 4] 4262         CALL     NAMET
      0017F6 CD 04 8D         [ 4] 4263         CALL     XORR    ;compare
      0017F9 CD 03 1C         [ 4] 4264         CALL     QBRAN
      0017FC 18 03                 4265         .word      TNAM3
      0017FE CD 08 C3         [ 4] 4266         CALL     CELLM   ;continue with next word
      001801 20 E2            [ 2] 4267         JRA     TNAM2
      001803 CD 04 28         [ 4] 4268 TNAM3:  CALL     SWAPP
      001806 CC 04 0E         [ 2] 4269         JP     DROP
      001809 CD 05 E0         [ 4] 4270 TNAM4:  CALL     DDROP
      00180C CC 09 4B         [ 2] 4271         JP     ZERO
                                   4272 
                                   4273 ;       .ID     ( na -- )
                                   4274 ;        Display  name at address.
      00180F 17 DC                 4275         .word      LINK
                           001811  4276 LINK = . 
      001811 03                    4277         .byte      3
      001812 2E 49 44              4278         .ascii     ".ID"
      001815                       4279 DOTID:
      001815 CD 05 AF         [ 4] 4280         CALL     QDUP    ;if zero no name
      001818 CD 03 1C         [ 4] 4281         CALL     QBRAN
      00181B 18 2B                 4282         .word      DOTI1
      00181D CD 0A 21         [ 4] 4283         CALL     COUNT
      001820 CD 02 E9         [ 4] 4284         CALL     DOLIT
      001823 00 1F                 4285         .word      0x1F
      001825 CD 04 64         [ 4] 4286         CALL     ANDD    ;mask lexicon bits
      001828 CC 17 17         [ 2] 4287         JP     UTYPE
      00182B CD 0D F0         [ 4] 4288 DOTI1:  CALL     DOTQP
      00182E 09                    4289         .byte      9
      00182F 20 6E 6F 4E 61 6D 65  4290         .ascii     " noName"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      001836 81               [ 4] 4291         RET
                                   4292 
                           000000  4293 WANT_SEE=0 
                           000000  4294 .if WANT_SEE 
                                   4295 ;       SEE     ( -- ; <string> )
                                   4296 ;       A simple decompiler.
                                   4297 ;       Updated for byte machines.
                                   4298         .word      LINK
                                   4299 LINK = . 
                                   4300         .byte      3
                                   4301         .ascii     "SEE"
                                   4302 SEE:
                                   4303         CALL     TICK    ;starting address
                                   4304         CALL     CR
                                   4305         CALL     ONEM
                                   4306 SEE1:   CALL     ONEP
                                   4307         CALL     DUPP
                                   4308         CALL     AT
                                   4309         CALL     DUPP    ;?does it contain a zero
                                   4310         CALL     QBRAN
                                   4311         .word    SEE2
                                   4312         CALL     TNAME   ;?is it a name
                                   4313 SEE2:   CALL     QDUP    ;name address or zero
                                   4314         CALL     QBRAN
                                   4315         .word    SEE3
                                   4316         CALL     SPACE
                                   4317         CALL     DOTID   ;display name
                                   4318         CALL     ONEP
                                   4319         JRA      SEE4
                                   4320 SEE3:   CALL     DUPP
                                   4321         CALL     CAT
                                   4322         CALL     UDOT    ;display number
                                   4323 SEE4:   CALL     NUFQ    ;user control
                                   4324         CALL     QBRAN
                                   4325         .word    SEE1
                                   4326         JP     DROP
                                   4327 .endif ; WANT_SEE 
                                   4328 
                                   4329 ;       WORDS   ( -- )
                                   4330 ;       Display names in vocabulary.
      001837 18 11                 4331         .word      LINK
                           001839  4332 LINK = . 
      001839 05                    4333         .byte      5
      00183A 57 4F 52 44 53        4334         .ascii     "WORDS"
      00183F                       4335 WORDS:
      00183F CD 0D B1         [ 4] 4336         CALL     CR
      001842 CD 05 58         [ 4] 4337         CALL     CNTXT   ;only in context
      001845 CD 03 71         [ 4] 4338 WORS1:  CALL     AT
      001848 CD 05 AF         [ 4] 4339         CALL     QDUP    ;?at end of list
      00184B CD 03 1C         [ 4] 4340         CALL     QBRAN
      00184E 18 64                 4341         .word      WORS2
      001850 CD 04 18         [ 4] 4342         CALL     DUPP
      001853 CD 0D 69         [ 4] 4343         CALL     SPACE
      001856 CD 18 15         [ 4] 4344         CALL     DOTID   ;display a name
      001859 CD 08 C3         [ 4] 4345         CALL     CELLM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      00185C CD 03 33         [ 4] 4346         CALL     BRAN
      00185F 18 45                 4347         .word      WORS1
      001861 CD 04 0E         [ 4] 4348         CALL     DROP
      001864 81               [ 4] 4349 WORS2:  RET
                                   4350 
                                   4351         
                                   4352 ;; Hardware reset
                                   4353 
                                   4354 ;       hi      ( -- )
                                   4355 ;       Display sign-on message.
      001865 18 39                 4356         .word      LINK
                           001867  4357 LINK = . 
      001867 02                    4358         .byte      2
      001868 68 69                 4359         .ascii     "hi"
      00186A                       4360 HI:
      00186A CD 0D B1         [ 4] 4361         CALL     CR
      00186D CD 0D F0         [ 4] 4362         CALL     DOTQP   ;initialize I/O
      001870 0F                    4363         .byte      15
      001871 73 74 6D 38 65 46 6F  4364         .ascii     "stm8eForth v"
             72 74 68 20 76
      00187D 33                    4365 	.byte      VER+'0'
      00187E 2E                    4366         .byte      '.' 
      00187F 30                    4367 	.byte      EXT+'0' ;version
      001880 CC 0D B1         [ 2] 4368         JP     CR
                                   4369 
                           000000  4370 WANT_DEBUG=0
                           000000  4371 .if WANT_DEBUG 
                                   4372 ;       DEBUG      ( -- )
                                   4373 ;       Display sign-on message.
                                   4374 ;        .word      LINK
                                   4375 LINK = . 
                                   4376         .byte      5
                                   4377         .ascii     "DEBUG"
                                   4378 DEBUG:
                                   4379 	CALL DOLIT
                                   4380 	.word 0x65
                                   4381 	CALL EMIT
                                   4382 	CALL DOLIT
                                   4383 	.word 0
                                   4384  	CALL ZLESS 
                                   4385 	CALL DOLIT
                                   4386 	.word 0xFFFE
                                   4387 	CALL ZLESS 
                                   4388 	CALL UPLUS 
                                   4389  	CALL DROP 
                                   4390 	CALL DOLIT
                                   4391 	.word 3
                                   4392 	CALL UPLUS 
                                   4393 	CALL UPLUS 
                                   4394  	CALL DROP
                                   4395 	CALL DOLIT
                                   4396 	.word 0x43
                                   4397 	CALL UPLUS 
                                   4398  	CALL DROP
                                   4399 	CALL EMIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                   4400 	CALL DOLIT
                                   4401 	.word 0x4F
                                   4402 	CALL DOLIT
                                   4403 	.word 0x6F
                                   4404  	CALL XORR
                                   4405 	CALL DOLIT
                                   4406 	.word 0xF0
                                   4407  	CALL ANDD
                                   4408 	CALL DOLIT
                                   4409 	.word 0x4F
                                   4410  	CALL ORR
                                   4411 	CALL EMIT
                                   4412 	CALL DOLIT
                                   4413 	.word 8
                                   4414 	CALL DOLIT
                                   4415 	.word 6
                                   4416  	CALL SWAPP
                                   4417 	CALL OVER
                                   4418 	CALL XORR
                                   4419 	CALL DOLIT
                                   4420 	.word 3
                                   4421 	CALL ANDD 
                                   4422 	CALL ANDD
                                   4423 	CALL DOLIT
                                   4424 	.word 0x70
                                   4425 	CALL UPLUS 
                                   4426 	CALL DROP
                                   4427 	CALL EMIT
                                   4428 	CALL DOLIT
                                   4429 	.word 0
                                   4430 	CALL QBRAN
                                   4431 	.word DEBUG1
                                   4432 	CALL DOLIT
                                   4433 	.word 0x3F
                                   4434 DEBUG1:
                                   4435 	CALL DOLIT
                                   4436 	.word 0xFFFF
                                   4437 	CALL QBRAN
                                   4438 	.word DEBUG2
                                   4439 	CALL DOLIT
                                   4440 	.word 0x74
                                   4441 	CALL BRAN
                                   4442 	.word DEBUG3
                                   4443 DEBUG2:
                                   4444 	CALL DOLIT
                                   4445 	.word 0x21
                                   4446 DEBUG3:
                                   4447 	CALL EMIT
                                   4448 	CALL DOLIT
                                   4449 	.word 0x68
                                   4450 	CALL DOLIT
                                   4451 	.word 0x80
                                   4452 	CALL STORE
                                   4453 	CALL DOLIT
                                   4454 	.word 0x80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                   4455 	CALL AT
                                   4456 	CALL EMIT
                                   4457 	CALL DOLIT
                                   4458 	.word 0x4D
                                   4459 	CALL TOR
                                   4460 	CALL RAT
                                   4461 	CALL RFROM
                                   4462 	CALL ANDD
                                   4463 	CALL EMIT
                                   4464 	CALL DOLIT
                                   4465 	.word 0x61
                                   4466 	CALL DOLIT
                                   4467 	.word 0xA
                                   4468 	CALL TOR
                                   4469 DEBUG4:
                                   4470 	CALL DOLIT
                                   4471 	.word 1
                                   4472 	CALL UPLUS 
                                   4473 	CALL DROP
                                   4474 	CALL DONXT
                                   4475 	.word DEBUG4
                                   4476 	CALL EMIT
                                   4477 	CALL DOLIT
                                   4478 	.word 0x656D
                                   4479 	CALL DOLIT
                                   4480 	.word 0x100
                                   4481 	CALL UMSTA
                                   4482 	CALL SWAPP
                                   4483 	CALL DOLIT
                                   4484 	.word 0x100
                                   4485 	CALL UMSTA
                                   4486 	CALL SWAPP 
                                   4487 	CALL DROP
                                   4488 	CALL EMIT
                                   4489 	CALL EMIT
                                   4490 	CALL DOLIT
                                   4491 	.word 0x2043
                                   4492 	CALL DOLIT
                                   4493 	.word 0
                                   4494 	CALL DOLIT
                                   4495 	.word 0x100
                                   4496 	CALL UMMOD
                                   4497 	CALL EMIT
                                   4498 	CALL EMIT
                                   4499 	;JP ORIG
                                   4500 	RET
                                   4501 .endif ; WANT_DEBUG 
                                   4502 
                                   4503 
                                   4504 ;       'BOOT   ( -- a )
                                   4505 ;       The application startup vector.
      001883 18 67                 4506         .word      LINK
                           001885  4507 LINK = . 
      001885 05                    4508         .byte      5
      001886 27 42 4F 4F 54        4509         .ascii     "'BOOT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      00188B                       4510 TBOOT:
      00188B CD 04 C5         [ 4] 4511         CALL     DOVAR
      00188E 40 02                 4512         .word    APP_RUN      ;application to boot
                                   4513 
                                   4514 ;       COLD    ( -- )
                                   4515 ;       The hilevel cold start s=ence.
      001890 18 85                 4516         .word      LINK
                           001892  4517         LINK = . 
      001892 04                    4518         .byte      4
      001893 43 4F 4C 44           4519         .ascii     "COLD"
      001897                       4520 COLD:
                           000000  4521 .if WANT_DEBUG
                                   4522         CALL DEBUG
                                   4523 .endif 
      001897 CD 02 E9         [ 4] 4524 COLD1:  CALL     DOLIT
      00189A 00 27                 4525         .word      UZERO
      00189C CD 02 E9         [ 4] 4526 	CALL     DOLIT
      00189F 00 06                 4527         .word      UPP
      0018A1 CD 02 E9         [ 4] 4528         CALL     DOLIT
      0018A4 00 1A                 4529 	.word      UEND-UZERO
      0018A6 CD 0A 85         [ 4] 4530         CALL     CMOVE   ;initialize user area
                                   4531 
                           000001  4532 .if PICATOUT_MOD
                                   4533 ; if APP_RUN==0 initialize with ca de 'hi'  
      0018A9 90 CE 40 02      [ 2] 4534         ldw y,APP_RUN 
      0018AD 26 0B            [ 1] 4535         jrne 0$
      0018AF 1D 00 02         [ 2] 4536         subw x,#CELLL 
      0018B2 90 AE 18 6A      [ 2] 4537         ldw y,#HI  
      0018B6 FF               [ 2] 4538         ldw (x),y
      0018B7 CD 19 B2         [ 4] 4539         call UPDATRUN 
      0018BA                       4540 0$:        
                                   4541 ; update LAST with APP_LAST 
                                   4542 ; if APP_LAST > LAST else do the opposite
      0018BA 90 CE 40 00      [ 2] 4543         ldw y,APP_LAST 
      0018BE 90 B3 1A         [ 2] 4544         cpw y,ULAST 
      0018C1 22 05            [ 1] 4545         jrugt 1$ 
                                   4546 ; save LAST at APP_LAST  
      0018C3 CD 19 9A         [ 4] 4547         call UPDATLAST 
      0018C6 20 06            [ 2] 4548         jra 2$
      0018C8                       4549 1$: ; update LAST with APP_LAST 
      0018C8 90 BF 1A         [ 2] 4550         ldw ULAST,y
      0018CB 90 BF 14         [ 2] 4551         ldw UCNTXT,y 
      0018CE                       4552 2$:  
                                   4553 ; update APP_CP if < app_space 
      0018CE 90 CE 40 04      [ 2] 4554         ldw y,APP_CP  
      0018D2 90 B3 18         [ 2] 4555         cpw y,UCP   
      0018D5 24 06            [ 1] 4556         jruge 3$ 
      0018D7 CD 19 C3         [ 4] 4557         call UPDATCP
      0018DA 90 BE 18         [ 2] 4558         ldw y,UCP   
      0018DD                       4559 3$:
      0018DD 90 BF 18         [ 2] 4560         ldw UCP,y                 
                                   4561 ; update UVP with APP_VP  
                                   4562 ; if APP_VP>UVP else do the opposite 
      0018E0 90 CE 40 06      [ 2] 4563         ldw y,APP_VP 
      0018E4 90 B3 16         [ 2] 4564         cpw y,UVP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      0018E7 22 05            [ 1] 4565         jrugt 4$
      0018E9 CD 19 DA         [ 4] 4566         call UPDATVP 
      0018EC 20 03            [ 2] 4567         jra 6$
      0018EE                       4568 4$: ; update UVP with APP_VP 
      0018EE 90 BF 16         [ 2] 4569         ldw UVP,y 
      0018F1                       4570 6$:      
                                   4571 .endif ; PICATOUT_MOD
      0018F1 CD 12 B4         [ 4] 4572         CALL     PRESE   ;initialize data stack and TIB
      0018F4 CD 18 8B         [ 4] 4573         CALL     TBOOT
      0018F7 CD 0A 6E         [ 4] 4574         CALL     ATEXE   ;application boot
      0018FA CD 15 7D         [ 4] 4575         CALL     OVERT
      0018FD CC 12 D1         [ 2] 4576         JP     QUIT    ;start interpretation
                                   4577 
                           000001  4578 .if PICATOUT_MOD
                                   4579         ; keep this include at end 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                                   4580         .include "flash.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21 ;  routines to write to FLASH, EEPROM 
                                     22 ;  and OPTION 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26 ;--------------------------------
                                     27 ; initialize FPTR 
                                     28 ; FP!  ( ud -- )
                                     29 ;---------------------------------
      001900 18 92                   30     .word LINK 
                           001902    31     LINK=.
      001902 03                      32     .byte 3 
      001903 46 50 21                33     .ascii "FP!"
      001906                         34 fptr_store:
      001906 90 93            [ 1]   35     ldw y,x
      001908 90 FE            [ 2]   36     ldw y,(y)
      00190A 90 9F            [ 1]   37     ld a,yl 
      00190C B7 30            [ 1]   38     ld FPTR,a 
      00190E 1C 00 02         [ 2]   39     addw x,#CELLL 
      001911 90 93            [ 1]   40     ldw y,x 
      001913 90 FE            [ 2]   41     ldw y,(y)
      001915 90 BF 31         [ 2]   42     ldw PTR16,y
      001918 1C 00 02         [ 2]   43     addw x,#CELLL 
      00191B 81               [ 4]   44     ret 
                                     45 
                                     46 ;-----------------------------------
                                     47 ; return EEPROM base address 
                                     48 ; as a double 
                                     49 ;  EEPROM  ( -- ud )
                                     50 ;-----------------------------------
      00191C 19 02                   51     .word LINK 
                           00191E    52 LINK=.
      00191E 06                      53     .byte 6 
      00191F 45 45 50 52 4F 4D       54     .ascii "EEPROM"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      001925                         55 EEPROM: 
      001925 90 AE 40 00      [ 2]   56     ldw y,#EEPROM_BASE
      001929 1D 00 04         [ 2]   57     subw x,#2*CELLL 
      00192C EF 02            [ 2]   58     ldw (2,x),y 
      00192E 90 5F            [ 1]   59     clrw y 
      001930 FF               [ 2]   60     ldw (x),y 
      001931 81               [ 4]   61     ret
                                     62 
                                     63 ;---------------------------------
                                     64 ; return APP_LAST pointer as double
                                     65 ; EEP-LAST ( -- ud )
                                     66 ;---------------------------------
      001932 19 1E                   67 	.word LINK 
                           001934    68 	LINK=.
      001934 08                      69 	.byte 8 
      001935 45 45 50 2D 4C 41 53    70 	.ascii "EEP-LAST"
             54
      00193D                         71 EEPLAST:
      00193D 1D 00 04         [ 2]   72 	subw x,#2*CELLL 
      001940 90 AE 40 00      [ 2]   73 	ldw y,#APP_LAST 
      001944 EF 02            [ 2]   74 	ldw (2,x),y 
      001946 90 5F            [ 1]   75 	clrw y 
      001948 FF               [ 2]   76 	ldw (x),y 
      001949 81               [ 4]   77 	ret 
                                     78 
                                     79 ;----------------------------------
                                     80 ; return APP_RUN pointer as double	
                                     81 ; EEP-RUN ( -- ud )
                                     82 ;-----------------------------------
      00194A 19 34                   83 	.word LINK 
                           00194C    84 	LINK=.
      00194C 07                      85 	.byte 7
      00194D 45 45 50 2D 52 55 4E    86 	.ascii "EEP-RUN"
      001954                         87 EEPRUN:
      001954 1D 00 04         [ 2]   88 	subw x,#2*CELLL 
      001957 90 AE 40 02      [ 2]   89 	ldw y,#APP_RUN 
      00195B EF 02            [ 2]   90 	ldw (2,x),y 
      00195D 90 5F            [ 1]   91 	clrw y 
      00195F FF               [ 2]   92 	ldw (x),y 
      001960 81               [ 4]   93 	ret 
                                     94 
                                     95 ;------------------------------------
                                     96 ; return APP_CP pointer as double 
                                     97 ; EEP-CP ( -- ud )
                                     98 ;------------------------------------
      001961 19 4C                   99 	.word LINK
                           001963   100 	LINK=.
      001963 06                     101 	.byte 6 
      001964 45 45 50 2D 43 50      102 	.ascii "EEP-CP"
      00196A                        103 EEPCP:
      00196A 1D 00 04         [ 2]  104 	subw x,#2*CELLL 
      00196D 90 AE 40 04      [ 2]  105 	ldw y,#APP_CP  
      001971 EF 02            [ 2]  106 	ldw (2,x),y 
      001973 90 5F            [ 1]  107 	clrw y 
      001975 FF               [ 2]  108 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      001976 81               [ 4]  109 	ret 
                                    110 
                                    111 ;------------------------------------
                                    112 ; return APP_VP pointer as double 
                                    113 ; EEP-VP ( -- ud )
                                    114 ;-------------------------------------
      001977 19 63                  115 	.word LINK
                           001979   116 	LINK=.
      001979 06                     117 	.byte 6
      00197A 45 45 50 2D 56 50      118 	.ascii "EEP-VP"
      001980                        119 EEPVP:
      001980 1D 00 04         [ 2]  120 	subw x,#2*CELLL 
      001983 90 AE 40 06      [ 2]  121 	ldw y,#APP_VP  
      001987 EF 02            [ 2]  122 	ldw (2,x),y 
      001989 90 5F            [ 1]  123 	clrw y 
      00198B FF               [ 2]  124 	ldw (x),y 
      00198C 81               [ 4]  125 	ret 
                                    126 
                                    127 ;----------------------------------
                                    128 ; update APP_LAST with LAST 
                                    129 ; UPDAT-LAST ( -- )
                                    130 ;----------------------------------
      00198D 19 79                  131 	.word LINK 
                           00198F   132 	LINK=.
      00198F 0A                     133 	.byte 10
      001990 55 50 44 41 54 2D 4C   134 	.ascii "UPDAT-LAST"
             41 53 54
      00199A                        135 UPDATLAST:
      00199A CD 05 84         [ 4]  136 	call LAST
      00199D CD 03 71         [ 4]  137 	call AT  
      0019A0 CD 19 3D         [ 4]  138 	call EEPLAST
      0019A3 CC 1B 16         [ 2]  139 	jp ee_store 
                                    140 
                                    141 ;---------------------------------
                                    142 ; update APP_RUN 
                                    143 ; UPDAT-RUN ( a -- )
                                    144 ;---------------------------------
      0019A6 19 8F                  145 	.word LINK
                           0019A8   146 	LINK=.
      0019A8 09                     147 	.byte 9
      0019A9 55 50 44 41 54 2D 52   148 	.ascii "UPDAT-RUN"
             55 4E
      0019B2                        149 UPDATRUN:
      0019B2 CD 19 54         [ 4]  150 	call EEPRUN
      0019B5 CC 1B 16         [ 2]  151 	jp ee_store 
                                    152 	
                                    153 ;---------------------------------
                                    154 ; update APP_CP with CP 
                                    155 ; UPDAT-CP ( -- )
                                    156 ;---------------------------------
      0019B8 19 A8                  157 	.word LINK 
                           0019BA   158 	LINK=.
      0019BA 08                     159 	.byte 8 
      0019BB 55 50 44 41 54 2D 43   160 	.ascii "UPDAT-CP"
             50
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      0019C3                        161 UPDATCP:
      0019C3 CD 05 74         [ 4]  162 	call CPP 
      0019C6 CD 03 71         [ 4]  163 	call AT 
      0019C9 CD 19 6A         [ 4]  164 	call EEPCP 
      0019CC CC 1B 16         [ 2]  165 	jp ee_store 
                                    166 
                                    167 ;----------------------------------
                                    168 ; update APP_VP with VP 
                                    169 ; UPDAT-VP ( -- )
                                    170 ;----------------------------------
      0019CF 19 BA                  171 	.word LINK
                           0019D1   172 	LINK=.
      0019D1 08                     173 	.byte 8 
      0019D2 55 50 44 41 54 2D 56   174 	.ascii "UPDAT-VP" 
             50
      0019DA                        175 UPDATVP:
      0019DA CD 05 66         [ 4]  176 	call VPP 
      0019DD CD 03 71         [ 4]  177 	call AT
      0019E0 CD 19 80         [ 4]  178 	call EEPVP 
      0019E3 CC 1B 16         [ 2]  179 	jp ee_store
                                    180 	
                                    181 
                                    182 ;----------------------------------
                                    183 ; fetch integer at address over 65535
                                    184 ;  F@   ( ud -- n )
                                    185 ;----------------------------------
      0019E6 19 D1                  186     .word LINK 
                           0019E8   187 LINK=.
      0019E8 02                     188     .byte 2
      0019E9 46 40                  189     .ascii "F@"
      0019EB                        190 farat:
      0019EB CD 19 06         [ 4]  191     call fptr_store
      0019EE 92 BC 00 30      [ 5]  192     ldf a,[FPTR]
      0019F2 1D 00 02         [ 2]  193     subw x,#CELLL 
      0019F5 F7               [ 1]  194     ld (x),a 
      0019F6 90 AE 00 01      [ 2]  195     ldw y,#1
      0019FA 91 AF 00 30      [ 1]  196     ldf a,([FPTR],y)
      0019FE E7 01            [ 1]  197     ld (1,x),a
      001A00 81               [ 4]  198     ret 
                                    199 
                                    200 ;-------------------------------------
                                    201 ; fetch C at address over 65535 
                                    202 ; FC@ ( ud -- c)
                                    203 ;-------------------------------------
      001A01 19 E8                  204     .word LINK
                           001A03   205     LINK=.
      001A03 03                     206     .byte 3 
      001A04 46 43 40               207     .ascii "FC@" 
      001A07                        208 farcat:
      001A07 CD 19 06         [ 4]  209     call fptr_store 
      001A0A 92 BC 00 30      [ 5]  210     ldf a,[FPTR]
      001A0E 1D 00 02         [ 2]  211     subw x,#CELLL 
      001A11 E7 01            [ 1]  212     ld (1,x),a 
      001A13 7F               [ 1]  213     clr (x)
      001A14 81               [ 4]  214     ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                    215     
                                    216 ;----------------------------------
                                    217 ; unlock EEPROM/OPT for writing/erasing
                                    218 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    219 ;  UNLKEE   ( -- )
                                    220 ;----------------------------------
      001A15 1A 03                  221     .word LINK 
                           001A17   222 LINK=.
      001A17 06                     223     .byte 6 
      001A18 55 4E 4C 4B 45 45      224     .ascii "UNLKEE"
      001A1E                        225 unlock_eeprom:
      001A1E 35 00 50 5B      [ 1]  226 	mov FLASH_CR2,#0 
      001A22 35 FF 50 5C      [ 1]  227 	mov FLASH_NCR2,#0xFF 
      001A26 35 AE 50 64      [ 1]  228 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001A2A 35 56 50 64      [ 1]  229     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001A2E 72 07 50 5F FB   [ 2]  230 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001A33 81               [ 4]  231 	ret
                                    232 
                                    233 ;----------------------------------
                                    234 ; unlock FLASH for writing/erasing
                                    235 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    236 ; UNLKFL  ( -- )
                                    237 ;----------------------------------
      001A34 1A 17                  238     .word LINK 
                           001A36   239 LINK=. 
      001A36 06                     240     .byte 6 
      001A37 55 4E 4C 4B 46 4C      241     .ascii "UNLKFL"    
      001A3D                        242 unlock_flash:
      001A3D 35 00 50 5B      [ 1]  243 	mov FLASH_CR2,#0 
      001A41 35 FF 50 5C      [ 1]  244 	mov FLASH_NCR2,#0xFF 
      001A45 35 56 50 62      [ 1]  245 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001A49 35 AE 50 62      [ 1]  246 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001A4D 72 03 50 5F FB   [ 2]  247 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001A52 81               [ 4]  248 	ret
                                    249 
                                    250 ;-----------------------------
                                    251 ; unlock FLASH or EEPROM 
                                    252 ; according to FPTR address 
                                    253 ;  UNLOCK ( -- )
                                    254 ;-----------------------------
      001A53 1A 36                  255 	.word LINK 
                           001A55   256 	LINK=.
      001A55 06                     257 	.byte 6
      001A56 55 4E 4C 4F 43 4B      258 	.ascii "UNLOCK"
      001A5C                        259 unlock:
                                    260 ; put addr[15:0] in Y, for bounds check.
      001A5C 90 BE 31         [ 2]  261 	ldw y,PTR16   ; Y=addr15:0
                                    262 ; check addr[23:16], if <> 0 then it is extened flash memory
      001A5F 3D 30            [ 1]  263 	tnz FPTR 
      001A61 26 16            [ 1]  264 	jrne 4$
      001A63 90 A3 80 00      [ 2]  265     cpw y,#FLASH_BASE
      001A67 24 10            [ 1]  266     jruge 4$
      001A69 90 A3 40 00      [ 2]  267 	cpw y,#EEPROM_BASE  
      001A6D 25 0D            [ 1]  268     jrult 9$
      001A6F 90 A3 48 7F      [ 2]  269 	cpw y,#OPTION_END 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001A73 22 07            [ 1]  270 	jrugt 9$
      001A75 CD 1A 1E         [ 4]  271 	call unlock_eeprom
      001A78 81               [ 4]  272 	ret 
      001A79 CD 1A 3D         [ 4]  273 4$: call unlock_flash
      001A7C 81               [ 4]  274 9$: ret 
                                    275 
                                    276 ;-------------------------
                                    277 ; lock write access to 
                                    278 ; FLASH and EEPROM 
                                    279 ; LOCK ( -- )
                                    280 ;-------------------------
      001A7D 1A 55                  281 	.word LINK 
                           001A7F   282 	LINK=.
      001A7F 04                     283 	.byte 4 
      001A80 4C 4F 43 4B            284 	.ascii "LOCK" 
      001A84                        285 lock: 
      001A84 72 13 50 5F      [ 1]  286 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001A88 72 17 50 5F      [ 1]  287 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001A8C 81               [ 4]  288 	ret 
                                    289 
                                    290 ;-------------------------
                                    291 ; increment FPTR 
                                    292 ; INC-FPTR ( -- )
                                    293 ;-------------------------
      001A8D 1A 7F                  294 	.word LINK 
                           001A8F   295 	LINK=. 
      001A8F 08                     296 	.byte 8 
      001A90 49 4E 43 2D 46 50 54   297 	.ascii "INC-FPTR" 
             52
      001A98                        298 inc_fptr:
      001A98 3C 32            [ 1]  299 	inc PTR8 
      001A9A 26 08            [ 1]  300 	jrne 1$
      001A9C 90 BE 30         [ 2]  301 	ldw y,FPTR 
      001A9F 90 5C            [ 2]  302 	incw y 
      001AA1 90 BF 30         [ 2]  303 	ldw FPTR,y 
      001AA4 81               [ 4]  304 1$: ret 
                                    305 
                                    306 
                                    307 ;----------------------------
                                    308 ; write a byte at address pointed 
                                    309 ; by FPTR and increment FPTR.
                                    310 ; Expect pointer already initialized 
                                    311 ; and memory unlocked 
                                    312 ; WR-BYTE ( c -- )
                                    313 ;----------------------------
                                    314 
      001AA5 1A 8F                  315 	.word LINK 
                           001AA7   316 	LINK=. 
      001AA7 07                     317 	.byte 7 
      001AA8 57 52 2D 42 59 54 45   318 	.ascii "WR-BYTE" 
                                    319 
      001AAF                        320 write_byte:
      001AAF 90 93            [ 1]  321 	ldw y,x 
      001AB1 90 FE            [ 2]  322 	ldw y,(y)
      001AB3 1C 00 02         [ 2]  323 	addw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001AB6 90 9F            [ 1]  324 	ld a,yl
      001AB8 92 BD 00 30      [ 4]  325 	ldf [FPTR],a
      001ABC 72 05 50 5F FB   [ 2]  326 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001AC1 20 D5            [ 2]  327 	jra inc_fptr 
                                    328 
                                    329 
                                    330 
                                    331 ;---------------------------------------
                                    332 ; write a byte to FLASH or EEPROM/OPTION  
                                    333 ; EEC!  (c ud -- )
                                    334 ;---------------------------------------
      001AC3 1A A7                  335     .word LINK 
                           001AC5   336 	LINK=.
      001AC5 04                     337     .byte 4 
      001AC6 45 45 43 21            338     .ascii "EEC!"
                                    339 	; local variables 
                           000001   340 	BTW = 1   ; byte to write offset on stack
                           000002   341     OPT = 2 
                           000002   342 	VSIZE = 2
      001ACA                        343 ee_cstore:
      001ACA 52 02            [ 2]  344 	sub sp,#VSIZE
      001ACC CD 19 06         [ 4]  345     call fptr_store
      001ACF E6 01            [ 1]  346 	ld a,(1,x)
      001AD1 43               [ 1]  347 	cpl a 
      001AD2 6B 01            [ 1]  348 	ld (BTW,sp),a ; byte to write 
      001AD4 0F 02            [ 1]  349 	clr (OPT,sp)  ; OPTION flag
      001AD6 CD 1A 5C         [ 4]  350 	call unlock 
                                    351 	; check if option
      001AD9 3D 30            [ 1]  352 	tnz FPTR 
      001ADB 26 19            [ 1]  353 	jrne 2$
      001ADD 90 BE 31         [ 2]  354 	ldw y,PTR16 
      001AE0 90 A3 48 00      [ 2]  355 	cpw y,#OPTION_BASE
      001AE4 2B 10            [ 1]  356 	jrmi 2$
      001AE6 90 A3 48 80      [ 2]  357 	cpw y,#OPTION_END+1
      001AEA 2A 0A            [ 1]  358 	jrpl 2$
      001AEC 03 02            [ 1]  359 	cpl (OPT,sp)
                                    360 	; OPTION WRITE require this unlock 
      001AEE 72 1E 50 5B      [ 1]  361     bset FLASH_CR2,#FLASH_CR2_OPT
      001AF2 72 1F 50 5C      [ 1]  362     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001AF6                        363 2$: 
      001AF6 CD 1A AF         [ 4]  364 	call write_byte 	
      001AF9 0D 02            [ 1]  365 	tnz (OPT,sp)
      001AFB 27 0D            [ 1]  366 	jreq 3$ 
      001AFD 7B 01            [ 1]  367     ld a,(BTW,sp)
      001AFF 90 5F            [ 1]  368     clrw y
      001B01 90 97            [ 1]  369 	ld yl,a 
      001B03 1D 00 02         [ 2]  370 	subw x,#CELLL 
      001B06 FF               [ 2]  371 	ldw (x),y 
      001B07 CD 1A AF         [ 4]  372 	call write_byte
      001B0A                        373 3$: 
      001B0A CD 1A 84         [ 4]  374 	call lock 
      001B0D 5B 02            [ 2]  375 	addw sp,#VSIZE 
      001B0F 81               [ 4]  376     ret
                                    377 
                                    378 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



                                    379 ; write integer in FLASH|EEPROM
                                    380 ; EE! ( n ud -- )
                                    381 ;------------------------------
      001B10 1A C5                  382 	.word LINK 
                           001B12   383 	LINK=.
      001B12 03                     384 	.byte 3 
      001B13 45 45 21               385 	.ascii "EE!"
      001B16                        386 ee_store:
      001B16 CD 19 06         [ 4]  387 	call fptr_store 
      001B19 CD 1A 5C         [ 4]  388 	call unlock 
      001B1C 90 93            [ 1]  389 	ldw y,x 
      001B1E 90 FE            [ 2]  390 	ldw y,(y)
      001B20 90 89            [ 2]  391 	pushw y 
      001B22 90 5E            [ 1]  392 	swapw y 
      001B24 FF               [ 2]  393 	ldw (x),y 
      001B25 CD 1A AF         [ 4]  394 	call write_byte 
      001B28 90 85            [ 2]  395 	popw y 
      001B2A 1D 00 02         [ 2]  396 	subw x,#CELLL
      001B2D FF               [ 2]  397 	ldw (x),y 
      001B2E CD 1A AF         [ 4]  398 	call write_byte
      001B31 CC 1A 84         [ 2]  399 	jp lock 
                                    400 
                                    401 
                                    402 ;----------------------------
                                    403 ; Erase flash memory row 
                                    404 ; stm8s208 as 128 bytes rows
                                    405 ; ROW-ERASE ( ud -- )
                                    406 ;----------------------------
      001B34 1B 12                  407 	.word LINK 
                           001B36   408 	LINK=. 
      001B36 09                     409 	.byte 9 
      001B37 52 4F 57 2D 45 52 41   410 	.ascii "ROW-ERASE" 
             53 45
      001B40                        411 row_erase:
      001B40 CD 19 06         [ 4]  412 	call fptr_store
                                    413 ;code must be execute from RAM 
                                    414 ;copy routine to PAD 
      001B43 1D 00 02         [ 2]  415 	subw x,#CELLL 
      001B46 90 AE 1B 8D      [ 2]  416 	ldw y,#row_erase_proc
      001B4A FF               [ 2]  417 	ldw (x),y 
      001B4B CD 0A 49         [ 4]  418 	call PAD 
      001B4E 90 AE 1B B4      [ 2]  419 	ldw y,#row_erase_proc_end 
      001B52 72 A2 1B 8D      [ 2]  420 	subw y,#row_erase_proc
      001B56 1D 00 02         [ 2]  421 	subw x,#CELLL 
      001B59 FF               [ 2]  422 	ldw (x),y 
      001B5A CD 0A 85         [ 4]  423 	call CMOVE 
      001B5D                        424 block_erase:
      001B5D 90 BE 31         [ 2]  425 	ldw y,FPTR+1
      001B60 90 A3 20 00      [ 2]  426 	cpw y,#app_space 
      001B64 2A 13            [ 1]  427 	jrpl erase_flash 
                                    428 ; erase EEPROM block
      001B66 90 A3 40 00      [ 2]  429 	cpw y,#EEPROM_BASE 
      001B6A 24 01            [ 1]  430 	jruge 1$
      001B6C 81               [ 4]  431 	ret ; bad address 
      001B6D 90 A3 47 FF      [ 2]  432 1$: cpw y,#EEPROM_END 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001B71 23 01            [ 2]  433 	jrule 2$ 
      001B73 81               [ 4]  434 	ret ; bad address 
      001B74                        435 2$:	
      001B74 CD 1A 1E         [ 4]  436 	call unlock_eeprom 
      001B77 20 03            [ 2]  437 	jra proceed_erase
                                    438 ; erase flash block:
      001B79                        439 erase_flash:
      001B79 CD 1A 3D         [ 4]  440 	call unlock_flash 
      001B7C                        441 proceed_erase:
      001B7C CD 0A 49         [ 4]  442 	call PAD 
      001B7F 90 93            [ 1]  443 	ldw y,x
      001B81 90 FE            [ 2]  444 	ldw y,(y)
      001B83 1C 00 02         [ 2]  445 	addw x,#CELLL  
      001B86 90 FD            [ 4]  446 	call (y) 
      001B88 72 17 50 5F      [ 1]  447 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001B8C 81               [ 4]  448 	ret 
                                    449 
                                    450 ; this routine is to be copied to PAD 
      001B8D                        451 row_erase_proc:
      001B8D 35 20 50 5B      [ 1]  452 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001B91 35 DF 50 5C      [ 1]  453 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001B95 4F               [ 1]  454 	clr a 
      001B96 90 5F            [ 1]  455 	clrw y 
      001B98 91 A7 00 30      [ 1]  456 	ldf ([FPTR],y),a
      001B9C 90 5C            [ 2]  457     incw y
      001B9E 91 A7 00 30      [ 1]  458 	ldf ([FPTR],y),a
      001BA2 90 5C            [ 2]  459     incw y
      001BA4 91 A7 00 30      [ 1]  460 	ldf ([FPTR],y),a
      001BA8 90 5C            [ 2]  461     incw y
      001BAA 91 A7 00 30      [ 1]  462 	ldf ([FPTR],y),a
      001BAE 72 05 50 5F FB   [ 2]  463 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001BB3 81               [ 4]  464 	ret
      001BB4                        465 row_erase_proc_end:
                                    466 
                                    467 
                                    468 ;-----------------------------------
                                    469 ; block programming must be 
                                    470 ; executed from RAM 
                                    471 ; initial contidions: 
                                    472 ; 		memory unlocked
                                    473 ;       FPTR initialized 
                                    474 ; input: 
                                    475 ;    x   buffer address 
                                    476 ;-----------------------------------
                           000001   477 	BCNT=1 
      001BB4                        478 copy_buffer:
      001BB4 4B 80            [ 1]  479 	push #BLOCK_SIZE  
                                    480 ;enable block programming 
      001BB6 72 10 50 5B      [ 1]  481 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001BBA 72 11 50 5C      [ 1]  482 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001BBE 90 5F            [ 1]  483 	clrw y
      001BC0 F6               [ 1]  484 1$:	ld a,(x)
      001BC1 91 A7 00 30      [ 1]  485 	ldf ([FPTR],y),a
      001BC5 5C               [ 2]  486 	incw x 
      001BC6 90 5C            [ 2]  487 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001BC8 0A 01            [ 1]  488 	dec (BCNT,sp)
      001BCA 26 F4            [ 1]  489 	jrne 1$
                                    490 ; wait EOP bit 
      001BCC 72 05 50 5F FB   [ 2]  491 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001BD1 84               [ 1]  492 	pop a ; remove BCNT from stack 
      001BD2 81               [ 4]  493 	ret 
      001BD3                        494 copy_buffer_end:
                                    495 
                                    496 ;-------------------------
                                    497 ; move program_row to RAM 
                                    498 ; in TIB 
                                    499 ;------------------------
      001BD3                        500 copy_prog_to_ram:
      001BD3 1D 00 06         [ 2]  501 	subw x,#6
      001BD6 90 AE 1B B4      [ 2]  502 	ldw y,#copy_buffer 
      001BDA EF 04            [ 2]  503 	ldw (4,x),y 
      001BDC 90 AE 17 00      [ 2]  504 	ldw y,#TIBBASE
      001BE0 EF 02            [ 2]  505 	ldw (2,x),y 
      001BE2 90 AE 1B D3      [ 2]  506 	ldw y,#copy_buffer_end 
      001BE6 72 A2 1B B4      [ 2]  507 	subw y,#copy_buffer  
      001BEA FF               [ 2]  508 	ldw (x),y 
      001BEB CD 0A 85         [ 4]  509 	call CMOVE 
      001BEE 81               [ 4]  510 	ret 
                                    511 
                                    512 
                                    513 ;-----------------------------
                                    514 ; write a row in FLASH/EEPROM 
                                    515 ; WR-ROW ( a ud -- )
                                    516 ; a -> address 128 byte buffer to write 
                                    517 ; ud ->  row address in FLASH|EEPROM 
                                    518 ;-----------------------------
      001BEF 1B 36                  519 	.word LINK 
                           001BF1   520 	LINK=.
      001BF1 06                     521 	.byte 6 
      001BF2 57 52 2D 52 4F 57      522 	.ascii "WR-ROW"
      001BF8                        523 write_row:
      001BF8 CD 19 06         [ 4]  524 	call fptr_store
                                    525 ; align to FLASH block 
      001BFB A6 80            [ 1]  526 	ld a,#0x80 
      001BFD B4 32            [ 1]  527 	and a,PTR8 
      001BFF B7 32            [ 1]  528 	ld PTR8,a  
      001C01 CD 1B D3         [ 4]  529 	call copy_prog_to_ram
      001C04 CD 1A 5C         [ 4]  530 	call unlock
      001C07 90 93            [ 1]  531 	ldw y,x 
      001C09 90 FE            [ 2]  532 	ldw y,(y)
      001C0B 1C 00 02         [ 2]  533 	addw x,#CELLL 
      001C0E 89               [ 2]  534 	pushw x 
      001C0F 93               [ 1]  535 	ldw x,y ; buffer address in x 
      001C10 CD 17 00         [ 4]  536 	call TIBBASE
      001C13 CD 1A 84         [ 4]  537 	call lock
      001C16 85               [ 2]  538 	popw x 
      001C17 81               [ 4]  539 	ret 
                                    540 
                                    541 ;-------------------------------------
                                    542 ; change value of OPTION register 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                                    543 ; SET-OPT (c n -- ) 
                                    544 ; c new value.
                                    545 ; n OPT  number {1..7}
                                    546 ;--------------------------------------
      001C18 1B F1                  547 		.word LINK 
                           001C1A   548 		LINK=.
      001C1A 07                     549 		.byte 7 
      001C1B 53 45 54 2D 4F 50 54   550 		.ascii "SET-OPT" 
      001C22                        551 set_option: 
      001C22 90 93            [ 1]  552 		ldw y,x 
      001C24 90 FE            [ 2]  553 		ldw y,(y)
      001C26 27 06            [ 1]  554 		jreq 1$
      001C28 90 A3 00 07      [ 2]  555 		cpw y,#7 
      001C2C 23 04            [ 2]  556 		jrule 2$ 
                                    557 ; invalid OPTION number 		
      001C2E 1C 00 04         [ 2]  558 1$:		addw x,#2*CELLL
      001C31 81               [ 4]  559 		ret
      001C32 90 58            [ 2]  560 2$:		sllw y 
      001C34 72 A9 47 FF      [ 2]  561 		addw y,#OPTION_BASE-1
      001C38 FF               [ 2]  562 		ldw (x),y 
      001C39 1D 00 02         [ 2]  563 		subw x,#CELLL 
      001C3C 90 5F            [ 1]  564 		clrw y 
      001C3E FF               [ 2]  565 		ldw (x),y 
      001C3F CD 1A CA         [ 4]  566 		call ee_cstore
      001C42 81               [ 4]  567 		ret 
                                    568 
                                    569 
                                    570 
                                    571 ;--------------------------------------
                                    572 ; reset system to its original state 
                                    573 ; before any user modification
                                    574 ; PRISTINE ( -- )
                                    575 ;-------------------------------------
      001C43 1C 1A                  576 	.word LINK  
                           001C45   577 	LINK=.
      001C45 08                     578 	.byte 8 
      001C46 50 52 49 53 54 49 4E   579 	.ascii "PRISTINE"
             45
      001C4E                        580 pristine:
                                    581 ;;; erase EEPROM
      001C4E CD 19 25         [ 4]  582 	call EEPROM 
      001C51 CD 05 EB         [ 4]  583 1$:	call DDUP 
      001C54 CD 1B 40         [ 4]  584 	call row_erase
      001C57 90 93            [ 1]  585 	ldw y,x 
      001C59 90 EE 02         [ 2]  586 	ldw y,(2,y)
      001C5C 72 A9 00 80      [ 2]  587 	addw y,#BLOCK_SIZE
      001C60 EF 02            [ 2]  588 	ldw (2,x),y
      001C62 90 A3 48 00      [ 2]  589 	cpw y,#OPTION_BASE 
      001C66 25 E9            [ 1]  590 	jrult 1$
                                    591 ;;; reset OPTION to default values
      001C68 90 AE 00 01      [ 2]  592 	ldw y,#1 ; OPT1 
      001C6C FF               [ 2]  593 2$:	ldw (x),y   
      001C6D 90 5F            [ 1]  594 	clrw y 
      001C6F EF 02            [ 2]  595 	ldw (2,x),y  ; ( 0 1 -- ) 
      001C71 CD 05 EB         [ 4]  596 	call DDUP    ; ( 0 1 0 1 -- )  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001C74 CD 1C 22         [ 4]  597 	call set_option
      001C77 90 93            [ 1]  598 	ldw y,x 
      001C79 90 FE            [ 2]  599 	ldw y,(y)
      001C7B 90 5C            [ 2]  600 	incw y  ; next OPTION 
      001C7D 90 A3 00 08      [ 2]  601 	cpw y,#8 
      001C81 25 E9            [ 1]  602 	jrult 2$
                                    603 ;;; erase first row of app_space 	
      001C83 90 AE 20 00      [ 2]  604 	ldw y,#app_space
      001C87 EF 02            [ 2]  605 	ldw (2,x),y  
      001C89 90 5F            [ 1]  606 	clrw y 
      001C8B FF               [ 2]  607 	ldw (x),y ; ( app_space 0 -- )
      001C8C CD 1B 40         [ 4]  608 	call row_erase 
                                    609 ; reset interrupt vectors 
      001C8F 1D 00 02         [ 2]  610 	subw x,#CELLL 
      001C92 90 5F            [ 1]  611 	clrw y  
      001C94 FF               [ 2]  612 4$:	ldw (x),y  ; ( n -- ) int# 
      001C95 CD 04 18         [ 4]  613 	call DUPP  
      001C98 CD 1C B5         [ 4]  614 	call reset_vector
      001C9B 90 93            [ 1]  615 	ldw y,x 
      001C9D 90 FE            [ 2]  616 	ldw y,(y)
      001C9F 90 5C            [ 2]  617 	incw y   ; next vector 
      001CA1 90 A3 00 19      [ 2]  618 	cpw y,#25 
      001CA5 25 ED            [ 1]  619 	jrult 4$
      001CA7 CC 00 00         [ 2]  620 	jp NonHandledInterrupt ; reset MCU
                                    621 
                                    622 ;------------------------------
                                    623 ; reset an interrupt vector 
                                    624 ; to its initial value 
                                    625 ; i.e. NonHandledInterrupt
                                    626 ; RST-IVEC ( n -- )
                                    627 ;-----------------------------
      001CAA 1C 45                  628 	.word LINK 
                           001CAC   629 	LINK=. 
      001CAC 08                     630 	.byte 8 
      001CAD 52 53 54 2D 49 56 45   631 	.ascii "RST-IVEC"
             43
      001CB5                        632 reset_vector:
      001CB5 90 93            [ 1]  633 	ldw y,x
      001CB7 1C 00 02         [ 2]  634 	addw x,#CELLL 
      001CBA 90 FE            [ 2]  635 	ldw y,(y)
      001CBC 90 A3 00 17      [ 2]  636 	cpw y,#23 
      001CC0 27 3A            [ 1]  637 	jreq 9$
      001CC2 90 A3 00 1D      [ 2]  638 	cpw y,#29 ; last vector
      001CC6 22 34            [ 1]  639 	jrugt 9$  
      001CC8 90 58            [ 2]  640 	sllw y 
      001CCA 90 58            [ 2]  641 	sllw y 
      001CCC 72 A9 80 08      [ 2]  642 	addw y,#0x8008 ; irq0 address 
      001CD0 90 BF 22         [ 2]  643 	ldw YTEMP,y
      001CD3 1D 00 06         [ 2]  644 	subw x,#3*CELLL 
      001CD6 EF 02            [ 2]  645 	ldw (2,x),y 
      001CD8 90 5F            [ 1]  646 	clrw y
      001CDA FF               [ 2]  647 	ldw (x),y 
      001CDB A6 82            [ 1]  648 	ld a,#0x82 
      001CDD 90 95            [ 1]  649 	ld yh,a
      001CDF EF 04            [ 2]  650 	ldw (4,x),y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001CE1 CD 1B 16         [ 4]  651 	call ee_store
      001CE4 1D 00 06         [ 2]  652 	subw x,#3*CELLL
      001CE7 90 5F            [ 1]  653 	clrw y 
      001CE9 FF               [ 2]  654 	ldw (x),y 
      001CEA 90 AE 00 00      [ 2]  655 	ldw y,#NonHandledInterrupt
      001CEE EF 04            [ 2]  656 	ldw (4,x),y 
      001CF0 90 BE 22         [ 2]  657 	ldw y,YTEMP  
      001CF3 72 A9 00 02      [ 2]  658 	addw y,#2
      001CF7 EF 02            [ 2]  659 	ldw (2,x),y 
      001CF9 CD 1B 16         [ 4]  660 	call ee_store
      001CFC 81               [ 4]  661 9$:	ret 
                                    662 
                                    663 
                                    664 ;------------------------------
                                    665 ; all interrupt vector with 
                                    666 ; an address >= ca are resetted 
                                    667 ; to default
                                    668 ; CHKIVEC ( ca -- )
                                    669 ;------------------------------
      001CFD 1C AC                  670 	.word LINK 
                           001CFF   671 	LINK=.
      001CFF 07                     672 	.byte 7
      001D00 43 48 4B 49 56 45 43   673 	.ascii "CHKIVEC"
                                    674 ;local variables 
                           000001   675 	SSP=1
                           000003   676 	CADR=3
                           000005   677 	OFS=5
                           000006   678 	VSIZE=6  
      001D07                        679 CHKIVEC:
      001D07 52 06            [ 2]  680 	sub sp,#VSIZE ;alloc local variables 
      001D09 90 93            [ 1]  681 	ldw y,x 
      001D0B 90 FE            [ 2]  682 	ldw y,(y)
      001D0D 17 03            [ 2]  683 	ldw (CADR,sp),y ; ca 
      001D0F 1F 01            [ 2]  684 	ldw (SSP,sp),x 
      001D11 AE 80 0A         [ 2]  685 	ldw x,#0x800a ; irq0 address 
      001D14 BF 31            [ 2]  686 	ldw PTR16,X
      001D16 AE FF FC         [ 2]  687 	ldw x,#-4 
      001D19 1C 00 04         [ 2]  688 1$:	addw x,#4
      001D1C A3 00 78         [ 2]  689 	cpw x,#30*4 ; irq0-29 
      001D1F 27 22            [ 1]  690 	jreq 9$
      001D21 90 93            [ 1]  691 	ldw y,x  
      001D23 91 D6 31         [ 4]  692 	ld a,([PTR16],y)
      001D26 11 03            [ 1]  693 	cp a,(CADR,sp)
      001D28 25 EF            [ 1]  694 	jrult 1$
      001D2A 90 5C            [ 2]  695 	incw y 
      001D2C 91 D6 31         [ 4]  696 	ld a,([PTR16],y)
      001D2F 11 04            [ 1]  697 	cp a,(CADR+1,sp) 
      001D31 25 E6            [ 1]  698 	jrult 1$ 
      001D33 1F 05            [ 2]  699 	ldw (OFS,sp),x 
      001D35 54               [ 2]  700 	srlw x
      001D36 54               [ 2]  701 	srlw x 
      001D37 90 93            [ 1]  702 	ldw y,x 
      001D39 1E 01            [ 2]  703 	ldw x,(SSP,sp)
      001D3B FF               [ 2]  704 	ldw (x),y
      001D3C CD 1C B5         [ 4]  705 	call reset_vector
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001D3F 1E 05            [ 2]  706 	ldw x,(OFS,sp) 
      001D41 20 D6            [ 2]  707 	jra 1$
      001D43 1E 01            [ 2]  708 9$:	ldw x,(SSP,sp) 
      001D45 1C 00 02         [ 2]  709 	addw x,#CELLL 
      001D48 5B 06            [ 2]  710 	addw sp,#VSIZE ; drop local variables  
      001D4A 81               [ 4]  711 	ret 
                                    712 
                                    713 ;------------------------------
                                    714 ; set interrupt vector 
                                    715 ; SET-IVEC ( ud n -- )
                                    716 ;  ud Handler address
                                    717 ;  n  vector # 0 .. 29 
                                    718 ;-----------------------------
      001D4B 1C FF                  719 	.word LINK
                           001D4D   720 	LINK=.
      001D4D 08                     721 	.byte 8 
      001D4E 53 45 54 2D 49 56 45   722 	.ascii "SET-IVEC" 
             43
      001D56                        723 set_vector:
      001D56 90 93            [ 1]  724     ldw y,x 
      001D58 1C 00 02         [ 2]  725 	addw x,#CELLL 
      001D5B 90 FE            [ 2]  726 	ldw y,(y) ; vector #
      001D5D 90 A3 00 1D      [ 2]  727 	cpw y,#29 ; last vector
      001D61 23 04            [ 2]  728 	jrule 2$
      001D63 1C 00 04         [ 2]  729 	addw x,#2*CELLL 
      001D66 81               [ 4]  730 	ret
      001D67 90 58            [ 2]  731 2$:	sllw y 
      001D69 90 58            [ 2]  732 	sllw y 
      001D6B 72 A9 80 08      [ 2]  733 	addw y,#0X8008 ; IRQ0 vector address 
      001D6F 90 BF 22         [ 2]  734 	ldw YTEMP,y ; vector address 
      001D72 A6 82            [ 1]  735 	ld a,#0x82 
      001D74 90 95            [ 1]  736 	ld yh,a 
      001D76 E6 01            [ 1]  737 	ld a,(1,x) ; isr address bits 23..16 
      001D78 90 97            [ 1]  738 	ld yl,a 
                                    739 ;  write 0x82 + most significant byte of int address	
      001D7A 1D 00 06         [ 2]  740 	subw x,#3*CELLL 
      001D7D EF 04            [ 2]  741 	ldw (4,x),y 
      001D7F 90 BE 22         [ 2]  742 	ldw y,YTEMP
      001D82 EF 02            [ 2]  743 	ldw (2,x),y ; vector address 
      001D84 90 5F            [ 1]  744 	clrw y 
      001D86 FF               [ 2]  745 	ldw (x),y   ; as a double 
      001D87 CD 1B 16         [ 4]  746 	call ee_store 
      001D8A 90 93            [ 1]  747 	ldw y,x 
      001D8C 90 EE 02         [ 2]  748 	ldw y,(2,y) ; bits 15..0 int vector 
      001D8F 1D 00 06         [ 2]  749 	subw x,#3*CELLL 
      001D92 EF 04            [ 2]  750 	ldw (4,x),y 
      001D94 90 BE 22         [ 2]  751 	ldw y,YTEMP 
      001D97 72 A9 00 02      [ 2]  752 	addw y,#2 
      001D9B EF 02            [ 2]  753 	ldw (2,x),y 
      001D9D 90 5F            [ 1]  754 	clrw y 
      001D9F FF               [ 2]  755 	ldw (x),y 
      001DA0 CD 1B 16         [ 4]  756 	call ee_store
      001DA3 1C 00 04         [ 2]  757 	addw x,#2*CELLL  
      001DA6 81               [ 4]  758 9$: ret 
                                    759 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                                    760 
                                    761 ;------------------------
                                    762 ; Compile word to flash
                                    763 ; EE, (w -- )
                                    764 ;-----------------------
      001DA7 1D 4D                  765 	.word LINK
                           001DA9   766 	LINK=.
      001DA9 03                     767 	.byte 3
      001DAA 45 45 2C               768 	.ascii "EE,"
      001DAD                        769 ee_comma:
      001DAD 1D 00 04         [ 2]  770 	subw x,#2*CELLL 
      001DB0 90 BE 18         [ 2]  771 	ldw y,UCP
      001DB3 90 89            [ 2]  772 	pushw y 
      001DB5 EF 02            [ 2]  773 	ldw (2,x),y 
      001DB7 90 5F            [ 1]  774 	clrw y 
      001DB9 FF               [ 2]  775 	ldw (x),y
      001DBA CD 1B 16         [ 4]  776 	call ee_store
      001DBD 90 85            [ 2]  777 	popw y 
      001DBF 72 A9 00 02      [ 2]  778 	addw y,#2
      001DC3 90 BF 18         [ 2]  779 	ldw UCP,y
      001DC6 81               [ 4]  780 	ret 
                                    781 
                                    782 ;-------------------------
                                    783 ; Compile byte to flash 
                                    784 ; EEC, ( c -- )	
                                    785 ;-------------------------
      001DC7 1D A9                  786 	.word LINK 
                           001DC9   787 	LINK=.
      001DC9 04                     788 	.byte 4 
      001DCA 45 45 43 2C            789 	.ascii "EEC,"
      001DCE                        790 ee_ccomma:
      001DCE 1D 00 04         [ 2]  791 	subw x,#2*CELLL 
      001DD1 90 BE 18         [ 2]  792 	ldw y,UCP
      001DD4 90 89            [ 2]  793 	pushw y 
      001DD6 EF 02            [ 2]  794 	ldw (2,x),y 
      001DD8 90 5F            [ 1]  795 	clrw y 
      001DDA FF               [ 2]  796 	ldw (x),y
      001DDB CD 1A CA         [ 4]  797 	call ee_cstore
      001DDE 90 85            [ 2]  798 	popw y 
      001DE0 90 5C            [ 2]  799 	incw y 
      001DE2 90 BF 18         [ 2]  800 	ldw UCP,y
      001DE5 81               [ 4]  801 	ret 
                                    802 
                                    803 
                                    804 ;--------------------------
                                    805 ; copy FLASH block to ROWBUF
                                    806 ; ROW2BUF ( ud -- )
                                    807 ;--------------------------
      001DE6 1D C9                  808 	.word LINK 
                           001DE8   809 	LINK=.
      001DE8 07                     810 	.byte 7 
      001DE9 52 4F 57 32 42 55 46   811 	.ascii "ROW2BUF"
      001DF0                        812 ROW2BUF: 
      001DF0 CD 19 06         [ 4]  813 	call fptr_store 
      001DF3 A6 80            [ 1]  814 	ld a,#BLOCK_SIZE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001DF5 88               [ 1]  815 	push a 
      001DF6 B4 32            [ 1]  816 	and a,PTR8 ; block align 
      001DF8 B7 32            [ 1]  817 	ld PTR8,a
      001DFA 90 AE 16 80      [ 2]  818 	ldw y,#ROWBUFF 
      001DFE 92 BC 00 30      [ 5]  819 1$: ldf a,[FPTR]
      001E02 90 F7            [ 1]  820 	ld (y),a
      001E04 CD 1A 98         [ 4]  821 	call inc_fptr
      001E07 90 5C            [ 2]  822 	incw y 
      001E09 0A 01            [ 1]  823 	dec (1,sp)
      001E0B 26 F1            [ 1]  824 	jrne 1$ 
      001E0D 84               [ 1]  825 	pop a 
      001E0E 81               [ 4]  826 	ret 
                                    827 
                                    828 
                                    829 ;---------------------------
                                    830 ; copy ROWBUFF to flash 
                                    831 ; BUF2ROW ( ud -- )
                                    832 ; ud is row address as double 
                                    833 ;---------------------------
      001E0F 1D E8                  834 	.word LINK 
                           001E11   835 	LINK=.
      001E11 07                     836 	.byte 7 
      001E12 42 55 46 32 52 4F 57   837 	.ascii "BUF2ROW" 
      001E19                        838 BUF2ROW:
      001E19 CD 05 13         [ 4]  839 	call TBUF ; ( ud rb -- )
      001E1C CD 05 C0         [ 4]  840 	call ROT 
      001E1F CD 05 C0         [ 4]  841 	call ROT  ; ( rb ud -- )
      001E22 CD 1B F8         [ 4]  842 	call write_row 
      001E25 81               [ 4]  843 	ret 
                                    844 
                                    845 ;---------------------------------
                                    846 ; how many byte free in that row 
                                    847 ; RFREE ( a -- n )
                                    848 ; a is least byte of target address
                                    849 ;----------------------------------
      001E26 1E 11                  850 	.word LINK 
                           001E28   851 	LINK=.
      001E28 05                     852 	.byte 5 
      001E29 52 46 52 45 45         853 	.ascii "RFREE"
      001E2E                        854 RFREE:
      001E2E E6 01            [ 1]  855 	ld a,(1,x)
      001E30 A4 7F            [ 1]  856 	and a,#BLOCK_SIZE-1 
      001E32 B7 22            [ 1]  857 	ld YTEMP,a 
      001E34 A6 80            [ 1]  858 	ld a,#BLOCK_SIZE 
      001E36 B0 22            [ 1]  859 	sub a,YTEMP 
      001E38 90 5F            [ 1]  860 	clrw y 
      001E3A 90 97            [ 1]  861 	ld yl,a
      001E3C FF               [ 2]  862 	ldw (x),y 
      001E3D 81               [ 4]  863 	ret 
                                    864 
                                    865 ;---------------------------------
                                    866 ; write u bytes to flash/EEPROM 
                                    867 ; constraint to row limit 
                                    868 ; RAM2EE ( ud a u -- u2 )
                                    869 ; ud flash address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



                                    870 ; a ram address 
                                    871 ; u bytes count
                                    872 ; return u2 bytes written  
                                    873 ;-------------------------------
      001E3E 1E 28                  874 	.word LINK 
                           001E40   875 	LINK=. 
      001E40 06                     876 	.byte 6
      001E41 52 41 4D 32 45 45      877 	.ascii "RAM2EE"
                                    878 	
      001E47                        879 RAM2EE:
                                    880 ; copy ud on top 
      001E47 90 93            [ 1]  881 	ldw y,x 
      001E49 90 EE 06         [ 2]  882 	ldw y,(6,y) ; LSW of ud  
      001E4C 90 BF 22         [ 2]  883 	ldw YTEMP,y 
      001E4F 90 93            [ 1]  884 	ldw y,x 
      001E51 90 EE 04         [ 2]  885 	ldw y,(4,y)  ; MSW of ud 
      001E54 1D 00 04         [ 2]  886 	subw x,#2*CELLL 
      001E57 FF               [ 2]  887 	ldw (x),y 
      001E58 90 BE 22         [ 2]  888 	ldw y,YTEMP 
      001E5B EF 02            [ 2]  889 	ldw (2,x),y 
      001E5D CD 1D F0         [ 4]  890 	call ROW2BUF 
      001E60 90 93            [ 1]  891 	ldw y,x 
      001E62 90 EE 06         [ 2]  892 	ldw y,(6,y)
      001E65 90 89            [ 2]  893 	pushw y ; udl 
      001E67 90 9F            [ 1]  894 	ld a,yl
      001E69 A4 7F            [ 1]  895 	and a,#BLOCK_SIZE-1 
      001E6B 90 5F            [ 1]  896 	clrw y 
      001E6D 90 97            [ 1]  897 	ld yl,a 
      001E6F 72 A9 16 80      [ 2]  898 	addw y,#ROWBUFF 
      001E73 1D 00 02         [ 2]  899 	subw x,#CELLL 
      001E76 FF               [ 2]  900 	ldw (x),y  
      001E77 CD 04 28         [ 4]  901 	call SWAPP ;  ( ud a ra u -- )
      001E7A CD 03 C2         [ 4]  902 	call RFROM  
      001E7D CD 1E 2E         [ 4]  903 	call RFREE 
      001E80 CD 07 00         [ 4]  904 	call MIN
      001E83 CD 04 18         [ 4]  905 	call DUPP 
      001E86 CD 03 E1         [ 4]  906 	call TOR  
      001E89 CD 0A 85         [ 4]  907 	call CMOVE
      001E8C CD 1E 19         [ 4]  908 	call BUF2ROW 
      001E8F CD 03 C2         [ 4]  909 	call RFROM 
      001E92 81               [ 4]  910 	ret 
                                    911 
                                    912 ;--------------------------
                                    913 ; expand 16 bit address 
                                    914 ; to 32 bit address 
                                    915 ; FADDR ( a -- ud )
                                    916 ;--------------------------
      001E93 1E 40                  917 	.word LINK 
                           001E95   918 	LINK=. 
      001E95 05                     919 	.byte 5 
      001E96 46 41 44 44 52         920 	.ascii "FADDR"
      001E9B                        921 FADDR:
      001E9B CC 09 4B         [ 2]  922 	jp ZERO 
                                    923 
                                    924 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                    925 ; move new colon definition to FLASH 
                                    926 ; using WR-ROW for efficiency 
                                    927 ; preserving bytes already used 
                                    928 ; in the current block. 
                                    929 ; ud+c must not exceed block boundary 
                                    930 ; at this point the compiler as completed
                                    931 ; in RAM and pointers CP and CNTXT updated.
                                    932 ; CNTXT point to nfa of new word and  
                                    933 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                    934 ; 
                                    935 ; FMOVE ( -- cp+ )
                                    936 ; 
                                    937 ;--------------------------
      001E9E 1E 95                  938 	.word LINK 
                           001EA0   939 	LINK=.
      001EA0 05                     940 	.byte 5 
      001EA1 46 4D 4F 56 45         941 	.ascii "FMOVE" 
      001EA6                        942 FMOVE:
      001EA6 CD 05 25         [ 4]  943 	call TFLASH 
      001EA9 CD 03 71         [ 4]  944 	CALL AT 
      001EAC CD 03 1C         [ 4]  945 	CALL QBRAN 
      001EAF 1F 2A                  946 	.word no_move  
      001EB1 CD 05 74         [ 4]  947 	call CPP
      001EB4 CD 03 71         [ 4]  948 	call AT  
      001EB7 CD 04 18         [ 4]  949 	call DUPP ; ( udl udl -- )
      001EBA CD 05 58         [ 4]  950 	call CNTXT 
      001EBD CD 03 71         [ 4]  951 	call AT 
      001EC0 CD 02 E9         [ 4]  952 	call DOLIT 
      001EC3 00 02                  953 	.word 2 
      001EC5 CD 06 5E         [ 4]  954 	call SUBB ; ( udl udl a -- )
      001EC8 CD 04 28         [ 4]  955 	call SWAPP 
      001ECB CD 1E 9B         [ 4]  956 	call FADDR 
      001ECE CD 05 C0         [ 4]  957 	call ROT  ; ( udl ud a -- )
      001ED1 CD 04 18         [ 4]  958 	call DUPP 
      001ED4 CD 03 E1         [ 4]  959 	call TOR    ; R: a 
      001ED7                        960 FMOVE2: 
      001ED7 CD 0A 38         [ 4]  961 	call HERE 
      001EDA CD 03 D5         [ 4]  962 	call RAT 
      001EDD CD 06 5E         [ 4]  963 	call SUBB ; (udl ud a wl -- )
      001EE0                        964 next_row:
      001EE0 CD 04 18         [ 4]  965 	call DUPP 
      001EE3 CD 03 E1         [ 4]  966 	call TOR  ; ( udl ud a wl -- ) R: a wl
      001EE6 CD 1E 47         [ 4]  967 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      001EE9 CD 04 18         [ 4]  968 	call DUPP 
      001EEC CD 03 E1         [ 4]  969 	call TOR
      001EEF CD 06 00         [ 4]  970 	call PLUS  ; ( udl+ ) 
      001EF2 CD 04 18         [ 4]  971 	call DUPP 
      001EF5 CD 09 4B         [ 4]  972 	call ZERO   ; ( udl+ ud -- )
      001EF8 CD 03 C2         [ 4]  973 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      001EFB CD 03 C2         [ 4]  974 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      001EFE CD 04 42         [ 4]  975 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      001F01 CD 06 5E         [ 4]  976 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      001F04 CD 04 18         [ 4]  977 	call DUPP 
      001F07 CD 03 1C         [ 4]  978 	call QBRAN
      001F0A 1F 23                  979 	.word fmove_done 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      001F0C CD 04 28         [ 4]  980 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      001F0F CD 03 C2         [ 4]  981 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      001F12 CD 06 00         [ 4]  982 	call PLUS  ; ( udl+2 ud wl- a+ )
      001F15 CD 04 18         [ 4]  983 	call DUPP 
      001F18 CD 03 E1         [ 4]  984 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      001F1B CD 04 28         [ 4]  985 	call SWAPP 
      001F1E CD 03 33         [ 4]  986 	call BRAN
      001F21 1E E0                  987 	.word next_row  
      001F23                        988 fmove_done:	
      001F23 CD 03 C2         [ 4]  989 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      001F26 1C 00 0A         [ 2]  990 	addw x,#5*CELLL ; (  -- udl+ ) new CP 
      001F29 81               [ 4]  991  	ret  
      001F2A                        992 no_move:
      001F2A CD 09 4B         [ 4]  993 	call ZERO
      001F2D 81               [ 4]  994 	ret 
                                    995 
                                    996 ;------------------------------------------
                                    997 ; adjust pointers after **FMOVE** operetion.
                                    998 ; UPDAT-PTR ( cp+ -- )
                                    999 ; cp+ is new CP position after FMOVE 
                                   1000 ;-------------------------------------------
      001F2E 1E A0                 1001 	.word LINK 
                           001F30  1002 	LINK=.
      001F30 09                    1003 	.byte 9
      001F31 55 50 44 41 54 2D 50  1004 	.ascii "UPDAT-PTR" 
             54 52
      001F3A                       1005 UPDATPTR:
                                   1006 ;reset VP to previous position  
      001F3A CD 19 80         [ 4] 1007 	call EEPVP 
      001F3D CD 04 0E         [ 4] 1008 	call DROP 
      001F40 CD 03 71         [ 4] 1009 	call AT
      001F43 CD 05 66         [ 4] 1010 	call VPP 
      001F46 CD 03 5A         [ 4] 1011 	call STORE
                                   1012 ;update CONTEXT and LAST 
      001F49 CD 19 6A         [ 4] 1013 	call EEPCP 
      001F4C CD 04 0E         [ 4] 1014 	call DROP
      001F4F CD 03 71         [ 4] 1015 	call AT
      001F52 CD 02 E9         [ 4] 1016 	call DOLIT 
      001F55 00 02                 1017 	.word 2 
      001F57 CD 06 00         [ 4] 1018 	call PLUS 
      001F5A CD 04 18         [ 4] 1019 	call DUPP 
      001F5D CD 05 58         [ 4] 1020 	call CNTXT 
      001F60 CD 03 5A         [ 4] 1021 	call STORE
      001F63 CD 05 84         [ 4] 1022 	call LAST
      001F66 CD 03 5A         [ 4] 1023 	call STORE 
      001F69 CD 19 9A         [ 4] 1024 	call UPDATLAST 
                                   1025 ;update CP 
      001F6C CD 05 74         [ 4] 1026 	call CPP 
      001F6F CD 03 5A         [ 4] 1027 	call STORE
      001F72 CD 19 C3         [ 4] 1028 	call UPDATCP 
      001F75 81               [ 4] 1029 	ret 
                                   1030 
                                   1031 ;-----------------------------
                                   1032 ; move interrupt sub-routine
                                   1033 ; in flash memory
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



                                   1034 ;----------------------------- 
      001F76 1F 30                 1035 	.word LINK 
                           001F78  1036 	LINK=. 
      001F78 06                    1037 	.byte 6
      001F79 49 46 4D 4F 56 45     1038 	.ascii "IFMOVE" 
      001F7F                       1039 IFMOVE:
      001F7F CD 05 25         [ 4] 1040 	call TFLASH 
      001F82 CD 03 71         [ 4] 1041 	CALL AT 
      001F85 CD 03 1C         [ 4] 1042 	CALL QBRAN 
      001F88 1F 2A                 1043 	.word no_move 
      001F8A CD 05 74         [ 4] 1044 	call CPP 
      001F8D CD 03 71         [ 4] 1045 	call AT 
      001F90 CD 04 18         [ 4] 1046 	call DUPP ; ( udl udl -- )
      001F93 CD 19 80         [ 4] 1047 	call EEPVP 
      001F96 CD 04 0E         [ 4] 1048 	call DROP
      001F99 CD 03 71         [ 4] 1049 	call AT  ; ( udl udl a )
      001F9C CD 03 E1         [ 4] 1050 	call TOR 
      001F9F CD 1E 9B         [ 4] 1051 	call FADDR
      001FA2 CD 03 D5         [ 4] 1052 	call RAT ; ( udl ud a -- ) R: a 
      001FA5 CC 1E D7         [ 2] 1053 	jp FMOVE2 
                                   1054 
                                   1055 
                                   1056 ; application code begin here
      002000                       1057 	.bndry 128 ; align on flash block  
      002000                       1058 app_space: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



                                   4581 .endif ; PICATOUT_MOD
                                   4582 
                                   4583 ;===============================================================
                                   4584 
                           001F78  4585 LASTN =	LINK   ;last name defined
                                   4586 
                                   4587 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        000681 R   |   6 ABOR1      0011D4 R
  6 ABOR2      0011EB R   |   6 ABORQ      0011CC R   |   6 ABORT      0011BD R
  6 ABRTQ      0014A8 R   |   6 ABSS       000678 R   |   6 ACCEP      001153 R
  6 ACCP1      00115C R   |   6 ACCP2      001182 R   |   6 ACCP3      001185 R
  6 ACCP4      001187 R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |   6 ADRADJ     00059F R
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  6 AFT        001493 R   |   6 AGAIN      0013E9 R   |   6 AHEAD      001446 R
  6 ALLOT      0012FC R   |   6 ANDD       000464 R   |     APP_CP  =  004004 
    APP_LAST=  004000     |     APP_RUN =  004002     |     APP_VP  =  004006 
  6 AT         000371 R   |   6 ATEXE      000A6E R   |   6 AUTORUN    000123 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
  6 BACK1      0010FB R   |   6 BASE       0004D5 R   |     BASEE   =  00000A 
    BCNT    =  000001     |   6 BCOMP      00133E R   |   6 BDIGS      000B56 R
    BEEP_BIT=  000004     |     BEEP_CSR=  0050F3     |     BEEP_MAS=  000010 
    BEEP_POR=  00000F     |   6 BEGIN      0013CB R   |     BIT0    =  000000 
    BIT1    =  000001     |     BIT2    =  000002     |     BIT3    =  000003 
    BIT4    =  000004     |     BIT5    =  000005     |     BIT6    =  000006 
    BIT7    =  000007     |   6 BKSLA      000F93 R   |   6 BKSP       0010CB R
    BKSPP   =  000008     |   6 BLANK      00093E R   |     BLOCK_SI=  000080 
    BOOT_ROM=  006000     |     BOOT_ROM=  007FFF     |   6 BRAN       000333 R
    BTW     =  000001     |   6 BUF2ROW    001E19 R   |   6 BYE        0000B0 R
    CADR    =  000003     |     CALLL   =  0000CD     |   6 CANT_FOR   0001CE R
    CAN_DGR =  005426     |     CAN_FPSR=  005427     |     CAN_IER =  005425 
    CAN_MCR =  005420     |     CAN_MSR =  005421     |     CAN_P0  =  005428 
    CAN_P1  =  005429     |     CAN_P2  =  00542A     |     CAN_P3  =  00542B 
    CAN_P4  =  00542C     |     CAN_P5  =  00542D     |     CAN_P6  =  00542E 
    CAN_P7  =  00542F     |     CAN_P8  =  005430     |     CAN_P9  =  005431 
    CAN_PA  =  005432     |     CAN_PB  =  005433     |     CAN_PC  =  005434 
    CAN_PD  =  005435     |     CAN_PE  =  005436     |     CAN_PF  =  005437 
    CAN_RFR =  005424     |     CAN_TPR =  005423     |     CAN_TSR =  005422 
    CARRY   =  000026     |   6 CAT        00038F R   |   6 CCOMMA     001320 R
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CELLL   =  000002     |   6 CELLM      0008C3 R
  6 CELLP      0008B4 R   |   6 CELLS      0008D2 R   |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   6 CHAR1      000D83 R
  6 CHAR2      000D86 R   |   6 CHKIVEC    001D07 R   |     CLKOPT  =  004807 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |   6 CMOV1      000A8D R
  6 CMOV2      000AA5 R   |   6 CMOVE      000A85 R   |     CNTDWN  =  00002E 
  6 CNTXT      000558 R   |   6 COLD       001897 R   |   6 COLD1      001897 R
  6 COLON      00163E R   |   6 COMMA      001309 R   |   6 COMPI      00134E R
    COMPO   =  000040     |   6 CONSTANT   0016DC R   |     CONVERT_=  000001 
  6 COUNT      000A21 R   |   6 CPP        000574 R   |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |   6 CR         000DB1 R   |   6 CREAT      001684 R
    CRR     =  00000D     |   6 CSTOR      00037E R   |     CTOP    =  000080 
  6 DAT        000A01 R   |     DATSTK  =  001670     |   6 DDROP      0005E0 R
  6 DDUP       0005EB R   |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
  6 DECIM      000C06 R   |   6 DEPTH      00098E R   |     DEVID_BA=  0048CD 
    DEVID_EN=  0048D8     |     DEVID_LO=  0048D2     |     DEVID_LO=  0048D3 
    DEVID_LO=  0048D4     |     DEVID_LO=  0048D5     |     DEVID_LO=  0048D6 
    DEVID_LO=  0048D7     |     DEVID_LO=  0048D8     |     DEVID_WA=  0048D1 
    DEVID_XH=  0048CE     |     DEVID_XL=  0048CD     |     DEVID_YH=  0048D0 
    DEVID_YL=  0048CF     |   6 DGTQ1      000C4B R   |   6 DI         0000BE R
  6 DIG        000B7F R   |   6 DIGIT      000B1A R   |   6 DIGS       000B90 R
  6 DIGS1      000B90 R   |   6 DIGS2      000B9D R   |   6 DIGTQ      000C1A R
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   6 DN1        000658 R
  6 DNEGA      00063D R   |   6 DOCONST    001706 R   |   6 DOLIT      0002E9 R
  6 DONXT      0002FD R   |   6 DOSTR      000DC7 R   |   6 DOT        000E4C R
  6 DOT1       000E62 R   |   6 DOTI1      00182B R   |   6 DOTID      001815 R
  6 DOTO1      001260 R   |   6 DOTOK      001246 R   |   6 DOTPR      000F75 R
  6 DOTQ       0014C2 R   |   6 DOTQP      000DF0 R   |   6 DOTR       000DFE R
  6 DOTS       0017B4 R   |   6 DOTS1      0017BF R   |   6 DOTS2      0017CB R
  6 DOVAR      0004C5 R   |   6 DROP       00040E R   |   6 DSTOR      0009DB R
  6 DUMP       00176A R   |   6 DUMP1      001781 R   |   6 DUMP3      0017A3 R
  6 DUMPP      001739 R   |   6 DUPP       000418 R   |   6 EDIGS      000BBB R
  6 EEPCP      00196A R   |   6 EEPLAST    00193D R   |   6 EEPROM     001925 R
    EEPROM_B=  004000     |     EEPROM_E=  0047FF     |     EEPROM_S=  000800 
  6 EEPRUN     001954 R   |   6 EEPVP      001980 R   |   6 EI         0000B7 R
  6 ELSEE      001421 R   |   6 EMIT       0002D3 R   |   6 EQ1        00069C R
  6 EQUAL      000686 R   |   6 ERASE      000AE7 R   |     ERR     =  00001B 
  6 EVAL       001289 R   |   6 EVAL1      001289 R   |   6 EVAL2      0012A5 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]

Symbol Table

  6 EXE1       000A7C R   |   6 EXECU      000343 R   |   6 EXIT       000353 R
    EXT     =  000000     |     EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1 
  6 EXTRC      000B42 R   |   6 FADDR      001E9B R   |     FHSE    =  7A1200 
    FHSI    =  F42400     |   6 FILL       000AB4 R   |   6 FILL1      000AD1 R
  6 FILL2      000ADA R   |   6 FIND       001027 R   |   6 FIND1      001045 R
  6 FIND2      001073 R   |   6 FIND3      00107F R   |   6 FIND4      001093 R
  6 FIND5      0010A0 R   |   6 FIND6      001084 R   |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
    FLASH_IA=  000000     |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |     FLSI    =  01F400 
  6 FMOVE      001EA6 R   |   6 FMOVE2     001ED7 R   |   6 FOR        00139E R
  6 FORGET     000154 R   |   6 FORGET1    000186 R   |   6 FORGET2    0001DC R
  6 FORGET4    0001E5 R   |     FPTR    =  000030     |   6 FREEVAR    0001F2 R
  6 FREEVAR4   000228 R   |     GPIO_BAS=  005000     |     GPIO_CR1=  000003 
    GPIO_CR2=  000004     |     GPIO_DDR=  000002     |     GPIO_IDR=  000001 
    GPIO_ODR=  000000     |     GPIO_SIZ=  000005     |   6 HERE       000A38 R
  6 HEX        000BF1 R   |   6 HI         00186A R   |   6 HLD        000545 R
  6 HOLD       000B66 R   |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |   6 ICOLON     00164F R
  6 IFETCH     0013BC R   |   6 IFF        0013F9 R   |   6 IFMOVE     001F7F R
    IMEDD   =  000080     |   6 IMMED      001661 R   |   6 INCH       0002C7 R
  6 INITOFS    001617 R   |   6 INN        0004F3 R   |     INPUT_DI=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]

Symbol Table

    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_PU=  000001 
  6 INTE1      001228 R   |   6 INTER      0011FE R   |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
  6 INVER      00061A R   |     IPR0    =  000002     |     IPR1    =  000001 
    IPR2    =  000000     |     IPR3    =  000003     |     IPR_MASK=  000003 
    IRET_COD=  000080     |   6 ISEMI      0015AC R   |     ITC_SPR1=  007F70 
    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |   6 JSRC       001601 R   |   6 KEY        000D31 R
  6 KTAP       001118 R   |   6 KTAP1      00113B R   |   6 KTAP2      00113E R
  6 LAST       000584 R   |   6 LASTN   =  001F78 R   |   6 LBRAC      001235 R
    LED2_BIT=  000005     |     LED2_MAS=  000020     |     LED2_POR=  00500A 
  6 LESS       0006C3 R   |     LF      =  00000A     |   6 LINK    =  001F78 R
  6 LITER      001370 R   |   6 LSHIFT     0008FD R   |   6 LSHIFT1    000906 R
  6 LSHIFT4    00090E R   |   6 LT1        0006D9 R   |     MASKK   =  001F7F 
  6 MAX        0006E3 R   |   6 MAX1       0006F6 R   |   6 MIN        000700 R
  6 MIN1       000713 R   |   6 MMOD1      0007B6 R   |   6 MMOD2      0007CA R
  6 MMOD3      0007E1 R   |   6 MMSM1      00075D R   |   6 MMSM2      000771 R
  6 MMSM3      000773 R   |   6 MMSM4      00077B R   |   6 MODD       0007FB R
  6 MONE       000964 R   |     MS      =  00002C     |   6 MSEC       000232 R
  6 MSMOD      000799 R   |   6 MSTA1      00088C R   |   6 MSTAR      000869 R
    NAFR    =  004804     |   6 NAMEQ      0010C0 R   |   6 NAMET      000FD1 R
    NCLKOPT =  004808     |   6 NEGAT      00062B R   |   6 NEX1       00030A R
  6 NEXT       0013AD R   |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPT6   =  00480C 
    NOPT7   =  00480E     |     NOPTBL  =  00487F     |   6 NTIB       000503 R
    NUBC    =  004802     |   6 NUFQ       000D47 R   |   6 NUFQ1      000D60 R
  6 NUMBQ      000C5E R   |   6 NUMQ1      000C92 R   |   6 NUMQ2      000CC3 R
  6 NUMQ3      000D05 R   |   6 NUMQ4      000D0A R   |   6 NUMQ5      000D19 R
  6 NUMQ6      000D1C R   |     NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD 
    NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE 
  6 NonHandl   000000 R   |   6 OFFSET     000596 R   |     OFS     =  000005 
  6 ONE        000956 R   |   6 ONEM       0008EC R   |   6 ONEP       0008DF R
    OPT     =  000002     |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTION_B=  004800     |     OPTION_E=  00487F 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]

Symbol Table

    OPTION_S=  000080     |   6 ORIG       000043 R   |   6 ORR        000478 R
  6 OUTPUT     0002D8 R   |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |   6 OVER       000442 R
  6 OVERT      00157D R   |     PA      =  000000     |   6 PACKS      000AF9 R
  6 PAD        000A49 R   |   6 PAREN      000F84 R   |   6 PARS       000E7D R
  6 PARS1      000EA8 R   |   6 PARS2      000ED3 R   |   6 PARS3      000ED6 R
  6 PARS4      000EDF R   |   6 PARS5      000F02 R   |   6 PARS6      000F17 R
  6 PARS7      000F26 R   |   6 PARS8      000F35 R   |   6 PARSE      000F46 R
  6 PAUSE      000242 R   |     PA_BASE =  005000     |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_BASE =  005005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_BASE =  00500A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |   6 PDUM1      00174C R   |   6 PDUM2      00175D R
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |     PICATOUT=  000001 
  6 PICK       0009A5 R   |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   6 PLUS       000600 R   |   6 PNAM1      001532 R
  6 PRESE      0012B4 R   |     PROD1   =  000020     |     PROD2   =  000022 
    PROD3   =  000024     |   6 PSTOR      0009BA R   |     PTR16   =  000031 
    PTR8    =  000032     |   6 QBRAN      00031C R   |   6 QDUP       0005AF R
  6 QDUP1      0005B9 R   |   6 QKEY       0002B5 R   |   6 QSTAC      00126C R
  6 QUERY      001198 R   |   6 QUEST      000E6F R   |   6 QUIT       0012D1 R
  6 QUIT1      0012D9 R   |   6 QUIT2      0012DC R   |   6 RAM2EE     001E47 R
    RAMBASE =  000000     |     RAM_BASE=  000000     |     RAM_END =  0017FF 
    RAM_SIZE=  001800     |   6 RAT        0003D5 R   |   6 RBRAC      0015EE R
  6 REPEA      001476 R   |   6 RFREE      001E2E R   |   6 RFROM      0003C2 R
    ROP     =  004800     |   6 ROT        0005C0 R   |   6 ROW2BUF    001DF0 R
    ROWBUFF =  001680     |     RP0     =  00002A     |   6 RPAT       00039F R
    RPP     =  0017FF     |   6 RPSTO      0003AC R   |   6 RSHIFT     000919 R
  6 RSHIFT1    000922 R   |   6 RSHIFT4    00092A R   |     RST_SR  =  0050B3 
  6 SAME1      000FEF R   |   6 SAME2      001018 R   |   6 SAMEQ      000FE7 R
  6 SCOM1      001567 R   |   6 SCOM2      00156A R   |   6 SCOMP      001549 R
  6 SEMIS      00158D R   |   6 SETISP     0000CA R   |     SFR_BASE=  005000 
    SFR_END =  0057FF     |   6 SIGN       000BA5 R   |   6 SIGN1      000BB5 R
  6 SLASH      000805 R   |   6 SLMOD      0007E9 R   |   6 SNAME      0014FC R
    SP0     =  000028     |   6 SPACE      000D69 R   |   6 SPACS      000D78 R
  6 SPAT       0003F8 R   |     SPI_CR1 =  005200     |     SPI_CR2 =  005201 
    SPI_CRCP=  005205     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_TXCR=  005207 
    SPP     =  001670     |   6 SPSTO      000405 R   |   6 SSMOD      000895 R
    SSP     =  000001     |     STACK   =  0017FF     |   6 STAR       00085E R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]

Symbol Table

  6 STASL      0008A6 R   |   6 STORE      00035A R   |   6 STR        000BD3 R
  6 STRCQ      00137E R   |   6 STRQ       0014B5 R   |   6 STRQP      000DE6 R
  6 SUBB       00065E R   |   6 SWAPP      000428 R   |     SWIM_CSR=  007F80 
  6 TAP        001102 R   |   6 TBOOT      00188B R   |   6 TBUF       000513 R
    TBUFFBAS=  001680     |   6 TCHA1      000985 R   |   6 TCHAR      000975 R
  6 TEMP       0004E4 R   |   6 TEVAL      000536 R   |   6 TFLASH     000525 R
  6 THENN      00140E R   |   6 TIB        000A5A R   |     TIBB    =  001700 
    TIBBASE =  001700     |     TIC     =  000027     |   6 TICK       0012E8 R
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]

Symbol Table

    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_EGR=  005304 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |   6 TIMEOUTQ   000272 R   |   6 TIMER      00025C R
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |   6 TNAM2      0017E5 R
  6 TNAM3      001803 R   |   6 TNAM4      001809 R   |   6 TNAME      0017E2 R
  6 TOFLASH    000297 R   |   6 TOKEN      000FC3 R   |   6 TOR        0003E1 R
  6 TORAM      0002A8 R   |     TRUEE   =  00FFFF     |   6 TWOSL      000931 R
  6 TYPE1      000D98 R   |   6 TYPE2      000DA4 R   |   6 TYPES      000D93 R
  6 Timer4Ha   000005 R   |     UART1   =  000000     |     UART1_BA=  005230 
    UART1_BR=  005232     |     UART1_BR=  005233     |     UART1_CR=  005234 
    UART1_CR=  005235     |     UART1_CR=  005236     |     UART1_CR=  005237 
    UART1_CR=  005238     |     UART1_DR=  005231     |     UART1_GT=  005239 
    UART1_PO=  000000     |     UART1_PS=  00523A     |     UART1_RX=  000004 
    UART1_SR=  005230     |     UART1_TX=  000005     |     UART3   =  000001 
    UART3_BA=  005240     |     UART3_BR=  005242     |     UART3_BR=  005243 
    UART3_CR=  005244     |     UART3_CR=  005245     |     UART3_CR=  005246 
    UART3_CR=  005247     |     UART3_CR=  004249     |     UART3_DR=  005241 
    UART3_PO=  00000F     |     UART3_RX=  000006     |     UART3_SR=  005240 
    UART3_TX=  000005     |     UART_BRR=  000002     |     UART_BRR=  000003 
    UART_CR1=  000004     |     UART_CR1=  000004     |     UART_CR1=  000002 
    UART_CR1=  000000     |     UART_CR1=  000001     |     UART_CR1=  000007 
    UART_CR1=  000006     |     UART_CR1=  000005     |     UART_CR1=  000003 
    UART_CR2=  000005     |     UART_CR2=  000004     |     UART_CR2=  000002 
    UART_CR2=  000005     |     UART_CR2=  000001     |     UART_CR2=  000000 
    UART_CR2=  000006     |     UART_CR2=  000003     |     UART_CR2=  000007 
    UART_CR3=  000006     |     UART_CR3=  000003     |     UART_CR3=  000001 
    UART_CR3=  000002     |     UART_CR3=  000000     |     UART_CR3=  000006 
    UART_CR3=  000004     |     UART_CR3=  000005     |     UART_CR4=  000007 
    UART_CR4=  000000     |     UART_CR4=  000001     |     UART_CR4=  000002 
    UART_CR4=  000003     |     UART_CR4=  000004     |     UART_CR4=  000006 
    UART_CR4=  000005     |     UART_CR5=  000008     |     UART_CR5=  000003 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]

Symbol Table

    UART_CR5=  000001     |     UART_CR5=  000002     |     UART_CR5=  000004 
    UART_CR5=  000005     |     UART_CR6=  000009     |     UART_CR6=  000004 
    UART_CR6=  000007     |     UART_CR6=  000001     |     UART_CR6=  000002 
    UART_CR6=  000000     |     UART_CR6=  000005     |     UART_DR =  000001 
    UART_GTR=  000009     |     UART_PSC=  00000A     |     UART_SR =  000000 
    UART_SR_=  000001     |     UART_SR_=  000004     |     UART_SR_=  000002 
    UART_SR_=  000003     |     UART_SR_=  000000     |     UART_SR_=  000005 
    UART_SR_=  000006     |     UART_SR_=  000007     |     UBASE   =  000006 
    UBC     =  004801     |     UCNTXT  =  000014     |     UCP     =  000018 
    UCTIB   =  00000C     |     UD1     =  000001     |     UD2     =  000002 
    UD3     =  000003     |     UD4     =  000004     |   6 UDOT       000E39 R
  6 UDOTR      000E19 R   |   6 UEND       000041 R   |     UHLD    =  000012 
    UINN    =  00000A     |     UINTER  =  000010     |     ULAST   =  00001A 
  6 ULES1      0006BB R   |   6 ULESS      0006A5 R   |   6 UMMOD      00073B R
  6 UMSTA      000814 R   |   6 UNIQ1      0014F3 R   |   6 UNIQU      0014D4 R
  6 UNTIL      0013D6 R   |     UOFFSET =  00001C     |   6 UPDATCP    0019C3 R
  6 UPDATLAS   00199A R   |   6 UPDATPTR   001F3A R   |   6 UPDATRUN   0019B2 R
  6 UPDATVP    0019DA R   |   6 UPL1       0004B9 R   |   6 UPLUS      0004A2 R
    UPP     =  000006     |     USR_BTN_=  000004     |     USR_BTN_=  000010 
    USR_BTN_=  005015     |     UTFLASH =  00001E     |     UTIB    =  00000E 
    UTMP    =  000008     |   6 UTYP1      00171C R   |   6 UTYP2      00172B R
  6 UTYPE      001717 R   |     UVP     =  000016     |   6 UZERO      000027 R
  6 VARIA      00169E R   |     VER     =  000003     |   6 VPP        000566 R
    VSIZE   =  000006     |     WANT_DEB=  000000     |     WANT_SEE=  000000 
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |   6 WHILE      00145C R
  6 WITHI      000720 R   |   6 WORDD      000FAF R   |   6 WORDS      00183F R
  6 WORS1      001845 R   |   6 WORS2      001864 R   |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |   6 XORR       00048D R   |     XTEMP   =  000020 
    YTEMP   =  000022     |   6 ZERO       00094B R   |   6 ZL1        00045A R
  6 ZLESS      000451 R   |   6 app_spac   002000 R   |   6 block_er   001B5D R
  6 clear_ra   000019 R   |   6 clock_in   00005E R   |   6 copy_buf   001BB4 R
  6 copy_buf   001BD3 R   |   6 copy_pro   001BD3 R   |     da      =  000002 
    db      =  000003     |     dc      =  000000     |     dd      =  000001 
  6 ee_ccomm   001DCE R   |   6 ee_comma   001DAD R   |   6 ee_cstor   001ACA R
  6 ee_store   001B16 R   |   6 erase_fl   001B79 R   |   6 farat      0019EB R
  6 farcat     001A07 R   |   6 fmove_do   001F23 R   |   6 fptr_sto   001906 R
  6 inc_fptr   001A98 R   |   6 lock       001A84 R   |   6 main       000016 R
  6 next_row   001EE0 R   |   6 no_move    001F2A R   |   6 pristine   001C4E R
  6 proceed_   001B7C R   |   6 reboot     000289 R   |   6 reset_ve   001CB5 R
  6 row_eras   001B40 R   |   6 row_eras   001B8D R   |   6 row_eras   001BB4 R
  6 set_opti   001C22 R   |   6 set_vect   001D56 R   |   6 uart1_in   000070 R
  6 unlock     001A5C R   |   6 unlock_e   001A1E R   |   6 unlock_f   001A3D R
  6 write_by   001AAF R   |   6 write_ro   001BF8 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   2000   flags    0

