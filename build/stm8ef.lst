ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                                .include "inc/config.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019,2020 
                                        ; This file is part of stm8_eForth  
                                        ;
                                        ;     stm8_eForth is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     stm8_eForth is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        
                                        ; constants to select board
                                        ; to assemble for a specific 
                                        ; board set it to 1 and the other
                                        ; to 0. 
                                 
                                 
                                        
                                        ; set to 1 to include 
                                        ; scaling constants vocabulary
                                        ; see: const_ratio.asm 
                                 
                                        
                                        ; set to 1 to include 
                                        ; constants tables vocabulary 
                                        ; see: ctable.asm 
                                 
                                        
                                        ; how many bytes are reserved 
                                        ; by system at EEPROM base.
                                 
                                        
                                        ; size in bytes of EXTENDED MEMORY 
                                 
                                 
                                 
                                        XMEM_SIZE=0 
                                        .endif 
                                        
                                 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/stm8s105.inc"
                                        	.include "inc/stm8s_disco.inc"
                                        .endif 
                                     19 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     21 
                                     22 ;===============================================================
                                     23 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     24 ;  Date: 2020-06-07 
                                     25 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     26 ;  Date: 2019-10-26
                                     27 ;  Changes to memory map:
                                     28 ;       0x16f0  Data Stack, growing downward
                                     29 ;       0x1700  Terminal input buffer TIB
                                     30 ;       0x17ff  Return Stack, growing downard
                                     31 ;================================================================
                                     32 ;       STM8EF, Version 2.1, 13 July
                                     33 ;               Implemented on STM8S-Discovery Board.
                                     34 ;               Assembled by ST VisualDevelop STVD 
                                     35 ;               Bootup on internal 2 MHz clock
                                     36 ;               Switch to external 16 MHz crystal clock
                                     37 ;
                                     38 ; FORTH Virtual Machine:
                                     39 ; Subroutine threaded model
                                     40 ; SP Return stack pointer
                                     41 ; X Data stack pointer
                                     42 ; A,Y Scratch pad registers
                                     43 ;
                                     44 ; Memory Map:
                                     45 ; 0x0 RAM memory, system variables
                                     46 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     47 ; 0x780 Data stack, growing downward
                                     48 ; 0x790 Terminal input buffer TIB
                                     49 ; 0x7FF Return stack, growing downward
                                     50 ; 0x8000 Interrupt vector table
                                     51 ; 0x8080 FORTH startup code
                                     52 ; 0x80E7 Start of FORTH dictionary in ROM
                                     53 ; 0x9584 End of FORTH dictionary
                                     54 ;
                                     55 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     56 ;                  use UART1 instead of UART3 for communication with user.
                                     57 ;                  UART1 is available as ttyACM* device via USB connection.
                                     58 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     59 ;                  and MSEC word that return MS value.
                                     60 ;
                                     61 ;       EF12, Version 2.1, 18apr00cht
                                     62 ;               move to 8000H replacing WHYP.
                                     63 ;               copy interrupt vectors from WHYPFLSH.S19
                                     64 ;               to EF12.S19 before flashing
                                     65 ;               add TICKS1 and DELAY1 for motor stepping
                                     66 ;
                                     67 ;       EF12, 02/18/00, C. H. Ting
                                     68 ;       Adapt 86eForth v2.02 to 68HC12.
                                     69 ;               Use WHYP to seed EF12.ASM
                                     70 ;               Use AS12 native 68HC12 assembler:
                                     71 ;               as12 ef12.asm >ef12.lst
                                     72 ;       EF12A, add ADC code, 02mar00cht
                                     73 ;       EF12B, 01mar00cht
                                     74 ;               stack to 0x78, return stack to 0xf8.
                                     75 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     76 ;               add PWM registers
                                     77 ;               add SPI registers and code
                                     78 ;       EF12C, 12mar00cht
                                     79 ;               add MAX5250 D/A converter
                                     80 ;       EF12D, 15mar00cht
                                     81 ;               add all the Lexel interface words
                                     82 ;       EF12E, 18apr00cht, save for reference
                                     83 ;
                                     84 ;       Copyright (c) 2000
                                     85 ;       Dr. C. H. Ting
                                     86 ;       156 14th Avenue
                                     87 ;       San Mateo, CA 94402
                                     88 ;       (650) 571-7639
                                     89 ;
                                     90 
                                     91 
                                     92 ;*********************************************************
                                     93 ;	Assembler constants
                                     94 ;*********************************************************
                           000000    95 RAMBASE =	0x0000	   ;ram base
                           000001    96 .if NUCLEO 
                           0017FF    97 STACK   =	0x17FF 	;system (return) stack empty 
                           001680    98 DATSTK  =	0x1680	;data stack  empty
                           001680    99 TBUFFBASE =     0x1680  ; flash read/write transaction buffer address  
                           001700   100 TIBBASE =       0X1700  ; transaction input buffer addr.
                           000000   101 .else ; DISCOVERY
                                    102 STACK   =	0x7FF 	;system (return) stack empty 
                                    103 DATSTK  =	0x680	;data stack  empty
                                    104 TBUFFBASE =     0x680  ; flash read/write transaction buffer address  
                                    105 TIBBASE =       0X700  ; transaction input buffer addr.
                                    106 .endif
                                    107 
                                    108 ;; Memory allocation
                           000006   109 UPP     =     RAMBASE+6          ; systeme variables base address 
                           001680   110 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0017FF   111 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           001680   112 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           001700   113 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   114 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0017BF   115 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    116 
                                    117 ; user variables constants 
                           000006   118 UBASE = UPP       ; numeric base 
                           000008   119 UTMP = UBASE+2    ; temporary storage
                           00000A   120 UINN = UTMP+2     ; >IN tib pointer 
                           00000C   121 UCTIB = UINN+2    ; tib count 
                           00000E   122 UTIB = UCTIB+2    ; tib address 
                           000010   123 UINTER = UTIB+2   ; interpreter vector 
                           000012   124 UHLD = UINTER+2   ; hold 
                           000014   125 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000016   126 UVP = UCNTXT+2    ; variable pointer 
                           000018   127 UCP = UVP+2      ; code pointer
                           00001A   128 ULAST = UCP+2    ; last dictionary pointer 
                           00001C   129 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
                           00001E   130 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000020   131 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    132 
                                    133 ;******  System Variables  ******
                           000022   134 XTEMP	=	URLAST +2;address called by CREATE
                           000024   135 YTEMP	=	XTEMP+2	;address called by CREATE
                           000022   136 PROD1 = XTEMP	;space for UM*
                           000024   137 PROD2 = PROD1+2
                           000026   138 PROD3 = PROD2+2
                           000028   139 CARRY = PROD3+2
                           00002A   140 SP0	= CARRY+2	;initial data stack pointer
                           00002C   141 RP0	= SP0+2		;initial return stack pointer
                           00002E   142 MS    =   RP0+2         ; millisecond counter 
                           000030   143 CNTDWN =  MS+2          ; count down timer 
                           000032   144 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000033   145 PTR16 = FPTR+1          ; middle byte of farptr 
                           000034   146 PTR8 = FPTR+2           ; least byte of farptr 
                           000036   147 SEEDX = PTR8+2          ; PRNG seed X 
                           000038   148 SEEDY = SEEDX+2         ; PRNG seed Y 
                                    149 
                                    150 ; EEPROM persistant data  
                           004000   151 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   152 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   153 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   154 APP_VP = APP_CP+2  ; free data space pointer 
                                    155 
                                    156 
                                    157 ;***********************************************
                                    158 ;; Version control
                                    159 
                           000003   160 VER     =     3         ;major release version
                           000000   161 EXT     =     0         ;minor extension
                                    162 
                                    163 ;; Constants
                                    164 
                           00FFFF   165 TRUEE   =     0xFFFF      ;true flag
                                    166 
                           000040   167 COMPO   =     0x40     ;lexicon compile only bit
                           000080   168 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   169 MASKK   =     0x1F7F  ;lexicon bit mask
                                    170 
                           000002   171 CELLL   =     2       ;size of a cell
                           00000A   172 BASEE   =     10      ;default radix
                           000008   173 BKSPP   =     8       ;back space
                           00000A   174 LF      =     10      ;line feed
                           00000D   175 CRR     =     13      ;carriage return
                           00001B   176 ERR     =     27      ;error escape
                           000027   177 TIC     =     39      ;tick
                           0000CD   178 CALLL   =     0xCD     ;CALL opcodes
                           000080   179 IRET_CODE =   0x80    ; IRET opcode 
                                    180 
                                    181         .macro _ledon
                                    182         bset PC_ODR,#LED2_BIT
                                    183         .endm
                                    184 
                                    185         .macro _ledoff
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    186         bres PC_ODR,#LED2_BIT
                                    187         .endm
                                    188 
                                    189 ;**********************************************************
                                    190         .area DATA (ABS)
      000000                        191         .org RAMBASE 
                                    192 ;**********************************************************
                                    193 
                                    194 ;**********************************************************
                                    195         .area SSEG (ABS) ; STACK
      001700                        196         .org 0x1700
      001700                        197         .ds 256 
                                    198 ; space for DATSTK,TIB and STACK         
                                    199 ;**********************************************************
                                    200 
                                    201 ;**********************************************************
                                    202         .area HOME ; vectors table
                                    203 ;**********************************************************
      000000 82 00 00 16            204 	int main	        ; reset
      000004 82 00 00 00            205 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            206 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            207 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            208 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            209 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            210 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            211 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            212 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            213 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            214 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            215 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            216 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            217 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            218 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            219 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            220 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            221 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            222 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            223 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            224 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            225 	int NonHandledInterrupt	; irq19
      000058 82 00 00 00            226 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            227 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            228 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            229 	int Timer4Handler	; irq23
      000068 82 00 00 00            230 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            231 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            232 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            233 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            234 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            235 	int NonHandledInterrupt	; irq29
                                    236 
                                    237 ;**********************************************************
                                    238         .area CODE
                                    239 ;**********************************************************
                                    240 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    241 ; non handled interrupt reset MCU
      000000                        242 NonHandledInterrupt:
      000000 A6 80            [ 1]  243         ld a, #0x80
      000002 C7 50 D1         [ 1]  244         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    245 	;iret
                                    246 
                                    247 ; used for milliseconds counter 
                                    248 ; MS is 16 bits counter 
      000005                        249 Timer4Handler:
      000005 72 5F 53 42      [ 1]  250 	clr TIM4_SR 
      000009 BE 2E            [ 2]  251         ldw x,MS 
      00000B 5C               [ 2]  252         incw x 
      00000C BF 2E            [ 2]  253         ldw MS,x
      00000E BE 30            [ 2]  254         ldw x,CNTDWN 
      000010 27 03            [ 1]  255         jreq 1$
      000012 5A               [ 2]  256         decw x 
      000013 BF 30            [ 2]  257         ldw CNTDWN,x 
      000015                        258 1$:         
      000015 80               [11]  259         iret 
                                    260 
                                    261 
                                    262 ;; Main entry points and COLD start data
      000016                        263 main:
                                    264 ; clear all RAM
      000016 AE 00 00         [ 2]  265 	ldw X,#RAMBASE
      000019                        266 clear_ram0:
      000019 7F               [ 1]  267 	clr (X)
      00001A 5C               [ 2]  268 	incw X
      00001B A3 17 FF         [ 2]  269 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  270 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  271         ldw x,#RPP
      000023 94               [ 1]  272         ldw sp,x
                                    273 ; set SEEDX and SEEDY to 1 
      000024 3C 37            [ 1]  274         inc SEEDX+1 
      000026 3C 39            [ 1]  275         inc SEEDY+1          
      000028 CC 00 47         [ 2]  276 	jp ORIG
                                    277 
                                    278 ; COLD initialize these variables.
      00002B                        279 UZERO:
      00002B 00 0A                  280         .word      BASEE   ;BASE
      00002D 00 00                  281         .word      0       ;tmp
      00002F 00 00                  282         .word      0       ;>IN
      000031 00 00                  283         .word      0       ;#TIB
      000033 17 00                  284         .word      TIBB    ;TIB
      000035 12 ED                  285         .word      INTER   ;'EVAL
      000037 00 00                  286         .word      0       ;HLD
      000039 23 06                  287         .word      LASTN  ;CNTXT pointer
      00003B 00 80                  288         .word      VAR_BASE   ;variables free space pointer 
      00003D 23 80                  289         .word      app_space ; FLASH free space pointer 
      00003F 23 06                  290         .word      LASTN   ;LAST
      000041 00 00                  291         .word      0        ; OFFSET 
      000043 00 00                  292         .word      0       ; TFLASH
                                    293 ;       .word      0       ; URLAST   
      000045 00 00                  294 UEND:   .word      0
                                    295 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      000047                        296 ORIG:   
                                    297 ; initialize SP
      000047 AE 17 FF         [ 2]  298         LDW     X,#STACK  ;initialize return stack
      00004A 94               [ 1]  299         LDW     SP,X
      00004B BF 2C            [ 2]  300         LDW     RP0,X
      00004D AE 16 80         [ 2]  301         LDW     X,#DATSTK ;initialize data stack
      000050 BF 2A            [ 2]  302         LDW     SP0,X
                                    303 ; initialize PC_5 as output to control LED2
                                    304 ; added by Picatout 
      000052 72 1A 50 0D      [ 1]  305         bset PC_CR1,#LED2_BIT
      000056 72 1A 50 0E      [ 1]  306         bset PC_CR2,#LED2_BIT
      00005A 72 1A 50 0C      [ 1]  307         bset PC_DDR,#LED2_BIT
      00005E                        308         _ledoff
      00005E 72 1B 50 0A      [ 1]    1         bres PC_ODR,#LED2_BIT
                                    309 ; initialize clock to HSI
                                    310 ; no divisor 16Mhz 
                                    311 ; Added by Picatout 
      000062                        312 clock_init:
      000062 72 5F 50 C6      [ 1]  313         clr CLK_CKDIVR
      000066 72 12 50 C5      [ 1]  314 	bset CLK_SWCR,#CLK_SWCR_SWEN
                           000001   315 .if NUCLEO
      00006A A6 E1            [ 1]  316 	ld a,#CLK_SWR_HSI
                           000000   317 .else ; DISCOVERY as 16Mhz crystal
                                    318 	ld a,#CLK_SWR_HSE
                                    319 .endif 
      00006C C7 50 C4         [ 1]  320 	ld CLK_SWR,a
      00006F C1 50 C3         [ 1]  321 1$:	cp a,CLK_CMSR
      000072 26 FB            [ 1]  322 	jrne 1$
                                    323         
                                    324 ; initialize UART, 115200 8N1
      000074                        325 uart_init:
                           000001   326 .if NUCLEO 
      000074 72 14 50 C7      [ 1]  327 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    328 	; configure tx pin
      000078 72 1A 50 02      [ 1]  329 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      00007C 72 1A 50 03      [ 1]  330 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      000080 72 1A 50 04      [ 1]  331 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    332 	; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
      000084 35 0B 52 33      [ 1]  333 	mov UART1_BRR2,#0x0b ; must be loaded first
      000088 35 08 52 32      [ 1]  334 	mov UART1_BRR1,#0x8
      00008C 35 0C 52 35      [ 1]  335 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                           000000   336 .else ; DISCOVERY use UART2 
                                    337 	bset CLK_PCKENR1,#CLK_PCKENR1_UART2
                                    338 	; configure tx pin
                                    339 	bset PD_DDR,#UART2_TX_PIN ; tx pin
                                    340 	bset PD_CR1,#UART2_TX_PIN ; push-pull output
                                    341 	bset PD_CR2,#UART2_TX_PIN ; fast output
                                    342 	; baud rate 115200 Fmaster=8Mhz  
                                    343 	mov UART2_BRR2,#0x0b ; must be loaded first
                                    344 	mov UART2_BRR1,#0x8
                                    345 	mov UART2_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    346 .endif
                                    347 ; initialize timer4, used for millisecond interrupt  
      000090 35 07 53 45      [ 1]  348 	mov TIM4_PSCR,#7 ; prescale 128  
      000094 35 7D 53 46      [ 1]  349 	mov TIM4_ARR,#125 ; set for 1msec.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      000098 35 05 53 40      [ 1]  350 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      00009C 72 10 53 41      [ 1]  351 	bset TIM4_IER,#TIM4_IER_UIE 
                                    352 ; set TIM4 interrupt priority to highest
      0000A0 A6 3F            [ 1]  353         ld a,#~(IPR_MASK<<6)
      0000A2 C4 7F 75         [ 1]  354         and a,ITC_SPR6
      0000A5 AA C0            [ 1]  355         or a,#(IPR3<<6)
      0000A7 C7 7F 75         [ 1]  356         ld ITC_SPR6,a 
      0000AA 9A               [ 1]  357         rim
      0000AB CC 19 F1         [ 2]  358         jp  COLD   ;default=MN1
                                    359 
                                    360 
                                    361 ;; place MCU in sleep mode with
                                    362 ;; halt opcode 
                                    363 ;; BYE ( -- )
      0000AE 00 00                  364         .word 0
                           0000B0   365         LINK=.
      0000B0 03                     366         .byte 3 
      0000B1 42 59 45               367         .ascii "BYE"
      0000B4                        368 BYE: 
      0000B4 8E               [10]  369         halt 
      0000B5 81               [ 4]  370         ret 
                                    371 
                                    372 ; Enable interrupts 
                                    373 ; EI ( -- )
      0000B6 00 B0                  374         .word LINK 
                           0000B8   375         LINK=.
      0000B8 02                     376         .byte 2
      0000B9 45 49                  377         .ascii "EI"
      0000BB                        378 EI:
      0000BB 9A               [ 1]  379         rim 
      0000BC 81               [ 4]  380         ret 
                                    381 
                                    382 ; Disable interrupts
                                    383 ; DI ( -- )
      0000BD 00 B8                  384         .word LINK 
                           0000BF   385         LINK=.
      0000BF 02                     386         .byte 2 
      0000C0 44 49                  387         .ascii "DI"
      0000C2                        388 DI:
      0000C2 9B               [ 1]  389         sim 
      0000C3 81               [ 4]  390         ret 
                                    391 
                                    392 ; set interrupt priority level 
                                    393 ; SET-ISP ( n1 n2 -- )
                                    394 ; n1 level {1..3}
                                    395 ; n2 vector {0..29}
      0000C4 00 BF                  396         .word LINK 
                           0000C6   397         LINK=.
      0000C6 07                     398         .byte 7 
      0000C7 53 45 54 2D 49 53 50   399         .ascii "SET-ISP"
      0000CE                        400 SETISP:
      0000CE 90 93            [ 1]  401         ldw y,x 
      0000D0 90 FE            [ 2]  402         ldw y,(y)
      0000D2 A6 04            [ 1]  403         ld a,#4 ; 4 slot per register 
                                    404 ;  quotient select register, remainder select slot in register.        
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      0000D4 90 62            [ 2]  405         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000D6 A4 03            [ 1]  406         and a,#3 
      0000D8 48               [ 1]  407         sll a ; 2*SLOT  lshift 
      0000D9 72 A9 7F 70      [ 2]  408         addw y,#ITC_SPR1 
      0000DD FF               [ 2]  409         ldw (x),y  ; ( level reg -- )
      0000DE 90 5F            [ 1]  410         clrw y 
      0000E0 90 97            [ 1]  411         ld yl,a 
      0000E2 1D 00 02         [ 2]  412         subw x,#CELLL 
      0000E5 FF               [ 2]  413         ldw (x),y  ; ( level reg lshift -- )
      0000E6 90 93            [ 1]  414         ldw y,x 
      0000E8 90 EE 02         [ 2]  415         ldw y,(2,y) 
      0000EB 90 F6            [ 1]  416         ld a,(y)   ; reg_value
      0000ED 1D 00 02         [ 2]  417         subw x,#CELLL 
      0000F0 FF               [ 2]  418         ldw (x),y ; ( level reg lshift rval -- )
      0000F1 CD 05 03         [ 4]  419         call OVER ; ( level reg lshift rval lshift -- )
      0000F4 CD 03 B4         [ 4]  420         call DOLIT 
      0000F7 00 03                  421         .word 3
      0000F9 CD 04 E9         [ 4]  422         call SWAPP  ; ( level reg lshift rval 3 lshift )
      0000FC CD 09 EC         [ 4]  423         call LSHIFT ; creat slot mask 
      0000FF CD 06 EE         [ 4]  424         call INVER  ; ( level reg lshift rval mask )
      000102 CD 05 25         [ 4]  425         call ANDD ; ( level reg lshift slot_masked )
      000105 CD 04 A2         [ 4]  426         call TOR  ; ( level reg lshift -- R: slot_masked )
      000108 CD 06 94         [ 4]  427         call ROT  ; ( reg lshift level )
      00010B CD 04 E9         [ 4]  428         call SWAPP ; ( reg level lshift )
      00010E CD 09 EC         [ 4]  429         call LSHIFT  ; ( reg slot_level -- )
      000111 CD 04 83         [ 4]  430         call RFROM ; ( reg slot_level masked_val )
      000114 CD 05 39         [ 4]  431         call ORR   ; ( reg updated_rval )
      000117 CD 04 E9         [ 4]  432         call SWAPP 
      00011A CD 04 3F         [ 4]  433         call CSTOR
                                    434 
                                    435 ; sélectionne l'application 
                                    436 ; qui démarre automatique lors 
                                    437 ; d'un COLD start 
      00011D 00 C6                  438         .word LINK 
                           00011F   439         LINK=.
      00011F 07                     440         .byte 7
      000120 41 55 54 4F 52 55 4E   441         .ascii "AUTORUN"
      000127                        442 AUTORUN:
      000127 CD 10 B2         [ 4]  443         call TOKEN 
      00012A CD 04 D9         [ 4]  444         call DUPP 
      00012D CD 03 E7         [ 4]  445         call QBRAN 
      000130 02 0D                  446         .word FORGET2
      000132 CD 11 AF         [ 4]  447         call NAMEQ
      000135 CD 06 83         [ 4]  448         call QDUP 
      000138 CD 03 E7         [ 4]  449         call QBRAN 
      00013B 02 0D                  450         .word FORGET2
      00013D CD 04 CF         [ 4]  451         call DROP 
      000140 1D 00 04         [ 2]  452         subw x,#2*CELLL 
      000143 90 5F            [ 1]  453         clrw y 
      000145 FF               [ 2]  454         ldw (x),y 
      000146 90 AE 40 02      [ 2]  455         ldw y,#APP_RUN 
      00014A EF 02            [ 2]  456         ldw (2,x),y 
      00014C CC 1C DE         [ 2]  457         jp ee_store 
                                    458 
                                    459 ;; Reset dictionary pointer before 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                                    460 ;; forgotten word. RAM space and 
                                    461 ;; interrupt vector defined after 
                                    462 ;; must be resetted also.
      00014F 01 1F                  463         .word LINK 
                           000151   464         LINK=.
      000151 06                     465         .byte 6
      000152 46 4F 52 47 45 54      466         .ascii "FORGET" 
      000158                        467 FORGET: 
      000158 CD 10 B2         [ 4]  468         call TOKEN
      00015B CD 04 D9         [ 4]  469         call DUPP 
      00015E CD 03 E7         [ 4]  470         call QBRAN 
      000161 02 0D                  471         .word FORGET2
      000163 CD 11 AF         [ 4]  472         call NAMEQ ; ( a -- ca na | a F )
      000166 CD 06 83         [ 4]  473         call QDUP 
      000169 CD 03 E7         [ 4]  474         call QBRAN 
      00016C 02 0D                  475         .word FORGET2
                                    476 ; only forget users words 
      00016E CD 04 D9         [ 4]  477         call DUPP ; ( ca na na )
      000171 CD 03 B4         [ 4]  478         call DOLIT 
      000174 23 80                  479         .word app_space 
      000176 CD 04 E9         [ 4]  480         call SWAPP 
      000179 CD 07 94         [ 4]  481         call  ULESS 
      00017C CD 03 E7         [ 4]  482         call QBRAN 
      00017F 01 CF                  483         .word FORGET6 
                                    484 ; ( ca na -- )        
                                    485 ;reset ivec with address >= ca
      000181 CD 04 E9         [ 4]  486         call SWAPP ; ( na ca -- ) 
      000184 CD 1E CF         [ 4]  487         call CHKIVEC ; ( na -- ) 
                                    488 ; start at LAST and link back to na 
                                    489 ; if variable found reset VP at that point.
      000187                        490 FORGET1:
      000187 CD 06 45         [ 4]  491         call LAST 
      00018A CD 04 32         [ 4]  492         call AT 
      00018D CD 04 D9         [ 4]  493         call DUPP  ; ( -- na last last )
      000190 CD 02 23         [ 4]  494         call FREEVAR ; ( -- na last )
      000193 CD 04 D9         [ 4]  495         call DUPP 
      000196 CD 03 B4         [ 4]  496         call DOLIT 
      000199 00 02                  497         .word 2 
      00019B CD 07 4D         [ 4]  498         call SUBB ; ( na last -- na last lfa ) link address 
      00019E CD 04 32         [ 4]  499         call AT 
      0001A1 CD 04 D9         [ 4]  500         call DUPP ; ( -- na last a a )
      0001A4 CD 06 19         [ 4]  501         call CNTXT 
      0001A7 CD 04 1B         [ 4]  502         call STORE
      0001AA CD 06 45         [ 4]  503         call LAST  
      0001AD CD 04 1B         [ 4]  504         call STORE ; ( --  na last )
      0001B0 CD 05 03         [ 4]  505         call OVER 
      0001B3 CD 07 75         [ 4]  506         call EQUAL ; ( na last na -- na T|F ) 
      0001B6 CD 03 E7         [ 4]  507         call QBRAN 
      0001B9 01 87                  508         .word FORGET1 
                                    509 ; ( na -- )
      0001BB CD 03 B4         [ 4]  510         call DOLIT 
      0001BE 00 02                  511         .word 2 
      0001C0 CD 07 4D         [ 4]  512         call SUBB 
      0001C3 CD 06 35         [ 4]  513         call CPP 
      0001C6 CD 04 1B         [ 4]  514         call STORE  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      0001C9 CD 1B 1D         [ 4]  515         call UPDATCP 
      0001CC CC 1A F4         [ 2]  516         jp UPDATLAST 
      0001CF                        517 FORGET6: ; tried to forget a RAM or system word 
                                    518 ; ( ca na -- )
      0001CF 1D 00 02         [ 2]  519         subw x,#CELLL 
      0001D2 90 BE 2A         [ 2]  520         ldw y,SP0 
      0001D5 FF               [ 2]  521         ldw (x),y  
      0001D6 CD 07 94         [ 4]  522         call ULESS
      0001D9 CD 03 E7         [ 4]  523         call QBRAN 
      0001DC 01 FF                  524         .word PROTECTED 
      0001DE CD 12 BB         [ 4]  525         call ABORQ 
      0001E1 1D                     526         .byte 29
      0001E2 20 46 6F 72 20 52 41   527         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      0001FF                        528 PROTECTED:
      0001FF CD 12 BB         [ 4]  529         call ABORQ
      000202 0A                     530         .byte 10
      000203 20 50 72 6F 74 65 63   531         .ascii " Protected"
             74 65 64
      00020D                        532 FORGET2: ; no name or not found in dictionary 
      00020D CD 12 BB         [ 4]  533         call ABORQ
      000210 05                     534         .byte 5
      000211 20 77 68 61 74         535         .ascii " what"
      000216                        536 FORGET4:
      000216 CC 04 CF         [ 2]  537         jp DROP 
                                    538 
                                    539 
                                    540 ;---------------------------------
                                    541 ; if na is variable 
                                    542 ; free variable data  
                                    543 ; FREEVAR ( na -- )
                                    544 ;---------------------------------
      000219 01 51                  545         .word LINK 
                           00021B   546         LINK=.
      00021B 07                     547         .byte 7 
      00021C 46 52 45 45 56 41 52   548         .ascii "FREEVAR"
      000223                        549 FREEVAR:
      000223 CD 04 D9         [ 4]  550         call DUPP ; ( na na -- )
      000226 CD 04 50         [ 4]  551         CALL CAT  ; ( na c -- )
      000229 CD 09 CE         [ 4]  552         call ONEP ;
      00022C CD 06 D4         [ 4]  553         CALL PLUS ; ( na c+1 -- ca ) 
      00022F CD 09 CE         [ 4]  554         call ONEP ; ( ca+ -- ) to get routne address 
      000232 CD 04 D9         [ 4]  555         call DUPP ; ( ca+ ca+ -- )
      000235 CD 04 32         [ 4]  556         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      000238 CD 03 B4         [ 4]  557         call DOLIT 
      00023B 05 86                  558         .word DOVAR ; if routine address is DOVAR then variable 
      00023D CD 07 75         [ 4]  559         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      000240 CD 03 E7         [ 4]  560         call QBRAN 
      000243 02 59                  561         .word FREEVAR4 
      000245 CD 03 B4         [ 4]  562         call DOLIT 
      000248 00 02                  563         .word 2 
      00024A CD 06 D4         [ 4]  564         call PLUS  ; ( ca+ 2 -- da ) da is data address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      00024D CD 04 32         [ 4]  565         call AT 
      000250 CD 06 27         [ 4]  566         call VPP   
      000253 CD 04 1B         [ 4]  567         call STORE 
      000256 CC 1B 34         [ 2]  568         jp UPDATVP 
      000259                        569 FREEVAR4: ; not variable
      000259 CC 04 CF         [ 2]  570         jp  DROP 
                                    571 
                                    572 ;    SEED ( n -- )
                                    573 ; Initialize PRNG seed with n 
      00025C 02 1B                  574         .word LINK 
                           00025E   575         LINK=. 
      00025E 04                     576         .byte 4 
      00025F 53 45 45 44            577         .ascii "SEED" 
      000263                        578 SEED:
      000263 90 93            [ 1]  579         ldw y,x 
      000265 1C 00 02         [ 2]  580         addw x,#CELLL
      000268 90 FE            [ 2]  581         ldw y,(y)
      00026A 90 9E            [ 1]  582         ld a,yh 
      00026C B7 36            [ 1]  583         ld SEEDX,a 
      00026E 90 9F            [ 1]  584         ld a,yl 
      000270 B7 38            [ 1]  585         ld SEEDY,a 
      000272 81               [ 4]  586         ret 
                                    587 
                                    588 ;    RANDOM ( u1 -- u2 )
                                    589 ; Pseudo random number betwen 0 and u1-1
      000273 02 5E                  590         .word LINK 
                           000275   591         LINK=.
      000275 06                     592         .byte 6
      000276 52 41 4E 44 4F 4D      593         .ascii "RANDOM" 
      00027C                        594 RANDOM:
                                    595 ;local variable 
                           000001   596         SPSAVE=1
                           000002   597         VSIZE=2 
      00027C 52 02            [ 2]  598         sub sp,#VSIZE
      00027E 1F 01            [ 2]  599         ldw (SPSAVE,sp),x  
                                    600 ; XTEMP=(SEEDX<<5)^SEEDX 
      000280 90 93            [ 1]  601         ldw y,x 
      000282 90 FE            [ 2]  602         ldw y,(y)
      000284 90 BF 24         [ 2]  603         ldw YTEMP,y 
      000287 BE 36            [ 2]  604 	ldw x,SEEDX 
      000289 58               [ 2]  605 	sllw x 
      00028A 58               [ 2]  606 	sllw x 
      00028B 58               [ 2]  607 	sllw x 
      00028C 58               [ 2]  608 	sllw x 
      00028D 58               [ 2]  609 	sllw x 
      00028E 9E               [ 1]  610 	ld a,xh 
      00028F B8 36            [ 1]  611 	xor a,SEEDX 
      000291 B7 22            [ 1]  612 	ld XTEMP,a 
      000293 9F               [ 1]  613 	ld a,xl 
      000294 B8 37            [ 1]  614 	xor a,SEEDX+1 
      000296 B7 23            [ 1]  615 	ld XTEMP+1,a 
                                    616 ; SEEDX=SEEDY 
      000298 BE 38            [ 2]  617 	ldw x,SEEDY 
      00029A BF 36            [ 2]  618 	ldw SEEDX,x  
                                    619 ; SEEDY=SEEDY^(SEEDY>>1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      00029C 54               [ 2]  620 	srlw x 
      00029D 9E               [ 1]  621 	ld a,xh 
      00029E B8 38            [ 1]  622 	xor a,SEEDY 
      0002A0 B7 38            [ 1]  623 	ld SEEDY,a  
      0002A2 9F               [ 1]  624 	ld a,xl 
      0002A3 B8 39            [ 1]  625 	xor a,SEEDY+1 
      0002A5 B7 39            [ 1]  626 	ld SEEDY+1,a 
                                    627 ; XTEMP>>3 
      0002A7 BE 22            [ 2]  628 	ldw x,XTEMP 
      0002A9 54               [ 2]  629 	srlw x 
      0002AA 54               [ 2]  630 	srlw x 
      0002AB 54               [ 2]  631 	srlw x 
                                    632 ; x=XTEMP^x 
      0002AC 9E               [ 1]  633 	ld a,xh 
      0002AD B8 22            [ 1]  634 	xor a,XTEMP 
      0002AF 95               [ 1]  635 	ld xh,a 
      0002B0 9F               [ 1]  636 	ld a,xl 
      0002B1 B8 23            [ 1]  637 	xor a,XTEMP+1  
      0002B3 97               [ 1]  638 	ld xl,a 
                                    639 ; SEEDY=x^SEEDY 
      0002B4 B8 39            [ 1]  640 	xor a,SEEDY+1
      0002B6 97               [ 1]  641 	ld xl,a 
      0002B7 9E               [ 1]  642 	ld a,xh 
      0002B8 B8 38            [ 1]  643 	xor a,SEEDY
      0002BA 95               [ 1]  644 	ld xh,a 
      0002BB BF 38            [ 2]  645 	ldw SEEDY,x 
                                    646 ; return SEEDY modulo YTEMP  
      0002BD 90 BE 24         [ 2]  647 	ldw y,YTEMP  
      0002C0 65               [ 2]  648 	divw x,y 
      0002C1 1E 01            [ 2]  649 	ldw x,(SPSAVE,sp)
      0002C3 FF               [ 2]  650         ldw (x),y 
      0002C4 5B 02            [ 2]  651         addw sp,#VSIZE 
      0002C6 81               [ 4]  652 	ret 
                                    653 
                                    654 
                                    655 ;;
                                    656 ;; get millisecond counter 
                                    657 ;; msec ( -- u )
                                    658 ;; Added by Picatout 2020-04-26
      0002C7 02 75                  659         .word LINK  
                           0002C9   660         LINK = . 
      0002C9 04                     661         .byte 4
      0002CA 4D 53 45 43            662         .ascii "MSEC"
      0002CE                        663 MSEC: 
      0002CE 1D 00 02         [ 2]  664         subw x,#CELLL 
      0002D1 90 BE 2E         [ 2]  665         ldw y,MS 
      0002D4 FF               [ 2]  666         ldw (x),y 
      0002D5 81               [ 4]  667         ret 
                                    668 
                                    669 ; suspend execution for u msec 
                                    670 ;  pause ( u -- )
      0002D6 02 C9                  671         .word LINK 
                           0002D8   672         LINK=.
      0002D8 05                     673         .byte 5 
      0002D9 50 41 55 53 45         674         .ascii "PAUSE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      0002DE                        675 PAUSE:
      0002DE 90 93            [ 1]  676         ldw y,x
      0002E0 90 FE            [ 2]  677         ldw y,(y)
      0002E2 72 B9 00 2E      [ 2]  678         addw y,MS 
      0002E6 8F               [10]  679 1$:     wfi  
      0002E7 90 B3 2E         [ 2]  680         cpw y,MS  
      0002EA 26 FA            [ 1]  681         jrne 1$        
      0002EC 1C 00 02         [ 2]  682         addw x,#CELLL 
      0002EF 81               [ 4]  683         ret 
                                    684 
                                    685 ; initialize count down timer 
                                    686 ;  TIMER ( u -- )  milliseconds 
      0002F0 02 D8                  687         .word LINK 
                           0002F2   688         LINK=.
      0002F2 05                     689         .byte 5 
      0002F3 54 49 4D 45 52         690         .ascii "TIMER" 
      0002F8                        691 TIMER:
      0002F8 90 93            [ 1]  692         ldw y,x
      0002FA 90 FE            [ 2]  693         ldw y,(y) 
      0002FC 90 BF 30         [ 2]  694         ldw CNTDWN,y
      0002FF 1C 00 02         [ 2]  695         addw x,#CELLL 
      000302 81               [ 4]  696         ret 
                                    697 
                                    698 ; check for TIMER exiparition 
                                    699 ;  TIMEOUT? ( -- 0|-1 )
      000303 02 F2                  700         .word LINK 
                           000305   701         LINK=. 
      000305 08                     702         .byte 8 
      000306 54 49 4D 45 4F 55 54   703         .ascii "TIMEOUT?"
             3F
      00030E                        704 TIMEOUTQ: 
      00030E 4F               [ 1]  705         clr a
      00030F 1D 00 02         [ 2]  706         subw x,#CELLL 
      000312 90 BE 30         [ 2]  707         ldw y,CNTDWN 
      000315 26 01            [ 1]  708         jrne 1$ 
      000317 43               [ 1]  709         cpl a 
      000318 E7 01            [ 1]  710 1$:     ld (1,x),a 
      00031A F7               [ 1]  711         ld (x),a 
      00031B 81               [ 4]  712         ret         
                                    713 
                                    714 ; reboot MCU 
                                    715 ; REBOOT ( -- )
      00031C 03 05                  716         .word LINK 
                           00031E   717         LINK=. 
      00031E 06                     718         .byte 6 
      00031F 52 45 42 4F 4F 54      719         .ascii "REBOOT"
      000325                        720 reboot:
      000325 CC 00 00         [ 2]  721         jp NonHandledInterrupt
                                    722 
                                    723 ; compile to flash memory 
                                    724 ; TO-FLASH ( -- )
      000328 03 1E                  725         .word LINK 
                           00032A   726         LINK=.
      00032A 08                     727         .byte 8
      00032B 54 4F 2D 46 4C 41 53   728         .ascii "TO-FLASH"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



             48
      000333                        729 TOFLASH:
      000333 CD 06 58         [ 4]  730         call RAMLAST 
      000336 CD 04 32         [ 4]  731         call AT 
      000339 CD 06 83         [ 4]  732         call QDUP 
      00033C CD 03 E7         [ 4]  733         call QBRAN
      00033F 03 62                  734         .word 1$
      000341 CD 12 BB         [ 4]  735         call ABORQ 
      000344 1D                     736         .byte 29
      000345 20 4E 6F 74 20 77 68   737         .ascii " Not while definitions in RAM"   
             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      000362 90 AE FF FF      [ 2]  738 1$:     ldw y,#-1 
      000366 90 BF 1E         [ 2]  739         ldw UTFLASH,y
      000369 81               [ 4]  740         ret 
                                    741 
                                    742 ; compile to RAM 
                                    743 ; TO-RAM ( -- )
      00036A 03 2A                  744         .word LINK 
                           00036C   745         LINK=.
      00036C 06                     746         .byte 6 
      00036D 54 4F 2D 52 41 4D      747         .ascii "TO-RAM"
      000373                        748 TORAM:
      000373 90 5F            [ 1]  749         clrw y 
      000375 90 BF 1E         [ 2]  750         ldw UTFLASH,y 
      000378 81               [ 4]  751         ret 
                                    752         
                                    753 
                                    754 ;; Device dependent I/O
                                    755 ;       ?RX     ( -- c T | F )
                                    756 ;         Return input byte and true, or false.
      000379 03 6C                  757         .word      LINK 
                           00037B   758 LINK	= .
      00037B 04                     759         .byte      4
      00037C 3F 4B 45 59            760         .ascii     "?KEY"
      000380                        761 QKEY:
      000380 90 5F            [ 1]  762         CLRW Y 
      000382 72 0B 52 30 0B   [ 2]  763         BTJF UART1_SR,#UART_SR_RXNE,INCH   ;check status
      000387 C6 52 31         [ 1]  764         LD    A,UART1_DR   ;get char in A
      00038A 1D 00 02         [ 2]  765 	SUBW	X,#2
      00038D E7 01            [ 1]  766         LD     (1,X),A
      00038F 7F               [ 1]  767 	CLR	(X)
      000390 90 53            [ 2]  768         CPLW     Y
      000392                        769 INCH:
      000392 1D 00 02         [ 2]  770 	SUBW	X,#2
      000395 FF               [ 2]  771         LDW     (X),Y
      000396 81               [ 4]  772         RET
                                    773 
                                    774 ;       TX!     ( c -- )
                                    775 ;       Send character c to  output device.
      000397 03 7B                  776         .word      LINK
                           000399   777 LINK	= .
      000399 04                     778         .byte      4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      00039A 45 4D 49 54            779         .ascii     "EMIT"
      00039E                        780 EMIT:
      00039E E6 01            [ 1]  781         LD     A,(1,X)
      0003A0 1C 00 02         [ 2]  782 	ADDW	X,#2
      0003A3 72 0F 52 30 FB   [ 2]  783 OUTPUT: BTJF UART1_SR,#UART_SR_TXE,OUTPUT  ;loop until tdre
      0003A8 C7 52 31         [ 1]  784         LD    UART1_DR,A   ;send A
      0003AB 81               [ 4]  785         RET
                                    786 
                                    787 ;; The kernel
                                    788 
                                    789 ;       doLIT   ( -- w )
                                    790 ;       Push an inline literal.
      0003AC 03 99                  791         .word      LINK
                           0003AE   792 LINK	= 	.
      0003AE 45                     793 	.byte      COMPO+5
      0003AF 44 4F 4C 49 54         794         .ascii     "DOLIT"
      0003B4                        795 DOLIT:
      0003B4 1D 00 02         [ 2]  796 	SUBW X,#2
      0003B7 16 01            [ 2]  797         ldw y,(1,sp)
      0003B9 90 FE            [ 2]  798         ldw y,(y)
      0003BB FF               [ 2]  799         ldw (x),y
      0003BC 90 85            [ 2]  800         popw y 
      0003BE 90 EC 02         [ 2]  801         jp (2,y)
                                    802 
                                    803 ;       next    ( -- )
                                    804 ;       Code for  single index loop.
      0003C1 03 AE                  805         .word      LINK
                           0003C3   806 LINK	= 	.
      0003C3 44                     807 	.byte      COMPO+4
      0003C4 6E 65 78 74            808         .ascii     "next"
      0003C8                        809 DONXT:
      0003C8 16 03            [ 2]  810 	LDW Y,(3,SP)
      0003CA 90 5A            [ 2]  811 	DECW Y
      0003CC 2A 07            [ 1]  812 	JRPL NEX1 ; jump if N=0
      0003CE 90 85            [ 2]  813 	POPW Y
      0003D0 5B 02            [ 2]  814         addw sp,#2
      0003D2 90 EC 02         [ 2]  815         JP (2,Y)
      0003D5                        816 NEX1:
      0003D5 17 03            [ 2]  817         LDW (3,SP),Y
      0003D7 90 85            [ 2]  818         POPW Y
      0003D9 90 FE            [ 2]  819 	LDW Y,(Y)
      0003DB 90 FC            [ 2]  820 	JP (Y)
                                    821 
                                    822 ;       ?branch ( f -- )
                                    823 ;       Branch if flag is zero.
      0003DD 03 C3                  824         .word      LINK
                           0003DF   825 LINK	= 	.
      0003DF 47                     826 	.byte      COMPO+7
      0003E0 3F 42 52 41 4E 43 48   827         .ascii     "?BRANCH"
      0003E7                        828 QBRAN:	
      0003E7 90 93            [ 1]  829         LDW Y,X
      0003E9 1C 00 02         [ 2]  830 	ADDW X,#2
      0003EC 90 FE            [ 2]  831 	LDW Y,(Y)
      0003EE 27 0E            [ 1]  832         JREQ     BRAN
      0003F0 90 85            [ 2]  833 	POPW Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      0003F2 90 EC 02         [ 2]  834 	JP (2,Y)
                                    835         
                                    836 ;       branch  ( -- )
                                    837 ;       Branch to an inline address.
      0003F5 03 DF                  838         .word      LINK
                           0003F7   839 LINK	= 	.
      0003F7 46                     840 	.byte      COMPO+6
      0003F8 42 52 41 4E 43 48      841         .ascii     "BRANCH"
      0003FE                        842 BRAN:
      0003FE 90 85            [ 2]  843         POPW Y
      000400 90 FE            [ 2]  844 	LDW Y,(Y)
      000402 90 FC            [ 2]  845         JP     (Y)
                                    846 
                                    847 ;       EXECUTE ( ca -- )
                                    848 ;       Execute  word at ca.
      000404 03 F7                  849         .word      LINK
                           000406   850 LINK	= 	.
      000406 07                     851         .byte       7
      000407 45 58 45 43 55 54 45   852         .ascii     "EXECUTE"
      00040E                        853 EXECU:
      00040E 90 93            [ 1]  854         LDW Y,X
      000410 1C 00 02         [ 2]  855 	ADDW X,#2
      000413 90 FE            [ 2]  856 	LDW  Y,(Y)
      000415 90 FC            [ 2]  857         JP   (Y)
                                    858 
                           000001   859 OPTIMIZE = 1
                           000001   860 .if OPTIMIZE 
                                    861 ; remplacement de CALL EXIT par 
                                    862 ; le opcode de RET.
                                    863 ; Voir modification au code de ";"
                           000000   864 .else 
                                    865 ;       EXIT    ( -- )
                                    866 ;       Terminate a colon definition.
                                    867         .word      LINK
                                    868 LINK = .
                                    869         .byte      4
                                    870         .ascii     "EXIT"
                                    871 EXIT:
                                    872         POPW Y
                                    873         RET
                                    874 .endif 
                                    875 
                                    876 ;       !       ( w a -- )
                                    877 ;       Pop  data stack to memory.
      000417 04 06                  878         .word      LINK
                           000419   879 LINK = .
      000419 01                     880         .byte      1
      00041A 21                     881         .ascii     "!"
      00041B                        882 STORE:
      00041B 90 93            [ 1]  883         LDW Y,X
      00041D 90 FE            [ 2]  884         LDW Y,(Y)    ;Y=a
      00041F 90 BF 24         [ 2]  885         LDW YTEMP,Y
      000422 90 93            [ 1]  886         LDW Y,X
      000424 90 EE 02         [ 2]  887         LDW Y,(2,Y)
      000427 91 CF 24         [ 5]  888         LDW [YTEMP],Y ;store w at a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      00042A 1C 00 04         [ 2]  889         ADDW X,#4 ; DDROP 
      00042D 81               [ 4]  890         RET     
                                    891 
                                    892 ;       @       ( a -- w )
                                    893 ;       Push memory location to stack.
      00042E 04 19                  894         .word      LINK
                           000430   895 LINK	= 	.
      000430 01                     896         .byte    1
      000431 40                     897         .ascii	"@"
      000432                        898 AT:
      000432 90 93            [ 1]  899         LDW Y,X     ;Y = a
      000434 90 FE            [ 2]  900         LDW Y,(Y)   ; address 
      000436 90 FE            [ 2]  901         LDW Y,(Y)   ; value 
      000438 FF               [ 2]  902         LDW (X),Y ;w = @Y
      000439 81               [ 4]  903         RET     
                                    904 
                                    905 ;       C!      ( c b -- )
                                    906 ;       Pop  data stack to byte memory.
      00043A 04 30                  907         .word      LINK
                           00043C   908 LINK	= .
      00043C 02                     909         .byte      2
      00043D 43 21                  910         .ascii     "C!"
      00043F                        911 CSTOR:
      00043F 90 93            [ 1]  912         LDW Y,X
      000441 90 FE            [ 2]  913 	LDW Y,(Y)    ;Y=b
      000443 E6 03            [ 1]  914         LD A,(3,X)    ;D = c
      000445 90 F7            [ 1]  915         LD  (Y),A     ;store c at b
      000447 1C 00 04         [ 2]  916 	ADDW X,#4 ; DDROP 
      00044A 81               [ 4]  917         RET     
                                    918 
                                    919 ;       C@      ( b -- c )
                                    920 ;       Push byte in memory to  stack.
      00044B 04 3C                  921         .word      LINK
                           00044D   922 LINK	= 	.
      00044D 02                     923         .byte      2
      00044E 43 40                  924         .ascii     "C@"
      000450                        925 CAT:
      000450 90 93            [ 1]  926         LDW Y,X     ;Y=b
      000452 90 FE            [ 2]  927         LDW Y,(Y)
      000454 90 F6            [ 1]  928         LD A,(Y)
      000456 E7 01            [ 1]  929         LD (1,X),A
      000458 7F               [ 1]  930         CLR (X)
      000459 81               [ 4]  931         RET     
                                    932 
                                    933 ;       RP@     ( -- a )
                                    934 ;       Push current RP to data stack.
      00045A 04 4D                  935         .word      LINK
                           00045C   936 LINK	= .
      00045C 03                     937         .byte      3
      00045D 52 50 40               938         .ascii     "RP@"
      000460                        939 RPAT:
      000460 90 96            [ 1]  940         LDW Y,SP    ;save return addr
      000462 1D 00 02         [ 2]  941         SUBW X,#2
      000465 FF               [ 2]  942         LDW (X),Y
      000466 81               [ 4]  943         RET     
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                                    944 
                                    945 ;       RP!     ( a -- )
                                    946 ;       Set  return stack pointer.
      000467 04 5C                  947         .word      LINK
                           000469   948 LINK	= 	. 
      000469 43                     949 	.byte      COMPO+3
      00046A 52 50 21               950         .ascii     "RP!"
      00046D                        951 RPSTO:
      00046D 90 85            [ 2]  952         POPW Y
      00046F 90 BF 24         [ 2]  953         LDW YTEMP,Y
      000472 90 93            [ 1]  954         LDW Y,X
      000474 90 FE            [ 2]  955         LDW Y,(Y)
      000476 90 94            [ 1]  956         LDW SP,Y
      000478 1C 00 02         [ 2]  957         ADDW x,#CELLL ; a was not dropped, Picatout 2020-05-24
      00047B 92 CC 24         [ 5]  958         JP [YTEMP]
                                    959 
                                    960 ;       R>      ( -- w )
                                    961 ;       Pop return stack to data stack.
      00047E 04 69                  962         .word      LINK
                           000480   963 LINK	= 	. 
      000480 42                     964 	.byte      COMPO+2
      000481 52 3E                  965         .ascii     "R>"
      000483                        966 RFROM:
      000483 90 85            [ 2]  967         POPW Y    ;save return addr
      000485 90 BF 24         [ 2]  968         LDW YTEMP,Y
      000488 90 85            [ 2]  969         POPW Y
      00048A 1D 00 02         [ 2]  970         SUBW X,#2
      00048D FF               [ 2]  971         LDW (X),Y
      00048E 92 CC 24         [ 5]  972         JP [YTEMP]
                                    973 
                                    974 ;       R@      ( -- w )
                                    975 ;       Copy top of return stack to stack.
      000491 04 80                  976         .word      LINK
                           000493   977 LINK	= 	. 
      000493 02                     978         .byte      2
      000494 52 40                  979         .ascii     "R@"
      000496                        980 RAT:
      000496 16 03            [ 2]  981         ldw y,(3,sp)
      000498 1D 00 02         [ 2]  982         subw x,#CELLL 
      00049B FF               [ 2]  983         ldw (x),y 
      00049C 81               [ 4]  984         ret 
                                    985 
                                    986 ;       >R      ( w -- )
                                    987 ;       Push data stack to return stack.
      00049D 04 93                  988         .word      LINK
                           00049F   989 LINK	= 	. 
      00049F 42                     990 	.byte      COMPO+2
      0004A0 3E 52                  991         .ascii     ">R"
      0004A2                        992 TOR:
      0004A2 90 85            [ 2]  993         POPW Y    ;save return addr
      0004A4 90 BF 24         [ 2]  994         LDW YTEMP,Y
      0004A7 90 93            [ 1]  995         LDW Y,X
      0004A9 90 FE            [ 2]  996         LDW Y,(Y)
      0004AB 90 89            [ 2]  997         PUSHW Y    ;restore return addr
      0004AD 1C 00 02         [ 2]  998         ADDW X,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      0004B0 92 CC 24         [ 5]  999         JP [YTEMP]
                                   1000 
                                   1001 ;       SP@     ( -- a )
                                   1002 ;       Push current stack pointer.
      0004B3 04 9F                 1003         .word      LINK
                           0004B5  1004 LINK	= 	. 
      0004B5 03                    1005         .byte      3
      0004B6 53 50 40              1006         .ascii     "SP@"
      0004B9                       1007 SPAT:
      0004B9 90 93            [ 1] 1008 	LDW Y,X
      0004BB 1D 00 02         [ 2] 1009         SUBW X,#2
      0004BE FF               [ 2] 1010 	LDW (X),Y
      0004BF 81               [ 4] 1011         RET     
                                   1012 
                                   1013 ;       SP!     ( a -- )
                                   1014 ;       Set  data stack pointer.
      0004C0 04 B5                 1015         .word      LINK
                           0004C2  1016 LINK	= 	. 
      0004C2 03                    1017         .byte      3
      0004C3 53 50 21              1018         .ascii     "SP!"
      0004C6                       1019 SPSTO:
      0004C6 FE               [ 2] 1020         LDW     X,(X)     ;X = a
      0004C7 81               [ 4] 1021         RET     
                                   1022 
                                   1023 ;       DROP    ( w -- )
                                   1024 ;       Discard top stack item.
      0004C8 04 C2                 1025         .word      LINK
                           0004CA  1026 LINK	= 	. 
      0004CA 04                    1027         .byte      4
      0004CB 44 52 4F 50           1028         .ascii     "DROP"
      0004CF                       1029 DROP:
      0004CF 1C 00 02         [ 2] 1030         ADDW X,#2     
      0004D2 81               [ 4] 1031         RET     
                                   1032 
                                   1033 ;       DUP     ( w -- w w )
                                   1034 ;       Duplicate  top stack item.
      0004D3 04 CA                 1035         .word      LINK
                           0004D5  1036 LINK	= 	. 
      0004D5 03                    1037         .byte      3
      0004D6 44 55 50              1038         .ascii     "DUP"
      0004D9                       1039 DUPP:
      0004D9 90 93            [ 1] 1040 	LDW Y,X
      0004DB 1D 00 02         [ 2] 1041         SUBW X,#2
      0004DE 90 FE            [ 2] 1042 	LDW Y,(Y)
      0004E0 FF               [ 2] 1043 	LDW (X),Y
      0004E1 81               [ 4] 1044         RET     
                                   1045 
                                   1046 ;       SWAP    ( w1 w2 -- w2 w1 )
                                   1047 ;       Exchange top two stack items.
      0004E2 04 D5                 1048         .word      LINK
                           0004E4  1049 LINK	= 	. 
      0004E4 04                    1050         .byte      4
      0004E5 53 57 41 50           1051         .ascii     "SWAP"
      0004E9                       1052 SWAPP:
      0004E9 90 93            [ 1] 1053         LDW Y,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      0004EB 90 FE            [ 2] 1054         LDW Y,(Y)
      0004ED 90 BF 24         [ 2] 1055         LDW YTEMP,Y
      0004F0 90 93            [ 1] 1056         LDW Y,X
      0004F2 90 EE 02         [ 2] 1057         LDW Y,(2,Y)
      0004F5 FF               [ 2] 1058         LDW (X),Y
      0004F6 90 BE 24         [ 2] 1059         LDW Y,YTEMP
      0004F9 EF 02            [ 2] 1060         LDW (2,X),Y
      0004FB 81               [ 4] 1061         RET     
                                   1062 
                                   1063 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                   1064 ;       Copy second stack item to top.
      0004FC 04 E4                 1065         .word      LINK
                           0004FE  1066 LINK	= . 
      0004FE 04                    1067         .byte      4
      0004FF 4F 56 45 52           1068         .ascii     "OVER"
      000503                       1069 OVER:
      000503 1D 00 02         [ 2] 1070         SUBW X,#2
      000506 90 93            [ 1] 1071         LDW Y,X
      000508 90 EE 04         [ 2] 1072         LDW Y,(4,Y)
      00050B FF               [ 2] 1073         LDW (X),Y
      00050C 81               [ 4] 1074         RET     
                                   1075 
                                   1076 ;       0<      ( n -- t )
                                   1077 ;       Return true if n is negative.
      00050D 04 FE                 1078         .word      LINK
                           00050F  1079 LINK	= . 
      00050F 02                    1080         .byte      2
      000510 30 3C                 1081         .ascii     "0<"
      000512                       1082 ZLESS:
      000512 A6 FF            [ 1] 1083         LD A,#0xFF
      000514 90 93            [ 1] 1084         LDW Y,X
      000516 90 FE            [ 2] 1085         LDW Y,(Y)
      000518 2B 01            [ 1] 1086         JRMI     ZL1
      00051A 4F               [ 1] 1087         CLR A   ;false
      00051B F7               [ 1] 1088 ZL1:    LD     (X),A
      00051C E7 01            [ 1] 1089         LD (1,X),A
      00051E 81               [ 4] 1090 	RET     
                                   1091 
                                   1092 ;       AND     ( w w -- w )
                                   1093 ;       Bitwise AND.
      00051F 05 0F                 1094         .word      LINK
                           000521  1095 LINK	= . 
      000521 03                    1096         .byte      3
      000522 41 4E 44              1097         .ascii     "AND"
      000525                       1098 ANDD:
      000525 F6               [ 1] 1099         LD  A,(X)    ;D=w
      000526 E4 02            [ 1] 1100         AND A,(2,X)
      000528 E7 02            [ 1] 1101         LD (2,X),A
      00052A E6 01            [ 1] 1102         LD A,(1,X)
      00052C E4 03            [ 1] 1103         AND A,(3,X)
      00052E E7 03            [ 1] 1104         LD (3,X),A
      000530 1C 00 02         [ 2] 1105         ADDW X,#2
      000533 81               [ 4] 1106         RET
                                   1107 
                                   1108 ;       OR      ( w w -- w )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                   1109 ;       Bitwise inclusive OR.
      000534 05 21                 1110         .word      LINK
                           000536  1111 LINK = . 
      000536 02                    1112         .byte      2
      000537 4F 52                 1113         .ascii     "OR"
      000539                       1114 ORR:
      000539 F6               [ 1] 1115         LD A,(X)    ;D=w
      00053A EA 02            [ 1] 1116         OR A,(2,X)
      00053C E7 02            [ 1] 1117         LD (2,X),A
      00053E E6 01            [ 1] 1118         LD A,(1,X)
      000540 EA 03            [ 1] 1119         OR A,(3,X)
      000542 E7 03            [ 1] 1120         LD (3,X),A
      000544 1C 00 02         [ 2] 1121         ADDW X,#2
      000547 81               [ 4] 1122         RET
                                   1123 
                                   1124 ;       XOR     ( w w -- w )
                                   1125 ;       Bitwise exclusive OR.
      000548 05 36                 1126         .word      LINK
                           00054A  1127 LINK	= . 
      00054A 03                    1128         .byte      3
      00054B 58 4F 52              1129         .ascii     "XOR"
      00054E                       1130 XORR:
      00054E F6               [ 1] 1131         LD A,(X)    ;D=w
      00054F E8 02            [ 1] 1132         XOR A,(2,X)
      000551 E7 02            [ 1] 1133         LD (2,X),A
      000553 E6 01            [ 1] 1134         LD A,(1,X)
      000555 E8 03            [ 1] 1135         XOR A,(3,X)
      000557 E7 03            [ 1] 1136         LD (3,X),A
      000559 1C 00 02         [ 2] 1137         ADDW X,#2
      00055C 81               [ 4] 1138         RET
                                   1139 
                                   1140 ;       UM+     ( u u -- udsum )
                                   1141 ;       Add two unsigned single
                                   1142 ;       and return a double sum.
      00055D 05 4A                 1143         .word      LINK
                           00055F  1144 LINK	= . 
      00055F 03                    1145         .byte      3
      000560 55 4D 2B              1146         .ascii     "UM+"
      000563                       1147 UPLUS:
      000563 A6 01            [ 1] 1148         LD A,#1
      000565 90 93            [ 1] 1149         LDW Y,X
      000567 90 EE 02         [ 2] 1150         LDW Y,(2,Y)
      00056A 90 BF 24         [ 2] 1151         LDW YTEMP,Y
      00056D 90 93            [ 1] 1152         LDW Y,X
      00056F 90 FE            [ 2] 1153         LDW Y,(Y)
      000571 72 B9 00 24      [ 2] 1154         ADDW Y,YTEMP
      000575 EF 02            [ 2] 1155         LDW (2,X),Y
      000577 25 01            [ 1] 1156         JRC     UPL1
      000579 4F               [ 1] 1157         CLR A
      00057A E7 01            [ 1] 1158 UPL1:   LD     (1,X),A
      00057C 7F               [ 1] 1159         CLR (X)
      00057D 81               [ 4] 1160         RET
                                   1161 
                                   1162 ;; System and user variables
                                   1163 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                                   1164 ;       doVAR   ( -- a )
                                   1165 ;       Code for VARIABLE and CREATE.
      00057E 05 5F                 1166         .word      LINK
                           000580  1167 LINK	= . 
      000580 45                    1168 	.byte      COMPO+5
      000581 44 4F 56 41 52        1169         .ascii     "DOVAR"
      000586                       1170 DOVAR:
      000586 1D 00 02         [ 2] 1171 	SUBW X,#2
      000589 90 85            [ 2] 1172         POPW Y    ;get return addr (pfa)
      00058B 90 FE            [ 2] 1173         LDW Y,(Y) ; indirect address 
      00058D FF               [ 2] 1174         LDW (X),Y    ;push on stack
      00058E 81               [ 4] 1175         RET     ;go to RET of EXEC
                                   1176 
                                   1177 ;       BASE    ( -- a )
                                   1178 ;       Radix base for numeric I/O.
      00058F 05 80                 1179         .word      LINK        
                           000591  1180 LINK = . 
      000591 04                    1181         .byte      4
      000592 42 41 53 45           1182         .ascii     "BASE"
      000596                       1183 BASE:
      000596 90 AE 00 06      [ 2] 1184 	LDW Y,#UBASE 
      00059A 1D 00 02         [ 2] 1185 	SUBW X,#2
      00059D FF               [ 2] 1186         LDW (X),Y
      00059E 81               [ 4] 1187         RET
                                   1188 
                                   1189 ;       tmp     ( -- a )
                                   1190 ;       A temporary storage.
      00059F 05 91                 1191         .word      LINK
                                   1192         
                           0005A1  1193 LINK = . 
      0005A1 03                    1194 	.byte      3
      0005A2 54 4D 50              1195         .ascii     "TMP"
      0005A5                       1196 TEMP:
      0005A5 90 AE 00 08      [ 2] 1197 	LDW Y,#UTMP
      0005A9 1D 00 02         [ 2] 1198 	SUBW X,#2
      0005AC FF               [ 2] 1199         LDW (X),Y
      0005AD 81               [ 4] 1200         RET
                                   1201 
                                   1202 ;       >IN     ( -- a )
                                   1203 ;        Hold parsing pointer.
      0005AE 05 A1                 1204         .word      LINK
                           0005B0  1205 LINK = . 
      0005B0 03                    1206         .byte      3
      0005B1 3E 49 4E              1207         .ascii    ">IN"
      0005B4                       1208 INN:
      0005B4 90 AE 00 0A      [ 2] 1209 	LDW Y,#UINN 
      0005B8 1D 00 02         [ 2] 1210 	SUBW X,#2
      0005BB FF               [ 2] 1211         LDW (X),Y
      0005BC 81               [ 4] 1212         RET
                                   1213 
                                   1214 ;       #TIB    ( -- a )
                                   1215 ;       Count in terminal input buffer.
      0005BD 05 B0                 1216         .word      LINK
                           0005BF  1217 LINK = . 
      0005BF 04                    1218         .byte      4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      0005C0 23 54 49 42           1219         .ascii     "#TIB"
      0005C4                       1220 NTIB:
      0005C4 90 AE 00 0C      [ 2] 1221 	LDW Y,#UCTIB 
      0005C8 1D 00 02         [ 2] 1222 	SUBW X,#2
      0005CB FF               [ 2] 1223         LDW (X),Y
      0005CC 81               [ 4] 1224         RET
                                   1225 
                                   1226 ;       TBUF ( -- a )
                                   1227 ;       address of 128 bytes transaction buffer 
      0005CD 05 BF                 1228         .word LINK 
                           0005CF  1229         LINK=.
      0005CF 04                    1230         .byte 4 
      0005D0 54 42 55 46           1231         .ascii "TBUF"
      0005D4                       1232 TBUF:
      0005D4 90 AE 16 80      [ 2] 1233         ldw y,#ROWBUFF
      0005D8 1D 00 02         [ 2] 1234         subw x,#CELLL
      0005DB FF               [ 2] 1235         ldw (x),y 
      0005DC 81               [ 4] 1236         ret 
                                   1237 
                                   1238 ; systeme variable 
                                   1239 ; compilation destination 
                                   1240 ; TFLASH ( -- A )
      0005DD 05 CF                 1241         .word LINK 
                           0005DF  1242         LINK=.
      0005DF 06                    1243         .byte 6 
      0005E0 54 46 4C 41 53 48     1244         .ascii "TFLASH"         
      0005E6                       1245 TFLASH:
      0005E6 1D 00 02         [ 2] 1246         subw x,#CELLL 
      0005E9 90 AE 00 1E      [ 2] 1247         ldw y,#UTFLASH
      0005ED FF               [ 2] 1248         ldw (x),y 
      0005EE 81               [ 4] 1249         ret 
                                   1250 
                                   1251 ;       "EVAL   ( -- a )
                                   1252 ;       Execution vector of EVAL.
      0005EF 05 DF                 1253         .word      LINK
                           0005F1  1254 LINK = . 
      0005F1 05                    1255         .byte      5
      0005F2 27 45 56 41 4C        1256         .ascii     "'EVAL"
      0005F7                       1257 TEVAL:
      0005F7 90 AE 00 10      [ 2] 1258 	LDW Y,#UINTER 
      0005FB 1D 00 02         [ 2] 1259 	SUBW X,#2
      0005FE FF               [ 2] 1260         LDW (X),Y
      0005FF 81               [ 4] 1261         RET
                                   1262 
                                   1263 ;       HLD     ( -- a )
                                   1264 ;       Hold a pointer of output string.
      000600 05 F1                 1265         .word      LINK
                           000602  1266 LINK = . 
      000602 03                    1267         .byte      3
      000603 48 4C 44              1268         .ascii     "HLD"
      000606                       1269 HLD:
      000606 90 AE 00 12      [ 2] 1270 	LDW Y,#UHLD 
      00060A 1D 00 02         [ 2] 1271 	SUBW X,#2
      00060D FF               [ 2] 1272         LDW (X),Y
      00060E 81               [ 4] 1273         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                                   1274 
                                   1275 ;       CONTEXT ( -- a )
                                   1276 ;       Start vocabulary search.
      00060F 06 02                 1277         .word      LINK
                           000611  1278 LINK = . 
      000611 07                    1279         .byte      7
      000612 43 4F 4E 54 45 58 54  1280         .ascii     "CONTEXT"
      000619                       1281 CNTXT:
      000619 90 AE 00 14      [ 2] 1282 	LDW Y,#UCNTXT
      00061D 1D 00 02         [ 2] 1283 	SUBW X,#2
      000620 FF               [ 2] 1284         LDW (X),Y
      000621 81               [ 4] 1285         RET
                                   1286 
                                   1287 ;       VP      ( -- a )
                                   1288 ;       Point to top of variables
      000622 06 11                 1289         .word      LINK
                           000624  1290 LINK = . 
      000624 02                    1291         .byte      2
      000625 56 50                 1292         .ascii     "VP"
      000627                       1293 VPP:
      000627 90 AE 00 16      [ 2] 1294 	LDW Y,#UVP 
      00062B 1D 00 02         [ 2] 1295 	SUBW X,#2
      00062E FF               [ 2] 1296         LDW (X),Y
      00062F 81               [ 4] 1297         RET
                                   1298 
                                   1299 ;       CP    ( -- a )
                                   1300 ;       Pointer to top of FLASH 
      000630 06 24                 1301         .word LINK 
                           000632  1302         LINK=.
      000632 02                    1303         .byte 2 
      000633 43 50                 1304         .ascii "CP"
      000635                       1305 CPP: 
      000635 90 AE 00 18      [ 2] 1306         ldw y,#UCP 
      000639 1D 00 02         [ 2] 1307         subw x,#CELLL 
      00063C FF               [ 2] 1308         ldw (x),y 
      00063D 81               [ 4] 1309         ret                
                                   1310 
                                   1311 ;       LAST    ( -- a )
                                   1312 ;       Point to last name in dictionary.
      00063E 06 32                 1313         .word      LINK
                           000640  1314 LINK = . 
      000640 04                    1315         .byte      4
      000641 4C 41 53 54           1316         .ascii     "LAST"
      000645                       1317 LAST:
      000645 90 AE 00 1A      [ 2] 1318 	LDW Y,#ULAST 
      000649 1D 00 02         [ 2] 1319 	SUBW X,#2
      00064C FF               [ 2] 1320         LDW (X),Y
      00064D 81               [ 4] 1321         RET
                                   1322 
                                   1323 ; address of system variable URLAST 
                                   1324 ;       RAMLAST ( -- a )
                                   1325 ; RAM dictionary context 
      00064E 06 40                 1326         .word LINK 
                           000650  1327         LINK=. 
      000650 07                    1328         .byte 7  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      000651 52 41 4D 4C 41 53 54  1329         .ascii "RAMLAST" 
      000658                       1330 RAMLAST: 
      000658 90 AE 00 20      [ 2] 1331         ldw y,#URLAST 
      00065C 1D 00 02         [ 2] 1332         subw x,#CELLL 
      00065F FF               [ 2] 1333         ldw (x),y 
      000660 81               [ 4] 1334         ret 
                                   1335 
                                   1336 ; OFFSET ( -- a )
                                   1337 ; address of system variable OFFSET 
      000661 06 50                 1338         .word LINK 
                           000663  1339         LINK=.
      000663 06                    1340         .byte 6
      000664 4F 46 46 53 45 54     1341         .ascii "OFFSET" 
      00066A                       1342 OFFSET: 
      00066A 1D 00 02         [ 2] 1343         subw x,#CELLL
      00066D 90 AE 00 1C      [ 2] 1344         ldw y,#UOFFSET 
      000671 FF               [ 2] 1345         ldw (x),y 
      000672 81               [ 4] 1346         ret 
                                   1347 
                                   1348 ; adjust jump address adding OFFSET
                                   1349 ; ADR-ADJ ( a -- a+offset )
      000673                       1350 ADRADJ: 
      000673 CD 06 6A         [ 4] 1351         call OFFSET 
      000676 CD 04 32         [ 4] 1352         call AT 
      000679 CC 06 D4         [ 2] 1353         jp PLUS 
                                   1354 
                                   1355 
                                   1356 ;; Common functions
                                   1357 
                                   1358 ;       ?DUP    ( w -- w w | 0 )
                                   1359 ;       Dup tos if its is not zero.
      00067C 06 63                 1360         .word      LINK
                           00067E  1361 LINK = . 
      00067E 04                    1362         .byte      4
      00067F 3F 44 55 50           1363         .ascii     "?DUP"
      000683                       1364 QDUP:
      000683 90 93            [ 1] 1365         LDW Y,X
      000685 90 FE            [ 2] 1366 	LDW Y,(Y)
      000687 27 04            [ 1] 1367         JREQ     QDUP1
      000689 1D 00 02         [ 2] 1368 	SUBW X,#2
      00068C FF               [ 2] 1369         LDW (X),Y
      00068D 81               [ 4] 1370 QDUP1:  RET
                                   1371 
                                   1372 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1373 ;       Rot 3rd item to top.
      00068E 06 7E                 1374         .word      LINK
                           000690  1375 LINK = . 
      000690 03                    1376         .byte      3
      000691 52 4F 54              1377         .ascii     "ROT"
      000694                       1378 ROT:
      000694 90 93            [ 1] 1379         ldw y,x 
      000696 90 FE            [ 2] 1380         ldw y,(y)
      000698 90 89            [ 2] 1381         pushw y 
      00069A 90 93            [ 1] 1382         ldw y,x 
      00069C 90 EE 04         [ 2] 1383         ldw y,(4,y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      00069F FF               [ 2] 1384         ldw (x),y 
      0006A0 90 93            [ 1] 1385         ldw y,x 
      0006A2 90 EE 02         [ 2] 1386         ldw y,(2,y)
      0006A5 EF 04            [ 2] 1387         ldw (4,x),y 
      0006A7 90 85            [ 2] 1388         popw y 
      0006A9 EF 02            [ 2] 1389         ldw (2,x),y
      0006AB 81               [ 4] 1390         ret 
                                   1391 
                                   1392 ;       2DROP   ( w w -- )
                                   1393 ;       Discard two items on stack.
      0006AC 06 90                 1394         .word      LINK
                           0006AE  1395 LINK = . 
      0006AE 05                    1396         .byte      5
      0006AF 32 44 52 4F 50        1397         .ascii     "2DROP"
      0006B4                       1398 DDROP:
      0006B4 1C 00 04         [ 2] 1399         ADDW X,#4
      0006B7 81               [ 4] 1400         RET
                                   1401 
                                   1402 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1403 ;       Duplicate top two items.
      0006B8 06 AE                 1404         .word      LINK
                           0006BA  1405 LINK = . 
      0006BA 04                    1406         .byte      4
      0006BB 32 44 55 50           1407         .ascii     "2DUP"
      0006BF                       1408 DDUP:
      0006BF 1D 00 04         [ 2] 1409         SUBW X,#4
      0006C2 90 93            [ 1] 1410         LDW Y,X
      0006C4 90 EE 06         [ 2] 1411         LDW Y,(6,Y)
      0006C7 EF 02            [ 2] 1412         LDW (2,X),Y
      0006C9 90 93            [ 1] 1413         LDW Y,X
      0006CB 90 EE 04         [ 2] 1414         LDW Y,(4,Y)
      0006CE FF               [ 2] 1415         LDW (X),Y
      0006CF 81               [ 4] 1416         RET
                                   1417 
                                   1418 ;       +       ( w w -- sum )
                                   1419 ;       Add top two items.
      0006D0 06 BA                 1420         .word      LINK
                           0006D2  1421 LINK = . 
      0006D2 01                    1422         .byte      1
      0006D3 2B                    1423         .ascii     "+"
      0006D4                       1424 PLUS:
      0006D4 90 93            [ 1] 1425         LDW Y,X
      0006D6 90 FE            [ 2] 1426         LDW Y,(Y)
      0006D8 90 BF 24         [ 2] 1427         LDW YTEMP,Y
      0006DB 1C 00 02         [ 2] 1428         ADDW X,#2
      0006DE 90 93            [ 1] 1429         LDW Y,X
      0006E0 90 FE            [ 2] 1430         LDW Y,(Y)
      0006E2 72 B9 00 24      [ 2] 1431         ADDW Y,YTEMP
      0006E6 FF               [ 2] 1432         LDW (X),Y
      0006E7 81               [ 4] 1433         RET
                                   1434 
                                   1435 ;       NOT     ( w -- w )
                                   1436 ;       One's complement of tos.
      0006E8 06 D2                 1437         .word      LINK
                           0006EA  1438 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      0006EA 03                    1439         .byte      3
      0006EB 4E 4F 54              1440         .ascii     "NOT"
      0006EE                       1441 INVER:
      0006EE 90 93            [ 1] 1442         LDW Y,X
      0006F0 90 FE            [ 2] 1443         LDW Y,(Y)
      0006F2 90 53            [ 2] 1444         CPLW Y
      0006F4 FF               [ 2] 1445         LDW (X),Y
      0006F5 81               [ 4] 1446         RET
                                   1447 
                                   1448 ;       NEGATE  ( n -- -n )
                                   1449 ;       Two's complement of tos.
      0006F6 06 EA                 1450         .word      LINK
                           0006F8  1451 LINK = . 
      0006F8 06                    1452         .byte      6
      0006F9 4E 45 47 41 54 45     1453         .ascii     "NEGATE"
      0006FF                       1454 NEGAT:
      0006FF 90 93            [ 1] 1455         LDW Y,X
      000701 90 FE            [ 2] 1456         LDW Y,(Y)
      000703 90 50            [ 2] 1457         NEGW Y
      000705 FF               [ 2] 1458         LDW (X),Y
      000706 81               [ 4] 1459         RET
                                   1460 
                                   1461 ;       DNEGATE ( d -- -d )
                                   1462 ;       Two's complement of top double.
      000707 06 F8                 1463         .word      LINK
                           000709  1464 LINK = . 
      000709 07                    1465         .byte      7
      00070A 44 4E 45 47 41 54 45  1466         .ascii     "DNEGATE"
      000711                       1467 DNEGA:
      000711 90 93            [ 1] 1468         LDW Y,X
      000713 90 FE            [ 2] 1469 	LDW Y,(Y)
      000715 90 53            [ 2] 1470         CPLW Y     
      000717 90 BF 24         [ 2] 1471 	LDW YTEMP,Y
      00071A 90 93            [ 1] 1472         LDW Y,X
      00071C 90 EE 02         [ 2] 1473         LDW Y,(2,Y)
      00071F 90 53            [ 2] 1474         CPLW Y
      000721 72 A9 00 01      [ 2] 1475         addw y,#1
      000725 EF 02            [ 2] 1476         LDW (2,X),Y
      000727 90 BE 24         [ 2] 1477         LDW Y,YTEMP
      00072A 24 02            [ 1] 1478         JRNC DN1 
      00072C 90 5C            [ 2] 1479         INCW Y
      00072E FF               [ 2] 1480 DN1:    LDW (X),Y
      00072F 81               [ 4] 1481         RET
                                   1482 
                                   1483 
                                   1484 ;       S>D ( n -- d )
                                   1485 ; convert single integer to double 
      000730 07 09                 1486         .word LINK 
                           000732  1487         LINK=. 
      000732 03                    1488         .byte 3 
      000733 53 3E 44              1489         .ascii "S>D"
      000736                       1490 STOD: 
      000736 1D 00 02         [ 2] 1491         subw x,#CELLL 
      000739 90 5F            [ 1] 1492         clrw y 
      00073B FF               [ 2] 1493         ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      00073C 90 93            [ 1] 1494         ldw y,x 
      00073E 90 EE 02         [ 2] 1495         ldw y,(2,y)
      000741 2A 05            [ 1] 1496         jrpl 1$ 
      000743 90 AE FF FF      [ 2] 1497         ldw y,#-1
      000747 FF               [ 2] 1498         ldw (x),y 
      000748 81               [ 4] 1499 1$:     ret 
                                   1500 
                                   1501 
                                   1502 
                                   1503 
                                   1504 ;       -       ( n1 n2 -- n1-n2 )
                                   1505 ;       Subtraction.
      000749 07 32                 1506         .word      LINK
                           00074B  1507 LINK = . 
      00074B 01                    1508         .byte      1
      00074C 2D                    1509         .ascii     "-"
      00074D                       1510 SUBB:
      00074D 90 93            [ 1] 1511         LDW Y,X
      00074F 90 FE            [ 2] 1512         LDW Y,(Y)
      000751 90 BF 24         [ 2] 1513         LDW YTEMP,Y
      000754 1C 00 02         [ 2] 1514         ADDW X,#2
      000757 90 93            [ 1] 1515         LDW Y,X
      000759 90 FE            [ 2] 1516         LDW Y,(Y)
      00075B 72 B2 00 24      [ 2] 1517         SUBW Y,YTEMP
      00075F FF               [ 2] 1518         LDW (X),Y
      000760 81               [ 4] 1519         RET
                                   1520 
                                   1521 ;       ABS     ( n -- n )
                                   1522 ;       Return  absolute value of n.
      000761 07 4B                 1523         .word      LINK
                           000763  1524 LINK = . 
      000763 03                    1525         .byte      3
      000764 41 42 53              1526         .ascii     "ABS"
      000767                       1527 ABSS:
      000767 90 93            [ 1] 1528         LDW Y,X
      000769 90 FE            [ 2] 1529 	LDW Y,(Y)
      00076B 2A 03            [ 1] 1530         JRPL     AB1     ;negate:
      00076D 90 50            [ 2] 1531         NEGW     Y     ;else negate hi byte
      00076F FF               [ 2] 1532         LDW (X),Y
      000770 81               [ 4] 1533 AB1:    RET
                                   1534 
                                   1535 ;       =       ( w w -- t )
                                   1536 ;       Return true if top two are =al.
      000771 07 63                 1537         .word      LINK
                           000773  1538 LINK = . 
      000773 01                    1539         .byte      1
      000774 3D                    1540         .ascii     "="
      000775                       1541 EQUAL:
      000775 A6 FF            [ 1] 1542         LD A,#0xFF  ;true
      000777 90 93            [ 1] 1543         LDW Y,X    ;D = n2
      000779 90 FE            [ 2] 1544         LDW Y,(Y)
      00077B 90 BF 24         [ 2] 1545         LDW YTEMP,Y
      00077E 1C 00 02         [ 2] 1546         ADDW X,#2
      000781 90 93            [ 1] 1547         LDW Y,X
      000783 90 FE            [ 2] 1548         LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      000785 90 B3 24         [ 2] 1549         CPW Y,YTEMP     ;if n2 <> n1
      000788 27 01            [ 1] 1550         JREQ     EQ1
      00078A 4F               [ 1] 1551         CLR A
      00078B F7               [ 1] 1552 EQ1:    LD (X),A
      00078C E7 01            [ 1] 1553         LD (1,X),A
      00078E 81               [ 4] 1554 	RET     
                                   1555 
                                   1556 ;       U<      ( u u -- t )
                                   1557 ;       Unsigned compare of top two items.
      00078F 07 73                 1558         .word      LINK
                           000791  1559 LINK = . 
      000791 02                    1560         .byte      2
      000792 55 3C                 1561         .ascii     "U<"
      000794                       1562 ULESS:
      000794 A6 FF            [ 1] 1563         LD A,#0xFF  ;true
      000796 90 93            [ 1] 1564         LDW Y,X    ;D = n2
      000798 90 FE            [ 2] 1565         LDW Y,(Y)
      00079A 90 BF 24         [ 2] 1566         LDW YTEMP,Y
      00079D 1C 00 02         [ 2] 1567         ADDW X,#2
      0007A0 90 93            [ 1] 1568         LDW Y,X
      0007A2 90 FE            [ 2] 1569         LDW Y,(Y)
      0007A4 90 B3 24         [ 2] 1570         CPW Y,YTEMP     ;if n2 <> n1
      0007A7 25 01            [ 1] 1571         JRULT     ULES1
      0007A9 4F               [ 1] 1572         CLR A
      0007AA F7               [ 1] 1573 ULES1:  LD (X),A
      0007AB E7 01            [ 1] 1574         LD (1,X),A
      0007AD 81               [ 4] 1575 	RET     
                                   1576 
                                   1577 ;       <       ( n1 n2 -- t )
                                   1578 ;       Signed compare of top two items.
      0007AE 07 91                 1579         .word      LINK
                           0007B0  1580 LINK = . 
      0007B0 01                    1581         .byte      1
      0007B1 3C                    1582         .ascii     "<"
      0007B2                       1583 LESS:
      0007B2 A6 FF            [ 1] 1584         LD A,#0xFF  ;true
      0007B4 90 93            [ 1] 1585         LDW Y,X    ;D = n2
      0007B6 90 FE            [ 2] 1586         LDW Y,(Y)
      0007B8 90 BF 24         [ 2] 1587         LDW YTEMP,Y
      0007BB 1C 00 02         [ 2] 1588         ADDW X,#2
      0007BE 90 93            [ 1] 1589         LDW Y,X
      0007C0 90 FE            [ 2] 1590         LDW Y,(Y)
      0007C2 90 B3 24         [ 2] 1591         CPW Y,YTEMP     ;if n2 <> n1
      0007C5 2F 01            [ 1] 1592         JRSLT     LT1
      0007C7 4F               [ 1] 1593         CLR A
      0007C8 F7               [ 1] 1594 LT1:    LD (X),A
      0007C9 E7 01            [ 1] 1595         LD (1,X),A
      0007CB 81               [ 4] 1596 	RET     
                                   1597 
                                   1598 ;       MAX     ( n n -- n )
                                   1599 ;       Return greater of two top items.
      0007CC 07 B0                 1600         .word      LINK
                           0007CE  1601 LINK = . 
      0007CE 03                    1602         .byte      3
      0007CF 4D 41 58              1603         .ascii     "MAX"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      0007D2                       1604 MAX:
      0007D2 90 93            [ 1] 1605         LDW Y,X    ;D = n2
      0007D4 90 EE 02         [ 2] 1606         LDW Y,(2,Y)
      0007D7 90 BF 24         [ 2] 1607         LDW YTEMP,Y
      0007DA 90 93            [ 1] 1608         LDW Y,X
      0007DC 90 FE            [ 2] 1609         LDW Y,(Y)
      0007DE 90 B3 24         [ 2] 1610         CPW Y,YTEMP     ;if n2 <> n1
      0007E1 2F 02            [ 1] 1611         JRSLT     MAX1
      0007E3 EF 02            [ 2] 1612         LDW (2,X),Y
      0007E5 1C 00 02         [ 2] 1613 MAX1:   ADDW X,#2
      0007E8 81               [ 4] 1614 	RET     
                                   1615 
                                   1616 ;       MIN     ( n n -- n )
                                   1617 ;       Return smaller of top two items.
      0007E9 07 CE                 1618         .word      LINK
                           0007EB  1619 LINK = . 
      0007EB 03                    1620         .byte      3
      0007EC 4D 49 4E              1621         .ascii     "MIN"
      0007EF                       1622 MIN:
      0007EF 90 93            [ 1] 1623         LDW Y,X    ;D = n2
      0007F1 90 EE 02         [ 2] 1624         LDW Y,(2,Y)
      0007F4 90 BF 24         [ 2] 1625         LDW YTEMP,Y
      0007F7 90 93            [ 1] 1626         LDW Y,X
      0007F9 90 FE            [ 2] 1627         LDW Y,(Y)
      0007FB 90 B3 24         [ 2] 1628         CPW Y,YTEMP     ;if n2 <> n1
      0007FE 2C 02            [ 1] 1629         JRSGT     MIN1
      000800 EF 02            [ 2] 1630         LDW (2,X),Y
      000802 1C 00 02         [ 2] 1631 MIN1:	ADDW X,#2
      000805 81               [ 4] 1632 	RET     
                                   1633 
                                   1634 ;       WITHIN  ( u ul uh -- t )
                                   1635 ;       Return true if u is within
                                   1636 ;       range of ul and uh. ( ul <= u < uh )
      000806 07 EB                 1637         .word      LINK
                           000808  1638 LINK = . 
      000808 06                    1639         .byte      6
      000809 57 49 54 48 49 4E     1640         .ascii     "WITHIN"
      00080F                       1641 WITHI:
      00080F CD 05 03         [ 4] 1642         CALL     OVER
      000812 CD 07 4D         [ 4] 1643         CALL     SUBB
      000815 CD 04 A2         [ 4] 1644         CALL     TOR
      000818 CD 07 4D         [ 4] 1645         CALL     SUBB
      00081B CD 04 83         [ 4] 1646         CALL     RFROM
      00081E CC 07 94         [ 2] 1647         JP     ULESS
                                   1648 
                                   1649 ;; Divide
                                   1650 
                                   1651 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1652 ;       Unsigned divide of a double by a
                                   1653 ;       single. Return mod and quotient.
      000821 08 08                 1654         .word      LINK
                           000823  1655 LINK = . 
      000823 06                    1656         .byte      6
      000824 55 4D 2F 4D 4F 44     1657         .ascii     "UM/MOD"
      00082A                       1658 UMMOD:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      00082A BF 22            [ 2] 1659 	LDW XTEMP,X	; save stack pointer
      00082C FE               [ 2] 1660 	LDW X,(X)	; un
      00082D BF 24            [ 2] 1661 	LDW YTEMP,X     ; save un
      00082F 90 BE 22         [ 2] 1662 	LDW Y,XTEMP	; stack pointer
      000832 90 EE 04         [ 2] 1663 	LDW Y,(4,Y)     ; Y=udl
      000835 BE 22            [ 2] 1664 	LDW X,XTEMP
      000837 EE 02            [ 2] 1665 	LDW X,(2,X)	; X=udh
      000839 B3 24            [ 2] 1666 	CPW X,YTEMP
      00083B 23 0F            [ 2] 1667 	JRULE MMSM1
      00083D BE 22            [ 2] 1668 	LDW X,XTEMP
      00083F 1C 00 02         [ 2] 1669 	ADDW X,#2	; pop off 1 level
      000842 90 AE FF FF      [ 2] 1670 	LDW Y,#0xFFFF
      000846 FF               [ 2] 1671 	LDW (X),Y
      000847 90 5F            [ 1] 1672 	CLRW Y
      000849 EF 02            [ 2] 1673 	LDW (2,X),Y
      00084B 81               [ 4] 1674 	RET
      00084C                       1675 MMSM1:
                                   1676 ; take advantage of divw x,y when udh==0
      00084C 5D               [ 2] 1677         tnzw x  ; is udh==0?
      00084D 26 11            [ 1] 1678         jrne MMSM2 
      00084F 93               [ 1] 1679         ldw x,y    ;udl 
      000850 90 BE 24         [ 2] 1680         ldw y,YTEMP ; divisor 
      000853 65               [ 2] 1681         divw x,y 
      000854 89               [ 2] 1682         pushw x     ; quotient 
      000855 BE 22            [ 2] 1683         ldw x,XTEMP 
      000857 1C 00 02         [ 2] 1684         addw x,#CELLL 
      00085A EF 02            [ 2] 1685         ldw (2,x),y  ; ur
      00085C 90 85            [ 2] 1686         popw y 
      00085E FF               [ 2] 1687         ldw (x),y ; uq 
      00085F 81               [ 4] 1688         ret 
      000860                       1689 MMSM2:        
      000860 A6 11            [ 1] 1690 	LD A,#17	; loop count
      000862                       1691 MMSM3:
      000862 B3 24            [ 2] 1692 	CPW X,YTEMP	; compare udh to un
      000864 25 04            [ 1] 1693 	JRULT MMSM4	; can't subtract
      000866 72 B0 00 24      [ 2] 1694 	SUBW X,YTEMP	; can subtract
      00086A                       1695 MMSM4:
      00086A 8C               [ 1] 1696 	CCF	; quotient bit
      00086B 90 59            [ 2] 1697 	RLCW Y	; rotate into quotient
      00086D 59               [ 2] 1698 	RLCW X	; rotate into remainder
      00086E 4A               [ 1] 1699 	DEC A	; repeat
      00086F 22 F1            [ 1] 1700 	JRUGT MMSM3
      000871 56               [ 2] 1701         RRCW X 
      000872 BF 24            [ 2] 1702 	LDW YTEMP,X	; done, save remainder
      000874 BE 22            [ 2] 1703 	LDW X,XTEMP
      000876 1C 00 02         [ 2] 1704 	ADDW X,#2	; drop
      000879 FF               [ 2] 1705 	LDW (X),Y
      00087A 90 BE 24         [ 2] 1706 	LDW Y,YTEMP	; save quotient
      00087D EF 02            [ 2] 1707 	LDW (2,X),Y
      00087F 81               [ 4] 1708 	RET
                                   1709 	
                                   1710 ;       M/MOD   ( d n -- r q )
                                   1711 ;       Signed floored divide of double by
                                   1712 ;       single. Return mod and quotient.
      000880 08 23                 1713         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                           000882  1714 LINK = . 
      000882 05                    1715         .byte      5
      000883 4D 2F 4D 4F 44        1716         .ascii     "M/MOD"
      000888                       1717 MSMOD:  
      000888 CD 04 D9         [ 4] 1718         CALL	DUPP
      00088B CD 05 12         [ 4] 1719         CALL	ZLESS
      00088E CD 04 D9         [ 4] 1720         CALL	DUPP
      000891 CD 04 A2         [ 4] 1721         CALL	TOR
      000894 CD 03 E7         [ 4] 1722         CALL	QBRAN
      000897 08 A5                 1723         .word	MMOD1
      000899 CD 06 FF         [ 4] 1724         CALL	NEGAT
      00089C CD 04 A2         [ 4] 1725         CALL	TOR
      00089F CD 07 11         [ 4] 1726         CALL	DNEGA
      0008A2 CD 04 83         [ 4] 1727         CALL	RFROM
      0008A5 CD 04 A2         [ 4] 1728 MMOD1:	CALL	TOR
      0008A8 CD 04 D9         [ 4] 1729         CALL	DUPP
      0008AB CD 05 12         [ 4] 1730         CALL	ZLESS
      0008AE CD 03 E7         [ 4] 1731         CALL	QBRAN
      0008B1 08 B9                 1732         .word	MMOD2
      0008B3 CD 04 96         [ 4] 1733         CALL	RAT
      0008B6 CD 06 D4         [ 4] 1734         CALL	PLUS
      0008B9 CD 04 83         [ 4] 1735 MMOD2:	CALL	RFROM
      0008BC CD 08 2A         [ 4] 1736         CALL	UMMOD
      0008BF CD 04 83         [ 4] 1737         CALL	RFROM
      0008C2 CD 03 E7         [ 4] 1738         CALL	QBRAN
      0008C5 08 D0                 1739         .word	MMOD3
      0008C7 CD 04 E9         [ 4] 1740         CALL	SWAPP
      0008CA CD 06 FF         [ 4] 1741         CALL	NEGAT
      0008CD CD 04 E9         [ 4] 1742         CALL	SWAPP
      0008D0 81               [ 4] 1743 MMOD3:	RET
                                   1744 
                                   1745 ;       /MOD    ( n n -- r q )
                                   1746 ;       Signed divide. Return mod and quotient.
      0008D1 08 82                 1747         .word      LINK
                           0008D3  1748 LINK = . 
      0008D3 04                    1749         .byte      4
      0008D4 2F 4D 4F 44           1750         .ascii     "/MOD"
      0008D8                       1751 SLMOD:
      0008D8 CD 05 03         [ 4] 1752         CALL	OVER
      0008DB CD 05 12         [ 4] 1753         CALL	ZLESS
      0008DE CD 04 E9         [ 4] 1754         CALL	SWAPP
      0008E1 CC 08 88         [ 2] 1755         JP	MSMOD
                                   1756 
                                   1757 ;       MOD     ( n n -- r )
                                   1758 ;       Signed divide. Return mod only.
      0008E4 08 D3                 1759         .word      LINK
                           0008E6  1760 LINK = . 
      0008E6 03                    1761         .byte      3
      0008E7 4D 4F 44              1762         .ascii     "MOD"
      0008EA                       1763 MODD:
      0008EA CD 08 D8         [ 4] 1764 	CALL	SLMOD
      0008ED CC 04 CF         [ 2] 1765 	JP	DROP
                                   1766 
                                   1767 ;       /       ( n n -- q )
                                   1768 ;       Signed divide. Return quotient only.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      0008F0 08 E6                 1769         .word      LINK
                           0008F2  1770 LINK = . 
      0008F2 01                    1771         .byte      1
      0008F3 2F                    1772         .ascii     "/"
      0008F4                       1773 SLASH:
      0008F4 CD 08 D8         [ 4] 1774         CALL	SLMOD
      0008F7 CD 04 E9         [ 4] 1775         CALL	SWAPP
      0008FA CC 04 CF         [ 2] 1776         JP	DROP
                                   1777 
                                   1778 ;; Multiply
                                   1779 
                                   1780 ;       UM*     ( u u -- ud )
                                   1781 ;       Unsigned multiply. Return double product.
      0008FD 08 F2                 1782         .word      LINK
                           0008FF  1783 LINK = . 
      0008FF 03                    1784         .byte      3
      000900 55 4D 2A              1785         .ascii     "UM*"
      000903                       1786 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
                                   1787 ; take advantage of SP addressing modes
                                   1788 ; these PRODx in RAM are not required
                                   1789 ; the product is kept on stack as local variable 
                                   1790         ;; bytes offset on data stack 
                           000002  1791         da=2 
                           000003  1792         db=3 
                           000000  1793         dc=0 
                           000001  1794         dd=1 
                                   1795         ;; product bytes offset on return stack 
                           000001  1796         UD1=1  ; ud bits 31..24
                           000002  1797         UD2=2  ; ud bits 23..16
                           000003  1798         UD3=3  ; ud bits 15..8 
                           000004  1799         UD4=4  ; ud bits 7..0 
                                   1800         ;; local variable for product set to zero   
      000903 90 5F            [ 1] 1801         clrw y 
      000905 90 89            [ 2] 1802         pushw y  ; bits 15..0
      000907 90 89            [ 2] 1803         pushw y  ; bits 31..16 
      000909 E6 03            [ 1] 1804         ld a,(db,x) ; b 
      00090B 90 97            [ 1] 1805         ld yl,a 
      00090D E6 01            [ 1] 1806         ld a,(dd,x)   ; d
      00090F 90 42            [ 4] 1807         mul y,a    ; b*d  
      000911 17 03            [ 2] 1808         ldw (UD3,sp),y ; lowest weight product 
      000913 E6 03            [ 1] 1809         ld a,(db,x)
      000915 90 97            [ 1] 1810         ld yl,a 
      000917 E6 00            [ 1] 1811         ld a,(dc,x)
      000919 90 42            [ 4] 1812         mul y,a  ; b*c 
                                   1813         ;;; do the partial sum 
      00091B 72 F9 02         [ 2] 1814         addw y,(UD2,sp)
      00091E 4F               [ 1] 1815         clr a 
      00091F 49               [ 1] 1816         rlc a
      000920 6B 01            [ 1] 1817         ld (UD1,sp),a 
      000922 17 02            [ 2] 1818         ldw (UD2,sp),y 
      000924 E6 02            [ 1] 1819         ld a,(da,x)
      000926 90 97            [ 1] 1820         ld yl,a 
      000928 E6 01            [ 1] 1821         ld a,(dd,x)
      00092A 90 42            [ 4] 1822         mul y,a   ; a*d 
                                   1823         ;; do partial sum 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      00092C 72 F9 02         [ 2] 1824         addw y,(UD2,sp)
      00092F 4F               [ 1] 1825         clr a 
      000930 19 01            [ 1] 1826         adc a,(UD1,sp)
      000932 6B 01            [ 1] 1827         ld (UD1,sp),a  
      000934 17 02            [ 2] 1828         ldw (UD2,sp),y 
      000936 E6 02            [ 1] 1829         ld a,(da,x)
      000938 90 97            [ 1] 1830         ld yl,a 
      00093A E6 00            [ 1] 1831         ld a,(dc,x)
      00093C 90 42            [ 4] 1832         mul y,a  ;  a*c highest weight product 
                                   1833         ;;; do partial sum 
      00093E 72 F9 01         [ 2] 1834         addw y,(UD1,sp)
      000941 FF               [ 2] 1835         ldw (x),y  ; udh 
      000942 16 03            [ 2] 1836         ldw y,(UD3,sp)
      000944 EF 02            [ 2] 1837         ldw (2,x),y  ; udl  
      000946 5B 04            [ 2] 1838         addw sp,#4 ; drop local variable 
      000948 81               [ 4] 1839         ret  
                                   1840 
                                   1841 
                                   1842 ;       *       ( n n -- n )
                                   1843 ;       Signed multiply. Return single product.
      000949 08 FF                 1844         .word      LINK
                           00094B  1845 LINK = . 
      00094B 01                    1846         .byte      1
      00094C 2A                    1847         .ascii     "*"
      00094D                       1848 STAR:
      00094D CD 09 03         [ 4] 1849 	CALL	UMSTA
      000950 CC 04 CF         [ 2] 1850 	JP	DROP
                                   1851 
                                   1852 ;       M*      ( n n -- d )
                                   1853 ;       Signed multiply. Return double product.
      000953 09 4B                 1854         .word      LINK
                           000955  1855 LINK = . 
      000955 02                    1856         .byte      2
      000956 4D 2A                 1857         .ascii     "M*"
      000958                       1858 MSTAR:      
      000958 CD 06 BF         [ 4] 1859         CALL	DDUP
      00095B CD 05 4E         [ 4] 1860         CALL	XORR
      00095E CD 05 12         [ 4] 1861         CALL	ZLESS
      000961 CD 04 A2         [ 4] 1862         CALL	TOR
      000964 CD 07 67         [ 4] 1863         CALL	ABSS
      000967 CD 04 E9         [ 4] 1864         CALL	SWAPP
      00096A CD 07 67         [ 4] 1865         CALL	ABSS
      00096D CD 09 03         [ 4] 1866         CALL	UMSTA
      000970 CD 04 83         [ 4] 1867         CALL	RFROM
      000973 CD 03 E7         [ 4] 1868         CALL	QBRAN
      000976 09 7B                 1869         .word	MSTA1
      000978 CD 07 11         [ 4] 1870         CALL	DNEGA
      00097B 81               [ 4] 1871 MSTA1:	RET
                                   1872 
                                   1873 ;       */MOD   ( n1 n2 n3 -- r q )
                                   1874 ;       Multiply n1 and n2, then divide
                                   1875 ;       by n3. Return mod and quotient.
      00097C 09 55                 1876         .word      LINK
                           00097E  1877 LINK = . 
      00097E 05                    1878         .byte      5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      00097F 2A 2F 4D 4F 44        1879         .ascii     "*/MOD"
      000984                       1880 SSMOD:
      000984 CD 04 A2         [ 4] 1881         CALL     TOR
      000987 CD 09 58         [ 4] 1882         CALL     MSTAR
      00098A CD 04 83         [ 4] 1883         CALL     RFROM
      00098D CC 08 88         [ 2] 1884         JP     MSMOD
                                   1885 
                                   1886 ;       */      ( n1 n2 n3 -- q )
                                   1887 ;       Multiply n1 by n2, then divide
                                   1888 ;       by n3. Return quotient only.
      000990 09 7E                 1889         .word      LINK
                           000992  1890 LINK = . 
      000992 02                    1891         .byte      2
      000993 2A 2F                 1892         .ascii     "*/"
      000995                       1893 STASL:
      000995 CD 09 84         [ 4] 1894         CALL	SSMOD
      000998 CD 04 E9         [ 4] 1895         CALL	SWAPP
      00099B CC 04 CF         [ 2] 1896         JP	DROP
                                   1897 
                                   1898 ;; Miscellaneous
                                   1899 
                                   1900 ;       CELL+   ( a -- a )
                                   1901 ;       Add cell size in byte to address.
      00099E 09 92                 1902         .word      LINK
                           0009A0  1903 LINK = . 
      0009A0 02                    1904         .byte       2
      0009A1 32 2B                 1905         .ascii     "2+"
      0009A3                       1906 CELLP:
      0009A3 90 93            [ 1] 1907         LDW Y,X
      0009A5 90 FE            [ 2] 1908 	LDW Y,(Y)
      0009A7 72 A9 00 02      [ 2] 1909         ADDW Y,#CELLL 
      0009AB FF               [ 2] 1910         LDW (X),Y
      0009AC 81               [ 4] 1911         RET
                                   1912 
                                   1913 ;       CELL-   ( a -- a )
                                   1914 ;       Subtract 2 from address.
      0009AD 09 A0                 1915         .word      LINK
                           0009AF  1916 LINK = . 
      0009AF 02                    1917         .byte       2
      0009B0 32 2D                 1918         .ascii     "2-"
      0009B2                       1919 CELLM:
      0009B2 90 93            [ 1] 1920         LDW Y,X
      0009B4 90 FE            [ 2] 1921 	LDW Y,(Y)
      0009B6 72 A2 00 02      [ 2] 1922         SUBW Y,#CELLL
      0009BA FF               [ 2] 1923         LDW (X),Y
      0009BB 81               [ 4] 1924         RET
                                   1925 
                                   1926 ;       CELLS   ( n -- n )
                                   1927 ;       Multiply tos by 2.
      0009BC 09 AF                 1928         .word      LINK
                           0009BE  1929 LINK = . 
      0009BE 02                    1930         .byte       2
      0009BF 32 2A                 1931         .ascii     "2*"
      0009C1                       1932 CELLS:
      0009C1 90 93            [ 1] 1933         LDW Y,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      0009C3 90 FE            [ 2] 1934 	LDW Y,(Y)
      0009C5 90 58            [ 2] 1935         SLAW Y
      0009C7 FF               [ 2] 1936         LDW (X),Y
      0009C8 81               [ 4] 1937         RET
                                   1938 
                                   1939 ;       1+      ( a -- a )
                                   1940 ;       Add cell size in byte to address.
      0009C9 09 BE                 1941         .word      LINK
                           0009CB  1942 LINK = . 
      0009CB 02                    1943         .byte      2
      0009CC 31 2B                 1944         .ascii     "1+"
      0009CE                       1945 ONEP:
      0009CE 90 93            [ 1] 1946         LDW Y,X
      0009D0 90 FE            [ 2] 1947 	LDW Y,(Y)
      0009D2 90 5C            [ 2] 1948         INCW Y
      0009D4 FF               [ 2] 1949         LDW (X),Y
      0009D5 81               [ 4] 1950         RET
                                   1951 
                                   1952 ;       1-      ( a -- a )
                                   1953 ;       Subtract 2 from address.
      0009D6 09 CB                 1954         .word      LINK
                           0009D8  1955 LINK = . 
      0009D8 02                    1956         .byte      2
      0009D9 31 2D                 1957         .ascii     "1-"
      0009DB                       1958 ONEM:
      0009DB 90 93            [ 1] 1959         LDW Y,X
      0009DD 90 FE            [ 2] 1960 	LDW Y,(Y)
      0009DF 90 5A            [ 2] 1961         DECW Y
      0009E1 FF               [ 2] 1962         LDW (X),Y
      0009E2 81               [ 4] 1963         RET
                                   1964 
                                   1965 ;  shift left n times 
                                   1966 ; LSHIFT ( n1 n2 -- n1<<n2 )
      0009E3 09 D8                 1967         .word LINK 
                           0009E5  1968         LINK=.
      0009E5 06                    1969         .byte 6 
      0009E6 4C 53 48 49 46 54     1970         .ascii "LSHIFT"
      0009EC                       1971 LSHIFT:
      0009EC E6 01            [ 1] 1972         ld a,(1,x)
      0009EE 1C 00 02         [ 2] 1973         addw x,#CELLL 
      0009F1 90 93            [ 1] 1974         ldw y,x 
      0009F3 90 FE            [ 2] 1975         ldw y,(y)
      0009F5                       1976 LSHIFT1:
      0009F5 4D               [ 1] 1977         tnz a 
      0009F6 27 05            [ 1] 1978         jreq LSHIFT4 
      0009F8 90 58            [ 2] 1979         sllw y 
      0009FA 4A               [ 1] 1980         dec a 
      0009FB 20 F8            [ 2] 1981         jra LSHIFT1 
      0009FD                       1982 LSHIFT4:
      0009FD FF               [ 2] 1983         ldw (x),y 
      0009FE 81               [ 4] 1984         ret 
                                   1985 
                                   1986 ; shift right n times                 
                                   1987 ; RSHIFT (n1 n2 -- n1>>n2 )
      0009FF 09 E5                 1988         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                           000A01  1989         LINK=.
      000A01 06                    1990         .byte 6
      000A02 52 53 48 49 46 54     1991         .ascii "RSHIFT"
      000A08                       1992 RSHIFT:
      000A08 E6 01            [ 1] 1993         ld a,(1,x)
      000A0A 1C 00 02         [ 2] 1994         addw x,#CELLL 
      000A0D 90 93            [ 1] 1995         ldw y,x 
      000A0F 90 FE            [ 2] 1996         ldw y,(y)
      000A11                       1997 RSHIFT1:
      000A11 4D               [ 1] 1998         tnz a 
      000A12 27 05            [ 1] 1999         jreq RSHIFT4 
      000A14 90 54            [ 2] 2000         srlw y 
      000A16 4A               [ 1] 2001         dec a 
      000A17 20 F8            [ 2] 2002         jra RSHIFT1 
      000A19                       2003 RSHIFT4:
      000A19 FF               [ 2] 2004         ldw (x),y 
      000A1A 81               [ 4] 2005         ret 
                                   2006 
                                   2007 
                                   2008 ;       2/      ( n -- n )
                                   2009 ;       divide  tos by 2.
      000A1B 0A 01                 2010         .word      LINK
                           000A1D  2011 LINK = . 
      000A1D 02                    2012         .byte      2
      000A1E 32 2F                 2013         .ascii     "2/"
      000A20                       2014 TWOSL:
      000A20 90 93            [ 1] 2015         LDW Y,X
      000A22 90 FE            [ 2] 2016 	LDW Y,(Y)
      000A24 90 57            [ 2] 2017         SRAW Y
      000A26 FF               [ 2] 2018         LDW (X),Y
      000A27 81               [ 4] 2019         RET
                                   2020 
                                   2021 ;       BL      ( -- 32 )
                                   2022 ;       Return 32,  blank character.
      000A28 0A 1D                 2023         .word      LINK
                           000A2A  2024 LINK = . 
      000A2A 02                    2025         .byte      2
      000A2B 42 4C                 2026         .ascii     "BL"
      000A2D                       2027 BLANK:
      000A2D 1D 00 02         [ 2] 2028         SUBW X,#2
      000A30 90 AE 00 20      [ 2] 2029 	LDW Y,#32
      000A34 FF               [ 2] 2030         LDW (X),Y
      000A35 81               [ 4] 2031         RET
                                   2032 
                                   2033 ;         0     ( -- 0)
                                   2034 ;         Return 0.
      000A36 0A 2A                 2035         .word      LINK
                           000A38  2036 LINK = . 
      000A38 01                    2037         .byte       1
      000A39 30                    2038         .ascii     "0"
      000A3A                       2039 ZERO:
      000A3A 1D 00 02         [ 2] 2040         SUBW X,#2
      000A3D 90 5F            [ 1] 2041 	CLRW Y
      000A3F FF               [ 2] 2042         LDW (X),Y
      000A40 81               [ 4] 2043         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                                   2044 
                                   2045 ;         1     ( -- 1)
                                   2046 ;         Return 1.
      000A41 0A 38                 2047         .word      LINK
                           000A43  2048 LINK = . 
      000A43 01                    2049         .byte       1
      000A44 31                    2050         .ascii     "1"
      000A45                       2051 ONE:
      000A45 1D 00 02         [ 2] 2052         SUBW X,#2
      000A48 90 AE 00 01      [ 2] 2053 	LDW Y,#1
      000A4C FF               [ 2] 2054         LDW (X),Y
      000A4D 81               [ 4] 2055         RET
                                   2056 
                                   2057 ;         -1    ( -- -1)
                                   2058 ;         Return 32,  blank character.
      000A4E 0A 43                 2059         .word      LINK
                           000A50  2060 LINK = . 
      000A50 02                    2061         .byte       2
      000A51 2D 31                 2062         .ascii     "-1"
      000A53                       2063 MONE:
      000A53 1D 00 02         [ 2] 2064         SUBW X,#2
      000A56 90 AE FF FF      [ 2] 2065 	LDW Y,#0xFFFF
      000A5A FF               [ 2] 2066         LDW (X),Y
      000A5B 81               [ 4] 2067         RET
                                   2068 
                                   2069 ;       >CHAR   ( c -- c )
                                   2070 ;       Filter non-printing characters.
      000A5C 0A 50                 2071         .word      LINK
                           000A5E  2072 LINK = . 
      000A5E 05                    2073         .byte      5
      000A5F 3E 43 48 41 52        2074         .ascii     ">CHAR"
      000A64                       2075 TCHAR:
      000A64 E6 01            [ 1] 2076         ld a,(1,x)
      000A66 A1 20            [ 1] 2077         cp a,#32  
      000A68 2B 05            [ 1] 2078         jrmi 1$ 
      000A6A A1 7F            [ 1] 2079         cp a,#127 
      000A6C 2A 01            [ 1] 2080         jrpl 1$ 
      000A6E 81               [ 4] 2081         ret 
      000A6F A6 5F            [ 1] 2082 1$:     ld a,#'_ 
      000A71 E7 01            [ 1] 2083         ld (1,x),a 
      000A73 81               [ 4] 2084         ret 
                                   2085 
                                   2086 ;       DEPTH   ( -- n )
                                   2087 ;       Return  depth of  data stack.
      000A74 0A 5E                 2088         .word      LINK
                           000A76  2089 LINK = . 
      000A76 05                    2090         .byte      5
      000A77 44 45 50 54 48        2091         .ascii     "DEPTH"
      000A7C                       2092 DEPTH: 
      000A7C 90 BE 2A         [ 2] 2093         LDW Y,SP0    ;save data stack ptr
      000A7F BF 22            [ 2] 2094 	LDW XTEMP,X
      000A81 72 B2 00 22      [ 2] 2095         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000A85 90 57            [ 2] 2096         SRAW Y    ;Y = #stack items
      000A87 1D 00 02         [ 2] 2097 	SUBW X,#2
      000A8A FF               [ 2] 2098         LDW (X),Y     ; if neg, underflow
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000A8B 81               [ 4] 2099         RET
                                   2100 
                                   2101 ;       PICK    ( ... +n -- ... w )
                                   2102 ;       Copy  nth stack item to tos.
      000A8C 0A 76                 2103         .word      LINK
                           000A8E  2104 LINK = . 
      000A8E 04                    2105         .byte      4
      000A8F 50 49 43 4B           2106         .ascii     "PICK"
      000A93                       2107 PICK:
      000A93 90 93            [ 1] 2108         LDW Y,X   ;D = n1
      000A95 90 FE            [ 2] 2109         LDW Y,(Y)
                                   2110 ; modified for standard compliance          
                                   2111 ; 0 PICK must be equivalent to DUP 
      000A97 90 5C            [ 2] 2112         INCW Y 
      000A99 90 58            [ 2] 2113         SLAW Y
      000A9B BF 22            [ 2] 2114         LDW XTEMP,X
      000A9D 72 B9 00 22      [ 2] 2115         ADDW Y,XTEMP
      000AA1 90 FE            [ 2] 2116         LDW Y,(Y)
      000AA3 FF               [ 2] 2117         LDW (X),Y
      000AA4 81               [ 4] 2118         RET
                                   2119 
                                   2120 ;; Memory access
                                   2121 
                                   2122 ;       +!      ( n a -- )
                                   2123 ;       Add n to  contents at address a.
      000AA5 0A 8E                 2124         .word      LINK
                           000AA7  2125 LINK = . 
      000AA7 02                    2126         .byte      2
      000AA8 2B 21                 2127         .ascii     "+!"
      000AAA                       2128 PSTOR:
      000AAA 90 93            [ 1] 2129         ldw y,x 
      000AAC 90 FE            [ 2] 2130         ldw y,(y)
      000AAE 90 BF 24         [ 2] 2131         ldw YTEMP,y  ; address
      000AB1 90 FE            [ 2] 2132         ldw y,(y)  
      000AB3 90 89            [ 2] 2133         pushw y  ; value at address 
      000AB5 90 93            [ 1] 2134         ldw y,x 
      000AB7 90 EE 02         [ 2] 2135         ldw y,(2,y) ; n 
      000ABA 72 F9 01         [ 2] 2136         addw y,(1,sp) ; n+value
      000ABD 91 CF 24         [ 5] 2137         ldw [YTEMP],y ;  a!
      000AC0 90 85            [ 2] 2138         popw y    ;drop local var
      000AC2 1C 00 04         [ 2] 2139         addw x,#4 ; DDROP 
      000AC5 81               [ 4] 2140         ret 
                                   2141 
                                   2142 ;       2!      ( d a -- )
                                   2143 ;       Store  double integer to address a.
      000AC6 0A A7                 2144         .word      LINK
                           000AC8  2145 LINK = . 
      000AC8 02                    2146         .byte      2
      000AC9 32 21                 2147         .ascii     "2!"
      000ACB                       2148 DSTOR:
      000ACB 90 93            [ 1] 2149         ldw y,x 
      000ACD 90 FE            [ 2] 2150         ldw y,(y)
      000ACF 90 BF 24         [ 2] 2151         ldw YTEMP,y ; address 
      000AD2 1C 00 02         [ 2] 2152         addw x,#CELLL ; drop a 
      000AD5 90 93            [ 1] 2153         ldw y,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000AD7 90 FE            [ 2] 2154         ldw y,(y) ; hi word 
      000AD9 89               [ 2] 2155         pushw x 
      000ADA EE 02            [ 2] 2156         ldw x,(2,x) ; lo word 
      000ADC 91 CF 24         [ 5] 2157         ldw [YTEMP],y
      000ADF 90 93            [ 1] 2158         ldw y,x 
      000AE1 AE 00 02         [ 2] 2159         ldw x,#2 
      000AE4 92 DF 24         [ 5] 2160         ldw ([YTEMP],x),y 
      000AE7 85               [ 2] 2161         popw x 
      000AE8 1C 00 04         [ 2] 2162         addw x,#4 ; DDROP 
      000AEB 81               [ 4] 2163         ret 
                                   2164 
                                   2165 ;       2@      ( a -- d )
                                   2166 ;       Fetch double integer from address a.
      000AEC 0A C8                 2167         .word      LINK
                           000AEE  2168 LINK = . 
      000AEE 02                    2169         .byte      2
      000AEF 32 40                 2170         .ascii     "2@"
      000AF1                       2171 DAT:
      000AF1 90 93            [ 1] 2172         ldw y,x 
      000AF3 90 FE            [ 2] 2173         ldw y,(y) ;address 
      000AF5 90 BF 24         [ 2] 2174         ldw YTEMP,y 
      000AF8 1D 00 02         [ 2] 2175         subw x,#CELLL ; space for udh 
      000AFB 91 CE 24         [ 5] 2176         ldw y,[YTEMP] ; udh 
      000AFE FF               [ 2] 2177         ldw (x),y 
      000AFF 90 AE 00 02      [ 2] 2178         ldw y,#2
      000B03 91 DE 24         [ 5] 2179         ldw y,([YTEMP],y) ; udl 
      000B06 EF 02            [ 2] 2180         ldw (2,x),y
      000B08 81               [ 4] 2181         ret 
                                   2182 
                                   2183 ;       COUNT   ( b -- b +n )
                                   2184 ;       Return count byte of a string
                                   2185 ;       and add 1 to byte address.
      000B09 0A EE                 2186         .word      LINK
                           000B0B  2187 LINK = . 
      000B0B 05                    2188         .byte      5
      000B0C 43 4F 55 4E 54        2189         .ascii     "COUNT"
      000B11                       2190 COUNT:
      000B11 90 93            [ 1] 2191         ldw y,x 
      000B13 90 FE            [ 2] 2192         ldw y,(y) ; address 
      000B15 90 F6            [ 1] 2193         ld a,(y)  ; count 
      000B17 90 5C            [ 2] 2194         incw y 
      000B19 FF               [ 2] 2195         ldw (x),y 
      000B1A 1D 00 02         [ 2] 2196         subw x,#CELLL 
      000B1D E7 01            [ 1] 2197         ld (1,x),a 
      000B1F 7F               [ 1] 2198         clr (x)
      000B20 81               [ 4] 2199         ret 
                                   2200 
                                   2201 ;       HERE    ( -- a )
                                   2202 ;       Return  top of  variables
      000B21 0B 0B                 2203         .word      LINK
                           000B23  2204 LINK = . 
      000B23 04                    2205         .byte      4
      000B24 48 45 52 45           2206         .ascii     "HERE"
      000B28                       2207 HERE:
      000B28 90 AE 00 16      [ 2] 2208       	ldw y,#UVP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000B2C 90 FE            [ 2] 2209         ldw y,(y)
      000B2E 1D 00 02         [ 2] 2210         subw x,#CELLL 
      000B31 FF               [ 2] 2211         ldw (x),y 
      000B32 81               [ 4] 2212         ret 
                                   2213 
                                   2214 ;       PAD     ( -- a )
                                   2215 ;       Return address of text buffer
                                   2216 ;       above  code dictionary.
      000B33 0B 23                 2217         .word      LINK
                           000B35  2218 LINK = . 
      000B35 03                    2219         .byte      3
      000B36 50 41 44              2220         .ascii     "PAD"
      000B39                       2221 PAD:
      000B39 CD 0B 28         [ 4] 2222         CALL     HERE
      000B3C CD 03 B4         [ 4] 2223         CALL     DOLIT
      000B3F 00 50                 2224         .word      80
      000B41 CC 06 D4         [ 2] 2225         JP     PLUS
                                   2226 
                                   2227 ;       TIB     ( -- a )
                                   2228 ;       Return address of terminal input buffer.
      000B44 0B 35                 2229         .word      LINK
                           000B46  2230 LINK = . 
      000B46 03                    2231         .byte      3
      000B47 54 49 42              2232         .ascii     "TIB"
      000B4A                       2233 TIB:
      000B4A CD 05 C4         [ 4] 2234         CALL     NTIB
      000B4D CD 09 A3         [ 4] 2235         CALL     CELLP
      000B50 CC 04 32         [ 2] 2236         JP     AT
                                   2237 
                                   2238 ;       @EXECUTE        ( a -- )
                                   2239 ;       Execute vector stored in address a.
      000B53 0B 46                 2240         .word      LINK
                           000B55  2241 LINK = . 
      000B55 08                    2242         .byte      8
      000B56 40 45 58 45 43 55 54  2243         .ascii     "@EXECUTE"
             45
      000B5E                       2244 ATEXE:
      000B5E CD 04 32         [ 4] 2245         CALL     AT
      000B61 CD 06 83         [ 4] 2246         CALL     QDUP    ;?address or zero
      000B64 CD 03 E7         [ 4] 2247         CALL     QBRAN
      000B67 0B 6C                 2248         .word      EXE1
      000B69 CD 04 0E         [ 4] 2249         CALL     EXECU   ;execute if non-zero
      000B6C 81               [ 4] 2250 EXE1:   RET     ;do nothing if zero
                                   2251 
                                   2252 ;       CMOVE   ( b1 b2 u -- )
                                   2253 ;       Copy u bytes from b1 to b2.
      000B6D 0B 55                 2254         .word      LINK
                           000B6F  2255 LINK = . 
      000B6F 05                    2256         .byte      5
      000B70 43 4D 4F 56 45        2257         .ascii     "CMOVE"
      000B75                       2258 CMOVE:
      000B75 CD 04 A2         [ 4] 2259         CALL	TOR
      000B78 CD 03 FE         [ 4] 2260         CALL	BRAN
      000B7B 0B 95                 2261         .word	CMOV2
      000B7D CD 04 A2         [ 4] 2262 CMOV1:	CALL	TOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000B80 CD 04 D9         [ 4] 2263         CALL	DUPP
      000B83 CD 04 50         [ 4] 2264         CALL	CAT
      000B86 CD 04 96         [ 4] 2265         CALL	RAT
      000B89 CD 04 3F         [ 4] 2266         CALL	CSTOR
      000B8C CD 09 CE         [ 4] 2267         CALL	ONEP
      000B8F CD 04 83         [ 4] 2268         CALL	RFROM
      000B92 CD 09 CE         [ 4] 2269         CALL	ONEP
      000B95 CD 03 C8         [ 4] 2270 CMOV2:	CALL	DONXT
      000B98 0B 7D                 2271         .word	CMOV1
      000B9A CC 06 B4         [ 2] 2272         JP	DDROP
                                   2273 
                                   2274 ;       FILL    ( b u c -- )
                                   2275 ;       Fill u bytes of character c
                                   2276 ;       to area beginning at b.
      000B9D 0B 6F                 2277         .word       LINK
                           000B9F  2278 LINK = . 
      000B9F 04                    2279         .byte       4
      000BA0 46 49 4C 4C           2280         .ascii     "FILL"
      000BA4                       2281 FILL:
      000BA4 90 93            [ 1] 2282         ldw y,x 
      000BA6 90 E6 01         [ 1] 2283         ld a,(1,y) ; c 
      000BA9 1C 00 02         [ 2] 2284         addw x,#CELLL ; drop c 
      000BAC 90 93            [ 1] 2285         ldw y,x 
      000BAE 90 FE            [ 2] 2286         ldw y,(y) ; count
      000BB0 90 89            [ 2] 2287         pushw y 
      000BB2 1C 00 02         [ 2] 2288         addw x,#CELLL ; drop u 
      000BB5 90 93            [ 1] 2289         ldw y,x 
      000BB7 1C 00 02         [ 2] 2290         addw x,#CELLL ; drop b 
      000BBA 90 FE            [ 2] 2291         ldw y,(y) ; address
      000BBC 90 BF 24         [ 2] 2292         ldw YTEMP,y
      000BBF 90 85            [ 2] 2293         popw y ; count 
      000BC1                       2294 FILL1:  
      000BC1 92 C7 24         [ 4] 2295         ld [YTEMP],a 
      000BC4 3C 25            [ 1] 2296         inc YTEMP+1
      000BC6 24 02            [ 1] 2297         jrnc FILL2 
      000BC8 3C 24            [ 1] 2298         inc YTEMP
      000BCA                       2299 FILL2: 
      000BCA 90 5A            [ 2] 2300         decw y ; count 
      000BCC 26 F3            [ 1] 2301         jrne FILL1  
      000BCE 81               [ 4] 2302         ret 
                                   2303 
                                   2304 ;       ERASE   ( b u -- )
                                   2305 ;       Erase u bytes beginning at b.
      000BCF 0B 9F                 2306         .word      LINK
                           000BD1  2307 LINK = . 
      000BD1 05                    2308         .byte      5
      000BD2 45 52 41 53 45        2309         .ascii     "ERASE"
      000BD7                       2310 ERASE:
      000BD7 90 5F            [ 1] 2311         clrw y 
      000BD9 1D 00 02         [ 2] 2312         subw x,#CELLL 
      000BDC FF               [ 2] 2313         ldw (x),y 
      000BDD CC 0B A4         [ 2] 2314         jp FILL 
                                   2315 
                                   2316 
                                   2317 ;       PACK0   ( b u a -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



                                   2318 ;       Build a counted string with
                                   2319 ;       u characters from b. Null fill.
      000BE0 0B D1                 2320         .word      LINK
                           000BE2  2321 LINK = . 
      000BE2 05                    2322         .byte      5
      000BE3 50 41 43 4B 30        2323         .ascii     "PACK0"
      000BE8                       2324 PACKS:
      000BE8 CD 04 D9         [ 4] 2325         CALL     DUPP
      000BEB CD 04 A2         [ 4] 2326         CALL     TOR     ;strings only on cell boundary
      000BEE CD 06 BF         [ 4] 2327         CALL     DDUP
      000BF1 CD 04 3F         [ 4] 2328         CALL     CSTOR
      000BF4 CD 09 CE         [ 4] 2329         CALL     ONEP ;save count
      000BF7 CD 04 E9         [ 4] 2330         CALL     SWAPP
      000BFA CD 0B 75         [ 4] 2331         CALL     CMOVE
      000BFD CD 04 83         [ 4] 2332         CALL     RFROM
      000C00 81               [ 4] 2333         RET
                                   2334 
                                   2335 ;; Numeric output, single precision
                                   2336 
                                   2337 ;       DIGIT   ( u -- c )
                                   2338 ;       Convert digit u to a character.
      000C01 0B E2                 2339         .word      LINK
                           000C03  2340 LINK = . 
      000C03 05                    2341         .byte      5
      000C04 44 49 47 49 54        2342         .ascii     "DIGIT"
      000C09                       2343 DIGIT:
      000C09 CD 03 B4         [ 4] 2344         CALL	DOLIT
      000C0C 00 09                 2345         .word	9
      000C0E CD 05 03         [ 4] 2346         CALL	OVER
      000C11 CD 07 B2         [ 4] 2347         CALL	LESS
      000C14 CD 03 B4         [ 4] 2348         CALL	DOLIT
      000C17 00 07                 2349         .word	7
      000C19 CD 05 25         [ 4] 2350         CALL	ANDD
      000C1C CD 06 D4         [ 4] 2351         CALL	PLUS
      000C1F CD 03 B4         [ 4] 2352         CALL	DOLIT
      000C22 00 30                 2353         .word	48	;'0'
      000C24 CC 06 D4         [ 2] 2354         JP	PLUS
                                   2355 
                                   2356 ;       EXTRACT ( n base -- n c )
                                   2357 ;       Extract least significant digit from n.
      000C27 0C 03                 2358         .word      LINK
                           000C29  2359 LINK = . 
      000C29 07                    2360         .byte      7
      000C2A 45 58 54 52 41 43 54  2361         .ascii     "EXTRACT"
      000C31                       2362 EXTRC:
      000C31 CD 0A 3A         [ 4] 2363         CALL     ZERO
      000C34 CD 04 E9         [ 4] 2364         CALL     SWAPP
      000C37 CD 08 2A         [ 4] 2365         CALL     UMMOD
      000C3A CD 04 E9         [ 4] 2366         CALL     SWAPP
      000C3D CC 0C 09         [ 2] 2367         JP     DIGIT
                                   2368 
                                   2369 ;       <#      ( -- )
                                   2370 ;       Initiate  numeric output process.
      000C40 0C 29                 2371         .word      LINK
                           000C42  2372 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000C42 02                    2373         .byte      2
      000C43 3C 23                 2374         .ascii     "<#"
      000C45                       2375 BDIGS:
      000C45 CD 0B 39         [ 4] 2376         CALL     PAD
      000C48 CD 06 06         [ 4] 2377         CALL     HLD
      000C4B CC 04 1B         [ 2] 2378         JP     STORE
                                   2379 
                                   2380 ;       HOLD    ( c -- )
                                   2381 ;       Insert a character into output string.
      000C4E 0C 42                 2382         .word      LINK
                           000C50  2383 LINK = . 
      000C50 04                    2384         .byte      4
      000C51 48 4F 4C 44           2385         .ascii     "HOLD"
      000C55                       2386 HOLD:
      000C55 CD 06 06         [ 4] 2387         CALL     HLD
      000C58 CD 04 32         [ 4] 2388         CALL     AT
      000C5B CD 09 DB         [ 4] 2389         CALL     ONEM
      000C5E CD 04 D9         [ 4] 2390         CALL     DUPP
      000C61 CD 06 06         [ 4] 2391         CALL     HLD
      000C64 CD 04 1B         [ 4] 2392         CALL     STORE
      000C67 CC 04 3F         [ 2] 2393         JP     CSTOR
                                   2394 
                                   2395 ;       #       ( u -- u )
                                   2396 ;       Extract one digit from u and
                                   2397 ;       append digit to output string.
      000C6A 0C 50                 2398         .word      LINK
                           000C6C  2399 LINK = . 
      000C6C 01                    2400         .byte      1
      000C6D 23                    2401         .ascii     "#"
      000C6E                       2402 DIG:
      000C6E CD 05 96         [ 4] 2403         CALL     BASE
      000C71 CD 04 32         [ 4] 2404         CALL     AT
      000C74 CD 0C 31         [ 4] 2405         CALL     EXTRC
      000C77 CC 0C 55         [ 2] 2406         JP     HOLD
                                   2407 
                                   2408 ;       #S      ( u -- 0 )
                                   2409 ;       Convert u until all digits
                                   2410 ;       are added to output string.
      000C7A 0C 6C                 2411         .word      LINK
                           000C7C  2412 LINK = . 
      000C7C 02                    2413         .byte      2
      000C7D 23 53                 2414         .ascii     "#S"
      000C7F                       2415 DIGS:
      000C7F CD 0C 6E         [ 4] 2416 DIGS1:  CALL     DIG
      000C82 CD 04 D9         [ 4] 2417         CALL     DUPP
      000C85 CD 03 E7         [ 4] 2418         CALL     QBRAN
      000C88 0C 8C                 2419         .word      DIGS2
      000C8A 20 F3            [ 2] 2420         JRA     DIGS1
      000C8C 81               [ 4] 2421 DIGS2:  RET
                                   2422 
                                   2423 ;       SIGN    ( n -- )
                                   2424 ;       Add a minus sign to
                                   2425 ;       numeric output string.
      000C8D 0C 7C                 2426         .word      LINK
                           000C8F  2427 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000C8F 04                    2428         .byte      4
      000C90 53 49 47 4E           2429         .ascii     "SIGN"
      000C94                       2430 SIGN:
      000C94 CD 05 12         [ 4] 2431         CALL     ZLESS
      000C97 CD 03 E7         [ 4] 2432         CALL     QBRAN
      000C9A 0C A4                 2433         .word      SIGN1
      000C9C CD 03 B4         [ 4] 2434         CALL     DOLIT
      000C9F 00 2D                 2435         .word      45	;"-"
      000CA1 CC 0C 55         [ 2] 2436         JP     HOLD
      000CA4 81               [ 4] 2437 SIGN1:  RET
                                   2438 
                                   2439 ;       #>      ( w -- b u )
                                   2440 ;       Prepare output string.
      000CA5 0C 8F                 2441         .word      LINK
                           000CA7  2442 LINK = . 
      000CA7 02                    2443         .byte      2
      000CA8 23 3E                 2444         .ascii     "#>"
      000CAA                       2445 EDIGS:
      000CAA CD 04 CF         [ 4] 2446         CALL     DROP
      000CAD CD 06 06         [ 4] 2447         CALL     HLD
      000CB0 CD 04 32         [ 4] 2448         CALL     AT
      000CB3 CD 0B 39         [ 4] 2449         CALL     PAD
      000CB6 CD 05 03         [ 4] 2450         CALL     OVER
      000CB9 CC 07 4D         [ 2] 2451         JP     SUBB
                                   2452 
                                   2453 ;       str     ( w -- b u )
                                   2454 ;       Convert a signed integer
                                   2455 ;       to a numeric string.
      000CBC 0C A7                 2456         .word      LINK
                           000CBE  2457 LINK = . 
      000CBE 03                    2458         .byte      3
      000CBF 53 54 52              2459         .ascii     "STR"
      000CC2                       2460 STR:
      000CC2 CD 04 D9         [ 4] 2461         CALL     DUPP
      000CC5 CD 04 A2         [ 4] 2462         CALL     TOR
      000CC8 CD 07 67         [ 4] 2463         CALL     ABSS
      000CCB CD 0C 45         [ 4] 2464         CALL     BDIGS
      000CCE CD 0C 7F         [ 4] 2465         CALL     DIGS
      000CD1 CD 04 83         [ 4] 2466         CALL     RFROM
      000CD4 CD 0C 94         [ 4] 2467         CALL     SIGN
      000CD7 CC 0C AA         [ 2] 2468         JP     EDIGS
                                   2469 
                                   2470 ;       HEX     ( -- )
                                   2471 ;       Use radix 16 as base for
                                   2472 ;       numeric conversions.
      000CDA 0C BE                 2473         .word      LINK
                           000CDC  2474 LINK = . 
      000CDC 03                    2475         .byte      3
      000CDD 48 45 58              2476         .ascii     "HEX"
      000CE0                       2477 HEX:
      000CE0 CD 03 B4         [ 4] 2478         CALL     DOLIT
      000CE3 00 10                 2479         .word      16
      000CE5 CD 05 96         [ 4] 2480         CALL     BASE
      000CE8 CC 04 1B         [ 2] 2481         JP     STORE
                                   2482 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



                                   2483 ;       DECIMAL ( -- )
                                   2484 ;       Use radix 10 as base
                                   2485 ;       for numeric conversions.
      000CEB 0C DC                 2486         .word      LINK
                           000CED  2487 LINK = . 
      000CED 07                    2488         .byte      7
      000CEE 44 45 43 49 4D 41 4C  2489         .ascii     "DECIMAL"
      000CF5                       2490 DECIM:
      000CF5 CD 03 B4         [ 4] 2491         CALL     DOLIT
      000CF8 00 0A                 2492         .word      10
      000CFA CD 05 96         [ 4] 2493         CALL     BASE
      000CFD CC 04 1B         [ 2] 2494         JP     STORE
                                   2495 
                                   2496 ;; Numeric input, single precision
                                   2497 
                                   2498 ;       DIGIT?  ( c base -- u t )
                                   2499 ;       Convert a character to its numeric
                                   2500 ;       value. A flag indicates success.
      000D00 0C ED                 2501         .word      LINK
                           000D02  2502 LINK = . 
      000D02 06                    2503         .byte       6
      000D03 44 49 47 49 54 3F     2504         .ascii     "DIGIT?"
      000D09                       2505 DIGTQ:
      000D09 CD 04 A2         [ 4] 2506         CALL     TOR
      000D0C CD 03 B4         [ 4] 2507         CALL     DOLIT
      000D0F 00 30                 2508         .word     48	; "0"
      000D11 CD 07 4D         [ 4] 2509         CALL     SUBB
      000D14 CD 03 B4         [ 4] 2510         CALL     DOLIT
      000D17 00 09                 2511         .word      9
      000D19 CD 05 03         [ 4] 2512         CALL     OVER
      000D1C CD 07 B2         [ 4] 2513         CALL     LESS
      000D1F CD 03 E7         [ 4] 2514         CALL     QBRAN
      000D22 0D 3A                 2515         .word      DGTQ1
      000D24 CD 03 B4         [ 4] 2516         CALL     DOLIT
      000D27 00 07                 2517         .word      7
      000D29 CD 07 4D         [ 4] 2518         CALL     SUBB
      000D2C CD 04 D9         [ 4] 2519         CALL     DUPP
      000D2F CD 03 B4         [ 4] 2520         CALL     DOLIT
      000D32 00 0A                 2521         .word      10
      000D34 CD 07 B2         [ 4] 2522         CALL     LESS
      000D37 CD 05 39         [ 4] 2523         CALL     ORR
      000D3A CD 04 D9         [ 4] 2524 DGTQ1:  CALL     DUPP
      000D3D CD 04 83         [ 4] 2525         CALL     RFROM
      000D40 CC 07 94         [ 2] 2526         JP     ULESS
                                   2527 
                                   2528 ;       NUMBER? ( a -- n T | a F )
                                   2529 ;       Convert a number string to
                                   2530 ;       integer. Push a flag on tos.
      000D43 0D 02                 2531         .word      LINK
                           000D45  2532 LINK = . 
      000D45 07                    2533         .byte      7
      000D46 4E 55 4D 42 45 52 3F  2534         .ascii     "NUMBER?"
      000D4D                       2535 NUMBQ:
      000D4D CD 05 96         [ 4] 2536         CALL     BASE
      000D50 CD 04 32         [ 4] 2537         CALL     AT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000D53 CD 04 A2         [ 4] 2538         CALL     TOR
      000D56 CD 0A 3A         [ 4] 2539         CALL     ZERO
      000D59 CD 05 03         [ 4] 2540         CALL     OVER
      000D5C CD 0B 11         [ 4] 2541         CALL     COUNT
      000D5F CD 05 03         [ 4] 2542         CALL     OVER
      000D62 CD 04 50         [ 4] 2543         CALL     CAT
      000D65 CD 03 B4         [ 4] 2544         CALL     DOLIT
      000D68 00 24                 2545         .word     36	; "0x"
      000D6A CD 07 75         [ 4] 2546         CALL     EQUAL
      000D6D CD 03 E7         [ 4] 2547         CALL     QBRAN
      000D70 0D 81                 2548         .word      NUMQ1
      000D72 CD 0C E0         [ 4] 2549         CALL     HEX
      000D75 CD 04 E9         [ 4] 2550         CALL     SWAPP
      000D78 CD 09 CE         [ 4] 2551         CALL     ONEP
      000D7B CD 04 E9         [ 4] 2552         CALL     SWAPP
      000D7E CD 09 DB         [ 4] 2553         CALL     ONEM
      000D81 CD 05 03         [ 4] 2554 NUMQ1:  CALL     OVER
      000D84 CD 04 50         [ 4] 2555         CALL     CAT
      000D87 CD 03 B4         [ 4] 2556         CALL     DOLIT
      000D8A 00 2D                 2557         .word     45	; "-"
      000D8C CD 07 75         [ 4] 2558         CALL     EQUAL
      000D8F CD 04 A2         [ 4] 2559         CALL     TOR
      000D92 CD 04 E9         [ 4] 2560         CALL     SWAPP
      000D95 CD 04 96         [ 4] 2561         CALL     RAT
      000D98 CD 07 4D         [ 4] 2562         CALL     SUBB
      000D9B CD 04 E9         [ 4] 2563         CALL     SWAPP
      000D9E CD 04 96         [ 4] 2564         CALL     RAT
      000DA1 CD 06 D4         [ 4] 2565         CALL     PLUS
      000DA4 CD 06 83         [ 4] 2566         CALL     QDUP
      000DA7 CD 03 E7         [ 4] 2567         CALL     QBRAN
      000DAA 0E 0B                 2568         .word      NUMQ6
      000DAC CD 09 DB         [ 4] 2569         CALL     ONEM
      000DAF CD 04 A2         [ 4] 2570         CALL     TOR
      000DB2 CD 04 D9         [ 4] 2571 NUMQ2:  CALL     DUPP
      000DB5 CD 04 A2         [ 4] 2572         CALL     TOR
      000DB8 CD 04 50         [ 4] 2573         CALL     CAT
      000DBB CD 05 96         [ 4] 2574         CALL     BASE
      000DBE CD 04 32         [ 4] 2575         CALL     AT
      000DC1 CD 0D 09         [ 4] 2576         CALL     DIGTQ
      000DC4 CD 03 E7         [ 4] 2577         CALL     QBRAN
      000DC7 0D F9                 2578         .word      NUMQ4
      000DC9 CD 04 E9         [ 4] 2579         CALL     SWAPP
      000DCC CD 05 96         [ 4] 2580         CALL     BASE
      000DCF CD 04 32         [ 4] 2581         CALL     AT
      000DD2 CD 09 4D         [ 4] 2582         CALL     STAR
      000DD5 CD 06 D4         [ 4] 2583         CALL     PLUS
      000DD8 CD 04 83         [ 4] 2584         CALL     RFROM
      000DDB CD 09 CE         [ 4] 2585         CALL     ONEP
      000DDE CD 03 C8         [ 4] 2586         CALL     DONXT
      000DE1 0D B2                 2587         .word      NUMQ2
      000DE3 CD 04 96         [ 4] 2588         CALL     RAT
      000DE6 CD 04 E9         [ 4] 2589         CALL     SWAPP
      000DE9 CD 04 CF         [ 4] 2590         CALL     DROP
      000DEC CD 03 E7         [ 4] 2591         CALL     QBRAN
      000DEF 0D F4                 2592         .word      NUMQ3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000DF1 CD 06 FF         [ 4] 2593         CALL     NEGAT
      000DF4 CD 04 E9         [ 4] 2594 NUMQ3:  CALL     SWAPP
      000DF7 20 0F            [ 2] 2595         JRA     NUMQ5
      000DF9 CD 04 83         [ 4] 2596 NUMQ4:  CALL     RFROM
      000DFC CD 04 83         [ 4] 2597         CALL     RFROM
      000DFF CD 06 B4         [ 4] 2598         CALL     DDROP
      000E02 CD 06 B4         [ 4] 2599         CALL     DDROP
      000E05 CD 0A 3A         [ 4] 2600         CALL     ZERO
      000E08 CD 04 D9         [ 4] 2601 NUMQ5:  CALL     DUPP
      000E0B CD 04 83         [ 4] 2602 NUMQ6:  CALL     RFROM
      000E0E CD 06 B4         [ 4] 2603         CALL     DDROP
      000E11 CD 04 83         [ 4] 2604         CALL     RFROM
      000E14 CD 05 96         [ 4] 2605         CALL     BASE
      000E17 CC 04 1B         [ 2] 2606         JP     STORE
                                   2607 
                                   2608 ;; Basic I/O
                                   2609 
                                   2610 ;       KEY     ( -- c )
                                   2611 ;       Wait for and return an
                                   2612 ;       input character.
      000E1A 0D 45                 2613         .word      LINK
                           000E1C  2614 LINK = . 
      000E1C 03                    2615         .byte      3
      000E1D 4B 45 59              2616         .ascii     "KEY"
      000E20                       2617 KEY:
      000E20 72 0B 52 30 FB   [ 2] 2618         btjf UART1_SR,#UART_SR_RXNE,. 
      000E25 C6 52 31         [ 1] 2619         ld a,UART1_DR 
      000E28 1D 00 02         [ 2] 2620         subw x,#CELLL 
      000E2B E7 01            [ 1] 2621         ld (1,x),a 
      000E2D 7F               [ 1] 2622         clr (x)
      000E2E 81               [ 4] 2623         ret 
                                   2624 
                                   2625 ;       NUF?    ( -- t )
                                   2626 ;       Return false if no input,
                                   2627 ;       else pause and if CR return true.
      000E2F 0E 1C                 2628         .word      LINK
                           000E31  2629 LINK = . 
      000E31 04                    2630         .byte      4
      000E32 4E 55 46 3F           2631         .ascii     "NUF?"
      000E36                       2632 NUFQ:
      000E36 CD 03 80         [ 4] 2633         CALL     QKEY
      000E39 CD 04 D9         [ 4] 2634         CALL     DUPP
      000E3C CD 03 E7         [ 4] 2635         CALL     QBRAN
      000E3F 0E 4F                 2636         .word    NUFQ1
      000E41 CD 06 B4         [ 4] 2637         CALL     DDROP
      000E44 CD 0E 20         [ 4] 2638         CALL     KEY
      000E47 CD 03 B4         [ 4] 2639         CALL     DOLIT
      000E4A 00 0D                 2640         .word      CRR
      000E4C CC 07 75         [ 2] 2641         JP     EQUAL
      000E4F 81               [ 4] 2642 NUFQ1:  RET
                                   2643 
                                   2644 ;       SPACE   ( -- )
                                   2645 ;       Send  blank character to
                                   2646 ;       output device.
      000E50 0E 31                 2647         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                           000E52  2648 LINK = . 
      000E52 05                    2649         .byte      5
      000E53 53 50 41 43 45        2650         .ascii     "SPACE"
      000E58                       2651 SPACE:
      000E58 CD 0A 2D         [ 4] 2652         CALL     BLANK
      000E5B CC 03 9E         [ 2] 2653         JP     EMIT
                                   2654 
                                   2655 ;       SPACES  ( +n -- )
                                   2656 ;       Send n spaces to output device.
      000E5E 0E 52                 2657         .word      LINK
                           000E60  2658 LINK = . 
      000E60 06                    2659         .byte      6
      000E61 53 50 41 43 45 53     2660         .ascii     "SPACES"
      000E67                       2661 SPACS:
      000E67 CD 0A 3A         [ 4] 2662         CALL     ZERO
      000E6A CD 07 D2         [ 4] 2663         CALL     MAX
      000E6D CD 04 A2         [ 4] 2664         CALL     TOR
      000E70 20 03            [ 2] 2665         JRA      CHAR2
      000E72 CD 0E 58         [ 4] 2666 CHAR1:  CALL     SPACE
      000E75 CD 03 C8         [ 4] 2667 CHAR2:  CALL     DONXT
      000E78 0E 72                 2668         .word    CHAR1
      000E7A 81               [ 4] 2669         RET
                                   2670 
                                   2671 ;       TYPE    ( b u -- )
                                   2672 ;       Output u characters from b.
      000E7B 0E 60                 2673         .word      LINK
                           000E7D  2674 LINK = . 
      000E7D 04                    2675         .byte      4
      000E7E 54 59 50 45           2676         .ascii     "TYPE"
      000E82                       2677 TYPES:
      000E82 CD 04 A2         [ 4] 2678         CALL     TOR
      000E85 20 0C            [ 2] 2679         JRA     TYPE2
      000E87 CD 04 D9         [ 4] 2680 TYPE1:  CALL     DUPP
      000E8A CD 04 50         [ 4] 2681         CALL     CAT
      000E8D CD 03 9E         [ 4] 2682         CALL     EMIT
      000E90 CD 09 CE         [ 4] 2683         CALL     ONEP
      000E93 CD 03 C8         [ 4] 2684 TYPE2:  CALL     DONXT
      000E96 0E 87                 2685         .word      TYPE1
      000E98 CC 04 CF         [ 2] 2686         JP     DROP
                                   2687 
                                   2688 ;       CR      ( -- )
                                   2689 ;       Output a carriage return
                                   2690 ;       and a line feed.
      000E9B 0E 7D                 2691         .word      LINK
                           000E9D  2692 LINK = . 
      000E9D 02                    2693         .byte      2
      000E9E 43 52                 2694         .ascii     "CR"
      000EA0                       2695 CR:
      000EA0 CD 03 B4         [ 4] 2696         CALL     DOLIT
      000EA3 00 0D                 2697         .word      CRR
      000EA5 CD 03 9E         [ 4] 2698         CALL     EMIT
      000EA8 CD 03 B4         [ 4] 2699         CALL     DOLIT
      000EAB 00 0A                 2700         .word      LF
      000EAD CC 03 9E         [ 2] 2701         JP     EMIT
                                   2702 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



                                   2703 ;       do$     ( -- a )
                                   2704 ;       Return  address of a compiled
                                   2705 ;       string.
      000EB0 0E 9D                 2706         .word      LINK
                           000EB2  2707 LINK = . 
      000EB2 43                    2708 	.byte      COMPO+3
      000EB3 44 4F 24              2709         .ascii     "DO$"
      000EB6                       2710 DOSTR:
      000EB6 CD 04 83         [ 4] 2711         CALL     RFROM
      000EB9 CD 04 96         [ 4] 2712         CALL     RAT
      000EBC CD 04 83         [ 4] 2713         CALL     RFROM
      000EBF CD 0B 11         [ 4] 2714         CALL     COUNT
      000EC2 CD 06 D4         [ 4] 2715         CALL     PLUS
      000EC5 CD 04 A2         [ 4] 2716         CALL     TOR
      000EC8 CD 04 E9         [ 4] 2717         CALL     SWAPP
      000ECB CD 04 A2         [ 4] 2718         CALL     TOR
      000ECE 81               [ 4] 2719         RET
                                   2720 
                                   2721 ;       $"|     ( -- a )
                                   2722 ;       Run time routine compiled by $".
                                   2723 ;       Return address of a compiled string.
      000ECF 0E B2                 2724         .word      LINK
                           000ED1  2725 LINK = . 
      000ED1 43                    2726 	.byte      COMPO+3
      000ED2 24 22 7C              2727         .byte     '$','"','|'
      000ED5                       2728 STRQP:
      000ED5 CD 0E B6         [ 4] 2729         CALL     DOSTR
      000ED8 81               [ 4] 2730         RET
                                   2731 
                                   2732 ;       ."|     ( -- )
                                   2733 ;       Run time routine of ." .
                                   2734 ;       Output a compiled string.
      000ED9 0E D1                 2735         .word      LINK
                           000EDB  2736 LINK = . 
      000EDB 43                    2737 	.byte      COMPO+3
      000EDC 2E 22 7C              2738         .byte     '.','"','|'
      000EDF                       2739 DOTQP:
      000EDF CD 0E B6         [ 4] 2740         CALL     DOSTR
      000EE2 CD 0B 11         [ 4] 2741         CALL     COUNT
      000EE5 CC 0E 82         [ 2] 2742         JP     TYPES
                                   2743 
                                   2744 ;       .R      ( n +n -- )
                                   2745 ;       Display an integer in a field
                                   2746 ;       of n columns, right justified.
      000EE8 0E DB                 2747         .word      LINK
                           000EEA  2748 LINK = . 
      000EEA 02                    2749         .byte      2
      000EEB 2E 52                 2750         .ascii     ".R"
      000EED                       2751 DOTR:
      000EED CD 04 A2         [ 4] 2752         CALL     TOR
      000EF0 CD 0C C2         [ 4] 2753         CALL     STR
      000EF3 CD 04 83         [ 4] 2754         CALL     RFROM
      000EF6 CD 05 03         [ 4] 2755         CALL     OVER
      000EF9 CD 07 4D         [ 4] 2756         CALL     SUBB
      000EFC CD 0E 67         [ 4] 2757         CALL     SPACS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000EFF CC 0E 82         [ 2] 2758         JP     TYPES
                                   2759 
                                   2760 ;       U.R     ( u +n -- )
                                   2761 ;       Display an unsigned integer
                                   2762 ;       in n column, right justified.
      000F02 0E EA                 2763         .word      LINK
                           000F04  2764 LINK = . 
      000F04 03                    2765         .byte      3
      000F05 55 2E 52              2766         .ascii     "U.R"
      000F08                       2767 UDOTR:
      000F08 CD 04 A2         [ 4] 2768         CALL     TOR
      000F0B CD 0C 45         [ 4] 2769         CALL     BDIGS
      000F0E CD 0C 7F         [ 4] 2770         CALL     DIGS
      000F11 CD 0C AA         [ 4] 2771         CALL     EDIGS
      000F14 CD 04 83         [ 4] 2772         CALL     RFROM
      000F17 CD 05 03         [ 4] 2773         CALL     OVER
      000F1A CD 07 4D         [ 4] 2774         CALL     SUBB
      000F1D CD 0E 67         [ 4] 2775         CALL     SPACS
      000F20 CC 0E 82         [ 2] 2776         JP     TYPES
                                   2777 
                                   2778 ;       U.      ( u -- )
                                   2779 ;       Display an unsigned integer
                                   2780 ;       in free format.
      000F23 0F 04                 2781         .word      LINK
                           000F25  2782 LINK = . 
      000F25 02                    2783         .byte      2
      000F26 55 2E                 2784         .ascii     "U."
      000F28                       2785 UDOT:
      000F28 CD 0C 45         [ 4] 2786         CALL     BDIGS
      000F2B CD 0C 7F         [ 4] 2787         CALL     DIGS
      000F2E CD 0C AA         [ 4] 2788         CALL     EDIGS
      000F31 CD 0E 58         [ 4] 2789         CALL     SPACE
      000F34 CC 0E 82         [ 2] 2790         JP     TYPES
                                   2791 
                                   2792 ;       .       ( w -- )
                                   2793 ;       Display an integer in free
                                   2794 ;       format, preceeded by a space.
      000F37 0F 25                 2795         .word      LINK
                           000F39  2796 LINK = . 
      000F39 01                    2797         .byte      1
      000F3A 2E                    2798         .ascii     "."
      000F3B                       2799 DOT:
      000F3B CD 05 96         [ 4] 2800         CALL     BASE
      000F3E CD 04 32         [ 4] 2801         CALL     AT
      000F41 CD 03 B4         [ 4] 2802         CALL     DOLIT
      000F44 00 0A                 2803         .word      10
      000F46 CD 05 4E         [ 4] 2804         CALL     XORR    ;?decimal
      000F49 CD 03 E7         [ 4] 2805         CALL     QBRAN
      000F4C 0F 51                 2806         .word      DOT1
      000F4E CC 0F 28         [ 2] 2807         JP     UDOT
      000F51 CD 0C C2         [ 4] 2808 DOT1:   CALL     STR
      000F54 CD 0E 58         [ 4] 2809         CALL     SPACE
      000F57 CC 0E 82         [ 2] 2810         JP     TYPES
                                   2811 
                                   2812 ;       ?       ( a -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                   2813 ;       Display contents in memory cell.
      000F5A 0F 39                 2814         .word      LINK
                                   2815         
                           000F5C  2816 LINK = . 
      000F5C 01                    2817         .byte      1
      000F5D 3F                    2818         .ascii     "?"
      000F5E                       2819 QUEST:
      000F5E CD 04 32         [ 4] 2820         CALL     AT
      000F61 CC 0F 3B         [ 2] 2821         JP     DOT
                                   2822 
                                   2823 ;; Parsing
                                   2824 
                                   2825 ;       parse   ( b u c -- b u delta ; <string> )
                                   2826 ;       Scan string delimited by c.
                                   2827 ;       Return found string and its offset.
      000F64 0F 5C                 2828         .word      LINK
                           000F66  2829 LINK = . 
      000F66 05                    2830         .byte      5
      000F67 70 61 72 73 65        2831         .ascii     "parse"
      000F6C                       2832 PARS:
      000F6C CD 05 A5         [ 4] 2833         CALL     TEMP
      000F6F CD 04 1B         [ 4] 2834         CALL     STORE
      000F72 CD 05 03         [ 4] 2835         CALL     OVER
      000F75 CD 04 A2         [ 4] 2836         CALL     TOR
      000F78 CD 04 D9         [ 4] 2837         CALL     DUPP
      000F7B CD 03 E7         [ 4] 2838         CALL     QBRAN
      000F7E 10 24                 2839         .word    PARS8
      000F80 CD 09 DB         [ 4] 2840         CALL     ONEM
      000F83 CD 05 A5         [ 4] 2841         CALL     TEMP
      000F86 CD 04 32         [ 4] 2842         CALL     AT
      000F89 CD 0A 2D         [ 4] 2843         CALL     BLANK
      000F8C CD 07 75         [ 4] 2844         CALL     EQUAL
      000F8F CD 03 E7         [ 4] 2845         CALL     QBRAN
      000F92 0F C5                 2846         .word      PARS3
      000F94 CD 04 A2         [ 4] 2847         CALL     TOR
      000F97 CD 0A 2D         [ 4] 2848 PARS1:  CALL     BLANK
      000F9A CD 05 03         [ 4] 2849         CALL     OVER
      000F9D CD 04 50         [ 4] 2850         CALL     CAT     ;skip leading blanks ONLY
      000FA0 CD 07 4D         [ 4] 2851         CALL     SUBB
      000FA3 CD 05 12         [ 4] 2852         CALL     ZLESS
      000FA6 CD 06 EE         [ 4] 2853         CALL     INVER
      000FA9 CD 03 E7         [ 4] 2854         CALL     QBRAN
      000FAC 0F C2                 2855         .word      PARS2
      000FAE CD 09 CE         [ 4] 2856         CALL     ONEP
      000FB1 CD 03 C8         [ 4] 2857         CALL     DONXT
      000FB4 0F 97                 2858         .word      PARS1
      000FB6 CD 04 83         [ 4] 2859         CALL     RFROM
      000FB9 CD 04 CF         [ 4] 2860         CALL     DROP
      000FBC CD 0A 3A         [ 4] 2861         CALL     ZERO
      000FBF CC 04 D9         [ 2] 2862         JP     DUPP
      000FC2 CD 04 83         [ 4] 2863 PARS2:  CALL     RFROM
      000FC5 CD 05 03         [ 4] 2864 PARS3:  CALL     OVER
      000FC8 CD 04 E9         [ 4] 2865         CALL     SWAPP
      000FCB CD 04 A2         [ 4] 2866         CALL     TOR
      000FCE CD 05 A5         [ 4] 2867 PARS4:  CALL     TEMP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000FD1 CD 04 32         [ 4] 2868         CALL     AT
      000FD4 CD 05 03         [ 4] 2869         CALL     OVER
      000FD7 CD 04 50         [ 4] 2870         CALL     CAT
      000FDA CD 07 4D         [ 4] 2871         CALL     SUBB    ;scan for delimiter
      000FDD CD 05 A5         [ 4] 2872         CALL     TEMP
      000FE0 CD 04 32         [ 4] 2873         CALL     AT
      000FE3 CD 0A 2D         [ 4] 2874         CALL     BLANK
      000FE6 CD 07 75         [ 4] 2875         CALL     EQUAL
      000FE9 CD 03 E7         [ 4] 2876         CALL     QBRAN
      000FEC 0F F1                 2877         .word      PARS5
      000FEE CD 05 12         [ 4] 2878         CALL     ZLESS
      000FF1 CD 03 E7         [ 4] 2879 PARS5:  CALL     QBRAN
      000FF4 10 06                 2880         .word      PARS6
      000FF6 CD 09 CE         [ 4] 2881         CALL     ONEP
      000FF9 CD 03 C8         [ 4] 2882         CALL     DONXT
      000FFC 0F CE                 2883         .word      PARS4
      000FFE CD 04 D9         [ 4] 2884         CALL     DUPP
      001001 CD 04 A2         [ 4] 2885         CALL     TOR
      001004 20 0F            [ 2] 2886         JRA     PARS7
      001006 CD 04 83         [ 4] 2887 PARS6:  CALL     RFROM
      001009 CD 04 CF         [ 4] 2888         CALL     DROP
      00100C CD 04 D9         [ 4] 2889         CALL     DUPP
      00100F CD 09 CE         [ 4] 2890         CALL     ONEP
      001012 CD 04 A2         [ 4] 2891         CALL     TOR
      001015 CD 05 03         [ 4] 2892 PARS7:  CALL     OVER
      001018 CD 07 4D         [ 4] 2893         CALL     SUBB
      00101B CD 04 83         [ 4] 2894         CALL     RFROM
      00101E CD 04 83         [ 4] 2895         CALL     RFROM
      001021 CC 07 4D         [ 2] 2896         JP     SUBB
      001024 CD 05 03         [ 4] 2897 PARS8:  CALL     OVER
      001027 CD 04 83         [ 4] 2898         CALL     RFROM
      00102A CC 07 4D         [ 2] 2899         JP     SUBB
                                   2900 
                                   2901 ;       PARSE   ( c -- b u ; <string> )
                                   2902 ;       Scan input stream and return
                                   2903 ;       counted string delimited by c.
      00102D 0F 66                 2904         .word      LINK
                           00102F  2905 LINK = . 
      00102F 05                    2906         .byte      5
      001030 50 41 52 53 45        2907         .ascii     "PARSE"
      001035                       2908 PARSE:
      001035 CD 04 A2         [ 4] 2909         CALL     TOR
      001038 CD 0B 4A         [ 4] 2910         CALL     TIB
      00103B CD 05 B4         [ 4] 2911         CALL     INN
      00103E CD 04 32         [ 4] 2912         CALL     AT
      001041 CD 06 D4         [ 4] 2913         CALL     PLUS    ;current input buffer pointer
      001044 CD 05 C4         [ 4] 2914         CALL     NTIB
      001047 CD 04 32         [ 4] 2915         CALL     AT
      00104A CD 05 B4         [ 4] 2916         CALL     INN
      00104D CD 04 32         [ 4] 2917         CALL     AT
      001050 CD 07 4D         [ 4] 2918         CALL     SUBB    ;remaining count
      001053 CD 04 83         [ 4] 2919         CALL     RFROM
      001056 CD 0F 6C         [ 4] 2920         CALL     PARS
      001059 CD 05 B4         [ 4] 2921         CALL     INN
      00105C CC 0A AA         [ 2] 2922         JP     PSTOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



                                   2923 
                                   2924 ;       .(      ( -- )
                                   2925 ;       Output following string up to next ) .
      00105F 10 2F                 2926         .word      LINK
                           001061  2927 LINK = . 
      001061 82                    2928 	.byte      IMEDD+2
      001062 2E 28                 2929         .ascii     ".("
      001064                       2930 DOTPR:
      001064 CD 03 B4         [ 4] 2931         CALL     DOLIT
      001067 00 29                 2932         .word     41	; ")"
      001069 CD 10 35         [ 4] 2933         CALL     PARSE
      00106C CC 0E 82         [ 2] 2934         JP     TYPES
                                   2935 
                                   2936 ;       (       ( -- )
                                   2937 ;       Ignore following string up to next ).
                                   2938 ;       A comment.
      00106F 10 61                 2939         .word      LINK
                           001071  2940 LINK = . 
      001071 81                    2941 	.byte      IMEDD+1
      001072 28                    2942         .ascii     "("
      001073                       2943 PAREN:
      001073 CD 03 B4         [ 4] 2944         CALL     DOLIT
      001076 00 29                 2945         .word     41	; ")"
      001078 CD 10 35         [ 4] 2946         CALL     PARSE
      00107B CC 06 B4         [ 2] 2947         JP     DDROP
                                   2948 
                                   2949 ;       \       ( -- )
                                   2950 ;       Ignore following text till
                                   2951 ;       end of line.
      00107E 10 71                 2952         .word      LINK
                           001080  2953 LINK = . 
      001080 81                    2954 	.byte      IMEDD+1
      001081 5C                    2955         .ascii     "\"
      001082                       2956 BKSLA:
      001082 90 AE 00 0C      [ 2] 2957         ldw y,#UCTIB ; #TIB  
      001086 90 FE            [ 2] 2958         ldw y,(y)
      001088 90 89            [ 2] 2959         pushw y ; count in TIB 
      00108A 90 AE 00 0A      [ 2] 2960         ldw y,#UINN ; >IN 
      00108E 90 BF 24         [ 2] 2961         ldw YTEMP,y
      001091 90 85            [ 2] 2962         popw y 
      001093 91 CF 24         [ 5] 2963         ldw [YTEMP],y
      001096 81               [ 4] 2964         ret 
                                   2965 
                                   2966 ;       WORD    ( c -- a ; <string> )
                                   2967 ;       Parse a word from input stream
                                   2968 ;       and copy it to code dictionary.
      001097 10 80                 2969         .word      LINK
                           001099  2970 LINK = . 
      001099 04                    2971         .byte      4
      00109A 57 4F 52 44           2972         .ascii     "WORD"
      00109E                       2973 WORDD:
      00109E CD 10 35         [ 4] 2974         CALL     PARSE
      0010A1 CD 0B 28         [ 4] 2975         CALL     HERE
      0010A4 CD 09 A3         [ 4] 2976         CALL     CELLP
      0010A7 CC 0B E8         [ 2] 2977         JP     PACKS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



                                   2978 
                                   2979 ;       TOKEN   ( -- a ; <string> )
                                   2980 ;       Parse a word from input stream
                                   2981 ;       and copy it to name dictionary.
      0010AA 10 99                 2982         .word      LINK
                           0010AC  2983 LINK = . 
      0010AC 05                    2984         .byte      5
      0010AD 54 4F 4B 45 4E        2985         .ascii     "TOKEN"
      0010B2                       2986 TOKEN:
      0010B2 CD 0A 2D         [ 4] 2987         CALL     BLANK
      0010B5 CC 10 9E         [ 2] 2988         JP     WORDD
                                   2989 
                                   2990 ;; Dictionary search
                                   2991 
                                   2992 ;       NAME>   ( na -- ca )
                                   2993 ;       Return a code address given
                                   2994 ;       a name address.
      0010B8 10 AC                 2995         .word      LINK
                           0010BA  2996 LINK = . 
      0010BA 05                    2997         .byte      5
      0010BB 4E 41 4D 45 3E        2998         .ascii     "NAME>"
      0010C0                       2999 NAMET:
      0010C0 CD 0B 11         [ 4] 3000         CALL     COUNT
      0010C3 CD 03 B4         [ 4] 3001         CALL     DOLIT
      0010C6 00 1F                 3002         .word      31
      0010C8 CD 05 25         [ 4] 3003         CALL     ANDD
      0010CB CC 06 D4         [ 2] 3004         JP     PLUS
                                   3005 
                                   3006 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   3007 ;       Compare u cells in two
                                   3008 ;       strings. Return 0 if identical.
      0010CE 10 BA                 3009         .word      LINK
                           0010D0  3010 LINK = . 
      0010D0 05                    3011         .byte       5
      0010D1 53 41 4D 45 3F        3012         .ascii     "SAME?"
      0010D6                       3013 SAMEQ:
      0010D6 CD 09 DB         [ 4] 3014         CALL     ONEM
      0010D9 CD 04 A2         [ 4] 3015         CALL     TOR
      0010DC 20 29            [ 2] 3016         JRA     SAME2
      0010DE CD 05 03         [ 4] 3017 SAME1:  CALL     OVER
      0010E1 CD 04 96         [ 4] 3018         CALL     RAT
      0010E4 CD 06 D4         [ 4] 3019         CALL     PLUS
      0010E7 CD 04 50         [ 4] 3020         CALL     CAT
      0010EA CD 05 03         [ 4] 3021         CALL     OVER
      0010ED CD 04 96         [ 4] 3022         CALL     RAT
      0010F0 CD 06 D4         [ 4] 3023         CALL     PLUS
      0010F3 CD 04 50         [ 4] 3024         CALL     CAT
      0010F6 CD 07 4D         [ 4] 3025         CALL     SUBB
      0010F9 CD 06 83         [ 4] 3026         CALL     QDUP
      0010FC CD 03 E7         [ 4] 3027         CALL     QBRAN
      0010FF 11 07                 3028         .word      SAME2
      001101 CD 04 83         [ 4] 3029         CALL     RFROM
      001104 CC 04 CF         [ 2] 3030         JP     DROP
      001107 CD 03 C8         [ 4] 3031 SAME2:  CALL     DONXT
      00110A 10 DE                 3032         .word      SAME1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      00110C CC 0A 3A         [ 2] 3033         JP     ZERO
                                   3034 
                                   3035 ;       find    ( a va -- ca na | a F )
                                   3036 ;       Search vocabulary for string.
                                   3037 ;       Return ca and na if succeeded.
      00110F 10 D0                 3038         .word      LINK
                           001111  3039 LINK = . 
      001111 04                    3040         .byte      4
      001112 46 49 4E 44           3041         .ascii     "FIND"
      001116                       3042 FIND:
      001116 CD 04 E9         [ 4] 3043         CALL     SWAPP
      001119 CD 04 D9         [ 4] 3044         CALL     DUPP
      00111C CD 04 50         [ 4] 3045         CALL     CAT
      00111F CD 05 A5         [ 4] 3046         CALL     TEMP
      001122 CD 04 1B         [ 4] 3047         CALL     STORE
      001125 CD 04 D9         [ 4] 3048         CALL     DUPP
      001128 CD 04 32         [ 4] 3049         CALL     AT
      00112B CD 04 A2         [ 4] 3050         CALL     TOR
      00112E CD 09 A3         [ 4] 3051         CALL     CELLP
      001131 CD 04 E9         [ 4] 3052         CALL     SWAPP
      001134 CD 04 32         [ 4] 3053 FIND1:  CALL     AT
      001137 CD 04 D9         [ 4] 3054         CALL     DUPP
      00113A CD 03 E7         [ 4] 3055         CALL     QBRAN
      00113D 11 73                 3056         .word      FIND6
      00113F CD 04 D9         [ 4] 3057         CALL     DUPP
      001142 CD 04 32         [ 4] 3058         CALL     AT
      001145 CD 03 B4         [ 4] 3059         CALL     DOLIT
      001148 1F 7F                 3060         .word      MASKK
      00114A CD 05 25         [ 4] 3061         CALL     ANDD
      00114D CD 04 96         [ 4] 3062         CALL     RAT
      001150 CD 05 4E         [ 4] 3063         CALL     XORR
      001153 CD 03 E7         [ 4] 3064         CALL     QBRAN
      001156 11 62                 3065         .word      FIND2
      001158 CD 09 A3         [ 4] 3066         CALL     CELLP
      00115B CD 03 B4         [ 4] 3067         CALL     DOLIT
      00115E FF FF                 3068         .word     0xFFFF
      001160 20 0C            [ 2] 3069         JRA     FIND3
      001162 CD 09 A3         [ 4] 3070 FIND2:  CALL     CELLP
      001165 CD 05 A5         [ 4] 3071         CALL     TEMP
      001168 CD 04 32         [ 4] 3072         CALL     AT
      00116B CD 10 D6         [ 4] 3073         CALL     SAMEQ
      00116E CD 03 FE         [ 4] 3074 FIND3:  CALL     BRAN
      001171 11 82                 3075         .word      FIND4
      001173 CD 04 83         [ 4] 3076 FIND6:  CALL     RFROM
      001176 CD 04 CF         [ 4] 3077         CALL     DROP
      001179 CD 04 E9         [ 4] 3078         CALL     SWAPP
      00117C CD 09 B2         [ 4] 3079         CALL     CELLM
      00117F CC 04 E9         [ 2] 3080         JP     SWAPP
      001182 CD 03 E7         [ 4] 3081 FIND4:  CALL     QBRAN
      001185 11 8F                 3082         .word      FIND5
      001187 CD 09 B2         [ 4] 3083         CALL     CELLM
      00118A CD 09 B2         [ 4] 3084         CALL     CELLM
      00118D 20 A5            [ 2] 3085         JRA     FIND1
      00118F CD 04 83         [ 4] 3086 FIND5:  CALL     RFROM
      001192 CD 04 CF         [ 4] 3087         CALL     DROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      001195 CD 04 E9         [ 4] 3088         CALL     SWAPP
      001198 CD 04 CF         [ 4] 3089         CALL     DROP
      00119B CD 09 B2         [ 4] 3090         CALL     CELLM
      00119E CD 04 D9         [ 4] 3091         CALL     DUPP
      0011A1 CD 10 C0         [ 4] 3092         CALL     NAMET
      0011A4 CC 04 E9         [ 2] 3093         JP     SWAPP
                                   3094 
                                   3095 ;       NAME?   ( a -- ca na | a F )
                                   3096 ;       Search vocabularies for a string.
      0011A7 11 11                 3097         .word      LINK
                           0011A9  3098 LINK = . 
      0011A9 05                    3099         .byte      5
      0011AA 4E 41 4D 45 3F        3100         .ascii     "NAME?"
      0011AF                       3101 NAMEQ:
      0011AF CD 06 19         [ 4] 3102         CALL   CNTXT
      0011B2 CC 11 16         [ 2] 3103         JP     FIND
                                   3104 
                                   3105 ;; Terminal response
                                   3106 
                                   3107 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3108 ;       Backup cursor by one character.
      0011B5 11 A9                 3109         .word      LINK
                           0011B7  3110 LINK = . 
      0011B7 02                    3111         .byte      2
      0011B8 5E 48                 3112         .ascii     "^H"
      0011BA                       3113 BKSP:
      0011BA CD 04 A2         [ 4] 3114         CALL     TOR
      0011BD CD 05 03         [ 4] 3115         CALL     OVER
      0011C0 CD 04 83         [ 4] 3116         CALL     RFROM
      0011C3 CD 04 E9         [ 4] 3117         CALL     SWAPP
      0011C6 CD 05 03         [ 4] 3118         CALL     OVER
      0011C9 CD 05 4E         [ 4] 3119         CALL     XORR
      0011CC CD 03 E7         [ 4] 3120         CALL     QBRAN
      0011CF 11 EA                 3121         .word      BACK1
      0011D1 CD 03 B4         [ 4] 3122         CALL     DOLIT
      0011D4 00 08                 3123         .word      BKSPP
      0011D6 CD 03 9E         [ 4] 3124         CALL     EMIT
      0011D9 CD 09 DB         [ 4] 3125         CALL     ONEM
      0011DC CD 0A 2D         [ 4] 3126         CALL     BLANK
      0011DF CD 03 9E         [ 4] 3127         CALL     EMIT
      0011E2 CD 03 B4         [ 4] 3128         CALL     DOLIT
      0011E5 00 08                 3129         .word      BKSPP
      0011E7 CC 03 9E         [ 2] 3130         JP     EMIT
      0011EA 81               [ 4] 3131 BACK1:  RET
                                   3132 
                                   3133 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3134 ;       Accept and echo key stroke
                                   3135 ;       and bump cursor.
      0011EB 11 B7                 3136         .word      LINK
                           0011ED  3137 LINK = . 
      0011ED 03                    3138         .byte      3
      0011EE 54 41 50              3139         .ascii     "TAP"
      0011F1                       3140 TAP:
      0011F1 CD 04 D9         [ 4] 3141         CALL     DUPP
      0011F4 CD 03 9E         [ 4] 3142         CALL     EMIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      0011F7 CD 05 03         [ 4] 3143         CALL     OVER
      0011FA CD 04 3F         [ 4] 3144         CALL     CSTOR
      0011FD CC 09 CE         [ 2] 3145         JP     ONEP
                                   3146 
                                   3147 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3148 ;       Process a key stroke,
                                   3149 ;       CR or backspace.
      001200 11 ED                 3150         .word      LINK
                           001202  3151 LINK = . 
      001202 04                    3152         .byte      4
      001203 4B 54 41 50           3153         .ascii     "KTAP"
      001207                       3154 KTAP:
      001207 CD 04 D9         [ 4] 3155         CALL     DUPP
      00120A CD 03 B4         [ 4] 3156         CALL     DOLIT
      00120D 00 0D                 3157         .word      CRR
      00120F CD 05 4E         [ 4] 3158         CALL     XORR
      001212 CD 03 E7         [ 4] 3159         CALL     QBRAN
      001215 12 2D                 3160         .word      KTAP2
      001217 CD 03 B4         [ 4] 3161         CALL     DOLIT
      00121A 00 08                 3162         .word      BKSPP
      00121C CD 05 4E         [ 4] 3163         CALL     XORR
      00121F CD 03 E7         [ 4] 3164         CALL     QBRAN
      001222 12 2A                 3165         .word      KTAP1
      001224 CD 0A 2D         [ 4] 3166         CALL     BLANK
      001227 CC 11 F1         [ 2] 3167         JP     TAP
      00122A CC 11 BA         [ 2] 3168 KTAP1:  JP     BKSP
      00122D CD 04 CF         [ 4] 3169 KTAP2:  CALL     DROP
      001230 CD 04 E9         [ 4] 3170         CALL     SWAPP
      001233 CD 04 CF         [ 4] 3171         CALL     DROP
      001236 CC 04 D9         [ 2] 3172         JP     DUPP
                                   3173 
                                   3174 ;       accept  ( b u -- b u )
                                   3175 ;       Accept characters to input
                                   3176 ;       buffer. Return with actual count.
      001239 12 02                 3177         .word      LINK
                           00123B  3178 LINK = . 
      00123B 06                    3179         .byte      6
      00123C 41 43 43 45 50 54     3180         .ascii     "ACCEPT"
      001242                       3181 ACCEP:
      001242 CD 05 03         [ 4] 3182         CALL     OVER
      001245 CD 06 D4         [ 4] 3183         CALL     PLUS
      001248 CD 05 03         [ 4] 3184         CALL     OVER
      00124B CD 06 BF         [ 4] 3185 ACCP1:  CALL     DDUP
      00124E CD 05 4E         [ 4] 3186         CALL     XORR
      001251 CD 03 E7         [ 4] 3187         CALL     QBRAN
      001254 12 76                 3188         .word      ACCP4
      001256 CD 0E 20         [ 4] 3189         CALL     KEY
      001259 CD 04 D9         [ 4] 3190         CALL     DUPP
      00125C CD 0A 2D         [ 4] 3191         CALL     BLANK
      00125F CD 03 B4         [ 4] 3192         CALL     DOLIT
      001262 00 7F                 3193         .word      127
      001264 CD 08 0F         [ 4] 3194         CALL     WITHI
      001267 CD 03 E7         [ 4] 3195         CALL     QBRAN
      00126A 12 71                 3196         .word      ACCP2
      00126C CD 11 F1         [ 4] 3197         CALL     TAP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      00126F 20 03            [ 2] 3198         JRA     ACCP3
      001271 CD 12 07         [ 4] 3199 ACCP2:  CALL     KTAP
      001274 20 D5            [ 2] 3200 ACCP3:  JRA     ACCP1
      001276 CD 04 CF         [ 4] 3201 ACCP4:  CALL     DROP
      001279 CD 05 03         [ 4] 3202         CALL     OVER
      00127C CC 07 4D         [ 2] 3203         JP     SUBB
                                   3204 
                                   3205 ;       QUERY   ( -- )
                                   3206 ;       Accept input stream to
                                   3207 ;       terminal input buffer.
      00127F 12 3B                 3208         .word      LINK
                                   3209         
                           001281  3210 LINK = . 
      001281 05                    3211         .byte      5
      001282 51 55 45 52 59        3212         .ascii     "QUERY"
      001287                       3213 QUERY:
      001287 CD 0B 4A         [ 4] 3214         CALL     TIB
      00128A CD 03 B4         [ 4] 3215         CALL     DOLIT
      00128D 00 50                 3216         .word      80
      00128F CD 12 42         [ 4] 3217         CALL     ACCEP
      001292 CD 05 C4         [ 4] 3218         CALL     NTIB
      001295 CD 04 1B         [ 4] 3219         CALL     STORE
      001298 CD 04 CF         [ 4] 3220         CALL     DROP
      00129B CD 0A 3A         [ 4] 3221         CALL     ZERO
      00129E CD 05 B4         [ 4] 3222         CALL     INN
      0012A1 CC 04 1B         [ 2] 3223         JP     STORE
                                   3224 
                                   3225 ;       ABORT   ( -- )
                                   3226 ;       Reset data stack and
                                   3227 ;       jump to QUIT.
      0012A4 12 81                 3228         .word      LINK
                           0012A6  3229 LINK = . 
      0012A6 05                    3230         .byte      5
      0012A7 41 42 4F 52 54        3231         .ascii     "ABORT"
      0012AC                       3232 ABORT:
      0012AC CD 13 A3         [ 4] 3233         CALL     PRESE
      0012AF CC 13 C0         [ 2] 3234         JP     QUIT
                                   3235 
                                   3236 ;       abort"  ( f -- )
                                   3237 ;       Run time routine of ABORT".
                                   3238 ;       Abort with a message.
      0012B2 12 A6                 3239         .word      LINK
                           0012B4  3240 LINK = . 
      0012B4 46                    3241 	.byte      COMPO+6
      0012B5 41 42 4F 52 54        3242         .ascii     "ABORT"
      0012BA 22                    3243         .byte      '"'
      0012BB                       3244 ABORQ:
      0012BB CD 03 E7         [ 4] 3245         CALL     QBRAN
      0012BE 12 DA                 3246         .word      ABOR2   ;text flag
      0012C0 CD 0E B6         [ 4] 3247         CALL     DOSTR
      0012C3 CD 0E 58         [ 4] 3248 ABOR1:  CALL     SPACE
      0012C6 CD 0B 11         [ 4] 3249         CALL     COUNT
      0012C9 CD 0E 82         [ 4] 3250         CALL     TYPES
      0012CC CD 03 B4         [ 4] 3251         CALL     DOLIT
      0012CF 00 3F                 3252         .word     63 ; "?"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      0012D1 CD 03 9E         [ 4] 3253         CALL     EMIT
      0012D4 CD 0E A0         [ 4] 3254         CALL     CR
      0012D7 CC 12 AC         [ 2] 3255         JP     ABORT   ;pass error string
      0012DA CD 0E B6         [ 4] 3256 ABOR2:  CALL     DOSTR
      0012DD CC 04 CF         [ 2] 3257         JP     DROP
                                   3258 
                                   3259 ;; The text interpreter
                                   3260 
                                   3261 ;       $INTERPRET      ( a -- )
                                   3262 ;       Interpret a word. If failed,
                                   3263 ;       try to convert it to an integer.
      0012E0 12 B4                 3264         .word      LINK
                           0012E2  3265 LINK = . 
      0012E2 0A                    3266         .byte      10
      0012E3 24 49 4E 54 45 52 50  3267         .ascii     "$INTERPRET"
             52 45 54
      0012ED                       3268 INTER:
      0012ED CD 11 AF         [ 4] 3269         CALL     NAMEQ
      0012F0 CD 06 83         [ 4] 3270         CALL     QDUP    ;?defined
      0012F3 CD 03 E7         [ 4] 3271         CALL     QBRAN
      0012F6 13 17                 3272         .word      INTE1
      0012F8 CD 04 32         [ 4] 3273         CALL     AT
      0012FB CD 03 B4         [ 4] 3274         CALL     DOLIT
      0012FE 40 00                 3275 	.word       0x4000	; COMPO*256
      001300 CD 05 25         [ 4] 3276         CALL     ANDD    ;?compile only lexicon bits
      001303 CD 12 BB         [ 4] 3277         CALL     ABORQ
      001306 0D                    3278         .byte      13
      001307 20 63 6F 6D 70 69 6C  3279         .ascii     " compile only"
             65 20 6F 6E 6C 79
      001314 CC 04 0E         [ 2] 3280         JP     EXECU
      001317 CD 0D 4D         [ 4] 3281 INTE1:  CALL     NUMBQ   ;convert a number
      00131A CD 03 E7         [ 4] 3282         CALL     QBRAN
      00131D 12 C3                 3283         .word    ABOR1
      00131F 81               [ 4] 3284         RET
                                   3285 
                                   3286 ;       [       ( -- )
                                   3287 ;       Start  text interpreter.
      001320 12 E2                 3288         .word      LINK
                           001322  3289 LINK = . 
      001322 81                    3290 	.byte      IMEDD+1
      001323 5B                    3291         .ascii     "["
      001324                       3292 LBRAC:
      001324 CD 03 B4         [ 4] 3293         CALL   DOLIT
      001327 12 ED                 3294         .word  INTER
      001329 CD 05 F7         [ 4] 3295         CALL   TEVAL
      00132C CC 04 1B         [ 2] 3296         JP     STORE
                                   3297 
                                   3298 ;       .OK     ( -- )
                                   3299 ;       Display 'ok' while interpreting.
      00132F 13 22                 3300         .word      LINK
                           001331  3301 LINK = . 
      001331 03                    3302         .byte      3
      001332 2E 4F 4B              3303         .ascii     ".OK"
      001335                       3304 DOTOK:
      001335 CD 03 B4         [ 4] 3305         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      001338 12 ED                 3306         .word      INTER
      00133A CD 05 F7         [ 4] 3307         CALL     TEVAL
      00133D CD 04 32         [ 4] 3308         CALL     AT
      001340 CD 07 75         [ 4] 3309         CALL     EQUAL
      001343 CD 03 E7         [ 4] 3310         CALL     QBRAN
      001346 13 4F                 3311         .word      DOTO1
      001348 CD 0E DF         [ 4] 3312         CALL     DOTQP
      00134B 03                    3313         .byte      3
      00134C 20 6F 6B              3314         .ascii     " ok"
      00134F CC 0E A0         [ 2] 3315 DOTO1:  JP     CR
                                   3316 
                                   3317 ;       ?STACK  ( -- )
                                   3318 ;       Abort if stack underflows.
      001352 13 31                 3319         .word      LINK
                           001354  3320 LINK = . 
      001354 06                    3321         .byte      6
      001355 3F 53 54 41 43 4B     3322         .ascii     "?STACK"
      00135B                       3323 QSTAC: 
      00135B CD 0A 7C         [ 4] 3324         CALL     DEPTH
      00135E CD 05 12         [ 4] 3325         CALL     ZLESS   ;check only for underflow
      001361 CD 12 BB         [ 4] 3326         CALL     ABORQ
      001364 0B                    3327         .byte      11
      001365 20 75 6E 64 65 72 66  3328         .ascii     " underflow "
             6C 6F 77 20
      001370 81               [ 4] 3329         RET
                                   3330 
                                   3331 ;       EVAL    ( -- )
                                   3332 ;       Interpret  input stream.
      001371 13 54                 3333         .word      LINK
                           001373  3334 LINK = . 
      001373 04                    3335         .byte      4
      001374 45 56 41 4C           3336         .ascii     "EVAL"
      001378                       3337 EVAL:
      001378 CD 10 B2         [ 4] 3338 EVAL1:  CALL     TOKEN
      00137B CD 04 D9         [ 4] 3339         CALL     DUPP
      00137E CD 04 50         [ 4] 3340         CALL     CAT     ;?input stream empty
      001381 CD 03 E7         [ 4] 3341         CALL     QBRAN
      001384 13 94                 3342         .word    EVAL2
      001386 CD 05 F7         [ 4] 3343         CALL     TEVAL
      001389 CD 0B 5E         [ 4] 3344         CALL     ATEXE
      00138C CD 13 5B         [ 4] 3345         CALL     QSTAC   ;evaluate input, check stack
      00138F CD 03 FE         [ 4] 3346         CALL     BRAN
      001392 13 78                 3347         .word    EVAL1
      001394 CD 04 CF         [ 4] 3348 EVAL2:  CALL     DROP
      001397 CC 13 35         [ 2] 3349         JP       DOTOK
                                   3350 
                                   3351 ;       PRESET  ( -- )
                                   3352 ;       Reset data stack pointer and
                                   3353 ;       terminal input buffer.
      00139A 13 73                 3354         .word      LINK
                           00139C  3355 LINK = . 
      00139C 06                    3356         .byte      6
      00139D 50 52 45 53 45 54     3357         .ascii     "PRESET"
      0013A3                       3358 PRESE:
      0013A3 CD 03 B4         [ 4] 3359         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      0013A6 16 80                 3360         .word      SPP
      0013A8 CD 04 C6         [ 4] 3361         CALL     SPSTO
      0013AB CD 03 B4         [ 4] 3362         CALL     DOLIT
      0013AE 17 00                 3363         .word      TIBB
      0013B0 CD 05 C4         [ 4] 3364         CALL     NTIB
      0013B3 CD 09 A3         [ 4] 3365         CALL     CELLP
      0013B6 CC 04 1B         [ 2] 3366         JP     STORE
                                   3367 
                                   3368 ;       QUIT    ( -- )
                                   3369 ;       Reset return stack pointer
                                   3370 ;       and start text interpreter.
      0013B9 13 9C                 3371         .word      LINK
                           0013BB  3372 LINK = . 
      0013BB 04                    3373         .byte      4
      0013BC 51 55 49 54           3374         .ascii     "QUIT"
      0013C0                       3375 QUIT:
      0013C0 CD 03 B4         [ 4] 3376         CALL     DOLIT
      0013C3 17 FF                 3377         .word      RPP
      0013C5 CD 04 6D         [ 4] 3378         CALL     RPSTO   ;reset return stack pointer
      0013C8 CD 13 24         [ 4] 3379 QUIT1:  CALL     LBRAC   ;start interpretation
      0013CB CD 12 87         [ 4] 3380 QUIT2:  CALL     QUERY   ;get input
      0013CE CD 13 78         [ 4] 3381         CALL     EVAL
      0013D1 20 F8            [ 2] 3382         JRA     QUIT2   ;continue till error
                                   3383 
                                   3384 ;; The compiler
                                   3385 
                                   3386 ;       '       ( -- ca )
                                   3387 ;       Search vocabularies for
                                   3388 ;       next word in input stream.
      0013D3 13 BB                 3389         .word      LINK
                           0013D5  3390 LINK = . 
      0013D5 01                    3391         .byte      1
      0013D6 27                    3392         .ascii     "'"
      0013D7                       3393 TICK:
      0013D7 CD 10 B2         [ 4] 3394         CALL     TOKEN
      0013DA CD 11 AF         [ 4] 3395         CALL     NAMEQ   ;?defined
      0013DD CD 03 E7         [ 4] 3396         CALL     QBRAN
      0013E0 12 C3                 3397         .word      ABOR1
      0013E2 81               [ 4] 3398         RET     ;yes, push code address
                                   3399 
                                   3400 ;       ALLOT   ( n -- )
                                   3401 ;       Allocate n bytes to RAM 
      0013E3 13 D5                 3402         .word      LINK
                           0013E5  3403         LINK = . 
      0013E5 05                    3404         .byte      5
      0013E6 41 4C 4C 4F 54        3405         .ascii     "ALLOT"
      0013EB                       3406 ALLOT:
      0013EB CD 06 27         [ 4] 3407         CALL     VPP
                                   3408 ; must update APP_VP each time VP is modidied
      0013EE CD 0A AA         [ 4] 3409         call PSTOR 
      0013F1 CC 1B 34         [ 2] 3410         jp UPDATVP 
                                   3411 
                                   3412 ;       ,       ( w -- )
                                   3413 ;         Compile an integer into
                                   3414 ;         variable space.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      0013F4 13 E5                 3415         .word      LINK
                           0013F6  3416 LINK = . 
      0013F6 01                    3417         .byte      1
      0013F7 2C                    3418         .ascii     ","
      0013F8                       3419 COMMA:
      0013F8 CD 0B 28         [ 4] 3420         CALL     HERE
      0013FB CD 04 D9         [ 4] 3421         CALL     DUPP
      0013FE CD 09 A3         [ 4] 3422         CALL     CELLP   ;cell boundary
      001401 CD 06 27         [ 4] 3423         CALL     VPP
      001404 CD 04 1B         [ 4] 3424         CALL     STORE
      001407 CC 04 1B         [ 2] 3425         JP     STORE
                                   3426 
                                   3427 ;       C,      ( c -- )
                                   3428 ;       Compile a byte into
                                   3429 ;       variables space.
      00140A 13 F6                 3430        .word      LINK
                           00140C  3431 LINK = . 
      00140C 02                    3432         .byte      2
      00140D 43 2C                 3433         .ascii     "C,"
      00140F                       3434 CCOMMA:
      00140F CD 0B 28         [ 4] 3435         CALL     HERE
      001412 CD 04 D9         [ 4] 3436         CALL     DUPP
      001415 CD 09 CE         [ 4] 3437         CALL     ONEP
      001418 CD 06 27         [ 4] 3438         CALL     VPP
      00141B CD 04 1B         [ 4] 3439         CALL     STORE
      00141E CC 04 3F         [ 2] 3440         JP     CSTOR
                                   3441 
                                   3442 ;       [COMPILE]       ( -- ; <string> )
                                   3443 ;       Compile next immediate
                                   3444 ;       word into code dictionary.
      001421 14 0C                 3445         .word      LINK
                           001423  3446 LINK = . 
      001423 89                    3447 	.byte      IMEDD+9
      001424 5B 43 4F 4D 50 49 4C  3448         .ascii     "[COMPILE]"
             45 5D
      00142D                       3449 BCOMP:
      00142D CD 13 D7         [ 4] 3450         CALL     TICK
      001430 CC 16 F3         [ 2] 3451         JP     JSRC
                                   3452 
                                   3453 ;       COMPILE ( -- )
                                   3454 ;       Compile next jsr in
                                   3455 ;       colon list to code dictionary.
      001433 14 23                 3456         .word      LINK
                           001435  3457 LINK = . 
      001435 47                    3458 	.byte      COMPO+7
      001436 43 4F 4D 50 49 4C 45  3459         .ascii     "COMPILE"
      00143D                       3460 COMPI:
      00143D CD 04 83         [ 4] 3461         CALL     RFROM
      001440 CD 04 D9         [ 4] 3462         CALL     DUPP
      001443 CD 04 32         [ 4] 3463         CALL     AT
      001446 CD 16 F3         [ 4] 3464         CALL     JSRC    ;compile subroutine
      001449 CD 09 A3         [ 4] 3465         CALL     CELLP
      00144C 90 93            [ 1] 3466         ldw y,x 
      00144E 90 FE            [ 2] 3467         ldw y,(y)
      001450 1C 00 02         [ 2] 3468         addw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      001453 90 FC            [ 2] 3469         jp (y)
                                   3470 
                                   3471 ;       LITERAL ( w -- )
                                   3472 ;       Compile tos to dictionary
                                   3473 ;       as an integer literal.
      001455 14 35                 3474         .word      LINK
                           001457  3475 LINK = . 
      001457 87                    3476 	.byte      IMEDD+7
      001458 4C 49 54 45 52 41 4C  3477         .ascii     "LITERAL"
      00145F                       3478 LITER:
      00145F CD 14 3D         [ 4] 3479         CALL     COMPI
      001462 03 B4                 3480         .word DOLIT 
      001464 CC 13 F8         [ 2] 3481         JP     COMMA
                                   3482 
                                   3483 ;       $,"     ( -- )
                                   3484 ;       Compile a literal string
                                   3485 ;       up to next " .
      001467 14 57                 3486         .word      LINK
                           001469  3487 LINK = . 
      001469 03                    3488         .byte      3
      00146A 24 2C 22              3489         .byte     '$',',','"'
      00146D                       3490 STRCQ:
      00146D CD 03 B4         [ 4] 3491         CALL     DOLIT
      001470 00 22                 3492         .word     34	; "
      001472 CD 10 35         [ 4] 3493         CALL     PARSE
      001475 CD 0B 28         [ 4] 3494         CALL     HERE
      001478 CD 0B E8         [ 4] 3495         CALL     PACKS   ;string to code dictionary
      00147B CD 0B 11         [ 4] 3496         CALL     COUNT
      00147E CD 06 D4         [ 4] 3497         CALL     PLUS    ;calculate aligned end of string
      001481 CD 06 27         [ 4] 3498         CALL     VPP
      001484 CC 04 1B         [ 2] 3499         JP     STORE
                                   3500 
                                   3501 ;; Structures
                                   3502 
                                   3503 ;       FOR     ( -- a )
                                   3504 ;       Start a FOR-NEXT loop
                                   3505 ;       structure in a colon definition.
      001487 14 69                 3506         .word      LINK
                           001489  3507 LINK = . 
      001489 83                    3508 	.byte      IMEDD+3
      00148A 46 4F 52              3509         .ascii     "FOR"
      00148D                       3510 FOR:
      00148D CD 14 3D         [ 4] 3511         CALL     COMPI
      001490 04 A2                 3512         .word TOR 
      001492 CC 0B 28         [ 2] 3513         JP     HERE
                                   3514 
                                   3515 ;       NEXT    ( a -- )
                                   3516 ;       Terminate a FOR-NEXT loop.
      001495 14 89                 3517         .word      LINK
                           001497  3518 LINK = . 
      001497 84                    3519 	.byte      IMEDD+4
      001498 4E 45 58 54           3520         .ascii     "NEXT"
      00149C                       3521 NEXT:
      00149C CD 14 3D         [ 4] 3522         CALL     COMPI
      00149F 03 C8                 3523         .word DONXT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      0014A1 CD 06 73         [ 4] 3524         call ADRADJ
      0014A4 CC 13 F8         [ 2] 3525         JP     COMMA
                                   3526 
                                   3527 ;       I ( -- n )
                                   3528 ;       stack FOR-NEXT COUNTER 
      0014A7 14 97                 3529         .word LINK 
                           0014A9  3530         LINK=.
      0014A9 01                    3531         .byte 1 
      0014AA 49                    3532         .ascii "I"
      0014AB                       3533 IFETCH: 
      0014AB 1D 00 02         [ 2] 3534         subw x,#CELLL 
      0014AE 16 03            [ 2] 3535         ldw y,(3,sp)
      0014B0 FF               [ 2] 3536         ldw (x),y 
      0014B1 81               [ 4] 3537         ret 
                                   3538 
                                   3539 ;       BEGIN   ( -- a )
                                   3540 ;       Start an infinite or
                                   3541 ;       indefinite loop structure.
      0014B2 14 A9                 3542         .word      LINK
                           0014B4  3543 LINK = . 
      0014B4 85                    3544 	.byte      IMEDD+5
      0014B5 42 45 47 49 4E        3545         .ascii     "BEGIN"
      0014BA                       3546 BEGIN:
      0014BA CC 0B 28         [ 2] 3547         JP     HERE
                                   3548 
                                   3549 ;       UNTIL   ( a -- )
                                   3550 ;       Terminate a BEGIN-UNTIL
                                   3551 ;       indefinite loop structure.
      0014BD 14 B4                 3552         .word      LINK
                           0014BF  3553 LINK = . 
      0014BF 85                    3554 	.byte      IMEDD+5
      0014C0 55 4E 54 49 4C        3555         .ascii     "UNTIL"
      0014C5                       3556 UNTIL:
      0014C5 CD 14 3D         [ 4] 3557         CALL     COMPI
      0014C8 03 E7                 3558         .word    QBRAN 
      0014CA CD 06 73         [ 4] 3559         call ADRADJ
      0014CD CC 13 F8         [ 2] 3560         JP     COMMA
                                   3561 
                                   3562 ;       AGAIN   ( a -- )
                                   3563 ;       Terminate a BEGIN-AGAIN
                                   3564 ;       infinite loop structure.
      0014D0 14 BF                 3565         .word      LINK
                           0014D2  3566 LINK = . 
      0014D2 85                    3567 	.byte      IMEDD+5
      0014D3 41 47 41 49 4E        3568         .ascii     "AGAIN"
      0014D8                       3569 AGAIN:
      0014D8 CD 14 3D         [ 4] 3570         CALL     COMPI
      0014DB 03 FE                 3571         .word BRAN
      0014DD CD 06 73         [ 4] 3572         call ADRADJ 
      0014E0 CC 13 F8         [ 2] 3573         JP     COMMA
                                   3574 
                                   3575 ;       IF      ( -- A )
                                   3576 ;       Begin a conditional branch.
      0014E3 14 D2                 3577         .word      LINK
                           0014E5  3578 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      0014E5 82                    3579 	.byte      IMEDD+2
      0014E6 49 46                 3580         .ascii     "IF"
      0014E8                       3581 IFF:
      0014E8 CD 14 3D         [ 4] 3582         CALL     COMPI
      0014EB 03 E7                 3583         .word QBRAN
      0014ED CD 0B 28         [ 4] 3584         CALL     HERE
      0014F0 CD 0A 3A         [ 4] 3585         CALL     ZERO
      0014F3 CC 13 F8         [ 2] 3586         JP     COMMA
                                   3587 
                                   3588 ;       THEN        ( A -- )
                                   3589 ;       Terminate a conditional branch structure.
      0014F6 14 E5                 3590         .word      LINK
                           0014F8  3591 LINK = . 
      0014F8 84                    3592 	.byte      IMEDD+4
      0014F9 54 48 45 4E           3593         .ascii     "THEN"
      0014FD                       3594 THENN:
      0014FD CD 0B 28         [ 4] 3595         CALL     HERE
      001500 CD 06 73         [ 4] 3596         call ADRADJ 
      001503 CD 04 E9         [ 4] 3597         CALL     SWAPP
      001506 CC 04 1B         [ 2] 3598         JP     STORE
                                   3599 
                                   3600 ;       ELSE        ( A -- A )
                                   3601 ;       Start the false clause in an IF-ELSE-THEN structure.
      001509 14 F8                 3602         .word      LINK
                           00150B  3603 LINK = . 
      00150B 84                    3604 	.byte      IMEDD+4
      00150C 45 4C 53 45           3605         .ascii     "ELSE"
      001510                       3606 ELSEE:
      001510 CD 14 3D         [ 4] 3607         CALL     COMPI
      001513 03 FE                 3608         .word BRAN
      001515 CD 0B 28         [ 4] 3609         CALL     HERE
      001518 CD 0A 3A         [ 4] 3610         CALL     ZERO
      00151B CD 13 F8         [ 4] 3611         CALL     COMMA
      00151E CD 04 E9         [ 4] 3612         CALL     SWAPP
      001521 CD 0B 28         [ 4] 3613         CALL     HERE
      001524 CD 06 73         [ 4] 3614         call ADRADJ 
      001527 CD 04 E9         [ 4] 3615         CALL     SWAPP
      00152A CC 04 1B         [ 2] 3616         JP     STORE
                                   3617 
                                   3618 ;       AHEAD       ( -- A )
                                   3619 ;       Compile a forward branch instruction.
      00152D 15 0B                 3620         .word      LINK
                           00152F  3621 LINK = . 
      00152F 85                    3622 	.byte      IMEDD+5
      001530 41 48 45 41 44        3623         .ascii     "AHEAD"
      001535                       3624 AHEAD:
      001535 CD 14 3D         [ 4] 3625         CALL     COMPI
      001538 03 FE                 3626         .word BRAN
      00153A CD 0B 28         [ 4] 3627         CALL     HERE
      00153D CD 0A 3A         [ 4] 3628         CALL     ZERO
      001540 CC 13 F8         [ 2] 3629         JP     COMMA
                                   3630 
                                   3631 ;       WHILE       ( a -- A a )
                                   3632 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      001543 15 2F                 3633         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                           001545  3634 LINK = . 
      001545 85                    3635 	.byte      IMEDD+5
      001546 57 48 49 4C 45        3636         .ascii     "WHILE"
      00154B                       3637 WHILE:
      00154B CD 14 3D         [ 4] 3638         CALL     COMPI
      00154E 03 E7                 3639         .word QBRAN
      001550 CD 0B 28         [ 4] 3640         CALL     HERE
      001553 CD 0A 3A         [ 4] 3641         CALL     ZERO
      001556 CD 13 F8         [ 4] 3642         CALL     COMMA
      001559 CC 04 E9         [ 2] 3643         JP     SWAPP
                                   3644 
                                   3645 ;       REPEAT      ( A a -- )
                                   3646 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      00155C 15 45                 3647         .word      LINK
                           00155E  3648 LINK = . 
      00155E 86                    3649         .byte      IMEDD+6
      00155F 52 45 50 45 41 54     3650         .ascii     "REPEAT"
      001565                       3651 REPEA:
      001565 CD 14 3D         [ 4] 3652         CALL     COMPI
      001568 03 FE                 3653         .word BRAN
      00156A CD 06 73         [ 4] 3654         call ADRADJ 
      00156D CD 13 F8         [ 4] 3655         CALL     COMMA
      001570 CD 0B 28         [ 4] 3656         CALL     HERE
      001573 CD 06 73         [ 4] 3657         call ADRADJ 
      001576 CD 04 E9         [ 4] 3658         CALL     SWAPP
      001579 CC 04 1B         [ 2] 3659         JP     STORE
                                   3660 
                                   3661 ;       AFT         ( a -- a A )
                                   3662 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      00157C 15 5E                 3663         .word      LINK
                           00157E  3664 LINK = . 
      00157E 83                    3665 	.byte      IMEDD+3
      00157F 41 46 54              3666         .ascii     "AFT"
      001582                       3667 AFT:
      001582 CD 04 CF         [ 4] 3668         CALL     DROP
      001585 CD 15 35         [ 4] 3669         CALL     AHEAD
      001588 CD 0B 28         [ 4] 3670         CALL     HERE
      00158B CC 04 E9         [ 2] 3671         JP     SWAPP
                                   3672 
                                   3673 ;       ABORT"      ( -- ; <string> )
                                   3674 ;       Conditional abort with an error message.
      00158E 15 7E                 3675         .word      LINK
                           001590  3676 LINK = . 
      001590 86                    3677 	.byte      IMEDD+6
      001591 41 42 4F 52 54        3678         .ascii     "ABORT"
      001596 22                    3679         .byte      '"'
      001597                       3680 ABRTQ:
      001597 CD 14 3D         [ 4] 3681         CALL     COMPI
      00159A 12 BB                 3682         .word ABORQ
      00159C CC 14 6D         [ 2] 3683         JP     STRCQ
                                   3684 
                                   3685 ;       $"     ( -- ; <string> )
                                   3686 ;       Compile an inline string literal.
      00159F 15 90                 3687         .word      LINK
                           0015A1  3688 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      0015A1 82                    3689 	.byte      IMEDD+2
      0015A2 24 22                 3690         .byte     '$','"'
      0015A4                       3691 STRQ:
      0015A4 CD 14 3D         [ 4] 3692         CALL     COMPI
      0015A7 0E D5                 3693         .word STRQP 
      0015A9 CC 14 6D         [ 2] 3694         JP     STRCQ
                                   3695 
                                   3696 ;       ."          ( -- ; <string> )
                                   3697 ;       Compile an inline string literal to be typed out at run time.
      0015AC 15 A1                 3698         .word      LINK
                           0015AE  3699 LINK = . 
      0015AE 82                    3700 	.byte      IMEDD+2
      0015AF 2E 22                 3701         .byte     '.','"'
      0015B1                       3702 DOTQ:
      0015B1 CD 14 3D         [ 4] 3703         CALL     COMPI
      0015B4 0E DF                 3704         .word DOTQP 
      0015B6 CC 14 6D         [ 2] 3705         JP     STRCQ
                                   3706 
                                   3707 ;; Name compiler
                                   3708 
                                   3709 ;       ?UNIQUE ( a -- a )
                                   3710 ;       Display a warning message
                                   3711 ;       if word already exists.
      0015B9 15 AE                 3712         .word      LINK
                           0015BB  3713 LINK = . 
      0015BB 07                    3714         .byte      7
      0015BC 3F 55 4E 49 51 55 45  3715         .ascii     "?UNIQUE"
      0015C3                       3716 UNIQU:
      0015C3 CD 04 D9         [ 4] 3717         CALL     DUPP
      0015C6 CD 11 AF         [ 4] 3718         CALL     NAMEQ   ;?name exists
      0015C9 CD 03 E7         [ 4] 3719         CALL     QBRAN
      0015CC 15 E2                 3720         .word      UNIQ1
      0015CE CD 0E DF         [ 4] 3721         CALL     DOTQP   ;redef are OK
      0015D1 07                    3722         .byte       7
      0015D2 20 72 65 44 65 66 20  3723         .ascii     " reDef "       
      0015D9 CD 05 03         [ 4] 3724         CALL     OVER
      0015DC CD 0B 11         [ 4] 3725         CALL     COUNT
      0015DF CD 0E 82         [ 4] 3726         CALL     TYPES   ;just in case
      0015E2 CC 04 CF         [ 2] 3727 UNIQ1:  JP     DROP
                                   3728 
                                   3729 ;       $,n     ( na -- )
                                   3730 ;       Build a new dictionary name
                                   3731 ;       using string at na.
                                   3732 ; compile dans l'espace des variables 
      0015E5 15 BB                 3733         .word      LINK
                           0015E7  3734 LINK = . 
      0015E7 03                    3735         .byte      3
      0015E8 24 2C 6E              3736         .ascii     "$,n"
      0015EB                       3737 SNAME:
      0015EB CD 04 D9         [ 4] 3738         CALL     DUPP
      0015EE CD 04 50         [ 4] 3739         CALL     CAT     ;?null input
      0015F1 CD 03 E7         [ 4] 3740         CALL     QBRAN
      0015F4 16 21                 3741         .word      PNAM1
      0015F6 CD 15 C3         [ 4] 3742         CALL     UNIQU   ;?redefinition
      0015F9 CD 04 D9         [ 4] 3743         CALL     DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      0015FC CD 0B 11         [ 4] 3744         CALL     COUNT
      0015FF CD 06 D4         [ 4] 3745         CALL     PLUS
      001602 CD 06 27         [ 4] 3746         CALL     VPP
      001605 CD 04 1B         [ 4] 3747         CALL     STORE
      001608 CD 04 D9         [ 4] 3748         CALL     DUPP
      00160B CD 06 45         [ 4] 3749         CALL     LAST
      00160E CD 04 1B         [ 4] 3750         CALL     STORE   ;save na for vocabulary link
      001611 CD 09 B2         [ 4] 3751         CALL     CELLM   ;link address
      001614 CD 06 19         [ 4] 3752         CALL     CNTXT
      001617 CD 04 32         [ 4] 3753         CALL     AT
      00161A CD 04 E9         [ 4] 3754         CALL     SWAPP
      00161D CD 04 1B         [ 4] 3755         CALL     STORE
      001620 81               [ 4] 3756         RET     ;save code pointer
      001621 CD 0E D5         [ 4] 3757 PNAM1:  CALL     STRQP
      001624 05                    3758         .byte      5
      001625 20 6E 61 6D 65        3759         .ascii     " name" ;null input
      00162A CC 12 C3         [ 2] 3760         JP     ABOR1
                                   3761 
                                   3762 ;; FORTH compiler
                                   3763 
                                   3764 ;       $COMPILE        ( a -- )
                                   3765 ;       Compile next word to
                                   3766 ;       dictionary as a token or literal.
      00162D 15 E7                 3767         .word      LINK
                           00162F  3768 LINK = . 
      00162F 08                    3769         .byte      8
      001630 24 43 4F 4D 50 49 4C  3770         .ascii     "$COMPILE"
             45
      001638                       3771 SCOMP:
      001638 CD 11 AF         [ 4] 3772         CALL     NAMEQ
      00163B CD 06 83         [ 4] 3773         CALL     QDUP    ;?defined
      00163E CD 03 E7         [ 4] 3774         CALL     QBRAN
      001641 16 59                 3775         .word      SCOM2
      001643 CD 04 32         [ 4] 3776         CALL     AT
      001646 CD 03 B4         [ 4] 3777         CALL     DOLIT
      001649 80 00                 3778         .word     0x8000	;  IMEDD*256
      00164B CD 05 25         [ 4] 3779         CALL     ANDD    ;?immediate
      00164E CD 03 E7         [ 4] 3780         CALL     QBRAN
      001651 16 56                 3781         .word      SCOM1
      001653 CC 04 0E         [ 2] 3782         JP     EXECU
      001656 CC 16 F3         [ 2] 3783 SCOM1:  JP     JSRC
      001659 CD 0D 4D         [ 4] 3784 SCOM2:  CALL     NUMBQ   ;try to convert to number
      00165C CD 03 E7         [ 4] 3785         CALL     QBRAN
      00165F 12 C3                 3786         .word      ABOR1
      001661 CC 14 5F         [ 2] 3787         JP     LITER
                                   3788 
                                   3789 ;       OVERT   ( -- )
                                   3790 ;       Link a new word into vocabulary.
      001664 16 2F                 3791         .word      LINK
                           001666  3792 LINK = . 
      001666 05                    3793         .byte      5
      001667 4F 56 45 52 54        3794         .ascii     "OVERT"
      00166C                       3795 OVERT:
      00166C CD 06 45         [ 4] 3796         CALL     LAST
      00166F CD 04 32         [ 4] 3797         CALL     AT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      001672 CD 06 19         [ 4] 3798         CALL     CNTXT
      001675 CC 04 1B         [ 2] 3799         JP     STORE
                                   3800 
                                   3801 ;       ;       ( -- )
                                   3802 ;       Terminate a colon definition.
      001678 16 66                 3803         .word      LINK
                           00167A  3804 LINK = . 
      00167A C1                    3805 	.byte      IMEDD+COMPO+1
      00167B 3B                    3806         .ascii     ";"
      00167C                       3807 SEMIS:
                           000001  3808 .if OPTIMIZE ; more compact and faster
      00167C CD 03 B4         [ 4] 3809         call DOLIT 
      00167F 00 81                 3810         .word 0x81   ; opcode for RET 
      001681 CD 14 0F         [ 4] 3811         call CCOMMA 
                           000000  3812 .else
                                   3813         CALL     COMPI
                                   3814         .word EXIT 
                                   3815 .endif 
      001684 CD 13 24         [ 4] 3816         CALL     LBRAC
      001687 CD 16 6C         [ 4] 3817         call OVERT 
      00168A CD 20 6E         [ 4] 3818         CALL FMOVE
      00168D CD 06 83         [ 4] 3819         call QDUP 
      001690 CD 03 E7         [ 4] 3820         call QBRAN 
      001693 17 C3                 3821         .word SET_RAMLAST 
      001695 CD 21 02         [ 4] 3822         CALL UPDATPTR
      001698 81               [ 4] 3823         RET 
                                   3824 
                                   3825 
                                   3826 ;       Terminate an ISR definition 
                                   3827 ;       retourn ca of ISR as double
                                   3828 ;       I; ( -- ud )
      001699 16 7A                 3829         .word LINK 
                           00169B  3830         LINK=.
      00169B C2                    3831         .byte 2+IMEDD+COMPO 
      00169C 49 3B                 3832         .ascii "I;" 
      00169E                       3833 ISEMI:
      00169E 1D 00 02         [ 2] 3834         subw x,#CELLL  
      0016A1 90 AE 00 80      [ 2] 3835         ldw y,#IRET_CODE 
      0016A5 FF               [ 2] 3836         ldw (x),y 
      0016A6 CD 14 0F         [ 4] 3837         call CCOMMA
      0016A9 CD 13 24         [ 4] 3838         call LBRAC 
      0016AC CD 21 47         [ 4] 3839         call IFMOVE
      0016AF CD 06 83         [ 4] 3840         call QDUP 
      0016B2 CD 03 E7         [ 4] 3841         CALL QBRAN 
      0016B5 17 C3                 3842         .word SET_RAMLAST
      0016B7 CD 06 35         [ 4] 3843         CALL CPP
      0016BA CD 04 32         [ 4] 3844         call AT 
      0016BD CD 04 E9         [ 4] 3845         call SWAPP 
      0016C0 CD 06 35         [ 4] 3846         CALL CPP 
      0016C3 CD 04 1B         [ 4] 3847         call STORE 
      0016C6 CD 1B 1D         [ 4] 3848         call UPDATCP 
      0016C9 CD 1A DA         [ 4] 3849         call EEPVP 
      0016CC CD 04 CF         [ 4] 3850         call DROP 
      0016CF CD 04 32         [ 4] 3851         call AT 
      0016D2 CD 06 27         [ 4] 3852         call VPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      0016D5 CD 04 1B         [ 4] 3853         call STORE 
      0016D8 CC 0A 3A         [ 2] 3854         jp ZERO
      0016DB 81               [ 4] 3855         ret           
                                   3856         
                                   3857 
                                   3858 ;       ]       ( -- )
                                   3859 ;       Start compiling words in
                                   3860 ;       input stream.
      0016DC 16 9B                 3861         .word      LINK
                           0016DE  3862 LINK = . 
      0016DE 01                    3863         .byte      1
      0016DF 5D                    3864         .ascii     "]"
      0016E0                       3865 RBRAC:
      0016E0 CD 03 B4         [ 4] 3866         CALL   DOLIT
      0016E3 16 38                 3867         .word  SCOMP
      0016E5 CD 05 F7         [ 4] 3868         CALL   TEVAL
      0016E8 CC 04 1B         [ 2] 3869         JP     STORE
                                   3870 
                                   3871 ;       CALL,    ( ca -- )
                                   3872 ;       Compile a subroutine call.
      0016EB 16 DE                 3873         .word      LINK
                           0016ED  3874 LINK = . 
      0016ED 05                    3875         .byte      5
      0016EE 43 41 4C 4C 2C        3876         .ascii     "CALL,"
      0016F3                       3877 JSRC:
      0016F3 CD 03 B4         [ 4] 3878         CALL     DOLIT
      0016F6 00 CD                 3879         .word     CALLL     ;CALL
      0016F8 CD 14 0F         [ 4] 3880         CALL     CCOMMA
      0016FB CC 13 F8         [ 2] 3881         JP     COMMA
                                   3882 
                                   3883 ;       INIT-OFS ( -- )
                                   3884 ;       compute offset to adjust jump address 
                                   3885 ;       set variable OFFSET 
      0016FE 16 ED                 3886         .word LINK 
                           001700  3887         LINK=.
      001700 08                    3888         .byte 8 
      001701 49 4E 49 54 2D 4F 46  3889         .ascii "INIT-OFS" 
             53
      001709                       3890 INITOFS:
      001709 CD 05 E6         [ 4] 3891         call TFLASH 
      00170C CD 04 32         [ 4] 3892         CALL AT 
      00170F CD 04 D9         [ 4] 3893         CALL DUPP 
      001712 CD 03 E7         [ 4] 3894         call QBRAN
      001715 17 26                 3895         .word 1$
      001717 CD 04 CF         [ 4] 3896         call DROP  
      00171A CD 06 35         [ 4] 3897         call CPP 
      00171D CD 04 32         [ 4] 3898         call AT 
      001720 CD 0B 28         [ 4] 3899         call HERE
      001723 CD 07 4D         [ 4] 3900         call SUBB 
      001726 CD 06 6A         [ 4] 3901 1$:     call OFFSET 
      001729 CC 04 1B         [ 2] 3902         jp STORE  
                                   3903 
                                   3904 ;       :       ( -- ; <string> )
                                   3905 ;       Start a new colon definition
                                   3906 ;       using next word as its name.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      00172C 17 00                 3907         .word      LINK
                           00172E  3908 LINK = . 
      00172E 01                    3909         .byte      1
      00172F 3A                    3910         .ascii     ":"
      001730                       3911 COLON:
      001730 CD 17 09         [ 4] 3912         call INITOFS       
      001733 CD 10 B2         [ 4] 3913         CALL   TOKEN
      001736 CD 15 EB         [ 4] 3914         CALL   SNAME
      001739 CC 16 E0         [ 2] 3915         JP     RBRAC
                                   3916 
                                   3917 ;       I:  ( -- )
                                   3918 ;       Start interrupt service routine definition
                                   3919 ;       those definition have no name.
      00173C 17 2E                 3920         .word LINK
                           00173E  3921         LINK=.
      00173E 02                    3922         .byte 2 
      00173F 49 3A                 3923         .ascii "I:" 
      001741                       3924 ICOLON:
      001741 CD 17 09         [ 4] 3925         call INITOFS 
      001744 CC 16 E0         [ 2] 3926         jp RBRAC  
                                   3927 
                                   3928 ;       IMMEDIATE       ( -- )
                                   3929 ;       Make last compiled word
                                   3930 ;       an immediate word.
      001747 17 3E                 3931         .word      LINK
                           001749  3932 LINK = . 
      001749 09                    3933         .byte      9
      00174A 49 4D 4D 45 44 49 41  3934         .ascii     "IMMEDIATE"
             54 45
      001753                       3935 IMMED:
      001753 CD 03 B4         [ 4] 3936         CALL     DOLIT
      001756 80 00                 3937         .word     0x8000	;  IMEDD*256
      001758 CD 06 45         [ 4] 3938         CALL     LAST
      00175B CD 04 32         [ 4] 3939         CALL     AT
      00175E CD 04 32         [ 4] 3940         CALL     AT
      001761 CD 05 39         [ 4] 3941         CALL     ORR
      001764 CD 06 45         [ 4] 3942         CALL     LAST
      001767 CD 04 32         [ 4] 3943         CALL     AT
      00176A CC 04 1B         [ 2] 3944         JP     STORE
                                   3945 
                                   3946 ;; Defining words
                                   3947 
                                   3948 ;       CREATE  ( -- ; <string> )
                                   3949 ;       Compile a new array
                                   3950 ;       without allocating space.
      00176D 17 49                 3951         .word      LINK
                           00176F  3952 LINK = . 
      00176F 06                    3953         .byte      6
      001770 43 52 45 41 54 45     3954         .ascii     "CREATE"
      001776                       3955 CREAT:
      001776 CD 10 B2         [ 4] 3956         CALL     TOKEN
      001779 CD 15 EB         [ 4] 3957         CALL     SNAME
      00177C CD 16 6C         [ 4] 3958         CALL     OVERT        
      00177F CD 14 3D         [ 4] 3959         CALL     COMPI 
      001782 05 86                 3960         .word DOVAR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      001784 81               [ 4] 3961         RET
                                   3962 
                                   3963 ;       VARIABLE        ( -- ; <string> )
                                   3964 ;       Compile a new variable
                                   3965 ;       initialized to 0.
      001785 17 6F                 3966         .word      LINK
                           001787  3967 LINK = . 
      001787 08                    3968         .byte      8
      001788 56 41 52 49 41 42 4C  3969         .ascii     "VARIABLE"
             45
      001790                       3970 VARIA:
                                   3971 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      001790 CD 0B 28         [ 4] 3972         CALL HERE
      001793 CD 04 D9         [ 4] 3973         CALL DUPP 
      001796 CD 09 A3         [ 4] 3974         CALL CELLP
      001799 CD 06 27         [ 4] 3975         CALL VPP 
      00179C CD 04 1B         [ 4] 3976         CALL STORE
      00179F CD 17 76         [ 4] 3977         CALL CREAT
      0017A2 CD 04 D9         [ 4] 3978         CALL DUPP
      0017A5 CD 13 F8         [ 4] 3979         CALL COMMA
      0017A8 CD 0A 3A         [ 4] 3980         CALL ZERO
      0017AB CD 04 E9         [ 4] 3981         call SWAPP 
      0017AE CD 04 1B         [ 4] 3982         CALL STORE
      0017B1 CD 20 6E         [ 4] 3983         CALL FMOVE ; move definition to FLASH
      0017B4 CD 06 83         [ 4] 3984         CALL QDUP 
      0017B7 CD 03 E7         [ 4] 3985         CALL QBRAN 
      0017BA 17 C3                 3986         .word SET_RAMLAST   
      0017BC CD 1B 34         [ 4] 3987         call UPDATVP  ; don't update if variable kept in RAM.
      0017BF CD 21 02         [ 4] 3988         CALL UPDATPTR
      0017C2 81               [ 4] 3989         RET         
      0017C3                       3990 SET_RAMLAST: 
      0017C3 CD 06 45         [ 4] 3991         CALL LAST 
      0017C6 CD 04 32         [ 4] 3992         CALL AT 
      0017C9 CD 06 58         [ 4] 3993         CALL RAMLAST 
      0017CC CC 04 1B         [ 2] 3994         jp STORE  
                                   3995 
                                   3996 
                                   3997 ;       CONSTANT  ( n -- ; <string> )
                                   3998 ;       Compile a new constant 
                                   3999 ;       n CONSTANT name 
      0017CF 17 87                 4000         .word LINK 
                           0017D1  4001         LINK=. 
      0017D1 08                    4002         .byte 8 
      0017D2 43 4F 4E 53 54 41 4E  4003         .ascii "CONSTANT" 
             54
      0017DA                       4004 CONSTANT:          
      0017DA CD 10 B2         [ 4] 4005         CALL TOKEN
      0017DD CD 15 EB         [ 4] 4006         CALL SNAME 
      0017E0 CD 16 6C         [ 4] 4007         CALL OVERT 
      0017E3 CD 14 3D         [ 4] 4008         CALL COMPI 
      0017E6 18 04                 4009         .word DOCONST
      0017E8 CD 13 F8         [ 4] 4010         CALL COMMA 
      0017EB CD 20 6E         [ 4] 4011         CALL FMOVE
      0017EE CD 06 83         [ 4] 4012         CALL QDUP 
      0017F1 CD 03 E7         [ 4] 4013         CALL QBRAN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      0017F4 17 C3                 4014         .word SET_RAMLAST  
      0017F6 CD 21 02         [ 4] 4015         CALL UPDATPTR  
      0017F9 81               [ 4] 4016 1$:     RET          
                                   4017 
                                   4018 ; CONSTANT runtime semantic 
                                   4019 ; doCONST  ( -- n )
      0017FA 17 D1                 4020         .word LINK 
                           0017FC  4021         LINK=.
      0017FC 07                    4022         .byte 7
      0017FD 44 4F 43 4F 4E 53 54  4023         .ascii "DOCONST"
      001804                       4024 DOCONST:
      001804 1D 00 02         [ 2] 4025         subw x,#CELLL
      001807 90 85            [ 2] 4026         popw y 
      001809 90 FE            [ 2] 4027         ldw y,(y) 
      00180B FF               [ 2] 4028         ldw (x),y 
      00180C 81               [ 4] 4029         ret 
                                   4030 
                                   4031 ;----------------------------------
                                   4032 ; create double constant 
                                   4033 ; DCONST ( d -- ; <string> )
                                   4034 ;----------------------------------
      00180D 17 FC                 4035     .word LINK 
                           00180F  4036     LINK=.
      00180F 06                    4037     .byte 6 
      001810 44 43 4F 4E 53 54     4038     .ascii "DCONST"
      001816                       4039 DCONST:
      001816 CD 10 B2         [ 4] 4040         CALL TOKEN
      001819 CD 15 EB         [ 4] 4041         CALL SNAME 
      00181C CD 16 6C         [ 4] 4042         CALL OVERT 
      00181F CD 14 3D         [ 4] 4043         CALL COMPI 
      001822 18 45                 4044         .word DO_DCONST
      001824 CD 13 F8         [ 4] 4045         CALL COMMA
      001827 CD 13 F8         [ 4] 4046         CALL COMMA  
      00182A CD 20 6E         [ 4] 4047         CALL FMOVE
      00182D CD 06 83         [ 4] 4048         CALL QDUP 
      001830 CD 03 E7         [ 4] 4049         CALL QBRAN 
      001833 17 C3                 4050         .word SET_RAMLAST  
      001835 CD 21 02         [ 4] 4051         CALL UPDATPTR  
      001838 81               [ 4] 4052 1$:     RET          
                                   4053     
                                   4054 ;----------------------------------
                                   4055 ; runtime for DCONST 
                                   4056 ; stack double constant 
                                   4057 ; DO-DCONST ( -- d )
                                   4058 ;-----------------------------------
      001839 18 0F                 4059         .word LINK 
                           00183B  4060         LINK=.
      00183B 09                    4061         .byte 9 
      00183C 44 4F 2D 44 43 4F 4E  4062         .ascii "DO-DCONST"
             53 54
      001845                       4063 DO_DCONST:
      001845 90 85            [ 2] 4064     popw y 
      001847 90 BF 24         [ 2] 4065     ldw YTEMP,y 
      00184A 1D 00 04         [ 2] 4066     subw x,#2*CELLL 
      00184D 90 FE            [ 2] 4067     ldw y,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      00184F FF               [ 2] 4068     ldw (x),y 
      001850 90 BE 24         [ 2] 4069     ldw y,YTEMP 
      001853 90 EE 02         [ 2] 4070     ldw y,(2,y)
      001856 EF 02            [ 2] 4071     ldw (2,x),y 
      001858 81               [ 4] 4072     ret 
                                   4073 
                                   4074 ;; Tools
                                   4075 
                                   4076 ;       _TYPE   ( b u -- )
                                   4077 ;       Display a string. Filter
                                   4078 ;       non-printing characters.
      001859 18 3B                 4079         .word      LINK
                           00185B  4080 LINK = . 
      00185B 05                    4081         .byte      5
      00185C 5F 54 59 50 45        4082         .ascii     "_TYPE"
      001861                       4083 UTYPE:
      001861 CD 04 A2         [ 4] 4084         CALL     TOR     ;start count down loop
      001864 20 0F            [ 2] 4085         JRA     UTYP2   ;skip first pass
      001866 CD 04 D9         [ 4] 4086 UTYP1:  CALL     DUPP
      001869 CD 04 50         [ 4] 4087         CALL     CAT
      00186C CD 0A 64         [ 4] 4088         CALL     TCHAR
      00186F CD 03 9E         [ 4] 4089         CALL     EMIT    ;display only printable
      001872 CD 09 CE         [ 4] 4090         CALL     ONEP    ;increment address
      001875 CD 03 C8         [ 4] 4091 UTYP2:  CALL     DONXT
      001878 18 66                 4092         .word      UTYP1   ;loop till done
      00187A CC 04 CF         [ 2] 4093         JP     DROP
                                   4094 
                                   4095 ;       dm+     ( a u -- a )
                                   4096 ;       Dump u bytes from ,
                                   4097 ;       leaving a+u on  stack.
      00187D 18 5B                 4098         .word      LINK
                           00187F  4099 LINK = . 
      00187F 03                    4100         .byte      3
      001880 64 6D 2B              4101         .ascii     "dm+"
      001883                       4102 DUMPP:
      001883 CD 05 03         [ 4] 4103         CALL     OVER
      001886 CD 03 B4         [ 4] 4104         CALL     DOLIT
      001889 00 04                 4105         .word      4
      00188B CD 0F 08         [ 4] 4106         CALL     UDOTR   ;display address
      00188E CD 0E 58         [ 4] 4107         CALL     SPACE
      001891 CD 04 A2         [ 4] 4108         CALL     TOR     ;start count down loop
      001894 20 11            [ 2] 4109         JRA     PDUM2   ;skip first pass
      001896 CD 04 D9         [ 4] 4110 PDUM1:  CALL     DUPP
      001899 CD 04 50         [ 4] 4111         CALL     CAT
      00189C CD 03 B4         [ 4] 4112         CALL     DOLIT
      00189F 00 03                 4113         .word      3
      0018A1 CD 0F 08         [ 4] 4114         CALL     UDOTR   ;display numeric data
      0018A4 CD 09 CE         [ 4] 4115         CALL     ONEP    ;increment address
      0018A7 CD 03 C8         [ 4] 4116 PDUM2:  CALL     DONXT
      0018AA 18 96                 4117         .word      PDUM1   ;loop till done
      0018AC 81               [ 4] 4118         RET
                                   4119 
                                   4120 ;       DUMP    ( a u -- )
                                   4121 ;       Dump u bytes from a,
                                   4122 ;       in a formatted manner.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      0018AD 18 7F                 4123         .word      LINK
                           0018AF  4124 LINK = . 
      0018AF 04                    4125         .byte      4
      0018B0 44 55 4D 50           4126         .ascii     "DUMP"
      0018B4                       4127 DUMP:
      0018B4 CD 05 96         [ 4] 4128         CALL     BASE
      0018B7 CD 04 32         [ 4] 4129         CALL     AT
      0018BA CD 04 A2         [ 4] 4130         CALL     TOR
      0018BD CD 0C E0         [ 4] 4131         CALL     HEX     ;save radix, set hex
      0018C0 CD 03 B4         [ 4] 4132         CALL     DOLIT
      0018C3 00 10                 4133         .word      16
      0018C5 CD 08 F4         [ 4] 4134         CALL     SLASH   ;change count to lines
      0018C8 CD 04 A2         [ 4] 4135         CALL     TOR     ;start count down loop
      0018CB CD 0E A0         [ 4] 4136 DUMP1:  CALL     CR
      0018CE CD 03 B4         [ 4] 4137         CALL     DOLIT
      0018D1 00 10                 4138         .word      16
      0018D3 CD 06 BF         [ 4] 4139         CALL     DDUP
      0018D6 CD 18 83         [ 4] 4140         CALL     DUMPP   ;display numeric
      0018D9 CD 06 94         [ 4] 4141         CALL     ROT
      0018DC CD 06 94         [ 4] 4142         CALL     ROT
      0018DF CD 0E 58         [ 4] 4143         CALL     SPACE
      0018E2 CD 0E 58         [ 4] 4144         CALL     SPACE
      0018E5 CD 18 61         [ 4] 4145         CALL     UTYPE   ;display printable characters
      0018E8 CD 03 C8         [ 4] 4146         CALL     DONXT
      0018EB 18 CB                 4147         .word      DUMP1   ;loop till done
      0018ED CD 04 CF         [ 4] 4148 DUMP3:  CALL     DROP
      0018F0 CD 04 83         [ 4] 4149         CALL     RFROM
      0018F3 CD 05 96         [ 4] 4150         CALL     BASE
      0018F6 CC 04 1B         [ 2] 4151         JP     STORE   ;restore radix
                                   4152 
                                   4153 ;       .S      ( ... -- ... )
                                   4154 ;        Display  contents of stack.
      0018F9 18 AF                 4155         .word      LINK
                           0018FB  4156 LINK = . 
      0018FB 02                    4157         .byte      2
      0018FC 2E 53                 4158         .ascii     ".S"
      0018FE                       4159 DOTS:
      0018FE CD 0E A0         [ 4] 4160         CALL     CR
      001901 CD 0A 7C         [ 4] 4161         CALL     DEPTH   ;stack depth
      001904 CD 04 A2         [ 4] 4162         CALL     TOR     ;start count down loop
      001907 20 09            [ 2] 4163         JRA     DOTS2   ;skip first pass
      001909 CD 04 96         [ 4] 4164 DOTS1:  CALL     RAT
      00190C CD 0A 93         [ 4] 4165 	CALL     PICK
      00190F CD 0F 3B         [ 4] 4166         CALL     DOT     ;index stack, display contents
      001912 CD 03 C8         [ 4] 4167 DOTS2:  CALL     DONXT
      001915 19 09                 4168         .word      DOTS1   ;loop till done
      001917 CD 0E DF         [ 4] 4169         CALL     DOTQP
      00191A 05                    4170         .byte      5
      00191B 20 3C 73 70 20        4171         .ascii     " <sp "
      001920 81               [ 4] 4172         RET
                                   4173 
                                   4174 ;       >NAME   ( ca -- na | F )
                                   4175 ;       Convert code address
                                   4176 ;       to a name address.
      001921 18 FB                 4177         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                           001923  4178 LINK = . 
      001923 05                    4179         .byte      5
      001924 3E 4E 41 4D 45        4180         .ascii     ">NAME"
      001929                       4181 TNAME:
      001929 CD 06 19         [ 4] 4182         CALL     CNTXT   ;vocabulary link
      00192C CD 04 32         [ 4] 4183 TNAM2:  CALL     AT
      00192F CD 04 D9         [ 4] 4184         CALL     DUPP    ;?last word in a vocabulary
      001932 CD 03 E7         [ 4] 4185         CALL     QBRAN
      001935 19 50                 4186         .word      TNAM4
      001937 CD 06 BF         [ 4] 4187         CALL     DDUP
      00193A CD 10 C0         [ 4] 4188         CALL     NAMET
      00193D CD 05 4E         [ 4] 4189         CALL     XORR    ;compare
      001940 CD 03 E7         [ 4] 4190         CALL     QBRAN
      001943 19 4A                 4191         .word      TNAM3
      001945 CD 09 B2         [ 4] 4192         CALL     CELLM   ;continue with next word
      001948 20 E2            [ 2] 4193         JRA     TNAM2
      00194A CD 04 E9         [ 4] 4194 TNAM3:  CALL     SWAPP
      00194D CC 04 CF         [ 2] 4195         JP     DROP
      001950 CD 06 B4         [ 4] 4196 TNAM4:  CALL     DDROP
      001953 CC 0A 3A         [ 2] 4197         JP     ZERO
                                   4198 
                                   4199 ;       .ID     ( na -- )
                                   4200 ;        Display  name at address.
      001956 19 23                 4201         .word      LINK
                           001958  4202 LINK = . 
      001958 03                    4203         .byte      3
      001959 2E 49 44              4204         .ascii     ".ID"
      00195C                       4205 DOTID:
      00195C CD 06 83         [ 4] 4206         CALL     QDUP    ;if zero no name
      00195F CD 03 E7         [ 4] 4207         CALL     QBRAN
      001962 19 72                 4208         .word      DOTI1
      001964 CD 0B 11         [ 4] 4209         CALL     COUNT
      001967 CD 03 B4         [ 4] 4210         CALL     DOLIT
      00196A 00 1F                 4211         .word      0x1F
      00196C CD 05 25         [ 4] 4212         CALL     ANDD    ;mask lexicon bits
      00196F CC 18 61         [ 2] 4213         JP     UTYPE
      001972 CD 0E DF         [ 4] 4214 DOTI1:  CALL     DOTQP
      001975 09                    4215         .byte      9
      001976 20 6E 6F 4E 61 6D 65  4216         .ascii     " noName"
      00197D 81               [ 4] 4217         RET
                                   4218 
                           000000  4219 WANT_SEE=0
                           000000  4220 .if WANT_SEE 
                                   4221 ;       SEE     ( -- ; <string> )
                                   4222 ;       A simple decompiler.
                                   4223 ;       Updated for byte machines.
                                   4224         .word      LINK
                                   4225 LINK = . 
                                   4226         .byte      3
                                   4227         .ascii     "SEE"
                                   4228 SEE:
                                   4229         CALL     TICK    ;starting address
                                   4230         CALL     CR
                                   4231         CALL     ONEM
                                   4232 SEE1:   CALL     ONEP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                   4233         CALL     DUPP
                                   4234         CALL     AT
                                   4235         CALL     DUPP
                                   4236         CALL     QBRAN
                                   4237         .word    SEE2
                                   4238         CALL     TNAME   ;?is it a name
                                   4239 SEE2:   CALL     QDUP    ;name address or zero
                                   4240         CALL     QBRAN
                                   4241         .word    SEE3
                                   4242         CALL     SPACE
                                   4243         CALL     DOTID   ;display name
                                   4244         CALL     ONEP
                                   4245         JRA      SEE4
                                   4246 SEE3:   CALL     DUPP
                                   4247         CALL     CAT
                                   4248         CALL     UDOT    ;display number
                                   4249 SEE4:   CALL     NUFQ    ;user control
                                   4250         CALL     QBRAN
                                   4251         .word    SEE1
                                   4252         JP     DROP
                                   4253 .endif ; WANT_SEE 
                                   4254 
                                   4255 ;       WORDS   ( -- )
                                   4256 ;       Display names in vocabulary.
      00197E 19 58                 4257         .word      LINK
                           001980  4258 LINK = . 
      001980 05                    4259         .byte      5
      001981 57 4F 52 44 53        4260         .ascii     "WORDS"
      001986                       4261 WORDS:
      001986 CD 0E A0         [ 4] 4262         CALL     CR
      001989 CD 06 19         [ 4] 4263         CALL     CNTXT   ;only in context
      00198C CD 04 32         [ 4] 4264 WORS1:  CALL     AT
      00198F CD 06 83         [ 4] 4265         CALL     QDUP    ;?at end of list
      001992 CD 03 E7         [ 4] 4266         CALL     QBRAN
      001995 19 A8                 4267         .word      WORS2
      001997 CD 04 D9         [ 4] 4268         CALL     DUPP
      00199A CD 0E 58         [ 4] 4269         CALL     SPACE
      00199D CD 19 5C         [ 4] 4270         CALL     DOTID   ;display a name
      0019A0 CD 09 B2         [ 4] 4271         CALL     CELLM
      0019A3 CD 03 FE         [ 4] 4272         CALL     BRAN
      0019A6 19 8C                 4273         .word      WORS1
      0019A8 81               [ 4] 4274 WORS2:  RET
                                   4275 
                                   4276         
                                   4277 ;; Hardware reset
                                   4278 
                                   4279 ;       hi      ( -- )
                                   4280 ;       Display sign-on message.
      0019A9 19 80                 4281         .word      LINK
                           0019AB  4282 LINK = . 
      0019AB 02                    4283         .byte      2
      0019AC 68 69                 4284         .ascii     "hi"
      0019AE                       4285 HI:
      0019AE CD 0E A0         [ 4] 4286         CALL     CR
      0019B1 CD 0E DF         [ 4] 4287         CALL     DOTQP   ;initialize I/O
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      0019B4 0F                    4288         .byte      15
      0019B5 73 74 6D 38 65 46 6F  4289         .ascii     "stm8eForth v"
             72 74 68 20 76
      0019C1 33                    4290 	.byte      VER+'0'
      0019C2 2E                    4291         .byte      '.' 
      0019C3 30                    4292 	.byte      EXT+'0' ;version
      0019C4 CD 0E DF         [ 4] 4293         CALL    DOTQP
                           000001  4294 .if NUCLEO          
      0019C7 12                    4295         .byte 18
      0019C8 20 6F 6E 20 4E 55 43  4296         .ascii  " on NUCLEO-8S208RB"
             4C 45 4F 2D 38 53 32
             30 38 52 42
                           000000  4297 .else ; DISCOVERY 
                                   4298         .byte 19
                                   4299         .ascii  " on STM8S-DISCOVERY"
                                   4300 .endif
      0019DA CC 0E A0         [ 2] 4301         JP     CR
                                   4302 
                           000000  4303 WANT_DEBUG=0
                           000000  4304 .if WANT_DEBUG 
                                   4305 ;       DEBUG      ( -- )
                                   4306 ;       Display sign-on message.
                                   4307 ;        .word      LINK
                                   4308 LINK = . 
                                   4309         .byte      5
                                   4310         .ascii     "DEBUG"
                                   4311 DEBUG:
                                   4312 	CALL DOLIT
                                   4313 	.word 0x65
                                   4314 	CALL EMIT
                                   4315 	CALL DOLIT
                                   4316 	.word 0
                                   4317  	CALL ZLESS 
                                   4318 	CALL DOLIT
                                   4319 	.word 0xFFFE
                                   4320 	CALL ZLESS 
                                   4321 	CALL UPLUS 
                                   4322  	CALL DROP 
                                   4323 	CALL DOLIT
                                   4324 	.word 3
                                   4325 	CALL UPLUS 
                                   4326 	CALL UPLUS 
                                   4327  	CALL DROP
                                   4328 	CALL DOLIT
                                   4329 	.word 0x43
                                   4330 	CALL UPLUS 
                                   4331  	CALL DROP
                                   4332 	CALL EMIT
                                   4333 	CALL DOLIT
                                   4334 	.word 0x4F
                                   4335 	CALL DOLIT
                                   4336 	.word 0x6F
                                   4337  	CALL XORR
                                   4338 	CALL DOLIT
                                   4339 	.word 0xF0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                   4340  	CALL ANDD
                                   4341 	CALL DOLIT
                                   4342 	.word 0x4F
                                   4343  	CALL ORR
                                   4344 	CALL EMIT
                                   4345 	CALL DOLIT
                                   4346 	.word 8
                                   4347 	CALL DOLIT
                                   4348 	.word 6
                                   4349  	CALL SWAPP
                                   4350 	CALL OVER
                                   4351 	CALL XORR
                                   4352 	CALL DOLIT
                                   4353 	.word 3
                                   4354 	CALL ANDD 
                                   4355 	CALL ANDD
                                   4356 	CALL DOLIT
                                   4357 	.word 0x70
                                   4358 	CALL UPLUS 
                                   4359 	CALL DROP
                                   4360 	CALL EMIT
                                   4361 	CALL DOLIT
                                   4362 	.word 0
                                   4363 	CALL QBRAN
                                   4364 	.word DEBUG1
                                   4365 	CALL DOLIT
                                   4366 	.word 0x3F
                                   4367 DEBUG1:
                                   4368 	CALL DOLIT
                                   4369 	.word 0xFFFF
                                   4370 	CALL QBRAN
                                   4371 	.word DEBUG2
                                   4372 	CALL DOLIT
                                   4373 	.word 0x74
                                   4374 	CALL BRAN
                                   4375 	.word DEBUG3
                                   4376 DEBUG2:
                                   4377 	CALL DOLIT
                                   4378 	.word 0x21
                                   4379 DEBUG3:
                                   4380 	CALL EMIT
                                   4381 	CALL DOLIT
                                   4382 	.word 0x68
                                   4383 	CALL DOLIT
                                   4384 	.word 0x80
                                   4385 	CALL STORE
                                   4386 	CALL DOLIT
                                   4387 	.word 0x80
                                   4388 	CALL AT
                                   4389 	CALL EMIT
                                   4390 	CALL DOLIT
                                   4391 	.word 0x4D
                                   4392 	CALL TOR
                                   4393 	CALL RAT
                                   4394 	CALL RFROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                   4395 	CALL ANDD
                                   4396 	CALL EMIT
                                   4397 	CALL DOLIT
                                   4398 	.word 0x61
                                   4399 	CALL DOLIT
                                   4400 	.word 0xA
                                   4401 	CALL TOR
                                   4402 DEBUG4:
                                   4403 	CALL DOLIT
                                   4404 	.word 1
                                   4405 	CALL UPLUS 
                                   4406 	CALL DROP
                                   4407 	CALL DONXT
                                   4408 	.word DEBUG4
                                   4409 	CALL EMIT
                                   4410 	CALL DOLIT
                                   4411 	.word 0x656D
                                   4412 	CALL DOLIT
                                   4413 	.word 0x100
                                   4414 	CALL UMSTA
                                   4415 	CALL SWAPP
                                   4416 	CALL DOLIT
                                   4417 	.word 0x100
                                   4418 	CALL UMSTA
                                   4419 	CALL SWAPP 
                                   4420 	CALL DROP
                                   4421 	CALL EMIT
                                   4422 	CALL EMIT
                                   4423 	CALL DOLIT
                                   4424 	.word 0x2043
                                   4425 	CALL DOLIT
                                   4426 	.word 0
                                   4427 	CALL DOLIT
                                   4428 	.word 0x100
                                   4429 	CALL UMMOD
                                   4430 	CALL EMIT
                                   4431 	CALL EMIT
                                   4432 	;JP ORIG
                                   4433 	RET
                                   4434 .endif ; WANT_DEBUG 
                                   4435 
                                   4436 
                                   4437 ;       'BOOT   ( -- a )
                                   4438 ;       The application startup vector.
      0019DD 19 AB                 4439         .word      LINK
                           0019DF  4440 LINK = . 
      0019DF 05                    4441         .byte      5
      0019E0 27 42 4F 4F 54        4442         .ascii     "'BOOT"
      0019E5                       4443 TBOOT:
      0019E5 CD 05 86         [ 4] 4444         CALL     DOVAR
      0019E8 40 02                 4445         .word    APP_RUN      ;application to boot
                                   4446 
                                   4447 ;       COLD    ( -- )
                                   4448 ;       The hilevel cold start s=ence.
      0019EA 19 DF                 4449         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                           0019EC  4450         LINK = . 
      0019EC 04                    4451         .byte      4
      0019ED 43 4F 4C 44           4452         .ascii     "COLD"
      0019F1                       4453 COLD:
                           000000  4454 .if WANT_DEBUG
                                   4455         CALL DEBUG
                                   4456 .endif ; WANT_DEBUG
      0019F1 CD 03 B4         [ 4] 4457 COLD1:  CALL     DOLIT
      0019F4 00 2B                 4458         .word      UZERO
      0019F6 CD 03 B4         [ 4] 4459 	CALL     DOLIT
      0019F9 00 06                 4460         .word      UPP
      0019FB CD 03 B4         [ 4] 4461         CALL     DOLIT
      0019FE 00 1A                 4462 	.word      UEND-UZERO
      001A00 CD 0B 75         [ 4] 4463         CALL     CMOVE   ;initialize user area
                                   4464 
                                   4465 ; if APP_RUN==0 initialize with ca de 'hi'  
      001A03 90 CE 40 02      [ 2] 4466         ldw y,APP_RUN 
      001A07 26 0B            [ 1] 4467         jrne 0$
      001A09 1D 00 02         [ 2] 4468         subw x,#CELLL 
      001A0C 90 AE 19 AE      [ 2] 4469         ldw y,#HI  
      001A10 FF               [ 2] 4470         ldw (x),y
      001A11 CD 1B 0C         [ 4] 4471         call UPDATRUN 
      001A14                       4472 0$:        
                                   4473 ; update LAST with APP_LAST 
                                   4474 ; if APP_LAST > LAST else do the opposite
      001A14 90 CE 40 00      [ 2] 4475         ldw y,APP_LAST 
      001A18 90 B3 1A         [ 2] 4476         cpw y,ULAST 
      001A1B 22 05            [ 1] 4477         jrugt 1$ 
                                   4478 ; save LAST at APP_LAST  
      001A1D CD 1A F4         [ 4] 4479         call UPDATLAST 
      001A20 20 06            [ 2] 4480         jra 2$
      001A22                       4481 1$: ; update LAST with APP_LAST 
      001A22 90 BF 1A         [ 2] 4482         ldw ULAST,y
      001A25 90 BF 14         [ 2] 4483         ldw UCNTXT,y
      001A28                       4484 2$:  
                                   4485 ; update APP_CP if < app_space 
      001A28 90 CE 40 04      [ 2] 4486         ldw y,APP_CP  
      001A2C 90 B3 18         [ 2] 4487         cpw y,UCP   
      001A2F 24 06            [ 1] 4488         jruge 3$ 
      001A31 CD 1B 1D         [ 4] 4489         call UPDATCP
      001A34 90 BE 18         [ 2] 4490         ldw y,UCP   
      001A37                       4491 3$:
      001A37 90 BF 18         [ 2] 4492         ldw UCP,y                 
                                   4493 ; update UVP with APP_VP  
                                   4494 ; if APP_VP>UVP else do the opposite 
      001A3A 90 CE 40 06      [ 2] 4495         ldw y,APP_VP 
      001A3E 90 B3 16         [ 2] 4496         cpw y,UVP 
      001A41 22 05            [ 1] 4497         jrugt 4$
      001A43 CD 1B 34         [ 4] 4498         call UPDATVP 
      001A46 20 03            [ 2] 4499         jra 6$
      001A48                       4500 4$: ; update UVP with APP_VP 
      001A48 90 BF 16         [ 2] 4501         ldw UVP,y 
      001A4B                       4502 6$:      
      001A4B CD 13 A3         [ 4] 4503         CALL     PRESE   ;initialize data stack and TIB
      001A4E CD 19 E5         [ 4] 4504         CALL     TBOOT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      001A51 CD 0B 5E         [ 4] 4505         CALL     ATEXE   ;application boot
      001A54 CD 16 6C         [ 4] 4506         CALL     OVERT
      001A57 CC 13 C0         [ 2] 4507         JP     QUIT    ;start interpretation
                                   4508 
                                   4509 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                   4510         .include "flash.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21 ;  routines to write to FLASH, EEPROM 
                                     22 ;  and OPTION 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26 ;--------------------------------
                                     27 ; initialize FPTR 
                                     28 ; FP!  ( ud -- )
                                     29 ;---------------------------------
      001A5A 19 EC                   30     .word LINK 
                           001A5C    31     LINK=.
      001A5C 03                      32     .byte 3 
      001A5D 46 50 21                33     .ascii "FP!"
      001A60                         34 PSTO:
      001A60 90 93            [ 1]   35     ldw y,x
      001A62 90 FE            [ 2]   36     ldw y,(y)
      001A64 90 9F            [ 1]   37     ld a,yl 
      001A66 B7 32            [ 1]   38     ld FPTR,a 
      001A68 1C 00 02         [ 2]   39     addw x,#CELLL 
      001A6B 90 93            [ 1]   40     ldw y,x 
      001A6D 90 FE            [ 2]   41     ldw y,(y)
      001A6F 90 BF 33         [ 2]   42     ldw PTR16,y
      001A72 1C 00 02         [ 2]   43     addw x,#CELLL 
      001A75 81               [ 4]   44     ret 
                                     45 
                                     46 ;-----------------------------------
                                     47 ; return EEPROM base address 
                                     48 ; as a double 
                                     49 ;  EEPROM  ( -- ud )
                                     50 ;-----------------------------------
      001A76 1A 5C                   51     .word LINK 
                           001A78    52 LINK=.
      001A78 06                      53     .byte 6 
      001A79 45 45 50 52 4F 4D       54     .ascii "EEPROM"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      001A7F                         55 EEPROM: 
      001A7F 90 AE 40 00      [ 2]   56     ldw y,#EEPROM_BASE
      001A83 1D 00 04         [ 2]   57     subw x,#2*CELLL 
      001A86 EF 02            [ 2]   58     ldw (2,x),y 
      001A88 90 5F            [ 1]   59     clrw y 
      001A8A FF               [ 2]   60     ldw (x),y 
      001A8B 81               [ 4]   61     ret
                                     62 
                                     63 ;---------------------------------
                                     64 ; return APP_LAST pointer as double
                                     65 ; EEP-LAST ( -- ud )
                                     66 ;---------------------------------
      001A8C 1A 78                   67 	.word LINK 
                           001A8E    68 	LINK=.
      001A8E 08                      69 	.byte 8 
      001A8F 45 45 50 2D 4C 41 53    70 	.ascii "EEP-LAST"
             54
      001A97                         71 EEPLAST:
      001A97 1D 00 04         [ 2]   72 	subw x,#2*CELLL 
      001A9A 90 AE 40 00      [ 2]   73 	ldw y,#APP_LAST 
      001A9E EF 02            [ 2]   74 	ldw (2,x),y 
      001AA0 90 5F            [ 1]   75 	clrw y 
      001AA2 FF               [ 2]   76 	ldw (x),y 
      001AA3 81               [ 4]   77 	ret 
                                     78 
                                     79 ;----------------------------------
                                     80 ; return APP_RUN pointer as double	
                                     81 ; EEP-RUN ( -- ud )
                                     82 ;-----------------------------------
      001AA4 1A 8E                   83 	.word LINK 
                           001AA6    84 	LINK=.
      001AA6 07                      85 	.byte 7
      001AA7 45 45 50 2D 52 55 4E    86 	.ascii "EEP-RUN"
      001AAE                         87 EEPRUN:
      001AAE 1D 00 04         [ 2]   88 	subw x,#2*CELLL 
      001AB1 90 AE 40 02      [ 2]   89 	ldw y,#APP_RUN 
      001AB5 EF 02            [ 2]   90 	ldw (2,x),y 
      001AB7 90 5F            [ 1]   91 	clrw y 
      001AB9 FF               [ 2]   92 	ldw (x),y 
      001ABA 81               [ 4]   93 	ret 
                                     94 
                                     95 ;------------------------------------
                                     96 ; return APP_CP pointer as double 
                                     97 ; EEP-CP ( -- ud )
                                     98 ;------------------------------------
      001ABB 1A A6                   99 	.word LINK
                           001ABD   100 	LINK=.
      001ABD 06                     101 	.byte 6 
      001ABE 45 45 50 2D 43 50      102 	.ascii "EEP-CP"
      001AC4                        103 EEPCP:
      001AC4 1D 00 04         [ 2]  104 	subw x,#2*CELLL 
      001AC7 90 AE 40 04      [ 2]  105 	ldw y,#APP_CP  
      001ACB EF 02            [ 2]  106 	ldw (2,x),y 
      001ACD 90 5F            [ 1]  107 	clrw y 
      001ACF FF               [ 2]  108 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      001AD0 81               [ 4]  109 	ret 
                                    110 
                                    111 ;------------------------------------
                                    112 ; return APP_VP pointer as double 
                                    113 ; EEP-VP ( -- ud )
                                    114 ;-------------------------------------
      001AD1 1A BD                  115 	.word LINK
                           001AD3   116 	LINK=.
      001AD3 06                     117 	.byte 6
      001AD4 45 45 50 2D 56 50      118 	.ascii "EEP-VP"
      001ADA                        119 EEPVP:
      001ADA 1D 00 04         [ 2]  120 	subw x,#2*CELLL 
      001ADD 90 AE 40 06      [ 2]  121 	ldw y,#APP_VP  
      001AE1 EF 02            [ 2]  122 	ldw (2,x),y 
      001AE3 90 5F            [ 1]  123 	clrw y 
      001AE5 FF               [ 2]  124 	ldw (x),y 
      001AE6 81               [ 4]  125 	ret 
                                    126 
                                    127 ;----------------------------------
                                    128 ; update APP_LAST with LAST 
                                    129 ; UPDAT-LAST ( -- )
                                    130 ;----------------------------------
      001AE7 1A D3                  131 	.word LINK 
                           001AE9   132 	LINK=.
      001AE9 0A                     133 	.byte 10
      001AEA 55 50 44 41 54 2D 4C   134 	.ascii "UPDAT-LAST"
             41 53 54
      001AF4                        135 UPDATLAST:
      001AF4 CD 06 45         [ 4]  136 	call LAST
      001AF7 CD 04 32         [ 4]  137 	call AT  
      001AFA CD 1A 97         [ 4]  138 	call EEPLAST
      001AFD CC 1C DE         [ 2]  139 	jp ee_store 
                                    140 
                                    141 ;---------------------------------
                                    142 ; update APP_RUN 
                                    143 ; UPDAT-RUN ( a -- )
                                    144 ;---------------------------------
      001B00 1A E9                  145 	.word LINK
                           001B02   146 	LINK=.
      001B02 09                     147 	.byte 9
      001B03 55 50 44 41 54 2D 52   148 	.ascii "UPDAT-RUN"
             55 4E
      001B0C                        149 UPDATRUN:
      001B0C CD 1A AE         [ 4]  150 	call EEPRUN
      001B0F CC 1C DE         [ 2]  151 	jp ee_store 
                                    152 	
                                    153 ;---------------------------------
                                    154 ; update APP_CP with CP 
                                    155 ; UPDAT-CP ( -- )
                                    156 ;---------------------------------
      001B12 1B 02                  157 	.word LINK 
                           001B14   158 	LINK=.
      001B14 08                     159 	.byte 8 
      001B15 55 50 44 41 54 2D 43   160 	.ascii "UPDAT-CP"
             50
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      001B1D                        161 UPDATCP:
      001B1D CD 06 35         [ 4]  162 	call CPP 
      001B20 CD 04 32         [ 4]  163 	call AT 
      001B23 CD 1A C4         [ 4]  164 	call EEPCP 
      001B26 CC 1C DE         [ 2]  165 	jp ee_store 
                                    166 
                                    167 ;----------------------------------
                                    168 ; update APP_VP with VP 
                                    169 ; UPDAT-VP ( -- )
                                    170 ;----------------------------------
      001B29 1B 14                  171 	.word LINK
                           001B2B   172 	LINK=.
      001B2B 08                     173 	.byte 8 
      001B2C 55 50 44 41 54 2D 56   174 	.ascii "UPDAT-VP" 
             50
      001B34                        175 UPDATVP:
      001B34 CD 06 27         [ 4]  176 	call VPP 
      001B37 CD 04 32         [ 4]  177 	call AT
      001B3A CD 1A DA         [ 4]  178 	call EEPVP 
      001B3D CC 1C DE         [ 2]  179 	jp ee_store
                                    180 	
                                    181 
                                    182 ;----------------------------------
                                    183 ; fetch integer at address over 65535
                                    184 ;  F@   ( ud -- n )
                                    185 ;----------------------------------
      001B40 1B 2B                  186     .word LINK 
                           001B42   187 LINK=.
      001B42 02                     188     .byte 2
      001B43 46 40                  189     .ascii "F@"
      001B45                        190 farat:
      001B45 CD 1A 60         [ 4]  191     call PSTO
      001B48 CC 1C 0D         [ 2]  192 	jp EE_READ 
                                    193 
                                    194 
                                    195 ;-------------------------------------
                                    196 ; fetch C at address over 65535 
                                    197 ; FC@ ( ud -- c)
                                    198 ;-------------------------------------
      001B4B 1B 42                  199     .word LINK
                           001B4D   200     LINK=.
      001B4D 03                     201     .byte 3 
      001B4E 46 43 40               202     .ascii "FC@" 
      001B51                        203 farcat:
      001B51 CD 1A 60         [ 4]  204     call PSTO
      001B54 CC 1C 2F         [ 2]  205 	jp EE_CREAD  
                                    206     
                                    207 ;----------------------------------
                                    208 ; UNLOCK EEPROM/OPT for writing/erasing
                                    209 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    210 ;  UNLKEE   ( -- )
                                    211 ;----------------------------------
      001B57 1B 4D                  212     .word LINK 
                           001B59   213 LINK=.
      001B59 06                     214     .byte 6 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      001B5A 55 4E 4C 4B 45 45      215     .ascii "UNLKEE"
      001B60                        216 unlock_eeprom:
      001B60 35 00 50 5B      [ 1]  217 	mov FLASH_CR2,#0 
      001B64 35 FF 50 5C      [ 1]  218 	mov FLASH_NCR2,#0xFF 
      001B68 35 AE 50 64      [ 1]  219 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001B6C 35 56 50 64      [ 1]  220     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001B70 72 07 50 5F FB   [ 2]  221 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001B75 81               [ 4]  222 	ret
                                    223 
                                    224 ;----------------------------------
                                    225 ; UNLOCK FLASH for writing/erasing
                                    226 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    227 ; UNLKFL  ( -- )
                                    228 ;----------------------------------
      001B76 1B 59                  229     .word LINK 
                           001B78   230 LINK=. 
      001B78 06                     231     .byte 6 
      001B79 55 4E 4C 4B 46 4C      232     .ascii "UNLKFL"    
      001B7F                        233 unlock_flash:
      001B7F 35 00 50 5B      [ 1]  234 	mov FLASH_CR2,#0 
      001B83 35 FF 50 5C      [ 1]  235 	mov FLASH_NCR2,#0xFF 
      001B87 35 56 50 62      [ 1]  236 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001B8B 35 AE 50 62      [ 1]  237 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001B8F 72 03 50 5F FB   [ 2]  238 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001B94 81               [ 4]  239 	ret
                                    240 
                                    241 ;-----------------------------
                                    242 ; UNLOCK FLASH or EEPROM 
                                    243 ; according to FPTR address 
                                    244 ;  UNLOCK ( -- )
                                    245 ;-----------------------------
      001B95 1B 78                  246 	.word LINK 
                           001B97   247 	LINK=.
      001B97 06                     248 	.byte 6
      001B98 55 4E 4C 4F 43 4B      249 	.ascii "UNLOCK"
      001B9E                        250 UNLOCK:
                                    251 ; put addr[15:0] in Y, for bounds check.
      001B9E 90 BE 33         [ 2]  252 	ldw y,PTR16   ; Y=addr15:0
                                    253 ; check addr[23:16], if <> 0 then it is extened flash memory
      001BA1 3D 32            [ 1]  254 	tnz FPTR 
      001BA3 26 16            [ 1]  255 	jrne 4$
      001BA5 90 A3 80 00      [ 2]  256     cpw y,#FLASH_BASE
      001BA9 24 10            [ 1]  257     jruge 4$
      001BAB 90 A3 40 00      [ 2]  258 	cpw y,#EEPROM_BASE  
      001BAF 25 0D            [ 1]  259     jrult 9$
      001BB1 90 A3 48 7F      [ 2]  260 	cpw y,#OPTION_END 
      001BB5 22 07            [ 1]  261 	jrugt 9$
      001BB7 CD 1B 60         [ 4]  262 	call unlock_eeprom
      001BBA 81               [ 4]  263 	ret 
      001BBB CD 1B 7F         [ 4]  264 4$: call unlock_flash
      001BBE 81               [ 4]  265 9$: ret 
                                    266 
                                    267 ;-------------------------
                                    268 ; LOCK write access to 
                                    269 ; FLASH and EEPROM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                    270 ; LOCK ( -- )
                                    271 ;-------------------------
      001BBF 1B 97                  272 	.word LINK 
                           001BC1   273 	LINK=.
      001BC1 04                     274 	.byte 4 
      001BC2 4C 4F 43 4B            275 	.ascii "LOCK" 
      001BC6                        276 LOCK: 
      001BC6 72 13 50 5F      [ 1]  277 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001BCA 72 17 50 5F      [ 1]  278 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001BCE 81               [ 4]  279 	ret 
                                    280 
                                    281 ;-------------------------
                                    282 ; increment FPTR 
                                    283 ; INC-FPTR ( -- )
                                    284 ;-------------------------
      001BCF 1B C1                  285 	.word LINK 
                           001BD1   286 	LINK=. 
      001BD1 08                     287 	.byte 8 
      001BD2 49 4E 43 2D 46 50 54   288 	.ascii "INC-FPTR" 
             52
      001BDA                        289 INC_FPTR:
      001BDA 3C 34            [ 1]  290 	inc PTR8 
      001BDC 26 0C            [ 1]  291 	jrne 1$
      001BDE 90 89            [ 2]  292 	pushw y 
      001BE0 90 BE 32         [ 2]  293 	ldw y,FPTR 
      001BE3 90 5C            [ 2]  294 	incw y 
      001BE5 90 BF 32         [ 2]  295 	ldw FPTR,y
      001BE8 90 85            [ 2]  296 	popw y  
      001BEA 81               [ 4]  297 1$: ret 
                                    298 
                                    299 ;------------------------------
                                    300 ; add u to FPTR 
                                    301 ; PTR+ ( u -- )
                                    302 ;------------------------------
      001BEB 1B D1                  303 	.word LINK 
                           001BED   304 	LINK=.
      001BED 04                     305 	.byte 4 
      001BEE 50 54 52 2B            306 	.ascii "PTR+"
      001BF2                        307 PTRPLUS:
      001BF2 90 93            [ 1]  308 	ldw y,x 
      001BF4 1C 00 02         [ 2]  309 	addw x,#CELLL 
      001BF7 72 B9 00 33      [ 2]  310 	addw y,PTR16 
      001BFB 90 BF 33         [ 2]  311 	ldw PTR16,y  
      001BFE 24 02            [ 1]  312 	jrnc 1$
      001C00 3C 32            [ 1]  313 	inc FPTR 
      001C02 81               [ 4]  314 1$: ret 
                                    315 
                                    316 ;---------------------------------
                                    317 ; read word at address pointed FPTR
                                    318 ; increment FPTR 
                                    319 ; EE-READ ( -- w )
                                    320 ;------------------------------------
      001C03 1B ED                  321 	.word LINK 
                           001C05   322 	LINK=.
      001C05 07                     323 	.byte 7 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001C06 45 45 2D 52 45 41 44   324 	.ascii "EE-READ"
      001C0D                        325 EE_READ:
      001C0D 1D 00 02         [ 2]  326 	subw x,#CELLL 
      001C10 92 BC 00 32      [ 5]  327 	ldf a,[FPTR]
      001C14 90 95            [ 1]  328 	ld yh,a 
      001C16 CD 1B DA         [ 4]  329 	call INC_FPTR 
      001C19 92 BC 00 32      [ 5]  330 	ldf a,[FPTR]
      001C1D CD 1B DA         [ 4]  331 	call INC_FPTR 
      001C20 90 97            [ 1]  332 	ld yl,a 
      001C22 FF               [ 2]  333 	ldw (x),y 
      001C23 81               [ 4]  334 	ret 
                                    335 
                                    336 ;---------------------------------------
                                    337 ; Read byte at address pointed by FPTR 
                                    338 ; EE-CREAD ( -- c )
                                    339 ;---------------------------------------
      001C24 1C 05                  340 	.word LINK 
                           001C26   341 	LINK=.
      001C26 08                     342 	.byte 8
      001C27 45 45 2D 43 52 45 41   343 	.ascii "EE-CREAD" 
             44
      001C2F                        344 EE_CREAD:
      001C2F 1D 00 02         [ 2]  345 	subw x,#CELLL 
      001C32 92 BC 00 32      [ 5]  346 	ldf a,[FPTR]	
      001C36 CD 1B DA         [ 4]  347 	call INC_FPTR
      001C39 90 5F            [ 1]  348 	clrw y 
      001C3B 90 97            [ 1]  349 	ld yl,a 
      001C3D FF               [ 2]  350 	ldw (x),y 
      001C3E 81               [ 4]  351 	ret 
                                    352 
                                    353 ;----------------------------
                                    354 ; write a byte at address pointed 
                                    355 ; by FPTR and increment FPTR.
                                    356 ; Expect pointer already initialized 
                                    357 ; and memory unlocked 
                                    358 ; WR-BYTE ( c -- )
                                    359 ;----------------------------
      001C3F 1C 26                  360 	.word LINK 
                           001C41   361 	LINK=. 
      001C41 07                     362 	.byte 7 
      001C42 57 52 2D 42 59 54 45   363 	.ascii "WR-BYTE" 
                                    364 
      001C49                        365 WR_BYTE:
      001C49 90 93            [ 1]  366 	ldw y,x 
      001C4B 90 FE            [ 2]  367 	ldw y,(y)
      001C4D 1C 00 02         [ 2]  368 	addw x,#CELLL 
      001C50 90 9F            [ 1]  369 	ld a,yl
      001C52 92 BD 00 32      [ 4]  370 	ldf [FPTR],a
      001C56 72 05 50 5F FB   [ 2]  371 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001C5B CC 1B DA         [ 2]  372 	jp INC_FPTR 
                                    373 
                                    374 ;---------------------------------------
                                    375 ; write a word at address pointed 
                                    376 ; by FPTR and increment FPTR 
                                    377 ; Expect pointer already initialzed 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                                    378 ; and memory unlocked 
                                    379 ; WR-WORD ( w -- )
                                    380 ;---------------------------------------
      001C5E 1C 41                  381 	.word LINK 
                           001C60   382 	LINK=.
      001C60 07                     383 	.byte 7 
      001C61 57 52 2D 57 4F 52 44   384 	.ascii "WR-WORD" 
      001C68                        385 WR_WORD:
      001C68 90 93            [ 1]  386 	ldw y,x
      001C6A 90 FE            [ 2]  387 	ldw y,(y)
      001C6C 1C 00 02         [ 2]  388 	addw x,#CELLL 
      001C6F 90 9E            [ 1]  389 	ld a,yh 
      001C71 92 BD 00 32      [ 4]  390 	ldf [FPTR],a
      001C75 72 05 50 5F FB   [ 2]  391 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001C7A CD 1B DA         [ 4]  392 	call INC_FPTR 
      001C7D 90 9F            [ 1]  393 	ld a,yl 
      001C7F 92 BD 00 32      [ 4]  394 	ldf [FPTR],a
      001C83 72 05 50 5F FB   [ 2]  395 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001C88 CC 1B DA         [ 2]  396 	jp INC_FPTR 
                                    397 
                                    398 
                                    399 ;---------------------------------------
                                    400 ; write a byte to FLASH or EEPROM/OPTION  
                                    401 ; EEC!  (c ud -- )
                                    402 ;---------------------------------------
      001C8B 1C 60                  403     .word LINK 
                           001C8D   404 	LINK=.
      001C8D 04                     405     .byte 4 
      001C8E 45 45 43 21            406     .ascii "EEC!"
                                    407 	; local variables 
                           000001   408 	BTW = 1   ; byte to write offset on stack
                           000002   409     OPT = 2 
                           000002   410 	VSIZE = 2
      001C92                        411 ee_cstore:
      001C92 52 02            [ 2]  412 	sub sp,#VSIZE
      001C94 CD 1A 60         [ 4]  413     call PSTO
      001C97 E6 01            [ 1]  414 	ld a,(1,x)
      001C99 43               [ 1]  415 	cpl a 
      001C9A 6B 01            [ 1]  416 	ld (BTW,sp),a ; byte to write 
      001C9C 0F 02            [ 1]  417 	clr (OPT,sp)  ; OPTION flag
      001C9E CD 1B 9E         [ 4]  418 	call UNLOCK 
                                    419 	; check if option
      001CA1 3D 32            [ 1]  420 	tnz FPTR 
      001CA3 26 19            [ 1]  421 	jrne 2$
      001CA5 90 BE 33         [ 2]  422 	ldw y,PTR16 
      001CA8 90 A3 48 00      [ 2]  423 	cpw y,#OPTION_BASE
      001CAC 2B 10            [ 1]  424 	jrmi 2$
      001CAE 90 A3 48 80      [ 2]  425 	cpw y,#OPTION_END+1
      001CB2 2A 0A            [ 1]  426 	jrpl 2$
      001CB4 03 02            [ 1]  427 	cpl (OPT,sp)
                                    428 	; OPTION WRITE require this UNLOCK 
      001CB6 72 1E 50 5B      [ 1]  429     bset FLASH_CR2,#FLASH_CR2_OPT
      001CBA 72 1F 50 5C      [ 1]  430     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001CBE                        431 2$: 
      001CBE CD 1C 49         [ 4]  432 	call WR_BYTE 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001CC1 0D 02            [ 1]  433 	tnz (OPT,sp)
      001CC3 27 0D            [ 1]  434 	jreq 3$ 
      001CC5 7B 01            [ 1]  435     ld a,(BTW,sp)
      001CC7 90 5F            [ 1]  436     clrw y
      001CC9 90 97            [ 1]  437 	ld yl,a 
      001CCB 1D 00 02         [ 2]  438 	subw x,#CELLL 
      001CCE FF               [ 2]  439 	ldw (x),y 
      001CCF CD 1C 49         [ 4]  440 	call WR_BYTE
      001CD2                        441 3$: 
      001CD2 CD 1B C6         [ 4]  442 	call LOCK 
      001CD5 5B 02            [ 2]  443 	addw sp,#VSIZE 
      001CD7 81               [ 4]  444     ret
                                    445 
                                    446 ;------------------------------
                                    447 ; write integer in FLASH|EEPROM
                                    448 ; EE! ( n ud -- )
                                    449 ;------------------------------
      001CD8 1C 8D                  450 	.word LINK 
                           001CDA   451 	LINK=.
      001CDA 03                     452 	.byte 3 
      001CDB 45 45 21               453 	.ascii "EE!"
      001CDE                        454 ee_store:
      001CDE CD 1A 60         [ 4]  455 	call PSTO 
      001CE1 CD 1B 9E         [ 4]  456 	call UNLOCK 
      001CE4 90 93            [ 1]  457 	ldw y,x 
      001CE6 90 FE            [ 2]  458 	ldw y,(y)
      001CE8 90 89            [ 2]  459 	pushw y 
      001CEA 90 5E            [ 1]  460 	swapw y 
      001CEC FF               [ 2]  461 	ldw (x),y 
      001CED CD 1C 49         [ 4]  462 	call WR_BYTE 
      001CF0 90 85            [ 2]  463 	popw y 
      001CF2 1D 00 02         [ 2]  464 	subw x,#CELLL
      001CF5 FF               [ 2]  465 	ldw (x),y 
      001CF6 CD 1C 49         [ 4]  466 	call WR_BYTE
      001CF9 CC 1B C6         [ 2]  467 	jp LOCK 
                                    468 
                                    469 
                                    470 ;----------------------------
                                    471 ; Erase flash memory row 
                                    472 ; stm8s208 as 128 bytes rows
                                    473 ; ROW-ERASE ( ud -- )
                                    474 ;----------------------------
      001CFC 1C DA                  475 	.word LINK 
                           001CFE   476 	LINK=. 
      001CFE 09                     477 	.byte 9 
      001CFF 52 4F 57 2D 45 52 41   478 	.ascii "ROW-ERASE" 
             53 45
      001D08                        479 row_erase:
      001D08 CD 1A 60         [ 4]  480 	call PSTO
                                    481 ;code must be execute from RAM 
                                    482 ;copy routine to PAD 
      001D0B 1D 00 02         [ 2]  483 	subw x,#CELLL 
      001D0E 90 AE 1D 55      [ 2]  484 	ldw y,#row_erase_proc
      001D12 FF               [ 2]  485 	ldw (x),y 
      001D13 CD 0B 39         [ 4]  486 	call PAD 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001D16 90 AE 1D 7C      [ 2]  487 	ldw y,#row_erase_proc_end 
      001D1A 72 A2 1D 55      [ 2]  488 	subw y,#row_erase_proc
      001D1E 1D 00 02         [ 2]  489 	subw x,#CELLL 
      001D21 FF               [ 2]  490 	ldw (x),y 
      001D22 CD 0B 75         [ 4]  491 	call CMOVE 
      001D25                        492 block_erase:
      001D25 90 BE 33         [ 2]  493 	ldw y,FPTR+1
      001D28 90 A3 23 80      [ 2]  494 	cpw y,#app_space 
      001D2C 2A 13            [ 1]  495 	jrpl erase_flash 
                                    496 ; erase EEPROM block
      001D2E 90 A3 40 00      [ 2]  497 	cpw y,#EEPROM_BASE 
      001D32 24 01            [ 1]  498 	jruge 1$
      001D34 81               [ 4]  499 	ret ; bad address 
      001D35 90 A3 47 FF      [ 2]  500 1$: cpw y,#EEPROM_END 
      001D39 23 01            [ 2]  501 	jrule 2$ 
      001D3B 81               [ 4]  502 	ret ; bad address 
      001D3C                        503 2$:	
      001D3C CD 1B 60         [ 4]  504 	call unlock_eeprom 
      001D3F 20 03            [ 2]  505 	jra proceed_erase
                                    506 ; erase flash block:
      001D41                        507 erase_flash:
      001D41 CD 1B 7F         [ 4]  508 	call unlock_flash 
      001D44                        509 proceed_erase:
      001D44 CD 0B 39         [ 4]  510 	call PAD 
      001D47 90 93            [ 1]  511 	ldw y,x
      001D49 90 FE            [ 2]  512 	ldw y,(y)
      001D4B 1C 00 02         [ 2]  513 	addw x,#CELLL  
      001D4E 90 FD            [ 4]  514 	call (y) 
      001D50 72 17 50 5F      [ 1]  515 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001D54 81               [ 4]  516 	ret 
                                    517 
                                    518 ; this routine is to be copied to PAD 
      001D55                        519 row_erase_proc:
      001D55 35 20 50 5B      [ 1]  520 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001D59 35 DF 50 5C      [ 1]  521 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001D5D 4F               [ 1]  522 	clr a 
      001D5E 90 5F            [ 1]  523 	clrw y 
      001D60 91 A7 00 32      [ 1]  524 	ldf ([FPTR],y),a
      001D64 90 5C            [ 2]  525     incw y
      001D66 91 A7 00 32      [ 1]  526 	ldf ([FPTR],y),a
      001D6A 90 5C            [ 2]  527     incw y
      001D6C 91 A7 00 32      [ 1]  528 	ldf ([FPTR],y),a
      001D70 90 5C            [ 2]  529     incw y
      001D72 91 A7 00 32      [ 1]  530 	ldf ([FPTR],y),a
      001D76 72 05 50 5F FB   [ 2]  531 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001D7B 81               [ 4]  532 	ret
      001D7C                        533 row_erase_proc_end:
                                    534 
                                    535 
                                    536 ;-----------------------------------
                                    537 ; block programming must be 
                                    538 ; executed from RAM 
                                    539 ; initial contidions: 
                                    540 ; 		memory unlocked
                                    541 ;       FPTR initialized 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                    542 ; input: 
                                    543 ;    x   buffer address 
                                    544 ;-----------------------------------
                           000001   545 	BCNT=1 
      001D7C                        546 copy_buffer:
      001D7C 4B 80            [ 1]  547 	push #BLOCK_SIZE  
                                    548 ;enable block programming 
      001D7E 72 10 50 5B      [ 1]  549 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001D82 72 11 50 5C      [ 1]  550 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001D86 90 5F            [ 1]  551 	clrw y
      001D88 F6               [ 1]  552 1$:	ld a,(x)
      001D89 91 A7 00 32      [ 1]  553 	ldf ([FPTR],y),a
      001D8D 5C               [ 2]  554 	incw x 
      001D8E 90 5C            [ 2]  555 	incw y 
      001D90 0A 01            [ 1]  556 	dec (BCNT,sp)
      001D92 26 F4            [ 1]  557 	jrne 1$
                                    558 ; wait EOP bit 
      001D94 72 05 50 5F FB   [ 2]  559 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001D99 84               [ 1]  560 	pop a ; remove BCNT from stack 
      001D9A 81               [ 4]  561 	ret 
      001D9B                        562 copy_buffer_end:
                                    563 
                                    564 ;-------------------------
                                    565 ; move program_row to RAM 
                                    566 ; in TIB 
                                    567 ;------------------------
      001D9B                        568 copy_prog_to_ram:
      001D9B 1D 00 06         [ 2]  569 	subw x,#6
      001D9E 90 AE 1D 7C      [ 2]  570 	ldw y,#copy_buffer 
      001DA2 EF 04            [ 2]  571 	ldw (4,x),y 
      001DA4 90 AE 17 00      [ 2]  572 	ldw y,#TIBBASE
      001DA8 EF 02            [ 2]  573 	ldw (2,x),y 
      001DAA 90 AE 1D 9B      [ 2]  574 	ldw y,#copy_buffer_end 
      001DAE 72 A2 1D 7C      [ 2]  575 	subw y,#copy_buffer  
      001DB2 FF               [ 2]  576 	ldw (x),y 
      001DB3 CD 0B 75         [ 4]  577 	call CMOVE 
      001DB6 81               [ 4]  578 	ret 
                                    579 
                                    580 
                                    581 ;-----------------------------
                                    582 ; write a row in FLASH/EEPROM 
                                    583 ; WR-ROW ( a ud -- )
                                    584 ; a -> address 128 byte buffer to write 
                                    585 ; ud ->  row address in FLASH|EEPROM 
                                    586 ;-----------------------------
      001DB7 1C FE                  587 	.word LINK 
                           001DB9   588 	LINK=.
      001DB9 06                     589 	.byte 6 
      001DBA 57 52 2D 52 4F 57      590 	.ascii "WR-ROW"
      001DC0                        591 write_row:
      001DC0 CD 1A 60         [ 4]  592 	call PSTO
                                    593 ; align to FLASH block 
      001DC3 A6 80            [ 1]  594 	ld a,#0x80 
      001DC5 B4 34            [ 1]  595 	and a,PTR8 
      001DC7 B7 34            [ 1]  596 	ld PTR8,a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001DC9 CD 1D 9B         [ 4]  597 	call copy_prog_to_ram
      001DCC CD 1B 9E         [ 4]  598 	call UNLOCK
      001DCF 90 93            [ 1]  599 	ldw y,x 
      001DD1 90 FE            [ 2]  600 	ldw y,(y)
      001DD3 1C 00 02         [ 2]  601 	addw x,#CELLL 
      001DD6 89               [ 2]  602 	pushw x 
      001DD7 93               [ 1]  603 	ldw x,y ; buffer address in x 
      001DD8 CD 17 00         [ 4]  604 	call TIBBASE
      001DDB CD 1B C6         [ 4]  605 	call LOCK
      001DDE 85               [ 2]  606 	popw x 
      001DDF 81               [ 4]  607 	ret 
                                    608 
                                    609 ;-------------------------------------
                                    610 ; change value of OPTION register 
                                    611 ; SET-OPT (c n -- ) 
                                    612 ; c new value.
                                    613 ; n OPT  number {1..7}
                                    614 ;--------------------------------------
      001DE0 1D B9                  615 		.word LINK 
                           001DE2   616 		LINK=.
      001DE2 07                     617 		.byte 7 
      001DE3 53 45 54 2D 4F 50 54   618 		.ascii "SET-OPT" 
      001DEA                        619 set_option: 
      001DEA 90 93            [ 1]  620 		ldw y,x 
      001DEC 90 FE            [ 2]  621 		ldw y,(y)
      001DEE 27 06            [ 1]  622 		jreq 1$
      001DF0 90 A3 00 07      [ 2]  623 		cpw y,#7 
      001DF4 23 04            [ 2]  624 		jrule 2$ 
                                    625 ; invalid OPTION number 		
      001DF6 1C 00 04         [ 2]  626 1$:		addw x,#2*CELLL
      001DF9 81               [ 4]  627 		ret
      001DFA 90 58            [ 2]  628 2$:		sllw y 
      001DFC 72 A9 47 FF      [ 2]  629 		addw y,#OPTION_BASE-1
      001E00 FF               [ 2]  630 		ldw (x),y 
      001E01 1D 00 02         [ 2]  631 		subw x,#CELLL 
      001E04 90 5F            [ 1]  632 		clrw y 
      001E06 FF               [ 2]  633 		ldw (x),y 
      001E07 CD 1C 92         [ 4]  634 		call ee_cstore
      001E0A 81               [ 4]  635 		ret 
                                    636 
                                    637 
                                    638 
                                    639 ;--------------------------------------
                                    640 ; reset system to its original state 
                                    641 ; before any user modification
                                    642 ; PRISTINE ( -- )
                                    643 ;-------------------------------------
      001E0B 1D E2                  644 	.word LINK  
                           001E0D   645 	LINK=.
      001E0D 08                     646 	.byte 8 
      001E0E 50 52 49 53 54 49 4E   647 	.ascii "PRISTINE"
             45
      001E16                        648 pristine:
                                    649 ;;; erase EEPROM
      001E16 CD 1A 7F         [ 4]  650 	call EEPROM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001E19 CD 06 BF         [ 4]  651 1$:	call DDUP 
      001E1C CD 1D 08         [ 4]  652 	call row_erase
      001E1F 90 93            [ 1]  653 	ldw y,x 
      001E21 90 EE 02         [ 2]  654 	ldw y,(2,y)
      001E24 72 A9 00 80      [ 2]  655 	addw y,#BLOCK_SIZE
      001E28 EF 02            [ 2]  656 	ldw (2,x),y
      001E2A 90 A3 48 00      [ 2]  657 	cpw y,#OPTION_BASE 
      001E2E 25 E9            [ 1]  658 	jrult 1$
                                    659 ;;; reset OPTION to default values
      001E30 90 AE 00 01      [ 2]  660 	ldw y,#1 ; OPT1 
      001E34 FF               [ 2]  661 2$:	ldw (x),y   
      001E35 90 5F            [ 1]  662 	clrw y 
      001E37 EF 02            [ 2]  663 	ldw (2,x),y  ; ( 0 1 -- ) 
      001E39 CD 06 BF         [ 4]  664 	call DDUP    ; ( 0 1 0 1 -- )  
      001E3C CD 1D EA         [ 4]  665 	call set_option
      001E3F 90 93            [ 1]  666 	ldw y,x 
      001E41 90 FE            [ 2]  667 	ldw y,(y)
      001E43 90 5C            [ 2]  668 	incw y  ; next OPTION 
      001E45 90 A3 00 08      [ 2]  669 	cpw y,#8 
      001E49 25 E9            [ 1]  670 	jrult 2$
                                    671 ;;; erase first row of app_space 	
      001E4B 90 AE 23 80      [ 2]  672 	ldw y,#app_space
      001E4F EF 02            [ 2]  673 	ldw (2,x),y  
      001E51 90 5F            [ 1]  674 	clrw y 
      001E53 FF               [ 2]  675 	ldw (x),y ; ( app_space 0 -- )
      001E54 CD 1D 08         [ 4]  676 	call row_erase 
                                    677 ; reset interrupt vectors 
      001E57 1D 00 02         [ 2]  678 	subw x,#CELLL 
      001E5A 90 5F            [ 1]  679 	clrw y  
      001E5C FF               [ 2]  680 4$:	ldw (x),y  ; ( n -- ) int# 
      001E5D CD 04 D9         [ 4]  681 	call DUPP  
      001E60 CD 1E 7D         [ 4]  682 	call reset_vector
      001E63 90 93            [ 1]  683 	ldw y,x 
      001E65 90 FE            [ 2]  684 	ldw y,(y)
      001E67 90 5C            [ 2]  685 	incw y   ; next vector 
      001E69 90 A3 00 19      [ 2]  686 	cpw y,#25 
      001E6D 25 ED            [ 1]  687 	jrult 4$
      001E6F CC 00 00         [ 2]  688 	jp NonHandledInterrupt ; reset MCU
                                    689 
                                    690 ;------------------------------
                                    691 ; reset an interrupt vector 
                                    692 ; to its initial value 
                                    693 ; i.e. NonHandledInterrupt
                                    694 ; RST-IVEC ( n -- )
                                    695 ;-----------------------------
      001E72 1E 0D                  696 	.word LINK 
                           001E74   697 	LINK=. 
      001E74 08                     698 	.byte 8 
      001E75 52 53 54 2D 49 56 45   699 	.ascii "RST-IVEC"
             43
      001E7D                        700 reset_vector:
      001E7D 90 93            [ 1]  701 	ldw y,x
      001E7F 1C 00 02         [ 2]  702 	addw x,#CELLL 
      001E82 90 FE            [ 2]  703 	ldw y,(y)
      001E84 90 A3 00 17      [ 2]  704 	cpw y,#23 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001E88 27 3A            [ 1]  705 	jreq 9$
      001E8A 90 A3 00 1D      [ 2]  706 	cpw y,#29 ; last vector
      001E8E 22 34            [ 1]  707 	jrugt 9$  
      001E90 90 58            [ 2]  708 	sllw y 
      001E92 90 58            [ 2]  709 	sllw y 
      001E94 72 A9 80 08      [ 2]  710 	addw y,#0x8008 ; irq0 address 
      001E98 90 BF 24         [ 2]  711 	ldw YTEMP,y
      001E9B 1D 00 06         [ 2]  712 	subw x,#3*CELLL 
      001E9E EF 02            [ 2]  713 	ldw (2,x),y 
      001EA0 90 5F            [ 1]  714 	clrw y
      001EA2 FF               [ 2]  715 	ldw (x),y 
      001EA3 A6 82            [ 1]  716 	ld a,#0x82 
      001EA5 90 95            [ 1]  717 	ld yh,a
      001EA7 EF 04            [ 2]  718 	ldw (4,x),y
      001EA9 CD 1C DE         [ 4]  719 	call ee_store
      001EAC 1D 00 06         [ 2]  720 	subw x,#3*CELLL
      001EAF 90 5F            [ 1]  721 	clrw y 
      001EB1 FF               [ 2]  722 	ldw (x),y 
      001EB2 90 AE 00 00      [ 2]  723 	ldw y,#NonHandledInterrupt
      001EB6 EF 04            [ 2]  724 	ldw (4,x),y 
      001EB8 90 BE 24         [ 2]  725 	ldw y,YTEMP  
      001EBB 72 A9 00 02      [ 2]  726 	addw y,#2
      001EBF EF 02            [ 2]  727 	ldw (2,x),y 
      001EC1 CD 1C DE         [ 4]  728 	call ee_store
      001EC4 81               [ 4]  729 9$:	ret 
                                    730 
                                    731 
                                    732 ;------------------------------
                                    733 ; all interrupt vector with 
                                    734 ; an address >= a are resetted 
                                    735 ; to default
                                    736 ; CHKIVEC ( a -- )
                                    737 ;------------------------------
      001EC5 1E 74                  738 	.word LINK 
                           001EC7   739 	LINK=.
      001EC7 07                     740 	.byte 7
      001EC8 43 48 4B 49 56 45 43   741 	.ascii "CHKIVEC"
                                    742 ;local variables 
                           000001   743 	SSP=1
                           000003   744 	CADR=3
                           000005   745 	OFS=5
                           000006   746 	VSIZE=6  
      001ECF                        747 CHKIVEC:
      001ECF 52 06            [ 2]  748 	sub sp,#VSIZE ;alloc local variables 
      001ED1 90 93            [ 1]  749 	ldw y,x 
      001ED3 90 FE            [ 2]  750 	ldw y,(y)
      001ED5 17 03            [ 2]  751 	ldw (CADR,sp),y ; ca 
      001ED7 1F 01            [ 2]  752 	ldw (SSP,sp),x 
      001ED9 AE 80 0A         [ 2]  753 	ldw x,#0x800a ; irq0 address 
      001EDC BF 33            [ 2]  754 	ldw PTR16,X
      001EDE AE FF FC         [ 2]  755 	ldw x,#-4 
      001EE1 1C 00 04         [ 2]  756 1$:	addw x,#4
      001EE4 A3 00 78         [ 2]  757 	cpw x,#30*4 ; irq0-29 
      001EE7 27 22            [ 1]  758 	jreq 9$
      001EE9 90 93            [ 1]  759 	ldw y,x  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001EEB 91 D6 33         [ 4]  760 	ld a,([PTR16],y)
      001EEE 11 03            [ 1]  761 	cp a,(CADR,sp)
      001EF0 25 EF            [ 1]  762 	jrult 1$
      001EF2 90 5C            [ 2]  763 	incw y 
      001EF4 91 D6 33         [ 4]  764 	ld a,([PTR16],y)
      001EF7 11 04            [ 1]  765 	cp a,(CADR+1,sp) 
      001EF9 25 E6            [ 1]  766 	jrult 1$ 
      001EFB 1F 05            [ 2]  767 	ldw (OFS,sp),x 
      001EFD 54               [ 2]  768 	srlw x
      001EFE 54               [ 2]  769 	srlw x 
      001EFF 90 93            [ 1]  770 	ldw y,x 
      001F01 1E 01            [ 2]  771 	ldw x,(SSP,sp)
      001F03 FF               [ 2]  772 	ldw (x),y
      001F04 CD 1E 7D         [ 4]  773 	call reset_vector
      001F07 1E 05            [ 2]  774 	ldw x,(OFS,sp) 
      001F09 20 D6            [ 2]  775 	jra 1$
      001F0B 1E 01            [ 2]  776 9$:	ldw x,(SSP,sp) 
      001F0D 1C 00 02         [ 2]  777 	addw x,#CELLL 
      001F10 5B 06            [ 2]  778 	addw sp,#VSIZE ; drop local variables  
      001F12 81               [ 4]  779 	ret 
                                    780 
                                    781 ;------------------------------
                                    782 ; set interrupt vector 
                                    783 ; SET-IVEC ( ud n -- )
                                    784 ;  ud Handler address
                                    785 ;  n  vector # 0 .. 29 
                                    786 ;-----------------------------
      001F13 1E C7                  787 	.word LINK
                           001F15   788 	LINK=.
      001F15 08                     789 	.byte 8 
      001F16 53 45 54 2D 49 56 45   790 	.ascii "SET-IVEC" 
             43
      001F1E                        791 set_vector:
      001F1E 90 93            [ 1]  792     ldw y,x 
      001F20 1C 00 02         [ 2]  793 	addw x,#CELLL 
      001F23 90 FE            [ 2]  794 	ldw y,(y) ; vector #
      001F25 90 A3 00 1D      [ 2]  795 	cpw y,#29 ; last vector
      001F29 23 04            [ 2]  796 	jrule 2$
      001F2B 1C 00 04         [ 2]  797 	addw x,#2*CELLL 
      001F2E 81               [ 4]  798 	ret
      001F2F 90 58            [ 2]  799 2$:	sllw y 
      001F31 90 58            [ 2]  800 	sllw y 
      001F33 72 A9 80 08      [ 2]  801 	addw y,#0X8008 ; IRQ0 vector address 
      001F37 90 BF 24         [ 2]  802 	ldw YTEMP,y ; vector address 
      001F3A A6 82            [ 1]  803 	ld a,#0x82 
      001F3C 90 95            [ 1]  804 	ld yh,a 
      001F3E E6 01            [ 1]  805 	ld a,(1,x) ; isr address bits 23..16 
      001F40 90 97            [ 1]  806 	ld yl,a 
                                    807 ;  write 0x82 + most significant byte of int address	
      001F42 1D 00 06         [ 2]  808 	subw x,#3*CELLL 
      001F45 EF 04            [ 2]  809 	ldw (4,x),y 
      001F47 90 BE 24         [ 2]  810 	ldw y,YTEMP
      001F4A EF 02            [ 2]  811 	ldw (2,x),y ; vector address 
      001F4C 90 5F            [ 1]  812 	clrw y 
      001F4E FF               [ 2]  813 	ldw (x),y   ; as a double 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001F4F CD 1C DE         [ 4]  814 	call ee_store 
      001F52 90 93            [ 1]  815 	ldw y,x 
      001F54 90 EE 02         [ 2]  816 	ldw y,(2,y) ; bits 15..0 int vector 
      001F57 1D 00 06         [ 2]  817 	subw x,#3*CELLL 
      001F5A EF 04            [ 2]  818 	ldw (4,x),y 
      001F5C 90 BE 24         [ 2]  819 	ldw y,YTEMP 
      001F5F 72 A9 00 02      [ 2]  820 	addw y,#2 
      001F63 EF 02            [ 2]  821 	ldw (2,x),y 
      001F65 90 5F            [ 1]  822 	clrw y 
      001F67 FF               [ 2]  823 	ldw (x),y 
      001F68 CD 1C DE         [ 4]  824 	call ee_store
      001F6B 1C 00 04         [ 2]  825 	addw x,#2*CELLL  
      001F6E 81               [ 4]  826 9$: ret 
                                    827 
                                    828 
                                    829 ;------------------------
                                    830 ; Compile word to flash
                                    831 ; EE, (w -- )
                                    832 ;-----------------------
      001F6F 1F 15                  833 	.word LINK
                           001F71   834 	LINK=.
      001F71 03                     835 	.byte 3
      001F72 45 45 2C               836 	.ascii "EE,"
      001F75                        837 EE_COMMA:
      001F75 1D 00 04         [ 2]  838 	subw x,#2*CELLL 
      001F78 90 BE 18         [ 2]  839 	ldw y,UCP
      001F7B 90 89            [ 2]  840 	pushw y 
      001F7D EF 02            [ 2]  841 	ldw (2,x),y 
      001F7F 90 5F            [ 1]  842 	clrw y 
      001F81 FF               [ 2]  843 	ldw (x),y
      001F82 CD 1C DE         [ 4]  844 	call ee_store
      001F85 90 85            [ 2]  845 	popw y 
      001F87 72 A9 00 02      [ 2]  846 	addw y,#2
      001F8B 90 BF 18         [ 2]  847 	ldw UCP,y
      001F8E 81               [ 4]  848 	ret 
                                    849 
                                    850 
                                    851 ;-------------------------
                                    852 ; Compile byte to flash 
                                    853 ; EEC, ( c -- )	
                                    854 ;-------------------------
      001F8F 1F 71                  855 	.word LINK 
                           001F91   856 	LINK=.
      001F91 04                     857 	.byte 4 
      001F92 45 45 43 2C            858 	.ascii "EEC,"
      001F96                        859 EE_CCOMMA:
      001F96 1D 00 04         [ 2]  860 	subw x,#2*CELLL 
      001F99 90 BE 18         [ 2]  861 	ldw y,UCP
      001F9C 90 89            [ 2]  862 	pushw y 
      001F9E EF 02            [ 2]  863 	ldw (2,x),y 
      001FA0 90 5F            [ 1]  864 	clrw y 
      001FA2 FF               [ 2]  865 	ldw (x),y
      001FA3 CD 1C 92         [ 4]  866 	call ee_cstore
      001FA6 90 85            [ 2]  867 	popw y 
      001FA8 90 5C            [ 2]  868 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001FAA 90 BF 18         [ 2]  869 	ldw UCP,y
      001FAD 81               [ 4]  870 	ret 
                                    871 
                                    872 
                                    873 ;--------------------------
                                    874 ; copy FLASH block to ROWBUF
                                    875 ; ROW>BUF ( ud -- )
                                    876 ;--------------------------
      001FAE 1F 91                  877 	.word LINK 
                           001FB0   878 	LINK=.
      001FB0 07                     879 	.byte 7 
      001FB1 52 4F 57 3E 42 55 46   880 	.ascii "ROW>BUF"
      001FB8                        881 ROW2BUF: 
      001FB8 CD 1A 60         [ 4]  882 	call PSTO 
      001FBB A6 80            [ 1]  883 	ld a,#BLOCK_SIZE
      001FBD 88               [ 1]  884 	push a 
      001FBE B4 34            [ 1]  885 	and a,PTR8 ; block align 
      001FC0 B7 34            [ 1]  886 	ld PTR8,a
      001FC2 90 AE 16 80      [ 2]  887 	ldw y,#ROWBUFF 
      001FC6 92 BC 00 32      [ 5]  888 1$: ldf a,[FPTR]
      001FCA 90 F7            [ 1]  889 	ld (y),a
      001FCC CD 1B DA         [ 4]  890 	call INC_FPTR
      001FCF 90 5C            [ 2]  891 	incw y 
      001FD1 0A 01            [ 1]  892 	dec (1,sp)
      001FD3 26 F1            [ 1]  893 	jrne 1$ 
      001FD5 84               [ 1]  894 	pop a 
      001FD6 81               [ 4]  895 	ret 
                                    896 
                                    897 
                                    898 ;---------------------------
                                    899 ; copy ROWBUFF to flash 
                                    900 ; BUF>ROW ( ud -- )
                                    901 ; ud is row address as double 
                                    902 ;---------------------------
      001FD7 1F B0                  903 	.word LINK 
                           001FD9   904 	LINK=.
      001FD9 07                     905 	.byte 7 
      001FDA 42 55 46 3E 52 4F 57   906 	.ascii "BUF>ROW" 
      001FE1                        907 BUF2ROW:
      001FE1 CD 05 D4         [ 4]  908 	call TBUF ; ( ud rb -- )
      001FE4 CD 06 94         [ 4]  909 	call ROT 
      001FE7 CD 06 94         [ 4]  910 	call ROT  ; ( rb ud -- )
      001FEA CD 1D C0         [ 4]  911 	call write_row 
      001FED 81               [ 4]  912 	ret 
                                    913 
                                    914 ;---------------------------------
                                    915 ; how many byte free in that row 
                                    916 ; RFREE ( a -- n )
                                    917 ; a is least byte of target address
                                    918 ;----------------------------------
      001FEE 1F D9                  919 	.word LINK 
                           001FF0   920 	LINK=.
      001FF0 05                     921 	.byte 5 
      001FF1 52 46 52 45 45         922 	.ascii "RFREE"
      001FF6                        923 RFREE:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001FF6 E6 01            [ 1]  924 	ld a,(1,x)
      001FF8 A4 7F            [ 1]  925 	and a,#BLOCK_SIZE-1 
      001FFA B7 24            [ 1]  926 	ld YTEMP,a 
      001FFC A6 80            [ 1]  927 	ld a,#BLOCK_SIZE 
      001FFE B0 24            [ 1]  928 	sub a,YTEMP 
      002000 90 5F            [ 1]  929 	clrw y 
      002002 90 97            [ 1]  930 	ld yl,a
      002004 FF               [ 2]  931 	ldw (x),y 
      002005 81               [ 4]  932 	ret 
                                    933 
                                    934 ;---------------------------------
                                    935 ; write u bytes to flash/EEPROM 
                                    936 ; constraint to row limit 
                                    937 ; RAM>EE ( ud a u -- u2 )
                                    938 ; ud flash address 
                                    939 ; a ram address 
                                    940 ; u bytes count
                                    941 ; return u2 bytes written  
                                    942 ;-------------------------------
      002006 1F F0                  943 	.word LINK 
                           002008   944 	LINK=. 
      002008 06                     945 	.byte 6
      002009 52 41 4D 3E 45 45      946 	.ascii "RAM>EE"
                                    947 	
      00200F                        948 RAM2EE:
                                    949 ; copy ud on top 
      00200F 90 93            [ 1]  950 	ldw y,x 
      002011 90 EE 06         [ 2]  951 	ldw y,(6,y) ; LSW of ud  
      002014 90 BF 24         [ 2]  952 	ldw YTEMP,y 
      002017 90 93            [ 1]  953 	ldw y,x 
      002019 90 EE 04         [ 2]  954 	ldw y,(4,y)  ; MSW of ud 
      00201C 1D 00 04         [ 2]  955 	subw x,#2*CELLL 
      00201F FF               [ 2]  956 	ldw (x),y 
      002020 90 BE 24         [ 2]  957 	ldw y,YTEMP 
      002023 EF 02            [ 2]  958 	ldw (2,x),y 
      002025 CD 1F B8         [ 4]  959 	call ROW2BUF 
      002028 90 93            [ 1]  960 	ldw y,x 
      00202A 90 EE 06         [ 2]  961 	ldw y,(6,y)
      00202D 90 89            [ 2]  962 	pushw y ; udl 
      00202F 90 9F            [ 1]  963 	ld a,yl
      002031 A4 7F            [ 1]  964 	and a,#BLOCK_SIZE-1 
      002033 90 5F            [ 1]  965 	clrw y 
      002035 90 97            [ 1]  966 	ld yl,a 
      002037 72 A9 16 80      [ 2]  967 	addw y,#ROWBUFF 
      00203B 1D 00 02         [ 2]  968 	subw x,#CELLL 
      00203E FF               [ 2]  969 	ldw (x),y  
      00203F CD 04 E9         [ 4]  970 	call SWAPP ;  ( ud a ra u -- )
      002042 CD 04 83         [ 4]  971 	call RFROM  
      002045 CD 1F F6         [ 4]  972 	call RFREE 
      002048 CD 07 EF         [ 4]  973 	call MIN
      00204B CD 04 D9         [ 4]  974 	call DUPP 
      00204E CD 04 A2         [ 4]  975 	call TOR  
      002051 CD 0B 75         [ 4]  976 	call CMOVE
      002054 CD 1F E1         [ 4]  977 	call BUF2ROW 
      002057 CD 04 83         [ 4]  978 	call RFROM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      00205A 81               [ 4]  979 	ret 
                                    980 
                                    981 ;--------------------------
                                    982 ; expand 16 bit address 
                                    983 ; to 32 bit address 
                                    984 ; FADDR ( a -- ud )
                                    985 ;--------------------------
      00205B 20 08                  986 	.word LINK 
                           00205D   987 	LINK=. 
      00205D 05                     988 	.byte 5 
      00205E 46 41 44 44 52         989 	.ascii "FADDR"
      002063                        990 FADDR:
      002063 CC 0A 3A         [ 2]  991 	jp ZERO 
                                    992 
                                    993 ;--------------------------
                                    994 ; move new colon definition to FLASH 
                                    995 ; using WR-ROW for efficiency 
                                    996 ; preserving bytes already used 
                                    997 ; in the current block. 
                                    998 ; At this point the compiler as completed
                                    999 ; in RAM and pointers CP and CNTXT updated.
                                   1000 ; CNTXT point to nfa of new word and  
                                   1001 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                   1002 ; 
                                   1003 ; FMOVE ( -- cp+ )
                                   1004 ; 
                                   1005 ;--------------------------
      002066 20 5D                 1006 	.word LINK 
                           002068  1007 	LINK=.
      002068 05                    1008 	.byte 5 
      002069 46 4D 4F 56 45        1009 	.ascii "FMOVE" 
      00206E                       1010 FMOVE:
      00206E CD 05 E6         [ 4] 1011 	call TFLASH 
      002071 CD 04 32         [ 4] 1012 	CALL AT 
      002074 CD 03 E7         [ 4] 1013 	CALL QBRAN 
      002077 20 F2                 1014 	.word no_move  
      002079 CD 06 35         [ 4] 1015 	call CPP
      00207C CD 04 32         [ 4] 1016 	call AT  
      00207F CD 04 D9         [ 4] 1017 	call DUPP ; ( udl udl -- )
      002082 CD 06 19         [ 4] 1018 	call CNTXT 
      002085 CD 04 32         [ 4] 1019 	call AT 
      002088 CD 03 B4         [ 4] 1020 	call DOLIT 
      00208B 00 02                 1021 	.word 2 
      00208D CD 07 4D         [ 4] 1022 	call SUBB ; ( udl udl a -- )
      002090 CD 04 E9         [ 4] 1023 	call SWAPP 
      002093 CD 20 63         [ 4] 1024 	call FADDR 
      002096 CD 06 94         [ 4] 1025 	call ROT  ; ( udl ud a -- )
      002099 CD 04 D9         [ 4] 1026 	call DUPP 
      00209C CD 04 A2         [ 4] 1027 	call TOR    ; R: a 
      00209F                       1028 FMOVE2: 
      00209F CD 0B 28         [ 4] 1029 	call HERE 
      0020A2 CD 04 96         [ 4] 1030 	call RAT 
      0020A5 CD 07 4D         [ 4] 1031 	call SUBB ; (udl ud a wl -- )
      0020A8                       1032 next_row:
      0020A8 CD 04 D9         [ 4] 1033 	call DUPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      0020AB CD 04 A2         [ 4] 1034 	call TOR  ; ( udl ud a wl -- ) R: a wl
      0020AE CD 20 0F         [ 4] 1035 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      0020B1 CD 04 D9         [ 4] 1036 	call DUPP 
      0020B4 CD 04 A2         [ 4] 1037 	call TOR
      0020B7 CD 06 D4         [ 4] 1038 	call PLUS  ; ( udl+ ) 
      0020BA CD 04 D9         [ 4] 1039 	call DUPP 
      0020BD CD 0A 3A         [ 4] 1040 	call ZERO   ; ( udl+ ud -- )
      0020C0 CD 04 83         [ 4] 1041 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      0020C3 CD 04 83         [ 4] 1042 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      0020C6 CD 05 03         [ 4] 1043 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      0020C9 CD 07 4D         [ 4] 1044 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      0020CC CD 04 D9         [ 4] 1045 	call DUPP 
      0020CF CD 03 E7         [ 4] 1046 	call QBRAN
      0020D2 20 EB                 1047 	.word fmove_done 
      0020D4 CD 04 E9         [ 4] 1048 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      0020D7 CD 04 83         [ 4] 1049 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      0020DA CD 06 D4         [ 4] 1050 	call PLUS  ; ( udl+2 ud wl- a+ )
      0020DD CD 04 D9         [ 4] 1051 	call DUPP 
      0020E0 CD 04 A2         [ 4] 1052 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      0020E3 CD 04 E9         [ 4] 1053 	call SWAPP 
      0020E6 CD 03 FE         [ 4] 1054 	call BRAN
      0020E9 20 A8                 1055 	.word next_row  
      0020EB                       1056 fmove_done:	
      0020EB CD 04 83         [ 4] 1057 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      0020EE 1C 00 0A         [ 2] 1058 	addw x,#5*CELLL ; (  -- cp+ ) new CP 
      0020F1 81               [ 4] 1059  	ret  
      0020F2                       1060 no_move:
      0020F2 CD 0A 3A         [ 4] 1061 	call ZERO
      0020F5 81               [ 4] 1062 	ret 
                                   1063 
                                   1064 ;------------------------------------------
                                   1065 ; adjust pointers after **FMOVE** operetion.
                                   1066 ; UPDAT-PTR ( cp+ -- )
                                   1067 ; cp+ is new CP position after FMOVE 
                                   1068 ;-------------------------------------------
      0020F6 20 68                 1069 	.word LINK 
                           0020F8  1070 	LINK=.
      0020F8 09                    1071 	.byte 9
      0020F9 55 50 44 41 54 2D 50  1072 	.ascii "UPDAT-PTR" 
             54 52
      002102                       1073 UPDATPTR:
                                   1074 ;reset VP to previous position  
      002102 CD 1A DA         [ 4] 1075 	call EEPVP 
      002105 CD 04 CF         [ 4] 1076 	call DROP 
      002108 CD 04 32         [ 4] 1077 	call AT
      00210B CD 06 27         [ 4] 1078 	call VPP 
      00210E CD 04 1B         [ 4] 1079 	call STORE
                                   1080 ;update CONTEXT and LAST 
      002111 CD 1A C4         [ 4] 1081 	call EEPCP 
      002114 CD 04 CF         [ 4] 1082 	call DROP
      002117 CD 04 32         [ 4] 1083 	call AT
      00211A CD 03 B4         [ 4] 1084 	call DOLIT 
      00211D 00 02                 1085 	.word 2 
      00211F CD 06 D4         [ 4] 1086 	call PLUS 
      002122 CD 04 D9         [ 4] 1087 	call DUPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      002125 CD 06 19         [ 4] 1088 	call CNTXT 
      002128 CD 04 1B         [ 4] 1089 	call STORE
      00212B CD 06 45         [ 4] 1090 	call LAST
      00212E CD 04 1B         [ 4] 1091 	call STORE 
      002131 CD 1A F4         [ 4] 1092 	call UPDATLAST 
                                   1093 ;update CP 
      002134 CD 06 35         [ 4] 1094 	call CPP 
      002137 CD 04 1B         [ 4] 1095 	call STORE
      00213A CD 1B 1D         [ 4] 1096 	call UPDATCP 
      00213D 81               [ 4] 1097 	ret 
                                   1098 
                                   1099 ;-----------------------------
                                   1100 ; move interrupt sub-routine
                                   1101 ; in flash memory
                                   1102 ;----------------------------- 
      00213E 20 F8                 1103 	.word LINK 
                           002140  1104 	LINK=. 
      002140 06                    1105 	.byte 6
      002141 49 46 4D 4F 56 45     1106 	.ascii "IFMOVE" 
      002147                       1107 IFMOVE:
      002147 CD 05 E6         [ 4] 1108 	call TFLASH 
      00214A CD 04 32         [ 4] 1109 	CALL AT 
      00214D CD 03 E7         [ 4] 1110 	CALL QBRAN 
      002150 20 F2                 1111 	.word no_move 
      002152 CD 06 35         [ 4] 1112 	call CPP 
      002155 CD 04 32         [ 4] 1113 	call AT 
      002158 CD 04 D9         [ 4] 1114 	call DUPP ; ( udl udl -- )
      00215B CD 1A DA         [ 4] 1115 	call EEPVP 
      00215E CD 04 CF         [ 4] 1116 	call DROP
      002161 CD 04 32         [ 4] 1117 	call AT  ; ( udl udl a )
      002164 CD 04 A2         [ 4] 1118 	call TOR 
      002167 CD 20 63         [ 4] 1119 	call FADDR
      00216A CD 04 96         [ 4] 1120 	call RAT ; ( udl ud a -- ) R: a 
      00216D CC 20 9F         [ 2] 1121 	jp FMOVE2 
                                   1122 
                                   1123 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



                           000001  4511 .if WANT_SCALING_CONST 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



                                   4512         .include "const_ratio.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------------------------------------
                                     20 ; Irrationals constants 
                                     21 ; expressed as 2 integers ratio
                                     22 ; aproximation. These are to be used with scaling operators */ and */MOD 
                                     23 ; REF: https://www.forth.com/starting-forth/5-fixed-point-arithmetic/
                                     24 ;---------------------------------------------------------------------
                                     25 
                                     26 ;       PI ( --  355 113 )
                                     27 ; precision 8.5e-8 
                                     28 ; usage example to compute circle area
                                     29 ; : CAREA DUP * PI */ ;
                                     30 ; 
      002170 21 40                   31         .word LINK 
                           002172    32         LINK=.
      002172 02                      33         .byte 2
      002173 50 49                   34         .ascii "PI" 
      002175                         35 PII:
      002175 1D 00 04         [ 2]   36         subw x,#2*CELLL 
      002178 90 AE 01 63      [ 2]   37         ldw y,#355 
      00217C EF 02            [ 2]   38         ldw (2,x),y 
      00217E 90 AE 00 71      [ 2]   39         ldw y,#113 
      002182 FF               [ 2]   40         ldw (x),y 
      002183 81               [ 4]   41         ret 
                                     42 
                                     43 ;      SQRT2 ( -- 19601  13860 )
                                     44 ; precision: 1.5e-9 
                                     45 ; usage example to compute Voltage peek to peek from Vrms 
                                     46 ; : VPP SQRT2 */ 2 * ;
                                     47 ;
      002184 21 72                   48         .word LINK 
                           002186    49         LINK=.
      002186 05                      50         .byte 5 
      002187 53 51 52 54 32          51         .ascii "SQRT2" 
      00218C                         52 SQRT2:
      00218C 1D 00 04         [ 2]   53         subw x,#2*CELLL 
      00218F 90 AE 4C 91      [ 2]   54         ldw y,#19601 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      002193 EF 02            [ 2]   55         ldw (2,x),y 
      002195 90 AE 36 24      [ 2]   56         ldw y,#13860 
      002199 FF               [ 2]   57         ldw (x),y 
      00219A 81               [ 4]   58         ret 
                                     59 
                                     60 ;   SQRT3 ( -- 18817 10864 )
                                     61 ; precision: 1.1e-9
                                     62 ;
      00219B 21 86                   63         .word LINK 
                           00219D    64         LINK=.
      00219D 05                      65         .byte 5
      00219E 53 51 52 54 33          66         .ascii "SQRT3" 
      0021A3                         67 SQRT3: 
      0021A3 1D 00 04         [ 2]   68     subw x,#2*CELLL 
      0021A6 90 AE 49 81      [ 2]   69     ldw y,#18817 
      0021AA EF 02            [ 2]   70     ldw (2,x),y 
      0021AC 90 AE 2A 70      [ 2]   71     ldw y,#10864 
      0021B0 FF               [ 2]   72     ldw (x),y 
      0021B1 81               [ 4]   73     ret 
                                     74 
                                     75 ;   E ( -- 28667 10546 )
                                     76 ; precision: 5.5e-9 
                                     77 ; natural log base 
      0021B2 21 9D                   78         .word LINK 
                           0021B4    79         LINK=.
      0021B4 01                      80         .byte 1
      0021B5 45                      81         .ascii "E" 
      0021B6                         82 ENEPER:
      0021B6 1D 00 04         [ 2]   83     subw x,#2*CELLL 
      0021B9 90 AE 6F FB      [ 2]   84     ldw y,#28667 
      0021BD EF 02            [ 2]   85     ldw (2,x),y 
      0021BF 90 AE 29 32      [ 2]   86     ldw y,#10546 
      0021C3 FF               [ 2]   87     ldw (x),y 
      0021C4 81               [ 4]   88     ret 
                                     89 
                                     90 ;   SQRT10 ( -- 22936 7253 )
                                     91 ; precision: 5.7e-9 
      0021C5 21 B4                   92         .word LINK 
                           0021C7    93         LINK=.
      0021C7 06                      94         .byte 6 
      0021C8 53 51 52 54 31 30       95         .ascii "SQRT10" 
      0021CE                         96 SQRT10:
      0021CE 1D 00 04         [ 2]   97     subw x,#2*CELLL
      0021D1 90 AE 59 98      [ 2]   98     ldw y,#22936 
      0021D5 EF 02            [ 2]   99     ldw (2,x),y 
      0021D7 90 AE 1C 55      [ 2]  100     ldw y,#7253
      0021DB FF               [ 2]  101     ldw (x),y 
      0021DC 81               [ 4]  102     ret 
                                    103 
                                    104 ;   12RT2 ( -- 26797 25293 )
                                    105 ; precision: 1.0e-9 
                                    106 ; used in music to compute well tempered scale
      0021DD 21 C7                  107         .word LINK 
                           0021DF   108         LINK=. 
      0021DF 05                     109         .byte 5 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      0021E0 31 32 52 54 32         110         .ascii "12RT2"
      0021E5                        111 RT12_2:
      0021E5 1D 00 04         [ 2]  112     subw x,#2*CELLL 
      0021E8 90 AE 68 AD      [ 2]  113     ldw y,#26797
      0021EC EF 02            [ 2]  114     ldw (2,x),y 
      0021EE 90 AE 62 CD      [ 2]  115     ldw y,#25293
      0021F2 FF               [ 2]  116     ldw (x),y 
      0021F3 81               [ 4]  117     ret 
                                    118 
                                    119 ;   LOG2s ( -- 2040 11103 )
                                    120 ; log(2)/1.6384
                                    121 ; precision: 1.1e-8
      0021F4 21 DF                  122         .word LINK 
                           0021F6   123         LINK=.
      0021F6 05                     124         .byte 5 
      0021F7 4C 4F 47 32 53         125         .ascii "LOG2S" 
      0021FC                        126 LOG2S:
      0021FC 1D 00 04         [ 2]  127     subw x,#2*CELLL
      0021FF 90 AE 07 F8      [ 2]  128     ldw y,#2040 
      002203 EF 02            [ 2]  129     ldw (2,x),y 
      002205 90 AE 2B 5F      [ 2]  130     ldw y,#11103 
      002209 FF               [ 2]  131     ldw (x),y 
      00220A 81               [ 4]  132     ret 
                                    133 
                                    134 ;   LN2 ( -- 485 11464 )
                                    135 ; ln(2)/16.384 
                                    136 ; precision: 1.0e-7 
      00220B 21 F6                  137         .word LINK 
                           00220D   138         LINK=.
      00220D 04                     139         .byte 4 
      00220E 4C 4E 32 53            140         .ascii "LN2S" 
      002212                        141 LN2S: 
      002212 1D 00 04         [ 2]  142     subw x,#2*CELLL
      002215 90 AE 01 E5      [ 2]  143     ldw y,#485
      002219 EF 02            [ 2]  144     ldw (2,x),y 
      00221B 90 AE 2C C8      [ 2]  145     ldw y,#11464 
      00221F FF               [ 2]  146     ldw (x),y 
      002220 81               [ 4]  147     ret 
                                    148 
                                    149 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



                                   4513 .endif
                           000001  4514 .if WANT_CONST_TABLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



                                   4515         .include "ctable.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;------------------------------
                                     20 ; words to create and read 
                                     21 ; constants tables in FLASH 
                                     22 ; and EEPROM
                                     23 ;------------------------------
                                     24 
                                     25 
                                     26 ;------------------------------
                                     27 ; create constants bytes table 
                                     28 ; in persistant memory
                                     29 ;  CT: ( --  ; <string> )
                                     30 ;-----------------------------
      002221 22 0D                   31     .word LINK 
                           002223    32     LINK=.
      002223 03                      33     .byte 3
      002224 43 54 3A                34     .ascii "CT:"
      002227                         35 CTABLE:
                                     36 
      002227 81               [ 4]   37     ret 
                                     38 
                                     39 ;-------------------------------
                                     40 ; terminate CTABLE compilation
                                     41 ; CT; ( -- )
                                     42 ;-------------------------------
      002228 22 23                   43     .word LINK
                           00222A    44     LINK=.
      00222A 03                      45     .byte 3 
      00222B 43 54 3B                46     .ascii "CT;" 
      00222E                         47 CTSEMI:
                                     48 
      00222E 81               [ 4]   49     ret 
                                     50 
                                     51 ;--------------------------------
                                     52 ; create constants words table 
                                     53 ; in persistant memory 
                                     54 ; WT: ( -- ; <string> )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



                                     55 ;--------------------------------
      00222F 22 2A                   56     .word LINK 
                           002231    57     LINK=.
      002231 03                      58     .byte 3
      002232 57 54 3A                59     .ascii "WT:"
      002235                         60 WTABLE:
                                     61 
      002235 81               [ 4]   62     ret 
                                     63 
                                     64 ;-------------------------------
                                     65 ; terminate WTABLE compilation
                                     66 ; WT; ( -- )
                                     67 ;-------------------------------
      002236 22 31                   68     .word LINK
                           002238    69     LINK=.
      002238 03                      70     .byte 3 
      002239 57 54 3B                71     .ascii "WT;" 
      00223C                         72 WTSEMI:
                                     73 
      00223C 81               [ 4]   74     ret 
                                     75 
                                     76 
                                     77 ;----------------------------------
                                     78 ; table runtime
                                     79 ; stack table base address 
                                     80 ; DOTABLE ( -- a|ud )
                                     81 ;----------------------------------
      00223D 22 38                   82     .word LINK 
                           00223F    83     LINK=.
      00223F 07                      84     .byte 7
      002240 44 4F 54 41 42 4C 45    85     .ascii "DOTABLE"
      002247                         86 DOTABLE:
      002247 90 85            [ 2]   87     popw y 
      002249 90 BF 24         [ 2]   88     ldw YTEMP,y 
                           000001    89 .if NUCLEO
      00224C 1D 00 04         [ 2]   90     subw x,#2*CELLL 
      00224F 90 FE            [ 2]   91     ldw y,(y)
      002251 FF               [ 2]   92     ldw (x),y 
      002252 90 BE 24         [ 2]   93     ldw y,YTEMP 
      002255 90 EE 02         [ 2]   94     ldw y,(2,y)
      002258 EF 02            [ 2]   95     ldw (2,x),y
                           000000    96 .else ; DISCOVERY 
                                     97     subw x,#CELLL 
                                     98     ldw y,(y)
                                     99     ldw YTEMP,y
                                    100     ldw y,(y)
                                    101     ldw (x),y
                                    102 .endif 
      00225A 81               [ 4]  103     ret ; address stacked by call to EXEC.
                                    104 
                                    105 ;---------------------------------
                                    106 ; stack an element of CTABLE 
                                    107 ; CT@ ( u a|ad -- c )
                                    108 ; u element order {0..size-1}
                                    109 ; a|ad table address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                                    110 ;--------------------------------
      00225B 22 3F                  111     .word LINK 
                           00225D   112     LINK=.
      00225D 03                     113     .byte 3
      00225E 43 54 40               114     .ascii "CT@" 
      002261                        115 CTAT:
      002261 CD 1A 60         [ 4]  116     call PSTO 
      002264 90 93            [ 1]  117     ldw y,x 
      002266 90 FE            [ 2]  118     ldw y,(y)
      002268 72 B9 00 33      [ 2]  119     addw y,PTR16
      00226C 90 BF 33         [ 2]  120     ldw PTR16,y 
      00226F 90 5F            [ 1]  121     clrw y
                           000001   122 .if NUCLEO ; 24 bits address
      002271 24 02            [ 1]  123     jrnc 1$
      002273 3C 32            [ 1]  124     inc FPTR 
      002275                        125 1$:
      002275 92 BC 00 32      [ 5]  126     ldf a,[FPTR]
                           000000   127 .else ; DISCOVERY 16 bits address     
                                    128     ld a,[PTR16]
                                    129 .endif 
      002279 90 97            [ 1]  130     ld yl,a 
      00227B FF               [ 2]  131     ldw (x),y 
      00227C 81               [ 4]  132     ret 
                                    133 
                                    134 ;---------------------------------
                                    135 ; stack an element of WTABLE 
                                    136 ; WT@ ( u a|ud -- w )
                                    137 ; u is element order {0..size-1}
                                    138 ; a|ud table address 
                                    139 ;----------------------------------
      00227D 22 5D                  140     .word LINK 
                           00227F   141     LINK=.
      00227F 03                     142     .byte 3
      002280 57 54 40               143     .ascii "WT@" 
      002283                        144 WTAT:
      002283 CD 1A 60         [ 4]  145     call PSTO 
      002286 90 93            [ 1]  146     ldw y,x 
      002288 90 FE            [ 2]  147     ldw y,(y)
      00228A 72 B9 00 33      [ 2]  148     addw y,PTR16
      00228E 90 BF 33         [ 2]  149     ldw PTR16,y 
                           000001   150 .if NUCLEO ; 24 bits address
      002291 24 02            [ 1]  151     jrnc 1$
      002293 3C 32            [ 1]  152     inc FPTR 
      002295                        153 1$:
      002295 92 BC 00 32      [ 5]  154     ldf a,[FPTR]
      002299 90 95            [ 1]  155     ld yh,a 
      00229B CD 1B DA         [ 4]  156     call INC_FPTR 
      00229E 92 BC 00 32      [ 5]  157     ldf a,[FPTR]
      0022A2 90 97            [ 1]  158     ld yl,a 
                           000000   159 .else ; DISCOVERY 16 bits address     
                                    160     ld a,[PTR16]
                                    161     ld yh,a 
                                    162     call inc_ptr 
                                    163     ld a,[PTR16]
                                    164     ld yl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                                    165 .endif 
      0022A4 FF               [ 2]  166     ldw (x),y 
      0022A5 81               [ 4]  167     ret 
                                    168 
                                    169 ;--------------------------
                                    170 ; fill character table 
                                    171 ; CTFILL ( ud -- )
                                    172 ;--------------------------
      0022A6 22 7F                  173     .word LINK 
                           0022A8   174     LINK=.
      0022A8 06                     175     .byte 6 
      0022A9 43 54 46 49 4C 4C      176     .ascii "CTFILL"
      0022AF                        177 CTFILL:
      0022AF CD 1A 60         [ 4]  178     CALL PSTO
      0022B2 CD 1B 9E         [ 4]  179     CALL UNLOCK
      0022B5 CD 0A 3A         [ 4]  180     CALL ZERO 
      0022B8 CD 09 CE         [ 4]  181 1$: CALL ONEP 
      0022BB CD 04 D9         [ 4]  182     CALL DUPP 
      0022BE CD 23 0B         [ 4]  183     CALL INTQ 
      0022C1 CD 03 E7         [ 4]  184     CALL QBRAN 
      0022C4 22 CE                  185     .word 2$
      0022C6 CD 1C 49         [ 4]  186     call WR_BYTE 
      0022C9 CD 03 FE         [ 4]  187     CALL BRAN 
      0022CC 22 B8                  188     .word 1$ 
      0022CE CD 04 CF         [ 4]  189 2$: CALL DROP 
      0022D1 CD 1B C6         [ 4]  190     CALL LOCK 
      0022D4 81               [ 4]  191     ret 
                                    192 
                                    193 ;--------------------------
                                    194 ; fill word table 
                                    195 ; WTFILL ( ud -- )
                                    196 ;--------------------------
      0022D5 22 A8                  197     .word LINK 
                           0022D7   198     LINK=.
      0022D7 06                     199     .byte 6 
      0022D8 57 54 46 49 4C 4C      200     .ascii "WTFILL"
      0022DE                        201 WTFILL:
      0022DE CD 1A 60         [ 4]  202     CALL PSTO
      0022E1 CD 1B 9E         [ 4]  203     CALL UNLOCK
      0022E4 CD 0A 3A         [ 4]  204     CALL ZERO 
      0022E7 CD 09 CE         [ 4]  205 1$: CALL ONEP 
      0022EA CD 04 D9         [ 4]  206     CALL DUPP
      0022ED CD 23 0B         [ 4]  207     CALL INTQ
      0022F0 CD 03 E7         [ 4]  208     CALL QBRAN 
      0022F3 22 FD                  209     .word 2$
      0022F5 CD 1C 68         [ 4]  210     call WR_WORD 
      0022F8 CD 03 FE         [ 4]  211     CALL BRAN 
      0022FB 22 E7                  212     .word 1$ 
      0022FD CD 04 CF         [ 4]  213 2$: CALL DROP 
      002300 CD 1B C6         [ 4]  214     CALL LOCK 
      002303 81               [ 4]  215     ret 
                                    216 
                                    217 ;------------------------
                                    218 ; Prompted input for integer 
                                    219 ; [n]? ( -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                                    220 ;------------------------
      002304 22 D7                  221     .word LINK 
                           002306   222     LINK=.
      002306 04                     223     .byte 4
      002307 5B 6E 5D 3F            224     .ascii "[n]?" 
      00230B                        225 INTQ:
      00230B CD 0E A0         [ 4]  226     CALL CR 
      00230E CD 03 B4         [ 4]  227     call DOLIT 
      002311 00 5B                  228     .word '[
      002313 CD 03 9E         [ 4]  229     CALL EMIT 
      002316 CD 0F 3B         [ 4]  230     CALL DOT 
      002319 CD 0E DF         [ 4]  231     CALL  DOTQP
      00231C 03                     232     .byte 3
      00231D 5D 3F 20               233     .ascii "]? " 
      002320 CD 12 87         [ 4]  234     CALL QUERY 
      002323 CD 10 B2         [ 4]  235     call TOKEN 
      002326 CC 0D 4D         [ 2]  236     jp NUMBQ
                                    237 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



                                   4516 .endif
                                   4517 
                                   4518 ;===============================================================
                                   4519 
                           002306  4520 LASTN =	LINK   ;last name defined
                                   4521 
                                   4522 ; application code begin here
      002380                       4523 	.bndry 128 ; align on flash block  
      002380                       4524 app_space: 
                                   4525 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        000770 R   |   6 ABOR1      0012C3 R
  6 ABOR2      0012DA R   |   6 ABORQ      0012BB R   |   6 ABORT      0012AC R
  6 ABRTQ      001597 R   |   6 ABSS       000767 R   |   6 ACCEP      001242 R
  6 ACCP1      00124B R   |   6 ACCP2      001271 R   |   6 ACCP3      001274 R
  6 ACCP4      001276 R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |   6 ADRADJ     000673 R
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  6 AFT        001582 R   |   6 AGAIN      0014D8 R   |   6 AHEAD      001535 R
  6 ALLOT      0013EB R   |   6 ANDD       000525 R   |     APP_CP  =  004004 
    APP_LAST=  004000     |     APP_RUN =  004002     |     APP_VP  =  004006 
  6 AT         000432 R   |   6 ATEXE      000B5E R   |   6 AUTORUN    000127 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
  6 BACK1      0011EA R   |   6 BASE       000596 R   |     BASEE   =  00000A 
    BCNT    =  000001     |   6 BCOMP      00142D R   |   6 BDIGS      000C45 R
    BEEP_BIT=  000004     |     BEEP_CSR=  0050F3     |     BEEP_MAS=  000010 
    BEEP_POR=  00000F     |   6 BEGIN      0014BA R   |     BIT0    =  000000 
    BIT1    =  000001     |     BIT2    =  000002     |     BIT3    =  000003 
    BIT4    =  000004     |     BIT5    =  000005     |     BIT6    =  000006 
    BIT7    =  000007     |   6 BKSLA      001082 R   |   6 BKSP       0011BA R
    BKSPP   =  000008     |   6 BLANK      000A2D R   |     BLOCK_SI=  000080 
    BOOT_ROM=  006000     |     BOOT_ROM=  007FFF     |   6 BRAN       0003FE R
    BTW     =  000001     |   6 BUF2ROW    001FE1 R   |   6 BYE        0000B4 R
    CADR    =  000003     |     CALLL   =  0000CD     |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CARRY   =  000028 
  6 CAT        000450 R   |   6 CCOMMA     00140F R   |     CC_C    =  000000 
    CC_H    =  000004     |     CC_I0   =  000003     |     CC_I1   =  000005 
    CC_N    =  000002     |     CC_V    =  000007     |     CC_Z    =  000001 
    CELLL   =  000002     |   6 CELLM      0009B2 R   |   6 CELLP      0009A3 R
  6 CELLS      0009C1 R   |     CFG_GCR =  007F60     |     CFG_GCR_=  000001 
    CFG_GCR_=  000000     |   6 CHAR1      000E72 R   |   6 CHAR2      000E75 R
  6 CHKIVEC    001ECF R   |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |   6 CMOV1      000B7D R   |   6 CMOV2      000B95 R
  6 CMOVE      000B75 R   |     CNTDWN  =  000030     |   6 CNTXT      000619 R
  6 COLD       0019F1 R   |   6 COLD1      0019F1 R   |   6 COLON      001730 R
  6 COMMA      0013F8 R   |   6 COMPI      00143D R   |     COMPO   =  000040 
  6 CONSTANT   0017DA R   |   6 COUNT      000B11 R   |   6 CPP        000635 R
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |   6 CR         000EA0 R
  6 CREAT      001776 R   |     CRR     =  00000D     |   6 CSTOR      00043F R
  6 CTABLE     002227 R   |   6 CTAT       002261 R   |   6 CTFILL     0022AF R
  6 CTSEMI     00222E R   |   6 DAT        000AF1 R   |     DATSTK  =  001680 
  6 DCONST     001816 R   |   6 DDROP      0006B4 R   |   6 DDUP       0006BF R
    DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF     |   6 DECIM      000CF5 R
  6 DEPTH      000A7C R   |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
  6 DGTQ1      000D3A R   |   6 DI         0000C2 R   |   6 DIG        000C6E R
  6 DIGIT      000C09 R   |   6 DIGS       000C7F R   |   6 DIGS1      000C7F R
  6 DIGS2      000C8C R   |   6 DIGTQ      000D09 R   |     DISCOVER=  000000 
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   6 DN1        00072E R
  6 DNEGA      000711 R   |   6 DOCONST    001804 R   |   6 DOLIT      0003B4 R
  6 DONXT      0003C8 R   |   6 DOSTR      000EB6 R   |   6 DOT        000F3B R
  6 DOT1       000F51 R   |   6 DOTABLE    002247 R   |   6 DOTI1      001972 R
  6 DOTID      00195C R   |   6 DOTO1      00134F R   |   6 DOTOK      001335 R
  6 DOTPR      001064 R   |   6 DOTQ       0015B1 R   |   6 DOTQP      000EDF R
  6 DOTR       000EED R   |   6 DOTS       0018FE R   |   6 DOTS1      001909 R
  6 DOTS2      001912 R   |   6 DOVAR      000586 R   |   6 DO_DCONS   001845 R
  6 DROP       0004CF R   |   6 DSTOR      000ACB R   |   6 DUMP       0018B4 R
  6 DUMP1      0018CB R   |   6 DUMP3      0018ED R   |   6 DUMPP      001883 R
  6 DUPP       0004D9 R   |   6 EDIGS      000CAA R   |   6 EEPCP      001AC4 R
  6 EEPLAST    001A97 R   |   6 EEPROM     001A7F R   |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |     EEPROM_R=  000010     |     EEPROM_S=  000800 
  6 EEPRUN     001AAE R   |   6 EEPVP      001ADA R   |   6 EE_CCOMM   001F96 R
  6 EE_COMMA   001F75 R   |   6 EE_CREAD   001C2F R   |   6 EE_READ    001C0D R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]

Symbol Table

  6 EI         0000BB R   |   6 ELSEE      001510 R   |   6 EMIT       00039E R
  6 ENEPER     0021B6 R   |   6 EQ1        00078B R   |   6 EQUAL      000775 R
  6 ERASE      000BD7 R   |     ERR     =  00001B     |   6 EVAL       001378 R
  6 EVAL1      001378 R   |   6 EVAL2      001394 R   |   6 EXE1       000B6C R
  6 EXECU      00040E R   |     EXT     =  000000     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |   6 EXTRC      000C31 R   |   6 FADDR      002063 R
    FHSE    =  7A1200     |     FHSI    =  F42400     |   6 FILL       000BA4 R
  6 FILL1      000BC1 R   |   6 FILL2      000BCA R   |   6 FIND       001116 R
  6 FIND1      001134 R   |   6 FIND2      001162 R   |   6 FIND3      00116E R
  6 FIND4      001182 R   |   6 FIND5      00118F R   |   6 FIND6      001173 R
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
    FLSI    =  01F400     |   6 FMOVE      00206E R   |   6 FMOVE2     00209F R
  6 FOR        00148D R   |   6 FORGET     000158 R   |   6 FORGET1    000187 R
  6 FORGET2    00020D R   |   6 FORGET4    000216 R   |   6 FORGET6    0001CF R
    FPTR    =  000032     |   6 FREEVAR    000223 R   |   6 FREEVAR4   000259 R
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_ODR=  000000 
    GPIO_SIZ=  000005     |   6 HERE       000B28 R   |   6 HEX        000CE0 R
  6 HI         0019AE R   |   6 HLD        000606 R   |   6 HOLD       000C55 R
    HSECNT  =  004809     |     I2C_CCRH=  00521C     |     I2C_CCRH=  000080 
    I2C_CCRH=  0000C0     |     I2C_CCRH=  000080     |     I2C_CCRH=  000000 
    I2C_CCRH=  000001     |     I2C_CCRH=  000000     |     I2C_CCRL=  00521B 
    I2C_CCRL=  00001A     |     I2C_CCRL=  000002     |     I2C_CCRL=  00000D 
    I2C_CCRL=  000050     |     I2C_CCRL=  000090     |     I2C_CCRL=  0000A0 
    I2C_CR1 =  005210     |     I2C_CR1_=  000006     |     I2C_CR1_=  000007 
    I2C_CR1_=  000000     |     I2C_CR2 =  005211     |     I2C_CR2_=  000002 
    I2C_CR2_=  000003     |     I2C_CR2_=  000000     |     I2C_CR2_=  000001 
    I2C_CR2_=  000007     |     I2C_DR  =  005216     |     I2C_FREQ=  005212 
    I2C_ITR =  00521A     |     I2C_ITR_=  000002     |     I2C_ITR_=  000000 
    I2C_ITR_=  000001     |     I2C_OARH=  005214     |     I2C_OARH=  000001 
    I2C_OARH=  000002     |     I2C_OARH=  000006     |     I2C_OARH=  000007 
    I2C_OARL=  005213     |     I2C_OARL=  000000     |     I2C_OAR_=  000813 
    I2C_OAR_=  000009     |     I2C_PECR=  00521E     |     I2C_READ=  000001 
    I2C_SR1 =  005217     |     I2C_SR1_=  000003     |     I2C_SR1_=  000001 
    I2C_SR1_=  000002     |     I2C_SR1_=  000006     |     I2C_SR1_=  000000 
    I2C_SR1_=  000004     |     I2C_SR1_=  000007     |     I2C_SR2 =  005218 
    I2C_SR2_=  000002     |     I2C_SR2_=  000001     |     I2C_SR2_=  000000 
    I2C_SR2_=  000003     |     I2C_SR2_=  000005     |     I2C_SR3 =  005219 
    I2C_SR3_=  000001     |     I2C_SR3_=  000007     |     I2C_SR3_=  000004 
    I2C_SR3_=  000000     |     I2C_SR3_=  000002     |     I2C_TRIS=  00521D 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]

Symbol Table

    I2C_WRIT=  000000     |   6 ICOLON     001741 R   |   6 IFETCH     0014AB R
  6 IFF        0014E8 R   |   6 IFMOVE     002147 R   |     IMEDD   =  000080 
  6 IMMED      001753 R   |   6 INCH       000392 R   |   6 INC_FPTR   001BDA R
  6 INITOFS    001709 R   |   6 INN        0005B4 R   |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_PU=  000001 
  6 INTE1      001317 R   |   6 INTER      0012ED R   |   6 INTQ       00230B R
    INT_ADC2=  000016     |     INT_AUAR=  000012     |     INT_AWU =  000001 
    INT_CAN_=  000008     |     INT_CAN_=  000009     |     INT_CLK =  000002 
    INT_EXTI=  000003     |     INT_EXTI=  000004     |     INT_EXTI=  000005 
    INT_EXTI=  000006     |     INT_EXTI=  000007     |     INT_FLAS=  000018 
    INT_I2C =  000013     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000011     |     INT_UART=  000015 
    INT_UART=  000014     |     INT_VECT=  008060     |     INT_VECT=  00800C 
    INT_VECT=  008028     |     INT_VECT=  00802C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  008050     |     INT_VECT=  00804C     |     INT_VECT=  00805C 
    INT_VECT=  008058     |   6 INVER      0006EE R   |     IPR0    =  000002 
    IPR1    =  000001     |     IPR2    =  000000     |     IPR3    =  000003 
    IPR_MASK=  000003     |     IRET_COD=  000080     |   6 ISEMI      00169E R
    ITC_SPR1=  007F70     |     ITC_SPR2=  007F71     |     ITC_SPR3=  007F72 
    ITC_SPR4=  007F73     |     ITC_SPR5=  007F74     |     ITC_SPR6=  007F75 
    ITC_SPR7=  007F76     |     ITC_SPR8=  007F77     |     IWDG_KR =  0050E0 
    IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2     |   6 JSRC       0016F3 R
  6 KEY        000E20 R   |   6 KTAP       001207 R   |   6 KTAP1      00122A R
  6 KTAP2      00122D R   |   6 LAST       000645 R   |   6 LASTN   =  002306 R
  6 LBRAC      001324 R   |     LED2_BIT=  000005     |     LED2_MAS=  000020 
    LED2_POR=  00500A     |   6 LESS       0007B2 R   |     LF      =  00000A 
  6 LINK    =  002306 R   |   6 LITER      00145F R   |   6 LN2S       002212 R
  6 LOCK       001BC6 R   |   6 LOG2S      0021FC R   |   6 LSHIFT     0009EC R
  6 LSHIFT1    0009F5 R   |   6 LSHIFT4    0009FD R   |   6 LT1        0007C8 R
    MASKK   =  001F7F     |   6 MAX        0007D2 R   |   6 MAX1       0007E5 R
  6 MIN        0007EF R   |   6 MIN1       000802 R   |   6 MMOD1      0008A5 R
  6 MMOD2      0008B9 R   |   6 MMOD3      0008D0 R   |   6 MMSM1      00084C R
  6 MMSM2      000860 R   |   6 MMSM3      000862 R   |   6 MMSM4      00086A R
  6 MODD       0008EA R   |   6 MONE       000A53 R   |     MS      =  00002E 
  6 MSEC       0002CE R   |   6 MSMOD      000888 R   |   6 MSTA1      00097B R
  6 MSTAR      000958 R   |     NAFR    =  004804     |   6 NAMEQ      0011AF R
  6 NAMET      0010C0 R   |     NCLKOPT =  004808     |   6 NEGAT      0006FF R
  6 NEX1       0003D5 R   |   6 NEXT       00149C R   |     NFLASH_W=  00480E 
    NHSECNT =  00480A     |     NOPT1   =  004802     |     NOPT2   =  004804 
    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPT6   =  00480C     |     NOPT7   =  00480E     |     NOPTBL  =  00487F 
  6 NTIB       0005C4 R   |     NUBC    =  004802     |     NUCLEO  =  000001 
  6 NUFQ       000E36 R   |   6 NUFQ1      000E4F R   |   6 NUMBQ      000D4D R
  6 NUMQ1      000D81 R   |   6 NUMQ2      000DB2 R   |   6 NUMQ3      000DF4 R
  6 NUMQ4      000DF9 R   |   6 NUMQ5      000E08 R   |   6 NUMQ6      000E0B R
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   6 NonHandl   000000 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]

Symbol Table

  6 OFFSET     00066A R   |     OFS     =  000005     |   6 ONE        000A45 R
  6 ONEM       0009DB R   |   6 ONEP       0009CE R   |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTIMIZE=  000001     |     OPTION_B=  004800     |     OPTION_E=  00487F 
    OPTION_S=  000080     |   6 ORIG       000047 R   |   6 ORR        000539 R
  6 OUTPUT     0003A3 R   |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |   6 OVER       000503 R
  6 OVERT      00166C R   |     PA      =  000000     |   6 PACKS      000BE8 R
  6 PAD        000B39 R   |   6 PAREN      001073 R   |   6 PARS       000F6C R
  6 PARS1      000F97 R   |   6 PARS2      000FC2 R   |   6 PARS3      000FC5 R
  6 PARS4      000FCE R   |   6 PARS5      000FF1 R   |   6 PARS6      001006 R
  6 PARS7      001015 R   |   6 PARS8      001024 R   |   6 PARSE      001035 R
  6 PAUSE      0002DE R   |     PA_BASE =  005000     |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_BASE =  005005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_BASE =  00500A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |   6 PDUM1      001896 R   |   6 PDUM2      0018A7 R
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |   6 PICK       000A93 R
  6 PII        002175 R   |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   6 PLUS       0006D4 R   |   6 PNAM1      001621 R
  6 PRESE      0013A3 R   |     PROD1   =  000022     |     PROD2   =  000024 
    PROD3   =  000026     |   6 PROTECTE   0001FF R   |   6 PSTO       001A60 R
  6 PSTOR      000AAA R   |     PTR16   =  000033     |     PTR8    =  000034 
  6 PTRPLUS    001BF2 R   |   6 QBRAN      0003E7 R   |   6 QDUP       000683 R
  6 QDUP1      00068D R   |   6 QKEY       000380 R   |   6 QSTAC      00135B R
  6 QUERY      001287 R   |   6 QUEST      000F5E R   |   6 QUIT       0013C0 R
  6 QUIT1      0013C8 R   |   6 QUIT2      0013CB R   |   6 RAM2EE     00200F R
    RAMBASE =  000000     |   6 RAMLAST    000658 R   |     RAM_BASE=  000000 
    RAM_END =  0017FF     |     RAM_SIZE=  001800     |   6 RANDOM     00027C R
  6 RAT        000496 R   |   6 RBRAC      0016E0 R   |   6 REPEA      001565 R
  6 RFREE      001FF6 R   |   6 RFROM      000483 R   |     ROP     =  004800 
  6 ROT        000694 R   |   6 ROW2BUF    001FB8 R   |     ROWBUFF =  001680 
    RP0     =  00002C     |   6 RPAT       000460 R   |     RPP     =  0017FF 
  6 RPSTO      00046D R   |   6 RSHIFT     000A08 R   |   6 RSHIFT1    000A11 R
  6 RSHIFT4    000A19 R   |     RST_SR  =  0050B3     |   6 RT12_2     0021E5 R
  6 SAME1      0010DE R   |   6 SAME2      001107 R   |   6 SAMEQ      0010D6 R
  6 SCOM1      001656 R   |   6 SCOM2      001659 R   |   6 SCOMP      001638 R
  6 SEED       000263 R   |     SEEDX   =  000036     |     SEEDY   =  000038 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]

Symbol Table

  6 SEMIS      00167C R   |   6 SETISP     0000CE R   |   6 SET_RAML   0017C3 R
    SFR_BASE=  005000     |     SFR_END =  0057FF     |   6 SIGN       000C94 R
  6 SIGN1      000CA4 R   |   6 SLASH      0008F4 R   |   6 SLMOD      0008D8 R
  6 SNAME      0015EB R   |     SP0     =  00002A     |   6 SPACE      000E58 R
  6 SPACS      000E67 R   |   6 SPAT       0004B9 R   |     SPI_CR1 =  005200 
    SPI_CR2 =  005201     |     SPI_CRCP=  005205     |     SPI_DR  =  005204 
    SPI_ICR =  005202     |     SPI_RXCR=  005206     |     SPI_SR  =  005203 
    SPI_TXCR=  005207     |     SPP     =  001680     |     SPSAVE  =  000001 
  6 SPSTO      0004C6 R   |   6 SQRT10     0021CE R   |   6 SQRT2      00218C R
  6 SQRT3      0021A3 R   |   6 SSMOD      000984 R   |     SSP     =  000001 
    STACK   =  0017FF     |   6 STAR       00094D R   |   6 STASL      000995 R
  6 STOD       000736 R   |   6 STORE      00041B R   |   6 STR        000CC2 R
  6 STRCQ      00146D R   |   6 STRQ       0015A4 R   |   6 STRQP      000ED5 R
  6 SUBB       00074D R   |   6 SWAPP      0004E9 R   |     SWIM_CSR=  007F80 
  6 TAP        0011F1 R   |   6 TBOOT      0019E5 R   |   6 TBUF       0005D4 R
    TBUFFBAS=  001680     |   6 TCHAR      000A64 R   |   6 TEMP       0005A5 R
  6 TEVAL      0005F7 R   |   6 TFLASH     0005E6 R   |   6 THENN      0014FD R
  6 TIB        000B4A R   |     TIBB    =  001700     |     TIBBASE =  001700 
    TIC     =  000027     |   6 TICK       0013D7 R   |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  000000     |     TIM2_CCE=  000001     |     TIM2_CCE=  000004 
    TIM2_CCE=  000005     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCM=  000000 
    TIM2_CCM=  000004     |     TIM2_CCM=  000003     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_CR1=  000007 
    TIM2_CR1=  000000     |     TIM2_CR1=  000003     |     TIM2_CR1=  000001 
    TIM2_CR1=  000002     |     TIM2_EGR=  005304     |     TIM2_EGR=  000001 
    TIM2_EGR=  000002     |     TIM2_EGR=  000003     |     TIM2_EGR=  000006 
    TIM2_EGR=  000000     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
    TIM4_SR =  005342     |     TIM4_SR_=  000000     |   6 TIMEOUTQ   00030E R
  6 TIMER      0002F8 R   |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
  6 TNAM2      00192C R   |   6 TNAM3      00194A R   |   6 TNAM4      001950 R
  6 TNAME      001929 R   |   6 TOFLASH    000333 R   |   6 TOKEN      0010B2 R
  6 TOR        0004A2 R   |   6 TORAM      000373 R   |     TRUEE   =  00FFFF 
  6 TWOSL      000A20 R   |   6 TYPE1      000E87 R   |   6 TYPE2      000E93 R
  6 TYPES      000E82 R   |   6 Timer4Ha   000005 R   |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
    UART3   =  000001     |     UART3_BA=  005240     |     UART3_BR=  005242 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]

Symbol Table

    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  000002 
    UART_BRR=  000003     |     UART_CR1=  000004     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  000005     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  000001     |     UART_GTR=  000009     |     UART_PSC=  00000A 
    UART_SR =  000000     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBASE   =  000006     |     UBC     =  004801     |     UCNTXT  =  000014 
    UCP     =  000018     |     UCTIB   =  00000C     |     UD1     =  000001 
    UD2     =  000002     |     UD3     =  000003     |     UD4     =  000004 
  6 UDOT       000F28 R   |   6 UDOTR      000F08 R   |   6 UEND       000045 R
    UHLD    =  000012     |     UINN    =  00000A     |     UINTER  =  000010 
    ULAST   =  00001A     |   6 ULES1      0007AA R   |   6 ULESS      000794 R
  6 UMMOD      00082A R   |   6 UMSTA      000903 R   |   6 UNIQ1      0015E2 R
  6 UNIQU      0015C3 R   |   6 UNLOCK     001B9E R   |   6 UNTIL      0014C5 R
    UOFFSET =  00001C     |   6 UPDATCP    001B1D R   |   6 UPDATLAS   001AF4 R
  6 UPDATPTR   002102 R   |   6 UPDATRUN   001B0C R   |   6 UPDATVP    001B34 R
  6 UPL1       00057A R   |   6 UPLUS      000563 R   |     UPP     =  000006 
    URLAST  =  000020     |     USR_BTN_=  000004     |     USR_BTN_=  000010 
    USR_BTN_=  005015     |     UTFLASH =  00001E     |     UTIB    =  00000E 
    UTMP    =  000008     |   6 UTYP1      001866 R   |   6 UTYP2      001875 R
  6 UTYPE      001861 R   |     UVP     =  000016     |   6 UZERO      00002B R
  6 VARIA      001790 R   |     VAR_BASE=  000080     |     VAR_TOP =  0017BF 
    VER     =  000003     |   6 VPP        000627 R   |     VSIZE   =  000006 
    WANT_CON=  000001     |     WANT_DEB=  000000     |     WANT_SCA=  000001 
    WANT_SEE=  000000     |     WDGOPT  =  004805     |     WDGOPT_I=  000002 
    WDGOPT_L=  000003     |     WDGOPT_W=  000000     |     WDGOPT_W=  000001 
  6 WHILE      00154B R   |   6 WITHI      00080F R   |   6 WORDD      00109E R
  6 WORDS      001986 R   |   6 WORS1      00198C R   |   6 WORS2      0019A8 R
  6 WR_BYTE    001C49 R   |   6 WR_WORD    001C68 R   |   6 WTABLE     002235 R
  6 WTAT       002283 R   |   6 WTFILL     0022DE R   |   6 WTSEMI     00223C R
    WWDG_CR =  0050D1     |     WWDG_WR =  0050D2     |     XMEM_SIZ=  017830 
  6 XORR       00054E R   |     XTEMP   =  000022     |     YTEMP   =  000024 
  6 ZERO       000A3A R   |   6 ZL1        00051B R   |   6 ZLESS      000512 R
  6 app_spac   002380 R   |   6 block_er   001D25 R   |   6 clear_ra   000019 R
  6 clock_in   000062 R   |   6 copy_buf   001D7C R   |   6 copy_buf   001D9B R
  6 copy_pro   001D9B R   |     da      =  000002     |     db      =  000003 
    dc      =  000000     |     dd      =  000001     |   6 ee_cstor   001C92 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]

Symbol Table

  6 ee_store   001CDE R   |   6 erase_fl   001D41 R   |   6 farat      001B45 R
  6 farcat     001B51 R   |   6 fmove_do   0020EB R   |   6 main       000016 R
  6 next_row   0020A8 R   |   6 no_move    0020F2 R   |   6 pristine   001E16 R
  6 proceed_   001D44 R   |   6 reboot     000325 R   |   6 reset_ve   001E7D R
  6 row_eras   001D08 R   |   6 row_eras   001D55 R   |   6 row_eras   001D7C R
  6 set_opti   001DEA R   |   6 set_vect   001F1E R   |   6 uart_ini   000074 R
  6 unlock_e   001B60 R   |   6 unlock_f   001B7F R   |   6 write_ro   001DC0 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   2380   flags    0

