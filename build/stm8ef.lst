ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                     13 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     15 
                                     16 ;===============================================================
                                     17 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     18 ;  Date: 2019-10-26
                                     19 ;  Changes to memory map:
                                     20 ;       0x16f0  Data Stack, growing downward
                                     21 ;       0x1700  Terminal input buffer TIB
                                     22 ;       0x17ff  Return Stack, growing downard
                                     23 ;================================================================
                                     24 ;       STM8EF, Version 2.1, 13 July
                                     25 ;               Implemented on STM8S-Discovery Board.
                                     26 ;               Assembled by ST VisualDevelop STVD 
                                     27 ;               Bootup on internal 2 MHz clock
                                     28 ;               Switch to external 16 MHz crystal clock
                                     29 ;
                                     30 ; FORTH Virtual Machine:
                                     31 ; Subroutine threaded model
                                     32 ; SP Return stack pointer
                                     33 ; X Data stack pointer
                                     34 ; A,Y Scratch pad registers
                                     35 ;
                                     36 ; Memory Map:
                                     37 ; 0x0 RAM memory, system variables
                                     38 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     39 ; 0x780 Data stack, growing downward
                                     40 ; 0x790 Terminal input buffer TIB
                                     41 ; 0x7FF Return stack, growing downward
                                     42 ; 0x8000 Interrupt vector table
                                     43 ; 0x8080 FORTH startup code
                                     44 ; 0x80E7 Start of FORTH dictionary in ROM
                                     45 ; 0x9584 End of FORTH dictionary
                                     46 ;
                                     47 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     48 ;                  use UART1 instead of UART3 for communication with user.
                                     49 ;                  UART1 is available as ttyACM* device via USB connection.
                                     50 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     51 ;                  and MSEC word that return MS value.
                                     52 ;
                                     53 ;       EF12, Version 2.1, 18apr00cht
                                     54 ;               move to 8000H replacing WHYP.
                                     55 ;               copy interrupt vectors from WHYPFLSH.S19
                                     56 ;               to EF12.S19 before flashing
                                     57 ;               add TICKS1 and DELAY1 for motor stepping
                                     58 ;
                                     59 ;       EF12, 02/18/00, C. H. Ting
                                     60 ;       Adapt 86eForth v2.02 to 68HC12.
                                     61 ;               Use WHYP to seed EF12.ASM
                                     62 ;               Use AS12 native 68HC12 assembler:
                                     63 ;               as12 ef12.asm >ef12.lst
                                     64 ;       EF12A, add ADC code, 02mar00cht
                                     65 ;       EF12B, 01mar00cht
                                     66 ;               stack to 0x78, return stack to 0xf8.
                                     67 ;               add all port definitions
                                     68 ;               add PWM registers
                                     69 ;               add SPI registers and code
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     70 ;       EF12C, 12mar00cht
                                     71 ;               add MAX5250 D/A converter
                                     72 ;       EF12D, 15mar00cht
                                     73 ;               add all the Lexel interface words
                                     74 ;       EF12E, 18apr00cht, save for reference
                                     75 ;
                                     76 ;       Copyright (c) 2000
                                     77 ;       Dr. C. H. Ting
                                     78 ;       156 14th Avenue
                                     79 ;       San Mateo, CA 94402
                                     80 ;       (650) 571-7639
                                     81 ;
                                     82 
                                     83 ;*************************************
                                     84 ; constant used for conditationnal 
                                     85 ; assembly for those word I converted 
                                     86 ; to code.
                                     87 ; Added by Picatout 2020-05-24 
                                     88 ;*************************************
                           000001    89 CONVERT_TO_CODE=1 ; words converted in assembly by Picatout
                           000001    90 PICATOUT_MOD=1  ; code modified by Picatout 
                                     91 
                                     92 ;*********************************************************
                                     93 ;	Assembler constants
                                     94 ;*********************************************************
                           000000    95 RAMBASE =	0x0000	   ;ram base
                           0017FF    96 STACK   =	0x17FF 	;system (return) stack empty 
                           001670    97 DATSTK  =	0x1670	;data stack  empty
                           001680    98 TBUFFBASE =     0x1680  ; flash read/write transaction buffer 
                           001700    99 TIBBASE =       0X1700  ; tib addr.
                                    100 
                                    101 
                                    102 
                                    103 ;; Memory allocation
                                    104 
                           000006   105 UPP     =     RAMBASE+6
                           001670   106 SPP     =     RAMBASE+DATSTK
                           0017FF   107 RPP     =     RAMBASE+STACK
                           001680   108 ROWBUFF =     RAMBASE+TBUFFBASE 
                           001700   109 TIBB    =     RAMBASE+TIBBASE
                           000080   110 CTOP    =     RAMBASE+0x80
                                    111 
                           000001   112 .if PICATOUT_MOD 
                                    113 ; user variables constants 
                           000006   114 UBASE = UPP       ; numeric base 
                           000008   115 UTMP = UBASE+2    ; temporary storage
                           00000A   116 UINN = UTMP+2     ; >IN tib pointer 
                           00000C   117 UCTIB = UINN+2    ; tib count 
                           00000E   118 UTIB = UCTIB+2    ; tib address 
                           000010   119 UINTER = UTIB+2   ; interpreter vector 
                           000012   120 UHLD = UINTER+2   ; hold 
                           000014   121 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000016   122 UCP = UCNTXT+2    ; ram dictionary pointer 
                           000018   123 UFCP = UCP+2      ; flash code pointer 
                           00001A   124 ULAST = UFCP+2    ; flash dictionary pointer 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                    125 .endif ; PICATOUT_MOD
                                    126 
                                    127 ;******  System Variables  ******
                           00001C   128 XTEMP	=	ULAST+2	;address called by CREATE
                           00001E   129 YTEMP	=	XTEMP+2	;address called by CREATE
                           00001C   130 PROD1 = XTEMP	;space for UM*
                           00001E   131 PROD2 = PROD1+2
                           000020   132 PROD3 = PROD2+2
                           000022   133 CARRY = PROD3+2
                           000024   134 SP0	= CARRY+2	;initial data stack pointer
                           000026   135 RP0	= SP0+2		;initial return stack pointer
                           000028   136 MS    =   RP0+2         ; millisecond counter 
                           00002A   137 CNTDWN =  MS+2          ; count down timer 
                           00002C   138 FPTR = CNTDWN+2         ; 24 bits farptr 
                           00002D   139 PTR16 = FPTR+1          ; middle byte of farptr 
                           00002E   140 PTR8 = FPTR+2           ; least byte of farptr 
                                    141 
                           000001   142 .if PICATOUT_MOD
                                    143 ; EEPROM persistant data  
                           004000   144 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   145 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   146 APP_HERE = APP_RUN+2   ; free application space pointer 
                           004006   147 VAR_HERE = APP_HERE+2  ; free data space pointer 
                                    148 .endif ;PICATOUT_MOD
                                    149 
                                    150 
                                    151 ;***********************************************
                                    152 ;; Version control
                                    153 
                           000002   154 VER     =     2         ;major release version
                           000001   155 EXT     =     1         ;minor extension
                                    156 
                                    157 ;; Constants
                                    158 
                           00FFFF   159 TRUEE   =     0xFFFF      ;true flag
                                    160 
                           000040   161 COMPO   =     0x40     ;lexicon compile only bit
                           000080   162 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   163 MASKK   =     0x1F7F  ;lexicon bit mask
                                    164 
                           000002   165 CELLL   =     2       ;size of a cell
                           00000A   166 BASEE   =     10      ;default radix
                           000008   167 BKSPP   =     8       ;back space
                           00000A   168 LF      =     10      ;line feed
                           00000D   169 CRR     =     13      ;carriage return
                           00001B   170 ERR     =     27      ;error escape
                           000027   171 TIC     =     39      ;tick
                           0000CD   172 CALLL   =     0xCD     ;CALL opcodes
                                    173 
                                    174 
                                    175         .macro _ledon
                                    176         bset PC_ODR,#LED2_BIT
                                    177         .endm
                                    178 
                                    179         .macro _ledoff
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    180         bres PC_ODR,#LED2_BIT
                                    181         .endm
                                    182 
                                    183 ;**********************************************************
                                    184         .area DATA (ABS)
      000000                        185         .org RAMBASE 
                                    186 ;**********************************************************
                                    187 
                                    188 ;**********************************************************
                                    189         .area SSEG (ABS) ; STACK
      001700                        190         .org 0x1700
      001700                        191         .ds 256 
                                    192 ; space for DATSTK,TIB and STACK         
                                    193 ;**********************************************************
                                    194 
                                    195 ;**********************************************************
                                    196         .area HOME ; vectors table
                                    197 ;**********************************************************
      000000 82 00 00 16            198 	int main	        ; reset
      000004 82 00 00 00            199 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            200 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            201 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            202 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            203 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            204 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            205 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            206 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            207 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            208 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            209 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            210 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            211 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            212 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            213 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            214 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            215 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            216 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            217 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            218 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            219 	int NonHandledInterrupt	; irq19
      000058 82 00 00 00            220 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            221 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            222 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            223 	int Timer4Handler	; irq23
      000068 82 00 00 00            224 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            225 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            226 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            227 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            228 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            229 	int NonHandledInterrupt	; irq29
                                    230 
                                    231 ;**********************************************************
                                    232         .area CODE
                                    233 ;**********************************************************
                                    234 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    235 ; non handled interrupt reset MCU
      000000                        236 NonHandledInterrupt:
      000000 A6 80            [ 1]  237         ld a, #0x80
      000002 C7 50 D1         [ 1]  238         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    239 	;iret
                                    240 
                                    241 ; used for milliseconds counter 
                                    242 ; MS is 16 bits counter 
      000005                        243 Timer4Handler:
      000005 72 5F 53 42      [ 1]  244 	clr TIM4_SR 
      000009 BE 28            [ 2]  245         ldw x,MS 
      00000B 5C               [ 2]  246         incw x 
      00000C BF 28            [ 2]  247         ldw MS,x
      00000E BE 2A            [ 2]  248         ldw x,CNTDWN 
      000010 27 03            [ 1]  249         jreq 1$
      000012 5A               [ 2]  250         decw x 
      000013 BF 2A            [ 2]  251         ldw CNTDWN,x 
      000015                        252 1$:         
      000015 80               [11]  253         iret 
                                    254 
                                    255 
                                    256 ;; Main entry points and COLD start data
      000016                        257 main:
                                    258 ; clear all RAM
      000016 AE 00 00         [ 2]  259 	ldw X,#RAMBASE
      000019                        260 clear_ram0:
      000019 7F               [ 1]  261 	clr (X)
      00001A 5C               [ 2]  262 	incw X
      00001B A3 17 FF         [ 2]  263 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  264 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  265         ldw x,#RPP
      000023 94               [ 1]  266         ldw sp,x 
      000024 CC 00 3F         [ 2]  267 	jp ORIG
                                    268 
                                    269 ; COLD initialize these variables.
      000027                        270 UZERO:
      000027 00 0A                  271         .word      BASEE   ;BASE
      000029 00 00                  272         .word      0       ;tmp
      00002B 00 00                  273         .word      0       ;>IN
      00002D 00 00                  274         .word      0       ;#TIB
      00002F 17 00                  275         .word      TIBB    ;TIB
      000031 0F E9                  276         .word      INTER   ;'EVAL
      000033 00 00                  277         .word      0       ;HLD
      000035 1B 04                  278         .word      LASTN  ;CNTXT pointer
      000037 00 80                  279         .word      CTOP   ;CP in RAM
      000039 1B 80                  280         .word      app_space ; CP in FLASH 
      00003B 1B 04                  281         .word      LASTN   ;LAST
      00003D 00 00                  282 UEND:  .word      0
                                    283 
      00003F                        284 ORIG:   
                                    285 ; initialize SP
      00003F AE 17 FF         [ 2]  286         LDW     X,#STACK  ;initialize return stack
      000042 94               [ 1]  287         LDW     SP,X
      000043 BF 26            [ 2]  288         LDW     RP0,X
      000045 AE 16 70         [ 2]  289         LDW     X,#DATSTK ;initialize data stack
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      000048 BF 24            [ 2]  290         LDW     SP0,X
                                    291 ; initialize PC_5 as output to control LED2
                                    292 ; added by Picatout 
      00004A 72 1A 50 0D      [ 1]  293         bset PC_CR1,#LED2_BIT
      00004E 72 1A 50 0E      [ 1]  294         bset PC_CR2,#LED2_BIT
      000052 72 1A 50 0C      [ 1]  295         bset PC_DDR,#LED2_BIT
      000056                        296         _ledoff
      000056 72 1B 50 0A      [ 1]    1         bres PC_ODR,#LED2_BIT
                                    297 ; initialize clock to HSI
                                    298 ; no divisor 16Mhz 
                                    299 ; Added by Picatout 
      00005A                        300 clock_init:
      00005A 72 5F 50 C6      [ 1]  301         clr CLK_CKDIVR
      00005E 72 12 50 C5      [ 1]  302 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000062 A6 E1            [ 1]  303 	ld a,#CLK_SWR_HSI
      000064 C7 50 C4         [ 1]  304 	ld CLK_SWR,a
      000067 C1 50 C3         [ 1]  305 1$:	cp a,CLK_CMSR
      00006A 26 FB            [ 1]  306 	jrne 1$
                                    307         
                                    308 ; initialize UART1, 115200 8N1
      00006C                        309 uart1_init:
      00006C 72 14 50 C7      [ 1]  310 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    311 	; configure tx pin
      000070 72 1A 50 02      [ 1]  312 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      000074 72 1A 50 03      [ 1]  313 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      000078 72 1A 50 04      [ 1]  314 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    315 	; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
      00007C 35 0B 52 33      [ 1]  316 	mov UART1_BRR2,#0x0b ; must be loaded first
      000080 35 08 52 32      [ 1]  317 	mov UART1_BRR1,#0x8
      000084 35 0C 52 35      [ 1]  318 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    319 ; initialize timer4, used for millisecond interrupt  
      000088 35 07 53 45      [ 1]  320 	mov TIM4_PSCR,#7 ; prescale 128  
      00008C 35 7D 53 46      [ 1]  321 	mov TIM4_ARR,#125 ; set for 1msec.
      000090 35 05 53 40      [ 1]  322 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      000094 72 10 53 41      [ 1]  323 	bset TIM4_IER,#TIM4_IER_UIE 
      000098 9A               [ 1]  324         rim
      000099 CC 15 C6         [ 2]  325         jp  COLD   ;default=MN1
                                    326 
                                    327 
                                    328 ;; get millisecond counter 
                                    329 ;; msec ( -- u )
                                    330 ;; Added by Picatout 2020-04-26
      00009C 00 00                  331         .word 0 
                           00009E   332 LINK = . 
      00009E 04                     333         .byte 4
      00009F 4D 53 45 43            334         .ascii "MSEC"
      0000A3                        335 MSEC: 
      0000A3 1D 00 02         [ 2]  336         subw x,#CELLL 
      0000A6 90 BE 28         [ 2]  337         ldw y,MS 
      0000A9 FF               [ 2]  338         ldw (x),y 
      0000AA 81               [ 4]  339         ret 
                                    340 
                                    341 ; suspend execution for u msec 
                                    342 ;  pause ( u -- )
      0000AB 00 9E                  343         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           0000AD   344         LINK=.
      0000AD 05                     345         .byte 5 
      0000AE 50 41 55 53 45         346         .ascii "PAUSE"
      0000B3                        347 PAUSE:
      0000B3 90 93            [ 1]  348         ldw y,x
      0000B5 90 FE            [ 2]  349         ldw y,(y)
      0000B7 72 B9 00 28      [ 2]  350         addw y,MS 
      0000BB 8F               [10]  351 1$:     wfi  
      0000BC 90 B3 28         [ 2]  352         cpw y,MS  
      0000BF 26 FA            [ 1]  353         jrne 1$        
      0000C1 1C 00 02         [ 2]  354         addw x,#CELLL 
      0000C4 81               [ 4]  355         ret 
                                    356 
                                    357 ; initialize count down timer 
                                    358 ;  TIMER ( u -- )  milliseconds 
      0000C5 00 AD                  359         .word LINK 
                           0000C7   360         LINK=.
      0000C7 05                     361         .byte 5 
      0000C8 54 49 4D 45 52         362         .ascii "TIMER" 
      0000CD                        363 TIMER:
      0000CD 90 93            [ 1]  364         ldw y,x
      0000CF 90 FE            [ 2]  365         ldw y,(y) 
      0000D1 90 BF 2A         [ 2]  366         ldw CNTDWN,y
      0000D4 1C 00 02         [ 2]  367         addw x,#CELLL 
      0000D7 81               [ 4]  368         ret 
                                    369 
                                    370 ; check for TIMER exiparition 
                                    371 ;  TIMEOUT? ( -- 0|-1 )
      0000D8 00 C7                  372         .word LINK 
                           0000DA   373         LINK=. 
      0000DA 08                     374         .byte 8 
      0000DB 54 49 4D 45 4F 55 54   375         .ascii "TIMEOUT?"
             3F
      0000E3                        376 TIMEOUTQ: 
      0000E3 4F               [ 1]  377         clr a
      0000E4 1D 00 02         [ 2]  378         subw x,#CELLL 
      0000E7 90 BE 2A         [ 2]  379         ldw y,CNTDWN 
      0000EA 26 01            [ 1]  380         jrne 1$ 
      0000EC 43               [ 1]  381         cpl a 
      0000ED E7 01            [ 1]  382 1$:     ld (1,x),a 
      0000EF F7               [ 1]  383         ld (x),a 
      0000F0 81               [ 4]  384         ret         
                                    385 
                                    386 ; reboot MCU 
                                    387 ; REBOOT ( -- )
      0000F1 00 DA                  388         .word LINK 
                           0000F3   389         LINK=. 
      0000F3 06                     390         .byte 6 
      0000F4 52 45 42 4F 4F 54      391         .ascii "REBOOT"
      0000FA                        392 reboot:
      0000FA CC 00 00         [ 2]  393         jp NonHandledInterrupt
                                    394         
                                    395 
                                    396 ;; Device dependent I/O
                                    397 ;       ?RX     ( -- c T | F )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    398 ;         Return input byte and true, or false.
      0000FD 00 F3                  399         .word      LINK 
                           0000FF   400 LINK	= .
      0000FF 04                     401         .byte      4
      000100 3F 4B 45 59            402         .ascii     "?KEY"
      000104                        403 QKEY:
      000104 90 5F            [ 1]  404         CLRW Y 
      000106 72 0B 52 30 0B   [ 2]  405         BTJF UART1_SR,#UART_SR_RXNE,INCH   ;check status
      00010B C6 52 31         [ 1]  406         LD    A,UART1_DR   ;get char in A
      00010E 1D 00 02         [ 2]  407 	SUBW	X,#2
      000111 E7 01            [ 1]  408         LD     (1,X),A
      000113 7F               [ 1]  409 	CLR	(X)
      000114 90 53            [ 2]  410         CPLW     Y
      000116                        411 INCH:
      000116 1D 00 02         [ 2]  412 	SUBW	X,#2
      000119 FF               [ 2]  413         LDW     (X),Y
      00011A 81               [ 4]  414         RET
                                    415 
                                    416 ;       TX!     ( c -- )
                                    417 ;       Send character c to  output device.
      00011B 00 FF                  418         .word      LINK
                           00011D   419 LINK	= .
      00011D 04                     420         .byte      4
      00011E 45 4D 49 54            421         .ascii     "EMIT"
      000122                        422 EMIT:
      000122 E6 01            [ 1]  423         LD     A,(1,X)
      000124 1C 00 02         [ 2]  424 	ADDW	X,#2
      000127 72 0F 52 30 FB   [ 2]  425 OUTPUT: BTJF UART1_SR,#UART_SR_TXE,OUTPUT  ;loop until tdre
      00012C C7 52 31         [ 1]  426         LD    UART1_DR,A   ;send A
      00012F 81               [ 4]  427         RET
                                    428 
                                    429 ;; The kernel
                                    430 
                                    431 ;       doLIT   ( -- w )
                                    432 ;       Push an inline literal.
      000130 01 1D                  433         .word      LINK
                           000132   434 LINK	= 	.
      000132 45                     435 	.byte      COMPO+5
      000133 44 4F 4C 49 54         436         .ascii     "DOLIT"
      000138                        437 DOLIT:
      000138 1D 00 02         [ 2]  438 	SUBW X,#2
                           000001   439 .if PICATOUT_MOD 
      00013B 16 01            [ 2]  440         ldw y,(1,sp)
      00013D 90 FE            [ 2]  441         ldw y,(y)
      00013F FF               [ 2]  442         ldw (x),y
      000140 90 85            [ 2]  443         popw y 
      000142 90 EC 02         [ 2]  444         jp (2,y)
                           000000   445 .else 
                                    446         POPW Y
                                    447 	LDW YTEMP,Y
                                    448 	LDW Y,(Y)
                                    449         LDW (X),Y
                                    450         LDW Y,YTEMP
                                    451 	JP (2,Y)
                                    452 .endif 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                                    453 
                                    454 ;       next    ( -- )
                                    455 ;       Code for  single index loop.
      000145 01 32                  456         .word      LINK
                           000147   457 LINK	= 	.
      000147 44                     458 	.byte      COMPO+4
      000148 4E 45 58 54            459         .ascii     "NEXT"
      00014C                        460 DONXT:
      00014C 16 03            [ 2]  461 	LDW Y,(3,SP)
      00014E 90 5A            [ 2]  462 	DECW Y
      000150 2A 07            [ 1]  463 	JRPL NEX1 ; jump if N=0
      000152 90 85            [ 2]  464 	POPW Y
                           000001   465 .if PICATOUT_MOD
      000154 5B 02            [ 2]  466         addw sp,#2
                           000000   467 .else        
                                    468 	POP A
                                    469 	POP A
                                    470 .endif         
      000156 90 EC 02         [ 2]  471         JP (2,Y)
      000159                        472 NEX1:
      000159 17 03            [ 2]  473         LDW (3,SP),Y
      00015B 90 85            [ 2]  474         POPW Y
      00015D 90 FE            [ 2]  475 	LDW Y,(Y)
      00015F 90 FC            [ 2]  476 	JP (Y)
                                    477 
                                    478 ;       ?branch ( f -- )
                                    479 ;       Branch if flag is zero.
      000161 01 47                  480         .word      LINK
                           000163   481 LINK	= 	.
      000163 47                     482 	.byte      COMPO+7
      000164 3F 42 52 41 4E 43 48   483         .ascii     "?BRANCH"
      00016B                        484 QBRAN:	
      00016B 90 93            [ 1]  485         LDW Y,X
      00016D 1C 00 02         [ 2]  486 	ADDW X,#2
      000170 90 FE            [ 2]  487 	LDW Y,(Y)
      000172 27 0E            [ 1]  488         JREQ     BRAN
      000174 90 85            [ 2]  489 	POPW Y
      000176 90 EC 02         [ 2]  490 	JP (2,Y)
                                    491         
                                    492 ;       branch  ( -- )
                                    493 ;       Branch to an inline address.
      000179 01 63                  494         .word      LINK
                           00017B   495 LINK	= 	.
      00017B 46                     496 	.byte      COMPO+6
      00017C 42 52 41 4E 43 48      497         .ascii     "BRANCH"
      000182                        498 BRAN:
      000182 90 85            [ 2]  499         POPW Y
      000184 90 FE            [ 2]  500 	LDW Y,(Y)
      000186 90 FC            [ 2]  501         JP     (Y)
                                    502 
                                    503 ;       EXECUTE ( ca -- )
                                    504 ;       Execute  word at ca.
      000188 01 7B                  505         .word      LINK
                           00018A   506 LINK	= 	.
      00018A 07                     507         .byte       7
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      00018B 45 58 45 43 55 54 45   508         .ascii     "EXECUTE"
      000192                        509 EXECU:
      000192 90 93            [ 1]  510         LDW Y,X
      000194 1C 00 02         [ 2]  511 	ADDW X,#2
      000197 90 FE            [ 2]  512 	LDW  Y,(Y)
      000199 90 FC            [ 2]  513         JP   (Y)
                                    514 
                                    515 ;       EXIT    ( -- )
                                    516 ;       Terminate a colon definition.
      00019B 01 8A                  517         .word      LINK
                           00019D   518 LINK = .
      00019D 04                     519         .byte      4
      00019E 45 58 49 54            520         .ascii     "EXIT"
      0001A2                        521 EXIT:
      0001A2 90 85            [ 2]  522         POPW Y
      0001A4 81               [ 4]  523         RET
                                    524 
                                    525 ;       !       ( w a -- )
                                    526 ;       Pop  data stack to memory.
      0001A5 01 9D                  527         .word      LINK
                           0001A7   528 LINK = .
      0001A7 01                     529         .byte      1
      0001A8 21                     530         .ascii     "!"
      0001A9                        531 STORE:
      0001A9 90 93            [ 1]  532         LDW Y,X
      0001AB 90 FE            [ 2]  533         LDW Y,(Y)    ;Y=a
      0001AD 90 BF 1E         [ 2]  534         LDW YTEMP,Y
      0001B0 90 93            [ 1]  535         LDW Y,X
      0001B2 90 EE 02         [ 2]  536         LDW Y,(2,Y)
      0001B5 91 CF 1E         [ 5]  537         LDW [YTEMP],Y ;store w at a
      0001B8 1C 00 04         [ 2]  538         ADDW X,#4 ; DDROP 
      0001BB 81               [ 4]  539         RET     
                                    540 
                                    541 ;       @       ( a -- w )
                                    542 ;       Push memory location to stack.
      0001BC 01 A7                  543         .word      LINK
                           0001BE   544 LINK	= 	.
      0001BE 01                     545         .byte    1
      0001BF 40                     546         .ascii	"@"
      0001C0                        547 AT:
      0001C0 90 93            [ 1]  548         LDW Y,X     ;Y = a
      0001C2 90 FE            [ 2]  549         LDW Y,(Y)   ; address 
      0001C4 90 FE            [ 2]  550         LDW Y,(Y)   ; value 
      0001C6 FF               [ 2]  551         LDW (X),Y ;w = @Y
      0001C7 81               [ 4]  552         RET     
                                    553 
                                    554 ;       C!      ( c b -- )
                                    555 ;       Pop  data stack to byte memory.
      0001C8 01 BE                  556         .word      LINK
                           0001CA   557 LINK	= .
      0001CA 02                     558         .byte      2
      0001CB 43 21                  559         .ascii     "C!"
      0001CD                        560 CSTOR:
      0001CD 90 93            [ 1]  561         LDW Y,X
      0001CF 90 FE            [ 2]  562 	LDW Y,(Y)    ;Y=b
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      0001D1 E6 03            [ 1]  563         LD A,(3,X)    ;D = c
      0001D3 90 F7            [ 1]  564         LD  (Y),A     ;store c at b
      0001D5 1C 00 04         [ 2]  565 	ADDW X,#4 ; DDROP 
      0001D8 81               [ 4]  566         RET     
                                    567 
                                    568 ;       C@      ( b -- c )
                                    569 ;       Push byte in memory to  stack.
      0001D9 01 CA                  570         .word      LINK
                           0001DB   571 LINK	= 	.
      0001DB 02                     572         .byte      2
      0001DC 43 40                  573         .ascii     "C@"
      0001DE                        574 CAT:
      0001DE 90 93            [ 1]  575         LDW Y,X     ;Y=b
      0001E0 90 FE            [ 2]  576         LDW Y,(Y)
      0001E2 90 F6            [ 1]  577         LD A,(Y)
      0001E4 E7 01            [ 1]  578         LD (1,X),A
      0001E6 7F               [ 1]  579         CLR (X)
      0001E7 81               [ 4]  580         RET     
                                    581 
                                    582 ;       RP@     ( -- a )
                                    583 ;       Push current RP to data stack.
      0001E8 01 DB                  584         .word      LINK
                           0001EA   585 LINK	= .
      0001EA 03                     586         .byte      3
      0001EB 52 50 40               587         .ascii     "RP@"
      0001EE                        588 RPAT:
      0001EE 90 96            [ 1]  589         LDW Y,SP    ;save return addr
      0001F0 1D 00 02         [ 2]  590         SUBW X,#2
      0001F3 FF               [ 2]  591         LDW (X),Y
      0001F4 81               [ 4]  592         RET     
                                    593 
                                    594 ;       RP!     ( a -- )
                                    595 ;       Set  return stack pointer.
      0001F5 01 EA                  596         .word      LINK
                           0001F7   597 LINK	= 	. 
      0001F7 43                     598 	.byte      COMPO+3
      0001F8 52 50 21               599         .ascii     "RP!"
      0001FB                        600 RPSTO:
      0001FB 90 85            [ 2]  601         POPW Y
      0001FD 90 BF 1E         [ 2]  602         LDW YTEMP,Y
      000200 90 93            [ 1]  603         LDW Y,X
      000202 90 FE            [ 2]  604         LDW Y,(Y)
      000204 90 94            [ 1]  605         LDW SP,Y
      000206 1C 00 02         [ 2]  606         ADDW x,#CELLL ; a was not dropped, Picatout 2020-05-24
      000209 92 CC 1E         [ 5]  607         JP [YTEMP]
                                    608 
                                    609 ;       R>      ( -- w )
                                    610 ;       Pop return stack to data stack.
      00020C 01 F7                  611         .word      LINK
                           00020E   612 LINK	= 	. 
      00020E 42                     613 	.byte      COMPO+2
      00020F 52 3E                  614         .ascii     "R>"
      000211                        615 RFROM:
      000211 90 85            [ 2]  616         POPW Y    ;save return addr
      000213 90 BF 1E         [ 2]  617         LDW YTEMP,Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      000216 90 85            [ 2]  618         POPW Y
      000218 1D 00 02         [ 2]  619         SUBW X,#2
      00021B FF               [ 2]  620         LDW (X),Y
      00021C 92 CC 1E         [ 5]  621         JP [YTEMP]
                                    622 
                                    623 ;       R@      ( -- w )
                                    624 ;       Copy top of return stack to stack.
      00021F 02 0E                  625         .word      LINK
                           000221   626 LINK	= 	. 
      000221 02                     627         .byte      2
      000222 52 40                  628         .ascii     "R@"
      000224                        629 RAT:
                           000001   630 .if PICATOUT_MOD
      000224 16 03            [ 2]  631         ldw y,(3,sp)
      000226 1D 00 02         [ 2]  632         subw x,#CELLL 
      000229 FF               [ 2]  633         ldw (x),y 
      00022A 81               [ 4]  634         ret 
                           000000   635 .else 
                                    636         POPW Y
                                    637         LDW YTEMP,Y
                                    638         POPW Y
                                    639         PUSHW Y
                                    640         SUBW X,#2
                                    641         LDW (X),Y
                                    642         JP [YTEMP]
                                    643 .endif         
                                    644 
                                    645 ;       >R      ( w -- )
                                    646 ;       Push data stack to return stack.
      00022B 02 21                  647         .word      LINK
                           00022D   648 LINK	= 	. 
      00022D 42                     649 	.byte      COMPO+2
      00022E 3E 52                  650         .ascii     ">R"
      000230                        651 TOR:
      000230 90 85            [ 2]  652         POPW Y    ;save return addr
      000232 90 BF 1E         [ 2]  653         LDW YTEMP,Y
      000235 90 93            [ 1]  654         LDW Y,X
      000237 90 FE            [ 2]  655         LDW Y,(Y)
      000239 90 89            [ 2]  656         PUSHW Y    ;restore return addr
      00023B 1C 00 02         [ 2]  657         ADDW X,#2
      00023E 92 CC 1E         [ 5]  658         JP [YTEMP]
                                    659 
                                    660 ;       SP@     ( -- a )
                                    661 ;       Push current stack pointer.
      000241 02 2D                  662         .word      LINK
                           000243   663 LINK	= 	. 
      000243 03                     664         .byte      3
      000244 53 50 40               665         .ascii     "SP@"
      000247                        666 SPAT:
      000247 90 93            [ 1]  667 	LDW Y,X
      000249 1D 00 02         [ 2]  668         SUBW X,#2
      00024C FF               [ 2]  669 	LDW (X),Y
      00024D 81               [ 4]  670         RET     
                                    671 
                                    672 ;       SP!     ( a -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                                    673 ;       Set  data stack pointer.
      00024E 02 43                  674         .word      LINK
                           000250   675 LINK	= 	. 
      000250 03                     676         .byte      3
      000251 53 50 21               677         .ascii     "SP!"
      000254                        678 SPSTO:
      000254 FE               [ 2]  679         LDW     X,(X)     ;X = a
      000255 81               [ 4]  680         RET     
                                    681 
                                    682 ;       DROP    ( w -- )
                                    683 ;       Discard top stack item.
      000256 02 50                  684         .word      LINK
                           000258   685 LINK	= 	. 
      000258 04                     686         .byte      4
      000259 44 52 4F 50            687         .ascii     "DROP"
      00025D                        688 DROP:
      00025D 1C 00 02         [ 2]  689         ADDW X,#2     
      000260 81               [ 4]  690         RET     
                                    691 
                                    692 ;       DUP     ( w -- w w )
                                    693 ;       Duplicate  top stack item.
      000261 02 58                  694         .word      LINK
                           000263   695 LINK	= 	. 
      000263 03                     696         .byte      3
      000264 44 55 50               697         .ascii     "DUP"
      000267                        698 DUPP:
      000267 90 93            [ 1]  699 	LDW Y,X
      000269 1D 00 02         [ 2]  700         SUBW X,#2
      00026C 90 FE            [ 2]  701 	LDW Y,(Y)
      00026E FF               [ 2]  702 	LDW (X),Y
      00026F 81               [ 4]  703         RET     
                                    704 
                                    705 ;       SWAP    ( w1 w2 -- w2 w1 )
                                    706 ;       Exchange top two stack items.
      000270 02 63                  707         .word      LINK
                           000272   708 LINK	= 	. 
      000272 04                     709         .byte      4
      000273 53 57 41 50            710         .ascii     "SWAP"
      000277                        711 SWAPP:
      000277 90 93            [ 1]  712         LDW Y,X
      000279 90 FE            [ 2]  713         LDW Y,(Y)
      00027B 90 BF 1E         [ 2]  714         LDW YTEMP,Y
      00027E 90 93            [ 1]  715         LDW Y,X
      000280 90 EE 02         [ 2]  716         LDW Y,(2,Y)
      000283 FF               [ 2]  717         LDW (X),Y
      000284 90 BE 1E         [ 2]  718         LDW Y,YTEMP
      000287 EF 02            [ 2]  719         LDW (2,X),Y
      000289 81               [ 4]  720         RET     
                                    721 
                                    722 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                    723 ;       Copy second stack item to top.
      00028A 02 72                  724         .word      LINK
                           00028C   725 LINK	= . 
      00028C 04                     726         .byte      4
      00028D 4F 56 45 52            727         .ascii     "OVER"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      000291                        728 OVER:
      000291 1D 00 02         [ 2]  729         SUBW X,#2
      000294 90 93            [ 1]  730         LDW Y,X
      000296 90 EE 04         [ 2]  731         LDW Y,(4,Y)
      000299 FF               [ 2]  732         LDW (X),Y
      00029A 81               [ 4]  733         RET     
                                    734 
                                    735 ;       0<      ( n -- t )
                                    736 ;       Return true if n is negative.
      00029B 02 8C                  737         .word      LINK
                           00029D   738 LINK	= . 
      00029D 02                     739         .byte      2
      00029E 30 3C                  740         .ascii     "0<"
      0002A0                        741 ZLESS:
      0002A0 A6 FF            [ 1]  742         LD A,#0xFF
      0002A2 90 93            [ 1]  743         LDW Y,X
      0002A4 90 FE            [ 2]  744         LDW Y,(Y)
      0002A6 2B 01            [ 1]  745         JRMI     ZL1
      0002A8 4F               [ 1]  746         CLR A   ;false
      0002A9 F7               [ 1]  747 ZL1:    LD     (X),A
      0002AA E7 01            [ 1]  748         LD (1,X),A
      0002AC 81               [ 4]  749 	RET     
                                    750 
                                    751 ;       AND     ( w w -- w )
                                    752 ;       Bitwise AND.
      0002AD 02 9D                  753         .word      LINK
                           0002AF   754 LINK	= . 
      0002AF 03                     755         .byte      3
      0002B0 41 4E 44               756         .ascii     "AND"
      0002B3                        757 ANDD:
      0002B3 F6               [ 1]  758         LD  A,(X)    ;D=w
      0002B4 E4 02            [ 1]  759         AND A,(2,X)
      0002B6 E7 02            [ 1]  760         LD (2,X),A
      0002B8 E6 01            [ 1]  761         LD A,(1,X)
      0002BA E4 03            [ 1]  762         AND A,(3,X)
      0002BC E7 03            [ 1]  763         LD (3,X),A
      0002BE 1C 00 02         [ 2]  764         ADDW X,#2
      0002C1 81               [ 4]  765         RET
                                    766 
                                    767 ;       OR      ( w w -- w )
                                    768 ;       Bitwise inclusive OR.
      0002C2 02 AF                  769         .word      LINK
                           0002C4   770 LINK = . 
      0002C4 02                     771         .byte      2
      0002C5 4F 52                  772         .ascii     "OR"
      0002C7                        773 ORR:
      0002C7 F6               [ 1]  774         LD A,(X)    ;D=w
      0002C8 EA 02            [ 1]  775         OR A,(2,X)
      0002CA E7 02            [ 1]  776         LD (2,X),A
      0002CC E6 01            [ 1]  777         LD A,(1,X)
      0002CE EA 03            [ 1]  778         OR A,(3,X)
      0002D0 E7 03            [ 1]  779         LD (3,X),A
      0002D2 1C 00 02         [ 2]  780         ADDW X,#2
      0002D5 81               [ 4]  781         RET
                                    782 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    783 ;       XOR     ( w w -- w )
                                    784 ;       Bitwise exclusive OR.
      0002D6 02 C4                  785         .word      LINK
                           0002D8   786 LINK	= . 
      0002D8 03                     787         .byte      3
      0002D9 58 4F 52               788         .ascii     "XOR"
      0002DC                        789 XORR:
      0002DC F6               [ 1]  790         LD A,(X)    ;D=w
      0002DD E8 02            [ 1]  791         XOR A,(2,X)
      0002DF E7 02            [ 1]  792         LD (2,X),A
      0002E1 E6 01            [ 1]  793         LD A,(1,X)
      0002E3 E8 03            [ 1]  794         XOR A,(3,X)
      0002E5 E7 03            [ 1]  795         LD (3,X),A
      0002E7 1C 00 02         [ 2]  796         ADDW X,#2
      0002EA 81               [ 4]  797         RET
                                    798 
                                    799 ;       UM+     ( u u -- udsum )
                                    800 ;       Add two unsigned single
                                    801 ;       and return a double sum.
      0002EB 02 D8                  802         .word      LINK
                           0002ED   803 LINK	= . 
      0002ED 03                     804         .byte      3
      0002EE 55 4D 2B               805         .ascii     "UM+"
      0002F1                        806 UPLUS:
      0002F1 A6 01            [ 1]  807         LD A,#1
      0002F3 90 93            [ 1]  808         LDW Y,X
      0002F5 90 EE 02         [ 2]  809         LDW Y,(2,Y)
      0002F8 90 BF 1E         [ 2]  810         LDW YTEMP,Y
      0002FB 90 93            [ 1]  811         LDW Y,X
      0002FD 90 FE            [ 2]  812         LDW Y,(Y)
      0002FF 72 B9 00 1E      [ 2]  813         ADDW Y,YTEMP
      000303 EF 02            [ 2]  814         LDW (2,X),Y
      000305 25 01            [ 1]  815         JRC     UPL1
      000307 4F               [ 1]  816         CLR A
      000308 E7 01            [ 1]  817 UPL1:   LD     (1,X),A
      00030A 7F               [ 1]  818         CLR (X)
      00030B 81               [ 4]  819         RET
                                    820 
                                    821 ;; System and user variables
                                    822 
                                    823 ;       doVAR   ( -- a )
                                    824 ;       Code for VARIABLE and CREATE.
      00030C 02 ED                  825         .word      LINK
                           00030E   826 LINK	= . 
      00030E 45                     827 	.byte      COMPO+5
      00030F 44 4F 56 41 52         828         .ascii     "DOVAR"
      000314                        829 DOVAR:
      000314 1D 00 02         [ 2]  830 	SUBW X,#2
      000317 90 85            [ 2]  831         POPW Y    ;get return addr (pfa)
                           000001   832 .if PICATOUT_MOD
      000319 90 FE            [ 2]  833         LDW Y,(Y) ; indirect address 
                                    834 .endif ;PICATOUT_MOD        
      00031B FF               [ 2]  835         LDW (X),Y    ;push on stack
      00031C 81               [ 4]  836         RET     ;go to RET of EXEC
                                    837 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                                    838 ;       BASE    ( -- a )
                                    839 ;       Radix base for numeric I/O.
      00031D 03 0E                  840         .word      LINK        
                           00031F   841 LINK = . 
      00031F 04                     842         .byte      4
      000320 42 41 53 45            843         .ascii     "BASE"
      000324                        844 BASE:
      000324 90 AE 00 06      [ 2]  845 	LDW Y,#UBASE 
      000328 1D 00 02         [ 2]  846 	SUBW X,#2
      00032B FF               [ 2]  847         LDW (X),Y
      00032C 81               [ 4]  848         RET
                                    849 
                                    850 ;       tmp     ( -- a )
                                    851 ;       A temporary storage.
      00032D 03 1F                  852         .word      LINK
                                    853         
                           00032F   854 LINK = . 
      00032F 03                     855 	.byte      3
      000330 54 4D 50               856         .ascii     "TMP"
      000333                        857 TEMP:
      000333 90 AE 00 08      [ 2]  858 	LDW Y,#UTMP
      000337 1D 00 02         [ 2]  859 	SUBW X,#2
      00033A FF               [ 2]  860         LDW (X),Y
      00033B 81               [ 4]  861         RET
                                    862 
                                    863 ;       >IN     ( -- a )
                                    864 ;        Hold parsing pointer.
      00033C 03 2F                  865         .word      LINK
                           00033E   866 LINK = . 
      00033E 03                     867         .byte      3
      00033F 3E 49 4E               868         .ascii    ">IN"
      000342                        869 INN:
      000342 90 AE 00 0A      [ 2]  870 	LDW Y,#UINN 
      000346 1D 00 02         [ 2]  871 	SUBW X,#2
      000349 FF               [ 2]  872         LDW (X),Y
      00034A 81               [ 4]  873         RET
                                    874 
                                    875 ;       #TIB    ( -- a )
                                    876 ;       Count in terminal input buffer.
      00034B 03 3E                  877         .word      LINK
                           00034D   878 LINK = . 
      00034D 04                     879         .byte      4
      00034E 23 54 49 42            880         .ascii     "#TIB"
      000352                        881 NTIB:
      000352 90 AE 00 0C      [ 2]  882 	LDW Y,#UCTIB 
      000356 1D 00 02         [ 2]  883 	SUBW X,#2
      000359 FF               [ 2]  884         LDW (X),Y
      00035A 81               [ 4]  885         RET
                                    886 
                           000001   887 .if PICATOUT_MOD
                                    888 ;       TBUF ( -- a )
                                    889 ;       address of 128 bytes transaction buffer 
      00035B 03 4D                  890         .word LINK 
                           00035D   891         LINK=.
      00035D 04                     892         .byte 4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      00035E 54 42 55 46            893         .ascii "TBUF"
      000362                        894 TBUF:
      000362 90 AE 16 80      [ 2]  895         ldw y,#ROWBUFF
      000366 1D 00 02         [ 2]  896         subw x,#CELLL
      000369 FF               [ 2]  897         ldw (x),y 
      00036A 81               [ 4]  898         ret 
                                    899 
                                    900 
                                    901 .endif ;PICATOUT_MOD
                                    902 
                                    903 ;       "EVAL   ( -- a )
                                    904 ;       Execution vector of EVAL.
      00036B 03 5D                  905         .word      LINK
                           00036D   906 LINK = . 
      00036D 05                     907         .byte      5
      00036E 27 45 56 41 4C         908         .ascii     "'EVAL"
      000373                        909 TEVAL:
      000373 90 AE 00 10      [ 2]  910 	LDW Y,#UINTER 
      000377 1D 00 02         [ 2]  911 	SUBW X,#2
      00037A FF               [ 2]  912         LDW (X),Y
      00037B 81               [ 4]  913         RET
                                    914 
                                    915 ;       HLD     ( -- a )
                                    916 ;       Hold a pointer of output string.
      00037C 03 6D                  917         .word      LINK
                           00037E   918 LINK = . 
      00037E 03                     919         .byte      3
      00037F 48 4C 44               920         .ascii     "HLD"
      000382                        921 HLD:
      000382 90 AE 00 12      [ 2]  922 	LDW Y,#UHLD 
      000386 1D 00 02         [ 2]  923 	SUBW X,#2
      000389 FF               [ 2]  924         LDW (X),Y
      00038A 81               [ 4]  925         RET
                                    926 
                                    927 ;       CONTEXT ( -- a )
                                    928 ;       Start vocabulary search.
      00038B 03 7E                  929         .word      LINK
                           00038D   930 LINK = . 
      00038D 07                     931         .byte      7
      00038E 43 4F 4E 54 45 58 54   932         .ascii     "CONTEXT"
      000395                        933 CNTXT:
      000395 90 AE 00 14      [ 2]  934 	LDW Y,#UCNTXT
      000399 1D 00 02         [ 2]  935 	SUBW X,#2
      00039C FF               [ 2]  936         LDW (X),Y
      00039D 81               [ 4]  937         RET
                                    938 
                                    939 ;       CP      ( -- a )
                           000001   940 .if PICATOUT_MOD 
                                    941 ;       Point to top of variables
                           000000   942 .else 
                                    943 ;       Point to top of dictionary.
                                    944 .endif ; PICATOUT_MOD
      00039E 03 8D                  945         .word      LINK
                           0003A0   946 LINK = . 
      0003A0 02                     947         .byte      2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      0003A1 43 50                  948         .ascii     "CP"
      0003A3                        949 CPP:
      0003A3 90 AE 00 16      [ 2]  950 	LDW Y,#UCP 
      0003A7 1D 00 02         [ 2]  951 	SUBW X,#2
      0003AA FF               [ 2]  952         LDW (X),Y
      0003AB 81               [ 4]  953         RET
                                    954 
                           000001   955 .if PICATOUT_MOD
                                    956 ;       FCP    ( -- a )
                                    957 ;       Pointer to top of FLASH 
      0003AC 03 A0                  958         .word LINK 
                           0003AE   959         LINK=.
      0003AE 03                     960         .byte 3 
      0003AF 46 43 50               961         .ascii "FCP"
      0003B2                        962 FCP: 
      0003B2 90 AE 00 18      [ 2]  963         ldw y,#UFCP 
      0003B6 1D 00 02         [ 2]  964         subw x,#CELLL 
      0003B9 FF               [ 2]  965         ldw (x),y 
      0003BA 81               [ 4]  966         ret                
                                    967 .endif ;PICATOUT_MOD
                                    968 
                                    969 ;       LAST    ( -- a )
                                    970 ;       Point to last name in dictionary.
      0003BB 03 AE                  971         .word      LINK
                           0003BD   972 LINK = . 
      0003BD 04                     973         .byte      4
      0003BE 4C 41 53 54            974         .ascii     "LAST"
      0003C2                        975 LAST:
      0003C2 90 AE 00 1A      [ 2]  976 	LDW Y,#ULAST 
      0003C6 1D 00 02         [ 2]  977 	SUBW X,#2
      0003C9 FF               [ 2]  978         LDW (X),Y
      0003CA 81               [ 4]  979         RET
                                    980 
                                    981 ;; Common functions
                                    982 
                                    983 ;       ?DUP    ( w -- w w | 0 )
                                    984 ;       Dup tos if its is not zero.
      0003CB 03 BD                  985         .word      LINK
                           0003CD   986 LINK = . 
      0003CD 04                     987         .byte      4
      0003CE 3F 44 55 50            988         .ascii     "?DUP"
      0003D2                        989 QDUP:
      0003D2 90 93            [ 1]  990         LDW Y,X
      0003D4 90 FE            [ 2]  991 	LDW Y,(Y)
      0003D6 27 04            [ 1]  992         JREQ     QDUP1
      0003D8 1D 00 02         [ 2]  993 	SUBW X,#2
      0003DB FF               [ 2]  994         LDW (X),Y
      0003DC 81               [ 4]  995 QDUP1:  RET
                                    996 
                                    997 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                    998 ;       Rot 3rd item to top.
      0003DD 03 CD                  999         .word      LINK
                           0003DF  1000 LINK = . 
      0003DF 03                    1001         .byte      3
      0003E0 52 4F 54              1002         .ascii     "ROT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      0003E3                       1003 ROT:
                           000001  1004 .if PICATOUT_MOD
      0003E3 90 93            [ 1] 1005         ldw y,x 
      0003E5 90 FE            [ 2] 1006         ldw y,(y)
      0003E7 90 89            [ 2] 1007         pushw y 
      0003E9 90 93            [ 1] 1008         ldw y,x 
      0003EB 90 EE 04         [ 2] 1009         ldw y,(4,y)
      0003EE FF               [ 2] 1010         ldw (x),y 
      0003EF 90 93            [ 1] 1011         ldw y,x 
      0003F1 90 EE 02         [ 2] 1012         ldw y,(2,y)
      0003F4 EF 04            [ 2] 1013         ldw (4,x),y 
      0003F6 90 85            [ 2] 1014         popw y 
      0003F8 EF 02            [ 2] 1015         ldw (2,x),y
      0003FA 81               [ 4] 1016         ret 
                           000000  1017 .else 
                                   1018         LDW Y,X
                                   1019 	LDW Y,(4,Y)
                                   1020 	LDW YTEMP,Y
                                   1021         LDW Y,X
                                   1022         LDW Y,(2,Y)
                                   1023         LDW XTEMP,Y
                                   1024         LDW Y,X
                                   1025         LDW Y,(Y)
                                   1026         LDW (2,X),Y
                                   1027         LDW Y,XTEMP
                                   1028         LDW (4,X),Y
                                   1029         LDW Y,YTEMP
                                   1030         LDW (X),Y
                                   1031         RET
                                   1032 .endif 
                                   1033 
                                   1034 ;       2DROP   ( w w -- )
                                   1035 ;       Discard two items on stack.
      0003FB 03 DF                 1036         .word      LINK
                           0003FD  1037 LINK = . 
      0003FD 05                    1038         .byte      5
      0003FE 32 44 52 4F 50        1039         .ascii     "2DROP"
      000403                       1040 DDROP:
      000403 1C 00 04         [ 2] 1041         ADDW X,#4
      000406 81               [ 4] 1042         RET
                                   1043 
                                   1044 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1045 ;       Duplicate top two items.
      000407 03 FD                 1046         .word      LINK
                           000409  1047 LINK = . 
      000409 04                    1048         .byte      4
      00040A 32 44 55 50           1049         .ascii     "2DUP"
      00040E                       1050 DDUP:
      00040E 1D 00 04         [ 2] 1051         SUBW X,#4
      000411 90 93            [ 1] 1052         LDW Y,X
      000413 90 EE 06         [ 2] 1053         LDW Y,(6,Y)
      000416 EF 02            [ 2] 1054         LDW (2,X),Y
      000418 90 93            [ 1] 1055         LDW Y,X
      00041A 90 EE 04         [ 2] 1056         LDW Y,(4,Y)
      00041D FF               [ 2] 1057         LDW (X),Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      00041E 81               [ 4] 1058         RET
                                   1059 
                                   1060 ;       +       ( w w -- sum )
                                   1061 ;       Add top two items.
      00041F 04 09                 1062         .word      LINK
                           000421  1063 LINK = . 
      000421 01                    1064         .byte      1
      000422 2B                    1065         .ascii     "+"
      000423                       1066 PLUS:
      000423 90 93            [ 1] 1067         LDW Y,X
      000425 90 FE            [ 2] 1068         LDW Y,(Y)
      000427 90 BF 1E         [ 2] 1069         LDW YTEMP,Y
      00042A 1C 00 02         [ 2] 1070         ADDW X,#2
      00042D 90 93            [ 1] 1071         LDW Y,X
      00042F 90 FE            [ 2] 1072         LDW Y,(Y)
      000431 72 B9 00 1E      [ 2] 1073         ADDW Y,YTEMP
      000435 FF               [ 2] 1074         LDW (X),Y
      000436 81               [ 4] 1075         RET
                                   1076 
                                   1077 ;       NOT     ( w -- w )
                                   1078 ;       One's complement of tos.
      000437 04 21                 1079         .word      LINK
                           000439  1080 LINK = . 
      000439 03                    1081         .byte      3
      00043A 4E 4F 54              1082         .ascii     "NOT"
      00043D                       1083 INVER:
      00043D 90 93            [ 1] 1084         LDW Y,X
      00043F 90 FE            [ 2] 1085         LDW Y,(Y)
      000441 90 53            [ 2] 1086         CPLW Y
      000443 FF               [ 2] 1087         LDW (X),Y
      000444 81               [ 4] 1088         RET
                                   1089 
                                   1090 ;       NEGATE  ( n -- -n )
                                   1091 ;       Two's complement of tos.
      000445 04 39                 1092         .word      LINK
                           000447  1093 LINK = . 
      000447 06                    1094         .byte      6
      000448 4E 45 47 41 54 45     1095         .ascii     "NEGATE"
      00044E                       1096 NEGAT:
      00044E 90 93            [ 1] 1097         LDW Y,X
      000450 90 FE            [ 2] 1098         LDW Y,(Y)
      000452 90 50            [ 2] 1099         NEGW Y
      000454 FF               [ 2] 1100         LDW (X),Y
      000455 81               [ 4] 1101         RET
                                   1102 
                                   1103 ;       DNEGATE ( d -- -d )
                                   1104 ;       Two's complement of top double.
      000456 04 47                 1105         .word      LINK
                           000458  1106 LINK = . 
      000458 07                    1107         .byte      7
      000459 44 4E 45 47 41 54 45  1108         .ascii     "DNEGATE"
      000460                       1109 DNEGA:
      000460 90 93            [ 1] 1110         LDW Y,X
      000462 90 FE            [ 2] 1111 	LDW Y,(Y)
      000464 90 53            [ 2] 1112         CPLW Y     
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      000466 90 BF 1E         [ 2] 1113 	LDW YTEMP,Y
      000469 90 93            [ 1] 1114         LDW Y,X
      00046B 90 EE 02         [ 2] 1115         LDW Y,(2,Y)
      00046E 90 53            [ 2] 1116         CPLW Y
      000470 90 5C            [ 2] 1117         INCW Y
      000472 EF 02            [ 2] 1118         LDW (2,X),Y
      000474 90 BE 1E         [ 2] 1119         LDW Y,YTEMP
      000477 24 02            [ 1] 1120         JRNC DN1 
      000479 90 5C            [ 2] 1121         INCW Y
      00047B FF               [ 2] 1122 DN1:    LDW (X),Y
      00047C 81               [ 4] 1123         RET
                                   1124 
                                   1125 ;       -       ( n1 n2 -- n1-n2 )
                                   1126 ;       Subtraction.
      00047D 04 58                 1127         .word      LINK
                           00047F  1128 LINK = . 
      00047F 01                    1129         .byte      1
      000480 2D                    1130         .ascii     "-"
      000481                       1131 SUBB:
      000481 90 93            [ 1] 1132         LDW Y,X
      000483 90 FE            [ 2] 1133         LDW Y,(Y)
      000485 90 BF 1E         [ 2] 1134         LDW YTEMP,Y
      000488 1C 00 02         [ 2] 1135         ADDW X,#2
      00048B 90 93            [ 1] 1136         LDW Y,X
      00048D 90 FE            [ 2] 1137         LDW Y,(Y)
      00048F 72 B2 00 1E      [ 2] 1138         SUBW Y,YTEMP
      000493 FF               [ 2] 1139         LDW (X),Y
      000494 81               [ 4] 1140         RET
                                   1141 
                                   1142 ;       ABS     ( n -- n )
                                   1143 ;       Return  absolute value of n.
      000495 04 7F                 1144         .word      LINK
                           000497  1145 LINK = . 
      000497 03                    1146         .byte      3
      000498 41 42 53              1147         .ascii     "ABS"
      00049B                       1148 ABSS:
      00049B 90 93            [ 1] 1149         LDW Y,X
      00049D 90 FE            [ 2] 1150 	LDW Y,(Y)
      00049F 2A 03            [ 1] 1151         JRPL     AB1     ;negate:
      0004A1 90 50            [ 2] 1152         NEGW     Y     ;else negate hi byte
      0004A3 FF               [ 2] 1153         LDW (X),Y
      0004A4 81               [ 4] 1154 AB1:    RET
                                   1155 
                                   1156 ;       =       ( w w -- t )
                                   1157 ;       Return true if top two are =al.
      0004A5 04 97                 1158         .word      LINK
                           0004A7  1159 LINK = . 
      0004A7 01                    1160         .byte      1
      0004A8 3D                    1161         .ascii     "="
      0004A9                       1162 EQUAL:
      0004A9 A6 FF            [ 1] 1163         LD A,#0xFF  ;true
      0004AB 90 93            [ 1] 1164         LDW Y,X    ;D = n2
      0004AD 90 FE            [ 2] 1165         LDW Y,(Y)
      0004AF 90 BF 1E         [ 2] 1166         LDW YTEMP,Y
      0004B2 1C 00 02         [ 2] 1167         ADDW X,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      0004B5 90 93            [ 1] 1168         LDW Y,X
      0004B7 90 FE            [ 2] 1169         LDW Y,(Y)
      0004B9 90 B3 1E         [ 2] 1170         CPW Y,YTEMP     ;if n2 <> n1
      0004BC 27 01            [ 1] 1171         JREQ     EQ1
      0004BE 4F               [ 1] 1172         CLR A
      0004BF F7               [ 1] 1173 EQ1:    LD (X),A
      0004C0 E7 01            [ 1] 1174         LD (1,X),A
      0004C2 81               [ 4] 1175 	RET     
                                   1176 
                                   1177 ;       U<      ( u u -- t )
                                   1178 ;       Unsigned compare of top two items.
      0004C3 04 A7                 1179         .word      LINK
                           0004C5  1180 LINK = . 
      0004C5 02                    1181         .byte      2
      0004C6 55 3C                 1182         .ascii     "U<"
      0004C8                       1183 ULESS:
      0004C8 A6 FF            [ 1] 1184         LD A,#0xFF  ;true
      0004CA 90 93            [ 1] 1185         LDW Y,X    ;D = n2
      0004CC 90 FE            [ 2] 1186         LDW Y,(Y)
      0004CE 90 BF 1E         [ 2] 1187         LDW YTEMP,Y
      0004D1 1C 00 02         [ 2] 1188         ADDW X,#2
      0004D4 90 93            [ 1] 1189         LDW Y,X
      0004D6 90 FE            [ 2] 1190         LDW Y,(Y)
      0004D8 90 B3 1E         [ 2] 1191         CPW Y,YTEMP     ;if n2 <> n1
      0004DB 25 01            [ 1] 1192         JRULT     ULES1
      0004DD 4F               [ 1] 1193         CLR A
      0004DE F7               [ 1] 1194 ULES1:  LD (X),A
      0004DF E7 01            [ 1] 1195         LD (1,X),A
      0004E1 81               [ 4] 1196 	RET     
                                   1197 
                                   1198 ;       <       ( n1 n2 -- t )
                                   1199 ;       Signed compare of top two items.
      0004E2 04 C5                 1200         .word      LINK
                           0004E4  1201 LINK = . 
      0004E4 01                    1202         .byte      1
      0004E5 3C                    1203         .ascii     "<"
      0004E6                       1204 LESS:
      0004E6 A6 FF            [ 1] 1205         LD A,#0xFF  ;true
      0004E8 90 93            [ 1] 1206         LDW Y,X    ;D = n2
      0004EA 90 FE            [ 2] 1207         LDW Y,(Y)
      0004EC 90 BF 1E         [ 2] 1208         LDW YTEMP,Y
      0004EF 1C 00 02         [ 2] 1209         ADDW X,#2
      0004F2 90 93            [ 1] 1210         LDW Y,X
      0004F4 90 FE            [ 2] 1211         LDW Y,(Y)
      0004F6 90 B3 1E         [ 2] 1212         CPW Y,YTEMP     ;if n2 <> n1
      0004F9 2F 01            [ 1] 1213         JRSLT     LT1
      0004FB 4F               [ 1] 1214         CLR A
      0004FC F7               [ 1] 1215 LT1:    LD (X),A
      0004FD E7 01            [ 1] 1216         LD (1,X),A
      0004FF 81               [ 4] 1217 	RET     
                                   1218 
                                   1219 ;       MAX     ( n n -- n )
                                   1220 ;       Return greater of two top items.
      000500 04 E4                 1221         .word      LINK
                           000502  1222 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      000502 03                    1223         .byte      3
      000503 4D 41 58              1224         .ascii     "MAX"
      000506                       1225 MAX:
      000506 90 93            [ 1] 1226         LDW Y,X    ;D = n2
      000508 90 EE 02         [ 2] 1227         LDW Y,(2,Y)
      00050B 90 BF 1E         [ 2] 1228         LDW YTEMP,Y
      00050E 90 93            [ 1] 1229         LDW Y,X
      000510 90 FE            [ 2] 1230         LDW Y,(Y)
      000512 90 B3 1E         [ 2] 1231         CPW Y,YTEMP     ;if n2 <> n1
      000515 2F 02            [ 1] 1232         JRSLT     MAX1
      000517 EF 02            [ 2] 1233         LDW (2,X),Y
      000519 1C 00 02         [ 2] 1234 MAX1:   ADDW X,#2
      00051C 81               [ 4] 1235 	RET     
                                   1236 
                                   1237 ;       MIN     ( n n -- n )
                                   1238 ;       Return smaller of top two items.
      00051D 05 02                 1239         .word      LINK
                           00051F  1240 LINK = . 
      00051F 03                    1241         .byte      3
      000520 4D 49 4E              1242         .ascii     "MIN"
      000523                       1243 MIN:
      000523 90 93            [ 1] 1244         LDW Y,X    ;D = n2
      000525 90 EE 02         [ 2] 1245         LDW Y,(2,Y)
      000528 90 BF 1E         [ 2] 1246         LDW YTEMP,Y
      00052B 90 93            [ 1] 1247         LDW Y,X
      00052D 90 FE            [ 2] 1248         LDW Y,(Y)
      00052F 90 B3 1E         [ 2] 1249         CPW Y,YTEMP     ;if n2 <> n1
      000532 2C 02            [ 1] 1250         JRSGT     MIN1
      000534 EF 02            [ 2] 1251         LDW (2,X),Y
      000536 1C 00 02         [ 2] 1252 MIN1:	ADDW X,#2
      000539 81               [ 4] 1253 	RET     
                                   1254 
                                   1255 ;       WITHIN  ( u ul uh -- t )
                                   1256 ;       Return true if u is within
                                   1257 ;       range of ul and uh. ( ul <= u < uh )
      00053A 05 1F                 1258         .word      LINK
                           00053C  1259 LINK = . 
      00053C 06                    1260         .byte      6
      00053D 57 49 54 48 49 4E     1261         .ascii     "WITHIN"
      000543                       1262 WITHI:
      000543 CD 02 91         [ 4] 1263         CALL     OVER
      000546 CD 04 81         [ 4] 1264         CALL     SUBB
      000549 CD 02 30         [ 4] 1265         CALL     TOR
      00054C CD 04 81         [ 4] 1266         CALL     SUBB
      00054F CD 02 11         [ 4] 1267         CALL     RFROM
      000552 CC 04 C8         [ 2] 1268         JP     ULESS
                                   1269 
                                   1270 ;; Divide
                                   1271 
                                   1272 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1273 ;       Unsigned divide of a double by a
                                   1274 ;       single. Return mod and quotient.
      000555 05 3C                 1275         .word      LINK
                           000557  1276 LINK = . 
      000557 06                    1277         .byte      6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      000558 55 4D 2F 4D 4F 44     1278         .ascii     "UM/MOD"
      00055E                       1279 UMMOD:
      00055E BF 1C            [ 2] 1280 	LDW XTEMP,X	; save stack pointer
      000560 FE               [ 2] 1281 	LDW X,(X)	; un
      000561 BF 1E            [ 2] 1282 	LDW YTEMP,X     ; save un
      000563 90 BE 1C         [ 2] 1283 	LDW Y,XTEMP	; stack pointer
      000566 90 EE 04         [ 2] 1284 	LDW Y,(4,Y)     ; Y=udl
      000569 BE 1C            [ 2] 1285 	LDW X,XTEMP
      00056B EE 02            [ 2] 1286 	LDW X,(2,X)	; X=udh
      00056D B3 1E            [ 2] 1287 	CPW X,YTEMP
      00056F 23 0F            [ 2] 1288 	JRULE MMSM1
      000571 BE 1C            [ 2] 1289 	LDW X,XTEMP
      000573 1C 00 02         [ 2] 1290 	ADDW X,#2	; pop off 1 level
      000576 90 AE FF FF      [ 2] 1291 	LDW Y,#0xFFFF
      00057A FF               [ 2] 1292 	LDW (X),Y
      00057B 90 5F            [ 1] 1293 	CLRW Y
      00057D EF 02            [ 2] 1294 	LDW (2,X),Y
      00057F 81               [ 4] 1295 	RET
      000580                       1296 MMSM1:
                           000001  1297 .if  PICATOUT_MOD 
                                   1298 ; take advantage of divw x,y when udh==0
      000580 5D               [ 2] 1299         tnzw x  ; is udh==0?
      000581 26 11            [ 1] 1300         jrne MMSM2 
      000583 93               [ 1] 1301         ldw x,y    ;udl 
      000584 90 BE 1E         [ 2] 1302         ldw y,YTEMP ; divisor 
      000587 65               [ 2] 1303         divw x,y 
      000588 89               [ 2] 1304         pushw x     ; quotient 
      000589 BE 1C            [ 2] 1305         ldw x,XTEMP 
      00058B 1C 00 02         [ 2] 1306         addw x,#CELLL 
      00058E EF 02            [ 2] 1307         ldw (2,x),y  ; ur
      000590 90 85            [ 2] 1308         popw y 
      000592 FF               [ 2] 1309         ldw (x),y ; uq 
      000593 81               [ 4] 1310         ret 
      000594                       1311 MMSM2:        
                                   1312 .endif 
      000594 A6 11            [ 1] 1313 	LD A,#17	; loop count
      000596                       1314 MMSM3:
      000596 B3 1E            [ 2] 1315 	CPW X,YTEMP	; compare udh to un
      000598 25 04            [ 1] 1316 	JRULT MMSM4	; can't subtract
      00059A 72 B0 00 1E      [ 2] 1317 	SUBW X,YTEMP	; can subtract
      00059E                       1318 MMSM4:
      00059E 8C               [ 1] 1319 	CCF	; quotient bit
      00059F 90 59            [ 2] 1320 	RLCW Y	; rotate into quotient
      0005A1 59               [ 2] 1321 	RLCW X	; rotate into remainder
      0005A2 4A               [ 1] 1322 	DEC A	; repeat
      0005A3 22 F1            [ 1] 1323 	JRUGT MMSM3
      0005A5 57               [ 2] 1324 	SRAW X
      0005A6 BF 1E            [ 2] 1325 	LDW YTEMP,X	; done, save remainder
      0005A8 BE 1C            [ 2] 1326 	LDW X,XTEMP
      0005AA 1C 00 02         [ 2] 1327 	ADDW X,#2	; drop
      0005AD FF               [ 2] 1328 	LDW (X),Y
      0005AE 90 BE 1E         [ 2] 1329 	LDW Y,YTEMP	; save quotient
      0005B1 EF 02            [ 2] 1330 	LDW (2,X),Y
      0005B3 81               [ 4] 1331 	RET
                                   1332 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1333 ;       M/MOD   ( d n -- r q )
                                   1334 ;       Signed floored divide of double by
                                   1335 ;       single. Return mod and quotient.
      0005B4 05 57                 1336         .word      LINK
                           0005B6  1337 LINK = . 
      0005B6 05                    1338         .byte      5
      0005B7 4D 2F 4D 4F 44        1339         .ascii     "M/MOD"
      0005BC                       1340 MSMOD:  
      0005BC CD 02 67         [ 4] 1341         CALL	DUPP
      0005BF CD 02 A0         [ 4] 1342         CALL	ZLESS
      0005C2 CD 02 67         [ 4] 1343         CALL	DUPP
      0005C5 CD 02 30         [ 4] 1344         CALL	TOR
      0005C8 CD 01 6B         [ 4] 1345         CALL	QBRAN
      0005CB 05 D9                 1346         .word	MMOD1
      0005CD CD 04 4E         [ 4] 1347         CALL	NEGAT
      0005D0 CD 02 30         [ 4] 1348         CALL	TOR
      0005D3 CD 04 60         [ 4] 1349         CALL	DNEGA
      0005D6 CD 02 11         [ 4] 1350         CALL	RFROM
      0005D9 CD 02 30         [ 4] 1351 MMOD1:	CALL	TOR
      0005DC CD 02 67         [ 4] 1352         CALL	DUPP
      0005DF CD 02 A0         [ 4] 1353         CALL	ZLESS
      0005E2 CD 01 6B         [ 4] 1354         CALL	QBRAN
      0005E5 05 ED                 1355         .word	MMOD2
      0005E7 CD 02 24         [ 4] 1356         CALL	RAT
      0005EA CD 04 23         [ 4] 1357         CALL	PLUS
      0005ED CD 02 11         [ 4] 1358 MMOD2:	CALL	RFROM
      0005F0 CD 05 5E         [ 4] 1359         CALL	UMMOD
      0005F3 CD 02 11         [ 4] 1360         CALL	RFROM
      0005F6 CD 01 6B         [ 4] 1361         CALL	QBRAN
      0005F9 06 04                 1362         .word	MMOD3
      0005FB CD 02 77         [ 4] 1363         CALL	SWAPP
      0005FE CD 04 4E         [ 4] 1364         CALL	NEGAT
      000601 CD 02 77         [ 4] 1365         CALL	SWAPP
      000604 81               [ 4] 1366 MMOD3:	RET
                                   1367 
                                   1368 ;       /MOD    ( n n -- r q )
                                   1369 ;       Signed divide. Return mod and quotient.
      000605 05 B6                 1370         .word      LINK
                           000607  1371 LINK = . 
      000607 04                    1372         .byte      4
      000608 2F 4D 4F 44           1373         .ascii     "/MOD"
      00060C                       1374 SLMOD:
      00060C CD 02 91         [ 4] 1375         CALL	OVER
      00060F CD 02 A0         [ 4] 1376         CALL	ZLESS
      000612 CD 02 77         [ 4] 1377         CALL	SWAPP
      000615 CC 05 BC         [ 2] 1378         JP	MSMOD
                                   1379 
                                   1380 ;       MOD     ( n n -- r )
                                   1381 ;       Signed divide. Return mod only.
      000618 06 07                 1382         .word      LINK
                           00061A  1383 LINK = . 
      00061A 03                    1384         .byte      3
      00061B 4D 4F 44              1385         .ascii     "MOD"
      00061E                       1386 MODD:
      00061E CD 06 0C         [ 4] 1387 	CALL	SLMOD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      000621 CC 02 5D         [ 2] 1388 	JP	DROP
                                   1389 
                                   1390 ;       /       ( n n -- q )
                                   1391 ;       Signed divide. Return quotient only.
      000624 06 1A                 1392         .word      LINK
                           000626  1393 LINK = . 
      000626 01                    1394         .byte      1
      000627 2F                    1395         .ascii     "/"
      000628                       1396 SLASH:
      000628 CD 06 0C         [ 4] 1397         CALL	SLMOD
      00062B CD 02 77         [ 4] 1398         CALL	SWAPP
      00062E CC 02 5D         [ 2] 1399         JP	DROP
                                   1400 
                                   1401 ;; Multiply
                                   1402 
                                   1403 ;       UM*     ( u u -- ud )
                                   1404 ;       Unsigned multiply. Return double product.
      000631 06 26                 1405         .word      LINK
                           000633  1406 LINK = . 
      000633 03                    1407         .byte      3
      000634 55 4D 2A              1408         .ascii     "UM*"
      000637                       1409 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
                           000001  1410 .if PICATOUT_MOD 
                                   1411 ; take advantage of SP addressing modes
                                   1412 ; these PRODx in RAM are not required
                                   1413 ; the product is kept on stack as local variable 
                                   1414         ;; bytes offset on data stack 
                           000002  1415         da=2 
                           000003  1416         db=3 
                           000000  1417         dc=0 
                           000001  1418         dd=1 
                                   1419         ;; product bytes offset on return stack 
                           000001  1420         UD1=1  ; ud bits 31..24
                           000002  1421         UD2=2  ; ud bits 23..16
                           000003  1422         UD3=3  ; ud bits 15..8 
                           000004  1423         UD4=4  ; ud bits 7..0 
                                   1424         ;; local variable for product set to zero   
      000637 90 5F            [ 1] 1425         clrw y 
      000639 90 89            [ 2] 1426         pushw y  ; bits 15..0
      00063B 90 89            [ 2] 1427         pushw y  ; bits 31..16 
      00063D E6 03            [ 1] 1428         ld a,(db,x) ; b 
      00063F 90 97            [ 1] 1429         ld yl,a 
      000641 E6 01            [ 1] 1430         ld a,(dd,x)   ; d
      000643 90 42            [ 4] 1431         mul y,a    ; b*d  
      000645 17 03            [ 2] 1432         ldw (UD3,sp),y ; lowest weight product 
      000647 E6 03            [ 1] 1433         ld a,(db,x)
      000649 90 97            [ 1] 1434         ld yl,a 
      00064B E6 00            [ 1] 1435         ld a,(dc,x)
      00064D 90 42            [ 4] 1436         mul y,a  ; b*c 
                                   1437         ;;; do the partial sum 
      00064F 72 F9 02         [ 2] 1438         addw y,(UD2,sp)
      000652 4F               [ 1] 1439         clr a 
      000653 49               [ 1] 1440         rlc a
      000654 6B 01            [ 1] 1441         ld (UD1,sp),a 
      000656 17 02            [ 2] 1442         ldw (UD2,sp),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      000658 E6 02            [ 1] 1443         ld a,(da,x)
      00065A 90 97            [ 1] 1444         ld yl,a 
      00065C E6 01            [ 1] 1445         ld a,(dd,x)
      00065E 90 42            [ 4] 1446         mul y,a   ; a*d 
                                   1447         ;; do partial sum 
      000660 72 F9 02         [ 2] 1448         addw y,(UD2,sp)
      000663 4F               [ 1] 1449         clr a 
      000664 19 01            [ 1] 1450         adc a,(UD1,sp)
      000666 6B 01            [ 1] 1451         ld (UD1,sp),a  
      000668 17 02            [ 2] 1452         ldw (UD2,sp),y 
      00066A E6 02            [ 1] 1453         ld a,(da,x)
      00066C 90 97            [ 1] 1454         ld yl,a 
      00066E E6 00            [ 1] 1455         ld a,(dc,x)
      000670 90 42            [ 4] 1456         mul y,a  ;  a*c highest weight product 
                                   1457         ;;; do partial sum 
      000672 72 F9 01         [ 2] 1458         addw y,(UD1,sp)
      000675 FF               [ 2] 1459         ldw (x),y  ; udh 
      000676 16 03            [ 2] 1460         ldw y,(UD3,sp)
      000678 EF 02            [ 2] 1461         ldw (2,x),y  ; udl  
      00067A 5B 04            [ 2] 1462         addw sp,#4 ; drop local variable 
      00067C 81               [ 4] 1463         ret  
                           000000  1464 .else
                                   1465 	LD A,(2,X)	; b
                                   1466 	LD YL,A
                                   1467 	LD A,(X)	; d
                                   1468 	MUL Y,A
                                   1469 	LDW PROD1,Y
                                   1470 	LD A,(3,X)	; a
                                   1471 	LD YL,A
                                   1472 	LD A,(X)	; d
                                   1473 	MUL Y,A
                                   1474 	LDW PROD2,Y
                                   1475 	LD A,(2,X)	; b
                                   1476 	LD YL,A
                                   1477 	LD A,(1,X)	; c
                                   1478 	MUL Y,A
                                   1479 	LDW PROD3,Y
                                   1480 	LD A,(3,X)	; a
                                   1481 	LD YL,A
                                   1482 	LD A,(1,X)	; c
                                   1483 	MUL Y,A	; least signifiant product
                                   1484 	CLR A
                                   1485 	RRWA Y
                                   1486 	LD (3,X),A	; store least significant byte
                                   1487 	ADDW Y,PROD3
                                   1488 	CLR A
                                   1489 	ADC A,#0	; save carry
                                   1490 	LD CARRY,A
                                   1491 	ADDW Y,PROD2
                                   1492 	LD A,CARRY
                                   1493 	ADC A,#0	; add 2nd carry
                                   1494 	LD CARRY,A
                                   1495 	CLR A
                                   1496 	RRWA Y
                                   1497 	LD (2,X),A	; 2nd product byte
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                   1498 	ADDW Y,PROD1
                                   1499 	RRWA Y
                                   1500 	LD (1,X),A	; 3rd product byte
                                   1501 	RRWA Y  	; 4th product byte now in A
                                   1502 	ADC A,CARRY	; fill in carry bits
                                   1503 	LD (X),A
                                   1504 	RET
                                   1505 .endif 
                                   1506 
                                   1507 
                                   1508 ;       *       ( n n -- n )
                                   1509 ;       Signed multiply. Return single product.
      00067D 06 33                 1510         .word      LINK
                           00067F  1511 LINK = . 
      00067F 01                    1512         .byte      1
      000680 2A                    1513         .ascii     "*"
      000681                       1514 STAR:
      000681 CD 06 37         [ 4] 1515 	CALL	UMSTA
      000684 CC 02 5D         [ 2] 1516 	JP	DROP
                                   1517 
                                   1518 ;       M*      ( n n -- d )
                                   1519 ;       Signed multiply. Return double product.
      000687 06 7F                 1520         .word      LINK
                           000689  1521 LINK = . 
      000689 02                    1522         .byte      2
      00068A 4D 2A                 1523         .ascii     "M*"
      00068C                       1524 MSTAR:      
      00068C CD 04 0E         [ 4] 1525         CALL	DDUP
      00068F CD 02 DC         [ 4] 1526         CALL	XORR
      000692 CD 02 A0         [ 4] 1527         CALL	ZLESS
      000695 CD 02 30         [ 4] 1528         CALL	TOR
      000698 CD 04 9B         [ 4] 1529         CALL	ABSS
      00069B CD 02 77         [ 4] 1530         CALL	SWAPP
      00069E CD 04 9B         [ 4] 1531         CALL	ABSS
      0006A1 CD 06 37         [ 4] 1532         CALL	UMSTA
      0006A4 CD 02 11         [ 4] 1533         CALL	RFROM
      0006A7 CD 01 6B         [ 4] 1534         CALL	QBRAN
      0006AA 06 AF                 1535         .word	MSTA1
      0006AC CD 04 60         [ 4] 1536         CALL	DNEGA
      0006AF 81               [ 4] 1537 MSTA1:	RET
                                   1538 
                                   1539 ;       . /MOD   ( n1 n2 n3 -- r q )
                                   1540 ;       Multiply n1 and n2, then divide
                                   1541 ;       by n3. Return mod and quotient.
      0006B0 06 89                 1542         .word      LINK
                           0006B2  1543 LINK = . 
      0006B2 05                    1544         .byte      5
      0006B3 2A 2F 4D 4F 44        1545         .ascii     "*/MOD"
      0006B8                       1546 SSMOD:
      0006B8 CD 02 30         [ 4] 1547         CALL     TOR
      0006BB CD 06 8C         [ 4] 1548         CALL     MSTAR
      0006BE CD 02 11         [ 4] 1549         CALL     RFROM
      0006C1 CC 05 BC         [ 2] 1550         JP     MSMOD
                                   1551 
                                   1552 ;       */      ( n1 n2 n3 -- q )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                   1553 ;       Multiply n1 by n2, then divide
                                   1554 ;       by n3. Return quotient only.
      0006C4 06 B2                 1555         .word      LINK
                           0006C6  1556 LINK = . 
      0006C6 02                    1557         .byte      2
      0006C7 2A 2F                 1558         .ascii     "*/"
      0006C9                       1559 STASL:
      0006C9 CD 06 B8         [ 4] 1560         CALL	SSMOD
      0006CC CD 02 77         [ 4] 1561         CALL	SWAPP
      0006CF CC 02 5D         [ 2] 1562         JP	DROP
                                   1563 
                                   1564 ;; Miscellaneous
                                   1565 
                                   1566 ;       CELL+   ( a -- a )
                                   1567 ;       Add cell size in byte to address.
      0006D2 06 C6                 1568         .word      LINK
                           0006D4  1569 LINK = . 
      0006D4 02                    1570         .byte       2
      0006D5 32 2B                 1571         .ascii     "2+"
      0006D7                       1572 CELLP:
      0006D7 90 93            [ 1] 1573         LDW Y,X
      0006D9 90 FE            [ 2] 1574 	LDW Y,(Y)
      0006DB 72 A9 00 02      [ 2] 1575         ADDW Y,#CELLL 
      0006DF FF               [ 2] 1576         LDW (X),Y
      0006E0 81               [ 4] 1577         RET
                                   1578 
                                   1579 ;       CELL-   ( a -- a )
                                   1580 ;       Subtract 2 from address.
      0006E1 06 D4                 1581         .word      LINK
                           0006E3  1582 LINK = . 
      0006E3 02                    1583         .byte       2
      0006E4 32 2D                 1584         .ascii     "2-"
      0006E6                       1585 CELLM:
      0006E6 90 93            [ 1] 1586         LDW Y,X
      0006E8 90 FE            [ 2] 1587 	LDW Y,(Y)
      0006EA 72 A2 00 02      [ 2] 1588         SUBW Y,#CELLL
      0006EE FF               [ 2] 1589         LDW (X),Y
      0006EF 81               [ 4] 1590         RET
                                   1591 
                                   1592 ;       CELLS   ( n -- n )
                                   1593 ;       Multiply tos by 2.
      0006F0 06 E3                 1594         .word      LINK
                           0006F2  1595 LINK = . 
      0006F2 02                    1596         .byte       2
      0006F3 32 2A                 1597         .ascii     "2*"
      0006F5                       1598 CELLS:
      0006F5 90 93            [ 1] 1599         LDW Y,X
      0006F7 90 FE            [ 2] 1600 	LDW Y,(Y)
      0006F9 90 58            [ 2] 1601         SLAW Y
      0006FB FF               [ 2] 1602         LDW (X),Y
      0006FC 81               [ 4] 1603         RET
                                   1604 
                                   1605 ;       1+      ( a -- a )
                                   1606 ;       Add cell size in byte to address.
      0006FD 06 F2                 1607         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                           0006FF  1608 LINK = . 
      0006FF 02                    1609         .byte      2
      000700 31 2B                 1610         .ascii     "1+"
      000702                       1611 ONEP:
      000702 90 93            [ 1] 1612         LDW Y,X
      000704 90 FE            [ 2] 1613 	LDW Y,(Y)
      000706 90 5C            [ 2] 1614         INCW Y
      000708 FF               [ 2] 1615         LDW (X),Y
      000709 81               [ 4] 1616         RET
                                   1617 
                                   1618 ;       1-      ( a -- a )
                                   1619 ;       Subtract 2 from address.
      00070A 06 FF                 1620         .word      LINK
                           00070C  1621 LINK = . 
      00070C 02                    1622         .byte      2
      00070D 31 2D                 1623         .ascii     "1-"
      00070F                       1624 ONEM:
      00070F 90 93            [ 1] 1625         LDW Y,X
      000711 90 FE            [ 2] 1626 	LDW Y,(Y)
      000713 90 5A            [ 2] 1627         DECW Y
      000715 FF               [ 2] 1628         LDW (X),Y
      000716 81               [ 4] 1629         RET
                                   1630 
                                   1631 ;       2/      ( n -- n )
                                   1632 ;       Multiply tos by 2.
      000717 07 0C                 1633         .word      LINK
                           000719  1634 LINK = . 
      000719 02                    1635         .byte      2
      00071A 32 2F                 1636         .ascii     "2/"
      00071C                       1637 TWOSL:
      00071C 90 93            [ 1] 1638         LDW Y,X
      00071E 90 FE            [ 2] 1639 	LDW Y,(Y)
      000720 90 57            [ 2] 1640         SRAW Y
      000722 FF               [ 2] 1641         LDW (X),Y
      000723 81               [ 4] 1642         RET
                                   1643 
                                   1644 ;       BL      ( -- 32 )
                                   1645 ;       Return 32,  blank character.
      000724 07 19                 1646         .word      LINK
                           000726  1647 LINK = . 
      000726 02                    1648         .byte      2
      000727 42 4C                 1649         .ascii     "BL"
      000729                       1650 BLANK:
      000729 1D 00 02         [ 2] 1651         SUBW X,#2
      00072C 90 AE 00 20      [ 2] 1652 	LDW Y,#32
      000730 FF               [ 2] 1653         LDW (X),Y
      000731 81               [ 4] 1654         RET
                                   1655 
                                   1656 ;         0     ( -- 0)
                                   1657 ;         Return 0.
      000732 07 26                 1658         .word      LINK
                           000734  1659 LINK = . 
      000734 01                    1660         .byte       1
      000735 30                    1661         .ascii     "0"
      000736                       1662 ZERO:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      000736 1D 00 02         [ 2] 1663         SUBW X,#2
      000739 90 5F            [ 1] 1664 	CLRW Y
      00073B FF               [ 2] 1665         LDW (X),Y
      00073C 81               [ 4] 1666         RET
                                   1667 
                                   1668 ;         1     ( -- 1)
                                   1669 ;         Return 1.
      00073D 07 34                 1670         .word      LINK
                           00073F  1671 LINK = . 
      00073F 01                    1672         .byte       1
      000740 31                    1673         .ascii     "1"
      000741                       1674 ONE:
      000741 1D 00 02         [ 2] 1675         SUBW X,#2
      000744 90 AE 00 01      [ 2] 1676 	LDW Y,#1
      000748 FF               [ 2] 1677         LDW (X),Y
      000749 81               [ 4] 1678         RET
                                   1679 
                                   1680 ;         -1    ( -- -1)
                                   1681 ;         Return 32,  blank character.
      00074A 07 3F                 1682         .word      LINK
                           00074C  1683 LINK = . 
      00074C 02                    1684         .byte       2
      00074D 2D 31                 1685         .ascii     "-1"
      00074F                       1686 MONE:
      00074F 1D 00 02         [ 2] 1687         SUBW X,#2
      000752 90 AE FF FF      [ 2] 1688 	LDW Y,#0xFFFF
      000756 FF               [ 2] 1689         LDW (X),Y
      000757 81               [ 4] 1690         RET
                                   1691 
                                   1692 ;       >CHAR   ( c -- c )
                                   1693 ;       Filter non-printing characters.
      000758 07 4C                 1694         .word      LINK
                           00075A  1695 LINK = . 
      00075A 05                    1696         .byte      5
      00075B 3E 43 48 41 52        1697         .ascii     ">CHAR"
      000760                       1698 TCHAR:
                           000001  1699 .if CONVERT_TO_CODE
      000760 E6 01            [ 1] 1700         ld a,(1,x)
      000762 A1 20            [ 1] 1701         cp a,#32  
      000764 2B 05            [ 1] 1702         jrmi 1$ 
      000766 A1 7F            [ 1] 1703         cp a,#127 
      000768 2A 01            [ 1] 1704         jrpl 1$ 
      00076A 81               [ 4] 1705         ret 
      00076B A6 5F            [ 1] 1706 1$:     ld a,#'_ 
      00076D E7 01            [ 1] 1707         ld (1,x),a 
      00076F 81               [ 4] 1708         ret 
                           000000  1709 .else
                                   1710         CALL     DOLIT
                                   1711         .word       0x7F
                                   1712         CALL     ANDD
                                   1713         CALL     DUPP    ;mask msb
                                   1714         CALL     DOLIT
                                   1715         .word      127
                                   1716         CALL     BLANK
                                   1717         CALL     WITHI   ;check for printable
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                                   1718         CALL     QBRAN
                                   1719         .word    TCHA1
                                   1720         CALL     DROP
                                   1721         CALL     DOLIT
                                   1722         .word     0x5F		; "_"     ;replace non-printables
                                   1723 .endif 
      000770 81               [ 4] 1724 TCHA1:  RET
                                   1725 
                                   1726 ;       DEPTH   ( -- n )
                                   1727 ;       Return  depth of  data stack.
      000771 07 5A                 1728         .word      LINK
                           000773  1729 LINK = . 
      000773 05                    1730         .byte      5
      000774 44 45 50 54 48        1731         .ascii     "DEPTH"
      000779                       1732 DEPTH: 
      000779 90 BE 24         [ 2] 1733         LDW Y,SP0    ;save data stack ptr
      00077C BF 1C            [ 2] 1734 	LDW XTEMP,X
      00077E 72 B2 00 1C      [ 2] 1735         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000782 90 57            [ 2] 1736         SRAW Y    ;Y = #stack items
                           000001  1737 .if PICATOUT_MOD
                                   1738 ; why ? 
                                   1739 ;      	DECW Y
                                   1740 .endif 
      000784 1D 00 02         [ 2] 1741 	SUBW X,#2
      000787 FF               [ 2] 1742         LDW (X),Y     ; if neg, underflow
      000788 81               [ 4] 1743         RET
                                   1744 
                                   1745 ;       PICK    ( ... +n -- ... w )
                                   1746 ;       Copy  nth stack item to tos.
      000789 07 73                 1747         .word      LINK
                           00078B  1748 LINK = . 
      00078B 04                    1749         .byte      4
      00078C 50 49 43 4B           1750         .ascii     "PICK"
      000790                       1751 PICK:
      000790 90 93            [ 1] 1752         LDW Y,X   ;D = n1
      000792 90 FE            [ 2] 1753         LDW Y,(Y)
      000794 90 58            [ 2] 1754         SLAW Y
      000796 BF 1C            [ 2] 1755         LDW XTEMP,X
      000798 72 B9 00 1C      [ 2] 1756         ADDW Y,XTEMP
      00079C 90 FE            [ 2] 1757         LDW Y,(Y)
      00079E FF               [ 2] 1758         LDW (X),Y
      00079F 81               [ 4] 1759         RET
                                   1760 
                                   1761 ;; Memory access
                                   1762 
                                   1763 ;       +!      ( n a -- )
                                   1764 ;       Add n to  contents at address a.
      0007A0 07 8B                 1765         .word      LINK
                           0007A2  1766 LINK = . 
      0007A2 02                    1767         .byte      2
      0007A3 2B 21                 1768         .ascii     "+!"
      0007A5                       1769 PSTOR:
                           000001  1770 .if CONVERT_TO_CODE
      0007A5 90 93            [ 1] 1771         ldw y,x 
      0007A7 90 FE            [ 2] 1772         ldw y,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      0007A9 90 BF 1E         [ 2] 1773         ldw YTEMP,y  ; address
      0007AC 90 FE            [ 2] 1774         ldw y,(y)  
      0007AE 90 89            [ 2] 1775         pushw y  ; value at address 
      0007B0 90 93            [ 1] 1776         ldw y,x 
      0007B2 90 EE 02         [ 2] 1777         ldw y,(2,y) ; n 
      0007B5 72 F9 01         [ 2] 1778         addw y,(1,sp) ; n+value
      0007B8 91 CF 1E         [ 5] 1779         ldw [YTEMP],y ;  a!
      0007BB 90 85            [ 2] 1780         popw y    ;drop local var
      0007BD 1C 00 04         [ 2] 1781         addw x,#4 ; DDROP 
      0007C0 81               [ 4] 1782         ret 
                           000000  1783 .else
                                   1784         CALL	SWAPP
                                   1785         CALL	OVER
                                   1786         CALL	AT
                                   1787         CALL	PLUS
                                   1788         CALL	SWAPP
                                   1789         JP	STORE
                                   1790 .endif 
                                   1791 ;       2!      ( d a -- )
                                   1792 ;       Store  double integer to address a.
      0007C1 07 A2                 1793         .word      LINK
                           0007C3  1794 LINK = . 
      0007C3 02                    1795         .byte      2
      0007C4 32 21                 1796         .ascii     "2!"
      0007C6                       1797 DSTOR:
                           000001  1798 .if CONVERT_TO_CODE
      0007C6 90 93            [ 1] 1799         ldw y,x 
      0007C8 90 FE            [ 2] 1800         ldw y,(y)
      0007CA 90 BF 1E         [ 2] 1801         ldw YTEMP,y ; address 
      0007CD 1C 00 02         [ 2] 1802         addw x,#CELLL ; drop a 
      0007D0 90 93            [ 1] 1803         ldw y,x 
      0007D2 90 FE            [ 2] 1804         ldw y,(y) ; hi word 
      0007D4 89               [ 2] 1805         pushw x 
      0007D5 EE 02            [ 2] 1806         ldw x,(2,x) ; lo word 
      0007D7 91 CF 1E         [ 5] 1807         ldw [YTEMP],y
      0007DA 90 93            [ 1] 1808         ldw y,x 
      0007DC AE 00 02         [ 2] 1809         ldw x,#2 
      0007DF 92 DF 1E         [ 5] 1810         ldw ([YTEMP],x),y 
      0007E2 85               [ 2] 1811         popw x 
      0007E3 1C 00 04         [ 2] 1812         addw x,#4 ; DDROP 
      0007E6 81               [ 4] 1813         ret 
                           000000  1814 .else
                                   1815         CALL	SWAPP
                                   1816         CALL	OVER
                                   1817         CALL	STORE
                                   1818         CALL	CELLP
                                   1819         JP	STORE
                                   1820 .endif 
                                   1821 ;       2@      ( a -- d )
                                   1822 ;       Fetch double integer from address a.
      0007E7 07 C3                 1823         .word      LINK
                           0007E9  1824 LINK = . 
      0007E9 02                    1825         .byte      2
      0007EA 32 40                 1826         .ascii     "2@"
      0007EC                       1827 DAT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                           000001  1828 .if CONVERT_TO_CODE
      0007EC 90 93            [ 1] 1829         ldw y,x 
      0007EE 90 FE            [ 2] 1830         ldw y,(y) ;address 
      0007F0 90 BF 1E         [ 2] 1831         ldw YTEMP,y 
      0007F3 1D 00 02         [ 2] 1832         subw x,#CELLL ; space for udh 
      0007F6 91 CE 1E         [ 5] 1833         ldw y,[YTEMP] ; udh 
      0007F9 FF               [ 2] 1834         ldw (x),y 
      0007FA 90 AE 00 02      [ 2] 1835         ldw y,#2
      0007FE 91 DE 1E         [ 5] 1836         ldw y,([YTEMP],y) ; udl 
      000801 EF 02            [ 2] 1837         ldw (2,x),y
      000803 81               [ 4] 1838         ret 
                           000000  1839 .else 
                                   1840         CALL	DUPP
                                   1841         CALL	CELLP
                                   1842         CALL	AT
                                   1843         CALL	SWAPP
                                   1844         JP	AT
                                   1845 .endif 
                                   1846 
                                   1847 ;       COUNT   ( b -- b +n )
                                   1848 ;       Return count byte of a string
                                   1849 ;       and add 1 to byte address.
      000804 07 E9                 1850         .word      LINK
                           000806  1851 LINK = . 
      000806 05                    1852         .byte      5
      000807 43 4F 55 4E 54        1853         .ascii     "COUNT"
      00080C                       1854 COUNT:
                           000001  1855 .if CONVERT_TO_CODE
      00080C 90 93            [ 1] 1856         ldw y,x 
      00080E 90 FE            [ 2] 1857         ldw y,(y) ; address 
      000810 90 F6            [ 1] 1858         ld a,(y)  ; count 
      000812 90 5C            [ 2] 1859         incw y 
      000814 FF               [ 2] 1860         ldw (x),y 
      000815 1D 00 02         [ 2] 1861         subw x,#CELLL 
      000818 E7 01            [ 1] 1862         ld (1,x),a 
      00081A 7F               [ 1] 1863         clr (x)
      00081B 81               [ 4] 1864         ret 
                           000000  1865 .else 
                                   1866         CALL     DUPP
                                   1867         CALL     ONEP
                                   1868         CALL     SWAPP
                                   1869         JP     CAT
                                   1870 .endif 
                                   1871 
                                   1872 ;       HERE    ( -- a )
                                   1873 ;       Return  top of  code dictionary.
      00081C 08 06                 1874         .word      LINK
                           00081E  1875 LINK = . 
      00081E 04                    1876         .byte      4
      00081F 48 45 52 45           1877         .ascii     "HERE"
      000823                       1878 HERE:
                           000001  1879 .if CONVERT_TO_CODE
      000823 90 AE 00 16      [ 2] 1880       	ldw y,#UCP 
      000827 90 FE            [ 2] 1881         ldw y,(y)
      000829 1D 00 02         [ 2] 1882         subw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      00082C FF               [ 2] 1883         ldw (x),y 
      00082D 81               [ 4] 1884         ret 
                           000000  1885 .else
                                   1886         CALL     CPP
                                   1887         JP     AT
                                   1888 .endif 
                                   1889 
                                   1890 ;       PAD     ( -- a )
                                   1891 ;       Return address of text buffer
                                   1892 ;       above  code dictionary.
      00082E 08 1E                 1893         .word      LINK
                           000830  1894 LINK = . 
      000830 03                    1895         .byte      3
      000831 50 41 44              1896         .ascii     "PAD"
      000834                       1897 PAD:
      000834 CD 08 23         [ 4] 1898         CALL     HERE
      000837 CD 01 38         [ 4] 1899         CALL     DOLIT
      00083A 00 50                 1900         .word      80
      00083C CC 04 23         [ 2] 1901         JP     PLUS
                                   1902 
                                   1903 ;       TIB     ( -- a )
                                   1904 ;       Return address of terminal input buffer.
      00083F 08 30                 1905         .word      LINK
                           000841  1906 LINK = . 
      000841 03                    1907         .byte      3
      000842 54 49 42              1908         .ascii     "TIB"
      000845                       1909 TIB:
      000845 CD 03 52         [ 4] 1910         CALL     NTIB
      000848 CD 06 D7         [ 4] 1911         CALL     CELLP
      00084B CC 01 C0         [ 2] 1912         JP     AT
                                   1913 
                                   1914 ;       @EXECUTE        ( a -- )
                                   1915 ;       Execute vector stored in address a.
      00084E 08 41                 1916         .word      LINK
                           000850  1917 LINK = . 
      000850 08                    1918         .byte      8
      000851 40 45 58 45 43 55 54  1919         .ascii     "@EXECUTE"
             45
      000859                       1920 ATEXE:
      000859 CD 01 C0         [ 4] 1921         CALL     AT
      00085C CD 03 D2         [ 4] 1922         CALL     QDUP    ;?address or zero
      00085F CD 01 6B         [ 4] 1923         CALL     QBRAN
      000862 08 67                 1924         .word      EXE1
      000864 CD 01 92         [ 4] 1925         CALL     EXECU   ;execute if non-zero
      000867 81               [ 4] 1926 EXE1:   RET     ;do nothing if zero
                                   1927 
                                   1928 ;       CMOVE   ( b1 b2 u -- )
                                   1929 ;       Copy u bytes from b1 to b2.
      000868 08 50                 1930         .word      LINK
                           00086A  1931 LINK = . 
      00086A 05                    1932         .byte      5
      00086B 43 4D 4F 56 45        1933         .ascii     "CMOVE"
      000870                       1934 CMOVE:
      000870 CD 02 30         [ 4] 1935         CALL	TOR
      000873 CD 01 82         [ 4] 1936         CALL	BRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000876 08 90                 1937         .word	CMOV2
      000878 CD 02 30         [ 4] 1938 CMOV1:	CALL	TOR
      00087B CD 02 67         [ 4] 1939         CALL	DUPP
      00087E CD 01 DE         [ 4] 1940         CALL	CAT
      000881 CD 02 24         [ 4] 1941         CALL	RAT
      000884 CD 01 CD         [ 4] 1942         CALL	CSTOR
      000887 CD 07 02         [ 4] 1943         CALL	ONEP
      00088A CD 02 11         [ 4] 1944         CALL	RFROM
      00088D CD 07 02         [ 4] 1945         CALL	ONEP
      000890 CD 01 4C         [ 4] 1946 CMOV2:	CALL	DONXT
      000893 08 78                 1947         .word	CMOV1
      000895 CC 04 03         [ 2] 1948         JP	DDROP
                                   1949 
                                   1950 ;       FILL    ( b u c -- )
                                   1951 ;       Fill u bytes of character c
                                   1952 ;       to area beginning at b.
      000898 08 6A                 1953         .word       LINK
                           00089A  1954 LINK = . 
      00089A 04                    1955         .byte       4
      00089B 46 49 4C 4C           1956         .ascii     "FILL"
      00089F                       1957 FILL:
                           000001  1958 .if CONVERT_TO_CODE
      00089F 90 93            [ 1] 1959         ldw y,x 
      0008A1 90 E6 01         [ 1] 1960         ld a,(1,y) ; c 
      0008A4 1C 00 02         [ 2] 1961         addw x,#CELLL ; drop c 
      0008A7 90 93            [ 1] 1962         ldw y,x 
      0008A9 90 FE            [ 2] 1963         ldw y,(y) ; count
      0008AB 90 89            [ 2] 1964         pushw y 
      0008AD 1C 00 02         [ 2] 1965         addw x,#CELLL ; drop u 
      0008B0 90 93            [ 1] 1966         ldw y,x 
      0008B2 1C 00 02         [ 2] 1967         addw x,#CELLL ; drop b 
      0008B5 90 FE            [ 2] 1968         ldw y,(y) ; address
      0008B7 90 BF 1E         [ 2] 1969         ldw YTEMP,y
      0008BA 90 85            [ 2] 1970         popw y ; count 
      0008BC                       1971 FILL1:  
      0008BC 92 C7 1E         [ 4] 1972         ld [YTEMP],a 
      0008BF 3C 1F            [ 1] 1973         inc YTEMP+1
      0008C1 24 02            [ 1] 1974         jrnc FILL2 
      0008C3 3C 1E            [ 1] 1975         inc YTEMP
      0008C5                       1976 FILL2: 
      0008C5 90 5A            [ 2] 1977         decw y ; count 
      0008C7 26 F3            [ 1] 1978         jrne FILL1  
      0008C9 81               [ 4] 1979         ret 
                           000000  1980 .else 
                                   1981         CALL	SWAPP
                                   1982         CALL	TOR
                                   1983         CALL	SWAPP
                                   1984         CALL	BRAN
                                   1985         .word	FILL2
                                   1986 FILL1:	CALL	DDUP
                                   1987         CALL	CSTOR
                                   1988         CALL	ONEP
                                   1989 FILL2:	CALL	DONXT
                                   1990         .word	FILL1
                                   1991         JP	DDROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                                   1992 .endif
                                   1993 
                                   1994 ;       ERASE   ( b u -- )
                                   1995 ;       Erase u bytes beginning at b.
      0008CA 08 9A                 1996         .word      LINK
                           0008CC  1997 LINK = . 
      0008CC 05                    1998         .byte      5
      0008CD 45 52 41 53 45        1999         .ascii     "ERASE"
      0008D2                       2000 ERASE:
                           000001  2001 .if CONVERT_TO_CODE
      0008D2 90 5F            [ 1] 2002         clrw y 
      0008D4 1D 00 02         [ 2] 2003         subw x,#CELLL 
      0008D7 FF               [ 2] 2004         ldw (x),y 
      0008D8 CC 08 9F         [ 2] 2005         jp FILL 
                           000000  2006 .else 
                                   2007         CALL     ZERO
                                   2008         JP     FILL
                                   2009 .endif 
                                   2010 ;       PACK0x   ( b u a -- a )
                                   2011 ;       Build a counted string with
                                   2012 ;       u characters from b. Null fill.
      0008DB 08 CC                 2013         .word      LINK
                           0008DD  2014 LINK = . 
      0008DD 05                    2015         .byte      5
      0008DE 50 41 43 4B 30 58     2016         .ascii     "PACK0X"
      0008E4                       2017 PACKS:
      0008E4 CD 02 67         [ 4] 2018         CALL     DUPP
      0008E7 CD 02 30         [ 4] 2019         CALL     TOR     ;strings only on cell boundary
      0008EA CD 04 0E         [ 4] 2020         CALL     DDUP
      0008ED CD 01 CD         [ 4] 2021         CALL     CSTOR
      0008F0 CD 07 02         [ 4] 2022         CALL     ONEP ;save count
      0008F3 CD 02 77         [ 4] 2023         CALL     SWAPP
      0008F6 CD 08 70         [ 4] 2024         CALL     CMOVE
      0008F9 CD 02 11         [ 4] 2025         CALL     RFROM
      0008FC 81               [ 4] 2026         RET
                                   2027 
                                   2028 ;; Numeric output, single precision
                                   2029 
                                   2030 ;       DIGIT   ( u -- c )
                                   2031 ;       Convert digit u to a character.
      0008FD 08 DD                 2032         .word      LINK
                           0008FF  2033 LINK = . 
      0008FF 05                    2034         .byte      5
      000900 44 49 47 49 54        2035         .ascii     "DIGIT"
      000905                       2036 DIGIT:
      000905 CD 01 38         [ 4] 2037         CALL	DOLIT
      000908 00 09                 2038         .word	9
      00090A CD 02 91         [ 4] 2039         CALL	OVER
      00090D CD 04 E6         [ 4] 2040         CALL	LESS
      000910 CD 01 38         [ 4] 2041         CALL	DOLIT
      000913 00 07                 2042         .word	7
      000915 CD 02 B3         [ 4] 2043         CALL	ANDD
      000918 CD 04 23         [ 4] 2044         CALL	PLUS
      00091B CD 01 38         [ 4] 2045         CALL	DOLIT
      00091E 00 30                 2046         .word	48	;'0'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000920 CC 04 23         [ 2] 2047         JP	PLUS
                                   2048 
                                   2049 ;       EXTRACT ( n base -- n c )
                                   2050 ;       Extract least significant digit from n.
      000923 08 FF                 2051         .word      LINK
                           000925  2052 LINK = . 
      000925 07                    2053         .byte      7
      000926 45 58 54 52 41 43 54  2054         .ascii     "EXTRACT"
      00092D                       2055 EXTRC:
      00092D CD 07 36         [ 4] 2056         CALL     ZERO
      000930 CD 02 77         [ 4] 2057         CALL     SWAPP
      000933 CD 05 5E         [ 4] 2058         CALL     UMMOD
      000936 CD 02 77         [ 4] 2059         CALL     SWAPP
      000939 CC 09 05         [ 2] 2060         JP     DIGIT
                                   2061 
                                   2062 ;       <#      ( -- )
                                   2063 ;       Initiate  numeric output process.
      00093C 09 25                 2064         .word      LINK
                           00093E  2065 LINK = . 
      00093E 02                    2066         .byte      2
      00093F 3C 23                 2067         .ascii     "<#"
      000941                       2068 BDIGS:
      000941 CD 08 34         [ 4] 2069         CALL     PAD
      000944 CD 03 82         [ 4] 2070         CALL     HLD
      000947 CC 01 A9         [ 2] 2071         JP     STORE
                                   2072 
                                   2073 ;       HOLD    ( c -- )
                                   2074 ;       Insert a character into output string.
      00094A 09 3E                 2075         .word      LINK
                           00094C  2076 LINK = . 
      00094C 04                    2077         .byte      4
      00094D 48 4F 4C 44           2078         .ascii     "HOLD"
      000951                       2079 HOLD:
      000951 CD 03 82         [ 4] 2080         CALL     HLD
      000954 CD 01 C0         [ 4] 2081         CALL     AT
      000957 CD 07 0F         [ 4] 2082         CALL     ONEM
      00095A CD 02 67         [ 4] 2083         CALL     DUPP
      00095D CD 03 82         [ 4] 2084         CALL     HLD
      000960 CD 01 A9         [ 4] 2085         CALL     STORE
      000963 CC 01 CD         [ 2] 2086         JP     CSTOR
                                   2087 
                                   2088 ;       #       ( u -- u )
                                   2089 ;       Extract one digit from u and
                                   2090 ;       append digit to output string.
      000966 09 4C                 2091         .word      LINK
                           000968  2092 LINK = . 
      000968 01                    2093         .byte      1
      000969 23                    2094         .ascii     "#"
      00096A                       2095 DIG:
      00096A CD 03 24         [ 4] 2096         CALL     BASE
      00096D CD 01 C0         [ 4] 2097         CALL     AT
      000970 CD 09 2D         [ 4] 2098         CALL     EXTRC
      000973 CC 09 51         [ 2] 2099         JP     HOLD
                                   2100 
                                   2101 ;       #S      ( u -- 0 )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                   2102 ;       Convert u until all digits
                                   2103 ;       are added to output string.
      000976 09 68                 2104         .word      LINK
                           000978  2105 LINK = . 
      000978 02                    2106         .byte      2
      000979 23 53                 2107         .ascii     "#S"
      00097B                       2108 DIGS:
      00097B CD 09 6A         [ 4] 2109 DIGS1:  CALL     DIG
      00097E CD 02 67         [ 4] 2110         CALL     DUPP
      000981 CD 01 6B         [ 4] 2111         CALL     QBRAN
      000984 09 88                 2112         .word      DIGS2
      000986 20 F3            [ 2] 2113         JRA     DIGS1
      000988 81               [ 4] 2114 DIGS2:  RET
                                   2115 
                                   2116 ;       SIGN    ( n -- )
                                   2117 ;       Add a minus sign to
                                   2118 ;       numeric output string.
      000989 09 78                 2119         .word      LINK
                           00098B  2120 LINK = . 
      00098B 04                    2121         .byte      4
      00098C 53 49 47 4E           2122         .ascii     "SIGN"
      000990                       2123 SIGN:
      000990 CD 02 A0         [ 4] 2124         CALL     ZLESS
      000993 CD 01 6B         [ 4] 2125         CALL     QBRAN
      000996 09 A0                 2126         .word      SIGN1
      000998 CD 01 38         [ 4] 2127         CALL     DOLIT
      00099B 00 2D                 2128         .word      45	;"-"
      00099D CC 09 51         [ 2] 2129         JP     HOLD
      0009A0 81               [ 4] 2130 SIGN1:  RET
                                   2131 
                                   2132 ;       #>      ( w -- b u )
                                   2133 ;       Prepare output string.
      0009A1 09 8B                 2134         .word      LINK
                           0009A3  2135 LINK = . 
      0009A3 02                    2136         .byte      2
      0009A4 23 3E                 2137         .ascii     "#>"
      0009A6                       2138 EDIGS:
      0009A6 CD 02 5D         [ 4] 2139         CALL     DROP
      0009A9 CD 03 82         [ 4] 2140         CALL     HLD
      0009AC CD 01 C0         [ 4] 2141         CALL     AT
      0009AF CD 08 34         [ 4] 2142         CALL     PAD
      0009B2 CD 02 91         [ 4] 2143         CALL     OVER
      0009B5 CC 04 81         [ 2] 2144         JP     SUBB
                                   2145 
                                   2146 ;       str     ( w -- b u )
                                   2147 ;       Convert a signed integer
                                   2148 ;       to a numeric string.
      0009B8 09 A3                 2149         .word      LINK
                           0009BA  2150 LINK = . 
      0009BA 03                    2151         .byte      3
      0009BB 53 54 52              2152         .ascii     "STR"
      0009BE                       2153 STR:
      0009BE CD 02 67         [ 4] 2154         CALL     DUPP
      0009C1 CD 02 30         [ 4] 2155         CALL     TOR
      0009C4 CD 04 9B         [ 4] 2156         CALL     ABSS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      0009C7 CD 09 41         [ 4] 2157         CALL     BDIGS
      0009CA CD 09 7B         [ 4] 2158         CALL     DIGS
      0009CD CD 02 11         [ 4] 2159         CALL     RFROM
      0009D0 CD 09 90         [ 4] 2160         CALL     SIGN
      0009D3 CC 09 A6         [ 2] 2161         JP     EDIGS
                                   2162 
                                   2163 ;       HEX     ( -- )
                                   2164 ;       Use radix 16 as base for
                                   2165 ;       numeric conversions.
      0009D6 09 BA                 2166         .word      LINK
                           0009D8  2167 LINK = . 
      0009D8 03                    2168         .byte      3
      0009D9 48 45 58              2169         .ascii     "HEX"
      0009DC                       2170 HEX:
      0009DC CD 01 38         [ 4] 2171         CALL     DOLIT
      0009DF 00 10                 2172         .word      16
      0009E1 CD 03 24         [ 4] 2173         CALL     BASE
      0009E4 CC 01 A9         [ 2] 2174         JP     STORE
                                   2175 
                                   2176 ;       DECIMAL ( -- )
                                   2177 ;       Use radix 10 as base
                                   2178 ;       for numeric conversions.
      0009E7 09 D8                 2179         .word      LINK
                           0009E9  2180 LINK = . 
      0009E9 07                    2181         .byte      7
      0009EA 44 45 43 49 4D 41 4C  2182         .ascii     "DECIMAL"
      0009F1                       2183 DECIM:
      0009F1 CD 01 38         [ 4] 2184         CALL     DOLIT
      0009F4 00 0A                 2185         .word      10
      0009F6 CD 03 24         [ 4] 2186         CALL     BASE
      0009F9 CC 01 A9         [ 2] 2187         JP     STORE
                                   2188 
                                   2189 ;; Numeric input, single precision
                                   2190 
                                   2191 ;       DIGIT?  ( c base -- u t )
                                   2192 ;       Convert a character to its numeric
                                   2193 ;       value. A flag indicates success.
      0009FC 09 E9                 2194         .word      LINK
                           0009FE  2195 LINK = . 
      0009FE 06                    2196         .byte       6
      0009FF 44 49 47 49 54 3F     2197         .ascii     "DIGIT?"
      000A05                       2198 DIGTQ:
      000A05 CD 02 30         [ 4] 2199         CALL     TOR
      000A08 CD 01 38         [ 4] 2200         CALL     DOLIT
      000A0B 00 30                 2201         .word     48	; "0"
      000A0D CD 04 81         [ 4] 2202         CALL     SUBB
      000A10 CD 01 38         [ 4] 2203         CALL     DOLIT
      000A13 00 09                 2204         .word      9
      000A15 CD 02 91         [ 4] 2205         CALL     OVER
      000A18 CD 04 E6         [ 4] 2206         CALL     LESS
      000A1B CD 01 6B         [ 4] 2207         CALL     QBRAN
      000A1E 0A 36                 2208         .word      DGTQ1
      000A20 CD 01 38         [ 4] 2209         CALL     DOLIT
      000A23 00 07                 2210         .word      7
      000A25 CD 04 81         [ 4] 2211         CALL     SUBB
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000A28 CD 02 67         [ 4] 2212         CALL     DUPP
      000A2B CD 01 38         [ 4] 2213         CALL     DOLIT
      000A2E 00 0A                 2214         .word      10
      000A30 CD 04 E6         [ 4] 2215         CALL     LESS
      000A33 CD 02 C7         [ 4] 2216         CALL     ORR
      000A36 CD 02 67         [ 4] 2217 DGTQ1:  CALL     DUPP
      000A39 CD 02 11         [ 4] 2218         CALL     RFROM
      000A3C CC 04 C8         [ 2] 2219         JP     ULESS
                                   2220 
                                   2221 ;       NUMBER? ( a -- n T | a F )
                                   2222 ;       Convert a number string to
                                   2223 ;       integer. Push a flag on tos.
      000A3F 09 FE                 2224         .word      LINK
                           000A41  2225 LINK = . 
      000A41 07                    2226         .byte      7
      000A42 4E 55 4D 42 45 52 3F  2227         .ascii     "NUMBER?"
      000A49                       2228 NUMBQ:
      000A49 CD 03 24         [ 4] 2229         CALL     BASE
      000A4C CD 01 C0         [ 4] 2230         CALL     AT
      000A4F CD 02 30         [ 4] 2231         CALL     TOR
      000A52 CD 07 36         [ 4] 2232         CALL     ZERO
      000A55 CD 02 91         [ 4] 2233         CALL     OVER
      000A58 CD 08 0C         [ 4] 2234         CALL     COUNT
      000A5B CD 02 91         [ 4] 2235         CALL     OVER
      000A5E CD 01 DE         [ 4] 2236         CALL     CAT
      000A61 CD 01 38         [ 4] 2237         CALL     DOLIT
      000A64 00 24                 2238         .word     36	; "0x"
      000A66 CD 04 A9         [ 4] 2239         CALL     EQUAL
      000A69 CD 01 6B         [ 4] 2240         CALL     QBRAN
      000A6C 0A 7D                 2241         .word      NUMQ1
      000A6E CD 09 DC         [ 4] 2242         CALL     HEX
      000A71 CD 02 77         [ 4] 2243         CALL     SWAPP
      000A74 CD 07 02         [ 4] 2244         CALL     ONEP
      000A77 CD 02 77         [ 4] 2245         CALL     SWAPP
      000A7A CD 07 0F         [ 4] 2246         CALL     ONEM
      000A7D CD 02 91         [ 4] 2247 NUMQ1:  CALL     OVER
      000A80 CD 01 DE         [ 4] 2248         CALL     CAT
      000A83 CD 01 38         [ 4] 2249         CALL     DOLIT
      000A86 00 2D                 2250         .word     45	; "-"
      000A88 CD 04 A9         [ 4] 2251         CALL     EQUAL
      000A8B CD 02 30         [ 4] 2252         CALL     TOR
      000A8E CD 02 77         [ 4] 2253         CALL     SWAPP
      000A91 CD 02 24         [ 4] 2254         CALL     RAT
      000A94 CD 04 81         [ 4] 2255         CALL     SUBB
      000A97 CD 02 77         [ 4] 2256         CALL     SWAPP
      000A9A CD 02 24         [ 4] 2257         CALL     RAT
      000A9D CD 04 23         [ 4] 2258         CALL     PLUS
      000AA0 CD 03 D2         [ 4] 2259         CALL     QDUP
      000AA3 CD 01 6B         [ 4] 2260         CALL     QBRAN
      000AA6 0B 07                 2261         .word      NUMQ6
      000AA8 CD 07 0F         [ 4] 2262         CALL     ONEM
      000AAB CD 02 30         [ 4] 2263         CALL     TOR
      000AAE CD 02 67         [ 4] 2264 NUMQ2:  CALL     DUPP
      000AB1 CD 02 30         [ 4] 2265         CALL     TOR
      000AB4 CD 01 DE         [ 4] 2266         CALL     CAT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000AB7 CD 03 24         [ 4] 2267         CALL     BASE
      000ABA CD 01 C0         [ 4] 2268         CALL     AT
      000ABD CD 0A 05         [ 4] 2269         CALL     DIGTQ
      000AC0 CD 01 6B         [ 4] 2270         CALL     QBRAN
      000AC3 0A F5                 2271         .word      NUMQ4
      000AC5 CD 02 77         [ 4] 2272         CALL     SWAPP
      000AC8 CD 03 24         [ 4] 2273         CALL     BASE
      000ACB CD 01 C0         [ 4] 2274         CALL     AT
      000ACE CD 06 81         [ 4] 2275         CALL     STAR
      000AD1 CD 04 23         [ 4] 2276         CALL     PLUS
      000AD4 CD 02 11         [ 4] 2277         CALL     RFROM
      000AD7 CD 07 02         [ 4] 2278         CALL     ONEP
      000ADA CD 01 4C         [ 4] 2279         CALL     DONXT
      000ADD 0A AE                 2280         .word      NUMQ2
      000ADF CD 02 24         [ 4] 2281         CALL     RAT
      000AE2 CD 02 77         [ 4] 2282         CALL     SWAPP
      000AE5 CD 02 5D         [ 4] 2283         CALL     DROP
      000AE8 CD 01 6B         [ 4] 2284         CALL     QBRAN
      000AEB 0A F0                 2285         .word      NUMQ3
      000AED CD 04 4E         [ 4] 2286         CALL     NEGAT
      000AF0 CD 02 77         [ 4] 2287 NUMQ3:  CALL     SWAPP
      000AF3 20 0F            [ 2] 2288         JRA     NUMQ5
      000AF5 CD 02 11         [ 4] 2289 NUMQ4:  CALL     RFROM
      000AF8 CD 02 11         [ 4] 2290         CALL     RFROM
      000AFB CD 04 03         [ 4] 2291         CALL     DDROP
      000AFE CD 04 03         [ 4] 2292         CALL     DDROP
      000B01 CD 07 36         [ 4] 2293         CALL     ZERO
      000B04 CD 02 67         [ 4] 2294 NUMQ5:  CALL     DUPP
      000B07 CD 02 11         [ 4] 2295 NUMQ6:  CALL     RFROM
      000B0A CD 04 03         [ 4] 2296         CALL     DDROP
      000B0D CD 02 11         [ 4] 2297         CALL     RFROM
      000B10 CD 03 24         [ 4] 2298         CALL     BASE
      000B13 CC 01 A9         [ 2] 2299         JP     STORE
                                   2300 
                                   2301 ;; Basic I/O
                                   2302 
                                   2303 ;       KEY     ( -- c )
                                   2304 ;       Wait for and return an
                                   2305 ;       input character.
      000B16 0A 41                 2306         .word      LINK
                           000B18  2307 LINK = . 
      000B18 03                    2308         .byte      3
      000B19 4B 45 59              2309         .ascii     "KEY"
      000B1C                       2310 KEY:
                           000001  2311 .if CONVERT_TO_CODE
      000B1C 72 0B 52 30 FB   [ 2] 2312         btjf UART1_SR,#UART_SR_RXNE,. 
      000B21 C6 52 31         [ 1] 2313         ld a,UART1_DR 
      000B24 1D 00 02         [ 2] 2314         subw x,#CELLL 
      000B27 E7 01            [ 1] 2315         ld (1,x),a 
      000B29 7F               [ 1] 2316         clr (x)
      000B2A 81               [ 4] 2317         ret 
                           000000  2318 .else 
                                   2319 KEY1:   CALL     QKEY
                                   2320         CALL     QBRAN
                                   2321         .word      KEY1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



                                   2322         RET
                                   2323 .endif 
                                   2324 
                                   2325 ;       NUF?    ( -- t )
                                   2326 ;       Return false if no input,
                                   2327 ;       else pause and if CR return true.
      000B2B 0B 18                 2328         .word      LINK
                           000B2D  2329 LINK = . 
      000B2D 04                    2330         .byte      4
      000B2E 4E 55 46 3F           2331         .ascii     "NUF?"
      000B32                       2332 NUFQ:
      000B32 CD 01 04         [ 4] 2333         CALL     QKEY
      000B35 CD 02 67         [ 4] 2334         CALL     DUPP
      000B38 CD 01 6B         [ 4] 2335         CALL     QBRAN
      000B3B 0B 4B                 2336         .word    NUFQ1
      000B3D CD 04 03         [ 4] 2337         CALL     DDROP
      000B40 CD 0B 1C         [ 4] 2338         CALL     KEY
      000B43 CD 01 38         [ 4] 2339         CALL     DOLIT
      000B46 00 0D                 2340         .word      CRR
      000B48 CC 04 A9         [ 2] 2341         JP     EQUAL
      000B4B 81               [ 4] 2342 NUFQ1:  RET
                                   2343 
                                   2344 ;       SPACE   ( -- )
                                   2345 ;       Send  blank character to
                                   2346 ;       output device.
      000B4C 0B 2D                 2347         .word      LINK
                           000B4E  2348 LINK = . 
      000B4E 05                    2349         .byte      5
      000B4F 53 50 41 43 45        2350         .ascii     "SPACE"
      000B54                       2351 SPACE:
      000B54 CD 07 29         [ 4] 2352         CALL     BLANK
      000B57 CC 01 22         [ 2] 2353         JP     EMIT
                                   2354 
                                   2355 ;       SPACES  ( +n -- )
                                   2356 ;       Send n spaces to output device.
      000B5A 0B 4E                 2357         .word      LINK
                           000B5C  2358 LINK = . 
      000B5C 06                    2359         .byte      6
      000B5D 53 50 41 43 45 53     2360         .ascii     "SPACES"
      000B63                       2361 SPACS:
      000B63 CD 07 36         [ 4] 2362         CALL     ZERO
      000B66 CD 05 06         [ 4] 2363         CALL     MAX
      000B69 CD 02 30         [ 4] 2364         CALL     TOR
      000B6C 20 03            [ 2] 2365         JRA      CHAR2
      000B6E CD 0B 54         [ 4] 2366 CHAR1:  CALL     SPACE
      000B71 CD 01 4C         [ 4] 2367 CHAR2:  CALL     DONXT
      000B74 0B 6E                 2368         .word    CHAR1
      000B76 81               [ 4] 2369         RET
                                   2370 
                                   2371 ;       TYPE    ( b u -- )
                                   2372 ;       Output u characters from b.
      000B77 0B 5C                 2373         .word      LINK
                           000B79  2374 LINK = . 
      000B79 04                    2375         .byte      4
      000B7A 54 59 50 45           2376         .ascii     "TYPE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000B7E                       2377 TYPES:
      000B7E CD 02 30         [ 4] 2378         CALL     TOR
      000B81 20 0C            [ 2] 2379         JRA     TYPE2
      000B83 CD 02 67         [ 4] 2380 TYPE1:  CALL     DUPP
      000B86 CD 01 DE         [ 4] 2381         CALL     CAT
      000B89 CD 01 22         [ 4] 2382         CALL     EMIT
      000B8C CD 07 02         [ 4] 2383         CALL     ONEP
      000B8F CD 01 4C         [ 4] 2384 TYPE2:  CALL     DONXT
      000B92 0B 83                 2385         .word      TYPE1
      000B94 CC 02 5D         [ 2] 2386         JP     DROP
                                   2387 
                                   2388 ;       CR      ( -- )
                                   2389 ;       Output a carriage return
                                   2390 ;       and a line feed.
      000B97 0B 79                 2391         .word      LINK
                           000B99  2392 LINK = . 
      000B99 02                    2393         .byte      2
      000B9A 43 52                 2394         .ascii     "CR"
      000B9C                       2395 CR:
      000B9C CD 01 38         [ 4] 2396         CALL     DOLIT
      000B9F 00 0D                 2397         .word      CRR
      000BA1 CD 01 22         [ 4] 2398         CALL     EMIT
      000BA4 CD 01 38         [ 4] 2399         CALL     DOLIT
      000BA7 00 0A                 2400         .word      LF
      000BA9 CC 01 22         [ 2] 2401         JP     EMIT
                                   2402 
                                   2403 ;       do$     ( -- a )
                                   2404 ;       Return  address of a compiled
                                   2405 ;       string.
      000BAC 0B 99                 2406         .word      LINK
                           000BAE  2407 LINK = . 
      000BAE 43                    2408 	.byte      COMPO+3
      000BAF 44 4F 24              2409         .ascii     "DO$"
      000BB2                       2410 DOSTR:
      000BB2 CD 02 11         [ 4] 2411         CALL     RFROM
      000BB5 CD 02 24         [ 4] 2412         CALL     RAT
      000BB8 CD 02 11         [ 4] 2413         CALL     RFROM
      000BBB CD 08 0C         [ 4] 2414         CALL     COUNT
      000BBE CD 04 23         [ 4] 2415         CALL     PLUS
      000BC1 CD 02 30         [ 4] 2416         CALL     TOR
      000BC4 CD 02 77         [ 4] 2417         CALL     SWAPP
      000BC7 CD 02 30         [ 4] 2418         CALL     TOR
      000BCA 81               [ 4] 2419         RET
                                   2420 
                                   2421 ;       $"|     ( -- a )
                                   2422 ;       Run time routine compiled by $".
                                   2423 ;       Return address of a compiled string.
      000BCB 0B AE                 2424         .word      LINK
                           000BCD  2425 LINK = . 
      000BCD 43                    2426 	.byte      COMPO+3
      000BCE 24 22 7C              2427         .byte     '$','"','|'
      000BD1                       2428 STRQP:
      000BD1 CD 0B B2         [ 4] 2429         CALL     DOSTR
      000BD4 81               [ 4] 2430         RET
                                   2431 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



                                   2432 ;       ."|     ( -- )
                                   2433 ;       Run time routine of ." .
                                   2434 ;       Output a compiled string.
      000BD5 0B CD                 2435         .word      LINK
                           000BD7  2436 LINK = . 
      000BD7 43                    2437 	.byte      COMPO+3
      000BD8 2E 22 7C              2438         .byte     '.','"','|'
      000BDB                       2439 DOTQP:
      000BDB CD 0B B2         [ 4] 2440         CALL     DOSTR
      000BDE CD 08 0C         [ 4] 2441         CALL     COUNT
      000BE1 CC 0B 7E         [ 2] 2442         JP     TYPES
                                   2443 
                                   2444 ;       .R      ( n +n -- )
                                   2445 ;       Display an integer in a field
                                   2446 ;       of n columns, right justified.
      000BE4 0B D7                 2447         .word      LINK
                           000BE6  2448 LINK = . 
      000BE6 02                    2449         .byte      2
      000BE7 2E 52                 2450         .ascii     ".R"
      000BE9                       2451 DOTR:
      000BE9 CD 02 30         [ 4] 2452         CALL     TOR
      000BEC CD 09 BE         [ 4] 2453         CALL     STR
      000BEF CD 02 11         [ 4] 2454         CALL     RFROM
      000BF2 CD 02 91         [ 4] 2455         CALL     OVER
      000BF5 CD 04 81         [ 4] 2456         CALL     SUBB
      000BF8 CD 0B 63         [ 4] 2457         CALL     SPACS
      000BFB CC 0B 7E         [ 2] 2458         JP     TYPES
                                   2459 
                                   2460 ;       U.R     ( u +n -- )
                                   2461 ;       Display an unsigned integer
                                   2462 ;       in n column, right justified.
      000BFE 0B E6                 2463         .word      LINK
                           000C00  2464 LINK = . 
      000C00 03                    2465         .byte      3
      000C01 55 2E 52              2466         .ascii     "U.R"
      000C04                       2467 UDOTR:
      000C04 CD 02 30         [ 4] 2468         CALL     TOR
      000C07 CD 09 41         [ 4] 2469         CALL     BDIGS
      000C0A CD 09 7B         [ 4] 2470         CALL     DIGS
      000C0D CD 09 A6         [ 4] 2471         CALL     EDIGS
      000C10 CD 02 11         [ 4] 2472         CALL     RFROM
      000C13 CD 02 91         [ 4] 2473         CALL     OVER
      000C16 CD 04 81         [ 4] 2474         CALL     SUBB
      000C19 CD 0B 63         [ 4] 2475         CALL     SPACS
      000C1C CC 0B 7E         [ 2] 2476         JP     TYPES
                                   2477 
                                   2478 ;       U.      ( u -- )
                                   2479 ;       Display an unsigned integer
                                   2480 ;       in free format.
      000C1F 0C 00                 2481         .word      LINK
                           000C21  2482 LINK = . 
      000C21 02                    2483         .byte      2
      000C22 55 2E                 2484         .ascii     "U."
      000C24                       2485 UDOT:
      000C24 CD 09 41         [ 4] 2486         CALL     BDIGS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000C27 CD 09 7B         [ 4] 2487         CALL     DIGS
      000C2A CD 09 A6         [ 4] 2488         CALL     EDIGS
      000C2D CD 0B 54         [ 4] 2489         CALL     SPACE
      000C30 CC 0B 7E         [ 2] 2490         JP     TYPES
                                   2491 
                                   2492 ;       .       ( w -- )
                                   2493 ;       Display an integer in free
                                   2494 ;       format, preceeded by a space.
      000C33 0C 21                 2495         .word      LINK
                           000C35  2496 LINK = . 
      000C35 01                    2497         .byte      1
      000C36 2E                    2498         .ascii     "."
      000C37                       2499 DOT:
      000C37 CD 03 24         [ 4] 2500         CALL     BASE
      000C3A CD 01 C0         [ 4] 2501         CALL     AT
      000C3D CD 01 38         [ 4] 2502         CALL     DOLIT
      000C40 00 0A                 2503         .word      10
      000C42 CD 02 DC         [ 4] 2504         CALL     XORR    ;?decimal
      000C45 CD 01 6B         [ 4] 2505         CALL     QBRAN
      000C48 0C 4D                 2506         .word      DOT1
      000C4A CC 0C 24         [ 2] 2507         JP     UDOT
      000C4D CD 09 BE         [ 4] 2508 DOT1:   CALL     STR
      000C50 CD 0B 54         [ 4] 2509         CALL     SPACE
      000C53 CC 0B 7E         [ 2] 2510         JP     TYPES
                                   2511 
                                   2512 ;       ?       ( a -- )
                                   2513 ;       Display contents in memory cell.
      000C56 0C 35                 2514         .word      LINK
                                   2515         
                           000C58  2516 LINK = . 
      000C58 01                    2517         .byte      1
      000C59 3F                    2518         .ascii     "?"
      000C5A                       2519 QUEST:
      000C5A CD 01 C0         [ 4] 2520         CALL     AT
      000C5D CC 0C 37         [ 2] 2521         JP     DOT
                                   2522 
                                   2523 ;; Parsing
                                   2524 
                                   2525 ;       parse   ( b u c -- b u delta ; <string> )
                                   2526 ;       Scan string delimited by c.
                                   2527 ;       Return found string and its offset.
      000C60 0C 58                 2528         .word      LINK
                           000C62  2529 LINK = . 
      000C62 05                    2530         .byte      5
      000C63 70 61 72 73 65        2531         .ascii     "parse"
      000C68                       2532 PARS:
      000C68 CD 03 33         [ 4] 2533         CALL     TEMP
      000C6B CD 01 A9         [ 4] 2534         CALL     STORE
      000C6E CD 02 91         [ 4] 2535         CALL     OVER
      000C71 CD 02 30         [ 4] 2536         CALL     TOR
      000C74 CD 02 67         [ 4] 2537         CALL     DUPP
      000C77 CD 01 6B         [ 4] 2538         CALL     QBRAN
      000C7A 0D 20                 2539         .word    PARS8
      000C7C CD 07 0F         [ 4] 2540         CALL     ONEM
      000C7F CD 03 33         [ 4] 2541         CALL     TEMP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000C82 CD 01 C0         [ 4] 2542         CALL     AT
      000C85 CD 07 29         [ 4] 2543         CALL     BLANK
      000C88 CD 04 A9         [ 4] 2544         CALL     EQUAL
      000C8B CD 01 6B         [ 4] 2545         CALL     QBRAN
      000C8E 0C C1                 2546         .word      PARS3
      000C90 CD 02 30         [ 4] 2547         CALL     TOR
      000C93 CD 07 29         [ 4] 2548 PARS1:  CALL     BLANK
      000C96 CD 02 91         [ 4] 2549         CALL     OVER
      000C99 CD 01 DE         [ 4] 2550         CALL     CAT     ;skip leading blanks ONLY
      000C9C CD 04 81         [ 4] 2551         CALL     SUBB
      000C9F CD 02 A0         [ 4] 2552         CALL     ZLESS
      000CA2 CD 04 3D         [ 4] 2553         CALL     INVER
      000CA5 CD 01 6B         [ 4] 2554         CALL     QBRAN
      000CA8 0C BE                 2555         .word      PARS2
      000CAA CD 07 02         [ 4] 2556         CALL     ONEP
      000CAD CD 01 4C         [ 4] 2557         CALL     DONXT
      000CB0 0C 93                 2558         .word      PARS1
      000CB2 CD 02 11         [ 4] 2559         CALL     RFROM
      000CB5 CD 02 5D         [ 4] 2560         CALL     DROP
      000CB8 CD 07 36         [ 4] 2561         CALL     ZERO
      000CBB CC 02 67         [ 2] 2562         JP     DUPP
      000CBE CD 02 11         [ 4] 2563 PARS2:  CALL     RFROM
      000CC1 CD 02 91         [ 4] 2564 PARS3:  CALL     OVER
      000CC4 CD 02 77         [ 4] 2565         CALL     SWAPP
      000CC7 CD 02 30         [ 4] 2566         CALL     TOR
      000CCA CD 03 33         [ 4] 2567 PARS4:  CALL     TEMP
      000CCD CD 01 C0         [ 4] 2568         CALL     AT
      000CD0 CD 02 91         [ 4] 2569         CALL     OVER
      000CD3 CD 01 DE         [ 4] 2570         CALL     CAT
      000CD6 CD 04 81         [ 4] 2571         CALL     SUBB    ;scan for delimiter
      000CD9 CD 03 33         [ 4] 2572         CALL     TEMP
      000CDC CD 01 C0         [ 4] 2573         CALL     AT
      000CDF CD 07 29         [ 4] 2574         CALL     BLANK
      000CE2 CD 04 A9         [ 4] 2575         CALL     EQUAL
      000CE5 CD 01 6B         [ 4] 2576         CALL     QBRAN
      000CE8 0C ED                 2577         .word      PARS5
      000CEA CD 02 A0         [ 4] 2578         CALL     ZLESS
      000CED CD 01 6B         [ 4] 2579 PARS5:  CALL     QBRAN
      000CF0 0D 02                 2580         .word      PARS6
      000CF2 CD 07 02         [ 4] 2581         CALL     ONEP
      000CF5 CD 01 4C         [ 4] 2582         CALL     DONXT
      000CF8 0C CA                 2583         .word      PARS4
      000CFA CD 02 67         [ 4] 2584         CALL     DUPP
      000CFD CD 02 30         [ 4] 2585         CALL     TOR
      000D00 20 0F            [ 2] 2586         JRA     PARS7
      000D02 CD 02 11         [ 4] 2587 PARS6:  CALL     RFROM
      000D05 CD 02 5D         [ 4] 2588         CALL     DROP
      000D08 CD 02 67         [ 4] 2589         CALL     DUPP
      000D0B CD 07 02         [ 4] 2590         CALL     ONEP
      000D0E CD 02 30         [ 4] 2591         CALL     TOR
      000D11 CD 02 91         [ 4] 2592 PARS7:  CALL     OVER
      000D14 CD 04 81         [ 4] 2593         CALL     SUBB
      000D17 CD 02 11         [ 4] 2594         CALL     RFROM
      000D1A CD 02 11         [ 4] 2595         CALL     RFROM
      000D1D CC 04 81         [ 2] 2596         JP     SUBB
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000D20 CD 02 91         [ 4] 2597 PARS8:  CALL     OVER
      000D23 CD 02 11         [ 4] 2598         CALL     RFROM
      000D26 CC 04 81         [ 2] 2599         JP     SUBB
                                   2600 
                                   2601 ;       PARSE   ( c -- b u ; <string> )
                                   2602 ;       Scan input stream and return
                                   2603 ;       counted string delimited by c.
      000D29 0C 62                 2604         .word      LINK
                           000D2B  2605 LINK = . 
      000D2B 05                    2606         .byte      5
      000D2C 50 41 52 53 45        2607         .ascii     "PARSE"
      000D31                       2608 PARSE:
      000D31 CD 02 30         [ 4] 2609         CALL     TOR
      000D34 CD 08 45         [ 4] 2610         CALL     TIB
      000D37 CD 03 42         [ 4] 2611         CALL     INN
      000D3A CD 01 C0         [ 4] 2612         CALL     AT
      000D3D CD 04 23         [ 4] 2613         CALL     PLUS    ;current input buffer pointer
      000D40 CD 03 52         [ 4] 2614         CALL     NTIB
      000D43 CD 01 C0         [ 4] 2615         CALL     AT
      000D46 CD 03 42         [ 4] 2616         CALL     INN
      000D49 CD 01 C0         [ 4] 2617         CALL     AT
      000D4C CD 04 81         [ 4] 2618         CALL     SUBB    ;remaining count
      000D4F CD 02 11         [ 4] 2619         CALL     RFROM
      000D52 CD 0C 68         [ 4] 2620         CALL     PARS
      000D55 CD 03 42         [ 4] 2621         CALL     INN
      000D58 CC 07 A5         [ 2] 2622         JP     PSTOR
                                   2623 
                                   2624 ;       .(      ( -- )
                                   2625 ;       Output following string up to next ) .
      000D5B 0D 2B                 2626         .word      LINK
                           000D5D  2627 LINK = . 
      000D5D 82                    2628 	.byte      IMEDD+2
      000D5E 2E 28                 2629         .ascii     ".("
      000D60                       2630 DOTPR:
      000D60 CD 01 38         [ 4] 2631         CALL     DOLIT
      000D63 00 29                 2632         .word     41	; ")"
      000D65 CD 0D 31         [ 4] 2633         CALL     PARSE
      000D68 CC 0B 7E         [ 2] 2634         JP     TYPES
                                   2635 
                                   2636 ;       (       ( -- )
                                   2637 ;       Ignore following string up to next ).
                                   2638 ;       A comment.
      000D6B 0D 5D                 2639         .word      LINK
                           000D6D  2640 LINK = . 
      000D6D 81                    2641 	.byte      IMEDD+1
      000D6E 28                    2642         .ascii     "("
      000D6F                       2643 PAREN:
      000D6F CD 01 38         [ 4] 2644         CALL     DOLIT
      000D72 00 29                 2645         .word     41	; ")"
      000D74 CD 0D 31         [ 4] 2646         CALL     PARSE
      000D77 CC 04 03         [ 2] 2647         JP     DDROP
                                   2648 
                                   2649 ;       \       ( -- )
                                   2650 ;       Ignore following text till
                                   2651 ;       end of line.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000D7A 0D 6D                 2652         .word      LINK
                           000D7C  2653 LINK = . 
      000D7C 81                    2654 	.byte      IMEDD+1
      000D7D 5C                    2655         .ascii     "\"
      000D7E                       2656 BKSLA:
                           000001  2657 .if CONVERT_TO_CODE
      000D7E 90 AE 00 0C      [ 2] 2658         ldw y,#UCTIB ; #TIB  
      000D82 90 FE            [ 2] 2659         ldw y,(y)
      000D84 90 89            [ 2] 2660         pushw y ; count in TIB 
      000D86 90 AE 00 0A      [ 2] 2661         ldw y,#UINN ; >IN 
      000D8A 90 BF 1E         [ 2] 2662         ldw YTEMP,y
      000D8D 90 85            [ 2] 2663         popw y 
      000D8F 91 CF 1E         [ 5] 2664         ldw [YTEMP],y
      000D92 81               [ 4] 2665         ret 
                           000000  2666 .else
                                   2667         CALL     NTIB
                                   2668         CALL     AT
                                   2669         CALL     INN
                                   2670         JP     STORE
                                   2671 .endif 
                                   2672 
                                   2673 ;       WORD    ( c -- a ; <string> )
                                   2674 ;       Parse a word from input stream
                                   2675 ;       and copy it to code dictionary.
      000D93 0D 7C                 2676         .word      LINK
                           000D95  2677 LINK = . 
      000D95 04                    2678         .byte      4
      000D96 57 4F 52 44           2679         .ascii     "WORD"
      000D9A                       2680 WORDD:
      000D9A CD 0D 31         [ 4] 2681         CALL     PARSE
      000D9D CD 08 23         [ 4] 2682         CALL     HERE
      000DA0 CD 06 D7         [ 4] 2683         CALL     CELLP
      000DA3 CC 08 E4         [ 2] 2684         JP     PACKS
                                   2685 
                                   2686 ;       TOKEN   ( -- a ; <string> )
                                   2687 ;       Parse a word from input stream
                                   2688 ;       and copy it to name dictionary.
      000DA6 0D 95                 2689         .word      LINK
                           000DA8  2690 LINK = . 
      000DA8 05                    2691         .byte      5
      000DA9 54 4F 4B 45 4E        2692         .ascii     "TOKEN"
      000DAE                       2693 TOKEN:
      000DAE CD 07 29         [ 4] 2694         CALL     BLANK
      000DB1 CC 0D 9A         [ 2] 2695         JP     WORDD
                                   2696 
                                   2697 ;; Dictionary search
                                   2698 
                                   2699 ;       NAME>   ( na -- ca )
                                   2700 ;       Return a code address given
                                   2701 ;       a name address.
      000DB4 0D A8                 2702         .word      LINK
                           000DB6  2703 LINK = . 
      000DB6 05                    2704         .byte      5
      000DB7 4E 41 4D 45 3E        2705         .ascii     "NAME>"
      000DBC                       2706 NAMET:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000DBC CD 08 0C         [ 4] 2707         CALL     COUNT
      000DBF CD 01 38         [ 4] 2708         CALL     DOLIT
      000DC2 00 1F                 2709         .word      31
      000DC4 CD 02 B3         [ 4] 2710         CALL     ANDD
      000DC7 CC 04 23         [ 2] 2711         JP     PLUS
                                   2712 
                                   2713 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   2714 ;       Compare u cells in two
                                   2715 ;       strings. Return 0 if identical.
      000DCA 0D B6                 2716         .word      LINK
                           000DCC  2717 LINK = . 
      000DCC 05                    2718         .byte       5
      000DCD 53 41 4D 45 3F        2719         .ascii     "SAME?"
      000DD2                       2720 SAMEQ:
      000DD2 CD 07 0F         [ 4] 2721         CALL     ONEM
      000DD5 CD 02 30         [ 4] 2722         CALL     TOR
      000DD8 20 29            [ 2] 2723         JRA     SAME2
      000DDA CD 02 91         [ 4] 2724 SAME1:  CALL     OVER
      000DDD CD 02 24         [ 4] 2725         CALL     RAT
      000DE0 CD 04 23         [ 4] 2726         CALL     PLUS
      000DE3 CD 01 DE         [ 4] 2727         CALL     CAT
      000DE6 CD 02 91         [ 4] 2728         CALL     OVER
      000DE9 CD 02 24         [ 4] 2729         CALL     RAT
      000DEC CD 04 23         [ 4] 2730         CALL     PLUS
      000DEF CD 01 DE         [ 4] 2731         CALL     CAT
      000DF2 CD 04 81         [ 4] 2732         CALL     SUBB
      000DF5 CD 03 D2         [ 4] 2733         CALL     QDUP
      000DF8 CD 01 6B         [ 4] 2734         CALL     QBRAN
      000DFB 0E 03                 2735         .word      SAME2
      000DFD CD 02 11         [ 4] 2736         CALL     RFROM
      000E00 CC 02 5D         [ 2] 2737         JP     DROP
      000E03 CD 01 4C         [ 4] 2738 SAME2:  CALL     DONXT
      000E06 0D DA                 2739         .word      SAME1
      000E08 CC 07 36         [ 2] 2740         JP     ZERO
                                   2741 
                                   2742 ;       find    ( a va -- ca na | a F )
                                   2743 ;       Search vocabulary for string.
                                   2744 ;       Return ca and na if succeeded.
      000E0B 0D CC                 2745         .word      LINK
                           000E0D  2746 LINK = . 
      000E0D 04                    2747         .byte      4
      000E0E 46 49 4E 44           2748         .ascii     "FIND"
      000E12                       2749 FIND:
      000E12 CD 02 77         [ 4] 2750         CALL     SWAPP
      000E15 CD 02 67         [ 4] 2751         CALL     DUPP
      000E18 CD 01 DE         [ 4] 2752         CALL     CAT
      000E1B CD 03 33         [ 4] 2753         CALL     TEMP
      000E1E CD 01 A9         [ 4] 2754         CALL     STORE
      000E21 CD 02 67         [ 4] 2755         CALL     DUPP
      000E24 CD 01 C0         [ 4] 2756         CALL     AT
      000E27 CD 02 30         [ 4] 2757         CALL     TOR
      000E2A CD 06 D7         [ 4] 2758         CALL     CELLP
      000E2D CD 02 77         [ 4] 2759         CALL     SWAPP
      000E30 CD 01 C0         [ 4] 2760 FIND1:  CALL     AT
      000E33 CD 02 67         [ 4] 2761         CALL     DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000E36 CD 01 6B         [ 4] 2762         CALL     QBRAN
      000E39 0E 6F                 2763         .word      FIND6
      000E3B CD 02 67         [ 4] 2764         CALL     DUPP
      000E3E CD 01 C0         [ 4] 2765         CALL     AT
      000E41 CD 01 38         [ 4] 2766         CALL     DOLIT
      000E44 1F 7F                 2767         .word      MASKK
      000E46 CD 02 B3         [ 4] 2768         CALL     ANDD
      000E49 CD 02 24         [ 4] 2769         CALL     RAT
      000E4C CD 02 DC         [ 4] 2770         CALL     XORR
      000E4F CD 01 6B         [ 4] 2771         CALL     QBRAN
      000E52 0E 5E                 2772         .word      FIND2
      000E54 CD 06 D7         [ 4] 2773         CALL     CELLP
      000E57 CD 01 38         [ 4] 2774         CALL     DOLIT
      000E5A FF FF                 2775         .word     0xFFFF
      000E5C 20 0C            [ 2] 2776         JRA     FIND3
      000E5E CD 06 D7         [ 4] 2777 FIND2:  CALL     CELLP
      000E61 CD 03 33         [ 4] 2778         CALL     TEMP
      000E64 CD 01 C0         [ 4] 2779         CALL     AT
      000E67 CD 0D D2         [ 4] 2780         CALL     SAMEQ
      000E6A CD 01 82         [ 4] 2781 FIND3:  CALL     BRAN
      000E6D 0E 7E                 2782         .word      FIND4
      000E6F CD 02 11         [ 4] 2783 FIND6:  CALL     RFROM
      000E72 CD 02 5D         [ 4] 2784         CALL     DROP
      000E75 CD 02 77         [ 4] 2785         CALL     SWAPP
      000E78 CD 06 E6         [ 4] 2786         CALL     CELLM
      000E7B CC 02 77         [ 2] 2787         JP     SWAPP
      000E7E CD 01 6B         [ 4] 2788 FIND4:  CALL     QBRAN
      000E81 0E 8B                 2789         .word      FIND5
      000E83 CD 06 E6         [ 4] 2790         CALL     CELLM
      000E86 CD 06 E6         [ 4] 2791         CALL     CELLM
      000E89 20 A5            [ 2] 2792         JRA     FIND1
      000E8B CD 02 11         [ 4] 2793 FIND5:  CALL     RFROM
      000E8E CD 02 5D         [ 4] 2794         CALL     DROP
      000E91 CD 02 77         [ 4] 2795         CALL     SWAPP
      000E94 CD 02 5D         [ 4] 2796         CALL     DROP
      000E97 CD 06 E6         [ 4] 2797         CALL     CELLM
      000E9A CD 02 67         [ 4] 2798         CALL     DUPP
      000E9D CD 0D BC         [ 4] 2799         CALL     NAMET
      000EA0 CC 02 77         [ 2] 2800         JP     SWAPP
                                   2801 
                                   2802 ;       NAME?   ( a -- ca na | a F )
                                   2803 ;       Search vocabularies for a string.
      000EA3 0E 0D                 2804         .word      LINK
                           000EA5  2805 LINK = . 
      000EA5 05                    2806         .byte      5
      000EA6 4E 41 4D 45 3F        2807         .ascii     "NAME?"
      000EAB                       2808 NAMEQ:
      000EAB CD 03 95         [ 4] 2809         CALL   CNTXT
      000EAE CC 0E 12         [ 2] 2810         JP     FIND
                                   2811 
                                   2812 ;; Terminal response
                                   2813 
                                   2814 ;       ^H      ( bot eot cur -- bot eot cur )
                                   2815 ;       Backup cursor by one character.
      000EB1 0E A5                 2816         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                           000EB3  2817 LINK = . 
      000EB3 02                    2818         .byte      2
      000EB4 5E 48                 2819         .ascii     "^H"
      000EB6                       2820 BKSP:
      000EB6 CD 02 30         [ 4] 2821         CALL     TOR
      000EB9 CD 02 91         [ 4] 2822         CALL     OVER
      000EBC CD 02 11         [ 4] 2823         CALL     RFROM
      000EBF CD 02 77         [ 4] 2824         CALL     SWAPP
      000EC2 CD 02 91         [ 4] 2825         CALL     OVER
      000EC5 CD 02 DC         [ 4] 2826         CALL     XORR
      000EC8 CD 01 6B         [ 4] 2827         CALL     QBRAN
      000ECB 0E E6                 2828         .word      BACK1
      000ECD CD 01 38         [ 4] 2829         CALL     DOLIT
      000ED0 00 08                 2830         .word      BKSPP
      000ED2 CD 01 22         [ 4] 2831         CALL     EMIT
      000ED5 CD 07 0F         [ 4] 2832         CALL     ONEM
      000ED8 CD 07 29         [ 4] 2833         CALL     BLANK
      000EDB CD 01 22         [ 4] 2834         CALL     EMIT
      000EDE CD 01 38         [ 4] 2835         CALL     DOLIT
      000EE1 00 08                 2836         .word      BKSPP
      000EE3 CC 01 22         [ 2] 2837         JP     EMIT
      000EE6 81               [ 4] 2838 BACK1:  RET
                                   2839 
                                   2840 ;       TAP     ( bot eot cur c -- bot eot cur )
                                   2841 ;       Accept and echo key stroke
                                   2842 ;       and bump cursor.
      000EE7 0E B3                 2843         .word      LINK
                           000EE9  2844 LINK = . 
      000EE9 03                    2845         .byte      3
      000EEA 54 41 50              2846         .ascii     "TAP"
      000EED                       2847 TAP:
      000EED CD 02 67         [ 4] 2848         CALL     DUPP
      000EF0 CD 01 22         [ 4] 2849         CALL     EMIT
      000EF3 CD 02 91         [ 4] 2850         CALL     OVER
      000EF6 CD 01 CD         [ 4] 2851         CALL     CSTOR
      000EF9 CC 07 02         [ 2] 2852         JP     ONEP
                                   2853 
                                   2854 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   2855 ;       Process a key stroke,
                                   2856 ;       CR or backspace.
      000EFC 0E E9                 2857         .word      LINK
                           000EFE  2858 LINK = . 
      000EFE 04                    2859         .byte      4
      000EFF 4B 54 41 50           2860         .ascii     "KTAP"
      000F03                       2861 KTAP:
      000F03 CD 02 67         [ 4] 2862         CALL     DUPP
      000F06 CD 01 38         [ 4] 2863         CALL     DOLIT
      000F09 00 0D                 2864         .word      CRR
      000F0B CD 02 DC         [ 4] 2865         CALL     XORR
      000F0E CD 01 6B         [ 4] 2866         CALL     QBRAN
      000F11 0F 29                 2867         .word      KTAP2
      000F13 CD 01 38         [ 4] 2868         CALL     DOLIT
      000F16 00 08                 2869         .word      BKSPP
      000F18 CD 02 DC         [ 4] 2870         CALL     XORR
      000F1B CD 01 6B         [ 4] 2871         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000F1E 0F 26                 2872         .word      KTAP1
      000F20 CD 07 29         [ 4] 2873         CALL     BLANK
      000F23 CC 0E ED         [ 2] 2874         JP     TAP
      000F26 CC 0E B6         [ 2] 2875 KTAP1:  JP     BKSP
      000F29 CD 02 5D         [ 4] 2876 KTAP2:  CALL     DROP
      000F2C CD 02 77         [ 4] 2877         CALL     SWAPP
      000F2F CD 02 5D         [ 4] 2878         CALL     DROP
      000F32 CC 02 67         [ 2] 2879         JP     DUPP
                                   2880 
                                   2881 ;       accept  ( b u -- b u )
                                   2882 ;       Accept characters to input
                                   2883 ;       buffer. Return with actual count.
      000F35 0E FE                 2884         .word      LINK
                           000F37  2885 LINK = . 
      000F37 06                    2886         .byte      6
      000F38 41 43 43 45 50 54     2887         .ascii     "ACCEPT"
      000F3E                       2888 ACCEP:
      000F3E CD 02 91         [ 4] 2889         CALL     OVER
      000F41 CD 04 23         [ 4] 2890         CALL     PLUS
      000F44 CD 02 91         [ 4] 2891         CALL     OVER
      000F47 CD 04 0E         [ 4] 2892 ACCP1:  CALL     DDUP
      000F4A CD 02 DC         [ 4] 2893         CALL     XORR
      000F4D CD 01 6B         [ 4] 2894         CALL     QBRAN
      000F50 0F 72                 2895         .word      ACCP4
      000F52 CD 0B 1C         [ 4] 2896         CALL     KEY
      000F55 CD 02 67         [ 4] 2897         CALL     DUPP
      000F58 CD 07 29         [ 4] 2898         CALL     BLANK
      000F5B CD 01 38         [ 4] 2899         CALL     DOLIT
      000F5E 00 7F                 2900         .word      127
      000F60 CD 05 43         [ 4] 2901         CALL     WITHI
      000F63 CD 01 6B         [ 4] 2902         CALL     QBRAN
      000F66 0F 6D                 2903         .word      ACCP2
      000F68 CD 0E ED         [ 4] 2904         CALL     TAP
      000F6B 20 03            [ 2] 2905         JRA     ACCP3
      000F6D CD 0F 03         [ 4] 2906 ACCP2:  CALL     KTAP
      000F70 20 D5            [ 2] 2907 ACCP3:  JRA     ACCP1
      000F72 CD 02 5D         [ 4] 2908 ACCP4:  CALL     DROP
      000F75 CD 02 91         [ 4] 2909         CALL     OVER
      000F78 CC 04 81         [ 2] 2910         JP     SUBB
                                   2911 
                                   2912 ;       QUERY   ( -- )
                                   2913 ;       Accept input stream to
                                   2914 ;       terminal input buffer.
      000F7B 0F 37                 2915         .word      LINK
                                   2916         
                           000F7D  2917 LINK = . 
      000F7D 05                    2918         .byte      5
      000F7E 51 55 45 52 59        2919         .ascii     "QUERY"
      000F83                       2920 QUERY:
      000F83 CD 08 45         [ 4] 2921         CALL     TIB
      000F86 CD 01 38         [ 4] 2922         CALL     DOLIT
      000F89 00 50                 2923         .word      80
      000F8B CD 0F 3E         [ 4] 2924         CALL     ACCEP
      000F8E CD 03 52         [ 4] 2925         CALL     NTIB
      000F91 CD 01 A9         [ 4] 2926         CALL     STORE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000F94 CD 02 5D         [ 4] 2927         CALL     DROP
      000F97 CD 07 36         [ 4] 2928         CALL     ZERO
      000F9A CD 03 42         [ 4] 2929         CALL     INN
      000F9D CC 01 A9         [ 2] 2930         JP     STORE
                                   2931 
                                   2932 ;       ABORT   ( -- )
                                   2933 ;       Reset data stack and
                                   2934 ;       jump to QUIT.
      000FA0 0F 7D                 2935         .word      LINK
                           000FA2  2936 LINK = . 
      000FA2 05                    2937         .byte      5
      000FA3 41 42 4F 52 54        2938         .ascii     "ABORT"
      000FA8                       2939 ABORT:
      000FA8 CD 10 9F         [ 4] 2940         CALL     PRESE
      000FAB CC 10 BC         [ 2] 2941         JP     QUIT
                                   2942 
                                   2943 ;       abort"  ( f -- )
                                   2944 ;       Run time routine of ABORT".
                                   2945 ;       Abort with a message.
      000FAE 0F A2                 2946         .word      LINK
                           000FB0  2947 LINK = . 
      000FB0 46                    2948 	.byte      COMPO+6
      000FB1 41 42 4F 52 54        2949         .ascii     "ABORT"
      000FB6 22                    2950         .byte      '"'
      000FB7                       2951 ABORQ:
      000FB7 CD 01 6B         [ 4] 2952         CALL     QBRAN
      000FBA 0F D6                 2953         .word      ABOR2   ;text flag
      000FBC CD 0B B2         [ 4] 2954         CALL     DOSTR
      000FBF CD 0B 54         [ 4] 2955 ABOR1:  CALL     SPACE
      000FC2 CD 08 0C         [ 4] 2956         CALL     COUNT
      000FC5 CD 0B 7E         [ 4] 2957         CALL     TYPES
      000FC8 CD 01 38         [ 4] 2958         CALL     DOLIT
      000FCB 00 3F                 2959         .word     63 ; "?"
      000FCD CD 01 22         [ 4] 2960         CALL     EMIT
      000FD0 CD 0B 9C         [ 4] 2961         CALL     CR
      000FD3 CC 0F A8         [ 2] 2962         JP     ABORT   ;pass error string
      000FD6 CD 0B B2         [ 4] 2963 ABOR2:  CALL     DOSTR
      000FD9 CC 02 5D         [ 2] 2964         JP     DROP
                                   2965 
                                   2966 ;; The text interpreter
                                   2967 
                                   2968 ;       $INTERPRET      ( a -- )
                                   2969 ;       Interpret a word. If failed,
                                   2970 ;       try to convert it to an integer.
      000FDC 0F B0                 2971         .word      LINK
                           000FDE  2972 LINK = . 
      000FDE 0A                    2973         .byte      10
      000FDF 24 49 4E 54 45 52 50  2974         .ascii     "$INTERPRET"
             52 45 54
      000FE9                       2975 INTER:
      000FE9 CD 0E AB         [ 4] 2976         CALL     NAMEQ
      000FEC CD 03 D2         [ 4] 2977         CALL     QDUP    ;?defined
      000FEF CD 01 6B         [ 4] 2978         CALL     QBRAN
      000FF2 10 13                 2979         .word      INTE1
      000FF4 CD 01 C0         [ 4] 2980         CALL     AT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      000FF7 CD 01 38         [ 4] 2981         CALL     DOLIT
      000FFA 40 00                 2982 	.word       0x4000	; COMPO*256
      000FFC CD 02 B3         [ 4] 2983         CALL     ANDD    ;?compile only lexicon bits
      000FFF CD 0F B7         [ 4] 2984         CALL     ABORQ
      001002 0D                    2985         .byte      13
      001003 20 63 6F 6D 70 69 6C  2986         .ascii     " compile only"
             65 20 6F 6E 6C 79
      001010 CC 01 92         [ 2] 2987         JP     EXECU
      001013 CD 0A 49         [ 4] 2988 INTE1:  CALL     NUMBQ   ;convert a number
      001016 CD 01 6B         [ 4] 2989         CALL     QBRAN
      001019 0F BF                 2990         .word    ABOR1
      00101B 81               [ 4] 2991         RET
                                   2992 
                                   2993 ;       [       ( -- )
                                   2994 ;       Start  text interpreter.
      00101C 0F DE                 2995         .word      LINK
                           00101E  2996 LINK = . 
      00101E 81                    2997 	.byte      IMEDD+1
      00101F 5B                    2998         .ascii     "["
      001020                       2999 LBRAC:
      001020 CD 01 38         [ 4] 3000         CALL   DOLIT
      001023 0F E9                 3001         .word  INTER
      001025 CD 03 73         [ 4] 3002         CALL   TEVAL
      001028 CC 01 A9         [ 2] 3003         JP     STORE
                                   3004 
                                   3005 ;       .OK     ( -- )
                                   3006 ;       Display 'ok' while interpreting.
      00102B 10 1E                 3007         .word      LINK
                           00102D  3008 LINK = . 
      00102D 03                    3009         .byte      3
      00102E 2E 4F 4B              3010         .ascii     ".OK"
      001031                       3011 DOTOK:
      001031 CD 01 38         [ 4] 3012         CALL     DOLIT
      001034 0F E9                 3013         .word      INTER
      001036 CD 03 73         [ 4] 3014         CALL     TEVAL
      001039 CD 01 C0         [ 4] 3015         CALL     AT
      00103C CD 04 A9         [ 4] 3016         CALL     EQUAL
      00103F CD 01 6B         [ 4] 3017         CALL     QBRAN
      001042 10 4B                 3018         .word      DOTO1
      001044 CD 0B DB         [ 4] 3019         CALL     DOTQP
      001047 03                    3020         .byte      3
      001048 20 6F 6B              3021         .ascii     " ok"
      00104B CC 0B 9C         [ 2] 3022 DOTO1:  JP     CR
                                   3023 
                                   3024 ;       ?STACK  ( -- )
                                   3025 ;       Abort if stack underflows.
      00104E 10 2D                 3026         .word      LINK
                           001050  3027 LINK = . 
      001050 06                    3028         .byte      6
      001051 3F 53 54 41 43 4B     3029         .ascii     "?STACK"
      001057                       3030 QSTAC: 
      001057 CD 07 79         [ 4] 3031         CALL     DEPTH
      00105A CD 02 A0         [ 4] 3032         CALL     ZLESS   ;check only for underflow
      00105D CD 0F B7         [ 4] 3033         CALL     ABORQ
      001060 0B                    3034         .byte      11
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      001061 20 75 6E 64 65 72 66  3035         .ascii     " underflow "
             6C 6F 77 20
      00106C 81               [ 4] 3036         RET
                                   3037 
                                   3038 ;       EVAL    ( -- )
                                   3039 ;       Interpret  input stream.
      00106D 10 50                 3040         .word      LINK
                           00106F  3041 LINK = . 
      00106F 04                    3042         .byte      4
      001070 45 56 41 4C           3043         .ascii     "EVAL"
      001074                       3044 EVAL:
      001074 CD 0D AE         [ 4] 3045 EVAL1:  CALL     TOKEN
      001077 CD 02 67         [ 4] 3046         CALL     DUPP
      00107A CD 01 DE         [ 4] 3047         CALL     CAT     ;?input stream empty
      00107D CD 01 6B         [ 4] 3048         CALL     QBRAN
      001080 10 90                 3049         .word    EVAL2
      001082 CD 03 73         [ 4] 3050         CALL     TEVAL
      001085 CD 08 59         [ 4] 3051         CALL     ATEXE
      001088 CD 10 57         [ 4] 3052         CALL     QSTAC   ;evaluate input, check stack
      00108B CD 01 82         [ 4] 3053         CALL     BRAN
      00108E 10 74                 3054         .word    EVAL1
      001090 CD 02 5D         [ 4] 3055 EVAL2:  CALL     DROP
      001093 CC 10 31         [ 2] 3056         JP       DOTOK
                                   3057 
                                   3058 ;       PRESET  ( -- )
                                   3059 ;       Reset data stack pointer and
                                   3060 ;       terminal input buffer.
      001096 10 6F                 3061         .word      LINK
                           001098  3062 LINK = . 
      001098 06                    3063         .byte      6
      001099 50 52 45 53 45 54     3064         .ascii     "PRESET"
      00109F                       3065 PRESE:
      00109F CD 01 38         [ 4] 3066         CALL     DOLIT
      0010A2 16 70                 3067         .word      SPP
      0010A4 CD 02 54         [ 4] 3068         CALL     SPSTO
      0010A7 CD 01 38         [ 4] 3069         CALL     DOLIT
      0010AA 17 00                 3070         .word      TIBB
      0010AC CD 03 52         [ 4] 3071         CALL     NTIB
      0010AF CD 06 D7         [ 4] 3072         CALL     CELLP
      0010B2 CC 01 A9         [ 2] 3073         JP     STORE
                                   3074 
                                   3075 ;       QUIT    ( -- )
                                   3076 ;       Reset return stack pointer
                                   3077 ;       and start text interpreter.
      0010B5 10 98                 3078         .word      LINK
                           0010B7  3079 LINK = . 
      0010B7 04                    3080         .byte      4
      0010B8 51 55 49 54           3081         .ascii     "QUIT"
      0010BC                       3082 QUIT:
      0010BC CD 01 38         [ 4] 3083         CALL     DOLIT
      0010BF 17 FF                 3084         .word      RPP
      0010C1 CD 01 FB         [ 4] 3085         CALL     RPSTO   ;reset return stack pointer
      0010C4 CD 10 20         [ 4] 3086 QUIT1:  CALL     LBRAC   ;start interpretation
      0010C7 CD 0F 83         [ 4] 3087 QUIT2:  CALL     QUERY   ;get input
      0010CA CD 10 74         [ 4] 3088         CALL     EVAL
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      0010CD 20 F8            [ 2] 3089         JRA     QUIT2   ;continue till error
                                   3090 
                                   3091 ;; The compiler
                                   3092 
                                   3093 ;       '       ( -- ca )
                                   3094 ;       Search vocabularies for
                                   3095 ;       next word in input stream.
      0010CF 10 B7                 3096         .word      LINK
                           0010D1  3097 LINK = . 
      0010D1 01                    3098         .byte      1
      0010D2 27                    3099         .ascii     "'"
      0010D3                       3100 TICK:
      0010D3 CD 0D AE         [ 4] 3101         CALL     TOKEN
      0010D6 CD 0E AB         [ 4] 3102         CALL     NAMEQ   ;?defined
      0010D9 CD 01 6B         [ 4] 3103         CALL     QBRAN
      0010DC 0F BF                 3104         .word      ABOR1
      0010DE 81               [ 4] 3105         RET     ;yes, push code address
                                   3106 
                                   3107 ;       ALLOT   ( n -- )
                           000001  3108 .if PICATOUT_MOD
                                   3109 ;       Allocate n bytes to RAM 
                           000000  3110 .else 
                                   3111 ;       Allocate n bytes to  code dictionary.
                                   3112 .endif 
      0010DF 10 D1                 3113         .word      LINK
                           0010E1  3114 LINK = . 
      0010E1 05                    3115         .byte      5
      0010E2 41 4C 4C 4F 54        3116         .ascii     "ALLOT"
      0010E7                       3117 ALLOT:
      0010E7 CD 03 A3         [ 4] 3118         CALL     CPP
      0010EA CC 07 A5         [ 2] 3119         JP     PSTOR
                                   3120 
                                   3121 ;       ,       ( w -- )
                                   3122 ;         Compile an integer into
                                   3123 ;         code dictionary.
      0010ED 10 E1                 3124         .word      LINK
                           0010EF  3125 LINK = . 
      0010EF 01                    3126         .byte      1
      0010F0 2C                    3127         .ascii     ","
      0010F1                       3128 COMMA:
      0010F1 CD 08 23         [ 4] 3129         CALL     HERE
      0010F4 CD 02 67         [ 4] 3130         CALL     DUPP
      0010F7 CD 06 D7         [ 4] 3131         CALL     CELLP   ;cell boundary
      0010FA CD 03 A3         [ 4] 3132         CALL     CPP
      0010FD CD 01 A9         [ 4] 3133         CALL     STORE
      001100 CC 01 A9         [ 2] 3134         JP     STORE
                                   3135 
                                   3136 ;       C,      ( c -- )
                                   3137 ;       Compile a byte into
                                   3138 ;       code dictionary.
      001103 10 EF                 3139        .word      LINK
                           001105  3140 LINK = . 
      001105 02                    3141         .byte      2
      001106 43 2C                 3142         .ascii     "C,"
      001108                       3143 CCOMMA:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      001108 CD 08 23         [ 4] 3144         CALL     HERE
      00110B CD 02 67         [ 4] 3145         CALL     DUPP
      00110E CD 07 02         [ 4] 3146         CALL     ONEP
      001111 CD 03 A3         [ 4] 3147         CALL     CPP
      001114 CD 01 A9         [ 4] 3148         CALL     STORE
      001117 CC 01 CD         [ 2] 3149         JP     CSTOR
                                   3150 
                                   3151 ;       [COMPILE]       ( -- ; <string> )
                                   3152 ;       Compile next immediate
                                   3153 ;       word into code dictionary.
      00111A 11 05                 3154         .word      LINK
                           00111C  3155 LINK = . 
      00111C 89                    3156 	.byte      IMEDD+9
      00111D 5B 43 4F 4D 50 49 4C  3157         .ascii     "[COMPILE]"
             45 5D
      001126                       3158 BCOMP:
      001126 CD 10 D3         [ 4] 3159         CALL     TICK
      001129 CC 13 86         [ 2] 3160         JP     JSRC
                                   3161 
                                   3162 ;       COMPILE ( -- )
                                   3163 ;       Compile next jsr in
                                   3164 ;       colon list to code dictionary.
      00112C 11 1C                 3165         .word      LINK
                           00112E  3166 LINK = . 
      00112E 47                    3167 	.byte      COMPO+7
      00112F 43 4F 4D 50 49 4C 45  3168         .ascii     "COMPILE"
      001136                       3169 COMPI:
      001136 CD 02 11         [ 4] 3170         CALL     RFROM
      001139 CD 07 02         [ 4] 3171         CALL     ONEP
      00113C CD 02 67         [ 4] 3172         CALL     DUPP
      00113F CD 01 C0         [ 4] 3173         CALL     AT
      001142 CD 13 86         [ 4] 3174         CALL     JSRC    ;compile subroutine
      001145 CD 06 D7         [ 4] 3175         CALL     CELLP
      001148 CC 02 30         [ 2] 3176         JP     TOR
                                   3177 
                                   3178 ;       LITERAL ( w -- )
                                   3179 ;       Compile tos to dictionary
                                   3180 ;       as an integer literal.
      00114B 11 2E                 3181         .word      LINK
                           00114D  3182 LINK = . 
      00114D 87                    3183 	.byte      IMEDD+7
      00114E 4C 49 54 45 52 41 4C  3184         .ascii     "LITERAL"
      001155                       3185 LITER:
      001155 CD 11 36         [ 4] 3186         CALL     COMPI
      001158 CD 01 38         [ 4] 3187         CALL     DOLIT
      00115B CC 10 F1         [ 2] 3188         JP     COMMA
                                   3189 
                                   3190 ;       $,"     ( -- )
                                   3191 ;       Compile a literal string
                                   3192 ;       up to next " .
      00115E 11 4D                 3193         .word      LINK
                           001160  3194 LINK = . 
      001160 03                    3195         .byte      3
      001161 24 2C 22              3196         .byte     '$',',','"'
      001164                       3197 STRCQ:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      001164 CD 01 38         [ 4] 3198         CALL     DOLIT
      001167 00 22                 3199         .word     34	; "
      001169 CD 0D 31         [ 4] 3200         CALL     PARSE
      00116C CD 08 23         [ 4] 3201         CALL     HERE
      00116F CD 08 E4         [ 4] 3202         CALL     PACKS   ;string to code dictionary
      001172 CD 08 0C         [ 4] 3203         CALL     COUNT
      001175 CD 04 23         [ 4] 3204         CALL     PLUS    ;calculate aligned end of string
      001178 CD 03 A3         [ 4] 3205         CALL     CPP
      00117B CC 01 A9         [ 2] 3206         JP     STORE
                                   3207 
                                   3208 ;; Structures
                                   3209 
                                   3210 ;       FOR     ( -- a )
                                   3211 ;       Start a FOR-NEXT loop
                                   3212 ;       structure in a colon definition.
      00117E 11 60                 3213         .word      LINK
                           001180  3214 LINK = . 
      001180 83                    3215 	.byte      IMEDD+3
      001181 46 4F 52              3216         .ascii     "FOR"
      001184                       3217 FOR:
      001184 CD 11 36         [ 4] 3218         CALL     COMPI
      001187 CD 02 30         [ 4] 3219         CALL     TOR
      00118A CC 08 23         [ 2] 3220         JP     HERE
                                   3221 
                                   3222 ;       NEXT    ( a -- )
                                   3223 ;       Terminate a FOR-NEXT loop.
      00118D 11 80                 3224         .word      LINK
                           00118F  3225 LINK = . 
      00118F 84                    3226 	.byte      IMEDD+4
      001190 4E 45 58 54           3227         .ascii     "NEXT"
      001194                       3228 NEXT:
      001194 CD 11 36         [ 4] 3229         CALL     COMPI
      001197 CD 01 4C         [ 4] 3230         CALL     DONXT
      00119A CC 10 F1         [ 2] 3231         JP     COMMA
                                   3232 
                                   3233 ;       BEGIN   ( -- a )
                                   3234 ;       Start an infinite or
                                   3235 ;       indefinite loop structure.
      00119D 11 8F                 3236         .word      LINK
                           00119F  3237 LINK = . 
      00119F 85                    3238 	.byte      IMEDD+5
      0011A0 42 45 47 49 4E        3239         .ascii     "BEGIN"
      0011A5                       3240 BEGIN:
      0011A5 CC 08 23         [ 2] 3241         JP     HERE
                                   3242 
                                   3243 ;       UNTIL   ( a -- )
                                   3244 ;       Terminate a BEGIN-UNTIL
                                   3245 ;       indefinite loop structure.
      0011A8 11 9F                 3246         .word      LINK
                           0011AA  3247 LINK = . 
      0011AA 85                    3248 	.byte      IMEDD+5
      0011AB 55 4E 54 49 4C        3249         .ascii     "UNTIL"
      0011B0                       3250 UNTIL:
      0011B0 CD 11 36         [ 4] 3251         CALL     COMPI
      0011B3 CD 01 6B         [ 4] 3252         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      0011B6 CC 10 F1         [ 2] 3253         JP     COMMA
                                   3254 
                                   3255 ;       AGAIN   ( a -- )
                                   3256 ;       Terminate a BEGIN-AGAIN
                                   3257 ;       infinite loop structure.
      0011B9 11 AA                 3258         .word      LINK
                           0011BB  3259 LINK = . 
      0011BB 85                    3260 	.byte      IMEDD+5
      0011BC 41 47 41 49 4E        3261         .ascii     "AGAIN"
      0011C1                       3262 AGAIN:
      0011C1 CD 11 36         [ 4] 3263         CALL     COMPI
      0011C4 CD 01 82         [ 4] 3264         CALL     BRAN
      0011C7 CC 10 F1         [ 2] 3265         JP     COMMA
                                   3266 
                                   3267 ;       IF      ( -- A )
                                   3268 ;       Begin a conditional branch.
      0011CA 11 BB                 3269         .word      LINK
                           0011CC  3270 LINK = . 
      0011CC 82                    3271 	.byte      IMEDD+2
      0011CD 49 46                 3272         .ascii     "IF"
      0011CF                       3273 IFF:
      0011CF CD 11 36         [ 4] 3274         CALL     COMPI
      0011D2 CD 01 6B         [ 4] 3275         CALL     QBRAN
      0011D5 CD 08 23         [ 4] 3276         CALL     HERE
      0011D8 CD 07 36         [ 4] 3277         CALL     ZERO
      0011DB CC 10 F1         [ 2] 3278         JP     COMMA
                                   3279 
                                   3280 ;       THEN        ( A -- )
                                   3281 ;       Terminate a conditional branch structure.
      0011DE 11 CC                 3282         .word      LINK
                           0011E0  3283 LINK = . 
      0011E0 84                    3284 	.byte      IMEDD+4
      0011E1 54 48 45 4E           3285         .ascii     "THEN"
      0011E5                       3286 THENN:
      0011E5 CD 08 23         [ 4] 3287         CALL     HERE
      0011E8 CD 02 77         [ 4] 3288         CALL     SWAPP
      0011EB CC 01 A9         [ 2] 3289         JP     STORE
                                   3290 
                                   3291 ;       ELSE        ( A -- A )
                                   3292 ;       Start the false clause in an IF-ELSE-THEN structure.
      0011EE 11 E0                 3293         .word      LINK
                           0011F0  3294 LINK = . 
      0011F0 84                    3295 	.byte      IMEDD+4
      0011F1 45 4C 53 45           3296         .ascii     "ELSE"
      0011F5                       3297 ELSEE:
      0011F5 CD 11 36         [ 4] 3298         CALL     COMPI
      0011F8 CD 01 82         [ 4] 3299         CALL     BRAN
      0011FB CD 08 23         [ 4] 3300         CALL     HERE
      0011FE CD 07 36         [ 4] 3301         CALL     ZERO
      001201 CD 10 F1         [ 4] 3302         CALL     COMMA
      001204 CD 02 77         [ 4] 3303         CALL     SWAPP
      001207 CD 08 23         [ 4] 3304         CALL     HERE
      00120A CD 02 77         [ 4] 3305         CALL     SWAPP
      00120D CC 01 A9         [ 2] 3306         JP     STORE
                                   3307 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



                                   3308 ;       AHEAD       ( -- A )
                                   3309 ;       Compile a forward branch instruction.
      001210 11 F0                 3310         .word      LINK
                           001212  3311 LINK = . 
      001212 85                    3312 	.byte      IMEDD+5
      001213 41 48 45 41 44        3313         .ascii     "AHEAD"
      001218                       3314 AHEAD:
      001218 CD 11 36         [ 4] 3315         CALL     COMPI
      00121B CD 01 82         [ 4] 3316         CALL     BRAN
      00121E CD 08 23         [ 4] 3317         CALL     HERE
      001221 CD 07 36         [ 4] 3318         CALL     ZERO
      001224 CC 10 F1         [ 2] 3319         JP     COMMA
                                   3320 
                                   3321 ;       WHILE       ( a -- A a )
                                   3322 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      001227 12 12                 3323         .word      LINK
                           001229  3324 LINK = . 
      001229 85                    3325 	.byte      IMEDD+5
      00122A 57 48 49 4C 45        3326         .ascii     "WHILE"
      00122F                       3327 WHILE:
      00122F CD 11 36         [ 4] 3328         CALL     COMPI
      001232 CD 01 6B         [ 4] 3329         CALL     QBRAN
      001235 CD 08 23         [ 4] 3330         CALL     HERE
      001238 CD 07 36         [ 4] 3331         CALL     ZERO
      00123B CD 10 F1         [ 4] 3332         CALL     COMMA
      00123E CC 02 77         [ 2] 3333         JP     SWAPP
                                   3334 
                                   3335 ;       REPEAT      ( A a -- )
                                   3336 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      001241 12 29                 3337         .word      LINK
                           001243  3338 LINK = . 
      001243 86                    3339         .byte      IMEDD+6
      001244 52 45 50 45 41 54     3340         .ascii     "REPEAT"
      00124A                       3341 REPEA:
      00124A CD 11 36         [ 4] 3342         CALL     COMPI
      00124D CD 01 82         [ 4] 3343         CALL     BRAN
      001250 CD 10 F1         [ 4] 3344         CALL     COMMA
      001253 CD 08 23         [ 4] 3345         CALL     HERE
      001256 CD 02 77         [ 4] 3346         CALL     SWAPP
      001259 CC 01 A9         [ 2] 3347         JP     STORE
                                   3348 
                                   3349 ;       AFT         ( a -- a A )
                                   3350 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      00125C 12 43                 3351         .word      LINK
                           00125E  3352 LINK = . 
      00125E 83                    3353 	.byte      IMEDD+3
      00125F 41 46 54              3354         .ascii     "AFT"
      001262                       3355 AFT:
      001262 CD 02 5D         [ 4] 3356         CALL     DROP
      001265 CD 12 18         [ 4] 3357         CALL     AHEAD
      001268 CD 08 23         [ 4] 3358         CALL     HERE
      00126B CC 02 77         [ 2] 3359         JP     SWAPP
                                   3360 
                                   3361 ;       ABORT"      ( -- ; <string> )
                                   3362 ;       Conditional abort with an error message.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      00126E 12 5E                 3363         .word      LINK
                           001270  3364 LINK = . 
      001270 86                    3365 	.byte      IMEDD+6
      001271 41 42 4F 52 54        3366         .ascii     "ABORT"
      001276 22                    3367         .byte      '"'
      001277                       3368 ABRTQ:
      001277 CD 11 36         [ 4] 3369         CALL     COMPI
      00127A CD 0F B7         [ 4] 3370         CALL     ABORQ
      00127D CC 11 64         [ 2] 3371         JP     STRCQ
                                   3372 
                                   3373 ;       $"     ( -- ; <string> )
                                   3374 ;       Compile an inline string literal.
      001280 12 70                 3375         .word      LINK
                           001282  3376 LINK = . 
      001282 82                    3377 	.byte      IMEDD+2
      001283 24 22                 3378         .byte     '$','"'
      001285                       3379 STRQ:
      001285 CD 11 36         [ 4] 3380         CALL     COMPI
      001288 CD 0B D1         [ 4] 3381         CALL     STRQP
      00128B CC 11 64         [ 2] 3382         JP     STRCQ
                                   3383 
                                   3384 ;       ."          ( -- ; <string> )
                                   3385 ;       Compile an inline string literal to be typed out at run time.
      00128E 12 82                 3386         .word      LINK
                           001290  3387 LINK = . 
      001290 82                    3388 	.byte      IMEDD+2
      001291 2E 22                 3389         .byte     '.','"'
      001293                       3390 DOTQ:
      001293 CD 11 36         [ 4] 3391         CALL     COMPI
      001296 CD 0B DB         [ 4] 3392         CALL     DOTQP
      001299 CC 11 64         [ 2] 3393         JP     STRCQ
                                   3394 
                                   3395 ;; Name compiler
                                   3396 
                                   3397 ;       ?UNIQUE ( a -- a )
                                   3398 ;       Display a warning message
                                   3399 ;       if word already exists.
      00129C 12 90                 3400         .word      LINK
                           00129E  3401 LINK = . 
      00129E 07                    3402         .byte      7
      00129F 3F 55 4E 49 51 55 45  3403         .ascii     "?UNIQUE"
      0012A6                       3404 UNIQU:
      0012A6 CD 02 67         [ 4] 3405         CALL     DUPP
      0012A9 CD 0E AB         [ 4] 3406         CALL     NAMEQ   ;?name exists
      0012AC CD 01 6B         [ 4] 3407         CALL     QBRAN
      0012AF 12 C5                 3408         .word      UNIQ1
      0012B1 CD 0B DB         [ 4] 3409         CALL     DOTQP   ;redef are OK
      0012B4 07                    3410         .byte       7
      0012B5 20 72 65 44 65 66 20  3411         .ascii     " reDef "       
      0012BC CD 02 91         [ 4] 3412         CALL     OVER
      0012BF CD 08 0C         [ 4] 3413         CALL     COUNT
      0012C2 CD 0B 7E         [ 4] 3414         CALL     TYPES   ;just in case
      0012C5 CC 02 5D         [ 2] 3415 UNIQ1:  JP     DROP
                                   3416 
                                   3417 ;       $,n     ( na -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                   3418 ;       Build a new dictionary name
                                   3419 ;       using string at na.
      0012C8 12 9E                 3420         .word      LINK
                           0012CA  3421 LINK = . 
      0012CA 03                    3422         .byte      3
      0012CB 24 2C 6E              3423         .ascii     "$,n"
      0012CE                       3424 SNAME:
      0012CE CD 02 67         [ 4] 3425         CALL     DUPP
      0012D1 CD 01 DE         [ 4] 3426         CALL     CAT     ;?null input
      0012D4 CD 01 6B         [ 4] 3427         CALL     QBRAN
      0012D7 13 04                 3428         .word      PNAM1
      0012D9 CD 12 A6         [ 4] 3429         CALL     UNIQU   ;?redefinition
      0012DC CD 02 67         [ 4] 3430         CALL     DUPP
      0012DF CD 08 0C         [ 4] 3431         CALL     COUNT
      0012E2 CD 04 23         [ 4] 3432         CALL     PLUS
      0012E5 CD 03 A3         [ 4] 3433         CALL     CPP
      0012E8 CD 01 A9         [ 4] 3434         CALL     STORE
      0012EB CD 02 67         [ 4] 3435         CALL     DUPP
      0012EE CD 03 C2         [ 4] 3436         CALL     LAST
      0012F1 CD 01 A9         [ 4] 3437         CALL     STORE   ;save na for vocabulary link
      0012F4 CD 06 E6         [ 4] 3438         CALL     CELLM   ;link address
      0012F7 CD 03 95         [ 4] 3439         CALL     CNTXT
      0012FA CD 01 C0         [ 4] 3440         CALL     AT
      0012FD CD 02 77         [ 4] 3441         CALL     SWAPP
      001300 CD 01 A9         [ 4] 3442         CALL     STORE
      001303 81               [ 4] 3443         RET     ;save code pointer
      001304 CD 0B D1         [ 4] 3444 PNAM1:  CALL     STRQP
      001307 05                    3445         .byte      5
      001308 20 6E 61 6D 65        3446         .ascii     " name" ;null input
      00130D CC 0F BF         [ 2] 3447         JP     ABOR1
                                   3448 
                                   3449 ;; FORTH compiler
                                   3450 
                                   3451 ;       $COMPILE        ( a -- )
                                   3452 ;       Compile next word to
                                   3453 ;       dictionary as a token or literal.
      001310 12 CA                 3454         .word      LINK
                           001312  3455 LINK = . 
      001312 08                    3456         .byte      8
      001313 24 43 4F 4D 50 49 4C  3457         .ascii     "$COMPILE"
             45
      00131B                       3458 SCOMP:
      00131B CD 0E AB         [ 4] 3459         CALL     NAMEQ
      00131E CD 03 D2         [ 4] 3460         CALL     QDUP    ;?defined
      001321 CD 01 6B         [ 4] 3461         CALL     QBRAN
      001324 13 3C                 3462         .word      SCOM2
      001326 CD 01 C0         [ 4] 3463         CALL     AT
      001329 CD 01 38         [ 4] 3464         CALL     DOLIT
      00132C 80 00                 3465         .word     0x8000	;  IMEDD*256
      00132E CD 02 B3         [ 4] 3466         CALL     ANDD    ;?immediate
      001331 CD 01 6B         [ 4] 3467         CALL     QBRAN
      001334 13 39                 3468         .word      SCOM1
      001336 CC 01 92         [ 2] 3469         JP     EXECU
      001339 CC 13 86         [ 2] 3470 SCOM1:  JP     JSRC
      00133C CD 0A 49         [ 4] 3471 SCOM2:  CALL     NUMBQ   ;try to convert to number
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      00133F CD 01 6B         [ 4] 3472         CALL     QBRAN
      001342 0F BF                 3473         .word      ABOR1
      001344 CC 11 55         [ 2] 3474         JP     LITER
                                   3475 
                                   3476 ;       OVERT   ( -- )
                                   3477 ;       Link a new word into vocabulary.
      001347 13 12                 3478         .word      LINK
                           001349  3479 LINK = . 
      001349 05                    3480         .byte      5
      00134A 4F 56 45 52 54        3481         .ascii     "OVERT"
      00134F                       3482 OVERT:
      00134F CD 03 C2         [ 4] 3483         CALL     LAST
      001352 CD 01 C0         [ 4] 3484         CALL     AT
      001355 CD 03 95         [ 4] 3485         CALL     CNTXT
      001358 CC 01 A9         [ 2] 3486         JP     STORE
                                   3487 
                                   3488 ;       ;       ( -- )
                                   3489 ;       Terminate a colon definition.
      00135B 13 49                 3490         .word      LINK
                           00135D  3491 LINK = . 
      00135D C1                    3492 	.byte      IMEDD+COMPO+1
      00135E 3B                    3493         .ascii     ";"
      00135F                       3494 SEMIS:
      00135F CD 11 36         [ 4] 3495         CALL     COMPI
      001362 CD 01 A2         [ 4] 3496         CALL     EXIT
      001365 CD 10 20         [ 4] 3497         CALL     LBRAC
                           000001  3498 .if PICATOUT_MOD
      001368 CD 13 4F         [ 4] 3499         call OVERT 
      00136B CD 1B 0A         [ 4] 3500         CALL FMOVE 
      00136E 81               [ 4] 3501         RET 
                           000000  3502 .else 
                                   3503         JP     OVERT
                                   3504 .endif 
                                   3505 
                                   3506 ;       ]       ( -- )
                                   3507 ;       Start compiling words in
                                   3508 ;       input stream.
      00136F 13 5D                 3509         .word      LINK
                           001371  3510 LINK = . 
      001371 01                    3511         .byte      1
      001372 5D                    3512         .ascii     "]"
      001373                       3513 RBRAC:
      001373 CD 01 38         [ 4] 3514         CALL   DOLIT
      001376 13 1B                 3515         .word  SCOMP
      001378 CD 03 73         [ 4] 3516         CALL   TEVAL
      00137B CC 01 A9         [ 2] 3517         JP     STORE
                                   3518 
                                   3519 ;       CALL,    ( ca -- )
                                   3520 ;       Compile a subroutine call.
      00137E 13 71                 3521         .word      LINK
                           001380  3522 LINK = . 
      001380 04                    3523         .byte      4
      001381 43 41 4C 4C 2C        3524         .ascii     "CALL,"
      001386                       3525 JSRC:
      001386 CD 01 38         [ 4] 3526         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      001389 00 CD                 3527         .word     CALLL     ;CALL
      00138B CD 11 08         [ 4] 3528         CALL     CCOMMA
      00138E CC 10 F1         [ 2] 3529         JP     COMMA
                                   3530 
                                   3531 ;       :       ( -- ; <string> )
                                   3532 ;       Start a new colon definition
                                   3533 ;       using next word as its name.
      001391 13 80                 3534         .word      LINK
                           001393  3535 LINK = . 
      001393 01                    3536         .byte      1
      001394 3A                    3537         .ascii     ":"
      001395                       3538 COLON:
      001395 CD 0D AE         [ 4] 3539         CALL   TOKEN
      001398 CD 12 CE         [ 4] 3540         CALL   SNAME
      00139B CC 13 73         [ 2] 3541         JP     RBRAC
                                   3542 
                                   3543 ;       IMMEDIATE       ( -- )
                                   3544 ;       Make last compiled word
                                   3545 ;       an immediate word.
      00139E 13 93                 3546         .word      LINK
                           0013A0  3547 LINK = . 
      0013A0 09                    3548         .byte      9
      0013A1 49 4D 4D 45 44 49 41  3549         .ascii     "IMMEDIATE"
             54 45
      0013AA                       3550 IMMED:
      0013AA CD 01 38         [ 4] 3551         CALL     DOLIT
      0013AD 80 00                 3552         .word     0x8000	;  IMEDD*256
      0013AF CD 03 C2         [ 4] 3553         CALL     LAST
      0013B2 CD 01 C0         [ 4] 3554         CALL     AT
      0013B5 CD 01 C0         [ 4] 3555         CALL     AT
      0013B8 CD 02 C7         [ 4] 3556         CALL     ORR
      0013BB CD 03 C2         [ 4] 3557         CALL     LAST
      0013BE CD 01 C0         [ 4] 3558         CALL     AT
      0013C1 CC 01 A9         [ 2] 3559         JP     STORE
                                   3560 
                                   3561 ;; Defining words
                                   3562 
                                   3563 ;       CREATE  ( -- ; <string> )
                                   3564 ;       Compile a new array
                                   3565 ;       without allocating space.
      0013C4 13 A0                 3566         .word      LINK
                           0013C6  3567 LINK = . 
      0013C6 06                    3568         .byte      6
      0013C7 43 52 45 41 54 45     3569         .ascii     "CREATE"
      0013CD                       3570 CREAT:
      0013CD CD 0D AE         [ 4] 3571         CALL     TOKEN
      0013D0 CD 12 CE         [ 4] 3572         CALL     SNAME
      0013D3 CD 13 4F         [ 4] 3573         CALL     OVERT        
      0013D6 CD 11 36         [ 4] 3574         CALL     COMPI 
      0013D9 CD 03 14         [ 4] 3575         CALL     DOVAR
      0013DC 81               [ 4] 3576         RET
                                   3577 
                                   3578 ;       VARIABLE        ( -- ; <string> )
                                   3579 ;       Compile a new variable
                                   3580 ;       initialized to 0.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      0013DD 13 C6                 3581         .word      LINK
                           0013DF  3582 LINK = . 
      0013DF 08                    3583         .byte      8
      0013E0 56 41 52 49 41 42 4C  3584         .ascii     "VARIABLE"
             45
      0013E8                       3585 VARIA:
                           000001  3586 .if PICATOUT_MOD
                                   3587 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      0013E8 CD 08 23         [ 4] 3588         CALL HERE
      0013EB CD 02 67         [ 4] 3589         CALL DUPP 
      0013EE CD 06 D7         [ 4] 3590         CALL CELLP 
      0013F1 CD 03 A3         [ 4] 3591         CALL CPP 
      0013F4 CD 01 A9         [ 4] 3592         CALL STORE 
                                   3593 .endif         
      0013F7 CD 13 CD         [ 4] 3594         CALL     CREAT
      0013FA CD 02 67         [ 4] 3595         CALL DUPP
      0013FD CD 10 F1         [ 4] 3596         CALL COMMA
      001400 CD 07 36         [ 4] 3597         CALL     ZERO
                           000001  3598 .if PICATOUT_MOD 
      001403 CD 02 77         [ 4] 3599         call SWAPP 
      001406 CD 01 A9         [ 4] 3600         CALL   STORE 
      001409 CD 1B 0A         [ 4] 3601         CALL FMOVE ; move definition to FLASH
      00140C 81               [ 4] 3602         RET 
                                   3603 .endif ;PICATOUT_MOD        
                                   3604 
                           000001  3605 .if PICATOUT_MOD
                                   3606 ;       CONSTANT  ( n -- ; <string> )
                                   3607 ;       Compile a new constant 
                                   3608 ;       n CONSTANT name 
      00140D 13 DF                 3609         .word LINK 
                           00140F  3610         LINK=. 
      00140F 08                    3611         .byte 8 
      001410 43 4F 4E 53 54 41 4E  3612         .ascii "CONSTANT" 
             54
      001418                       3613 constant:          
      001418 CD 0D AE         [ 4] 3614         CALL TOKEN
      00141B CD 12 CE         [ 4] 3615         CALL SNAME 
      00141E CD 13 4F         [ 4] 3616         CALL OVERT 
      001421 CD 11 36         [ 4] 3617         CALL COMPI 
      001424 CD 14 35         [ 4] 3618         CALL DOCONST
      001427 CD 10 F1         [ 4] 3619         CALL COMMA 
      00142A 81               [ 4] 3620         RET          
                                   3621 
                                   3622 ; CONSTANT runtime semantic 
                                   3623 ; doCONST  ( -- n )
      00142B 14 0F                 3624         .word LINK 
                           00142D  3625         LINK=.
      00142D 07                    3626         .byte 7
      00142E 44 4F 43 4F 4E 53 54  3627         .ascii "DOCONST"
      001435                       3628 DOCONST:
      001435 1D 00 02         [ 2] 3629         subw x,#CELLL
      001438 90 85            [ 2] 3630         popw y 
      00143A 90 FE            [ 2] 3631         ldw y,(y) 
      00143C FF               [ 2] 3632         ldw (x),y 
      00143D 81               [ 4] 3633         ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                   3634 .endif ;PICATOUT_MOD
                                   3635 
                                   3636 
                                   3637 ;; Tools
                                   3638 
                                   3639 ;       _TYPE   ( b u -- )
                                   3640 ;       Display a string. Filter
                                   3641 ;       non-printing characters.
      00143E 14 2D                 3642         .word      LINK
                           001440  3643 LINK = . 
      001440 05                    3644         .byte      5
      001441 5F 54 59 50 45        3645         .ascii     "_TYPE"
      001446                       3646 UTYPE:
      001446 CD 02 30         [ 4] 3647         CALL     TOR     ;start count down loop
      001449 20 0F            [ 2] 3648         JRA     UTYP2   ;skip first pass
      00144B CD 02 67         [ 4] 3649 UTYP1:  CALL     DUPP
      00144E CD 01 DE         [ 4] 3650         CALL     CAT
      001451 CD 07 60         [ 4] 3651         CALL     TCHAR
      001454 CD 01 22         [ 4] 3652         CALL     EMIT    ;display only printable
      001457 CD 07 02         [ 4] 3653         CALL     ONEP    ;increment address
      00145A CD 01 4C         [ 4] 3654 UTYP2:  CALL     DONXT
      00145D 14 4B                 3655         .word      UTYP1   ;loop till done
      00145F CC 02 5D         [ 2] 3656         JP     DROP
                                   3657 
                                   3658 ;       dm+     ( a u -- a )
                                   3659 ;       Dump u bytes from ,
                                   3660 ;       leaving a+u on  stack.
      001462 14 40                 3661         .word      LINK
                           001464  3662 LINK = . 
      001464 03                    3663         .byte      3
      001465 64 6D 2B              3664         .ascii     "dm+"
      001468                       3665 DUMPP:
      001468 CD 02 91         [ 4] 3666         CALL     OVER
      00146B CD 01 38         [ 4] 3667         CALL     DOLIT
      00146E 00 04                 3668         .word      4
      001470 CD 0C 04         [ 4] 3669         CALL     UDOTR   ;display address
      001473 CD 0B 54         [ 4] 3670         CALL     SPACE
      001476 CD 02 30         [ 4] 3671         CALL     TOR     ;start count down loop
      001479 20 11            [ 2] 3672         JRA     PDUM2   ;skip first pass
      00147B CD 02 67         [ 4] 3673 PDUM1:  CALL     DUPP
      00147E CD 01 DE         [ 4] 3674         CALL     CAT
      001481 CD 01 38         [ 4] 3675         CALL     DOLIT
      001484 00 03                 3676         .word      3
      001486 CD 0C 04         [ 4] 3677         CALL     UDOTR   ;display numeric data
      001489 CD 07 02         [ 4] 3678         CALL     ONEP    ;increment address
      00148C CD 01 4C         [ 4] 3679 PDUM2:  CALL     DONXT
      00148F 14 7B                 3680         .word      PDUM1   ;loop till done
      001491 81               [ 4] 3681         RET
                                   3682 
                                   3683 ;       DUMP    ( a u -- )
                                   3684 ;       Dump u bytes from a,
                                   3685 ;       in a formatted manner.
      001492 14 64                 3686         .word      LINK
                           001494  3687 LINK = . 
      001494 04                    3688         .byte      4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      001495 44 55 4D 50           3689         .ascii     "DUMP"
      001499                       3690 DUMP:
      001499 CD 03 24         [ 4] 3691         CALL     BASE
      00149C CD 01 C0         [ 4] 3692         CALL     AT
      00149F CD 02 30         [ 4] 3693         CALL     TOR
      0014A2 CD 09 DC         [ 4] 3694         CALL     HEX     ;save radix, set hex
      0014A5 CD 01 38         [ 4] 3695         CALL     DOLIT
      0014A8 00 10                 3696         .word      16
      0014AA CD 06 28         [ 4] 3697         CALL     SLASH   ;change count to lines
      0014AD CD 02 30         [ 4] 3698         CALL     TOR     ;start count down loop
      0014B0 CD 0B 9C         [ 4] 3699 DUMP1:  CALL     CR
      0014B3 CD 01 38         [ 4] 3700         CALL     DOLIT
      0014B6 00 10                 3701         .word      16
      0014B8 CD 04 0E         [ 4] 3702         CALL     DDUP
      0014BB CD 14 68         [ 4] 3703         CALL     DUMPP   ;display numeric
      0014BE CD 03 E3         [ 4] 3704         CALL     ROT
      0014C1 CD 03 E3         [ 4] 3705         CALL     ROT
      0014C4 CD 0B 54         [ 4] 3706         CALL     SPACE
      0014C7 CD 0B 54         [ 4] 3707         CALL     SPACE
      0014CA CD 14 46         [ 4] 3708         CALL     UTYPE   ;display printable characters
      0014CD CD 01 4C         [ 4] 3709         CALL     DONXT
      0014D0 14 B0                 3710         .word      DUMP1   ;loop till done
      0014D2 CD 02 5D         [ 4] 3711 DUMP3:  CALL     DROP
      0014D5 CD 02 11         [ 4] 3712         CALL     RFROM
      0014D8 CD 03 24         [ 4] 3713         CALL     BASE
      0014DB CC 01 A9         [ 2] 3714         JP     STORE   ;restore radix
                                   3715 
                                   3716 ;       .S      ( ... -- ... )
                                   3717 ;        Display  contents of stack.
      0014DE 14 94                 3718         .word      LINK
                           0014E0  3719 LINK = . 
      0014E0 02                    3720         .byte      2
      0014E1 2E 53                 3721         .ascii     ".S"
      0014E3                       3722 DOTS:
      0014E3 CD 0B 9C         [ 4] 3723         CALL     CR
      0014E6 CD 07 79         [ 4] 3724         CALL     DEPTH   ;stack depth
      0014E9 CD 02 30         [ 4] 3725         CALL     TOR     ;start count down loop
      0014EC 20 0C            [ 2] 3726         JRA     DOTS2   ;skip first pass
      0014EE CD 02 24         [ 4] 3727 DOTS1:  CALL     RAT
      0014F1 CD 07 02         [ 4] 3728         CALL ONEP
      0014F4 CD 07 90         [ 4] 3729 	CALL     PICK
      0014F7 CD 0C 37         [ 4] 3730         CALL     DOT     ;index stack, display contents
      0014FA CD 01 4C         [ 4] 3731 DOTS2:  CALL     DONXT
      0014FD 14 EE                 3732         .word      DOTS1   ;loop till done
      0014FF CD 0B DB         [ 4] 3733         CALL     DOTQP
      001502 05                    3734         .byte      5
      001503 20 3C 73 70 20        3735         .ascii     " <sp "
      001508 81               [ 4] 3736         RET
                                   3737 
                                   3738 ;       >NAME   ( ca -- na | F )
                                   3739 ;       Convert code address
                                   3740 ;       to a name address.
      001509 14 E0                 3741         .word      LINK
                           00150B  3742 LINK = . 
      00150B 05                    3743         .byte      5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      00150C 3E 4E 41 4D 45        3744         .ascii     ">NAME"
      001511                       3745 TNAME:
      001511 CD 03 95         [ 4] 3746         CALL     CNTXT   ;vocabulary link
      001514 CD 01 C0         [ 4] 3747 TNAM2:  CALL     AT
      001517 CD 02 67         [ 4] 3748         CALL     DUPP    ;?last word in a vocabulary
      00151A CD 01 6B         [ 4] 3749         CALL     QBRAN
      00151D 15 38                 3750         .word      TNAM4
      00151F CD 04 0E         [ 4] 3751         CALL     DDUP
      001522 CD 0D BC         [ 4] 3752         CALL     NAMET
      001525 CD 02 DC         [ 4] 3753         CALL     XORR    ;compare
      001528 CD 01 6B         [ 4] 3754         CALL     QBRAN
      00152B 15 32                 3755         .word      TNAM3
      00152D CD 06 E6         [ 4] 3756         CALL     CELLM   ;continue with next word
      001530 20 E2            [ 2] 3757         JRA     TNAM2
      001532 CD 02 77         [ 4] 3758 TNAM3:  CALL     SWAPP
      001535 CC 02 5D         [ 2] 3759         JP     DROP
      001538 CD 04 03         [ 4] 3760 TNAM4:  CALL     DDROP
      00153B CC 07 36         [ 2] 3761         JP     ZERO
                                   3762 
                                   3763 ;       .ID     ( na -- )
                                   3764 ;        Display  name at address.
      00153E 15 0B                 3765         .word      LINK
                           001540  3766 LINK = . 
      001540 03                    3767         .byte      3
      001541 2E 49 44              3768         .ascii     ".ID"
      001544                       3769 DOTID:
      001544 CD 03 D2         [ 4] 3770         CALL     QDUP    ;if zero no name
      001547 CD 01 6B         [ 4] 3771         CALL     QBRAN
      00154A 15 5A                 3772         .word      DOTI1
      00154C CD 08 0C         [ 4] 3773         CALL     COUNT
      00154F CD 01 38         [ 4] 3774         CALL     DOLIT
      001552 00 1F                 3775         .word      0x1F
      001554 CD 02 B3         [ 4] 3776         CALL     ANDD    ;mask lexicon bits
      001557 CC 14 46         [ 2] 3777         JP     UTYPE
      00155A CD 0B DB         [ 4] 3778 DOTI1:  CALL     DOTQP
      00155D 09                    3779         .byte      9
      00155E 20 6E 6F 4E 61 6D 65  3780         .ascii     " noName"
      001565 81               [ 4] 3781         RET
                                   3782 
                           000000  3783 WANT_SEE=0 
                           000000  3784 .if WANT_SEE 
                                   3785 ;       SEE     ( -- ; <string> )
                                   3786 ;       A simple decompiler.
                                   3787 ;       Updated for byte machines.
                                   3788         .word      LINK
                                   3789 LINK = . 
                                   3790         .byte      3
                                   3791         .ascii     "SEE"
                                   3792 SEE:
                                   3793         CALL     TICK    ;starting address
                                   3794         CALL     CR
                                   3795         CALL     ONEM
                                   3796 SEE1:   CALL     ONEP
                                   3797         CALL     DUPP
                                   3798         CALL     AT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



                                   3799         CALL     DUPP    ;?does it contain a zero
                                   3800         CALL     QBRAN
                                   3801         .word    SEE2
                                   3802         CALL     TNAME   ;?is it a name
                                   3803 SEE2:   CALL     QDUP    ;name address or zero
                                   3804         CALL     QBRAN
                                   3805         .word    SEE3
                                   3806         CALL     SPACE
                                   3807         CALL     DOTID   ;display name
                                   3808         CALL     ONEP
                                   3809         JRA      SEE4
                                   3810 SEE3:   CALL     DUPP
                                   3811         CALL     CAT
                                   3812         CALL     UDOT    ;display number
                                   3813 SEE4:   CALL     NUFQ    ;user control
                                   3814         CALL     QBRAN
                                   3815         .word    SEE1
                                   3816         JP     DROP
                                   3817 .endif ; WANT_SEE 
                                   3818 
                                   3819 ;       WORDS   ( -- )
                                   3820 ;       Display names in vocabulary.
      001566 15 40                 3821         .word      LINK
                           001568  3822 LINK = . 
      001568 05                    3823         .byte      5
      001569 57 4F 52 44 53        3824         .ascii     "WORDS"
      00156E                       3825 WORDS:
      00156E CD 0B 9C         [ 4] 3826         CALL     CR
      001571 CD 03 95         [ 4] 3827         CALL     CNTXT   ;only in context
      001574 CD 01 C0         [ 4] 3828 WORS1:  CALL     AT
      001577 CD 03 D2         [ 4] 3829         CALL     QDUP    ;?at end of list
      00157A CD 01 6B         [ 4] 3830         CALL     QBRAN
      00157D 15 93                 3831         .word      WORS2
      00157F CD 02 67         [ 4] 3832         CALL     DUPP
      001582 CD 0B 54         [ 4] 3833         CALL     SPACE
      001585 CD 15 44         [ 4] 3834         CALL     DOTID   ;display a name
      001588 CD 06 E6         [ 4] 3835         CALL     CELLM
      00158B CD 01 82         [ 4] 3836         CALL     BRAN
      00158E 15 74                 3837         .word      WORS1
      001590 CD 02 5D         [ 4] 3838         CALL     DROP
      001593 81               [ 4] 3839 WORS2:  RET
                                   3840 
                                   3841         
                                   3842 ;; Hardware reset
                                   3843 
                                   3844 ;       hi      ( -- )
                                   3845 ;       Display sign-on message.
      001594 15 68                 3846         .word      LINK
                           001596  3847 LINK = . 
      001596 02                    3848         .byte      2
      001597 68 69                 3849         .ascii     "hi"
      001599                       3850 HI:
      001599 CD 0B 9C         [ 4] 3851         CALL     CR
      00159C CD 0B DB         [ 4] 3852         CALL     DOTQP   ;initialize I/O
      00159F 0F                    3853         .byte      15
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      0015A0 73 74 6D 38 65 46 6F  3854         .ascii     "stm8eForth v"
             72 74 68 20 76
      0015AC 32                    3855 	.byte      VER+'0'
      0015AD 2E                    3856         .byte      '.' 
      0015AE 31                    3857 	.byte      EXT+'0' ;version
      0015AF CC 0B 9C         [ 2] 3858         JP     CR
                                   3859 
                           000000  3860 WANT_DEBUG=0
                           000000  3861 .if WANT_DEBUG 
                                   3862 ;       DEBUG      ( -- )
                                   3863 ;       Display sign-on message.
                                   3864 ;        .word      LINK
                                   3865 LINK = . 
                                   3866         .byte      5
                                   3867         .ascii     "DEBUG"
                                   3868 DEBUG:
                                   3869 	CALL DOLIT
                                   3870 	.word 0x65
                                   3871 	CALL EMIT
                                   3872 	CALL DOLIT
                                   3873 	.word 0
                                   3874  	CALL ZLESS 
                                   3875 	CALL DOLIT
                                   3876 	.word 0xFFFE
                                   3877 	CALL ZLESS 
                                   3878 	CALL UPLUS 
                                   3879  	CALL DROP 
                                   3880 	CALL DOLIT
                                   3881 	.word 3
                                   3882 	CALL UPLUS 
                                   3883 	CALL UPLUS 
                                   3884  	CALL DROP
                                   3885 	CALL DOLIT
                                   3886 	.word 0x43
                                   3887 	CALL UPLUS 
                                   3888  	CALL DROP
                                   3889 	CALL EMIT
                                   3890 	CALL DOLIT
                                   3891 	.word 0x4F
                                   3892 	CALL DOLIT
                                   3893 	.word 0x6F
                                   3894  	CALL XORR
                                   3895 	CALL DOLIT
                                   3896 	.word 0xF0
                                   3897  	CALL ANDD
                                   3898 	CALL DOLIT
                                   3899 	.word 0x4F
                                   3900  	CALL ORR
                                   3901 	CALL EMIT
                                   3902 	CALL DOLIT
                                   3903 	.word 8
                                   3904 	CALL DOLIT
                                   3905 	.word 6
                                   3906  	CALL SWAPP
                                   3907 	CALL OVER
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                   3908 	CALL XORR
                                   3909 	CALL DOLIT
                                   3910 	.word 3
                                   3911 	CALL ANDD 
                                   3912 	CALL ANDD
                                   3913 	CALL DOLIT
                                   3914 	.word 0x70
                                   3915 	CALL UPLUS 
                                   3916 	CALL DROP
                                   3917 	CALL EMIT
                                   3918 	CALL DOLIT
                                   3919 	.word 0
                                   3920 	CALL QBRAN
                                   3921 	.word DEBUG1
                                   3922 	CALL DOLIT
                                   3923 	.word 0x3F
                                   3924 DEBUG1:
                                   3925 	CALL DOLIT
                                   3926 	.word 0xFFFF
                                   3927 	CALL QBRAN
                                   3928 	.word DEBUG2
                                   3929 	CALL DOLIT
                                   3930 	.word 0x74
                                   3931 	CALL BRAN
                                   3932 	.word DEBUG3
                                   3933 DEBUG2:
                                   3934 	CALL DOLIT
                                   3935 	.word 0x21
                                   3936 DEBUG3:
                                   3937 	CALL EMIT
                                   3938 	CALL DOLIT
                                   3939 	.word 0x68
                                   3940 	CALL DOLIT
                                   3941 	.word 0x80
                                   3942 	CALL STORE
                                   3943 	CALL DOLIT
                                   3944 	.word 0x80
                                   3945 	CALL AT
                                   3946 	CALL EMIT
                                   3947 	CALL DOLIT
                                   3948 	.word 0x4D
                                   3949 	CALL TOR
                                   3950 	CALL RAT
                                   3951 	CALL RFROM
                                   3952 	CALL ANDD
                                   3953 	CALL EMIT
                                   3954 	CALL DOLIT
                                   3955 	.word 0x61
                                   3956 	CALL DOLIT
                                   3957 	.word 0xA
                                   3958 	CALL TOR
                                   3959 DEBUG4:
                                   3960 	CALL DOLIT
                                   3961 	.word 1
                                   3962 	CALL UPLUS 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                                   3963 	CALL DROP
                                   3964 	CALL DONXT
                                   3965 	.word DEBUG4
                                   3966 	CALL EMIT
                                   3967 	CALL DOLIT
                                   3968 	.word 0x656D
                                   3969 	CALL DOLIT
                                   3970 	.word 0x100
                                   3971 	CALL UMSTA
                                   3972 	CALL SWAPP
                                   3973 	CALL DOLIT
                                   3974 	.word 0x100
                                   3975 	CALL UMSTA
                                   3976 	CALL SWAPP 
                                   3977 	CALL DROP
                                   3978 	CALL EMIT
                                   3979 	CALL EMIT
                                   3980 	CALL DOLIT
                                   3981 	.word 0x2043
                                   3982 	CALL DOLIT
                                   3983 	.word 0
                                   3984 	CALL DOLIT
                                   3985 	.word 0x100
                                   3986 	CALL UMMOD
                                   3987 	CALL EMIT
                                   3988 	CALL EMIT
                                   3989 	;JP ORIG
                                   3990 	RET
                                   3991 .endif ; WANT_DEBUG 
                                   3992 
                                   3993 
                                   3994 ;       'BOOT   ( -- a )
                                   3995 ;       The application startup vector.
      0015B2 15 96                 3996         .word      LINK
                           0015B4  3997 LINK = . 
      0015B4 05                    3998         .byte      5
      0015B5 27 42 4F 4F 54        3999         .ascii     "'BOOT"
      0015BA                       4000 TBOOT:
      0015BA CD 03 14         [ 4] 4001         CALL     DOVAR
      0015BD 40 02                 4002         .word    APP_RUN      ;application to boot
                                   4003 
                                   4004 ;       COLD    ( -- )
                                   4005 ;       The hilevel cold start s=ence.
      0015BF 15 B4                 4006         .word      LINK
                           0015C1  4007 LINK = . 
      0015C1 04                    4008         .byte      4
      0015C2 43 4F 4C 44           4009         .ascii     "COLD"
      0015C6                       4010 COLD:
                           000000  4011 .if WANT_DEBUG
                                   4012         CALL DEBUG
                                   4013 .endif 
      0015C6 CD 01 38         [ 4] 4014 COLD1:  CALL     DOLIT
      0015C9 00 27                 4015         .word      UZERO
      0015CB CD 01 38         [ 4] 4016 	CALL     DOLIT
      0015CE 00 06                 4017         .word      UPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      0015D0 CD 01 38         [ 4] 4018         CALL     DOLIT
      0015D3 00 16                 4019 	.word      UEND-UZERO
      0015D5 CD 08 70         [ 4] 4020         CALL     CMOVE   ;initialize user area
                                   4021 
                           000001  4022 .if PICATOUT_MOD
                                   4023 ; if APP_RUN==0 initialize with ca de 'hi'  
      0015D8 90 CE 40 02      [ 2] 4024         ldw y,APP_RUN 
      0015DC 26 15            [ 1] 4025         jrne 0$
      0015DE 1D 00 06         [ 2] 4026         subw x,#3*CELLL 
      0015E1 90 AE 40 02      [ 2] 4027         ldw y,#APP_RUN 
      0015E5 EF 02            [ 2] 4028         ldw (2,x),y
      0015E7 90 5F            [ 1] 4029         clrw y 
      0015E9 FF               [ 2] 4030         ldw (x),y
      0015EA 90 AE 15 99      [ 2] 4031         ldw y,#HI 
      0015EE EF 04            [ 2] 4032         ldw (4,x),y 
      0015F0 CD 17 C7         [ 4] 4033         call ee_store 
      0015F3                       4034 0$:        
                                   4035 ; update LAST with APP_LAST 
                                   4036 ; if APP_LAST > LAST else do the opposite
      0015F3 90 CE 40 00      [ 2] 4037         ldw y,APP_LAST 
      0015F7 90 B3 1A         [ 2] 4038         cpw y,ULAST 
      0015FA 22 0E            [ 1] 4039         jrugt 1$ 
                                   4040 ; save LAST at APP_LAST  
      0015FC CD 03 C2         [ 4] 4041         call LAST 
      0015FF CD 01 C0         [ 4] 4042         call AT  
      001602 CD 16 8A         [ 4] 4043         call eeprom 
      001605 CD 17 C7         [ 4] 4044         call ee_store 
      001608 20 03            [ 2] 4045         jra 2$
      00160A                       4046 1$: ; update LAST with APP_LAST 
      00160A 90 BF 1A         [ 2] 4047         ldw ULAST,y
      00160D                       4048 2$:  
                                   4049 ; update APP_HERE if < app_space 
      00160D 90 CE 40 04      [ 2] 4050         ldw y,APP_HERE 
      001611 90 A3 1B 80      [ 2] 4051         cpw y,#app_space 
      001615 24 19            [ 1] 4052         jruge 3$ 
      001617 1D 00 06         [ 2] 4053         subw x,#6 
      00161A 90 AE 1B 80      [ 2] 4054         ldw y,#app_space 
      00161E EF 04            [ 2] 4055         ldw (4,x),y 
      001620 90 AE 40 04      [ 2] 4056         ldw y,#APP_HERE 
      001624 EF 02            [ 2] 4057         ldw (2,x),y
      001626 90 5F            [ 1] 4058         clrw y 
      001628 FF               [ 2] 4059         ldw (x),y
      001629 CD 17 C7         [ 4] 4060         call ee_store
      00162C 90 AE 1B 80      [ 2] 4061         ldw y,#app_space
      001630                       4062 3$:
      001630 90 BF 18         [ 2] 4063         ldw UFCP,y         
                                   4064 ; update UCP with VAR_APP 
                                   4065 ; if VAR_APP>UCP else do the opposite 
      001633 90 CE 40 06      [ 2] 4066         ldw y,VAR_HERE 
      001637 90 B3 16         [ 2] 4067         cpw y,UCP 
      00163A 22 17            [ 1] 4068         jrugt 4$
      00163C CD 03 A3         [ 4] 4069         call CPP 
      00163F CD 01 C0         [ 4] 4070         call AT 
      001642 1D 00 04         [ 2] 4071         subw x,#2*CELLL 
      001645 90 AE 40 06      [ 2] 4072         ldw y,#VAR_HERE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      001649 EF 02            [ 2] 4073         ldw (2,x),y 
      00164B 90 5F            [ 1] 4074         clrw y 
      00164D FF               [ 2] 4075         ldw (x),y 
      00164E CD 17 C7         [ 4] 4076         call ee_store
      001651 20 03            [ 2] 4077         jra 6$
      001653                       4078 4$: ; update UCP with VAR_HERE 
      001653 90 BF 16         [ 2] 4079         ldw UCP,y 
      001656                       4080 6$:      
                                   4081 .endif ; PICATOUT_MOD
      001656 CD 10 9F         [ 4] 4082         CALL     PRESE   ;initialize data stack and TIB
      001659 CD 15 BA         [ 4] 4083         CALL     TBOOT
      00165C CD 08 59         [ 4] 4084         CALL     ATEXE   ;application boot
      00165F CD 13 4F         [ 4] 4085         CALL     OVERT
      001662 CC 10 BC         [ 2] 4086         JP     QUIT    ;start interpretation
                                   4087 
                           000001  4088 .if PICATOUT_MOD
                                   4089         ; keep this include at end 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                                   4090         .include "flash.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21 ;  routines to write to FLASH, EEPROM 
                                     22 ;  and OPTION 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26 ;--------------------------------
                                     27 ; initialize FPTR 
                                     28 ; FP!  ( ud -- )
                                     29 ;---------------------------------
      001665 15 C1                   30     .word LINK 
                           001667    31     LINK=.
      001667 03                      32     .byte 3 
      001668 46 50 21                33     .ascii "FP!"
      00166B                         34 fptr_store:
      00166B 90 93            [ 1]   35     ldw y,x
      00166D 90 FE            [ 2]   36     ldw y,(y)
      00166F 90 9F            [ 1]   37     ld a,yl 
      001671 B7 2C            [ 1]   38     ld FPTR,a 
      001673 1C 00 02         [ 2]   39     addw x,#CELLL 
      001676 90 93            [ 1]   40     ldw y,x 
      001678 90 FE            [ 2]   41     ldw y,(y)
      00167A 90 BF 2D         [ 2]   42     ldw PTR16,y
      00167D 1C 00 02         [ 2]   43     addw x,#CELLL 
      001680 81               [ 4]   44     ret 
                                     45 
                                     46 ;-----------------------------------
                                     47 ; return EEPROM base address 
                                     48 ; as a double 
                                     49 ;  EEPROM  ( -- ud )
                                     50 ;-----------------------------------
      001681 16 67                   51     .word LINK 
                           001683    52 LINK=.
      001683 06                      53     .byte 6 
      001684 45 45 50 52 4F 4D       54     .ascii "EEPROM"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      00168A                         55 eeprom: 
      00168A 90 AE 40 00      [ 2]   56     ldw y,#EEPROM_BASE
      00168E 1D 00 04         [ 2]   57     subw x,#2*CELLL 
      001691 EF 02            [ 2]   58     ldw (2,x),y 
      001693 90 5F            [ 1]   59     clrw y 
      001695 FF               [ 2]   60     ldw (x),y 
      001696 81               [ 4]   61     ret
                                     62 
                                     63 ;----------------------------------
                                     64 ; fetch integer at address over 65535
                                     65 ;  F@   ( ud -- n )
                                     66 ;----------------------------------
      001697 16 83                   67     .word LINK 
                           001699    68 LINK=.
      001699 02                      69     .byte 2
      00169A 46 40                   70     .ascii "F@"
      00169C                         71 farat:
      00169C CD 16 6B         [ 4]   72     call fptr_store
      00169F 92 BC 00 2C      [ 5]   73     ldf a,[FPTR]
      0016A3 1D 00 02         [ 2]   74     subw x,#CELLL 
      0016A6 F7               [ 1]   75     ld (x),a 
      0016A7 90 AE 00 01      [ 2]   76     ldw y,#1
      0016AB 91 AF 00 2C      [ 1]   77     ldf a,([FPTR],y)
      0016AF E7 01            [ 1]   78     ld (1,x),a
      0016B1 81               [ 4]   79     ret 
                                     80 
                                     81 ;-------------------------------------
                                     82 ; fetch C at address over 65535 
                                     83 ; FC@ ( ud -- c)
                                     84 ;-------------------------------------
      0016B2 16 99                   85     .word LINK
                           0016B4    86     LINK=.
      0016B4 03                      87     .byte 3 
      0016B5 46 43 40                88     .ascii "FC@" 
      0016B8                         89 farcat:
      0016B8 CD 16 6B         [ 4]   90     call fptr_store 
      0016BB 92 BC 00 2C      [ 5]   91     ldf a,[FPTR]
      0016BF 1D 00 02         [ 2]   92     subw x,#CELLL 
      0016C2 E7 01            [ 1]   93     ld (1,x),a 
      0016C4 7F               [ 1]   94     clr (x)
      0016C5 81               [ 4]   95     ret 
                                     96     
                                     97 ;----------------------------------
                                     98 ; unlock EEPROM/OPT for writing/erasing
                                     99 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    100 ;  UNLKEE   ( -- )
                                    101 ;----------------------------------
      0016C6 16 B4                  102     .word LINK 
                           0016C8   103 LINK=.
      0016C8 06                     104     .byte 6 
      0016C9 55 4E 4C 4B 45 45      105     .ascii "UNLKEE"
      0016CF                        106 unlock_eeprom:
      0016CF 35 00 50 5B      [ 1]  107 	mov FLASH_CR2,#0 
      0016D3 35 FF 50 5C      [ 1]  108 	mov FLASH_NCR2,#0xFF 
      0016D7 35 AE 50 64      [ 1]  109 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      0016DB 35 56 50 64      [ 1]  110     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0016DF 72 07 50 5F FB   [ 2]  111 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0016E4 81               [ 4]  112 	ret
                                    113 
                                    114 ;----------------------------------
                                    115 ; unlock FLASH for writing/erasing
                                    116 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    117 ; UNLKFL  ( -- )
                                    118 ;----------------------------------
      0016E5 16 C8                  119     .word LINK 
                           0016E7   120 LINK=. 
      0016E7 06                     121     .byte 6 
      0016E8 55 4E 4C 4B 46 4C      122     .ascii "UNLKFL"    
      0016EE                        123 unlock_flash:
      0016EE 35 00 50 5B      [ 1]  124 	mov FLASH_CR2,#0 
      0016F2 35 FF 50 5C      [ 1]  125 	mov FLASH_NCR2,#0xFF 
      0016F6 35 56 50 62      [ 1]  126 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0016FA 35 AE 50 62      [ 1]  127 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0016FE 72 03 50 5F FB   [ 2]  128 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001703 81               [ 4]  129 	ret
                                    130 
                                    131 ;-----------------------------
                                    132 ; unlock FLASH or EEPROM 
                                    133 ; according to FPTR address 
                                    134 ;  UNLOCK ( -- )
                                    135 ;-----------------------------
      001704 16 E7                  136 	.word LINK 
                           001706   137 	LINK=.
      001706 06                     138 	.byte 6
      001707 55 4E 4C 4F 43 4B      139 	.ascii "UNLOCK"
      00170D                        140 unlock:
                                    141 ; put addr[15:0] in Y, for bounds check.
      00170D 90 BE 2D         [ 2]  142 	ldw y,PTR16   ; Y=addr15:0
                                    143 ; check addr[23:16], if <> 0 then it is extened flash memory
      001710 3D 2C            [ 1]  144 	tnz FPTR 
      001712 26 16            [ 1]  145 	jrne 4$
      001714 90 A3 80 00      [ 2]  146     cpw y,#FLASH_BASE
      001718 24 10            [ 1]  147     jruge 4$
      00171A 90 A3 40 00      [ 2]  148 	cpw y,#EEPROM_BASE  
      00171E 25 0D            [ 1]  149     jrult 9$
      001720 90 A3 48 7F      [ 2]  150 	cpw y,#OPTION_END 
      001724 22 07            [ 1]  151 	jrugt 9$
      001726 CD 16 CF         [ 4]  152 	call unlock_eeprom
      001729 81               [ 4]  153 	ret 
      00172A CD 16 EE         [ 4]  154 4$: call unlock_flash
      00172D 81               [ 4]  155 9$: ret 
                                    156 
                                    157 ;-------------------------
                                    158 ; lock write access to 
                                    159 ; FLASH and EEPROM 
                                    160 ; LOCK ( -- )
                                    161 ;-------------------------
      00172E 17 06                  162 	.word LINK 
                           001730   163 	LINK=.
      001730 04                     164 	.byte 4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      001731 4C 4F 43 4B            165 	.ascii "LOCK" 
      001735                        166 lock: 
      001735 72 13 50 5F      [ 1]  167 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001739 72 17 50 5F      [ 1]  168 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      00173D 81               [ 4]  169 	ret 
                                    170 
                                    171 ;-------------------------
                                    172 ; increment FPTR 
                                    173 ; INC-FPTR ( -- )
                                    174 ;-------------------------
      00173E 17 30                  175 	.word LINK 
                           001740   176 	LINK=. 
      001740 08                     177 	.byte 8 
      001741 49 4E 43 2D 46 50 54   178 	.ascii "INC-FPTR" 
             52
      001749                        179 inc_fptr:
      001749 3C 2E            [ 1]  180 	inc PTR8 
      00174B 26 08            [ 1]  181 	jrne 1$
      00174D 90 BE 2C         [ 2]  182 	ldw y,FPTR 
      001750 90 5C            [ 2]  183 	incw y 
      001752 90 BF 2C         [ 2]  184 	ldw FPTR,y 
      001755 81               [ 4]  185 1$: ret 
                                    186 
                                    187 
                                    188 ;----------------------------
                                    189 ; write a byte at address pointed 
                                    190 ; by FPTR and increment FPTR.
                                    191 ; Expect pointer already initialized 
                                    192 ; and memory unlocked 
                                    193 ; WR-BYTE ( c -- )
                                    194 ;----------------------------
                                    195 
      001756 17 40                  196 	.word LINK 
                           001758   197 	LINK=. 
      001758 07                     198 	.byte 7 
      001759 57 52 2D 42 59 54 45   199 	.ascii "WR-BYTE" 
                                    200 
      001760                        201 write_byte:
      001760 90 93            [ 1]  202 	ldw y,x 
      001762 90 FE            [ 2]  203 	ldw y,(y)
      001764 1C 00 02         [ 2]  204 	addw x,#CELLL 
      001767 90 9F            [ 1]  205 	ld a,yl
      001769 92 BD 00 2C      [ 4]  206 	ldf [FPTR],a
      00176D 72 05 50 5F FB   [ 2]  207 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001772 20 D5            [ 2]  208 	jra inc_fptr 
                                    209 
                                    210 
                                    211 
                                    212 ;---------------------------------------
                                    213 ; write a byte to FLASH or EEPROM/OPTION  
                                    214 ; EEC!  (c ud -- )
                                    215 ;---------------------------------------
      001774 17 58                  216     .word LINK 
                           001776   217 	LINK=.
      001776 04                     218     .byte 4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      001777 45 45 43 21            219     .ascii "EEC!"
                                    220 	; local variables 
                           000001   221 	BTW = 1   ; byte to write offset on stack
                           000002   222     OPT = 2 
                           000002   223 	VSIZE = 2
      00177B                        224 ee_cstore:
      00177B 52 02            [ 2]  225 	sub sp,#VSIZE
      00177D CD 16 6B         [ 4]  226     call fptr_store
      001780 E6 01            [ 1]  227 	ld a,(1,x)
      001782 43               [ 1]  228 	cpl a 
      001783 6B 01            [ 1]  229 	ld (BTW,sp),a ; byte to write 
      001785 0F 02            [ 1]  230 	clr (OPT,sp)  ; OPTION flag
      001787 CD 17 0D         [ 4]  231 	call unlock 
                                    232 	; check if option
      00178A 3D 2C            [ 1]  233 	tnz FPTR 
      00178C 26 19            [ 1]  234 	jrne 2$
      00178E 90 BE 2D         [ 2]  235 	ldw y,PTR16 
      001791 90 A3 48 00      [ 2]  236 	cpw y,#OPTION_BASE
      001795 2B 10            [ 1]  237 	jrmi 2$
      001797 90 A3 48 80      [ 2]  238 	cpw y,#OPTION_END+1
      00179B 2A 0A            [ 1]  239 	jrpl 2$
      00179D 03 02            [ 1]  240 	cpl (OPT,sp)
                                    241 	; OPTION WRITE require this unlock 
      00179F 72 1E 50 5B      [ 1]  242     bset FLASH_CR2,#FLASH_CR2_OPT
      0017A3 72 1F 50 5C      [ 1]  243     bres FLASH_NCR2,#FLASH_CR2_OPT 
      0017A7                        244 2$: 
      0017A7 CD 17 60         [ 4]  245 	call write_byte 	
      0017AA 0D 02            [ 1]  246 	tnz (OPT,sp)
      0017AC 27 0D            [ 1]  247 	jreq 3$ 
      0017AE 7B 01            [ 1]  248     ld a,(BTW,sp)
      0017B0 90 5F            [ 1]  249     clrw y
      0017B2 90 97            [ 1]  250 	ld yl,a 
      0017B4 1D 00 02         [ 2]  251 	subw x,#CELLL 
      0017B7 FF               [ 2]  252 	ldw (x),y 
      0017B8 CD 17 60         [ 4]  253 	call write_byte
      0017BB                        254 3$: 
      0017BB CD 17 35         [ 4]  255 	call lock 
      0017BE 5B 02            [ 2]  256 	addw sp,#VSIZE 
      0017C0 81               [ 4]  257     ret
                                    258 
                                    259 ;------------------------------
                                    260 ; write integer in FLASH|EEPROM
                                    261 ; EE! ( n ud -- )
                                    262 ;------------------------------
      0017C1 17 76                  263 	.word LINK 
                           0017C3   264 	LINK=.
      0017C3 03                     265 	.byte 3 
      0017C4 45 45 21               266 	.ascii "EE!"
      0017C7                        267 ee_store:
      0017C7 CD 16 6B         [ 4]  268 	call fptr_store 
      0017CA CD 17 0D         [ 4]  269 	call unlock 
      0017CD 90 93            [ 1]  270 	ldw y,x 
      0017CF 90 FE            [ 2]  271 	ldw y,(y)
      0017D1 90 89            [ 2]  272 	pushw y 
      0017D3 90 5E            [ 1]  273 	swapw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      0017D5 FF               [ 2]  274 	ldw (x),y 
      0017D6 CD 17 60         [ 4]  275 	call write_byte 
      0017D9 90 85            [ 2]  276 	popw y 
      0017DB 1D 00 02         [ 2]  277 	subw x,#CELLL
      0017DE FF               [ 2]  278 	ldw (x),y 
      0017DF CD 17 60         [ 4]  279 	call write_byte
      0017E2 CC 17 35         [ 2]  280 	jp lock 
                                    281 
                                    282 
                                    283 ;----------------------------
                                    284 ; Erase flash memory row 
                                    285 ; stm8s208 as 128 bytes rows
                                    286 ; ROW-ERASE ( ud -- )
                                    287 ;----------------------------
      0017E5 17 C3                  288 	.word LINK 
                           0017E7   289 	LINK=. 
      0017E7 09                     290 	.byte 9 
      0017E8 52 4F 57 2D 45 52 41   291 	.ascii "ROW-ERASE" 
             53 45
      0017F1                        292 row_erase:
      0017F1 CD 16 6B         [ 4]  293 	call fptr_store
                                    294 ;code must be execute from RAM 
                                    295 ;copy routine to PAD 
      0017F4 1D 00 02         [ 2]  296 	subw x,#CELLL 
      0017F7 90 AE 18 3E      [ 2]  297 	ldw y,#row_erase_proc
      0017FB FF               [ 2]  298 	ldw (x),y 
      0017FC CD 08 34         [ 4]  299 	call PAD 
      0017FF 90 AE 18 65      [ 2]  300 	ldw y,#row_erase_proc_end 
      001803 72 A2 18 3E      [ 2]  301 	subw y,#row_erase_proc
      001807 1D 00 02         [ 2]  302 	subw x,#CELLL 
      00180A FF               [ 2]  303 	ldw (x),y 
      00180B CD 08 70         [ 4]  304 	call CMOVE 
      00180E                        305 block_erase:
      00180E 90 BE 2D         [ 2]  306 	ldw y,FPTR+1
      001811 90 A3 1B 80      [ 2]  307 	cpw y,#app_space 
      001815 2A 13            [ 1]  308 	jrpl erase_flash 
                                    309 ; erase eeprom block
      001817 90 A3 40 00      [ 2]  310 	cpw y,#EEPROM_BASE 
      00181B 24 01            [ 1]  311 	jruge 1$
      00181D 81               [ 4]  312 	ret ; bad address 
      00181E 90 A3 47 FF      [ 2]  313 1$: cpw y,#EEPROM_END 
      001822 23 01            [ 2]  314 	jrule 2$ 
      001824 81               [ 4]  315 	ret ; bad address 
      001825                        316 2$:	
      001825 CD 16 CF         [ 4]  317 	call unlock_eeprom 
      001828 20 03            [ 2]  318 	jra proceed_erase
                                    319 ; erase flash block:
      00182A                        320 erase_flash:
      00182A CD 16 EE         [ 4]  321 	call unlock_flash 
      00182D                        322 proceed_erase:
      00182D CD 08 34         [ 4]  323 	call PAD 
      001830 90 93            [ 1]  324 	ldw y,x
      001832 90 FE            [ 2]  325 	ldw y,(y)
      001834 1C 00 02         [ 2]  326 	addw x,#CELLL  
      001837 90 FD            [ 4]  327 	call (y) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      001839 72 17 50 5F      [ 1]  328 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      00183D 81               [ 4]  329 	ret 
                                    330 
                                    331 ; this routine is to be copied to PAD 
      00183E                        332 row_erase_proc:
      00183E 35 20 50 5B      [ 1]  333 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001842 35 DF 50 5C      [ 1]  334 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001846 4F               [ 1]  335 	clr a 
      001847 90 5F            [ 1]  336 	clrw y 
      001849 91 A7 00 2C      [ 1]  337 	ldf ([FPTR],y),a
      00184D 90 5C            [ 2]  338     incw y
      00184F 91 A7 00 2C      [ 1]  339 	ldf ([FPTR],y),a
      001853 90 5C            [ 2]  340     incw y
      001855 91 A7 00 2C      [ 1]  341 	ldf ([FPTR],y),a
      001859 90 5C            [ 2]  342     incw y
      00185B 91 A7 00 2C      [ 1]  343 	ldf ([FPTR],y),a
      00185F 72 05 50 5F FB   [ 2]  344 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001864 81               [ 4]  345 	ret
      001865                        346 row_erase_proc_end:
                                    347 
                                    348 
                                    349 ;-----------------------------------
                                    350 ; block programming must be 
                                    351 ; executed from RAM 
                                    352 ; initial contidions: 
                                    353 ; 		memory unlocked
                                    354 ;       FPTR initialized 
                                    355 ; input: 
                                    356 ;    x   buffer address 
                                    357 ;-----------------------------------
                           000001   358 	BCNT=1 
      001865                        359 copy_buffer:
      001865 4B 80            [ 1]  360 	push #BLOCK_SIZE  
                                    361 ;enable block programming 
      001867 72 10 50 5B      [ 1]  362 	bset FLASH_CR2,#FLASH_CR2_PRG 
      00186B 72 11 50 5C      [ 1]  363 	bres FLASH_NCR2,#FLASH_CR2_PRG
      00186F 90 5F            [ 1]  364 	clrw y
      001871 F6               [ 1]  365 1$:	ld a,(x)
      001872 91 A7 00 2C      [ 1]  366 	ldf ([FPTR],y),a
      001876 5C               [ 2]  367 	incw x 
      001877 90 5C            [ 2]  368 	incw y 
      001879 0A 01            [ 1]  369 	dec (BCNT,sp)
      00187B 26 F4            [ 1]  370 	jrne 1$
                                    371 ; wait EOP bit 
      00187D 72 05 50 5F FB   [ 2]  372 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001882 84               [ 1]  373 	pop a ; remove BCNT from stack 
      001883 81               [ 4]  374 	ret 
      001884                        375 copy_buffer_end:
                                    376 
                                    377 ;-------------------------
                                    378 ; move program_row to RAM 
                                    379 ; in TIB 
                                    380 ;------------------------
      001884                        381 copy_prog_to_ram:
      001884 1D 00 06         [ 2]  382 	subw x,#6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      001887 90 AE 18 65      [ 2]  383 	ldw y,#copy_buffer 
      00188B EF 04            [ 2]  384 	ldw (4,x),y 
      00188D 90 AE 17 00      [ 2]  385 	ldw y,#TIBBASE
      001891 EF 02            [ 2]  386 	ldw (2,x),y 
      001893 90 AE 18 84      [ 2]  387 	ldw y,#copy_buffer_end 
      001897 72 A2 18 65      [ 2]  388 	subw y,#copy_buffer  
      00189B FF               [ 2]  389 	ldw (x),y 
      00189C CD 08 70         [ 4]  390 	call CMOVE 
      00189F 81               [ 4]  391 	ret 
                                    392 
                                    393 
                                    394 ;-----------------------------
                                    395 ; write a row in FLASH/EEPROM 
                                    396 ; WR-ROW ( a ud -- )
                                    397 ; a -> address 128 byte buffer to write 
                                    398 ; ud ->  row address in FLASH|EEPROM 
                                    399 ;-----------------------------
      0018A0 17 E7                  400 	.word LINK 
                           0018A2   401 	LINK=.
      0018A2 06                     402 	.byte 6 
      0018A3 57 52 2D 52 4F 57      403 	.ascii "WR-ROW"
      0018A9                        404 write_row:
      0018A9 CD 16 6B         [ 4]  405 	call fptr_store
                                    406 ; align to FLASH block 
      0018AC A6 80            [ 1]  407 	ld a,#0x80 
      0018AE B4 2E            [ 1]  408 	and a,PTR8 
      0018B0 B7 2E            [ 1]  409 	ld PTR8,a  
      0018B2 CD 18 84         [ 4]  410 	call copy_prog_to_ram
      0018B5 CD 17 0D         [ 4]  411 	call unlock
      0018B8 90 93            [ 1]  412 	ldw y,x 
      0018BA 90 FE            [ 2]  413 	ldw y,(y)
      0018BC 1C 00 02         [ 2]  414 	addw x,#CELLL 
      0018BF 89               [ 2]  415 	pushw x 
      0018C0 93               [ 1]  416 	ldw x,y ; buffer address in x 
      0018C1 CD 17 00         [ 4]  417 	call TIBBASE
      0018C4 CD 17 35         [ 4]  418 	call lock
      0018C7 85               [ 2]  419 	popw x 
      0018C8 81               [ 4]  420 	ret 
                                    421 
                                    422 ;-------------------------------------
                                    423 ; change value of OPTION register 
                                    424 ; SET-OPT (c n -- ) 
                                    425 ; c new value.
                                    426 ; n OPT  number {1..7}
                                    427 ;--------------------------------------
      0018C9 18 A2                  428 		.word LINK 
                           0018CB   429 		LINK=.
      0018CB 07                     430 		.byte 7 
      0018CC 53 45 54 2D 4F 50 54   431 		.ascii "SET-OPT" 
      0018D3                        432 set_option: 
      0018D3 90 93            [ 1]  433 		ldw y,x 
      0018D5 90 FE            [ 2]  434 		ldw y,(y)
      0018D7 27 06            [ 1]  435 		jreq 1$
      0018D9 90 A3 00 07      [ 2]  436 		cpw y,#7 
      0018DD 23 04            [ 2]  437 		jrule 2$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                    438 ; invalid OPTION number 		
      0018DF 1C 00 04         [ 2]  439 1$:		addw x,#2*CELLL
      0018E2 81               [ 4]  440 		ret
      0018E3 90 58            [ 2]  441 2$:		sllw y 
      0018E5 72 A9 47 FF      [ 2]  442 		addw y,#OPTION_BASE-1
      0018E9 FF               [ 2]  443 		ldw (x),y 
      0018EA 1D 00 02         [ 2]  444 		subw x,#CELLL 
      0018ED 90 5F            [ 1]  445 		clrw y 
      0018EF FF               [ 2]  446 		ldw (x),y 
      0018F0 CD 17 7B         [ 4]  447 		call ee_cstore
      0018F3 81               [ 4]  448 		ret 
                                    449 
                                    450 
                                    451 
                                    452 ;--------------------------------------
                                    453 ; reset system to its original state 
                                    454 ; before any user modification
                                    455 ; PRISTINE ( -- )
                                    456 ;-------------------------------------
      0018F4 18 CB                  457 	.word LINK  
                           0018F6   458 	LINK=.
      0018F6 08                     459 	.byte 8 
      0018F7 50 52 49 53 54 49 4E   460 	.ascii "PRISTINE"
             45
      0018FF                        461 pristine:
                                    462 ;;; erase EEPROM
      0018FF CD 16 8A         [ 4]  463 	call eeprom 
      001902 CD 04 0E         [ 4]  464 1$:	call DDUP 
      001905 CD 17 F1         [ 4]  465 	call row_erase
      001908 90 93            [ 1]  466 	ldw y,x 
      00190A 90 EE 02         [ 2]  467 	ldw y,(2,y)
      00190D 72 A9 00 80      [ 2]  468 	addw y,#BLOCK_SIZE
      001911 EF 02            [ 2]  469 	ldw (2,x),y
      001913 90 A3 48 00      [ 2]  470 	cpw y,#OPTION_BASE 
      001917 25 E9            [ 1]  471 	jrult 1$
                                    472 ;;; reset OPTION to default values
      001919 90 AE 00 01      [ 2]  473 	ldw y,#1 ; OPT1 
      00191D FF               [ 2]  474 2$:	ldw (x),y   
      00191E 90 5F            [ 1]  475 	clrw y 
      001920 EF 02            [ 2]  476 	ldw (2,x),y  ; ( 0 1 -- ) 
      001922 CD 04 0E         [ 4]  477 	call DDUP    ; ( 0 1 0 1 -- )  
      001925 CD 18 D3         [ 4]  478 	call set_option
      001928 90 93            [ 1]  479 	ldw y,x 
      00192A 90 FE            [ 2]  480 	ldw y,(y)
      00192C 90 5C            [ 2]  481 	incw y  ; next OPTION 
      00192E 90 A3 00 08      [ 2]  482 	cpw y,#8 
      001932 25 E9            [ 1]  483 	jrult 2$
                                    484 ;;; erase first row of app_space 	
      001934 90 AE 1B 80      [ 2]  485 	ldw y,#app_space
      001938 EF 02            [ 2]  486 	ldw (2,x),y  
      00193A 90 5F            [ 1]  487 	clrw y 
      00193C FF               [ 2]  488 	ldw (x),y ; ( app_space 0 -- )
      00193D CD 17 F1         [ 4]  489 	call row_erase 
                                    490 ; reset interrupt vectors 
      001940 1D 00 02         [ 2]  491 	subw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      001943 90 5F            [ 1]  492 	clrw y  
      001945 FF               [ 2]  493 4$:	ldw (x),y  ; ( n -- ) int# 
      001946 CD 02 67         [ 4]  494 	call DUPP  
      001949 CD 19 66         [ 4]  495 	call reset_vector
      00194C 90 93            [ 1]  496 	ldw y,x 
      00194E 90 FE            [ 2]  497 	ldw y,(y)
      001950 90 5C            [ 2]  498 	incw y   ; next vector 
      001952 90 A3 00 19      [ 2]  499 	cpw y,#25 
      001956 25 ED            [ 1]  500 	jrult 4$
      001958 CC 00 00         [ 2]  501 	jp NonHandledInterrupt ; reset MCU
                                    502 
                                    503 ;------------------------------
                                    504 ; reset an interrupt vector 
                                    505 ; to its initial value 
                                    506 ; i.e. NonHandledInterrupt
                                    507 ; RST-IVEC ( n -- )
                                    508 ;-----------------------------
      00195B 18 F6                  509 	.word LINK 
                           00195D   510 	LINK=. 
      00195D 08                     511 	.byte 8 
      00195E 52 53 54 2D 49 56 45   512 	.ascii "RST-IVEC"
             43
      001966                        513 reset_vector:
      001966 90 93            [ 1]  514 	ldw y,x
      001968 1C 00 02         [ 2]  515 	addw x,#CELLL 
      00196B 90 FE            [ 2]  516 	ldw y,(y)
      00196D 90 A3 00 17      [ 2]  517 	cpw y,#23 
      001971 27 3A            [ 1]  518 	jreq 9$
      001973 90 A3 00 18      [ 2]  519 	cpw y,#24 ; last vector for stm8s208 
      001977 22 34            [ 1]  520 	jrugt 9$  
      001979 90 58            [ 2]  521 	sllw y 
      00197B 90 58            [ 2]  522 	sllw y 
      00197D 72 A9 80 08      [ 2]  523 	addw y,#0x8008 ; irq0 address 
      001981 90 BF 1E         [ 2]  524 	ldw YTEMP,y
      001984 1D 00 06         [ 2]  525 	subw x,#3*CELLL 
      001987 EF 02            [ 2]  526 	ldw (2,x),y 
      001989 90 5F            [ 1]  527 	clrw y
      00198B FF               [ 2]  528 	ldw (x),y 
      00198C A6 82            [ 1]  529 	ld a,#0x82 
      00198E 90 95            [ 1]  530 	ld yh,a
      001990 EF 04            [ 2]  531 	ldw (4,x),y
      001992 CD 17 C7         [ 4]  532 	call ee_store
      001995 1D 00 06         [ 2]  533 	subw x,#3*CELLL
      001998 90 5F            [ 1]  534 	clrw y 
      00199A FF               [ 2]  535 	ldw (x),y 
      00199B 90 AE 00 00      [ 2]  536 	ldw y,#NonHandledInterrupt
      00199F EF 04            [ 2]  537 	ldw (4,x),y 
      0019A1 90 BE 1E         [ 2]  538 	ldw y,YTEMP  
      0019A4 72 A9 00 02      [ 2]  539 	addw y,#2
      0019A8 EF 02            [ 2]  540 	ldw (2,x),y 
      0019AA CD 17 C7         [ 4]  541 	call ee_store
      0019AD 81               [ 4]  542 9$:	ret 
                                    543 
                                    544 
                                    545 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                    546 ;------------------------------
                                    547 ; set interrupt vector 
                                    548 ; SET-IVEC ( ud n -- )
                                    549 ;  ud Handler address
                                    550 ;  n  vector # 0 .. 29 
                                    551 ;-----------------------------
      0019AE 19 5D                  552 	.word LINK
                           0019B0   553 	LINK=.
      0019B0 08                     554 	.byte 8 
      0019B1 53 45 54 2D 49 56 45   555 	.ascii "SET-IVEC" 
             43
      0019B9                        556 set_vector:
      0019B9 90 93            [ 1]  557     ldw y,x 
      0019BB 1C 00 02         [ 2]  558 	addw x,#CELLL 
      0019BE 90 FE            [ 2]  559 	ldw y,(y) ; vector #
      0019C0 90 A3 00 18      [ 2]  560 	cpw y,#24 ; last vector for stm8s208  
      0019C4 23 04            [ 2]  561 	jrule 2$
      0019C6 1C 00 04         [ 2]  562 	addw x,#2*CELLL 
      0019C9 81               [ 4]  563 	ret
      0019CA 90 58            [ 2]  564 2$:	sllw y 
      0019CC 90 58            [ 2]  565 	sllw y 
      0019CE 72 A9 80 08      [ 2]  566 	addw y,#0X8008 ; IRQ0 vector address 
      0019D2 90 BF 1E         [ 2]  567 	ldw YTEMP,y ; vector address 
      0019D5 A6 82            [ 1]  568 	ld a,#0x82 
      0019D7 90 95            [ 1]  569 	ld yh,a 
      0019D9 E6 01            [ 1]  570 	ld a,(1,x) ; isr address bits 23..16 
      0019DB 90 97            [ 1]  571 	ld yl,a 
                                    572 ;  write 0x82 + most significant byte of int address	
      0019DD 1D 00 06         [ 2]  573 	subw x,#3*CELLL 
      0019E0 EF 04            [ 2]  574 	ldw (4,x),y 
      0019E2 90 BE 1E         [ 2]  575 	ldw y,YTEMP
      0019E5 EF 02            [ 2]  576 	ldw (2,x),y ; vector address 
      0019E7 90 5F            [ 1]  577 	clrw y 
      0019E9 FF               [ 2]  578 	ldw (x),y   ; as a double 
      0019EA CD 17 C7         [ 4]  579 	call ee_store 
      0019ED 90 93            [ 1]  580 	ldw y,x 
      0019EF 90 EE 02         [ 2]  581 	ldw y,(2,y) ; bits 15..0 int vector 
      0019F2 1D 00 06         [ 2]  582 	subw x,#3*CELLL 
      0019F5 EF 04            [ 2]  583 	ldw (4,x),y 
      0019F7 90 BE 1E         [ 2]  584 	ldw y,YTEMP 
      0019FA 72 A9 00 02      [ 2]  585 	addw y,#2 
      0019FE EF 02            [ 2]  586 	ldw (2,x),y 
      001A00 90 5F            [ 1]  587 	clrw y 
      001A02 FF               [ 2]  588 	ldw (x),y 
      001A03 CD 17 C7         [ 4]  589 	call ee_store 
      001A06 81               [ 4]  590 9$: ret 
                                    591 
                                    592 
                                    593 ;------------------------
                                    594 ; Compile word to flash
                                    595 ; EE, (w -- )
                                    596 ;-----------------------
      001A07 19 B0                  597 	.word LINK
                           001A09   598 	LINK=.
      001A09 03                     599 	.byte 3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      001A0A 45 45 2C               600 	.ascii "EE,"
      001A0D                        601 ee_comma:
      001A0D 1D 00 04         [ 2]  602 	subw x,#2*CELLL 
      001A10 90 BE 18         [ 2]  603 	ldw y,UFCP
      001A13 90 89            [ 2]  604 	pushw y 
      001A15 EF 02            [ 2]  605 	ldw (2,x),y 
      001A17 90 5F            [ 1]  606 	clrw y 
      001A19 FF               [ 2]  607 	ldw (x),y
      001A1A CD 17 C7         [ 4]  608 	call ee_store
      001A1D 90 85            [ 2]  609 	popw y 
      001A1F 72 A9 00 02      [ 2]  610 	addw y,#2
      001A23 90 BF 18         [ 2]  611 	ldw UFCP,y
      001A26 81               [ 4]  612 	ret 
                                    613 
                                    614 ;-------------------------
                                    615 ; Compile byte to flash 
                                    616 ; EEC, ( c -- )	
                                    617 ;-------------------------
      001A27 1A 09                  618 	.word LINK 
                           001A29   619 	LINK=.
      001A29 04                     620 	.byte 4 
      001A2A 45 45 43 2C            621 	.ascii "EEC,"
      001A2E                        622 ee_ccomma:
      001A2E 1D 00 04         [ 2]  623 	subw x,#2*CELLL 
      001A31 90 BE 18         [ 2]  624 	ldw y,UFCP
      001A34 90 89            [ 2]  625 	pushw y 
      001A36 EF 02            [ 2]  626 	ldw (2,x),y 
      001A38 90 5F            [ 1]  627 	clrw y 
      001A3A FF               [ 2]  628 	ldw (x),y
      001A3B CD 17 7B         [ 4]  629 	call ee_cstore
      001A3E 90 85            [ 2]  630 	popw y 
      001A40 90 5C            [ 2]  631 	incw y 
      001A42 90 BF 18         [ 2]  632 	ldw UFCP,y
      001A45 81               [ 4]  633 	ret 
                                    634 
                                    635 
                                    636 ;--------------------------
                                    637 ; copy FLASH block to ROWBUF
                                    638 ; ROW2BUF ( ud -- )
                                    639 ;--------------------------
      001A46 1A 29                  640 	.word LINK 
                           001A48   641 	LINK=.
      001A48 07                     642 	.byte 7 
      001A49 52 4F 57 32 42 55 46   643 	.ascii "ROW2BUF"
      001A50                        644 ROW2BUF: 
      001A50 CD 16 6B         [ 4]  645 	call fptr_store 
      001A53 A6 80            [ 1]  646 	ld a,#BLOCK_SIZE
      001A55 88               [ 1]  647 	push a 
      001A56 B4 2E            [ 1]  648 	and a,PTR8 ; block align 
      001A58 B7 2E            [ 1]  649 	ld PTR8,a
      001A5A 90 AE 16 80      [ 2]  650 	ldw y,#ROWBUFF 
      001A5E 92 BC 00 2C      [ 5]  651 1$: ldf a,[FPTR]
      001A62 90 F7            [ 1]  652 	ld (y),a
      001A64 CD 17 49         [ 4]  653 	call inc_fptr
      001A67 90 5C            [ 2]  654 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      001A69 0A 01            [ 1]  655 	dec (1,sp)
      001A6B 26 F1            [ 1]  656 	jrne 1$ 
      001A6D 84               [ 1]  657 	pop a 
      001A6E 81               [ 4]  658 	ret 
                                    659 
                                    660 
                                    661 ;---------------------------
                                    662 ; copy ROWBUFF to flash 
                                    663 ; BUF2ROW ( ud -- )
                                    664 ; ud is row address as double 
                                    665 ;---------------------------
      001A6F 1A 48                  666 	.word LINK 
                           001A71   667 	LINK=.
      001A71 07                     668 	.byte 7 
      001A72 42 55 46 32 52 4F 57   669 	.ascii "BUF2ROW" 
      001A79                        670 BUF2ROW:
      001A79 CD 03 62         [ 4]  671 	call TBUF ; ( ud rb -- )
      001A7C CD 03 E3         [ 4]  672 	call ROT 
      001A7F CD 03 E3         [ 4]  673 	call ROT  ; ( rb ud -- )
      001A82 CD 18 A9         [ 4]  674 	call write_row 
      001A85 81               [ 4]  675 	ret 
                                    676 
                                    677 ;---------------------------------
                                    678 ; how many byte free in that row 
                                    679 ; RFREE ( a -- n )
                                    680 ; a is least byte of target address
                                    681 ;----------------------------------
      001A86 1A 71                  682 	.word LINK 
                           001A88   683 	LINK=.
      001A88 05                     684 	.byte 5 
      001A89 52 46 52 45 45         685 	.ascii "RFREE"
      001A8E                        686 RFREE:
      001A8E E6 01            [ 1]  687 	ld a,(1,x)
      001A90 A4 7F            [ 1]  688 	and a,#BLOCK_SIZE-1 
      001A92 B7 1E            [ 1]  689 	ld YTEMP,a 
      001A94 A6 80            [ 1]  690 	ld a,#BLOCK_SIZE 
      001A96 B0 1E            [ 1]  691 	sub a,YTEMP 
      001A98 90 5F            [ 1]  692 	clrw y 
      001A9A 90 97            [ 1]  693 	ld yl,a
      001A9C FF               [ 2]  694 	ldw (x),y 
      001A9D 81               [ 4]  695 	ret 
                                    696 
                                    697 ;---------------------------------
                                    698 ; write u bytes to flash/eeprom 
                                    699 ; constraint to row limit 
                                    700 ; RAM2EE ( ud a u -- u2 )
                                    701 ; ud flash address 
                                    702 ; a ram address 
                                    703 ; u bytes count
                                    704 ; return u2 bytes written  
                                    705 ;-------------------------------
      001A9E 1A 88                  706 	.word LINK 
                           001AA0   707 	LINK=. 
      001AA0 06                     708 	.byte 6
      001AA1 52 41 4D 32 45 45      709 	.ascii "RAM2EE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                    710 	
      001AA7                        711 RAM2EE:
                                    712 ; copy ud on top 
      001AA7 90 93            [ 1]  713 	ldw y,x 
      001AA9 90 EE 06         [ 2]  714 	ldw y,(6,y) ; LSW of ud  
      001AAC 90 BF 1E         [ 2]  715 	ldw YTEMP,y 
      001AAF 90 93            [ 1]  716 	ldw y,x 
      001AB1 90 EE 04         [ 2]  717 	ldw y,(4,y)  ; MSW of ud 
      001AB4 1D 00 04         [ 2]  718 	subw x,#2*CELLL 
      001AB7 FF               [ 2]  719 	ldw (x),y 
      001AB8 90 BE 1E         [ 2]  720 	ldw y,YTEMP 
      001ABB EF 02            [ 2]  721 	ldw (2,x),y 
      001ABD CD 1A 50         [ 4]  722 	call ROW2BUF 
      001AC0 90 93            [ 1]  723 	ldw y,x 
      001AC2 90 EE 06         [ 2]  724 	ldw y,(6,y)
      001AC5 90 89            [ 2]  725 	pushw y ; udl 
      001AC7 90 9F            [ 1]  726 	ld a,yl
      001AC9 A4 7F            [ 1]  727 	and a,#BLOCK_SIZE-1 
      001ACB 90 5F            [ 1]  728 	clrw y 
      001ACD 90 97            [ 1]  729 	ld yl,a 
      001ACF 72 A9 16 80      [ 2]  730 	addw y,#ROWBUFF 
      001AD3 1D 00 02         [ 2]  731 	subw x,#CELLL 
      001AD6 FF               [ 2]  732 	ldw (x),y  
      001AD7 CD 02 77         [ 4]  733 	call SWAPP ;  ( ud a ra u -- )
      001ADA CD 02 11         [ 4]  734 	call RFROM  
      001ADD CD 1A 8E         [ 4]  735 	call RFREE 
      001AE0 CD 05 23         [ 4]  736 	call MIN
      001AE3 CD 02 67         [ 4]  737 	call DUPP 
      001AE6 CD 02 30         [ 4]  738 	call TOR  
      001AE9 CD 08 70         [ 4]  739 	call CMOVE
      001AEC CD 1A 79         [ 4]  740 	call BUF2ROW 
      001AEF CD 02 11         [ 4]  741 	call RFROM 
      001AF2 81               [ 4]  742 	ret 
                                    743 
                                    744 ;--------------------------
                                    745 ; expand 16 bit address 
                                    746 ; to 32 bit address 
                                    747 ; FADDR ( a -- ud )
                                    748 ;--------------------------
      001AF3 1A A0                  749 	.word LINK 
                           001AF5   750 	LINK=. 
      001AF5 05                     751 	.byte 5 
      001AF6 46 41 44 44 52         752 	.ascii "FADDR"
      001AFB                        753 FADDR:
      001AFB 1D 00 02         [ 2]  754 	subw x,#CELLL 
      001AFE 90 5F            [ 1]  755 	clrw y 
      001B00 FF               [ 2]  756 	ldw (x),y 
      001B01 81               [ 4]  757 	ret
                                    758 
                                    759 ;--------------------------
                                    760 ; move new colon definition to FLASH 
                                    761 ; using WR-ROW for efficiency 
                                    762 ; preserving bytes already used 
                                    763 ; in the current block. 
                                    764 ; ud+c must not exceed block boundary 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                                    765 ; at this point the compiler as completed
                                    766 ; in RAM and pointers CP and CNTXT updated.
                                    767 ; CNTXT point to nfa of new word and  
                                    768 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                    769 ; 
                                    770 ; FMOVE ( -- )
                                    771 ;--------------------------
      001B02 1A F5                  772 	.word LINK 
                           001B04   773 	LINK=.
      001B04 05                     774 	.byte 5 
      001B05 46 4D 4F 56 45         775 	.ascii "FMOVE" 
      001B0A                        776 FMOVE:
      001B0A CD 03 B2         [ 4]  777 	call FCP
      001B0D CD 01 C0         [ 4]  778 	call AT  
      001B10 CD 02 67         [ 4]  779 	call DUPP ; ( udl udl -- )
      001B13 CD 03 95         [ 4]  780 	call CNTXT 
      001B16 CD 01 C0         [ 4]  781 	call AT 
      001B19 CD 01 38         [ 4]  782 	call DOLIT 
      001B1C 00 02                  783 	.word 2 
      001B1E CD 04 81         [ 4]  784 	call SUBB ; ( udl udl a -- )
      001B21 CD 02 77         [ 4]  785 	call SWAPP 
      001B24 CD 1A FB         [ 4]  786 	call FADDR 
      001B27 CD 03 E3         [ 4]  787 	call ROT  ; ( udl ud a -- )
      001B2A CD 02 67         [ 4]  788 	call DUPP 
      001B2D CD 02 30         [ 4]  789 	call TOR    ; R: a 
      001B30 CD 08 23         [ 4]  790 	call HERE 
      001B33 CD 02 24         [ 4]  791 	call RAT 
      001B36 CD 04 81         [ 4]  792 	call SUBB ; (udl ud a wl -- )
      001B39 CD 02 67         [ 4]  793 	call DUPP 
      001B3C CD 02 30         [ 4]  794 	call TOR  ; ( udl ud a wl -- ) R: a wl
      001B3F CD 1A A7         [ 4]  795 	call RAM2EE ; ( udl a u -- u2 ) u2 is byte written to FLASH 
      001B42 CD 02 11         [ 4]  796 	call RFROM 
      001B45 CD 02 11         [ 4]  797 	call RFROM
      001B48 81               [ 4]  798 	ret 
                           000000   799 .if 0
                                    800  
                                    801 ; now adjust CNTXT,FCP,HERE and APP_HERE 	
                                    802 
                                    803 	ldw UCP,Y  ; adjust HERE 
                                    804 	ldw y,UFCP
                                    805 	addw y,#2 
                                    806 	ldw UCNTXT,y  
                                    807 	addw y,YTEMP 
                                    808 	subw y,#2 
                                    809 	ldw UFCP,y ;new FCP 
                                    810 ; update APP_HERE 
                                    811 	ldw (4,x),y ; new value of fcp to write to eeprom 
                                    812 	ldw y,#APP_HERE 
                                    813 	ldw (2,x),y 
                                    814 	clrw y 
                                    815 	ldw (x),y 
                                    816 	call ee_store 
                                    817 ; update APP_LAST 
                                    818 	subw x,#3*CELLL 
                                    819 	ldw y,UCNTXT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                                    820 	ldw (4,x),y 
                                    821 	ldw y,#APP_LAST 
                                    822 	ldw (2,x),y 
                                    823 	clrw y 
                                    824 	ldw (x),y 
                                    825 	call ee_store 
                                    826 .endif  	
      001B49 81               [ 4]  827 	ret 
                                    828 
                                    829 
                                    830 ; application code begin here
      001B80                        831 	.bndry 128 ; align on flash block  
      001B80                        832 app_space: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



                                   4091 .endif ; PICATOUT_MOD
                                   4092 
                                   4093 ;===============================================================
                                   4094 
                           001B04  4095 LASTN =	LINK   ;last name defined
                                   4096 
                                   4097 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        0004A4 R   |   6 ABOR1      000FBF R
  6 ABOR2      000FD6 R   |   6 ABORQ      000FB7 R   |   6 ABORT      000FA8 R
  6 ABRTQ      001277 R   |   6 ABSS       00049B R   |   6 ACCEP      000F3E R
  6 ACCP1      000F47 R   |   6 ACCP2      000F6D R   |   6 ACCP3      000F70 R
  6 ACCP4      000F72 R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |     AFR     =  004803 
    AFR0_ADC=  000000     |     AFR1_TIM=  000001     |     AFR2_CCO=  000002 
    AFR3_TIM=  000003     |     AFR4_TIM=  000004     |     AFR5_TIM=  000005 
    AFR6_I2C=  000006     |     AFR7_BEE=  000007     |   6 AFT        001262 R
  6 AGAIN      0011C1 R   |   6 AHEAD      001218 R   |   6 ALLOT      0010E7 R
  6 ANDD       0002B3 R   |     APP_HERE=  004004     |     APP_LAST=  004000 
    APP_RUN =  004002     |   6 AT         0001C0 R   |   6 ATEXE      000859 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
  6 BACK1      000EE6 R   |   6 BASE       000324 R   |     BASEE   =  00000A 
    BCNT    =  000001     |   6 BCOMP      001126 R   |   6 BDIGS      000941 R
    BEEP_BIT=  000004     |     BEEP_CSR=  0050F3     |     BEEP_MAS=  000010 
    BEEP_POR=  00000F     |   6 BEGIN      0011A5 R   |     BIT0    =  000000 
    BIT1    =  000001     |     BIT2    =  000002     |     BIT3    =  000003 
    BIT4    =  000004     |     BIT5    =  000005     |     BIT6    =  000006 
    BIT7    =  000007     |   6 BKSLA      000D7E R   |   6 BKSP       000EB6 R
    BKSPP   =  000008     |   6 BLANK      000729 R   |     BLOCK_SI=  000080 
    BOOT_ROM=  006000     |     BOOT_ROM=  007FFF     |   6 BRAN       000182 R
    BTW     =  000001     |   6 BUF2ROW    001A79 R   |     CALLL   =  0000CD 
    CAN_DGR =  005426     |     CAN_FPSR=  005427     |     CAN_IER =  005425 
    CAN_MCR =  005420     |     CAN_MSR =  005421     |     CAN_P0  =  005428 
    CAN_P1  =  005429     |     CAN_P2  =  00542A     |     CAN_P3  =  00542B 
    CAN_P4  =  00542C     |     CAN_P5  =  00542D     |     CAN_P6  =  00542E 
    CAN_P7  =  00542F     |     CAN_P8  =  005430     |     CAN_P9  =  005431 
    CAN_PA  =  005432     |     CAN_PB  =  005433     |     CAN_PC  =  005434 
    CAN_PD  =  005435     |     CAN_PE  =  005436     |     CAN_PF  =  005437 
    CAN_RFR =  005424     |     CAN_TPR =  005423     |     CAN_TSR =  005422 
    CARRY   =  000022     |   6 CAT        0001DE R   |   6 CCOMMA     001108 R
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CELLL   =  000002     |   6 CELLM      0006E6 R
  6 CELLP      0006D7 R   |   6 CELLS      0006F5 R   |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   6 CHAR1      000B6E R
  6 CHAR2      000B71 R   |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]

Symbol Table

    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |   6 CMOV1      000878 R   |   6 CMOV2      000890 R
  6 CMOVE      000870 R   |     CNTDWN  =  00002A     |   6 CNTXT      000395 R
  6 COLD       0015C6 R   |   6 COLD1      0015C6 R   |   6 COLON      001395 R
  6 COMMA      0010F1 R   |   6 COMPI      001136 R   |     COMPO   =  000040 
    CONVERT_=  000001     |   6 COUNT      00080C R   |   6 CPP        0003A3 R
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |   6 CR         000B9C R
  6 CREAT      0013CD R   |     CRR     =  00000D     |   6 CSTOR      0001CD R
    CTOP    =  000080     |   6 DAT        0007EC R   |     DATSTK  =  001670 
  6 DDROP      000403 R   |   6 DDUP       00040E R   |     DEBUG_BA=  007F00 
    DEBUG_EN=  007FFF     |   6 DECIM      0009F1 R   |   6 DEPTH      000779 R
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |   6 DGTQ1      000A36 R
  6 DIG        00096A R   |   6 DIGIT      000905 R   |   6 DIGS       00097B R
  6 DIGS1      00097B R   |   6 DIGS2      000988 R   |   6 DIGTQ      000A05 R
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   6 DN1        00047B R
  6 DNEGA      000460 R   |   6 DOCONST    001435 R   |   6 DOLIT      000138 R
  6 DONXT      00014C R   |   6 DOSTR      000BB2 R   |   6 DOT        000C37 R
  6 DOT1       000C4D R   |   6 DOTI1      00155A R   |   6 DOTID      001544 R
  6 DOTO1      00104B R   |   6 DOTOK      001031 R   |   6 DOTPR      000D60 R
  6 DOTQ       001293 R   |   6 DOTQP      000BDB R   |   6 DOTR       000BE9 R
  6 DOTS       0014E3 R   |   6 DOTS1      0014EE R   |   6 DOTS2      0014FA R
  6 DOVAR      000314 R   |   6 DROP       00025D R   |   6 DSTOR      0007C6 R
  6 DUMP       001499 R   |   6 DUMP1      0014B0 R   |   6 DUMP3      0014D2 R
  6 DUMPP      001468 R   |   6 DUPP       000267 R   |   6 EDIGS      0009A6 R
    EEPROM_B=  004000     |     EEPROM_E=  0047FF     |     EEPROM_S=  000800 
  6 ELSEE      0011F5 R   |   6 EMIT       000122 R   |   6 EQ1        0004BF R
  6 EQUAL      0004A9 R   |   6 ERASE      0008D2 R   |     ERR     =  00001B 
  6 EVAL       001074 R   |   6 EVAL1      001074 R   |   6 EVAL2      001090 R
  6 EXE1       000867 R   |   6 EXECU      000192 R   |   6 EXIT       0001A2 R
    EXT     =  000001     |     EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1 
  6 EXTRC      00092D R   |   6 FADDR      001AFB R   |   6 FCP        0003B2 R
    FHSE    =  7A1200     |     FHSI    =  F42400     |   6 FILL       00089F R
  6 FILL1      0008BC R   |   6 FILL2      0008C5 R   |   6 FIND       000E12 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]

Symbol Table

  6 FIND1      000E30 R   |   6 FIND2      000E5E R   |   6 FIND3      000E6A R
  6 FIND4      000E7E R   |   6 FIND5      000E8B R   |   6 FIND6      000E6F R
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
    FLSI    =  01F400     |   6 FMOVE      001B0A R   |   6 FOR        001184 R
    FPTR    =  00002C     |     GPIO_BAS=  005000     |     GPIO_CR1=  000003 
    GPIO_CR2=  000004     |     GPIO_DDR=  000002     |     GPIO_IDR=  000001 
    GPIO_ODR=  000000     |     GPIO_SIZ=  000005     |   6 HERE       000823 R
  6 HEX        0009DC R   |   6 HI         001599 R   |   6 HLD        000382 R
  6 HOLD       000951 R   |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |   6 IFF        0011CF R
    IMEDD   =  000080     |   6 IMMED      0013AA R   |   6 INCH       000116 R
  6 INN        000342 R   |     INPUT_DI=  000000     |     INPUT_EI=  000001 
    INPUT_FL=  000000     |     INPUT_PU=  000001     |   6 INTE1      001013 R
  6 INTER      000FE9 R   |     INT_ADC2=  000016     |     INT_AUAR=  000012 
    INT_AWU =  000001     |     INT_CAN_=  000008     |     INT_CAN_=  000009 
    INT_CLK =  000002     |     INT_EXTI=  000003     |     INT_EXTI=  000004 
    INT_EXTI=  000005     |     INT_EXTI=  000006     |     INT_EXTI=  000007 
    INT_FLAS=  000018     |     INT_I2C =  000013     |     INT_SPI =  00000A 
    INT_TIM1=  00000C     |     INT_TIM1=  00000B     |     INT_TIM2=  00000E 
    INT_TIM2=  00000D     |     INT_TIM3=  000010     |     INT_TIM3=  00000F 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]

Symbol Table

    INT_TIM4=  000017     |     INT_TLI =  000000     |     INT_UART=  000011 
    INT_UART=  000015     |     INT_UART=  000014     |     INT_VECT=  008060 
    INT_VECT=  00800C     |     INT_VECT=  008028     |     INT_VECT=  00802C 
    INT_VECT=  008010     |     INT_VECT=  008014     |     INT_VECT=  008018 
    INT_VECT=  00801C     |     INT_VECT=  008020     |     INT_VECT=  008024 
    INT_VECT=  008068     |     INT_VECT=  008054     |     INT_VECT=  008000 
    INT_VECT=  008030     |     INT_VECT=  008038     |     INT_VECT=  008034 
    INT_VECT=  008040     |     INT_VECT=  00803C     |     INT_VECT=  008048 
    INT_VECT=  008044     |     INT_VECT=  008064     |     INT_VECT=  008008 
    INT_VECT=  008004     |     INT_VECT=  008050     |     INT_VECT=  00804C 
    INT_VECT=  00805C     |     INT_VECT=  008058     |   6 INVER      00043D R
    ITC_SPR1=  007F70     |     ITC_SPR2=  007F71     |     ITC_SPR3=  007F72 
    ITC_SPR4=  007F73     |     ITC_SPR5=  007F74     |     ITC_SPR6=  007F75 
    ITC_SPR7=  007F76     |     ITC_SPR8=  007F77     |     IWDG_KR =  0050E0 
    IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2     |   6 JSRC       001386 R
  6 KEY        000B1C R   |   6 KTAP       000F03 R   |   6 KTAP1      000F26 R
  6 KTAP2      000F29 R   |   6 LAST       0003C2 R   |   6 LASTN   =  001B04 R
  6 LBRAC      001020 R   |     LED2_BIT=  000005     |     LED2_MAS=  000020 
    LED2_POR=  00500A     |   6 LESS       0004E6 R   |     LF      =  00000A 
  6 LINK    =  001B04 R   |   6 LITER      001155 R   |   6 LT1        0004FC R
    MASKK   =  001F7F     |   6 MAX        000506 R   |   6 MAX1       000519 R
  6 MIN        000523 R   |   6 MIN1       000536 R   |   6 MMOD1      0005D9 R
  6 MMOD2      0005ED R   |   6 MMOD3      000604 R   |   6 MMSM1      000580 R
  6 MMSM2      000594 R   |   6 MMSM3      000596 R   |   6 MMSM4      00059E R
  6 MODD       00061E R   |   6 MONE       00074F R   |     MS      =  000028 
  6 MSEC       0000A3 R   |   6 MSMOD      0005BC R   |   6 MSTA1      0006AF R
  6 MSTAR      00068C R   |     NAFR    =  004804     |   6 NAMEQ      000EAB R
  6 NAMET      000DBC R   |     NCLKOPT =  004808     |   6 NEGAT      00044E R
  6 NEX1       000159 R   |   6 NEXT       001194 R   |     NFLASH_W=  00480E 
    NHSECNT =  00480A     |     NOPT1   =  004802     |     NOPT2   =  004804 
    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPT6   =  00480C     |     NOPT7   =  00480E     |     NOPTBL  =  00487F 
  6 NTIB       000352 R   |     NUBC    =  004802     |   6 NUFQ       000B32 R
  6 NUFQ1      000B4B R   |   6 NUMBQ      000A49 R   |   6 NUMQ1      000A7D R
  6 NUMQ2      000AAE R   |   6 NUMQ3      000AF0 R   |   6 NUMQ4      000AF5 R
  6 NUMQ5      000B04 R   |   6 NUMQ6      000B07 R   |     NWDGOPT =  004806 
    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   6 NonHandl   000000 R   |   6 ONE        000741 R
  6 ONEM       00070F R   |   6 ONEP       000702 R   |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  6 ORIG       00003F R   |   6 ORR        0002C7 R   |   6 OUTPUT     000127 R
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |   6 OVER       000291 R   |   6 OVERT      00134F R
    PA      =  000000     |   6 PACKS      0008E4 R   |   6 PAD        000834 R
  6 PAREN      000D6F R   |   6 PARS       000C68 R   |   6 PARS1      000C93 R
  6 PARS2      000CBE R   |   6 PARS3      000CC1 R   |   6 PARS4      000CCA R
  6 PARS5      000CED R   |   6 PARS6      000D02 R   |   6 PARS7      000D11 R
  6 PARS8      000D20 R   |   6 PARSE      000D31 R   |   6 PAUSE      0000B3 R
    PA_BASE =  005000     |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_BASE =  005005     |     PB_CR1  =  005008 
    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]

Symbol Table

    PB_ODR  =  005005     |     PC      =  00000A     |     PC_BASE =  00500A 
    PC_CR1  =  00500D     |     PC_CR2  =  00500E     |     PC_DDR  =  00500C 
    PC_IDR  =  00500B     |     PC_ODR  =  00500A     |     PD      =  00000F 
  6 PDUM1      00147B R   |   6 PDUM2      00148C R   |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
    PE_BASE =  005014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_BASE =  005019     |     PF_CR1  =  00501C 
    PF_CR2  =  00501D     |     PF_DDR  =  00501B     |     PF_IDR  =  00501A 
    PF_ODR  =  005019     |     PG      =  00001E     |     PG_BASE =  00501E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |     PH      =  000023 
    PH_BASE =  005023     |     PH_CR1  =  005026     |     PH_CR2  =  005027 
    PH_DDR  =  005025     |     PH_IDR  =  005024     |     PH_ODR  =  005023 
    PI      =  000028     |     PICATOUT=  000001     |   6 PICK       000790 R
    PI_BASE =  005028     |     PI_CR1  =  00502B     |     PI_CR2  =  00502C 
    PI_DDR  =  00502A     |     PI_IDR  =  005029     |     PI_ODR  =  005028 
  6 PLUS       000423 R   |   6 PNAM1      001304 R   |   6 PRESE      00109F R
    PROD1   =  00001C     |     PROD2   =  00001E     |     PROD3   =  000020 
  6 PSTOR      0007A5 R   |     PTR16   =  00002D     |     PTR8    =  00002E 
  6 QBRAN      00016B R   |   6 QDUP       0003D2 R   |   6 QDUP1      0003DC R
  6 QKEY       000104 R   |   6 QSTAC      001057 R   |   6 QUERY      000F83 R
  6 QUEST      000C5A R   |   6 QUIT       0010BC R   |   6 QUIT1      0010C4 R
  6 QUIT2      0010C7 R   |   6 RAM2EE     001AA7 R   |     RAMBASE =  000000 
    RAM_BASE=  000000     |     RAM_END =  0017FF     |     RAM_SIZE=  001800 
  6 RAT        000224 R   |   6 RBRAC      001373 R   |   6 REPEA      00124A R
  6 RFREE      001A8E R   |   6 RFROM      000211 R   |     ROP     =  004800 
  6 ROT        0003E3 R   |   6 ROW2BUF    001A50 R   |     ROWBUFF =  001680 
    RP0     =  000026     |   6 RPAT       0001EE R   |     RPP     =  0017FF 
  6 RPSTO      0001FB R   |     RST_SR  =  0050B3     |   6 SAME1      000DDA R
  6 SAME2      000E03 R   |   6 SAMEQ      000DD2 R   |   6 SCOM1      001339 R
  6 SCOM2      00133C R   |   6 SCOMP      00131B R   |   6 SEMIS      00135F R
    SFR_BASE=  005000     |     SFR_END =  0057FF     |   6 SIGN       000990 R
  6 SIGN1      0009A0 R   |   6 SLASH      000628 R   |   6 SLMOD      00060C R
  6 SNAME      0012CE R   |     SP0     =  000024     |   6 SPACE      000B54 R
  6 SPACS      000B63 R   |   6 SPAT       000247 R   |     SPI_CR1 =  005200 
    SPI_CR2 =  005201     |     SPI_CRCP=  005205     |     SPI_DR  =  005204 
    SPI_ICR =  005202     |     SPI_RXCR=  005206     |     SPI_SR  =  005203 
    SPI_TXCR=  005207     |     SPP     =  001670     |   6 SPSTO      000254 R
  6 SSMOD      0006B8 R   |     STACK   =  0017FF     |   6 STAR       000681 R
  6 STASL      0006C9 R   |   6 STORE      0001A9 R   |   6 STR        0009BE R
  6 STRCQ      001164 R   |   6 STRQ       001285 R   |   6 STRQP      000BD1 R
  6 SUBB       000481 R   |   6 SWAPP      000277 R   |     SWIM_CSR=  007F80 
  6 TAP        000EED R   |   6 TBOOT      0015BA R   |   6 TBUF       000362 R
    TBUFFBAS=  001680     |   6 TCHA1      000770 R   |   6 TCHAR      000760 R
  6 TEMP       000333 R   |   6 TEVAL      000373 R   |   6 THENN      0011E5 R
  6 TIB        000845 R   |     TIBB    =  001700     |     TIBBASE =  001700 
    TIC     =  000027     |   6 TICK       0010D3 R   |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  005309     |     TIM2_CCM=  005305     |     TIM2_CCM=  005306 
    TIM2_CCM=  005307     |     TIM2_CCR=  00530F     |     TIM2_CCR=  005310 
    TIM2_CCR=  005311     |     TIM2_CCR=  005312     |     TIM2_CCR=  005313 
    TIM2_CCR=  005314     |     TIM2_CNT=  00530A     |     TIM2_CNT=  00530B 
    TIM2_CR1=  005300     |     TIM2_EGR=  005304     |     TIM2_IER=  005301 
    TIM2_PSC=  00530C     |     TIM2_SR1=  005302     |     TIM2_SR2=  005303 
    TIM3_ARR=  00532B     |     TIM3_ARR=  00532C     |     TIM3_CCE=  005327 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCE=  000004 
    TIM3_CCE=  000005     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCM=  005325     |     TIM3_CCM=  005326     |     TIM3_CCM=  000000 
    TIM3_CCM=  000004     |     TIM3_CCM=  000003     |     TIM3_CCR=  00532D 
    TIM3_CCR=  00532E     |     TIM3_CCR=  00532F     |     TIM3_CCR=  005330 
    TIM3_CNT=  005328     |     TIM3_CNT=  005329     |     TIM3_CR1=  005320 
    TIM3_CR1=  000007     |     TIM3_CR1=  000000     |     TIM3_CR1=  000003 
    TIM3_CR1=  000001     |     TIM3_CR1=  000002     |     TIM3_EGR=  005324 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]

Symbol Table

    TIM3_IER=  005321     |     TIM3_PSC=  00532A     |     TIM3_SR1=  005322 
    TIM3_SR2=  005323     |     TIM4_ARR=  005346     |     TIM4_CNT=  005344 
    TIM4_CR1=  005340     |     TIM4_CR1=  000007     |     TIM4_CR1=  000000 
    TIM4_CR1=  000003     |     TIM4_CR1=  000001     |     TIM4_CR1=  000002 
    TIM4_EGR=  005343     |     TIM4_EGR=  000000     |     TIM4_IER=  005341 
    TIM4_IER=  000000     |     TIM4_PSC=  005345     |     TIM4_PSC=  000000 
    TIM4_PSC=  000007     |     TIM4_PSC=  000004     |     TIM4_PSC=  000001 
    TIM4_PSC=  000005     |     TIM4_PSC=  000002     |     TIM4_PSC=  000006 
    TIM4_PSC=  000003     |     TIM4_PSC=  000000     |     TIM4_PSC=  000001 
    TIM4_PSC=  000002     |     TIM4_SR =  005342     |     TIM4_SR_=  000000 
  6 TIMEOUTQ   0000E3 R   |   6 TIMER      0000CD R   |     TIM_CR1_=  000007 
    TIM_CR1_=  000000     |     TIM_CR1_=  000006     |     TIM_CR1_=  000005 
    TIM_CR1_=  000004     |     TIM_CR1_=  000003     |     TIM_CR1_=  000001 
    TIM_CR1_=  000002     |   6 TNAM2      001514 R   |   6 TNAM3      001532 R
  6 TNAM4      001538 R   |   6 TNAME      001511 R   |   6 TOKEN      000DAE R
  6 TOR        000230 R   |     TRUEE   =  00FFFF     |   6 TWOSL      00071C R
  6 TYPE1      000B83 R   |   6 TYPE2      000B8F R   |   6 TYPES      000B7E R
  6 Timer4Ha   000005 R   |     UART1   =  000000     |     UART1_BA=  005230 
    UART1_BR=  005232     |     UART1_BR=  005233     |     UART1_CR=  005234 
    UART1_CR=  005235     |     UART1_CR=  005236     |     UART1_CR=  005237 
    UART1_CR=  005238     |     UART1_DR=  005231     |     UART1_GT=  005239 
    UART1_PO=  000000     |     UART1_PS=  00523A     |     UART1_RX=  000004 
    UART1_SR=  005230     |     UART1_TX=  000005     |     UART3   =  000001 
    UART3_BA=  005240     |     UART3_BR=  005242     |     UART3_BR=  005243 
    UART3_CR=  005244     |     UART3_CR=  005245     |     UART3_CR=  005246 
    UART3_CR=  005247     |     UART3_CR=  004249     |     UART3_DR=  005241 
    UART3_PO=  00000F     |     UART3_RX=  000006     |     UART3_SR=  005240 
    UART3_TX=  000005     |     UART_BRR=  000002     |     UART_BRR=  000003 
    UART_CR1=  000004     |     UART_CR1=  000004     |     UART_CR1=  000002 
    UART_CR1=  000000     |     UART_CR1=  000001     |     UART_CR1=  000007 
    UART_CR1=  000006     |     UART_CR1=  000005     |     UART_CR1=  000003 
    UART_CR2=  000005     |     UART_CR2=  000004     |     UART_CR2=  000002 
    UART_CR2=  000005     |     UART_CR2=  000001     |     UART_CR2=  000000 
    UART_CR2=  000006     |     UART_CR2=  000003     |     UART_CR2=  000007 
    UART_CR3=  000006     |     UART_CR3=  000003     |     UART_CR3=  000001 
    UART_CR3=  000002     |     UART_CR3=  000000     |     UART_CR3=  000006 
    UART_CR3=  000004     |     UART_CR3=  000005     |     UART_CR4=  000007 
    UART_CR4=  000000     |     UART_CR4=  000001     |     UART_CR4=  000002 
    UART_CR4=  000003     |     UART_CR4=  000004     |     UART_CR4=  000006 
    UART_CR4=  000005     |     UART_CR5=  000008     |     UART_CR5=  000003 
    UART_CR5=  000001     |     UART_CR5=  000002     |     UART_CR5=  000004 
    UART_CR5=  000005     |     UART_CR6=  000009     |     UART_CR6=  000004 
    UART_CR6=  000007     |     UART_CR6=  000001     |     UART_CR6=  000002 
    UART_CR6=  000000     |     UART_CR6=  000005     |     UART_DR =  000001 
    UART_GTR=  000009     |     UART_PSC=  00000A     |     UART_SR =  000000 
    UART_SR_=  000001     |     UART_SR_=  000004     |     UART_SR_=  000002 
    UART_SR_=  000003     |     UART_SR_=  000000     |     UART_SR_=  000005 
    UART_SR_=  000006     |     UART_SR_=  000007     |     UBASE   =  000006 
    UBC     =  004801     |     UCNTXT  =  000014     |     UCP     =  000016 
    UCTIB   =  00000C     |     UD1     =  000001     |     UD2     =  000002 
    UD3     =  000003     |     UD4     =  000004     |   6 UDOT       000C24 R
  6 UDOTR      000C04 R   |   6 UEND       00003D R   |     UFCP    =  000018 
    UHLD    =  000012     |     UINN    =  00000A     |     UINTER  =  000010 
    ULAST   =  00001A     |   6 ULES1      0004DE R   |   6 ULESS      0004C8 R
  6 UMMOD      00055E R   |   6 UMSTA      000637 R   |   6 UNIQ1      0012C5 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]

Symbol Table

  6 UNIQU      0012A6 R   |   6 UNTIL      0011B0 R   |   6 UPL1       000308 R
  6 UPLUS      0002F1 R   |     UPP     =  000006     |     USR_BTN_=  000004 
    USR_BTN_=  000010     |     USR_BTN_=  005015     |     UTIB    =  00000E 
    UTMP    =  000008     |   6 UTYP1      00144B R   |   6 UTYP2      00145A R
  6 UTYPE      001446 R   |   6 UZERO      000027 R   |   6 VARIA      0013E8 R
    VAR_HERE=  004006     |     VER     =  000002     |     VSIZE   =  000002 
    WANT_DEB=  000000     |     WANT_SEE=  000000     |     WDGOPT  =  004805 
    WDGOPT_I=  000002     |     WDGOPT_L=  000003     |     WDGOPT_W=  000000 
    WDGOPT_W=  000001     |   6 WHILE      00122F R   |   6 WITHI      000543 R
  6 WORDD      000D9A R   |   6 WORDS      00156E R   |   6 WORS1      001574 R
  6 WORS2      001593 R   |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
  6 XORR       0002DC R   |     XTEMP   =  00001C     |     YTEMP   =  00001E 
  6 ZERO       000736 R   |   6 ZL1        0002A9 R   |   6 ZLESS      0002A0 R
  6 app_spac   001B80 R   |   6 block_er   00180E R   |   6 clear_ra   000019 R
  6 clock_in   00005A R   |   6 constant   001418 R   |   6 copy_buf   001865 R
  6 copy_buf   001884 R   |   6 copy_pro   001884 R   |     da      =  000002 
    db      =  000003     |     dc      =  000000     |     dd      =  000001 
  6 ee_ccomm   001A2E R   |   6 ee_comma   001A0D R   |   6 ee_cstor   00177B R
  6 ee_store   0017C7 R   |   6 eeprom     00168A R   |   6 erase_fl   00182A R
  6 farat      00169C R   |   6 farcat     0016B8 R   |   6 fptr_sto   00166B R
  6 inc_fptr   001749 R   |   6 lock       001735 R   |   6 main       000016 R
  6 pristine   0018FF R   |   6 proceed_   00182D R   |   6 reboot     0000FA R
  6 reset_ve   001966 R   |   6 row_eras   0017F1 R   |   6 row_eras   00183E R
  6 row_eras   001865 R   |   6 set_opti   0018D3 R   |   6 set_vect   0019B9 R
  6 uart1_in   00006C R   |   6 unlock     00170D R   |   6 unlock_e   0016CF R
  6 unlock_f   0016EE R   |   6 write_by   001760 R   |   6 write_ro   0018A9 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   1B80   flags    0

