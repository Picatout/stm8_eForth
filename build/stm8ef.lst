ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                     13 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     15 
                                     16 ;===============================================================
                                     17 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     18 ;  Date: 2019-10-26
                                     19 ;  Changes to memory map:
                                     20 ;       0x16f0  Data Stack, growing downward
                                     21 ;       0x1700  Terminal input buffer TIB
                                     22 ;       0x17ff  Return Stack, growing downard
                                     23 ;================================================================
                                     24 ;       STM8EF, Version 2.1, 13 July
                                     25 ;               Implemented on STM8S-Discovery Board.
                                     26 ;               Assembled by ST VisualDevelop STVD 
                                     27 ;               Bootup on internal 2 MHz clock
                                     28 ;               Switch to external 16 MHz crystal clock
                                     29 ;
                                     30 ; FORTH Virtual Machine:
                                     31 ; Subroutine threaded model
                                     32 ; SP Return stack pointer
                                     33 ; X Data stack pointer
                                     34 ; A,Y Scratch pad registers
                                     35 ;
                                     36 ; Memory Map:
                                     37 ; 0x0 RAM memory, system variables
                                     38 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     39 ; 0x780 Data stack, growing downward
                                     40 ; 0x790 Terminal input buffer TIB
                                     41 ; 0x7FF Return stack, growing downward
                                     42 ; 0x8000 Interrupt vector table
                                     43 ; 0x8080 FORTH startup code
                                     44 ; 0x80E7 Start of FORTH dictionary in ROM
                                     45 ; 0x9584 End of FORTH dictionary
                                     46 ;
                                     47 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     48 ;                  use UART1 instead of UART3 for communication with user.
                                     49 ;                  UART1 is available as ttyACM* device via USB connection.
                                     50 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     51 ;                  and MSEC word that return MS value.
                                     52 ;
                                     53 ;       EF12, Version 2.1, 18apr00cht
                                     54 ;               move to 8000H replacing WHYP.
                                     55 ;               copy interrupt vectors from WHYPFLSH.S19
                                     56 ;               to EF12.S19 before flashing
                                     57 ;               add TICKS1 and DELAY1 for motor stepping
                                     58 ;
                                     59 ;       EF12, 02/18/00, C. H. Ting
                                     60 ;       Adapt 86eForth v2.02 to 68HC12.
                                     61 ;               Use WHYP to seed EF12.ASM
                                     62 ;               Use AS12 native 68HC12 assembler:
                                     63 ;               as12 ef12.asm >ef12.lst
                                     64 ;       EF12A, add ADC code, 02mar00cht
                                     65 ;       EF12B, 01mar00cht
                                     66 ;               stack to 0x78, return stack to 0xf8.
                                     67 ;               add all port definitions
                                     68 ;               add PWM registers
                                     69 ;               add SPI registers and code
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     70 ;       EF12C, 12mar00cht
                                     71 ;               add MAX5250 D/A converter
                                     72 ;       EF12D, 15mar00cht
                                     73 ;               add all the Lexel interface words
                                     74 ;       EF12E, 18apr00cht, save for reference
                                     75 ;
                                     76 ;       Copyright (c) 2000
                                     77 ;       Dr. C. H. Ting
                                     78 ;       156 14th Avenue
                                     79 ;       San Mateo, CA 94402
                                     80 ;       (650) 571-7639
                                     81 ;
                                     82 
                                     83 ;*************************************
                                     84 ; constant used for conditationnal 
                                     85 ; assembly for those word I converted 
                                     86 ; to code.
                                     87 ; Added by Picatout 2020-05-24 
                                     88 ;*************************************
                           000001    89 CONVERT_TO_CODE=1 ; words converted in assembly by Picatout
                           000001    90 PICATOUT_MOD=1  ; code modified by Picatout 
                                     91 
                                     92 ;*********************************************************
                                     93 ;	Assembler constants
                                     94 ;*********************************************************
                           000000    95 RAMBASE =	0x0000	   ;ram base
                           0017FF    96 STACK   =	0x17FF 	;system (return) stack empty 
                           0016F0    97 DATSTK  =	0x16F0	;data stack  empty
                           001700    98 TIBBASE =       0X1700  ; tib addr.
                                     99 ;******  System Variables  ******
                           00001A   100 XTEMP	=	26	;address called by CREATE
                           00001C   101 YTEMP	=	28	;address called by CREATE
                           00001A   102 PROD1 = 26	;space for UM*
                           00001C   103 PROD2 = 28
                           00001E   104 PROD3 = 30
                           000020   105 CARRY = 32
                           000022   106 SP0	=	34	 ;initial data stack pointer
                           000024   107 RP0	=	36	;initial return stack pointer
                           000026   108 MS    =         38      ; millisecond counter 
                           000028   109 CNTDWN =        40      ; count down timer 
                                    110 
                                    111 ;***********************************************
                                    112 ;; Version control
                                    113 
                           000002   114 VER     =     2         ;major release version
                           000001   115 EXT     =     1         ;minor extension
                                    116 
                                    117 ;; Constants
                                    118 
                           00FFFF   119 TRUEE   =     0xFFFF      ;true flag
                                    120 
                           000040   121 COMPO   =     0x40     ;lexicon compile only bit
                           000080   122 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   123 MASKK   =     0x1F7F  ;lexicon bit mask
                                    124 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000002   125 CELLL   =     2       ;size of a cell
                           00000A   126 BASEE   =     10      ;default radix
                           000008   127 BKSPP   =     8       ;back space
                           00000A   128 LF      =     10      ;line feed
                           00000D   129 CRR     =     13      ;carriage return
                           00001B   130 ERR     =     27      ;error escape
                           000027   131 TIC     =     39      ;tick
                           0000CD   132 CALLL   =     0xCD     ;CALL opcodes
                                    133 
                                    134 ;; Memory allocation
                                    135 
                           000006   136 UPP     =     RAMBASE+6
                           0016F0   137 SPP     =     RAMBASE+DATSTK
                           0017FF   138 RPP     =     RAMBASE+STACK
                           001700   139 TIBB    =     RAMBASE+TIBBASE
                           000080   140 CTOP    =     RAMBASE+0x80
                                    141 
                           000001   142 .if PICATOUT_MOD 
                                    143 ; user variables constants 
                           000006   144 UBASE = RAMBASE+6 ; numeric base 
                           000008   145 UTMP = UBASE+2    ; temporary storage
                           00000A   146 UINN = UTMP+2     ; >IN tib pointer 
                           00000C   147 UCTIB = UINN+2    ; tib count 
                           00000E   148 UTIB = UCTIB+2    ; tib address 
                           000010   149 UINTER = UTIB+2   ; interpreter vector 
                           000012   150 UHLD = UINTER+2   ; hold 
                           000014   151 UCNTXT = UHLD+2   ; context 
                           000016   152 UCP = UCNTXT+2    ; ram dictionary pointer 
                           000018   153 ULAST = UCP+2     ; flash dictionary pointer 
                           004000   154 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   155 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   156 APP_HERE = APP_RUN+2   ; free application space pointer 
                           004006   157 VAR_HERE = APP_HERE+2  ; free data space pointer 
                                    158 .endif ; PICATOUT_MOD
                                    159 
                                    160 
                                    161         .macro _ledon
                                    162         bset PC_ODR,#LED2_BIT
                                    163         .endm
                                    164 
                                    165         .macro _ledoff
                                    166         bres PC_ODR,#LED2_BIT
                                    167         .endm
                                    168 
                                    169 ;**********************************************************
                                    170         .area DATA (ABS)
      000000                        171         .org RAMBASE 
                                    172 ;**********************************************************
                                    173 
                                    174 ;**********************************************************
                                    175         .area SSEG (ABS) ; STACK
      001700                        176         .org 0x1700
      001700                        177         .ds 256 
                                    178 ; space for DATSTK,TIB and STACK         
                                    179 ;**********************************************************
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    180 
                                    181 ;**********************************************************
                                    182         .area HOME ; vectors table
                                    183 ;**********************************************************
      000000 82 00 00 16            184 	int main	        ; reset
      000004 82 00 00 00            185 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            186 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            187 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            188 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            189 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            190 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            191 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            192 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            193 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            194 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            195 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            196 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            197 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            198 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            199 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            200 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            201 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            202 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            203 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            204 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            205 	int NonHandledInterrupt	; irq19
      000058 82 00 00 00            206 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            207 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            208 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            209 	int Timer4Handler	; irq23
      000068 82 00 00 00            210 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            211 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            212 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            213 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            214 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            215 	int NonHandledInterrupt	; irq29
                                    216 
                                    217 ;**********************************************************
                                    218         .area CODE
                                    219 ;**********************************************************
                                    220 
                                    221 ; non handled interrupt reset MCU
      000000                        222 NonHandledInterrupt:
      000000 A6 80            [ 1]  223         ld a, #0x80
      000002 C7 50 D1         [ 1]  224         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    225 	;iret
                                    226 
                                    227 ; used for milliseconds counter 
                                    228 ; MS is 16 bits counter 
      000005                        229 Timer4Handler:
      000005 72 5F 53 42      [ 1]  230 	clr TIM4_SR 
      000009 BE 26            [ 2]  231         ldw x,MS 
      00000B 5C               [ 2]  232         incw x 
      00000C BF 26            [ 2]  233         ldw MS,x
      00000E BE 28            [ 2]  234         ldw x,CNTDWN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      000010 27 03            [ 1]  235         jreq 1$
      000012 5A               [ 2]  236         decw x 
      000013 BF 28            [ 2]  237         ldw CNTDWN,x 
      000015                        238 1$:         
      000015 80               [11]  239         iret 
                                    240 
                                    241 
                                    242 ;; Main entry points and COLD start data
      000016                        243 main:
                                    244 ; clear all RAM
      000016 AE 00 00         [ 2]  245 	ldw X,#RAMBASE
      000019                        246 clear_ram0:
      000019 7F               [ 1]  247 	clr (X)
      00001A 5C               [ 2]  248 	incw X
      00001B A3 17 FF         [ 2]  249 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  250 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  251         ldw x,#RPP
      000023 94               [ 1]  252         ldw sp,x 
      000024 CC 00 3D         [ 2]  253 	jp ORIG
                                    254 
                                    255 ; COLD initialize these variables.
      000027                        256 UZERO:
      000027 00 0A                  257         .word      BASEE   ;BASE
      000029 00 00                  258         .word      0       ;tmp
      00002B 00 00                  259         .word      0       ;>IN
      00002D 00 00                  260         .word      0       ;#TIB
      00002F 17 00                  261         .word      TIBB    ;TIB
      000031 0F C6                  262         .word      INTER   ;'EVAL
      000033 00 00                  263         .word      0       ;HLD
      000035 19 4D                  264         .word       LASTN  ;CNTXT pointer
      000037 00 80                  265         .word       CTOP   ;CP in RAM
      000039 19 4D                  266         .word      LASTN   ;LAST
      00003B 00 00                  267 UEND:  .word      0
                                    268 
      00003D                        269 ORIG:   
                                    270 ; initialize SP
      00003D AE 17 FF         [ 2]  271         LDW     X,#STACK  ;initialize return stack
      000040 94               [ 1]  272         LDW     SP,X
      000041 BF 24            [ 2]  273         LDW     RP0,X
      000043 AE 16 F0         [ 2]  274         LDW     X,#DATSTK ;initialize data stack
      000046 BF 22            [ 2]  275         LDW     SP0,X
                                    276 ; initialize PC_5 as output to control LED2
                                    277 ; added by Picatout 
      000048 72 1A 50 0D      [ 1]  278         bset PC_CR1,#LED2_BIT
      00004C 72 1A 50 0E      [ 1]  279         bset PC_CR2,#LED2_BIT
      000050 72 1A 50 0C      [ 1]  280         bset PC_DDR,#LED2_BIT
      000054                        281         _ledoff
      000054 72 1B 50 0A      [ 1]    1         bres PC_ODR,#LED2_BIT
                                    282 ; initialize clock to HSI
                                    283 ; no divisor 16Mhz 
                                    284 ; Added by Picatout 
      000058                        285 clock_init:
      000058 72 5F 50 C6      [ 1]  286         clr CLK_CKDIVR
      00005C 72 12 50 C5      [ 1]  287 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000060 A6 E1            [ 1]  288 	ld a,#CLK_SWR_HSI
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      000062 C7 50 C4         [ 1]  289 	ld CLK_SWR,a
      000065 C1 50 C3         [ 1]  290 1$:	cp a,CLK_CMSR
      000068 26 FB            [ 1]  291 	jrne 1$
                                    292         
                                    293 ; initialize UART1, 115200 8N1
      00006A                        294 uart1_init:
      00006A 72 14 50 C7      [ 1]  295 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    296 	; configure tx pin
      00006E 72 1A 50 02      [ 1]  297 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      000072 72 1A 50 03      [ 1]  298 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      000076 72 1A 50 04      [ 1]  299 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    300 	; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
      00007A 35 0B 52 33      [ 1]  301 	mov UART1_BRR2,#0x0b ; must be loaded first
      00007E 35 08 52 32      [ 1]  302 	mov UART1_BRR1,#0x8
      000082 35 0C 52 35      [ 1]  303 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    304 ; initialize timer4, used for millisecond interrupt  
      000086 35 07 53 45      [ 1]  305 	mov TIM4_PSCR,#7 ; prescale 128  
      00008A 35 7D 53 46      [ 1]  306 	mov TIM4_ARR,#125 ; set for 1msec.
      00008E 35 05 53 40      [ 1]  307 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      000092 72 10 53 41      [ 1]  308 	bset TIM4_IER,#TIM4_IER_UIE 
      000096 9A               [ 1]  309         rim
      000097 CC 15 83         [ 2]  310         jp  COLD   ;default=MN1
                                    311 
                                    312 
                                    313 ;; get millisecond counter 
                                    314 ;; msec ( -- u )
                                    315 ;; Added by Picatout 2020-04-26
      00009A 00 00                  316         .word 0 
                           00009C   317 LINK = . 
      00009C 04                     318         .byte 4
      00009D 4D 53 45 43            319         .ascii "MSEC"
      0000A1                        320 MSEC: 
      0000A1 1D 00 02         [ 2]  321         subw x,#CELLL 
      0000A4 90 BE 26         [ 2]  322         ldw y,MS 
      0000A7 FF               [ 2]  323         ldw (x),y 
      0000A8 81               [ 4]  324         ret 
                                    325 
                                    326 ; suspend execution for u msec 
                                    327 ;  pause ( u -- )
      0000A9 00 9C                  328         .word LINK 
                           0000AB   329         LINK=.
      0000AB 05                     330         .byte 5 
      0000AC 50 41 55 53 45         331         .ascii "PAUSE"
      0000B1                        332 PAUSE:
      0000B1 90 93            [ 1]  333         ldw y,x
      0000B3 90 FE            [ 2]  334         ldw y,(y)
      0000B5 72 B9 00 26      [ 2]  335         addw y,MS 
      0000B9 8F               [10]  336 1$:     wfi  
      0000BA 90 B3 26         [ 2]  337         cpw y,MS  
      0000BD 26 FA            [ 1]  338         jrne 1$        
      0000BF 1C 00 02         [ 2]  339         addw x,#CELLL 
      0000C2 81               [ 4]  340         ret 
                                    341 
                                    342 ; initialize count down timer 
                                    343 ;  TIMER ( u -- )  milliseconds 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      0000C3 00 AB                  344         .word LINK 
                           0000C5   345         LINK=.
      0000C5 05                     346         .byte 5 
      0000C6 54 49 4D 45 52         347         .ascii "TIMER" 
      0000CB                        348 TIMER:
      0000CB 90 93            [ 1]  349         ldw y,x
      0000CD 90 FE            [ 2]  350         ldw y,(y) 
      0000CF 90 BF 28         [ 2]  351         ldw CNTDWN,y
      0000D2 1C 00 02         [ 2]  352         addw x,#CELLL 
      0000D5 81               [ 4]  353         ret 
                                    354 
                                    355 ; check for TIMER exiparition 
                                    356 ;  TIMEOUT? ( -- 0|-1 )
      0000D6 00 C5                  357         .word LINK 
                           0000D8   358         LINK=. 
      0000D8 08                     359         .byte 8 
      0000D9 54 49 4D 45 4F 55 54   360         .ascii "TIMEOUT?"
             3F
      0000E1                        361 TIMEOUTQ: 
      0000E1 4F               [ 1]  362         clr a
      0000E2 1D 00 02         [ 2]  363         subw x,#CELLL 
      0000E5 90 BE 28         [ 2]  364         ldw y,CNTDWN 
      0000E8 26 01            [ 1]  365         jrne 1$ 
      0000EA 43               [ 1]  366         cpl a 
      0000EB E7 01            [ 1]  367 1$:     ld (1,x),a 
      0000ED F7               [ 1]  368         ld (x),a 
      0000EE 81               [ 4]  369         ret         
                                    370 
                                    371 ; reboot MCU 
                                    372 ; REBOOT ( -- )
      0000EF 00 D8                  373         .word LINK 
                           0000F1   374         LINK=. 
      0000F1 06                     375         .byte 6 
      0000F2 52 45 42 4F 4F 54      376         .ascii "REBOOT"
      0000F8                        377 reboot:
      0000F8 CC 00 00         [ 2]  378         jp NonHandledInterrupt
                                    379         
                                    380 
                                    381 ;; Device dependent I/O
                                    382 ;       ?RX     ( -- c T | F )
                                    383 ;         Return input byte and true, or false.
      0000FB 00 F1                  384         .word      LINK 
                           0000FD   385 LINK	= .
      0000FD 04                     386         .byte      4
      0000FE 3F 4B 45 59            387         .ascii     "?KEY"
      000102                        388 QKEY:
      000102 90 5F            [ 1]  389         CLRW Y 
      000104 72 0B 52 30 0B   [ 2]  390         BTJF UART1_SR,#UART_SR_RXNE,INCH   ;check status
      000109 C6 52 31         [ 1]  391         LD    A,UART1_DR   ;get char in A
      00010C 1D 00 02         [ 2]  392 	SUBW	X,#2
      00010F E7 01            [ 1]  393         LD     (1,X),A
      000111 7F               [ 1]  394 	CLR	(X)
      000112 90 53            [ 2]  395         CPLW     Y
      000114                        396 INCH:
      000114 1D 00 02         [ 2]  397 	SUBW	X,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      000117 FF               [ 2]  398         LDW     (X),Y
      000118 81               [ 4]  399         RET
                                    400 
                                    401 ;       TX!     ( c -- )
                                    402 ;       Send character c to  output device.
      000119 00 FD                  403         .word      LINK
                           00011B   404 LINK	= .
      00011B 04                     405         .byte      4
      00011C 45 4D 49 54            406         .ascii     "EMIT"
      000120                        407 EMIT:
      000120 E6 01            [ 1]  408         LD     A,(1,X)
      000122 1C 00 02         [ 2]  409 	ADDW	X,#2
      000125 72 0F 52 30 FB   [ 2]  410 OUTPUT: BTJF UART1_SR,#UART_SR_TXE,OUTPUT  ;loop until tdre
      00012A C7 52 31         [ 1]  411         LD    UART1_DR,A   ;send A
      00012D 81               [ 4]  412         RET
                                    413 
                                    414 ;; The kernel
                                    415 
                                    416 ;       doLIT   ( -- w )
                                    417 ;       Push an inline literal.
      00012E 01 1B                  418         .word      LINK
                           000130   419 LINK	= 	.
      000130 45                     420 	.byte      COMPO+5
      000131 44 4F 4C 49 54         421         .ascii     "DOLIT"
      000136                        422 DOLIT:
      000136 1D 00 02         [ 2]  423 	SUBW X,#2
                           000001   424 .if PICATOUT_MOD 
      000139 16 01            [ 2]  425         ldw y,(1,sp)
      00013B 90 FE            [ 2]  426         ldw y,(y)
      00013D FF               [ 2]  427         ldw (x),y
      00013E 90 85            [ 2]  428         popw y 
                           000000   429 .else 
                                    430         POPW Y
                                    431 	LDW YTEMP,Y
                                    432 	LDW Y,(Y)
                                    433         LDW (X),Y
                                    434         LDW Y,YTEMP
                                    435 .endif 
      000140 90 EC 02         [ 2]  436 	JP (2,Y)
                                    437 
                                    438 ;       next    ( -- )
                                    439 ;       Code for  single index loop.
      000143 01 30                  440         .word      LINK
                           000145   441 LINK	= 	.
      000145 44                     442 	.byte      COMPO+4
      000146 4E 45 58 54            443         .ascii     "NEXT"
      00014A                        444 DONXT:
      00014A 16 03            [ 2]  445 	LDW Y,(3,SP)
      00014C 90 5A            [ 2]  446 	DECW Y
      00014E 2A 07            [ 1]  447 	JRPL NEX1
      000150 90 85            [ 2]  448 	POPW Y
                           000001   449 .if PICATOUT_MOD
      000152 5B 02            [ 2]  450         addw sp,#2
                           000000   451 .else        
                                    452 	POP A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                                    453 	POP A
                                    454 .endif         
      000154 90 EC 02         [ 2]  455         JP (2,Y)
      000157                        456 NEX1:
      000157 17 03            [ 2]  457         LDW (3,SP),Y
      000159 90 85            [ 2]  458         POPW Y
      00015B 90 FE            [ 2]  459 	LDW Y,(Y)
      00015D 90 FC            [ 2]  460 	JP (Y)
                                    461 
                                    462 ;       ?branch ( f -- )
                                    463 ;       Branch if flag is zero.
      00015F 01 45                  464         .word      LINK
                           000161   465 LINK	= 	.
      000161 47                     466 	.byte      COMPO+7
      000162 3F 42 52 41 4E 43 48   467         .ascii     "?BRANCH"
      000169                        468 QBRAN:	
      000169 90 93            [ 1]  469         LDW Y,X
      00016B 1C 00 02         [ 2]  470 	ADDW X,#2
      00016E 90 FE            [ 2]  471 	LDW Y,(Y)
      000170 27 0E            [ 1]  472         JREQ     BRAN
      000172 90 85            [ 2]  473 	POPW Y
      000174 90 EC 02         [ 2]  474 	JP (2,Y)
                                    475         
                                    476 ;       branch  ( -- )
                                    477 ;       Branch to an inline address.
      000177 01 61                  478         .word      LINK
                           000179   479 LINK	= 	.
      000179 46                     480 	.byte      COMPO+6
      00017A 42 52 41 4E 43 48      481         .ascii     "BRANCH"
      000180                        482 BRAN:
      000180 90 85            [ 2]  483         POPW Y
      000182 90 FE            [ 2]  484 	LDW Y,(Y)
      000184 90 FC            [ 2]  485         JP     (Y)
                                    486 
                                    487 ;       EXECUTE ( ca -- )
                                    488 ;       Execute  word at ca.
      000186 01 79                  489         .word      LINK
                           000188   490 LINK	= 	.
      000188 07                     491         .byte       7
      000189 45 58 45 43 55 54 45   492         .ascii     "EXECUTE"
      000190                        493 EXECU:
      000190 90 93            [ 1]  494         LDW Y,X
      000192 1C 00 02         [ 2]  495 	ADDW X,#2
      000195 90 FE            [ 2]  496 	LDW  Y,(Y)
      000197 90 FC            [ 2]  497         JP   (Y)
                                    498 
                                    499 ;       EXIT    ( -- )
                                    500 ;       Terminate a colon definition.
      000199 01 88                  501         .word      LINK
                           00019B   502 LINK = .
      00019B 04                     503         .byte      4
      00019C 45 58 49 54            504         .ascii     "EXIT"
      0001A0                        505 EXIT:
      0001A0 90 85            [ 2]  506         POPW Y
      0001A2 81               [ 4]  507         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                                    508 
                                    509 ;       !       ( w a -- )
                                    510 ;       Pop  data stack to memory.
      0001A3 01 9B                  511         .word      LINK
                           0001A5   512 LINK = .
      0001A5 01                     513         .byte      1
      0001A6 21                     514         .ascii     "!"
      0001A7                        515 STORE:
      0001A7 90 93            [ 1]  516         LDW Y,X
      0001A9 90 FE            [ 2]  517         LDW Y,(Y)    ;Y=a
      0001AB 90 BF 1C         [ 2]  518         LDW YTEMP,Y
      0001AE 90 93            [ 1]  519         LDW Y,X
      0001B0 90 EE 02         [ 2]  520         LDW Y,(2,Y)
      0001B3 91 CF 1C         [ 5]  521         LDW [YTEMP],Y ;store w at a
      0001B6 1C 00 04         [ 2]  522         ADDW X,#4 ; DDROP 
      0001B9 81               [ 4]  523         RET     
                                    524 
                                    525 ;       @       ( a -- w )
                                    526 ;       Push memory location to stack.
      0001BA 01 A5                  527         .word      LINK
                           0001BC   528 LINK	= 	.
      0001BC 01                     529         .byte    1
      0001BD 40                     530         .ascii	"@"
      0001BE                        531 AT:
      0001BE 90 93            [ 1]  532         LDW Y,X     ;Y = a
      0001C0 90 FE            [ 2]  533         LDW Y,(Y)   ; address 
      0001C2 90 FE            [ 2]  534         LDW Y,(Y)   ; value 
      0001C4 FF               [ 2]  535         LDW (X),Y ;w = @Y
      0001C5 81               [ 4]  536         RET     
                                    537 
                                    538 ;       C!      ( c b -- )
                                    539 ;       Pop  data stack to byte memory.
      0001C6 01 BC                  540         .word      LINK
                           0001C8   541 LINK	= .
      0001C8 02                     542         .byte      2
      0001C9 43 21                  543         .ascii     "C!"
      0001CB                        544 CSTOR:
      0001CB 90 93            [ 1]  545         LDW Y,X
      0001CD 90 FE            [ 2]  546 	LDW Y,(Y)    ;Y=b
      0001CF E6 03            [ 1]  547         LD A,(3,X)    ;D = c
      0001D1 90 F7            [ 1]  548         LD  (Y),A     ;store c at b
      0001D3 1C 00 04         [ 2]  549 	ADDW X,#4 ; DDROP 
      0001D6 81               [ 4]  550         RET     
                                    551 
                                    552 ;       C@      ( b -- c )
                                    553 ;       Push byte in memory to  stack.
      0001D7 01 C8                  554         .word      LINK
                           0001D9   555 LINK	= 	.
      0001D9 02                     556         .byte      2
      0001DA 43 40                  557         .ascii     "C@"
      0001DC                        558 CAT:
      0001DC 90 93            [ 1]  559         LDW Y,X     ;Y=b
      0001DE 90 FE            [ 2]  560         LDW Y,(Y)
      0001E0 90 F6            [ 1]  561         LD A,(Y)
      0001E2 E7 01            [ 1]  562         LD (1,X),A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      0001E4 7F               [ 1]  563         CLR (X)
      0001E5 81               [ 4]  564         RET     
                                    565 
                                    566 ;       RP@     ( -- a )
                                    567 ;       Push current RP to data stack.
      0001E6 01 D9                  568         .word      LINK
                           0001E8   569 LINK	= .
      0001E8 03                     570         .byte      3
      0001E9 52 50 40               571         .ascii     "RP@"
      0001EC                        572 RPAT:
      0001EC 90 96            [ 1]  573         LDW Y,SP    ;save return addr
      0001EE 1D 00 02         [ 2]  574         SUBW X,#2
      0001F1 FF               [ 2]  575         LDW (X),Y
      0001F2 81               [ 4]  576         RET     
                                    577 
                                    578 ;       RP!     ( a -- )
                                    579 ;       Set  return stack pointer.
      0001F3 01 E8                  580         .word      LINK
                           0001F5   581 LINK	= 	. 
      0001F5 43                     582 	.byte      COMPO+3
      0001F6 52 50 21               583         .ascii     "RP!"
      0001F9                        584 RPSTO:
      0001F9 90 85            [ 2]  585         POPW Y
      0001FB 90 BF 1C         [ 2]  586         LDW YTEMP,Y
      0001FE 90 93            [ 1]  587         LDW Y,X
      000200 90 FE            [ 2]  588         LDW Y,(Y)
      000202 90 94            [ 1]  589         LDW SP,Y
      000204 1C 00 02         [ 2]  590         ADDW x,#CELLL ; a was not dropped, Picatout 2020-05-24
      000207 92 CC 1C         [ 5]  591         JP [YTEMP]
                                    592 
                                    593 ;       R>      ( -- w )
                                    594 ;       Pop return stack to data stack.
      00020A 01 F5                  595         .word      LINK
                           00020C   596 LINK	= 	. 
      00020C 42                     597 	.byte      COMPO+2
      00020D 52 3E                  598         .ascii     "R>"
      00020F                        599 RFROM:
      00020F 90 85            [ 2]  600         POPW Y    ;save return addr
      000211 90 BF 1C         [ 2]  601         LDW YTEMP,Y
      000214 90 85            [ 2]  602         POPW Y
      000216 1D 00 02         [ 2]  603         SUBW X,#2
      000219 FF               [ 2]  604         LDW (X),Y
      00021A 92 CC 1C         [ 5]  605         JP [YTEMP]
                                    606 
                                    607 ;       R@      ( -- w )
                                    608 ;       Copy top of return stack to stack.
      00021D 02 0C                  609         .word      LINK
                           00021F   610 LINK	= 	. 
      00021F 02                     611         .byte      2
      000220 52 40                  612         .ascii     "R@"
      000222                        613 RAT:
                           000001   614 .if PICATOUT_MOD
      000222 16 03            [ 2]  615         ldw y,(3,sp)
      000224 1D 00 02         [ 2]  616         subw x,#CELLL 
      000227 FF               [ 2]  617         ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      000228 81               [ 4]  618         ret 
                           000000   619 .else 
                                    620         POPW Y
                                    621         LDW YTEMP,Y
                                    622         POPW Y
                                    623         PUSHW Y
                                    624         SUBW X,#2
                                    625         LDW (X),Y
                                    626         JP [YTEMP]
                                    627 .endif         
                                    628 
                                    629 ;       >R      ( w -- )
                                    630 ;       Push data stack to return stack.
      000229 02 1F                  631         .word      LINK
                           00022B   632 LINK	= 	. 
      00022B 42                     633 	.byte      COMPO+2
      00022C 3E 52                  634         .ascii     ">R"
      00022E                        635 TOR:
      00022E 90 85            [ 2]  636         POPW Y    ;save return addr
      000230 90 BF 1C         [ 2]  637         LDW YTEMP,Y
      000233 90 93            [ 1]  638         LDW Y,X
      000235 90 FE            [ 2]  639         LDW Y,(Y)
      000237 90 89            [ 2]  640         PUSHW Y    ;restore return addr
      000239 1C 00 02         [ 2]  641         ADDW X,#2
      00023C 92 CC 1C         [ 5]  642         JP [YTEMP]
                                    643 
                                    644 ;       SP@     ( -- a )
                                    645 ;       Push current stack pointer.
      00023F 02 2B                  646         .word      LINK
                           000241   647 LINK	= 	. 
      000241 03                     648         .byte      3
      000242 53 50 40               649         .ascii     "SP@"
      000245                        650 SPAT:
      000245 90 93            [ 1]  651 	LDW Y,X
      000247 1D 00 02         [ 2]  652         SUBW X,#2
      00024A FF               [ 2]  653 	LDW (X),Y
      00024B 81               [ 4]  654         RET     
                                    655 
                                    656 ;       SP!     ( a -- )
                                    657 ;       Set  data stack pointer.
      00024C 02 41                  658         .word      LINK
                           00024E   659 LINK	= 	. 
      00024E 03                     660         .byte      3
      00024F 53 50 21               661         .ascii     "SP!"
      000252                        662 SPSTO:
      000252 FE               [ 2]  663         LDW     X,(X)     ;X = a
      000253 81               [ 4]  664         RET     
                                    665 
                                    666 ;       DROP    ( w -- )
                                    667 ;       Discard top stack item.
      000254 02 4E                  668         .word      LINK
                           000256   669 LINK	= 	. 
      000256 04                     670         .byte      4
      000257 44 52 4F 50            671         .ascii     "DROP"
      00025B                        672 DROP:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      00025B 1C 00 02         [ 2]  673         ADDW X,#2     
      00025E 81               [ 4]  674         RET     
                                    675 
                                    676 ;       DUP     ( w -- w w )
                                    677 ;       Duplicate  top stack item.
      00025F 02 56                  678         .word      LINK
                           000261   679 LINK	= 	. 
      000261 03                     680         .byte      3
      000262 44 55 50               681         .ascii     "DUP"
      000265                        682 DUPP:
      000265 90 93            [ 1]  683 	LDW Y,X
      000267 1D 00 02         [ 2]  684         SUBW X,#2
      00026A 90 FE            [ 2]  685 	LDW Y,(Y)
      00026C FF               [ 2]  686 	LDW (X),Y
      00026D 81               [ 4]  687         RET     
                                    688 
                                    689 ;       SWAP    ( w1 w2 -- w2 w1 )
                                    690 ;       Exchange top two stack items.
      00026E 02 61                  691         .word      LINK
                           000270   692 LINK	= 	. 
      000270 04                     693         .byte      4
      000271 53 57 41 50            694         .ascii     "SWAP"
      000275                        695 SWAPP:
      000275 90 93            [ 1]  696         LDW Y,X
      000277 90 FE            [ 2]  697         LDW Y,(Y)
      000279 90 BF 1C         [ 2]  698         LDW YTEMP,Y
      00027C 90 93            [ 1]  699         LDW Y,X
      00027E 90 EE 02         [ 2]  700         LDW Y,(2,Y)
      000281 FF               [ 2]  701         LDW (X),Y
      000282 90 BE 1C         [ 2]  702         LDW Y,YTEMP
      000285 EF 02            [ 2]  703         LDW (2,X),Y
      000287 81               [ 4]  704         RET     
                                    705 
                                    706 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                    707 ;       Copy second stack item to top.
      000288 02 70                  708         .word      LINK
                           00028A   709 LINK	= . 
      00028A 04                     710         .byte      4
      00028B 4F 56 45 52            711         .ascii     "OVER"
      00028F                        712 OVER:
      00028F 1D 00 02         [ 2]  713         SUBW X,#2
      000292 90 93            [ 1]  714         LDW Y,X
      000294 90 EE 04         [ 2]  715         LDW Y,(4,Y)
      000297 FF               [ 2]  716         LDW (X),Y
      000298 81               [ 4]  717         RET     
                                    718 
                                    719 ;       0<      ( n -- t )
                                    720 ;       Return true if n is negative.
      000299 02 8A                  721         .word      LINK
                           00029B   722 LINK	= . 
      00029B 02                     723         .byte      2
      00029C 30 3C                  724         .ascii     "0<"
      00029E                        725 ZLESS:
      00029E A6 FF            [ 1]  726         LD A,#0xFF
      0002A0 90 93            [ 1]  727         LDW Y,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      0002A2 90 FE            [ 2]  728         LDW Y,(Y)
      0002A4 2B 01            [ 1]  729         JRMI     ZL1
      0002A6 4F               [ 1]  730         CLR A   ;false
      0002A7 F7               [ 1]  731 ZL1:    LD     (X),A
      0002A8 E7 01            [ 1]  732         LD (1,X),A
      0002AA 81               [ 4]  733 	RET     
                                    734 
                                    735 ;       AND     ( w w -- w )
                                    736 ;       Bitwise AND.
      0002AB 02 9B                  737         .word      LINK
                           0002AD   738 LINK	= . 
      0002AD 03                     739         .byte      3
      0002AE 41 4E 44               740         .ascii     "AND"
      0002B1                        741 ANDD:
      0002B1 F6               [ 1]  742         LD  A,(X)    ;D=w
      0002B2 E4 02            [ 1]  743         AND A,(2,X)
      0002B4 E7 02            [ 1]  744         LD (2,X),A
      0002B6 E6 01            [ 1]  745         LD A,(1,X)
      0002B8 E4 03            [ 1]  746         AND A,(3,X)
      0002BA E7 03            [ 1]  747         LD (3,X),A
      0002BC 1C 00 02         [ 2]  748         ADDW X,#2
      0002BF 81               [ 4]  749         RET
                                    750 
                                    751 ;       OR      ( w w -- w )
                                    752 ;       Bitwise inclusive OR.
      0002C0 02 AD                  753         .word      LINK
                           0002C2   754 LINK = . 
      0002C2 02                     755         .byte      2
      0002C3 4F 52                  756         .ascii     "OR"
      0002C5                        757 ORR:
      0002C5 F6               [ 1]  758         LD A,(X)    ;D=w
      0002C6 EA 02            [ 1]  759         OR A,(2,X)
      0002C8 E7 02            [ 1]  760         LD (2,X),A
      0002CA E6 01            [ 1]  761         LD A,(1,X)
      0002CC EA 03            [ 1]  762         OR A,(3,X)
      0002CE E7 03            [ 1]  763         LD (3,X),A
      0002D0 1C 00 02         [ 2]  764         ADDW X,#2
      0002D3 81               [ 4]  765         RET
                                    766 
                                    767 ;       XOR     ( w w -- w )
                                    768 ;       Bitwise exclusive OR.
      0002D4 02 C2                  769         .word      LINK
                           0002D6   770 LINK	= . 
      0002D6 03                     771         .byte      3
      0002D7 58 4F 52               772         .ascii     "XOR"
      0002DA                        773 XORR:
      0002DA F6               [ 1]  774         LD A,(X)    ;D=w
      0002DB E8 02            [ 1]  775         XOR A,(2,X)
      0002DD E7 02            [ 1]  776         LD (2,X),A
      0002DF E6 01            [ 1]  777         LD A,(1,X)
      0002E1 E8 03            [ 1]  778         XOR A,(3,X)
      0002E3 E7 03            [ 1]  779         LD (3,X),A
      0002E5 1C 00 02         [ 2]  780         ADDW X,#2
      0002E8 81               [ 4]  781         RET
                                    782 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    783 ;       UM+     ( u u -- udsum )
                                    784 ;       Add two unsigned single
                                    785 ;       and return a double sum.
      0002E9 02 D6                  786         .word      LINK
                           0002EB   787 LINK	= . 
      0002EB 03                     788         .byte      3
      0002EC 55 4D 2B               789         .ascii     "UM+"
      0002EF                        790 UPLUS:
      0002EF A6 01            [ 1]  791         LD A,#1
      0002F1 90 93            [ 1]  792         LDW Y,X
      0002F3 90 EE 02         [ 2]  793         LDW Y,(2,Y)
      0002F6 90 BF 1C         [ 2]  794         LDW YTEMP,Y
      0002F9 90 93            [ 1]  795         LDW Y,X
      0002FB 90 FE            [ 2]  796         LDW Y,(Y)
      0002FD 72 B9 00 1C      [ 2]  797         ADDW Y,YTEMP
      000301 EF 02            [ 2]  798         LDW (2,X),Y
      000303 25 01            [ 1]  799         JRC     UPL1
      000305 4F               [ 1]  800         CLR A
      000306 E7 01            [ 1]  801 UPL1:   LD     (1,X),A
      000308 7F               [ 1]  802         CLR (X)
      000309 81               [ 4]  803         RET
                                    804 
                                    805 ;; System and user variables
                                    806 
                                    807 ;       doVAR   ( -- a )
                                    808 ;       Code for VARIABLE and CREATE.
      00030A 02 EB                  809         .word      LINK
                           00030C   810 LINK	= . 
      00030C 45                     811 	.byte      COMPO+5
      00030D 44 4F 56 41 52         812         .ascii     "DOVAR"
      000312                        813 DOVAR:
      000312 1D 00 02         [ 2]  814 	SUBW X,#2
      000315 90 85            [ 2]  815         POPW Y    ;get return addr (pfa)
      000317 FF               [ 2]  816         LDW (X),Y    ;push on stack
      000318 81               [ 4]  817         RET     ;go to RET of EXEC
                                    818 
                                    819 ;       BASE    ( -- a )
                                    820 ;       Radix base for numeric I/O.
      000319 03 0C                  821         .word      LINK        
                           00031B   822 LINK = . 
      00031B 04                     823         .byte      4
      00031C 42 41 53 45            824         .ascii     "BASE"
      000320                        825 BASE:
      000320 90 AE 00 06      [ 2]  826 	LDW Y,#UBASE 
      000324 1D 00 02         [ 2]  827 	SUBW X,#2
      000327 FF               [ 2]  828         LDW (X),Y
      000328 81               [ 4]  829         RET
                                    830 
                                    831 ;       tmp     ( -- a )
                                    832 ;       A temporary storage.
      000329 03 1B                  833         .word      LINK
                                    834         
                           00032B   835 LINK = . 
      00032B 03                     836 	.byte      3
      00032C 54 4D 50               837         .ascii     "TMP"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      00032F                        838 TEMP:
      00032F 90 AE 00 08      [ 2]  839 	LDW Y,#UTMP
      000333 1D 00 02         [ 2]  840 	SUBW X,#2
      000336 FF               [ 2]  841         LDW (X),Y
      000337 81               [ 4]  842         RET
                                    843 
                                    844 ;       >IN     ( -- a )
                                    845 ;        Hold parsing pointer.
      000338 03 2B                  846         .word      LINK
                           00033A   847 LINK = . 
      00033A 03                     848         .byte      3
      00033B 3E 49 4E               849         .ascii    ">IN"
      00033E                        850 INN:
      00033E 90 AE 00 0A      [ 2]  851 	LDW Y,#UINN 
      000342 1D 00 02         [ 2]  852 	SUBW X,#2
      000345 FF               [ 2]  853         LDW (X),Y
      000346 81               [ 4]  854         RET
                                    855 
                                    856 ;       #TIB    ( -- a )
                                    857 ;       Count in terminal input buffer.
      000347 03 3A                  858         .word      LINK
                           000349   859 LINK = . 
      000349 04                     860         .byte      4
      00034A 23 54 49 42            861         .ascii     "#TIB"
      00034E                        862 NTIB:
      00034E 90 AE 00 0C      [ 2]  863 	LDW Y,#UCTIB 
      000352 1D 00 02         [ 2]  864 	SUBW X,#2
      000355 FF               [ 2]  865         LDW (X),Y
      000356 81               [ 4]  866         RET
                                    867 
                                    868 ;       "EVAL   ( -- a )
                                    869 ;       Execution vector of EVAL.
      000357 03 49                  870         .word      LINK
                           000359   871 LINK = . 
      000359 05                     872         .byte      5
      00035A 27 45 56 41 4C         873         .ascii     "'EVAL"
      00035F                        874 TEVAL:
      00035F 90 AE 00 10      [ 2]  875 	LDW Y,#UINTER 
      000363 1D 00 02         [ 2]  876 	SUBW X,#2
      000366 FF               [ 2]  877         LDW (X),Y
      000367 81               [ 4]  878         RET
                                    879 
                                    880 ;       HLD     ( -- a )
                                    881 ;       Hold a pointer of output string.
      000368 03 59                  882         .word      LINK
                           00036A   883 LINK = . 
      00036A 03                     884         .byte      3
      00036B 48 4C 44               885         .ascii     "HLD"
      00036E                        886 HLD:
      00036E 90 AE 00 12      [ 2]  887 	LDW Y,#UHLD 
      000372 1D 00 02         [ 2]  888 	SUBW X,#2
      000375 FF               [ 2]  889         LDW (X),Y
      000376 81               [ 4]  890         RET
                                    891 
                                    892 ;       CONTEXT ( -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    893 ;       Start vocabulary search.
      000377 03 6A                  894         .word      LINK
                           000379   895 LINK = . 
      000379 07                     896         .byte      7
      00037A 43 4F 4E 54 45 58 54   897         .ascii     "CONTEXT"
      000381                        898 CNTXT:
      000381 90 AE 00 14      [ 2]  899 	LDW Y,#UCNTXT
      000385 1D 00 02         [ 2]  900 	SUBW X,#2
      000388 FF               [ 2]  901         LDW (X),Y
      000389 81               [ 4]  902         RET
                                    903 
                                    904 ;       CP      ( -- a )
                                    905 ;       Point to top of dictionary.
      00038A 03 79                  906         .word      LINK
                           00038C   907 LINK = . 
      00038C 02                     908         .byte      2
      00038D 43 50                  909         .ascii     "CP"
      00038F                        910 CPP:
      00038F 90 AE 00 16      [ 2]  911 	LDW Y,#UCP 
      000393 1D 00 02         [ 2]  912 	SUBW X,#2
      000396 FF               [ 2]  913         LDW (X),Y
      000397 81               [ 4]  914         RET
                                    915 
                                    916 ;       LAST    ( -- a )
                                    917 ;       Point to last name in dictionary.
      000398 03 8C                  918         .word      LINK
                           00039A   919 LINK = . 
      00039A 04                     920         .byte      4
      00039B 4C 41 53 54            921         .ascii     "LAST"
      00039F                        922 LAST:
      00039F 90 AE 00 18      [ 2]  923 	LDW Y,#ULAST 
      0003A3 1D 00 02         [ 2]  924 	SUBW X,#2
      0003A6 FF               [ 2]  925         LDW (X),Y
      0003A7 81               [ 4]  926         RET
                                    927 
                                    928 ;; Common functions
                                    929 
                                    930 ;       ?DUP    ( w -- w w | 0 )
                                    931 ;       Dup tos if its is not zero.
      0003A8 03 9A                  932         .word      LINK
                           0003AA   933 LINK = . 
      0003AA 04                     934         .byte      4
      0003AB 3F 44 55 50            935         .ascii     "?DUP"
      0003AF                        936 QDUP:
      0003AF 90 93            [ 1]  937         LDW Y,X
      0003B1 90 FE            [ 2]  938 	LDW Y,(Y)
      0003B3 27 04            [ 1]  939         JREQ     QDUP1
      0003B5 1D 00 02         [ 2]  940 	SUBW X,#2
      0003B8 FF               [ 2]  941         LDW (X),Y
      0003B9 81               [ 4]  942 QDUP1:  RET
                                    943 
                                    944 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                    945 ;       Rot 3rd item to top.
      0003BA 03 AA                  946         .word      LINK
                           0003BC   947 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      0003BC 03                     948         .byte      3
      0003BD 52 4F 54               949         .ascii     "ROT"
      0003C0                        950 ROT:
                           000001   951 .if PICATOUT_MOD
      0003C0 90 93            [ 1]  952         ldw y,x 
      0003C2 90 FE            [ 2]  953         ldw y,(y)
      0003C4 90 89            [ 2]  954         pushw y 
      0003C6 90 93            [ 1]  955         ldw y,x 
      0003C8 90 EE 04         [ 2]  956         ldw y,(4,y)
      0003CB FF               [ 2]  957         ldw (x),y 
      0003CC 90 93            [ 1]  958         ldw y,x 
      0003CE 90 EE 02         [ 2]  959         ldw y,(2,y)
      0003D1 EF 04            [ 2]  960         ldw (4,x),y 
      0003D3 90 85            [ 2]  961         popw y 
      0003D5 EF 02            [ 2]  962         ldw (2,x),y
      0003D7 81               [ 4]  963         ret 
                           000000   964 .else 
                                    965         LDW Y,X
                                    966 	LDW Y,(4,Y)
                                    967 	LDW YTEMP,Y
                                    968         LDW Y,X
                                    969         LDW Y,(2,Y)
                                    970         LDW XTEMP,Y
                                    971         LDW Y,X
                                    972         LDW Y,(Y)
                                    973         LDW (2,X),Y
                                    974         LDW Y,XTEMP
                                    975         LDW (4,X),Y
                                    976         LDW Y,YTEMP
                                    977         LDW (X),Y
                                    978         RET
                                    979 .endif 
                                    980 
                                    981 ;       2DROP   ( w w -- )
                                    982 ;       Discard two items on stack.
      0003D8 03 BC                  983         .word      LINK
                           0003DA   984 LINK = . 
      0003DA 05                     985         .byte      5
      0003DB 32 44 52 4F 50         986         .ascii     "2DROP"
      0003E0                        987 DDROP:
      0003E0 1C 00 04         [ 2]  988         ADDW X,#4
      0003E3 81               [ 4]  989         RET
                                    990 
                                    991 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                    992 ;       Duplicate top two items.
      0003E4 03 DA                  993         .word      LINK
                           0003E6   994 LINK = . 
      0003E6 04                     995         .byte      4
      0003E7 32 44 55 50            996         .ascii     "2DUP"
      0003EB                        997 DDUP:
      0003EB 1D 00 04         [ 2]  998         SUBW X,#4
      0003EE 90 93            [ 1]  999         LDW Y,X
      0003F0 90 EE 06         [ 2] 1000         LDW Y,(6,Y)
      0003F3 EF 02            [ 2] 1001         LDW (2,X),Y
      0003F5 90 93            [ 1] 1002         LDW Y,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      0003F7 90 EE 04         [ 2] 1003         LDW Y,(4,Y)
      0003FA FF               [ 2] 1004         LDW (X),Y
      0003FB 81               [ 4] 1005         RET
                                   1006 
                                   1007 ;       +       ( w w -- sum )
                                   1008 ;       Add top two items.
      0003FC 03 E6                 1009         .word      LINK
                           0003FE  1010 LINK = . 
      0003FE 01                    1011         .byte      1
      0003FF 2B                    1012         .ascii     "+"
      000400                       1013 PLUS:
      000400 90 93            [ 1] 1014         LDW Y,X
      000402 90 FE            [ 2] 1015         LDW Y,(Y)
      000404 90 BF 1C         [ 2] 1016         LDW YTEMP,Y
      000407 1C 00 02         [ 2] 1017         ADDW X,#2
      00040A 90 93            [ 1] 1018         LDW Y,X
      00040C 90 FE            [ 2] 1019         LDW Y,(Y)
      00040E 72 B9 00 1C      [ 2] 1020         ADDW Y,YTEMP
      000412 FF               [ 2] 1021         LDW (X),Y
      000413 81               [ 4] 1022         RET
                                   1023 
                                   1024 ;       NOT     ( w -- w )
                                   1025 ;       One's complement of tos.
      000414 03 FE                 1026         .word      LINK
                           000416  1027 LINK = . 
      000416 03                    1028         .byte      3
      000417 4E 4F 54              1029         .ascii     "NOT"
      00041A                       1030 INVER:
      00041A 90 93            [ 1] 1031         LDW Y,X
      00041C 90 FE            [ 2] 1032         LDW Y,(Y)
      00041E 90 53            [ 2] 1033         CPLW Y
      000420 FF               [ 2] 1034         LDW (X),Y
      000421 81               [ 4] 1035         RET
                                   1036 
                                   1037 ;       NEGATE  ( n -- -n )
                                   1038 ;       Two's complement of tos.
      000422 04 16                 1039         .word      LINK
                           000424  1040 LINK = . 
      000424 06                    1041         .byte      6
      000425 4E 45 47 41 54 45     1042         .ascii     "NEGATE"
      00042B                       1043 NEGAT:
      00042B 90 93            [ 1] 1044         LDW Y,X
      00042D 90 FE            [ 2] 1045         LDW Y,(Y)
      00042F 90 50            [ 2] 1046         NEGW Y
      000431 FF               [ 2] 1047         LDW (X),Y
      000432 81               [ 4] 1048         RET
                                   1049 
                                   1050 ;       DNEGATE ( d -- -d )
                                   1051 ;       Two's complement of top double.
      000433 04 24                 1052         .word      LINK
                           000435  1053 LINK = . 
      000435 07                    1054         .byte      7
      000436 44 4E 45 47 41 54 45  1055         .ascii     "DNEGATE"
      00043D                       1056 DNEGA:
      00043D 90 93            [ 1] 1057         LDW Y,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      00043F 90 FE            [ 2] 1058 	LDW Y,(Y)
      000441 90 53            [ 2] 1059         CPLW Y     
      000443 90 BF 1C         [ 2] 1060 	LDW YTEMP,Y
      000446 90 93            [ 1] 1061         LDW Y,X
      000448 90 EE 02         [ 2] 1062         LDW Y,(2,Y)
      00044B 90 53            [ 2] 1063         CPLW Y
      00044D 90 5C            [ 2] 1064         INCW Y
      00044F EF 02            [ 2] 1065         LDW (2,X),Y
      000451 90 BE 1C         [ 2] 1066         LDW Y,YTEMP
      000454 24 02            [ 1] 1067         JRNC DN1 
      000456 90 5C            [ 2] 1068         INCW Y
      000458 FF               [ 2] 1069 DN1:    LDW (X),Y
      000459 81               [ 4] 1070         RET
                                   1071 
                                   1072 ;       -       ( n1 n2 -- n1-n2 )
                                   1073 ;       Subtraction.
      00045A 04 35                 1074         .word      LINK
                           00045C  1075 LINK = . 
      00045C 01                    1076         .byte      1
      00045D 2D                    1077         .ascii     "-"
      00045E                       1078 SUBB:
      00045E 90 93            [ 1] 1079         LDW Y,X
      000460 90 FE            [ 2] 1080         LDW Y,(Y)
      000462 90 BF 1C         [ 2] 1081         LDW YTEMP,Y
      000465 1C 00 02         [ 2] 1082         ADDW X,#2
      000468 90 93            [ 1] 1083         LDW Y,X
      00046A 90 FE            [ 2] 1084         LDW Y,(Y)
      00046C 72 B2 00 1C      [ 2] 1085         SUBW Y,YTEMP
      000470 FF               [ 2] 1086         LDW (X),Y
      000471 81               [ 4] 1087         RET
                                   1088 
                                   1089 ;       ABS     ( n -- n )
                                   1090 ;       Return  absolute value of n.
      000472 04 5C                 1091         .word      LINK
                           000474  1092 LINK = . 
      000474 03                    1093         .byte      3
      000475 41 42 53              1094         .ascii     "ABS"
      000478                       1095 ABSS:
      000478 90 93            [ 1] 1096         LDW Y,X
      00047A 90 FE            [ 2] 1097 	LDW Y,(Y)
      00047C 2A 03            [ 1] 1098         JRPL     AB1     ;negate:
      00047E 90 50            [ 2] 1099         NEGW     Y     ;else negate hi byte
      000480 FF               [ 2] 1100         LDW (X),Y
      000481 81               [ 4] 1101 AB1:    RET
                                   1102 
                                   1103 ;       =       ( w w -- t )
                                   1104 ;       Return true if top two are =al.
      000482 04 74                 1105         .word      LINK
                           000484  1106 LINK = . 
      000484 01                    1107         .byte      1
      000485 3D                    1108         .ascii     "="
      000486                       1109 EQUAL:
      000486 A6 FF            [ 1] 1110         LD A,#0xFF  ;true
      000488 90 93            [ 1] 1111         LDW Y,X    ;D = n2
      00048A 90 FE            [ 2] 1112         LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      00048C 90 BF 1C         [ 2] 1113         LDW YTEMP,Y
      00048F 1C 00 02         [ 2] 1114         ADDW X,#2
      000492 90 93            [ 1] 1115         LDW Y,X
      000494 90 FE            [ 2] 1116         LDW Y,(Y)
      000496 90 B3 1C         [ 2] 1117         CPW Y,YTEMP     ;if n2 <> n1
      000499 27 01            [ 1] 1118         JREQ     EQ1
      00049B 4F               [ 1] 1119         CLR A
      00049C F7               [ 1] 1120 EQ1:    LD (X),A
      00049D E7 01            [ 1] 1121         LD (1,X),A
      00049F 81               [ 4] 1122 	RET     
                                   1123 
                                   1124 ;       U<      ( u u -- t )
                                   1125 ;       Unsigned compare of top two items.
      0004A0 04 84                 1126         .word      LINK
                           0004A2  1127 LINK = . 
      0004A2 02                    1128         .byte      2
      0004A3 55 3C                 1129         .ascii     "U<"
      0004A5                       1130 ULESS:
      0004A5 A6 FF            [ 1] 1131         LD A,#0xFF  ;true
      0004A7 90 93            [ 1] 1132         LDW Y,X    ;D = n2
      0004A9 90 FE            [ 2] 1133         LDW Y,(Y)
      0004AB 90 BF 1C         [ 2] 1134         LDW YTEMP,Y
      0004AE 1C 00 02         [ 2] 1135         ADDW X,#2
      0004B1 90 93            [ 1] 1136         LDW Y,X
      0004B3 90 FE            [ 2] 1137         LDW Y,(Y)
      0004B5 90 B3 1C         [ 2] 1138         CPW Y,YTEMP     ;if n2 <> n1
      0004B8 25 01            [ 1] 1139         JRULT     ULES1
      0004BA 4F               [ 1] 1140         CLR A
      0004BB F7               [ 1] 1141 ULES1:  LD (X),A
      0004BC E7 01            [ 1] 1142         LD (1,X),A
      0004BE 81               [ 4] 1143 	RET     
                                   1144 
                                   1145 ;       <       ( n1 n2 -- t )
                                   1146 ;       Signed compare of top two items.
      0004BF 04 A2                 1147         .word      LINK
                           0004C1  1148 LINK = . 
      0004C1 01                    1149         .byte      1
      0004C2 3C                    1150         .ascii     "<"
      0004C3                       1151 LESS:
      0004C3 A6 FF            [ 1] 1152         LD A,#0xFF  ;true
      0004C5 90 93            [ 1] 1153         LDW Y,X    ;D = n2
      0004C7 90 FE            [ 2] 1154         LDW Y,(Y)
      0004C9 90 BF 1C         [ 2] 1155         LDW YTEMP,Y
      0004CC 1C 00 02         [ 2] 1156         ADDW X,#2
      0004CF 90 93            [ 1] 1157         LDW Y,X
      0004D1 90 FE            [ 2] 1158         LDW Y,(Y)
      0004D3 90 B3 1C         [ 2] 1159         CPW Y,YTEMP     ;if n2 <> n1
      0004D6 2F 01            [ 1] 1160         JRSLT     LT1
      0004D8 4F               [ 1] 1161         CLR A
      0004D9 F7               [ 1] 1162 LT1:    LD (X),A
      0004DA E7 01            [ 1] 1163         LD (1,X),A
      0004DC 81               [ 4] 1164 	RET     
                                   1165 
                                   1166 ;       MAX     ( n n -- n )
                                   1167 ;       Return greater of two top items.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      0004DD 04 C1                 1168         .word      LINK
                           0004DF  1169 LINK = . 
      0004DF 03                    1170         .byte      3
      0004E0 4D 41 58              1171         .ascii     "MAX"
      0004E3                       1172 MAX:
      0004E3 90 93            [ 1] 1173         LDW Y,X    ;D = n2
      0004E5 90 EE 02         [ 2] 1174         LDW Y,(2,Y)
      0004E8 90 BF 1C         [ 2] 1175         LDW YTEMP,Y
      0004EB 90 93            [ 1] 1176         LDW Y,X
      0004ED 90 FE            [ 2] 1177         LDW Y,(Y)
      0004EF 90 B3 1C         [ 2] 1178         CPW Y,YTEMP     ;if n2 <> n1
      0004F2 2F 02            [ 1] 1179         JRSLT     MAX1
      0004F4 EF 02            [ 2] 1180         LDW (2,X),Y
      0004F6 1C 00 02         [ 2] 1181 MAX1:   ADDW X,#2
      0004F9 81               [ 4] 1182 	RET     
                                   1183 
                                   1184 ;       MIN     ( n n -- n )
                                   1185 ;       Return smaller of top two items.
      0004FA 04 DF                 1186         .word      LINK
                           0004FC  1187 LINK = . 
      0004FC 03                    1188         .byte      3
      0004FD 4D 49 4E              1189         .ascii     "MIN"
      000500                       1190 MIN:
      000500 90 93            [ 1] 1191         LDW Y,X    ;D = n2
      000502 90 EE 02         [ 2] 1192         LDW Y,(2,Y)
      000505 90 BF 1C         [ 2] 1193         LDW YTEMP,Y
      000508 90 93            [ 1] 1194         LDW Y,X
      00050A 90 FE            [ 2] 1195         LDW Y,(Y)
      00050C 90 B3 1C         [ 2] 1196         CPW Y,YTEMP     ;if n2 <> n1
      00050F 2C 02            [ 1] 1197         JRSGT     MIN1
      000511 EF 02            [ 2] 1198         LDW (2,X),Y
      000513 1C 00 02         [ 2] 1199 MIN1:	ADDW X,#2
      000516 81               [ 4] 1200 	RET     
                                   1201 
                                   1202 ;       WITHIN  ( u ul uh -- t )
                                   1203 ;       Return true if u is within
                                   1204 ;       range of ul and uh. ( ul <= u < uh )
      000517 04 FC                 1205         .word      LINK
                           000519  1206 LINK = . 
      000519 06                    1207         .byte      6
      00051A 57 49 54 48 49 4E     1208         .ascii     "WITHIN"
      000520                       1209 WITHI:
      000520 CD 02 8F         [ 4] 1210         CALL     OVER
      000523 CD 04 5E         [ 4] 1211         CALL     SUBB
      000526 CD 02 2E         [ 4] 1212         CALL     TOR
      000529 CD 04 5E         [ 4] 1213         CALL     SUBB
      00052C CD 02 0F         [ 4] 1214         CALL     RFROM
      00052F CC 04 A5         [ 2] 1215         JP     ULESS
                                   1216 
                                   1217 ;; Divide
                                   1218 
                                   1219 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1220 ;       Unsigned divide of a double by a
                                   1221 ;       single. Return mod and quotient.
      000532 05 19                 1222         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                           000534  1223 LINK = . 
      000534 06                    1224         .byte      6
      000535 55 4D 2F 4D 4F 44     1225         .ascii     "UM/MOD"
      00053B                       1226 UMMOD:
      00053B BF 1A            [ 2] 1227 	LDW XTEMP,X	; save stack pointer
      00053D FE               [ 2] 1228 	LDW X,(X)	; un
      00053E BF 1C            [ 2] 1229 	LDW YTEMP,X     ; save un
      000540 90 BE 1A         [ 2] 1230 	LDW Y,XTEMP	; stack pointer
      000543 90 EE 04         [ 2] 1231 	LDW Y,(4,Y)     ; Y=udl
      000546 BE 1A            [ 2] 1232 	LDW X,XTEMP
      000548 EE 02            [ 2] 1233 	LDW X,(2,X)	; X=udh
      00054A B3 1C            [ 2] 1234 	CPW X,YTEMP
      00054C 23 0F            [ 2] 1235 	JRULE MMSM1
      00054E BE 1A            [ 2] 1236 	LDW X,XTEMP
      000550 1C 00 02         [ 2] 1237 	ADDW X,#2	; pop off 1 level
      000553 90 AE FF FF      [ 2] 1238 	LDW Y,#0xFFFF
      000557 FF               [ 2] 1239 	LDW (X),Y
      000558 90 5F            [ 1] 1240 	CLRW Y
      00055A EF 02            [ 2] 1241 	LDW (2,X),Y
      00055C 81               [ 4] 1242 	RET
      00055D                       1243 MMSM1:
                           000001  1244 .if  PICATOUT_MOD 
                                   1245 ; take advantage of divw x,y when udh==0
      00055D 5D               [ 2] 1246         tnzw x  ; is udh==0?
      00055E 26 11            [ 1] 1247         jrne MMSM2 
      000560 93               [ 1] 1248         ldw x,y    ;udl 
      000561 90 BE 1C         [ 2] 1249         ldw y,YTEMP ; divisor 
      000564 65               [ 2] 1250         divw x,y 
      000565 89               [ 2] 1251         pushw x     ; quotient 
      000566 BE 1A            [ 2] 1252         ldw x,XTEMP 
      000568 1C 00 02         [ 2] 1253         addw x,#CELLL 
      00056B EF 02            [ 2] 1254         ldw (2,x),y  ; ur
      00056D 90 85            [ 2] 1255         popw y 
      00056F FF               [ 2] 1256         ldw (x),y ; uq 
      000570 81               [ 4] 1257         ret 
      000571                       1258 MMSM2:        
                                   1259 .endif 
      000571 A6 11            [ 1] 1260 	LD A,#17	; loop count
      000573                       1261 MMSM3:
      000573 B3 1C            [ 2] 1262 	CPW X,YTEMP	; compare udh to un
      000575 25 04            [ 1] 1263 	JRULT MMSM4	; can't subtract
      000577 72 B0 00 1C      [ 2] 1264 	SUBW X,YTEMP	; can subtract
      00057B                       1265 MMSM4:
      00057B 8C               [ 1] 1266 	CCF	; quotient bit
      00057C 90 59            [ 2] 1267 	RLCW Y	; rotate into quotient
      00057E 59               [ 2] 1268 	RLCW X	; rotate into remainder
      00057F 4A               [ 1] 1269 	DEC A	; repeat
      000580 22 F1            [ 1] 1270 	JRUGT MMSM3
      000582 57               [ 2] 1271 	SRAW X
      000583 BF 1C            [ 2] 1272 	LDW YTEMP,X	; done, save remainder
      000585 BE 1A            [ 2] 1273 	LDW X,XTEMP
      000587 1C 00 02         [ 2] 1274 	ADDW X,#2	; drop
      00058A FF               [ 2] 1275 	LDW (X),Y
      00058B 90 BE 1C         [ 2] 1276 	LDW Y,YTEMP	; save quotient
      00058E EF 02            [ 2] 1277 	LDW (2,X),Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      000590 81               [ 4] 1278 	RET
                                   1279 	
                                   1280 ;       M/MOD   ( d n -- r q )
                                   1281 ;       Signed floored divide of double by
                                   1282 ;       single. Return mod and quotient.
      000591 05 34                 1283         .word      LINK
                           000593  1284 LINK = . 
      000593 05                    1285         .byte      5
      000594 4D 2F 4D 4F 44        1286         .ascii     "M/MOD"
      000599                       1287 MSMOD:  
      000599 CD 02 65         [ 4] 1288         CALL	DUPP
      00059C CD 02 9E         [ 4] 1289         CALL	ZLESS
      00059F CD 02 65         [ 4] 1290         CALL	DUPP
      0005A2 CD 02 2E         [ 4] 1291         CALL	TOR
      0005A5 CD 01 69         [ 4] 1292         CALL	QBRAN
      0005A8 05 B6                 1293         .word	MMOD1
      0005AA CD 04 2B         [ 4] 1294         CALL	NEGAT
      0005AD CD 02 2E         [ 4] 1295         CALL	TOR
      0005B0 CD 04 3D         [ 4] 1296         CALL	DNEGA
      0005B3 CD 02 0F         [ 4] 1297         CALL	RFROM
      0005B6 CD 02 2E         [ 4] 1298 MMOD1:	CALL	TOR
      0005B9 CD 02 65         [ 4] 1299         CALL	DUPP
      0005BC CD 02 9E         [ 4] 1300         CALL	ZLESS
      0005BF CD 01 69         [ 4] 1301         CALL	QBRAN
      0005C2 05 CA                 1302         .word	MMOD2
      0005C4 CD 02 22         [ 4] 1303         CALL	RAT
      0005C7 CD 04 00         [ 4] 1304         CALL	PLUS
      0005CA CD 02 0F         [ 4] 1305 MMOD2:	CALL	RFROM
      0005CD CD 05 3B         [ 4] 1306         CALL	UMMOD
      0005D0 CD 02 0F         [ 4] 1307         CALL	RFROM
      0005D3 CD 01 69         [ 4] 1308         CALL	QBRAN
      0005D6 05 E1                 1309         .word	MMOD3
      0005D8 CD 02 75         [ 4] 1310         CALL	SWAPP
      0005DB CD 04 2B         [ 4] 1311         CALL	NEGAT
      0005DE CD 02 75         [ 4] 1312         CALL	SWAPP
      0005E1 81               [ 4] 1313 MMOD3:	RET
                                   1314 
                                   1315 ;       /MOD    ( n n -- r q )
                                   1316 ;       Signed divide. Return mod and quotient.
      0005E2 05 93                 1317         .word      LINK
                           0005E4  1318 LINK = . 
      0005E4 04                    1319         .byte      4
      0005E5 2F 4D 4F 44           1320         .ascii     "/MOD"
      0005E9                       1321 SLMOD:
      0005E9 CD 02 8F         [ 4] 1322         CALL	OVER
      0005EC CD 02 9E         [ 4] 1323         CALL	ZLESS
      0005EF CD 02 75         [ 4] 1324         CALL	SWAPP
      0005F2 CC 05 99         [ 2] 1325         JP	MSMOD
                                   1326 
                                   1327 ;       MOD     ( n n -- r )
                                   1328 ;       Signed divide. Return mod only.
      0005F5 05 E4                 1329         .word      LINK
                           0005F7  1330 LINK = . 
      0005F7 03                    1331         .byte      3
      0005F8 4D 4F 44              1332         .ascii     "MOD"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      0005FB                       1333 MODD:
      0005FB CD 05 E9         [ 4] 1334 	CALL	SLMOD
      0005FE CC 02 5B         [ 2] 1335 	JP	DROP
                                   1336 
                                   1337 ;       /       ( n n -- q )
                                   1338 ;       Signed divide. Return quotient only.
      000601 05 F7                 1339         .word      LINK
                           000603  1340 LINK = . 
      000603 01                    1341         .byte      1
      000604 2F                    1342         .ascii     "/"
      000605                       1343 SLASH:
      000605 CD 05 E9         [ 4] 1344         CALL	SLMOD
      000608 CD 02 75         [ 4] 1345         CALL	SWAPP
      00060B CC 02 5B         [ 2] 1346         JP	DROP
                                   1347 
                                   1348 ;; Multiply
                                   1349 
                                   1350 ;       UM*     ( u u -- ud )
                                   1351 ;       Unsigned multiply. Return double product.
      00060E 06 03                 1352         .word      LINK
                           000610  1353 LINK = . 
      000610 03                    1354         .byte      3
      000611 55 4D 2A              1355         .ascii     "UM*"
      000614                       1356 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
                           000001  1357 .if PICATOUT_MOD 
                                   1358 ; take advantage of SP addressing modes
                                   1359 ; these PRODx in RAM are not required
                                   1360 ; the product is kept on stack as local variable 
                                   1361         ;; bytes offset on data stack 
                           000002  1362         da=2 
                           000003  1363         db=3 
                           000000  1364         dc=0 
                           000001  1365         dd=1 
                                   1366         ;; product bytes offset on return stack 
                           000001  1367         UD1=1  ; ud bits 31..24
                           000002  1368         UD2=2  ; ud bits 23..16
                           000003  1369         UD3=3  ; ud bits 15..8 
                           000004  1370         UD4=4  ; ud bits 7..0 
                                   1371         ;; local variable for product set to zero   
      000614 90 5F            [ 1] 1372         clrw y 
      000616 90 89            [ 2] 1373         pushw y  ; bits 15..0
      000618 90 89            [ 2] 1374         pushw y  ; bits 31..16 
      00061A E6 03            [ 1] 1375         ld a,(db,x) ; b 
      00061C 90 97            [ 1] 1376         ld yl,a 
      00061E E6 01            [ 1] 1377         ld a,(dd,x)   ; d
      000620 90 42            [ 4] 1378         mul y,a    ; b*d  
      000622 17 03            [ 2] 1379         ldw (UD3,sp),y ; lowest weight product 
      000624 E6 03            [ 1] 1380         ld a,(db,x)
      000626 90 97            [ 1] 1381         ld yl,a 
      000628 E6 00            [ 1] 1382         ld a,(dc,x)
      00062A 90 42            [ 4] 1383         mul y,a  ; b*c 
                                   1384         ;;; do the partial sum 
      00062C 72 F9 02         [ 2] 1385         addw y,(UD2,sp)
      00062F 4F               [ 1] 1386         clr a 
      000630 49               [ 1] 1387         rlc a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      000631 6B 01            [ 1] 1388         ld (UD1,sp),a 
      000633 17 02            [ 2] 1389         ldw (UD2,sp),y 
      000635 E6 02            [ 1] 1390         ld a,(da,x)
      000637 90 97            [ 1] 1391         ld yl,a 
      000639 E6 01            [ 1] 1392         ld a,(dd,x)
      00063B 90 42            [ 4] 1393         mul y,a   ; a*d 
                                   1394         ;; do partial sum 
      00063D 72 F9 02         [ 2] 1395         addw y,(UD2,sp)
      000640 4F               [ 1] 1396         clr a 
      000641 19 01            [ 1] 1397         adc a,(UD1,sp)
      000643 6B 01            [ 1] 1398         ld (UD1,sp),a  
      000645 17 02            [ 2] 1399         ldw (UD2,sp),y 
      000647 E6 02            [ 1] 1400         ld a,(da,x)
      000649 90 97            [ 1] 1401         ld yl,a 
      00064B E6 00            [ 1] 1402         ld a,(dc,x)
      00064D 90 42            [ 4] 1403         mul y,a  ;  a*c highest weight product 
                                   1404         ;;; do partial sum 
      00064F 72 F9 01         [ 2] 1405         addw y,(UD1,sp)
      000652 FF               [ 2] 1406         ldw (x),y  ; udh 
      000653 16 03            [ 2] 1407         ldw y,(UD3,sp)
      000655 EF 02            [ 2] 1408         ldw (2,x),y  ; udl  
      000657 5B 04            [ 2] 1409         addw sp,#4 ; drop local variable 
      000659 81               [ 4] 1410         ret  
                           000000  1411 .else
                                   1412 	LD A,(2,X)	; b
                                   1413 	LD YL,A
                                   1414 	LD A,(X)	; d
                                   1415 	MUL Y,A
                                   1416 	LDW PROD1,Y
                                   1417 	LD A,(3,X)	; a
                                   1418 	LD YL,A
                                   1419 	LD A,(X)	; d
                                   1420 	MUL Y,A
                                   1421 	LDW PROD2,Y
                                   1422 	LD A,(2,X)	; b
                                   1423 	LD YL,A
                                   1424 	LD A,(1,X)	; c
                                   1425 	MUL Y,A
                                   1426 	LDW PROD3,Y
                                   1427 	LD A,(3,X)	; a
                                   1428 	LD YL,A
                                   1429 	LD A,(1,X)	; c
                                   1430 	MUL Y,A	; least signifiant product
                                   1431 	CLR A
                                   1432 	RRWA Y
                                   1433 	LD (3,X),A	; store least significant byte
                                   1434 	ADDW Y,PROD3
                                   1435 	CLR A
                                   1436 	ADC A,#0	; save carry
                                   1437 	LD CARRY,A
                                   1438 	ADDW Y,PROD2
                                   1439 	LD A,CARRY
                                   1440 	ADC A,#0	; add 2nd carry
                                   1441 	LD CARRY,A
                                   1442 	CLR A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                                   1443 	RRWA Y
                                   1444 	LD (2,X),A	; 2nd product byte
                                   1445 	ADDW Y,PROD1
                                   1446 	RRWA Y
                                   1447 	LD (1,X),A	; 3rd product byte
                                   1448 	RRWA Y  	; 4th product byte now in A
                                   1449 	ADC A,CARRY	; fill in carry bits
                                   1450 	LD (X),A
                                   1451 	RET
                                   1452 .endif 
                                   1453 
                                   1454 
                                   1455 ;       *       ( n n -- n )
                                   1456 ;       Signed multiply. Return single product.
      00065A 06 10                 1457         .word      LINK
                           00065C  1458 LINK = . 
      00065C 01                    1459         .byte      1
      00065D 2A                    1460         .ascii     "*"
      00065E                       1461 STAR:
      00065E CD 06 14         [ 4] 1462 	CALL	UMSTA
      000661 CC 02 5B         [ 2] 1463 	JP	DROP
                                   1464 
                                   1465 ;       M*      ( n n -- d )
                                   1466 ;       Signed multiply. Return double product.
      000664 06 5C                 1467         .word      LINK
                           000666  1468 LINK = . 
      000666 02                    1469         .byte      2
      000667 4D 2A                 1470         .ascii     "M*"
      000669                       1471 MSTAR:      
      000669 CD 03 EB         [ 4] 1472         CALL	DDUP
      00066C CD 02 DA         [ 4] 1473         CALL	XORR
      00066F CD 02 9E         [ 4] 1474         CALL	ZLESS
      000672 CD 02 2E         [ 4] 1475         CALL	TOR
      000675 CD 04 78         [ 4] 1476         CALL	ABSS
      000678 CD 02 75         [ 4] 1477         CALL	SWAPP
      00067B CD 04 78         [ 4] 1478         CALL	ABSS
      00067E CD 06 14         [ 4] 1479         CALL	UMSTA
      000681 CD 02 0F         [ 4] 1480         CALL	RFROM
      000684 CD 01 69         [ 4] 1481         CALL	QBRAN
      000687 06 8C                 1482         .word	MSTA1
      000689 CD 04 3D         [ 4] 1483         CALL	DNEGA
      00068C 81               [ 4] 1484 MSTA1:	RET
                                   1485 
                                   1486 ;       . /MOD   ( n1 n2 n3 -- r q )
                                   1487 ;       Multiply n1 and n2, then divide
                                   1488 ;       by n3. Return mod and quotient.
      00068D 06 66                 1489         .word      LINK
                           00068F  1490 LINK = . 
      00068F 05                    1491         .byte      5
      000690 2A 2F 4D 4F 44        1492         .ascii     "*/MOD"
      000695                       1493 SSMOD:
      000695 CD 02 2E         [ 4] 1494         CALL     TOR
      000698 CD 06 69         [ 4] 1495         CALL     MSTAR
      00069B CD 02 0F         [ 4] 1496         CALL     RFROM
      00069E CC 05 99         [ 2] 1497         JP     MSMOD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                   1498 
                                   1499 ;       */      ( n1 n2 n3 -- q )
                                   1500 ;       Multiply n1 by n2, then divide
                                   1501 ;       by n3. Return quotient only.
      0006A1 06 8F                 1502         .word      LINK
                           0006A3  1503 LINK = . 
      0006A3 02                    1504         .byte      2
      0006A4 2A 2F                 1505         .ascii     "*/"
      0006A6                       1506 STASL:
      0006A6 CD 06 95         [ 4] 1507         CALL	SSMOD
      0006A9 CD 02 75         [ 4] 1508         CALL	SWAPP
      0006AC CC 02 5B         [ 2] 1509         JP	DROP
                                   1510 
                                   1511 ;; Miscellaneous
                                   1512 
                                   1513 ;       CELL+   ( a -- a )
                                   1514 ;       Add cell size in byte to address.
      0006AF 06 A3                 1515         .word      LINK
                           0006B1  1516 LINK = . 
      0006B1 02                    1517         .byte       2
      0006B2 32 2B                 1518         .ascii     "2+"
      0006B4                       1519 CELLP:
      0006B4 90 93            [ 1] 1520         LDW Y,X
      0006B6 90 FE            [ 2] 1521 	LDW Y,(Y)
      0006B8 72 A9 00 02      [ 2] 1522         ADDW Y,#CELLL 
      0006BC FF               [ 2] 1523         LDW (X),Y
      0006BD 81               [ 4] 1524         RET
                                   1525 
                                   1526 ;       CELL-   ( a -- a )
                                   1527 ;       Subtract 2 from address.
      0006BE 06 B1                 1528         .word      LINK
                           0006C0  1529 LINK = . 
      0006C0 02                    1530         .byte       2
      0006C1 32 2D                 1531         .ascii     "2-"
      0006C3                       1532 CELLM:
      0006C3 90 93            [ 1] 1533         LDW Y,X
      0006C5 90 FE            [ 2] 1534 	LDW Y,(Y)
      0006C7 72 A2 00 02      [ 2] 1535         SUBW Y,#CELLL
      0006CB FF               [ 2] 1536         LDW (X),Y
      0006CC 81               [ 4] 1537         RET
                                   1538 
                                   1539 ;       CELLS   ( n -- n )
                                   1540 ;       Multiply tos by 2.
      0006CD 06 C0                 1541         .word      LINK
                           0006CF  1542 LINK = . 
      0006CF 02                    1543         .byte       2
      0006D0 32 2A                 1544         .ascii     "2*"
      0006D2                       1545 CELLS:
      0006D2 90 93            [ 1] 1546         LDW Y,X
      0006D4 90 FE            [ 2] 1547 	LDW Y,(Y)
      0006D6 90 58            [ 2] 1548         SLAW Y
      0006D8 FF               [ 2] 1549         LDW (X),Y
      0006D9 81               [ 4] 1550         RET
                                   1551 
                                   1552 ;       1+      ( a -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                   1553 ;       Add cell size in byte to address.
      0006DA 06 CF                 1554         .word      LINK
                           0006DC  1555 LINK = . 
      0006DC 02                    1556         .byte      2
      0006DD 31 2B                 1557         .ascii     "1+"
      0006DF                       1558 ONEP:
      0006DF 90 93            [ 1] 1559         LDW Y,X
      0006E1 90 FE            [ 2] 1560 	LDW Y,(Y)
      0006E3 90 5C            [ 2] 1561         INCW Y
      0006E5 FF               [ 2] 1562         LDW (X),Y
      0006E6 81               [ 4] 1563         RET
                                   1564 
                                   1565 ;       1-      ( a -- a )
                                   1566 ;       Subtract 2 from address.
      0006E7 06 DC                 1567         .word      LINK
                           0006E9  1568 LINK = . 
      0006E9 02                    1569         .byte      2
      0006EA 31 2D                 1570         .ascii     "1-"
      0006EC                       1571 ONEM:
      0006EC 90 93            [ 1] 1572         LDW Y,X
      0006EE 90 FE            [ 2] 1573 	LDW Y,(Y)
      0006F0 90 5A            [ 2] 1574         DECW Y
      0006F2 FF               [ 2] 1575         LDW (X),Y
      0006F3 81               [ 4] 1576         RET
                                   1577 
                                   1578 ;       2/      ( n -- n )
                                   1579 ;       Multiply tos by 2.
      0006F4 06 E9                 1580         .word      LINK
                           0006F6  1581 LINK = . 
      0006F6 02                    1582         .byte      2
      0006F7 32 2F                 1583         .ascii     "2/"
      0006F9                       1584 TWOSL:
      0006F9 90 93            [ 1] 1585         LDW Y,X
      0006FB 90 FE            [ 2] 1586 	LDW Y,(Y)
      0006FD 90 57            [ 2] 1587         SRAW Y
      0006FF FF               [ 2] 1588         LDW (X),Y
      000700 81               [ 4] 1589         RET
                                   1590 
                                   1591 ;       BL      ( -- 32 )
                                   1592 ;       Return 32,  blank character.
      000701 06 F6                 1593         .word      LINK
                           000703  1594 LINK = . 
      000703 02                    1595         .byte      2
      000704 42 4C                 1596         .ascii     "BL"
      000706                       1597 BLANK:
      000706 1D 00 02         [ 2] 1598         SUBW X,#2
      000709 90 AE 00 20      [ 2] 1599 	LDW Y,#32
      00070D FF               [ 2] 1600         LDW (X),Y
      00070E 81               [ 4] 1601         RET
                                   1602 
                                   1603 ;         0     ( -- 0)
                                   1604 ;         Return 0.
      00070F 07 03                 1605         .word      LINK
                           000711  1606 LINK = . 
      000711 01                    1607         .byte       1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      000712 30                    1608         .ascii     "0"
      000713                       1609 ZERO:
      000713 1D 00 02         [ 2] 1610         SUBW X,#2
      000716 90 5F            [ 1] 1611 	CLRW Y
      000718 FF               [ 2] 1612         LDW (X),Y
      000719 81               [ 4] 1613         RET
                                   1614 
                                   1615 ;         1     ( -- 1)
                                   1616 ;         Return 1.
      00071A 07 11                 1617         .word      LINK
                           00071C  1618 LINK = . 
      00071C 01                    1619         .byte       1
      00071D 31                    1620         .ascii     "1"
      00071E                       1621 ONE:
      00071E 1D 00 02         [ 2] 1622         SUBW X,#2
      000721 90 AE 00 01      [ 2] 1623 	LDW Y,#1
      000725 FF               [ 2] 1624         LDW (X),Y
      000726 81               [ 4] 1625         RET
                                   1626 
                                   1627 ;         -1    ( -- -1)
                                   1628 ;         Return 32,  blank character.
      000727 07 1C                 1629         .word      LINK
                           000729  1630 LINK = . 
      000729 02                    1631         .byte       2
      00072A 2D 31                 1632         .ascii     "-1"
      00072C                       1633 MONE:
      00072C 1D 00 02         [ 2] 1634         SUBW X,#2
      00072F 90 AE FF FF      [ 2] 1635 	LDW Y,#0xFFFF
      000733 FF               [ 2] 1636         LDW (X),Y
      000734 81               [ 4] 1637         RET
                                   1638 
                                   1639 ;       >CHAR   ( c -- c )
                                   1640 ;       Filter non-printing characters.
      000735 07 29                 1641         .word      LINK
                           000737  1642 LINK = . 
      000737 05                    1643         .byte      5
      000738 3E 43 48 41 52        1644         .ascii     ">CHAR"
      00073D                       1645 TCHAR:
                           000001  1646 .if CONVERT_TO_CODE
      00073D E6 01            [ 1] 1647         ld a,(1,x)
      00073F A1 20            [ 1] 1648         cp a,#32  
      000741 2B 05            [ 1] 1649         jrmi 1$ 
      000743 A1 7F            [ 1] 1650         cp a,#127 
      000745 2A 01            [ 1] 1651         jrpl 1$ 
      000747 81               [ 4] 1652         ret 
      000748 A6 5F            [ 1] 1653 1$:     ld a,#'_ 
      00074A E7 01            [ 1] 1654         ld (1,x),a 
      00074C 81               [ 4] 1655         ret 
                           000000  1656 .else
                                   1657         CALL     DOLIT
                                   1658         .word       0x7F
                                   1659         CALL     ANDD
                                   1660         CALL     DUPP    ;mask msb
                                   1661         CALL     DOLIT
                                   1662         .word      127
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                   1663         CALL     BLANK
                                   1664         CALL     WITHI   ;check for printable
                                   1665         CALL     QBRAN
                                   1666         .word    TCHA1
                                   1667         CALL     DROP
                                   1668         CALL     DOLIT
                                   1669         .word     0x5F		; "_"     ;replace non-printables
                                   1670 .endif 
      00074D 81               [ 4] 1671 TCHA1:  RET
                                   1672 
                                   1673 ;       DEPTH   ( -- n )
                                   1674 ;       Return  depth of  data stack.
      00074E 07 37                 1675         .word      LINK
                           000750  1676 LINK = . 
      000750 05                    1677         .byte      5
      000751 44 45 50 54 48        1678         .ascii     "DEPTH"
      000756                       1679 DEPTH: 
      000756 90 BE 22         [ 2] 1680         LDW Y,SP0    ;save data stack ptr
      000759 BF 1A            [ 2] 1681 	LDW XTEMP,X
      00075B 72 B2 00 1A      [ 2] 1682         SUBW Y,XTEMP     ;#bytes = SP0 - X
      00075F 90 57            [ 2] 1683         SRAW Y    ;Y = #stack items
                           000001  1684 .if PICATOUT_MOD
                                   1685 ; why ? 
                                   1686 ;      	DECW Y
                                   1687 .endif 
      000761 1D 00 02         [ 2] 1688 	SUBW X,#2
      000764 FF               [ 2] 1689         LDW (X),Y     ; if neg, underflow
      000765 81               [ 4] 1690         RET
                                   1691 
                                   1692 ;       PICK    ( ... +n -- ... w )
                                   1693 ;       Copy  nth stack item to tos.
      000766 07 50                 1694         .word      LINK
                           000768  1695 LINK = . 
      000768 04                    1696         .byte      4
      000769 50 49 43 4B           1697         .ascii     "PICK"
      00076D                       1698 PICK:
      00076D 90 93            [ 1] 1699         LDW Y,X   ;D = n1
      00076F 90 FE            [ 2] 1700         LDW Y,(Y)
      000771 90 58            [ 2] 1701         SLAW Y
      000773 BF 1A            [ 2] 1702         LDW XTEMP,X
      000775 72 B9 00 1A      [ 2] 1703         ADDW Y,XTEMP
      000779 90 FE            [ 2] 1704         LDW Y,(Y)
      00077B FF               [ 2] 1705         LDW (X),Y
      00077C 81               [ 4] 1706         RET
                                   1707 
                                   1708 ;; Memory access
                                   1709 
                                   1710 ;       +!      ( n a -- )
                                   1711 ;       Add n to  contents at address a.
      00077D 07 68                 1712         .word      LINK
                           00077F  1713 LINK = . 
      00077F 02                    1714         .byte      2
      000780 2B 21                 1715         .ascii     "+!"
      000782                       1716 PSTOR:
                           000001  1717 .if CONVERT_TO_CODE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      000782 90 93            [ 1] 1718         ldw y,x 
      000784 90 FE            [ 2] 1719         ldw y,(y)
      000786 90 BF 1C         [ 2] 1720         ldw YTEMP,y  ; address
      000789 90 FE            [ 2] 1721         ldw y,(y)  
      00078B 90 89            [ 2] 1722         pushw y  ; value at address 
      00078D 90 93            [ 1] 1723         ldw y,x 
      00078F 90 EE 02         [ 2] 1724         ldw y,(2,y) ; n 
      000792 72 F9 01         [ 2] 1725         addw y,(1,sp) ; n+value
      000795 91 CF 1C         [ 5] 1726         ldw [YTEMP],y ;  a!
      000798 90 85            [ 2] 1727         popw y    ;drop local var
      00079A 1C 00 04         [ 2] 1728         addw x,#4 ; DDROP 
      00079D 81               [ 4] 1729         ret 
                           000000  1730 .else
                                   1731         CALL	SWAPP
                                   1732         CALL	OVER
                                   1733         CALL	AT
                                   1734         CALL	PLUS
                                   1735         CALL	SWAPP
                                   1736         JP	STORE
                                   1737 .endif 
                                   1738 ;       2!      ( d a -- )
                                   1739 ;       Store  double integer to address a.
      00079E 07 7F                 1740         .word      LINK
                           0007A0  1741 LINK = . 
      0007A0 02                    1742         .byte      2
      0007A1 32 21                 1743         .ascii     "2!"
      0007A3                       1744 DSTOR:
                           000001  1745 .if CONVERT_TO_CODE
      0007A3 90 93            [ 1] 1746         ldw y,x 
      0007A5 90 FE            [ 2] 1747         ldw y,(y)
      0007A7 90 BF 1C         [ 2] 1748         ldw YTEMP,y ; address 
      0007AA 1C 00 02         [ 2] 1749         addw x,#CELLL ; drop a 
      0007AD 90 93            [ 1] 1750         ldw y,x 
      0007AF 90 FE            [ 2] 1751         ldw y,(y) ; hi word 
      0007B1 89               [ 2] 1752         pushw x 
      0007B2 EE 02            [ 2] 1753         ldw x,(2,x) ; lo word 
      0007B4 91 CF 1C         [ 5] 1754         ldw [YTEMP],y
      0007B7 90 93            [ 1] 1755         ldw y,x 
      0007B9 AE 00 02         [ 2] 1756         ldw x,#2 
      0007BC 92 DF 1C         [ 5] 1757         ldw ([YTEMP],x),y 
      0007BF 85               [ 2] 1758         popw x 
      0007C0 1C 00 04         [ 2] 1759         addw x,#4 ; DDROP 
      0007C3 81               [ 4] 1760         ret 
                           000000  1761 .else
                                   1762         CALL	SWAPP
                                   1763         CALL	OVER
                                   1764         CALL	STORE
                                   1765         CALL	CELLP
                                   1766         JP	STORE
                                   1767 .endif 
                                   1768 ;       2@      ( a -- d )
                                   1769 ;       Fetch double integer from address a.
      0007C4 07 A0                 1770         .word      LINK
                           0007C6  1771 LINK = . 
      0007C6 02                    1772         .byte      2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      0007C7 32 40                 1773         .ascii     "2@"
      0007C9                       1774 DAT:
                           000001  1775 .if CONVERT_TO_CODE
      0007C9 90 93            [ 1] 1776         ldw y,x 
      0007CB 90 FE            [ 2] 1777         ldw y,(y) ;address 
      0007CD 90 BF 1C         [ 2] 1778         ldw YTEMP,y 
      0007D0 1D 00 02         [ 2] 1779         subw x,#CELLL ; space for udh 
      0007D3 91 CE 1C         [ 5] 1780         ldw y,[YTEMP] ; udh 
      0007D6 FF               [ 2] 1781         ldw (x),y 
      0007D7 90 AE 00 02      [ 2] 1782         ldw y,#2
      0007DB 91 DE 1C         [ 5] 1783         ldw y,([YTEMP],y) ; udl 
      0007DE EF 02            [ 2] 1784         ldw (2,x),y
      0007E0 81               [ 4] 1785         ret 
                           000000  1786 .else 
                                   1787         CALL	DUPP
                                   1788         CALL	CELLP
                                   1789         CALL	AT
                                   1790         CALL	SWAPP
                                   1791         JP	AT
                                   1792 .endif 
                                   1793 
                                   1794 ;       COUNT   ( b -- b +n )
                                   1795 ;       Return count byte of a string
                                   1796 ;       and add 1 to byte address.
      0007E1 07 C6                 1797         .word      LINK
                           0007E3  1798 LINK = . 
      0007E3 05                    1799         .byte      5
      0007E4 43 4F 55 4E 54        1800         .ascii     "COUNT"
      0007E9                       1801 COUNT:
                           000001  1802 .if CONVERT_TO_CODE
      0007E9 90 93            [ 1] 1803         ldw y,x 
      0007EB 90 FE            [ 2] 1804         ldw y,(y) ; address 
      0007ED 90 F6            [ 1] 1805         ld a,(y)  ; count 
      0007EF 90 5C            [ 2] 1806         incw y 
      0007F1 FF               [ 2] 1807         ldw (x),y 
      0007F2 1D 00 02         [ 2] 1808         subw x,#CELLL 
      0007F5 E7 01            [ 1] 1809         ld (1,x),a 
      0007F7 7F               [ 1] 1810         clr (x)
      0007F8 81               [ 4] 1811         ret 
                           000000  1812 .else 
                                   1813         CALL     DUPP
                                   1814         CALL     ONEP
                                   1815         CALL     SWAPP
                                   1816         JP     CAT
                                   1817 .endif 
                                   1818 
                                   1819 ;       HERE    ( -- a )
                                   1820 ;       Return  top of  code dictionary.
      0007F9 07 E3                 1821         .word      LINK
                           0007FB  1822 LINK = . 
      0007FB 04                    1823         .byte      4
      0007FC 48 45 52 45           1824         .ascii     "HERE"
      000800                       1825 HERE:
                           000001  1826 .if CONVERT_TO_CODE
      000800 90 AE 00 16      [ 2] 1827       	ldw y,#UCP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      000804 90 FE            [ 2] 1828         ldw y,(y)
      000806 1D 00 02         [ 2] 1829         subw x,#CELLL 
      000809 FF               [ 2] 1830         ldw (x),y 
      00080A 81               [ 4] 1831         ret 
                           000000  1832 .else
                                   1833         CALL     CPP
                                   1834         JP     AT
                                   1835 .endif 
                                   1836 
                                   1837 ;       PAD     ( -- a )
                                   1838 ;       Return address of text buffer
                                   1839 ;       above  code dictionary.
      00080B 07 FB                 1840         .word      LINK
                           00080D  1841 LINK = . 
      00080D 03                    1842         .byte      3
      00080E 50 41 44              1843         .ascii     "PAD"
      000811                       1844 PAD:
      000811 CD 08 00         [ 4] 1845         CALL     HERE
      000814 CD 01 36         [ 4] 1846         CALL     DOLIT
      000817 00 50                 1847         .word      80
      000819 CC 04 00         [ 2] 1848         JP     PLUS
                                   1849 
                                   1850 ;       TIB     ( -- a )
                                   1851 ;       Return address of terminal input buffer.
      00081C 08 0D                 1852         .word      LINK
                           00081E  1853 LINK = . 
      00081E 03                    1854         .byte      3
      00081F 54 49 42              1855         .ascii     "TIB"
      000822                       1856 TIB:
      000822 CD 03 4E         [ 4] 1857         CALL     NTIB
      000825 CD 06 B4         [ 4] 1858         CALL     CELLP
      000828 CC 01 BE         [ 2] 1859         JP     AT
                                   1860 
                                   1861 ;       @EXECUTE        ( a -- )
                                   1862 ;       Execute vector stored in address a.
      00082B 08 1E                 1863         .word      LINK
                           00082D  1864 LINK = . 
      00082D 08                    1865         .byte      8
      00082E 40 45 58 45 43 55 54  1866         .ascii     "@EXECUTE"
             45
      000836                       1867 ATEXE:
      000836 CD 01 BE         [ 4] 1868         CALL     AT
      000839 CD 03 AF         [ 4] 1869         CALL     QDUP    ;?address or zero
      00083C CD 01 69         [ 4] 1870         CALL     QBRAN
      00083F 08 44                 1871         .word      EXE1
      000841 CD 01 90         [ 4] 1872         CALL     EXECU   ;execute if non-zero
      000844 81               [ 4] 1873 EXE1:   RET     ;do nothing if zero
                                   1874 
                                   1875 ;       CMOVE   ( b1 b2 u -- )
                                   1876 ;       Copy u bytes from b1 to b2.
      000845 08 2D                 1877         .word      LINK
                           000847  1878 LINK = . 
      000847 05                    1879         .byte      5
      000848 43 4D 4F 56 45        1880         .ascii     "CMOVE"
      00084D                       1881 CMOVE:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      00084D CD 02 2E         [ 4] 1882         CALL	TOR
      000850 CD 01 80         [ 4] 1883         CALL	BRAN
      000853 08 6D                 1884         .word	CMOV2
      000855 CD 02 2E         [ 4] 1885 CMOV1:	CALL	TOR
      000858 CD 02 65         [ 4] 1886         CALL	DUPP
      00085B CD 01 DC         [ 4] 1887         CALL	CAT
      00085E CD 02 22         [ 4] 1888         CALL	RAT
      000861 CD 01 CB         [ 4] 1889         CALL	CSTOR
      000864 CD 06 DF         [ 4] 1890         CALL	ONEP
      000867 CD 02 0F         [ 4] 1891         CALL	RFROM
      00086A CD 06 DF         [ 4] 1892         CALL	ONEP
      00086D CD 01 4A         [ 4] 1893 CMOV2:	CALL	DONXT
      000870 08 55                 1894         .word	CMOV1
      000872 CC 03 E0         [ 2] 1895         JP	DDROP
                                   1896 
                                   1897 ;       FILL    ( b u c -- )
                                   1898 ;       Fill u bytes of character c
                                   1899 ;       to area beginning at b.
      000875 08 47                 1900         .word       LINK
                           000877  1901 LINK = . 
      000877 04                    1902         .byte       4
      000878 46 49 4C 4C           1903         .ascii     "FILL"
      00087C                       1904 FILL:
                           000001  1905 .if CONVERT_TO_CODE
      00087C 90 93            [ 1] 1906         ldw y,x 
      00087E 90 E6 01         [ 1] 1907         ld a,(1,y) ; c 
      000881 1C 00 02         [ 2] 1908         addw x,#CELLL ; drop c 
      000884 90 93            [ 1] 1909         ldw y,x 
      000886 90 FE            [ 2] 1910         ldw y,(y) ; count
      000888 90 89            [ 2] 1911         pushw y 
      00088A 1C 00 02         [ 2] 1912         addw x,#CELLL ; drop u 
      00088D 90 93            [ 1] 1913         ldw y,x 
      00088F 1C 00 02         [ 2] 1914         addw x,#CELLL ; drop b 
      000892 90 FE            [ 2] 1915         ldw y,(y) ; address
      000894 90 BF 1C         [ 2] 1916         ldw YTEMP,y
      000897 90 85            [ 2] 1917         popw y ; count 
      000899                       1918 FILL1:  
      000899 92 C7 1C         [ 4] 1919         ld [YTEMP],a 
      00089C 3C 1D            [ 1] 1920         inc YTEMP+1
      00089E 24 02            [ 1] 1921         jrnc FILL2 
      0008A0 3C 1C            [ 1] 1922         inc YTEMP
      0008A2                       1923 FILL2: 
      0008A2 90 5A            [ 2] 1924         decw y ; count 
      0008A4 26 F3            [ 1] 1925         jrne FILL1  
      0008A6 81               [ 4] 1926         ret 
                           000000  1927 .else 
                                   1928         CALL	SWAPP
                                   1929         CALL	TOR
                                   1930         CALL	SWAPP
                                   1931         CALL	BRAN
                                   1932         .word	FILL2
                                   1933 FILL1:	CALL	DDUP
                                   1934         CALL	CSTOR
                                   1935         CALL	ONEP
                                   1936 FILL2:	CALL	DONXT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                                   1937         .word	FILL1
                                   1938         JP	DDROP
                                   1939 .endif
                                   1940 
                                   1941 ;       ERASE   ( b u -- )
                                   1942 ;       Erase u bytes beginning at b.
      0008A7 08 77                 1943         .word      LINK
                           0008A9  1944 LINK = . 
      0008A9 05                    1945         .byte      5
      0008AA 45 52 41 53 45        1946         .ascii     "ERASE"
      0008AF                       1947 ERASE:
                           000001  1948 .if CONVERT_TO_CODE
      0008AF 90 5F            [ 1] 1949         clrw y 
      0008B1 1D 00 02         [ 2] 1950         subw x,#CELLL 
      0008B4 FF               [ 2] 1951         ldw (x),y 
      0008B5 CC 08 7C         [ 2] 1952         jp FILL 
                           000000  1953 .else 
                                   1954         CALL     ZERO
                                   1955         JP     FILL
                                   1956 .endif 
                                   1957 ;       PACK0x   ( b u a -- a )
                                   1958 ;       Build a counted string with
                                   1959 ;       u characters from b. Null fill.
      0008B8 08 A9                 1960         .word      LINK
                           0008BA  1961 LINK = . 
      0008BA 05                    1962         .byte      5
      0008BB 50 41 43 4B 30 58     1963         .ascii     "PACK0X"
      0008C1                       1964 PACKS:
      0008C1 CD 02 65         [ 4] 1965         CALL     DUPP
      0008C4 CD 02 2E         [ 4] 1966         CALL     TOR     ;strings only on cell boundary
      0008C7 CD 03 EB         [ 4] 1967         CALL     DDUP
      0008CA CD 01 CB         [ 4] 1968         CALL     CSTOR
      0008CD CD 06 DF         [ 4] 1969         CALL     ONEP ;save count
      0008D0 CD 02 75         [ 4] 1970         CALL     SWAPP
      0008D3 CD 08 4D         [ 4] 1971         CALL     CMOVE
      0008D6 CD 02 0F         [ 4] 1972         CALL     RFROM
      0008D9 81               [ 4] 1973         RET
                                   1974 
                                   1975 ;; Numeric output, single precision
                                   1976 
                                   1977 ;       DIGIT   ( u -- c )
                                   1978 ;       Convert digit u to a character.
      0008DA 08 BA                 1979         .word      LINK
                           0008DC  1980 LINK = . 
      0008DC 05                    1981         .byte      5
      0008DD 44 49 47 49 54        1982         .ascii     "DIGIT"
      0008E2                       1983 DIGIT:
      0008E2 CD 01 36         [ 4] 1984         CALL	DOLIT
      0008E5 00 09                 1985         .word	9
      0008E7 CD 02 8F         [ 4] 1986         CALL	OVER
      0008EA CD 04 C3         [ 4] 1987         CALL	LESS
      0008ED CD 01 36         [ 4] 1988         CALL	DOLIT
      0008F0 00 07                 1989         .word	7
      0008F2 CD 02 B1         [ 4] 1990         CALL	ANDD
      0008F5 CD 04 00         [ 4] 1991         CALL	PLUS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      0008F8 CD 01 36         [ 4] 1992         CALL	DOLIT
      0008FB 00 30                 1993         .word	48	;'0'
      0008FD CC 04 00         [ 2] 1994         JP	PLUS
                                   1995 
                                   1996 ;       EXTRACT ( n base -- n c )
                                   1997 ;       Extract least significant digit from n.
      000900 08 DC                 1998         .word      LINK
                           000902  1999 LINK = . 
      000902 07                    2000         .byte      7
      000903 45 58 54 52 41 43 54  2001         .ascii     "EXTRACT"
      00090A                       2002 EXTRC:
      00090A CD 07 13         [ 4] 2003         CALL     ZERO
      00090D CD 02 75         [ 4] 2004         CALL     SWAPP
      000910 CD 05 3B         [ 4] 2005         CALL     UMMOD
      000913 CD 02 75         [ 4] 2006         CALL     SWAPP
      000916 CC 08 E2         [ 2] 2007         JP     DIGIT
                                   2008 
                                   2009 ;       <#      ( -- )
                                   2010 ;       Initiate  numeric output process.
      000919 09 02                 2011         .word      LINK
                           00091B  2012 LINK = . 
      00091B 02                    2013         .byte      2
      00091C 3C 23                 2014         .ascii     "<#"
      00091E                       2015 BDIGS:
      00091E CD 08 11         [ 4] 2016         CALL     PAD
      000921 CD 03 6E         [ 4] 2017         CALL     HLD
      000924 CC 01 A7         [ 2] 2018         JP     STORE
                                   2019 
                                   2020 ;       HOLD    ( c -- )
                                   2021 ;       Insert a character into output string.
      000927 09 1B                 2022         .word      LINK
                           000929  2023 LINK = . 
      000929 04                    2024         .byte      4
      00092A 48 4F 4C 44           2025         .ascii     "HOLD"
      00092E                       2026 HOLD:
      00092E CD 03 6E         [ 4] 2027         CALL     HLD
      000931 CD 01 BE         [ 4] 2028         CALL     AT
      000934 CD 06 EC         [ 4] 2029         CALL     ONEM
      000937 CD 02 65         [ 4] 2030         CALL     DUPP
      00093A CD 03 6E         [ 4] 2031         CALL     HLD
      00093D CD 01 A7         [ 4] 2032         CALL     STORE
      000940 CC 01 CB         [ 2] 2033         JP     CSTOR
                                   2034 
                                   2035 ;       #       ( u -- u )
                                   2036 ;       Extract one digit from u and
                                   2037 ;       append digit to output string.
      000943 09 29                 2038         .word      LINK
                           000945  2039 LINK = . 
      000945 01                    2040         .byte      1
      000946 23                    2041         .ascii     "#"
      000947                       2042 DIG:
      000947 CD 03 20         [ 4] 2043         CALL     BASE
      00094A CD 01 BE         [ 4] 2044         CALL     AT
      00094D CD 09 0A         [ 4] 2045         CALL     EXTRC
      000950 CC 09 2E         [ 2] 2046         JP     HOLD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                                   2047 
                                   2048 ;       #S      ( u -- 0 )
                                   2049 ;       Convert u until all digits
                                   2050 ;       are added to output string.
      000953 09 45                 2051         .word      LINK
                           000955  2052 LINK = . 
      000955 02                    2053         .byte      2
      000956 23 53                 2054         .ascii     "#S"
      000958                       2055 DIGS:
      000958 CD 09 47         [ 4] 2056 DIGS1:  CALL     DIG
      00095B CD 02 65         [ 4] 2057         CALL     DUPP
      00095E CD 01 69         [ 4] 2058         CALL     QBRAN
      000961 09 65                 2059         .word      DIGS2
      000963 20 F3            [ 2] 2060         JRA     DIGS1
      000965 81               [ 4] 2061 DIGS2:  RET
                                   2062 
                                   2063 ;       SIGN    ( n -- )
                                   2064 ;       Add a minus sign to
                                   2065 ;       numeric output string.
      000966 09 55                 2066         .word      LINK
                           000968  2067 LINK = . 
      000968 04                    2068         .byte      4
      000969 53 49 47 4E           2069         .ascii     "SIGN"
      00096D                       2070 SIGN:
      00096D CD 02 9E         [ 4] 2071         CALL     ZLESS
      000970 CD 01 69         [ 4] 2072         CALL     QBRAN
      000973 09 7D                 2073         .word      SIGN1
      000975 CD 01 36         [ 4] 2074         CALL     DOLIT
      000978 00 2D                 2075         .word      45	;"-"
      00097A CC 09 2E         [ 2] 2076         JP     HOLD
      00097D 81               [ 4] 2077 SIGN1:  RET
                                   2078 
                                   2079 ;       #>      ( w -- b u )
                                   2080 ;       Prepare output string.
      00097E 09 68                 2081         .word      LINK
                           000980  2082 LINK = . 
      000980 02                    2083         .byte      2
      000981 23 3E                 2084         .ascii     "#>"
      000983                       2085 EDIGS:
      000983 CD 02 5B         [ 4] 2086         CALL     DROP
      000986 CD 03 6E         [ 4] 2087         CALL     HLD
      000989 CD 01 BE         [ 4] 2088         CALL     AT
      00098C CD 08 11         [ 4] 2089         CALL     PAD
      00098F CD 02 8F         [ 4] 2090         CALL     OVER
      000992 CC 04 5E         [ 2] 2091         JP     SUBB
                                   2092 
                                   2093 ;       str     ( w -- b u )
                                   2094 ;       Convert a signed integer
                                   2095 ;       to a numeric string.
      000995 09 80                 2096         .word      LINK
                           000997  2097 LINK = . 
      000997 03                    2098         .byte      3
      000998 53 54 52              2099         .ascii     "STR"
      00099B                       2100 STR:
      00099B CD 02 65         [ 4] 2101         CALL     DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      00099E CD 02 2E         [ 4] 2102         CALL     TOR
      0009A1 CD 04 78         [ 4] 2103         CALL     ABSS
      0009A4 CD 09 1E         [ 4] 2104         CALL     BDIGS
      0009A7 CD 09 58         [ 4] 2105         CALL     DIGS
      0009AA CD 02 0F         [ 4] 2106         CALL     RFROM
      0009AD CD 09 6D         [ 4] 2107         CALL     SIGN
      0009B0 CC 09 83         [ 2] 2108         JP     EDIGS
                                   2109 
                                   2110 ;       HEX     ( -- )
                                   2111 ;       Use radix 16 as base for
                                   2112 ;       numeric conversions.
      0009B3 09 97                 2113         .word      LINK
                           0009B5  2114 LINK = . 
      0009B5 03                    2115         .byte      3
      0009B6 48 45 58              2116         .ascii     "HEX"
      0009B9                       2117 HEX:
      0009B9 CD 01 36         [ 4] 2118         CALL     DOLIT
      0009BC 00 10                 2119         .word      16
      0009BE CD 03 20         [ 4] 2120         CALL     BASE
      0009C1 CC 01 A7         [ 2] 2121         JP     STORE
                                   2122 
                                   2123 ;       DECIMAL ( -- )
                                   2124 ;       Use radix 10 as base
                                   2125 ;       for numeric conversions.
      0009C4 09 B5                 2126         .word      LINK
                           0009C6  2127 LINK = . 
      0009C6 07                    2128         .byte      7
      0009C7 44 45 43 49 4D 41 4C  2129         .ascii     "DECIMAL"
      0009CE                       2130 DECIM:
      0009CE CD 01 36         [ 4] 2131         CALL     DOLIT
      0009D1 00 0A                 2132         .word      10
      0009D3 CD 03 20         [ 4] 2133         CALL     BASE
      0009D6 CC 01 A7         [ 2] 2134         JP     STORE
                                   2135 
                                   2136 ;; Numeric input, single precision
                                   2137 
                                   2138 ;       DIGIT?  ( c base -- u t )
                                   2139 ;       Convert a character to its numeric
                                   2140 ;       value. A flag indicates success.
      0009D9 09 C6                 2141         .word      LINK
                           0009DB  2142 LINK = . 
      0009DB 06                    2143         .byte       6
      0009DC 44 49 47 49 54 3F     2144         .ascii     "DIGIT?"
      0009E2                       2145 DIGTQ:
      0009E2 CD 02 2E         [ 4] 2146         CALL     TOR
      0009E5 CD 01 36         [ 4] 2147         CALL     DOLIT
      0009E8 00 30                 2148         .word     48	; "0"
      0009EA CD 04 5E         [ 4] 2149         CALL     SUBB
      0009ED CD 01 36         [ 4] 2150         CALL     DOLIT
      0009F0 00 09                 2151         .word      9
      0009F2 CD 02 8F         [ 4] 2152         CALL     OVER
      0009F5 CD 04 C3         [ 4] 2153         CALL     LESS
      0009F8 CD 01 69         [ 4] 2154         CALL     QBRAN
      0009FB 0A 13                 2155         .word      DGTQ1
      0009FD CD 01 36         [ 4] 2156         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000A00 00 07                 2157         .word      7
      000A02 CD 04 5E         [ 4] 2158         CALL     SUBB
      000A05 CD 02 65         [ 4] 2159         CALL     DUPP
      000A08 CD 01 36         [ 4] 2160         CALL     DOLIT
      000A0B 00 0A                 2161         .word      10
      000A0D CD 04 C3         [ 4] 2162         CALL     LESS
      000A10 CD 02 C5         [ 4] 2163         CALL     ORR
      000A13 CD 02 65         [ 4] 2164 DGTQ1:  CALL     DUPP
      000A16 CD 02 0F         [ 4] 2165         CALL     RFROM
      000A19 CC 04 A5         [ 2] 2166         JP     ULESS
                                   2167 
                                   2168 ;       NUMBER? ( a -- n T | a F )
                                   2169 ;       Convert a number string to
                                   2170 ;       integer. Push a flag on tos.
      000A1C 09 DB                 2171         .word      LINK
                           000A1E  2172 LINK = . 
      000A1E 07                    2173         .byte      7
      000A1F 4E 55 4D 42 45 52 3F  2174         .ascii     "NUMBER?"
      000A26                       2175 NUMBQ:
      000A26 CD 03 20         [ 4] 2176         CALL     BASE
      000A29 CD 01 BE         [ 4] 2177         CALL     AT
      000A2C CD 02 2E         [ 4] 2178         CALL     TOR
      000A2F CD 07 13         [ 4] 2179         CALL     ZERO
      000A32 CD 02 8F         [ 4] 2180         CALL     OVER
      000A35 CD 07 E9         [ 4] 2181         CALL     COUNT
      000A38 CD 02 8F         [ 4] 2182         CALL     OVER
      000A3B CD 01 DC         [ 4] 2183         CALL     CAT
      000A3E CD 01 36         [ 4] 2184         CALL     DOLIT
      000A41 00 24                 2185         .word     36	; "0x"
      000A43 CD 04 86         [ 4] 2186         CALL     EQUAL
      000A46 CD 01 69         [ 4] 2187         CALL     QBRAN
      000A49 0A 5A                 2188         .word      NUMQ1
      000A4B CD 09 B9         [ 4] 2189         CALL     HEX
      000A4E CD 02 75         [ 4] 2190         CALL     SWAPP
      000A51 CD 06 DF         [ 4] 2191         CALL     ONEP
      000A54 CD 02 75         [ 4] 2192         CALL     SWAPP
      000A57 CD 06 EC         [ 4] 2193         CALL     ONEM
      000A5A CD 02 8F         [ 4] 2194 NUMQ1:  CALL     OVER
      000A5D CD 01 DC         [ 4] 2195         CALL     CAT
      000A60 CD 01 36         [ 4] 2196         CALL     DOLIT
      000A63 00 2D                 2197         .word     45	; "-"
      000A65 CD 04 86         [ 4] 2198         CALL     EQUAL
      000A68 CD 02 2E         [ 4] 2199         CALL     TOR
      000A6B CD 02 75         [ 4] 2200         CALL     SWAPP
      000A6E CD 02 22         [ 4] 2201         CALL     RAT
      000A71 CD 04 5E         [ 4] 2202         CALL     SUBB
      000A74 CD 02 75         [ 4] 2203         CALL     SWAPP
      000A77 CD 02 22         [ 4] 2204         CALL     RAT
      000A7A CD 04 00         [ 4] 2205         CALL     PLUS
      000A7D CD 03 AF         [ 4] 2206         CALL     QDUP
      000A80 CD 01 69         [ 4] 2207         CALL     QBRAN
      000A83 0A E4                 2208         .word      NUMQ6
      000A85 CD 06 EC         [ 4] 2209         CALL     ONEM
      000A88 CD 02 2E         [ 4] 2210         CALL     TOR
      000A8B CD 02 65         [ 4] 2211 NUMQ2:  CALL     DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000A8E CD 02 2E         [ 4] 2212         CALL     TOR
      000A91 CD 01 DC         [ 4] 2213         CALL     CAT
      000A94 CD 03 20         [ 4] 2214         CALL     BASE
      000A97 CD 01 BE         [ 4] 2215         CALL     AT
      000A9A CD 09 E2         [ 4] 2216         CALL     DIGTQ
      000A9D CD 01 69         [ 4] 2217         CALL     QBRAN
      000AA0 0A D2                 2218         .word      NUMQ4
      000AA2 CD 02 75         [ 4] 2219         CALL     SWAPP
      000AA5 CD 03 20         [ 4] 2220         CALL     BASE
      000AA8 CD 01 BE         [ 4] 2221         CALL     AT
      000AAB CD 06 5E         [ 4] 2222         CALL     STAR
      000AAE CD 04 00         [ 4] 2223         CALL     PLUS
      000AB1 CD 02 0F         [ 4] 2224         CALL     RFROM
      000AB4 CD 06 DF         [ 4] 2225         CALL     ONEP
      000AB7 CD 01 4A         [ 4] 2226         CALL     DONXT
      000ABA 0A 8B                 2227         .word      NUMQ2
      000ABC CD 02 22         [ 4] 2228         CALL     RAT
      000ABF CD 02 75         [ 4] 2229         CALL     SWAPP
      000AC2 CD 02 5B         [ 4] 2230         CALL     DROP
      000AC5 CD 01 69         [ 4] 2231         CALL     QBRAN
      000AC8 0A CD                 2232         .word      NUMQ3
      000ACA CD 04 2B         [ 4] 2233         CALL     NEGAT
      000ACD CD 02 75         [ 4] 2234 NUMQ3:  CALL     SWAPP
      000AD0 20 0F            [ 2] 2235         JRA     NUMQ5
      000AD2 CD 02 0F         [ 4] 2236 NUMQ4:  CALL     RFROM
      000AD5 CD 02 0F         [ 4] 2237         CALL     RFROM
      000AD8 CD 03 E0         [ 4] 2238         CALL     DDROP
      000ADB CD 03 E0         [ 4] 2239         CALL     DDROP
      000ADE CD 07 13         [ 4] 2240         CALL     ZERO
      000AE1 CD 02 65         [ 4] 2241 NUMQ5:  CALL     DUPP
      000AE4 CD 02 0F         [ 4] 2242 NUMQ6:  CALL     RFROM
      000AE7 CD 03 E0         [ 4] 2243         CALL     DDROP
      000AEA CD 02 0F         [ 4] 2244         CALL     RFROM
      000AED CD 03 20         [ 4] 2245         CALL     BASE
      000AF0 CC 01 A7         [ 2] 2246         JP     STORE
                                   2247 
                                   2248 ;; Basic I/O
                                   2249 
                                   2250 ;       KEY     ( -- c )
                                   2251 ;       Wait for and return an
                                   2252 ;       input character.
      000AF3 0A 1E                 2253         .word      LINK
                           000AF5  2254 LINK = . 
      000AF5 03                    2255         .byte      3
      000AF6 4B 45 59              2256         .ascii     "KEY"
      000AF9                       2257 KEY:
                           000001  2258 .if CONVERT_TO_CODE
      000AF9 72 0B 52 30 FB   [ 2] 2259         btjf UART1_SR,#UART_SR_RXNE,. 
      000AFE C6 52 31         [ 1] 2260         ld a,UART1_DR 
      000B01 1D 00 02         [ 2] 2261         subw x,#CELLL 
      000B04 E7 01            [ 1] 2262         ld (1,x),a 
      000B06 7F               [ 1] 2263         clr (x)
      000B07 81               [ 4] 2264         ret 
                           000000  2265 .else 
                                   2266 KEY1:   CALL     QKEY
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                   2267         CALL     QBRAN
                                   2268         .word      KEY1
                                   2269         RET
                                   2270 .endif 
                                   2271 
                                   2272 ;       NUF?    ( -- t )
                                   2273 ;       Return false if no input,
                                   2274 ;       else pause and if CR return true.
      000B08 0A F5                 2275         .word      LINK
                           000B0A  2276 LINK = . 
      000B0A 04                    2277         .byte      4
      000B0B 4E 55 46 3F           2278         .ascii     "NUF?"
      000B0F                       2279 NUFQ:
      000B0F CD 01 02         [ 4] 2280         CALL     QKEY
      000B12 CD 02 65         [ 4] 2281         CALL     DUPP
      000B15 CD 01 69         [ 4] 2282         CALL     QBRAN
      000B18 0B 28                 2283         .word    NUFQ1
      000B1A CD 03 E0         [ 4] 2284         CALL     DDROP
      000B1D CD 0A F9         [ 4] 2285         CALL     KEY
      000B20 CD 01 36         [ 4] 2286         CALL     DOLIT
      000B23 00 0D                 2287         .word      CRR
      000B25 CC 04 86         [ 2] 2288         JP     EQUAL
      000B28 81               [ 4] 2289 NUFQ1:  RET
                                   2290 
                                   2291 ;       SPACE   ( -- )
                                   2292 ;       Send  blank character to
                                   2293 ;       output device.
      000B29 0B 0A                 2294         .word      LINK
                           000B2B  2295 LINK = . 
      000B2B 05                    2296         .byte      5
      000B2C 53 50 41 43 45        2297         .ascii     "SPACE"
      000B31                       2298 SPACE:
      000B31 CD 07 06         [ 4] 2299         CALL     BLANK
      000B34 CC 01 20         [ 2] 2300         JP     EMIT
                                   2301 
                                   2302 ;       SPACES  ( +n -- )
                                   2303 ;       Send n spaces to output device.
      000B37 0B 2B                 2304         .word      LINK
                           000B39  2305 LINK = . 
      000B39 06                    2306         .byte      6
      000B3A 53 50 41 43 45 53     2307         .ascii     "SPACES"
      000B40                       2308 SPACS:
      000B40 CD 07 13         [ 4] 2309         CALL     ZERO
      000B43 CD 04 E3         [ 4] 2310         CALL     MAX
      000B46 CD 02 2E         [ 4] 2311         CALL     TOR
      000B49 20 03            [ 2] 2312         JRA      CHAR2
      000B4B CD 0B 31         [ 4] 2313 CHAR1:  CALL     SPACE
      000B4E CD 01 4A         [ 4] 2314 CHAR2:  CALL     DONXT
      000B51 0B 4B                 2315         .word    CHAR1
      000B53 81               [ 4] 2316         RET
                                   2317 
                                   2318 ;       TYPE    ( b u -- )
                                   2319 ;       Output u characters from b.
      000B54 0B 39                 2320         .word      LINK
                           000B56  2321 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000B56 04                    2322         .byte      4
      000B57 54 59 50 45           2323         .ascii     "TYPE"
      000B5B                       2324 TYPES:
      000B5B CD 02 2E         [ 4] 2325         CALL     TOR
      000B5E 20 0C            [ 2] 2326         JRA     TYPE2
      000B60 CD 02 65         [ 4] 2327 TYPE1:  CALL     DUPP
      000B63 CD 01 DC         [ 4] 2328         CALL     CAT
      000B66 CD 01 20         [ 4] 2329         CALL     EMIT
      000B69 CD 06 DF         [ 4] 2330         CALL     ONEP
      000B6C CD 01 4A         [ 4] 2331 TYPE2:  CALL     DONXT
      000B6F 0B 60                 2332         .word      TYPE1
      000B71 CC 02 5B         [ 2] 2333         JP     DROP
                                   2334 
                                   2335 ;       CR      ( -- )
                                   2336 ;       Output a carriage return
                                   2337 ;       and a line feed.
      000B74 0B 56                 2338         .word      LINK
                           000B76  2339 LINK = . 
      000B76 02                    2340         .byte      2
      000B77 43 52                 2341         .ascii     "CR"
      000B79                       2342 CR:
      000B79 CD 01 36         [ 4] 2343         CALL     DOLIT
      000B7C 00 0D                 2344         .word      CRR
      000B7E CD 01 20         [ 4] 2345         CALL     EMIT
      000B81 CD 01 36         [ 4] 2346         CALL     DOLIT
      000B84 00 0A                 2347         .word      LF
      000B86 CC 01 20         [ 2] 2348         JP     EMIT
                                   2349 
                                   2350 ;       do$     ( -- a )
                                   2351 ;       Return  address of a compiled
                                   2352 ;       string.
      000B89 0B 76                 2353         .word      LINK
                           000B8B  2354 LINK = . 
      000B8B 43                    2355 	.byte      COMPO+3
      000B8C 44 4F 24              2356         .ascii     "DO$"
      000B8F                       2357 DOSTR:
      000B8F CD 02 0F         [ 4] 2358         CALL     RFROM
      000B92 CD 02 22         [ 4] 2359         CALL     RAT
      000B95 CD 02 0F         [ 4] 2360         CALL     RFROM
      000B98 CD 07 E9         [ 4] 2361         CALL     COUNT
      000B9B CD 04 00         [ 4] 2362         CALL     PLUS
      000B9E CD 02 2E         [ 4] 2363         CALL     TOR
      000BA1 CD 02 75         [ 4] 2364         CALL     SWAPP
      000BA4 CD 02 2E         [ 4] 2365         CALL     TOR
      000BA7 81               [ 4] 2366         RET
                                   2367 
                                   2368 ;       $"|     ( -- a )
                                   2369 ;       Run time routine compiled by $".
                                   2370 ;       Return address of a compiled string.
      000BA8 0B 8B                 2371         .word      LINK
                           000BAA  2372 LINK = . 
      000BAA 43                    2373 	.byte      COMPO+3
      000BAB 24 22 7C              2374         .byte     '$','"','|'
      000BAE                       2375 STRQP:
      000BAE CD 0B 8F         [ 4] 2376         CALL     DOSTR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000BB1 81               [ 4] 2377         RET
                                   2378 
                                   2379 ;       ."|     ( -- )
                                   2380 ;       Run time routine of ." .
                                   2381 ;       Output a compiled string.
      000BB2 0B AA                 2382         .word      LINK
                           000BB4  2383 LINK = . 
      000BB4 43                    2384 	.byte      COMPO+3
      000BB5 2E 22 7C              2385         .byte     '.','"','|'
      000BB8                       2386 DOTQP:
      000BB8 CD 0B 8F         [ 4] 2387         CALL     DOSTR
      000BBB CD 07 E9         [ 4] 2388         CALL     COUNT
      000BBE CC 0B 5B         [ 2] 2389         JP     TYPES
                                   2390 
                                   2391 ;       .R      ( n +n -- )
                                   2392 ;       Display an integer in a field
                                   2393 ;       of n columns, right justified.
      000BC1 0B B4                 2394         .word      LINK
                           000BC3  2395 LINK = . 
      000BC3 02                    2396         .byte      2
      000BC4 2E 52                 2397         .ascii     ".R"
      000BC6                       2398 DOTR:
      000BC6 CD 02 2E         [ 4] 2399         CALL     TOR
      000BC9 CD 09 9B         [ 4] 2400         CALL     STR
      000BCC CD 02 0F         [ 4] 2401         CALL     RFROM
      000BCF CD 02 8F         [ 4] 2402         CALL     OVER
      000BD2 CD 04 5E         [ 4] 2403         CALL     SUBB
      000BD5 CD 0B 40         [ 4] 2404         CALL     SPACS
      000BD8 CC 0B 5B         [ 2] 2405         JP     TYPES
                                   2406 
                                   2407 ;       U.R     ( u +n -- )
                                   2408 ;       Display an unsigned integer
                                   2409 ;       in n column, right justified.
      000BDB 0B C3                 2410         .word      LINK
                           000BDD  2411 LINK = . 
      000BDD 03                    2412         .byte      3
      000BDE 55 2E 52              2413         .ascii     "U.R"
      000BE1                       2414 UDOTR:
      000BE1 CD 02 2E         [ 4] 2415         CALL     TOR
      000BE4 CD 09 1E         [ 4] 2416         CALL     BDIGS
      000BE7 CD 09 58         [ 4] 2417         CALL     DIGS
      000BEA CD 09 83         [ 4] 2418         CALL     EDIGS
      000BED CD 02 0F         [ 4] 2419         CALL     RFROM
      000BF0 CD 02 8F         [ 4] 2420         CALL     OVER
      000BF3 CD 04 5E         [ 4] 2421         CALL     SUBB
      000BF6 CD 0B 40         [ 4] 2422         CALL     SPACS
      000BF9 CC 0B 5B         [ 2] 2423         JP     TYPES
                                   2424 
                                   2425 ;       U.      ( u -- )
                                   2426 ;       Display an unsigned integer
                                   2427 ;       in free format.
      000BFC 0B DD                 2428         .word      LINK
                           000BFE  2429 LINK = . 
      000BFE 02                    2430         .byte      2
      000BFF 55 2E                 2431         .ascii     "U."
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000C01                       2432 UDOT:
      000C01 CD 09 1E         [ 4] 2433         CALL     BDIGS
      000C04 CD 09 58         [ 4] 2434         CALL     DIGS
      000C07 CD 09 83         [ 4] 2435         CALL     EDIGS
      000C0A CD 0B 31         [ 4] 2436         CALL     SPACE
      000C0D CC 0B 5B         [ 2] 2437         JP     TYPES
                                   2438 
                                   2439 ;       .       ( w -- )
                                   2440 ;       Display an integer in free
                                   2441 ;       format, preceeded by a space.
      000C10 0B FE                 2442         .word      LINK
                           000C12  2443 LINK = . 
      000C12 01                    2444         .byte      1
      000C13 2E                    2445         .ascii     "."
      000C14                       2446 DOT:
      000C14 CD 03 20         [ 4] 2447         CALL     BASE
      000C17 CD 01 BE         [ 4] 2448         CALL     AT
      000C1A CD 01 36         [ 4] 2449         CALL     DOLIT
      000C1D 00 0A                 2450         .word      10
      000C1F CD 02 DA         [ 4] 2451         CALL     XORR    ;?decimal
      000C22 CD 01 69         [ 4] 2452         CALL     QBRAN
      000C25 0C 2A                 2453         .word      DOT1
      000C27 CC 0C 01         [ 2] 2454         JP     UDOT
      000C2A CD 09 9B         [ 4] 2455 DOT1:   CALL     STR
      000C2D CD 0B 31         [ 4] 2456         CALL     SPACE
      000C30 CC 0B 5B         [ 2] 2457         JP     TYPES
                                   2458 
                                   2459 ;       ?       ( a -- )
                                   2460 ;       Display contents in memory cell.
      000C33 0C 12                 2461         .word      LINK
                                   2462         
                           000C35  2463 LINK = . 
      000C35 01                    2464         .byte      1
      000C36 3F                    2465         .ascii     "?"
      000C37                       2466 QUEST:
      000C37 CD 01 BE         [ 4] 2467         CALL     AT
      000C3A CC 0C 14         [ 2] 2468         JP     DOT
                                   2469 
                                   2470 ;; Parsing
                                   2471 
                                   2472 ;       parse   ( b u c -- b u delta ; <string> )
                                   2473 ;       Scan string delimited by c.
                                   2474 ;       Return found string and its offset.
      000C3D 0C 35                 2475         .word      LINK
                           000C3F  2476 LINK = . 
      000C3F 05                    2477         .byte      5
      000C40 70 61 72 73 65        2478         .ascii     "parse"
      000C45                       2479 PARS:
      000C45 CD 03 2F         [ 4] 2480         CALL     TEMP
      000C48 CD 01 A7         [ 4] 2481         CALL     STORE
      000C4B CD 02 8F         [ 4] 2482         CALL     OVER
      000C4E CD 02 2E         [ 4] 2483         CALL     TOR
      000C51 CD 02 65         [ 4] 2484         CALL     DUPP
      000C54 CD 01 69         [ 4] 2485         CALL     QBRAN
      000C57 0C FD                 2486         .word    PARS8
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000C59 CD 06 EC         [ 4] 2487         CALL     ONEM
      000C5C CD 03 2F         [ 4] 2488         CALL     TEMP
      000C5F CD 01 BE         [ 4] 2489         CALL     AT
      000C62 CD 07 06         [ 4] 2490         CALL     BLANK
      000C65 CD 04 86         [ 4] 2491         CALL     EQUAL
      000C68 CD 01 69         [ 4] 2492         CALL     QBRAN
      000C6B 0C 9E                 2493         .word      PARS3
      000C6D CD 02 2E         [ 4] 2494         CALL     TOR
      000C70 CD 07 06         [ 4] 2495 PARS1:  CALL     BLANK
      000C73 CD 02 8F         [ 4] 2496         CALL     OVER
      000C76 CD 01 DC         [ 4] 2497         CALL     CAT     ;skip leading blanks ONLY
      000C79 CD 04 5E         [ 4] 2498         CALL     SUBB
      000C7C CD 02 9E         [ 4] 2499         CALL     ZLESS
      000C7F CD 04 1A         [ 4] 2500         CALL     INVER
      000C82 CD 01 69         [ 4] 2501         CALL     QBRAN
      000C85 0C 9B                 2502         .word      PARS2
      000C87 CD 06 DF         [ 4] 2503         CALL     ONEP
      000C8A CD 01 4A         [ 4] 2504         CALL     DONXT
      000C8D 0C 70                 2505         .word      PARS1
      000C8F CD 02 0F         [ 4] 2506         CALL     RFROM
      000C92 CD 02 5B         [ 4] 2507         CALL     DROP
      000C95 CD 07 13         [ 4] 2508         CALL     ZERO
      000C98 CC 02 65         [ 2] 2509         JP     DUPP
      000C9B CD 02 0F         [ 4] 2510 PARS2:  CALL     RFROM
      000C9E CD 02 8F         [ 4] 2511 PARS3:  CALL     OVER
      000CA1 CD 02 75         [ 4] 2512         CALL     SWAPP
      000CA4 CD 02 2E         [ 4] 2513         CALL     TOR
      000CA7 CD 03 2F         [ 4] 2514 PARS4:  CALL     TEMP
      000CAA CD 01 BE         [ 4] 2515         CALL     AT
      000CAD CD 02 8F         [ 4] 2516         CALL     OVER
      000CB0 CD 01 DC         [ 4] 2517         CALL     CAT
      000CB3 CD 04 5E         [ 4] 2518         CALL     SUBB    ;scan for delimiter
      000CB6 CD 03 2F         [ 4] 2519         CALL     TEMP
      000CB9 CD 01 BE         [ 4] 2520         CALL     AT
      000CBC CD 07 06         [ 4] 2521         CALL     BLANK
      000CBF CD 04 86         [ 4] 2522         CALL     EQUAL
      000CC2 CD 01 69         [ 4] 2523         CALL     QBRAN
      000CC5 0C CA                 2524         .word      PARS5
      000CC7 CD 02 9E         [ 4] 2525         CALL     ZLESS
      000CCA CD 01 69         [ 4] 2526 PARS5:  CALL     QBRAN
      000CCD 0C DF                 2527         .word      PARS6
      000CCF CD 06 DF         [ 4] 2528         CALL     ONEP
      000CD2 CD 01 4A         [ 4] 2529         CALL     DONXT
      000CD5 0C A7                 2530         .word      PARS4
      000CD7 CD 02 65         [ 4] 2531         CALL     DUPP
      000CDA CD 02 2E         [ 4] 2532         CALL     TOR
      000CDD 20 0F            [ 2] 2533         JRA     PARS7
      000CDF CD 02 0F         [ 4] 2534 PARS6:  CALL     RFROM
      000CE2 CD 02 5B         [ 4] 2535         CALL     DROP
      000CE5 CD 02 65         [ 4] 2536         CALL     DUPP
      000CE8 CD 06 DF         [ 4] 2537         CALL     ONEP
      000CEB CD 02 2E         [ 4] 2538         CALL     TOR
      000CEE CD 02 8F         [ 4] 2539 PARS7:  CALL     OVER
      000CF1 CD 04 5E         [ 4] 2540         CALL     SUBB
      000CF4 CD 02 0F         [ 4] 2541         CALL     RFROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000CF7 CD 02 0F         [ 4] 2542         CALL     RFROM
      000CFA CC 04 5E         [ 2] 2543         JP     SUBB
      000CFD CD 02 8F         [ 4] 2544 PARS8:  CALL     OVER
      000D00 CD 02 0F         [ 4] 2545         CALL     RFROM
      000D03 CC 04 5E         [ 2] 2546         JP     SUBB
                                   2547 
                                   2548 ;       PARSE   ( c -- b u ; <string> )
                                   2549 ;       Scan input stream and return
                                   2550 ;       counted string delimited by c.
      000D06 0C 3F                 2551         .word      LINK
                           000D08  2552 LINK = . 
      000D08 05                    2553         .byte      5
      000D09 50 41 52 53 45        2554         .ascii     "PARSE"
      000D0E                       2555 PARSE:
      000D0E CD 02 2E         [ 4] 2556         CALL     TOR
      000D11 CD 08 22         [ 4] 2557         CALL     TIB
      000D14 CD 03 3E         [ 4] 2558         CALL     INN
      000D17 CD 01 BE         [ 4] 2559         CALL     AT
      000D1A CD 04 00         [ 4] 2560         CALL     PLUS    ;current input buffer pointer
      000D1D CD 03 4E         [ 4] 2561         CALL     NTIB
      000D20 CD 01 BE         [ 4] 2562         CALL     AT
      000D23 CD 03 3E         [ 4] 2563         CALL     INN
      000D26 CD 01 BE         [ 4] 2564         CALL     AT
      000D29 CD 04 5E         [ 4] 2565         CALL     SUBB    ;remaining count
      000D2C CD 02 0F         [ 4] 2566         CALL     RFROM
      000D2F CD 0C 45         [ 4] 2567         CALL     PARS
      000D32 CD 03 3E         [ 4] 2568         CALL     INN
      000D35 CC 07 82         [ 2] 2569         JP     PSTOR
                                   2570 
                                   2571 ;       .(      ( -- )
                                   2572 ;       Output following string up to next ) .
      000D38 0D 08                 2573         .word      LINK
                           000D3A  2574 LINK = . 
      000D3A 82                    2575 	.byte      IMEDD+2
      000D3B 2E 28                 2576         .ascii     ".("
      000D3D                       2577 DOTPR:
      000D3D CD 01 36         [ 4] 2578         CALL     DOLIT
      000D40 00 29                 2579         .word     41	; ")"
      000D42 CD 0D 0E         [ 4] 2580         CALL     PARSE
      000D45 CC 0B 5B         [ 2] 2581         JP     TYPES
                                   2582 
                                   2583 ;       (       ( -- )
                                   2584 ;       Ignore following string up to next ).
                                   2585 ;       A comment.
      000D48 0D 3A                 2586         .word      LINK
                           000D4A  2587 LINK = . 
      000D4A 81                    2588 	.byte      IMEDD+1
      000D4B 28                    2589         .ascii     "("
      000D4C                       2590 PAREN:
      000D4C CD 01 36         [ 4] 2591         CALL     DOLIT
      000D4F 00 29                 2592         .word     41	; ")"
      000D51 CD 0D 0E         [ 4] 2593         CALL     PARSE
      000D54 CC 03 E0         [ 2] 2594         JP     DDROP
                                   2595 
                                   2596 ;       \       ( -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



                                   2597 ;       Ignore following text till
                                   2598 ;       end of line.
      000D57 0D 4A                 2599         .word      LINK
                           000D59  2600 LINK = . 
      000D59 81                    2601 	.byte      IMEDD+1
      000D5A 5C                    2602         .ascii     "\"
      000D5B                       2603 BKSLA:
                           000001  2604 .if CONVERT_TO_CODE
      000D5B 90 AE 00 0C      [ 2] 2605         ldw y,#UCTIB ; #TIB  
      000D5F 90 FE            [ 2] 2606         ldw y,(y)
      000D61 90 89            [ 2] 2607         pushw y ; count in TIB 
      000D63 90 AE 00 0A      [ 2] 2608         ldw y,#UINN ; >IN 
      000D67 90 BF 1C         [ 2] 2609         ldw YTEMP,y
      000D6A 90 85            [ 2] 2610         popw y 
      000D6C 91 CF 1C         [ 5] 2611         ldw [YTEMP],y
      000D6F 81               [ 4] 2612         ret 
                           000000  2613 .else
                                   2614         CALL     NTIB
                                   2615         CALL     AT
                                   2616         CALL     INN
                                   2617         JP     STORE
                                   2618 .endif 
                                   2619 
                                   2620 ;       WORD    ( c -- a ; <string> )
                                   2621 ;       Parse a word from input stream
                                   2622 ;       and copy it to code dictionary.
      000D70 0D 59                 2623         .word      LINK
                           000D72  2624 LINK = . 
      000D72 04                    2625         .byte      4
      000D73 57 4F 52 44           2626         .ascii     "WORD"
      000D77                       2627 WORDD:
      000D77 CD 0D 0E         [ 4] 2628         CALL     PARSE
      000D7A CD 08 00         [ 4] 2629         CALL     HERE
      000D7D CD 06 B4         [ 4] 2630         CALL     CELLP
      000D80 CC 08 C1         [ 2] 2631         JP     PACKS
                                   2632 
                                   2633 ;       TOKEN   ( -- a ; <string> )
                                   2634 ;       Parse a word from input stream
                                   2635 ;       and copy it to name dictionary.
      000D83 0D 72                 2636         .word      LINK
                           000D85  2637 LINK = . 
      000D85 05                    2638         .byte      5
      000D86 54 4F 4B 45 4E        2639         .ascii     "TOKEN"
      000D8B                       2640 TOKEN:
      000D8B CD 07 06         [ 4] 2641         CALL     BLANK
      000D8E CC 0D 77         [ 2] 2642         JP     WORDD
                                   2643 
                                   2644 ;; Dictionary search
                                   2645 
                                   2646 ;       NAME>   ( na -- ca )
                                   2647 ;       Return a code address given
                                   2648 ;       a name address.
      000D91 0D 85                 2649         .word      LINK
                           000D93  2650 LINK = . 
      000D93 05                    2651         .byte      5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000D94 4E 41 4D 45 3E        2652         .ascii     "NAME>"
      000D99                       2653 NAMET:
      000D99 CD 07 E9         [ 4] 2654         CALL     COUNT
      000D9C CD 01 36         [ 4] 2655         CALL     DOLIT
      000D9F 00 1F                 2656         .word      31
      000DA1 CD 02 B1         [ 4] 2657         CALL     ANDD
      000DA4 CC 04 00         [ 2] 2658         JP     PLUS
                                   2659 
                                   2660 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   2661 ;       Compare u cells in two
                                   2662 ;       strings. Return 0 if identical.
      000DA7 0D 93                 2663         .word      LINK
                           000DA9  2664 LINK = . 
      000DA9 05                    2665         .byte       5
      000DAA 53 41 4D 45 3F        2666         .ascii     "SAME?"
      000DAF                       2667 SAMEQ:
      000DAF CD 06 EC         [ 4] 2668         CALL     ONEM
      000DB2 CD 02 2E         [ 4] 2669         CALL     TOR
      000DB5 20 29            [ 2] 2670         JRA     SAME2
      000DB7 CD 02 8F         [ 4] 2671 SAME1:  CALL     OVER
      000DBA CD 02 22         [ 4] 2672         CALL     RAT
      000DBD CD 04 00         [ 4] 2673         CALL     PLUS
      000DC0 CD 01 DC         [ 4] 2674         CALL     CAT
      000DC3 CD 02 8F         [ 4] 2675         CALL     OVER
      000DC6 CD 02 22         [ 4] 2676         CALL     RAT
      000DC9 CD 04 00         [ 4] 2677         CALL     PLUS
      000DCC CD 01 DC         [ 4] 2678         CALL     CAT
      000DCF CD 04 5E         [ 4] 2679         CALL     SUBB
      000DD2 CD 03 AF         [ 4] 2680         CALL     QDUP
      000DD5 CD 01 69         [ 4] 2681         CALL     QBRAN
      000DD8 0D E0                 2682         .word      SAME2
      000DDA CD 02 0F         [ 4] 2683         CALL     RFROM
      000DDD CC 02 5B         [ 2] 2684         JP     DROP
      000DE0 CD 01 4A         [ 4] 2685 SAME2:  CALL     DONXT
      000DE3 0D B7                 2686         .word      SAME1
      000DE5 CC 07 13         [ 2] 2687         JP     ZERO
                                   2688 
                                   2689 ;       find    ( a va -- ca na | a F )
                                   2690 ;       Search vocabulary for string.
                                   2691 ;       Return ca and na if succeeded.
      000DE8 0D A9                 2692         .word      LINK
                           000DEA  2693 LINK = . 
      000DEA 04                    2694         .byte      4
      000DEB 46 49 4E 44           2695         .ascii     "FIND"
      000DEF                       2696 FIND:
      000DEF CD 02 75         [ 4] 2697         CALL     SWAPP
      000DF2 CD 02 65         [ 4] 2698         CALL     DUPP
      000DF5 CD 01 DC         [ 4] 2699         CALL     CAT
      000DF8 CD 03 2F         [ 4] 2700         CALL     TEMP
      000DFB CD 01 A7         [ 4] 2701         CALL     STORE
      000DFE CD 02 65         [ 4] 2702         CALL     DUPP
      000E01 CD 01 BE         [ 4] 2703         CALL     AT
      000E04 CD 02 2E         [ 4] 2704         CALL     TOR
      000E07 CD 06 B4         [ 4] 2705         CALL     CELLP
      000E0A CD 02 75         [ 4] 2706         CALL     SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000E0D CD 01 BE         [ 4] 2707 FIND1:  CALL     AT
      000E10 CD 02 65         [ 4] 2708         CALL     DUPP
      000E13 CD 01 69         [ 4] 2709         CALL     QBRAN
      000E16 0E 4C                 2710         .word      FIND6
      000E18 CD 02 65         [ 4] 2711         CALL     DUPP
      000E1B CD 01 BE         [ 4] 2712         CALL     AT
      000E1E CD 01 36         [ 4] 2713         CALL     DOLIT
      000E21 1F 7F                 2714         .word      MASKK
      000E23 CD 02 B1         [ 4] 2715         CALL     ANDD
      000E26 CD 02 22         [ 4] 2716         CALL     RAT
      000E29 CD 02 DA         [ 4] 2717         CALL     XORR
      000E2C CD 01 69         [ 4] 2718         CALL     QBRAN
      000E2F 0E 3B                 2719         .word      FIND2
      000E31 CD 06 B4         [ 4] 2720         CALL     CELLP
      000E34 CD 01 36         [ 4] 2721         CALL     DOLIT
      000E37 FF FF                 2722         .word     0xFFFF
      000E39 20 0C            [ 2] 2723         JRA     FIND3
      000E3B CD 06 B4         [ 4] 2724 FIND2:  CALL     CELLP
      000E3E CD 03 2F         [ 4] 2725         CALL     TEMP
      000E41 CD 01 BE         [ 4] 2726         CALL     AT
      000E44 CD 0D AF         [ 4] 2727         CALL     SAMEQ
      000E47 CD 01 80         [ 4] 2728 FIND3:  CALL     BRAN
      000E4A 0E 5B                 2729         .word      FIND4
      000E4C CD 02 0F         [ 4] 2730 FIND6:  CALL     RFROM
      000E4F CD 02 5B         [ 4] 2731         CALL     DROP
      000E52 CD 02 75         [ 4] 2732         CALL     SWAPP
      000E55 CD 06 C3         [ 4] 2733         CALL     CELLM
      000E58 CC 02 75         [ 2] 2734         JP     SWAPP
      000E5B CD 01 69         [ 4] 2735 FIND4:  CALL     QBRAN
      000E5E 0E 68                 2736         .word      FIND5
      000E60 CD 06 C3         [ 4] 2737         CALL     CELLM
      000E63 CD 06 C3         [ 4] 2738         CALL     CELLM
      000E66 20 A5            [ 2] 2739         JRA     FIND1
      000E68 CD 02 0F         [ 4] 2740 FIND5:  CALL     RFROM
      000E6B CD 02 5B         [ 4] 2741         CALL     DROP
      000E6E CD 02 75         [ 4] 2742         CALL     SWAPP
      000E71 CD 02 5B         [ 4] 2743         CALL     DROP
      000E74 CD 06 C3         [ 4] 2744         CALL     CELLM
      000E77 CD 02 65         [ 4] 2745         CALL     DUPP
      000E7A CD 0D 99         [ 4] 2746         CALL     NAMET
      000E7D CC 02 75         [ 2] 2747         JP     SWAPP
                                   2748 
                                   2749 ;       NAME?   ( a -- ca na | a F )
                                   2750 ;       Search vocabularies for a string.
      000E80 0D EA                 2751         .word      LINK
                           000E82  2752 LINK = . 
      000E82 05                    2753         .byte      5
      000E83 4E 41 4D 45 3F        2754         .ascii     "NAME?"
      000E88                       2755 NAMEQ:
      000E88 CD 03 81         [ 4] 2756         CALL   CNTXT
      000E8B CC 0D EF         [ 2] 2757         JP     FIND
                                   2758 
                                   2759 ;; Terminal response
                                   2760 
                                   2761 ;       ^H      ( bot eot cur -- bot eot cur )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



                                   2762 ;       Backup cursor by one character.
      000E8E 0E 82                 2763         .word      LINK
                           000E90  2764 LINK = . 
      000E90 02                    2765         .byte      2
      000E91 5E 48                 2766         .ascii     "^H"
      000E93                       2767 BKSP:
      000E93 CD 02 2E         [ 4] 2768         CALL     TOR
      000E96 CD 02 8F         [ 4] 2769         CALL     OVER
      000E99 CD 02 0F         [ 4] 2770         CALL     RFROM
      000E9C CD 02 75         [ 4] 2771         CALL     SWAPP
      000E9F CD 02 8F         [ 4] 2772         CALL     OVER
      000EA2 CD 02 DA         [ 4] 2773         CALL     XORR
      000EA5 CD 01 69         [ 4] 2774         CALL     QBRAN
      000EA8 0E C3                 2775         .word      BACK1
      000EAA CD 01 36         [ 4] 2776         CALL     DOLIT
      000EAD 00 08                 2777         .word      BKSPP
      000EAF CD 01 20         [ 4] 2778         CALL     EMIT
      000EB2 CD 06 EC         [ 4] 2779         CALL     ONEM
      000EB5 CD 07 06         [ 4] 2780         CALL     BLANK
      000EB8 CD 01 20         [ 4] 2781         CALL     EMIT
      000EBB CD 01 36         [ 4] 2782         CALL     DOLIT
      000EBE 00 08                 2783         .word      BKSPP
      000EC0 CC 01 20         [ 2] 2784         JP     EMIT
      000EC3 81               [ 4] 2785 BACK1:  RET
                                   2786 
                                   2787 ;       TAP     ( bot eot cur c -- bot eot cur )
                                   2788 ;       Accept and echo key stroke
                                   2789 ;       and bump cursor.
      000EC4 0E 90                 2790         .word      LINK
                           000EC6  2791 LINK = . 
      000EC6 03                    2792         .byte      3
      000EC7 54 41 50              2793         .ascii     "TAP"
      000ECA                       2794 TAP:
      000ECA CD 02 65         [ 4] 2795         CALL     DUPP
      000ECD CD 01 20         [ 4] 2796         CALL     EMIT
      000ED0 CD 02 8F         [ 4] 2797         CALL     OVER
      000ED3 CD 01 CB         [ 4] 2798         CALL     CSTOR
      000ED6 CC 06 DF         [ 2] 2799         JP     ONEP
                                   2800 
                                   2801 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   2802 ;       Process a key stroke,
                                   2803 ;       CR or backspace.
      000ED9 0E C6                 2804         .word      LINK
                           000EDB  2805 LINK = . 
      000EDB 04                    2806         .byte      4
      000EDC 4B 54 41 50           2807         .ascii     "KTAP"
      000EE0                       2808 KTAP:
      000EE0 CD 02 65         [ 4] 2809         CALL     DUPP
      000EE3 CD 01 36         [ 4] 2810         CALL     DOLIT
      000EE6 00 0D                 2811         .word      CRR
      000EE8 CD 02 DA         [ 4] 2812         CALL     XORR
      000EEB CD 01 69         [ 4] 2813         CALL     QBRAN
      000EEE 0F 06                 2814         .word      KTAP2
      000EF0 CD 01 36         [ 4] 2815         CALL     DOLIT
      000EF3 00 08                 2816         .word      BKSPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000EF5 CD 02 DA         [ 4] 2817         CALL     XORR
      000EF8 CD 01 69         [ 4] 2818         CALL     QBRAN
      000EFB 0F 03                 2819         .word      KTAP1
      000EFD CD 07 06         [ 4] 2820         CALL     BLANK
      000F00 CC 0E CA         [ 2] 2821         JP     TAP
      000F03 CC 0E 93         [ 2] 2822 KTAP1:  JP     BKSP
      000F06 CD 02 5B         [ 4] 2823 KTAP2:  CALL     DROP
      000F09 CD 02 75         [ 4] 2824         CALL     SWAPP
      000F0C CD 02 5B         [ 4] 2825         CALL     DROP
      000F0F CC 02 65         [ 2] 2826         JP     DUPP
                                   2827 
                                   2828 ;       accept  ( b u -- b u )
                                   2829 ;       Accept characters to input
                                   2830 ;       buffer. Return with actual count.
      000F12 0E DB                 2831         .word      LINK
                           000F14  2832 LINK = . 
      000F14 06                    2833         .byte      6
      000F15 41 43 43 45 50 54     2834         .ascii     "ACCEPT"
      000F1B                       2835 ACCEP:
      000F1B CD 02 8F         [ 4] 2836         CALL     OVER
      000F1E CD 04 00         [ 4] 2837         CALL     PLUS
      000F21 CD 02 8F         [ 4] 2838         CALL     OVER
      000F24 CD 03 EB         [ 4] 2839 ACCP1:  CALL     DDUP
      000F27 CD 02 DA         [ 4] 2840         CALL     XORR
      000F2A CD 01 69         [ 4] 2841         CALL     QBRAN
      000F2D 0F 4F                 2842         .word      ACCP4
      000F2F CD 0A F9         [ 4] 2843         CALL     KEY
      000F32 CD 02 65         [ 4] 2844         CALL     DUPP
      000F35 CD 07 06         [ 4] 2845         CALL     BLANK
      000F38 CD 01 36         [ 4] 2846         CALL     DOLIT
      000F3B 00 7F                 2847         .word      127
      000F3D CD 05 20         [ 4] 2848         CALL     WITHI
      000F40 CD 01 69         [ 4] 2849         CALL     QBRAN
      000F43 0F 4A                 2850         .word      ACCP2
      000F45 CD 0E CA         [ 4] 2851         CALL     TAP
      000F48 20 03            [ 2] 2852         JRA     ACCP3
      000F4A CD 0E E0         [ 4] 2853 ACCP2:  CALL     KTAP
      000F4D 20 D5            [ 2] 2854 ACCP3:  JRA     ACCP1
      000F4F CD 02 5B         [ 4] 2855 ACCP4:  CALL     DROP
      000F52 CD 02 8F         [ 4] 2856         CALL     OVER
      000F55 CC 04 5E         [ 2] 2857         JP     SUBB
                                   2858 
                                   2859 ;       QUERY   ( -- )
                                   2860 ;       Accept input stream to
                                   2861 ;       terminal input buffer.
      000F58 0F 14                 2862         .word      LINK
                                   2863         
                           000F5A  2864 LINK = . 
      000F5A 05                    2865         .byte      5
      000F5B 51 55 45 52 59        2866         .ascii     "QUERY"
      000F60                       2867 QUERY:
      000F60 CD 08 22         [ 4] 2868         CALL     TIB
      000F63 CD 01 36         [ 4] 2869         CALL     DOLIT
      000F66 00 50                 2870         .word      80
      000F68 CD 0F 1B         [ 4] 2871         CALL     ACCEP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000F6B CD 03 4E         [ 4] 2872         CALL     NTIB
      000F6E CD 01 A7         [ 4] 2873         CALL     STORE
      000F71 CD 02 5B         [ 4] 2874         CALL     DROP
      000F74 CD 07 13         [ 4] 2875         CALL     ZERO
      000F77 CD 03 3E         [ 4] 2876         CALL     INN
      000F7A CC 01 A7         [ 2] 2877         JP     STORE
                                   2878 
                                   2879 ;       ABORT   ( -- )
                                   2880 ;       Reset data stack and
                                   2881 ;       jump to QUIT.
      000F7D 0F 5A                 2882         .word      LINK
                           000F7F  2883 LINK = . 
      000F7F 05                    2884         .byte      5
      000F80 41 42 4F 52 54        2885         .ascii     "ABORT"
      000F85                       2886 ABORT:
      000F85 CD 10 7C         [ 4] 2887         CALL     PRESE
      000F88 CC 10 99         [ 2] 2888         JP     QUIT
                                   2889 
                                   2890 ;       abort"  ( f -- )
                                   2891 ;       Run time routine of ABORT".
                                   2892 ;       Abort with a message.
      000F8B 0F 7F                 2893         .word      LINK
                           000F8D  2894 LINK = . 
      000F8D 46                    2895 	.byte      COMPO+6
      000F8E 41 42 4F 52 54        2896         .ascii     "ABORT"
      000F93 22                    2897         .byte      '"'
      000F94                       2898 ABORQ:
      000F94 CD 01 69         [ 4] 2899         CALL     QBRAN
      000F97 0F B3                 2900         .word      ABOR2   ;text flag
      000F99 CD 0B 8F         [ 4] 2901         CALL     DOSTR
      000F9C CD 0B 31         [ 4] 2902 ABOR1:  CALL     SPACE
      000F9F CD 07 E9         [ 4] 2903         CALL     COUNT
      000FA2 CD 0B 5B         [ 4] 2904         CALL     TYPES
      000FA5 CD 01 36         [ 4] 2905         CALL     DOLIT
      000FA8 00 3F                 2906         .word     63 ; "?"
      000FAA CD 01 20         [ 4] 2907         CALL     EMIT
      000FAD CD 0B 79         [ 4] 2908         CALL     CR
      000FB0 CC 0F 85         [ 2] 2909         JP     ABORT   ;pass error string
      000FB3 CD 0B 8F         [ 4] 2910 ABOR2:  CALL     DOSTR
      000FB6 CC 02 5B         [ 2] 2911         JP     DROP
                                   2912 
                                   2913 ;; The text interpreter
                                   2914 
                                   2915 ;       $INTERPRET      ( a -- )
                                   2916 ;       Interpret a word. If failed,
                                   2917 ;       try to convert it to an integer.
      000FB9 0F 8D                 2918         .word      LINK
                           000FBB  2919 LINK = . 
      000FBB 0A                    2920         .byte      10
      000FBC 24 49 4E 54 45 52 50  2921         .ascii     "$INTERPRET"
             52 45 54
      000FC6                       2922 INTER:
      000FC6 CD 0E 88         [ 4] 2923         CALL     NAMEQ
      000FC9 CD 03 AF         [ 4] 2924         CALL     QDUP    ;?defined
      000FCC CD 01 69         [ 4] 2925         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000FCF 0F F0                 2926         .word      INTE1
      000FD1 CD 01 BE         [ 4] 2927         CALL     AT
      000FD4 CD 01 36         [ 4] 2928         CALL     DOLIT
      000FD7 40 00                 2929 	.word       0x4000	; COMPO*256
      000FD9 CD 02 B1         [ 4] 2930         CALL     ANDD    ;?compile only lexicon bits
      000FDC CD 0F 94         [ 4] 2931         CALL     ABORQ
      000FDF 0D                    2932         .byte      13
      000FE0 20 63 6F 6D 70 69 6C  2933         .ascii     " compile only"
             65 20 6F 6E 6C 79
      000FED CC 01 90         [ 2] 2934         JP     EXECU
      000FF0 CD 0A 26         [ 4] 2935 INTE1:  CALL     NUMBQ   ;convert a number
      000FF3 CD 01 69         [ 4] 2936         CALL     QBRAN
      000FF6 0F 9C                 2937         .word    ABOR1
      000FF8 81               [ 4] 2938         RET
                                   2939 
                                   2940 ;       [       ( -- )
                                   2941 ;       Start  text interpreter.
      000FF9 0F BB                 2942         .word      LINK
                           000FFB  2943 LINK = . 
      000FFB 81                    2944 	.byte      IMEDD+1
      000FFC 5B                    2945         .ascii     "["
      000FFD                       2946 LBRAC:
      000FFD CD 01 36         [ 4] 2947         CALL     DOLIT
      001000 0F C6                 2948         .word      INTER
      001002 CD 03 5F         [ 4] 2949         CALL     TEVAL
      001005 CC 01 A7         [ 2] 2950         JP     STORE
                                   2951 
                                   2952 ;       .OK     ( -- )
                                   2953 ;       Display 'ok' while interpreting.
      001008 0F FB                 2954         .word      LINK
                           00100A  2955 LINK = . 
      00100A 03                    2956         .byte      3
      00100B 2E 4F 4B              2957         .ascii     ".OK"
      00100E                       2958 DOTOK:
      00100E CD 01 36         [ 4] 2959         CALL     DOLIT
      001011 0F C6                 2960         .word      INTER
      001013 CD 03 5F         [ 4] 2961         CALL     TEVAL
      001016 CD 01 BE         [ 4] 2962         CALL     AT
      001019 CD 04 86         [ 4] 2963         CALL     EQUAL
      00101C CD 01 69         [ 4] 2964         CALL     QBRAN
      00101F 10 28                 2965         .word      DOTO1
      001021 CD 0B B8         [ 4] 2966         CALL     DOTQP
      001024 03                    2967         .byte      3
      001025 20 6F 6B              2968         .ascii     " ok"
      001028 CC 0B 79         [ 2] 2969 DOTO1:  JP     CR
                                   2970 
                                   2971 ;       ?STACK  ( -- )
                                   2972 ;       Abort if stack underflows.
      00102B 10 0A                 2973         .word      LINK
                           00102D  2974 LINK = . 
      00102D 06                    2975         .byte      6
      00102E 3F 53 54 41 43 4B     2976         .ascii     "?STACK"
      001034                       2977 QSTAC: 
      001034 CD 07 56         [ 4] 2978         CALL     DEPTH
      001037 CD 02 9E         [ 4] 2979         CALL     ZLESS   ;check only for underflow
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      00103A CD 0F 94         [ 4] 2980         CALL     ABORQ
      00103D 0B                    2981         .byte      11
      00103E 20 75 6E 64 65 72 66  2982         .ascii     " underflow "
             6C 6F 77 20
      001049 81               [ 4] 2983         RET
                                   2984 
                                   2985 ;       EVAL    ( -- )
                                   2986 ;       Interpret  input stream.
      00104A 10 2D                 2987         .word      LINK
                           00104C  2988 LINK = . 
      00104C 04                    2989         .byte      4
      00104D 45 56 41 4C           2990         .ascii     "EVAL"
      001051                       2991 EVAL:
      001051 CD 0D 8B         [ 4] 2992 EVAL1:  CALL     TOKEN
      001054 CD 02 65         [ 4] 2993         CALL     DUPP
      001057 CD 01 DC         [ 4] 2994         CALL     CAT     ;?input stream empty
      00105A CD 01 69         [ 4] 2995         CALL     QBRAN
      00105D 10 6D                 2996         .word    EVAL2
      00105F CD 03 5F         [ 4] 2997         CALL     TEVAL
      001062 CD 08 36         [ 4] 2998         CALL     ATEXE
      001065 CD 10 34         [ 4] 2999         CALL     QSTAC   ;evaluate input, check stack
      001068 CD 01 80         [ 4] 3000         CALL     BRAN
      00106B 10 51                 3001         .word    EVAL1
      00106D CD 02 5B         [ 4] 3002 EVAL2:  CALL     DROP
      001070 CC 10 0E         [ 2] 3003         JP       DOTOK
                                   3004 
                                   3005 ;       PRESET  ( -- )
                                   3006 ;       Reset data stack pointer and
                                   3007 ;       terminal input buffer.
      001073 10 4C                 3008         .word      LINK
                           001075  3009 LINK = . 
      001075 06                    3010         .byte      6
      001076 50 52 45 53 45 54     3011         .ascii     "PRESET"
      00107C                       3012 PRESE:
      00107C CD 01 36         [ 4] 3013         CALL     DOLIT
      00107F 16 F0                 3014         .word      SPP
      001081 CD 02 52         [ 4] 3015         CALL     SPSTO
      001084 CD 01 36         [ 4] 3016         CALL     DOLIT
      001087 17 00                 3017         .word      TIBB
      001089 CD 03 4E         [ 4] 3018         CALL     NTIB
      00108C CD 06 B4         [ 4] 3019         CALL     CELLP
      00108F CC 01 A7         [ 2] 3020         JP     STORE
                                   3021 
                                   3022 ;       QUIT    ( -- )
                                   3023 ;       Reset return stack pointer
                                   3024 ;       and start text interpreter.
      001092 10 75                 3025         .word      LINK
                           001094  3026 LINK = . 
      001094 04                    3027         .byte      4
      001095 51 55 49 54           3028         .ascii     "QUIT"
      001099                       3029 QUIT:
      001099 CD 01 36         [ 4] 3030         CALL     DOLIT
      00109C 17 FF                 3031         .word      RPP
      00109E CD 01 F9         [ 4] 3032         CALL     RPSTO   ;reset return stack pointer
      0010A1 CD 0F FD         [ 4] 3033 QUIT1:  CALL     LBRAC   ;start interpretation
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      0010A4 CD 0F 60         [ 4] 3034 QUIT2:  CALL     QUERY   ;get input
      0010A7 CD 10 51         [ 4] 3035         CALL     EVAL
      0010AA 20 F8            [ 2] 3036         JRA     QUIT2   ;continue till error
                                   3037 
                                   3038 ;; The compiler
                                   3039 
                                   3040 ;       '       ( -- ca )
                                   3041 ;       Search vocabularies for
                                   3042 ;       next word in input stream.
      0010AC 10 94                 3043         .word      LINK
                           0010AE  3044 LINK = . 
      0010AE 01                    3045         .byte      1
      0010AF 27                    3046         .ascii     "'"
      0010B0                       3047 TICK:
      0010B0 CD 0D 8B         [ 4] 3048         CALL     TOKEN
      0010B3 CD 0E 88         [ 4] 3049         CALL     NAMEQ   ;?defined
      0010B6 CD 01 69         [ 4] 3050         CALL     QBRAN
      0010B9 0F 9C                 3051         .word      ABOR1
      0010BB 81               [ 4] 3052         RET     ;yes, push code address
                                   3053 
                                   3054 ;       ALLOT   ( n -- )
                                   3055 ;       Allocate n bytes to  code dictionary.
      0010BC 10 AE                 3056         .word      LINK
                           0010BE  3057 LINK = . 
      0010BE 05                    3058         .byte      5
      0010BF 41 4C 4C 4F 54        3059         .ascii     "ALLOT"
      0010C4                       3060 ALLOT:
      0010C4 CD 03 8F         [ 4] 3061         CALL     CPP
      0010C7 CC 07 82         [ 2] 3062         JP     PSTOR
                                   3063 
                                   3064 ;       ,       ( w -- )
                                   3065 ;         Compile an integer into
                                   3066 ;         code dictionary.
      0010CA 10 BE                 3067         .word      LINK
                           0010CC  3068 LINK = . 
      0010CC 01                    3069         .byte      1
      0010CD 2C                    3070         .ascii     ","
      0010CE                       3071 COMMA:
      0010CE CD 08 00         [ 4] 3072         CALL     HERE
      0010D1 CD 02 65         [ 4] 3073         CALL     DUPP
      0010D4 CD 06 B4         [ 4] 3074         CALL     CELLP   ;cell boundary
      0010D7 CD 03 8F         [ 4] 3075         CALL     CPP
      0010DA CD 01 A7         [ 4] 3076         CALL     STORE
      0010DD CC 01 A7         [ 2] 3077         JP     STORE
                                   3078 
                                   3079 ;       C,      ( c -- )
                                   3080 ;       Compile a byte into
                                   3081 ;       code dictionary.
      0010E0 10 CC                 3082        .word      LINK
                           0010E2  3083 LINK = . 
      0010E2 02                    3084         .byte      2
      0010E3 43 2C                 3085         .ascii     "C,"
      0010E5                       3086 CCOMMA:
      0010E5 CD 08 00         [ 4] 3087         CALL     HERE
      0010E8 CD 02 65         [ 4] 3088         CALL     DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      0010EB CD 06 DF         [ 4] 3089         CALL     ONEP
      0010EE CD 03 8F         [ 4] 3090         CALL     CPP
      0010F1 CD 01 A7         [ 4] 3091         CALL     STORE
      0010F4 CC 01 CB         [ 2] 3092         JP     CSTOR
                                   3093 
                                   3094 ;       [COMPILE]       ( -- ; <string> )
                                   3095 ;       Compile next immediate
                                   3096 ;       word into code dictionary.
      0010F7 10 E2                 3097         .word      LINK
                           0010F9  3098 LINK = . 
      0010F9 89                    3099 	.byte      IMEDD+9
      0010FA 5B 43 4F 4D 50 49 4C  3100         .ascii     "[COMPILE]"
             45 5D
      001103                       3101 BCOMP:
      001103 CD 10 B0         [ 4] 3102         CALL     TICK
      001106 CC 13 5F         [ 2] 3103         JP     JSRC
                                   3104 
                                   3105 ;       COMPILE ( -- )
                                   3106 ;       Compile next jsr in
                                   3107 ;       colon list to code dictionary.
      001109 10 F9                 3108         .word      LINK
                           00110B  3109 LINK = . 
      00110B 47                    3110 	.byte      COMPO+7
      00110C 43 4F 4D 50 49 4C 45  3111         .ascii     "COMPILE"
      001113                       3112 COMPI:
      001113 CD 02 0F         [ 4] 3113         CALL     RFROM
      001116 CD 06 DF         [ 4] 3114         CALL     ONEP
      001119 CD 02 65         [ 4] 3115         CALL     DUPP
      00111C CD 01 BE         [ 4] 3116         CALL     AT
      00111F CD 13 5F         [ 4] 3117         CALL     JSRC    ;compile subroutine
      001122 CD 06 B4         [ 4] 3118         CALL     CELLP
      001125 CC 02 2E         [ 2] 3119         JP     TOR
                                   3120 
                                   3121 ;       LITERAL ( w -- )
                                   3122 ;       Compile tos to dictionary
                                   3123 ;       as an integer literal.
      001128 11 0B                 3124         .word      LINK
                           00112A  3125 LINK = . 
      00112A 87                    3126 	.byte      IMEDD+7
      00112B 4C 49 54 45 52 41 4C  3127         .ascii     "LITERAL"
      001132                       3128 LITER:
      001132 CD 11 13         [ 4] 3129         CALL     COMPI
      001135 CD 01 36         [ 4] 3130         CALL     DOLIT
      001138 CC 10 CE         [ 2] 3131         JP     COMMA
                                   3132 
                                   3133 ;       $,"     ( -- )
                                   3134 ;       Compile a literal string
                                   3135 ;       up to next " .
      00113B 11 2A                 3136         .word      LINK
                           00113D  3137 LINK = . 
      00113D 03                    3138         .byte      3
      00113E 24 2C 22              3139         .byte     '$',',','"'
      001141                       3140 STRCQ:
      001141 CD 01 36         [ 4] 3141         CALL     DOLIT
      001144 00 22                 3142         .word     34	; "
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      001146 CD 0D 0E         [ 4] 3143         CALL     PARSE
      001149 CD 08 00         [ 4] 3144         CALL     HERE
      00114C CD 08 C1         [ 4] 3145         CALL     PACKS   ;string to code dictionary
      00114F CD 07 E9         [ 4] 3146         CALL     COUNT
      001152 CD 04 00         [ 4] 3147         CALL     PLUS    ;calculate aligned end of string
      001155 CD 03 8F         [ 4] 3148         CALL     CPP
      001158 CC 01 A7         [ 2] 3149         JP     STORE
                                   3150 
                                   3151 ;; Structures
                                   3152 
                                   3153 ;       FOR     ( -- a )
                                   3154 ;       Start a FOR-NEXT loop
                                   3155 ;       structure in a colon definition.
      00115B 11 3D                 3156         .word      LINK
                           00115D  3157 LINK = . 
      00115D 83                    3158 	.byte      IMEDD+3
      00115E 46 4F 52              3159         .ascii     "FOR"
      001161                       3160 FOR:
      001161 CD 11 13         [ 4] 3161         CALL     COMPI
      001164 CD 02 2E         [ 4] 3162         CALL     TOR
      001167 CC 08 00         [ 2] 3163         JP     HERE
                                   3164 
                                   3165 ;       NEXT    ( a -- )
                                   3166 ;       Terminate a FOR-NEXT loop.
      00116A 11 5D                 3167         .word      LINK
                           00116C  3168 LINK = . 
      00116C 84                    3169 	.byte      IMEDD+4
      00116D 4E 45 58 54           3170         .ascii     "NEXT"
      001171                       3171 NEXT:
      001171 CD 11 13         [ 4] 3172         CALL     COMPI
      001174 CD 01 4A         [ 4] 3173         CALL     DONXT
      001177 CC 10 CE         [ 2] 3174         JP     COMMA
                                   3175 
                                   3176 ;       BEGIN   ( -- a )
                                   3177 ;       Start an infinite or
                                   3178 ;       indefinite loop structure.
      00117A 11 6C                 3179         .word      LINK
                           00117C  3180 LINK = . 
      00117C 85                    3181 	.byte      IMEDD+5
      00117D 42 45 47 49 4E        3182         .ascii     "BEGIN"
      001182                       3183 BEGIN:
      001182 CC 08 00         [ 2] 3184         JP     HERE
                                   3185 
                                   3186 ;       UNTIL   ( a -- )
                                   3187 ;       Terminate a BEGIN-UNTIL
                                   3188 ;       indefinite loop structure.
      001185 11 7C                 3189         .word      LINK
                           001187  3190 LINK = . 
      001187 85                    3191 	.byte      IMEDD+5
      001188 55 4E 54 49 4C        3192         .ascii     "UNTIL"
      00118D                       3193 UNTIL:
      00118D CD 11 13         [ 4] 3194         CALL     COMPI
      001190 CD 01 69         [ 4] 3195         CALL     QBRAN
      001193 CC 10 CE         [ 2] 3196         JP     COMMA
                                   3197 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                                   3198 ;       AGAIN   ( a -- )
                                   3199 ;       Terminate a BEGIN-AGAIN
                                   3200 ;       infinite loop structure.
      001196 11 87                 3201         .word      LINK
                           001198  3202 LINK = . 
      001198 85                    3203 	.byte      IMEDD+5
      001199 41 47 41 49 4E        3204         .ascii     "AGAIN"
      00119E                       3205 AGAIN:
      00119E CD 11 13         [ 4] 3206         CALL     COMPI
      0011A1 CD 01 80         [ 4] 3207         CALL     BRAN
      0011A4 CC 10 CE         [ 2] 3208         JP     COMMA
                                   3209 
                                   3210 ;       IF      ( -- A )
                                   3211 ;       Begin a conditional branch.
      0011A7 11 98                 3212         .word      LINK
                           0011A9  3213 LINK = . 
      0011A9 82                    3214 	.byte      IMEDD+2
      0011AA 49 46                 3215         .ascii     "IF"
      0011AC                       3216 IFF:
      0011AC CD 11 13         [ 4] 3217         CALL     COMPI
      0011AF CD 01 69         [ 4] 3218         CALL     QBRAN
      0011B2 CD 08 00         [ 4] 3219         CALL     HERE
      0011B5 CD 07 13         [ 4] 3220         CALL     ZERO
      0011B8 CC 10 CE         [ 2] 3221         JP     COMMA
                                   3222 
                                   3223 ;       THEN        ( A -- )
                                   3224 ;       Terminate a conditional branch structure.
      0011BB 11 A9                 3225         .word      LINK
                           0011BD  3226 LINK = . 
      0011BD 84                    3227 	.byte      IMEDD+4
      0011BE 54 48 45 4E           3228         .ascii     "THEN"
      0011C2                       3229 THENN:
      0011C2 CD 08 00         [ 4] 3230         CALL     HERE
      0011C5 CD 02 75         [ 4] 3231         CALL     SWAPP
      0011C8 CC 01 A7         [ 2] 3232         JP     STORE
                                   3233 
                                   3234 ;       ELSE        ( A -- A )
                                   3235 ;       Start the false clause in an IF-ELSE-THEN structure.
      0011CB 11 BD                 3236         .word      LINK
                           0011CD  3237 LINK = . 
      0011CD 84                    3238 	.byte      IMEDD+4
      0011CE 45 4C 53 45           3239         .ascii     "ELSE"
      0011D2                       3240 ELSEE:
      0011D2 CD 11 13         [ 4] 3241         CALL     COMPI
      0011D5 CD 01 80         [ 4] 3242         CALL     BRAN
      0011D8 CD 08 00         [ 4] 3243         CALL     HERE
      0011DB CD 07 13         [ 4] 3244         CALL     ZERO
      0011DE CD 10 CE         [ 4] 3245         CALL     COMMA
      0011E1 CD 02 75         [ 4] 3246         CALL     SWAPP
      0011E4 CD 08 00         [ 4] 3247         CALL     HERE
      0011E7 CD 02 75         [ 4] 3248         CALL     SWAPP
      0011EA CC 01 A7         [ 2] 3249         JP     STORE
                                   3250 
                                   3251 ;       AHEAD       ( -- A )
                                   3252 ;       Compile a forward branch instruction.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      0011ED 11 CD                 3253         .word      LINK
                           0011EF  3254 LINK = . 
      0011EF 85                    3255 	.byte      IMEDD+5
      0011F0 41 48 45 41 44        3256         .ascii     "AHEAD"
      0011F5                       3257 AHEAD:
      0011F5 CD 11 13         [ 4] 3258         CALL     COMPI
      0011F8 CD 01 80         [ 4] 3259         CALL     BRAN
      0011FB CD 08 00         [ 4] 3260         CALL     HERE
      0011FE CD 07 13         [ 4] 3261         CALL     ZERO
      001201 CC 10 CE         [ 2] 3262         JP     COMMA
                                   3263 
                                   3264 ;       WHILE       ( a -- A a )
                                   3265 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      001204 11 EF                 3266         .word      LINK
                           001206  3267 LINK = . 
      001206 85                    3268 	.byte      IMEDD+5
      001207 57 48 49 4C 45        3269         .ascii     "WHILE"
      00120C                       3270 WHILE:
      00120C CD 11 13         [ 4] 3271         CALL     COMPI
      00120F CD 01 69         [ 4] 3272         CALL     QBRAN
      001212 CD 08 00         [ 4] 3273         CALL     HERE
      001215 CD 07 13         [ 4] 3274         CALL     ZERO
      001218 CD 10 CE         [ 4] 3275         CALL     COMMA
      00121B CC 02 75         [ 2] 3276         JP     SWAPP
                                   3277 
                                   3278 ;       REPEAT      ( A a -- )
                                   3279 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      00121E 12 06                 3280         .word      LINK
                           001220  3281 LINK = . 
      001220 86                    3282         .byte      IMEDD+6
      001221 52 45 50 45 41 54     3283         .ascii     "REPEAT"
      001227                       3284 REPEA:
      001227 CD 11 13         [ 4] 3285         CALL     COMPI
      00122A CD 01 80         [ 4] 3286         CALL     BRAN
      00122D CD 10 CE         [ 4] 3287         CALL     COMMA
      001230 CD 08 00         [ 4] 3288         CALL     HERE
      001233 CD 02 75         [ 4] 3289         CALL     SWAPP
      001236 CC 01 A7         [ 2] 3290         JP     STORE
                                   3291 
                                   3292 ;       AFT         ( a -- a A )
                                   3293 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      001239 12 20                 3294         .word      LINK
                           00123B  3295 LINK = . 
      00123B 83                    3296 	.byte      IMEDD+3
      00123C 41 46 54              3297         .ascii     "AFT"
      00123F                       3298 AFT:
      00123F CD 02 5B         [ 4] 3299         CALL     DROP
      001242 CD 11 F5         [ 4] 3300         CALL     AHEAD
      001245 CD 08 00         [ 4] 3301         CALL     HERE
      001248 CC 02 75         [ 2] 3302         JP     SWAPP
                                   3303 
                                   3304 ;       ABORT"      ( -- ; <string> )
                                   3305 ;       Conditional abort with an error message.
      00124B 12 3B                 3306         .word      LINK
                           00124D  3307 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      00124D 86                    3308 	.byte      IMEDD+6
      00124E 41 42 4F 52 54        3309         .ascii     "ABORT"
      001253 22                    3310         .byte      '"'
      001254                       3311 ABRTQ:
      001254 CD 11 13         [ 4] 3312         CALL     COMPI
      001257 CD 0F 94         [ 4] 3313         CALL     ABORQ
      00125A CC 11 41         [ 2] 3314         JP     STRCQ
                                   3315 
                                   3316 ;       $"     ( -- ; <string> )
                                   3317 ;       Compile an inline string literal.
      00125D 12 4D                 3318         .word      LINK
                           00125F  3319 LINK = . 
      00125F 82                    3320 	.byte      IMEDD+2
      001260 24 22                 3321         .byte     '$','"'
      001262                       3322 STRQ:
      001262 CD 11 13         [ 4] 3323         CALL     COMPI
      001265 CD 0B AE         [ 4] 3324         CALL     STRQP
      001268 CC 11 41         [ 2] 3325         JP     STRCQ
                                   3326 
                                   3327 ;       ."          ( -- ; <string> )
                                   3328 ;       Compile an inline string literal to be typed out at run time.
      00126B 12 5F                 3329         .word      LINK
                           00126D  3330 LINK = . 
      00126D 82                    3331 	.byte      IMEDD+2
      00126E 2E 22                 3332         .byte     '.','"'
      001270                       3333 DOTQ:
      001270 CD 11 13         [ 4] 3334         CALL     COMPI
      001273 CD 0B B8         [ 4] 3335         CALL     DOTQP
      001276 CC 11 41         [ 2] 3336         JP     STRCQ
                                   3337 
                                   3338 ;; Name compiler
                                   3339 
                                   3340 ;       ?UNIQUE ( a -- a )
                                   3341 ;       Display a warning message
                                   3342 ;       if word already exists.
      001279 12 6D                 3343         .word      LINK
                           00127B  3344 LINK = . 
      00127B 07                    3345         .byte      7
      00127C 3F 55 4E 49 51 55 45  3346         .ascii     "?UNIQUE"
      001283                       3347 UNIQU:
      001283 CD 02 65         [ 4] 3348         CALL     DUPP
      001286 CD 0E 88         [ 4] 3349         CALL     NAMEQ   ;?name exists
      001289 CD 01 69         [ 4] 3350         CALL     QBRAN
      00128C 12 A2                 3351         .word      UNIQ1
      00128E CD 0B B8         [ 4] 3352         CALL     DOTQP   ;redef are OK
      001291 07                    3353         .byte       7
      001292 20 72 65 44 65 66 20  3354         .ascii     " reDef "       
      001299 CD 02 8F         [ 4] 3355         CALL     OVER
      00129C CD 07 E9         [ 4] 3356         CALL     COUNT
      00129F CD 0B 5B         [ 4] 3357         CALL     TYPES   ;just in case
      0012A2 CC 02 5B         [ 2] 3358 UNIQ1:  JP     DROP
                                   3359 
                                   3360 ;       $,n     ( na -- )
                                   3361 ;       Build a new dictionary name
                                   3362 ;       using string at na.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      0012A5 12 7B                 3363         .word      LINK
                           0012A7  3364 LINK = . 
      0012A7 03                    3365         .byte      3
      0012A8 24 2C 6E              3366         .ascii     "$,n"
      0012AB                       3367 SNAME:
      0012AB CD 02 65         [ 4] 3368         CALL     DUPP
      0012AE CD 01 DC         [ 4] 3369         CALL     CAT     ;?null input
      0012B1 CD 01 69         [ 4] 3370         CALL     QBRAN
      0012B4 12 E1                 3371         .word      PNAM1
      0012B6 CD 12 83         [ 4] 3372         CALL     UNIQU   ;?redefinition
      0012B9 CD 02 65         [ 4] 3373         CALL     DUPP
      0012BC CD 07 E9         [ 4] 3374         CALL     COUNT
      0012BF CD 04 00         [ 4] 3375         CALL     PLUS
      0012C2 CD 03 8F         [ 4] 3376         CALL     CPP
      0012C5 CD 01 A7         [ 4] 3377         CALL     STORE
      0012C8 CD 02 65         [ 4] 3378         CALL     DUPP
      0012CB CD 03 9F         [ 4] 3379         CALL     LAST
      0012CE CD 01 A7         [ 4] 3380         CALL     STORE   ;save na for vocabulary link
      0012D1 CD 06 C3         [ 4] 3381         CALL     CELLM   ;link address
      0012D4 CD 03 81         [ 4] 3382         CALL     CNTXT
      0012D7 CD 01 BE         [ 4] 3383         CALL     AT
      0012DA CD 02 75         [ 4] 3384         CALL     SWAPP
      0012DD CD 01 A7         [ 4] 3385         CALL     STORE
      0012E0 81               [ 4] 3386         RET     ;save code pointer
      0012E1 CD 0B AE         [ 4] 3387 PNAM1:  CALL     STRQP
      0012E4 05                    3388         .byte      5
      0012E5 20 6E 61 6D 65        3389         .ascii     " name" ;null input
      0012EA CC 0F 9C         [ 2] 3390         JP     ABOR1
                                   3391 
                                   3392 ;; FORTH compiler
                                   3393 
                                   3394 ;       $COMPILE        ( a -- )
                                   3395 ;       Compile next word to
                                   3396 ;       dictionary as a token or literal.
      0012ED 12 A7                 3397         .word      LINK
                           0012EF  3398 LINK = . 
      0012EF 08                    3399         .byte      8
      0012F0 24 43 4F 4D 50 49 4C  3400         .ascii     "$COMPILE"
             45
      0012F8                       3401 SCOMP:
      0012F8 CD 0E 88         [ 4] 3402         CALL     NAMEQ
      0012FB CD 03 AF         [ 4] 3403         CALL     QDUP    ;?defined
      0012FE CD 01 69         [ 4] 3404         CALL     QBRAN
      001301 13 19                 3405         .word      SCOM2
      001303 CD 01 BE         [ 4] 3406         CALL     AT
      001306 CD 01 36         [ 4] 3407         CALL     DOLIT
      001309 80 00                 3408         .word     0x8000	;  IMEDD*256
      00130B CD 02 B1         [ 4] 3409         CALL     ANDD    ;?immediate
      00130E CD 01 69         [ 4] 3410         CALL     QBRAN
      001311 13 16                 3411         .word      SCOM1
      001313 CC 01 90         [ 2] 3412         JP     EXECU
      001316 CC 13 5F         [ 2] 3413 SCOM1:  JP     JSRC
      001319 CD 0A 26         [ 4] 3414 SCOM2:  CALL     NUMBQ   ;try to convert to number
      00131C CD 01 69         [ 4] 3415         CALL     QBRAN
      00131F 0F 9C                 3416         .word      ABOR1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      001321 CC 11 32         [ 2] 3417         JP     LITER
                                   3418 
                                   3419 ;       OVERT   ( -- )
                                   3420 ;       Link a new word into vocabulary.
      001324 12 EF                 3421         .word      LINK
                           001326  3422 LINK = . 
      001326 05                    3423         .byte      5
      001327 4F 56 45 52 54        3424         .ascii     "OVERT"
      00132C                       3425 OVERT:
      00132C CD 03 9F         [ 4] 3426         CALL     LAST
      00132F CD 01 BE         [ 4] 3427         CALL     AT
      001332 CD 03 81         [ 4] 3428         CALL     CNTXT
      001335 CC 01 A7         [ 2] 3429         JP     STORE
                                   3430 
                                   3431 ;       ;       ( -- )
                                   3432 ;       Terminate a colon definition.
      001338 13 26                 3433         .word      LINK
                           00133A  3434 LINK = . 
      00133A C1                    3435 	.byte      IMEDD+COMPO+1
      00133B 3B                    3436         .ascii     ";"
      00133C                       3437 SEMIS:
      00133C CD 11 13         [ 4] 3438         CALL     COMPI
      00133F CD 01 A0         [ 4] 3439         CALL     EXIT
      001342 CD 0F FD         [ 4] 3440         CALL     LBRAC
      001345 CC 13 2C         [ 2] 3441         JP     OVERT
                                   3442 
                                   3443 ;       ]       ( -- )
                                   3444 ;       Start compiling words in
                                   3445 ;       input stream.
      001348 13 3A                 3446         .word      LINK
                           00134A  3447 LINK = . 
      00134A 01                    3448         .byte      1
      00134B 5D                    3449         .ascii     "]"
      00134C                       3450 RBRAC:
      00134C CD 01 36         [ 4] 3451         CALL     DOLIT
      00134F 12 F8                 3452         .word      SCOMP
      001351 CD 03 5F         [ 4] 3453         CALL     TEVAL
      001354 CC 01 A7         [ 2] 3454         JP     STORE
                                   3455 
                                   3456 ;       CALL,    ( ca -- )
                                   3457 ;       Compile a subroutine call.
      001357 13 4A                 3458         .word      LINK
                           001359  3459 LINK = . 
      001359 04                    3460         .byte      4
      00135A 43 41 4C 4C 2C        3461         .ascii     "CALL,"
      00135F                       3462 JSRC:
      00135F CD 01 36         [ 4] 3463         CALL     DOLIT
      001362 00 CD                 3464         .word     CALLL     ;CALL
      001364 CD 10 E5         [ 4] 3465         CALL     CCOMMA
      001367 CC 10 CE         [ 2] 3466         JP     COMMA
                                   3467 
                                   3468 ;       :       ( -- ; <string> )
                                   3469 ;       Start a new colon definition
                                   3470 ;       using next word as its name.
      00136A 13 59                 3471         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



                           00136C  3472 LINK = . 
      00136C 01                    3473         .byte      1
      00136D 3A                    3474         .ascii     ":"
      00136E                       3475 COLON:
      00136E CD 0D 8B         [ 4] 3476         CALL     TOKEN
      001371 CD 12 AB         [ 4] 3477         CALL     SNAME
      001374 CC 13 4C         [ 2] 3478         JP     RBRAC
                                   3479 
                                   3480 ;       IMMEDIATE       ( -- )
                                   3481 ;       Make last compiled word
                                   3482 ;       an immediate word.
      001377 13 6C                 3483         .word      LINK
                           001379  3484 LINK = . 
      001379 09                    3485         .byte      9
      00137A 49 4D 4D 45 44 49 41  3486         .ascii     "IMMEDIATE"
             54 45
      001383                       3487 IMMED:
      001383 CD 01 36         [ 4] 3488         CALL     DOLIT
      001386 80 00                 3489         .word     0x8000	;  IMEDD*256
      001388 CD 03 9F         [ 4] 3490         CALL     LAST
      00138B CD 01 BE         [ 4] 3491         CALL     AT
      00138E CD 01 BE         [ 4] 3492         CALL     AT
      001391 CD 02 C5         [ 4] 3493         CALL     ORR
      001394 CD 03 9F         [ 4] 3494         CALL     LAST
      001397 CD 01 BE         [ 4] 3495         CALL     AT
      00139A CC 01 A7         [ 2] 3496         JP     STORE
                                   3497 
                                   3498 ;; Defining words
                                   3499 
                                   3500 ;       CREATE  ( -- ; <string> )
                                   3501 ;       Compile a new array
                                   3502 ;       without allocating space.
      00139D 13 79                 3503         .word      LINK
                           00139F  3504 LINK = . 
      00139F 06                    3505         .byte      6
      0013A0 43 52 45 41 54 45     3506         .ascii     "CREATE"
      0013A6                       3507 CREAT:
      0013A6 CD 0D 8B         [ 4] 3508         CALL     TOKEN
      0013A9 CD 12 AB         [ 4] 3509         CALL     SNAME
      0013AC CD 13 2C         [ 4] 3510         CALL     OVERT
      0013AF CD 11 13         [ 4] 3511         CALL     COMPI
      0013B2 CD 03 12         [ 4] 3512         CALL     DOVAR
      0013B5 81               [ 4] 3513         RET
                                   3514 
                                   3515 ;       VARIABLE        ( -- ; <string> )
                                   3516 ;       Compile a new variable
                                   3517 ;       initialized to 0.
      0013B6 13 9F                 3518         .word      LINK
                           0013B8  3519 LINK = . 
      0013B8 08                    3520         .byte      8
      0013B9 56 41 52 49 41 42 4C  3521         .ascii     "VARIABLE"
             45
      0013C1                       3522 VARIA:
      0013C1 CD 13 A6         [ 4] 3523         CALL     CREAT
      0013C4 CD 07 13         [ 4] 3524         CALL     ZERO
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      0013C7 CC 10 CE         [ 2] 3525         JP     COMMA
                                   3526 
                           000001  3527 .if PICATOUT_MOD
                                   3528 ;       CONSTANT  ( n -- ; <string> )
                                   3529 ;       Compile a new constant 
                                   3530 ;       n CONSTANT name 
      0013CA 13 B8                 3531         .word LINK 
                           0013CC  3532         LINK=. 
      0013CC 08                    3533         .byte 8 
      0013CD 43 4F 4E 53 54 41 4E  3534         .ascii "CONSTANT" 
             54
      0013D5                       3535 constant:          
      0013D5 CD 0D 8B         [ 4] 3536         CALL TOKEN
      0013D8 CD 12 AB         [ 4] 3537         CALL SNAME 
      0013DB CD 13 2C         [ 4] 3538         CALL OVERT 
      0013DE CD 11 13         [ 4] 3539         CALL COMPI 
      0013E1 CD 13 F2         [ 4] 3540         CALL DOCONST
      0013E4 CD 10 CE         [ 4] 3541         CALL COMMA 
      0013E7 81               [ 4] 3542         RET          
                                   3543 
                                   3544 ; CONSTANT runtime semantic 
                                   3545 ; doCONST  ( -- n )
      0013E8 13 CC                 3546         .word LINK 
                           0013EA  3547         LINK=.
      0013EA 07                    3548         .byte 7
      0013EB 44 4F 43 4F 4E 53 54  3549         .ascii "DOCONST"
      0013F2                       3550 DOCONST:
      0013F2 1D 00 02         [ 2] 3551         subw x,#CELLL
      0013F5 90 85            [ 2] 3552         popw y 
      0013F7 90 FE            [ 2] 3553         ldw y,(y) 
      0013F9 FF               [ 2] 3554         ldw (x),y 
      0013FA 81               [ 4] 3555         ret 
                                   3556 .endif ;PICATOUT_MOD
                                   3557 
                                   3558 
                                   3559 ;; Tools
                                   3560 
                                   3561 ;       _TYPE   ( b u -- )
                                   3562 ;       Display a string. Filter
                                   3563 ;       non-printing characters.
      0013FB 13 EA                 3564         .word      LINK
                           0013FD  3565 LINK = . 
      0013FD 05                    3566         .byte      5
      0013FE 5F 54 59 50 45        3567         .ascii     "_TYPE"
      001403                       3568 UTYPE:
      001403 CD 02 2E         [ 4] 3569         CALL     TOR     ;start count down loop
      001406 20 0F            [ 2] 3570         JRA     UTYP2   ;skip first pass
      001408 CD 02 65         [ 4] 3571 UTYP1:  CALL     DUPP
      00140B CD 01 DC         [ 4] 3572         CALL     CAT
      00140E CD 07 3D         [ 4] 3573         CALL     TCHAR
      001411 CD 01 20         [ 4] 3574         CALL     EMIT    ;display only printable
      001414 CD 06 DF         [ 4] 3575         CALL     ONEP    ;increment address
      001417 CD 01 4A         [ 4] 3576 UTYP2:  CALL     DONXT
      00141A 14 08                 3577         .word      UTYP1   ;loop till done
      00141C CC 02 5B         [ 2] 3578         JP     DROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



                                   3579 
                                   3580 ;       dm+     ( a u -- a )
                                   3581 ;       Dump u bytes from ,
                                   3582 ;       leaving a+u on  stack.
      00141F 13 FD                 3583         .word      LINK
                           001421  3584 LINK = . 
      001421 03                    3585         .byte      3
      001422 64 6D 2B              3586         .ascii     "dm+"
      001425                       3587 DUMPP:
      001425 CD 02 8F         [ 4] 3588         CALL     OVER
      001428 CD 01 36         [ 4] 3589         CALL     DOLIT
      00142B 00 04                 3590         .word      4
      00142D CD 0B E1         [ 4] 3591         CALL     UDOTR   ;display address
      001430 CD 0B 31         [ 4] 3592         CALL     SPACE
      001433 CD 02 2E         [ 4] 3593         CALL     TOR     ;start count down loop
      001436 20 11            [ 2] 3594         JRA     PDUM2   ;skip first pass
      001438 CD 02 65         [ 4] 3595 PDUM1:  CALL     DUPP
      00143B CD 01 DC         [ 4] 3596         CALL     CAT
      00143E CD 01 36         [ 4] 3597         CALL     DOLIT
      001441 00 03                 3598         .word      3
      001443 CD 0B E1         [ 4] 3599         CALL     UDOTR   ;display numeric data
      001446 CD 06 DF         [ 4] 3600         CALL     ONEP    ;increment address
      001449 CD 01 4A         [ 4] 3601 PDUM2:  CALL     DONXT
      00144C 14 38                 3602         .word      PDUM1   ;loop till done
      00144E 81               [ 4] 3603         RET
                                   3604 
                                   3605 ;       DUMP    ( a u -- )
                                   3606 ;       Dump u bytes from a,
                                   3607 ;       in a formatted manner.
      00144F 14 21                 3608         .word      LINK
                           001451  3609 LINK = . 
      001451 04                    3610         .byte      4
      001452 44 55 4D 50           3611         .ascii     "DUMP"
      001456                       3612 DUMP:
      001456 CD 03 20         [ 4] 3613         CALL     BASE
      001459 CD 01 BE         [ 4] 3614         CALL     AT
      00145C CD 02 2E         [ 4] 3615         CALL     TOR
      00145F CD 09 B9         [ 4] 3616         CALL     HEX     ;save radix, set hex
      001462 CD 01 36         [ 4] 3617         CALL     DOLIT
      001465 00 10                 3618         .word      16
      001467 CD 06 05         [ 4] 3619         CALL     SLASH   ;change count to lines
      00146A CD 02 2E         [ 4] 3620         CALL     TOR     ;start count down loop
      00146D CD 0B 79         [ 4] 3621 DUMP1:  CALL     CR
      001470 CD 01 36         [ 4] 3622         CALL     DOLIT
      001473 00 10                 3623         .word      16
      001475 CD 03 EB         [ 4] 3624         CALL     DDUP
      001478 CD 14 25         [ 4] 3625         CALL     DUMPP   ;display numeric
      00147B CD 03 C0         [ 4] 3626         CALL     ROT
      00147E CD 03 C0         [ 4] 3627         CALL     ROT
      001481 CD 0B 31         [ 4] 3628         CALL     SPACE
      001484 CD 0B 31         [ 4] 3629         CALL     SPACE
      001487 CD 14 03         [ 4] 3630         CALL     UTYPE   ;display printable characters
      00148A CD 01 4A         [ 4] 3631         CALL     DONXT
      00148D 14 6D                 3632         .word      DUMP1   ;loop till done
      00148F CD 02 5B         [ 4] 3633 DUMP3:  CALL     DROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      001492 CD 02 0F         [ 4] 3634         CALL     RFROM
      001495 CD 03 20         [ 4] 3635         CALL     BASE
      001498 CC 01 A7         [ 2] 3636         JP     STORE   ;restore radix
                                   3637 
                                   3638 ;       .S      ( ... -- ... )
                                   3639 ;        Display  contents of stack.
      00149B 14 51                 3640         .word      LINK
                           00149D  3641 LINK = . 
      00149D 02                    3642         .byte      2
      00149E 2E 53                 3643         .ascii     ".S"
      0014A0                       3644 DOTS:
      0014A0 CD 0B 79         [ 4] 3645         CALL     CR
      0014A3 CD 07 56         [ 4] 3646         CALL     DEPTH   ;stack depth
      0014A6 CD 02 2E         [ 4] 3647         CALL     TOR     ;start count down loop
      0014A9 20 0C            [ 2] 3648         JRA     DOTS2   ;skip first pass
      0014AB CD 02 22         [ 4] 3649 DOTS1:  CALL     RAT
      0014AE CD 06 DF         [ 4] 3650         CALL ONEP
      0014B1 CD 07 6D         [ 4] 3651 	CALL     PICK
      0014B4 CD 0C 14         [ 4] 3652         CALL     DOT     ;index stack, display contents
      0014B7 CD 01 4A         [ 4] 3653 DOTS2:  CALL     DONXT
      0014BA 14 AB                 3654         .word      DOTS1   ;loop till done
      0014BC CD 0B B8         [ 4] 3655         CALL     DOTQP
      0014BF 05                    3656         .byte      5
      0014C0 20 3C 73 70 20        3657         .ascii     " <sp "
      0014C5 81               [ 4] 3658         RET
                                   3659 
                                   3660 ;       >NAME   ( ca -- na | F )
                                   3661 ;       Convert code address
                                   3662 ;       to a name address.
      0014C6 14 9D                 3663         .word      LINK
                           0014C8  3664 LINK = . 
      0014C8 05                    3665         .byte      5
      0014C9 3E 4E 41 4D 45        3666         .ascii     ">NAME"
      0014CE                       3667 TNAME:
      0014CE CD 03 81         [ 4] 3668         CALL     CNTXT   ;vocabulary link
      0014D1 CD 01 BE         [ 4] 3669 TNAM2:  CALL     AT
      0014D4 CD 02 65         [ 4] 3670         CALL     DUPP    ;?last word in a vocabulary
      0014D7 CD 01 69         [ 4] 3671         CALL     QBRAN
      0014DA 14 F5                 3672         .word      TNAM4
      0014DC CD 03 EB         [ 4] 3673         CALL     DDUP
      0014DF CD 0D 99         [ 4] 3674         CALL     NAMET
      0014E2 CD 02 DA         [ 4] 3675         CALL     XORR    ;compare
      0014E5 CD 01 69         [ 4] 3676         CALL     QBRAN
      0014E8 14 EF                 3677         .word      TNAM3
      0014EA CD 06 C3         [ 4] 3678         CALL     CELLM   ;continue with next word
      0014ED 20 E2            [ 2] 3679         JRA     TNAM2
      0014EF CD 02 75         [ 4] 3680 TNAM3:  CALL     SWAPP
      0014F2 CC 02 5B         [ 2] 3681         JP     DROP
      0014F5 CD 03 E0         [ 4] 3682 TNAM4:  CALL     DDROP
      0014F8 CC 07 13         [ 2] 3683         JP     ZERO
                                   3684 
                                   3685 ;       .ID     ( na -- )
                                   3686 ;        Display  name at address.
      0014FB 14 C8                 3687         .word      LINK
                           0014FD  3688 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      0014FD 03                    3689         .byte      3
      0014FE 2E 49 44              3690         .ascii     ".ID"
      001501                       3691 DOTID:
      001501 CD 03 AF         [ 4] 3692         CALL     QDUP    ;if zero no name
      001504 CD 01 69         [ 4] 3693         CALL     QBRAN
      001507 15 17                 3694         .word      DOTI1
      001509 CD 07 E9         [ 4] 3695         CALL     COUNT
      00150C CD 01 36         [ 4] 3696         CALL     DOLIT
      00150F 00 1F                 3697         .word      0x1F
      001511 CD 02 B1         [ 4] 3698         CALL     ANDD    ;mask lexicon bits
      001514 CC 14 03         [ 2] 3699         JP     UTYPE
      001517 CD 0B B8         [ 4] 3700 DOTI1:  CALL     DOTQP
      00151A 09                    3701         .byte      9
      00151B 20 6E 6F 4E 61 6D 65  3702         .ascii     " noName"
      001522 81               [ 4] 3703         RET
                                   3704 
                           000000  3705 WANT_SEE=0 
                           000000  3706 .if WANT_SEE 
                                   3707 ;       SEE     ( -- ; <string> )
                                   3708 ;       A simple decompiler.
                                   3709 ;       Updated for byte machines.
                                   3710         .word      LINK
                                   3711 LINK = . 
                                   3712         .byte      3
                                   3713         .ascii     "SEE"
                                   3714 SEE:
                                   3715         CALL     TICK    ;starting address
                                   3716         CALL     CR
                                   3717         CALL     ONEM
                                   3718 SEE1:   CALL     ONEP
                                   3719         CALL     DUPP
                                   3720         CALL     AT
                                   3721         CALL     DUPP    ;?does it contain a zero
                                   3722         CALL     QBRAN
                                   3723         .word    SEE2
                                   3724         CALL     TNAME   ;?is it a name
                                   3725 SEE2:   CALL     QDUP    ;name address or zero
                                   3726         CALL     QBRAN
                                   3727         .word    SEE3
                                   3728         CALL     SPACE
                                   3729         CALL     DOTID   ;display name
                                   3730         CALL     ONEP
                                   3731         JRA      SEE4
                                   3732 SEE3:   CALL     DUPP
                                   3733         CALL     CAT
                                   3734         CALL     UDOT    ;display number
                                   3735 SEE4:   CALL     NUFQ    ;user control
                                   3736         CALL     QBRAN
                                   3737         .word    SEE1
                                   3738         JP     DROP
                                   3739 .endif ; WANT_SEE 
                                   3740 
                                   3741 ;       WORDS   ( -- )
                                   3742 ;       Display names in vocabulary.
      001523 14 FD                 3743         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



                           001525  3744 LINK = . 
      001525 05                    3745         .byte      5
      001526 57 4F 52 44 53        3746         .ascii     "WORDS"
      00152B                       3747 WORDS:
      00152B CD 0B 79         [ 4] 3748         CALL     CR
      00152E CD 03 81         [ 4] 3749         CALL     CNTXT   ;only in context
      001531 CD 01 BE         [ 4] 3750 WORS1:  CALL     AT
      001534 CD 03 AF         [ 4] 3751         CALL     QDUP    ;?at end of list
      001537 CD 01 69         [ 4] 3752         CALL     QBRAN
      00153A 15 50                 3753         .word      WORS2
      00153C CD 02 65         [ 4] 3754         CALL     DUPP
      00153F CD 0B 31         [ 4] 3755         CALL     SPACE
      001542 CD 15 01         [ 4] 3756         CALL     DOTID   ;display a name
      001545 CD 06 C3         [ 4] 3757         CALL     CELLM
      001548 CD 01 80         [ 4] 3758         CALL     BRAN
      00154B 15 31                 3759         .word      WORS1
      00154D CD 02 5B         [ 4] 3760         CALL     DROP
      001550 81               [ 4] 3761 WORS2:  RET
                                   3762 
                                   3763         
                                   3764 ;; Hardware reset
                                   3765 
                                   3766 ;       hi      ( -- )
                                   3767 ;       Display sign-on message.
      001551 15 25                 3768         .word      LINK
                           001553  3769 LINK = . 
      001553 02                    3770         .byte      2
      001554 68 69                 3771         .ascii     "hi"
      001556                       3772 HI:
      001556 CD 0B 79         [ 4] 3773         CALL     CR
      001559 CD 0B B8         [ 4] 3774         CALL     DOTQP   ;initialize I/O
      00155C 0F                    3775         .byte      15
      00155D 73 74 6D 38 65 46 6F  3776         .ascii     "stm8eForth v"
             72 74 68 20 76
      001569 32                    3777 	.byte      VER+'0'
      00156A 2E                    3778         .byte      '.' 
      00156B 31                    3779 	.byte      EXT+'0' ;version
      00156C CC 0B 79         [ 2] 3780         JP     CR
                                   3781 
                           000000  3782 WANT_DEBUG=0
                           000000  3783 .if WANT_DEBUG 
                                   3784 ;       DEBUG      ( -- )
                                   3785 ;       Display sign-on message.
                                   3786 ;        .word      LINK
                                   3787 LINK = . 
                                   3788         .byte      5
                                   3789         .ascii     "DEBUG"
                                   3790 DEBUG:
                                   3791 	CALL DOLIT
                                   3792 	.word 0x65
                                   3793 	CALL EMIT
                                   3794 	CALL DOLIT
                                   3795 	.word 0
                                   3796  	CALL ZLESS 
                                   3797 	CALL DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



                                   3798 	.word 0xFFFE
                                   3799 	CALL ZLESS 
                                   3800 	CALL UPLUS 
                                   3801  	CALL DROP 
                                   3802 	CALL DOLIT
                                   3803 	.word 3
                                   3804 	CALL UPLUS 
                                   3805 	CALL UPLUS 
                                   3806  	CALL DROP
                                   3807 	CALL DOLIT
                                   3808 	.word 0x43
                                   3809 	CALL UPLUS 
                                   3810  	CALL DROP
                                   3811 	CALL EMIT
                                   3812 	CALL DOLIT
                                   3813 	.word 0x4F
                                   3814 	CALL DOLIT
                                   3815 	.word 0x6F
                                   3816  	CALL XORR
                                   3817 	CALL DOLIT
                                   3818 	.word 0xF0
                                   3819  	CALL ANDD
                                   3820 	CALL DOLIT
                                   3821 	.word 0x4F
                                   3822  	CALL ORR
                                   3823 	CALL EMIT
                                   3824 	CALL DOLIT
                                   3825 	.word 8
                                   3826 	CALL DOLIT
                                   3827 	.word 6
                                   3828  	CALL SWAPP
                                   3829 	CALL OVER
                                   3830 	CALL XORR
                                   3831 	CALL DOLIT
                                   3832 	.word 3
                                   3833 	CALL ANDD 
                                   3834 	CALL ANDD
                                   3835 	CALL DOLIT
                                   3836 	.word 0x70
                                   3837 	CALL UPLUS 
                                   3838 	CALL DROP
                                   3839 	CALL EMIT
                                   3840 	CALL DOLIT
                                   3841 	.word 0
                                   3842 	CALL QBRAN
                                   3843 	.word DEBUG1
                                   3844 	CALL DOLIT
                                   3845 	.word 0x3F
                                   3846 DEBUG1:
                                   3847 	CALL DOLIT
                                   3848 	.word 0xFFFF
                                   3849 	CALL QBRAN
                                   3850 	.word DEBUG2
                                   3851 	CALL DOLIT
                                   3852 	.word 0x74
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                   3853 	CALL BRAN
                                   3854 	.word DEBUG3
                                   3855 DEBUG2:
                                   3856 	CALL DOLIT
                                   3857 	.word 0x21
                                   3858 DEBUG3:
                                   3859 	CALL EMIT
                                   3860 	CALL DOLIT
                                   3861 	.word 0x68
                                   3862 	CALL DOLIT
                                   3863 	.word 0x80
                                   3864 	CALL STORE
                                   3865 	CALL DOLIT
                                   3866 	.word 0x80
                                   3867 	CALL AT
                                   3868 	CALL EMIT
                                   3869 	CALL DOLIT
                                   3870 	.word 0x4D
                                   3871 	CALL TOR
                                   3872 	CALL RAT
                                   3873 	CALL RFROM
                                   3874 	CALL ANDD
                                   3875 	CALL EMIT
                                   3876 	CALL DOLIT
                                   3877 	.word 0x61
                                   3878 	CALL DOLIT
                                   3879 	.word 0xA
                                   3880 	CALL TOR
                                   3881 DEBUG4:
                                   3882 	CALL DOLIT
                                   3883 	.word 1
                                   3884 	CALL UPLUS 
                                   3885 	CALL DROP
                                   3886 	CALL DONXT
                                   3887 	.word DEBUG4
                                   3888 	CALL EMIT
                                   3889 	CALL DOLIT
                                   3890 	.word 0x656D
                                   3891 	CALL DOLIT
                                   3892 	.word 0x100
                                   3893 	CALL UMSTA
                                   3894 	CALL SWAPP
                                   3895 	CALL DOLIT
                                   3896 	.word 0x100
                                   3897 	CALL UMSTA
                                   3898 	CALL SWAPP 
                                   3899 	CALL DROP
                                   3900 	CALL EMIT
                                   3901 	CALL EMIT
                                   3902 	CALL DOLIT
                                   3903 	.word 0x2043
                                   3904 	CALL DOLIT
                                   3905 	.word 0
                                   3906 	CALL DOLIT
                                   3907 	.word 0x100
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                   3908 	CALL UMMOD
                                   3909 	CALL EMIT
                                   3910 	CALL EMIT
                                   3911 	;JP ORIG
                                   3912 	RET
                                   3913 .endif ; WANT_DEBUG 
                                   3914 
                                   3915 
                                   3916 ;       'BOOT   ( -- a )
                                   3917 ;       The application startup vector.
      00156F 15 53                 3918         .word      LINK
                           001571  3919 LINK = . 
      001571 05                    3920         .byte      5
      001572 27 42 4F 4F 54        3921         .ascii     "'BOOT"
      001577                       3922 TBOOT:
      001577 CD 03 12         [ 4] 3923         CALL     DOVAR
      00157A 15 56                 3924         .word      HI       ;application to boot
                                   3925 
                                   3926 ;       COLD    ( -- )
                                   3927 ;       The hilevel cold start s=ence.
      00157C 15 71                 3928         .word      LINK
                           00157E  3929 LINK = . 
      00157E 04                    3930         .byte      4
      00157F 43 4F 4C 44           3931         .ascii     "COLD"
      001583                       3932 COLD:
                           000000  3933 .if WANT_DEBUG
                                   3934         CALL DEBUG
                                   3935 .endif 
      001583 CD 01 36         [ 4] 3936 COLD1:  CALL     DOLIT
      001586 00 27                 3937         .word      UZERO
      001588 CD 01 36         [ 4] 3938 	CALL     DOLIT
      00158B 00 06                 3939         .word      UPP
      00158D CD 01 36         [ 4] 3940         CALL     DOLIT
      001590 00 14                 3941 	.word      UEND-UZERO
      001592 CD 08 4D         [ 4] 3942         CALL     CMOVE   ;initialize user area
                                   3943 
                           000001  3944 .if PICATOUT_MOD
                                   3945 ; update LAST with APP_LAST 
                                   3946 ; if APP_LAST > LAST else do the opposite
      001595 90 CE 40 00      [ 2] 3947         ldw y,APP_LAST 
      001599 90 B3 18         [ 2] 3948         cpw y,ULAST 
      00159C 22 0E            [ 1] 3949         jrugt 1$ 
                                   3950 ; save LAST at APP_LAST  
      00159E CD 03 9F         [ 4] 3951         call LAST 
      0015A1 CD 01 BE         [ 4] 3952         call AT  
      0015A4 CD 16 25         [ 4] 3953         call eeprom 
      0015A7 CD 17 62         [ 4] 3954         call ee_store 
      0015AA 20 03            [ 2] 3955         jra 2$
      0015AC                       3956 1$: ; update LAST with APP_LAST 
      0015AC 90 BF 18         [ 2] 3957         ldw ULAST,y
      0015AF                       3958 2$:  
                                   3959 ; update APP_HERE if < app_space 
      0015AF 90 CE 40 04      [ 2] 3960         ldw y,APP_HERE 
      0015B3 90 A3 1A 00      [ 2] 3961         cpw y,#app_space 
      0015B7 24 15            [ 1] 3962         jruge 3$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      0015B9 1D 00 06         [ 2] 3963         subw x,#6 
      0015BC 90 AE 1A 00      [ 2] 3964         ldw y,#app_space 
      0015C0 EF 04            [ 2] 3965         ldw (4,x),y 
      0015C2 90 AE 40 04      [ 2] 3966         ldw y,#APP_HERE 
      0015C6 EF 02            [ 2] 3967         ldw (2,x),y
      0015C8 90 5F            [ 1] 3968         clrw y 
      0015CA FF               [ 2] 3969         ldw (x),y
      0015CB CD 17 62         [ 4] 3970         call ee_store 
      0015CE                       3971 3$:
                                   3972 ; update UCP with VAR_APP 
                                   3973 ; if VAR_APP>UCP else do the opposite 
      0015CE 90 CE 40 06      [ 2] 3974         ldw y,VAR_HERE 
      0015D2 90 B3 16         [ 2] 3975         cpw y,UCP 
      0015D5 22 17            [ 1] 3976         jrugt 4$
      0015D7 CD 03 8F         [ 4] 3977         call CPP 
      0015DA CD 01 BE         [ 4] 3978         call AT 
      0015DD 1D 00 04         [ 2] 3979         subw x,#2*CELLL 
      0015E0 90 AE 40 06      [ 2] 3980         ldw y,#VAR_HERE 
      0015E4 EF 02            [ 2] 3981         ldw (2,x),y 
      0015E6 90 5F            [ 1] 3982         clrw y 
      0015E8 FF               [ 2] 3983         ldw (x),y 
      0015E9 CD 17 62         [ 4] 3984         call ee_store
      0015EC 20 03            [ 2] 3985         jra 6$
      0015EE                       3986 4$: ; update UCP with VAR_HERE 
      0015EE 90 BF 16         [ 2] 3987         ldw UCP,y 
      0015F1                       3988 6$:      
                                   3989 .endif ; PICATOUT_MOD
      0015F1 CD 10 7C         [ 4] 3990         CALL     PRESE   ;initialize data stack and TIB
      0015F4 CD 15 77         [ 4] 3991         CALL     TBOOT
      0015F7 CD 08 36         [ 4] 3992         CALL     ATEXE   ;application boot
      0015FA CD 13 2C         [ 4] 3993         CALL     OVERT
      0015FD CC 10 99         [ 2] 3994         JP     QUIT    ;start interpretation
                                   3995 
                           000001  3996 .if PICATOUT_MOD
                                   3997         ; keep this include at end 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                                   3998         .include "flash.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21 ;  routines to write to FLASH, EEPROM 
                                     22 ;  and OPTION 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 ;pointer to far address 
                           000002    26     farptr=2
                           000003    27     ptr16=3
                           000004    28     ptr8=4
                                     29 
                                     30 ;--------------------------------
                                     31 ; initialize farptr 
                                     32 ; FP!  ( ud -- )
                                     33 ;---------------------------------
      001600 15 7E                   34     .word LINK 
                           001602    35     LINK=.
      001602 03                      36     .byte 3 
      001603 46 50 21                37     .ascii "FP!"
      001606                         38 fptr_store:
      001606 90 93            [ 1]   39     ldw y,x
      001608 90 FE            [ 2]   40     ldw y,(y)
      00160A 90 9F            [ 1]   41     ld a,yl 
      00160C B7 02            [ 1]   42     ld farptr,a 
      00160E 1C 00 02         [ 2]   43     addw x,#CELLL 
      001611 90 93            [ 1]   44     ldw y,x 
      001613 90 FE            [ 2]   45     ldw y,(y)
      001615 90 BF 03         [ 2]   46     ldw ptr16,y
      001618 1C 00 02         [ 2]   47     addw x,#CELLL 
      00161B 81               [ 4]   48     ret 
                                     49 
                                     50 ;-----------------------------------
                                     51 ; return EEPROM base address 
                                     52 ; as a double 
                                     53 ;  EEPROM  ( -- ud )
                                     54 ;-----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      00161C 16 02                   55     .word LINK 
                           00161E    56 LINK=.
      00161E 06                      57     .byte 6 
      00161F 45 45 50 52 4F 4D       58     .ascii "EEPROM"
      001625                         59 eeprom: 
      001625 90 AE 40 00      [ 2]   60     ldw y,#EEPROM_BASE
      001629 1D 00 04         [ 2]   61     subw x,#2*CELLL 
      00162C EF 02            [ 2]   62     ldw (2,x),y 
      00162E 90 5F            [ 1]   63     clrw y 
      001630 FF               [ 2]   64     ldw (x),y 
      001631 81               [ 4]   65     ret
                                     66 
                                     67 ;----------------------------------
                                     68 ; fetch integer at address over 65535
                                     69 ;  F@   ( ud -- n )
                                     70 ;----------------------------------
      001632 16 1E                   71     .word LINK 
                           001634    72 LINK=.
      001634 02                      73     .byte 2
      001635 46 40                   74     .ascii "F@"
      001637                         75 farat:
      001637 CD 16 06         [ 4]   76     call fptr_store
      00163A 92 BC 00 02      [ 5]   77     ldf a,[farptr]
      00163E 1D 00 02         [ 2]   78     subw x,#CELLL 
      001641 F7               [ 1]   79     ld (x),a 
      001642 90 AE 00 01      [ 2]   80     ldw y,#1
      001646 91 AF 00 02      [ 1]   81     ldf a,([farptr],y)
      00164A E7 01            [ 1]   82     ld (1,x),a
      00164C 81               [ 4]   83     ret 
                                     84 
                                     85 ;-------------------------------------
                                     86 ; fetch C at address over 65535 
                                     87 ; FC@ ( ud -- c)
                                     88 ;-------------------------------------
      00164D 16 34                   89     .word LINK
                           00164F    90     LINK=.
      00164F 03                      91     .byte 3 
      001650 46 43 40                92     .ascii "FC@" 
      001653                         93 farcat:
      001653 CD 16 06         [ 4]   94     call fptr_store 
      001656 92 BC 00 02      [ 5]   95     ldf a,[farptr]
      00165A 1D 00 02         [ 2]   96     subw x,#CELLL 
      00165D E7 01            [ 1]   97     ld (1,x),a 
      00165F 7F               [ 1]   98     clr (x)
      001660 81               [ 4]   99     ret 
                                    100     
                                    101 ;----------------------------------
                                    102 ; unlock EEPROM/OPT for writing/erasing
                                    103 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    104 ;  UNLKEE   ( -- )
                                    105 ;----------------------------------
      001661 16 4F                  106     .word LINK 
                           001663   107 LINK=.
      001663 06                     108     .byte 6 
      001664 55 4E 4C 4B 45 45      109     .ascii "UNLKEE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      00166A                        110 unlock_eeprom:
      00166A 35 00 50 5B      [ 1]  111 	mov FLASH_CR2,#0 
      00166E 35 FF 50 5C      [ 1]  112 	mov FLASH_NCR2,#0xFF 
      001672 35 AE 50 64      [ 1]  113 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001676 35 56 50 64      [ 1]  114     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      00167A 72 07 50 5F FB   [ 2]  115 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      00167F 81               [ 4]  116 	ret
                                    117 
                                    118 ;----------------------------------
                                    119 ; unlock FLASH for writing/erasing
                                    120 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    121 ; UNLKFL  ( -- )
                                    122 ;----------------------------------
      001680 16 63                  123     .word LINK 
                           001682   124 LINK=. 
      001682 06                     125     .byte 6 
      001683 55 4E 4C 4B 46 4C      126     .ascii "UNLKFL"    
      001689                        127 unlock_flash:
      001689 35 00 50 5B      [ 1]  128 	mov FLASH_CR2,#0 
      00168D 35 FF 50 5C      [ 1]  129 	mov FLASH_NCR2,#0xFF 
      001691 35 56 50 62      [ 1]  130 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001695 35 AE 50 62      [ 1]  131 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001699 72 03 50 5F FB   [ 2]  132 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      00169E 81               [ 4]  133 	ret
                                    134 
                                    135 ;-----------------------------
                                    136 ; unlock FLASH or EEPROM 
                                    137 ; according to farptr address 
                                    138 ;  UNLOCK ( -- )
                                    139 ;-----------------------------
      00169F 16 82                  140 	.word LINK 
                           0016A1   141 	LINK=.
      0016A1 06                     142 	.byte 6
      0016A2 55 4E 4C 4F 43 4B      143 	.ascii "UNLOCK"
      0016A8                        144 unlock:
                                    145 ; put addr[15:0] in Y, for bounds check.
      0016A8 90 BE 03         [ 2]  146 	ldw y,ptr16   ; Y=addr15:0
                                    147 ; check addr[23:16], if <> 0 then it is extened flash memory
      0016AB 3D 02            [ 1]  148 	tnz farptr 
      0016AD 26 16            [ 1]  149 	jrne 4$
      0016AF 90 A3 80 00      [ 2]  150     cpw y,#FLASH_BASE
      0016B3 24 10            [ 1]  151     jruge 4$
      0016B5 90 A3 40 00      [ 2]  152 	cpw y,#EEPROM_BASE  
      0016B9 25 0D            [ 1]  153     jrult 9$
      0016BB 90 A3 48 7F      [ 2]  154 	cpw y,#OPTION_END 
      0016BF 22 07            [ 1]  155 	jrugt 9$
      0016C1 CD 16 6A         [ 4]  156 	call unlock_eeprom
      0016C4 81               [ 4]  157 	ret 
      0016C5 CD 16 89         [ 4]  158 4$: call unlock_flash
      0016C8 81               [ 4]  159 9$: ret 
                                    160 
                                    161 ;-------------------------
                                    162 ; lock write access to 
                                    163 ; FLASH and EEPROM 
                                    164 ; LOCK ( -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                    165 ;-------------------------
      0016C9 16 A1                  166 	.word LINK 
                           0016CB   167 	LINK=.
      0016CB 04                     168 	.byte 4 
      0016CC 4C 4F 43 4B            169 	.ascii "LOCK" 
      0016D0                        170 lock: 
      0016D0 72 13 50 5F      [ 1]  171 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0016D4 72 17 50 5F      [ 1]  172 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      0016D8 81               [ 4]  173 	ret 
                                    174 
                                    175 ;-------------------------
                                    176 ; increment farptr 
                                    177 ; INC-FPTR ( -- )
                                    178 ;-------------------------
      0016D9 16 CB                  179 	.word LINK 
                           0016DB   180 	LINK=. 
      0016DB 08                     181 	.byte 8 
      0016DC 49 4E 43 2D 46 50 54   182 	.ascii "INC-FPTR" 
             52
      0016E4                        183 inc_fptr:
      0016E4 3C 04            [ 1]  184 	inc ptr8 
      0016E6 26 08            [ 1]  185 	jrne 1$
      0016E8 90 BE 02         [ 2]  186 	ldw y,farptr 
      0016EB 90 5C            [ 2]  187 	incw y 
      0016ED 90 BF 02         [ 2]  188 	ldw farptr,y 
      0016F0 81               [ 4]  189 1$: ret 
                                    190 
                                    191 
                                    192 ;----------------------------
                                    193 ; write a byte at address pointed 
                                    194 ; by farptr and increment farptr.
                                    195 ; Expect pointer already initialized 
                                    196 ; and memory unlocked 
                                    197 ; WR-BYTE ( c -- )
                                    198 ;----------------------------
                                    199 
      0016F1 16 DB                  200 	.word LINK 
                           0016F3   201 	LINK=. 
      0016F3 07                     202 	.byte 7 
      0016F4 57 52 2D 42 59 54 45   203 	.ascii "WR-BYTE" 
                                    204 
      0016FB                        205 write_byte:
      0016FB 90 93            [ 1]  206 	ldw y,x 
      0016FD 90 FE            [ 2]  207 	ldw y,(y)
      0016FF 1C 00 02         [ 2]  208 	addw x,#CELLL 
      001702 90 9F            [ 1]  209 	ld a,yl
      001704 92 BD 00 02      [ 4]  210 	ldf [farptr],a
      001708 72 05 50 5F FB   [ 2]  211 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00170D 20 D5            [ 2]  212 	jra inc_fptr 
                                    213 
                                    214 
                                    215 
                                    216 ;---------------------------------------
                                    217 ; write a byte to FLASH or EEPROM/OPTION  
                                    218 ; EEC!  (c ud -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                    219 ;---------------------------------------
      00170F 16 F3                  220     .word LINK 
                           001711   221 	LINK=.
      001711 04                     222     .byte 4 
      001712 45 45 43 21            223     .ascii "EEC!"
                                    224 	; local variables 
                           000001   225 	BTW = 1   ; byte to write offset on stack
                           000002   226     OPT = 2 
                           000002   227 	VSIZE = 2
      001716                        228 ee_cstore:
      001716 52 02            [ 2]  229 	sub sp,#VSIZE
      001718 CD 16 06         [ 4]  230     call fptr_store
      00171B E6 01            [ 1]  231 	ld a,(1,x)
      00171D 43               [ 1]  232 	cpl a 
      00171E 6B 01            [ 1]  233 	ld (BTW,sp),a ; byte to write 
      001720 0F 02            [ 1]  234 	clr (OPT,sp)  ; OPTION flag
      001722 CD 16 A8         [ 4]  235 	call unlock 
                                    236 	; check if option
      001725 3D 02            [ 1]  237 	tnz farptr 
      001727 26 19            [ 1]  238 	jrne 2$
      001729 90 BE 03         [ 2]  239 	ldw y,ptr16 
      00172C 90 A3 48 00      [ 2]  240 	cpw y,#OPTION_BASE
      001730 2B 10            [ 1]  241 	jrmi 2$
      001732 90 A3 48 80      [ 2]  242 	cpw y,#OPTION_END+1
      001736 2A 0A            [ 1]  243 	jrpl 2$
      001738 03 02            [ 1]  244 	cpl (OPT,sp)
                                    245 	; OPTION WRITE require this unlock 
      00173A 72 1E 50 5B      [ 1]  246     bset FLASH_CR2,#FLASH_CR2_OPT
      00173E 72 1F 50 5C      [ 1]  247     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001742                        248 2$: 
      001742 CD 16 FB         [ 4]  249 	call write_byte 	
      001745 0D 02            [ 1]  250 	tnz (OPT,sp)
      001747 27 0D            [ 1]  251 	jreq 3$ 
      001749 7B 01            [ 1]  252     ld a,(BTW,sp)
      00174B 90 5F            [ 1]  253     clrw y
      00174D 90 97            [ 1]  254 	ld yl,a 
      00174F 1D 00 02         [ 2]  255 	subw x,#CELLL 
      001752 FF               [ 2]  256 	ldw (x),y 
      001753 CD 16 FB         [ 4]  257 	call write_byte
      001756                        258 3$: 
      001756 CD 16 D0         [ 4]  259 	call lock 
      001759 5B 02            [ 2]  260 	addw sp,#VSIZE 
      00175B 81               [ 4]  261     ret
                                    262 
                                    263 ;------------------------------
                                    264 ; write integer in FLASH|EEPROM
                                    265 ; EE! ( n ud -- )
                                    266 ;------------------------------
      00175C 17 11                  267 	.word LINK 
                           00175E   268 	LINK=.
      00175E 03                     269 	.byte 3 
      00175F 45 45 21               270 	.ascii "EE!"
      001762                        271 ee_store:
      001762 CD 16 06         [ 4]  272 	call fptr_store 
      001765 CD 16 A8         [ 4]  273 	call unlock 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      001768 90 93            [ 1]  274 	ldw y,x 
      00176A 90 FE            [ 2]  275 	ldw y,(y)
      00176C 90 89            [ 2]  276 	pushw y 
      00176E 90 5E            [ 1]  277 	swapw y 
      001770 FF               [ 2]  278 	ldw (x),y 
      001771 CD 16 FB         [ 4]  279 	call write_byte 
      001774 90 85            [ 2]  280 	popw y 
      001776 1D 00 02         [ 2]  281 	subw x,#CELLL
      001779 FF               [ 2]  282 	ldw (x),y 
      00177A CD 16 FB         [ 4]  283 	call write_byte
      00177D 72 13 50 5F      [ 1]  284 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001781 81               [ 4]  285 	ret 
                                    286 
                                    287 ;----------------------------
                                    288 ; Erase flash memory row 
                                    289 ; stm8s208 as 128 bytes rows
                                    290 ; ROW-ERASE ( ud -- )
                                    291 ;----------------------------
      001782 17 5E                  292 	.word LINK 
                           001784   293 	LINK=. 
      001784 09                     294 	.byte 9 
      001785 52 4F 57 2D 45 52 41   295 	.ascii "ROW-ERASE" 
             53 45
      00178E                        296 row_erase:
      00178E CD 16 06         [ 4]  297 	call fptr_store
                                    298 ;code must be execute from RAM 
                                    299 ;copy routine to PAD 
      001791 1D 00 02         [ 2]  300 	subw x,#CELLL 
      001794 90 AE 17 DB      [ 2]  301 	ldw y,#row_erase_proc
      001798 FF               [ 2]  302 	ldw (x),y 
      001799 CD 08 11         [ 4]  303 	call PAD 
      00179C 90 AE 18 02      [ 2]  304 	ldw y,#row_erase_proc_end 
      0017A0 72 A2 17 DB      [ 2]  305 	subw y,#row_erase_proc
      0017A4 1D 00 02         [ 2]  306 	subw x,#CELLL 
      0017A7 FF               [ 2]  307 	ldw (x),y 
      0017A8 CD 08 4D         [ 4]  308 	call CMOVE 
      0017AB                        309 block_erase:
      0017AB 90 BE 03         [ 2]  310 	ldw y,farptr+1
      0017AE 90 A3 1A 00      [ 2]  311 	cpw y,#app_space 
      0017B2 2A 13            [ 1]  312 	jrpl erase_flash 
                                    313 ; erase eeprom block
      0017B4 90 A3 40 00      [ 2]  314 	cpw y,#EEPROM_BASE 
      0017B8 24 01            [ 1]  315 	jruge 1$
      0017BA 81               [ 4]  316 	ret ; bad address 
      0017BB 90 A3 47 FF      [ 2]  317 1$: cpw y,#EEPROM_END 
      0017BF 23 01            [ 2]  318 	jrule 2$ 
      0017C1 81               [ 4]  319 	ret ; bad address 
      0017C2                        320 2$:	
      0017C2 CD 16 6A         [ 4]  321 	call unlock_eeprom 
      0017C5 20 03            [ 2]  322 	jra proceed_erase
                                    323 ; erase flash block:
      0017C7                        324 erase_flash:
      0017C7 CD 16 89         [ 4]  325 	call unlock_flash 
      0017CA                        326 proceed_erase:
      0017CA CD 08 11         [ 4]  327 	call PAD 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      0017CD 90 93            [ 1]  328 	ldw y,x
      0017CF 90 FE            [ 2]  329 	ldw y,(y)
      0017D1 1C 00 02         [ 2]  330 	addw x,#CELLL  
      0017D4 90 FD            [ 4]  331 	call (y) 
      0017D6 72 17 50 5F      [ 1]  332 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      0017DA 81               [ 4]  333 	ret 
                                    334 
                                    335 ; this routine is to be copied to PAD 
      0017DB                        336 row_erase_proc:
      0017DB 35 20 50 5B      [ 1]  337 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      0017DF 35 DF 50 5C      [ 1]  338 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      0017E3 4F               [ 1]  339 	clr a 
      0017E4 90 5F            [ 1]  340 	clrw y 
      0017E6 91 A7 00 02      [ 1]  341 	ldf ([farptr],y),a
      0017EA 90 5C            [ 2]  342     incw y
      0017EC 91 A7 00 02      [ 1]  343 	ldf ([farptr],y),a
      0017F0 90 5C            [ 2]  344     incw y
      0017F2 91 A7 00 02      [ 1]  345 	ldf ([farptr],y),a
      0017F6 90 5C            [ 2]  346     incw y
      0017F8 91 A7 00 02      [ 1]  347 	ldf ([farptr],y),a
      0017FC 72 05 50 5F FB   [ 2]  348 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001801 81               [ 4]  349 	ret
      001802                        350 row_erase_proc_end:
                                    351 
                                    352 
                                    353 ;-----------------------------------
                                    354 ; block programming must be 
                                    355 ; executed from RAM 
                                    356 ; initial contidions: 
                                    357 ; 		memory unlocked
                                    358 ;       farptr initialized 
                                    359 ; input: 
                                    360 ;    x   buffer address 
                                    361 ;-----------------------------------
                           000001   362 	BCNT=1 
      001802                        363 copy_buffer:
      001802 4B 80            [ 1]  364 	push #BLOCK_SIZE  
                                    365 ;enable block programming 
      001804 72 10 50 5B      [ 1]  366 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001808 72 11 50 5C      [ 1]  367 	bres FLASH_NCR2,#FLASH_CR2_PRG
      00180C 90 5F            [ 1]  368 	clrw y
      00180E F6               [ 1]  369 1$:	ld a,(x)
      00180F 91 A7 00 02      [ 1]  370 	ldf ([farptr],y),a
      001813 5C               [ 2]  371 	incw x 
      001814 90 5C            [ 2]  372 	incw y 
      001816 0A 01            [ 1]  373 	dec (BCNT,sp)
      001818 26 F4            [ 1]  374 	jrne 1$
                                    375 ; wait EOP bit 
      00181A 72 05 50 5F FB   [ 2]  376 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      00181F 84               [ 1]  377 	pop a ; remove BCNT from stack 
      001820 81               [ 4]  378 	ret 
      001821                        379 copy_buffer_end:
                                    380 
                                    381 ;-------------------------
                                    382 ; move program_row to RAM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                    383 ; in TIB 
                                    384 ;------------------------
      001821                        385 copy_prog_to_ram:
      001821 1D 00 06         [ 2]  386 	subw x,#6
      001824 90 AE 18 02      [ 2]  387 	ldw y,#copy_buffer 
      001828 EF 04            [ 2]  388 	ldw (4,x),y 
      00182A 90 AE 17 00      [ 2]  389 	ldw y,#TIBBASE
      00182E EF 02            [ 2]  390 	ldw (2,x),y 
      001830 90 AE 18 21      [ 2]  391 	ldw y,#copy_buffer_end 
      001834 72 A2 18 02      [ 2]  392 	subw y,#copy_buffer  
      001838 FF               [ 2]  393 	ldw (x),y 
      001839 CD 08 4D         [ 4]  394 	call CMOVE 
      00183C 81               [ 4]  395 	ret 
                                    396 
                                    397 
                                    398 ;-----------------------------
                                    399 ; write a row in FLASH/EEPROM 
                                    400 ; WR-ROW ( a ud -- )
                                    401 ; a -> address 128 byte buffer to write 
                                    402 ; ud ->  row address in FLASH|EEPROM 
                                    403 ;-----------------------------
      00183D 17 84                  404 	.word LINK 
                           00183F   405 	LINK=.
      00183F 06                     406 	.byte 6 
      001840 57 52 2D 52 4F 57      407 	.ascii "WR-ROW"
      001846                        408 write_row:
      001846 CD 16 06         [ 4]  409 	call fptr_store
                                    410 ; align to FLASH block 
      001849 A6 80            [ 1]  411 	ld a,#0x80 
      00184B B4 04            [ 1]  412 	and a,ptr8 
      00184D B7 04            [ 1]  413 	ld ptr8,a  
      00184F CD 18 21         [ 4]  414 	call copy_prog_to_ram
      001852 CD 16 A8         [ 4]  415 	call unlock
      001855 90 93            [ 1]  416 	ldw y,x 
      001857 90 FE            [ 2]  417 	ldw y,(y)
      001859 1C 00 02         [ 2]  418 	addw x,#CELLL 
      00185C 89               [ 2]  419 	pushw x 
      00185D 93               [ 1]  420 	ldw x,y ; buffer address in x 
      00185E CD 17 00         [ 4]  421 	call TIBBASE
      001861 CD 16 D0         [ 4]  422 	call lock
      001864 85               [ 2]  423 	popw x 
      001865 81               [ 4]  424 	ret 
                                    425 
                                    426 ;-------------------------------------
                                    427 ; change value of OPTION register 
                                    428 ; SET-OPT (c n -- ) 
                                    429 ; c new value.
                                    430 ; n OPT  number {1..7}
                                    431 ;--------------------------------------
      001866 18 3F                  432 		.word LINK 
                           001868   433 		LINK=.
      001868 07                     434 		.byte 7 
      001869 53 45 54 2D 4F 50 54   435 		.ascii "SET-OPT" 
      001870                        436 set_option: 
      001870 90 93            [ 1]  437 		ldw y,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      001872 90 FE            [ 2]  438 		ldw y,(y)
      001874 27 06            [ 1]  439 		jreq 1$
      001876 90 A3 00 07      [ 2]  440 		cpw y,#7 
      00187A 23 04            [ 2]  441 		jrule 2$ 
                                    442 ; invalid OPTION number 		
      00187C 1C 00 04         [ 2]  443 1$:		addw x,#2*CELLL
      00187F 81               [ 4]  444 		ret
      001880 90 58            [ 2]  445 2$:		sllw y 
      001882 72 A9 47 FF      [ 2]  446 		addw y,#OPTION_BASE-1
      001886 FF               [ 2]  447 		ldw (x),y 
      001887 1D 00 02         [ 2]  448 		subw x,#CELLL 
      00188A 90 5F            [ 1]  449 		clrw y 
      00188C FF               [ 2]  450 		ldw (x),y 
      00188D CD 17 16         [ 4]  451 		call ee_cstore
      001890 81               [ 4]  452 		ret 
                                    453 
                                    454 
                                    455 
                                    456 ;--------------------------------------
                                    457 ; reset system to its original state 
                                    458 ; before any user modification
                                    459 ; PRISTINE ( -- )
                                    460 ;-------------------------------------
      001891 18 68                  461 	.word LINK  
                           001893   462 	LINK=.
      001893 08                     463 	.byte 8 
      001894 50 52 49 53 54 49 4E   464 	.ascii "PRISTINE"
             45
      00189C                        465 pristine:
                                    466 ;;; erase EEPROM
      00189C CD 16 25         [ 4]  467 	call eeprom 
      00189F CD 03 EB         [ 4]  468 1$:	call DDUP 
      0018A2 CD 17 8E         [ 4]  469 	call row_erase
      0018A5 90 93            [ 1]  470 	ldw y,x 
      0018A7 90 EE 02         [ 2]  471 	ldw y,(2,y)
      0018AA 72 A9 00 80      [ 2]  472 	addw y,#BLOCK_SIZE
      0018AE EF 02            [ 2]  473 	ldw (2,x),y
      0018B0 90 A3 48 00      [ 2]  474 	cpw y,#OPTION_BASE 
      0018B4 25 E9            [ 1]  475 	jrult 1$
                                    476 ;;; reset OPTION to default values
      0018B6 90 AE 00 01      [ 2]  477 	ldw y,#1 ; OPT1 
      0018BA FF               [ 2]  478 2$:	ldw (x),y   
      0018BB 90 5F            [ 1]  479 	clrw y 
      0018BD EF 02            [ 2]  480 	ldw (2,x),y  ; ( 0 1 -- ) 
      0018BF CD 03 EB         [ 4]  481 	call DDUP    ; ( 0 1 0 1 -- )  
      0018C2 CD 18 70         [ 4]  482 	call set_option
      0018C5 90 93            [ 1]  483 	ldw y,x 
      0018C7 90 FE            [ 2]  484 	ldw y,(y)
      0018C9 90 5C            [ 2]  485 	incw y  ; next OPTION 
      0018CB 90 A3 00 08      [ 2]  486 	cpw y,#8 
      0018CF 25 E9            [ 1]  487 	jrult 2$
                                    488 ;;; erase first row of app_space 	
      0018D1 90 AE 1A 00      [ 2]  489 	ldw y,#app_space
      0018D5 EF 02            [ 2]  490 	ldw (2,x),y  
      0018D7 90 5F            [ 1]  491 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      0018D9 FF               [ 2]  492 	ldw (x),y ; ( app_space 0 -- )
      0018DA CD 17 8E         [ 4]  493 	call row_erase 
                                    494 ; reset interrupt vectors 
      0018DD 1D 00 02         [ 2]  495 	subw x,#CELLL 
      0018E0 90 5F            [ 1]  496 	clrw y  
      0018E2 FF               [ 2]  497 4$:	ldw (x),y  ; ( n -- ) int# 
      0018E3 CD 02 65         [ 4]  498 	call DUPP  
      0018E6 CD 19 03         [ 4]  499 	call reset_vector
      0018E9 90 93            [ 1]  500 	ldw y,x 
      0018EB 90 FE            [ 2]  501 	ldw y,(y)
      0018ED 90 5C            [ 2]  502 	incw y   ; next vector 
      0018EF 90 A3 00 19      [ 2]  503 	cpw y,#25 
      0018F3 25 ED            [ 1]  504 	jrult 4$
      0018F5 CC 00 00         [ 2]  505 	jp NonHandledInterrupt ; reset MCU
                                    506 
                                    507 ;------------------------------
                                    508 ; reset an interrupt vector 
                                    509 ; to its initial value 
                                    510 ; i.e. NonHandledInterrupt
                                    511 ; RST-IVEC ( n -- )
                                    512 ;-----------------------------
      0018F8 18 93                  513 	.word LINK 
                           0018FA   514 	LINK=. 
      0018FA 08                     515 	.byte 8 
      0018FB 52 53 54 2D 49 56 45   516 	.ascii "RST-IVEC"
             43
      001903                        517 reset_vector:
      001903 90 93            [ 1]  518 	ldw y,x
      001905 1C 00 02         [ 2]  519 	addw x,#CELLL 
      001908 90 FE            [ 2]  520 	ldw y,(y)
      00190A 90 A3 00 17      [ 2]  521 	cpw y,#23 
      00190E 27 3A            [ 1]  522 	jreq 9$
      001910 90 A3 00 18      [ 2]  523 	cpw y,#24 ; last vector for stm8s208 
      001914 22 34            [ 1]  524 	jrugt 9$  
      001916 90 58            [ 2]  525 	sllw y 
      001918 90 58            [ 2]  526 	sllw y 
      00191A 72 A9 80 08      [ 2]  527 	addw y,#0x8008 ; irq0 address 
      00191E 90 BF 1C         [ 2]  528 	ldw YTEMP,y
      001921 1D 00 06         [ 2]  529 	subw x,#3*CELLL 
      001924 EF 02            [ 2]  530 	ldw (2,x),y 
      001926 90 5F            [ 1]  531 	clrw y
      001928 FF               [ 2]  532 	ldw (x),y 
      001929 A6 82            [ 1]  533 	ld a,#0x82 
      00192B 90 95            [ 1]  534 	ld yh,a
      00192D EF 04            [ 2]  535 	ldw (4,x),y
      00192F CD 17 62         [ 4]  536 	call ee_store
      001932 1D 00 06         [ 2]  537 	subw x,#3*CELLL
      001935 90 5F            [ 1]  538 	clrw y 
      001937 FF               [ 2]  539 	ldw (x),y 
      001938 90 AE 00 00      [ 2]  540 	ldw y,#NonHandledInterrupt
      00193C EF 04            [ 2]  541 	ldw (4,x),y 
      00193E 90 BE 1C         [ 2]  542 	ldw y,YTEMP  
      001941 72 A9 00 02      [ 2]  543 	addw y,#2
      001945 EF 02            [ 2]  544 	ldw (2,x),y 
      001947 CD 17 62         [ 4]  545 	call ee_store
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      00194A 81               [ 4]  546 9$:	ret 
                                    547 
                                    548 
                                    549 	
                                    550 ;------------------------------
                                    551 ; set interrupt vector 
                                    552 ; SET-IVEC ( ud n -- )
                                    553 ;  ud Handler address
                                    554 ;  n  vector # 0 .. 29 
                                    555 ;-----------------------------
      00194B 18 FA                  556 	.word LINK
                           00194D   557 	LINK=.
      00194D 08                     558 	.byte 8 
      00194E 53 45 54 2D 49 56 45   559 	.ascii "SET-IVEC" 
             43
      001956                        560 set_vector:
      001956 90 93            [ 1]  561     ldw y,x 
      001958 1C 00 02         [ 2]  562 	addw x,#CELLL 
      00195B 90 FE            [ 2]  563 	ldw y,(y) ; vector #
      00195D 90 A3 00 18      [ 2]  564 	cpw y,#24 ; last vector for stm8s208  
      001961 23 04            [ 2]  565 	jrule 2$
      001963 1C 00 04         [ 2]  566 	addw x,#2*CELLL 
      001966 81               [ 4]  567 	ret
      001967 90 58            [ 2]  568 2$:	sllw y 
      001969 90 58            [ 2]  569 	sllw y 
      00196B 72 A9 80 08      [ 2]  570 	addw y,#0X8008 ; IRQ0 vector address 
      00196F 90 BF 1C         [ 2]  571 	ldw YTEMP,y ; vector address 
      001972 A6 82            [ 1]  572 	ld a,#0x82 
      001974 90 95            [ 1]  573 	ld yh,a 
      001976 E6 01            [ 1]  574 	ld a,(1,x) ; isr address bits 23..16 
      001978 90 97            [ 1]  575 	ld yl,a 
                                    576 ;  write 0x82 + most significant byte of int address	
      00197A 1D 00 06         [ 2]  577 	subw x,#3*CELLL 
      00197D EF 04            [ 2]  578 	ldw (4,x),y 
      00197F 90 BE 1C         [ 2]  579 	ldw y,YTEMP
      001982 EF 02            [ 2]  580 	ldw (2,x),y ; vector address 
      001984 90 5F            [ 1]  581 	clrw y 
      001986 FF               [ 2]  582 	ldw (x),y   ; as a double 
      001987 CD 17 62         [ 4]  583 	call ee_store 
      00198A 90 93            [ 1]  584 	ldw y,x 
      00198C 90 EE 02         [ 2]  585 	ldw y,(2,y) ; bits 15..0 int vector 
      00198F 1D 00 06         [ 2]  586 	subw x,#3*CELLL 
      001992 EF 04            [ 2]  587 	ldw (4,x),y 
      001994 90 BE 1C         [ 2]  588 	ldw y,YTEMP 
      001997 72 A9 00 02      [ 2]  589 	addw y,#2 
      00199B EF 02            [ 2]  590 	ldw (2,x),y 
      00199D 90 5F            [ 1]  591 	clrw y 
      00199F FF               [ 2]  592 	ldw (x),y 
      0019A0 CD 17 62         [ 4]  593 	call ee_store 
      0019A3 81               [ 4]  594 9$: ret 
                                    595 
                                    596 
                           000000   597 .if 0
                                    598 ;----------------------------
                                    599 ; transfert one or more définition 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                                    600 ; from RAM to FLASH 
                                    601 ; USAGE: FLASH name 
                                    602 ; 'name' and all following are 
                                    603 ; transfered to FLASH memory 
                                    604 ; FLASH ( -- ; <string> )
                                    605 ;-----------------------------------
                                    606 	.word LINK 
                                    607 	LINK=. 
                                    608 	.byte 5 
                                    609 	.ascii "FLASH"
                                    610 flash_colon: 
                                    611     call TOKEN 
                                    612 	call SNAME 
                                    613 	call DROP	
                                    614 .endif 
                                    615 
                                    616 
                                    617 
                                    618 
                                    619 ; application code begin here
      001A00                        620 	.bndry 128 ; align on flash block  
      001A00                        621 app_space: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                   3999 .endif ; PICATOUT_MOD
                                   4000 
                                   4001 ;===============================================================
                                   4002 
                           00194D  4003 LASTN =	LINK   ;last name defined
                                   4004 
                                   4005 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        000481 R   |   6 ABOR1      000F9C R
  6 ABOR2      000FB3 R   |   6 ABORQ      000F94 R   |   6 ABORT      000F85 R
  6 ABRTQ      001254 R   |   6 ABSS       000478 R   |   6 ACCEP      000F1B R
  6 ACCP1      000F24 R   |   6 ACCP2      000F4A R   |   6 ACCP3      000F4D R
  6 ACCP4      000F4F R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |     AFR     =  004803 
    AFR0_ADC=  000000     |     AFR1_TIM=  000001     |     AFR2_CCO=  000002 
    AFR3_TIM=  000003     |     AFR4_TIM=  000004     |     AFR5_TIM=  000005 
    AFR6_I2C=  000006     |     AFR7_BEE=  000007     |   6 AFT        00123F R
  6 AGAIN      00119E R   |   6 AHEAD      0011F5 R   |   6 ALLOT      0010C4 R
  6 ANDD       0002B1 R   |     APP_HERE=  004004     |     APP_LAST=  004000 
    APP_RUN =  004002     |   6 AT         0001BE R   |   6 ATEXE      000836 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
  6 BACK1      000EC3 R   |   6 BASE       000320 R   |     BASEE   =  00000A 
    BCNT    =  000001     |   6 BCOMP      001103 R   |   6 BDIGS      00091E R
    BEEP_BIT=  000004     |     BEEP_CSR=  0050F3     |     BEEP_MAS=  000010 
    BEEP_POR=  00000F     |   6 BEGIN      001182 R   |     BIT0    =  000000 
    BIT1    =  000001     |     BIT2    =  000002     |     BIT3    =  000003 
    BIT4    =  000004     |     BIT5    =  000005     |     BIT6    =  000006 
    BIT7    =  000007     |   6 BKSLA      000D5B R   |   6 BKSP       000E93 R
    BKSPP   =  000008     |   6 BLANK      000706 R   |     BLOCK_SI=  000080 
    BOOT_ROM=  006000     |     BOOT_ROM=  007FFF     |   6 BRAN       000180 R
    BTW     =  000001     |     CALLL   =  0000CD     |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CARRY   =  000020 
  6 CAT        0001DC R   |   6 CCOMMA     0010E5 R   |     CC_C    =  000000 
    CC_H    =  000004     |     CC_I0   =  000003     |     CC_I1   =  000005 
    CC_N    =  000002     |     CC_V    =  000007     |     CC_Z    =  000001 
    CELLL   =  000002     |   6 CELLM      0006C3 R   |   6 CELLP      0006B4 R
  6 CELLS      0006D2 R   |     CFG_GCR =  007F60     |     CFG_GCR_=  000001 
    CFG_GCR_=  000000     |   6 CHAR1      000B4B R   |   6 CHAR2      000B4E R
    CLKOPT  =  004807     |     CLKOPT_C=  000002     |     CLKOPT_E=  000003 
    CLKOPT_P=  000000     |     CLKOPT_P=  000001     |     CLK_CCOR=  0050C9 
    CLK_CKDI=  0050C6     |     CLK_CKDI=  000000     |     CLK_CKDI=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]

Symbol Table

    CLK_CKDI=  000002     |     CLK_CKDI=  000003     |     CLK_CKDI=  000004 
    CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1 
    CLK_ECKR=  000000     |     CLK_ECKR=  000001     |     CLK_HSIT=  0050CC 
    CLK_ICKR=  0050C0     |     CLK_ICKR=  000002     |     CLK_ICKR=  000000 
    CLK_ICKR=  000001     |     CLK_ICKR=  000003     |     CLK_ICKR=  000004 
    CLK_ICKR=  000005     |     CLK_PCKE=  0050C7     |     CLK_PCKE=  000000 
    CLK_PCKE=  000001     |     CLK_PCKE=  000007     |     CLK_PCKE=  000005 
    CLK_PCKE=  000006     |     CLK_PCKE=  000004     |     CLK_PCKE=  000002 
    CLK_PCKE=  000003     |     CLK_PCKE=  0050CA     |     CLK_PCKE=  000003 
    CLK_PCKE=  000002     |     CLK_PCKE=  000007     |     CLK_SWCR=  0050C5 
    CLK_SWCR=  000000     |     CLK_SWCR=  000001     |     CLK_SWCR=  000002 
    CLK_SWCR=  000003     |     CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4 
    CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2 
  6 CMOV1      000855 R   |   6 CMOV2      00086D R   |   6 CMOVE      00084D R
    CNTDWN  =  000028     |   6 CNTXT      000381 R   |   6 COLD       001583 R
  6 COLD1      001583 R   |   6 COLON      00136E R   |   6 COMMA      0010CE R
  6 COMPI      001113 R   |     COMPO   =  000040     |     CONVERT_=  000001 
  6 COUNT      0007E9 R   |   6 CPP        00038F R   |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |   6 CR         000B79 R   |   6 CREAT      0013A6 R
    CRR     =  00000D     |   6 CSTOR      0001CB R   |     CTOP    =  000080 
  6 DAT        0007C9 R   |     DATSTK  =  0016F0     |   6 DDROP      0003E0 R
  6 DDUP       0003EB R   |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
  6 DECIM      0009CE R   |   6 DEPTH      000756 R   |     DEVID_BA=  0048CD 
    DEVID_EN=  0048D8     |     DEVID_LO=  0048D2     |     DEVID_LO=  0048D3 
    DEVID_LO=  0048D4     |     DEVID_LO=  0048D5     |     DEVID_LO=  0048D6 
    DEVID_LO=  0048D7     |     DEVID_LO=  0048D8     |     DEVID_WA=  0048D1 
    DEVID_XH=  0048CE     |     DEVID_XL=  0048CD     |     DEVID_YH=  0048D0 
    DEVID_YL=  0048CF     |   6 DGTQ1      000A13 R   |   6 DIG        000947 R
  6 DIGIT      0008E2 R   |   6 DIGS       000958 R   |   6 DIGS1      000958 R
  6 DIGS2      000965 R   |   6 DIGTQ      0009E2 R   |     DM_BK1RE=  007F90 
    DM_BK1RH=  007F91     |     DM_BK1RL=  007F92     |     DM_BK2RE=  007F93 
    DM_BK2RH=  007F94     |     DM_BK2RL=  007F95     |     DM_CR1  =  007F96 
    DM_CR2  =  007F97     |     DM_CSR1 =  007F98     |     DM_CSR2 =  007F99 
    DM_ENFCT=  007F9A     |   6 DN1        000458 R   |   6 DNEGA      00043D R
  6 DOCONST    0013F2 R   |   6 DOLIT      000136 R   |   6 DONXT      00014A R
  6 DOSTR      000B8F R   |   6 DOT        000C14 R   |   6 DOT1       000C2A R
  6 DOTI1      001517 R   |   6 DOTID      001501 R   |   6 DOTO1      001028 R
  6 DOTOK      00100E R   |   6 DOTPR      000D3D R   |   6 DOTQ       001270 R
  6 DOTQP      000BB8 R   |   6 DOTR       000BC6 R   |   6 DOTS       0014A0 R
  6 DOTS1      0014AB R   |   6 DOTS2      0014B7 R   |   6 DOVAR      000312 R
  6 DROP       00025B R   |   6 DSTOR      0007A3 R   |   6 DUMP       001456 R
  6 DUMP1      00146D R   |   6 DUMP3      00148F R   |   6 DUMPP      001425 R
  6 DUPP       000265 R   |   6 EDIGS      000983 R   |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |     EEPROM_S=  000800     |   6 ELSEE      0011D2 R
  6 EMIT       000120 R   |   6 EQ1        00049C R   |   6 EQUAL      000486 R
  6 ERASE      0008AF R   |     ERR     =  00001B     |   6 EVAL       001051 R
  6 EVAL1      001051 R   |   6 EVAL2      00106D R   |   6 EXE1       000844 R
  6 EXECU      000190 R   |   6 EXIT       0001A0 R   |     EXT     =  000001 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |   6 EXTRC      00090A R
    FHSE    =  7A1200     |     FHSI    =  F42400     |   6 FILL       00087C R
  6 FILL1      000899 R   |   6 FILL2      0008A2 R   |   6 FIND       000DEF R
  6 FIND1      000E0D R   |   6 FIND2      000E3B R   |   6 FIND3      000E47 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]

Symbol Table

  6 FIND4      000E5B R   |   6 FIND5      000E68 R   |   6 FIND6      000E4C R
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
    FLSI    =  01F400     |   6 FOR        001161 R   |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
  6 HERE       000800 R   |   6 HEX        0009B9 R   |   6 HI         001556 R
  6 HLD        00036E R   |   6 HOLD       00092E R   |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  6 IFF        0011AC R   |     IMEDD   =  000080     |   6 IMMED      001383 R
  6 INCH       000114 R   |   6 INN        00033E R   |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_PU=  000001 
  6 INTE1      000FF0 R   |   6 INTER      000FC6 R   |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]

Symbol Table

    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
  6 INVER      00041A R   |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
  6 JSRC       00135F R   |   6 KEY        000AF9 R   |   6 KTAP       000EE0 R
  6 KTAP1      000F03 R   |   6 KTAP2      000F06 R   |   6 LAST       00039F R
  6 LASTN   =  00194D R   |   6 LBRAC      000FFD R   |     LED2_BIT=  000005 
    LED2_MAS=  000020     |     LED2_POR=  00500A     |   6 LESS       0004C3 R
    LF      =  00000A     |   6 LINK    =  00194D R   |   6 LITER      001132 R
  6 LT1        0004D9 R   |     MASKK   =  001F7F     |   6 MAX        0004E3 R
  6 MAX1       0004F6 R   |   6 MIN        000500 R   |   6 MIN1       000513 R
  6 MMOD1      0005B6 R   |   6 MMOD2      0005CA R   |   6 MMOD3      0005E1 R
  6 MMSM1      00055D R   |   6 MMSM2      000571 R   |   6 MMSM3      000573 R
  6 MMSM4      00057B R   |   6 MODD       0005FB R   |   6 MONE       00072C R
    MS      =  000026     |   6 MSEC       0000A1 R   |   6 MSMOD      000599 R
  6 MSTA1      00068C R   |   6 MSTAR      000669 R   |     NAFR    =  004804 
  6 NAMEQ      000E88 R   |   6 NAMET      000D99 R   |     NCLKOPT =  004808 
  6 NEGAT      00042B R   |   6 NEX1       000157 R   |   6 NEXT       001171 R
    NFLASH_W=  00480E     |     NHSECNT =  00480A     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
    NOPTBL  =  00487F     |   6 NTIB       00034E R   |     NUBC    =  004802 
  6 NUFQ       000B0F R   |   6 NUFQ1      000B28 R   |   6 NUMBQ      000A26 R
  6 NUMQ1      000A5A R   |   6 NUMQ2      000A8B R   |   6 NUMQ3      000ACD R
  6 NUMQ4      000AD2 R   |   6 NUMQ5      000AE1 R   |   6 NUMQ6      000AE4 R
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   6 NonHandl   000000 R
  6 ONE        00071E R   |   6 ONEM       0006EC R   |   6 ONEP       0006DF R
    OPT     =  000002     |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTION_B=  004800     |     OPTION_E=  00487F 
    OPTION_S=  000080     |   6 ORIG       00003D R   |   6 ORR        0002C5 R
  6 OUTPUT     000125 R   |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |   6 OVER       00028F R
  6 OVERT      00132C R   |     PA      =  000000     |   6 PACKS      0008C1 R
  6 PAD        000811 R   |   6 PAREN      000D4C R   |   6 PARS       000C45 R
  6 PARS1      000C70 R   |   6 PARS2      000C9B R   |   6 PARS3      000C9E R
  6 PARS4      000CA7 R   |   6 PARS5      000CCA R   |   6 PARS6      000CDF R
  6 PARS7      000CEE R   |   6 PARS8      000CFD R   |   6 PARSE      000D0E R
  6 PAUSE      0000B1 R   |     PA_BASE =  005000     |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_BASE =  005005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_BASE =  00500A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]

Symbol Table

    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |   6 PDUM1      001438 R   |   6 PDUM2      001449 R
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |     PICATOUT=  000001 
  6 PICK       00076D R   |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   6 PLUS       000400 R   |   6 PNAM1      0012E1 R
  6 PRESE      00107C R   |     PROD1   =  00001A     |     PROD2   =  00001C 
    PROD3   =  00001E     |   6 PSTOR      000782 R   |   6 QBRAN      000169 R
  6 QDUP       0003AF R   |   6 QDUP1      0003B9 R   |   6 QKEY       000102 R
  6 QSTAC      001034 R   |   6 QUERY      000F60 R   |   6 QUEST      000C37 R
  6 QUIT       001099 R   |   6 QUIT1      0010A1 R   |   6 QUIT2      0010A4 R
    RAMBASE =  000000     |     RAM_BASE=  000000     |     RAM_END =  0017FF 
    RAM_SIZE=  001800     |   6 RAT        000222 R   |   6 RBRAC      00134C R
  6 REPEA      001227 R   |   6 RFROM      00020F R   |     ROP     =  004800 
  6 ROT        0003C0 R   |     RP0     =  000024     |   6 RPAT       0001EC R
    RPP     =  0017FF     |   6 RPSTO      0001F9 R   |     RST_SR  =  0050B3 
  6 SAME1      000DB7 R   |   6 SAME2      000DE0 R   |   6 SAMEQ      000DAF R
  6 SCOM1      001316 R   |   6 SCOM2      001319 R   |   6 SCOMP      0012F8 R
  6 SEMIS      00133C R   |     SFR_BASE=  005000     |     SFR_END =  0057FF 
  6 SIGN       00096D R   |   6 SIGN1      00097D R   |   6 SLASH      000605 R
  6 SLMOD      0005E9 R   |   6 SNAME      0012AB R   |     SP0     =  000022 
  6 SPACE      000B31 R   |   6 SPACS      000B40 R   |   6 SPAT       000245 R
    SPI_CR1 =  005200     |     SPI_CR2 =  005201     |     SPI_CRCP=  005205 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_TXCR=  005207     |     SPP     =  0016F0 
  6 SPSTO      000252 R   |   6 SSMOD      000695 R   |     STACK   =  0017FF 
  6 STAR       00065E R   |   6 STASL      0006A6 R   |   6 STORE      0001A7 R
  6 STR        00099B R   |   6 STRCQ      001141 R   |   6 STRQ       001262 R
  6 STRQP      000BAE R   |   6 SUBB       00045E R   |   6 SWAPP      000275 R
    SWIM_CSR=  007F80     |   6 TAP        000ECA R   |   6 TBOOT      001577 R
  6 TCHA1      00074D R   |   6 TCHAR      00073D R   |   6 TEMP       00032F R
  6 TEVAL      00035F R   |   6 THENN      0011C2 R   |   6 TIB        000822 R
    TIBB    =  001700     |     TIBBASE =  001700     |     TIC     =  000027 
  6 TICK       0010B0 R   |     TIM1_ARR=  005262     |     TIM1_ARR=  005263 
    TIM1_BKR=  00526D     |     TIM1_CCE=  00525C     |     TIM1_CCE=  00525D 
    TIM1_CCM=  005258     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  005259     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525A     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525B     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCR=  005265     |     TIM1_CCR=  005266     |     TIM1_CCR=  005267 
    TIM1_CCR=  005268     |     TIM1_CCR=  005269     |     TIM1_CCR=  00526A 
    TIM1_CCR=  00526B     |     TIM1_CCR=  00526C     |     TIM1_CNT=  00525E 
    TIM1_CNT=  00525F     |     TIM1_CR1=  005250     |     TIM1_CR2=  005251 
    TIM1_CR2=  000000     |     TIM1_CR2=  000002     |     TIM1_CR2=  000004 
    TIM1_CR2=  000005     |     TIM1_CR2=  000006     |     TIM1_DTR=  00526E 
    TIM1_EGR=  005257     |     TIM1_EGR=  000007     |     TIM1_EGR=  000001 
    TIM1_EGR=  000002     |     TIM1_EGR=  000003     |     TIM1_EGR=  000004 
    TIM1_EGR=  000005     |     TIM1_EGR=  000006     |     TIM1_EGR=  000000 
    TIM1_ETR=  005253     |     TIM1_ETR=  000006     |     TIM1_ETR=  000000 
    TIM1_ETR=  000001     |     TIM1_ETR=  000002     |     TIM1_ETR=  000003 
    TIM1_ETR=  000007     |     TIM1_ETR=  000004     |     TIM1_ETR=  000005 
    TIM1_IER=  005254     |     TIM1_IER=  000007     |     TIM1_IER=  000001 
    TIM1_IER=  000002     |     TIM1_IER=  000003     |     TIM1_IER=  000004 
    TIM1_IER=  000005     |     TIM1_IER=  000006     |     TIM1_IER=  000000 
    TIM1_OIS=  00526F     |     TIM1_PSC=  005260     |     TIM1_PSC=  005261 
    TIM1_RCR=  005264     |     TIM1_SMC=  005252     |     TIM1_SMC=  000007 
    TIM1_SMC=  000000     |     TIM1_SMC=  000001     |     TIM1_SMC=  000002 
    TIM1_SMC=  000004     |     TIM1_SMC=  000005     |     TIM1_SMC=  000006 
    TIM1_SR1=  005255     |     TIM1_SR1=  000007     |     TIM1_SR1=  000001 
    TIM1_SR1=  000002     |     TIM1_SR1=  000003     |     TIM1_SR1=  000004 
    TIM1_SR1=  000005     |     TIM1_SR1=  000006     |     TIM1_SR1=  000000 
    TIM1_SR2=  005256     |     TIM1_SR2=  000001     |     TIM1_SR2=  000002 
    TIM1_SR2=  000003     |     TIM1_SR2=  000004     |     TIM2_ARR=  00530D 
    TIM2_ARR=  00530E     |     TIM2_CCE=  005308     |     TIM2_CCE=  005309 
    TIM2_CCM=  005305     |     TIM2_CCM=  005306     |     TIM2_CCM=  005307 
    TIM2_CCR=  00530F     |     TIM2_CCR=  005310     |     TIM2_CCR=  005311 
    TIM2_CCR=  005312     |     TIM2_CCR=  005313     |     TIM2_CCR=  005314 
    TIM2_CNT=  00530A     |     TIM2_CNT=  00530B     |     TIM2_CR1=  005300 
    TIM2_EGR=  005304     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]

Symbol Table

    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
    TIM4_SR =  005342     |     TIM4_SR_=  000000     |   6 TIMEOUTQ   0000E1 R
  6 TIMER      0000CB R   |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
  6 TNAM2      0014D1 R   |   6 TNAM3      0014EF R   |   6 TNAM4      0014F5 R
  6 TNAME      0014CE R   |   6 TOKEN      000D8B R   |   6 TOR        00022E R
    TRUEE   =  00FFFF     |   6 TWOSL      0006F9 R   |   6 TYPE1      000B60 R
  6 TYPE2      000B6C R   |   6 TYPES      000B5B R   |   6 Timer4Ha   000005 R
    UART1   =  000000     |     UART1_BA=  005230     |     UART1_BR=  005232 
    UART1_BR=  005233     |     UART1_CR=  005234     |     UART1_CR=  005235 
    UART1_CR=  005236     |     UART1_CR=  005237     |     UART1_CR=  005238 
    UART1_DR=  005231     |     UART1_GT=  005239     |     UART1_PO=  000000 
    UART1_PS=  00523A     |     UART1_RX=  000004     |     UART1_SR=  005230 
    UART1_TX=  000005     |     UART3   =  000001     |     UART3_BA=  005240 
    UART3_BR=  005242     |     UART3_BR=  005243     |     UART3_CR=  005244 
    UART3_CR=  005245     |     UART3_CR=  005246     |     UART3_CR=  005247 
    UART3_CR=  004249     |     UART3_DR=  005241     |     UART3_PO=  00000F 
    UART3_RX=  000006     |     UART3_SR=  005240     |     UART3_TX=  000005 
    UART_BRR=  000002     |     UART_BRR=  000003     |     UART_CR1=  000004 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  000005 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000006 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000007     |     UART_CR4=  000000 
    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000008     |     UART_CR5=  000003     |     UART_CR5=  000001 
    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_CR6=  000009     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DR =  000001     |     UART_GTR=  000009 
    UART_PSC=  00000A     |     UART_SR =  000000     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBASE   =  000006     |     UBC     =  004801 
    UCNTXT  =  000014     |     UCP     =  000016     |     UCTIB   =  00000C 
    UD1     =  000001     |     UD2     =  000002     |     UD3     =  000003 
    UD4     =  000004     |   6 UDOT       000C01 R   |   6 UDOTR      000BE1 R
  6 UEND       00003B R   |     UHLD    =  000012     |     UINN    =  00000A 
    UINTER  =  000010     |     ULAST   =  000018     |   6 ULES1      0004BB R
  6 ULESS      0004A5 R   |   6 UMMOD      00053B R   |   6 UMSTA      000614 R
  6 UNIQ1      0012A2 R   |   6 UNIQU      001283 R   |   6 UNTIL      00118D R
  6 UPL1       000306 R   |   6 UPLUS      0002EF R   |     UPP     =  000006 
    USR_BTN_=  000004     |     USR_BTN_=  000010     |     USR_BTN_=  005015 
    UTIB    =  00000E     |     UTMP    =  000008     |   6 UTYP1      001408 R
  6 UTYP2      001417 R   |   6 UTYPE      001403 R   |   6 UZERO      000027 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]

Symbol Table

  6 VARIA      0013C1 R   |     VAR_HERE=  004006     |     VER     =  000002 
    VSIZE   =  000002     |     WANT_DEB=  000000     |     WANT_SEE=  000000 
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |   6 WHILE      00120C R
  6 WITHI      000520 R   |   6 WORDD      000D77 R   |   6 WORDS      00152B R
  6 WORS1      001531 R   |   6 WORS2      001550 R   |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |   6 XORR       0002DA R   |     XTEMP   =  00001A 
    YTEMP   =  00001C     |   6 ZERO       000713 R   |   6 ZL1        0002A7 R
  6 ZLESS      00029E R   |   6 app_spac   001A00 R   |   6 block_er   0017AB R
  6 clear_ra   000019 R   |   6 clock_in   000058 R   |   6 constant   0013D5 R
  6 copy_buf   001802 R   |   6 copy_buf   001821 R   |   6 copy_pro   001821 R
    da      =  000002     |     db      =  000003     |     dc      =  000000 
    dd      =  000001     |   6 ee_cstor   001716 R   |   6 ee_store   001762 R
  6 eeprom     001625 R   |   6 erase_fl   0017C7 R   |   6 farat      001637 R
  6 farcat     001653 R   |     farptr  =  000002     |   6 fptr_sto   001606 R
  6 inc_fptr   0016E4 R   |   6 lock       0016D0 R   |   6 main       000016 R
  6 pristine   00189C R   |   6 proceed_   0017CA R   |     ptr16   =  000003 
    ptr8    =  000004     |   6 reboot     0000F8 R   |   6 reset_ve   001903 R
  6 row_eras   00178E R   |   6 row_eras   0017DB R   |   6 row_eras   001802 R
  6 set_opti   001870 R   |   6 set_vect   001956 R   |   6 uart1_in   00006A R
  6 unlock     0016A8 R   |   6 unlock_e   00166A R   |   6 unlock_f   001689 R
  6 write_by   0016FB R   |   6 write_ro   001846 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   1A00   flags    0

