ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                     13 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     15 
                                     16 ;===============================================================
                                     17 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     18 ;  Date: 2020-06-07 
                                     19 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     20 ;  Date: 2019-10-26
                                     21 ;  Changes to memory map:
                                     22 ;       0x16f0  Data Stack, growing downward
                                     23 ;       0x1700  Terminal input buffer TIB
                                     24 ;       0x17ff  Return Stack, growing downard
                                     25 ;================================================================
                                     26 ;       STM8EF, Version 2.1, 13 July
                                     27 ;               Implemented on STM8S-Discovery Board.
                                     28 ;               Assembled by ST VisualDevelop STVD 
                                     29 ;               Bootup on internal 2 MHz clock
                                     30 ;               Switch to external 16 MHz crystal clock
                                     31 ;
                                     32 ; FORTH Virtual Machine:
                                     33 ; Subroutine threaded model
                                     34 ; SP Return stack pointer
                                     35 ; X Data stack pointer
                                     36 ; A,Y Scratch pad registers
                                     37 ;
                                     38 ; Memory Map:
                                     39 ; 0x0 RAM memory, system variables
                                     40 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     41 ; 0x780 Data stack, growing downward
                                     42 ; 0x790 Terminal input buffer TIB
                                     43 ; 0x7FF Return stack, growing downward
                                     44 ; 0x8000 Interrupt vector table
                                     45 ; 0x8080 FORTH startup code
                                     46 ; 0x80E7 Start of FORTH dictionary in ROM
                                     47 ; 0x9584 End of FORTH dictionary
                                     48 ;
                                     49 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     50 ;                  use UART1 instead of UART3 for communication with user.
                                     51 ;                  UART1 is available as ttyACM* device via USB connection.
                                     52 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     53 ;                  and MSEC word that return MS value.
                                     54 ;
                                     55 ;       EF12, Version 2.1, 18apr00cht
                                     56 ;               move to 8000H replacing WHYP.
                                     57 ;               copy interrupt vectors from WHYPFLSH.S19
                                     58 ;               to EF12.S19 before flashing
                                     59 ;               add TICKS1 and DELAY1 for motor stepping
                                     60 ;
                                     61 ;       EF12, 02/18/00, C. H. Ting
                                     62 ;       Adapt 86eForth v2.02 to 68HC12.
                                     63 ;               Use WHYP to seed EF12.ASM
                                     64 ;               Use AS12 native 68HC12 assembler:
                                     65 ;               as12 ef12.asm >ef12.lst
                                     66 ;       EF12A, add ADC code, 02mar00cht
                                     67 ;       EF12B, 01mar00cht
                                     68 ;               stack to 0x78, return stack to 0xf8.
                                     69 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     70 ;               add PWM registers
                                     71 ;               add SPI registers and code
                                     72 ;       EF12C, 12mar00cht
                                     73 ;               add MAX5250 D/A converter
                                     74 ;       EF12D, 15mar00cht
                                     75 ;               add all the Lexel interface words
                                     76 ;       EF12E, 18apr00cht, save for reference
                                     77 ;
                                     78 ;       Copyright (c) 2000
                                     79 ;       Dr. C. H. Ting
                                     80 ;       156 14th Avenue
                                     81 ;       San Mateo, CA 94402
                                     82 ;       (650) 571-7639
                                     83 ;
                                     84 
                                     85 ;*************************************
                                     86 ; constant used for conditationnal 
                                     87 ; assembly for those word I converted 
                                     88 ; to code.
                                     89 ; Added by Picatout 2020-05-24 
                                     90 ;*************************************
                           000001    91 CONVERT_TO_CODE=1 ; words converted in assembly by Picatout
                           000001    92 PICATOUT_MOD=1  ; code modified by Picatout 
                                     93 
                                     94 ;*********************************************************
                                     95 ;	Assembler constants
                                     96 ;*********************************************************
                           000000    97 RAMBASE =	0x0000	   ;ram base
                           0017FF    98 STACK   =	0x17FF 	;system (return) stack empty 
                           001680    99 DATSTK  =	0x1680	;data stack  empty
                           001680   100 TBUFFBASE =     0x1680  ; flash read/write transaction buffer address  
                           001700   101 TIBBASE =       0X1700  ; transaction input buffer addr.
                                    102 
                                    103 
                                    104 
                                    105 ;; Memory allocation
                                    106 
                           000006   107 UPP     =     RAMBASE+6          ; systeme variables base address 
                           001680   108 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0017FF   109 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           001680   110 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           001700   111 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   112 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0017BF   113 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    114 
                           000001   115 .if PICATOUT_MOD 
                                    116 ; user variables constants 
                           000006   117 UBASE = UPP       ; numeric base 
                           000008   118 UTMP = UBASE+2    ; temporary storage
                           00000A   119 UINN = UTMP+2     ; >IN tib pointer 
                           00000C   120 UCTIB = UINN+2    ; tib count 
                           00000E   121 UTIB = UCTIB+2    ; tib address 
                           000010   122 UINTER = UTIB+2   ; interpreter vector 
                           000012   123 UHLD = UINTER+2   ; hold 
                           000014   124 UCNTXT = UHLD+2   ; context, dictionary first link 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000016   125 UVP = UCNTXT+2    ; variable pointer 
                           000018   126 UCP = UVP+2      ; code pointer
                           00001A   127 ULAST = UCP+2    ; last dictionary pointer 
                           00001C   128 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
                           00001E   129 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
                           000020   130 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    131 
                                    132 .endif ; PICATOUT_MOD
                                    133 ;******  System Variables  ******
                           000022   134 XTEMP	=	URLAST +2;address called by CREATE
                           000024   135 YTEMP	=	XTEMP+2	;address called by CREATE
                           000022   136 PROD1 = XTEMP	;space for UM*
                           000024   137 PROD2 = PROD1+2
                           000026   138 PROD3 = PROD2+2
                           000028   139 CARRY = PROD3+2
                           00002A   140 SP0	= CARRY+2	;initial data stack pointer
                           00002C   141 RP0	= SP0+2		;initial return stack pointer
                           00002E   142 MS    =   RP0+2         ; millisecond counter 
                           000030   143 CNTDWN =  MS+2          ; count down timer 
                           000032   144 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000033   145 PTR16 = FPTR+1          ; middle byte of farptr 
                           000034   146 PTR8 = FPTR+2           ; least byte of farptr 
                                    147 
                           000001   148 .if PICATOUT_MOD
                                    149 ; EEPROM persistant data  
                           004000   150 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   151 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   152 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   153 APP_VP = APP_CP+2  ; free data space pointer 
                                    154 .endif ;PICATOUT_MOD
                                    155 
                                    156 
                                    157 ;***********************************************
                                    158 ;; Version control
                                    159 
                           000003   160 VER     =     3         ;major release version
                           000000   161 EXT     =     0         ;minor extension
                                    162 
                                    163 ;; Constants
                                    164 
                           00FFFF   165 TRUEE   =     0xFFFF      ;true flag
                                    166 
                           000040   167 COMPO   =     0x40     ;lexicon compile only bit
                           000080   168 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   169 MASKK   =     0x1F7F  ;lexicon bit mask
                                    170 
                           000002   171 CELLL   =     2       ;size of a cell
                           00000A   172 BASEE   =     10      ;default radix
                           000008   173 BKSPP   =     8       ;back space
                           00000A   174 LF      =     10      ;line feed
                           00000D   175 CRR     =     13      ;carriage return
                           00001B   176 ERR     =     27      ;error escape
                           000027   177 TIC     =     39      ;tick
                           0000CD   178 CALLL   =     0xCD     ;CALL opcodes
                           000080   179 IRET_CODE =   0x80    ; IRET opcode 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    180 
                                    181         .macro _ledon
                                    182         bset PC_ODR,#LED2_BIT
                                    183         .endm
                                    184 
                                    185         .macro _ledoff
                                    186         bres PC_ODR,#LED2_BIT
                                    187         .endm
                                    188 
                                    189 ;**********************************************************
                                    190         .area DATA (ABS)
      000000                        191         .org RAMBASE 
                                    192 ;**********************************************************
                                    193 
                                    194 ;**********************************************************
                                    195         .area SSEG (ABS) ; STACK
      001700                        196         .org 0x1700
      001700                        197         .ds 256 
                                    198 ; space for DATSTK,TIB and STACK         
                                    199 ;**********************************************************
                                    200 
                                    201 ;**********************************************************
                                    202         .area HOME ; vectors table
                                    203 ;**********************************************************
      000000 82 00 00 16            204 	int main	        ; reset
      000004 82 00 00 00            205 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            206 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            207 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            208 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            209 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            210 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            211 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            212 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            213 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            214 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            215 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            216 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            217 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            218 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            219 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            220 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            221 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            222 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            223 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            224 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            225 	int NonHandledInterrupt	; irq19
      000058 82 00 00 00            226 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            227 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            228 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            229 	int Timer4Handler	; irq23
      000068 82 00 00 00            230 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            231 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            232 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            233 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            234 	int NonHandledInterrupt	; irq28
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      00007C 82 00 00 00            235 	int NonHandledInterrupt	; irq29
                                    236 
                                    237 ;**********************************************************
                                    238         .area CODE
                                    239 ;**********************************************************
                                    240 
                                    241 ; non handled interrupt reset MCU
      000000                        242 NonHandledInterrupt:
      000000 A6 80            [ 1]  243         ld a, #0x80
      000002 C7 50 D1         [ 1]  244         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    245 	;iret
                                    246 
                                    247 ; used for milliseconds counter 
                                    248 ; MS is 16 bits counter 
      000005                        249 Timer4Handler:
      000005 72 5F 53 42      [ 1]  250 	clr TIM4_SR 
      000009 BE 2E            [ 2]  251         ldw x,MS 
      00000B 5C               [ 2]  252         incw x 
      00000C BF 2E            [ 2]  253         ldw MS,x
      00000E BE 30            [ 2]  254         ldw x,CNTDWN 
      000010 27 03            [ 1]  255         jreq 1$
      000012 5A               [ 2]  256         decw x 
      000013 BF 30            [ 2]  257         ldw CNTDWN,x 
      000015                        258 1$:         
      000015 80               [11]  259         iret 
                                    260 
                                    261 
                                    262 ;; Main entry points and COLD start data
      000016                        263 main:
                                    264 ; clear all RAM
      000016 AE 00 00         [ 2]  265 	ldw X,#RAMBASE
      000019                        266 clear_ram0:
      000019 7F               [ 1]  267 	clr (X)
      00001A 5C               [ 2]  268 	incw X
      00001B A3 17 FF         [ 2]  269 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  270 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  271         ldw x,#RPP
      000023 94               [ 1]  272         ldw sp,x 
      000024 CC 00 43         [ 2]  273 	jp ORIG
                                    274 
                                    275 ; COLD initialize these variables.
      000027                        276 UZERO:
      000027 00 0A                  277         .word      BASEE   ;BASE
      000029 00 00                  278         .word      0       ;tmp
      00002B 00 00                  279         .word      0       ;>IN
      00002D 00 00                  280         .word      0       ;#TIB
      00002F 17 00                  281         .word      TIBB    ;TIB
      000031 12 6F                  282         .word      INTER   ;'EVAL
      000033 00 00                  283         .word      0       ;HLD
      000035 21 1D                  284         .word      LASTN  ;CNTXT pointer
      000037 00 80                  285         .word      VAR_BASE   ;variables free space pointer 
      000039 20 80                  286         .word      app_space ; FLASH free space pointer 
      00003B 21 1D                  287         .word      LASTN   ;LAST
      00003D 00 00                  288         .word      0        ; OFFSET 
      00003F 00 00                  289         .word      0       ; TFLASH
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                    290 ;       .word      0       ; URLAST   
      000041 00 00                  291 UEND:   .word      0
                                    292 
      000043                        293 ORIG:   
                                    294 ; initialize SP
      000043 AE 17 FF         [ 2]  295         LDW     X,#STACK  ;initialize return stack
      000046 94               [ 1]  296         LDW     SP,X
      000047 BF 2C            [ 2]  297         LDW     RP0,X
      000049 AE 16 80         [ 2]  298         LDW     X,#DATSTK ;initialize data stack
      00004C BF 2A            [ 2]  299         LDW     SP0,X
                                    300 ; initialize PC_5 as output to control LED2
                                    301 ; added by Picatout 
      00004E 72 1A 50 0D      [ 1]  302         bset PC_CR1,#LED2_BIT
      000052 72 1A 50 0E      [ 1]  303         bset PC_CR2,#LED2_BIT
      000056 72 1A 50 0C      [ 1]  304         bset PC_DDR,#LED2_BIT
      00005A                        305         _ledoff
      00005A 72 1B 50 0A      [ 1]    1         bres PC_ODR,#LED2_BIT
                                    306 ; initialize clock to HSI
                                    307 ; no divisor 16Mhz 
                                    308 ; Added by Picatout 
      00005E                        309 clock_init:
      00005E 72 5F 50 C6      [ 1]  310         clr CLK_CKDIVR
      000062 72 12 50 C5      [ 1]  311 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000066 A6 E1            [ 1]  312 	ld a,#CLK_SWR_HSI
      000068 C7 50 C4         [ 1]  313 	ld CLK_SWR,a
      00006B C1 50 C3         [ 1]  314 1$:	cp a,CLK_CMSR
      00006E 26 FB            [ 1]  315 	jrne 1$
                                    316         
                                    317 ; initialize UART1, 115200 8N1
      000070                        318 uart1_init:
      000070 72 14 50 C7      [ 1]  319 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    320 	; configure tx pin
      000074 72 1A 50 02      [ 1]  321 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      000078 72 1A 50 03      [ 1]  322 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      00007C 72 1A 50 04      [ 1]  323 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    324 	; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
      000080 35 0B 52 33      [ 1]  325 	mov UART1_BRR2,#0x0b ; must be loaded first
      000084 35 08 52 32      [ 1]  326 	mov UART1_BRR1,#0x8
      000088 35 0C 52 35      [ 1]  327 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    328 ; initialize timer4, used for millisecond interrupt  
      00008C 35 07 53 45      [ 1]  329 	mov TIM4_PSCR,#7 ; prescale 128  
      000090 35 7D 53 46      [ 1]  330 	mov TIM4_ARR,#125 ; set for 1msec.
      000094 35 05 53 40      [ 1]  331 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      000098 72 10 53 41      [ 1]  332 	bset TIM4_IER,#TIM4_IER_UIE 
                                    333 ; set TIM4 interrupt priority to highest
      00009C A6 3F            [ 1]  334         ld a,#~(IPR_MASK<<6)
      00009E C4 7F 75         [ 1]  335         and a,ITC_SPR6
      0000A1 AA C0            [ 1]  336         or a,#(IPR3<<6)
      0000A3 C7 7F 75         [ 1]  337         ld ITC_SPR6,a 
      0000A6 9A               [ 1]  338         rim
      0000A7 CC 19 11         [ 2]  339         jp  COLD   ;default=MN1
                                    340 
                                    341 
                                    342 ;; place MCU in sleep mode with
                                    343 ;; halt opcode 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                                    344 ;; BYE ( -- )
      0000AA 00 00                  345         .word 0
                           0000AC   346         LINK=.
      0000AC 03                     347         .byte 3 
      0000AD 42 59 45               348         .ascii "BYE"
      0000B0                        349 BYE: 
      0000B0 8E               [10]  350         halt 
      0000B1 81               [ 4]  351         ret 
                                    352 
                                    353 ; Enable interrupts 
                                    354 ; EI ( -- )
      0000B2 00 AC                  355         .word LINK 
                           0000B4   356         LINK=.
      0000B4 02                     357         .byte 2
      0000B5 45 49                  358         .ascii "EI"
      0000B7                        359 EI:
      0000B7 9A               [ 1]  360         rim 
      0000B8 81               [ 4]  361         ret 
                                    362 
                                    363 ; Disable interrupts
                                    364 ; DI ( -- )
      0000B9 00 B4                  365         .word LINK 
                           0000BB   366         LINK=.
      0000BB 02                     367         .byte 2 
      0000BC 44 49                  368         .ascii "DI"
      0000BE                        369 DI:
      0000BE 9B               [ 1]  370         sim 
      0000BF 81               [ 4]  371         ret 
                                    372 
                                    373 ; set interrupt priority level 
                                    374 ; SET-ISP ( n1 n2 -- )
                                    375 ; n1 level {1..3}
                                    376 ; n2 vector {0..29}
      0000C0 00 BB                  377         .word LINK 
                           0000C2   378         LINK=.
      0000C2 07                     379         .byte 7 
      0000C3 53 45 54 2D 49 53 50   380         .ascii "SET-ISP"
      0000CA                        381 SETISP:
      0000CA 90 93            [ 1]  382         ldw y,x 
      0000CC 90 FE            [ 2]  383         ldw y,(y)
      0000CE A6 04            [ 1]  384         ld a,#4 ; 4 slot per register 
                                    385 ;  quotient select register, remainder select slot in register.        
      0000D0 90 62            [ 2]  386         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000D2 A4 03            [ 1]  387         and a,#3 
      0000D4 48               [ 1]  388         sll a ; 2*SLOT  lshift 
      0000D5 72 A9 7F 70      [ 2]  389         addw y,#ITC_SPR1 
      0000D9 FF               [ 2]  390         ldw (x),y  ; ( level reg -- )
      0000DA 90 5F            [ 1]  391         clrw y 
      0000DC 90 97            [ 1]  392         ld yl,a 
      0000DE 1D 00 02         [ 2]  393         subw x,#CELLL 
      0000E1 FF               [ 2]  394         ldw (x),y  ; ( level reg lshift -- )
      0000E2 90 93            [ 1]  395         ldw y,x 
      0000E4 90 EE 02         [ 2]  396         ldw y,(2,y) 
      0000E7 90 F6            [ 1]  397         ld a,(y)   ; reg_value
      0000E9 1D 00 02         [ 2]  398         subw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      0000EC FF               [ 2]  399         ldw (x),y ; ( level reg lshift rval -- )
      0000ED CD 04 9E         [ 4]  400         call OVER ; ( level reg lshift rval lshift -- )
      0000F0 CD 03 45         [ 4]  401         call DOLIT 
      0000F3 00 03                  402         .word 3
      0000F5 CD 04 84         [ 4]  403         call SWAPP  ; ( level reg lshift rval 3 lshift )
      0000F8 CD 09 6C         [ 4]  404         call LSHIFT ; creat slot mask 
      0000FB CD 06 89         [ 4]  405         call INVER  ; ( level reg lshift rval mask )
      0000FE CD 04 C0         [ 4]  406         call ANDD ; ( level reg lshift slot_masked )
      000101 CD 04 3D         [ 4]  407         call TOR  ; ( level reg lshift -- R: slot_masked )
      000104 CD 06 2F         [ 4]  408         call ROT  ; ( reg lshift level )
      000107 CD 04 84         [ 4]  409         call SWAPP ; ( reg level lshift )
      00010A CD 09 6C         [ 4]  410         call LSHIFT  ; ( reg slot_level -- )
      00010D CD 04 1E         [ 4]  411         call RFROM ; ( reg slot_level masked_val )
      000110 CD 04 D4         [ 4]  412         call ORR   ; ( reg updated_rval )
      000113 CD 04 84         [ 4]  413         call SWAPP 
      000116 CD 03 DA         [ 4]  414         call CSTOR
                                    415 
                                    416 ; sélectionne l'application 
                                    417 ; qui démarre automatique lors 
                                    418 ; d'un COLD start 
      000119 00 C2                  419         .word LINK 
                           00011B   420         LINK=.
      00011B 07                     421         .byte 7
      00011C 41 55 54 4F 52 55 4E   422         .ascii "AUTORUN"
      000123                        423 AUTORUN:
      000123 CD 10 34         [ 4]  424         call TOKEN 
      000126 CD 04 74         [ 4]  425         call DUPP 
      000129 CD 03 78         [ 4]  426         call QBRAN 
      00012C 02 09                  427         .word FORGET2
      00012E CD 11 31         [ 4]  428         call NAMEQ
      000131 CD 06 1E         [ 4]  429         call QDUP 
      000134 CD 03 78         [ 4]  430         call QBRAN 
      000137 02 09                  431         .word FORGET2
      000139 CD 04 6A         [ 4]  432         call DROP 
      00013C 1D 00 04         [ 2]  433         subw x,#2*CELLL 
      00013F 90 5F            [ 1]  434         clrw y 
      000141 FF               [ 2]  435         ldw (x),y 
      000142 90 AE 40 02      [ 2]  436         ldw y,#APP_RUN 
      000146 EF 02            [ 2]  437         ldw (2,x),y 
      000148 CC 1B 90         [ 2]  438         jp ee_store 
                                    439 
                                    440 ;; Reset dictionary pointer before 
                                    441 ;; forgotten word. RAM space and 
                                    442 ;; interrupt vector defined after 
                                    443 ;; must be resetted also.
      00014B 01 1B                  444         .word LINK 
                           00014D   445         LINK=.
      00014D 06                     446         .byte 6
      00014E 46 4F 52 47 45 54      447         .ascii "FORGET" 
      000154                        448 FORGET: 
      000154 CD 10 34         [ 4]  449         call TOKEN
      000157 CD 04 74         [ 4]  450         call DUPP 
      00015A CD 03 78         [ 4]  451         call QBRAN 
      00015D 02 09                  452         .word FORGET2
      00015F CD 11 31         [ 4]  453         call NAMEQ ; ( a -- ca na | a F )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      000162 CD 06 1E         [ 4]  454         call QDUP 
      000165 CD 03 78         [ 4]  455         call QBRAN 
      000168 02 09                  456         .word FORGET2
                                    457 ; only forget users words 
      00016A CD 04 74         [ 4]  458         call DUPP ; ( ca na na )
      00016D CD 03 45         [ 4]  459         call DOLIT 
      000170 20 80                  460         .word app_space 
      000172 CD 04 84         [ 4]  461         call SWAPP 
      000175 CD 07 14         [ 4]  462         call  ULESS 
      000178 CD 03 78         [ 4]  463         call QBRAN 
      00017B 01 CB                  464         .word FORGET6 
                                    465 ; ( ca na -- )        
                                    466 ;reset ivec with address >= ca
      00017D CD 04 84         [ 4]  467         call SWAPP ; ( na ca -- ) 
      000180 CD 1D 81         [ 4]  468         call CHKIVEC ; ( na -- ) 
                                    469 ; start at LAST and link back to na 
                                    470 ; if variable found reset VP at that point.
      000183                        471 FORGET1:
      000183 CD 05 E0         [ 4]  472         call LAST 
      000186 CD 03 CD         [ 4]  473         call AT 
      000189 CD 04 74         [ 4]  474         call DUPP  ; ( -- na last last )
      00018C CD 02 1F         [ 4]  475         call FREEVAR ; ( -- na last )
      00018F CD 04 74         [ 4]  476         call DUPP 
      000192 CD 03 45         [ 4]  477         call DOLIT 
      000195 00 02                  478         .word 2 
      000197 CD 06 CD         [ 4]  479         call SUBB ; ( na last -- na last lfa ) link address 
      00019A CD 03 CD         [ 4]  480         call AT 
      00019D CD 04 74         [ 4]  481         call DUPP ; ( -- na last a a )
      0001A0 CD 05 B4         [ 4]  482         call CNTXT 
      0001A3 CD 03 B6         [ 4]  483         call STORE
      0001A6 CD 05 E0         [ 4]  484         call LAST  
      0001A9 CD 03 B6         [ 4]  485         call STORE ; ( --  na last )
      0001AC CD 04 9E         [ 4]  486         call OVER 
      0001AF CD 06 F5         [ 4]  487         call EQUAL ; ( na last na -- na T|F ) 
      0001B2 CD 03 78         [ 4]  488         call QBRAN 
      0001B5 01 83                  489         .word FORGET1 
                                    490 ; ( na -- )
      0001B7 CD 03 45         [ 4]  491         call DOLIT 
      0001BA 00 02                  492         .word 2 
      0001BC CD 06 CD         [ 4]  493         call SUBB 
      0001BF CD 05 D0         [ 4]  494         call CPP 
      0001C2 CD 03 B6         [ 4]  495         call STORE  
      0001C5 CD 1A 3D         [ 4]  496         call UPDATCP 
      0001C8 CC 1A 14         [ 2]  497         jp UPDATLAST 
      0001CB                        498 FORGET6: ; tried to forget a RAM or system word 
                                    499 ; ( ca na -- )
      0001CB 1D 00 02         [ 2]  500         subw x,#CELLL 
      0001CE 90 BE 2A         [ 2]  501         ldw y,SP0 
      0001D1 FF               [ 2]  502         ldw (x),y  
      0001D2 CD 07 14         [ 4]  503         call ULESS
      0001D5 CD 03 78         [ 4]  504         call QBRAN 
      0001D8 01 FB                  505         .word PROTECTED 
      0001DA CD 12 3D         [ 4]  506         call ABORQ 
      0001DD 1D                     507         .byte 29
      0001DE 20 46 6F 72 20 52 41   508         .ascii " For RAM definition do REBOOT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      0001FB                        509 PROTECTED:
      0001FB CD 12 3D         [ 4]  510         call ABORQ
      0001FE 0A                     511         .byte 10
      0001FF 20 50 72 6F 74 65 63   512         .ascii " Protected"
             74 65 64
      000209                        513 FORGET2: ; no name or not found in dictionary 
      000209 CD 12 3D         [ 4]  514         call ABORQ
      00020C 05                     515         .byte 5
      00020D 20 77 68 61 74         516         .ascii " what"
      000212                        517 FORGET4:
      000212 CC 04 6A         [ 2]  518         jp DROP 
                                    519 
                                    520 
                                    521 ;---------------------------------
                                    522 ; if na is variable 
                                    523 ; free variable data  
                                    524 ; FREEVAR ( na -- )
                                    525 ;---------------------------------
      000215 01 4D                  526         .word LINK 
                           000217   527         LINK=.
      000217 07                     528         .byte 7 
      000218 46 52 45 45 56 41 52   529         .ascii "FREEVAR"
      00021F                        530 FREEVAR:
      00021F CD 04 74         [ 4]  531         call DUPP ; ( na na -- )
      000222 CD 03 EB         [ 4]  532         CALL CAT  ; ( na c -- )
      000225 CD 09 4E         [ 4]  533         call ONEP ;
      000228 CD 06 6F         [ 4]  534         CALL PLUS ; ( na c+1 -- ca ) 
      00022B CD 09 4E         [ 4]  535         call ONEP ; ( ca+ -- ) to get routne address 
      00022E CD 04 74         [ 4]  536         call DUPP ; ( ca+ ca+ -- )
      000231 CD 03 CD         [ 4]  537         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      000234 CD 03 45         [ 4]  538         call DOLIT 
      000237 05 21                  539         .word DOVAR ; if routine address is DOVAR then variable 
      000239 CD 06 F5         [ 4]  540         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      00023C CD 03 78         [ 4]  541         call QBRAN 
      00023F 02 55                  542         .word FREEVAR4 
      000241 CD 03 45         [ 4]  543         call DOLIT 
      000244 00 02                  544         .word 2 
      000246 CD 06 6F         [ 4]  545         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      000249 CD 03 CD         [ 4]  546         call AT 
      00024C CD 05 C2         [ 4]  547         call VPP   
      00024F CD 03 B6         [ 4]  548         call STORE 
      000252 CC 1A 54         [ 2]  549         jp UPDATVP 
      000255                        550 FREEVAR4: ; not variable
      000255 CC 04 6A         [ 2]  551         jp  DROP 
                                    552 
                                    553 ;;
                                    554 ;; get millisecond counter 
                                    555 ;; msec ( -- u )
                                    556 ;; Added by Picatout 2020-04-26
      000258 02 17                  557         .word LINK  
                           00025A   558         LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      00025A 04                     559         .byte 4
      00025B 4D 53 45 43            560         .ascii "MSEC"
      00025F                        561 MSEC: 
      00025F 1D 00 02         [ 2]  562         subw x,#CELLL 
      000262 90 BE 2E         [ 2]  563         ldw y,MS 
      000265 FF               [ 2]  564         ldw (x),y 
      000266 81               [ 4]  565         ret 
                                    566 
                                    567 ; suspend execution for u msec 
                                    568 ;  pause ( u -- )
      000267 02 5A                  569         .word LINK 
                           000269   570         LINK=.
      000269 05                     571         .byte 5 
      00026A 50 41 55 53 45         572         .ascii "PAUSE"
      00026F                        573 PAUSE:
      00026F 90 93            [ 1]  574         ldw y,x
      000271 90 FE            [ 2]  575         ldw y,(y)
      000273 72 B9 00 2E      [ 2]  576         addw y,MS 
      000277 8F               [10]  577 1$:     wfi  
      000278 90 B3 2E         [ 2]  578         cpw y,MS  
      00027B 26 FA            [ 1]  579         jrne 1$        
      00027D 1C 00 02         [ 2]  580         addw x,#CELLL 
      000280 81               [ 4]  581         ret 
                                    582 
                                    583 ; initialize count down timer 
                                    584 ;  TIMER ( u -- )  milliseconds 
      000281 02 69                  585         .word LINK 
                           000283   586         LINK=.
      000283 05                     587         .byte 5 
      000284 54 49 4D 45 52         588         .ascii "TIMER" 
      000289                        589 TIMER:
      000289 90 93            [ 1]  590         ldw y,x
      00028B 90 FE            [ 2]  591         ldw y,(y) 
      00028D 90 BF 30         [ 2]  592         ldw CNTDWN,y
      000290 1C 00 02         [ 2]  593         addw x,#CELLL 
      000293 81               [ 4]  594         ret 
                                    595 
                                    596 ; check for TIMER exiparition 
                                    597 ;  TIMEOUT? ( -- 0|-1 )
      000294 02 83                  598         .word LINK 
                           000296   599         LINK=. 
      000296 08                     600         .byte 8 
      000297 54 49 4D 45 4F 55 54   601         .ascii "TIMEOUT?"
             3F
      00029F                        602 TIMEOUTQ: 
      00029F 4F               [ 1]  603         clr a
      0002A0 1D 00 02         [ 2]  604         subw x,#CELLL 
      0002A3 90 BE 30         [ 2]  605         ldw y,CNTDWN 
      0002A6 26 01            [ 1]  606         jrne 1$ 
      0002A8 43               [ 1]  607         cpl a 
      0002A9 E7 01            [ 1]  608 1$:     ld (1,x),a 
      0002AB F7               [ 1]  609         ld (x),a 
      0002AC 81               [ 4]  610         ret         
                                    611 
                                    612 ; reboot MCU 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    613 ; REBOOT ( -- )
      0002AD 02 96                  614         .word LINK 
                           0002AF   615         LINK=. 
      0002AF 06                     616         .byte 6 
      0002B0 52 45 42 4F 4F 54      617         .ascii "REBOOT"
      0002B6                        618 reboot:
      0002B6 CC 00 00         [ 2]  619         jp NonHandledInterrupt
                                    620 
                                    621 ; compile to flash memory 
                                    622 ; TO-FLASH ( -- )
      0002B9 02 AF                  623         .word LINK 
                           0002BB   624         LINK=.
      0002BB 08                     625         .byte 8
      0002BC 54 4F 2D 46 4C 41 53   626         .ascii "TO-FLASH"
             48
      0002C4                        627 TOFLASH:
      0002C4 CD 05 F3         [ 4]  628         call RAMLAST 
      0002C7 CD 03 CD         [ 4]  629         call AT 
      0002CA CD 06 1E         [ 4]  630         call QDUP 
      0002CD CD 03 78         [ 4]  631         call QBRAN
      0002D0 02 F3                  632         .word 1$
      0002D2 CD 12 3D         [ 4]  633         call ABORQ 
      0002D5 1D                     634         .byte 29
      0002D6 20 4E 6F 74 20 77 68   635         .ascii " Not while definitions in RAM"   
             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      0002F3 90 AE FF FF      [ 2]  636 1$:     ldw y,#-1 
      0002F7 90 BF 1E         [ 2]  637         ldw UTFLASH,y
      0002FA 81               [ 4]  638         ret 
                                    639 
                                    640 ; compile to RAM 
                                    641 ; TO-RAM ( -- )
      0002FB 02 BB                  642         .word LINK 
                           0002FD   643         LINK=.
      0002FD 06                     644         .byte 6 
      0002FE 54 4F 2D 52 41 4D      645         .ascii "TO-RAM"
      000304                        646 TORAM:
      000304 90 5F            [ 1]  647         clrw y 
      000306 90 BF 1E         [ 2]  648         ldw UTFLASH,y 
      000309 81               [ 4]  649         ret 
                                    650         
                                    651 
                                    652 ;; Device dependent I/O
                                    653 ;       ?RX     ( -- c T | F )
                                    654 ;         Return input byte and true, or false.
      00030A 02 FD                  655         .word      LINK 
                           00030C   656 LINK	= .
      00030C 04                     657         .byte      4
      00030D 3F 4B 45 59            658         .ascii     "?KEY"
      000311                        659 QKEY:
      000311 90 5F            [ 1]  660         CLRW Y 
      000313 72 0B 52 30 0B   [ 2]  661         BTJF UART1_SR,#UART_SR_RXNE,INCH   ;check status
      000318 C6 52 31         [ 1]  662         LD    A,UART1_DR   ;get char in A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      00031B 1D 00 02         [ 2]  663 	SUBW	X,#2
      00031E E7 01            [ 1]  664         LD     (1,X),A
      000320 7F               [ 1]  665 	CLR	(X)
      000321 90 53            [ 2]  666         CPLW     Y
      000323                        667 INCH:
      000323 1D 00 02         [ 2]  668 	SUBW	X,#2
      000326 FF               [ 2]  669         LDW     (X),Y
      000327 81               [ 4]  670         RET
                                    671 
                                    672 ;       TX!     ( c -- )
                                    673 ;       Send character c to  output device.
      000328 03 0C                  674         .word      LINK
                           00032A   675 LINK	= .
      00032A 04                     676         .byte      4
      00032B 45 4D 49 54            677         .ascii     "EMIT"
      00032F                        678 EMIT:
      00032F E6 01            [ 1]  679         LD     A,(1,X)
      000331 1C 00 02         [ 2]  680 	ADDW	X,#2
      000334 72 0F 52 30 FB   [ 2]  681 OUTPUT: BTJF UART1_SR,#UART_SR_TXE,OUTPUT  ;loop until tdre
      000339 C7 52 31         [ 1]  682         LD    UART1_DR,A   ;send A
      00033C 81               [ 4]  683         RET
                                    684 
                                    685 ;; The kernel
                                    686 
                                    687 ;       doLIT   ( -- w )
                                    688 ;       Push an inline literal.
      00033D 03 2A                  689         .word      LINK
                           00033F   690 LINK	= 	.
      00033F 45                     691 	.byte      COMPO+5
      000340 44 4F 4C 49 54         692         .ascii     "DOLIT"
      000345                        693 DOLIT:
      000345 1D 00 02         [ 2]  694 	SUBW X,#2
                           000001   695 .if PICATOUT_MOD 
      000348 16 01            [ 2]  696         ldw y,(1,sp)
      00034A 90 FE            [ 2]  697         ldw y,(y)
      00034C FF               [ 2]  698         ldw (x),y
      00034D 90 85            [ 2]  699         popw y 
      00034F 90 EC 02         [ 2]  700         jp (2,y)
                           000000   701 .else 
                                    702         POPW Y
                                    703 	LDW YTEMP,Y
                                    704 	LDW Y,(Y)
                                    705         LDW (X),Y
                                    706         LDW Y,YTEMP
                                    707 	JP (2,Y)
                                    708 .endif 
                                    709 
                                    710 ;       next    ( -- )
                                    711 ;       Code for  single index loop.
      000352 03 3F                  712         .word      LINK
                           000354   713 LINK	= 	.
      000354 44                     714 	.byte      COMPO+4
      000355 4E 45 58 54            715         .ascii     "NEXT"
      000359                        716 DONXT:
      000359 16 03            [ 2]  717 	LDW Y,(3,SP)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      00035B 90 5A            [ 2]  718 	DECW Y
      00035D 2A 07            [ 1]  719 	JRPL NEX1 ; jump if N=0
      00035F 90 85            [ 2]  720 	POPW Y
                           000001   721 .if PICATOUT_MOD
      000361 5B 02            [ 2]  722         addw sp,#2
                           000000   723 .else        
                                    724 	POP A
                                    725 	POP A
                                    726 .endif         
      000363 90 EC 02         [ 2]  727         JP (2,Y)
      000366                        728 NEX1:
      000366 17 03            [ 2]  729         LDW (3,SP),Y
      000368 90 85            [ 2]  730         POPW Y
      00036A 90 FE            [ 2]  731 	LDW Y,(Y)
      00036C 90 FC            [ 2]  732 	JP (Y)
                                    733 
                                    734 ;       ?branch ( f -- )
                                    735 ;       Branch if flag is zero.
      00036E 03 54                  736         .word      LINK
                           000370   737 LINK	= 	.
      000370 47                     738 	.byte      COMPO+7
      000371 3F 42 52 41 4E 43 48   739         .ascii     "?BRANCH"
      000378                        740 QBRAN:	
      000378 90 93            [ 1]  741         LDW Y,X
      00037A 1C 00 02         [ 2]  742 	ADDW X,#2
      00037D 90 FE            [ 2]  743 	LDW Y,(Y)
      00037F 27 0E            [ 1]  744         JREQ     BRAN
      000381 90 85            [ 2]  745 	POPW Y
      000383 90 EC 02         [ 2]  746 	JP (2,Y)
                                    747         
                                    748 ;       branch  ( -- )
                                    749 ;       Branch to an inline address.
      000386 03 70                  750         .word      LINK
                           000388   751 LINK	= 	.
      000388 46                     752 	.byte      COMPO+6
      000389 42 52 41 4E 43 48      753         .ascii     "BRANCH"
      00038F                        754 BRAN:
      00038F 90 85            [ 2]  755         POPW Y
      000391 90 FE            [ 2]  756 	LDW Y,(Y)
      000393 90 FC            [ 2]  757         JP     (Y)
                                    758 
                                    759 ;       EXECUTE ( ca -- )
                                    760 ;       Execute  word at ca.
      000395 03 88                  761         .word      LINK
                           000397   762 LINK	= 	.
      000397 07                     763         .byte       7
      000398 45 58 45 43 55 54 45   764         .ascii     "EXECUTE"
      00039F                        765 EXECU:
      00039F 90 93            [ 1]  766         LDW Y,X
      0003A1 1C 00 02         [ 2]  767 	ADDW X,#2
      0003A4 90 FE            [ 2]  768 	LDW  Y,(Y)
      0003A6 90 FC            [ 2]  769         JP   (Y)
                                    770 
                                    771 ;       EXIT    ( -- )
                                    772 ;       Terminate a colon definition.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      0003A8 03 97                  773         .word      LINK
                           0003AA   774 LINK = .
      0003AA 04                     775         .byte      4
      0003AB 45 58 49 54            776         .ascii     "EXIT"
      0003AF                        777 EXIT:
      0003AF 90 85            [ 2]  778         POPW Y
      0003B1 81               [ 4]  779         RET
                                    780 
                                    781 ;       !       ( w a -- )
                                    782 ;       Pop  data stack to memory.
      0003B2 03 AA                  783         .word      LINK
                           0003B4   784 LINK = .
      0003B4 01                     785         .byte      1
      0003B5 21                     786         .ascii     "!"
      0003B6                        787 STORE:
      0003B6 90 93            [ 1]  788         LDW Y,X
      0003B8 90 FE            [ 2]  789         LDW Y,(Y)    ;Y=a
      0003BA 90 BF 24         [ 2]  790         LDW YTEMP,Y
      0003BD 90 93            [ 1]  791         LDW Y,X
      0003BF 90 EE 02         [ 2]  792         LDW Y,(2,Y)
      0003C2 91 CF 24         [ 5]  793         LDW [YTEMP],Y ;store w at a
      0003C5 1C 00 04         [ 2]  794         ADDW X,#4 ; DDROP 
      0003C8 81               [ 4]  795         RET     
                                    796 
                                    797 ;       @       ( a -- w )
                                    798 ;       Push memory location to stack.
      0003C9 03 B4                  799         .word      LINK
                           0003CB   800 LINK	= 	.
      0003CB 01                     801         .byte    1
      0003CC 40                     802         .ascii	"@"
      0003CD                        803 AT:
      0003CD 90 93            [ 1]  804         LDW Y,X     ;Y = a
      0003CF 90 FE            [ 2]  805         LDW Y,(Y)   ; address 
      0003D1 90 FE            [ 2]  806         LDW Y,(Y)   ; value 
      0003D3 FF               [ 2]  807         LDW (X),Y ;w = @Y
      0003D4 81               [ 4]  808         RET     
                                    809 
                                    810 ;       C!      ( c b -- )
                                    811 ;       Pop  data stack to byte memory.
      0003D5 03 CB                  812         .word      LINK
                           0003D7   813 LINK	= .
      0003D7 02                     814         .byte      2
      0003D8 43 21                  815         .ascii     "C!"
      0003DA                        816 CSTOR:
      0003DA 90 93            [ 1]  817         LDW Y,X
      0003DC 90 FE            [ 2]  818 	LDW Y,(Y)    ;Y=b
      0003DE E6 03            [ 1]  819         LD A,(3,X)    ;D = c
      0003E0 90 F7            [ 1]  820         LD  (Y),A     ;store c at b
      0003E2 1C 00 04         [ 2]  821 	ADDW X,#4 ; DDROP 
      0003E5 81               [ 4]  822         RET     
                                    823 
                                    824 ;       C@      ( b -- c )
                                    825 ;       Push byte in memory to  stack.
      0003E6 03 D7                  826         .word      LINK
                           0003E8   827 LINK	= 	.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      0003E8 02                     828         .byte      2
      0003E9 43 40                  829         .ascii     "C@"
      0003EB                        830 CAT:
      0003EB 90 93            [ 1]  831         LDW Y,X     ;Y=b
      0003ED 90 FE            [ 2]  832         LDW Y,(Y)
      0003EF 90 F6            [ 1]  833         LD A,(Y)
      0003F1 E7 01            [ 1]  834         LD (1,X),A
      0003F3 7F               [ 1]  835         CLR (X)
      0003F4 81               [ 4]  836         RET     
                                    837 
                                    838 ;       RP@     ( -- a )
                                    839 ;       Push current RP to data stack.
      0003F5 03 E8                  840         .word      LINK
                           0003F7   841 LINK	= .
      0003F7 03                     842         .byte      3
      0003F8 52 50 40               843         .ascii     "RP@"
      0003FB                        844 RPAT:
      0003FB 90 96            [ 1]  845         LDW Y,SP    ;save return addr
      0003FD 1D 00 02         [ 2]  846         SUBW X,#2
      000400 FF               [ 2]  847         LDW (X),Y
      000401 81               [ 4]  848         RET     
                                    849 
                                    850 ;       RP!     ( a -- )
                                    851 ;       Set  return stack pointer.
      000402 03 F7                  852         .word      LINK
                           000404   853 LINK	= 	. 
      000404 43                     854 	.byte      COMPO+3
      000405 52 50 21               855         .ascii     "RP!"
      000408                        856 RPSTO:
      000408 90 85            [ 2]  857         POPW Y
      00040A 90 BF 24         [ 2]  858         LDW YTEMP,Y
      00040D 90 93            [ 1]  859         LDW Y,X
      00040F 90 FE            [ 2]  860         LDW Y,(Y)
      000411 90 94            [ 1]  861         LDW SP,Y
      000413 1C 00 02         [ 2]  862         ADDW x,#CELLL ; a was not dropped, Picatout 2020-05-24
      000416 92 CC 24         [ 5]  863         JP [YTEMP]
                                    864 
                                    865 ;       R>      ( -- w )
                                    866 ;       Pop return stack to data stack.
      000419 04 04                  867         .word      LINK
                           00041B   868 LINK	= 	. 
      00041B 42                     869 	.byte      COMPO+2
      00041C 52 3E                  870         .ascii     "R>"
      00041E                        871 RFROM:
      00041E 90 85            [ 2]  872         POPW Y    ;save return addr
      000420 90 BF 24         [ 2]  873         LDW YTEMP,Y
      000423 90 85            [ 2]  874         POPW Y
      000425 1D 00 02         [ 2]  875         SUBW X,#2
      000428 FF               [ 2]  876         LDW (X),Y
      000429 92 CC 24         [ 5]  877         JP [YTEMP]
                                    878 
                                    879 ;       R@      ( -- w )
                                    880 ;       Copy top of return stack to stack.
      00042C 04 1B                  881         .word      LINK
                           00042E   882 LINK	= 	. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      00042E 02                     883         .byte      2
      00042F 52 40                  884         .ascii     "R@"
      000431                        885 RAT:
                           000001   886 .if PICATOUT_MOD
      000431 16 03            [ 2]  887         ldw y,(3,sp)
      000433 1D 00 02         [ 2]  888         subw x,#CELLL 
      000436 FF               [ 2]  889         ldw (x),y 
      000437 81               [ 4]  890         ret 
                           000000   891 .else 
                                    892         POPW Y
                                    893         LDW YTEMP,Y
                                    894         POPW Y
                                    895         PUSHW Y
                                    896         SUBW X,#2
                                    897         LDW (X),Y
                                    898         JP [YTEMP]
                                    899 .endif         
                                    900 
                                    901 ;       >R      ( w -- )
                                    902 ;       Push data stack to return stack.
      000438 04 2E                  903         .word      LINK
                           00043A   904 LINK	= 	. 
      00043A 42                     905 	.byte      COMPO+2
      00043B 3E 52                  906         .ascii     ">R"
      00043D                        907 TOR:
      00043D 90 85            [ 2]  908         POPW Y    ;save return addr
      00043F 90 BF 24         [ 2]  909         LDW YTEMP,Y
      000442 90 93            [ 1]  910         LDW Y,X
      000444 90 FE            [ 2]  911         LDW Y,(Y)
      000446 90 89            [ 2]  912         PUSHW Y    ;restore return addr
      000448 1C 00 02         [ 2]  913         ADDW X,#2
      00044B 92 CC 24         [ 5]  914         JP [YTEMP]
                                    915 
                                    916 ;       SP@     ( -- a )
                                    917 ;       Push current stack pointer.
      00044E 04 3A                  918         .word      LINK
                           000450   919 LINK	= 	. 
      000450 03                     920         .byte      3
      000451 53 50 40               921         .ascii     "SP@"
      000454                        922 SPAT:
      000454 90 93            [ 1]  923 	LDW Y,X
      000456 1D 00 02         [ 2]  924         SUBW X,#2
      000459 FF               [ 2]  925 	LDW (X),Y
      00045A 81               [ 4]  926         RET     
                                    927 
                                    928 ;       SP!     ( a -- )
                                    929 ;       Set  data stack pointer.
      00045B 04 50                  930         .word      LINK
                           00045D   931 LINK	= 	. 
      00045D 03                     932         .byte      3
      00045E 53 50 21               933         .ascii     "SP!"
      000461                        934 SPSTO:
      000461 FE               [ 2]  935         LDW     X,(X)     ;X = a
      000462 81               [ 4]  936         RET     
                                    937 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                                    938 ;       DROP    ( w -- )
                                    939 ;       Discard top stack item.
      000463 04 5D                  940         .word      LINK
                           000465   941 LINK	= 	. 
      000465 04                     942         .byte      4
      000466 44 52 4F 50            943         .ascii     "DROP"
      00046A                        944 DROP:
      00046A 1C 00 02         [ 2]  945         ADDW X,#2     
      00046D 81               [ 4]  946         RET     
                                    947 
                                    948 ;       DUP     ( w -- w w )
                                    949 ;       Duplicate  top stack item.
      00046E 04 65                  950         .word      LINK
                           000470   951 LINK	= 	. 
      000470 03                     952         .byte      3
      000471 44 55 50               953         .ascii     "DUP"
      000474                        954 DUPP:
      000474 90 93            [ 1]  955 	LDW Y,X
      000476 1D 00 02         [ 2]  956         SUBW X,#2
      000479 90 FE            [ 2]  957 	LDW Y,(Y)
      00047B FF               [ 2]  958 	LDW (X),Y
      00047C 81               [ 4]  959         RET     
                                    960 
                                    961 ;       SWAP    ( w1 w2 -- w2 w1 )
                                    962 ;       Exchange top two stack items.
      00047D 04 70                  963         .word      LINK
                           00047F   964 LINK	= 	. 
      00047F 04                     965         .byte      4
      000480 53 57 41 50            966         .ascii     "SWAP"
      000484                        967 SWAPP:
      000484 90 93            [ 1]  968         LDW Y,X
      000486 90 FE            [ 2]  969         LDW Y,(Y)
      000488 90 BF 24         [ 2]  970         LDW YTEMP,Y
      00048B 90 93            [ 1]  971         LDW Y,X
      00048D 90 EE 02         [ 2]  972         LDW Y,(2,Y)
      000490 FF               [ 2]  973         LDW (X),Y
      000491 90 BE 24         [ 2]  974         LDW Y,YTEMP
      000494 EF 02            [ 2]  975         LDW (2,X),Y
      000496 81               [ 4]  976         RET     
                                    977 
                                    978 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                    979 ;       Copy second stack item to top.
      000497 04 7F                  980         .word      LINK
                           000499   981 LINK	= . 
      000499 04                     982         .byte      4
      00049A 4F 56 45 52            983         .ascii     "OVER"
      00049E                        984 OVER:
      00049E 1D 00 02         [ 2]  985         SUBW X,#2
      0004A1 90 93            [ 1]  986         LDW Y,X
      0004A3 90 EE 04         [ 2]  987         LDW Y,(4,Y)
      0004A6 FF               [ 2]  988         LDW (X),Y
      0004A7 81               [ 4]  989         RET     
                                    990 
                                    991 ;       0<      ( n -- t )
                                    992 ;       Return true if n is negative.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      0004A8 04 99                  993         .word      LINK
                           0004AA   994 LINK	= . 
      0004AA 02                     995         .byte      2
      0004AB 30 3C                  996         .ascii     "0<"
      0004AD                        997 ZLESS:
      0004AD A6 FF            [ 1]  998         LD A,#0xFF
      0004AF 90 93            [ 1]  999         LDW Y,X
      0004B1 90 FE            [ 2] 1000         LDW Y,(Y)
      0004B3 2B 01            [ 1] 1001         JRMI     ZL1
      0004B5 4F               [ 1] 1002         CLR A   ;false
      0004B6 F7               [ 1] 1003 ZL1:    LD     (X),A
      0004B7 E7 01            [ 1] 1004         LD (1,X),A
      0004B9 81               [ 4] 1005 	RET     
                                   1006 
                                   1007 ;       AND     ( w w -- w )
                                   1008 ;       Bitwise AND.
      0004BA 04 AA                 1009         .word      LINK
                           0004BC  1010 LINK	= . 
      0004BC 03                    1011         .byte      3
      0004BD 41 4E 44              1012         .ascii     "AND"
      0004C0                       1013 ANDD:
      0004C0 F6               [ 1] 1014         LD  A,(X)    ;D=w
      0004C1 E4 02            [ 1] 1015         AND A,(2,X)
      0004C3 E7 02            [ 1] 1016         LD (2,X),A
      0004C5 E6 01            [ 1] 1017         LD A,(1,X)
      0004C7 E4 03            [ 1] 1018         AND A,(3,X)
      0004C9 E7 03            [ 1] 1019         LD (3,X),A
      0004CB 1C 00 02         [ 2] 1020         ADDW X,#2
      0004CE 81               [ 4] 1021         RET
                                   1022 
                                   1023 ;       OR      ( w w -- w )
                                   1024 ;       Bitwise inclusive OR.
      0004CF 04 BC                 1025         .word      LINK
                           0004D1  1026 LINK = . 
      0004D1 02                    1027         .byte      2
      0004D2 4F 52                 1028         .ascii     "OR"
      0004D4                       1029 ORR:
      0004D4 F6               [ 1] 1030         LD A,(X)    ;D=w
      0004D5 EA 02            [ 1] 1031         OR A,(2,X)
      0004D7 E7 02            [ 1] 1032         LD (2,X),A
      0004D9 E6 01            [ 1] 1033         LD A,(1,X)
      0004DB EA 03            [ 1] 1034         OR A,(3,X)
      0004DD E7 03            [ 1] 1035         LD (3,X),A
      0004DF 1C 00 02         [ 2] 1036         ADDW X,#2
      0004E2 81               [ 4] 1037         RET
                                   1038 
                                   1039 ;       XOR     ( w w -- w )
                                   1040 ;       Bitwise exclusive OR.
      0004E3 04 D1                 1041         .word      LINK
                           0004E5  1042 LINK	= . 
      0004E5 03                    1043         .byte      3
      0004E6 58 4F 52              1044         .ascii     "XOR"
      0004E9                       1045 XORR:
      0004E9 F6               [ 1] 1046         LD A,(X)    ;D=w
      0004EA E8 02            [ 1] 1047         XOR A,(2,X)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      0004EC E7 02            [ 1] 1048         LD (2,X),A
      0004EE E6 01            [ 1] 1049         LD A,(1,X)
      0004F0 E8 03            [ 1] 1050         XOR A,(3,X)
      0004F2 E7 03            [ 1] 1051         LD (3,X),A
      0004F4 1C 00 02         [ 2] 1052         ADDW X,#2
      0004F7 81               [ 4] 1053         RET
                                   1054 
                                   1055 ;       UM+     ( u u -- udsum )
                                   1056 ;       Add two unsigned single
                                   1057 ;       and return a double sum.
      0004F8 04 E5                 1058         .word      LINK
                           0004FA  1059 LINK	= . 
      0004FA 03                    1060         .byte      3
      0004FB 55 4D 2B              1061         .ascii     "UM+"
      0004FE                       1062 UPLUS:
      0004FE A6 01            [ 1] 1063         LD A,#1
      000500 90 93            [ 1] 1064         LDW Y,X
      000502 90 EE 02         [ 2] 1065         LDW Y,(2,Y)
      000505 90 BF 24         [ 2] 1066         LDW YTEMP,Y
      000508 90 93            [ 1] 1067         LDW Y,X
      00050A 90 FE            [ 2] 1068         LDW Y,(Y)
      00050C 72 B9 00 24      [ 2] 1069         ADDW Y,YTEMP
      000510 EF 02            [ 2] 1070         LDW (2,X),Y
      000512 25 01            [ 1] 1071         JRC     UPL1
      000514 4F               [ 1] 1072         CLR A
      000515 E7 01            [ 1] 1073 UPL1:   LD     (1,X),A
      000517 7F               [ 1] 1074         CLR (X)
      000518 81               [ 4] 1075         RET
                                   1076 
                                   1077 ;; System and user variables
                                   1078 
                                   1079 ;       doVAR   ( -- a )
                                   1080 ;       Code for VARIABLE and CREATE.
      000519 04 FA                 1081         .word      LINK
                           00051B  1082 LINK	= . 
      00051B 45                    1083 	.byte      COMPO+5
      00051C 44 4F 56 41 52        1084         .ascii     "DOVAR"
      000521                       1085 DOVAR:
      000521 1D 00 02         [ 2] 1086 	SUBW X,#2
      000524 90 85            [ 2] 1087         POPW Y    ;get return addr (pfa)
                           000001  1088 .if PICATOUT_MOD
      000526 90 FE            [ 2] 1089         LDW Y,(Y) ; indirect address 
                                   1090 .endif ;PICATOUT_MOD        
      000528 FF               [ 2] 1091         LDW (X),Y    ;push on stack
      000529 81               [ 4] 1092         RET     ;go to RET of EXEC
                                   1093 
                                   1094 ;       BASE    ( -- a )
                                   1095 ;       Radix base for numeric I/O.
      00052A 05 1B                 1096         .word      LINK        
                           00052C  1097 LINK = . 
      00052C 04                    1098         .byte      4
      00052D 42 41 53 45           1099         .ascii     "BASE"
      000531                       1100 BASE:
      000531 90 AE 00 06      [ 2] 1101 	LDW Y,#UBASE 
      000535 1D 00 02         [ 2] 1102 	SUBW X,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      000538 FF               [ 2] 1103         LDW (X),Y
      000539 81               [ 4] 1104         RET
                                   1105 
                                   1106 ;       tmp     ( -- a )
                                   1107 ;       A temporary storage.
      00053A 05 2C                 1108         .word      LINK
                                   1109         
                           00053C  1110 LINK = . 
      00053C 03                    1111 	.byte      3
      00053D 54 4D 50              1112         .ascii     "TMP"
      000540                       1113 TEMP:
      000540 90 AE 00 08      [ 2] 1114 	LDW Y,#UTMP
      000544 1D 00 02         [ 2] 1115 	SUBW X,#2
      000547 FF               [ 2] 1116         LDW (X),Y
      000548 81               [ 4] 1117         RET
                                   1118 
                                   1119 ;       >IN     ( -- a )
                                   1120 ;        Hold parsing pointer.
      000549 05 3C                 1121         .word      LINK
                           00054B  1122 LINK = . 
      00054B 03                    1123         .byte      3
      00054C 3E 49 4E              1124         .ascii    ">IN"
      00054F                       1125 INN:
      00054F 90 AE 00 0A      [ 2] 1126 	LDW Y,#UINN 
      000553 1D 00 02         [ 2] 1127 	SUBW X,#2
      000556 FF               [ 2] 1128         LDW (X),Y
      000557 81               [ 4] 1129         RET
                                   1130 
                                   1131 ;       #TIB    ( -- a )
                                   1132 ;       Count in terminal input buffer.
      000558 05 4B                 1133         .word      LINK
                           00055A  1134 LINK = . 
      00055A 04                    1135         .byte      4
      00055B 23 54 49 42           1136         .ascii     "#TIB"
      00055F                       1137 NTIB:
      00055F 90 AE 00 0C      [ 2] 1138 	LDW Y,#UCTIB 
      000563 1D 00 02         [ 2] 1139 	SUBW X,#2
      000566 FF               [ 2] 1140         LDW (X),Y
      000567 81               [ 4] 1141         RET
                                   1142 
                           000001  1143 .if PICATOUT_MOD
                                   1144 ;       TBUF ( -- a )
                                   1145 ;       address of 128 bytes transaction buffer 
      000568 05 5A                 1146         .word LINK 
                           00056A  1147         LINK=.
      00056A 04                    1148         .byte 4 
      00056B 54 42 55 46           1149         .ascii "TBUF"
      00056F                       1150 TBUF:
      00056F 90 AE 16 80      [ 2] 1151         ldw y,#ROWBUFF
      000573 1D 00 02         [ 2] 1152         subw x,#CELLL
      000576 FF               [ 2] 1153         ldw (x),y 
      000577 81               [ 4] 1154         ret 
                                   1155 
                                   1156 ; systeme variable 
                                   1157 ; compilation destination 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                                   1158 ; TFLASH ( -- A )
      000578 05 6A                 1159         .word LINK 
                           00057A  1160         LINK=.
      00057A 06                    1161         .byte 6 
      00057B 54 46 4C 41 53 48     1162         .ascii "TFLASH"         
      000581                       1163 TFLASH:
      000581 1D 00 02         [ 2] 1164         subw x,#CELLL 
      000584 90 AE 00 1E      [ 2] 1165         ldw y,#UTFLASH
      000588 FF               [ 2] 1166         ldw (x),y 
      000589 81               [ 4] 1167         ret 
                                   1168 
                                   1169 .endif ;PICATOUT_MOD
                                   1170 
                                   1171 ;       "EVAL   ( -- a )
                                   1172 ;       Execution vector of EVAL.
      00058A 05 7A                 1173         .word      LINK
                           00058C  1174 LINK = . 
      00058C 05                    1175         .byte      5
      00058D 27 45 56 41 4C        1176         .ascii     "'EVAL"
      000592                       1177 TEVAL:
      000592 90 AE 00 10      [ 2] 1178 	LDW Y,#UINTER 
      000596 1D 00 02         [ 2] 1179 	SUBW X,#2
      000599 FF               [ 2] 1180         LDW (X),Y
      00059A 81               [ 4] 1181         RET
                                   1182 
                                   1183 ;       HLD     ( -- a )
                                   1184 ;       Hold a pointer of output string.
      00059B 05 8C                 1185         .word      LINK
                           00059D  1186 LINK = . 
      00059D 03                    1187         .byte      3
      00059E 48 4C 44              1188         .ascii     "HLD"
      0005A1                       1189 HLD:
      0005A1 90 AE 00 12      [ 2] 1190 	LDW Y,#UHLD 
      0005A5 1D 00 02         [ 2] 1191 	SUBW X,#2
      0005A8 FF               [ 2] 1192         LDW (X),Y
      0005A9 81               [ 4] 1193         RET
                                   1194 
                                   1195 ;       CONTEXT ( -- a )
                                   1196 ;       Start vocabulary search.
      0005AA 05 9D                 1197         .word      LINK
                           0005AC  1198 LINK = . 
      0005AC 07                    1199         .byte      7
      0005AD 43 4F 4E 54 45 58 54  1200         .ascii     "CONTEXT"
      0005B4                       1201 CNTXT:
      0005B4 90 AE 00 14      [ 2] 1202 	LDW Y,#UCNTXT
      0005B8 1D 00 02         [ 2] 1203 	SUBW X,#2
      0005BB FF               [ 2] 1204         LDW (X),Y
      0005BC 81               [ 4] 1205         RET
                                   1206 
                                   1207 ;       VP      ( -- a )
                                   1208 ;       Point to top of variables
      0005BD 05 AC                 1209         .word      LINK
                           0005BF  1210 LINK = . 
      0005BF 02                    1211         .byte      2
      0005C0 56 50                 1212         .ascii     "VP"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      0005C2                       1213 VPP:
      0005C2 90 AE 00 16      [ 2] 1214 	LDW Y,#UVP 
      0005C6 1D 00 02         [ 2] 1215 	SUBW X,#2
      0005C9 FF               [ 2] 1216         LDW (X),Y
      0005CA 81               [ 4] 1217         RET
                                   1218 
                           000001  1219 .if PICATOUT_MOD
                                   1220 ;       CP    ( -- a )
                                   1221 ;       Pointer to top of FLASH 
      0005CB 05 BF                 1222         .word LINK 
                           0005CD  1223         LINK=.
      0005CD 02                    1224         .byte 2 
      0005CE 43 50                 1225         .ascii "CP"
      0005D0                       1226 CPP: 
      0005D0 90 AE 00 18      [ 2] 1227         ldw y,#UCP 
      0005D4 1D 00 02         [ 2] 1228         subw x,#CELLL 
      0005D7 FF               [ 2] 1229         ldw (x),y 
      0005D8 81               [ 4] 1230         ret                
                                   1231 .endif ;PICATOUT_MOD
                                   1232 
                                   1233 ;       LAST    ( -- a )
                                   1234 ;       Point to last name in dictionary.
      0005D9 05 CD                 1235         .word      LINK
                           0005DB  1236 LINK = . 
      0005DB 04                    1237         .byte      4
      0005DC 4C 41 53 54           1238         .ascii     "LAST"
      0005E0                       1239 LAST:
      0005E0 90 AE 00 1A      [ 2] 1240 	LDW Y,#ULAST 
      0005E4 1D 00 02         [ 2] 1241 	SUBW X,#2
      0005E7 FF               [ 2] 1242         LDW (X),Y
      0005E8 81               [ 4] 1243         RET
                                   1244 
                           000001  1245 .if PICATOUT_MOD 
                                   1246 ; address of system variable URLAST 
                                   1247 ;       RAMLAST ( -- a )
                                   1248 ; RAM dictionary context 
      0005E9 05 DB                 1249         .word LINK 
                           0005EB  1250         LINK=. 
      0005EB 07                    1251         .byte 7  
      0005EC 52 41 4D 4C 41 53 54  1252         .ascii "RAMLAST" 
      0005F3                       1253 RAMLAST: 
      0005F3 90 AE 00 20      [ 2] 1254         ldw y,#URLAST 
      0005F7 1D 00 02         [ 2] 1255         subw x,#CELLL 
      0005FA FF               [ 2] 1256         ldw (x),y 
      0005FB 81               [ 4] 1257         ret 
                                   1258 .endif ;PICATOUT_MOD
                                   1259 
                           000001  1260 .if PICATOUT_MOD
                                   1261 ; OFFSET ( -- a )
                                   1262 ; address of system variable OFFSET 
      0005FC 05 EB                 1263         .word LINK 
                           0005FE  1264         LINK=.
      0005FE 06                    1265         .byte 6
      0005FF 4F 46 46 53 45 54     1266         .ascii "OFFSET" 
      000605                       1267 OFFSET: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      000605 1D 00 02         [ 2] 1268         subw x,#CELLL
      000608 90 AE 00 1C      [ 2] 1269         ldw y,#UOFFSET 
      00060C FF               [ 2] 1270         ldw (x),y 
      00060D 81               [ 4] 1271         ret 
                                   1272 
                                   1273 ; adjust jump address adding OFFSET
                                   1274 ; ADR-ADJ ( a -- a+offset )
      00060E                       1275 ADRADJ: 
      00060E CD 06 05         [ 4] 1276         call OFFSET 
      000611 CD 03 CD         [ 4] 1277         call AT 
      000614 CC 06 6F         [ 2] 1278         jp PLUS 
                                   1279 
                                   1280 .endif ; PICATOUT_MOD
                                   1281 
                                   1282 ;; Common functions
                                   1283 
                                   1284 ;       ?DUP    ( w -- w w | 0 )
                                   1285 ;       Dup tos if its is not zero.
      000617 05 FE                 1286         .word      LINK
                           000619  1287 LINK = . 
      000619 04                    1288         .byte      4
      00061A 3F 44 55 50           1289         .ascii     "?DUP"
      00061E                       1290 QDUP:
      00061E 90 93            [ 1] 1291         LDW Y,X
      000620 90 FE            [ 2] 1292 	LDW Y,(Y)
      000622 27 04            [ 1] 1293         JREQ     QDUP1
      000624 1D 00 02         [ 2] 1294 	SUBW X,#2
      000627 FF               [ 2] 1295         LDW (X),Y
      000628 81               [ 4] 1296 QDUP1:  RET
                                   1297 
                                   1298 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1299 ;       Rot 3rd item to top.
      000629 06 19                 1300         .word      LINK
                           00062B  1301 LINK = . 
      00062B 03                    1302         .byte      3
      00062C 52 4F 54              1303         .ascii     "ROT"
      00062F                       1304 ROT:
                           000001  1305 .if PICATOUT_MOD
      00062F 90 93            [ 1] 1306         ldw y,x 
      000631 90 FE            [ 2] 1307         ldw y,(y)
      000633 90 89            [ 2] 1308         pushw y 
      000635 90 93            [ 1] 1309         ldw y,x 
      000637 90 EE 04         [ 2] 1310         ldw y,(4,y)
      00063A FF               [ 2] 1311         ldw (x),y 
      00063B 90 93            [ 1] 1312         ldw y,x 
      00063D 90 EE 02         [ 2] 1313         ldw y,(2,y)
      000640 EF 04            [ 2] 1314         ldw (4,x),y 
      000642 90 85            [ 2] 1315         popw y 
      000644 EF 02            [ 2] 1316         ldw (2,x),y
      000646 81               [ 4] 1317         ret 
                           000000  1318 .else 
                                   1319         LDW Y,X
                                   1320 	LDW Y,(4,Y)
                                   1321 	LDW YTEMP,Y
                                   1322         LDW Y,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1323         LDW Y,(2,Y)
                                   1324         LDW XTEMP,Y
                                   1325         LDW Y,X
                                   1326         LDW Y,(Y)
                                   1327         LDW (2,X),Y
                                   1328         LDW Y,XTEMP
                                   1329         LDW (4,X),Y
                                   1330         LDW Y,YTEMP
                                   1331         LDW (X),Y
                                   1332         RET
                                   1333 .endif 
                                   1334 
                                   1335 ;       2DROP   ( w w -- )
                                   1336 ;       Discard two items on stack.
      000647 06 2B                 1337         .word      LINK
                           000649  1338 LINK = . 
      000649 05                    1339         .byte      5
      00064A 32 44 52 4F 50        1340         .ascii     "2DROP"
      00064F                       1341 DDROP:
      00064F 1C 00 04         [ 2] 1342         ADDW X,#4
      000652 81               [ 4] 1343         RET
                                   1344 
                                   1345 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1346 ;       Duplicate top two items.
      000653 06 49                 1347         .word      LINK
                           000655  1348 LINK = . 
      000655 04                    1349         .byte      4
      000656 32 44 55 50           1350         .ascii     "2DUP"
      00065A                       1351 DDUP:
      00065A 1D 00 04         [ 2] 1352         SUBW X,#4
      00065D 90 93            [ 1] 1353         LDW Y,X
      00065F 90 EE 06         [ 2] 1354         LDW Y,(6,Y)
      000662 EF 02            [ 2] 1355         LDW (2,X),Y
      000664 90 93            [ 1] 1356         LDW Y,X
      000666 90 EE 04         [ 2] 1357         LDW Y,(4,Y)
      000669 FF               [ 2] 1358         LDW (X),Y
      00066A 81               [ 4] 1359         RET
                                   1360 
                                   1361 ;       +       ( w w -- sum )
                                   1362 ;       Add top two items.
      00066B 06 55                 1363         .word      LINK
                           00066D  1364 LINK = . 
      00066D 01                    1365         .byte      1
      00066E 2B                    1366         .ascii     "+"
      00066F                       1367 PLUS:
      00066F 90 93            [ 1] 1368         LDW Y,X
      000671 90 FE            [ 2] 1369         LDW Y,(Y)
      000673 90 BF 24         [ 2] 1370         LDW YTEMP,Y
      000676 1C 00 02         [ 2] 1371         ADDW X,#2
      000679 90 93            [ 1] 1372         LDW Y,X
      00067B 90 FE            [ 2] 1373         LDW Y,(Y)
      00067D 72 B9 00 24      [ 2] 1374         ADDW Y,YTEMP
      000681 FF               [ 2] 1375         LDW (X),Y
      000682 81               [ 4] 1376         RET
                                   1377 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                   1378 ;       NOT     ( w -- w )
                                   1379 ;       One's complement of tos.
      000683 06 6D                 1380         .word      LINK
                           000685  1381 LINK = . 
      000685 03                    1382         .byte      3
      000686 4E 4F 54              1383         .ascii     "NOT"
      000689                       1384 INVER:
      000689 90 93            [ 1] 1385         LDW Y,X
      00068B 90 FE            [ 2] 1386         LDW Y,(Y)
      00068D 90 53            [ 2] 1387         CPLW Y
      00068F FF               [ 2] 1388         LDW (X),Y
      000690 81               [ 4] 1389         RET
                                   1390 
                                   1391 ;       NEGATE  ( n -- -n )
                                   1392 ;       Two's complement of tos.
      000691 06 85                 1393         .word      LINK
                           000693  1394 LINK = . 
      000693 06                    1395         .byte      6
      000694 4E 45 47 41 54 45     1396         .ascii     "NEGATE"
      00069A                       1397 NEGAT:
      00069A 90 93            [ 1] 1398         LDW Y,X
      00069C 90 FE            [ 2] 1399         LDW Y,(Y)
      00069E 90 50            [ 2] 1400         NEGW Y
      0006A0 FF               [ 2] 1401         LDW (X),Y
      0006A1 81               [ 4] 1402         RET
                                   1403 
                                   1404 ;       DNEGATE ( d -- -d )
                                   1405 ;       Two's complement of top double.
      0006A2 06 93                 1406         .word      LINK
                           0006A4  1407 LINK = . 
      0006A4 07                    1408         .byte      7
      0006A5 44 4E 45 47 41 54 45  1409         .ascii     "DNEGATE"
      0006AC                       1410 DNEGA:
      0006AC 90 93            [ 1] 1411         LDW Y,X
      0006AE 90 FE            [ 2] 1412 	LDW Y,(Y)
      0006B0 90 53            [ 2] 1413         CPLW Y     
      0006B2 90 BF 24         [ 2] 1414 	LDW YTEMP,Y
      0006B5 90 93            [ 1] 1415         LDW Y,X
      0006B7 90 EE 02         [ 2] 1416         LDW Y,(2,Y)
      0006BA 90 53            [ 2] 1417         CPLW Y
      0006BC 90 5C            [ 2] 1418         INCW Y
      0006BE EF 02            [ 2] 1419         LDW (2,X),Y
      0006C0 90 BE 24         [ 2] 1420         LDW Y,YTEMP
      0006C3 24 02            [ 1] 1421         JRNC DN1 
      0006C5 90 5C            [ 2] 1422         INCW Y
      0006C7 FF               [ 2] 1423 DN1:    LDW (X),Y
      0006C8 81               [ 4] 1424         RET
                                   1425 
                                   1426 ;       -       ( n1 n2 -- n1-n2 )
                                   1427 ;       Subtraction.
      0006C9 06 A4                 1428         .word      LINK
                           0006CB  1429 LINK = . 
      0006CB 01                    1430         .byte      1
      0006CC 2D                    1431         .ascii     "-"
      0006CD                       1432 SUBB:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      0006CD 90 93            [ 1] 1433         LDW Y,X
      0006CF 90 FE            [ 2] 1434         LDW Y,(Y)
      0006D1 90 BF 24         [ 2] 1435         LDW YTEMP,Y
      0006D4 1C 00 02         [ 2] 1436         ADDW X,#2
      0006D7 90 93            [ 1] 1437         LDW Y,X
      0006D9 90 FE            [ 2] 1438         LDW Y,(Y)
      0006DB 72 B2 00 24      [ 2] 1439         SUBW Y,YTEMP
      0006DF FF               [ 2] 1440         LDW (X),Y
      0006E0 81               [ 4] 1441         RET
                                   1442 
                                   1443 ;       ABS     ( n -- n )
                                   1444 ;       Return  absolute value of n.
      0006E1 06 CB                 1445         .word      LINK
                           0006E3  1446 LINK = . 
      0006E3 03                    1447         .byte      3
      0006E4 41 42 53              1448         .ascii     "ABS"
      0006E7                       1449 ABSS:
      0006E7 90 93            [ 1] 1450         LDW Y,X
      0006E9 90 FE            [ 2] 1451 	LDW Y,(Y)
      0006EB 2A 03            [ 1] 1452         JRPL     AB1     ;negate:
      0006ED 90 50            [ 2] 1453         NEGW     Y     ;else negate hi byte
      0006EF FF               [ 2] 1454         LDW (X),Y
      0006F0 81               [ 4] 1455 AB1:    RET
                                   1456 
                                   1457 ;       =       ( w w -- t )
                                   1458 ;       Return true if top two are =al.
      0006F1 06 E3                 1459         .word      LINK
                           0006F3  1460 LINK = . 
      0006F3 01                    1461         .byte      1
      0006F4 3D                    1462         .ascii     "="
      0006F5                       1463 EQUAL:
      0006F5 A6 FF            [ 1] 1464         LD A,#0xFF  ;true
      0006F7 90 93            [ 1] 1465         LDW Y,X    ;D = n2
      0006F9 90 FE            [ 2] 1466         LDW Y,(Y)
      0006FB 90 BF 24         [ 2] 1467         LDW YTEMP,Y
      0006FE 1C 00 02         [ 2] 1468         ADDW X,#2
      000701 90 93            [ 1] 1469         LDW Y,X
      000703 90 FE            [ 2] 1470         LDW Y,(Y)
      000705 90 B3 24         [ 2] 1471         CPW Y,YTEMP     ;if n2 <> n1
      000708 27 01            [ 1] 1472         JREQ     EQ1
      00070A 4F               [ 1] 1473         CLR A
      00070B F7               [ 1] 1474 EQ1:    LD (X),A
      00070C E7 01            [ 1] 1475         LD (1,X),A
      00070E 81               [ 4] 1476 	RET     
                                   1477 
                                   1478 ;       U<      ( u u -- t )
                                   1479 ;       Unsigned compare of top two items.
      00070F 06 F3                 1480         .word      LINK
                           000711  1481 LINK = . 
      000711 02                    1482         .byte      2
      000712 55 3C                 1483         .ascii     "U<"
      000714                       1484 ULESS:
      000714 A6 FF            [ 1] 1485         LD A,#0xFF  ;true
      000716 90 93            [ 1] 1486         LDW Y,X    ;D = n2
      000718 90 FE            [ 2] 1487         LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      00071A 90 BF 24         [ 2] 1488         LDW YTEMP,Y
      00071D 1C 00 02         [ 2] 1489         ADDW X,#2
      000720 90 93            [ 1] 1490         LDW Y,X
      000722 90 FE            [ 2] 1491         LDW Y,(Y)
      000724 90 B3 24         [ 2] 1492         CPW Y,YTEMP     ;if n2 <> n1
      000727 25 01            [ 1] 1493         JRULT     ULES1
      000729 4F               [ 1] 1494         CLR A
      00072A F7               [ 1] 1495 ULES1:  LD (X),A
      00072B E7 01            [ 1] 1496         LD (1,X),A
      00072D 81               [ 4] 1497 	RET     
                                   1498 
                                   1499 ;       <       ( n1 n2 -- t )
                                   1500 ;       Signed compare of top two items.
      00072E 07 11                 1501         .word      LINK
                           000730  1502 LINK = . 
      000730 01                    1503         .byte      1
      000731 3C                    1504         .ascii     "<"
      000732                       1505 LESS:
      000732 A6 FF            [ 1] 1506         LD A,#0xFF  ;true
      000734 90 93            [ 1] 1507         LDW Y,X    ;D = n2
      000736 90 FE            [ 2] 1508         LDW Y,(Y)
      000738 90 BF 24         [ 2] 1509         LDW YTEMP,Y
      00073B 1C 00 02         [ 2] 1510         ADDW X,#2
      00073E 90 93            [ 1] 1511         LDW Y,X
      000740 90 FE            [ 2] 1512         LDW Y,(Y)
      000742 90 B3 24         [ 2] 1513         CPW Y,YTEMP     ;if n2 <> n1
      000745 2F 01            [ 1] 1514         JRSLT     LT1
      000747 4F               [ 1] 1515         CLR A
      000748 F7               [ 1] 1516 LT1:    LD (X),A
      000749 E7 01            [ 1] 1517         LD (1,X),A
      00074B 81               [ 4] 1518 	RET     
                                   1519 
                                   1520 ;       MAX     ( n n -- n )
                                   1521 ;       Return greater of two top items.
      00074C 07 30                 1522         .word      LINK
                           00074E  1523 LINK = . 
      00074E 03                    1524         .byte      3
      00074F 4D 41 58              1525         .ascii     "MAX"
      000752                       1526 MAX:
      000752 90 93            [ 1] 1527         LDW Y,X    ;D = n2
      000754 90 EE 02         [ 2] 1528         LDW Y,(2,Y)
      000757 90 BF 24         [ 2] 1529         LDW YTEMP,Y
      00075A 90 93            [ 1] 1530         LDW Y,X
      00075C 90 FE            [ 2] 1531         LDW Y,(Y)
      00075E 90 B3 24         [ 2] 1532         CPW Y,YTEMP     ;if n2 <> n1
      000761 2F 02            [ 1] 1533         JRSLT     MAX1
      000763 EF 02            [ 2] 1534         LDW (2,X),Y
      000765 1C 00 02         [ 2] 1535 MAX1:   ADDW X,#2
      000768 81               [ 4] 1536 	RET     
                                   1537 
                                   1538 ;       MIN     ( n n -- n )
                                   1539 ;       Return smaller of top two items.
      000769 07 4E                 1540         .word      LINK
                           00076B  1541 LINK = . 
      00076B 03                    1542         .byte      3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      00076C 4D 49 4E              1543         .ascii     "MIN"
      00076F                       1544 MIN:
      00076F 90 93            [ 1] 1545         LDW Y,X    ;D = n2
      000771 90 EE 02         [ 2] 1546         LDW Y,(2,Y)
      000774 90 BF 24         [ 2] 1547         LDW YTEMP,Y
      000777 90 93            [ 1] 1548         LDW Y,X
      000779 90 FE            [ 2] 1549         LDW Y,(Y)
      00077B 90 B3 24         [ 2] 1550         CPW Y,YTEMP     ;if n2 <> n1
      00077E 2C 02            [ 1] 1551         JRSGT     MIN1
      000780 EF 02            [ 2] 1552         LDW (2,X),Y
      000782 1C 00 02         [ 2] 1553 MIN1:	ADDW X,#2
      000785 81               [ 4] 1554 	RET     
                                   1555 
                                   1556 ;       WITHIN  ( u ul uh -- t )
                                   1557 ;       Return true if u is within
                                   1558 ;       range of ul and uh. ( ul <= u < uh )
      000786 07 6B                 1559         .word      LINK
                           000788  1560 LINK = . 
      000788 06                    1561         .byte      6
      000789 57 49 54 48 49 4E     1562         .ascii     "WITHIN"
      00078F                       1563 WITHI:
      00078F CD 04 9E         [ 4] 1564         CALL     OVER
      000792 CD 06 CD         [ 4] 1565         CALL     SUBB
      000795 CD 04 3D         [ 4] 1566         CALL     TOR
      000798 CD 06 CD         [ 4] 1567         CALL     SUBB
      00079B CD 04 1E         [ 4] 1568         CALL     RFROM
      00079E CC 07 14         [ 2] 1569         JP     ULESS
                                   1570 
                                   1571 ;; Divide
                                   1572 
                                   1573 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1574 ;       Unsigned divide of a double by a
                                   1575 ;       single. Return mod and quotient.
      0007A1 07 88                 1576         .word      LINK
                           0007A3  1577 LINK = . 
      0007A3 06                    1578         .byte      6
      0007A4 55 4D 2F 4D 4F 44     1579         .ascii     "UM/MOD"
      0007AA                       1580 UMMOD:
      0007AA BF 22            [ 2] 1581 	LDW XTEMP,X	; save stack pointer
      0007AC FE               [ 2] 1582 	LDW X,(X)	; un
      0007AD BF 24            [ 2] 1583 	LDW YTEMP,X     ; save un
      0007AF 90 BE 22         [ 2] 1584 	LDW Y,XTEMP	; stack pointer
      0007B2 90 EE 04         [ 2] 1585 	LDW Y,(4,Y)     ; Y=udl
      0007B5 BE 22            [ 2] 1586 	LDW X,XTEMP
      0007B7 EE 02            [ 2] 1587 	LDW X,(2,X)	; X=udh
      0007B9 B3 24            [ 2] 1588 	CPW X,YTEMP
      0007BB 23 0F            [ 2] 1589 	JRULE MMSM1
      0007BD BE 22            [ 2] 1590 	LDW X,XTEMP
      0007BF 1C 00 02         [ 2] 1591 	ADDW X,#2	; pop off 1 level
      0007C2 90 AE FF FF      [ 2] 1592 	LDW Y,#0xFFFF
      0007C6 FF               [ 2] 1593 	LDW (X),Y
      0007C7 90 5F            [ 1] 1594 	CLRW Y
      0007C9 EF 02            [ 2] 1595 	LDW (2,X),Y
      0007CB 81               [ 4] 1596 	RET
      0007CC                       1597 MMSM1:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                           000001  1598 .if PICATOUT_MOD 
                                   1599 ; take advantage of divw x,y when udh==0
      0007CC 5D               [ 2] 1600         tnzw x  ; is udh==0?
      0007CD 26 11            [ 1] 1601         jrne MMSM2 
      0007CF 93               [ 1] 1602         ldw x,y    ;udl 
      0007D0 90 BE 24         [ 2] 1603         ldw y,YTEMP ; divisor 
      0007D3 65               [ 2] 1604         divw x,y 
      0007D4 89               [ 2] 1605         pushw x     ; quotient 
      0007D5 BE 22            [ 2] 1606         ldw x,XTEMP 
      0007D7 1C 00 02         [ 2] 1607         addw x,#CELLL 
      0007DA EF 02            [ 2] 1608         ldw (2,x),y  ; ur
      0007DC 90 85            [ 2] 1609         popw y 
      0007DE FF               [ 2] 1610         ldw (x),y ; uq 
      0007DF 81               [ 4] 1611         ret 
      0007E0                       1612 MMSM2:        
                                   1613 .endif 
      0007E0 A6 11            [ 1] 1614 	LD A,#17	; loop count
      0007E2                       1615 MMSM3:
      0007E2 B3 24            [ 2] 1616 	CPW X,YTEMP	; compare udh to un
      0007E4 25 04            [ 1] 1617 	JRULT MMSM4	; can't subtract
      0007E6 72 B0 00 24      [ 2] 1618 	SUBW X,YTEMP	; can subtract
      0007EA                       1619 MMSM4:
      0007EA 8C               [ 1] 1620 	CCF	; quotient bit
      0007EB 90 59            [ 2] 1621 	RLCW Y	; rotate into quotient
      0007ED 59               [ 2] 1622 	RLCW X	; rotate into remainder
      0007EE 4A               [ 1] 1623 	DEC A	; repeat
      0007EF 22 F1            [ 1] 1624 	JRUGT MMSM3
                                   1625 	;SRAW X
      0007F1 56               [ 2] 1626         RRCW X 
      0007F2 BF 24            [ 2] 1627 	LDW YTEMP,X	; done, save remainder
      0007F4 BE 22            [ 2] 1628 	LDW X,XTEMP
      0007F6 1C 00 02         [ 2] 1629 	ADDW X,#2	; drop
      0007F9 FF               [ 2] 1630 	LDW (X),Y
      0007FA 90 BE 24         [ 2] 1631 	LDW Y,YTEMP	; save quotient
      0007FD EF 02            [ 2] 1632 	LDW (2,X),Y
      0007FF 81               [ 4] 1633 	RET
                                   1634 	
                                   1635 ;       M/MOD   ( d n -- r q )
                                   1636 ;       Signed floored divide of double by
                                   1637 ;       single. Return mod and quotient.
      000800 07 A3                 1638         .word      LINK
                           000802  1639 LINK = . 
      000802 05                    1640         .byte      5
      000803 4D 2F 4D 4F 44        1641         .ascii     "M/MOD"
      000808                       1642 MSMOD:  
      000808 CD 04 74         [ 4] 1643         CALL	DUPP
      00080B CD 04 AD         [ 4] 1644         CALL	ZLESS
      00080E CD 04 74         [ 4] 1645         CALL	DUPP
      000811 CD 04 3D         [ 4] 1646         CALL	TOR
      000814 CD 03 78         [ 4] 1647         CALL	QBRAN
      000817 08 25                 1648         .word	MMOD1
      000819 CD 06 9A         [ 4] 1649         CALL	NEGAT
      00081C CD 04 3D         [ 4] 1650         CALL	TOR
      00081F CD 06 AC         [ 4] 1651         CALL	DNEGA
      000822 CD 04 1E         [ 4] 1652         CALL	RFROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      000825 CD 04 3D         [ 4] 1653 MMOD1:	CALL	TOR
      000828 CD 04 74         [ 4] 1654         CALL	DUPP
      00082B CD 04 AD         [ 4] 1655         CALL	ZLESS
      00082E CD 03 78         [ 4] 1656         CALL	QBRAN
      000831 08 39                 1657         .word	MMOD2
      000833 CD 04 31         [ 4] 1658         CALL	RAT
      000836 CD 06 6F         [ 4] 1659         CALL	PLUS
      000839 CD 04 1E         [ 4] 1660 MMOD2:	CALL	RFROM
      00083C CD 07 AA         [ 4] 1661         CALL	UMMOD
      00083F CD 04 1E         [ 4] 1662         CALL	RFROM
      000842 CD 03 78         [ 4] 1663         CALL	QBRAN
      000845 08 50                 1664         .word	MMOD3
      000847 CD 04 84         [ 4] 1665         CALL	SWAPP
      00084A CD 06 9A         [ 4] 1666         CALL	NEGAT
      00084D CD 04 84         [ 4] 1667         CALL	SWAPP
      000850 81               [ 4] 1668 MMOD3:	RET
                                   1669 
                                   1670 ;       /MOD    ( n n -- r q )
                                   1671 ;       Signed divide. Return mod and quotient.
      000851 08 02                 1672         .word      LINK
                           000853  1673 LINK = . 
      000853 04                    1674         .byte      4
      000854 2F 4D 4F 44           1675         .ascii     "/MOD"
      000858                       1676 SLMOD:
      000858 CD 04 9E         [ 4] 1677         CALL	OVER
      00085B CD 04 AD         [ 4] 1678         CALL	ZLESS
      00085E CD 04 84         [ 4] 1679         CALL	SWAPP
      000861 CC 08 08         [ 2] 1680         JP	MSMOD
                                   1681 
                                   1682 ;       MOD     ( n n -- r )
                                   1683 ;       Signed divide. Return mod only.
      000864 08 53                 1684         .word      LINK
                           000866  1685 LINK = . 
      000866 03                    1686         .byte      3
      000867 4D 4F 44              1687         .ascii     "MOD"
      00086A                       1688 MODD:
      00086A CD 08 58         [ 4] 1689 	CALL	SLMOD
      00086D CC 04 6A         [ 2] 1690 	JP	DROP
                                   1691 
                                   1692 ;       /       ( n n -- q )
                                   1693 ;       Signed divide. Return quotient only.
      000870 08 66                 1694         .word      LINK
                           000872  1695 LINK = . 
      000872 01                    1696         .byte      1
      000873 2F                    1697         .ascii     "/"
      000874                       1698 SLASH:
      000874 CD 08 58         [ 4] 1699         CALL	SLMOD
      000877 CD 04 84         [ 4] 1700         CALL	SWAPP
      00087A CC 04 6A         [ 2] 1701         JP	DROP
                                   1702 
                                   1703 ;; Multiply
                                   1704 
                                   1705 ;       UM*     ( u u -- ud )
                                   1706 ;       Unsigned multiply. Return double product.
      00087D 08 72                 1707         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                           00087F  1708 LINK = . 
      00087F 03                    1709         .byte      3
      000880 55 4D 2A              1710         .ascii     "UM*"
      000883                       1711 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
                           000001  1712 .if  PICATOUT_MOD 
                                   1713 ; take advantage of SP addressing modes
                                   1714 ; these PRODx in RAM are not required
                                   1715 ; the product is kept on stack as local variable 
                                   1716         ;; bytes offset on data stack 
                           000002  1717         da=2 
                           000003  1718         db=3 
                           000000  1719         dc=0 
                           000001  1720         dd=1 
                                   1721         ;; product bytes offset on return stack 
                           000001  1722         UD1=1  ; ud bits 31..24
                           000002  1723         UD2=2  ; ud bits 23..16
                           000003  1724         UD3=3  ; ud bits 15..8 
                           000004  1725         UD4=4  ; ud bits 7..0 
                                   1726         ;; local variable for product set to zero   
      000883 90 5F            [ 1] 1727         clrw y 
      000885 90 89            [ 2] 1728         pushw y  ; bits 15..0
      000887 90 89            [ 2] 1729         pushw y  ; bits 31..16 
      000889 E6 03            [ 1] 1730         ld a,(db,x) ; b 
      00088B 90 97            [ 1] 1731         ld yl,a 
      00088D E6 01            [ 1] 1732         ld a,(dd,x)   ; d
      00088F 90 42            [ 4] 1733         mul y,a    ; b*d  
      000891 17 03            [ 2] 1734         ldw (UD3,sp),y ; lowest weight product 
      000893 E6 03            [ 1] 1735         ld a,(db,x)
      000895 90 97            [ 1] 1736         ld yl,a 
      000897 E6 00            [ 1] 1737         ld a,(dc,x)
      000899 90 42            [ 4] 1738         mul y,a  ; b*c 
                                   1739         ;;; do the partial sum 
      00089B 72 F9 02         [ 2] 1740         addw y,(UD2,sp)
      00089E 4F               [ 1] 1741         clr a 
      00089F 49               [ 1] 1742         rlc a
      0008A0 6B 01            [ 1] 1743         ld (UD1,sp),a 
      0008A2 17 02            [ 2] 1744         ldw (UD2,sp),y 
      0008A4 E6 02            [ 1] 1745         ld a,(da,x)
      0008A6 90 97            [ 1] 1746         ld yl,a 
      0008A8 E6 01            [ 1] 1747         ld a,(dd,x)
      0008AA 90 42            [ 4] 1748         mul y,a   ; a*d 
                                   1749         ;; do partial sum 
      0008AC 72 F9 02         [ 2] 1750         addw y,(UD2,sp)
      0008AF 4F               [ 1] 1751         clr a 
      0008B0 19 01            [ 1] 1752         adc a,(UD1,sp)
      0008B2 6B 01            [ 1] 1753         ld (UD1,sp),a  
      0008B4 17 02            [ 2] 1754         ldw (UD2,sp),y 
      0008B6 E6 02            [ 1] 1755         ld a,(da,x)
      0008B8 90 97            [ 1] 1756         ld yl,a 
      0008BA E6 00            [ 1] 1757         ld a,(dc,x)
      0008BC 90 42            [ 4] 1758         mul y,a  ;  a*c highest weight product 
                                   1759         ;;; do partial sum 
      0008BE 72 F9 01         [ 2] 1760         addw y,(UD1,sp)
      0008C1 FF               [ 2] 1761         ldw (x),y  ; udh 
      0008C2 16 03            [ 2] 1762         ldw y,(UD3,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      0008C4 EF 02            [ 2] 1763         ldw (2,x),y  ; udl  
      0008C6 5B 04            [ 2] 1764         addw sp,#4 ; drop local variable 
      0008C8 81               [ 4] 1765         ret  
                           000000  1766 .else
                                   1767 	LD A,(2,X)	; b
                                   1768 	LD YL,A
                                   1769 	LD A,(X)	; d
                                   1770 	MUL Y,A
                                   1771 	LDW PROD1,Y
                                   1772 	LD A,(3,X)	; a
                                   1773 	LD YL,A
                                   1774 	LD A,(X)	; d
                                   1775 	MUL Y,A
                                   1776 	LDW PROD2,Y
                                   1777 	LD A,(2,X)	; b
                                   1778 	LD YL,A
                                   1779 	LD A,(1,X)	; c
                                   1780 	MUL Y,A
                                   1781 	LDW PROD3,Y
                                   1782 	LD A,(3,X)	; a
                                   1783 	LD YL,A
                                   1784 	LD A,(1,X)	; c
                                   1785 	MUL Y,A	; least signifiant product
                                   1786 	CLR A
                                   1787 	RRWA Y
                                   1788 	LD (3,X),A	; store least significant byte
                                   1789 	ADDW Y,PROD3
                                   1790 	CLR A
                                   1791 	ADC A,#0	; save carry
                                   1792 	LD CARRY,A
                                   1793 	ADDW Y,PROD2
                                   1794 	LD A,CARRY
                                   1795 	ADC A,#0	; add 2nd carry
                                   1796 	LD CARRY,A
                                   1797 	CLR A
                                   1798 	RRWA Y
                                   1799 	LD (2,X),A	; 2nd product byte
                                   1800 	ADDW Y,PROD1
                                   1801 	RRWA Y
                                   1802 	LD (1,X),A	; 3rd product byte
                                   1803 	RRWA Y  	; 4th product byte now in A
                                   1804 	ADC A,CARRY	; fill in carry bits
                                   1805 	LD (X),A
                                   1806 	RET
                                   1807 .endif 
                                   1808 
                                   1809 
                                   1810 ;       *       ( n n -- n )
                                   1811 ;       Signed multiply. Return single product.
      0008C9 08 7F                 1812         .word      LINK
                           0008CB  1813 LINK = . 
      0008CB 01                    1814         .byte      1
      0008CC 2A                    1815         .ascii     "*"
      0008CD                       1816 STAR:
      0008CD CD 08 83         [ 4] 1817 	CALL	UMSTA
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      0008D0 CC 04 6A         [ 2] 1818 	JP	DROP
                                   1819 
                                   1820 ;       M*      ( n n -- d )
                                   1821 ;       Signed multiply. Return double product.
      0008D3 08 CB                 1822         .word      LINK
                           0008D5  1823 LINK = . 
      0008D5 02                    1824         .byte      2
      0008D6 4D 2A                 1825         .ascii     "M*"
      0008D8                       1826 MSTAR:      
      0008D8 CD 06 5A         [ 4] 1827         CALL	DDUP
      0008DB CD 04 E9         [ 4] 1828         CALL	XORR
      0008DE CD 04 AD         [ 4] 1829         CALL	ZLESS
      0008E1 CD 04 3D         [ 4] 1830         CALL	TOR
      0008E4 CD 06 E7         [ 4] 1831         CALL	ABSS
      0008E7 CD 04 84         [ 4] 1832         CALL	SWAPP
      0008EA CD 06 E7         [ 4] 1833         CALL	ABSS
      0008ED CD 08 83         [ 4] 1834         CALL	UMSTA
      0008F0 CD 04 1E         [ 4] 1835         CALL	RFROM
      0008F3 CD 03 78         [ 4] 1836         CALL	QBRAN
      0008F6 08 FB                 1837         .word	MSTA1
      0008F8 CD 06 AC         [ 4] 1838         CALL	DNEGA
      0008FB 81               [ 4] 1839 MSTA1:	RET
                                   1840 
                                   1841 ;       . /MOD   ( n1 n2 n3 -- r q )
                                   1842 ;       Multiply n1 and n2, then divide
                                   1843 ;       by n3. Return mod and quotient.
      0008FC 08 D5                 1844         .word      LINK
                           0008FE  1845 LINK = . 
      0008FE 05                    1846         .byte      5
      0008FF 2A 2F 4D 4F 44        1847         .ascii     "*/MOD"
      000904                       1848 SSMOD:
      000904 CD 04 3D         [ 4] 1849         CALL     TOR
      000907 CD 08 D8         [ 4] 1850         CALL     MSTAR
      00090A CD 04 1E         [ 4] 1851         CALL     RFROM
      00090D CC 08 08         [ 2] 1852         JP     MSMOD
                                   1853 
                                   1854 ;       */      ( n1 n2 n3 -- q )
                                   1855 ;       Multiply n1 by n2, then divide
                                   1856 ;       by n3. Return quotient only.
      000910 08 FE                 1857         .word      LINK
                           000912  1858 LINK = . 
      000912 02                    1859         .byte      2
      000913 2A 2F                 1860         .ascii     "*/"
      000915                       1861 STASL:
      000915 CD 09 04         [ 4] 1862         CALL	SSMOD
      000918 CD 04 84         [ 4] 1863         CALL	SWAPP
      00091B CC 04 6A         [ 2] 1864         JP	DROP
                                   1865 
                                   1866 ;; Miscellaneous
                                   1867 
                                   1868 ;       CELL+   ( a -- a )
                                   1869 ;       Add cell size in byte to address.
      00091E 09 12                 1870         .word      LINK
                           000920  1871 LINK = . 
      000920 02                    1872         .byte       2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000921 32 2B                 1873         .ascii     "2+"
      000923                       1874 CELLP:
      000923 90 93            [ 1] 1875         LDW Y,X
      000925 90 FE            [ 2] 1876 	LDW Y,(Y)
      000927 72 A9 00 02      [ 2] 1877         ADDW Y,#CELLL 
      00092B FF               [ 2] 1878         LDW (X),Y
      00092C 81               [ 4] 1879         RET
                                   1880 
                                   1881 ;       CELL-   ( a -- a )
                                   1882 ;       Subtract 2 from address.
      00092D 09 20                 1883         .word      LINK
                           00092F  1884 LINK = . 
      00092F 02                    1885         .byte       2
      000930 32 2D                 1886         .ascii     "2-"
      000932                       1887 CELLM:
      000932 90 93            [ 1] 1888         LDW Y,X
      000934 90 FE            [ 2] 1889 	LDW Y,(Y)
      000936 72 A2 00 02      [ 2] 1890         SUBW Y,#CELLL
      00093A FF               [ 2] 1891         LDW (X),Y
      00093B 81               [ 4] 1892         RET
                                   1893 
                                   1894 ;       CELLS   ( n -- n )
                                   1895 ;       Multiply tos by 2.
      00093C 09 2F                 1896         .word      LINK
                           00093E  1897 LINK = . 
      00093E 02                    1898         .byte       2
      00093F 32 2A                 1899         .ascii     "2*"
      000941                       1900 CELLS:
      000941 90 93            [ 1] 1901         LDW Y,X
      000943 90 FE            [ 2] 1902 	LDW Y,(Y)
      000945 90 58            [ 2] 1903         SLAW Y
      000947 FF               [ 2] 1904         LDW (X),Y
      000948 81               [ 4] 1905         RET
                                   1906 
                                   1907 ;       1+      ( a -- a )
                                   1908 ;       Add cell size in byte to address.
      000949 09 3E                 1909         .word      LINK
                           00094B  1910 LINK = . 
      00094B 02                    1911         .byte      2
      00094C 31 2B                 1912         .ascii     "1+"
      00094E                       1913 ONEP:
      00094E 90 93            [ 1] 1914         LDW Y,X
      000950 90 FE            [ 2] 1915 	LDW Y,(Y)
      000952 90 5C            [ 2] 1916         INCW Y
      000954 FF               [ 2] 1917         LDW (X),Y
      000955 81               [ 4] 1918         RET
                                   1919 
                                   1920 ;       1-      ( a -- a )
                                   1921 ;       Subtract 2 from address.
      000956 09 4B                 1922         .word      LINK
                           000958  1923 LINK = . 
      000958 02                    1924         .byte      2
      000959 31 2D                 1925         .ascii     "1-"
      00095B                       1926 ONEM:
      00095B 90 93            [ 1] 1927         LDW Y,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      00095D 90 FE            [ 2] 1928 	LDW Y,(Y)
      00095F 90 5A            [ 2] 1929         DECW Y
      000961 FF               [ 2] 1930         LDW (X),Y
      000962 81               [ 4] 1931         RET
                                   1932 
                                   1933 ;  shift left n times 
                                   1934 ; LSHIFT ( n1 n2 -- n1<<n2 )
      000963 09 58                 1935         .word LINK 
                           000965  1936         LINK=.
      000965 06                    1937         .byte 6 
      000966 4C 53 48 49 46 54     1938         .ascii "LSHIFT"
      00096C                       1939 LSHIFT:
      00096C E6 01            [ 1] 1940         ld a,(1,x)
      00096E 1C 00 02         [ 2] 1941         addw x,#CELLL 
      000971 90 93            [ 1] 1942         ldw y,x 
      000973 90 FE            [ 2] 1943         ldw y,(y)
      000975                       1944 LSHIFT1:
      000975 4D               [ 1] 1945         tnz a 
      000976 27 05            [ 1] 1946         jreq LSHIFT4 
      000978 90 58            [ 2] 1947         sllw y 
      00097A 4A               [ 1] 1948         dec a 
      00097B 20 F8            [ 2] 1949         jra LSHIFT1 
      00097D                       1950 LSHIFT4:
      00097D FF               [ 2] 1951         ldw (x),y 
      00097E 81               [ 4] 1952         ret 
                                   1953 
                                   1954 ; shift right n times                 
                                   1955 ; RSHIFT (n1 n2 -- n1>>n2 )
      00097F 09 65                 1956         .word LINK 
                           000981  1957         LINK=.
      000981 06                    1958         .byte 6
      000982 52 53 48 49 46 54     1959         .ascii "RSHIFT"
      000988                       1960 RSHIFT:
      000988 E6 01            [ 1] 1961         ld a,(1,x)
      00098A 1C 00 02         [ 2] 1962         addw x,#CELLL 
      00098D 90 93            [ 1] 1963         ldw y,x 
      00098F 90 FE            [ 2] 1964         ldw y,(y)
      000991                       1965 RSHIFT1:
      000991 4D               [ 1] 1966         tnz a 
      000992 27 05            [ 1] 1967         jreq RSHIFT4 
      000994 90 54            [ 2] 1968         srlw y 
      000996 4A               [ 1] 1969         dec a 
      000997 20 F8            [ 2] 1970         jra RSHIFT1 
      000999                       1971 RSHIFT4:
      000999 FF               [ 2] 1972         ldw (x),y 
      00099A 81               [ 4] 1973         ret 
                                   1974 
                                   1975 
                                   1976 ;       2/      ( n -- n )
                                   1977 ;       divide  tos by 2.
      00099B 09 81                 1978         .word      LINK
                           00099D  1979 LINK = . 
      00099D 02                    1980         .byte      2
      00099E 32 2F                 1981         .ascii     "2/"
      0009A0                       1982 TWOSL:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      0009A0 90 93            [ 1] 1983         LDW Y,X
      0009A2 90 FE            [ 2] 1984 	LDW Y,(Y)
      0009A4 90 57            [ 2] 1985         SRAW Y
      0009A6 FF               [ 2] 1986         LDW (X),Y
      0009A7 81               [ 4] 1987         RET
                                   1988 
                                   1989 ;       BL      ( -- 32 )
                                   1990 ;       Return 32,  blank character.
      0009A8 09 9D                 1991         .word      LINK
                           0009AA  1992 LINK = . 
      0009AA 02                    1993         .byte      2
      0009AB 42 4C                 1994         .ascii     "BL"
      0009AD                       1995 BLANK:
      0009AD 1D 00 02         [ 2] 1996         SUBW X,#2
      0009B0 90 AE 00 20      [ 2] 1997 	LDW Y,#32
      0009B4 FF               [ 2] 1998         LDW (X),Y
      0009B5 81               [ 4] 1999         RET
                                   2000 
                                   2001 ;         0     ( -- 0)
                                   2002 ;         Return 0.
      0009B6 09 AA                 2003         .word      LINK
                           0009B8  2004 LINK = . 
      0009B8 01                    2005         .byte       1
      0009B9 30                    2006         .ascii     "0"
      0009BA                       2007 ZERO:
      0009BA 1D 00 02         [ 2] 2008         SUBW X,#2
      0009BD 90 5F            [ 1] 2009 	CLRW Y
      0009BF FF               [ 2] 2010         LDW (X),Y
      0009C0 81               [ 4] 2011         RET
                                   2012 
                                   2013 ;         1     ( -- 1)
                                   2014 ;         Return 1.
      0009C1 09 B8                 2015         .word      LINK
                           0009C3  2016 LINK = . 
      0009C3 01                    2017         .byte       1
      0009C4 31                    2018         .ascii     "1"
      0009C5                       2019 ONE:
      0009C5 1D 00 02         [ 2] 2020         SUBW X,#2
      0009C8 90 AE 00 01      [ 2] 2021 	LDW Y,#1
      0009CC FF               [ 2] 2022         LDW (X),Y
      0009CD 81               [ 4] 2023         RET
                                   2024 
                                   2025 ;         -1    ( -- -1)
                                   2026 ;         Return 32,  blank character.
      0009CE 09 C3                 2027         .word      LINK
                           0009D0  2028 LINK = . 
      0009D0 02                    2029         .byte       2
      0009D1 2D 31                 2030         .ascii     "-1"
      0009D3                       2031 MONE:
      0009D3 1D 00 02         [ 2] 2032         SUBW X,#2
      0009D6 90 AE FF FF      [ 2] 2033 	LDW Y,#0xFFFF
      0009DA FF               [ 2] 2034         LDW (X),Y
      0009DB 81               [ 4] 2035         RET
                                   2036 
                                   2037 ;       >CHAR   ( c -- c )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                                   2038 ;       Filter non-printing characters.
      0009DC 09 D0                 2039         .word      LINK
                           0009DE  2040 LINK = . 
      0009DE 05                    2041         .byte      5
      0009DF 3E 43 48 41 52        2042         .ascii     ">CHAR"
      0009E4                       2043 TCHAR:
                           000001  2044 .if CONVERT_TO_CODE
      0009E4 E6 01            [ 1] 2045         ld a,(1,x)
      0009E6 A1 20            [ 1] 2046         cp a,#32  
      0009E8 2B 05            [ 1] 2047         jrmi 1$ 
      0009EA A1 7F            [ 1] 2048         cp a,#127 
      0009EC 2A 01            [ 1] 2049         jrpl 1$ 
      0009EE 81               [ 4] 2050         ret 
      0009EF A6 5F            [ 1] 2051 1$:     ld a,#'_ 
      0009F1 E7 01            [ 1] 2052         ld (1,x),a 
      0009F3 81               [ 4] 2053         ret 
                           000000  2054 .else
                                   2055         CALL     DOLIT
                                   2056         .word       0x7F
                                   2057         CALL     ANDD
                                   2058         CALL     DUPP    ;mask msb
                                   2059         CALL     DOLIT
                                   2060         .word      127
                                   2061         CALL     BLANK
                                   2062         CALL     WITHI   ;check for printable
                                   2063         CALL     QBRAN
                                   2064         .word    TCHA1
                                   2065         CALL     DROP
                                   2066         CALL     DOLIT
                                   2067         .word     0x5F		; "_"     ;replace non-printables
                                   2068 .endif 
      0009F4 81               [ 4] 2069 TCHA1:  RET
                                   2070 
                                   2071 ;       DEPTH   ( -- n )
                                   2072 ;       Return  depth of  data stack.
      0009F5 09 DE                 2073         .word      LINK
                           0009F7  2074 LINK = . 
      0009F7 05                    2075         .byte      5
      0009F8 44 45 50 54 48        2076         .ascii     "DEPTH"
      0009FD                       2077 DEPTH: 
      0009FD 90 BE 2A         [ 2] 2078         LDW Y,SP0    ;save data stack ptr
      000A00 BF 22            [ 2] 2079 	LDW XTEMP,X
      000A02 72 B2 00 22      [ 2] 2080         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000A06 90 57            [ 2] 2081         SRAW Y    ;Y = #stack items
                           000001  2082 .if PICATOUT_MOD
                                   2083 ; why ? 
                                   2084 ;      	DECW Y
                                   2085 .endif 
      000A08 1D 00 02         [ 2] 2086 	SUBW X,#2
      000A0B FF               [ 2] 2087         LDW (X),Y     ; if neg, underflow
      000A0C 81               [ 4] 2088         RET
                                   2089 
                                   2090 ;       PICK    ( ... +n -- ... w )
                                   2091 ;       Copy  nth stack item to tos.
      000A0D 09 F7                 2092         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                           000A0F  2093 LINK = . 
      000A0F 04                    2094         .byte      4
      000A10 50 49 43 4B           2095         .ascii     "PICK"
      000A14                       2096 PICK:
      000A14 90 93            [ 1] 2097         LDW Y,X   ;D = n1
      000A16 90 FE            [ 2] 2098         LDW Y,(Y)
                           000001  2099 .if PICATOUT_MOD
                                   2100 ; modified for standard compliance          
                                   2101 ; 0 PICK must be equivalent to DUP 
      000A18 90 5C            [ 2] 2102         INCW Y 
                                   2103 .endif         
      000A1A 90 58            [ 2] 2104         SLAW Y
      000A1C BF 22            [ 2] 2105         LDW XTEMP,X
      000A1E 72 B9 00 22      [ 2] 2106         ADDW Y,XTEMP
      000A22 90 FE            [ 2] 2107         LDW Y,(Y)
      000A24 FF               [ 2] 2108         LDW (X),Y
      000A25 81               [ 4] 2109         RET
                                   2110 
                                   2111 ;; Memory access
                                   2112 
                                   2113 ;       +!      ( n a -- )
                                   2114 ;       Add n to  contents at address a.
      000A26 0A 0F                 2115         .word      LINK
                           000A28  2116 LINK = . 
      000A28 02                    2117         .byte      2
      000A29 2B 21                 2118         .ascii     "+!"
      000A2B                       2119 PSTOR:
                           000001  2120 .if CONVERT_TO_CODE
      000A2B 90 93            [ 1] 2121         ldw y,x 
      000A2D 90 FE            [ 2] 2122         ldw y,(y)
      000A2F 90 BF 24         [ 2] 2123         ldw YTEMP,y  ; address
      000A32 90 FE            [ 2] 2124         ldw y,(y)  
      000A34 90 89            [ 2] 2125         pushw y  ; value at address 
      000A36 90 93            [ 1] 2126         ldw y,x 
      000A38 90 EE 02         [ 2] 2127         ldw y,(2,y) ; n 
      000A3B 72 F9 01         [ 2] 2128         addw y,(1,sp) ; n+value
      000A3E 91 CF 24         [ 5] 2129         ldw [YTEMP],y ;  a!
      000A41 90 85            [ 2] 2130         popw y    ;drop local var
      000A43 1C 00 04         [ 2] 2131         addw x,#4 ; DDROP 
      000A46 81               [ 4] 2132         ret 
                           000000  2133 .else
                                   2134         CALL	SWAPP
                                   2135         CALL	OVER
                                   2136         CALL	AT
                                   2137         CALL	PLUS
                                   2138         CALL	SWAPP
                                   2139         JP	STORE
                                   2140 .endif 
                                   2141 
                                   2142 ;       2!      ( d a -- )
                                   2143 ;       Store  double integer to address a.
      000A47 0A 28                 2144         .word      LINK
                           000A49  2145 LINK = . 
      000A49 02                    2146         .byte      2
      000A4A 32 21                 2147         .ascii     "2!"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000A4C                       2148 DSTOR:
                           000001  2149 .if CONVERT_TO_CODE
      000A4C 90 93            [ 1] 2150         ldw y,x 
      000A4E 90 FE            [ 2] 2151         ldw y,(y)
      000A50 90 BF 24         [ 2] 2152         ldw YTEMP,y ; address 
      000A53 1C 00 02         [ 2] 2153         addw x,#CELLL ; drop a 
      000A56 90 93            [ 1] 2154         ldw y,x 
      000A58 90 FE            [ 2] 2155         ldw y,(y) ; hi word 
      000A5A 89               [ 2] 2156         pushw x 
      000A5B EE 02            [ 2] 2157         ldw x,(2,x) ; lo word 
      000A5D 91 CF 24         [ 5] 2158         ldw [YTEMP],y
      000A60 90 93            [ 1] 2159         ldw y,x 
      000A62 AE 00 02         [ 2] 2160         ldw x,#2 
      000A65 92 DF 24         [ 5] 2161         ldw ([YTEMP],x),y 
      000A68 85               [ 2] 2162         popw x 
      000A69 1C 00 04         [ 2] 2163         addw x,#4 ; DDROP 
      000A6C 81               [ 4] 2164         ret 
                           000000  2165 .else
                                   2166         CALL	SWAPP
                                   2167         CALL	OVER
                                   2168         CALL	STORE
                                   2169         CALL	CELLP
                                   2170         JP	STORE
                                   2171 .endif 
                                   2172 ;       2@      ( a -- d )
                                   2173 ;       Fetch double integer from address a.
      000A6D 0A 49                 2174         .word      LINK
                           000A6F  2175 LINK = . 
      000A6F 02                    2176         .byte      2
      000A70 32 40                 2177         .ascii     "2@"
      000A72                       2178 DAT:
                           000001  2179 .if CONVERT_TO_CODE
      000A72 90 93            [ 1] 2180         ldw y,x 
      000A74 90 FE            [ 2] 2181         ldw y,(y) ;address 
      000A76 90 BF 24         [ 2] 2182         ldw YTEMP,y 
      000A79 1D 00 02         [ 2] 2183         subw x,#CELLL ; space for udh 
      000A7C 91 CE 24         [ 5] 2184         ldw y,[YTEMP] ; udh 
      000A7F FF               [ 2] 2185         ldw (x),y 
      000A80 90 AE 00 02      [ 2] 2186         ldw y,#2
      000A84 91 DE 24         [ 5] 2187         ldw y,([YTEMP],y) ; udl 
      000A87 EF 02            [ 2] 2188         ldw (2,x),y
      000A89 81               [ 4] 2189         ret 
                           000000  2190 .else 
                                   2191         CALL	DUPP
                                   2192         CALL	CELLP
                                   2193         CALL	AT
                                   2194         CALL	SWAPP
                                   2195         JP	AT
                                   2196 .endif 
                                   2197 
                                   2198 ;       COUNT   ( b -- b +n )
                                   2199 ;       Return count byte of a string
                                   2200 ;       and add 1 to byte address.
      000A8A 0A 6F                 2201         .word      LINK
                           000A8C  2202 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000A8C 05                    2203         .byte      5
      000A8D 43 4F 55 4E 54        2204         .ascii     "COUNT"
      000A92                       2205 COUNT:
                           000001  2206 .if CONVERT_TO_CODE
      000A92 90 93            [ 1] 2207         ldw y,x 
      000A94 90 FE            [ 2] 2208         ldw y,(y) ; address 
      000A96 90 F6            [ 1] 2209         ld a,(y)  ; count 
      000A98 90 5C            [ 2] 2210         incw y 
      000A9A FF               [ 2] 2211         ldw (x),y 
      000A9B 1D 00 02         [ 2] 2212         subw x,#CELLL 
      000A9E E7 01            [ 1] 2213         ld (1,x),a 
      000AA0 7F               [ 1] 2214         clr (x)
      000AA1 81               [ 4] 2215         ret 
                           000000  2216 .else 
                                   2217         CALL     DUPP
                                   2218         CALL     ONEP
                                   2219         CALL     SWAPP
                                   2220         JP     CAT
                                   2221 .endif 
                                   2222 
                                   2223 ;       HERE    ( -- a )
                                   2224 ;       Return  top of  variables
      000AA2 0A 8C                 2225         .word      LINK
                           000AA4  2226 LINK = . 
      000AA4 04                    2227         .byte      4
      000AA5 48 45 52 45           2228         .ascii     "HERE"
      000AA9                       2229 HERE:
                           000001  2230 .if CONVERT_TO_CODE
      000AA9 90 AE 00 16      [ 2] 2231       	ldw y,#UVP 
      000AAD 90 FE            [ 2] 2232         ldw y,(y)
      000AAF 1D 00 02         [ 2] 2233         subw x,#CELLL 
      000AB2 FF               [ 2] 2234         ldw (x),y 
      000AB3 81               [ 4] 2235         ret 
                           000000  2236 .else
                                   2237         CALL     VPP
                                   2238         JP     AT
                                   2239 .endif 
                                   2240 
                                   2241 ;       PAD     ( -- a )
                                   2242 ;       Return address of text buffer
                                   2243 ;       above  code dictionary.
      000AB4 0A A4                 2244         .word      LINK
                           000AB6  2245 LINK = . 
      000AB6 03                    2246         .byte      3
      000AB7 50 41 44              2247         .ascii     "PAD"
      000ABA                       2248 PAD:
      000ABA CD 0A A9         [ 4] 2249         CALL     HERE
      000ABD CD 03 45         [ 4] 2250         CALL     DOLIT
      000AC0 00 50                 2251         .word      80
      000AC2 CC 06 6F         [ 2] 2252         JP     PLUS
                                   2253 
                                   2254 ;       TIB     ( -- a )
                                   2255 ;       Return address of terminal input buffer.
      000AC5 0A B6                 2256         .word      LINK
                           000AC7  2257 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000AC7 03                    2258         .byte      3
      000AC8 54 49 42              2259         .ascii     "TIB"
      000ACB                       2260 TIB:
      000ACB CD 05 5F         [ 4] 2261         CALL     NTIB
      000ACE CD 09 23         [ 4] 2262         CALL     CELLP
      000AD1 CC 03 CD         [ 2] 2263         JP     AT
                                   2264 
                                   2265 ;       @EXECUTE        ( a -- )
                                   2266 ;       Execute vector stored in address a.
      000AD4 0A C7                 2267         .word      LINK
                           000AD6  2268 LINK = . 
      000AD6 08                    2269         .byte      8
      000AD7 40 45 58 45 43 55 54  2270         .ascii     "@EXECUTE"
             45
      000ADF                       2271 ATEXE:
      000ADF CD 03 CD         [ 4] 2272         CALL     AT
      000AE2 CD 06 1E         [ 4] 2273         CALL     QDUP    ;?address or zero
      000AE5 CD 03 78         [ 4] 2274         CALL     QBRAN
      000AE8 0A ED                 2275         .word      EXE1
      000AEA CD 03 9F         [ 4] 2276         CALL     EXECU   ;execute if non-zero
      000AED 81               [ 4] 2277 EXE1:   RET     ;do nothing if zero
                                   2278 
                                   2279 ;       CMOVE   ( b1 b2 u -- )
                                   2280 ;       Copy u bytes from b1 to b2.
      000AEE 0A D6                 2281         .word      LINK
                           000AF0  2282 LINK = . 
      000AF0 05                    2283         .byte      5
      000AF1 43 4D 4F 56 45        2284         .ascii     "CMOVE"
      000AF6                       2285 CMOVE:
      000AF6 CD 04 3D         [ 4] 2286         CALL	TOR
      000AF9 CD 03 8F         [ 4] 2287         CALL	BRAN
      000AFC 0B 16                 2288         .word	CMOV2
      000AFE CD 04 3D         [ 4] 2289 CMOV1:	CALL	TOR
      000B01 CD 04 74         [ 4] 2290         CALL	DUPP
      000B04 CD 03 EB         [ 4] 2291         CALL	CAT
      000B07 CD 04 31         [ 4] 2292         CALL	RAT
      000B0A CD 03 DA         [ 4] 2293         CALL	CSTOR
      000B0D CD 09 4E         [ 4] 2294         CALL	ONEP
      000B10 CD 04 1E         [ 4] 2295         CALL	RFROM
      000B13 CD 09 4E         [ 4] 2296         CALL	ONEP
      000B16 CD 03 59         [ 4] 2297 CMOV2:	CALL	DONXT
      000B19 0A FE                 2298         .word	CMOV1
      000B1B CC 06 4F         [ 2] 2299         JP	DDROP
                                   2300 
                                   2301 ;       FILL    ( b u c -- )
                                   2302 ;       Fill u bytes of character c
                                   2303 ;       to area beginning at b.
      000B1E 0A F0                 2304         .word       LINK
                           000B20  2305 LINK = . 
      000B20 04                    2306         .byte       4
      000B21 46 49 4C 4C           2307         .ascii     "FILL"
      000B25                       2308 FILL:
                           000001  2309 .if CONVERT_TO_CODE
      000B25 90 93            [ 1] 2310         ldw y,x 
      000B27 90 E6 01         [ 1] 2311         ld a,(1,y) ; c 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000B2A 1C 00 02         [ 2] 2312         addw x,#CELLL ; drop c 
      000B2D 90 93            [ 1] 2313         ldw y,x 
      000B2F 90 FE            [ 2] 2314         ldw y,(y) ; count
      000B31 90 89            [ 2] 2315         pushw y 
      000B33 1C 00 02         [ 2] 2316         addw x,#CELLL ; drop u 
      000B36 90 93            [ 1] 2317         ldw y,x 
      000B38 1C 00 02         [ 2] 2318         addw x,#CELLL ; drop b 
      000B3B 90 FE            [ 2] 2319         ldw y,(y) ; address
      000B3D 90 BF 24         [ 2] 2320         ldw YTEMP,y
      000B40 90 85            [ 2] 2321         popw y ; count 
      000B42                       2322 FILL1:  
      000B42 92 C7 24         [ 4] 2323         ld [YTEMP],a 
      000B45 3C 25            [ 1] 2324         inc YTEMP+1
      000B47 24 02            [ 1] 2325         jrnc FILL2 
      000B49 3C 24            [ 1] 2326         inc YTEMP
      000B4B                       2327 FILL2: 
      000B4B 90 5A            [ 2] 2328         decw y ; count 
      000B4D 26 F3            [ 1] 2329         jrne FILL1  
      000B4F 81               [ 4] 2330         ret 
                           000000  2331 .else 
                                   2332         CALL	SWAPP
                                   2333         CALL	TOR
                                   2334         CALL	SWAPP
                                   2335         CALL	BRAN
                                   2336         .word	FILL2
                                   2337 FILL1:	CALL	DDUP
                                   2338         CALL	CSTOR
                                   2339         CALL	ONEP
                                   2340 FILL2:	CALL	DONXT
                                   2341         .word	FILL1
                                   2342         JP	DDROP
                                   2343 .endif
                                   2344 
                                   2345 ;       ERASE   ( b u -- )
                                   2346 ;       Erase u bytes beginning at b.
      000B50 0B 20                 2347         .word      LINK
                           000B52  2348 LINK = . 
      000B52 05                    2349         .byte      5
      000B53 45 52 41 53 45        2350         .ascii     "ERASE"
      000B58                       2351 ERASE:
                           000001  2352 .if CONVERT_TO_CODE
      000B58 90 5F            [ 1] 2353         clrw y 
      000B5A 1D 00 02         [ 2] 2354         subw x,#CELLL 
      000B5D FF               [ 2] 2355         ldw (x),y 
      000B5E CC 0B 25         [ 2] 2356         jp FILL 
                           000000  2357 .else 
                                   2358         CALL     ZERO
                                   2359         JP     FILL
                                   2360 .endif 
                                   2361 ;       PACK0x   ( b u a -- a )
                                   2362 ;       Build a counted string with
                                   2363 ;       u characters from b. Null fill.
      000B61 0B 52                 2364         .word      LINK
                           000B63  2365 LINK = . 
      000B63 05                    2366         .byte      5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000B64 50 41 43 4B 30 58     2367         .ascii     "PACK0X"
      000B6A                       2368 PACKS:
      000B6A CD 04 74         [ 4] 2369         CALL     DUPP
      000B6D CD 04 3D         [ 4] 2370         CALL     TOR     ;strings only on cell boundary
      000B70 CD 06 5A         [ 4] 2371         CALL     DDUP
      000B73 CD 03 DA         [ 4] 2372         CALL     CSTOR
      000B76 CD 09 4E         [ 4] 2373         CALL     ONEP ;save count
      000B79 CD 04 84         [ 4] 2374         CALL     SWAPP
      000B7C CD 0A F6         [ 4] 2375         CALL     CMOVE
      000B7F CD 04 1E         [ 4] 2376         CALL     RFROM
      000B82 81               [ 4] 2377         RET
                                   2378 
                                   2379 ;; Numeric output, single precision
                                   2380 
                                   2381 ;       DIGIT   ( u -- c )
                                   2382 ;       Convert digit u to a character.
      000B83 0B 63                 2383         .word      LINK
                           000B85  2384 LINK = . 
      000B85 05                    2385         .byte      5
      000B86 44 49 47 49 54        2386         .ascii     "DIGIT"
      000B8B                       2387 DIGIT:
      000B8B CD 03 45         [ 4] 2388         CALL	DOLIT
      000B8E 00 09                 2389         .word	9
      000B90 CD 04 9E         [ 4] 2390         CALL	OVER
      000B93 CD 07 32         [ 4] 2391         CALL	LESS
      000B96 CD 03 45         [ 4] 2392         CALL	DOLIT
      000B99 00 07                 2393         .word	7
      000B9B CD 04 C0         [ 4] 2394         CALL	ANDD
      000B9E CD 06 6F         [ 4] 2395         CALL	PLUS
      000BA1 CD 03 45         [ 4] 2396         CALL	DOLIT
      000BA4 00 30                 2397         .word	48	;'0'
      000BA6 CC 06 6F         [ 2] 2398         JP	PLUS
                                   2399 
                                   2400 ;       EXTRACT ( n base -- n c )
                                   2401 ;       Extract least significant digit from n.
      000BA9 0B 85                 2402         .word      LINK
                           000BAB  2403 LINK = . 
      000BAB 07                    2404         .byte      7
      000BAC 45 58 54 52 41 43 54  2405         .ascii     "EXTRACT"
      000BB3                       2406 EXTRC:
      000BB3 CD 09 BA         [ 4] 2407         CALL     ZERO
      000BB6 CD 04 84         [ 4] 2408         CALL     SWAPP
      000BB9 CD 07 AA         [ 4] 2409         CALL     UMMOD
      000BBC CD 04 84         [ 4] 2410         CALL     SWAPP
      000BBF CC 0B 8B         [ 2] 2411         JP     DIGIT
                                   2412 
                                   2413 ;       <#      ( -- )
                                   2414 ;       Initiate  numeric output process.
      000BC2 0B AB                 2415         .word      LINK
                           000BC4  2416 LINK = . 
      000BC4 02                    2417         .byte      2
      000BC5 3C 23                 2418         .ascii     "<#"
      000BC7                       2419 BDIGS:
      000BC7 CD 0A BA         [ 4] 2420         CALL     PAD
      000BCA CD 05 A1         [ 4] 2421         CALL     HLD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000BCD CC 03 B6         [ 2] 2422         JP     STORE
                                   2423 
                                   2424 ;       HOLD    ( c -- )
                                   2425 ;       Insert a character into output string.
      000BD0 0B C4                 2426         .word      LINK
                           000BD2  2427 LINK = . 
      000BD2 04                    2428         .byte      4
      000BD3 48 4F 4C 44           2429         .ascii     "HOLD"
      000BD7                       2430 HOLD:
      000BD7 CD 05 A1         [ 4] 2431         CALL     HLD
      000BDA CD 03 CD         [ 4] 2432         CALL     AT
      000BDD CD 09 5B         [ 4] 2433         CALL     ONEM
      000BE0 CD 04 74         [ 4] 2434         CALL     DUPP
      000BE3 CD 05 A1         [ 4] 2435         CALL     HLD
      000BE6 CD 03 B6         [ 4] 2436         CALL     STORE
      000BE9 CC 03 DA         [ 2] 2437         JP     CSTOR
                                   2438 
                                   2439 ;       #       ( u -- u )
                                   2440 ;       Extract one digit from u and
                                   2441 ;       append digit to output string.
      000BEC 0B D2                 2442         .word      LINK
                           000BEE  2443 LINK = . 
      000BEE 01                    2444         .byte      1
      000BEF 23                    2445         .ascii     "#"
      000BF0                       2446 DIG:
      000BF0 CD 05 31         [ 4] 2447         CALL     BASE
      000BF3 CD 03 CD         [ 4] 2448         CALL     AT
      000BF6 CD 0B B3         [ 4] 2449         CALL     EXTRC
      000BF9 CC 0B D7         [ 2] 2450         JP     HOLD
                                   2451 
                                   2452 ;       #S      ( u -- 0 )
                                   2453 ;       Convert u until all digits
                                   2454 ;       are added to output string.
      000BFC 0B EE                 2455         .word      LINK
                           000BFE  2456 LINK = . 
      000BFE 02                    2457         .byte      2
      000BFF 23 53                 2458         .ascii     "#S"
      000C01                       2459 DIGS:
      000C01 CD 0B F0         [ 4] 2460 DIGS1:  CALL     DIG
      000C04 CD 04 74         [ 4] 2461         CALL     DUPP
      000C07 CD 03 78         [ 4] 2462         CALL     QBRAN
      000C0A 0C 0E                 2463         .word      DIGS2
      000C0C 20 F3            [ 2] 2464         JRA     DIGS1
      000C0E 81               [ 4] 2465 DIGS2:  RET
                                   2466 
                                   2467 ;       SIGN    ( n -- )
                                   2468 ;       Add a minus sign to
                                   2469 ;       numeric output string.
      000C0F 0B FE                 2470         .word      LINK
                           000C11  2471 LINK = . 
      000C11 04                    2472         .byte      4
      000C12 53 49 47 4E           2473         .ascii     "SIGN"
      000C16                       2474 SIGN:
      000C16 CD 04 AD         [ 4] 2475         CALL     ZLESS
      000C19 CD 03 78         [ 4] 2476         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000C1C 0C 26                 2477         .word      SIGN1
      000C1E CD 03 45         [ 4] 2478         CALL     DOLIT
      000C21 00 2D                 2479         .word      45	;"-"
      000C23 CC 0B D7         [ 2] 2480         JP     HOLD
      000C26 81               [ 4] 2481 SIGN1:  RET
                                   2482 
                                   2483 ;       #>      ( w -- b u )
                                   2484 ;       Prepare output string.
      000C27 0C 11                 2485         .word      LINK
                           000C29  2486 LINK = . 
      000C29 02                    2487         .byte      2
      000C2A 23 3E                 2488         .ascii     "#>"
      000C2C                       2489 EDIGS:
      000C2C CD 04 6A         [ 4] 2490         CALL     DROP
      000C2F CD 05 A1         [ 4] 2491         CALL     HLD
      000C32 CD 03 CD         [ 4] 2492         CALL     AT
      000C35 CD 0A BA         [ 4] 2493         CALL     PAD
      000C38 CD 04 9E         [ 4] 2494         CALL     OVER
      000C3B CC 06 CD         [ 2] 2495         JP     SUBB
                                   2496 
                                   2497 ;       str     ( w -- b u )
                                   2498 ;       Convert a signed integer
                                   2499 ;       to a numeric string.
      000C3E 0C 29                 2500         .word      LINK
                           000C40  2501 LINK = . 
      000C40 03                    2502         .byte      3
      000C41 53 54 52              2503         .ascii     "STR"
      000C44                       2504 STR:
      000C44 CD 04 74         [ 4] 2505         CALL     DUPP
      000C47 CD 04 3D         [ 4] 2506         CALL     TOR
      000C4A CD 06 E7         [ 4] 2507         CALL     ABSS
      000C4D CD 0B C7         [ 4] 2508         CALL     BDIGS
      000C50 CD 0C 01         [ 4] 2509         CALL     DIGS
      000C53 CD 04 1E         [ 4] 2510         CALL     RFROM
      000C56 CD 0C 16         [ 4] 2511         CALL     SIGN
      000C59 CC 0C 2C         [ 2] 2512         JP     EDIGS
                                   2513 
                                   2514 ;       HEX     ( -- )
                                   2515 ;       Use radix 16 as base for
                                   2516 ;       numeric conversions.
      000C5C 0C 40                 2517         .word      LINK
                           000C5E  2518 LINK = . 
      000C5E 03                    2519         .byte      3
      000C5F 48 45 58              2520         .ascii     "HEX"
      000C62                       2521 HEX:
      000C62 CD 03 45         [ 4] 2522         CALL     DOLIT
      000C65 00 10                 2523         .word      16
      000C67 CD 05 31         [ 4] 2524         CALL     BASE
      000C6A CC 03 B6         [ 2] 2525         JP     STORE
                                   2526 
                                   2527 ;       DECIMAL ( -- )
                                   2528 ;       Use radix 10 as base
                                   2529 ;       for numeric conversions.
      000C6D 0C 5E                 2530         .word      LINK
                           000C6F  2531 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000C6F 07                    2532         .byte      7
      000C70 44 45 43 49 4D 41 4C  2533         .ascii     "DECIMAL"
      000C77                       2534 DECIM:
      000C77 CD 03 45         [ 4] 2535         CALL     DOLIT
      000C7A 00 0A                 2536         .word      10
      000C7C CD 05 31         [ 4] 2537         CALL     BASE
      000C7F CC 03 B6         [ 2] 2538         JP     STORE
                                   2539 
                                   2540 ;; Numeric input, single precision
                                   2541 
                                   2542 ;       DIGIT?  ( c base -- u t )
                                   2543 ;       Convert a character to its numeric
                                   2544 ;       value. A flag indicates success.
      000C82 0C 6F                 2545         .word      LINK
                           000C84  2546 LINK = . 
      000C84 06                    2547         .byte       6
      000C85 44 49 47 49 54 3F     2548         .ascii     "DIGIT?"
      000C8B                       2549 DIGTQ:
      000C8B CD 04 3D         [ 4] 2550         CALL     TOR
      000C8E CD 03 45         [ 4] 2551         CALL     DOLIT
      000C91 00 30                 2552         .word     48	; "0"
      000C93 CD 06 CD         [ 4] 2553         CALL     SUBB
      000C96 CD 03 45         [ 4] 2554         CALL     DOLIT
      000C99 00 09                 2555         .word      9
      000C9B CD 04 9E         [ 4] 2556         CALL     OVER
      000C9E CD 07 32         [ 4] 2557         CALL     LESS
      000CA1 CD 03 78         [ 4] 2558         CALL     QBRAN
      000CA4 0C BC                 2559         .word      DGTQ1
      000CA6 CD 03 45         [ 4] 2560         CALL     DOLIT
      000CA9 00 07                 2561         .word      7
      000CAB CD 06 CD         [ 4] 2562         CALL     SUBB
      000CAE CD 04 74         [ 4] 2563         CALL     DUPP
      000CB1 CD 03 45         [ 4] 2564         CALL     DOLIT
      000CB4 00 0A                 2565         .word      10
      000CB6 CD 07 32         [ 4] 2566         CALL     LESS
      000CB9 CD 04 D4         [ 4] 2567         CALL     ORR
      000CBC CD 04 74         [ 4] 2568 DGTQ1:  CALL     DUPP
      000CBF CD 04 1E         [ 4] 2569         CALL     RFROM
      000CC2 CC 07 14         [ 2] 2570         JP     ULESS
                                   2571 
                                   2572 ;       NUMBER? ( a -- n T | a F )
                                   2573 ;       Convert a number string to
                                   2574 ;       integer. Push a flag on tos.
      000CC5 0C 84                 2575         .word      LINK
                           000CC7  2576 LINK = . 
      000CC7 07                    2577         .byte      7
      000CC8 4E 55 4D 42 45 52 3F  2578         .ascii     "NUMBER?"
      000CCF                       2579 NUMBQ:
      000CCF CD 05 31         [ 4] 2580         CALL     BASE
      000CD2 CD 03 CD         [ 4] 2581         CALL     AT
      000CD5 CD 04 3D         [ 4] 2582         CALL     TOR
      000CD8 CD 09 BA         [ 4] 2583         CALL     ZERO
      000CDB CD 04 9E         [ 4] 2584         CALL     OVER
      000CDE CD 0A 92         [ 4] 2585         CALL     COUNT
      000CE1 CD 04 9E         [ 4] 2586         CALL     OVER
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000CE4 CD 03 EB         [ 4] 2587         CALL     CAT
      000CE7 CD 03 45         [ 4] 2588         CALL     DOLIT
      000CEA 00 24                 2589         .word     36	; "0x"
      000CEC CD 06 F5         [ 4] 2590         CALL     EQUAL
      000CEF CD 03 78         [ 4] 2591         CALL     QBRAN
      000CF2 0D 03                 2592         .word      NUMQ1
      000CF4 CD 0C 62         [ 4] 2593         CALL     HEX
      000CF7 CD 04 84         [ 4] 2594         CALL     SWAPP
      000CFA CD 09 4E         [ 4] 2595         CALL     ONEP
      000CFD CD 04 84         [ 4] 2596         CALL     SWAPP
      000D00 CD 09 5B         [ 4] 2597         CALL     ONEM
      000D03 CD 04 9E         [ 4] 2598 NUMQ1:  CALL     OVER
      000D06 CD 03 EB         [ 4] 2599         CALL     CAT
      000D09 CD 03 45         [ 4] 2600         CALL     DOLIT
      000D0C 00 2D                 2601         .word     45	; "-"
      000D0E CD 06 F5         [ 4] 2602         CALL     EQUAL
      000D11 CD 04 3D         [ 4] 2603         CALL     TOR
      000D14 CD 04 84         [ 4] 2604         CALL     SWAPP
      000D17 CD 04 31         [ 4] 2605         CALL     RAT
      000D1A CD 06 CD         [ 4] 2606         CALL     SUBB
      000D1D CD 04 84         [ 4] 2607         CALL     SWAPP
      000D20 CD 04 31         [ 4] 2608         CALL     RAT
      000D23 CD 06 6F         [ 4] 2609         CALL     PLUS
      000D26 CD 06 1E         [ 4] 2610         CALL     QDUP
      000D29 CD 03 78         [ 4] 2611         CALL     QBRAN
      000D2C 0D 8D                 2612         .word      NUMQ6
      000D2E CD 09 5B         [ 4] 2613         CALL     ONEM
      000D31 CD 04 3D         [ 4] 2614         CALL     TOR
      000D34 CD 04 74         [ 4] 2615 NUMQ2:  CALL     DUPP
      000D37 CD 04 3D         [ 4] 2616         CALL     TOR
      000D3A CD 03 EB         [ 4] 2617         CALL     CAT
      000D3D CD 05 31         [ 4] 2618         CALL     BASE
      000D40 CD 03 CD         [ 4] 2619         CALL     AT
      000D43 CD 0C 8B         [ 4] 2620         CALL     DIGTQ
      000D46 CD 03 78         [ 4] 2621         CALL     QBRAN
      000D49 0D 7B                 2622         .word      NUMQ4
      000D4B CD 04 84         [ 4] 2623         CALL     SWAPP
      000D4E CD 05 31         [ 4] 2624         CALL     BASE
      000D51 CD 03 CD         [ 4] 2625         CALL     AT
      000D54 CD 08 CD         [ 4] 2626         CALL     STAR
      000D57 CD 06 6F         [ 4] 2627         CALL     PLUS
      000D5A CD 04 1E         [ 4] 2628         CALL     RFROM
      000D5D CD 09 4E         [ 4] 2629         CALL     ONEP
      000D60 CD 03 59         [ 4] 2630         CALL     DONXT
      000D63 0D 34                 2631         .word      NUMQ2
      000D65 CD 04 31         [ 4] 2632         CALL     RAT
      000D68 CD 04 84         [ 4] 2633         CALL     SWAPP
      000D6B CD 04 6A         [ 4] 2634         CALL     DROP
      000D6E CD 03 78         [ 4] 2635         CALL     QBRAN
      000D71 0D 76                 2636         .word      NUMQ3
      000D73 CD 06 9A         [ 4] 2637         CALL     NEGAT
      000D76 CD 04 84         [ 4] 2638 NUMQ3:  CALL     SWAPP
      000D79 20 0F            [ 2] 2639         JRA     NUMQ5
      000D7B CD 04 1E         [ 4] 2640 NUMQ4:  CALL     RFROM
      000D7E CD 04 1E         [ 4] 2641         CALL     RFROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000D81 CD 06 4F         [ 4] 2642         CALL     DDROP
      000D84 CD 06 4F         [ 4] 2643         CALL     DDROP
      000D87 CD 09 BA         [ 4] 2644         CALL     ZERO
      000D8A CD 04 74         [ 4] 2645 NUMQ5:  CALL     DUPP
      000D8D CD 04 1E         [ 4] 2646 NUMQ6:  CALL     RFROM
      000D90 CD 06 4F         [ 4] 2647         CALL     DDROP
      000D93 CD 04 1E         [ 4] 2648         CALL     RFROM
      000D96 CD 05 31         [ 4] 2649         CALL     BASE
      000D99 CC 03 B6         [ 2] 2650         JP     STORE
                                   2651 
                                   2652 ;; Basic I/O
                                   2653 
                                   2654 ;       KEY     ( -- c )
                                   2655 ;       Wait for and return an
                                   2656 ;       input character.
      000D9C 0C C7                 2657         .word      LINK
                           000D9E  2658 LINK = . 
      000D9E 03                    2659         .byte      3
      000D9F 4B 45 59              2660         .ascii     "KEY"
      000DA2                       2661 KEY:
                           000001  2662 .if CONVERT_TO_CODE
      000DA2 72 0B 52 30 FB   [ 2] 2663         btjf UART1_SR,#UART_SR_RXNE,. 
      000DA7 C6 52 31         [ 1] 2664         ld a,UART1_DR 
      000DAA 1D 00 02         [ 2] 2665         subw x,#CELLL 
      000DAD E7 01            [ 1] 2666         ld (1,x),a 
      000DAF 7F               [ 1] 2667         clr (x)
      000DB0 81               [ 4] 2668         ret 
                           000000  2669 .else 
                                   2670 KEY1:   CALL     QKEY
                                   2671         CALL     QBRAN
                                   2672         .word      KEY1
                                   2673         RET
                                   2674 .endif 
                                   2675 
                                   2676 ;       NUF?    ( -- t )
                                   2677 ;       Return false if no input,
                                   2678 ;       else pause and if CR return true.
      000DB1 0D 9E                 2679         .word      LINK
                           000DB3  2680 LINK = . 
      000DB3 04                    2681         .byte      4
      000DB4 4E 55 46 3F           2682         .ascii     "NUF?"
      000DB8                       2683 NUFQ:
      000DB8 CD 03 11         [ 4] 2684         CALL     QKEY
      000DBB CD 04 74         [ 4] 2685         CALL     DUPP
      000DBE CD 03 78         [ 4] 2686         CALL     QBRAN
      000DC1 0D D1                 2687         .word    NUFQ1
      000DC3 CD 06 4F         [ 4] 2688         CALL     DDROP
      000DC6 CD 0D A2         [ 4] 2689         CALL     KEY
      000DC9 CD 03 45         [ 4] 2690         CALL     DOLIT
      000DCC 00 0D                 2691         .word      CRR
      000DCE CC 06 F5         [ 2] 2692         JP     EQUAL
      000DD1 81               [ 4] 2693 NUFQ1:  RET
                                   2694 
                                   2695 ;       SPACE   ( -- )
                                   2696 ;       Send  blank character to
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



                                   2697 ;       output device.
      000DD2 0D B3                 2698         .word      LINK
                           000DD4  2699 LINK = . 
      000DD4 05                    2700         .byte      5
      000DD5 53 50 41 43 45        2701         .ascii     "SPACE"
      000DDA                       2702 SPACE:
      000DDA CD 09 AD         [ 4] 2703         CALL     BLANK
      000DDD CC 03 2F         [ 2] 2704         JP     EMIT
                                   2705 
                                   2706 ;       SPACES  ( +n -- )
                                   2707 ;       Send n spaces to output device.
      000DE0 0D D4                 2708         .word      LINK
                           000DE2  2709 LINK = . 
      000DE2 06                    2710         .byte      6
      000DE3 53 50 41 43 45 53     2711         .ascii     "SPACES"
      000DE9                       2712 SPACS:
      000DE9 CD 09 BA         [ 4] 2713         CALL     ZERO
      000DEC CD 07 52         [ 4] 2714         CALL     MAX
      000DEF CD 04 3D         [ 4] 2715         CALL     TOR
      000DF2 20 03            [ 2] 2716         JRA      CHAR2
      000DF4 CD 0D DA         [ 4] 2717 CHAR1:  CALL     SPACE
      000DF7 CD 03 59         [ 4] 2718 CHAR2:  CALL     DONXT
      000DFA 0D F4                 2719         .word    CHAR1
      000DFC 81               [ 4] 2720         RET
                                   2721 
                                   2722 ;       TYPE    ( b u -- )
                                   2723 ;       Output u characters from b.
      000DFD 0D E2                 2724         .word      LINK
                           000DFF  2725 LINK = . 
      000DFF 04                    2726         .byte      4
      000E00 54 59 50 45           2727         .ascii     "TYPE"
      000E04                       2728 TYPES:
      000E04 CD 04 3D         [ 4] 2729         CALL     TOR
      000E07 20 0C            [ 2] 2730         JRA     TYPE2
      000E09 CD 04 74         [ 4] 2731 TYPE1:  CALL     DUPP
      000E0C CD 03 EB         [ 4] 2732         CALL     CAT
      000E0F CD 03 2F         [ 4] 2733         CALL     EMIT
      000E12 CD 09 4E         [ 4] 2734         CALL     ONEP
      000E15 CD 03 59         [ 4] 2735 TYPE2:  CALL     DONXT
      000E18 0E 09                 2736         .word      TYPE1
      000E1A CC 04 6A         [ 2] 2737         JP     DROP
                                   2738 
                                   2739 ;       CR      ( -- )
                                   2740 ;       Output a carriage return
                                   2741 ;       and a line feed.
      000E1D 0D FF                 2742         .word      LINK
                           000E1F  2743 LINK = . 
      000E1F 02                    2744         .byte      2
      000E20 43 52                 2745         .ascii     "CR"
      000E22                       2746 CR:
      000E22 CD 03 45         [ 4] 2747         CALL     DOLIT
      000E25 00 0D                 2748         .word      CRR
      000E27 CD 03 2F         [ 4] 2749         CALL     EMIT
      000E2A CD 03 45         [ 4] 2750         CALL     DOLIT
      000E2D 00 0A                 2751         .word      LF
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000E2F CC 03 2F         [ 2] 2752         JP     EMIT
                                   2753 
                                   2754 ;       do$     ( -- a )
                                   2755 ;       Return  address of a compiled
                                   2756 ;       string.
      000E32 0E 1F                 2757         .word      LINK
                           000E34  2758 LINK = . 
      000E34 43                    2759 	.byte      COMPO+3
      000E35 44 4F 24              2760         .ascii     "DO$"
      000E38                       2761 DOSTR:
      000E38 CD 04 1E         [ 4] 2762         CALL     RFROM
      000E3B CD 04 31         [ 4] 2763         CALL     RAT
      000E3E CD 04 1E         [ 4] 2764         CALL     RFROM
      000E41 CD 0A 92         [ 4] 2765         CALL     COUNT
      000E44 CD 06 6F         [ 4] 2766         CALL     PLUS
      000E47 CD 04 3D         [ 4] 2767         CALL     TOR
      000E4A CD 04 84         [ 4] 2768         CALL     SWAPP
      000E4D CD 04 3D         [ 4] 2769         CALL     TOR
      000E50 81               [ 4] 2770         RET
                                   2771 
                                   2772 ;       $"|     ( -- a )
                                   2773 ;       Run time routine compiled by $".
                                   2774 ;       Return address of a compiled string.
      000E51 0E 34                 2775         .word      LINK
                           000E53  2776 LINK = . 
      000E53 43                    2777 	.byte      COMPO+3
      000E54 24 22 7C              2778         .byte     '$','"','|'
      000E57                       2779 STRQP:
      000E57 CD 0E 38         [ 4] 2780         CALL     DOSTR
      000E5A 81               [ 4] 2781         RET
                                   2782 
                                   2783 ;       ."|     ( -- )
                                   2784 ;       Run time routine of ." .
                                   2785 ;       Output a compiled string.
      000E5B 0E 53                 2786         .word      LINK
                           000E5D  2787 LINK = . 
      000E5D 43                    2788 	.byte      COMPO+3
      000E5E 2E 22 7C              2789         .byte     '.','"','|'
      000E61                       2790 DOTQP:
      000E61 CD 0E 38         [ 4] 2791         CALL     DOSTR
      000E64 CD 0A 92         [ 4] 2792         CALL     COUNT
      000E67 CC 0E 04         [ 2] 2793         JP     TYPES
                                   2794 
                                   2795 ;       .R      ( n +n -- )
                                   2796 ;       Display an integer in a field
                                   2797 ;       of n columns, right justified.
      000E6A 0E 5D                 2798         .word      LINK
                           000E6C  2799 LINK = . 
      000E6C 02                    2800         .byte      2
      000E6D 2E 52                 2801         .ascii     ".R"
      000E6F                       2802 DOTR:
      000E6F CD 04 3D         [ 4] 2803         CALL     TOR
      000E72 CD 0C 44         [ 4] 2804         CALL     STR
      000E75 CD 04 1E         [ 4] 2805         CALL     RFROM
      000E78 CD 04 9E         [ 4] 2806         CALL     OVER
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000E7B CD 06 CD         [ 4] 2807         CALL     SUBB
      000E7E CD 0D E9         [ 4] 2808         CALL     SPACS
      000E81 CC 0E 04         [ 2] 2809         JP     TYPES
                                   2810 
                                   2811 ;       U.R     ( u +n -- )
                                   2812 ;       Display an unsigned integer
                                   2813 ;       in n column, right justified.
      000E84 0E 6C                 2814         .word      LINK
                           000E86  2815 LINK = . 
      000E86 03                    2816         .byte      3
      000E87 55 2E 52              2817         .ascii     "U.R"
      000E8A                       2818 UDOTR:
      000E8A CD 04 3D         [ 4] 2819         CALL     TOR
      000E8D CD 0B C7         [ 4] 2820         CALL     BDIGS
      000E90 CD 0C 01         [ 4] 2821         CALL     DIGS
      000E93 CD 0C 2C         [ 4] 2822         CALL     EDIGS
      000E96 CD 04 1E         [ 4] 2823         CALL     RFROM
      000E99 CD 04 9E         [ 4] 2824         CALL     OVER
      000E9C CD 06 CD         [ 4] 2825         CALL     SUBB
      000E9F CD 0D E9         [ 4] 2826         CALL     SPACS
      000EA2 CC 0E 04         [ 2] 2827         JP     TYPES
                                   2828 
                                   2829 ;       U.      ( u -- )
                                   2830 ;       Display an unsigned integer
                                   2831 ;       in free format.
      000EA5 0E 86                 2832         .word      LINK
                           000EA7  2833 LINK = . 
      000EA7 02                    2834         .byte      2
      000EA8 55 2E                 2835         .ascii     "U."
      000EAA                       2836 UDOT:
      000EAA CD 0B C7         [ 4] 2837         CALL     BDIGS
      000EAD CD 0C 01         [ 4] 2838         CALL     DIGS
      000EB0 CD 0C 2C         [ 4] 2839         CALL     EDIGS
      000EB3 CD 0D DA         [ 4] 2840         CALL     SPACE
      000EB6 CC 0E 04         [ 2] 2841         JP     TYPES
                                   2842 
                                   2843 ;       .       ( w -- )
                                   2844 ;       Display an integer in free
                                   2845 ;       format, preceeded by a space.
      000EB9 0E A7                 2846         .word      LINK
                           000EBB  2847 LINK = . 
      000EBB 01                    2848         .byte      1
      000EBC 2E                    2849         .ascii     "."
      000EBD                       2850 DOT:
      000EBD CD 05 31         [ 4] 2851         CALL     BASE
      000EC0 CD 03 CD         [ 4] 2852         CALL     AT
      000EC3 CD 03 45         [ 4] 2853         CALL     DOLIT
      000EC6 00 0A                 2854         .word      10
      000EC8 CD 04 E9         [ 4] 2855         CALL     XORR    ;?decimal
      000ECB CD 03 78         [ 4] 2856         CALL     QBRAN
      000ECE 0E D3                 2857         .word      DOT1
      000ED0 CC 0E AA         [ 2] 2858         JP     UDOT
      000ED3 CD 0C 44         [ 4] 2859 DOT1:   CALL     STR
      000ED6 CD 0D DA         [ 4] 2860         CALL     SPACE
      000ED9 CC 0E 04         [ 2] 2861         JP     TYPES
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                                   2862 
                                   2863 ;       ?       ( a -- )
                                   2864 ;       Display contents in memory cell.
      000EDC 0E BB                 2865         .word      LINK
                                   2866         
                           000EDE  2867 LINK = . 
      000EDE 01                    2868         .byte      1
      000EDF 3F                    2869         .ascii     "?"
      000EE0                       2870 QUEST:
      000EE0 CD 03 CD         [ 4] 2871         CALL     AT
      000EE3 CC 0E BD         [ 2] 2872         JP     DOT
                                   2873 
                                   2874 ;; Parsing
                                   2875 
                                   2876 ;       parse   ( b u c -- b u delta ; <string> )
                                   2877 ;       Scan string delimited by c.
                                   2878 ;       Return found string and its offset.
      000EE6 0E DE                 2879         .word      LINK
                           000EE8  2880 LINK = . 
      000EE8 05                    2881         .byte      5
      000EE9 70 61 72 73 65        2882         .ascii     "parse"
      000EEE                       2883 PARS:
      000EEE CD 05 40         [ 4] 2884         CALL     TEMP
      000EF1 CD 03 B6         [ 4] 2885         CALL     STORE
      000EF4 CD 04 9E         [ 4] 2886         CALL     OVER
      000EF7 CD 04 3D         [ 4] 2887         CALL     TOR
      000EFA CD 04 74         [ 4] 2888         CALL     DUPP
      000EFD CD 03 78         [ 4] 2889         CALL     QBRAN
      000F00 0F A6                 2890         .word    PARS8
      000F02 CD 09 5B         [ 4] 2891         CALL     ONEM
      000F05 CD 05 40         [ 4] 2892         CALL     TEMP
      000F08 CD 03 CD         [ 4] 2893         CALL     AT
      000F0B CD 09 AD         [ 4] 2894         CALL     BLANK
      000F0E CD 06 F5         [ 4] 2895         CALL     EQUAL
      000F11 CD 03 78         [ 4] 2896         CALL     QBRAN
      000F14 0F 47                 2897         .word      PARS3
      000F16 CD 04 3D         [ 4] 2898         CALL     TOR
      000F19 CD 09 AD         [ 4] 2899 PARS1:  CALL     BLANK
      000F1C CD 04 9E         [ 4] 2900         CALL     OVER
      000F1F CD 03 EB         [ 4] 2901         CALL     CAT     ;skip leading blanks ONLY
      000F22 CD 06 CD         [ 4] 2902         CALL     SUBB
      000F25 CD 04 AD         [ 4] 2903         CALL     ZLESS
      000F28 CD 06 89         [ 4] 2904         CALL     INVER
      000F2B CD 03 78         [ 4] 2905         CALL     QBRAN
      000F2E 0F 44                 2906         .word      PARS2
      000F30 CD 09 4E         [ 4] 2907         CALL     ONEP
      000F33 CD 03 59         [ 4] 2908         CALL     DONXT
      000F36 0F 19                 2909         .word      PARS1
      000F38 CD 04 1E         [ 4] 2910         CALL     RFROM
      000F3B CD 04 6A         [ 4] 2911         CALL     DROP
      000F3E CD 09 BA         [ 4] 2912         CALL     ZERO
      000F41 CC 04 74         [ 2] 2913         JP     DUPP
      000F44 CD 04 1E         [ 4] 2914 PARS2:  CALL     RFROM
      000F47 CD 04 9E         [ 4] 2915 PARS3:  CALL     OVER
      000F4A CD 04 84         [ 4] 2916         CALL     SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000F4D CD 04 3D         [ 4] 2917         CALL     TOR
      000F50 CD 05 40         [ 4] 2918 PARS4:  CALL     TEMP
      000F53 CD 03 CD         [ 4] 2919         CALL     AT
      000F56 CD 04 9E         [ 4] 2920         CALL     OVER
      000F59 CD 03 EB         [ 4] 2921         CALL     CAT
      000F5C CD 06 CD         [ 4] 2922         CALL     SUBB    ;scan for delimiter
      000F5F CD 05 40         [ 4] 2923         CALL     TEMP
      000F62 CD 03 CD         [ 4] 2924         CALL     AT
      000F65 CD 09 AD         [ 4] 2925         CALL     BLANK
      000F68 CD 06 F5         [ 4] 2926         CALL     EQUAL
      000F6B CD 03 78         [ 4] 2927         CALL     QBRAN
      000F6E 0F 73                 2928         .word      PARS5
      000F70 CD 04 AD         [ 4] 2929         CALL     ZLESS
      000F73 CD 03 78         [ 4] 2930 PARS5:  CALL     QBRAN
      000F76 0F 88                 2931         .word      PARS6
      000F78 CD 09 4E         [ 4] 2932         CALL     ONEP
      000F7B CD 03 59         [ 4] 2933         CALL     DONXT
      000F7E 0F 50                 2934         .word      PARS4
      000F80 CD 04 74         [ 4] 2935         CALL     DUPP
      000F83 CD 04 3D         [ 4] 2936         CALL     TOR
      000F86 20 0F            [ 2] 2937         JRA     PARS7
      000F88 CD 04 1E         [ 4] 2938 PARS6:  CALL     RFROM
      000F8B CD 04 6A         [ 4] 2939         CALL     DROP
      000F8E CD 04 74         [ 4] 2940         CALL     DUPP
      000F91 CD 09 4E         [ 4] 2941         CALL     ONEP
      000F94 CD 04 3D         [ 4] 2942         CALL     TOR
      000F97 CD 04 9E         [ 4] 2943 PARS7:  CALL     OVER
      000F9A CD 06 CD         [ 4] 2944         CALL     SUBB
      000F9D CD 04 1E         [ 4] 2945         CALL     RFROM
      000FA0 CD 04 1E         [ 4] 2946         CALL     RFROM
      000FA3 CC 06 CD         [ 2] 2947         JP     SUBB
      000FA6 CD 04 9E         [ 4] 2948 PARS8:  CALL     OVER
      000FA9 CD 04 1E         [ 4] 2949         CALL     RFROM
      000FAC CC 06 CD         [ 2] 2950         JP     SUBB
                                   2951 
                                   2952 ;       PARSE   ( c -- b u ; <string> )
                                   2953 ;       Scan input stream and return
                                   2954 ;       counted string delimited by c.
      000FAF 0E E8                 2955         .word      LINK
                           000FB1  2956 LINK = . 
      000FB1 05                    2957         .byte      5
      000FB2 50 41 52 53 45        2958         .ascii     "PARSE"
      000FB7                       2959 PARSE:
      000FB7 CD 04 3D         [ 4] 2960         CALL     TOR
      000FBA CD 0A CB         [ 4] 2961         CALL     TIB
      000FBD CD 05 4F         [ 4] 2962         CALL     INN
      000FC0 CD 03 CD         [ 4] 2963         CALL     AT
      000FC3 CD 06 6F         [ 4] 2964         CALL     PLUS    ;current input buffer pointer
      000FC6 CD 05 5F         [ 4] 2965         CALL     NTIB
      000FC9 CD 03 CD         [ 4] 2966         CALL     AT
      000FCC CD 05 4F         [ 4] 2967         CALL     INN
      000FCF CD 03 CD         [ 4] 2968         CALL     AT
      000FD2 CD 06 CD         [ 4] 2969         CALL     SUBB    ;remaining count
      000FD5 CD 04 1E         [ 4] 2970         CALL     RFROM
      000FD8 CD 0E EE         [ 4] 2971         CALL     PARS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      000FDB CD 05 4F         [ 4] 2972         CALL     INN
      000FDE CC 0A 2B         [ 2] 2973         JP     PSTOR
                                   2974 
                                   2975 ;       .(      ( -- )
                                   2976 ;       Output following string up to next ) .
      000FE1 0F B1                 2977         .word      LINK
                           000FE3  2978 LINK = . 
      000FE3 82                    2979 	.byte      IMEDD+2
      000FE4 2E 28                 2980         .ascii     ".("
      000FE6                       2981 DOTPR:
      000FE6 CD 03 45         [ 4] 2982         CALL     DOLIT
      000FE9 00 29                 2983         .word     41	; ")"
      000FEB CD 0F B7         [ 4] 2984         CALL     PARSE
      000FEE CC 0E 04         [ 2] 2985         JP     TYPES
                                   2986 
                                   2987 ;       (       ( -- )
                                   2988 ;       Ignore following string up to next ).
                                   2989 ;       A comment.
      000FF1 0F E3                 2990         .word      LINK
                           000FF3  2991 LINK = . 
      000FF3 81                    2992 	.byte      IMEDD+1
      000FF4 28                    2993         .ascii     "("
      000FF5                       2994 PAREN:
      000FF5 CD 03 45         [ 4] 2995         CALL     DOLIT
      000FF8 00 29                 2996         .word     41	; ")"
      000FFA CD 0F B7         [ 4] 2997         CALL     PARSE
      000FFD CC 06 4F         [ 2] 2998         JP     DDROP
                                   2999 
                                   3000 ;       \       ( -- )
                                   3001 ;       Ignore following text till
                                   3002 ;       end of line.
      001000 0F F3                 3003         .word      LINK
                           001002  3004 LINK = . 
      001002 81                    3005 	.byte      IMEDD+1
      001003 5C                    3006         .ascii     "\"
      001004                       3007 BKSLA:
                           000001  3008 .if CONVERT_TO_CODE
      001004 90 AE 00 0C      [ 2] 3009         ldw y,#UCTIB ; #TIB  
      001008 90 FE            [ 2] 3010         ldw y,(y)
      00100A 90 89            [ 2] 3011         pushw y ; count in TIB 
      00100C 90 AE 00 0A      [ 2] 3012         ldw y,#UINN ; >IN 
      001010 90 BF 24         [ 2] 3013         ldw YTEMP,y
      001013 90 85            [ 2] 3014         popw y 
      001015 91 CF 24         [ 5] 3015         ldw [YTEMP],y
      001018 81               [ 4] 3016         ret 
                           000000  3017 .else
                                   3018         CALL     NTIB
                                   3019         CALL     AT
                                   3020         CALL     INN
                                   3021         JP     STORE
                                   3022 .endif 
                                   3023 
                                   3024 ;       WORD    ( c -- a ; <string> )
                                   3025 ;       Parse a word from input stream
                                   3026 ;       and copy it to code dictionary.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      001019 10 02                 3027         .word      LINK
                           00101B  3028 LINK = . 
      00101B 04                    3029         .byte      4
      00101C 57 4F 52 44           3030         .ascii     "WORD"
      001020                       3031 WORDD:
      001020 CD 0F B7         [ 4] 3032         CALL     PARSE
      001023 CD 0A A9         [ 4] 3033         CALL     HERE
      001026 CD 09 23         [ 4] 3034         CALL     CELLP
      001029 CC 0B 6A         [ 2] 3035         JP     PACKS
                                   3036 
                                   3037 ;       TOKEN   ( -- a ; <string> )
                                   3038 ;       Parse a word from input stream
                                   3039 ;       and copy it to name dictionary.
      00102C 10 1B                 3040         .word      LINK
                           00102E  3041 LINK = . 
      00102E 05                    3042         .byte      5
      00102F 54 4F 4B 45 4E        3043         .ascii     "TOKEN"
      001034                       3044 TOKEN:
      001034 CD 09 AD         [ 4] 3045         CALL     BLANK
      001037 CC 10 20         [ 2] 3046         JP     WORDD
                                   3047 
                                   3048 ;; Dictionary search
                                   3049 
                                   3050 ;       NAME>   ( na -- ca )
                                   3051 ;       Return a code address given
                                   3052 ;       a name address.
      00103A 10 2E                 3053         .word      LINK
                           00103C  3054 LINK = . 
      00103C 05                    3055         .byte      5
      00103D 4E 41 4D 45 3E        3056         .ascii     "NAME>"
      001042                       3057 NAMET:
      001042 CD 0A 92         [ 4] 3058         CALL     COUNT
      001045 CD 03 45         [ 4] 3059         CALL     DOLIT
      001048 00 1F                 3060         .word      31
      00104A CD 04 C0         [ 4] 3061         CALL     ANDD
      00104D CC 06 6F         [ 2] 3062         JP     PLUS
                                   3063 
                                   3064 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   3065 ;       Compare u cells in two
                                   3066 ;       strings. Return 0 if identical.
      001050 10 3C                 3067         .word      LINK
                           001052  3068 LINK = . 
      001052 05                    3069         .byte       5
      001053 53 41 4D 45 3F        3070         .ascii     "SAME?"
      001058                       3071 SAMEQ:
      001058 CD 09 5B         [ 4] 3072         CALL     ONEM
      00105B CD 04 3D         [ 4] 3073         CALL     TOR
      00105E 20 29            [ 2] 3074         JRA     SAME2
      001060 CD 04 9E         [ 4] 3075 SAME1:  CALL     OVER
      001063 CD 04 31         [ 4] 3076         CALL     RAT
      001066 CD 06 6F         [ 4] 3077         CALL     PLUS
      001069 CD 03 EB         [ 4] 3078         CALL     CAT
      00106C CD 04 9E         [ 4] 3079         CALL     OVER
      00106F CD 04 31         [ 4] 3080         CALL     RAT
      001072 CD 06 6F         [ 4] 3081         CALL     PLUS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      001075 CD 03 EB         [ 4] 3082         CALL     CAT
      001078 CD 06 CD         [ 4] 3083         CALL     SUBB
      00107B CD 06 1E         [ 4] 3084         CALL     QDUP
      00107E CD 03 78         [ 4] 3085         CALL     QBRAN
      001081 10 89                 3086         .word      SAME2
      001083 CD 04 1E         [ 4] 3087         CALL     RFROM
      001086 CC 04 6A         [ 2] 3088         JP     DROP
      001089 CD 03 59         [ 4] 3089 SAME2:  CALL     DONXT
      00108C 10 60                 3090         .word      SAME1
      00108E CC 09 BA         [ 2] 3091         JP     ZERO
                                   3092 
                                   3093 ;       find    ( a va -- ca na | a F )
                                   3094 ;       Search vocabulary for string.
                                   3095 ;       Return ca and na if succeeded.
      001091 10 52                 3096         .word      LINK
                           001093  3097 LINK = . 
      001093 04                    3098         .byte      4
      001094 46 49 4E 44           3099         .ascii     "FIND"
      001098                       3100 FIND:
      001098 CD 04 84         [ 4] 3101         CALL     SWAPP
      00109B CD 04 74         [ 4] 3102         CALL     DUPP
      00109E CD 03 EB         [ 4] 3103         CALL     CAT
      0010A1 CD 05 40         [ 4] 3104         CALL     TEMP
      0010A4 CD 03 B6         [ 4] 3105         CALL     STORE
      0010A7 CD 04 74         [ 4] 3106         CALL     DUPP
      0010AA CD 03 CD         [ 4] 3107         CALL     AT
      0010AD CD 04 3D         [ 4] 3108         CALL     TOR
      0010B0 CD 09 23         [ 4] 3109         CALL     CELLP
      0010B3 CD 04 84         [ 4] 3110         CALL     SWAPP
      0010B6 CD 03 CD         [ 4] 3111 FIND1:  CALL     AT
      0010B9 CD 04 74         [ 4] 3112         CALL     DUPP
      0010BC CD 03 78         [ 4] 3113         CALL     QBRAN
      0010BF 10 F5                 3114         .word      FIND6
      0010C1 CD 04 74         [ 4] 3115         CALL     DUPP
      0010C4 CD 03 CD         [ 4] 3116         CALL     AT
      0010C7 CD 03 45         [ 4] 3117         CALL     DOLIT
      0010CA 1F 7F                 3118         .word      MASKK
      0010CC CD 04 C0         [ 4] 3119         CALL     ANDD
      0010CF CD 04 31         [ 4] 3120         CALL     RAT
      0010D2 CD 04 E9         [ 4] 3121         CALL     XORR
      0010D5 CD 03 78         [ 4] 3122         CALL     QBRAN
      0010D8 10 E4                 3123         .word      FIND2
      0010DA CD 09 23         [ 4] 3124         CALL     CELLP
      0010DD CD 03 45         [ 4] 3125         CALL     DOLIT
      0010E0 FF FF                 3126         .word     0xFFFF
      0010E2 20 0C            [ 2] 3127         JRA     FIND3
      0010E4 CD 09 23         [ 4] 3128 FIND2:  CALL     CELLP
      0010E7 CD 05 40         [ 4] 3129         CALL     TEMP
      0010EA CD 03 CD         [ 4] 3130         CALL     AT
      0010ED CD 10 58         [ 4] 3131         CALL     SAMEQ
      0010F0 CD 03 8F         [ 4] 3132 FIND3:  CALL     BRAN
      0010F3 11 04                 3133         .word      FIND4
      0010F5 CD 04 1E         [ 4] 3134 FIND6:  CALL     RFROM
      0010F8 CD 04 6A         [ 4] 3135         CALL     DROP
      0010FB CD 04 84         [ 4] 3136         CALL     SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      0010FE CD 09 32         [ 4] 3137         CALL     CELLM
      001101 CC 04 84         [ 2] 3138         JP     SWAPP
      001104 CD 03 78         [ 4] 3139 FIND4:  CALL     QBRAN
      001107 11 11                 3140         .word      FIND5
      001109 CD 09 32         [ 4] 3141         CALL     CELLM
      00110C CD 09 32         [ 4] 3142         CALL     CELLM
      00110F 20 A5            [ 2] 3143         JRA     FIND1
      001111 CD 04 1E         [ 4] 3144 FIND5:  CALL     RFROM
      001114 CD 04 6A         [ 4] 3145         CALL     DROP
      001117 CD 04 84         [ 4] 3146         CALL     SWAPP
      00111A CD 04 6A         [ 4] 3147         CALL     DROP
      00111D CD 09 32         [ 4] 3148         CALL     CELLM
      001120 CD 04 74         [ 4] 3149         CALL     DUPP
      001123 CD 10 42         [ 4] 3150         CALL     NAMET
      001126 CC 04 84         [ 2] 3151         JP     SWAPP
                                   3152 
                                   3153 ;       NAME?   ( a -- ca na | a F )
                                   3154 ;       Search vocabularies for a string.
      001129 10 93                 3155         .word      LINK
                           00112B  3156 LINK = . 
      00112B 05                    3157         .byte      5
      00112C 4E 41 4D 45 3F        3158         .ascii     "NAME?"
      001131                       3159 NAMEQ:
      001131 CD 05 B4         [ 4] 3160         CALL   CNTXT
      001134 CC 10 98         [ 2] 3161         JP     FIND
                                   3162 
                                   3163 ;; Terminal response
                                   3164 
                                   3165 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3166 ;       Backup cursor by one character.
      001137 11 2B                 3167         .word      LINK
                           001139  3168 LINK = . 
      001139 02                    3169         .byte      2
      00113A 5E 48                 3170         .ascii     "^H"
      00113C                       3171 BKSP:
      00113C CD 04 3D         [ 4] 3172         CALL     TOR
      00113F CD 04 9E         [ 4] 3173         CALL     OVER
      001142 CD 04 1E         [ 4] 3174         CALL     RFROM
      001145 CD 04 84         [ 4] 3175         CALL     SWAPP
      001148 CD 04 9E         [ 4] 3176         CALL     OVER
      00114B CD 04 E9         [ 4] 3177         CALL     XORR
      00114E CD 03 78         [ 4] 3178         CALL     QBRAN
      001151 11 6C                 3179         .word      BACK1
      001153 CD 03 45         [ 4] 3180         CALL     DOLIT
      001156 00 08                 3181         .word      BKSPP
      001158 CD 03 2F         [ 4] 3182         CALL     EMIT
      00115B CD 09 5B         [ 4] 3183         CALL     ONEM
      00115E CD 09 AD         [ 4] 3184         CALL     BLANK
      001161 CD 03 2F         [ 4] 3185         CALL     EMIT
      001164 CD 03 45         [ 4] 3186         CALL     DOLIT
      001167 00 08                 3187         .word      BKSPP
      001169 CC 03 2F         [ 2] 3188         JP     EMIT
      00116C 81               [ 4] 3189 BACK1:  RET
                                   3190 
                                   3191 ;       TAP    ( bot eot cur c -- bot eot cur )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                                   3192 ;       Accept and echo key stroke
                                   3193 ;       and bump cursor.
      00116D 11 39                 3194         .word      LINK
                           00116F  3195 LINK = . 
      00116F 03                    3196         .byte      3
      001170 54 41 50              3197         .ascii     "TAP"
      001173                       3198 TAP:
      001173 CD 04 74         [ 4] 3199         CALL     DUPP
      001176 CD 03 2F         [ 4] 3200         CALL     EMIT
      001179 CD 04 9E         [ 4] 3201         CALL     OVER
      00117C CD 03 DA         [ 4] 3202         CALL     CSTOR
      00117F CC 09 4E         [ 2] 3203         JP     ONEP
                                   3204 
                                   3205 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3206 ;       Process a key stroke,
                                   3207 ;       CR or backspace.
      001182 11 6F                 3208         .word      LINK
                           001184  3209 LINK = . 
      001184 04                    3210         .byte      4
      001185 4B 54 41 50           3211         .ascii     "KTAP"
      001189                       3212 KTAP:
      001189 CD 04 74         [ 4] 3213         CALL     DUPP
      00118C CD 03 45         [ 4] 3214         CALL     DOLIT
      00118F 00 0D                 3215         .word      CRR
      001191 CD 04 E9         [ 4] 3216         CALL     XORR
      001194 CD 03 78         [ 4] 3217         CALL     QBRAN
      001197 11 AF                 3218         .word      KTAP2
      001199 CD 03 45         [ 4] 3219         CALL     DOLIT
      00119C 00 08                 3220         .word      BKSPP
      00119E CD 04 E9         [ 4] 3221         CALL     XORR
      0011A1 CD 03 78         [ 4] 3222         CALL     QBRAN
      0011A4 11 AC                 3223         .word      KTAP1
      0011A6 CD 09 AD         [ 4] 3224         CALL     BLANK
      0011A9 CC 11 73         [ 2] 3225         JP     TAP
      0011AC CC 11 3C         [ 2] 3226 KTAP1:  JP     BKSP
      0011AF CD 04 6A         [ 4] 3227 KTAP2:  CALL     DROP
      0011B2 CD 04 84         [ 4] 3228         CALL     SWAPP
      0011B5 CD 04 6A         [ 4] 3229         CALL     DROP
      0011B8 CC 04 74         [ 2] 3230         JP     DUPP
                                   3231 
                                   3232 ;       accept  ( b u -- b u )
                                   3233 ;       Accept characters to input
                                   3234 ;       buffer. Return with actual count.
      0011BB 11 84                 3235         .word      LINK
                           0011BD  3236 LINK = . 
      0011BD 06                    3237         .byte      6
      0011BE 41 43 43 45 50 54     3238         .ascii     "ACCEPT"
      0011C4                       3239 ACCEP:
      0011C4 CD 04 9E         [ 4] 3240         CALL     OVER
      0011C7 CD 06 6F         [ 4] 3241         CALL     PLUS
      0011CA CD 04 9E         [ 4] 3242         CALL     OVER
      0011CD CD 06 5A         [ 4] 3243 ACCP1:  CALL     DDUP
      0011D0 CD 04 E9         [ 4] 3244         CALL     XORR
      0011D3 CD 03 78         [ 4] 3245         CALL     QBRAN
      0011D6 11 F8                 3246         .word      ACCP4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      0011D8 CD 0D A2         [ 4] 3247         CALL     KEY
      0011DB CD 04 74         [ 4] 3248         CALL     DUPP
      0011DE CD 09 AD         [ 4] 3249         CALL     BLANK
      0011E1 CD 03 45         [ 4] 3250         CALL     DOLIT
      0011E4 00 7F                 3251         .word      127
      0011E6 CD 07 8F         [ 4] 3252         CALL     WITHI
      0011E9 CD 03 78         [ 4] 3253         CALL     QBRAN
      0011EC 11 F3                 3254         .word      ACCP2
      0011EE CD 11 73         [ 4] 3255         CALL     TAP
      0011F1 20 03            [ 2] 3256         JRA     ACCP3
      0011F3 CD 11 89         [ 4] 3257 ACCP2:  CALL     KTAP
      0011F6 20 D5            [ 2] 3258 ACCP3:  JRA     ACCP1
      0011F8 CD 04 6A         [ 4] 3259 ACCP4:  CALL     DROP
      0011FB CD 04 9E         [ 4] 3260         CALL     OVER
      0011FE CC 06 CD         [ 2] 3261         JP     SUBB
                                   3262 
                                   3263 ;       QUERY   ( -- )
                                   3264 ;       Accept input stream to
                                   3265 ;       terminal input buffer.
      001201 11 BD                 3266         .word      LINK
                                   3267         
                           001203  3268 LINK = . 
      001203 05                    3269         .byte      5
      001204 51 55 45 52 59        3270         .ascii     "QUERY"
      001209                       3271 QUERY:
      001209 CD 0A CB         [ 4] 3272         CALL     TIB
      00120C CD 03 45         [ 4] 3273         CALL     DOLIT
      00120F 00 50                 3274         .word      80
      001211 CD 11 C4         [ 4] 3275         CALL     ACCEP
      001214 CD 05 5F         [ 4] 3276         CALL     NTIB
      001217 CD 03 B6         [ 4] 3277         CALL     STORE
      00121A CD 04 6A         [ 4] 3278         CALL     DROP
      00121D CD 09 BA         [ 4] 3279         CALL     ZERO
      001220 CD 05 4F         [ 4] 3280         CALL     INN
      001223 CC 03 B6         [ 2] 3281         JP     STORE
                                   3282 
                                   3283 ;       ABORT   ( -- )
                                   3284 ;       Reset data stack and
                                   3285 ;       jump to QUIT.
      001226 12 03                 3286         .word      LINK
                           001228  3287 LINK = . 
      001228 05                    3288         .byte      5
      001229 41 42 4F 52 54        3289         .ascii     "ABORT"
      00122E                       3290 ABORT:
      00122E CD 13 25         [ 4] 3291         CALL     PRESE
      001231 CC 13 42         [ 2] 3292         JP     QUIT
                                   3293 
                                   3294 ;       abort"  ( f -- )
                                   3295 ;       Run time routine of ABORT".
                                   3296 ;       Abort with a message.
      001234 12 28                 3297         .word      LINK
                           001236  3298 LINK = . 
      001236 46                    3299 	.byte      COMPO+6
      001237 41 42 4F 52 54        3300         .ascii     "ABORT"
      00123C 22                    3301         .byte      '"'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      00123D                       3302 ABORQ:
      00123D CD 03 78         [ 4] 3303         CALL     QBRAN
      001240 12 5C                 3304         .word      ABOR2   ;text flag
      001242 CD 0E 38         [ 4] 3305         CALL     DOSTR
      001245 CD 0D DA         [ 4] 3306 ABOR1:  CALL     SPACE
      001248 CD 0A 92         [ 4] 3307         CALL     COUNT
      00124B CD 0E 04         [ 4] 3308         CALL     TYPES
      00124E CD 03 45         [ 4] 3309         CALL     DOLIT
      001251 00 3F                 3310         .word     63 ; "?"
      001253 CD 03 2F         [ 4] 3311         CALL     EMIT
      001256 CD 0E 22         [ 4] 3312         CALL     CR
      001259 CC 12 2E         [ 2] 3313         JP     ABORT   ;pass error string
      00125C CD 0E 38         [ 4] 3314 ABOR2:  CALL     DOSTR
      00125F CC 04 6A         [ 2] 3315         JP     DROP
                                   3316 
                                   3317 ;; The text interpreter
                                   3318 
                                   3319 ;       $INTERPRET      ( a -- )
                                   3320 ;       Interpret a word. If failed,
                                   3321 ;       try to convert it to an integer.
      001262 12 36                 3322         .word      LINK
                           001264  3323 LINK = . 
      001264 0A                    3324         .byte      10
      001265 24 49 4E 54 45 52 50  3325         .ascii     "$INTERPRET"
             52 45 54
      00126F                       3326 INTER:
      00126F CD 11 31         [ 4] 3327         CALL     NAMEQ
      001272 CD 06 1E         [ 4] 3328         CALL     QDUP    ;?defined
      001275 CD 03 78         [ 4] 3329         CALL     QBRAN
      001278 12 99                 3330         .word      INTE1
      00127A CD 03 CD         [ 4] 3331         CALL     AT
      00127D CD 03 45         [ 4] 3332         CALL     DOLIT
      001280 40 00                 3333 	.word       0x4000	; COMPO*256
      001282 CD 04 C0         [ 4] 3334         CALL     ANDD    ;?compile only lexicon bits
      001285 CD 12 3D         [ 4] 3335         CALL     ABORQ
      001288 0D                    3336         .byte      13
      001289 20 63 6F 6D 70 69 6C  3337         .ascii     " compile only"
             65 20 6F 6E 6C 79
      001296 CC 03 9F         [ 2] 3338         JP     EXECU
      001299 CD 0C CF         [ 4] 3339 INTE1:  CALL     NUMBQ   ;convert a number
      00129C CD 03 78         [ 4] 3340         CALL     QBRAN
      00129F 12 45                 3341         .word    ABOR1
      0012A1 81               [ 4] 3342         RET
                                   3343 
                                   3344 ;       [       ( -- )
                                   3345 ;       Start  text interpreter.
      0012A2 12 64                 3346         .word      LINK
                           0012A4  3347 LINK = . 
      0012A4 81                    3348 	.byte      IMEDD+1
      0012A5 5B                    3349         .ascii     "["
      0012A6                       3350 LBRAC:
      0012A6 CD 03 45         [ 4] 3351         CALL   DOLIT
      0012A9 12 6F                 3352         .word  INTER
      0012AB CD 05 92         [ 4] 3353         CALL   TEVAL
      0012AE CC 03 B6         [ 2] 3354         JP     STORE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



                                   3355 
                                   3356 ;       .OK     ( -- )
                                   3357 ;       Display 'ok' while interpreting.
      0012B1 12 A4                 3358         .word      LINK
                           0012B3  3359 LINK = . 
      0012B3 03                    3360         .byte      3
      0012B4 2E 4F 4B              3361         .ascii     ".OK"
      0012B7                       3362 DOTOK:
      0012B7 CD 03 45         [ 4] 3363         CALL     DOLIT
      0012BA 12 6F                 3364         .word      INTER
      0012BC CD 05 92         [ 4] 3365         CALL     TEVAL
      0012BF CD 03 CD         [ 4] 3366         CALL     AT
      0012C2 CD 06 F5         [ 4] 3367         CALL     EQUAL
      0012C5 CD 03 78         [ 4] 3368         CALL     QBRAN
      0012C8 12 D1                 3369         .word      DOTO1
      0012CA CD 0E 61         [ 4] 3370         CALL     DOTQP
      0012CD 03                    3371         .byte      3
      0012CE 20 6F 6B              3372         .ascii     " ok"
      0012D1 CC 0E 22         [ 2] 3373 DOTO1:  JP     CR
                                   3374 
                                   3375 ;       ?STACK  ( -- )
                                   3376 ;       Abort if stack underflows.
      0012D4 12 B3                 3377         .word      LINK
                           0012D6  3378 LINK = . 
      0012D6 06                    3379         .byte      6
      0012D7 3F 53 54 41 43 4B     3380         .ascii     "?STACK"
      0012DD                       3381 QSTAC: 
      0012DD CD 09 FD         [ 4] 3382         CALL     DEPTH
      0012E0 CD 04 AD         [ 4] 3383         CALL     ZLESS   ;check only for underflow
      0012E3 CD 12 3D         [ 4] 3384         CALL     ABORQ
      0012E6 0B                    3385         .byte      11
      0012E7 20 75 6E 64 65 72 66  3386         .ascii     " underflow "
             6C 6F 77 20
      0012F2 81               [ 4] 3387         RET
                                   3388 
                                   3389 ;       EVAL    ( -- )
                                   3390 ;       Interpret  input stream.
      0012F3 12 D6                 3391         .word      LINK
                           0012F5  3392 LINK = . 
      0012F5 04                    3393         .byte      4
      0012F6 45 56 41 4C           3394         .ascii     "EVAL"
      0012FA                       3395 EVAL:
      0012FA CD 10 34         [ 4] 3396 EVAL1:  CALL     TOKEN
      0012FD CD 04 74         [ 4] 3397         CALL     DUPP
      001300 CD 03 EB         [ 4] 3398         CALL     CAT     ;?input stream empty
      001303 CD 03 78         [ 4] 3399         CALL     QBRAN
      001306 13 16                 3400         .word    EVAL2
      001308 CD 05 92         [ 4] 3401         CALL     TEVAL
      00130B CD 0A DF         [ 4] 3402         CALL     ATEXE
      00130E CD 12 DD         [ 4] 3403         CALL     QSTAC   ;evaluate input, check stack
      001311 CD 03 8F         [ 4] 3404         CALL     BRAN
      001314 12 FA                 3405         .word    EVAL1
      001316 CD 04 6A         [ 4] 3406 EVAL2:  CALL     DROP
      001319 CC 12 B7         [ 2] 3407         JP       DOTOK
                                   3408 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                   3409 ;       PRESET  ( -- )
                                   3410 ;       Reset data stack pointer and
                                   3411 ;       terminal input buffer.
      00131C 12 F5                 3412         .word      LINK
                           00131E  3413 LINK = . 
      00131E 06                    3414         .byte      6
      00131F 50 52 45 53 45 54     3415         .ascii     "PRESET"
      001325                       3416 PRESE:
      001325 CD 03 45         [ 4] 3417         CALL     DOLIT
      001328 16 80                 3418         .word      SPP
      00132A CD 04 61         [ 4] 3419         CALL     SPSTO
      00132D CD 03 45         [ 4] 3420         CALL     DOLIT
      001330 17 00                 3421         .word      TIBB
      001332 CD 05 5F         [ 4] 3422         CALL     NTIB
      001335 CD 09 23         [ 4] 3423         CALL     CELLP
      001338 CC 03 B6         [ 2] 3424         JP     STORE
                                   3425 
                                   3426 ;       QUIT    ( -- )
                                   3427 ;       Reset return stack pointer
                                   3428 ;       and start text interpreter.
      00133B 13 1E                 3429         .word      LINK
                           00133D  3430 LINK = . 
      00133D 04                    3431         .byte      4
      00133E 51 55 49 54           3432         .ascii     "QUIT"
      001342                       3433 QUIT:
      001342 CD 03 45         [ 4] 3434         CALL     DOLIT
      001345 17 FF                 3435         .word      RPP
      001347 CD 04 08         [ 4] 3436         CALL     RPSTO   ;reset return stack pointer
      00134A CD 12 A6         [ 4] 3437 QUIT1:  CALL     LBRAC   ;start interpretation
      00134D CD 12 09         [ 4] 3438 QUIT2:  CALL     QUERY   ;get input
      001350 CD 12 FA         [ 4] 3439         CALL     EVAL
      001353 20 F8            [ 2] 3440         JRA     QUIT2   ;continue till error
                                   3441 
                                   3442 ;; The compiler
                                   3443 
                                   3444 ;       '       ( -- ca )
                                   3445 ;       Search vocabularies for
                                   3446 ;       next word in input stream.
      001355 13 3D                 3447         .word      LINK
                           001357  3448 LINK = . 
      001357 01                    3449         .byte      1
      001358 27                    3450         .ascii     "'"
      001359                       3451 TICK:
      001359 CD 10 34         [ 4] 3452         CALL     TOKEN
      00135C CD 11 31         [ 4] 3453         CALL     NAMEQ   ;?defined
      00135F CD 03 78         [ 4] 3454         CALL     QBRAN
      001362 12 45                 3455         .word      ABOR1
      001364 81               [ 4] 3456         RET     ;yes, push code address
                                   3457 
                                   3458 ;       ALLOT   ( n -- )
                           000001  3459 .if PICATOUT_MOD
                                   3460 ;       Allocate n bytes to RAM 
                           000000  3461 .else 
                                   3462 ;       Allocate n bytes to  code dictionary.
                                   3463 .endif 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      001365 13 57                 3464         .word      LINK
                           001367  3465 LINK = . 
      001367 05                    3466         .byte      5
      001368 41 4C 4C 4F 54        3467         .ascii     "ALLOT"
      00136D                       3468 ALLOT:
      00136D CD 05 C2         [ 4] 3469         CALL     VPP
                           000001  3470 .if PICATOUT_MOD
                                   3471 ; must update APP_VP each time VP is modidied
      001370 CD 0A 2B         [ 4] 3472         call PSTOR 
      001373 CC 1A 54         [ 2] 3473         jp UPDATVP 
                           000000  3474 .else
                                   3475         JP     PSTOR
                                   3476 .endif ;PICATOUT_MOD
                                   3477 
                                   3478 ;       ,       ( w -- )
                                   3479 ;         Compile an integer into
                                   3480 ;         variable space.
      001376 13 67                 3481         .word      LINK
                           001378  3482 LINK = . 
      001378 01                    3483         .byte      1
      001379 2C                    3484         .ascii     ","
      00137A                       3485 COMMA:
      00137A CD 0A A9         [ 4] 3486         CALL     HERE
      00137D CD 04 74         [ 4] 3487         CALL     DUPP
      001380 CD 09 23         [ 4] 3488         CALL     CELLP   ;cell boundary
      001383 CD 05 C2         [ 4] 3489         CALL     VPP
      001386 CD 03 B6         [ 4] 3490         CALL     STORE
      001389 CC 03 B6         [ 2] 3491         JP     STORE
                                   3492 
                                   3493 ;       C,      ( c -- )
                                   3494 ;       Compile a byte into
                                   3495 ;       variables space.
      00138C 13 78                 3496        .word      LINK
                           00138E  3497 LINK = . 
      00138E 02                    3498         .byte      2
      00138F 43 2C                 3499         .ascii     "C,"
      001391                       3500 CCOMMA:
      001391 CD 0A A9         [ 4] 3501         CALL     HERE
      001394 CD 04 74         [ 4] 3502         CALL     DUPP
      001397 CD 09 4E         [ 4] 3503         CALL     ONEP
      00139A CD 05 C2         [ 4] 3504         CALL     VPP
      00139D CD 03 B6         [ 4] 3505         CALL     STORE
      0013A0 CC 03 DA         [ 2] 3506         JP     CSTOR
                                   3507 
                                   3508 ;       [COMPILE]       ( -- ; <string> )
                                   3509 ;       Compile next immediate
                                   3510 ;       word into code dictionary.
      0013A3 13 8E                 3511         .word      LINK
                           0013A5  3512 LINK = . 
      0013A5 89                    3513 	.byte      IMEDD+9
      0013A6 5B 43 4F 4D 50 49 4C  3514         .ascii     "[COMPILE]"
             45 5D
      0013AF                       3515 BCOMP:
      0013AF CD 13 59         [ 4] 3516         CALL     TICK
      0013B2 CC 16 72         [ 2] 3517         JP     JSRC
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



                                   3518 
                                   3519 ;       COMPILE ( -- )
                                   3520 ;       Compile next jsr in
                                   3521 ;       colon list to code dictionary.
      0013B5 13 A5                 3522         .word      LINK
                           0013B7  3523 LINK = . 
      0013B7 47                    3524 	.byte      COMPO+7
      0013B8 43 4F 4D 50 49 4C 45  3525         .ascii     "COMPILE"
      0013BF                       3526 COMPI:
      0013BF CD 04 1E         [ 4] 3527         CALL     RFROM
                           000001  3528 .if PICATOUT_MOD
                                   3529 ; no need to increment
                           000000  3530 .else
                                   3531         CALL     ONEP
                                   3532 .endif 
      0013C2 CD 04 74         [ 4] 3533         CALL     DUPP
      0013C5 CD 03 CD         [ 4] 3534         CALL     AT
      0013C8 CD 16 72         [ 4] 3535         CALL     JSRC    ;compile subroutine
      0013CB CD 09 23         [ 4] 3536         CALL     CELLP
                           000001  3537 .if PICATOUT_MOD
      0013CE 90 93            [ 1] 3538         ldw y,x 
      0013D0 90 FE            [ 2] 3539         ldw y,(y)
      0013D2 1C 00 02         [ 2] 3540         addw x,#CELLL 
      0013D5 90 FC            [ 2] 3541         jp (y)
                           000000  3542 .else 
                                   3543         JP     TOR
                                   3544 .endif 
                                   3545 
                                   3546 ;       LITERAL ( w -- )
                                   3547 ;       Compile tos to dictionary
                                   3548 ;       as an integer literal.
      0013D7 13 B7                 3549         .word      LINK
                           0013D9  3550 LINK = . 
      0013D9 87                    3551 	.byte      IMEDD+7
      0013DA 4C 49 54 45 52 41 4C  3552         .ascii     "LITERAL"
      0013E1                       3553 LITER:
      0013E1 CD 13 BF         [ 4] 3554         CALL     COMPI
                           000001  3555 .if PICATOUT_MOD
      0013E4 03 45                 3556         .word DOLIT 
                           000000  3557 .else         
                                   3558         CALL     DOLIT
                                   3559 .endif 
      0013E6 CC 13 7A         [ 2] 3560         JP     COMMA
                                   3561 
                                   3562 ;       $,"     ( -- )
                                   3563 ;       Compile a literal string
                                   3564 ;       up to next " .
      0013E9 13 D9                 3565         .word      LINK
                           0013EB  3566 LINK = . 
      0013EB 03                    3567         .byte      3
      0013EC 24 2C 22              3568         .byte     '$',',','"'
      0013EF                       3569 STRCQ:
      0013EF CD 03 45         [ 4] 3570         CALL     DOLIT
      0013F2 00 22                 3571         .word     34	; "
      0013F4 CD 0F B7         [ 4] 3572         CALL     PARSE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      0013F7 CD 0A A9         [ 4] 3573         CALL     HERE
      0013FA CD 0B 6A         [ 4] 3574         CALL     PACKS   ;string to code dictionary
      0013FD CD 0A 92         [ 4] 3575         CALL     COUNT
      001400 CD 06 6F         [ 4] 3576         CALL     PLUS    ;calculate aligned end of string
      001403 CD 05 C2         [ 4] 3577         CALL     VPP
      001406 CC 03 B6         [ 2] 3578         JP     STORE
                                   3579 
                                   3580 ;; Structures
                                   3581 
                                   3582 ;       FOR     ( -- a )
                                   3583 ;       Start a FOR-NEXT loop
                                   3584 ;       structure in a colon definition.
      001409 13 EB                 3585         .word      LINK
                           00140B  3586 LINK = . 
      00140B 83                    3587 	.byte      IMEDD+3
      00140C 46 4F 52              3588         .ascii     "FOR"
      00140F                       3589 FOR:
      00140F CD 13 BF         [ 4] 3590         CALL     COMPI
                           000001  3591 .if PICATOUT_MOD
      001412 04 3D                 3592         .word TOR 
                           000000  3593 .else
                                   3594         CALL     TOR
                                   3595 .endif
      001414 CC 0A A9         [ 2] 3596         JP     HERE
                                   3597 
                                   3598 ;       NEXT    ( a -- )
                                   3599 ;       Terminate a FOR-NEXT loop.
      001417 14 0B                 3600         .word      LINK
                           001419  3601 LINK = . 
      001419 84                    3602 	.byte      IMEDD+4
      00141A 4E 45 58 54           3603         .ascii     "NEXT"
      00141E                       3604 NEXT:
      00141E CD 13 BF         [ 4] 3605         CALL     COMPI
                           000001  3606 .if PICATOUT_MOD
      001421 03 59                 3607         .word DONXT 
                           000000  3608 .else 
                                   3609         CALL     DONXT
                                   3610 .endif         
                           000001  3611 .if PICATOUT_MOD
      001423 CD 06 0E         [ 4] 3612         call ADRADJ
                                   3613 .endif ; PICATOUT_MOD
      001426 CC 13 7A         [ 2] 3614         JP     COMMA
                                   3615 
                                   3616 ;       I ( -- n )
                                   3617 ;       stack FOR-NEXT COUNTER 
      001429 14 19                 3618         .word LINK 
                           00142B  3619         LINK=.
      00142B 01                    3620         .byte 1 
      00142C 49                    3621         .ascii "I"
      00142D                       3622 IFETCH: 
      00142D 1D 00 02         [ 2] 3623         subw x,#CELLL 
      001430 16 03            [ 2] 3624         ldw y,(3,sp)
      001432 FF               [ 2] 3625         ldw (x),y 
      001433 81               [ 4] 3626         ret 
                                   3627 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                   3628 ;       BEGIN   ( -- a )
                                   3629 ;       Start an infinite or
                                   3630 ;       indefinite loop structure.
      001434 14 2B                 3631         .word      LINK
                           001436  3632 LINK = . 
      001436 85                    3633 	.byte      IMEDD+5
      001437 42 45 47 49 4E        3634         .ascii     "BEGIN"
      00143C                       3635 BEGIN:
      00143C CC 0A A9         [ 2] 3636         JP     HERE
                                   3637 
                                   3638 ;       UNTIL   ( a -- )
                                   3639 ;       Terminate a BEGIN-UNTIL
                                   3640 ;       indefinite loop structure.
      00143F 14 36                 3641         .word      LINK
                           001441  3642 LINK = . 
      001441 85                    3643 	.byte      IMEDD+5
      001442 55 4E 54 49 4C        3644         .ascii     "UNTIL"
      001447                       3645 UNTIL:
      001447 CD 13 BF         [ 4] 3646         CALL     COMPI
                           000001  3647 .if PICATOUT_MOD
      00144A 03 78                 3648         .word    QBRAN 
                           000000  3649 .else 
                                   3650         CALL     QBRAN
                                   3651 .endif 
                           000001  3652 .if PICATOUT_MOD 
      00144C CD 06 0E         [ 4] 3653         call ADRADJ
                                   3654 .endif ; PICATOUT_MOD
      00144F CC 13 7A         [ 2] 3655         JP     COMMA
                                   3656 
                                   3657 ;       AGAIN   ( a -- )
                                   3658 ;       Terminate a BEGIN-AGAIN
                                   3659 ;       infinite loop structure.
      001452 14 41                 3660         .word      LINK
                           001454  3661 LINK = . 
      001454 85                    3662 	.byte      IMEDD+5
      001455 41 47 41 49 4E        3663         .ascii     "AGAIN"
      00145A                       3664 AGAIN:
      00145A CD 13 BF         [ 4] 3665         CALL     COMPI
                           000001  3666 .if PICATOUT_MOD
      00145D 03 8F                 3667         .word BRAN
                           000000  3668 .else
                                   3669         CALL     BRAN
                                   3670 .endif 
                           000001  3671 .if PICATOUT_MOD 
      00145F CD 06 0E         [ 4] 3672         call ADRADJ 
                                   3673 .endif ; PICATOUT_MOD
      001462 CC 13 7A         [ 2] 3674         JP     COMMA
                                   3675 
                                   3676 ;       IF      ( -- A )
                                   3677 ;       Begin a conditional branch.
      001465 14 54                 3678         .word      LINK
                           001467  3679 LINK = . 
      001467 82                    3680 	.byte      IMEDD+2
      001468 49 46                 3681         .ascii     "IF"
      00146A                       3682 IFF:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      00146A CD 13 BF         [ 4] 3683         CALL     COMPI
                           000001  3684 .if PICATOUT_MOD
      00146D 03 78                 3685         .word QBRAN
                           000000  3686 .else
                                   3687         CALL     QBRAN
                                   3688 .endif 
      00146F CD 0A A9         [ 4] 3689         CALL     HERE
      001472 CD 09 BA         [ 4] 3690         CALL     ZERO
      001475 CC 13 7A         [ 2] 3691         JP     COMMA
                                   3692 
                                   3693 ;       THEN        ( A -- )
                                   3694 ;       Terminate a conditional branch structure.
      001478 14 67                 3695         .word      LINK
                           00147A  3696 LINK = . 
      00147A 84                    3697 	.byte      IMEDD+4
      00147B 54 48 45 4E           3698         .ascii     "THEN"
      00147F                       3699 THENN:
      00147F CD 0A A9         [ 4] 3700         CALL     HERE
                           000001  3701 .if PICATOUT_MOD 
      001482 CD 06 0E         [ 4] 3702         call ADRADJ 
                                   3703 .endif ; PICATOUT_MOD
      001485 CD 04 84         [ 4] 3704         CALL     SWAPP
      001488 CC 03 B6         [ 2] 3705         JP     STORE
                                   3706 
                                   3707 ;       ELSE        ( A -- A )
                                   3708 ;       Start the false clause in an IF-ELSE-THEN structure.
      00148B 14 7A                 3709         .word      LINK
                           00148D  3710 LINK = . 
      00148D 84                    3711 	.byte      IMEDD+4
      00148E 45 4C 53 45           3712         .ascii     "ELSE"
      001492                       3713 ELSEE:
      001492 CD 13 BF         [ 4] 3714         CALL     COMPI
                           000001  3715 .if PICATOUT_MOD
      001495 03 8F                 3716         .word BRAN
                           000000  3717 .else
                                   3718         CALL     BRAN
                                   3719 .endif 
      001497 CD 0A A9         [ 4] 3720         CALL     HERE
      00149A CD 09 BA         [ 4] 3721         CALL     ZERO
      00149D CD 13 7A         [ 4] 3722         CALL     COMMA
      0014A0 CD 04 84         [ 4] 3723         CALL     SWAPP
      0014A3 CD 0A A9         [ 4] 3724         CALL     HERE
                           000001  3725 .if PICATOUT_MOD 
      0014A6 CD 06 0E         [ 4] 3726         call ADRADJ 
                                   3727 .endif ; PICATOUT_MOD
      0014A9 CD 04 84         [ 4] 3728         CALL     SWAPP
      0014AC CC 03 B6         [ 2] 3729         JP     STORE
                                   3730 
                                   3731 ;       AHEAD       ( -- A )
                                   3732 ;       Compile a forward branch instruction.
      0014AF 14 8D                 3733         .word      LINK
                           0014B1  3734 LINK = . 
      0014B1 85                    3735 	.byte      IMEDD+5
      0014B2 41 48 45 41 44        3736         .ascii     "AHEAD"
      0014B7                       3737 AHEAD:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      0014B7 CD 13 BF         [ 4] 3738         CALL     COMPI
                           000001  3739 .if PICATOUT_MOD
      0014BA 03 8F                 3740         .word BRAN
                           000000  3741 .else
                                   3742         CALL     BRAN
                                   3743 .endif 
      0014BC CD 0A A9         [ 4] 3744         CALL     HERE
      0014BF CD 09 BA         [ 4] 3745         CALL     ZERO
      0014C2 CC 13 7A         [ 2] 3746         JP     COMMA
                                   3747 
                                   3748 ;       WHILE       ( a -- A a )
                                   3749 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      0014C5 14 B1                 3750         .word      LINK
                           0014C7  3751 LINK = . 
      0014C7 85                    3752 	.byte      IMEDD+5
      0014C8 57 48 49 4C 45        3753         .ascii     "WHILE"
      0014CD                       3754 WHILE:
      0014CD CD 13 BF         [ 4] 3755         CALL     COMPI
                           000001  3756 .if PICATOUT_MOD
      0014D0 03 78                 3757         .word QBRAN
                           000000  3758 .else
                                   3759         CALL     QBRAN
                                   3760 .endif 
      0014D2 CD 0A A9         [ 4] 3761         CALL     HERE
      0014D5 CD 09 BA         [ 4] 3762         CALL     ZERO
      0014D8 CD 13 7A         [ 4] 3763         CALL     COMMA
      0014DB CC 04 84         [ 2] 3764         JP     SWAPP
                                   3765 
                                   3766 ;       REPEAT      ( A a -- )
                                   3767 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      0014DE 14 C7                 3768         .word      LINK
                           0014E0  3769 LINK = . 
      0014E0 86                    3770         .byte      IMEDD+6
      0014E1 52 45 50 45 41 54     3771         .ascii     "REPEAT"
      0014E7                       3772 REPEA:
      0014E7 CD 13 BF         [ 4] 3773         CALL     COMPI
                           000001  3774 .if PICATOUT_MOD
      0014EA 03 8F                 3775         .word BRAN
                           000000  3776 .else
                                   3777         CALL     BRAN
                                   3778 .endif 
                           000001  3779 .if PICATOUT_MOD 
      0014EC CD 06 0E         [ 4] 3780         call ADRADJ 
                                   3781 .endif ; PICATOUT_MOD
      0014EF CD 13 7A         [ 4] 3782         CALL     COMMA
      0014F2 CD 0A A9         [ 4] 3783         CALL     HERE
                           000001  3784 .if PICATOUT_MOD 
      0014F5 CD 06 0E         [ 4] 3785         call ADRADJ 
                                   3786 .endif ; PICATOUT_MOD
      0014F8 CD 04 84         [ 4] 3787         CALL     SWAPP
      0014FB CC 03 B6         [ 2] 3788         JP     STORE
                                   3789 
                                   3790 ;       AFT         ( a -- a A )
                                   3791 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      0014FE 14 E0                 3792         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



                           001500  3793 LINK = . 
      001500 83                    3794 	.byte      IMEDD+3
      001501 41 46 54              3795         .ascii     "AFT"
      001504                       3796 AFT:
      001504 CD 04 6A         [ 4] 3797         CALL     DROP
      001507 CD 14 B7         [ 4] 3798         CALL     AHEAD
      00150A CD 0A A9         [ 4] 3799         CALL     HERE
      00150D CC 04 84         [ 2] 3800         JP     SWAPP
                                   3801 
                                   3802 ;       ABORT"      ( -- ; <string> )
                                   3803 ;       Conditional abort with an error message.
      001510 15 00                 3804         .word      LINK
                           001512  3805 LINK = . 
      001512 86                    3806 	.byte      IMEDD+6
      001513 41 42 4F 52 54        3807         .ascii     "ABORT"
      001518 22                    3808         .byte      '"'
      001519                       3809 ABRTQ:
      001519 CD 13 BF         [ 4] 3810         CALL     COMPI
                           000001  3811 .if PICATOUT_MOD
      00151C 12 3D                 3812         .word ABORQ
                           000000  3813 .else
                                   3814         CALL     ABORQ
                                   3815 .endif
      00151E CC 13 EF         [ 2] 3816         JP     STRCQ
                                   3817 
                                   3818 ;       $"     ( -- ; <string> )
                                   3819 ;       Compile an inline string literal.
      001521 15 12                 3820         .word      LINK
                           001523  3821 LINK = . 
      001523 82                    3822 	.byte      IMEDD+2
      001524 24 22                 3823         .byte     '$','"'
      001526                       3824 STRQ:
      001526 CD 13 BF         [ 4] 3825         CALL     COMPI
                           000001  3826 .if PICATOUT_MOD
      001529 0E 57                 3827         .word STRQP 
                           000000  3828 .else
                                   3829         CALL     STRQP
                                   3830 .endif
      00152B CC 13 EF         [ 2] 3831         JP     STRCQ
                                   3832 
                                   3833 ;       ."          ( -- ; <string> )
                                   3834 ;       Compile an inline string literal to be typed out at run time.
      00152E 15 23                 3835         .word      LINK
                           001530  3836 LINK = . 
      001530 82                    3837 	.byte      IMEDD+2
      001531 2E 22                 3838         .byte     '.','"'
      001533                       3839 DOTQ:
      001533 CD 13 BF         [ 4] 3840         CALL     COMPI
                           000001  3841 .if PICATOUT_MOD
      001536 0E 61                 3842         .word DOTQP 
                           000000  3843 .else
                                   3844         CALL     DOTQP
                                   3845 .endif 
      001538 CC 13 EF         [ 2] 3846         JP     STRCQ
                                   3847 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                   3848 ;; Name compiler
                                   3849 
                                   3850 ;       ?UNIQUE ( a -- a )
                                   3851 ;       Display a warning message
                                   3852 ;       if word already exists.
      00153B 15 30                 3853         .word      LINK
                           00153D  3854 LINK = . 
      00153D 07                    3855         .byte      7
      00153E 3F 55 4E 49 51 55 45  3856         .ascii     "?UNIQUE"
      001545                       3857 UNIQU:
      001545 CD 04 74         [ 4] 3858         CALL     DUPP
      001548 CD 11 31         [ 4] 3859         CALL     NAMEQ   ;?name exists
      00154B CD 03 78         [ 4] 3860         CALL     QBRAN
      00154E 15 64                 3861         .word      UNIQ1
      001550 CD 0E 61         [ 4] 3862         CALL     DOTQP   ;redef are OK
      001553 07                    3863         .byte       7
      001554 20 72 65 44 65 66 20  3864         .ascii     " reDef "       
      00155B CD 04 9E         [ 4] 3865         CALL     OVER
      00155E CD 0A 92         [ 4] 3866         CALL     COUNT
      001561 CD 0E 04         [ 4] 3867         CALL     TYPES   ;just in case
      001564 CC 04 6A         [ 2] 3868 UNIQ1:  JP     DROP
                                   3869 
                                   3870 ;       $,n     ( na -- )
                                   3871 ;       Build a new dictionary name
                                   3872 ;       using string at na.
                           000001  3873 .if PICATOUT_MOD
                                   3874 ; compile dans l'espace des variables 
                                   3875 .endif 
      001567 15 3D                 3876         .word      LINK
                           001569  3877 LINK = . 
      001569 03                    3878         .byte      3
      00156A 24 2C 6E              3879         .ascii     "$,n"
      00156D                       3880 SNAME:
      00156D CD 04 74         [ 4] 3881         CALL     DUPP
      001570 CD 03 EB         [ 4] 3882         CALL     CAT     ;?null input
      001573 CD 03 78         [ 4] 3883         CALL     QBRAN
      001576 15 A3                 3884         .word      PNAM1
      001578 CD 15 45         [ 4] 3885         CALL     UNIQU   ;?redefinition
      00157B CD 04 74         [ 4] 3886         CALL     DUPP
      00157E CD 0A 92         [ 4] 3887         CALL     COUNT
      001581 CD 06 6F         [ 4] 3888         CALL     PLUS
      001584 CD 05 C2         [ 4] 3889         CALL     VPP
      001587 CD 03 B6         [ 4] 3890         CALL     STORE
      00158A CD 04 74         [ 4] 3891         CALL     DUPP
      00158D CD 05 E0         [ 4] 3892         CALL     LAST
      001590 CD 03 B6         [ 4] 3893         CALL     STORE   ;save na for vocabulary link
      001593 CD 09 32         [ 4] 3894         CALL     CELLM   ;link address
      001596 CD 05 B4         [ 4] 3895         CALL     CNTXT
      001599 CD 03 CD         [ 4] 3896         CALL     AT
      00159C CD 04 84         [ 4] 3897         CALL     SWAPP
      00159F CD 03 B6         [ 4] 3898         CALL     STORE
      0015A2 81               [ 4] 3899         RET     ;save code pointer
      0015A3 CD 0E 57         [ 4] 3900 PNAM1:  CALL     STRQP
      0015A6 05                    3901         .byte      5
      0015A7 20 6E 61 6D 65        3902         .ascii     " name" ;null input
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      0015AC CC 12 45         [ 2] 3903         JP     ABOR1
                                   3904 
                                   3905 ;; FORTH compiler
                                   3906 
                                   3907 ;       $COMPILE        ( a -- )
                                   3908 ;       Compile next word to
                                   3909 ;       dictionary as a token or literal.
      0015AF 15 69                 3910         .word      LINK
                           0015B1  3911 LINK = . 
      0015B1 08                    3912         .byte      8
      0015B2 24 43 4F 4D 50 49 4C  3913         .ascii     "$COMPILE"
             45
      0015BA                       3914 SCOMP:
      0015BA CD 11 31         [ 4] 3915         CALL     NAMEQ
      0015BD CD 06 1E         [ 4] 3916         CALL     QDUP    ;?defined
      0015C0 CD 03 78         [ 4] 3917         CALL     QBRAN
      0015C3 15 DB                 3918         .word      SCOM2
      0015C5 CD 03 CD         [ 4] 3919         CALL     AT
      0015C8 CD 03 45         [ 4] 3920         CALL     DOLIT
      0015CB 80 00                 3921         .word     0x8000	;  IMEDD*256
      0015CD CD 04 C0         [ 4] 3922         CALL     ANDD    ;?immediate
      0015D0 CD 03 78         [ 4] 3923         CALL     QBRAN
      0015D3 15 D8                 3924         .word      SCOM1
      0015D5 CC 03 9F         [ 2] 3925         JP     EXECU
      0015D8 CC 16 72         [ 2] 3926 SCOM1:  JP     JSRC
      0015DB CD 0C CF         [ 4] 3927 SCOM2:  CALL     NUMBQ   ;try to convert to number
      0015DE CD 03 78         [ 4] 3928         CALL     QBRAN
      0015E1 12 45                 3929         .word      ABOR1
      0015E3 CC 13 E1         [ 2] 3930         JP     LITER
                                   3931 
                                   3932 ;       OVERT   ( -- )
                                   3933 ;       Link a new word into vocabulary.
      0015E6 15 B1                 3934         .word      LINK
                           0015E8  3935 LINK = . 
      0015E8 05                    3936         .byte      5
      0015E9 4F 56 45 52 54        3937         .ascii     "OVERT"
      0015EE                       3938 OVERT:
      0015EE CD 05 E0         [ 4] 3939         CALL     LAST
      0015F1 CD 03 CD         [ 4] 3940         CALL     AT
      0015F4 CD 05 B4         [ 4] 3941         CALL     CNTXT
      0015F7 CC 03 B6         [ 2] 3942         JP     STORE
                                   3943 
                                   3944 ;       ;       ( -- )
                                   3945 ;       Terminate a colon definition.
      0015FA 15 E8                 3946         .word      LINK
                           0015FC  3947 LINK = . 
      0015FC C1                    3948 	.byte      IMEDD+COMPO+1
      0015FD 3B                    3949         .ascii     ";"
      0015FE                       3950 SEMIS:
      0015FE CD 13 BF         [ 4] 3951         CALL     COMPI
                           000001  3952 .if PICATOUT_MOD
      001601 03 AF                 3953         .word EXIT 
                           000000  3954 .else
                                   3955         CALL     EXIT
                                   3956 .endif 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      001603 CD 12 A6         [ 4] 3957         CALL     LBRAC
                           000001  3958 .if PICATOUT_MOD
      001606 CD 15 EE         [ 4] 3959         call OVERT 
      001609 CD 1F 20         [ 4] 3960         CALL FMOVE
      00160C CD 06 1E         [ 4] 3961         call QDUP 
      00160F CD 03 78         [ 4] 3962         call QBRAN 
      001612 17 42                 3963         .word SET_RAMLAST 
      001614 CD 1F B4         [ 4] 3964         CALL UPDATPTR 
      001617 81               [ 4] 3965 1$:     RET 
                           000000  3966 .else 
                                   3967         JP     OVERT
                                   3968 .endif 
                                   3969 
                           000001  3970 .if PICATOUT_MOD
                                   3971 ;       Terminate an ISR definition 
                                   3972 ;       retourn ca of ISR as double
                                   3973 ;       I; ( -- ud )
      001618 15 FC                 3974         .word LINK 
                           00161A  3975         LINK=.
      00161A C2                    3976         .byte 2+IMEDD+COMPO 
      00161B 49 3B                 3977         .ascii "I;" 
      00161D                       3978 ISEMI:
      00161D 1D 00 02         [ 2] 3979         subw x,#CELLL  
      001620 90 AE 00 80      [ 2] 3980         ldw y,#IRET_CODE 
      001624 FF               [ 2] 3981         ldw (x),y 
      001625 CD 13 91         [ 4] 3982         call CCOMMA
      001628 CD 12 A6         [ 4] 3983         call LBRAC 
      00162B CD 1F F9         [ 4] 3984         call IFMOVE
      00162E CD 06 1E         [ 4] 3985         call QDUP 
      001631 CD 03 78         [ 4] 3986         CALL QBRAN 
      001634 17 42                 3987         .word SET_RAMLAST
      001636 CD 05 D0         [ 4] 3988         CALL CPP
      001639 CD 03 CD         [ 4] 3989         call AT 
      00163C CD 04 84         [ 4] 3990         call SWAPP 
      00163F CD 05 D0         [ 4] 3991         CALL CPP 
      001642 CD 03 B6         [ 4] 3992         call STORE 
      001645 CD 1A 3D         [ 4] 3993         call UPDATCP 
      001648 CD 19 FA         [ 4] 3994         call EEPVP 
      00164B CD 04 6A         [ 4] 3995         call DROP 
      00164E CD 03 CD         [ 4] 3996         call AT 
      001651 CD 05 C2         [ 4] 3997         call VPP 
      001654 CD 03 B6         [ 4] 3998         call STORE 
      001657 CC 09 BA         [ 2] 3999         jp ZERO
      00165A 81               [ 4] 4000         ret           
                                   4001         
                                   4002 .endif ;PICATOUT_MOD
                                   4003 
                                   4004 ;       ]       ( -- )
                                   4005 ;       Start compiling words in
                                   4006 ;       input stream.
      00165B 16 1A                 4007         .word      LINK
                           00165D  4008 LINK = . 
      00165D 01                    4009         .byte      1
      00165E 5D                    4010         .ascii     "]"
      00165F                       4011 RBRAC:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      00165F CD 03 45         [ 4] 4012         CALL   DOLIT
      001662 15 BA                 4013         .word  SCOMP
      001664 CD 05 92         [ 4] 4014         CALL   TEVAL
      001667 CC 03 B6         [ 2] 4015         JP     STORE
                                   4016 
                                   4017 ;       CALL,    ( ca -- )
                                   4018 ;       Compile a subroutine call.
      00166A 16 5D                 4019         .word      LINK
                           00166C  4020 LINK = . 
      00166C 05                    4021         .byte      5
      00166D 43 41 4C 4C 2C        4022         .ascii     "CALL,"
      001672                       4023 JSRC:
      001672 CD 03 45         [ 4] 4024         CALL     DOLIT
      001675 00 CD                 4025         .word     CALLL     ;CALL
      001677 CD 13 91         [ 4] 4026         CALL     CCOMMA
      00167A CC 13 7A         [ 2] 4027         JP     COMMA
                                   4028 
                           000001  4029 .if PICATOUT_MOD
                                   4030 ;       INIT-OFS ( -- )
                                   4031 ;       compute offset to adjust jump address 
                                   4032 ;       set variable OFFSET 
      00167D 16 6C                 4033         .word LINK 
                           00167F  4034         LINK=.
      00167F 08                    4035         .byte 8 
      001680 49 4E 49 54 2D 4F 46  4036         .ascii "INIT-OFS" 
             53
      001688                       4037 INITOFS:
      001688 CD 05 81         [ 4] 4038         call TFLASH 
      00168B CD 03 CD         [ 4] 4039         CALL AT 
      00168E CD 04 74         [ 4] 4040         CALL DUPP 
      001691 CD 03 78         [ 4] 4041         call QBRAN
      001694 16 A5                 4042         .word 1$
      001696 CD 04 6A         [ 4] 4043         call DROP  
      001699 CD 05 D0         [ 4] 4044         call CPP 
      00169C CD 03 CD         [ 4] 4045         call AT 
      00169F CD 0A A9         [ 4] 4046         call HERE
      0016A2 CD 06 CD         [ 4] 4047         call SUBB 
      0016A5 CD 06 05         [ 4] 4048 1$:     call OFFSET 
      0016A8 CC 03 B6         [ 2] 4049         jp STORE  
                                   4050 .endif 
                                   4051 
                                   4052 ;       :       ( -- ; <string> )
                                   4053 ;       Start a new colon definition
                                   4054 ;       using next word as its name.
      0016AB 16 7F                 4055         .word      LINK
                           0016AD  4056 LINK = . 
      0016AD 01                    4057         .byte      1
      0016AE 3A                    4058         .ascii     ":"
      0016AF                       4059 COLON:
                           000001  4060 .if PICATOUT_MOD
      0016AF CD 16 88         [ 4] 4061         call INITOFS       
                                   4062 .endif ; PICATOUT_MOD
      0016B2 CD 10 34         [ 4] 4063         CALL   TOKEN
      0016B5 CD 15 6D         [ 4] 4064         CALL   SNAME
      0016B8 CC 16 5F         [ 2] 4065         JP     RBRAC
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                   4066 
                           000001  4067 .if PICATOUT_MOD 
                                   4068 ;       I:  ( -- )
                                   4069 ;       Start interrupt service routine definition
                                   4070 ;       those definition have no name.
      0016BB 16 AD                 4071         .word LINK
                           0016BD  4072         LINK=.
      0016BD 02                    4073         .byte 2 
      0016BE 49 3A                 4074         .ascii "I:" 
      0016C0                       4075 ICOLON:
      0016C0 CD 16 88         [ 4] 4076         call INITOFS 
      0016C3 CC 16 5F         [ 2] 4077         jp RBRAC  
                                   4078 .endif ; PICATOUT_MOD
                                   4079 
                                   4080 ;       IMMEDIATE       ( -- )
                                   4081 ;       Make last compiled word
                                   4082 ;       an immediate word.
      0016C6 16 BD                 4083         .word      LINK
                           0016C8  4084 LINK = . 
      0016C8 09                    4085         .byte      9
      0016C9 49 4D 4D 45 44 49 41  4086         .ascii     "IMMEDIATE"
             54 45
      0016D2                       4087 IMMED:
      0016D2 CD 03 45         [ 4] 4088         CALL     DOLIT
      0016D5 80 00                 4089         .word     0x8000	;  IMEDD*256
      0016D7 CD 05 E0         [ 4] 4090         CALL     LAST
      0016DA CD 03 CD         [ 4] 4091         CALL     AT
      0016DD CD 03 CD         [ 4] 4092         CALL     AT
      0016E0 CD 04 D4         [ 4] 4093         CALL     ORR
      0016E3 CD 05 E0         [ 4] 4094         CALL     LAST
      0016E6 CD 03 CD         [ 4] 4095         CALL     AT
      0016E9 CC 03 B6         [ 2] 4096         JP     STORE
                                   4097 
                                   4098 ;; Defining words
                                   4099 
                                   4100 ;       CREATE  ( -- ; <string> )
                                   4101 ;       Compile a new array
                                   4102 ;       without allocating space.
      0016EC 16 C8                 4103         .word      LINK
                           0016EE  4104 LINK = . 
      0016EE 06                    4105         .byte      6
      0016EF 43 52 45 41 54 45     4106         .ascii     "CREATE"
      0016F5                       4107 CREAT:
      0016F5 CD 10 34         [ 4] 4108         CALL     TOKEN
      0016F8 CD 15 6D         [ 4] 4109         CALL     SNAME
      0016FB CD 15 EE         [ 4] 4110         CALL     OVERT        
      0016FE CD 13 BF         [ 4] 4111         CALL     COMPI 
                           000001  4112 .if PICATOUT_MOD
      001701 05 21                 4113         .word DOVAR 
                           000000  4114 .else
                                   4115         CALL     DOVAR
                                   4116 .endif 
      001703 81               [ 4] 4117         RET
                                   4118 
                                   4119 ;       VARIABLE        ( -- ; <string> )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                                   4120 ;       Compile a new variable
                                   4121 ;       initialized to 0.
      001704 16 EE                 4122         .word      LINK
                           001706  4123 LINK = . 
      001706 08                    4124         .byte      8
      001707 56 41 52 49 41 42 4C  4125         .ascii     "VARIABLE"
             45
      00170F                       4126 VARIA:
                           000001  4127 .if PICATOUT_MOD
                                   4128 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      00170F CD 0A A9         [ 4] 4129         CALL HERE
      001712 CD 04 74         [ 4] 4130         CALL DUPP 
      001715 CD 09 23         [ 4] 4131         CALL CELLP
      001718 CD 05 C2         [ 4] 4132         CALL VPP 
      00171B CD 03 B6         [ 4] 4133         CALL STORE
                                   4134 .endif         
      00171E CD 16 F5         [ 4] 4135         CALL CREAT
      001721 CD 04 74         [ 4] 4136         CALL DUPP
      001724 CD 13 7A         [ 4] 4137         CALL COMMA
      001727 CD 09 BA         [ 4] 4138         CALL ZERO
                           000001  4139 .if PICATOUT_MOD 
      00172A CD 04 84         [ 4] 4140         call SWAPP 
      00172D CD 03 B6         [ 4] 4141         CALL STORE
      001730 CD 1F 20         [ 4] 4142         CALL FMOVE ; move definition to FLASH
      001733 CD 06 1E         [ 4] 4143         CALL QDUP 
      001736 CD 03 78         [ 4] 4144         CALL QBRAN 
      001739 17 42                 4145         .word SET_RAMLAST   
      00173B CD 1A 54         [ 4] 4146         call UPDATVP  ; don't update if variable kept in RAM.
      00173E CD 1F B4         [ 4] 4147         CALL UPDATPTR
      001741 81               [ 4] 4148         RET         
      001742                       4149 SET_RAMLAST: 
      001742 CD 05 E0         [ 4] 4150         CALL LAST 
      001745 CD 03 CD         [ 4] 4151         CALL AT 
      001748 CD 05 F3         [ 4] 4152         CALL RAMLAST 
      00174B CC 03 B6         [ 2] 4153         jp STORE  
                                   4154 
                                   4155 .endif ;PICATOUT_MOD        
                                   4156 
                           000001  4157 .if PICATOUT_MOD
                                   4158 ;       CONSTANT  ( n -- ; <string> )
                                   4159 ;       Compile a new constant 
                                   4160 ;       n CONSTANT name 
      00174E 17 06                 4161         .word LINK 
                           001750  4162         LINK=. 
      001750 08                    4163         .byte 8 
      001751 43 4F 4E 53 54 41 4E  4164         .ascii "CONSTANT" 
             54
      001759                       4165 CONSTANT:          
      001759 CD 10 34         [ 4] 4166         CALL TOKEN
      00175C CD 15 6D         [ 4] 4167         CALL SNAME 
      00175F CD 15 EE         [ 4] 4168         CALL OVERT 
      001762 CD 13 BF         [ 4] 4169         CALL COMPI 
                           000001  4170 .if PICATOUT_MOD
      001765 17 83                 4171         .word DOCONST
                           000000  4172 .else
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                   4173         CALL DOCONST
                                   4174 .endif 
      001767 CD 13 7A         [ 4] 4175         CALL COMMA 
      00176A CD 1F 20         [ 4] 4176         CALL FMOVE
      00176D CD 06 1E         [ 4] 4177         CALL QDUP 
      001770 CD 03 78         [ 4] 4178         CALL QBRAN 
      001773 17 42                 4179         .word SET_RAMLAST  
      001775 CD 1F B4         [ 4] 4180         CALL UPDATPTR  
      001778 81               [ 4] 4181 1$:     RET          
                                   4182 
                                   4183 ; CONSTANT runtime semantic 
                                   4184 ; doCONST  ( -- n )
      001779 17 50                 4185         .word LINK 
                           00177B  4186         LINK=.
      00177B 07                    4187         .byte 7
      00177C 44 4F 43 4F 4E 53 54  4188         .ascii "DOCONST"
      001783                       4189 DOCONST:
      001783 1D 00 02         [ 2] 4190         subw x,#CELLL
      001786 90 85            [ 2] 4191         popw y 
      001788 90 FE            [ 2] 4192         ldw y,(y) 
      00178A FF               [ 2] 4193         ldw (x),y 
      00178B 81               [ 4] 4194         ret 
                                   4195 .endif ;PICATOUT_MOD
                                   4196 
                                   4197 
                                   4198 ;; Tools
                                   4199 
                                   4200 ;       _TYPE   ( b u -- )
                                   4201 ;       Display a string. Filter
                                   4202 ;       non-printing characters.
      00178C 17 7B                 4203         .word      LINK
                           00178E  4204 LINK = . 
      00178E 05                    4205         .byte      5
      00178F 5F 54 59 50 45        4206         .ascii     "_TYPE"
      001794                       4207 UTYPE:
      001794 CD 04 3D         [ 4] 4208         CALL     TOR     ;start count down loop
      001797 20 0F            [ 2] 4209         JRA     UTYP2   ;skip first pass
      001799 CD 04 74         [ 4] 4210 UTYP1:  CALL     DUPP
      00179C CD 03 EB         [ 4] 4211         CALL     CAT
      00179F CD 09 E4         [ 4] 4212         CALL     TCHAR
      0017A2 CD 03 2F         [ 4] 4213         CALL     EMIT    ;display only printable
      0017A5 CD 09 4E         [ 4] 4214         CALL     ONEP    ;increment address
      0017A8 CD 03 59         [ 4] 4215 UTYP2:  CALL     DONXT
      0017AB 17 99                 4216         .word      UTYP1   ;loop till done
      0017AD CC 04 6A         [ 2] 4217         JP     DROP
                                   4218 
                                   4219 ;       dm+     ( a u -- a )
                                   4220 ;       Dump u bytes from ,
                                   4221 ;       leaving a+u on  stack.
      0017B0 17 8E                 4222         .word      LINK
                           0017B2  4223 LINK = . 
      0017B2 03                    4224         .byte      3
      0017B3 64 6D 2B              4225         .ascii     "dm+"
      0017B6                       4226 DUMPP:
      0017B6 CD 04 9E         [ 4] 4227         CALL     OVER
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      0017B9 CD 03 45         [ 4] 4228         CALL     DOLIT
      0017BC 00 04                 4229         .word      4
      0017BE CD 0E 8A         [ 4] 4230         CALL     UDOTR   ;display address
      0017C1 CD 0D DA         [ 4] 4231         CALL     SPACE
      0017C4 CD 04 3D         [ 4] 4232         CALL     TOR     ;start count down loop
      0017C7 20 11            [ 2] 4233         JRA     PDUM2   ;skip first pass
      0017C9 CD 04 74         [ 4] 4234 PDUM1:  CALL     DUPP
      0017CC CD 03 EB         [ 4] 4235         CALL     CAT
      0017CF CD 03 45         [ 4] 4236         CALL     DOLIT
      0017D2 00 03                 4237         .word      3
      0017D4 CD 0E 8A         [ 4] 4238         CALL     UDOTR   ;display numeric data
      0017D7 CD 09 4E         [ 4] 4239         CALL     ONEP    ;increment address
      0017DA CD 03 59         [ 4] 4240 PDUM2:  CALL     DONXT
      0017DD 17 C9                 4241         .word      PDUM1   ;loop till done
      0017DF 81               [ 4] 4242         RET
                                   4243 
                                   4244 ;       DUMP    ( a u -- )
                                   4245 ;       Dump u bytes from a,
                                   4246 ;       in a formatted manner.
      0017E0 17 B2                 4247         .word      LINK
                           0017E2  4248 LINK = . 
      0017E2 04                    4249         .byte      4
      0017E3 44 55 4D 50           4250         .ascii     "DUMP"
      0017E7                       4251 DUMP:
      0017E7 CD 05 31         [ 4] 4252         CALL     BASE
      0017EA CD 03 CD         [ 4] 4253         CALL     AT
      0017ED CD 04 3D         [ 4] 4254         CALL     TOR
      0017F0 CD 0C 62         [ 4] 4255         CALL     HEX     ;save radix, set hex
      0017F3 CD 03 45         [ 4] 4256         CALL     DOLIT
      0017F6 00 10                 4257         .word      16
      0017F8 CD 08 74         [ 4] 4258         CALL     SLASH   ;change count to lines
      0017FB CD 04 3D         [ 4] 4259         CALL     TOR     ;start count down loop
      0017FE CD 0E 22         [ 4] 4260 DUMP1:  CALL     CR
      001801 CD 03 45         [ 4] 4261         CALL     DOLIT
      001804 00 10                 4262         .word      16
      001806 CD 06 5A         [ 4] 4263         CALL     DDUP
      001809 CD 17 B6         [ 4] 4264         CALL     DUMPP   ;display numeric
      00180C CD 06 2F         [ 4] 4265         CALL     ROT
      00180F CD 06 2F         [ 4] 4266         CALL     ROT
      001812 CD 0D DA         [ 4] 4267         CALL     SPACE
      001815 CD 0D DA         [ 4] 4268         CALL     SPACE
      001818 CD 17 94         [ 4] 4269         CALL     UTYPE   ;display printable characters
      00181B CD 03 59         [ 4] 4270         CALL     DONXT
      00181E 17 FE                 4271         .word      DUMP1   ;loop till done
      001820 CD 04 6A         [ 4] 4272 DUMP3:  CALL     DROP
      001823 CD 04 1E         [ 4] 4273         CALL     RFROM
      001826 CD 05 31         [ 4] 4274         CALL     BASE
      001829 CC 03 B6         [ 2] 4275         JP     STORE   ;restore radix
                                   4276 
                                   4277 ;       .S      ( ... -- ... )
                                   4278 ;        Display  contents of stack.
      00182C 17 E2                 4279         .word      LINK
                           00182E  4280 LINK = . 
      00182E 02                    4281         .byte      2
      00182F 2E 53                 4282         .ascii     ".S"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      001831                       4283 DOTS:
      001831 CD 0E 22         [ 4] 4284         CALL     CR
      001834 CD 09 FD         [ 4] 4285         CALL     DEPTH   ;stack depth
      001837 CD 04 3D         [ 4] 4286         CALL     TOR     ;start count down loop
      00183A 20 09            [ 2] 4287         JRA     DOTS2   ;skip first pass
      00183C CD 04 31         [ 4] 4288 DOTS1:  CALL     RAT
                           000001  4289 .if PICATOUT_MOD
                                   4290 ; Not required following modification I made To PICK 
                                   4291 ;        CALL ONEP
                                   4292 .endif 
      00183F CD 0A 14         [ 4] 4293 	CALL     PICK
      001842 CD 0E BD         [ 4] 4294         CALL     DOT     ;index stack, display contents
      001845 CD 03 59         [ 4] 4295 DOTS2:  CALL     DONXT
      001848 18 3C                 4296         .word      DOTS1   ;loop till done
      00184A CD 0E 61         [ 4] 4297         CALL     DOTQP
      00184D 05                    4298         .byte      5
      00184E 20 3C 73 70 20        4299         .ascii     " <sp "
      001853 81               [ 4] 4300         RET
                                   4301 
                                   4302 ;       >NAME   ( ca -- na | F )
                                   4303 ;       Convert code address
                                   4304 ;       to a name address.
      001854 18 2E                 4305         .word      LINK
                           001856  4306 LINK = . 
      001856 05                    4307         .byte      5
      001857 3E 4E 41 4D 45        4308         .ascii     ">NAME"
      00185C                       4309 TNAME:
      00185C CD 05 B4         [ 4] 4310         CALL     CNTXT   ;vocabulary link
      00185F CD 03 CD         [ 4] 4311 TNAM2:  CALL     AT
      001862 CD 04 74         [ 4] 4312         CALL     DUPP    ;?last word in a vocabulary
      001865 CD 03 78         [ 4] 4313         CALL     QBRAN
      001868 18 83                 4314         .word      TNAM4
      00186A CD 06 5A         [ 4] 4315         CALL     DDUP
      00186D CD 10 42         [ 4] 4316         CALL     NAMET
      001870 CD 04 E9         [ 4] 4317         CALL     XORR    ;compare
      001873 CD 03 78         [ 4] 4318         CALL     QBRAN
      001876 18 7D                 4319         .word      TNAM3
      001878 CD 09 32         [ 4] 4320         CALL     CELLM   ;continue with next word
      00187B 20 E2            [ 2] 4321         JRA     TNAM2
      00187D CD 04 84         [ 4] 4322 TNAM3:  CALL     SWAPP
      001880 CC 04 6A         [ 2] 4323         JP     DROP
      001883 CD 06 4F         [ 4] 4324 TNAM4:  CALL     DDROP
      001886 CC 09 BA         [ 2] 4325         JP     ZERO
                                   4326 
                                   4327 ;       .ID     ( na -- )
                                   4328 ;        Display  name at address.
      001889 18 56                 4329         .word      LINK
                           00188B  4330 LINK = . 
      00188B 03                    4331         .byte      3
      00188C 2E 49 44              4332         .ascii     ".ID"
      00188F                       4333 DOTID:
      00188F CD 06 1E         [ 4] 4334         CALL     QDUP    ;if zero no name
      001892 CD 03 78         [ 4] 4335         CALL     QBRAN
      001895 18 A5                 4336         .word      DOTI1
      001897 CD 0A 92         [ 4] 4337         CALL     COUNT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      00189A CD 03 45         [ 4] 4338         CALL     DOLIT
      00189D 00 1F                 4339         .word      0x1F
      00189F CD 04 C0         [ 4] 4340         CALL     ANDD    ;mask lexicon bits
      0018A2 CC 17 94         [ 2] 4341         JP     UTYPE
      0018A5 CD 0E 61         [ 4] 4342 DOTI1:  CALL     DOTQP
      0018A8 09                    4343         .byte      9
      0018A9 20 6E 6F 4E 61 6D 65  4344         .ascii     " noName"
      0018B0 81               [ 4] 4345         RET
                                   4346 
                           000000  4347 WANT_SEE=0 
                           000000  4348 .if WANT_SEE 
                                   4349 ;       SEE     ( -- ; <string> )
                                   4350 ;       A simple decompiler.
                                   4351 ;       Updated for byte machines.
                                   4352         .word      LINK
                                   4353 LINK = . 
                                   4354         .byte      3
                                   4355         .ascii     "SEE"
                                   4356 SEE:
                                   4357         CALL     TICK    ;starting address
                                   4358         CALL     CR
                                   4359         CALL     ONEM
                                   4360 SEE1:   CALL     ONEP
                                   4361         CALL     DUPP
                                   4362         CALL     AT
                                   4363         CALL     DUPP    ;?does it contain a zero
                                   4364         CALL     QBRAN
                                   4365         .word    SEE2
                                   4366         CALL     TNAME   ;?is it a name
                                   4367 SEE2:   CALL     QDUP    ;name address or zero
                                   4368         CALL     QBRAN
                                   4369         .word    SEE3
                                   4370         CALL     SPACE
                                   4371         CALL     DOTID   ;display name
                                   4372         CALL     ONEP
                                   4373         JRA      SEE4
                                   4374 SEE3:   CALL     DUPP
                                   4375         CALL     CAT
                                   4376         CALL     UDOT    ;display number
                                   4377 SEE4:   CALL     NUFQ    ;user control
                                   4378         CALL     QBRAN
                                   4379         .word    SEE1
                                   4380         JP     DROP
                                   4381 .endif ; WANT_SEE 
                                   4382 
                                   4383 ;       WORDS   ( -- )
                                   4384 ;       Display names in vocabulary.
      0018B1 18 8B                 4385         .word      LINK
                           0018B3  4386 LINK = . 
      0018B3 05                    4387         .byte      5
      0018B4 57 4F 52 44 53        4388         .ascii     "WORDS"
      0018B9                       4389 WORDS:
      0018B9 CD 0E 22         [ 4] 4390         CALL     CR
      0018BC CD 05 B4         [ 4] 4391         CALL     CNTXT   ;only in context
      0018BF CD 03 CD         [ 4] 4392 WORS1:  CALL     AT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      0018C2 CD 06 1E         [ 4] 4393         CALL     QDUP    ;?at end of list
      0018C5 CD 03 78         [ 4] 4394         CALL     QBRAN
      0018C8 18 DE                 4395         .word      WORS2
      0018CA CD 04 74         [ 4] 4396         CALL     DUPP
      0018CD CD 0D DA         [ 4] 4397         CALL     SPACE
      0018D0 CD 18 8F         [ 4] 4398         CALL     DOTID   ;display a name
      0018D3 CD 09 32         [ 4] 4399         CALL     CELLM
      0018D6 CD 03 8F         [ 4] 4400         CALL     BRAN
      0018D9 18 BF                 4401         .word      WORS1
      0018DB CD 04 6A         [ 4] 4402         CALL     DROP
      0018DE 81               [ 4] 4403 WORS2:  RET
                                   4404 
                                   4405         
                                   4406 ;; Hardware reset
                                   4407 
                                   4408 ;       hi      ( -- )
                                   4409 ;       Display sign-on message.
      0018DF 18 B3                 4410         .word      LINK
                           0018E1  4411 LINK = . 
      0018E1 02                    4412         .byte      2
      0018E2 68 69                 4413         .ascii     "hi"
      0018E4                       4414 HI:
      0018E4 CD 0E 22         [ 4] 4415         CALL     CR
      0018E7 CD 0E 61         [ 4] 4416         CALL     DOTQP   ;initialize I/O
      0018EA 0F                    4417         .byte      15
      0018EB 73 74 6D 38 65 46 6F  4418         .ascii     "stm8eForth v"
             72 74 68 20 76
      0018F7 33                    4419 	.byte      VER+'0'
      0018F8 2E                    4420         .byte      '.' 
      0018F9 30                    4421 	.byte      EXT+'0' ;version
      0018FA CC 0E 22         [ 2] 4422         JP     CR
                                   4423 
                           000000  4424 WANT_DEBUG=0
                           000000  4425 .if WANT_DEBUG 
                                   4426 ;       DEBUG      ( -- )
                                   4427 ;       Display sign-on message.
                                   4428 ;        .word      LINK
                                   4429 LINK = . 
                                   4430         .byte      5
                                   4431         .ascii     "DEBUG"
                                   4432 DEBUG:
                                   4433 	CALL DOLIT
                                   4434 	.word 0x65
                                   4435 	CALL EMIT
                                   4436 	CALL DOLIT
                                   4437 	.word 0
                                   4438  	CALL ZLESS 
                                   4439 	CALL DOLIT
                                   4440 	.word 0xFFFE
                                   4441 	CALL ZLESS 
                                   4442 	CALL UPLUS 
                                   4443  	CALL DROP 
                                   4444 	CALL DOLIT
                                   4445 	.word 3
                                   4446 	CALL UPLUS 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                   4447 	CALL UPLUS 
                                   4448  	CALL DROP
                                   4449 	CALL DOLIT
                                   4450 	.word 0x43
                                   4451 	CALL UPLUS 
                                   4452  	CALL DROP
                                   4453 	CALL EMIT
                                   4454 	CALL DOLIT
                                   4455 	.word 0x4F
                                   4456 	CALL DOLIT
                                   4457 	.word 0x6F
                                   4458  	CALL XORR
                                   4459 	CALL DOLIT
                                   4460 	.word 0xF0
                                   4461  	CALL ANDD
                                   4462 	CALL DOLIT
                                   4463 	.word 0x4F
                                   4464  	CALL ORR
                                   4465 	CALL EMIT
                                   4466 	CALL DOLIT
                                   4467 	.word 8
                                   4468 	CALL DOLIT
                                   4469 	.word 6
                                   4470  	CALL SWAPP
                                   4471 	CALL OVER
                                   4472 	CALL XORR
                                   4473 	CALL DOLIT
                                   4474 	.word 3
                                   4475 	CALL ANDD 
                                   4476 	CALL ANDD
                                   4477 	CALL DOLIT
                                   4478 	.word 0x70
                                   4479 	CALL UPLUS 
                                   4480 	CALL DROP
                                   4481 	CALL EMIT
                                   4482 	CALL DOLIT
                                   4483 	.word 0
                                   4484 	CALL QBRAN
                                   4485 	.word DEBUG1
                                   4486 	CALL DOLIT
                                   4487 	.word 0x3F
                                   4488 DEBUG1:
                                   4489 	CALL DOLIT
                                   4490 	.word 0xFFFF
                                   4491 	CALL QBRAN
                                   4492 	.word DEBUG2
                                   4493 	CALL DOLIT
                                   4494 	.word 0x74
                                   4495 	CALL BRAN
                                   4496 	.word DEBUG3
                                   4497 DEBUG2:
                                   4498 	CALL DOLIT
                                   4499 	.word 0x21
                                   4500 DEBUG3:
                                   4501 	CALL EMIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                   4502 	CALL DOLIT
                                   4503 	.word 0x68
                                   4504 	CALL DOLIT
                                   4505 	.word 0x80
                                   4506 	CALL STORE
                                   4507 	CALL DOLIT
                                   4508 	.word 0x80
                                   4509 	CALL AT
                                   4510 	CALL EMIT
                                   4511 	CALL DOLIT
                                   4512 	.word 0x4D
                                   4513 	CALL TOR
                                   4514 	CALL RAT
                                   4515 	CALL RFROM
                                   4516 	CALL ANDD
                                   4517 	CALL EMIT
                                   4518 	CALL DOLIT
                                   4519 	.word 0x61
                                   4520 	CALL DOLIT
                                   4521 	.word 0xA
                                   4522 	CALL TOR
                                   4523 DEBUG4:
                                   4524 	CALL DOLIT
                                   4525 	.word 1
                                   4526 	CALL UPLUS 
                                   4527 	CALL DROP
                                   4528 	CALL DONXT
                                   4529 	.word DEBUG4
                                   4530 	CALL EMIT
                                   4531 	CALL DOLIT
                                   4532 	.word 0x656D
                                   4533 	CALL DOLIT
                                   4534 	.word 0x100
                                   4535 	CALL UMSTA
                                   4536 	CALL SWAPP
                                   4537 	CALL DOLIT
                                   4538 	.word 0x100
                                   4539 	CALL UMSTA
                                   4540 	CALL SWAPP 
                                   4541 	CALL DROP
                                   4542 	CALL EMIT
                                   4543 	CALL EMIT
                                   4544 	CALL DOLIT
                                   4545 	.word 0x2043
                                   4546 	CALL DOLIT
                                   4547 	.word 0
                                   4548 	CALL DOLIT
                                   4549 	.word 0x100
                                   4550 	CALL UMMOD
                                   4551 	CALL EMIT
                                   4552 	CALL EMIT
                                   4553 	;JP ORIG
                                   4554 	RET
                                   4555 .endif ; WANT_DEBUG 
                                   4556 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                   4557 
                                   4558 ;       'BOOT   ( -- a )
                                   4559 ;       The application startup vector.
      0018FD 18 E1                 4560         .word      LINK
                           0018FF  4561 LINK = . 
      0018FF 05                    4562         .byte      5
      001900 27 42 4F 4F 54        4563         .ascii     "'BOOT"
      001905                       4564 TBOOT:
      001905 CD 05 21         [ 4] 4565         CALL     DOVAR
      001908 40 02                 4566         .word    APP_RUN      ;application to boot
                                   4567 
                                   4568 ;       COLD    ( -- )
                                   4569 ;       The hilevel cold start s=ence.
      00190A 18 FF                 4570         .word      LINK
                           00190C  4571         LINK = . 
      00190C 04                    4572         .byte      4
      00190D 43 4F 4C 44           4573         .ascii     "COLD"
      001911                       4574 COLD:
                           000000  4575 .if WANT_DEBUG
                                   4576         CALL DEBUG
                                   4577 .endif 
      001911 CD 03 45         [ 4] 4578 COLD1:  CALL     DOLIT
      001914 00 27                 4579         .word      UZERO
      001916 CD 03 45         [ 4] 4580 	CALL     DOLIT
      001919 00 06                 4581         .word      UPP
      00191B CD 03 45         [ 4] 4582         CALL     DOLIT
      00191E 00 1A                 4583 	.word      UEND-UZERO
      001920 CD 0A F6         [ 4] 4584         CALL     CMOVE   ;initialize user area
                                   4585 
                           000001  4586 .if PICATOUT_MOD
                                   4587 ; if APP_RUN==0 initialize with ca de 'hi'  
      001923 90 CE 40 02      [ 2] 4588         ldw y,APP_RUN 
      001927 26 0B            [ 1] 4589         jrne 0$
      001929 1D 00 02         [ 2] 4590         subw x,#CELLL 
      00192C 90 AE 18 E4      [ 2] 4591         ldw y,#HI  
      001930 FF               [ 2] 4592         ldw (x),y
      001931 CD 1A 2C         [ 4] 4593         call UPDATRUN 
      001934                       4594 0$:        
                                   4595 ; update LAST with APP_LAST 
                                   4596 ; if APP_LAST > LAST else do the opposite
      001934 90 CE 40 00      [ 2] 4597         ldw y,APP_LAST 
      001938 90 B3 1A         [ 2] 4598         cpw y,ULAST 
      00193B 22 05            [ 1] 4599         jrugt 1$ 
                                   4600 ; save LAST at APP_LAST  
      00193D CD 1A 14         [ 4] 4601         call UPDATLAST 
      001940 20 06            [ 2] 4602         jra 2$
      001942                       4603 1$: ; update LAST with APP_LAST 
      001942 90 BF 1A         [ 2] 4604         ldw ULAST,y
      001945 90 BF 14         [ 2] 4605         ldw UCNTXT,y
      001948                       4606 2$:  
                                   4607 ; update APP_CP if < app_space 
      001948 90 CE 40 04      [ 2] 4608         ldw y,APP_CP  
      00194C 90 B3 18         [ 2] 4609         cpw y,UCP   
      00194F 24 06            [ 1] 4610         jruge 3$ 
      001951 CD 1A 3D         [ 4] 4611         call UPDATCP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      001954 90 BE 18         [ 2] 4612         ldw y,UCP   
      001957                       4613 3$:
      001957 90 BF 18         [ 2] 4614         ldw UCP,y                 
                                   4615 ; update UVP with APP_VP  
                                   4616 ; if APP_VP>UVP else do the opposite 
      00195A 90 CE 40 06      [ 2] 4617         ldw y,APP_VP 
      00195E 90 B3 16         [ 2] 4618         cpw y,UVP 
      001961 22 05            [ 1] 4619         jrugt 4$
      001963 CD 1A 54         [ 4] 4620         call UPDATVP 
      001966 20 03            [ 2] 4621         jra 6$
      001968                       4622 4$: ; update UVP with APP_VP 
      001968 90 BF 16         [ 2] 4623         ldw UVP,y 
      00196B                       4624 6$:      
                                   4625 .endif ; PICATOUT_MOD
      00196B CD 13 25         [ 4] 4626         CALL     PRESE   ;initialize data stack and TIB
      00196E CD 19 05         [ 4] 4627         CALL     TBOOT
      001971 CD 0A DF         [ 4] 4628         CALL     ATEXE   ;application boot
      001974 CD 15 EE         [ 4] 4629         CALL     OVERT
      001977 CC 13 42         [ 2] 4630         JP     QUIT    ;start interpretation
                                   4631 
                           000001  4632 .if PICATOUT_MOD
                                   4633         ; keep this include at end 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                   4634         .include "flash.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21 ;  routines to write to FLASH, EEPROM 
                                     22 ;  and OPTION 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26 ;--------------------------------
                                     27 ; initialize FPTR 
                                     28 ; FP!  ( ud -- )
                                     29 ;---------------------------------
      00197A 19 0C                   30     .word LINK 
                           00197C    31     LINK=.
      00197C 03                      32     .byte 3 
      00197D 46 50 21                33     .ascii "FP!"
      001980                         34 fptr_store:
      001980 90 93            [ 1]   35     ldw y,x
      001982 90 FE            [ 2]   36     ldw y,(y)
      001984 90 9F            [ 1]   37     ld a,yl 
      001986 B7 32            [ 1]   38     ld FPTR,a 
      001988 1C 00 02         [ 2]   39     addw x,#CELLL 
      00198B 90 93            [ 1]   40     ldw y,x 
      00198D 90 FE            [ 2]   41     ldw y,(y)
      00198F 90 BF 33         [ 2]   42     ldw PTR16,y
      001992 1C 00 02         [ 2]   43     addw x,#CELLL 
      001995 81               [ 4]   44     ret 
                                     45 
                                     46 ;-----------------------------------
                                     47 ; return EEPROM base address 
                                     48 ; as a double 
                                     49 ;  EEPROM  ( -- ud )
                                     50 ;-----------------------------------
      001996 19 7C                   51     .word LINK 
                           001998    52 LINK=.
      001998 06                      53     .byte 6 
      001999 45 45 50 52 4F 4D       54     .ascii "EEPROM"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      00199F                         55 EEPROM: 
      00199F 90 AE 40 00      [ 2]   56     ldw y,#EEPROM_BASE
      0019A3 1D 00 04         [ 2]   57     subw x,#2*CELLL 
      0019A6 EF 02            [ 2]   58     ldw (2,x),y 
      0019A8 90 5F            [ 1]   59     clrw y 
      0019AA FF               [ 2]   60     ldw (x),y 
      0019AB 81               [ 4]   61     ret
                                     62 
                                     63 ;---------------------------------
                                     64 ; return APP_LAST pointer as double
                                     65 ; EEP-LAST ( -- ud )
                                     66 ;---------------------------------
      0019AC 19 98                   67 	.word LINK 
                           0019AE    68 	LINK=.
      0019AE 08                      69 	.byte 8 
      0019AF 45 45 50 2D 4C 41 53    70 	.ascii "EEP-LAST"
             54
      0019B7                         71 EEPLAST:
      0019B7 1D 00 04         [ 2]   72 	subw x,#2*CELLL 
      0019BA 90 AE 40 00      [ 2]   73 	ldw y,#APP_LAST 
      0019BE EF 02            [ 2]   74 	ldw (2,x),y 
      0019C0 90 5F            [ 1]   75 	clrw y 
      0019C2 FF               [ 2]   76 	ldw (x),y 
      0019C3 81               [ 4]   77 	ret 
                                     78 
                                     79 ;----------------------------------
                                     80 ; return APP_RUN pointer as double	
                                     81 ; EEP-RUN ( -- ud )
                                     82 ;-----------------------------------
      0019C4 19 AE                   83 	.word LINK 
                           0019C6    84 	LINK=.
      0019C6 07                      85 	.byte 7
      0019C7 45 45 50 2D 52 55 4E    86 	.ascii "EEP-RUN"
      0019CE                         87 EEPRUN:
      0019CE 1D 00 04         [ 2]   88 	subw x,#2*CELLL 
      0019D1 90 AE 40 02      [ 2]   89 	ldw y,#APP_RUN 
      0019D5 EF 02            [ 2]   90 	ldw (2,x),y 
      0019D7 90 5F            [ 1]   91 	clrw y 
      0019D9 FF               [ 2]   92 	ldw (x),y 
      0019DA 81               [ 4]   93 	ret 
                                     94 
                                     95 ;------------------------------------
                                     96 ; return APP_CP pointer as double 
                                     97 ; EEP-CP ( -- ud )
                                     98 ;------------------------------------
      0019DB 19 C6                   99 	.word LINK
                           0019DD   100 	LINK=.
      0019DD 06                     101 	.byte 6 
      0019DE 45 45 50 2D 43 50      102 	.ascii "EEP-CP"
      0019E4                        103 EEPCP:
      0019E4 1D 00 04         [ 2]  104 	subw x,#2*CELLL 
      0019E7 90 AE 40 04      [ 2]  105 	ldw y,#APP_CP  
      0019EB EF 02            [ 2]  106 	ldw (2,x),y 
      0019ED 90 5F            [ 1]  107 	clrw y 
      0019EF FF               [ 2]  108 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      0019F0 81               [ 4]  109 	ret 
                                    110 
                                    111 ;------------------------------------
                                    112 ; return APP_VP pointer as double 
                                    113 ; EEP-VP ( -- ud )
                                    114 ;-------------------------------------
      0019F1 19 DD                  115 	.word LINK
                           0019F3   116 	LINK=.
      0019F3 06                     117 	.byte 6
      0019F4 45 45 50 2D 56 50      118 	.ascii "EEP-VP"
      0019FA                        119 EEPVP:
      0019FA 1D 00 04         [ 2]  120 	subw x,#2*CELLL 
      0019FD 90 AE 40 06      [ 2]  121 	ldw y,#APP_VP  
      001A01 EF 02            [ 2]  122 	ldw (2,x),y 
      001A03 90 5F            [ 1]  123 	clrw y 
      001A05 FF               [ 2]  124 	ldw (x),y 
      001A06 81               [ 4]  125 	ret 
                                    126 
                                    127 ;----------------------------------
                                    128 ; update APP_LAST with LAST 
                                    129 ; UPDAT-LAST ( -- )
                                    130 ;----------------------------------
      001A07 19 F3                  131 	.word LINK 
                           001A09   132 	LINK=.
      001A09 0A                     133 	.byte 10
      001A0A 55 50 44 41 54 2D 4C   134 	.ascii "UPDAT-LAST"
             41 53 54
      001A14                        135 UPDATLAST:
      001A14 CD 05 E0         [ 4]  136 	call LAST
      001A17 CD 03 CD         [ 4]  137 	call AT  
      001A1A CD 19 B7         [ 4]  138 	call EEPLAST
      001A1D CC 1B 90         [ 2]  139 	jp ee_store 
                                    140 
                                    141 ;---------------------------------
                                    142 ; update APP_RUN 
                                    143 ; UPDAT-RUN ( a -- )
                                    144 ;---------------------------------
      001A20 1A 09                  145 	.word LINK
                           001A22   146 	LINK=.
      001A22 09                     147 	.byte 9
      001A23 55 50 44 41 54 2D 52   148 	.ascii "UPDAT-RUN"
             55 4E
      001A2C                        149 UPDATRUN:
      001A2C CD 19 CE         [ 4]  150 	call EEPRUN
      001A2F CC 1B 90         [ 2]  151 	jp ee_store 
                                    152 	
                                    153 ;---------------------------------
                                    154 ; update APP_CP with CP 
                                    155 ; UPDAT-CP ( -- )
                                    156 ;---------------------------------
      001A32 1A 22                  157 	.word LINK 
                           001A34   158 	LINK=.
      001A34 08                     159 	.byte 8 
      001A35 55 50 44 41 54 2D 43   160 	.ascii "UPDAT-CP"
             50
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001A3D                        161 UPDATCP:
      001A3D CD 05 D0         [ 4]  162 	call CPP 
      001A40 CD 03 CD         [ 4]  163 	call AT 
      001A43 CD 19 E4         [ 4]  164 	call EEPCP 
      001A46 CC 1B 90         [ 2]  165 	jp ee_store 
                                    166 
                                    167 ;----------------------------------
                                    168 ; update APP_VP with VP 
                                    169 ; UPDAT-VP ( -- )
                                    170 ;----------------------------------
      001A49 1A 34                  171 	.word LINK
                           001A4B   172 	LINK=.
      001A4B 08                     173 	.byte 8 
      001A4C 55 50 44 41 54 2D 56   174 	.ascii "UPDAT-VP" 
             50
      001A54                        175 UPDATVP:
      001A54 CD 05 C2         [ 4]  176 	call VPP 
      001A57 CD 03 CD         [ 4]  177 	call AT
      001A5A CD 19 FA         [ 4]  178 	call EEPVP 
      001A5D CC 1B 90         [ 2]  179 	jp ee_store
                                    180 	
                                    181 
                                    182 ;----------------------------------
                                    183 ; fetch integer at address over 65535
                                    184 ;  F@   ( ud -- n )
                                    185 ;----------------------------------
      001A60 1A 4B                  186     .word LINK 
                           001A62   187 LINK=.
      001A62 02                     188     .byte 2
      001A63 46 40                  189     .ascii "F@"
      001A65                        190 farat:
      001A65 CD 19 80         [ 4]  191     call fptr_store
      001A68 92 BC 00 32      [ 5]  192     ldf a,[FPTR]
      001A6C 1D 00 02         [ 2]  193     subw x,#CELLL 
      001A6F F7               [ 1]  194     ld (x),a 
      001A70 90 AE 00 01      [ 2]  195     ldw y,#1
      001A74 91 AF 00 32      [ 1]  196     ldf a,([FPTR],y)
      001A78 E7 01            [ 1]  197     ld (1,x),a
      001A7A 81               [ 4]  198     ret 
                                    199 
                                    200 ;-------------------------------------
                                    201 ; fetch C at address over 65535 
                                    202 ; FC@ ( ud -- c)
                                    203 ;-------------------------------------
      001A7B 1A 62                  204     .word LINK
                           001A7D   205     LINK=.
      001A7D 03                     206     .byte 3 
      001A7E 46 43 40               207     .ascii "FC@" 
      001A81                        208 farcat:
      001A81 CD 19 80         [ 4]  209     call fptr_store 
      001A84 92 BC 00 32      [ 5]  210     ldf a,[FPTR]
      001A88 1D 00 02         [ 2]  211     subw x,#CELLL 
      001A8B E7 01            [ 1]  212     ld (1,x),a 
      001A8D 7F               [ 1]  213     clr (x)
      001A8E 81               [ 4]  214     ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                                    215     
                                    216 ;----------------------------------
                                    217 ; unlock EEPROM/OPT for writing/erasing
                                    218 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    219 ;  UNLKEE   ( -- )
                                    220 ;----------------------------------
      001A8F 1A 7D                  221     .word LINK 
                           001A91   222 LINK=.
      001A91 06                     223     .byte 6 
      001A92 55 4E 4C 4B 45 45      224     .ascii "UNLKEE"
      001A98                        225 unlock_eeprom:
      001A98 35 00 50 5B      [ 1]  226 	mov FLASH_CR2,#0 
      001A9C 35 FF 50 5C      [ 1]  227 	mov FLASH_NCR2,#0xFF 
      001AA0 35 AE 50 64      [ 1]  228 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001AA4 35 56 50 64      [ 1]  229     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001AA8 72 07 50 5F FB   [ 2]  230 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001AAD 81               [ 4]  231 	ret
                                    232 
                                    233 ;----------------------------------
                                    234 ; unlock FLASH for writing/erasing
                                    235 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    236 ; UNLKFL  ( -- )
                                    237 ;----------------------------------
      001AAE 1A 91                  238     .word LINK 
                           001AB0   239 LINK=. 
      001AB0 06                     240     .byte 6 
      001AB1 55 4E 4C 4B 46 4C      241     .ascii "UNLKFL"    
      001AB7                        242 unlock_flash:
      001AB7 35 00 50 5B      [ 1]  243 	mov FLASH_CR2,#0 
      001ABB 35 FF 50 5C      [ 1]  244 	mov FLASH_NCR2,#0xFF 
      001ABF 35 56 50 62      [ 1]  245 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001AC3 35 AE 50 62      [ 1]  246 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001AC7 72 03 50 5F FB   [ 2]  247 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001ACC 81               [ 4]  248 	ret
                                    249 
                                    250 ;-----------------------------
                                    251 ; unlock FLASH or EEPROM 
                                    252 ; according to FPTR address 
                                    253 ;  UNLOCK ( -- )
                                    254 ;-----------------------------
      001ACD 1A B0                  255 	.word LINK 
                           001ACF   256 	LINK=.
      001ACF 06                     257 	.byte 6
      001AD0 55 4E 4C 4F 43 4B      258 	.ascii "UNLOCK"
      001AD6                        259 unlock:
                                    260 ; put addr[15:0] in Y, for bounds check.
      001AD6 90 BE 33         [ 2]  261 	ldw y,PTR16   ; Y=addr15:0
                                    262 ; check addr[23:16], if <> 0 then it is extened flash memory
      001AD9 3D 32            [ 1]  263 	tnz FPTR 
      001ADB 26 16            [ 1]  264 	jrne 4$
      001ADD 90 A3 80 00      [ 2]  265     cpw y,#FLASH_BASE
      001AE1 24 10            [ 1]  266     jruge 4$
      001AE3 90 A3 40 00      [ 2]  267 	cpw y,#EEPROM_BASE  
      001AE7 25 0D            [ 1]  268     jrult 9$
      001AE9 90 A3 48 7F      [ 2]  269 	cpw y,#OPTION_END 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001AED 22 07            [ 1]  270 	jrugt 9$
      001AEF CD 1A 98         [ 4]  271 	call unlock_eeprom
      001AF2 81               [ 4]  272 	ret 
      001AF3 CD 1A B7         [ 4]  273 4$: call unlock_flash
      001AF6 81               [ 4]  274 9$: ret 
                                    275 
                                    276 ;-------------------------
                                    277 ; lock write access to 
                                    278 ; FLASH and EEPROM 
                                    279 ; LOCK ( -- )
                                    280 ;-------------------------
      001AF7 1A CF                  281 	.word LINK 
                           001AF9   282 	LINK=.
      001AF9 04                     283 	.byte 4 
      001AFA 4C 4F 43 4B            284 	.ascii "LOCK" 
      001AFE                        285 lock: 
      001AFE 72 13 50 5F      [ 1]  286 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001B02 72 17 50 5F      [ 1]  287 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001B06 81               [ 4]  288 	ret 
                                    289 
                                    290 ;-------------------------
                                    291 ; increment FPTR 
                                    292 ; INC-FPTR ( -- )
                                    293 ;-------------------------
      001B07 1A F9                  294 	.word LINK 
                           001B09   295 	LINK=. 
      001B09 08                     296 	.byte 8 
      001B0A 49 4E 43 2D 46 50 54   297 	.ascii "INC-FPTR" 
             52
      001B12                        298 inc_fptr:
      001B12 3C 34            [ 1]  299 	inc PTR8 
      001B14 26 08            [ 1]  300 	jrne 1$
      001B16 90 BE 32         [ 2]  301 	ldw y,FPTR 
      001B19 90 5C            [ 2]  302 	incw y 
      001B1B 90 BF 32         [ 2]  303 	ldw FPTR,y 
      001B1E 81               [ 4]  304 1$: ret 
                                    305 
                                    306 
                                    307 ;----------------------------
                                    308 ; write a byte at address pointed 
                                    309 ; by FPTR and increment FPTR.
                                    310 ; Expect pointer already initialized 
                                    311 ; and memory unlocked 
                                    312 ; WR-BYTE ( c -- )
                                    313 ;----------------------------
                                    314 
      001B1F 1B 09                  315 	.word LINK 
                           001B21   316 	LINK=. 
      001B21 07                     317 	.byte 7 
      001B22 57 52 2D 42 59 54 45   318 	.ascii "WR-BYTE" 
                                    319 
      001B29                        320 write_byte:
      001B29 90 93            [ 1]  321 	ldw y,x 
      001B2B 90 FE            [ 2]  322 	ldw y,(y)
      001B2D 1C 00 02         [ 2]  323 	addw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001B30 90 9F            [ 1]  324 	ld a,yl
      001B32 92 BD 00 32      [ 4]  325 	ldf [FPTR],a
      001B36 72 05 50 5F FB   [ 2]  326 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001B3B 20 D5            [ 2]  327 	jra inc_fptr 
                                    328 
                                    329 
                                    330 
                                    331 ;---------------------------------------
                                    332 ; write a byte to FLASH or EEPROM/OPTION  
                                    333 ; EEC!  (c ud -- )
                                    334 ;---------------------------------------
      001B3D 1B 21                  335     .word LINK 
                           001B3F   336 	LINK=.
      001B3F 04                     337     .byte 4 
      001B40 45 45 43 21            338     .ascii "EEC!"
                                    339 	; local variables 
                           000001   340 	BTW = 1   ; byte to write offset on stack
                           000002   341     OPT = 2 
                           000002   342 	VSIZE = 2
      001B44                        343 ee_cstore:
      001B44 52 02            [ 2]  344 	sub sp,#VSIZE
      001B46 CD 19 80         [ 4]  345     call fptr_store
      001B49 E6 01            [ 1]  346 	ld a,(1,x)
      001B4B 43               [ 1]  347 	cpl a 
      001B4C 6B 01            [ 1]  348 	ld (BTW,sp),a ; byte to write 
      001B4E 0F 02            [ 1]  349 	clr (OPT,sp)  ; OPTION flag
      001B50 CD 1A D6         [ 4]  350 	call unlock 
                                    351 	; check if option
      001B53 3D 32            [ 1]  352 	tnz FPTR 
      001B55 26 19            [ 1]  353 	jrne 2$
      001B57 90 BE 33         [ 2]  354 	ldw y,PTR16 
      001B5A 90 A3 48 00      [ 2]  355 	cpw y,#OPTION_BASE
      001B5E 2B 10            [ 1]  356 	jrmi 2$
      001B60 90 A3 48 80      [ 2]  357 	cpw y,#OPTION_END+1
      001B64 2A 0A            [ 1]  358 	jrpl 2$
      001B66 03 02            [ 1]  359 	cpl (OPT,sp)
                                    360 	; OPTION WRITE require this unlock 
      001B68 72 1E 50 5B      [ 1]  361     bset FLASH_CR2,#FLASH_CR2_OPT
      001B6C 72 1F 50 5C      [ 1]  362     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001B70                        363 2$: 
      001B70 CD 1B 29         [ 4]  364 	call write_byte 	
      001B73 0D 02            [ 1]  365 	tnz (OPT,sp)
      001B75 27 0D            [ 1]  366 	jreq 3$ 
      001B77 7B 01            [ 1]  367     ld a,(BTW,sp)
      001B79 90 5F            [ 1]  368     clrw y
      001B7B 90 97            [ 1]  369 	ld yl,a 
      001B7D 1D 00 02         [ 2]  370 	subw x,#CELLL 
      001B80 FF               [ 2]  371 	ldw (x),y 
      001B81 CD 1B 29         [ 4]  372 	call write_byte
      001B84                        373 3$: 
      001B84 CD 1A FE         [ 4]  374 	call lock 
      001B87 5B 02            [ 2]  375 	addw sp,#VSIZE 
      001B89 81               [ 4]  376     ret
                                    377 
                                    378 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                                    379 ; write integer in FLASH|EEPROM
                                    380 ; EE! ( n ud -- )
                                    381 ;------------------------------
      001B8A 1B 3F                  382 	.word LINK 
                           001B8C   383 	LINK=.
      001B8C 03                     384 	.byte 3 
      001B8D 45 45 21               385 	.ascii "EE!"
      001B90                        386 ee_store:
      001B90 CD 19 80         [ 4]  387 	call fptr_store 
      001B93 CD 1A D6         [ 4]  388 	call unlock 
      001B96 90 93            [ 1]  389 	ldw y,x 
      001B98 90 FE            [ 2]  390 	ldw y,(y)
      001B9A 90 89            [ 2]  391 	pushw y 
      001B9C 90 5E            [ 1]  392 	swapw y 
      001B9E FF               [ 2]  393 	ldw (x),y 
      001B9F CD 1B 29         [ 4]  394 	call write_byte 
      001BA2 90 85            [ 2]  395 	popw y 
      001BA4 1D 00 02         [ 2]  396 	subw x,#CELLL
      001BA7 FF               [ 2]  397 	ldw (x),y 
      001BA8 CD 1B 29         [ 4]  398 	call write_byte
      001BAB CC 1A FE         [ 2]  399 	jp lock 
                                    400 
                                    401 
                                    402 ;----------------------------
                                    403 ; Erase flash memory row 
                                    404 ; stm8s208 as 128 bytes rows
                                    405 ; ROW-ERASE ( ud -- )
                                    406 ;----------------------------
      001BAE 1B 8C                  407 	.word LINK 
                           001BB0   408 	LINK=. 
      001BB0 09                     409 	.byte 9 
      001BB1 52 4F 57 2D 45 52 41   410 	.ascii "ROW-ERASE" 
             53 45
      001BBA                        411 row_erase:
      001BBA CD 19 80         [ 4]  412 	call fptr_store
                                    413 ;code must be execute from RAM 
                                    414 ;copy routine to PAD 
      001BBD 1D 00 02         [ 2]  415 	subw x,#CELLL 
      001BC0 90 AE 1C 07      [ 2]  416 	ldw y,#row_erase_proc
      001BC4 FF               [ 2]  417 	ldw (x),y 
      001BC5 CD 0A BA         [ 4]  418 	call PAD 
      001BC8 90 AE 1C 2E      [ 2]  419 	ldw y,#row_erase_proc_end 
      001BCC 72 A2 1C 07      [ 2]  420 	subw y,#row_erase_proc
      001BD0 1D 00 02         [ 2]  421 	subw x,#CELLL 
      001BD3 FF               [ 2]  422 	ldw (x),y 
      001BD4 CD 0A F6         [ 4]  423 	call CMOVE 
      001BD7                        424 block_erase:
      001BD7 90 BE 33         [ 2]  425 	ldw y,FPTR+1
      001BDA 90 A3 20 80      [ 2]  426 	cpw y,#app_space 
      001BDE 2A 13            [ 1]  427 	jrpl erase_flash 
                                    428 ; erase EEPROM block
      001BE0 90 A3 40 00      [ 2]  429 	cpw y,#EEPROM_BASE 
      001BE4 24 01            [ 1]  430 	jruge 1$
      001BE6 81               [ 4]  431 	ret ; bad address 
      001BE7 90 A3 47 FF      [ 2]  432 1$: cpw y,#EEPROM_END 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001BEB 23 01            [ 2]  433 	jrule 2$ 
      001BED 81               [ 4]  434 	ret ; bad address 
      001BEE                        435 2$:	
      001BEE CD 1A 98         [ 4]  436 	call unlock_eeprom 
      001BF1 20 03            [ 2]  437 	jra proceed_erase
                                    438 ; erase flash block:
      001BF3                        439 erase_flash:
      001BF3 CD 1A B7         [ 4]  440 	call unlock_flash 
      001BF6                        441 proceed_erase:
      001BF6 CD 0A BA         [ 4]  442 	call PAD 
      001BF9 90 93            [ 1]  443 	ldw y,x
      001BFB 90 FE            [ 2]  444 	ldw y,(y)
      001BFD 1C 00 02         [ 2]  445 	addw x,#CELLL  
      001C00 90 FD            [ 4]  446 	call (y) 
      001C02 72 17 50 5F      [ 1]  447 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001C06 81               [ 4]  448 	ret 
                                    449 
                                    450 ; this routine is to be copied to PAD 
      001C07                        451 row_erase_proc:
      001C07 35 20 50 5B      [ 1]  452 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001C0B 35 DF 50 5C      [ 1]  453 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001C0F 4F               [ 1]  454 	clr a 
      001C10 90 5F            [ 1]  455 	clrw y 
      001C12 91 A7 00 32      [ 1]  456 	ldf ([FPTR],y),a
      001C16 90 5C            [ 2]  457     incw y
      001C18 91 A7 00 32      [ 1]  458 	ldf ([FPTR],y),a
      001C1C 90 5C            [ 2]  459     incw y
      001C1E 91 A7 00 32      [ 1]  460 	ldf ([FPTR],y),a
      001C22 90 5C            [ 2]  461     incw y
      001C24 91 A7 00 32      [ 1]  462 	ldf ([FPTR],y),a
      001C28 72 05 50 5F FB   [ 2]  463 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001C2D 81               [ 4]  464 	ret
      001C2E                        465 row_erase_proc_end:
                                    466 
                                    467 
                                    468 ;-----------------------------------
                                    469 ; block programming must be 
                                    470 ; executed from RAM 
                                    471 ; initial contidions: 
                                    472 ; 		memory unlocked
                                    473 ;       FPTR initialized 
                                    474 ; input: 
                                    475 ;    x   buffer address 
                                    476 ;-----------------------------------
                           000001   477 	BCNT=1 
      001C2E                        478 copy_buffer:
      001C2E 4B 80            [ 1]  479 	push #BLOCK_SIZE  
                                    480 ;enable block programming 
      001C30 72 10 50 5B      [ 1]  481 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001C34 72 11 50 5C      [ 1]  482 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001C38 90 5F            [ 1]  483 	clrw y
      001C3A F6               [ 1]  484 1$:	ld a,(x)
      001C3B 91 A7 00 32      [ 1]  485 	ldf ([FPTR],y),a
      001C3F 5C               [ 2]  486 	incw x 
      001C40 90 5C            [ 2]  487 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001C42 0A 01            [ 1]  488 	dec (BCNT,sp)
      001C44 26 F4            [ 1]  489 	jrne 1$
                                    490 ; wait EOP bit 
      001C46 72 05 50 5F FB   [ 2]  491 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001C4B 84               [ 1]  492 	pop a ; remove BCNT from stack 
      001C4C 81               [ 4]  493 	ret 
      001C4D                        494 copy_buffer_end:
                                    495 
                                    496 ;-------------------------
                                    497 ; move program_row to RAM 
                                    498 ; in TIB 
                                    499 ;------------------------
      001C4D                        500 copy_prog_to_ram:
      001C4D 1D 00 06         [ 2]  501 	subw x,#6
      001C50 90 AE 1C 2E      [ 2]  502 	ldw y,#copy_buffer 
      001C54 EF 04            [ 2]  503 	ldw (4,x),y 
      001C56 90 AE 17 00      [ 2]  504 	ldw y,#TIBBASE
      001C5A EF 02            [ 2]  505 	ldw (2,x),y 
      001C5C 90 AE 1C 4D      [ 2]  506 	ldw y,#copy_buffer_end 
      001C60 72 A2 1C 2E      [ 2]  507 	subw y,#copy_buffer  
      001C64 FF               [ 2]  508 	ldw (x),y 
      001C65 CD 0A F6         [ 4]  509 	call CMOVE 
      001C68 81               [ 4]  510 	ret 
                                    511 
                                    512 
                                    513 ;-----------------------------
                                    514 ; write a row in FLASH/EEPROM 
                                    515 ; WR-ROW ( a ud -- )
                                    516 ; a -> address 128 byte buffer to write 
                                    517 ; ud ->  row address in FLASH|EEPROM 
                                    518 ;-----------------------------
      001C69 1B B0                  519 	.word LINK 
                           001C6B   520 	LINK=.
      001C6B 06                     521 	.byte 6 
      001C6C 57 52 2D 52 4F 57      522 	.ascii "WR-ROW"
      001C72                        523 write_row:
      001C72 CD 19 80         [ 4]  524 	call fptr_store
                                    525 ; align to FLASH block 
      001C75 A6 80            [ 1]  526 	ld a,#0x80 
      001C77 B4 34            [ 1]  527 	and a,PTR8 
      001C79 B7 34            [ 1]  528 	ld PTR8,a  
      001C7B CD 1C 4D         [ 4]  529 	call copy_prog_to_ram
      001C7E CD 1A D6         [ 4]  530 	call unlock
      001C81 90 93            [ 1]  531 	ldw y,x 
      001C83 90 FE            [ 2]  532 	ldw y,(y)
      001C85 1C 00 02         [ 2]  533 	addw x,#CELLL 
      001C88 89               [ 2]  534 	pushw x 
      001C89 93               [ 1]  535 	ldw x,y ; buffer address in x 
      001C8A CD 17 00         [ 4]  536 	call TIBBASE
      001C8D CD 1A FE         [ 4]  537 	call lock
      001C90 85               [ 2]  538 	popw x 
      001C91 81               [ 4]  539 	ret 
                                    540 
                                    541 ;-------------------------------------
                                    542 ; change value of OPTION register 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                                    543 ; SET-OPT (c n -- ) 
                                    544 ; c new value.
                                    545 ; n OPT  number {1..7}
                                    546 ;--------------------------------------
      001C92 1C 6B                  547 		.word LINK 
                           001C94   548 		LINK=.
      001C94 07                     549 		.byte 7 
      001C95 53 45 54 2D 4F 50 54   550 		.ascii "SET-OPT" 
      001C9C                        551 set_option: 
      001C9C 90 93            [ 1]  552 		ldw y,x 
      001C9E 90 FE            [ 2]  553 		ldw y,(y)
      001CA0 27 06            [ 1]  554 		jreq 1$
      001CA2 90 A3 00 07      [ 2]  555 		cpw y,#7 
      001CA6 23 04            [ 2]  556 		jrule 2$ 
                                    557 ; invalid OPTION number 		
      001CA8 1C 00 04         [ 2]  558 1$:		addw x,#2*CELLL
      001CAB 81               [ 4]  559 		ret
      001CAC 90 58            [ 2]  560 2$:		sllw y 
      001CAE 72 A9 47 FF      [ 2]  561 		addw y,#OPTION_BASE-1
      001CB2 FF               [ 2]  562 		ldw (x),y 
      001CB3 1D 00 02         [ 2]  563 		subw x,#CELLL 
      001CB6 90 5F            [ 1]  564 		clrw y 
      001CB8 FF               [ 2]  565 		ldw (x),y 
      001CB9 CD 1B 44         [ 4]  566 		call ee_cstore
      001CBC 81               [ 4]  567 		ret 
                                    568 
                                    569 
                                    570 
                                    571 ;--------------------------------------
                                    572 ; reset system to its original state 
                                    573 ; before any user modification
                                    574 ; PRISTINE ( -- )
                                    575 ;-------------------------------------
      001CBD 1C 94                  576 	.word LINK  
                           001CBF   577 	LINK=.
      001CBF 08                     578 	.byte 8 
      001CC0 50 52 49 53 54 49 4E   579 	.ascii "PRISTINE"
             45
      001CC8                        580 pristine:
                                    581 ;;; erase EEPROM
      001CC8 CD 19 9F         [ 4]  582 	call EEPROM 
      001CCB CD 06 5A         [ 4]  583 1$:	call DDUP 
      001CCE CD 1B BA         [ 4]  584 	call row_erase
      001CD1 90 93            [ 1]  585 	ldw y,x 
      001CD3 90 EE 02         [ 2]  586 	ldw y,(2,y)
      001CD6 72 A9 00 80      [ 2]  587 	addw y,#BLOCK_SIZE
      001CDA EF 02            [ 2]  588 	ldw (2,x),y
      001CDC 90 A3 48 00      [ 2]  589 	cpw y,#OPTION_BASE 
      001CE0 25 E9            [ 1]  590 	jrult 1$
                                    591 ;;; reset OPTION to default values
      001CE2 90 AE 00 01      [ 2]  592 	ldw y,#1 ; OPT1 
      001CE6 FF               [ 2]  593 2$:	ldw (x),y   
      001CE7 90 5F            [ 1]  594 	clrw y 
      001CE9 EF 02            [ 2]  595 	ldw (2,x),y  ; ( 0 1 -- ) 
      001CEB CD 06 5A         [ 4]  596 	call DDUP    ; ( 0 1 0 1 -- )  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001CEE CD 1C 9C         [ 4]  597 	call set_option
      001CF1 90 93            [ 1]  598 	ldw y,x 
      001CF3 90 FE            [ 2]  599 	ldw y,(y)
      001CF5 90 5C            [ 2]  600 	incw y  ; next OPTION 
      001CF7 90 A3 00 08      [ 2]  601 	cpw y,#8 
      001CFB 25 E9            [ 1]  602 	jrult 2$
                                    603 ;;; erase first row of app_space 	
      001CFD 90 AE 20 80      [ 2]  604 	ldw y,#app_space
      001D01 EF 02            [ 2]  605 	ldw (2,x),y  
      001D03 90 5F            [ 1]  606 	clrw y 
      001D05 FF               [ 2]  607 	ldw (x),y ; ( app_space 0 -- )
      001D06 CD 1B BA         [ 4]  608 	call row_erase 
                                    609 ; reset interrupt vectors 
      001D09 1D 00 02         [ 2]  610 	subw x,#CELLL 
      001D0C 90 5F            [ 1]  611 	clrw y  
      001D0E FF               [ 2]  612 4$:	ldw (x),y  ; ( n -- ) int# 
      001D0F CD 04 74         [ 4]  613 	call DUPP  
      001D12 CD 1D 2F         [ 4]  614 	call reset_vector
      001D15 90 93            [ 1]  615 	ldw y,x 
      001D17 90 FE            [ 2]  616 	ldw y,(y)
      001D19 90 5C            [ 2]  617 	incw y   ; next vector 
      001D1B 90 A3 00 19      [ 2]  618 	cpw y,#25 
      001D1F 25 ED            [ 1]  619 	jrult 4$
      001D21 CC 00 00         [ 2]  620 	jp NonHandledInterrupt ; reset MCU
                                    621 
                                    622 ;------------------------------
                                    623 ; reset an interrupt vector 
                                    624 ; to its initial value 
                                    625 ; i.e. NonHandledInterrupt
                                    626 ; RST-IVEC ( n -- )
                                    627 ;-----------------------------
      001D24 1C BF                  628 	.word LINK 
                           001D26   629 	LINK=. 
      001D26 08                     630 	.byte 8 
      001D27 52 53 54 2D 49 56 45   631 	.ascii "RST-IVEC"
             43
      001D2F                        632 reset_vector:
      001D2F 90 93            [ 1]  633 	ldw y,x
      001D31 1C 00 02         [ 2]  634 	addw x,#CELLL 
      001D34 90 FE            [ 2]  635 	ldw y,(y)
      001D36 90 A3 00 17      [ 2]  636 	cpw y,#23 
      001D3A 27 3A            [ 1]  637 	jreq 9$
      001D3C 90 A3 00 1D      [ 2]  638 	cpw y,#29 ; last vector
      001D40 22 34            [ 1]  639 	jrugt 9$  
      001D42 90 58            [ 2]  640 	sllw y 
      001D44 90 58            [ 2]  641 	sllw y 
      001D46 72 A9 80 08      [ 2]  642 	addw y,#0x8008 ; irq0 address 
      001D4A 90 BF 24         [ 2]  643 	ldw YTEMP,y
      001D4D 1D 00 06         [ 2]  644 	subw x,#3*CELLL 
      001D50 EF 02            [ 2]  645 	ldw (2,x),y 
      001D52 90 5F            [ 1]  646 	clrw y
      001D54 FF               [ 2]  647 	ldw (x),y 
      001D55 A6 82            [ 1]  648 	ld a,#0x82 
      001D57 90 95            [ 1]  649 	ld yh,a
      001D59 EF 04            [ 2]  650 	ldw (4,x),y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001D5B CD 1B 90         [ 4]  651 	call ee_store
      001D5E 1D 00 06         [ 2]  652 	subw x,#3*CELLL
      001D61 90 5F            [ 1]  653 	clrw y 
      001D63 FF               [ 2]  654 	ldw (x),y 
      001D64 90 AE 00 00      [ 2]  655 	ldw y,#NonHandledInterrupt
      001D68 EF 04            [ 2]  656 	ldw (4,x),y 
      001D6A 90 BE 24         [ 2]  657 	ldw y,YTEMP  
      001D6D 72 A9 00 02      [ 2]  658 	addw y,#2
      001D71 EF 02            [ 2]  659 	ldw (2,x),y 
      001D73 CD 1B 90         [ 4]  660 	call ee_store
      001D76 81               [ 4]  661 9$:	ret 
                                    662 
                                    663 
                                    664 ;------------------------------
                                    665 ; all interrupt vector with 
                                    666 ; an address >= a are resetted 
                                    667 ; to default
                                    668 ; CHKIVEC ( a -- )
                                    669 ;------------------------------
      001D77 1D 26                  670 	.word LINK 
                           001D79   671 	LINK=.
      001D79 07                     672 	.byte 7
      001D7A 43 48 4B 49 56 45 43   673 	.ascii "CHKIVEC"
                                    674 ;local variables 
                           000001   675 	SSP=1
                           000003   676 	CADR=3
                           000005   677 	OFS=5
                           000006   678 	VSIZE=6  
      001D81                        679 CHKIVEC:
      001D81 52 06            [ 2]  680 	sub sp,#VSIZE ;alloc local variables 
      001D83 90 93            [ 1]  681 	ldw y,x 
      001D85 90 FE            [ 2]  682 	ldw y,(y)
      001D87 17 03            [ 2]  683 	ldw (CADR,sp),y ; ca 
      001D89 1F 01            [ 2]  684 	ldw (SSP,sp),x 
      001D8B AE 80 0A         [ 2]  685 	ldw x,#0x800a ; irq0 address 
      001D8E BF 33            [ 2]  686 	ldw PTR16,X
      001D90 AE FF FC         [ 2]  687 	ldw x,#-4 
      001D93 1C 00 04         [ 2]  688 1$:	addw x,#4
      001D96 A3 00 78         [ 2]  689 	cpw x,#30*4 ; irq0-29 
      001D99 27 22            [ 1]  690 	jreq 9$
      001D9B 90 93            [ 1]  691 	ldw y,x  
      001D9D 91 D6 33         [ 4]  692 	ld a,([PTR16],y)
      001DA0 11 03            [ 1]  693 	cp a,(CADR,sp)
      001DA2 25 EF            [ 1]  694 	jrult 1$
      001DA4 90 5C            [ 2]  695 	incw y 
      001DA6 91 D6 33         [ 4]  696 	ld a,([PTR16],y)
      001DA9 11 04            [ 1]  697 	cp a,(CADR+1,sp) 
      001DAB 25 E6            [ 1]  698 	jrult 1$ 
      001DAD 1F 05            [ 2]  699 	ldw (OFS,sp),x 
      001DAF 54               [ 2]  700 	srlw x
      001DB0 54               [ 2]  701 	srlw x 
      001DB1 90 93            [ 1]  702 	ldw y,x 
      001DB3 1E 01            [ 2]  703 	ldw x,(SSP,sp)
      001DB5 FF               [ 2]  704 	ldw (x),y
      001DB6 CD 1D 2F         [ 4]  705 	call reset_vector
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001DB9 1E 05            [ 2]  706 	ldw x,(OFS,sp) 
      001DBB 20 D6            [ 2]  707 	jra 1$
      001DBD 1E 01            [ 2]  708 9$:	ldw x,(SSP,sp) 
      001DBF 1C 00 02         [ 2]  709 	addw x,#CELLL 
      001DC2 5B 06            [ 2]  710 	addw sp,#VSIZE ; drop local variables  
      001DC4 81               [ 4]  711 	ret 
                                    712 
                                    713 ;------------------------------
                                    714 ; set interrupt vector 
                                    715 ; SET-IVEC ( ud n -- )
                                    716 ;  ud Handler address
                                    717 ;  n  vector # 0 .. 29 
                                    718 ;-----------------------------
      001DC5 1D 79                  719 	.word LINK
                           001DC7   720 	LINK=.
      001DC7 08                     721 	.byte 8 
      001DC8 53 45 54 2D 49 56 45   722 	.ascii "SET-IVEC" 
             43
      001DD0                        723 set_vector:
      001DD0 90 93            [ 1]  724     ldw y,x 
      001DD2 1C 00 02         [ 2]  725 	addw x,#CELLL 
      001DD5 90 FE            [ 2]  726 	ldw y,(y) ; vector #
      001DD7 90 A3 00 1D      [ 2]  727 	cpw y,#29 ; last vector
      001DDB 23 04            [ 2]  728 	jrule 2$
      001DDD 1C 00 04         [ 2]  729 	addw x,#2*CELLL 
      001DE0 81               [ 4]  730 	ret
      001DE1 90 58            [ 2]  731 2$:	sllw y 
      001DE3 90 58            [ 2]  732 	sllw y 
      001DE5 72 A9 80 08      [ 2]  733 	addw y,#0X8008 ; IRQ0 vector address 
      001DE9 90 BF 24         [ 2]  734 	ldw YTEMP,y ; vector address 
      001DEC A6 82            [ 1]  735 	ld a,#0x82 
      001DEE 90 95            [ 1]  736 	ld yh,a 
      001DF0 E6 01            [ 1]  737 	ld a,(1,x) ; isr address bits 23..16 
      001DF2 90 97            [ 1]  738 	ld yl,a 
                                    739 ;  write 0x82 + most significant byte of int address	
      001DF4 1D 00 06         [ 2]  740 	subw x,#3*CELLL 
      001DF7 EF 04            [ 2]  741 	ldw (4,x),y 
      001DF9 90 BE 24         [ 2]  742 	ldw y,YTEMP
      001DFC EF 02            [ 2]  743 	ldw (2,x),y ; vector address 
      001DFE 90 5F            [ 1]  744 	clrw y 
      001E00 FF               [ 2]  745 	ldw (x),y   ; as a double 
      001E01 CD 1B 90         [ 4]  746 	call ee_store 
      001E04 90 93            [ 1]  747 	ldw y,x 
      001E06 90 EE 02         [ 2]  748 	ldw y,(2,y) ; bits 15..0 int vector 
      001E09 1D 00 06         [ 2]  749 	subw x,#3*CELLL 
      001E0C EF 04            [ 2]  750 	ldw (4,x),y 
      001E0E 90 BE 24         [ 2]  751 	ldw y,YTEMP 
      001E11 72 A9 00 02      [ 2]  752 	addw y,#2 
      001E15 EF 02            [ 2]  753 	ldw (2,x),y 
      001E17 90 5F            [ 1]  754 	clrw y 
      001E19 FF               [ 2]  755 	ldw (x),y 
      001E1A CD 1B 90         [ 4]  756 	call ee_store
      001E1D 1C 00 04         [ 2]  757 	addw x,#2*CELLL  
      001E20 81               [ 4]  758 9$: ret 
                                    759 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



                                    760 
                                    761 ;------------------------
                                    762 ; Compile word to flash
                                    763 ; EE, (w -- )
                                    764 ;-----------------------
      001E21 1D C7                  765 	.word LINK
                           001E23   766 	LINK=.
      001E23 03                     767 	.byte 3
      001E24 45 45 2C               768 	.ascii "EE,"
      001E27                        769 ee_comma:
      001E27 1D 00 04         [ 2]  770 	subw x,#2*CELLL 
      001E2A 90 BE 18         [ 2]  771 	ldw y,UCP
      001E2D 90 89            [ 2]  772 	pushw y 
      001E2F EF 02            [ 2]  773 	ldw (2,x),y 
      001E31 90 5F            [ 1]  774 	clrw y 
      001E33 FF               [ 2]  775 	ldw (x),y
      001E34 CD 1B 90         [ 4]  776 	call ee_store
      001E37 90 85            [ 2]  777 	popw y 
      001E39 72 A9 00 02      [ 2]  778 	addw y,#2
      001E3D 90 BF 18         [ 2]  779 	ldw UCP,y
      001E40 81               [ 4]  780 	ret 
                                    781 
                                    782 ;-------------------------
                                    783 ; Compile byte to flash 
                                    784 ; EEC, ( c -- )	
                                    785 ;-------------------------
      001E41 1E 23                  786 	.word LINK 
                           001E43   787 	LINK=.
      001E43 04                     788 	.byte 4 
      001E44 45 45 43 2C            789 	.ascii "EEC,"
      001E48                        790 ee_ccomma:
      001E48 1D 00 04         [ 2]  791 	subw x,#2*CELLL 
      001E4B 90 BE 18         [ 2]  792 	ldw y,UCP
      001E4E 90 89            [ 2]  793 	pushw y 
      001E50 EF 02            [ 2]  794 	ldw (2,x),y 
      001E52 90 5F            [ 1]  795 	clrw y 
      001E54 FF               [ 2]  796 	ldw (x),y
      001E55 CD 1B 44         [ 4]  797 	call ee_cstore
      001E58 90 85            [ 2]  798 	popw y 
      001E5A 90 5C            [ 2]  799 	incw y 
      001E5C 90 BF 18         [ 2]  800 	ldw UCP,y
      001E5F 81               [ 4]  801 	ret 
                                    802 
                                    803 
                                    804 ;--------------------------
                                    805 ; copy FLASH block to ROWBUF
                                    806 ; ROW2BUF ( ud -- )
                                    807 ;--------------------------
      001E60 1E 43                  808 	.word LINK 
                           001E62   809 	LINK=.
      001E62 07                     810 	.byte 7 
      001E63 52 4F 57 32 42 55 46   811 	.ascii "ROW2BUF"
      001E6A                        812 ROW2BUF: 
      001E6A CD 19 80         [ 4]  813 	call fptr_store 
      001E6D A6 80            [ 1]  814 	ld a,#BLOCK_SIZE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001E6F 88               [ 1]  815 	push a 
      001E70 B4 34            [ 1]  816 	and a,PTR8 ; block align 
      001E72 B7 34            [ 1]  817 	ld PTR8,a
      001E74 90 AE 16 80      [ 2]  818 	ldw y,#ROWBUFF 
      001E78 92 BC 00 32      [ 5]  819 1$: ldf a,[FPTR]
      001E7C 90 F7            [ 1]  820 	ld (y),a
      001E7E CD 1B 12         [ 4]  821 	call inc_fptr
      001E81 90 5C            [ 2]  822 	incw y 
      001E83 0A 01            [ 1]  823 	dec (1,sp)
      001E85 26 F1            [ 1]  824 	jrne 1$ 
      001E87 84               [ 1]  825 	pop a 
      001E88 81               [ 4]  826 	ret 
                                    827 
                                    828 
                                    829 ;---------------------------
                                    830 ; copy ROWBUFF to flash 
                                    831 ; BUF2ROW ( ud -- )
                                    832 ; ud is row address as double 
                                    833 ;---------------------------
      001E89 1E 62                  834 	.word LINK 
                           001E8B   835 	LINK=.
      001E8B 07                     836 	.byte 7 
      001E8C 42 55 46 32 52 4F 57   837 	.ascii "BUF2ROW" 
      001E93                        838 BUF2ROW:
      001E93 CD 05 6F         [ 4]  839 	call TBUF ; ( ud rb -- )
      001E96 CD 06 2F         [ 4]  840 	call ROT 
      001E99 CD 06 2F         [ 4]  841 	call ROT  ; ( rb ud -- )
      001E9C CD 1C 72         [ 4]  842 	call write_row 
      001E9F 81               [ 4]  843 	ret 
                                    844 
                                    845 ;---------------------------------
                                    846 ; how many byte free in that row 
                                    847 ; RFREE ( a -- n )
                                    848 ; a is least byte of target address
                                    849 ;----------------------------------
      001EA0 1E 8B                  850 	.word LINK 
                           001EA2   851 	LINK=.
      001EA2 05                     852 	.byte 5 
      001EA3 52 46 52 45 45         853 	.ascii "RFREE"
      001EA8                        854 RFREE:
      001EA8 E6 01            [ 1]  855 	ld a,(1,x)
      001EAA A4 7F            [ 1]  856 	and a,#BLOCK_SIZE-1 
      001EAC B7 24            [ 1]  857 	ld YTEMP,a 
      001EAE A6 80            [ 1]  858 	ld a,#BLOCK_SIZE 
      001EB0 B0 24            [ 1]  859 	sub a,YTEMP 
      001EB2 90 5F            [ 1]  860 	clrw y 
      001EB4 90 97            [ 1]  861 	ld yl,a
      001EB6 FF               [ 2]  862 	ldw (x),y 
      001EB7 81               [ 4]  863 	ret 
                                    864 
                                    865 ;---------------------------------
                                    866 ; write u bytes to flash/EEPROM 
                                    867 ; constraint to row limit 
                                    868 ; RAM2EE ( ud a u -- u2 )
                                    869 ; ud flash address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                    870 ; a ram address 
                                    871 ; u bytes count
                                    872 ; return u2 bytes written  
                                    873 ;-------------------------------
      001EB8 1E A2                  874 	.word LINK 
                           001EBA   875 	LINK=. 
      001EBA 06                     876 	.byte 6
      001EBB 52 41 4D 32 45 45      877 	.ascii "RAM2EE"
                                    878 	
      001EC1                        879 RAM2EE:
                                    880 ; copy ud on top 
      001EC1 90 93            [ 1]  881 	ldw y,x 
      001EC3 90 EE 06         [ 2]  882 	ldw y,(6,y) ; LSW of ud  
      001EC6 90 BF 24         [ 2]  883 	ldw YTEMP,y 
      001EC9 90 93            [ 1]  884 	ldw y,x 
      001ECB 90 EE 04         [ 2]  885 	ldw y,(4,y)  ; MSW of ud 
      001ECE 1D 00 04         [ 2]  886 	subw x,#2*CELLL 
      001ED1 FF               [ 2]  887 	ldw (x),y 
      001ED2 90 BE 24         [ 2]  888 	ldw y,YTEMP 
      001ED5 EF 02            [ 2]  889 	ldw (2,x),y 
      001ED7 CD 1E 6A         [ 4]  890 	call ROW2BUF 
      001EDA 90 93            [ 1]  891 	ldw y,x 
      001EDC 90 EE 06         [ 2]  892 	ldw y,(6,y)
      001EDF 90 89            [ 2]  893 	pushw y ; udl 
      001EE1 90 9F            [ 1]  894 	ld a,yl
      001EE3 A4 7F            [ 1]  895 	and a,#BLOCK_SIZE-1 
      001EE5 90 5F            [ 1]  896 	clrw y 
      001EE7 90 97            [ 1]  897 	ld yl,a 
      001EE9 72 A9 16 80      [ 2]  898 	addw y,#ROWBUFF 
      001EED 1D 00 02         [ 2]  899 	subw x,#CELLL 
      001EF0 FF               [ 2]  900 	ldw (x),y  
      001EF1 CD 04 84         [ 4]  901 	call SWAPP ;  ( ud a ra u -- )
      001EF4 CD 04 1E         [ 4]  902 	call RFROM  
      001EF7 CD 1E A8         [ 4]  903 	call RFREE 
      001EFA CD 07 6F         [ 4]  904 	call MIN
      001EFD CD 04 74         [ 4]  905 	call DUPP 
      001F00 CD 04 3D         [ 4]  906 	call TOR  
      001F03 CD 0A F6         [ 4]  907 	call CMOVE
      001F06 CD 1E 93         [ 4]  908 	call BUF2ROW 
      001F09 CD 04 1E         [ 4]  909 	call RFROM 
      001F0C 81               [ 4]  910 	ret 
                                    911 
                                    912 ;--------------------------
                                    913 ; expand 16 bit address 
                                    914 ; to 32 bit address 
                                    915 ; FADDR ( a -- ud )
                                    916 ;--------------------------
      001F0D 1E BA                  917 	.word LINK 
                           001F0F   918 	LINK=. 
      001F0F 05                     919 	.byte 5 
      001F10 46 41 44 44 52         920 	.ascii "FADDR"
      001F15                        921 FADDR:
      001F15 CC 09 BA         [ 2]  922 	jp ZERO 
                                    923 
                                    924 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                                    925 ; move new colon definition to FLASH 
                                    926 ; using WR-ROW for efficiency 
                                    927 ; preserving bytes already used 
                                    928 ; in the current block. 
                                    929 ; ud+c must not exceed block boundary 
                                    930 ; at this point the compiler as completed
                                    931 ; in RAM and pointers CP and CNTXT updated.
                                    932 ; CNTXT point to nfa of new word and  
                                    933 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                    934 ; 
                                    935 ; FMOVE ( -- cp+ )
                                    936 ; 
                                    937 ;--------------------------
      001F18 1F 0F                  938 	.word LINK 
                           001F1A   939 	LINK=.
      001F1A 05                     940 	.byte 5 
      001F1B 46 4D 4F 56 45         941 	.ascii "FMOVE" 
      001F20                        942 FMOVE:
      001F20 CD 05 81         [ 4]  943 	call TFLASH 
      001F23 CD 03 CD         [ 4]  944 	CALL AT 
      001F26 CD 03 78         [ 4]  945 	CALL QBRAN 
      001F29 1F A4                  946 	.word no_move  
      001F2B CD 05 D0         [ 4]  947 	call CPP
      001F2E CD 03 CD         [ 4]  948 	call AT  
      001F31 CD 04 74         [ 4]  949 	call DUPP ; ( udl udl -- )
      001F34 CD 05 B4         [ 4]  950 	call CNTXT 
      001F37 CD 03 CD         [ 4]  951 	call AT 
      001F3A CD 03 45         [ 4]  952 	call DOLIT 
      001F3D 00 02                  953 	.word 2 
      001F3F CD 06 CD         [ 4]  954 	call SUBB ; ( udl udl a -- )
      001F42 CD 04 84         [ 4]  955 	call SWAPP 
      001F45 CD 1F 15         [ 4]  956 	call FADDR 
      001F48 CD 06 2F         [ 4]  957 	call ROT  ; ( udl ud a -- )
      001F4B CD 04 74         [ 4]  958 	call DUPP 
      001F4E CD 04 3D         [ 4]  959 	call TOR    ; R: a 
      001F51                        960 FMOVE2: 
      001F51 CD 0A A9         [ 4]  961 	call HERE 
      001F54 CD 04 31         [ 4]  962 	call RAT 
      001F57 CD 06 CD         [ 4]  963 	call SUBB ; (udl ud a wl -- )
      001F5A                        964 next_row:
      001F5A CD 04 74         [ 4]  965 	call DUPP 
      001F5D CD 04 3D         [ 4]  966 	call TOR  ; ( udl ud a wl -- ) R: a wl
      001F60 CD 1E C1         [ 4]  967 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      001F63 CD 04 74         [ 4]  968 	call DUPP 
      001F66 CD 04 3D         [ 4]  969 	call TOR
      001F69 CD 06 6F         [ 4]  970 	call PLUS  ; ( udl+ ) 
      001F6C CD 04 74         [ 4]  971 	call DUPP 
      001F6F CD 09 BA         [ 4]  972 	call ZERO   ; ( udl+ ud -- )
      001F72 CD 04 1E         [ 4]  973 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      001F75 CD 04 1E         [ 4]  974 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      001F78 CD 04 9E         [ 4]  975 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      001F7B CD 06 CD         [ 4]  976 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      001F7E CD 04 74         [ 4]  977 	call DUPP 
      001F81 CD 03 78         [ 4]  978 	call QBRAN
      001F84 1F 9D                  979 	.word fmove_done 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      001F86 CD 04 84         [ 4]  980 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      001F89 CD 04 1E         [ 4]  981 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      001F8C CD 06 6F         [ 4]  982 	call PLUS  ; ( udl+2 ud wl- a+ )
      001F8F CD 04 74         [ 4]  983 	call DUPP 
      001F92 CD 04 3D         [ 4]  984 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      001F95 CD 04 84         [ 4]  985 	call SWAPP 
      001F98 CD 03 8F         [ 4]  986 	call BRAN
      001F9B 1F 5A                  987 	.word next_row  
      001F9D                        988 fmove_done:	
      001F9D CD 04 1E         [ 4]  989 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      001FA0 1C 00 0A         [ 2]  990 	addw x,#5*CELLL ; (  -- udl+ ) new CP 
      001FA3 81               [ 4]  991  	ret  
      001FA4                        992 no_move:
      001FA4 CD 09 BA         [ 4]  993 	call ZERO
      001FA7 81               [ 4]  994 	ret 
                                    995 
                                    996 ;------------------------------------------
                                    997 ; adjust pointers after **FMOVE** operetion.
                                    998 ; UPDAT-PTR ( cp+ -- )
                                    999 ; cp+ is new CP position after FMOVE 
                                   1000 ;-------------------------------------------
      001FA8 1F 1A                 1001 	.word LINK 
                           001FAA  1002 	LINK=.
      001FAA 09                    1003 	.byte 9
      001FAB 55 50 44 41 54 2D 50  1004 	.ascii "UPDAT-PTR" 
             54 52
      001FB4                       1005 UPDATPTR:
                                   1006 ;reset VP to previous position  
      001FB4 CD 19 FA         [ 4] 1007 	call EEPVP 
      001FB7 CD 04 6A         [ 4] 1008 	call DROP 
      001FBA CD 03 CD         [ 4] 1009 	call AT
      001FBD CD 05 C2         [ 4] 1010 	call VPP 
      001FC0 CD 03 B6         [ 4] 1011 	call STORE
                                   1012 ;update CONTEXT and LAST 
      001FC3 CD 19 E4         [ 4] 1013 	call EEPCP 
      001FC6 CD 04 6A         [ 4] 1014 	call DROP
      001FC9 CD 03 CD         [ 4] 1015 	call AT
      001FCC CD 03 45         [ 4] 1016 	call DOLIT 
      001FCF 00 02                 1017 	.word 2 
      001FD1 CD 06 6F         [ 4] 1018 	call PLUS 
      001FD4 CD 04 74         [ 4] 1019 	call DUPP 
      001FD7 CD 05 B4         [ 4] 1020 	call CNTXT 
      001FDA CD 03 B6         [ 4] 1021 	call STORE
      001FDD CD 05 E0         [ 4] 1022 	call LAST
      001FE0 CD 03 B6         [ 4] 1023 	call STORE 
      001FE3 CD 1A 14         [ 4] 1024 	call UPDATLAST 
                                   1025 ;update CP 
      001FE6 CD 05 D0         [ 4] 1026 	call CPP 
      001FE9 CD 03 B6         [ 4] 1027 	call STORE
      001FEC CD 1A 3D         [ 4] 1028 	call UPDATCP 
      001FEF 81               [ 4] 1029 	ret 
                                   1030 
                                   1031 ;-----------------------------
                                   1032 ; move interrupt sub-routine
                                   1033 ; in flash memory
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



                                   1034 ;----------------------------- 
      001FF0 1F AA                 1035 	.word LINK 
                           001FF2  1036 	LINK=. 
      001FF2 06                    1037 	.byte 6
      001FF3 49 46 4D 4F 56 45     1038 	.ascii "IFMOVE" 
      001FF9                       1039 IFMOVE:
      001FF9 CD 05 81         [ 4] 1040 	call TFLASH 
      001FFC CD 03 CD         [ 4] 1041 	CALL AT 
      001FFF CD 03 78         [ 4] 1042 	CALL QBRAN 
      002002 1F A4                 1043 	.word no_move 
      002004 CD 05 D0         [ 4] 1044 	call CPP 
      002007 CD 03 CD         [ 4] 1045 	call AT 
      00200A CD 04 74         [ 4] 1046 	call DUPP ; ( udl udl -- )
      00200D CD 19 FA         [ 4] 1047 	call EEPVP 
      002010 CD 04 6A         [ 4] 1048 	call DROP
      002013 CD 03 CD         [ 4] 1049 	call AT  ; ( udl udl a )
      002016 CD 04 3D         [ 4] 1050 	call TOR 
      002019 CD 1F 15         [ 4] 1051 	call FADDR
      00201C CD 04 31         [ 4] 1052 	call RAT ; ( udl ud a -- ) R: a 
      00201F CC 1F 51         [ 2] 1053 	jp FMOVE2 
                                   1054 
                                   1055 
                                   1056 ; application code begin here
      002080                       1057 	.bndry 128 ; align on flash block  
      002080                       1058 app_space: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



                                   4635 .endif ; PICATOUT_MOD
                                   4636 
                           000001  4637 WANT_MATH_CONST = 1 
                           000001  4638 .if WANT_MATH_CONST 
                                   4639         ; irrational constants 
                                   4640         ; approximation by integers ratio.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



                                   4641         .include "const_ratio.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------------------------------------
                                     20 ; Irrationals constants 
                                     21 ; expressed as 2 integers ratio
                                     22 ; aproximation. These are to be used with scaling operators */ and */MOD 
                                     23 ; REF: https://www.forth.com/starting-forth/5-fixed-point-arithmetic/
                                     24 ;---------------------------------------------------------------------
                                     25 
                                     26 ;       PI ( --  355 113 )
                                     27 ; precision 8.5e-8 
                                     28 ; usage example to compute circle area
                                     29 ; : CAREA DUP * PI */ ;
                                     30 ; 
      002080 1F F2                   31         .word LINK 
                           002082    32         LINK=.
      002082 02                      33         .byte 2
      002083 50 49                   34         .ascii "PI" 
      002085                         35 PII:
      002085 1D 00 04         [ 2]   36         subw x,#2*CELLL 
      002088 90 AE 01 63      [ 2]   37         ldw y,#355 
      00208C EF 02            [ 2]   38         ldw (2,x),y 
      00208E 90 AE 00 71      [ 2]   39         ldw y,#113 
      002092 FF               [ 2]   40         ldw (x),y 
      002093 81               [ 4]   41         ret 
                                     42 
                                     43 ;      SQRT2 ( -- 19601  13860 )
                                     44 ; precision: 1.5e-9 
                                     45 ; usage example to compute Voltage peek to peek from Vrms 
                                     46 ; : VPP SQRT2 */ 2 * ;
                                     47 ;
      002094 20 82                   48         .word LINK 
                           002096    49         LINK=.
      002096 05                      50         .byte 5 
      002097 53 51 52 54 32          51         .ascii "SQRT2" 
      00209C                         52 SQRT2:
      00209C 1D 00 04         [ 2]   53         subw x,#2*CELLL 
      00209F 90 AE 4C 91      [ 2]   54         ldw y,#19601 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      0020A3 EF 02            [ 2]   55         ldw (2,x),y 
      0020A5 90 AE 36 24      [ 2]   56         ldw y,#13860 
      0020A9 FF               [ 2]   57         ldw (x),y 
      0020AA 81               [ 4]   58         ret 
                                     59 
                                     60 ;   SQRT3 ( -- 18817 10864 )
                                     61 ; precision: 1.1e-9
                                     62 ;
      0020AB 20 96                   63         .word LINK 
                           0020AD    64         LINK=.
      0020AD 05                      65         .byte 5
      0020AE 53 51 52 54 33          66         .ascii "SQRT3" 
      0020B3                         67 SQRT3: 
      0020B3 1D 00 04         [ 2]   68     subw x,#2*CELLL 
      0020B6 90 AE 49 81      [ 2]   69     ldw y,#18817 
      0020BA EF 02            [ 2]   70     ldw (2,x),y 
      0020BC 90 AE 2A 70      [ 2]   71     ldw y,#10864 
      0020C0 FF               [ 2]   72     ldw (x),y 
      0020C1 81               [ 4]   73     ret 
                                     74 
                                     75 ;   E ( -- 28667 10546 )
                                     76 ; precision: 5.5e-9 
                                     77 ; natural log base 
      0020C2 20 AD                   78         .word LINK 
                           0020C4    79         LINK=.
      0020C4 01                      80         .byte 1
      0020C5 45                      81         .ascii "E" 
      0020C6                         82 ENEPER:
      0020C6 1D 00 04         [ 2]   83     subw x,#2*CELLL 
      0020C9 90 AE 6F FB      [ 2]   84     ldw y,#28667 
      0020CD EF 02            [ 2]   85     ldw (2,x),y 
      0020CF 90 AE 29 32      [ 2]   86     ldw y,#10546 
      0020D3 FF               [ 2]   87     ldw (x),y 
      0020D4 81               [ 4]   88     ret 
                                     89 
                                     90 ;   SQRT10 ( -- 22936 7253 )
                                     91 ; precision: 5.7e-9 
      0020D5 20 C4                   92         .word LINK 
                           0020D7    93         LINK=.
      0020D7 06                      94         .byte 6 
      0020D8 53 51 52 54 31 30       95         .ascii "SQRT10" 
      0020DE                         96 SQRT10:
      0020DE 1D 00 04         [ 2]   97     subw x,#2*CELLL
      0020E1 90 AE 59 98      [ 2]   98     ldw y,#22936 
      0020E5 EF 02            [ 2]   99     ldw (2,x),y 
      0020E7 90 AE 1C 55      [ 2]  100     ldw y,#7253
      0020EB FF               [ 2]  101     ldw (x),y 
      0020EC 81               [ 4]  102     ret 
                                    103 
                                    104 ;   SQRT12 ( -- 26797 25293 )
                                    105 ; precision: 1.0e-9 
                                    106 ; used in music to compute well tempered scale
      0020ED 20 D7                  107         .word LINK 
                           0020EF   108         LINK=. 
      0020EF 06                     109         .byte 6 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      0020F0 53 51 52 54 31 32      110         .ascii "SQRT12"
      0020F6                        111 SQRT12:
      0020F6 1D 00 04         [ 2]  112     subw x,#2*CELLL 
      0020F9 90 AE 68 AD      [ 2]  113     ldw y,#26797
      0020FD EF 02            [ 2]  114     ldw (2,x),y 
      0020FF 90 AE 62 CD      [ 2]  115     ldw y,#25293
      002103 FF               [ 2]  116     ldw (x),y 
      002104 81               [ 4]  117     ret 
                                    118 
                                    119 ;   LOG2 ( -- 2040 11103 )
                                    120 ; precision: 1.1e-8
      002105 20 EF                  121         .word LINK 
                           002107   122         LINK=.
      002107 04                     123         .byte 4 
      002108 4C 4F 47 32            124         .ascii "LOG2" 
      00210C                        125 LOG2:
      00210C 1D 00 04         [ 2]  126     subw x,#2*CELLL
      00210F 90 AE 07 F8      [ 2]  127     ldw y,#2040 
      002113 EF 02            [ 2]  128     ldw (2,x),y 
      002115 90 AE 2B 5F      [ 2]  129     ldw y,#11103 
      002119 FF               [ 2]  130     ldw (x),y 
      00211A 81               [ 4]  131     ret 
                                    132 
                                    133 ;   LN2 ( -- 485 11464 )
                                    134 ; precision: 1.0e-7 
      00211B 21 07                  135         .word LINK 
                           00211D   136         LINK=.
      00211D 03                     137         .byte 3 
      00211E 4C 4E 32               138         .ascii "LN2" 
      002121                        139 LN2: 
      002121 1D 00 04         [ 2]  140     subw x,#2*CELLL
      002124 90 AE 01 E5      [ 2]  141     ldw y,#485
      002128 EF 02            [ 2]  142     ldw (2,x),y 
      00212A 90 AE 2C C8      [ 2]  143     ldw y,#11464 
      00212E FF               [ 2]  144     ldw (x),y 
      00212F 81               [ 4]  145     ret 
                                    146 
                                    147 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



                                   4642 .endif 
                                   4643 
                                   4644 ;===============================================================
                                   4645 
                           00211D  4646 LASTN =	LINK   ;last name defined
                                   4647 
                                   4648 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        0006F0 R   |   6 ABOR1      001245 R
  6 ABOR2      00125C R   |   6 ABORQ      00123D R   |   6 ABORT      00122E R
  6 ABRTQ      001519 R   |   6 ABSS       0006E7 R   |   6 ACCEP      0011C4 R
  6 ACCP1      0011CD R   |   6 ACCP2      0011F3 R   |   6 ACCP3      0011F6 R
  6 ACCP4      0011F8 R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |   6 ADRADJ     00060E R
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  6 AFT        001504 R   |   6 AGAIN      00145A R   |   6 AHEAD      0014B7 R
  6 ALLOT      00136D R   |   6 ANDD       0004C0 R   |     APP_CP  =  004004 
    APP_LAST=  004000     |     APP_RUN =  004002     |     APP_VP  =  004006 
  6 AT         0003CD R   |   6 ATEXE      000ADF R   |   6 AUTORUN    000123 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
  6 BACK1      00116C R   |   6 BASE       000531 R   |     BASEE   =  00000A 
    BCNT    =  000001     |   6 BCOMP      0013AF R   |   6 BDIGS      000BC7 R
    BEEP_BIT=  000004     |     BEEP_CSR=  0050F3     |     BEEP_MAS=  000010 
    BEEP_POR=  00000F     |   6 BEGIN      00143C R   |     BIT0    =  000000 
    BIT1    =  000001     |     BIT2    =  000002     |     BIT3    =  000003 
    BIT4    =  000004     |     BIT5    =  000005     |     BIT6    =  000006 
    BIT7    =  000007     |   6 BKSLA      001004 R   |   6 BKSP       00113C R
    BKSPP   =  000008     |   6 BLANK      0009AD R   |     BLOCK_SI=  000080 
    BOOT_ROM=  006000     |     BOOT_ROM=  007FFF     |   6 BRAN       00038F R
    BTW     =  000001     |   6 BUF2ROW    001E93 R   |   6 BYE        0000B0 R
    CADR    =  000003     |     CALLL   =  0000CD     |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CARRY   =  000028 
  6 CAT        0003EB R   |   6 CCOMMA     001391 R   |     CC_C    =  000000 
    CC_H    =  000004     |     CC_I0   =  000003     |     CC_I1   =  000005 
    CC_N    =  000002     |     CC_V    =  000007     |     CC_Z    =  000001 
    CELLL   =  000002     |   6 CELLM      000932 R   |   6 CELLP      000923 R
  6 CELLS      000941 R   |     CFG_GCR =  007F60     |     CFG_GCR_=  000001 
    CFG_GCR_=  000000     |   6 CHAR1      000DF4 R   |   6 CHAR2      000DF7 R
  6 CHKIVEC    001D81 R   |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |   6 CMOV1      000AFE R   |   6 CMOV2      000B16 R
  6 CMOVE      000AF6 R   |     CNTDWN  =  000030     |   6 CNTXT      0005B4 R
  6 COLD       001911 R   |   6 COLD1      001911 R   |   6 COLON      0016AF R
  6 COMMA      00137A R   |   6 COMPI      0013BF R   |     COMPO   =  000040 
  6 CONSTANT   001759 R   |     CONVERT_=  000001     |   6 COUNT      000A92 R
  6 CPP        0005D0 R   |     CPU_A   =  007F00     |     CPU_CCR =  007F0A 
    CPU_PCE =  007F01     |     CPU_PCH =  007F02     |     CPU_PCL =  007F03 
    CPU_SPH =  007F08     |     CPU_SPL =  007F09     |     CPU_XH  =  007F04 
    CPU_XL  =  007F05     |     CPU_YH  =  007F06     |     CPU_YL  =  007F07 
  6 CR         000E22 R   |   6 CREAT      0016F5 R   |     CRR     =  00000D 
  6 CSTOR      0003DA R   |   6 DAT        000A72 R   |     DATSTK  =  001680 
  6 DDROP      00064F R   |   6 DDUP       00065A R   |     DEBUG_BA=  007F00 
    DEBUG_EN=  007FFF     |   6 DECIM      000C77 R   |   6 DEPTH      0009FD R
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |   6 DGTQ1      000CBC R
  6 DI         0000BE R   |   6 DIG        000BF0 R   |   6 DIGIT      000B8B R
  6 DIGS       000C01 R   |   6 DIGS1      000C01 R   |   6 DIGS2      000C0E R
  6 DIGTQ      000C8B R   |     DM_BK1RE=  007F90     |     DM_BK1RH=  007F91 
    DM_BK1RL=  007F92     |     DM_BK2RE=  007F93     |     DM_BK2RH=  007F94 
    DM_BK2RL=  007F95     |     DM_CR1  =  007F96     |     DM_CR2  =  007F97 
    DM_CSR1 =  007F98     |     DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A 
  6 DN1        0006C7 R   |   6 DNEGA      0006AC R   |   6 DOCONST    001783 R
  6 DOLIT      000345 R   |   6 DONXT      000359 R   |   6 DOSTR      000E38 R
  6 DOT        000EBD R   |   6 DOT1       000ED3 R   |   6 DOTI1      0018A5 R
  6 DOTID      00188F R   |   6 DOTO1      0012D1 R   |   6 DOTOK      0012B7 R
  6 DOTPR      000FE6 R   |   6 DOTQ       001533 R   |   6 DOTQP      000E61 R
  6 DOTR       000E6F R   |   6 DOTS       001831 R   |   6 DOTS1      00183C R
  6 DOTS2      001845 R   |   6 DOVAR      000521 R   |   6 DROP       00046A R
  6 DSTOR      000A4C R   |   6 DUMP       0017E7 R   |   6 DUMP1      0017FE R
  6 DUMP3      001820 R   |   6 DUMPP      0017B6 R   |   6 DUPP       000474 R
  6 EDIGS      000C2C R   |   6 EEPCP      0019E4 R   |   6 EEPLAST    0019B7 R
  6 EEPROM     00199F R   |     EEPROM_B=  004000     |     EEPROM_E=  0047FF 
    EEPROM_S=  000800     |   6 EEPRUN     0019CE R   |   6 EEPVP      0019FA R
  6 EI         0000B7 R   |   6 ELSEE      001492 R   |   6 EMIT       00032F R
  6 ENEPER     0020C6 R   |   6 EQ1        00070B R   |   6 EQUAL      0006F5 R
  6 ERASE      000B58 R   |     ERR     =  00001B     |   6 EVAL       0012FA R
  6 EVAL1      0012FA R   |   6 EVAL2      001316 R   |   6 EXE1       000AED R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]

Symbol Table

  6 EXECU      00039F R   |   6 EXIT       0003AF R   |     EXT     =  000000 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |   6 EXTRC      000BB3 R
  6 FADDR      001F15 R   |     FHSE    =  7A1200     |     FHSI    =  F42400 
  6 FILL       000B25 R   |   6 FILL1      000B42 R   |   6 FILL2      000B4B R
  6 FIND       001098 R   |   6 FIND1      0010B6 R   |   6 FIND2      0010E4 R
  6 FIND3      0010F0 R   |   6 FIND4      001104 R   |   6 FIND5      001111 R
  6 FIND6      0010F5 R   |     FLASH_BA=  008000     |     FLASH_CR=  00505A 
    FLASH_CR=  000002     |     FLASH_CR=  000000     |     FLASH_CR=  000003 
    FLASH_CR=  000001     |     FLASH_CR=  00505B     |     FLASH_CR=  000005 
    FLASH_CR=  000004     |     FLASH_CR=  000007     |     FLASH_CR=  000000 
    FLASH_CR=  000006     |     FLASH_DU=  005064     |     FLASH_DU=  0000AE 
    FLASH_DU=  000056     |     FLASH_EN=  027FFF     |     FLASH_FP=  00505D 
    FLASH_FP=  000000     |     FLASH_FP=  000001     |     FLASH_FP=  000002 
    FLASH_FP=  000003     |     FLASH_FP=  000004     |     FLASH_FP=  000005 
    FLASH_IA=  00505F     |     FLASH_IA=  000003     |     FLASH_IA=  000002 
    FLASH_IA=  000006     |     FLASH_IA=  000001     |     FLASH_IA=  000000 
    FLASH_NC=  00505C     |     FLASH_NF=  00505E     |     FLASH_NF=  000000 
    FLASH_NF=  000001     |     FLASH_NF=  000002     |     FLASH_NF=  000003 
    FLASH_NF=  000004     |     FLASH_NF=  000005     |     FLASH_PU=  005062 
    FLASH_PU=  000056     |     FLASH_PU=  0000AE     |     FLASH_SI=  020000 
    FLASH_WS=  00480D     |     FLSI    =  01F400     |   6 FMOVE      001F20 R
  6 FMOVE2     001F51 R   |   6 FOR        00140F R   |   6 FORGET     000154 R
  6 FORGET1    000183 R   |   6 FORGET2    000209 R   |   6 FORGET4    000212 R
  6 FORGET6    0001CB R   |     FPTR    =  000032     |   6 FREEVAR    00021F R
  6 FREEVAR4   000255 R   |     GPIO_BAS=  005000     |     GPIO_CR1=  000003 
    GPIO_CR2=  000004     |     GPIO_DDR=  000002     |     GPIO_IDR=  000001 
    GPIO_ODR=  000000     |     GPIO_SIZ=  000005     |   6 HERE       000AA9 R
  6 HEX        000C62 R   |   6 HI         0018E4 R   |   6 HLD        0005A1 R
  6 HOLD       000BD7 R   |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |   6 ICOLON     0016C0 R
  6 IFETCH     00142D R   |   6 IFF        00146A R   |   6 IFMOVE     001FF9 R
    IMEDD   =  000080     |   6 IMMED      0016D2 R   |   6 INCH       000323 R
  6 INITOFS    001688 R   |   6 INN        00054F R   |     INPUT_DI=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]

Symbol Table

    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_PU=  000001 
  6 INTE1      001299 R   |   6 INTER      00126F R   |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
  6 INVER      000689 R   |     IPR0    =  000002     |     IPR1    =  000001 
    IPR2    =  000000     |     IPR3    =  000003     |     IPR_MASK=  000003 
    IRET_COD=  000080     |   6 ISEMI      00161D R   |     ITC_SPR1=  007F70 
    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |   6 JSRC       001672 R   |   6 KEY        000DA2 R
  6 KTAP       001189 R   |   6 KTAP1      0011AC R   |   6 KTAP2      0011AF R
  6 LAST       0005E0 R   |   6 LASTN   =  00211D R   |   6 LBRAC      0012A6 R
    LED2_BIT=  000005     |     LED2_MAS=  000020     |     LED2_POR=  00500A 
  6 LESS       000732 R   |     LF      =  00000A     |   6 LINK    =  00211D R
  6 LITER      0013E1 R   |   6 LN2        002121 R   |   6 LOG2       00210C R
  6 LSHIFT     00096C R   |   6 LSHIFT1    000975 R   |   6 LSHIFT4    00097D R
  6 LT1        000748 R   |     MASKK   =  001F7F     |   6 MAX        000752 R
  6 MAX1       000765 R   |   6 MIN        00076F R   |   6 MIN1       000782 R
  6 MMOD1      000825 R   |   6 MMOD2      000839 R   |   6 MMOD3      000850 R
  6 MMSM1      0007CC R   |   6 MMSM2      0007E0 R   |   6 MMSM3      0007E2 R
  6 MMSM4      0007EA R   |   6 MODD       00086A R   |   6 MONE       0009D3 R
    MS      =  00002E     |   6 MSEC       00025F R   |   6 MSMOD      000808 R
  6 MSTA1      0008FB R   |   6 MSTAR      0008D8 R   |     NAFR    =  004804 
  6 NAMEQ      001131 R   |   6 NAMET      001042 R   |     NCLKOPT =  004808 
  6 NEGAT      00069A R   |   6 NEX1       000366 R   |   6 NEXT       00141E R
    NFLASH_W=  00480E     |     NHSECNT =  00480A     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
    NOPTBL  =  00487F     |   6 NTIB       00055F R   |     NUBC    =  004802 
  6 NUFQ       000DB8 R   |   6 NUFQ1      000DD1 R   |   6 NUMBQ      000CCF R
  6 NUMQ1      000D03 R   |   6 NUMQ2      000D34 R   |   6 NUMQ3      000D76 R
  6 NUMQ4      000D7B R   |   6 NUMQ5      000D8A R   |   6 NUMQ6      000D8D R
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   6 NonHandl   000000 R
  6 OFFSET     000605 R   |     OFS     =  000005     |   6 ONE        0009C5 R
  6 ONEM       00095B R   |   6 ONEP       00094E R   |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]

Symbol Table

    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  6 ORIG       000043 R   |   6 ORR        0004D4 R   |   6 OUTPUT     000334 R
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |   6 OVER       00049E R   |   6 OVERT      0015EE R
    PA      =  000000     |   6 PACKS      000B6A R   |   6 PAD        000ABA R
  6 PAREN      000FF5 R   |   6 PARS       000EEE R   |   6 PARS1      000F19 R
  6 PARS2      000F44 R   |   6 PARS3      000F47 R   |   6 PARS4      000F50 R
  6 PARS5      000F73 R   |   6 PARS6      000F88 R   |   6 PARS7      000F97 R
  6 PARS8      000FA6 R   |   6 PARSE      000FB7 R   |   6 PAUSE      00026F R
    PA_BASE =  005000     |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_BASE =  005005     |     PB_CR1  =  005008 
    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
    PB_ODR  =  005005     |     PC      =  00000A     |     PC_BASE =  00500A 
    PC_CR1  =  00500D     |     PC_CR2  =  00500E     |     PC_DDR  =  00500C 
    PC_IDR  =  00500B     |     PC_ODR  =  00500A     |     PD      =  00000F 
  6 PDUM1      0017C9 R   |   6 PDUM2      0017DA R   |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
    PE_BASE =  005014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_BASE =  005019     |     PF_CR1  =  00501C 
    PF_CR2  =  00501D     |     PF_DDR  =  00501B     |     PF_IDR  =  00501A 
    PF_ODR  =  005019     |     PG      =  00001E     |     PG_BASE =  00501E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |     PH      =  000023 
    PH_BASE =  005023     |     PH_CR1  =  005026     |     PH_CR2  =  005027 
    PH_DDR  =  005025     |     PH_IDR  =  005024     |     PH_ODR  =  005023 
    PI      =  000028     |     PICATOUT=  000001     |   6 PICK       000A14 R
  6 PII        002085 R   |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   6 PLUS       00066F R   |   6 PNAM1      0015A3 R
  6 PRESE      001325 R   |     PROD1   =  000022     |     PROD2   =  000024 
    PROD3   =  000026     |   6 PROTECTE   0001FB R   |   6 PSTOR      000A2B R
    PTR16   =  000033     |     PTR8    =  000034     |   6 QBRAN      000378 R
  6 QDUP       00061E R   |   6 QDUP1      000628 R   |   6 QKEY       000311 R
  6 QSTAC      0012DD R   |   6 QUERY      001209 R   |   6 QUEST      000EE0 R
  6 QUIT       001342 R   |   6 QUIT1      00134A R   |   6 QUIT2      00134D R
  6 RAM2EE     001EC1 R   |     RAMBASE =  000000     |   6 RAMLAST    0005F3 R
    RAM_BASE=  000000     |     RAM_END =  0017FF     |     RAM_SIZE=  001800 
  6 RAT        000431 R   |   6 RBRAC      00165F R   |   6 REPEA      0014E7 R
  6 RFREE      001EA8 R   |   6 RFROM      00041E R   |     ROP     =  004800 
  6 ROT        00062F R   |   6 ROW2BUF    001E6A R   |     ROWBUFF =  001680 
    RP0     =  00002C     |   6 RPAT       0003FB R   |     RPP     =  0017FF 
  6 RPSTO      000408 R   |   6 RSHIFT     000988 R   |   6 RSHIFT1    000991 R
  6 RSHIFT4    000999 R   |     RST_SR  =  0050B3     |   6 SAME1      001060 R
  6 SAME2      001089 R   |   6 SAMEQ      001058 R   |   6 SCOM1      0015D8 R
  6 SCOM2      0015DB R   |   6 SCOMP      0015BA R   |   6 SEMIS      0015FE R
  6 SETISP     0000CA R   |   6 SET_RAML   001742 R   |     SFR_BASE=  005000 
    SFR_END =  0057FF     |   6 SIGN       000C16 R   |   6 SIGN1      000C26 R
  6 SLASH      000874 R   |   6 SLMOD      000858 R   |   6 SNAME      00156D R
    SP0     =  00002A     |   6 SPACE      000DDA R   |   6 SPACS      000DE9 R
  6 SPAT       000454 R   |     SPI_CR1 =  005200     |     SPI_CR2 =  005201 
    SPI_CRCP=  005205     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_TXCR=  005207 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]

Symbol Table

    SPP     =  001680     |   6 SPSTO      000461 R   |   6 SQRT10     0020DE R
  6 SQRT12     0020F6 R   |   6 SQRT2      00209C R   |   6 SQRT3      0020B3 R
  6 SSMOD      000904 R   |     SSP     =  000001     |     STACK   =  0017FF 
  6 STAR       0008CD R   |   6 STASL      000915 R   |   6 STORE      0003B6 R
  6 STR        000C44 R   |   6 STRCQ      0013EF R   |   6 STRQ       001526 R
  6 STRQP      000E57 R   |   6 SUBB       0006CD R   |   6 SWAPP      000484 R
    SWIM_CSR=  007F80     |   6 TAP        001173 R   |   6 TBOOT      001905 R
  6 TBUF       00056F R   |     TBUFFBAS=  001680     |   6 TCHA1      0009F4 R
  6 TCHAR      0009E4 R   |   6 TEMP       000540 R   |   6 TEVAL      000592 R
  6 TFLASH     000581 R   |   6 THENN      00147F R   |   6 TIB        000ACB R
    TIBB    =  001700     |     TIBBASE =  001700     |     TIC     =  000027 
  6 TICK       001359 R   |     TIM1_ARR=  005262     |     TIM1_ARR=  005263 
    TIM1_BKR=  00526D     |     TIM1_CCE=  00525C     |     TIM1_CCE=  00525D 
    TIM1_CCM=  005258     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  005259     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525A     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525B     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCR=  005265     |     TIM1_CCR=  005266     |     TIM1_CCR=  005267 
    TIM1_CCR=  005268     |     TIM1_CCR=  005269     |     TIM1_CCR=  00526A 
    TIM1_CCR=  00526B     |     TIM1_CCR=  00526C     |     TIM1_CNT=  00525E 
    TIM1_CNT=  00525F     |     TIM1_CR1=  005250     |     TIM1_CR2=  005251 
    TIM1_CR2=  000000     |     TIM1_CR2=  000002     |     TIM1_CR2=  000004 
    TIM1_CR2=  000005     |     TIM1_CR2=  000006     |     TIM1_DTR=  00526E 
    TIM1_EGR=  005257     |     TIM1_EGR=  000007     |     TIM1_EGR=  000001 
    TIM1_EGR=  000002     |     TIM1_EGR=  000003     |     TIM1_EGR=  000004 
    TIM1_EGR=  000005     |     TIM1_EGR=  000006     |     TIM1_EGR=  000000 
    TIM1_ETR=  005253     |     TIM1_ETR=  000006     |     TIM1_ETR=  000000 
    TIM1_ETR=  000001     |     TIM1_ETR=  000002     |     TIM1_ETR=  000003 
    TIM1_ETR=  000007     |     TIM1_ETR=  000004     |     TIM1_ETR=  000005 
    TIM1_IER=  005254     |     TIM1_IER=  000007     |     TIM1_IER=  000001 
    TIM1_IER=  000002     |     TIM1_IER=  000003     |     TIM1_IER=  000004 
    TIM1_IER=  000005     |     TIM1_IER=  000006     |     TIM1_IER=  000000 
    TIM1_OIS=  00526F     |     TIM1_PSC=  005260     |     TIM1_PSC=  005261 
    TIM1_RCR=  005264     |     TIM1_SMC=  005252     |     TIM1_SMC=  000007 
    TIM1_SMC=  000000     |     TIM1_SMC=  000001     |     TIM1_SMC=  000002 
    TIM1_SMC=  000004     |     TIM1_SMC=  000005     |     TIM1_SMC=  000006 
    TIM1_SR1=  005255     |     TIM1_SR1=  000007     |     TIM1_SR1=  000001 
    TIM1_SR1=  000002     |     TIM1_SR1=  000003     |     TIM1_SR1=  000004 
    TIM1_SR1=  000005     |     TIM1_SR1=  000006     |     TIM1_SR1=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_SR2=  005256     |     TIM1_SR2=  000001     |     TIM1_SR2=  000002 
    TIM1_SR2=  000003     |     TIM1_SR2=  000004     |     TIM2_ARR=  00530D 
    TIM2_ARR=  00530E     |     TIM2_CCE=  005308     |     TIM2_CCE=  000000 
    TIM2_CCE=  000001     |     TIM2_CCE=  000004     |     TIM2_CCE=  000005 
    TIM2_CCE=  005309     |     TIM2_CCM=  005305     |     TIM2_CCM=  005306 
    TIM2_CCM=  005307     |     TIM2_CCM=  000000     |     TIM2_CCM=  000004 
    TIM2_CCM=  000003     |     TIM2_CCR=  00530F     |     TIM2_CCR=  005310 
    TIM2_CCR=  005311     |     TIM2_CCR=  005312     |     TIM2_CCR=  005313 
    TIM2_CCR=  005314     |     TIM2_CNT=  00530A     |     TIM2_CNT=  00530B 
    TIM2_CR1=  005300     |     TIM2_CR1=  000007     |     TIM2_CR1=  000000 
    TIM2_CR1=  000003     |     TIM2_CR1=  000001     |     TIM2_CR1=  000002 
    TIM2_EGR=  005304     |     TIM2_EGR=  000001     |     TIM2_EGR=  000002 
    TIM2_EGR=  000003     |     TIM2_EGR=  000006     |     TIM2_EGR=  000000 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |   6 TIMEOUTQ   00029F R   |   6 TIMER      000289 R
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |   6 TNAM2      00185F R
  6 TNAM3      00187D R   |   6 TNAM4      001883 R   |   6 TNAME      00185C R
  6 TOFLASH    0002C4 R   |   6 TOKEN      001034 R   |   6 TOR        00043D R
  6 TORAM      000304 R   |     TRUEE   =  00FFFF     |   6 TWOSL      0009A0 R
  6 TYPE1      000E09 R   |   6 TYPE2      000E15 R   |   6 TYPES      000E04 R
  6 Timer4Ha   000005 R   |     UART1   =  000000     |     UART1_BA=  005230 
    UART1_BR=  005232     |     UART1_BR=  005233     |     UART1_CR=  005234 
    UART1_CR=  005235     |     UART1_CR=  005236     |     UART1_CR=  005237 
    UART1_CR=  005238     |     UART1_DR=  005231     |     UART1_GT=  005239 
    UART1_PO=  000000     |     UART1_PS=  00523A     |     UART1_RX=  000004 
    UART1_SR=  005230     |     UART1_TX=  000005     |     UART3   =  000001 
    UART3_BA=  005240     |     UART3_BR=  005242     |     UART3_BR=  005243 
    UART3_CR=  005244     |     UART3_CR=  005245     |     UART3_CR=  005246 
    UART3_CR=  005247     |     UART3_CR=  004249     |     UART3_DR=  005241 
    UART3_PO=  00000F     |     UART3_RX=  000006     |     UART3_SR=  005240 
    UART3_TX=  000005     |     UART_BRR=  000002     |     UART_BRR=  000003 
    UART_CR1=  000004     |     UART_CR1=  000004     |     UART_CR1=  000002 
    UART_CR1=  000000     |     UART_CR1=  000001     |     UART_CR1=  000007 
    UART_CR1=  000006     |     UART_CR1=  000005     |     UART_CR1=  000003 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]

Symbol Table

    UART_CR2=  000005     |     UART_CR2=  000004     |     UART_CR2=  000002 
    UART_CR2=  000005     |     UART_CR2=  000001     |     UART_CR2=  000000 
    UART_CR2=  000006     |     UART_CR2=  000003     |     UART_CR2=  000007 
    UART_CR3=  000006     |     UART_CR3=  000003     |     UART_CR3=  000001 
    UART_CR3=  000002     |     UART_CR3=  000000     |     UART_CR3=  000006 
    UART_CR3=  000004     |     UART_CR3=  000005     |     UART_CR4=  000007 
    UART_CR4=  000000     |     UART_CR4=  000001     |     UART_CR4=  000002 
    UART_CR4=  000003     |     UART_CR4=  000004     |     UART_CR4=  000006 
    UART_CR4=  000005     |     UART_CR5=  000008     |     UART_CR5=  000003 
    UART_CR5=  000001     |     UART_CR5=  000002     |     UART_CR5=  000004 
    UART_CR5=  000005     |     UART_CR6=  000009     |     UART_CR6=  000004 
    UART_CR6=  000007     |     UART_CR6=  000001     |     UART_CR6=  000002 
    UART_CR6=  000000     |     UART_CR6=  000005     |     UART_DR =  000001 
    UART_GTR=  000009     |     UART_PSC=  00000A     |     UART_SR =  000000 
    UART_SR_=  000001     |     UART_SR_=  000004     |     UART_SR_=  000002 
    UART_SR_=  000003     |     UART_SR_=  000000     |     UART_SR_=  000005 
    UART_SR_=  000006     |     UART_SR_=  000007     |     UBASE   =  000006 
    UBC     =  004801     |     UCNTXT  =  000014     |     UCP     =  000018 
    UCTIB   =  00000C     |     UD1     =  000001     |     UD2     =  000002 
    UD3     =  000003     |     UD4     =  000004     |   6 UDOT       000EAA R
  6 UDOTR      000E8A R   |   6 UEND       000041 R   |     UHLD    =  000012 
    UINN    =  00000A     |     UINTER  =  000010     |     ULAST   =  00001A 
  6 ULES1      00072A R   |   6 ULESS      000714 R   |   6 UMMOD      0007AA R
  6 UMSTA      000883 R   |   6 UNIQ1      001564 R   |   6 UNIQU      001545 R
  6 UNTIL      001447 R   |     UOFFSET =  00001C     |   6 UPDATCP    001A3D R
  6 UPDATLAS   001A14 R   |   6 UPDATPTR   001FB4 R   |   6 UPDATRUN   001A2C R
  6 UPDATVP    001A54 R   |   6 UPL1       000515 R   |   6 UPLUS      0004FE R
    UPP     =  000006     |     URLAST  =  000020     |     USR_BTN_=  000004 
    USR_BTN_=  000010     |     USR_BTN_=  005015     |     UTFLASH =  00001E 
    UTIB    =  00000E     |     UTMP    =  000008     |   6 UTYP1      001799 R
  6 UTYP2      0017A8 R   |   6 UTYPE      001794 R   |     UVP     =  000016 
  6 UZERO      000027 R   |   6 VARIA      00170F R   |     VAR_BASE=  000080 
    VAR_TOP =  0017BF     |     VER     =  000003     |   6 VPP        0005C2 R
    VSIZE   =  000006     |     WANT_DEB=  000000     |     WANT_MAT=  000001 
    WANT_SEE=  000000     |     WDGOPT  =  004805     |     WDGOPT_I=  000002 
    WDGOPT_L=  000003     |     WDGOPT_W=  000000     |     WDGOPT_W=  000001 
  6 WHILE      0014CD R   |   6 WITHI      00078F R   |   6 WORDD      001020 R
  6 WORDS      0018B9 R   |   6 WORS1      0018BF R   |   6 WORS2      0018DE R
    WWDG_CR =  0050D1     |     WWDG_WR =  0050D2     |   6 XORR       0004E9 R
    XTEMP   =  000022     |     YTEMP   =  000024     |   6 ZERO       0009BA R
  6 ZL1        0004B6 R   |   6 ZLESS      0004AD R   |   6 app_spac   002080 R
  6 block_er   001BD7 R   |   6 clear_ra   000019 R   |   6 clock_in   00005E R
  6 copy_buf   001C2E R   |   6 copy_buf   001C4D R   |   6 copy_pro   001C4D R
    da      =  000002     |     db      =  000003     |     dc      =  000000 
    dd      =  000001     |   6 ee_ccomm   001E48 R   |   6 ee_comma   001E27 R
  6 ee_cstor   001B44 R   |   6 ee_store   001B90 R   |   6 erase_fl   001BF3 R
  6 farat      001A65 R   |   6 farcat     001A81 R   |   6 fmove_do   001F9D R
  6 fptr_sto   001980 R   |   6 inc_fptr   001B12 R   |   6 lock       001AFE R
  6 main       000016 R   |   6 next_row   001F5A R   |   6 no_move    001FA4 R
  6 pristine   001CC8 R   |   6 proceed_   001BF6 R   |   6 reboot     0002B6 R
  6 reset_ve   001D2F R   |   6 row_eras   001BBA R   |   6 row_eras   001C07 R
  6 row_eras   001C2E R   |   6 set_opti   001C9C R   |   6 set_vect   001DD0 R
  6 uart1_in   000070 R   |   6 unlock     001AD6 R   |   6 unlock_e   001A98 R
  6 unlock_f   001AB7 R   |   6 write_by   001B29 R   |   6 write_ro   001C72 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   2130   flags    0

