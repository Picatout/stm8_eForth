ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                     13 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     15 
                                     16 ;===============================================================
                                     17 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     18 ;  Date: 2020-06-07 
                                     19 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     20 ;  Date: 2019-10-26
                                     21 ;  Changes to memory map:
                                     22 ;       0x16f0  Data Stack, growing downward
                                     23 ;       0x1700  Terminal input buffer TIB
                                     24 ;       0x17ff  Return Stack, growing downard
                                     25 ;================================================================
                                     26 ;       STM8EF, Version 2.1, 13 July
                                     27 ;               Implemented on STM8S-Discovery Board.
                                     28 ;               Assembled by ST VisualDevelop STVD 
                                     29 ;               Bootup on internal 2 MHz clock
                                     30 ;               Switch to external 16 MHz crystal clock
                                     31 ;
                                     32 ; FORTH Virtual Machine:
                                     33 ; Subroutine threaded model
                                     34 ; SP Return stack pointer
                                     35 ; X Data stack pointer
                                     36 ; A,Y Scratch pad registers
                                     37 ;
                                     38 ; Memory Map:
                                     39 ; 0x0 RAM memory, system variables
                                     40 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     41 ; 0x780 Data stack, growing downward
                                     42 ; 0x790 Terminal input buffer TIB
                                     43 ; 0x7FF Return stack, growing downward
                                     44 ; 0x8000 Interrupt vector table
                                     45 ; 0x8080 FORTH startup code
                                     46 ; 0x80E7 Start of FORTH dictionary in ROM
                                     47 ; 0x9584 End of FORTH dictionary
                                     48 ;
                                     49 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     50 ;                  use UART1 instead of UART3 for communication with user.
                                     51 ;                  UART1 is available as ttyACM* device via USB connection.
                                     52 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     53 ;                  and MSEC word that return MS value.
                                     54 ;
                                     55 ;       EF12, Version 2.1, 18apr00cht
                                     56 ;               move to 8000H replacing WHYP.
                                     57 ;               copy interrupt vectors from WHYPFLSH.S19
                                     58 ;               to EF12.S19 before flashing
                                     59 ;               add TICKS1 and DELAY1 for motor stepping
                                     60 ;
                                     61 ;       EF12, 02/18/00, C. H. Ting
                                     62 ;       Adapt 86eForth v2.02 to 68HC12.
                                     63 ;               Use WHYP to seed EF12.ASM
                                     64 ;               Use AS12 native 68HC12 assembler:
                                     65 ;               as12 ef12.asm >ef12.lst
                                     66 ;       EF12A, add ADC code, 02mar00cht
                                     67 ;       EF12B, 01mar00cht
                                     68 ;               stack to 0x78, return stack to 0xf8.
                                     69 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     70 ;               add PWM registers
                                     71 ;               add SPI registers and code
                                     72 ;       EF12C, 12mar00cht
                                     73 ;               add MAX5250 D/A converter
                                     74 ;       EF12D, 15mar00cht
                                     75 ;               add all the Lexel interface words
                                     76 ;       EF12E, 18apr00cht, save for reference
                                     77 ;
                                     78 ;       Copyright (c) 2000
                                     79 ;       Dr. C. H. Ting
                                     80 ;       156 14th Avenue
                                     81 ;       San Mateo, CA 94402
                                     82 ;       (650) 571-7639
                                     83 ;
                                     84 
                                     85 ;*************************************
                                     86 ; constant used for conditationnal 
                                     87 ; assembly for those word I converted 
                                     88 ; to code.
                                     89 ; Added by Picatout 2020-05-24 
                                     90 ;*************************************
                           000001    91 CONVERT_TO_CODE=1 ; words converted in assembly by Picatout
                           000001    92 PICATOUT_MOD=1  ; code modified by Picatout 
                                     93 
                                     94 ;*********************************************************
                                     95 ;	Assembler constants
                                     96 ;*********************************************************
                           000000    97 RAMBASE =	0x0000	   ;ram base
                           0017FF    98 STACK   =	0x17FF 	;system (return) stack empty 
                           001680    99 DATSTK  =	0x1680	;data stack  empty
                           001680   100 TBUFFBASE =     0x1680  ; flash read/write transaction buffer address  
                           001700   101 TIBBASE =       0X1700  ; transaction input buffer addr.
                                    102 
                                    103 
                                    104 
                                    105 ;; Memory allocation
                                    106 
                           000006   107 UPP     =     RAMBASE+6          ; systeme variables base address 
                           001680   108 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0017FF   109 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           001680   110 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           001700   111 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   112 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0017BF   113 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    114 
                           000001   115 .if PICATOUT_MOD 
                                    116 ; user variables constants 
                           000006   117 UBASE = UPP       ; numeric base 
                           000008   118 UTMP = UBASE+2    ; temporary storage
                           00000A   119 UINN = UTMP+2     ; >IN tib pointer 
                           00000C   120 UCTIB = UINN+2    ; tib count 
                           00000E   121 UTIB = UCTIB+2    ; tib address 
                           000010   122 UINTER = UTIB+2   ; interpreter vector 
                           000012   123 UHLD = UINTER+2   ; hold 
                           000014   124 UCNTXT = UHLD+2   ; context, dictionary first link 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000016   125 UVP = UCNTXT+2    ; variable pointer 
                           000018   126 UCP = UVP+2      ; code pointer
                           00001A   127 ULAST = UCP+2    ; last dictionary pointer 
                           00001C   128 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
                           00001E   129 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
                           000020   130 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    131 
                                    132 .endif ; PICATOUT_MOD
                                    133 ;******  System Variables  ******
                           000022   134 XTEMP	=	URLAST +2;address called by CREATE
                           000024   135 YTEMP	=	XTEMP+2	;address called by CREATE
                           000022   136 PROD1 = XTEMP	;space for UM*
                           000024   137 PROD2 = PROD1+2
                           000026   138 PROD3 = PROD2+2
                           000028   139 CARRY = PROD3+2
                           00002A   140 SP0	= CARRY+2	;initial data stack pointer
                           00002C   141 RP0	= SP0+2		;initial return stack pointer
                           00002E   142 MS    =   RP0+2         ; millisecond counter 
                           000030   143 CNTDWN =  MS+2          ; count down timer 
                           000032   144 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000033   145 PTR16 = FPTR+1          ; middle byte of farptr 
                           000034   146 PTR8 = FPTR+2           ; least byte of farptr 
                                    147 
                           000001   148 .if PICATOUT_MOD
                                    149 ; EEPROM persistant data  
                           004000   150 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   151 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   152 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   153 APP_VP = APP_CP+2  ; free data space pointer 
                                    154 .endif ;PICATOUT_MOD
                                    155 
                                    156 
                                    157 ;***********************************************
                                    158 ;; Version control
                                    159 
                           000003   160 VER     =     3         ;major release version
                           000000   161 EXT     =     0         ;minor extension
                                    162 
                                    163 ;; Constants
                                    164 
                           00FFFF   165 TRUEE   =     0xFFFF      ;true flag
                                    166 
                           000040   167 COMPO   =     0x40     ;lexicon compile only bit
                           000080   168 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   169 MASKK   =     0x1F7F  ;lexicon bit mask
                                    170 
                           000002   171 CELLL   =     2       ;size of a cell
                           00000A   172 BASEE   =     10      ;default radix
                           000008   173 BKSPP   =     8       ;back space
                           00000A   174 LF      =     10      ;line feed
                           00000D   175 CRR     =     13      ;carriage return
                           00001B   176 ERR     =     27      ;error escape
                           000027   177 TIC     =     39      ;tick
                           0000CD   178 CALLL   =     0xCD     ;CALL opcodes
                           000080   179 IRET_CODE =   0x80    ; IRET opcode 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    180 
                                    181         .macro _ledon
                                    182         bset PC_ODR,#LED2_BIT
                                    183         .endm
                                    184 
                                    185         .macro _ledoff
                                    186         bres PC_ODR,#LED2_BIT
                                    187         .endm
                                    188 
                                    189 ;**********************************************************
                                    190         .area DATA (ABS)
      000000                        191         .org RAMBASE 
                                    192 ;**********************************************************
                                    193 
                                    194 ;**********************************************************
                                    195         .area SSEG (ABS) ; STACK
      001700                        196         .org 0x1700
      001700                        197         .ds 256 
                                    198 ; space for DATSTK,TIB and STACK         
                                    199 ;**********************************************************
                                    200 
                                    201 ;**********************************************************
                                    202         .area HOME ; vectors table
                                    203 ;**********************************************************
      000000 82 00 00 16            204 	int main	        ; reset
      000004 82 00 00 00            205 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            206 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            207 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            208 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            209 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            210 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            211 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            212 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            213 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            214 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            215 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            216 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            217 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            218 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            219 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            220 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            221 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            222 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            223 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            224 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            225 	int NonHandledInterrupt	; irq19
      000058 82 00 00 00            226 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            227 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            228 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            229 	int Timer4Handler	; irq23
      000068 82 00 00 00            230 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            231 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            232 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            233 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            234 	int NonHandledInterrupt	; irq28
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      00007C 82 00 00 00            235 	int NonHandledInterrupt	; irq29
                                    236 
                                    237 ;**********************************************************
                                    238         .area CODE
                                    239 ;**********************************************************
                                    240 
                                    241 ; non handled interrupt reset MCU
      000000                        242 NonHandledInterrupt:
      000000 A6 80            [ 1]  243         ld a, #0x80
      000002 C7 50 D1         [ 1]  244         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    245 	;iret
                                    246 
                                    247 ; used for milliseconds counter 
                                    248 ; MS is 16 bits counter 
      000005                        249 Timer4Handler:
      000005 72 5F 53 42      [ 1]  250 	clr TIM4_SR 
      000009 BE 2E            [ 2]  251         ldw x,MS 
      00000B 5C               [ 2]  252         incw x 
      00000C BF 2E            [ 2]  253         ldw MS,x
      00000E BE 30            [ 2]  254         ldw x,CNTDWN 
      000010 27 03            [ 1]  255         jreq 1$
      000012 5A               [ 2]  256         decw x 
      000013 BF 30            [ 2]  257         ldw CNTDWN,x 
      000015                        258 1$:         
      000015 80               [11]  259         iret 
                                    260 
                                    261 
                                    262 ;; Main entry points and COLD start data
      000016                        263 main:
                                    264 ; clear all RAM
      000016 AE 00 00         [ 2]  265 	ldw X,#RAMBASE
      000019                        266 clear_ram0:
      000019 7F               [ 1]  267 	clr (X)
      00001A 5C               [ 2]  268 	incw X
      00001B A3 17 FF         [ 2]  269 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  270 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  271         ldw x,#RPP
      000023 94               [ 1]  272         ldw sp,x 
      000024 CC 00 43         [ 2]  273 	jp ORIG
                                    274 
                                    275 ; COLD initialize these variables.
      000027                        276 UZERO:
      000027 00 0A                  277         .word      BASEE   ;BASE
      000029 00 00                  278         .word      0       ;tmp
      00002B 00 00                  279         .word      0       ;>IN
      00002D 00 00                  280         .word      0       ;#TIB
      00002F 17 00                  281         .word      TIBB    ;TIB
      000031 12 83                  282         .word      INTER   ;'EVAL
      000033 00 00                  283         .word      0       ;HLD
      000035 20 06                  284         .word      LASTN  ;CNTXT pointer
      000037 00 80                  285         .word      VAR_BASE   ;variables free space pointer 
      000039 20 80                  286         .word      app_space ; FLASH free space pointer 
      00003B 20 06                  287         .word      LASTN   ;LAST
      00003D 00 00                  288         .word      0        ; OFFSET 
      00003F 00 00                  289         .word      0       ; TFLASH
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                    290 ;       .word      0       ; URLAST   
      000041 00 00                  291 UEND:   .word      0
                                    292 
      000043                        293 ORIG:   
                                    294 ; initialize SP
      000043 AE 17 FF         [ 2]  295         LDW     X,#STACK  ;initialize return stack
      000046 94               [ 1]  296         LDW     SP,X
      000047 BF 2C            [ 2]  297         LDW     RP0,X
      000049 AE 16 80         [ 2]  298         LDW     X,#DATSTK ;initialize data stack
      00004C BF 2A            [ 2]  299         LDW     SP0,X
                                    300 ; initialize PC_5 as output to control LED2
                                    301 ; added by Picatout 
      00004E 72 1A 50 0D      [ 1]  302         bset PC_CR1,#LED2_BIT
      000052 72 1A 50 0E      [ 1]  303         bset PC_CR2,#LED2_BIT
      000056 72 1A 50 0C      [ 1]  304         bset PC_DDR,#LED2_BIT
      00005A                        305         _ledoff
      00005A 72 1B 50 0A      [ 1]    1         bres PC_ODR,#LED2_BIT
                                    306 ; initialize clock to HSI
                                    307 ; no divisor 16Mhz 
                                    308 ; Added by Picatout 
      00005E                        309 clock_init:
      00005E 72 5F 50 C6      [ 1]  310         clr CLK_CKDIVR
      000062 72 12 50 C5      [ 1]  311 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000066 A6 E1            [ 1]  312 	ld a,#CLK_SWR_HSI
      000068 C7 50 C4         [ 1]  313 	ld CLK_SWR,a
      00006B C1 50 C3         [ 1]  314 1$:	cp a,CLK_CMSR
      00006E 26 FB            [ 1]  315 	jrne 1$
                                    316         
                                    317 ; initialize UART1, 115200 8N1
      000070                        318 uart1_init:
      000070 72 14 50 C7      [ 1]  319 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    320 	; configure tx pin
      000074 72 1A 50 02      [ 1]  321 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      000078 72 1A 50 03      [ 1]  322 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      00007C 72 1A 50 04      [ 1]  323 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    324 	; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
      000080 35 0B 52 33      [ 1]  325 	mov UART1_BRR2,#0x0b ; must be loaded first
      000084 35 08 52 32      [ 1]  326 	mov UART1_BRR1,#0x8
      000088 35 0C 52 35      [ 1]  327 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    328 ; initialize timer4, used for millisecond interrupt  
      00008C 35 07 53 45      [ 1]  329 	mov TIM4_PSCR,#7 ; prescale 128  
      000090 35 7D 53 46      [ 1]  330 	mov TIM4_ARR,#125 ; set for 1msec.
      000094 35 05 53 40      [ 1]  331 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      000098 72 10 53 41      [ 1]  332 	bset TIM4_IER,#TIM4_IER_UIE 
                                    333 ; set TIM4 interrupt priority to highest
      00009C A6 3F            [ 1]  334         ld a,#~(IPR_MASK<<6)
      00009E C4 7F 75         [ 1]  335         and a,ITC_SPR6
      0000A1 AA C0            [ 1]  336         or a,#(IPR3<<6)
      0000A3 C7 7F 75         [ 1]  337         ld ITC_SPR6,a 
      0000A6 9A               [ 1]  338         rim
      0000A7 CC 19 25         [ 2]  339         jp  COLD   ;default=MN1
                                    340 
                                    341 
                                    342 ;; place MCU in sleep mode with
                                    343 ;; halt opcode 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                                    344 ;; BYE ( -- )
      0000AA 00 00                  345         .word 0
                           0000AC   346         LINK=.
      0000AC 03                     347         .byte 3 
      0000AD 42 59 45               348         .ascii "BYE"
      0000B0                        349 BYE: 
      0000B0 8E               [10]  350         halt 
      0000B1 81               [ 4]  351         ret 
                                    352 
                                    353 ; Enable interrupts 
                                    354 ; EI ( -- )
      0000B2 00 AC                  355         .word LINK 
                           0000B4   356         LINK=.
      0000B4 02                     357         .byte 2
      0000B5 45 49                  358         .ascii "EI"
      0000B7                        359 EI:
      0000B7 9A               [ 1]  360         rim 
      0000B8 81               [ 4]  361         ret 
                                    362 
                                    363 ; Disable interrupts
                                    364 ; DI ( -- )
      0000B9 00 B4                  365         .word LINK 
                           0000BB   366         LINK=.
      0000BB 02                     367         .byte 2 
      0000BC 44 49                  368         .ascii "DI"
      0000BE                        369 DI:
      0000BE 9B               [ 1]  370         sim 
      0000BF 81               [ 4]  371         ret 
                                    372 
                                    373 ; set interrupt priority level 
                                    374 ; SET-ISP ( n1 n2 -- )
                                    375 ; n1 level {1..3}
                                    376 ; n2 vector {0..29}
      0000C0 00 BB                  377         .word LINK 
                           0000C2   378         LINK=.
      0000C2 07                     379         .byte 7 
      0000C3 53 45 54 2D 49 53 50   380         .ascii "SET-ISP"
      0000CA                        381 SETISP:
      0000CA 90 93            [ 1]  382         ldw y,x 
      0000CC 90 FE            [ 2]  383         ldw y,(y)
      0000CE A6 04            [ 1]  384         ld a,#4 ; 4 slot per register 
                                    385 ;  quotient select register, remainder select slot in register.        
      0000D0 90 62            [ 2]  386         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000D2 A4 03            [ 1]  387         and a,#3 
      0000D4 48               [ 1]  388         sll a ; 2*SLOT  lshift 
      0000D5 72 A9 7F 70      [ 2]  389         addw y,#ITC_SPR1 
      0000D9 FF               [ 2]  390         ldw (x),y  ; ( level reg -- )
      0000DA 90 5F            [ 1]  391         clrw y 
      0000DC 90 97            [ 1]  392         ld yl,a 
      0000DE 1D 00 02         [ 2]  393         subw x,#CELLL 
      0000E1 FF               [ 2]  394         ldw (x),y  ; ( level reg lshift -- )
      0000E2 90 93            [ 1]  395         ldw y,x 
      0000E4 90 EE 02         [ 2]  396         ldw y,(2,y) 
      0000E7 90 F6            [ 1]  397         ld a,(y)   ; reg_value
      0000E9 1D 00 02         [ 2]  398         subw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      0000EC FF               [ 2]  399         ldw (x),y ; ( level reg lshift rval -- )
      0000ED CD 04 B2         [ 4]  400         call OVER ; ( level reg lshift rval lshift -- )
      0000F0 CD 03 59         [ 4]  401         call DOLIT 
      0000F3 00 03                  402         .word 3
      0000F5 CD 04 98         [ 4]  403         call SWAPP  ; ( level reg lshift rval 3 lshift )
      0000F8 CD 09 80         [ 4]  404         call LSHIFT ; creat slot mask 
      0000FB CD 06 9D         [ 4]  405         call INVER  ; ( level reg lshift rval mask )
      0000FE CD 04 D4         [ 4]  406         call ANDD ; ( level reg lshift slot_masked )
      000101 CD 04 51         [ 4]  407         call TOR  ; ( level reg lshift -- R: slot_masked )
      000104 CD 06 43         [ 4]  408         call ROT  ; ( reg lshift level )
      000107 CD 04 98         [ 4]  409         call SWAPP ; ( reg level lshift )
      00010A CD 09 80         [ 4]  410         call LSHIFT  ; ( reg slot_level -- )
      00010D CD 04 32         [ 4]  411         call RFROM ; ( reg slot_level masked_val )
      000110 CD 04 E8         [ 4]  412         call ORR   ; ( reg updated_rval )
      000113 CD 04 98         [ 4]  413         call SWAPP 
      000116 CD 03 EE         [ 4]  414         call CSTOR
                                    415 
                                    416 ; sélectionne l'application 
                                    417 ; qui démarre automatique lors 
                                    418 ; d'un COLD start 
      000119 00 C2                  419         .word LINK 
                           00011B   420         LINK=.
      00011B 07                     421         .byte 7
      00011C 41 55 54 4F 52 55 4E   422         .ascii "AUTORUN"
      000123                        423 AUTORUN:
      000123 CD 10 48         [ 4]  424         call TOKEN 
      000126 CD 04 88         [ 4]  425         call DUPP 
      000129 CD 03 8C         [ 4]  426         call QBRAN 
      00012C 02 1D                  427         .word FORGET2
      00012E CD 11 45         [ 4]  428         call NAMEQ
      000131 CD 06 32         [ 4]  429         call QDUP 
      000134 CD 03 8C         [ 4]  430         call QBRAN 
      000137 02 1D                  431         .word FORGET2
      000139 CD 04 7E         [ 4]  432         call DROP 
      00013C 1D 00 04         [ 2]  433         subw x,#2*CELLL 
      00013F 90 5F            [ 1]  434         clrw y 
      000141 FF               [ 2]  435         ldw (x),y 
      000142 90 AE 40 02      [ 2]  436         ldw y,#APP_RUN 
      000146 EF 02            [ 2]  437         ldw (2,x),y 
      000148 CC 1B A4         [ 2]  438         jp ee_store 
                                    439 
                                    440 ;       PI ( --  355 113 )
                                    441 ; usefull for trignometric 
                                    442 ; computation using */ 
      00014B 01 1B                  443         .word LINK 
                           00014D   444         LINK=.
      00014D 02                     445         .byte 2
      00014E 50 49                  446         .ascii "PI" 
      000150                        447 PII:
      000150 1D 00 04         [ 2]  448         subw x,#2*CELLL 
      000153 90 AE 01 63      [ 2]  449         ldw y,#355 
      000157 EF 02            [ 2]  450         ldw (2,x),y 
      000159 90 AE 00 71      [ 2]  451         ldw y,#113 
      00015D FF               [ 2]  452         ldw (x),y 
      00015E 81               [ 4]  453         ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                                    454 
                                    455 ;; Reset dictionary pointer before 
                                    456 ;; forgotten word. RAM space and 
                                    457 ;; interrupt vector defined after 
                                    458 ;; must be resetted also.
      00015F 01 4D                  459         .word LINK 
                           000161   460         LINK=.
      000161 06                     461         .byte 6
      000162 46 4F 52 47 45 54      462         .ascii "FORGET" 
      000168                        463 FORGET: 
      000168 CD 10 48         [ 4]  464         call TOKEN
      00016B CD 04 88         [ 4]  465         call DUPP 
      00016E CD 03 8C         [ 4]  466         call QBRAN 
      000171 02 1D                  467         .word FORGET2
      000173 CD 11 45         [ 4]  468         call NAMEQ ; ( a -- ca na | a F )
      000176 CD 06 32         [ 4]  469         call QDUP 
      000179 CD 03 8C         [ 4]  470         call QBRAN 
      00017C 02 1D                  471         .word FORGET2
                                    472 ; only forget users words 
      00017E CD 04 88         [ 4]  473         call DUPP ; ( ca na na )
      000181 CD 03 59         [ 4]  474         call DOLIT 
      000184 20 80                  475         .word app_space 
      000186 CD 04 98         [ 4]  476         call SWAPP 
      000189 CD 07 28         [ 4]  477         call  ULESS 
      00018C CD 03 8C         [ 4]  478         call QBRAN 
      00018F 01 DF                  479         .word FORGET6 
                                    480 ; ( ca na -- )        
                                    481 ;reset ivec with address >= ca
      000191 CD 04 98         [ 4]  482         call SWAPP ; ( na ca -- ) 
      000194 CD 1D 95         [ 4]  483         call CHKIVEC ; ( na -- ) 
                                    484 ; start at LAST and link back to na 
                                    485 ; if variable found reset VP at that point.
      000197                        486 FORGET1:
      000197 CD 05 F4         [ 4]  487         call LAST 
      00019A CD 03 E1         [ 4]  488         call AT 
      00019D CD 04 88         [ 4]  489         call DUPP  ; ( -- na last last )
      0001A0 CD 02 33         [ 4]  490         call FREEVAR ; ( -- na last )
      0001A3 CD 04 88         [ 4]  491         call DUPP 
      0001A6 CD 03 59         [ 4]  492         call DOLIT 
      0001A9 00 02                  493         .word 2 
      0001AB CD 06 E1         [ 4]  494         call SUBB ; ( na last -- na last lfa ) link address 
      0001AE CD 03 E1         [ 4]  495         call AT 
      0001B1 CD 04 88         [ 4]  496         call DUPP ; ( -- na last a a )
      0001B4 CD 05 C8         [ 4]  497         call CNTXT 
      0001B7 CD 03 CA         [ 4]  498         call STORE
      0001BA CD 05 F4         [ 4]  499         call LAST  
      0001BD CD 03 CA         [ 4]  500         call STORE ; ( --  na last )
      0001C0 CD 04 B2         [ 4]  501         call OVER 
      0001C3 CD 07 09         [ 4]  502         call EQUAL ; ( na last na -- na T|F ) 
      0001C6 CD 03 8C         [ 4]  503         call QBRAN 
      0001C9 01 97                  504         .word FORGET1 
                                    505 ; ( na -- )
      0001CB CD 03 59         [ 4]  506         call DOLIT 
      0001CE 00 02                  507         .word 2 
      0001D0 CD 06 E1         [ 4]  508         call SUBB 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      0001D3 CD 05 E4         [ 4]  509         call CPP 
      0001D6 CD 03 CA         [ 4]  510         call STORE  
      0001D9 CD 1A 51         [ 4]  511         call UPDATCP 
      0001DC CC 1A 28         [ 2]  512         jp UPDATLAST 
      0001DF                        513 FORGET6: ; tried to forget a RAM or system word 
                                    514 ; ( ca na -- )
      0001DF 1D 00 02         [ 2]  515         subw x,#CELLL 
      0001E2 90 BE 2A         [ 2]  516         ldw y,SP0 
      0001E5 FF               [ 2]  517         ldw (x),y  
      0001E6 CD 07 28         [ 4]  518         call ULESS
      0001E9 CD 03 8C         [ 4]  519         call QBRAN 
      0001EC 02 0F                  520         .word PROTECTED 
      0001EE CD 12 51         [ 4]  521         call ABORQ 
      0001F1 1D                     522         .byte 29
      0001F2 20 46 6F 72 20 52 41   523         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      00020F                        524 PROTECTED:
      00020F CD 12 51         [ 4]  525         call ABORQ
      000212 0A                     526         .byte 10
      000213 20 50 72 6F 74 65 63   527         .ascii " Protected"
             74 65 64
      00021D                        528 FORGET2: ; no name or not found in dictionary 
      00021D CD 12 51         [ 4]  529         call ABORQ
      000220 05                     530         .byte 5
      000221 20 77 68 61 74         531         .ascii " what"
      000226                        532 FORGET4:
      000226 CC 04 7E         [ 2]  533         jp DROP 
                                    534 
                                    535 
                                    536 ;---------------------------------
                                    537 ; if na is variable 
                                    538 ; free variable data  
                                    539 ; FREEVAR ( na -- )
                                    540 ;---------------------------------
      000229 01 61                  541         .word LINK 
                           00022B   542         LINK=.
      00022B 07                     543         .byte 7 
      00022C 46 52 45 45 56 41 52   544         .ascii "FREEVAR"
      000233                        545 FREEVAR:
      000233 CD 04 88         [ 4]  546         call DUPP ; ( na na -- )
      000236 CD 03 FF         [ 4]  547         CALL CAT  ; ( na c -- )
      000239 CD 09 62         [ 4]  548         call ONEP ;
      00023C CD 06 83         [ 4]  549         CALL PLUS ; ( na c+1 -- ca ) 
      00023F CD 09 62         [ 4]  550         call ONEP ; ( ca+ -- ) to get routne address 
      000242 CD 04 88         [ 4]  551         call DUPP ; ( ca+ ca+ -- )
      000245 CD 03 E1         [ 4]  552         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      000248 CD 03 59         [ 4]  553         call DOLIT 
      00024B 05 35                  554         .word DOVAR ; if routine address is DOVAR then variable 
      00024D CD 07 09         [ 4]  555         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      000250 CD 03 8C         [ 4]  556         call QBRAN 
      000253 02 69                  557         .word FREEVAR4 
      000255 CD 03 59         [ 4]  558         call DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      000258 00 02                  559         .word 2 
      00025A CD 06 83         [ 4]  560         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      00025D CD 03 E1         [ 4]  561         call AT 
      000260 CD 05 D6         [ 4]  562         call VPP   
      000263 CD 03 CA         [ 4]  563         call STORE 
      000266 CC 1A 68         [ 2]  564         jp UPDATVP 
      000269                        565 FREEVAR4: ; not variable
      000269 CC 04 7E         [ 2]  566         jp  DROP 
                                    567 
                                    568 ;;
                                    569 ;; get millisecond counter 
                                    570 ;; msec ( -- u )
                                    571 ;; Added by Picatout 2020-04-26
      00026C 02 2B                  572         .word LINK  
                           00026E   573         LINK = . 
      00026E 04                     574         .byte 4
      00026F 4D 53 45 43            575         .ascii "MSEC"
      000273                        576 MSEC: 
      000273 1D 00 02         [ 2]  577         subw x,#CELLL 
      000276 90 BE 2E         [ 2]  578         ldw y,MS 
      000279 FF               [ 2]  579         ldw (x),y 
      00027A 81               [ 4]  580         ret 
                                    581 
                                    582 ; suspend execution for u msec 
                                    583 ;  pause ( u -- )
      00027B 02 6E                  584         .word LINK 
                           00027D   585         LINK=.
      00027D 05                     586         .byte 5 
      00027E 50 41 55 53 45         587         .ascii "PAUSE"
      000283                        588 PAUSE:
      000283 90 93            [ 1]  589         ldw y,x
      000285 90 FE            [ 2]  590         ldw y,(y)
      000287 72 B9 00 2E      [ 2]  591         addw y,MS 
      00028B 8F               [10]  592 1$:     wfi  
      00028C 90 B3 2E         [ 2]  593         cpw y,MS  
      00028F 26 FA            [ 1]  594         jrne 1$        
      000291 1C 00 02         [ 2]  595         addw x,#CELLL 
      000294 81               [ 4]  596         ret 
                                    597 
                                    598 ; initialize count down timer 
                                    599 ;  TIMER ( u -- )  milliseconds 
      000295 02 7D                  600         .word LINK 
                           000297   601         LINK=.
      000297 05                     602         .byte 5 
      000298 54 49 4D 45 52         603         .ascii "TIMER" 
      00029D                        604 TIMER:
      00029D 90 93            [ 1]  605         ldw y,x
      00029F 90 FE            [ 2]  606         ldw y,(y) 
      0002A1 90 BF 30         [ 2]  607         ldw CNTDWN,y
      0002A4 1C 00 02         [ 2]  608         addw x,#CELLL 
      0002A7 81               [ 4]  609         ret 
                                    610 
                                    611 ; check for TIMER exiparition 
                                    612 ;  TIMEOUT? ( -- 0|-1 )
      0002A8 02 97                  613         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                           0002AA   614         LINK=. 
      0002AA 08                     615         .byte 8 
      0002AB 54 49 4D 45 4F 55 54   616         .ascii "TIMEOUT?"
             3F
      0002B3                        617 TIMEOUTQ: 
      0002B3 4F               [ 1]  618         clr a
      0002B4 1D 00 02         [ 2]  619         subw x,#CELLL 
      0002B7 90 BE 30         [ 2]  620         ldw y,CNTDWN 
      0002BA 26 01            [ 1]  621         jrne 1$ 
      0002BC 43               [ 1]  622         cpl a 
      0002BD E7 01            [ 1]  623 1$:     ld (1,x),a 
      0002BF F7               [ 1]  624         ld (x),a 
      0002C0 81               [ 4]  625         ret         
                                    626 
                                    627 ; reboot MCU 
                                    628 ; REBOOT ( -- )
      0002C1 02 AA                  629         .word LINK 
                           0002C3   630         LINK=. 
      0002C3 06                     631         .byte 6 
      0002C4 52 45 42 4F 4F 54      632         .ascii "REBOOT"
      0002CA                        633 reboot:
      0002CA CC 00 00         [ 2]  634         jp NonHandledInterrupt
                                    635 
                                    636 ; compile to flash memory 
                                    637 ; TO-FLASH ( -- )
      0002CD 02 C3                  638         .word LINK 
                           0002CF   639         LINK=.
      0002CF 08                     640         .byte 8
      0002D0 54 4F 2D 46 4C 41 53   641         .ascii "TO-FLASH"
             48
      0002D8                        642 TOFLASH:
      0002D8 CD 06 07         [ 4]  643         call RAMLAST 
      0002DB CD 03 E1         [ 4]  644         call AT 
      0002DE CD 06 32         [ 4]  645         call QDUP 
      0002E1 CD 03 8C         [ 4]  646         call QBRAN
      0002E4 03 07                  647         .word 1$
      0002E6 CD 12 51         [ 4]  648         call ABORQ 
      0002E9 1D                     649         .byte 29
      0002EA 20 4E 6F 74 20 77 68   650         .ascii " Not while definitions in RAM"   
             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      000307 90 AE FF FF      [ 2]  651 1$:     ldw y,#-1 
      00030B 90 BF 1E         [ 2]  652         ldw UTFLASH,y
      00030E 81               [ 4]  653         ret 
                                    654 
                                    655 ; compile to RAM 
                                    656 ; TO-RAM ( -- )
      00030F 02 CF                  657         .word LINK 
                           000311   658         LINK=.
      000311 06                     659         .byte 6 
      000312 54 4F 2D 52 41 4D      660         .ascii "TO-RAM"
      000318                        661 TORAM:
      000318 90 5F            [ 1]  662         clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      00031A 90 BF 1E         [ 2]  663         ldw UTFLASH,y 
      00031D 81               [ 4]  664         ret 
                                    665         
                                    666 
                                    667 ;; Device dependent I/O
                                    668 ;       ?RX     ( -- c T | F )
                                    669 ;         Return input byte and true, or false.
      00031E 03 11                  670         .word      LINK 
                           000320   671 LINK	= .
      000320 04                     672         .byte      4
      000321 3F 4B 45 59            673         .ascii     "?KEY"
      000325                        674 QKEY:
      000325 90 5F            [ 1]  675         CLRW Y 
      000327 72 0B 52 30 0B   [ 2]  676         BTJF UART1_SR,#UART_SR_RXNE,INCH   ;check status
      00032C C6 52 31         [ 1]  677         LD    A,UART1_DR   ;get char in A
      00032F 1D 00 02         [ 2]  678 	SUBW	X,#2
      000332 E7 01            [ 1]  679         LD     (1,X),A
      000334 7F               [ 1]  680 	CLR	(X)
      000335 90 53            [ 2]  681         CPLW     Y
      000337                        682 INCH:
      000337 1D 00 02         [ 2]  683 	SUBW	X,#2
      00033A FF               [ 2]  684         LDW     (X),Y
      00033B 81               [ 4]  685         RET
                                    686 
                                    687 ;       TX!     ( c -- )
                                    688 ;       Send character c to  output device.
      00033C 03 20                  689         .word      LINK
                           00033E   690 LINK	= .
      00033E 04                     691         .byte      4
      00033F 45 4D 49 54            692         .ascii     "EMIT"
      000343                        693 EMIT:
      000343 E6 01            [ 1]  694         LD     A,(1,X)
      000345 1C 00 02         [ 2]  695 	ADDW	X,#2
      000348 72 0F 52 30 FB   [ 2]  696 OUTPUT: BTJF UART1_SR,#UART_SR_TXE,OUTPUT  ;loop until tdre
      00034D C7 52 31         [ 1]  697         LD    UART1_DR,A   ;send A
      000350 81               [ 4]  698         RET
                                    699 
                                    700 ;; The kernel
                                    701 
                                    702 ;       doLIT   ( -- w )
                                    703 ;       Push an inline literal.
      000351 03 3E                  704         .word      LINK
                           000353   705 LINK	= 	.
      000353 45                     706 	.byte      COMPO+5
      000354 44 4F 4C 49 54         707         .ascii     "DOLIT"
      000359                        708 DOLIT:
      000359 1D 00 02         [ 2]  709 	SUBW X,#2
                           000001   710 .if PICATOUT_MOD 
      00035C 16 01            [ 2]  711         ldw y,(1,sp)
      00035E 90 FE            [ 2]  712         ldw y,(y)
      000360 FF               [ 2]  713         ldw (x),y
      000361 90 85            [ 2]  714         popw y 
      000363 90 EC 02         [ 2]  715         jp (2,y)
                           000000   716 .else 
                                    717         POPW Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                                    718 	LDW YTEMP,Y
                                    719 	LDW Y,(Y)
                                    720         LDW (X),Y
                                    721         LDW Y,YTEMP
                                    722 	JP (2,Y)
                                    723 .endif 
                                    724 
                                    725 ;       next    ( -- )
                                    726 ;       Code for  single index loop.
      000366 03 53                  727         .word      LINK
                           000368   728 LINK	= 	.
      000368 44                     729 	.byte      COMPO+4
      000369 4E 45 58 54            730         .ascii     "NEXT"
      00036D                        731 DONXT:
      00036D 16 03            [ 2]  732 	LDW Y,(3,SP)
      00036F 90 5A            [ 2]  733 	DECW Y
      000371 2A 07            [ 1]  734 	JRPL NEX1 ; jump if N=0
      000373 90 85            [ 2]  735 	POPW Y
                           000001   736 .if PICATOUT_MOD
      000375 5B 02            [ 2]  737         addw sp,#2
                           000000   738 .else        
                                    739 	POP A
                                    740 	POP A
                                    741 .endif         
      000377 90 EC 02         [ 2]  742         JP (2,Y)
      00037A                        743 NEX1:
      00037A 17 03            [ 2]  744         LDW (3,SP),Y
      00037C 90 85            [ 2]  745         POPW Y
      00037E 90 FE            [ 2]  746 	LDW Y,(Y)
      000380 90 FC            [ 2]  747 	JP (Y)
                                    748 
                                    749 ;       ?branch ( f -- )
                                    750 ;       Branch if flag is zero.
      000382 03 68                  751         .word      LINK
                           000384   752 LINK	= 	.
      000384 47                     753 	.byte      COMPO+7
      000385 3F 42 52 41 4E 43 48   754         .ascii     "?BRANCH"
      00038C                        755 QBRAN:	
      00038C 90 93            [ 1]  756         LDW Y,X
      00038E 1C 00 02         [ 2]  757 	ADDW X,#2
      000391 90 FE            [ 2]  758 	LDW Y,(Y)
      000393 27 0E            [ 1]  759         JREQ     BRAN
      000395 90 85            [ 2]  760 	POPW Y
      000397 90 EC 02         [ 2]  761 	JP (2,Y)
                                    762         
                                    763 ;       branch  ( -- )
                                    764 ;       Branch to an inline address.
      00039A 03 84                  765         .word      LINK
                           00039C   766 LINK	= 	.
      00039C 46                     767 	.byte      COMPO+6
      00039D 42 52 41 4E 43 48      768         .ascii     "BRANCH"
      0003A3                        769 BRAN:
      0003A3 90 85            [ 2]  770         POPW Y
      0003A5 90 FE            [ 2]  771 	LDW Y,(Y)
      0003A7 90 FC            [ 2]  772         JP     (Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    773 
                                    774 ;       EXECUTE ( ca -- )
                                    775 ;       Execute  word at ca.
      0003A9 03 9C                  776         .word      LINK
                           0003AB   777 LINK	= 	.
      0003AB 07                     778         .byte       7
      0003AC 45 58 45 43 55 54 45   779         .ascii     "EXECUTE"
      0003B3                        780 EXECU:
      0003B3 90 93            [ 1]  781         LDW Y,X
      0003B5 1C 00 02         [ 2]  782 	ADDW X,#2
      0003B8 90 FE            [ 2]  783 	LDW  Y,(Y)
      0003BA 90 FC            [ 2]  784         JP   (Y)
                                    785 
                                    786 ;       EXIT    ( -- )
                                    787 ;       Terminate a colon definition.
      0003BC 03 AB                  788         .word      LINK
                           0003BE   789 LINK = .
      0003BE 04                     790         .byte      4
      0003BF 45 58 49 54            791         .ascii     "EXIT"
      0003C3                        792 EXIT:
      0003C3 90 85            [ 2]  793         POPW Y
      0003C5 81               [ 4]  794         RET
                                    795 
                                    796 ;       !       ( w a -- )
                                    797 ;       Pop  data stack to memory.
      0003C6 03 BE                  798         .word      LINK
                           0003C8   799 LINK = .
      0003C8 01                     800         .byte      1
      0003C9 21                     801         .ascii     "!"
      0003CA                        802 STORE:
      0003CA 90 93            [ 1]  803         LDW Y,X
      0003CC 90 FE            [ 2]  804         LDW Y,(Y)    ;Y=a
      0003CE 90 BF 24         [ 2]  805         LDW YTEMP,Y
      0003D1 90 93            [ 1]  806         LDW Y,X
      0003D3 90 EE 02         [ 2]  807         LDW Y,(2,Y)
      0003D6 91 CF 24         [ 5]  808         LDW [YTEMP],Y ;store w at a
      0003D9 1C 00 04         [ 2]  809         ADDW X,#4 ; DDROP 
      0003DC 81               [ 4]  810         RET     
                                    811 
                                    812 ;       @       ( a -- w )
                                    813 ;       Push memory location to stack.
      0003DD 03 C8                  814         .word      LINK
                           0003DF   815 LINK	= 	.
      0003DF 01                     816         .byte    1
      0003E0 40                     817         .ascii	"@"
      0003E1                        818 AT:
      0003E1 90 93            [ 1]  819         LDW Y,X     ;Y = a
      0003E3 90 FE            [ 2]  820         LDW Y,(Y)   ; address 
      0003E5 90 FE            [ 2]  821         LDW Y,(Y)   ; value 
      0003E7 FF               [ 2]  822         LDW (X),Y ;w = @Y
      0003E8 81               [ 4]  823         RET     
                                    824 
                                    825 ;       C!      ( c b -- )
                                    826 ;       Pop  data stack to byte memory.
      0003E9 03 DF                  827         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           0003EB   828 LINK	= .
      0003EB 02                     829         .byte      2
      0003EC 43 21                  830         .ascii     "C!"
      0003EE                        831 CSTOR:
      0003EE 90 93            [ 1]  832         LDW Y,X
      0003F0 90 FE            [ 2]  833 	LDW Y,(Y)    ;Y=b
      0003F2 E6 03            [ 1]  834         LD A,(3,X)    ;D = c
      0003F4 90 F7            [ 1]  835         LD  (Y),A     ;store c at b
      0003F6 1C 00 04         [ 2]  836 	ADDW X,#4 ; DDROP 
      0003F9 81               [ 4]  837         RET     
                                    838 
                                    839 ;       C@      ( b -- c )
                                    840 ;       Push byte in memory to  stack.
      0003FA 03 EB                  841         .word      LINK
                           0003FC   842 LINK	= 	.
      0003FC 02                     843         .byte      2
      0003FD 43 40                  844         .ascii     "C@"
      0003FF                        845 CAT:
      0003FF 90 93            [ 1]  846         LDW Y,X     ;Y=b
      000401 90 FE            [ 2]  847         LDW Y,(Y)
      000403 90 F6            [ 1]  848         LD A,(Y)
      000405 E7 01            [ 1]  849         LD (1,X),A
      000407 7F               [ 1]  850         CLR (X)
      000408 81               [ 4]  851         RET     
                                    852 
                                    853 ;       RP@     ( -- a )
                                    854 ;       Push current RP to data stack.
      000409 03 FC                  855         .word      LINK
                           00040B   856 LINK	= .
      00040B 03                     857         .byte      3
      00040C 52 50 40               858         .ascii     "RP@"
      00040F                        859 RPAT:
      00040F 90 96            [ 1]  860         LDW Y,SP    ;save return addr
      000411 1D 00 02         [ 2]  861         SUBW X,#2
      000414 FF               [ 2]  862         LDW (X),Y
      000415 81               [ 4]  863         RET     
                                    864 
                                    865 ;       RP!     ( a -- )
                                    866 ;       Set  return stack pointer.
      000416 04 0B                  867         .word      LINK
                           000418   868 LINK	= 	. 
      000418 43                     869 	.byte      COMPO+3
      000419 52 50 21               870         .ascii     "RP!"
      00041C                        871 RPSTO:
      00041C 90 85            [ 2]  872         POPW Y
      00041E 90 BF 24         [ 2]  873         LDW YTEMP,Y
      000421 90 93            [ 1]  874         LDW Y,X
      000423 90 FE            [ 2]  875         LDW Y,(Y)
      000425 90 94            [ 1]  876         LDW SP,Y
      000427 1C 00 02         [ 2]  877         ADDW x,#CELLL ; a was not dropped, Picatout 2020-05-24
      00042A 92 CC 24         [ 5]  878         JP [YTEMP]
                                    879 
                                    880 ;       R>      ( -- w )
                                    881 ;       Pop return stack to data stack.
      00042D 04 18                  882         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                           00042F   883 LINK	= 	. 
      00042F 42                     884 	.byte      COMPO+2
      000430 52 3E                  885         .ascii     "R>"
      000432                        886 RFROM:
      000432 90 85            [ 2]  887         POPW Y    ;save return addr
      000434 90 BF 24         [ 2]  888         LDW YTEMP,Y
      000437 90 85            [ 2]  889         POPW Y
      000439 1D 00 02         [ 2]  890         SUBW X,#2
      00043C FF               [ 2]  891         LDW (X),Y
      00043D 92 CC 24         [ 5]  892         JP [YTEMP]
                                    893 
                                    894 ;       R@      ( -- w )
                                    895 ;       Copy top of return stack to stack.
      000440 04 2F                  896         .word      LINK
                           000442   897 LINK	= 	. 
      000442 02                     898         .byte      2
      000443 52 40                  899         .ascii     "R@"
      000445                        900 RAT:
                           000001   901 .if PICATOUT_MOD
      000445 16 03            [ 2]  902         ldw y,(3,sp)
      000447 1D 00 02         [ 2]  903         subw x,#CELLL 
      00044A FF               [ 2]  904         ldw (x),y 
      00044B 81               [ 4]  905         ret 
                           000000   906 .else 
                                    907         POPW Y
                                    908         LDW YTEMP,Y
                                    909         POPW Y
                                    910         PUSHW Y
                                    911         SUBW X,#2
                                    912         LDW (X),Y
                                    913         JP [YTEMP]
                                    914 .endif         
                                    915 
                                    916 ;       >R      ( w -- )
                                    917 ;       Push data stack to return stack.
      00044C 04 42                  918         .word      LINK
                           00044E   919 LINK	= 	. 
      00044E 42                     920 	.byte      COMPO+2
      00044F 3E 52                  921         .ascii     ">R"
      000451                        922 TOR:
      000451 90 85            [ 2]  923         POPW Y    ;save return addr
      000453 90 BF 24         [ 2]  924         LDW YTEMP,Y
      000456 90 93            [ 1]  925         LDW Y,X
      000458 90 FE            [ 2]  926         LDW Y,(Y)
      00045A 90 89            [ 2]  927         PUSHW Y    ;restore return addr
      00045C 1C 00 02         [ 2]  928         ADDW X,#2
      00045F 92 CC 24         [ 5]  929         JP [YTEMP]
                                    930 
                                    931 ;       SP@     ( -- a )
                                    932 ;       Push current stack pointer.
      000462 04 4E                  933         .word      LINK
                           000464   934 LINK	= 	. 
      000464 03                     935         .byte      3
      000465 53 50 40               936         .ascii     "SP@"
      000468                        937 SPAT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      000468 90 93            [ 1]  938 	LDW Y,X
      00046A 1D 00 02         [ 2]  939         SUBW X,#2
      00046D FF               [ 2]  940 	LDW (X),Y
      00046E 81               [ 4]  941         RET     
                                    942 
                                    943 ;       SP!     ( a -- )
                                    944 ;       Set  data stack pointer.
      00046F 04 64                  945         .word      LINK
                           000471   946 LINK	= 	. 
      000471 03                     947         .byte      3
      000472 53 50 21               948         .ascii     "SP!"
      000475                        949 SPSTO:
      000475 FE               [ 2]  950         LDW     X,(X)     ;X = a
      000476 81               [ 4]  951         RET     
                                    952 
                                    953 ;       DROP    ( w -- )
                                    954 ;       Discard top stack item.
      000477 04 71                  955         .word      LINK
                           000479   956 LINK	= 	. 
      000479 04                     957         .byte      4
      00047A 44 52 4F 50            958         .ascii     "DROP"
      00047E                        959 DROP:
      00047E 1C 00 02         [ 2]  960         ADDW X,#2     
      000481 81               [ 4]  961         RET     
                                    962 
                                    963 ;       DUP     ( w -- w w )
                                    964 ;       Duplicate  top stack item.
      000482 04 79                  965         .word      LINK
                           000484   966 LINK	= 	. 
      000484 03                     967         .byte      3
      000485 44 55 50               968         .ascii     "DUP"
      000488                        969 DUPP:
      000488 90 93            [ 1]  970 	LDW Y,X
      00048A 1D 00 02         [ 2]  971         SUBW X,#2
      00048D 90 FE            [ 2]  972 	LDW Y,(Y)
      00048F FF               [ 2]  973 	LDW (X),Y
      000490 81               [ 4]  974         RET     
                                    975 
                                    976 ;       SWAP    ( w1 w2 -- w2 w1 )
                                    977 ;       Exchange top two stack items.
      000491 04 84                  978         .word      LINK
                           000493   979 LINK	= 	. 
      000493 04                     980         .byte      4
      000494 53 57 41 50            981         .ascii     "SWAP"
      000498                        982 SWAPP:
      000498 90 93            [ 1]  983         LDW Y,X
      00049A 90 FE            [ 2]  984         LDW Y,(Y)
      00049C 90 BF 24         [ 2]  985         LDW YTEMP,Y
      00049F 90 93            [ 1]  986         LDW Y,X
      0004A1 90 EE 02         [ 2]  987         LDW Y,(2,Y)
      0004A4 FF               [ 2]  988         LDW (X),Y
      0004A5 90 BE 24         [ 2]  989         LDW Y,YTEMP
      0004A8 EF 02            [ 2]  990         LDW (2,X),Y
      0004AA 81               [ 4]  991         RET     
                                    992 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                                    993 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                    994 ;       Copy second stack item to top.
      0004AB 04 93                  995         .word      LINK
                           0004AD   996 LINK	= . 
      0004AD 04                     997         .byte      4
      0004AE 4F 56 45 52            998         .ascii     "OVER"
      0004B2                        999 OVER:
      0004B2 1D 00 02         [ 2] 1000         SUBW X,#2
      0004B5 90 93            [ 1] 1001         LDW Y,X
      0004B7 90 EE 04         [ 2] 1002         LDW Y,(4,Y)
      0004BA FF               [ 2] 1003         LDW (X),Y
      0004BB 81               [ 4] 1004         RET     
                                   1005 
                                   1006 ;       0<      ( n -- t )
                                   1007 ;       Return true if n is negative.
      0004BC 04 AD                 1008         .word      LINK
                           0004BE  1009 LINK	= . 
      0004BE 02                    1010         .byte      2
      0004BF 30 3C                 1011         .ascii     "0<"
      0004C1                       1012 ZLESS:
      0004C1 A6 FF            [ 1] 1013         LD A,#0xFF
      0004C3 90 93            [ 1] 1014         LDW Y,X
      0004C5 90 FE            [ 2] 1015         LDW Y,(Y)
      0004C7 2B 01            [ 1] 1016         JRMI     ZL1
      0004C9 4F               [ 1] 1017         CLR A   ;false
      0004CA F7               [ 1] 1018 ZL1:    LD     (X),A
      0004CB E7 01            [ 1] 1019         LD (1,X),A
      0004CD 81               [ 4] 1020 	RET     
                                   1021 
                                   1022 ;       AND     ( w w -- w )
                                   1023 ;       Bitwise AND.
      0004CE 04 BE                 1024         .word      LINK
                           0004D0  1025 LINK	= . 
      0004D0 03                    1026         .byte      3
      0004D1 41 4E 44              1027         .ascii     "AND"
      0004D4                       1028 ANDD:
      0004D4 F6               [ 1] 1029         LD  A,(X)    ;D=w
      0004D5 E4 02            [ 1] 1030         AND A,(2,X)
      0004D7 E7 02            [ 1] 1031         LD (2,X),A
      0004D9 E6 01            [ 1] 1032         LD A,(1,X)
      0004DB E4 03            [ 1] 1033         AND A,(3,X)
      0004DD E7 03            [ 1] 1034         LD (3,X),A
      0004DF 1C 00 02         [ 2] 1035         ADDW X,#2
      0004E2 81               [ 4] 1036         RET
                                   1037 
                                   1038 ;       OR      ( w w -- w )
                                   1039 ;       Bitwise inclusive OR.
      0004E3 04 D0                 1040         .word      LINK
                           0004E5  1041 LINK = . 
      0004E5 02                    1042         .byte      2
      0004E6 4F 52                 1043         .ascii     "OR"
      0004E8                       1044 ORR:
      0004E8 F6               [ 1] 1045         LD A,(X)    ;D=w
      0004E9 EA 02            [ 1] 1046         OR A,(2,X)
      0004EB E7 02            [ 1] 1047         LD (2,X),A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      0004ED E6 01            [ 1] 1048         LD A,(1,X)
      0004EF EA 03            [ 1] 1049         OR A,(3,X)
      0004F1 E7 03            [ 1] 1050         LD (3,X),A
      0004F3 1C 00 02         [ 2] 1051         ADDW X,#2
      0004F6 81               [ 4] 1052         RET
                                   1053 
                                   1054 ;       XOR     ( w w -- w )
                                   1055 ;       Bitwise exclusive OR.
      0004F7 04 E5                 1056         .word      LINK
                           0004F9  1057 LINK	= . 
      0004F9 03                    1058         .byte      3
      0004FA 58 4F 52              1059         .ascii     "XOR"
      0004FD                       1060 XORR:
      0004FD F6               [ 1] 1061         LD A,(X)    ;D=w
      0004FE E8 02            [ 1] 1062         XOR A,(2,X)
      000500 E7 02            [ 1] 1063         LD (2,X),A
      000502 E6 01            [ 1] 1064         LD A,(1,X)
      000504 E8 03            [ 1] 1065         XOR A,(3,X)
      000506 E7 03            [ 1] 1066         LD (3,X),A
      000508 1C 00 02         [ 2] 1067         ADDW X,#2
      00050B 81               [ 4] 1068         RET
                                   1069 
                                   1070 ;       UM+     ( u u -- udsum )
                                   1071 ;       Add two unsigned single
                                   1072 ;       and return a double sum.
      00050C 04 F9                 1073         .word      LINK
                           00050E  1074 LINK	= . 
      00050E 03                    1075         .byte      3
      00050F 55 4D 2B              1076         .ascii     "UM+"
      000512                       1077 UPLUS:
      000512 A6 01            [ 1] 1078         LD A,#1
      000514 90 93            [ 1] 1079         LDW Y,X
      000516 90 EE 02         [ 2] 1080         LDW Y,(2,Y)
      000519 90 BF 24         [ 2] 1081         LDW YTEMP,Y
      00051C 90 93            [ 1] 1082         LDW Y,X
      00051E 90 FE            [ 2] 1083         LDW Y,(Y)
      000520 72 B9 00 24      [ 2] 1084         ADDW Y,YTEMP
      000524 EF 02            [ 2] 1085         LDW (2,X),Y
      000526 25 01            [ 1] 1086         JRC     UPL1
      000528 4F               [ 1] 1087         CLR A
      000529 E7 01            [ 1] 1088 UPL1:   LD     (1,X),A
      00052B 7F               [ 1] 1089         CLR (X)
      00052C 81               [ 4] 1090         RET
                                   1091 
                                   1092 ;; System and user variables
                                   1093 
                                   1094 ;       doVAR   ( -- a )
                                   1095 ;       Code for VARIABLE and CREATE.
      00052D 05 0E                 1096         .word      LINK
                           00052F  1097 LINK	= . 
      00052F 45                    1098 	.byte      COMPO+5
      000530 44 4F 56 41 52        1099         .ascii     "DOVAR"
      000535                       1100 DOVAR:
      000535 1D 00 02         [ 2] 1101 	SUBW X,#2
      000538 90 85            [ 2] 1102         POPW Y    ;get return addr (pfa)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                           000001  1103 .if PICATOUT_MOD
      00053A 90 FE            [ 2] 1104         LDW Y,(Y) ; indirect address 
                                   1105 .endif ;PICATOUT_MOD        
      00053C FF               [ 2] 1106         LDW (X),Y    ;push on stack
      00053D 81               [ 4] 1107         RET     ;go to RET of EXEC
                                   1108 
                                   1109 ;       BASE    ( -- a )
                                   1110 ;       Radix base for numeric I/O.
      00053E 05 2F                 1111         .word      LINK        
                           000540  1112 LINK = . 
      000540 04                    1113         .byte      4
      000541 42 41 53 45           1114         .ascii     "BASE"
      000545                       1115 BASE:
      000545 90 AE 00 06      [ 2] 1116 	LDW Y,#UBASE 
      000549 1D 00 02         [ 2] 1117 	SUBW X,#2
      00054C FF               [ 2] 1118         LDW (X),Y
      00054D 81               [ 4] 1119         RET
                                   1120 
                                   1121 ;       tmp     ( -- a )
                                   1122 ;       A temporary storage.
      00054E 05 40                 1123         .word      LINK
                                   1124         
                           000550  1125 LINK = . 
      000550 03                    1126 	.byte      3
      000551 54 4D 50              1127         .ascii     "TMP"
      000554                       1128 TEMP:
      000554 90 AE 00 08      [ 2] 1129 	LDW Y,#UTMP
      000558 1D 00 02         [ 2] 1130 	SUBW X,#2
      00055B FF               [ 2] 1131         LDW (X),Y
      00055C 81               [ 4] 1132         RET
                                   1133 
                                   1134 ;       >IN     ( -- a )
                                   1135 ;        Hold parsing pointer.
      00055D 05 50                 1136         .word      LINK
                           00055F  1137 LINK = . 
      00055F 03                    1138         .byte      3
      000560 3E 49 4E              1139         .ascii    ">IN"
      000563                       1140 INN:
      000563 90 AE 00 0A      [ 2] 1141 	LDW Y,#UINN 
      000567 1D 00 02         [ 2] 1142 	SUBW X,#2
      00056A FF               [ 2] 1143         LDW (X),Y
      00056B 81               [ 4] 1144         RET
                                   1145 
                                   1146 ;       #TIB    ( -- a )
                                   1147 ;       Count in terminal input buffer.
      00056C 05 5F                 1148         .word      LINK
                           00056E  1149 LINK = . 
      00056E 04                    1150         .byte      4
      00056F 23 54 49 42           1151         .ascii     "#TIB"
      000573                       1152 NTIB:
      000573 90 AE 00 0C      [ 2] 1153 	LDW Y,#UCTIB 
      000577 1D 00 02         [ 2] 1154 	SUBW X,#2
      00057A FF               [ 2] 1155         LDW (X),Y
      00057B 81               [ 4] 1156         RET
                                   1157 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                           000001  1158 .if PICATOUT_MOD
                                   1159 ;       TBUF ( -- a )
                                   1160 ;       address of 128 bytes transaction buffer 
      00057C 05 6E                 1161         .word LINK 
                           00057E  1162         LINK=.
      00057E 04                    1163         .byte 4 
      00057F 54 42 55 46           1164         .ascii "TBUF"
      000583                       1165 TBUF:
      000583 90 AE 16 80      [ 2] 1166         ldw y,#ROWBUFF
      000587 1D 00 02         [ 2] 1167         subw x,#CELLL
      00058A FF               [ 2] 1168         ldw (x),y 
      00058B 81               [ 4] 1169         ret 
                                   1170 
                                   1171 ; systeme variable 
                                   1172 ; compilation destination 
                                   1173 ; TFLASH ( -- A )
      00058C 05 7E                 1174         .word LINK 
                           00058E  1175         LINK=.
      00058E 06                    1176         .byte 6 
      00058F 54 46 4C 41 53 48     1177         .ascii "TFLASH"         
      000595                       1178 TFLASH:
      000595 1D 00 02         [ 2] 1179         subw x,#CELLL 
      000598 90 AE 00 1E      [ 2] 1180         ldw y,#UTFLASH
      00059C FF               [ 2] 1181         ldw (x),y 
      00059D 81               [ 4] 1182         ret 
                                   1183 
                                   1184 .endif ;PICATOUT_MOD
                                   1185 
                                   1186 ;       "EVAL   ( -- a )
                                   1187 ;       Execution vector of EVAL.
      00059E 05 8E                 1188         .word      LINK
                           0005A0  1189 LINK = . 
      0005A0 05                    1190         .byte      5
      0005A1 27 45 56 41 4C        1191         .ascii     "'EVAL"
      0005A6                       1192 TEVAL:
      0005A6 90 AE 00 10      [ 2] 1193 	LDW Y,#UINTER 
      0005AA 1D 00 02         [ 2] 1194 	SUBW X,#2
      0005AD FF               [ 2] 1195         LDW (X),Y
      0005AE 81               [ 4] 1196         RET
                                   1197 
                                   1198 ;       HLD     ( -- a )
                                   1199 ;       Hold a pointer of output string.
      0005AF 05 A0                 1200         .word      LINK
                           0005B1  1201 LINK = . 
      0005B1 03                    1202         .byte      3
      0005B2 48 4C 44              1203         .ascii     "HLD"
      0005B5                       1204 HLD:
      0005B5 90 AE 00 12      [ 2] 1205 	LDW Y,#UHLD 
      0005B9 1D 00 02         [ 2] 1206 	SUBW X,#2
      0005BC FF               [ 2] 1207         LDW (X),Y
      0005BD 81               [ 4] 1208         RET
                                   1209 
                                   1210 ;       CONTEXT ( -- a )
                                   1211 ;       Start vocabulary search.
      0005BE 05 B1                 1212         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                           0005C0  1213 LINK = . 
      0005C0 07                    1214         .byte      7
      0005C1 43 4F 4E 54 45 58 54  1215         .ascii     "CONTEXT"
      0005C8                       1216 CNTXT:
      0005C8 90 AE 00 14      [ 2] 1217 	LDW Y,#UCNTXT
      0005CC 1D 00 02         [ 2] 1218 	SUBW X,#2
      0005CF FF               [ 2] 1219         LDW (X),Y
      0005D0 81               [ 4] 1220         RET
                                   1221 
                                   1222 ;       VP      ( -- a )
                                   1223 ;       Point to top of variables
      0005D1 05 C0                 1224         .word      LINK
                           0005D3  1225 LINK = . 
      0005D3 02                    1226         .byte      2
      0005D4 56 50                 1227         .ascii     "VP"
      0005D6                       1228 VPP:
      0005D6 90 AE 00 16      [ 2] 1229 	LDW Y,#UVP 
      0005DA 1D 00 02         [ 2] 1230 	SUBW X,#2
      0005DD FF               [ 2] 1231         LDW (X),Y
      0005DE 81               [ 4] 1232         RET
                                   1233 
                           000001  1234 .if PICATOUT_MOD
                                   1235 ;       CP    ( -- a )
                                   1236 ;       Pointer to top of FLASH 
      0005DF 05 D3                 1237         .word LINK 
                           0005E1  1238         LINK=.
      0005E1 02                    1239         .byte 2 
      0005E2 43 50                 1240         .ascii "CP"
      0005E4                       1241 CPP: 
      0005E4 90 AE 00 18      [ 2] 1242         ldw y,#UCP 
      0005E8 1D 00 02         [ 2] 1243         subw x,#CELLL 
      0005EB FF               [ 2] 1244         ldw (x),y 
      0005EC 81               [ 4] 1245         ret                
                                   1246 .endif ;PICATOUT_MOD
                                   1247 
                                   1248 ;       LAST    ( -- a )
                                   1249 ;       Point to last name in dictionary.
      0005ED 05 E1                 1250         .word      LINK
                           0005EF  1251 LINK = . 
      0005EF 04                    1252         .byte      4
      0005F0 4C 41 53 54           1253         .ascii     "LAST"
      0005F4                       1254 LAST:
      0005F4 90 AE 00 1A      [ 2] 1255 	LDW Y,#ULAST 
      0005F8 1D 00 02         [ 2] 1256 	SUBW X,#2
      0005FB FF               [ 2] 1257         LDW (X),Y
      0005FC 81               [ 4] 1258         RET
                                   1259 
                           000001  1260 .if PICATOUT_MOD 
                                   1261 ; address of system variable URLAST 
                                   1262 ;       RAMLAST ( -- a )
                                   1263 ; RAM dictionary context 
      0005FD 05 EF                 1264         .word LINK 
                           0005FF  1265         LINK=. 
      0005FF 07                    1266         .byte 7  
      000600 52 41 4D 4C 41 53 54  1267         .ascii "RAMLAST" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      000607                       1268 RAMLAST: 
      000607 90 AE 00 20      [ 2] 1269         ldw y,#URLAST 
      00060B 1D 00 02         [ 2] 1270         subw x,#CELLL 
      00060E FF               [ 2] 1271         ldw (x),y 
      00060F 81               [ 4] 1272         ret 
                                   1273 .endif ;PICATOUT_MOD
                                   1274 
                           000001  1275 .if PICATOUT_MOD
                                   1276 ; OFFSET ( -- a )
                                   1277 ; address of system variable OFFSET 
      000610 05 FF                 1278         .word LINK 
                           000612  1279         LINK=.
      000612 06                    1280         .byte 6
      000613 4F 46 46 53 45 54     1281         .ascii "OFFSET" 
      000619                       1282 OFFSET: 
      000619 1D 00 02         [ 2] 1283         subw x,#CELLL
      00061C 90 AE 00 1C      [ 2] 1284         ldw y,#UOFFSET 
      000620 FF               [ 2] 1285         ldw (x),y 
      000621 81               [ 4] 1286         ret 
                                   1287 
                                   1288 ; adjust jump address adding OFFSET
                                   1289 ; ADR-ADJ ( a -- a+offset )
      000622                       1290 ADRADJ: 
      000622 CD 06 19         [ 4] 1291         call OFFSET 
      000625 CD 03 E1         [ 4] 1292         call AT 
      000628 CC 06 83         [ 2] 1293         jp PLUS 
                                   1294 
                                   1295 .endif ; PICATOUT_MOD
                                   1296 
                                   1297 ;; Common functions
                                   1298 
                                   1299 ;       ?DUP    ( w -- w w | 0 )
                                   1300 ;       Dup tos if its is not zero.
      00062B 06 12                 1301         .word      LINK
                           00062D  1302 LINK = . 
      00062D 04                    1303         .byte      4
      00062E 3F 44 55 50           1304         .ascii     "?DUP"
      000632                       1305 QDUP:
      000632 90 93            [ 1] 1306         LDW Y,X
      000634 90 FE            [ 2] 1307 	LDW Y,(Y)
      000636 27 04            [ 1] 1308         JREQ     QDUP1
      000638 1D 00 02         [ 2] 1309 	SUBW X,#2
      00063B FF               [ 2] 1310         LDW (X),Y
      00063C 81               [ 4] 1311 QDUP1:  RET
                                   1312 
                                   1313 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1314 ;       Rot 3rd item to top.
      00063D 06 2D                 1315         .word      LINK
                           00063F  1316 LINK = . 
      00063F 03                    1317         .byte      3
      000640 52 4F 54              1318         .ascii     "ROT"
      000643                       1319 ROT:
                           000001  1320 .if PICATOUT_MOD
      000643 90 93            [ 1] 1321         ldw y,x 
      000645 90 FE            [ 2] 1322         ldw y,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      000647 90 89            [ 2] 1323         pushw y 
      000649 90 93            [ 1] 1324         ldw y,x 
      00064B 90 EE 04         [ 2] 1325         ldw y,(4,y)
      00064E FF               [ 2] 1326         ldw (x),y 
      00064F 90 93            [ 1] 1327         ldw y,x 
      000651 90 EE 02         [ 2] 1328         ldw y,(2,y)
      000654 EF 04            [ 2] 1329         ldw (4,x),y 
      000656 90 85            [ 2] 1330         popw y 
      000658 EF 02            [ 2] 1331         ldw (2,x),y
      00065A 81               [ 4] 1332         ret 
                           000000  1333 .else 
                                   1334         LDW Y,X
                                   1335 	LDW Y,(4,Y)
                                   1336 	LDW YTEMP,Y
                                   1337         LDW Y,X
                                   1338         LDW Y,(2,Y)
                                   1339         LDW XTEMP,Y
                                   1340         LDW Y,X
                                   1341         LDW Y,(Y)
                                   1342         LDW (2,X),Y
                                   1343         LDW Y,XTEMP
                                   1344         LDW (4,X),Y
                                   1345         LDW Y,YTEMP
                                   1346         LDW (X),Y
                                   1347         RET
                                   1348 .endif 
                                   1349 
                                   1350 ;       2DROP   ( w w -- )
                                   1351 ;       Discard two items on stack.
      00065B 06 3F                 1352         .word      LINK
                           00065D  1353 LINK = . 
      00065D 05                    1354         .byte      5
      00065E 32 44 52 4F 50        1355         .ascii     "2DROP"
      000663                       1356 DDROP:
      000663 1C 00 04         [ 2] 1357         ADDW X,#4
      000666 81               [ 4] 1358         RET
                                   1359 
                                   1360 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1361 ;       Duplicate top two items.
      000667 06 5D                 1362         .word      LINK
                           000669  1363 LINK = . 
      000669 04                    1364         .byte      4
      00066A 32 44 55 50           1365         .ascii     "2DUP"
      00066E                       1366 DDUP:
      00066E 1D 00 04         [ 2] 1367         SUBW X,#4
      000671 90 93            [ 1] 1368         LDW Y,X
      000673 90 EE 06         [ 2] 1369         LDW Y,(6,Y)
      000676 EF 02            [ 2] 1370         LDW (2,X),Y
      000678 90 93            [ 1] 1371         LDW Y,X
      00067A 90 EE 04         [ 2] 1372         LDW Y,(4,Y)
      00067D FF               [ 2] 1373         LDW (X),Y
      00067E 81               [ 4] 1374         RET
                                   1375 
                                   1376 ;       +       ( w w -- sum )
                                   1377 ;       Add top two items.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      00067F 06 69                 1378         .word      LINK
                           000681  1379 LINK = . 
      000681 01                    1380         .byte      1
      000682 2B                    1381         .ascii     "+"
      000683                       1382 PLUS:
      000683 90 93            [ 1] 1383         LDW Y,X
      000685 90 FE            [ 2] 1384         LDW Y,(Y)
      000687 90 BF 24         [ 2] 1385         LDW YTEMP,Y
      00068A 1C 00 02         [ 2] 1386         ADDW X,#2
      00068D 90 93            [ 1] 1387         LDW Y,X
      00068F 90 FE            [ 2] 1388         LDW Y,(Y)
      000691 72 B9 00 24      [ 2] 1389         ADDW Y,YTEMP
      000695 FF               [ 2] 1390         LDW (X),Y
      000696 81               [ 4] 1391         RET
                                   1392 
                                   1393 ;       NOT     ( w -- w )
                                   1394 ;       One's complement of tos.
      000697 06 81                 1395         .word      LINK
                           000699  1396 LINK = . 
      000699 03                    1397         .byte      3
      00069A 4E 4F 54              1398         .ascii     "NOT"
      00069D                       1399 INVER:
      00069D 90 93            [ 1] 1400         LDW Y,X
      00069F 90 FE            [ 2] 1401         LDW Y,(Y)
      0006A1 90 53            [ 2] 1402         CPLW Y
      0006A3 FF               [ 2] 1403         LDW (X),Y
      0006A4 81               [ 4] 1404         RET
                                   1405 
                                   1406 ;       NEGATE  ( n -- -n )
                                   1407 ;       Two's complement of tos.
      0006A5 06 99                 1408         .word      LINK
                           0006A7  1409 LINK = . 
      0006A7 06                    1410         .byte      6
      0006A8 4E 45 47 41 54 45     1411         .ascii     "NEGATE"
      0006AE                       1412 NEGAT:
      0006AE 90 93            [ 1] 1413         LDW Y,X
      0006B0 90 FE            [ 2] 1414         LDW Y,(Y)
      0006B2 90 50            [ 2] 1415         NEGW Y
      0006B4 FF               [ 2] 1416         LDW (X),Y
      0006B5 81               [ 4] 1417         RET
                                   1418 
                                   1419 ;       DNEGATE ( d -- -d )
                                   1420 ;       Two's complement of top double.
      0006B6 06 A7                 1421         .word      LINK
                           0006B8  1422 LINK = . 
      0006B8 07                    1423         .byte      7
      0006B9 44 4E 45 47 41 54 45  1424         .ascii     "DNEGATE"
      0006C0                       1425 DNEGA:
      0006C0 90 93            [ 1] 1426         LDW Y,X
      0006C2 90 FE            [ 2] 1427 	LDW Y,(Y)
      0006C4 90 53            [ 2] 1428         CPLW Y     
      0006C6 90 BF 24         [ 2] 1429 	LDW YTEMP,Y
      0006C9 90 93            [ 1] 1430         LDW Y,X
      0006CB 90 EE 02         [ 2] 1431         LDW Y,(2,Y)
      0006CE 90 53            [ 2] 1432         CPLW Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      0006D0 90 5C            [ 2] 1433         INCW Y
      0006D2 EF 02            [ 2] 1434         LDW (2,X),Y
      0006D4 90 BE 24         [ 2] 1435         LDW Y,YTEMP
      0006D7 24 02            [ 1] 1436         JRNC DN1 
      0006D9 90 5C            [ 2] 1437         INCW Y
      0006DB FF               [ 2] 1438 DN1:    LDW (X),Y
      0006DC 81               [ 4] 1439         RET
                                   1440 
                                   1441 ;       -       ( n1 n2 -- n1-n2 )
                                   1442 ;       Subtraction.
      0006DD 06 B8                 1443         .word      LINK
                           0006DF  1444 LINK = . 
      0006DF 01                    1445         .byte      1
      0006E0 2D                    1446         .ascii     "-"
      0006E1                       1447 SUBB:
      0006E1 90 93            [ 1] 1448         LDW Y,X
      0006E3 90 FE            [ 2] 1449         LDW Y,(Y)
      0006E5 90 BF 24         [ 2] 1450         LDW YTEMP,Y
      0006E8 1C 00 02         [ 2] 1451         ADDW X,#2
      0006EB 90 93            [ 1] 1452         LDW Y,X
      0006ED 90 FE            [ 2] 1453         LDW Y,(Y)
      0006EF 72 B2 00 24      [ 2] 1454         SUBW Y,YTEMP
      0006F3 FF               [ 2] 1455         LDW (X),Y
      0006F4 81               [ 4] 1456         RET
                                   1457 
                                   1458 ;       ABS     ( n -- n )
                                   1459 ;       Return  absolute value of n.
      0006F5 06 DF                 1460         .word      LINK
                           0006F7  1461 LINK = . 
      0006F7 03                    1462         .byte      3
      0006F8 41 42 53              1463         .ascii     "ABS"
      0006FB                       1464 ABSS:
      0006FB 90 93            [ 1] 1465         LDW Y,X
      0006FD 90 FE            [ 2] 1466 	LDW Y,(Y)
      0006FF 2A 03            [ 1] 1467         JRPL     AB1     ;negate:
      000701 90 50            [ 2] 1468         NEGW     Y     ;else negate hi byte
      000703 FF               [ 2] 1469         LDW (X),Y
      000704 81               [ 4] 1470 AB1:    RET
                                   1471 
                                   1472 ;       =       ( w w -- t )
                                   1473 ;       Return true if top two are =al.
      000705 06 F7                 1474         .word      LINK
                           000707  1475 LINK = . 
      000707 01                    1476         .byte      1
      000708 3D                    1477         .ascii     "="
      000709                       1478 EQUAL:
      000709 A6 FF            [ 1] 1479         LD A,#0xFF  ;true
      00070B 90 93            [ 1] 1480         LDW Y,X    ;D = n2
      00070D 90 FE            [ 2] 1481         LDW Y,(Y)
      00070F 90 BF 24         [ 2] 1482         LDW YTEMP,Y
      000712 1C 00 02         [ 2] 1483         ADDW X,#2
      000715 90 93            [ 1] 1484         LDW Y,X
      000717 90 FE            [ 2] 1485         LDW Y,(Y)
      000719 90 B3 24         [ 2] 1486         CPW Y,YTEMP     ;if n2 <> n1
      00071C 27 01            [ 1] 1487         JREQ     EQ1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      00071E 4F               [ 1] 1488         CLR A
      00071F F7               [ 1] 1489 EQ1:    LD (X),A
      000720 E7 01            [ 1] 1490         LD (1,X),A
      000722 81               [ 4] 1491 	RET     
                                   1492 
                                   1493 ;       U<      ( u u -- t )
                                   1494 ;       Unsigned compare of top two items.
      000723 07 07                 1495         .word      LINK
                           000725  1496 LINK = . 
      000725 02                    1497         .byte      2
      000726 55 3C                 1498         .ascii     "U<"
      000728                       1499 ULESS:
      000728 A6 FF            [ 1] 1500         LD A,#0xFF  ;true
      00072A 90 93            [ 1] 1501         LDW Y,X    ;D = n2
      00072C 90 FE            [ 2] 1502         LDW Y,(Y)
      00072E 90 BF 24         [ 2] 1503         LDW YTEMP,Y
      000731 1C 00 02         [ 2] 1504         ADDW X,#2
      000734 90 93            [ 1] 1505         LDW Y,X
      000736 90 FE            [ 2] 1506         LDW Y,(Y)
      000738 90 B3 24         [ 2] 1507         CPW Y,YTEMP     ;if n2 <> n1
      00073B 25 01            [ 1] 1508         JRULT     ULES1
      00073D 4F               [ 1] 1509         CLR A
      00073E F7               [ 1] 1510 ULES1:  LD (X),A
      00073F E7 01            [ 1] 1511         LD (1,X),A
      000741 81               [ 4] 1512 	RET     
                                   1513 
                                   1514 ;       <       ( n1 n2 -- t )
                                   1515 ;       Signed compare of top two items.
      000742 07 25                 1516         .word      LINK
                           000744  1517 LINK = . 
      000744 01                    1518         .byte      1
      000745 3C                    1519         .ascii     "<"
      000746                       1520 LESS:
      000746 A6 FF            [ 1] 1521         LD A,#0xFF  ;true
      000748 90 93            [ 1] 1522         LDW Y,X    ;D = n2
      00074A 90 FE            [ 2] 1523         LDW Y,(Y)
      00074C 90 BF 24         [ 2] 1524         LDW YTEMP,Y
      00074F 1C 00 02         [ 2] 1525         ADDW X,#2
      000752 90 93            [ 1] 1526         LDW Y,X
      000754 90 FE            [ 2] 1527         LDW Y,(Y)
      000756 90 B3 24         [ 2] 1528         CPW Y,YTEMP     ;if n2 <> n1
      000759 2F 01            [ 1] 1529         JRSLT     LT1
      00075B 4F               [ 1] 1530         CLR A
      00075C F7               [ 1] 1531 LT1:    LD (X),A
      00075D E7 01            [ 1] 1532         LD (1,X),A
      00075F 81               [ 4] 1533 	RET     
                                   1534 
                                   1535 ;       MAX     ( n n -- n )
                                   1536 ;       Return greater of two top items.
      000760 07 44                 1537         .word      LINK
                           000762  1538 LINK = . 
      000762 03                    1539         .byte      3
      000763 4D 41 58              1540         .ascii     "MAX"
      000766                       1541 MAX:
      000766 90 93            [ 1] 1542         LDW Y,X    ;D = n2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      000768 90 EE 02         [ 2] 1543         LDW Y,(2,Y)
      00076B 90 BF 24         [ 2] 1544         LDW YTEMP,Y
      00076E 90 93            [ 1] 1545         LDW Y,X
      000770 90 FE            [ 2] 1546         LDW Y,(Y)
      000772 90 B3 24         [ 2] 1547         CPW Y,YTEMP     ;if n2 <> n1
      000775 2F 02            [ 1] 1548         JRSLT     MAX1
      000777 EF 02            [ 2] 1549         LDW (2,X),Y
      000779 1C 00 02         [ 2] 1550 MAX1:   ADDW X,#2
      00077C 81               [ 4] 1551 	RET     
                                   1552 
                                   1553 ;       MIN     ( n n -- n )
                                   1554 ;       Return smaller of top two items.
      00077D 07 62                 1555         .word      LINK
                           00077F  1556 LINK = . 
      00077F 03                    1557         .byte      3
      000780 4D 49 4E              1558         .ascii     "MIN"
      000783                       1559 MIN:
      000783 90 93            [ 1] 1560         LDW Y,X    ;D = n2
      000785 90 EE 02         [ 2] 1561         LDW Y,(2,Y)
      000788 90 BF 24         [ 2] 1562         LDW YTEMP,Y
      00078B 90 93            [ 1] 1563         LDW Y,X
      00078D 90 FE            [ 2] 1564         LDW Y,(Y)
      00078F 90 B3 24         [ 2] 1565         CPW Y,YTEMP     ;if n2 <> n1
      000792 2C 02            [ 1] 1566         JRSGT     MIN1
      000794 EF 02            [ 2] 1567         LDW (2,X),Y
      000796 1C 00 02         [ 2] 1568 MIN1:	ADDW X,#2
      000799 81               [ 4] 1569 	RET     
                                   1570 
                                   1571 ;       WITHIN  ( u ul uh -- t )
                                   1572 ;       Return true if u is within
                                   1573 ;       range of ul and uh. ( ul <= u < uh )
      00079A 07 7F                 1574         .word      LINK
                           00079C  1575 LINK = . 
      00079C 06                    1576         .byte      6
      00079D 57 49 54 48 49 4E     1577         .ascii     "WITHIN"
      0007A3                       1578 WITHI:
      0007A3 CD 04 B2         [ 4] 1579         CALL     OVER
      0007A6 CD 06 E1         [ 4] 1580         CALL     SUBB
      0007A9 CD 04 51         [ 4] 1581         CALL     TOR
      0007AC CD 06 E1         [ 4] 1582         CALL     SUBB
      0007AF CD 04 32         [ 4] 1583         CALL     RFROM
      0007B2 CC 07 28         [ 2] 1584         JP     ULESS
                                   1585 
                                   1586 ;; Divide
                                   1587 
                                   1588 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1589 ;       Unsigned divide of a double by a
                                   1590 ;       single. Return mod and quotient.
      0007B5 07 9C                 1591         .word      LINK
                           0007B7  1592 LINK = . 
      0007B7 06                    1593         .byte      6
      0007B8 55 4D 2F 4D 4F 44     1594         .ascii     "UM/MOD"
      0007BE                       1595 UMMOD:
      0007BE BF 22            [ 2] 1596 	LDW XTEMP,X	; save stack pointer
      0007C0 FE               [ 2] 1597 	LDW X,(X)	; un
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      0007C1 BF 24            [ 2] 1598 	LDW YTEMP,X     ; save un
      0007C3 90 BE 22         [ 2] 1599 	LDW Y,XTEMP	; stack pointer
      0007C6 90 EE 04         [ 2] 1600 	LDW Y,(4,Y)     ; Y=udl
      0007C9 BE 22            [ 2] 1601 	LDW X,XTEMP
      0007CB EE 02            [ 2] 1602 	LDW X,(2,X)	; X=udh
      0007CD B3 24            [ 2] 1603 	CPW X,YTEMP
      0007CF 23 0F            [ 2] 1604 	JRULE MMSM1
      0007D1 BE 22            [ 2] 1605 	LDW X,XTEMP
      0007D3 1C 00 02         [ 2] 1606 	ADDW X,#2	; pop off 1 level
      0007D6 90 AE FF FF      [ 2] 1607 	LDW Y,#0xFFFF
      0007DA FF               [ 2] 1608 	LDW (X),Y
      0007DB 90 5F            [ 1] 1609 	CLRW Y
      0007DD EF 02            [ 2] 1610 	LDW (2,X),Y
      0007DF 81               [ 4] 1611 	RET
      0007E0                       1612 MMSM1:
                           000001  1613 .if  PICATOUT_MOD 
                                   1614 ; take advantage of divw x,y when udh==0
      0007E0 5D               [ 2] 1615         tnzw x  ; is udh==0?
      0007E1 26 11            [ 1] 1616         jrne MMSM2 
      0007E3 93               [ 1] 1617         ldw x,y    ;udl 
      0007E4 90 BE 24         [ 2] 1618         ldw y,YTEMP ; divisor 
      0007E7 65               [ 2] 1619         divw x,y 
      0007E8 89               [ 2] 1620         pushw x     ; quotient 
      0007E9 BE 22            [ 2] 1621         ldw x,XTEMP 
      0007EB 1C 00 02         [ 2] 1622         addw x,#CELLL 
      0007EE EF 02            [ 2] 1623         ldw (2,x),y  ; ur
      0007F0 90 85            [ 2] 1624         popw y 
      0007F2 FF               [ 2] 1625         ldw (x),y ; uq 
      0007F3 81               [ 4] 1626         ret 
      0007F4                       1627 MMSM2:        
                                   1628 .endif 
      0007F4 A6 11            [ 1] 1629 	LD A,#17	; loop count
      0007F6                       1630 MMSM3:
      0007F6 B3 24            [ 2] 1631 	CPW X,YTEMP	; compare udh to un
      0007F8 25 04            [ 1] 1632 	JRULT MMSM4	; can't subtract
      0007FA 72 B0 00 24      [ 2] 1633 	SUBW X,YTEMP	; can subtract
      0007FE                       1634 MMSM4:
      0007FE 8C               [ 1] 1635 	CCF	; quotient bit
      0007FF 90 59            [ 2] 1636 	RLCW Y	; rotate into quotient
      000801 59               [ 2] 1637 	RLCW X	; rotate into remainder
      000802 4A               [ 1] 1638 	DEC A	; repeat
      000803 22 F1            [ 1] 1639 	JRUGT MMSM3
      000805 57               [ 2] 1640 	SRAW X
      000806 BF 24            [ 2] 1641 	LDW YTEMP,X	; done, save remainder
      000808 BE 22            [ 2] 1642 	LDW X,XTEMP
      00080A 1C 00 02         [ 2] 1643 	ADDW X,#2	; drop
      00080D FF               [ 2] 1644 	LDW (X),Y
      00080E 90 BE 24         [ 2] 1645 	LDW Y,YTEMP	; save quotient
      000811 EF 02            [ 2] 1646 	LDW (2,X),Y
      000813 81               [ 4] 1647 	RET
                                   1648 	
                                   1649 ;       M/MOD   ( d n -- r q )
                                   1650 ;       Signed floored divide of double by
                                   1651 ;       single. Return mod and quotient.
      000814 07 B7                 1652         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                           000816  1653 LINK = . 
      000816 05                    1654         .byte      5
      000817 4D 2F 4D 4F 44        1655         .ascii     "M/MOD"
      00081C                       1656 MSMOD:  
      00081C CD 04 88         [ 4] 1657         CALL	DUPP
      00081F CD 04 C1         [ 4] 1658         CALL	ZLESS
      000822 CD 04 88         [ 4] 1659         CALL	DUPP
      000825 CD 04 51         [ 4] 1660         CALL	TOR
      000828 CD 03 8C         [ 4] 1661         CALL	QBRAN
      00082B 08 39                 1662         .word	MMOD1
      00082D CD 06 AE         [ 4] 1663         CALL	NEGAT
      000830 CD 04 51         [ 4] 1664         CALL	TOR
      000833 CD 06 C0         [ 4] 1665         CALL	DNEGA
      000836 CD 04 32         [ 4] 1666         CALL	RFROM
      000839 CD 04 51         [ 4] 1667 MMOD1:	CALL	TOR
      00083C CD 04 88         [ 4] 1668         CALL	DUPP
      00083F CD 04 C1         [ 4] 1669         CALL	ZLESS
      000842 CD 03 8C         [ 4] 1670         CALL	QBRAN
      000845 08 4D                 1671         .word	MMOD2
      000847 CD 04 45         [ 4] 1672         CALL	RAT
      00084A CD 06 83         [ 4] 1673         CALL	PLUS
      00084D CD 04 32         [ 4] 1674 MMOD2:	CALL	RFROM
      000850 CD 07 BE         [ 4] 1675         CALL	UMMOD
      000853 CD 04 32         [ 4] 1676         CALL	RFROM
      000856 CD 03 8C         [ 4] 1677         CALL	QBRAN
      000859 08 64                 1678         .word	MMOD3
      00085B CD 04 98         [ 4] 1679         CALL	SWAPP
      00085E CD 06 AE         [ 4] 1680         CALL	NEGAT
      000861 CD 04 98         [ 4] 1681         CALL	SWAPP
      000864 81               [ 4] 1682 MMOD3:	RET
                                   1683 
                                   1684 ;       /MOD    ( n n -- r q )
                                   1685 ;       Signed divide. Return mod and quotient.
      000865 08 16                 1686         .word      LINK
                           000867  1687 LINK = . 
      000867 04                    1688         .byte      4
      000868 2F 4D 4F 44           1689         .ascii     "/MOD"
      00086C                       1690 SLMOD:
      00086C CD 04 B2         [ 4] 1691         CALL	OVER
      00086F CD 04 C1         [ 4] 1692         CALL	ZLESS
      000872 CD 04 98         [ 4] 1693         CALL	SWAPP
      000875 CC 08 1C         [ 2] 1694         JP	MSMOD
                                   1695 
                                   1696 ;       MOD     ( n n -- r )
                                   1697 ;       Signed divide. Return mod only.
      000878 08 67                 1698         .word      LINK
                           00087A  1699 LINK = . 
      00087A 03                    1700         .byte      3
      00087B 4D 4F 44              1701         .ascii     "MOD"
      00087E                       1702 MODD:
      00087E CD 08 6C         [ 4] 1703 	CALL	SLMOD
      000881 CC 04 7E         [ 2] 1704 	JP	DROP
                                   1705 
                                   1706 ;       /       ( n n -- q )
                                   1707 ;       Signed divide. Return quotient only.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      000884 08 7A                 1708         .word      LINK
                           000886  1709 LINK = . 
      000886 01                    1710         .byte      1
      000887 2F                    1711         .ascii     "/"
      000888                       1712 SLASH:
      000888 CD 08 6C         [ 4] 1713         CALL	SLMOD
      00088B CD 04 98         [ 4] 1714         CALL	SWAPP
      00088E CC 04 7E         [ 2] 1715         JP	DROP
                                   1716 
                                   1717 ;; Multiply
                                   1718 
                                   1719 ;       UM*     ( u u -- ud )
                                   1720 ;       Unsigned multiply. Return double product.
      000891 08 86                 1721         .word      LINK
                           000893  1722 LINK = . 
      000893 03                    1723         .byte      3
      000894 55 4D 2A              1724         .ascii     "UM*"
      000897                       1725 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
                           000001  1726 .if PICATOUT_MOD 
                                   1727 ; take advantage of SP addressing modes
                                   1728 ; these PRODx in RAM are not required
                                   1729 ; the product is kept on stack as local variable 
                                   1730         ;; bytes offset on data stack 
                           000002  1731         da=2 
                           000003  1732         db=3 
                           000000  1733         dc=0 
                           000001  1734         dd=1 
                                   1735         ;; product bytes offset on return stack 
                           000001  1736         UD1=1  ; ud bits 31..24
                           000002  1737         UD2=2  ; ud bits 23..16
                           000003  1738         UD3=3  ; ud bits 15..8 
                           000004  1739         UD4=4  ; ud bits 7..0 
                                   1740         ;; local variable for product set to zero   
      000897 90 5F            [ 1] 1741         clrw y 
      000899 90 89            [ 2] 1742         pushw y  ; bits 15..0
      00089B 90 89            [ 2] 1743         pushw y  ; bits 31..16 
      00089D E6 03            [ 1] 1744         ld a,(db,x) ; b 
      00089F 90 97            [ 1] 1745         ld yl,a 
      0008A1 E6 01            [ 1] 1746         ld a,(dd,x)   ; d
      0008A3 90 42            [ 4] 1747         mul y,a    ; b*d  
      0008A5 17 03            [ 2] 1748         ldw (UD3,sp),y ; lowest weight product 
      0008A7 E6 03            [ 1] 1749         ld a,(db,x)
      0008A9 90 97            [ 1] 1750         ld yl,a 
      0008AB E6 00            [ 1] 1751         ld a,(dc,x)
      0008AD 90 42            [ 4] 1752         mul y,a  ; b*c 
                                   1753         ;;; do the partial sum 
      0008AF 72 F9 02         [ 2] 1754         addw y,(UD2,sp)
      0008B2 4F               [ 1] 1755         clr a 
      0008B3 49               [ 1] 1756         rlc a
      0008B4 6B 01            [ 1] 1757         ld (UD1,sp),a 
      0008B6 17 02            [ 2] 1758         ldw (UD2,sp),y 
      0008B8 E6 02            [ 1] 1759         ld a,(da,x)
      0008BA 90 97            [ 1] 1760         ld yl,a 
      0008BC E6 01            [ 1] 1761         ld a,(dd,x)
      0008BE 90 42            [ 4] 1762         mul y,a   ; a*d 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                                   1763         ;; do partial sum 
      0008C0 72 F9 02         [ 2] 1764         addw y,(UD2,sp)
      0008C3 4F               [ 1] 1765         clr a 
      0008C4 19 01            [ 1] 1766         adc a,(UD1,sp)
      0008C6 6B 01            [ 1] 1767         ld (UD1,sp),a  
      0008C8 17 02            [ 2] 1768         ldw (UD2,sp),y 
      0008CA E6 02            [ 1] 1769         ld a,(da,x)
      0008CC 90 97            [ 1] 1770         ld yl,a 
      0008CE E6 00            [ 1] 1771         ld a,(dc,x)
      0008D0 90 42            [ 4] 1772         mul y,a  ;  a*c highest weight product 
                                   1773         ;;; do partial sum 
      0008D2 72 F9 01         [ 2] 1774         addw y,(UD1,sp)
      0008D5 FF               [ 2] 1775         ldw (x),y  ; udh 
      0008D6 16 03            [ 2] 1776         ldw y,(UD3,sp)
      0008D8 EF 02            [ 2] 1777         ldw (2,x),y  ; udl  
      0008DA 5B 04            [ 2] 1778         addw sp,#4 ; drop local variable 
      0008DC 81               [ 4] 1779         ret  
                           000000  1780 .else
                                   1781 	LD A,(2,X)	; b
                                   1782 	LD YL,A
                                   1783 	LD A,(X)	; d
                                   1784 	MUL Y,A
                                   1785 	LDW PROD1,Y
                                   1786 	LD A,(3,X)	; a
                                   1787 	LD YL,A
                                   1788 	LD A,(X)	; d
                                   1789 	MUL Y,A
                                   1790 	LDW PROD2,Y
                                   1791 	LD A,(2,X)	; b
                                   1792 	LD YL,A
                                   1793 	LD A,(1,X)	; c
                                   1794 	MUL Y,A
                                   1795 	LDW PROD3,Y
                                   1796 	LD A,(3,X)	; a
                                   1797 	LD YL,A
                                   1798 	LD A,(1,X)	; c
                                   1799 	MUL Y,A	; least signifiant product
                                   1800 	CLR A
                                   1801 	RRWA Y
                                   1802 	LD (3,X),A	; store least significant byte
                                   1803 	ADDW Y,PROD3
                                   1804 	CLR A
                                   1805 	ADC A,#0	; save carry
                                   1806 	LD CARRY,A
                                   1807 	ADDW Y,PROD2
                                   1808 	LD A,CARRY
                                   1809 	ADC A,#0	; add 2nd carry
                                   1810 	LD CARRY,A
                                   1811 	CLR A
                                   1812 	RRWA Y
                                   1813 	LD (2,X),A	; 2nd product byte
                                   1814 	ADDW Y,PROD1
                                   1815 	RRWA Y
                                   1816 	LD (1,X),A	; 3rd product byte
                                   1817 	RRWA Y  	; 4th product byte now in A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                   1818 	ADC A,CARRY	; fill in carry bits
                                   1819 	LD (X),A
                                   1820 	RET
                                   1821 .endif 
                                   1822 
                                   1823 
                                   1824 ;       *       ( n n -- n )
                                   1825 ;       Signed multiply. Return single product.
      0008DD 08 93                 1826         .word      LINK
                           0008DF  1827 LINK = . 
      0008DF 01                    1828         .byte      1
      0008E0 2A                    1829         .ascii     "*"
      0008E1                       1830 STAR:
      0008E1 CD 08 97         [ 4] 1831 	CALL	UMSTA
      0008E4 CC 04 7E         [ 2] 1832 	JP	DROP
                                   1833 
                                   1834 ;       M*      ( n n -- d )
                                   1835 ;       Signed multiply. Return double product.
      0008E7 08 DF                 1836         .word      LINK
                           0008E9  1837 LINK = . 
      0008E9 02                    1838         .byte      2
      0008EA 4D 2A                 1839         .ascii     "M*"
      0008EC                       1840 MSTAR:      
      0008EC CD 06 6E         [ 4] 1841         CALL	DDUP
      0008EF CD 04 FD         [ 4] 1842         CALL	XORR
      0008F2 CD 04 C1         [ 4] 1843         CALL	ZLESS
      0008F5 CD 04 51         [ 4] 1844         CALL	TOR
      0008F8 CD 06 FB         [ 4] 1845         CALL	ABSS
      0008FB CD 04 98         [ 4] 1846         CALL	SWAPP
      0008FE CD 06 FB         [ 4] 1847         CALL	ABSS
      000901 CD 08 97         [ 4] 1848         CALL	UMSTA
      000904 CD 04 32         [ 4] 1849         CALL	RFROM
      000907 CD 03 8C         [ 4] 1850         CALL	QBRAN
      00090A 09 0F                 1851         .word	MSTA1
      00090C CD 06 C0         [ 4] 1852         CALL	DNEGA
      00090F 81               [ 4] 1853 MSTA1:	RET
                                   1854 
                                   1855 ;       . /MOD   ( n1 n2 n3 -- r q )
                                   1856 ;       Multiply n1 and n2, then divide
                                   1857 ;       by n3. Return mod and quotient.
      000910 08 E9                 1858         .word      LINK
                           000912  1859 LINK = . 
      000912 05                    1860         .byte      5
      000913 2A 2F 4D 4F 44        1861         .ascii     "*/MOD"
      000918                       1862 SSMOD:
      000918 CD 04 51         [ 4] 1863         CALL     TOR
      00091B CD 08 EC         [ 4] 1864         CALL     MSTAR
      00091E CD 04 32         [ 4] 1865         CALL     RFROM
      000921 CC 08 1C         [ 2] 1866         JP     MSMOD
                                   1867 
                                   1868 ;       */      ( n1 n2 n3 -- q )
                                   1869 ;       Multiply n1 by n2, then divide
                                   1870 ;       by n3. Return quotient only.
      000924 09 12                 1871         .word      LINK
                           000926  1872 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000926 02                    1873         .byte      2
      000927 2A 2F                 1874         .ascii     "*/"
      000929                       1875 STASL:
      000929 CD 09 18         [ 4] 1876         CALL	SSMOD
      00092C CD 04 98         [ 4] 1877         CALL	SWAPP
      00092F CC 04 7E         [ 2] 1878         JP	DROP
                                   1879 
                                   1880 ;; Miscellaneous
                                   1881 
                                   1882 ;       CELL+   ( a -- a )
                                   1883 ;       Add cell size in byte to address.
      000932 09 26                 1884         .word      LINK
                           000934  1885 LINK = . 
      000934 02                    1886         .byte       2
      000935 32 2B                 1887         .ascii     "2+"
      000937                       1888 CELLP:
      000937 90 93            [ 1] 1889         LDW Y,X
      000939 90 FE            [ 2] 1890 	LDW Y,(Y)
      00093B 72 A9 00 02      [ 2] 1891         ADDW Y,#CELLL 
      00093F FF               [ 2] 1892         LDW (X),Y
      000940 81               [ 4] 1893         RET
                                   1894 
                                   1895 ;       CELL-   ( a -- a )
                                   1896 ;       Subtract 2 from address.
      000941 09 34                 1897         .word      LINK
                           000943  1898 LINK = . 
      000943 02                    1899         .byte       2
      000944 32 2D                 1900         .ascii     "2-"
      000946                       1901 CELLM:
      000946 90 93            [ 1] 1902         LDW Y,X
      000948 90 FE            [ 2] 1903 	LDW Y,(Y)
      00094A 72 A2 00 02      [ 2] 1904         SUBW Y,#CELLL
      00094E FF               [ 2] 1905         LDW (X),Y
      00094F 81               [ 4] 1906         RET
                                   1907 
                                   1908 ;       CELLS   ( n -- n )
                                   1909 ;       Multiply tos by 2.
      000950 09 43                 1910         .word      LINK
                           000952  1911 LINK = . 
      000952 02                    1912         .byte       2
      000953 32 2A                 1913         .ascii     "2*"
      000955                       1914 CELLS:
      000955 90 93            [ 1] 1915         LDW Y,X
      000957 90 FE            [ 2] 1916 	LDW Y,(Y)
      000959 90 58            [ 2] 1917         SLAW Y
      00095B FF               [ 2] 1918         LDW (X),Y
      00095C 81               [ 4] 1919         RET
                                   1920 
                                   1921 ;       1+      ( a -- a )
                                   1922 ;       Add cell size in byte to address.
      00095D 09 52                 1923         .word      LINK
                           00095F  1924 LINK = . 
      00095F 02                    1925         .byte      2
      000960 31 2B                 1926         .ascii     "1+"
      000962                       1927 ONEP:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000962 90 93            [ 1] 1928         LDW Y,X
      000964 90 FE            [ 2] 1929 	LDW Y,(Y)
      000966 90 5C            [ 2] 1930         INCW Y
      000968 FF               [ 2] 1931         LDW (X),Y
      000969 81               [ 4] 1932         RET
                                   1933 
                                   1934 ;       1-      ( a -- a )
                                   1935 ;       Subtract 2 from address.
      00096A 09 5F                 1936         .word      LINK
                           00096C  1937 LINK = . 
      00096C 02                    1938         .byte      2
      00096D 31 2D                 1939         .ascii     "1-"
      00096F                       1940 ONEM:
      00096F 90 93            [ 1] 1941         LDW Y,X
      000971 90 FE            [ 2] 1942 	LDW Y,(Y)
      000973 90 5A            [ 2] 1943         DECW Y
      000975 FF               [ 2] 1944         LDW (X),Y
      000976 81               [ 4] 1945         RET
                                   1946 
                                   1947 ;  shift left n times 
                                   1948 ; LSHIFT ( n1 n2 -- n1<<n2 )
      000977 09 6C                 1949         .word LINK 
                           000979  1950         LINK=.
      000979 06                    1951         .byte 6 
      00097A 4C 53 48 49 46 54     1952         .ascii "LSHIFT"
      000980                       1953 LSHIFT:
      000980 E6 01            [ 1] 1954         ld a,(1,x)
      000982 1C 00 02         [ 2] 1955         addw x,#CELLL 
      000985 90 93            [ 1] 1956         ldw y,x 
      000987 90 FE            [ 2] 1957         ldw y,(y)
      000989                       1958 LSHIFT1:
      000989 4D               [ 1] 1959         tnz a 
      00098A 27 05            [ 1] 1960         jreq LSHIFT4 
      00098C 90 58            [ 2] 1961         sllw y 
      00098E 4A               [ 1] 1962         dec a 
      00098F 20 F8            [ 2] 1963         jra LSHIFT1 
      000991                       1964 LSHIFT4:
      000991 FF               [ 2] 1965         ldw (x),y 
      000992 81               [ 4] 1966         ret 
                                   1967 
                                   1968 ; shift right n times                 
                                   1969 ; RSHIFT (n1 n2 -- n1>>n2 )
      000993 09 79                 1970         .word LINK 
                           000995  1971         LINK=.
      000995 06                    1972         .byte 6
      000996 52 53 48 49 46 54     1973         .ascii "RSHIFT"
      00099C                       1974 RSHIFT:
      00099C E6 01            [ 1] 1975         ld a,(1,x)
      00099E 1C 00 02         [ 2] 1976         addw x,#CELLL 
      0009A1 90 93            [ 1] 1977         ldw y,x 
      0009A3 90 FE            [ 2] 1978         ldw y,(y)
      0009A5                       1979 RSHIFT1:
      0009A5 4D               [ 1] 1980         tnz a 
      0009A6 27 05            [ 1] 1981         jreq RSHIFT4 
      0009A8 90 54            [ 2] 1982         srlw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      0009AA 4A               [ 1] 1983         dec a 
      0009AB 20 F8            [ 2] 1984         jra RSHIFT1 
      0009AD                       1985 RSHIFT4:
      0009AD FF               [ 2] 1986         ldw (x),y 
      0009AE 81               [ 4] 1987         ret 
                                   1988 
                                   1989 
                                   1990 ;       2/      ( n -- n )
                                   1991 ;       divide  tos by 2.
      0009AF 09 95                 1992         .word      LINK
                           0009B1  1993 LINK = . 
      0009B1 02                    1994         .byte      2
      0009B2 32 2F                 1995         .ascii     "2/"
      0009B4                       1996 TWOSL:
      0009B4 90 93            [ 1] 1997         LDW Y,X
      0009B6 90 FE            [ 2] 1998 	LDW Y,(Y)
      0009B8 90 57            [ 2] 1999         SRAW Y
      0009BA FF               [ 2] 2000         LDW (X),Y
      0009BB 81               [ 4] 2001         RET
                                   2002 
                                   2003 ;       BL      ( -- 32 )
                                   2004 ;       Return 32,  blank character.
      0009BC 09 B1                 2005         .word      LINK
                           0009BE  2006 LINK = . 
      0009BE 02                    2007         .byte      2
      0009BF 42 4C                 2008         .ascii     "BL"
      0009C1                       2009 BLANK:
      0009C1 1D 00 02         [ 2] 2010         SUBW X,#2
      0009C4 90 AE 00 20      [ 2] 2011 	LDW Y,#32
      0009C8 FF               [ 2] 2012         LDW (X),Y
      0009C9 81               [ 4] 2013         RET
                                   2014 
                                   2015 ;         0     ( -- 0)
                                   2016 ;         Return 0.
      0009CA 09 BE                 2017         .word      LINK
                           0009CC  2018 LINK = . 
      0009CC 01                    2019         .byte       1
      0009CD 30                    2020         .ascii     "0"
      0009CE                       2021 ZERO:
      0009CE 1D 00 02         [ 2] 2022         SUBW X,#2
      0009D1 90 5F            [ 1] 2023 	CLRW Y
      0009D3 FF               [ 2] 2024         LDW (X),Y
      0009D4 81               [ 4] 2025         RET
                                   2026 
                                   2027 ;         1     ( -- 1)
                                   2028 ;         Return 1.
      0009D5 09 CC                 2029         .word      LINK
                           0009D7  2030 LINK = . 
      0009D7 01                    2031         .byte       1
      0009D8 31                    2032         .ascii     "1"
      0009D9                       2033 ONE:
      0009D9 1D 00 02         [ 2] 2034         SUBW X,#2
      0009DC 90 AE 00 01      [ 2] 2035 	LDW Y,#1
      0009E0 FF               [ 2] 2036         LDW (X),Y
      0009E1 81               [ 4] 2037         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                                   2038 
                                   2039 ;         -1    ( -- -1)
                                   2040 ;         Return 32,  blank character.
      0009E2 09 D7                 2041         .word      LINK
                           0009E4  2042 LINK = . 
      0009E4 02                    2043         .byte       2
      0009E5 2D 31                 2044         .ascii     "-1"
      0009E7                       2045 MONE:
      0009E7 1D 00 02         [ 2] 2046         SUBW X,#2
      0009EA 90 AE FF FF      [ 2] 2047 	LDW Y,#0xFFFF
      0009EE FF               [ 2] 2048         LDW (X),Y
      0009EF 81               [ 4] 2049         RET
                                   2050 
                                   2051 ;       >CHAR   ( c -- c )
                                   2052 ;       Filter non-printing characters.
      0009F0 09 E4                 2053         .word      LINK
                           0009F2  2054 LINK = . 
      0009F2 05                    2055         .byte      5
      0009F3 3E 43 48 41 52        2056         .ascii     ">CHAR"
      0009F8                       2057 TCHAR:
                           000001  2058 .if CONVERT_TO_CODE
      0009F8 E6 01            [ 1] 2059         ld a,(1,x)
      0009FA A1 20            [ 1] 2060         cp a,#32  
      0009FC 2B 05            [ 1] 2061         jrmi 1$ 
      0009FE A1 7F            [ 1] 2062         cp a,#127 
      000A00 2A 01            [ 1] 2063         jrpl 1$ 
      000A02 81               [ 4] 2064         ret 
      000A03 A6 5F            [ 1] 2065 1$:     ld a,#'_ 
      000A05 E7 01            [ 1] 2066         ld (1,x),a 
      000A07 81               [ 4] 2067         ret 
                           000000  2068 .else
                                   2069         CALL     DOLIT
                                   2070         .word       0x7F
                                   2071         CALL     ANDD
                                   2072         CALL     DUPP    ;mask msb
                                   2073         CALL     DOLIT
                                   2074         .word      127
                                   2075         CALL     BLANK
                                   2076         CALL     WITHI   ;check for printable
                                   2077         CALL     QBRAN
                                   2078         .word    TCHA1
                                   2079         CALL     DROP
                                   2080         CALL     DOLIT
                                   2081         .word     0x5F		; "_"     ;replace non-printables
                                   2082 .endif 
      000A08 81               [ 4] 2083 TCHA1:  RET
                                   2084 
                                   2085 ;       DEPTH   ( -- n )
                                   2086 ;       Return  depth of  data stack.
      000A09 09 F2                 2087         .word      LINK
                           000A0B  2088 LINK = . 
      000A0B 05                    2089         .byte      5
      000A0C 44 45 50 54 48        2090         .ascii     "DEPTH"
      000A11                       2091 DEPTH: 
      000A11 90 BE 2A         [ 2] 2092         LDW Y,SP0    ;save data stack ptr
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000A14 BF 22            [ 2] 2093 	LDW XTEMP,X
      000A16 72 B2 00 22      [ 2] 2094         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000A1A 90 57            [ 2] 2095         SRAW Y    ;Y = #stack items
                           000001  2096 .if PICATOUT_MOD
                                   2097 ; why ? 
                                   2098 ;      	DECW Y
                                   2099 .endif 
      000A1C 1D 00 02         [ 2] 2100 	SUBW X,#2
      000A1F FF               [ 2] 2101         LDW (X),Y     ; if neg, underflow
      000A20 81               [ 4] 2102         RET
                                   2103 
                                   2104 ;       PICK    ( ... +n -- ... w )
                                   2105 ;       Copy  nth stack item to tos.
      000A21 0A 0B                 2106         .word      LINK
                           000A23  2107 LINK = . 
      000A23 04                    2108         .byte      4
      000A24 50 49 43 4B           2109         .ascii     "PICK"
      000A28                       2110 PICK:
      000A28 90 93            [ 1] 2111         LDW Y,X   ;D = n1
      000A2A 90 FE            [ 2] 2112         LDW Y,(Y)
                           000001  2113 .if PICATOUT_MOD
                                   2114 ; modified for standard compliance          
                                   2115 ; 0 PICK must be equivalent to DUP 
      000A2C 90 5C            [ 2] 2116         INCW Y 
                                   2117 .endif         
      000A2E 90 58            [ 2] 2118         SLAW Y
      000A30 BF 22            [ 2] 2119         LDW XTEMP,X
      000A32 72 B9 00 22      [ 2] 2120         ADDW Y,XTEMP
      000A36 90 FE            [ 2] 2121         LDW Y,(Y)
      000A38 FF               [ 2] 2122         LDW (X),Y
      000A39 81               [ 4] 2123         RET
                                   2124 
                                   2125 ;; Memory access
                                   2126 
                                   2127 ;       +!      ( n a -- )
                                   2128 ;       Add n to  contents at address a.
      000A3A 0A 23                 2129         .word      LINK
                           000A3C  2130 LINK = . 
      000A3C 02                    2131         .byte      2
      000A3D 2B 21                 2132         .ascii     "+!"
      000A3F                       2133 PSTOR:
                           000001  2134 .if CONVERT_TO_CODE
      000A3F 90 93            [ 1] 2135         ldw y,x 
      000A41 90 FE            [ 2] 2136         ldw y,(y)
      000A43 90 BF 24         [ 2] 2137         ldw YTEMP,y  ; address
      000A46 90 FE            [ 2] 2138         ldw y,(y)  
      000A48 90 89            [ 2] 2139         pushw y  ; value at address 
      000A4A 90 93            [ 1] 2140         ldw y,x 
      000A4C 90 EE 02         [ 2] 2141         ldw y,(2,y) ; n 
      000A4F 72 F9 01         [ 2] 2142         addw y,(1,sp) ; n+value
      000A52 91 CF 24         [ 5] 2143         ldw [YTEMP],y ;  a!
      000A55 90 85            [ 2] 2144         popw y    ;drop local var
      000A57 1C 00 04         [ 2] 2145         addw x,#4 ; DDROP 
      000A5A 81               [ 4] 2146         ret 
                           000000  2147 .else
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                   2148         CALL	SWAPP
                                   2149         CALL	OVER
                                   2150         CALL	AT
                                   2151         CALL	PLUS
                                   2152         CALL	SWAPP
                                   2153         JP	STORE
                                   2154 .endif 
                                   2155 
                                   2156 ;       2!      ( d a -- )
                                   2157 ;       Store  double integer to address a.
      000A5B 0A 3C                 2158         .word      LINK
                           000A5D  2159 LINK = . 
      000A5D 02                    2160         .byte      2
      000A5E 32 21                 2161         .ascii     "2!"
      000A60                       2162 DSTOR:
                           000001  2163 .if CONVERT_TO_CODE
      000A60 90 93            [ 1] 2164         ldw y,x 
      000A62 90 FE            [ 2] 2165         ldw y,(y)
      000A64 90 BF 24         [ 2] 2166         ldw YTEMP,y ; address 
      000A67 1C 00 02         [ 2] 2167         addw x,#CELLL ; drop a 
      000A6A 90 93            [ 1] 2168         ldw y,x 
      000A6C 90 FE            [ 2] 2169         ldw y,(y) ; hi word 
      000A6E 89               [ 2] 2170         pushw x 
      000A6F EE 02            [ 2] 2171         ldw x,(2,x) ; lo word 
      000A71 91 CF 24         [ 5] 2172         ldw [YTEMP],y
      000A74 90 93            [ 1] 2173         ldw y,x 
      000A76 AE 00 02         [ 2] 2174         ldw x,#2 
      000A79 92 DF 24         [ 5] 2175         ldw ([YTEMP],x),y 
      000A7C 85               [ 2] 2176         popw x 
      000A7D 1C 00 04         [ 2] 2177         addw x,#4 ; DDROP 
      000A80 81               [ 4] 2178         ret 
                           000000  2179 .else
                                   2180         CALL	SWAPP
                                   2181         CALL	OVER
                                   2182         CALL	STORE
                                   2183         CALL	CELLP
                                   2184         JP	STORE
                                   2185 .endif 
                                   2186 ;       2@      ( a -- d )
                                   2187 ;       Fetch double integer from address a.
      000A81 0A 5D                 2188         .word      LINK
                           000A83  2189 LINK = . 
      000A83 02                    2190         .byte      2
      000A84 32 40                 2191         .ascii     "2@"
      000A86                       2192 DAT:
                           000001  2193 .if CONVERT_TO_CODE
      000A86 90 93            [ 1] 2194         ldw y,x 
      000A88 90 FE            [ 2] 2195         ldw y,(y) ;address 
      000A8A 90 BF 24         [ 2] 2196         ldw YTEMP,y 
      000A8D 1D 00 02         [ 2] 2197         subw x,#CELLL ; space for udh 
      000A90 91 CE 24         [ 5] 2198         ldw y,[YTEMP] ; udh 
      000A93 FF               [ 2] 2199         ldw (x),y 
      000A94 90 AE 00 02      [ 2] 2200         ldw y,#2
      000A98 91 DE 24         [ 5] 2201         ldw y,([YTEMP],y) ; udl 
      000A9B EF 02            [ 2] 2202         ldw (2,x),y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000A9D 81               [ 4] 2203         ret 
                           000000  2204 .else 
                                   2205         CALL	DUPP
                                   2206         CALL	CELLP
                                   2207         CALL	AT
                                   2208         CALL	SWAPP
                                   2209         JP	AT
                                   2210 .endif 
                                   2211 
                                   2212 ;       COUNT   ( b -- b +n )
                                   2213 ;       Return count byte of a string
                                   2214 ;       and add 1 to byte address.
      000A9E 0A 83                 2215         .word      LINK
                           000AA0  2216 LINK = . 
      000AA0 05                    2217         .byte      5
      000AA1 43 4F 55 4E 54        2218         .ascii     "COUNT"
      000AA6                       2219 COUNT:
                           000001  2220 .if CONVERT_TO_CODE
      000AA6 90 93            [ 1] 2221         ldw y,x 
      000AA8 90 FE            [ 2] 2222         ldw y,(y) ; address 
      000AAA 90 F6            [ 1] 2223         ld a,(y)  ; count 
      000AAC 90 5C            [ 2] 2224         incw y 
      000AAE FF               [ 2] 2225         ldw (x),y 
      000AAF 1D 00 02         [ 2] 2226         subw x,#CELLL 
      000AB2 E7 01            [ 1] 2227         ld (1,x),a 
      000AB4 7F               [ 1] 2228         clr (x)
      000AB5 81               [ 4] 2229         ret 
                           000000  2230 .else 
                                   2231         CALL     DUPP
                                   2232         CALL     ONEP
                                   2233         CALL     SWAPP
                                   2234         JP     CAT
                                   2235 .endif 
                                   2236 
                                   2237 ;       HERE    ( -- a )
                                   2238 ;       Return  top of  variables
      000AB6 0A A0                 2239         .word      LINK
                           000AB8  2240 LINK = . 
      000AB8 04                    2241         .byte      4
      000AB9 48 45 52 45           2242         .ascii     "HERE"
      000ABD                       2243 HERE:
                           000001  2244 .if CONVERT_TO_CODE
      000ABD 90 AE 00 16      [ 2] 2245       	ldw y,#UVP 
      000AC1 90 FE            [ 2] 2246         ldw y,(y)
      000AC3 1D 00 02         [ 2] 2247         subw x,#CELLL 
      000AC6 FF               [ 2] 2248         ldw (x),y 
      000AC7 81               [ 4] 2249         ret 
                           000000  2250 .else
                                   2251         CALL     VPP
                                   2252         JP     AT
                                   2253 .endif 
                                   2254 
                                   2255 ;       PAD     ( -- a )
                                   2256 ;       Return address of text buffer
                                   2257 ;       above  code dictionary.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000AC8 0A B8                 2258         .word      LINK
                           000ACA  2259 LINK = . 
      000ACA 03                    2260         .byte      3
      000ACB 50 41 44              2261         .ascii     "PAD"
      000ACE                       2262 PAD:
      000ACE CD 0A BD         [ 4] 2263         CALL     HERE
      000AD1 CD 03 59         [ 4] 2264         CALL     DOLIT
      000AD4 00 50                 2265         .word      80
      000AD6 CC 06 83         [ 2] 2266         JP     PLUS
                                   2267 
                                   2268 ;       TIB     ( -- a )
                                   2269 ;       Return address of terminal input buffer.
      000AD9 0A CA                 2270         .word      LINK
                           000ADB  2271 LINK = . 
      000ADB 03                    2272         .byte      3
      000ADC 54 49 42              2273         .ascii     "TIB"
      000ADF                       2274 TIB:
      000ADF CD 05 73         [ 4] 2275         CALL     NTIB
      000AE2 CD 09 37         [ 4] 2276         CALL     CELLP
      000AE5 CC 03 E1         [ 2] 2277         JP     AT
                                   2278 
                                   2279 ;       @EXECUTE        ( a -- )
                                   2280 ;       Execute vector stored in address a.
      000AE8 0A DB                 2281         .word      LINK
                           000AEA  2282 LINK = . 
      000AEA 08                    2283         .byte      8
      000AEB 40 45 58 45 43 55 54  2284         .ascii     "@EXECUTE"
             45
      000AF3                       2285 ATEXE:
      000AF3 CD 03 E1         [ 4] 2286         CALL     AT
      000AF6 CD 06 32         [ 4] 2287         CALL     QDUP    ;?address or zero
      000AF9 CD 03 8C         [ 4] 2288         CALL     QBRAN
      000AFC 0B 01                 2289         .word      EXE1
      000AFE CD 03 B3         [ 4] 2290         CALL     EXECU   ;execute if non-zero
      000B01 81               [ 4] 2291 EXE1:   RET     ;do nothing if zero
                                   2292 
                                   2293 ;       CMOVE   ( b1 b2 u -- )
                                   2294 ;       Copy u bytes from b1 to b2.
      000B02 0A EA                 2295         .word      LINK
                           000B04  2296 LINK = . 
      000B04 05                    2297         .byte      5
      000B05 43 4D 4F 56 45        2298         .ascii     "CMOVE"
      000B0A                       2299 CMOVE:
      000B0A CD 04 51         [ 4] 2300         CALL	TOR
      000B0D CD 03 A3         [ 4] 2301         CALL	BRAN
      000B10 0B 2A                 2302         .word	CMOV2
      000B12 CD 04 51         [ 4] 2303 CMOV1:	CALL	TOR
      000B15 CD 04 88         [ 4] 2304         CALL	DUPP
      000B18 CD 03 FF         [ 4] 2305         CALL	CAT
      000B1B CD 04 45         [ 4] 2306         CALL	RAT
      000B1E CD 03 EE         [ 4] 2307         CALL	CSTOR
      000B21 CD 09 62         [ 4] 2308         CALL	ONEP
      000B24 CD 04 32         [ 4] 2309         CALL	RFROM
      000B27 CD 09 62         [ 4] 2310         CALL	ONEP
      000B2A CD 03 6D         [ 4] 2311 CMOV2:	CALL	DONXT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000B2D 0B 12                 2312         .word	CMOV1
      000B2F CC 06 63         [ 2] 2313         JP	DDROP
                                   2314 
                                   2315 ;       FILL    ( b u c -- )
                                   2316 ;       Fill u bytes of character c
                                   2317 ;       to area beginning at b.
      000B32 0B 04                 2318         .word       LINK
                           000B34  2319 LINK = . 
      000B34 04                    2320         .byte       4
      000B35 46 49 4C 4C           2321         .ascii     "FILL"
      000B39                       2322 FILL:
                           000001  2323 .if CONVERT_TO_CODE
      000B39 90 93            [ 1] 2324         ldw y,x 
      000B3B 90 E6 01         [ 1] 2325         ld a,(1,y) ; c 
      000B3E 1C 00 02         [ 2] 2326         addw x,#CELLL ; drop c 
      000B41 90 93            [ 1] 2327         ldw y,x 
      000B43 90 FE            [ 2] 2328         ldw y,(y) ; count
      000B45 90 89            [ 2] 2329         pushw y 
      000B47 1C 00 02         [ 2] 2330         addw x,#CELLL ; drop u 
      000B4A 90 93            [ 1] 2331         ldw y,x 
      000B4C 1C 00 02         [ 2] 2332         addw x,#CELLL ; drop b 
      000B4F 90 FE            [ 2] 2333         ldw y,(y) ; address
      000B51 90 BF 24         [ 2] 2334         ldw YTEMP,y
      000B54 90 85            [ 2] 2335         popw y ; count 
      000B56                       2336 FILL1:  
      000B56 92 C7 24         [ 4] 2337         ld [YTEMP],a 
      000B59 3C 25            [ 1] 2338         inc YTEMP+1
      000B5B 24 02            [ 1] 2339         jrnc FILL2 
      000B5D 3C 24            [ 1] 2340         inc YTEMP
      000B5F                       2341 FILL2: 
      000B5F 90 5A            [ 2] 2342         decw y ; count 
      000B61 26 F3            [ 1] 2343         jrne FILL1  
      000B63 81               [ 4] 2344         ret 
                           000000  2345 .else 
                                   2346         CALL	SWAPP
                                   2347         CALL	TOR
                                   2348         CALL	SWAPP
                                   2349         CALL	BRAN
                                   2350         .word	FILL2
                                   2351 FILL1:	CALL	DDUP
                                   2352         CALL	CSTOR
                                   2353         CALL	ONEP
                                   2354 FILL2:	CALL	DONXT
                                   2355         .word	FILL1
                                   2356         JP	DDROP
                                   2357 .endif
                                   2358 
                                   2359 ;       ERASE   ( b u -- )
                                   2360 ;       Erase u bytes beginning at b.
      000B64 0B 34                 2361         .word      LINK
                           000B66  2362 LINK = . 
      000B66 05                    2363         .byte      5
      000B67 45 52 41 53 45        2364         .ascii     "ERASE"
      000B6C                       2365 ERASE:
                           000001  2366 .if CONVERT_TO_CODE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000B6C 90 5F            [ 1] 2367         clrw y 
      000B6E 1D 00 02         [ 2] 2368         subw x,#CELLL 
      000B71 FF               [ 2] 2369         ldw (x),y 
      000B72 CC 0B 39         [ 2] 2370         jp FILL 
                           000000  2371 .else 
                                   2372         CALL     ZERO
                                   2373         JP     FILL
                                   2374 .endif 
                                   2375 ;       PACK0x   ( b u a -- a )
                                   2376 ;       Build a counted string with
                                   2377 ;       u characters from b. Null fill.
      000B75 0B 66                 2378         .word      LINK
                           000B77  2379 LINK = . 
      000B77 05                    2380         .byte      5
      000B78 50 41 43 4B 30 58     2381         .ascii     "PACK0X"
      000B7E                       2382 PACKS:
      000B7E CD 04 88         [ 4] 2383         CALL     DUPP
      000B81 CD 04 51         [ 4] 2384         CALL     TOR     ;strings only on cell boundary
      000B84 CD 06 6E         [ 4] 2385         CALL     DDUP
      000B87 CD 03 EE         [ 4] 2386         CALL     CSTOR
      000B8A CD 09 62         [ 4] 2387         CALL     ONEP ;save count
      000B8D CD 04 98         [ 4] 2388         CALL     SWAPP
      000B90 CD 0B 0A         [ 4] 2389         CALL     CMOVE
      000B93 CD 04 32         [ 4] 2390         CALL     RFROM
      000B96 81               [ 4] 2391         RET
                                   2392 
                                   2393 ;; Numeric output, single precision
                                   2394 
                                   2395 ;       DIGIT   ( u -- c )
                                   2396 ;       Convert digit u to a character.
      000B97 0B 77                 2397         .word      LINK
                           000B99  2398 LINK = . 
      000B99 05                    2399         .byte      5
      000B9A 44 49 47 49 54        2400         .ascii     "DIGIT"
      000B9F                       2401 DIGIT:
      000B9F CD 03 59         [ 4] 2402         CALL	DOLIT
      000BA2 00 09                 2403         .word	9
      000BA4 CD 04 B2         [ 4] 2404         CALL	OVER
      000BA7 CD 07 46         [ 4] 2405         CALL	LESS
      000BAA CD 03 59         [ 4] 2406         CALL	DOLIT
      000BAD 00 07                 2407         .word	7
      000BAF CD 04 D4         [ 4] 2408         CALL	ANDD
      000BB2 CD 06 83         [ 4] 2409         CALL	PLUS
      000BB5 CD 03 59         [ 4] 2410         CALL	DOLIT
      000BB8 00 30                 2411         .word	48	;'0'
      000BBA CC 06 83         [ 2] 2412         JP	PLUS
                                   2413 
                                   2414 ;       EXTRACT ( n base -- n c )
                                   2415 ;       Extract least significant digit from n.
      000BBD 0B 99                 2416         .word      LINK
                           000BBF  2417 LINK = . 
      000BBF 07                    2418         .byte      7
      000BC0 45 58 54 52 41 43 54  2419         .ascii     "EXTRACT"
      000BC7                       2420 EXTRC:
      000BC7 CD 09 CE         [ 4] 2421         CALL     ZERO
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000BCA CD 04 98         [ 4] 2422         CALL     SWAPP
      000BCD CD 07 BE         [ 4] 2423         CALL     UMMOD
      000BD0 CD 04 98         [ 4] 2424         CALL     SWAPP
      000BD3 CC 0B 9F         [ 2] 2425         JP     DIGIT
                                   2426 
                                   2427 ;       <#      ( -- )
                                   2428 ;       Initiate  numeric output process.
      000BD6 0B BF                 2429         .word      LINK
                           000BD8  2430 LINK = . 
      000BD8 02                    2431         .byte      2
      000BD9 3C 23                 2432         .ascii     "<#"
      000BDB                       2433 BDIGS:
      000BDB CD 0A CE         [ 4] 2434         CALL     PAD
      000BDE CD 05 B5         [ 4] 2435         CALL     HLD
      000BE1 CC 03 CA         [ 2] 2436         JP     STORE
                                   2437 
                                   2438 ;       HOLD    ( c -- )
                                   2439 ;       Insert a character into output string.
      000BE4 0B D8                 2440         .word      LINK
                           000BE6  2441 LINK = . 
      000BE6 04                    2442         .byte      4
      000BE7 48 4F 4C 44           2443         .ascii     "HOLD"
      000BEB                       2444 HOLD:
      000BEB CD 05 B5         [ 4] 2445         CALL     HLD
      000BEE CD 03 E1         [ 4] 2446         CALL     AT
      000BF1 CD 09 6F         [ 4] 2447         CALL     ONEM
      000BF4 CD 04 88         [ 4] 2448         CALL     DUPP
      000BF7 CD 05 B5         [ 4] 2449         CALL     HLD
      000BFA CD 03 CA         [ 4] 2450         CALL     STORE
      000BFD CC 03 EE         [ 2] 2451         JP     CSTOR
                                   2452 
                                   2453 ;       #       ( u -- u )
                                   2454 ;       Extract one digit from u and
                                   2455 ;       append digit to output string.
      000C00 0B E6                 2456         .word      LINK
                           000C02  2457 LINK = . 
      000C02 01                    2458         .byte      1
      000C03 23                    2459         .ascii     "#"
      000C04                       2460 DIG:
      000C04 CD 05 45         [ 4] 2461         CALL     BASE
      000C07 CD 03 E1         [ 4] 2462         CALL     AT
      000C0A CD 0B C7         [ 4] 2463         CALL     EXTRC
      000C0D CC 0B EB         [ 2] 2464         JP     HOLD
                                   2465 
                                   2466 ;       #S      ( u -- 0 )
                                   2467 ;       Convert u until all digits
                                   2468 ;       are added to output string.
      000C10 0C 02                 2469         .word      LINK
                           000C12  2470 LINK = . 
      000C12 02                    2471         .byte      2
      000C13 23 53                 2472         .ascii     "#S"
      000C15                       2473 DIGS:
      000C15 CD 0C 04         [ 4] 2474 DIGS1:  CALL     DIG
      000C18 CD 04 88         [ 4] 2475         CALL     DUPP
      000C1B CD 03 8C         [ 4] 2476         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000C1E 0C 22                 2477         .word      DIGS2
      000C20 20 F3            [ 2] 2478         JRA     DIGS1
      000C22 81               [ 4] 2479 DIGS2:  RET
                                   2480 
                                   2481 ;       SIGN    ( n -- )
                                   2482 ;       Add a minus sign to
                                   2483 ;       numeric output string.
      000C23 0C 12                 2484         .word      LINK
                           000C25  2485 LINK = . 
      000C25 04                    2486         .byte      4
      000C26 53 49 47 4E           2487         .ascii     "SIGN"
      000C2A                       2488 SIGN:
      000C2A CD 04 C1         [ 4] 2489         CALL     ZLESS
      000C2D CD 03 8C         [ 4] 2490         CALL     QBRAN
      000C30 0C 3A                 2491         .word      SIGN1
      000C32 CD 03 59         [ 4] 2492         CALL     DOLIT
      000C35 00 2D                 2493         .word      45	;"-"
      000C37 CC 0B EB         [ 2] 2494         JP     HOLD
      000C3A 81               [ 4] 2495 SIGN1:  RET
                                   2496 
                                   2497 ;       #>      ( w -- b u )
                                   2498 ;       Prepare output string.
      000C3B 0C 25                 2499         .word      LINK
                           000C3D  2500 LINK = . 
      000C3D 02                    2501         .byte      2
      000C3E 23 3E                 2502         .ascii     "#>"
      000C40                       2503 EDIGS:
      000C40 CD 04 7E         [ 4] 2504         CALL     DROP
      000C43 CD 05 B5         [ 4] 2505         CALL     HLD
      000C46 CD 03 E1         [ 4] 2506         CALL     AT
      000C49 CD 0A CE         [ 4] 2507         CALL     PAD
      000C4C CD 04 B2         [ 4] 2508         CALL     OVER
      000C4F CC 06 E1         [ 2] 2509         JP     SUBB
                                   2510 
                                   2511 ;       str     ( w -- b u )
                                   2512 ;       Convert a signed integer
                                   2513 ;       to a numeric string.
      000C52 0C 3D                 2514         .word      LINK
                           000C54  2515 LINK = . 
      000C54 03                    2516         .byte      3
      000C55 53 54 52              2517         .ascii     "STR"
      000C58                       2518 STR:
      000C58 CD 04 88         [ 4] 2519         CALL     DUPP
      000C5B CD 04 51         [ 4] 2520         CALL     TOR
      000C5E CD 06 FB         [ 4] 2521         CALL     ABSS
      000C61 CD 0B DB         [ 4] 2522         CALL     BDIGS
      000C64 CD 0C 15         [ 4] 2523         CALL     DIGS
      000C67 CD 04 32         [ 4] 2524         CALL     RFROM
      000C6A CD 0C 2A         [ 4] 2525         CALL     SIGN
      000C6D CC 0C 40         [ 2] 2526         JP     EDIGS
                                   2527 
                                   2528 ;       HEX     ( -- )
                                   2529 ;       Use radix 16 as base for
                                   2530 ;       numeric conversions.
      000C70 0C 54                 2531         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



                           000C72  2532 LINK = . 
      000C72 03                    2533         .byte      3
      000C73 48 45 58              2534         .ascii     "HEX"
      000C76                       2535 HEX:
      000C76 CD 03 59         [ 4] 2536         CALL     DOLIT
      000C79 00 10                 2537         .word      16
      000C7B CD 05 45         [ 4] 2538         CALL     BASE
      000C7E CC 03 CA         [ 2] 2539         JP     STORE
                                   2540 
                                   2541 ;       DECIMAL ( -- )
                                   2542 ;       Use radix 10 as base
                                   2543 ;       for numeric conversions.
      000C81 0C 72                 2544         .word      LINK
                           000C83  2545 LINK = . 
      000C83 07                    2546         .byte      7
      000C84 44 45 43 49 4D 41 4C  2547         .ascii     "DECIMAL"
      000C8B                       2548 DECIM:
      000C8B CD 03 59         [ 4] 2549         CALL     DOLIT
      000C8E 00 0A                 2550         .word      10
      000C90 CD 05 45         [ 4] 2551         CALL     BASE
      000C93 CC 03 CA         [ 2] 2552         JP     STORE
                                   2553 
                                   2554 ;; Numeric input, single precision
                                   2555 
                                   2556 ;       DIGIT?  ( c base -- u t )
                                   2557 ;       Convert a character to its numeric
                                   2558 ;       value. A flag indicates success.
      000C96 0C 83                 2559         .word      LINK
                           000C98  2560 LINK = . 
      000C98 06                    2561         .byte       6
      000C99 44 49 47 49 54 3F     2562         .ascii     "DIGIT?"
      000C9F                       2563 DIGTQ:
      000C9F CD 04 51         [ 4] 2564         CALL     TOR
      000CA2 CD 03 59         [ 4] 2565         CALL     DOLIT
      000CA5 00 30                 2566         .word     48	; "0"
      000CA7 CD 06 E1         [ 4] 2567         CALL     SUBB
      000CAA CD 03 59         [ 4] 2568         CALL     DOLIT
      000CAD 00 09                 2569         .word      9
      000CAF CD 04 B2         [ 4] 2570         CALL     OVER
      000CB2 CD 07 46         [ 4] 2571         CALL     LESS
      000CB5 CD 03 8C         [ 4] 2572         CALL     QBRAN
      000CB8 0C D0                 2573         .word      DGTQ1
      000CBA CD 03 59         [ 4] 2574         CALL     DOLIT
      000CBD 00 07                 2575         .word      7
      000CBF CD 06 E1         [ 4] 2576         CALL     SUBB
      000CC2 CD 04 88         [ 4] 2577         CALL     DUPP
      000CC5 CD 03 59         [ 4] 2578         CALL     DOLIT
      000CC8 00 0A                 2579         .word      10
      000CCA CD 07 46         [ 4] 2580         CALL     LESS
      000CCD CD 04 E8         [ 4] 2581         CALL     ORR
      000CD0 CD 04 88         [ 4] 2582 DGTQ1:  CALL     DUPP
      000CD3 CD 04 32         [ 4] 2583         CALL     RFROM
      000CD6 CC 07 28         [ 2] 2584         JP     ULESS
                                   2585 
                                   2586 ;       NUMBER? ( a -- n T | a F )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



                                   2587 ;       Convert a number string to
                                   2588 ;       integer. Push a flag on tos.
      000CD9 0C 98                 2589         .word      LINK
                           000CDB  2590 LINK = . 
      000CDB 07                    2591         .byte      7
      000CDC 4E 55 4D 42 45 52 3F  2592         .ascii     "NUMBER?"
      000CE3                       2593 NUMBQ:
      000CE3 CD 05 45         [ 4] 2594         CALL     BASE
      000CE6 CD 03 E1         [ 4] 2595         CALL     AT
      000CE9 CD 04 51         [ 4] 2596         CALL     TOR
      000CEC CD 09 CE         [ 4] 2597         CALL     ZERO
      000CEF CD 04 B2         [ 4] 2598         CALL     OVER
      000CF2 CD 0A A6         [ 4] 2599         CALL     COUNT
      000CF5 CD 04 B2         [ 4] 2600         CALL     OVER
      000CF8 CD 03 FF         [ 4] 2601         CALL     CAT
      000CFB CD 03 59         [ 4] 2602         CALL     DOLIT
      000CFE 00 24                 2603         .word     36	; "0x"
      000D00 CD 07 09         [ 4] 2604         CALL     EQUAL
      000D03 CD 03 8C         [ 4] 2605         CALL     QBRAN
      000D06 0D 17                 2606         .word      NUMQ1
      000D08 CD 0C 76         [ 4] 2607         CALL     HEX
      000D0B CD 04 98         [ 4] 2608         CALL     SWAPP
      000D0E CD 09 62         [ 4] 2609         CALL     ONEP
      000D11 CD 04 98         [ 4] 2610         CALL     SWAPP
      000D14 CD 09 6F         [ 4] 2611         CALL     ONEM
      000D17 CD 04 B2         [ 4] 2612 NUMQ1:  CALL     OVER
      000D1A CD 03 FF         [ 4] 2613         CALL     CAT
      000D1D CD 03 59         [ 4] 2614         CALL     DOLIT
      000D20 00 2D                 2615         .word     45	; "-"
      000D22 CD 07 09         [ 4] 2616         CALL     EQUAL
      000D25 CD 04 51         [ 4] 2617         CALL     TOR
      000D28 CD 04 98         [ 4] 2618         CALL     SWAPP
      000D2B CD 04 45         [ 4] 2619         CALL     RAT
      000D2E CD 06 E1         [ 4] 2620         CALL     SUBB
      000D31 CD 04 98         [ 4] 2621         CALL     SWAPP
      000D34 CD 04 45         [ 4] 2622         CALL     RAT
      000D37 CD 06 83         [ 4] 2623         CALL     PLUS
      000D3A CD 06 32         [ 4] 2624         CALL     QDUP
      000D3D CD 03 8C         [ 4] 2625         CALL     QBRAN
      000D40 0D A1                 2626         .word      NUMQ6
      000D42 CD 09 6F         [ 4] 2627         CALL     ONEM
      000D45 CD 04 51         [ 4] 2628         CALL     TOR
      000D48 CD 04 88         [ 4] 2629 NUMQ2:  CALL     DUPP
      000D4B CD 04 51         [ 4] 2630         CALL     TOR
      000D4E CD 03 FF         [ 4] 2631         CALL     CAT
      000D51 CD 05 45         [ 4] 2632         CALL     BASE
      000D54 CD 03 E1         [ 4] 2633         CALL     AT
      000D57 CD 0C 9F         [ 4] 2634         CALL     DIGTQ
      000D5A CD 03 8C         [ 4] 2635         CALL     QBRAN
      000D5D 0D 8F                 2636         .word      NUMQ4
      000D5F CD 04 98         [ 4] 2637         CALL     SWAPP
      000D62 CD 05 45         [ 4] 2638         CALL     BASE
      000D65 CD 03 E1         [ 4] 2639         CALL     AT
      000D68 CD 08 E1         [ 4] 2640         CALL     STAR
      000D6B CD 06 83         [ 4] 2641         CALL     PLUS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000D6E CD 04 32         [ 4] 2642         CALL     RFROM
      000D71 CD 09 62         [ 4] 2643         CALL     ONEP
      000D74 CD 03 6D         [ 4] 2644         CALL     DONXT
      000D77 0D 48                 2645         .word      NUMQ2
      000D79 CD 04 45         [ 4] 2646         CALL     RAT
      000D7C CD 04 98         [ 4] 2647         CALL     SWAPP
      000D7F CD 04 7E         [ 4] 2648         CALL     DROP
      000D82 CD 03 8C         [ 4] 2649         CALL     QBRAN
      000D85 0D 8A                 2650         .word      NUMQ3
      000D87 CD 06 AE         [ 4] 2651         CALL     NEGAT
      000D8A CD 04 98         [ 4] 2652 NUMQ3:  CALL     SWAPP
      000D8D 20 0F            [ 2] 2653         JRA     NUMQ5
      000D8F CD 04 32         [ 4] 2654 NUMQ4:  CALL     RFROM
      000D92 CD 04 32         [ 4] 2655         CALL     RFROM
      000D95 CD 06 63         [ 4] 2656         CALL     DDROP
      000D98 CD 06 63         [ 4] 2657         CALL     DDROP
      000D9B CD 09 CE         [ 4] 2658         CALL     ZERO
      000D9E CD 04 88         [ 4] 2659 NUMQ5:  CALL     DUPP
      000DA1 CD 04 32         [ 4] 2660 NUMQ6:  CALL     RFROM
      000DA4 CD 06 63         [ 4] 2661         CALL     DDROP
      000DA7 CD 04 32         [ 4] 2662         CALL     RFROM
      000DAA CD 05 45         [ 4] 2663         CALL     BASE
      000DAD CC 03 CA         [ 2] 2664         JP     STORE
                                   2665 
                                   2666 ;; Basic I/O
                                   2667 
                                   2668 ;       KEY     ( -- c )
                                   2669 ;       Wait for and return an
                                   2670 ;       input character.
      000DB0 0C DB                 2671         .word      LINK
                           000DB2  2672 LINK = . 
      000DB2 03                    2673         .byte      3
      000DB3 4B 45 59              2674         .ascii     "KEY"
      000DB6                       2675 KEY:
                           000001  2676 .if CONVERT_TO_CODE
      000DB6 72 0B 52 30 FB   [ 2] 2677         btjf UART1_SR,#UART_SR_RXNE,. 
      000DBB C6 52 31         [ 1] 2678         ld a,UART1_DR 
      000DBE 1D 00 02         [ 2] 2679         subw x,#CELLL 
      000DC1 E7 01            [ 1] 2680         ld (1,x),a 
      000DC3 7F               [ 1] 2681         clr (x)
      000DC4 81               [ 4] 2682         ret 
                           000000  2683 .else 
                                   2684 KEY1:   CALL     QKEY
                                   2685         CALL     QBRAN
                                   2686         .word      KEY1
                                   2687         RET
                                   2688 .endif 
                                   2689 
                                   2690 ;       NUF?    ( -- t )
                                   2691 ;       Return false if no input,
                                   2692 ;       else pause and if CR return true.
      000DC5 0D B2                 2693         .word      LINK
                           000DC7  2694 LINK = . 
      000DC7 04                    2695         .byte      4
      000DC8 4E 55 46 3F           2696         .ascii     "NUF?"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000DCC                       2697 NUFQ:
      000DCC CD 03 25         [ 4] 2698         CALL     QKEY
      000DCF CD 04 88         [ 4] 2699         CALL     DUPP
      000DD2 CD 03 8C         [ 4] 2700         CALL     QBRAN
      000DD5 0D E5                 2701         .word    NUFQ1
      000DD7 CD 06 63         [ 4] 2702         CALL     DDROP
      000DDA CD 0D B6         [ 4] 2703         CALL     KEY
      000DDD CD 03 59         [ 4] 2704         CALL     DOLIT
      000DE0 00 0D                 2705         .word      CRR
      000DE2 CC 07 09         [ 2] 2706         JP     EQUAL
      000DE5 81               [ 4] 2707 NUFQ1:  RET
                                   2708 
                                   2709 ;       SPACE   ( -- )
                                   2710 ;       Send  blank character to
                                   2711 ;       output device.
      000DE6 0D C7                 2712         .word      LINK
                           000DE8  2713 LINK = . 
      000DE8 05                    2714         .byte      5
      000DE9 53 50 41 43 45        2715         .ascii     "SPACE"
      000DEE                       2716 SPACE:
      000DEE CD 09 C1         [ 4] 2717         CALL     BLANK
      000DF1 CC 03 43         [ 2] 2718         JP     EMIT
                                   2719 
                                   2720 ;       SPACES  ( +n -- )
                                   2721 ;       Send n spaces to output device.
      000DF4 0D E8                 2722         .word      LINK
                           000DF6  2723 LINK = . 
      000DF6 06                    2724         .byte      6
      000DF7 53 50 41 43 45 53     2725         .ascii     "SPACES"
      000DFD                       2726 SPACS:
      000DFD CD 09 CE         [ 4] 2727         CALL     ZERO
      000E00 CD 07 66         [ 4] 2728         CALL     MAX
      000E03 CD 04 51         [ 4] 2729         CALL     TOR
      000E06 20 03            [ 2] 2730         JRA      CHAR2
      000E08 CD 0D EE         [ 4] 2731 CHAR1:  CALL     SPACE
      000E0B CD 03 6D         [ 4] 2732 CHAR2:  CALL     DONXT
      000E0E 0E 08                 2733         .word    CHAR1
      000E10 81               [ 4] 2734         RET
                                   2735 
                                   2736 ;       TYPE    ( b u -- )
                                   2737 ;       Output u characters from b.
      000E11 0D F6                 2738         .word      LINK
                           000E13  2739 LINK = . 
      000E13 04                    2740         .byte      4
      000E14 54 59 50 45           2741         .ascii     "TYPE"
      000E18                       2742 TYPES:
      000E18 CD 04 51         [ 4] 2743         CALL     TOR
      000E1B 20 0C            [ 2] 2744         JRA     TYPE2
      000E1D CD 04 88         [ 4] 2745 TYPE1:  CALL     DUPP
      000E20 CD 03 FF         [ 4] 2746         CALL     CAT
      000E23 CD 03 43         [ 4] 2747         CALL     EMIT
      000E26 CD 09 62         [ 4] 2748         CALL     ONEP
      000E29 CD 03 6D         [ 4] 2749 TYPE2:  CALL     DONXT
      000E2C 0E 1D                 2750         .word      TYPE1
      000E2E CC 04 7E         [ 2] 2751         JP     DROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



                                   2752 
                                   2753 ;       CR      ( -- )
                                   2754 ;       Output a carriage return
                                   2755 ;       and a line feed.
      000E31 0E 13                 2756         .word      LINK
                           000E33  2757 LINK = . 
      000E33 02                    2758         .byte      2
      000E34 43 52                 2759         .ascii     "CR"
      000E36                       2760 CR:
      000E36 CD 03 59         [ 4] 2761         CALL     DOLIT
      000E39 00 0D                 2762         .word      CRR
      000E3B CD 03 43         [ 4] 2763         CALL     EMIT
      000E3E CD 03 59         [ 4] 2764         CALL     DOLIT
      000E41 00 0A                 2765         .word      LF
      000E43 CC 03 43         [ 2] 2766         JP     EMIT
                                   2767 
                                   2768 ;       do$     ( -- a )
                                   2769 ;       Return  address of a compiled
                                   2770 ;       string.
      000E46 0E 33                 2771         .word      LINK
                           000E48  2772 LINK = . 
      000E48 43                    2773 	.byte      COMPO+3
      000E49 44 4F 24              2774         .ascii     "DO$"
      000E4C                       2775 DOSTR:
      000E4C CD 04 32         [ 4] 2776         CALL     RFROM
      000E4F CD 04 45         [ 4] 2777         CALL     RAT
      000E52 CD 04 32         [ 4] 2778         CALL     RFROM
      000E55 CD 0A A6         [ 4] 2779         CALL     COUNT
      000E58 CD 06 83         [ 4] 2780         CALL     PLUS
      000E5B CD 04 51         [ 4] 2781         CALL     TOR
      000E5E CD 04 98         [ 4] 2782         CALL     SWAPP
      000E61 CD 04 51         [ 4] 2783         CALL     TOR
      000E64 81               [ 4] 2784         RET
                                   2785 
                                   2786 ;       $"|     ( -- a )
                                   2787 ;       Run time routine compiled by $".
                                   2788 ;       Return address of a compiled string.
      000E65 0E 48                 2789         .word      LINK
                           000E67  2790 LINK = . 
      000E67 43                    2791 	.byte      COMPO+3
      000E68 24 22 7C              2792         .byte     '$','"','|'
      000E6B                       2793 STRQP:
      000E6B CD 0E 4C         [ 4] 2794         CALL     DOSTR
      000E6E 81               [ 4] 2795         RET
                                   2796 
                                   2797 ;       ."|     ( -- )
                                   2798 ;       Run time routine of ." .
                                   2799 ;       Output a compiled string.
      000E6F 0E 67                 2800         .word      LINK
                           000E71  2801 LINK = . 
      000E71 43                    2802 	.byte      COMPO+3
      000E72 2E 22 7C              2803         .byte     '.','"','|'
      000E75                       2804 DOTQP:
      000E75 CD 0E 4C         [ 4] 2805         CALL     DOSTR
      000E78 CD 0A A6         [ 4] 2806         CALL     COUNT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000E7B CC 0E 18         [ 2] 2807         JP     TYPES
                                   2808 
                                   2809 ;       .R      ( n +n -- )
                                   2810 ;       Display an integer in a field
                                   2811 ;       of n columns, right justified.
      000E7E 0E 71                 2812         .word      LINK
                           000E80  2813 LINK = . 
      000E80 02                    2814         .byte      2
      000E81 2E 52                 2815         .ascii     ".R"
      000E83                       2816 DOTR:
      000E83 CD 04 51         [ 4] 2817         CALL     TOR
      000E86 CD 0C 58         [ 4] 2818         CALL     STR
      000E89 CD 04 32         [ 4] 2819         CALL     RFROM
      000E8C CD 04 B2         [ 4] 2820         CALL     OVER
      000E8F CD 06 E1         [ 4] 2821         CALL     SUBB
      000E92 CD 0D FD         [ 4] 2822         CALL     SPACS
      000E95 CC 0E 18         [ 2] 2823         JP     TYPES
                                   2824 
                                   2825 ;       U.R     ( u +n -- )
                                   2826 ;       Display an unsigned integer
                                   2827 ;       in n column, right justified.
      000E98 0E 80                 2828         .word      LINK
                           000E9A  2829 LINK = . 
      000E9A 03                    2830         .byte      3
      000E9B 55 2E 52              2831         .ascii     "U.R"
      000E9E                       2832 UDOTR:
      000E9E CD 04 51         [ 4] 2833         CALL     TOR
      000EA1 CD 0B DB         [ 4] 2834         CALL     BDIGS
      000EA4 CD 0C 15         [ 4] 2835         CALL     DIGS
      000EA7 CD 0C 40         [ 4] 2836         CALL     EDIGS
      000EAA CD 04 32         [ 4] 2837         CALL     RFROM
      000EAD CD 04 B2         [ 4] 2838         CALL     OVER
      000EB0 CD 06 E1         [ 4] 2839         CALL     SUBB
      000EB3 CD 0D FD         [ 4] 2840         CALL     SPACS
      000EB6 CC 0E 18         [ 2] 2841         JP     TYPES
                                   2842 
                                   2843 ;       U.      ( u -- )
                                   2844 ;       Display an unsigned integer
                                   2845 ;       in free format.
      000EB9 0E 9A                 2846         .word      LINK
                           000EBB  2847 LINK = . 
      000EBB 02                    2848         .byte      2
      000EBC 55 2E                 2849         .ascii     "U."
      000EBE                       2850 UDOT:
      000EBE CD 0B DB         [ 4] 2851         CALL     BDIGS
      000EC1 CD 0C 15         [ 4] 2852         CALL     DIGS
      000EC4 CD 0C 40         [ 4] 2853         CALL     EDIGS
      000EC7 CD 0D EE         [ 4] 2854         CALL     SPACE
      000ECA CC 0E 18         [ 2] 2855         JP     TYPES
                                   2856 
                                   2857 ;       .       ( w -- )
                                   2858 ;       Display an integer in free
                                   2859 ;       format, preceeded by a space.
      000ECD 0E BB                 2860         .word      LINK
                           000ECF  2861 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000ECF 01                    2862         .byte      1
      000ED0 2E                    2863         .ascii     "."
      000ED1                       2864 DOT:
      000ED1 CD 05 45         [ 4] 2865         CALL     BASE
      000ED4 CD 03 E1         [ 4] 2866         CALL     AT
      000ED7 CD 03 59         [ 4] 2867         CALL     DOLIT
      000EDA 00 0A                 2868         .word      10
      000EDC CD 04 FD         [ 4] 2869         CALL     XORR    ;?decimal
      000EDF CD 03 8C         [ 4] 2870         CALL     QBRAN
      000EE2 0E E7                 2871         .word      DOT1
      000EE4 CC 0E BE         [ 2] 2872         JP     UDOT
      000EE7 CD 0C 58         [ 4] 2873 DOT1:   CALL     STR
      000EEA CD 0D EE         [ 4] 2874         CALL     SPACE
      000EED CC 0E 18         [ 2] 2875         JP     TYPES
                                   2876 
                                   2877 ;       ?       ( a -- )
                                   2878 ;       Display contents in memory cell.
      000EF0 0E CF                 2879         .word      LINK
                                   2880         
                           000EF2  2881 LINK = . 
      000EF2 01                    2882         .byte      1
      000EF3 3F                    2883         .ascii     "?"
      000EF4                       2884 QUEST:
      000EF4 CD 03 E1         [ 4] 2885         CALL     AT
      000EF7 CC 0E D1         [ 2] 2886         JP     DOT
                                   2887 
                                   2888 ;; Parsing
                                   2889 
                                   2890 ;       parse   ( b u c -- b u delta ; <string> )
                                   2891 ;       Scan string delimited by c.
                                   2892 ;       Return found string and its offset.
      000EFA 0E F2                 2893         .word      LINK
                           000EFC  2894 LINK = . 
      000EFC 05                    2895         .byte      5
      000EFD 70 61 72 73 65        2896         .ascii     "parse"
      000F02                       2897 PARS:
      000F02 CD 05 54         [ 4] 2898         CALL     TEMP
      000F05 CD 03 CA         [ 4] 2899         CALL     STORE
      000F08 CD 04 B2         [ 4] 2900         CALL     OVER
      000F0B CD 04 51         [ 4] 2901         CALL     TOR
      000F0E CD 04 88         [ 4] 2902         CALL     DUPP
      000F11 CD 03 8C         [ 4] 2903         CALL     QBRAN
      000F14 0F BA                 2904         .word    PARS8
      000F16 CD 09 6F         [ 4] 2905         CALL     ONEM
      000F19 CD 05 54         [ 4] 2906         CALL     TEMP
      000F1C CD 03 E1         [ 4] 2907         CALL     AT
      000F1F CD 09 C1         [ 4] 2908         CALL     BLANK
      000F22 CD 07 09         [ 4] 2909         CALL     EQUAL
      000F25 CD 03 8C         [ 4] 2910         CALL     QBRAN
      000F28 0F 5B                 2911         .word      PARS3
      000F2A CD 04 51         [ 4] 2912         CALL     TOR
      000F2D CD 09 C1         [ 4] 2913 PARS1:  CALL     BLANK
      000F30 CD 04 B2         [ 4] 2914         CALL     OVER
      000F33 CD 03 FF         [ 4] 2915         CALL     CAT     ;skip leading blanks ONLY
      000F36 CD 06 E1         [ 4] 2916         CALL     SUBB
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000F39 CD 04 C1         [ 4] 2917         CALL     ZLESS
      000F3C CD 06 9D         [ 4] 2918         CALL     INVER
      000F3F CD 03 8C         [ 4] 2919         CALL     QBRAN
      000F42 0F 58                 2920         .word      PARS2
      000F44 CD 09 62         [ 4] 2921         CALL     ONEP
      000F47 CD 03 6D         [ 4] 2922         CALL     DONXT
      000F4A 0F 2D                 2923         .word      PARS1
      000F4C CD 04 32         [ 4] 2924         CALL     RFROM
      000F4F CD 04 7E         [ 4] 2925         CALL     DROP
      000F52 CD 09 CE         [ 4] 2926         CALL     ZERO
      000F55 CC 04 88         [ 2] 2927         JP     DUPP
      000F58 CD 04 32         [ 4] 2928 PARS2:  CALL     RFROM
      000F5B CD 04 B2         [ 4] 2929 PARS3:  CALL     OVER
      000F5E CD 04 98         [ 4] 2930         CALL     SWAPP
      000F61 CD 04 51         [ 4] 2931         CALL     TOR
      000F64 CD 05 54         [ 4] 2932 PARS4:  CALL     TEMP
      000F67 CD 03 E1         [ 4] 2933         CALL     AT
      000F6A CD 04 B2         [ 4] 2934         CALL     OVER
      000F6D CD 03 FF         [ 4] 2935         CALL     CAT
      000F70 CD 06 E1         [ 4] 2936         CALL     SUBB    ;scan for delimiter
      000F73 CD 05 54         [ 4] 2937         CALL     TEMP
      000F76 CD 03 E1         [ 4] 2938         CALL     AT
      000F79 CD 09 C1         [ 4] 2939         CALL     BLANK
      000F7C CD 07 09         [ 4] 2940         CALL     EQUAL
      000F7F CD 03 8C         [ 4] 2941         CALL     QBRAN
      000F82 0F 87                 2942         .word      PARS5
      000F84 CD 04 C1         [ 4] 2943         CALL     ZLESS
      000F87 CD 03 8C         [ 4] 2944 PARS5:  CALL     QBRAN
      000F8A 0F 9C                 2945         .word      PARS6
      000F8C CD 09 62         [ 4] 2946         CALL     ONEP
      000F8F CD 03 6D         [ 4] 2947         CALL     DONXT
      000F92 0F 64                 2948         .word      PARS4
      000F94 CD 04 88         [ 4] 2949         CALL     DUPP
      000F97 CD 04 51         [ 4] 2950         CALL     TOR
      000F9A 20 0F            [ 2] 2951         JRA     PARS7
      000F9C CD 04 32         [ 4] 2952 PARS6:  CALL     RFROM
      000F9F CD 04 7E         [ 4] 2953         CALL     DROP
      000FA2 CD 04 88         [ 4] 2954         CALL     DUPP
      000FA5 CD 09 62         [ 4] 2955         CALL     ONEP
      000FA8 CD 04 51         [ 4] 2956         CALL     TOR
      000FAB CD 04 B2         [ 4] 2957 PARS7:  CALL     OVER
      000FAE CD 06 E1         [ 4] 2958         CALL     SUBB
      000FB1 CD 04 32         [ 4] 2959         CALL     RFROM
      000FB4 CD 04 32         [ 4] 2960         CALL     RFROM
      000FB7 CC 06 E1         [ 2] 2961         JP     SUBB
      000FBA CD 04 B2         [ 4] 2962 PARS8:  CALL     OVER
      000FBD CD 04 32         [ 4] 2963         CALL     RFROM
      000FC0 CC 06 E1         [ 2] 2964         JP     SUBB
                                   2965 
                                   2966 ;       PARSE   ( c -- b u ; <string> )
                                   2967 ;       Scan input stream and return
                                   2968 ;       counted string delimited by c.
      000FC3 0E FC                 2969         .word      LINK
                           000FC5  2970 LINK = . 
      000FC5 05                    2971         .byte      5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      000FC6 50 41 52 53 45        2972         .ascii     "PARSE"
      000FCB                       2973 PARSE:
      000FCB CD 04 51         [ 4] 2974         CALL     TOR
      000FCE CD 0A DF         [ 4] 2975         CALL     TIB
      000FD1 CD 05 63         [ 4] 2976         CALL     INN
      000FD4 CD 03 E1         [ 4] 2977         CALL     AT
      000FD7 CD 06 83         [ 4] 2978         CALL     PLUS    ;current input buffer pointer
      000FDA CD 05 73         [ 4] 2979         CALL     NTIB
      000FDD CD 03 E1         [ 4] 2980         CALL     AT
      000FE0 CD 05 63         [ 4] 2981         CALL     INN
      000FE3 CD 03 E1         [ 4] 2982         CALL     AT
      000FE6 CD 06 E1         [ 4] 2983         CALL     SUBB    ;remaining count
      000FE9 CD 04 32         [ 4] 2984         CALL     RFROM
      000FEC CD 0F 02         [ 4] 2985         CALL     PARS
      000FEF CD 05 63         [ 4] 2986         CALL     INN
      000FF2 CC 0A 3F         [ 2] 2987         JP     PSTOR
                                   2988 
                                   2989 ;       .(      ( -- )
                                   2990 ;       Output following string up to next ) .
      000FF5 0F C5                 2991         .word      LINK
                           000FF7  2992 LINK = . 
      000FF7 82                    2993 	.byte      IMEDD+2
      000FF8 2E 28                 2994         .ascii     ".("
      000FFA                       2995 DOTPR:
      000FFA CD 03 59         [ 4] 2996         CALL     DOLIT
      000FFD 00 29                 2997         .word     41	; ")"
      000FFF CD 0F CB         [ 4] 2998         CALL     PARSE
      001002 CC 0E 18         [ 2] 2999         JP     TYPES
                                   3000 
                                   3001 ;       (       ( -- )
                                   3002 ;       Ignore following string up to next ).
                                   3003 ;       A comment.
      001005 0F F7                 3004         .word      LINK
                           001007  3005 LINK = . 
      001007 81                    3006 	.byte      IMEDD+1
      001008 28                    3007         .ascii     "("
      001009                       3008 PAREN:
      001009 CD 03 59         [ 4] 3009         CALL     DOLIT
      00100C 00 29                 3010         .word     41	; ")"
      00100E CD 0F CB         [ 4] 3011         CALL     PARSE
      001011 CC 06 63         [ 2] 3012         JP     DDROP
                                   3013 
                                   3014 ;       \       ( -- )
                                   3015 ;       Ignore following text till
                                   3016 ;       end of line.
      001014 10 07                 3017         .word      LINK
                           001016  3018 LINK = . 
      001016 81                    3019 	.byte      IMEDD+1
      001017 5C                    3020         .ascii     "\"
      001018                       3021 BKSLA:
                           000001  3022 .if CONVERT_TO_CODE
      001018 90 AE 00 0C      [ 2] 3023         ldw y,#UCTIB ; #TIB  
      00101C 90 FE            [ 2] 3024         ldw y,(y)
      00101E 90 89            [ 2] 3025         pushw y ; count in TIB 
      001020 90 AE 00 0A      [ 2] 3026         ldw y,#UINN ; >IN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      001024 90 BF 24         [ 2] 3027         ldw YTEMP,y
      001027 90 85            [ 2] 3028         popw y 
      001029 91 CF 24         [ 5] 3029         ldw [YTEMP],y
      00102C 81               [ 4] 3030         ret 
                           000000  3031 .else
                                   3032         CALL     NTIB
                                   3033         CALL     AT
                                   3034         CALL     INN
                                   3035         JP     STORE
                                   3036 .endif 
                                   3037 
                                   3038 ;       WORD    ( c -- a ; <string> )
                                   3039 ;       Parse a word from input stream
                                   3040 ;       and copy it to code dictionary.
      00102D 10 16                 3041         .word      LINK
                           00102F  3042 LINK = . 
      00102F 04                    3043         .byte      4
      001030 57 4F 52 44           3044         .ascii     "WORD"
      001034                       3045 WORDD:
      001034 CD 0F CB         [ 4] 3046         CALL     PARSE
      001037 CD 0A BD         [ 4] 3047         CALL     HERE
      00103A CD 09 37         [ 4] 3048         CALL     CELLP
      00103D CC 0B 7E         [ 2] 3049         JP     PACKS
                                   3050 
                                   3051 ;       TOKEN   ( -- a ; <string> )
                                   3052 ;       Parse a word from input stream
                                   3053 ;       and copy it to name dictionary.
      001040 10 2F                 3054         .word      LINK
                           001042  3055 LINK = . 
      001042 05                    3056         .byte      5
      001043 54 4F 4B 45 4E        3057         .ascii     "TOKEN"
      001048                       3058 TOKEN:
      001048 CD 09 C1         [ 4] 3059         CALL     BLANK
      00104B CC 10 34         [ 2] 3060         JP     WORDD
                                   3061 
                                   3062 ;; Dictionary search
                                   3063 
                                   3064 ;       NAME>   ( na -- ca )
                                   3065 ;       Return a code address given
                                   3066 ;       a name address.
      00104E 10 42                 3067         .word      LINK
                           001050  3068 LINK = . 
      001050 05                    3069         .byte      5
      001051 4E 41 4D 45 3E        3070         .ascii     "NAME>"
      001056                       3071 NAMET:
      001056 CD 0A A6         [ 4] 3072         CALL     COUNT
      001059 CD 03 59         [ 4] 3073         CALL     DOLIT
      00105C 00 1F                 3074         .word      31
      00105E CD 04 D4         [ 4] 3075         CALL     ANDD
      001061 CC 06 83         [ 2] 3076         JP     PLUS
                                   3077 
                                   3078 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   3079 ;       Compare u cells in two
                                   3080 ;       strings. Return 0 if identical.
      001064 10 50                 3081         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                           001066  3082 LINK = . 
      001066 05                    3083         .byte       5
      001067 53 41 4D 45 3F        3084         .ascii     "SAME?"
      00106C                       3085 SAMEQ:
      00106C CD 09 6F         [ 4] 3086         CALL     ONEM
      00106F CD 04 51         [ 4] 3087         CALL     TOR
      001072 20 29            [ 2] 3088         JRA     SAME2
      001074 CD 04 B2         [ 4] 3089 SAME1:  CALL     OVER
      001077 CD 04 45         [ 4] 3090         CALL     RAT
      00107A CD 06 83         [ 4] 3091         CALL     PLUS
      00107D CD 03 FF         [ 4] 3092         CALL     CAT
      001080 CD 04 B2         [ 4] 3093         CALL     OVER
      001083 CD 04 45         [ 4] 3094         CALL     RAT
      001086 CD 06 83         [ 4] 3095         CALL     PLUS
      001089 CD 03 FF         [ 4] 3096         CALL     CAT
      00108C CD 06 E1         [ 4] 3097         CALL     SUBB
      00108F CD 06 32         [ 4] 3098         CALL     QDUP
      001092 CD 03 8C         [ 4] 3099         CALL     QBRAN
      001095 10 9D                 3100         .word      SAME2
      001097 CD 04 32         [ 4] 3101         CALL     RFROM
      00109A CC 04 7E         [ 2] 3102         JP     DROP
      00109D CD 03 6D         [ 4] 3103 SAME2:  CALL     DONXT
      0010A0 10 74                 3104         .word      SAME1
      0010A2 CC 09 CE         [ 2] 3105         JP     ZERO
                                   3106 
                                   3107 ;       find    ( a va -- ca na | a F )
                                   3108 ;       Search vocabulary for string.
                                   3109 ;       Return ca and na if succeeded.
      0010A5 10 66                 3110         .word      LINK
                           0010A7  3111 LINK = . 
      0010A7 04                    3112         .byte      4
      0010A8 46 49 4E 44           3113         .ascii     "FIND"
      0010AC                       3114 FIND:
      0010AC CD 04 98         [ 4] 3115         CALL     SWAPP
      0010AF CD 04 88         [ 4] 3116         CALL     DUPP
      0010B2 CD 03 FF         [ 4] 3117         CALL     CAT
      0010B5 CD 05 54         [ 4] 3118         CALL     TEMP
      0010B8 CD 03 CA         [ 4] 3119         CALL     STORE
      0010BB CD 04 88         [ 4] 3120         CALL     DUPP
      0010BE CD 03 E1         [ 4] 3121         CALL     AT
      0010C1 CD 04 51         [ 4] 3122         CALL     TOR
      0010C4 CD 09 37         [ 4] 3123         CALL     CELLP
      0010C7 CD 04 98         [ 4] 3124         CALL     SWAPP
      0010CA CD 03 E1         [ 4] 3125 FIND1:  CALL     AT
      0010CD CD 04 88         [ 4] 3126         CALL     DUPP
      0010D0 CD 03 8C         [ 4] 3127         CALL     QBRAN
      0010D3 11 09                 3128         .word      FIND6
      0010D5 CD 04 88         [ 4] 3129         CALL     DUPP
      0010D8 CD 03 E1         [ 4] 3130         CALL     AT
      0010DB CD 03 59         [ 4] 3131         CALL     DOLIT
      0010DE 1F 7F                 3132         .word      MASKK
      0010E0 CD 04 D4         [ 4] 3133         CALL     ANDD
      0010E3 CD 04 45         [ 4] 3134         CALL     RAT
      0010E6 CD 04 FD         [ 4] 3135         CALL     XORR
      0010E9 CD 03 8C         [ 4] 3136         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      0010EC 10 F8                 3137         .word      FIND2
      0010EE CD 09 37         [ 4] 3138         CALL     CELLP
      0010F1 CD 03 59         [ 4] 3139         CALL     DOLIT
      0010F4 FF FF                 3140         .word     0xFFFF
      0010F6 20 0C            [ 2] 3141         JRA     FIND3
      0010F8 CD 09 37         [ 4] 3142 FIND2:  CALL     CELLP
      0010FB CD 05 54         [ 4] 3143         CALL     TEMP
      0010FE CD 03 E1         [ 4] 3144         CALL     AT
      001101 CD 10 6C         [ 4] 3145         CALL     SAMEQ
      001104 CD 03 A3         [ 4] 3146 FIND3:  CALL     BRAN
      001107 11 18                 3147         .word      FIND4
      001109 CD 04 32         [ 4] 3148 FIND6:  CALL     RFROM
      00110C CD 04 7E         [ 4] 3149         CALL     DROP
      00110F CD 04 98         [ 4] 3150         CALL     SWAPP
      001112 CD 09 46         [ 4] 3151         CALL     CELLM
      001115 CC 04 98         [ 2] 3152         JP     SWAPP
      001118 CD 03 8C         [ 4] 3153 FIND4:  CALL     QBRAN
      00111B 11 25                 3154         .word      FIND5
      00111D CD 09 46         [ 4] 3155         CALL     CELLM
      001120 CD 09 46         [ 4] 3156         CALL     CELLM
      001123 20 A5            [ 2] 3157         JRA     FIND1
      001125 CD 04 32         [ 4] 3158 FIND5:  CALL     RFROM
      001128 CD 04 7E         [ 4] 3159         CALL     DROP
      00112B CD 04 98         [ 4] 3160         CALL     SWAPP
      00112E CD 04 7E         [ 4] 3161         CALL     DROP
      001131 CD 09 46         [ 4] 3162         CALL     CELLM
      001134 CD 04 88         [ 4] 3163         CALL     DUPP
      001137 CD 10 56         [ 4] 3164         CALL     NAMET
      00113A CC 04 98         [ 2] 3165         JP     SWAPP
                                   3166 
                                   3167 ;       NAME?   ( a -- ca na | a F )
                                   3168 ;       Search vocabularies for a string.
      00113D 10 A7                 3169         .word      LINK
                           00113F  3170 LINK = . 
      00113F 05                    3171         .byte      5
      001140 4E 41 4D 45 3F        3172         .ascii     "NAME?"
      001145                       3173 NAMEQ:
      001145 CD 05 C8         [ 4] 3174         CALL   CNTXT
      001148 CC 10 AC         [ 2] 3175         JP     FIND
                                   3176 
                                   3177 ;; Terminal response
                                   3178 
                                   3179 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3180 ;       Backup cursor by one character.
      00114B 11 3F                 3181         .word      LINK
                           00114D  3182 LINK = . 
      00114D 02                    3183         .byte      2
      00114E 5E 48                 3184         .ascii     "^H"
      001150                       3185 BKSP:
      001150 CD 04 51         [ 4] 3186         CALL     TOR
      001153 CD 04 B2         [ 4] 3187         CALL     OVER
      001156 CD 04 32         [ 4] 3188         CALL     RFROM
      001159 CD 04 98         [ 4] 3189         CALL     SWAPP
      00115C CD 04 B2         [ 4] 3190         CALL     OVER
      00115F CD 04 FD         [ 4] 3191         CALL     XORR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      001162 CD 03 8C         [ 4] 3192         CALL     QBRAN
      001165 11 80                 3193         .word      BACK1
      001167 CD 03 59         [ 4] 3194         CALL     DOLIT
      00116A 00 08                 3195         .word      BKSPP
      00116C CD 03 43         [ 4] 3196         CALL     EMIT
      00116F CD 09 6F         [ 4] 3197         CALL     ONEM
      001172 CD 09 C1         [ 4] 3198         CALL     BLANK
      001175 CD 03 43         [ 4] 3199         CALL     EMIT
      001178 CD 03 59         [ 4] 3200         CALL     DOLIT
      00117B 00 08                 3201         .word      BKSPP
      00117D CC 03 43         [ 2] 3202         JP     EMIT
      001180 81               [ 4] 3203 BACK1:  RET
                                   3204 
                                   3205 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3206 ;       Accept and echo key stroke
                                   3207 ;       and bump cursor.
      001181 11 4D                 3208         .word      LINK
                           001183  3209 LINK = . 
      001183 03                    3210         .byte      3
      001184 54 41 50              3211         .ascii     "TAP"
      001187                       3212 TAP:
      001187 CD 04 88         [ 4] 3213         CALL     DUPP
      00118A CD 03 43         [ 4] 3214         CALL     EMIT
      00118D CD 04 B2         [ 4] 3215         CALL     OVER
      001190 CD 03 EE         [ 4] 3216         CALL     CSTOR
      001193 CC 09 62         [ 2] 3217         JP     ONEP
                                   3218 
                                   3219 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3220 ;       Process a key stroke,
                                   3221 ;       CR or backspace.
      001196 11 83                 3222         .word      LINK
                           001198  3223 LINK = . 
      001198 04                    3224         .byte      4
      001199 4B 54 41 50           3225         .ascii     "KTAP"
      00119D                       3226 KTAP:
      00119D CD 04 88         [ 4] 3227         CALL     DUPP
      0011A0 CD 03 59         [ 4] 3228         CALL     DOLIT
      0011A3 00 0D                 3229         .word      CRR
      0011A5 CD 04 FD         [ 4] 3230         CALL     XORR
      0011A8 CD 03 8C         [ 4] 3231         CALL     QBRAN
      0011AB 11 C3                 3232         .word      KTAP2
      0011AD CD 03 59         [ 4] 3233         CALL     DOLIT
      0011B0 00 08                 3234         .word      BKSPP
      0011B2 CD 04 FD         [ 4] 3235         CALL     XORR
      0011B5 CD 03 8C         [ 4] 3236         CALL     QBRAN
      0011B8 11 C0                 3237         .word      KTAP1
      0011BA CD 09 C1         [ 4] 3238         CALL     BLANK
      0011BD CC 11 87         [ 2] 3239         JP     TAP
      0011C0 CC 11 50         [ 2] 3240 KTAP1:  JP     BKSP
      0011C3 CD 04 7E         [ 4] 3241 KTAP2:  CALL     DROP
      0011C6 CD 04 98         [ 4] 3242         CALL     SWAPP
      0011C9 CD 04 7E         [ 4] 3243         CALL     DROP
      0011CC CC 04 88         [ 2] 3244         JP     DUPP
                                   3245 
                                   3246 ;       accept  ( b u -- b u )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                   3247 ;       Accept characters to input
                                   3248 ;       buffer. Return with actual count.
      0011CF 11 98                 3249         .word      LINK
                           0011D1  3250 LINK = . 
      0011D1 06                    3251         .byte      6
      0011D2 41 43 43 45 50 54     3252         .ascii     "ACCEPT"
      0011D8                       3253 ACCEP:
      0011D8 CD 04 B2         [ 4] 3254         CALL     OVER
      0011DB CD 06 83         [ 4] 3255         CALL     PLUS
      0011DE CD 04 B2         [ 4] 3256         CALL     OVER
      0011E1 CD 06 6E         [ 4] 3257 ACCP1:  CALL     DDUP
      0011E4 CD 04 FD         [ 4] 3258         CALL     XORR
      0011E7 CD 03 8C         [ 4] 3259         CALL     QBRAN
      0011EA 12 0C                 3260         .word      ACCP4
      0011EC CD 0D B6         [ 4] 3261         CALL     KEY
      0011EF CD 04 88         [ 4] 3262         CALL     DUPP
      0011F2 CD 09 C1         [ 4] 3263         CALL     BLANK
      0011F5 CD 03 59         [ 4] 3264         CALL     DOLIT
      0011F8 00 7F                 3265         .word      127
      0011FA CD 07 A3         [ 4] 3266         CALL     WITHI
      0011FD CD 03 8C         [ 4] 3267         CALL     QBRAN
      001200 12 07                 3268         .word      ACCP2
      001202 CD 11 87         [ 4] 3269         CALL     TAP
      001205 20 03            [ 2] 3270         JRA     ACCP3
      001207 CD 11 9D         [ 4] 3271 ACCP2:  CALL     KTAP
      00120A 20 D5            [ 2] 3272 ACCP3:  JRA     ACCP1
      00120C CD 04 7E         [ 4] 3273 ACCP4:  CALL     DROP
      00120F CD 04 B2         [ 4] 3274         CALL     OVER
      001212 CC 06 E1         [ 2] 3275         JP     SUBB
                                   3276 
                                   3277 ;       QUERY   ( -- )
                                   3278 ;       Accept input stream to
                                   3279 ;       terminal input buffer.
      001215 11 D1                 3280         .word      LINK
                                   3281         
                           001217  3282 LINK = . 
      001217 05                    3283         .byte      5
      001218 51 55 45 52 59        3284         .ascii     "QUERY"
      00121D                       3285 QUERY:
      00121D CD 0A DF         [ 4] 3286         CALL     TIB
      001220 CD 03 59         [ 4] 3287         CALL     DOLIT
      001223 00 50                 3288         .word      80
      001225 CD 11 D8         [ 4] 3289         CALL     ACCEP
      001228 CD 05 73         [ 4] 3290         CALL     NTIB
      00122B CD 03 CA         [ 4] 3291         CALL     STORE
      00122E CD 04 7E         [ 4] 3292         CALL     DROP
      001231 CD 09 CE         [ 4] 3293         CALL     ZERO
      001234 CD 05 63         [ 4] 3294         CALL     INN
      001237 CC 03 CA         [ 2] 3295         JP     STORE
                                   3296 
                                   3297 ;       ABORT   ( -- )
                                   3298 ;       Reset data stack and
                                   3299 ;       jump to QUIT.
      00123A 12 17                 3300         .word      LINK
                           00123C  3301 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      00123C 05                    3302         .byte      5
      00123D 41 42 4F 52 54        3303         .ascii     "ABORT"
      001242                       3304 ABORT:
      001242 CD 13 39         [ 4] 3305         CALL     PRESE
      001245 CC 13 56         [ 2] 3306         JP     QUIT
                                   3307 
                                   3308 ;       abort"  ( f -- )
                                   3309 ;       Run time routine of ABORT".
                                   3310 ;       Abort with a message.
      001248 12 3C                 3311         .word      LINK
                           00124A  3312 LINK = . 
      00124A 46                    3313 	.byte      COMPO+6
      00124B 41 42 4F 52 54        3314         .ascii     "ABORT"
      001250 22                    3315         .byte      '"'
      001251                       3316 ABORQ:
      001251 CD 03 8C         [ 4] 3317         CALL     QBRAN
      001254 12 70                 3318         .word      ABOR2   ;text flag
      001256 CD 0E 4C         [ 4] 3319         CALL     DOSTR
      001259 CD 0D EE         [ 4] 3320 ABOR1:  CALL     SPACE
      00125C CD 0A A6         [ 4] 3321         CALL     COUNT
      00125F CD 0E 18         [ 4] 3322         CALL     TYPES
      001262 CD 03 59         [ 4] 3323         CALL     DOLIT
      001265 00 3F                 3324         .word     63 ; "?"
      001267 CD 03 43         [ 4] 3325         CALL     EMIT
      00126A CD 0E 36         [ 4] 3326         CALL     CR
      00126D CC 12 42         [ 2] 3327         JP     ABORT   ;pass error string
      001270 CD 0E 4C         [ 4] 3328 ABOR2:  CALL     DOSTR
      001273 CC 04 7E         [ 2] 3329         JP     DROP
                                   3330 
                                   3331 ;; The text interpreter
                                   3332 
                                   3333 ;       $INTERPRET      ( a -- )
                                   3334 ;       Interpret a word. If failed,
                                   3335 ;       try to convert it to an integer.
      001276 12 4A                 3336         .word      LINK
                           001278  3337 LINK = . 
      001278 0A                    3338         .byte      10
      001279 24 49 4E 54 45 52 50  3339         .ascii     "$INTERPRET"
             52 45 54
      001283                       3340 INTER:
      001283 CD 11 45         [ 4] 3341         CALL     NAMEQ
      001286 CD 06 32         [ 4] 3342         CALL     QDUP    ;?defined
      001289 CD 03 8C         [ 4] 3343         CALL     QBRAN
      00128C 12 AD                 3344         .word      INTE1
      00128E CD 03 E1         [ 4] 3345         CALL     AT
      001291 CD 03 59         [ 4] 3346         CALL     DOLIT
      001294 40 00                 3347 	.word       0x4000	; COMPO*256
      001296 CD 04 D4         [ 4] 3348         CALL     ANDD    ;?compile only lexicon bits
      001299 CD 12 51         [ 4] 3349         CALL     ABORQ
      00129C 0D                    3350         .byte      13
      00129D 20 63 6F 6D 70 69 6C  3351         .ascii     " compile only"
             65 20 6F 6E 6C 79
      0012AA CC 03 B3         [ 2] 3352         JP     EXECU
      0012AD CD 0C E3         [ 4] 3353 INTE1:  CALL     NUMBQ   ;convert a number
      0012B0 CD 03 8C         [ 4] 3354         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      0012B3 12 59                 3355         .word    ABOR1
      0012B5 81               [ 4] 3356         RET
                                   3357 
                                   3358 ;       [       ( -- )
                                   3359 ;       Start  text interpreter.
      0012B6 12 78                 3360         .word      LINK
                           0012B8  3361 LINK = . 
      0012B8 81                    3362 	.byte      IMEDD+1
      0012B9 5B                    3363         .ascii     "["
      0012BA                       3364 LBRAC:
      0012BA CD 03 59         [ 4] 3365         CALL   DOLIT
      0012BD 12 83                 3366         .word  INTER
      0012BF CD 05 A6         [ 4] 3367         CALL   TEVAL
      0012C2 CC 03 CA         [ 2] 3368         JP     STORE
                                   3369 
                                   3370 ;       .OK     ( -- )
                                   3371 ;       Display 'ok' while interpreting.
      0012C5 12 B8                 3372         .word      LINK
                           0012C7  3373 LINK = . 
      0012C7 03                    3374         .byte      3
      0012C8 2E 4F 4B              3375         .ascii     ".OK"
      0012CB                       3376 DOTOK:
      0012CB CD 03 59         [ 4] 3377         CALL     DOLIT
      0012CE 12 83                 3378         .word      INTER
      0012D0 CD 05 A6         [ 4] 3379         CALL     TEVAL
      0012D3 CD 03 E1         [ 4] 3380         CALL     AT
      0012D6 CD 07 09         [ 4] 3381         CALL     EQUAL
      0012D9 CD 03 8C         [ 4] 3382         CALL     QBRAN
      0012DC 12 E5                 3383         .word      DOTO1
      0012DE CD 0E 75         [ 4] 3384         CALL     DOTQP
      0012E1 03                    3385         .byte      3
      0012E2 20 6F 6B              3386         .ascii     " ok"
      0012E5 CC 0E 36         [ 2] 3387 DOTO1:  JP     CR
                                   3388 
                                   3389 ;       ?STACK  ( -- )
                                   3390 ;       Abort if stack underflows.
      0012E8 12 C7                 3391         .word      LINK
                           0012EA  3392 LINK = . 
      0012EA 06                    3393         .byte      6
      0012EB 3F 53 54 41 43 4B     3394         .ascii     "?STACK"
      0012F1                       3395 QSTAC: 
      0012F1 CD 0A 11         [ 4] 3396         CALL     DEPTH
      0012F4 CD 04 C1         [ 4] 3397         CALL     ZLESS   ;check only for underflow
      0012F7 CD 12 51         [ 4] 3398         CALL     ABORQ
      0012FA 0B                    3399         .byte      11
      0012FB 20 75 6E 64 65 72 66  3400         .ascii     " underflow "
             6C 6F 77 20
      001306 81               [ 4] 3401         RET
                                   3402 
                                   3403 ;       EVAL    ( -- )
                                   3404 ;       Interpret  input stream.
      001307 12 EA                 3405         .word      LINK
                           001309  3406 LINK = . 
      001309 04                    3407         .byte      4
      00130A 45 56 41 4C           3408         .ascii     "EVAL"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      00130E                       3409 EVAL:
      00130E CD 10 48         [ 4] 3410 EVAL1:  CALL     TOKEN
      001311 CD 04 88         [ 4] 3411         CALL     DUPP
      001314 CD 03 FF         [ 4] 3412         CALL     CAT     ;?input stream empty
      001317 CD 03 8C         [ 4] 3413         CALL     QBRAN
      00131A 13 2A                 3414         .word    EVAL2
      00131C CD 05 A6         [ 4] 3415         CALL     TEVAL
      00131F CD 0A F3         [ 4] 3416         CALL     ATEXE
      001322 CD 12 F1         [ 4] 3417         CALL     QSTAC   ;evaluate input, check stack
      001325 CD 03 A3         [ 4] 3418         CALL     BRAN
      001328 13 0E                 3419         .word    EVAL1
      00132A CD 04 7E         [ 4] 3420 EVAL2:  CALL     DROP
      00132D CC 12 CB         [ 2] 3421         JP       DOTOK
                                   3422 
                                   3423 ;       PRESET  ( -- )
                                   3424 ;       Reset data stack pointer and
                                   3425 ;       terminal input buffer.
      001330 13 09                 3426         .word      LINK
                           001332  3427 LINK = . 
      001332 06                    3428         .byte      6
      001333 50 52 45 53 45 54     3429         .ascii     "PRESET"
      001339                       3430 PRESE:
      001339 CD 03 59         [ 4] 3431         CALL     DOLIT
      00133C 16 80                 3432         .word      SPP
      00133E CD 04 75         [ 4] 3433         CALL     SPSTO
      001341 CD 03 59         [ 4] 3434         CALL     DOLIT
      001344 17 00                 3435         .word      TIBB
      001346 CD 05 73         [ 4] 3436         CALL     NTIB
      001349 CD 09 37         [ 4] 3437         CALL     CELLP
      00134C CC 03 CA         [ 2] 3438         JP     STORE
                                   3439 
                                   3440 ;       QUIT    ( -- )
                                   3441 ;       Reset return stack pointer
                                   3442 ;       and start text interpreter.
      00134F 13 32                 3443         .word      LINK
                           001351  3444 LINK = . 
      001351 04                    3445         .byte      4
      001352 51 55 49 54           3446         .ascii     "QUIT"
      001356                       3447 QUIT:
      001356 CD 03 59         [ 4] 3448         CALL     DOLIT
      001359 17 FF                 3449         .word      RPP
      00135B CD 04 1C         [ 4] 3450         CALL     RPSTO   ;reset return stack pointer
      00135E CD 12 BA         [ 4] 3451 QUIT1:  CALL     LBRAC   ;start interpretation
      001361 CD 12 1D         [ 4] 3452 QUIT2:  CALL     QUERY   ;get input
      001364 CD 13 0E         [ 4] 3453         CALL     EVAL
      001367 20 F8            [ 2] 3454         JRA     QUIT2   ;continue till error
                                   3455 
                                   3456 ;; The compiler
                                   3457 
                                   3458 ;       '       ( -- ca )
                                   3459 ;       Search vocabularies for
                                   3460 ;       next word in input stream.
      001369 13 51                 3461         .word      LINK
                           00136B  3462 LINK = . 
      00136B 01                    3463         .byte      1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      00136C 27                    3464         .ascii     "'"
      00136D                       3465 TICK:
      00136D CD 10 48         [ 4] 3466         CALL     TOKEN
      001370 CD 11 45         [ 4] 3467         CALL     NAMEQ   ;?defined
      001373 CD 03 8C         [ 4] 3468         CALL     QBRAN
      001376 12 59                 3469         .word      ABOR1
      001378 81               [ 4] 3470         RET     ;yes, push code address
                                   3471 
                                   3472 ;       ALLOT   ( n -- )
                           000001  3473 .if PICATOUT_MOD
                                   3474 ;       Allocate n bytes to RAM 
                           000000  3475 .else 
                                   3476 ;       Allocate n bytes to  code dictionary.
                                   3477 .endif 
      001379 13 6B                 3478         .word      LINK
                           00137B  3479 LINK = . 
      00137B 05                    3480         .byte      5
      00137C 41 4C 4C 4F 54        3481         .ascii     "ALLOT"
      001381                       3482 ALLOT:
      001381 CD 05 D6         [ 4] 3483         CALL     VPP
                           000001  3484 .if PICATOUT_MOD
                                   3485 ; must update APP_VP each time VP is modidied
      001384 CD 0A 3F         [ 4] 3486         call PSTOR 
      001387 CC 1A 68         [ 2] 3487         jp UPDATVP 
                           000000  3488 .else
                                   3489         JP     PSTOR
                                   3490 .endif ;PICATOUT_MOD
                                   3491 
                                   3492 ;       ,       ( w -- )
                                   3493 ;         Compile an integer into
                                   3494 ;         variable space.
      00138A 13 7B                 3495         .word      LINK
                           00138C  3496 LINK = . 
      00138C 01                    3497         .byte      1
      00138D 2C                    3498         .ascii     ","
      00138E                       3499 COMMA:
      00138E CD 0A BD         [ 4] 3500         CALL     HERE
      001391 CD 04 88         [ 4] 3501         CALL     DUPP
      001394 CD 09 37         [ 4] 3502         CALL     CELLP   ;cell boundary
      001397 CD 05 D6         [ 4] 3503         CALL     VPP
      00139A CD 03 CA         [ 4] 3504         CALL     STORE
      00139D CC 03 CA         [ 2] 3505         JP     STORE
                                   3506 
                                   3507 ;       C,      ( c -- )
                                   3508 ;       Compile a byte into
                                   3509 ;       variables space.
      0013A0 13 8C                 3510        .word      LINK
                           0013A2  3511 LINK = . 
      0013A2 02                    3512         .byte      2
      0013A3 43 2C                 3513         .ascii     "C,"
      0013A5                       3514 CCOMMA:
      0013A5 CD 0A BD         [ 4] 3515         CALL     HERE
      0013A8 CD 04 88         [ 4] 3516         CALL     DUPP
      0013AB CD 09 62         [ 4] 3517         CALL     ONEP
      0013AE CD 05 D6         [ 4] 3518         CALL     VPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      0013B1 CD 03 CA         [ 4] 3519         CALL     STORE
      0013B4 CC 03 EE         [ 2] 3520         JP     CSTOR
                                   3521 
                                   3522 ;       [COMPILE]       ( -- ; <string> )
                                   3523 ;       Compile next immediate
                                   3524 ;       word into code dictionary.
      0013B7 13 A2                 3525         .word      LINK
                           0013B9  3526 LINK = . 
      0013B9 89                    3527 	.byte      IMEDD+9
      0013BA 5B 43 4F 4D 50 49 4C  3528         .ascii     "[COMPILE]"
             45 5D
      0013C3                       3529 BCOMP:
      0013C3 CD 13 6D         [ 4] 3530         CALL     TICK
      0013C6 CC 16 86         [ 2] 3531         JP     JSRC
                                   3532 
                                   3533 ;       COMPILE ( -- )
                                   3534 ;       Compile next jsr in
                                   3535 ;       colon list to code dictionary.
      0013C9 13 B9                 3536         .word      LINK
                           0013CB  3537 LINK = . 
      0013CB 47                    3538 	.byte      COMPO+7
      0013CC 43 4F 4D 50 49 4C 45  3539         .ascii     "COMPILE"
      0013D3                       3540 COMPI:
      0013D3 CD 04 32         [ 4] 3541         CALL     RFROM
                           000001  3542 .if PICATOUT_MOD
                                   3543 ; no need to increment
                           000000  3544 .else
                                   3545         CALL     ONEP
                                   3546 .endif 
      0013D6 CD 04 88         [ 4] 3547         CALL     DUPP
      0013D9 CD 03 E1         [ 4] 3548         CALL     AT
      0013DC CD 16 86         [ 4] 3549         CALL     JSRC    ;compile subroutine
      0013DF CD 09 37         [ 4] 3550         CALL     CELLP
                           000001  3551 .if PICATOUT_MOD
      0013E2 90 93            [ 1] 3552         ldw y,x 
      0013E4 90 FE            [ 2] 3553         ldw y,(y)
      0013E6 1C 00 02         [ 2] 3554         addw x,#CELLL 
      0013E9 90 FC            [ 2] 3555         jp (y)
                           000000  3556 .else 
                                   3557         JP     TOR
                                   3558 .endif 
                                   3559 
                                   3560 ;       LITERAL ( w -- )
                                   3561 ;       Compile tos to dictionary
                                   3562 ;       as an integer literal.
      0013EB 13 CB                 3563         .word      LINK
                           0013ED  3564 LINK = . 
      0013ED 87                    3565 	.byte      IMEDD+7
      0013EE 4C 49 54 45 52 41 4C  3566         .ascii     "LITERAL"
      0013F5                       3567 LITER:
      0013F5 CD 13 D3         [ 4] 3568         CALL     COMPI
                           000001  3569 .if PICATOUT_MOD
      0013F8 03 59                 3570         .word DOLIT 
                           000000  3571 .else         
                                   3572         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



                                   3573 .endif 
      0013FA CC 13 8E         [ 2] 3574         JP     COMMA
                                   3575 
                                   3576 ;       $,"     ( -- )
                                   3577 ;       Compile a literal string
                                   3578 ;       up to next " .
      0013FD 13 ED                 3579         .word      LINK
                           0013FF  3580 LINK = . 
      0013FF 03                    3581         .byte      3
      001400 24 2C 22              3582         .byte     '$',',','"'
      001403                       3583 STRCQ:
      001403 CD 03 59         [ 4] 3584         CALL     DOLIT
      001406 00 22                 3585         .word     34	; "
      001408 CD 0F CB         [ 4] 3586         CALL     PARSE
      00140B CD 0A BD         [ 4] 3587         CALL     HERE
      00140E CD 0B 7E         [ 4] 3588         CALL     PACKS   ;string to code dictionary
      001411 CD 0A A6         [ 4] 3589         CALL     COUNT
      001414 CD 06 83         [ 4] 3590         CALL     PLUS    ;calculate aligned end of string
      001417 CD 05 D6         [ 4] 3591         CALL     VPP
      00141A CC 03 CA         [ 2] 3592         JP     STORE
                                   3593 
                                   3594 ;; Structures
                                   3595 
                                   3596 ;       FOR     ( -- a )
                                   3597 ;       Start a FOR-NEXT loop
                                   3598 ;       structure in a colon definition.
      00141D 13 FF                 3599         .word      LINK
                           00141F  3600 LINK = . 
      00141F 83                    3601 	.byte      IMEDD+3
      001420 46 4F 52              3602         .ascii     "FOR"
      001423                       3603 FOR:
      001423 CD 13 D3         [ 4] 3604         CALL     COMPI
                           000001  3605 .if PICATOUT_MOD
      001426 04 51                 3606         .word TOR 
                           000000  3607 .else
                                   3608         CALL     TOR
                                   3609 .endif
      001428 CC 0A BD         [ 2] 3610         JP     HERE
                                   3611 
                                   3612 ;       NEXT    ( a -- )
                                   3613 ;       Terminate a FOR-NEXT loop.
      00142B 14 1F                 3614         .word      LINK
                           00142D  3615 LINK = . 
      00142D 84                    3616 	.byte      IMEDD+4
      00142E 4E 45 58 54           3617         .ascii     "NEXT"
      001432                       3618 NEXT:
      001432 CD 13 D3         [ 4] 3619         CALL     COMPI
                           000001  3620 .if PICATOUT_MOD
      001435 03 6D                 3621         .word DONXT 
                           000000  3622 .else 
                                   3623         CALL     DONXT
                                   3624 .endif         
                           000001  3625 .if PICATOUT_MOD
      001437 CD 06 22         [ 4] 3626         call ADRADJ
                                   3627 .endif ; PICATOUT_MOD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      00143A CC 13 8E         [ 2] 3628         JP     COMMA
                                   3629 
                                   3630 ;       I ( -- n )
                                   3631 ;       stack FOR-NEXT COUNTER 
      00143D 14 2D                 3632         .word LINK 
                           00143F  3633         LINK=.
      00143F 01                    3634         .byte 1 
      001440 49                    3635         .ascii "I"
      001441                       3636 IFETCH: 
      001441 1D 00 02         [ 2] 3637         subw x,#CELLL 
      001444 16 03            [ 2] 3638         ldw y,(3,sp)
      001446 FF               [ 2] 3639         ldw (x),y 
      001447 81               [ 4] 3640         ret 
                                   3641 
                                   3642 ;       BEGIN   ( -- a )
                                   3643 ;       Start an infinite or
                                   3644 ;       indefinite loop structure.
      001448 14 3F                 3645         .word      LINK
                           00144A  3646 LINK = . 
      00144A 85                    3647 	.byte      IMEDD+5
      00144B 42 45 47 49 4E        3648         .ascii     "BEGIN"
      001450                       3649 BEGIN:
      001450 CC 0A BD         [ 2] 3650         JP     HERE
                                   3651 
                                   3652 ;       UNTIL   ( a -- )
                                   3653 ;       Terminate a BEGIN-UNTIL
                                   3654 ;       indefinite loop structure.
      001453 14 4A                 3655         .word      LINK
                           001455  3656 LINK = . 
      001455 85                    3657 	.byte      IMEDD+5
      001456 55 4E 54 49 4C        3658         .ascii     "UNTIL"
      00145B                       3659 UNTIL:
      00145B CD 13 D3         [ 4] 3660         CALL     COMPI
                           000001  3661 .if PICATOUT_MOD
      00145E 03 8C                 3662         .word    QBRAN 
                           000000  3663 .else 
                                   3664         CALL     QBRAN
                                   3665 .endif 
                           000001  3666 .if PICATOUT_MOD 
      001460 CD 06 22         [ 4] 3667         call ADRADJ
                                   3668 .endif ; PICATOUT_MOD
      001463 CC 13 8E         [ 2] 3669         JP     COMMA
                                   3670 
                                   3671 ;       AGAIN   ( a -- )
                                   3672 ;       Terminate a BEGIN-AGAIN
                                   3673 ;       infinite loop structure.
      001466 14 55                 3674         .word      LINK
                           001468  3675 LINK = . 
      001468 85                    3676 	.byte      IMEDD+5
      001469 41 47 41 49 4E        3677         .ascii     "AGAIN"
      00146E                       3678 AGAIN:
      00146E CD 13 D3         [ 4] 3679         CALL     COMPI
                           000001  3680 .if PICATOUT_MOD
      001471 03 A3                 3681         .word BRAN
                           000000  3682 .else
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                   3683         CALL     BRAN
                                   3684 .endif 
                           000001  3685 .if PICATOUT_MOD 
      001473 CD 06 22         [ 4] 3686         call ADRADJ 
                                   3687 .endif ; PICATOUT_MOD
      001476 CC 13 8E         [ 2] 3688         JP     COMMA
                                   3689 
                                   3690 ;       IF      ( -- A )
                                   3691 ;       Begin a conditional branch.
      001479 14 68                 3692         .word      LINK
                           00147B  3693 LINK = . 
      00147B 82                    3694 	.byte      IMEDD+2
      00147C 49 46                 3695         .ascii     "IF"
      00147E                       3696 IFF:
      00147E CD 13 D3         [ 4] 3697         CALL     COMPI
                           000001  3698 .if PICATOUT_MOD
      001481 03 8C                 3699         .word QBRAN
                           000000  3700 .else
                                   3701         CALL     QBRAN
                                   3702 .endif 
      001483 CD 0A BD         [ 4] 3703         CALL     HERE
      001486 CD 09 CE         [ 4] 3704         CALL     ZERO
      001489 CC 13 8E         [ 2] 3705         JP     COMMA
                                   3706 
                                   3707 ;       THEN        ( A -- )
                                   3708 ;       Terminate a conditional branch structure.
      00148C 14 7B                 3709         .word      LINK
                           00148E  3710 LINK = . 
      00148E 84                    3711 	.byte      IMEDD+4
      00148F 54 48 45 4E           3712         .ascii     "THEN"
      001493                       3713 THENN:
      001493 CD 0A BD         [ 4] 3714         CALL     HERE
                           000001  3715 .if PICATOUT_MOD 
      001496 CD 06 22         [ 4] 3716         call ADRADJ 
                                   3717 .endif ; PICATOUT_MOD
      001499 CD 04 98         [ 4] 3718         CALL     SWAPP
      00149C CC 03 CA         [ 2] 3719         JP     STORE
                                   3720 
                                   3721 ;       ELSE        ( A -- A )
                                   3722 ;       Start the false clause in an IF-ELSE-THEN structure.
      00149F 14 8E                 3723         .word      LINK
                           0014A1  3724 LINK = . 
      0014A1 84                    3725 	.byte      IMEDD+4
      0014A2 45 4C 53 45           3726         .ascii     "ELSE"
      0014A6                       3727 ELSEE:
      0014A6 CD 13 D3         [ 4] 3728         CALL     COMPI
                           000001  3729 .if PICATOUT_MOD
      0014A9 03 A3                 3730         .word BRAN
                           000000  3731 .else
                                   3732         CALL     BRAN
                                   3733 .endif 
      0014AB CD 0A BD         [ 4] 3734         CALL     HERE
      0014AE CD 09 CE         [ 4] 3735         CALL     ZERO
      0014B1 CD 13 8E         [ 4] 3736         CALL     COMMA
      0014B4 CD 04 98         [ 4] 3737         CALL     SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      0014B7 CD 0A BD         [ 4] 3738         CALL     HERE
                           000001  3739 .if PICATOUT_MOD 
      0014BA CD 06 22         [ 4] 3740         call ADRADJ 
                                   3741 .endif ; PICATOUT_MOD
      0014BD CD 04 98         [ 4] 3742         CALL     SWAPP
      0014C0 CC 03 CA         [ 2] 3743         JP     STORE
                                   3744 
                                   3745 ;       AHEAD       ( -- A )
                                   3746 ;       Compile a forward branch instruction.
      0014C3 14 A1                 3747         .word      LINK
                           0014C5  3748 LINK = . 
      0014C5 85                    3749 	.byte      IMEDD+5
      0014C6 41 48 45 41 44        3750         .ascii     "AHEAD"
      0014CB                       3751 AHEAD:
      0014CB CD 13 D3         [ 4] 3752         CALL     COMPI
                           000001  3753 .if PICATOUT_MOD
      0014CE 03 A3                 3754         .word BRAN
                           000000  3755 .else
                                   3756         CALL     BRAN
                                   3757 .endif 
      0014D0 CD 0A BD         [ 4] 3758         CALL     HERE
      0014D3 CD 09 CE         [ 4] 3759         CALL     ZERO
      0014D6 CC 13 8E         [ 2] 3760         JP     COMMA
                                   3761 
                                   3762 ;       WHILE       ( a -- A a )
                                   3763 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      0014D9 14 C5                 3764         .word      LINK
                           0014DB  3765 LINK = . 
      0014DB 85                    3766 	.byte      IMEDD+5
      0014DC 57 48 49 4C 45        3767         .ascii     "WHILE"
      0014E1                       3768 WHILE:
      0014E1 CD 13 D3         [ 4] 3769         CALL     COMPI
                           000001  3770 .if PICATOUT_MOD
      0014E4 03 8C                 3771         .word QBRAN
                           000000  3772 .else
                                   3773         CALL     QBRAN
                                   3774 .endif 
      0014E6 CD 0A BD         [ 4] 3775         CALL     HERE
      0014E9 CD 09 CE         [ 4] 3776         CALL     ZERO
      0014EC CD 13 8E         [ 4] 3777         CALL     COMMA
      0014EF CC 04 98         [ 2] 3778         JP     SWAPP
                                   3779 
                                   3780 ;       REPEAT      ( A a -- )
                                   3781 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      0014F2 14 DB                 3782         .word      LINK
                           0014F4  3783 LINK = . 
      0014F4 86                    3784         .byte      IMEDD+6
      0014F5 52 45 50 45 41 54     3785         .ascii     "REPEAT"
      0014FB                       3786 REPEA:
      0014FB CD 13 D3         [ 4] 3787         CALL     COMPI
                           000001  3788 .if PICATOUT_MOD
      0014FE 03 A3                 3789         .word BRAN
                           000000  3790 .else
                                   3791         CALL     BRAN
                                   3792 .endif 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



                           000001  3793 .if PICATOUT_MOD 
      001500 CD 06 22         [ 4] 3794         call ADRADJ 
                                   3795 .endif ; PICATOUT_MOD
      001503 CD 13 8E         [ 4] 3796         CALL     COMMA
      001506 CD 0A BD         [ 4] 3797         CALL     HERE
                           000001  3798 .if PICATOUT_MOD 
      001509 CD 06 22         [ 4] 3799         call ADRADJ 
                                   3800 .endif ; PICATOUT_MOD
      00150C CD 04 98         [ 4] 3801         CALL     SWAPP
      00150F CC 03 CA         [ 2] 3802         JP     STORE
                                   3803 
                                   3804 ;       AFT         ( a -- a A )
                                   3805 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      001512 14 F4                 3806         .word      LINK
                           001514  3807 LINK = . 
      001514 83                    3808 	.byte      IMEDD+3
      001515 41 46 54              3809         .ascii     "AFT"
      001518                       3810 AFT:
      001518 CD 04 7E         [ 4] 3811         CALL     DROP
      00151B CD 14 CB         [ 4] 3812         CALL     AHEAD
      00151E CD 0A BD         [ 4] 3813         CALL     HERE
      001521 CC 04 98         [ 2] 3814         JP     SWAPP
                                   3815 
                                   3816 ;       ABORT"      ( -- ; <string> )
                                   3817 ;       Conditional abort with an error message.
      001524 15 14                 3818         .word      LINK
                           001526  3819 LINK = . 
      001526 86                    3820 	.byte      IMEDD+6
      001527 41 42 4F 52 54        3821         .ascii     "ABORT"
      00152C 22                    3822         .byte      '"'
      00152D                       3823 ABRTQ:
      00152D CD 13 D3         [ 4] 3824         CALL     COMPI
                           000001  3825 .if PICATOUT_MOD
      001530 12 51                 3826         .word ABORQ
                           000000  3827 .else
                                   3828         CALL     ABORQ
                                   3829 .endif
      001532 CC 14 03         [ 2] 3830         JP     STRCQ
                                   3831 
                                   3832 ;       $"     ( -- ; <string> )
                                   3833 ;       Compile an inline string literal.
      001535 15 26                 3834         .word      LINK
                           001537  3835 LINK = . 
      001537 82                    3836 	.byte      IMEDD+2
      001538 24 22                 3837         .byte     '$','"'
      00153A                       3838 STRQ:
      00153A CD 13 D3         [ 4] 3839         CALL     COMPI
                           000001  3840 .if PICATOUT_MOD
      00153D 0E 6B                 3841         .word STRQP 
                           000000  3842 .else
                                   3843         CALL     STRQP
                                   3844 .endif
      00153F CC 14 03         [ 2] 3845         JP     STRCQ
                                   3846 
                                   3847 ;       ."          ( -- ; <string> )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                   3848 ;       Compile an inline string literal to be typed out at run time.
      001542 15 37                 3849         .word      LINK
                           001544  3850 LINK = . 
      001544 82                    3851 	.byte      IMEDD+2
      001545 2E 22                 3852         .byte     '.','"'
      001547                       3853 DOTQ:
      001547 CD 13 D3         [ 4] 3854         CALL     COMPI
                           000001  3855 .if PICATOUT_MOD
      00154A 0E 75                 3856         .word DOTQP 
                           000000  3857 .else
                                   3858         CALL     DOTQP
                                   3859 .endif 
      00154C CC 14 03         [ 2] 3860         JP     STRCQ
                                   3861 
                                   3862 ;; Name compiler
                                   3863 
                                   3864 ;       ?UNIQUE ( a -- a )
                                   3865 ;       Display a warning message
                                   3866 ;       if word already exists.
      00154F 15 44                 3867         .word      LINK
                           001551  3868 LINK = . 
      001551 07                    3869         .byte      7
      001552 3F 55 4E 49 51 55 45  3870         .ascii     "?UNIQUE"
      001559                       3871 UNIQU:
      001559 CD 04 88         [ 4] 3872         CALL     DUPP
      00155C CD 11 45         [ 4] 3873         CALL     NAMEQ   ;?name exists
      00155F CD 03 8C         [ 4] 3874         CALL     QBRAN
      001562 15 78                 3875         .word      UNIQ1
      001564 CD 0E 75         [ 4] 3876         CALL     DOTQP   ;redef are OK
      001567 07                    3877         .byte       7
      001568 20 72 65 44 65 66 20  3878         .ascii     " reDef "       
      00156F CD 04 B2         [ 4] 3879         CALL     OVER
      001572 CD 0A A6         [ 4] 3880         CALL     COUNT
      001575 CD 0E 18         [ 4] 3881         CALL     TYPES   ;just in case
      001578 CC 04 7E         [ 2] 3882 UNIQ1:  JP     DROP
                                   3883 
                                   3884 ;       $,n     ( na -- )
                                   3885 ;       Build a new dictionary name
                                   3886 ;       using string at na.
                           000001  3887 .if PICATOUT_MOD
                                   3888 ; compile dans l'espace des variables 
                                   3889 .endif 
      00157B 15 51                 3890         .word      LINK
                           00157D  3891 LINK = . 
      00157D 03                    3892         .byte      3
      00157E 24 2C 6E              3893         .ascii     "$,n"
      001581                       3894 SNAME:
      001581 CD 04 88         [ 4] 3895         CALL     DUPP
      001584 CD 03 FF         [ 4] 3896         CALL     CAT     ;?null input
      001587 CD 03 8C         [ 4] 3897         CALL     QBRAN
      00158A 15 B7                 3898         .word      PNAM1
      00158C CD 15 59         [ 4] 3899         CALL     UNIQU   ;?redefinition
      00158F CD 04 88         [ 4] 3900         CALL     DUPP
      001592 CD 0A A6         [ 4] 3901         CALL     COUNT
      001595 CD 06 83         [ 4] 3902         CALL     PLUS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      001598 CD 05 D6         [ 4] 3903         CALL     VPP
      00159B CD 03 CA         [ 4] 3904         CALL     STORE
      00159E CD 04 88         [ 4] 3905         CALL     DUPP
      0015A1 CD 05 F4         [ 4] 3906         CALL     LAST
      0015A4 CD 03 CA         [ 4] 3907         CALL     STORE   ;save na for vocabulary link
      0015A7 CD 09 46         [ 4] 3908         CALL     CELLM   ;link address
      0015AA CD 05 C8         [ 4] 3909         CALL     CNTXT
      0015AD CD 03 E1         [ 4] 3910         CALL     AT
      0015B0 CD 04 98         [ 4] 3911         CALL     SWAPP
      0015B3 CD 03 CA         [ 4] 3912         CALL     STORE
      0015B6 81               [ 4] 3913         RET     ;save code pointer
      0015B7 CD 0E 6B         [ 4] 3914 PNAM1:  CALL     STRQP
      0015BA 05                    3915         .byte      5
      0015BB 20 6E 61 6D 65        3916         .ascii     " name" ;null input
      0015C0 CC 12 59         [ 2] 3917         JP     ABOR1
                                   3918 
                                   3919 ;; FORTH compiler
                                   3920 
                                   3921 ;       $COMPILE        ( a -- )
                                   3922 ;       Compile next word to
                                   3923 ;       dictionary as a token or literal.
      0015C3 15 7D                 3924         .word      LINK
                           0015C5  3925 LINK = . 
      0015C5 08                    3926         .byte      8
      0015C6 24 43 4F 4D 50 49 4C  3927         .ascii     "$COMPILE"
             45
      0015CE                       3928 SCOMP:
      0015CE CD 11 45         [ 4] 3929         CALL     NAMEQ
      0015D1 CD 06 32         [ 4] 3930         CALL     QDUP    ;?defined
      0015D4 CD 03 8C         [ 4] 3931         CALL     QBRAN
      0015D7 15 EF                 3932         .word      SCOM2
      0015D9 CD 03 E1         [ 4] 3933         CALL     AT
      0015DC CD 03 59         [ 4] 3934         CALL     DOLIT
      0015DF 80 00                 3935         .word     0x8000	;  IMEDD*256
      0015E1 CD 04 D4         [ 4] 3936         CALL     ANDD    ;?immediate
      0015E4 CD 03 8C         [ 4] 3937         CALL     QBRAN
      0015E7 15 EC                 3938         .word      SCOM1
      0015E9 CC 03 B3         [ 2] 3939         JP     EXECU
      0015EC CC 16 86         [ 2] 3940 SCOM1:  JP     JSRC
      0015EF CD 0C E3         [ 4] 3941 SCOM2:  CALL     NUMBQ   ;try to convert to number
      0015F2 CD 03 8C         [ 4] 3942         CALL     QBRAN
      0015F5 12 59                 3943         .word      ABOR1
      0015F7 CC 13 F5         [ 2] 3944         JP     LITER
                                   3945 
                                   3946 ;       OVERT   ( -- )
                                   3947 ;       Link a new word into vocabulary.
      0015FA 15 C5                 3948         .word      LINK
                           0015FC  3949 LINK = . 
      0015FC 05                    3950         .byte      5
      0015FD 4F 56 45 52 54        3951         .ascii     "OVERT"
      001602                       3952 OVERT:
      001602 CD 05 F4         [ 4] 3953         CALL     LAST
      001605 CD 03 E1         [ 4] 3954         CALL     AT
      001608 CD 05 C8         [ 4] 3955         CALL     CNTXT
      00160B CC 03 CA         [ 2] 3956         JP     STORE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                                   3957 
                                   3958 ;       ;       ( -- )
                                   3959 ;       Terminate a colon definition.
      00160E 15 FC                 3960         .word      LINK
                           001610  3961 LINK = . 
      001610 C1                    3962 	.byte      IMEDD+COMPO+1
      001611 3B                    3963         .ascii     ";"
      001612                       3964 SEMIS:
      001612 CD 13 D3         [ 4] 3965         CALL     COMPI
                           000001  3966 .if PICATOUT_MOD
      001615 03 C3                 3967         .word EXIT 
                           000000  3968 .else
                                   3969         CALL     EXIT
                                   3970 .endif 
      001617 CD 12 BA         [ 4] 3971         CALL     LBRAC
                           000001  3972 .if PICATOUT_MOD
      00161A CD 16 02         [ 4] 3973         call OVERT 
      00161D CD 1F 34         [ 4] 3974         CALL FMOVE
      001620 CD 06 32         [ 4] 3975         call QDUP 
      001623 CD 03 8C         [ 4] 3976         call QBRAN 
      001626 17 56                 3977         .word SET_RAMLAST 
      001628 CD 1F C8         [ 4] 3978         CALL UPDATPTR 
      00162B 81               [ 4] 3979 1$:     RET 
                           000000  3980 .else 
                                   3981         JP     OVERT
                                   3982 .endif 
                                   3983 
                           000001  3984 .if PICATOUT_MOD
                                   3985 ;       Terminate an ISR definition 
                                   3986 ;       retourn ca of ISR as double
                                   3987 ;       I; ( -- ud )
      00162C 16 10                 3988         .word LINK 
                           00162E  3989         LINK=.
      00162E C2                    3990         .byte 2+IMEDD+COMPO 
      00162F 49 3B                 3991         .ascii "I;" 
      001631                       3992 ISEMI:
      001631 1D 00 02         [ 2] 3993         subw x,#CELLL  
      001634 90 AE 00 80      [ 2] 3994         ldw y,#IRET_CODE 
      001638 FF               [ 2] 3995         ldw (x),y 
      001639 CD 13 A5         [ 4] 3996         call CCOMMA
      00163C CD 12 BA         [ 4] 3997         call LBRAC 
      00163F CD 20 0D         [ 4] 3998         call IFMOVE
      001642 CD 06 32         [ 4] 3999         call QDUP 
      001645 CD 03 8C         [ 4] 4000         CALL QBRAN 
      001648 17 56                 4001         .word SET_RAMLAST
      00164A CD 05 E4         [ 4] 4002         CALL CPP
      00164D CD 03 E1         [ 4] 4003         call AT 
      001650 CD 04 98         [ 4] 4004         call SWAPP 
      001653 CD 05 E4         [ 4] 4005         CALL CPP 
      001656 CD 03 CA         [ 4] 4006         call STORE 
      001659 CD 1A 51         [ 4] 4007         call UPDATCP 
      00165C CD 1A 0E         [ 4] 4008         call EEPVP 
      00165F CD 04 7E         [ 4] 4009         call DROP 
      001662 CD 03 E1         [ 4] 4010         call AT 
      001665 CD 05 D6         [ 4] 4011         call VPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      001668 CD 03 CA         [ 4] 4012         call STORE 
      00166B CC 09 CE         [ 2] 4013         jp ZERO
      00166E 81               [ 4] 4014         ret           
                                   4015         
                                   4016 .endif ;PICATOUT_MOD
                                   4017 
                                   4018 ;       ]       ( -- )
                                   4019 ;       Start compiling words in
                                   4020 ;       input stream.
      00166F 16 2E                 4021         .word      LINK
                           001671  4022 LINK = . 
      001671 01                    4023         .byte      1
      001672 5D                    4024         .ascii     "]"
      001673                       4025 RBRAC:
      001673 CD 03 59         [ 4] 4026         CALL   DOLIT
      001676 15 CE                 4027         .word  SCOMP
      001678 CD 05 A6         [ 4] 4028         CALL   TEVAL
      00167B CC 03 CA         [ 2] 4029         JP     STORE
                                   4030 
                                   4031 ;       CALL,    ( ca -- )
                                   4032 ;       Compile a subroutine call.
      00167E 16 71                 4033         .word      LINK
                           001680  4034 LINK = . 
      001680 05                    4035         .byte      5
      001681 43 41 4C 4C 2C        4036         .ascii     "CALL,"
      001686                       4037 JSRC:
      001686 CD 03 59         [ 4] 4038         CALL     DOLIT
      001689 00 CD                 4039         .word     CALLL     ;CALL
      00168B CD 13 A5         [ 4] 4040         CALL     CCOMMA
      00168E CC 13 8E         [ 2] 4041         JP     COMMA
                                   4042 
                           000001  4043 .if PICATOUT_MOD
                                   4044 ;       INIT-OFS ( -- )
                                   4045 ;       compute offset to adjust jump address 
                                   4046 ;       set variable OFFSET 
      001691 16 80                 4047         .word LINK 
                           001693  4048         LINK=.
      001693 08                    4049         .byte 8 
      001694 49 4E 49 54 2D 4F 46  4050         .ascii "INIT-OFS" 
             53
      00169C                       4051 INITOFS:
      00169C CD 05 95         [ 4] 4052         call TFLASH 
      00169F CD 03 E1         [ 4] 4053         CALL AT 
      0016A2 CD 04 88         [ 4] 4054         CALL DUPP 
      0016A5 CD 03 8C         [ 4] 4055         call QBRAN
      0016A8 16 B9                 4056         .word 1$
      0016AA CD 04 7E         [ 4] 4057         call DROP  
      0016AD CD 05 E4         [ 4] 4058         call CPP 
      0016B0 CD 03 E1         [ 4] 4059         call AT 
      0016B3 CD 0A BD         [ 4] 4060         call HERE
      0016B6 CD 06 E1         [ 4] 4061         call SUBB 
      0016B9 CD 06 19         [ 4] 4062 1$:     call OFFSET 
      0016BC CC 03 CA         [ 2] 4063         jp STORE  
                                   4064 .endif 
                                   4065 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                   4066 ;       :       ( -- ; <string> )
                                   4067 ;       Start a new colon definition
                                   4068 ;       using next word as its name.
      0016BF 16 93                 4069         .word      LINK
                           0016C1  4070 LINK = . 
      0016C1 01                    4071         .byte      1
      0016C2 3A                    4072         .ascii     ":"
      0016C3                       4073 COLON:
                           000001  4074 .if PICATOUT_MOD
      0016C3 CD 16 9C         [ 4] 4075         call INITOFS       
                                   4076 .endif ; PICATOUT_MOD
      0016C6 CD 10 48         [ 4] 4077         CALL   TOKEN
      0016C9 CD 15 81         [ 4] 4078         CALL   SNAME
      0016CC CC 16 73         [ 2] 4079         JP     RBRAC
                                   4080 
                           000001  4081 .if PICATOUT_MOD 
                                   4082 ;       I:  ( -- )
                                   4083 ;       Start interrupt service routine definition
                                   4084 ;       those definition have no name.
      0016CF 16 C1                 4085         .word LINK
                           0016D1  4086         LINK=.
      0016D1 02                    4087         .byte 2 
      0016D2 49 3A                 4088         .ascii "I:" 
      0016D4                       4089 ICOLON:
      0016D4 CD 16 9C         [ 4] 4090         call INITOFS 
      0016D7 CC 16 73         [ 2] 4091         jp RBRAC  
                                   4092 .endif ; PICATOUT_MOD
                                   4093 
                                   4094 ;       IMMEDIATE       ( -- )
                                   4095 ;       Make last compiled word
                                   4096 ;       an immediate word.
      0016DA 16 D1                 4097         .word      LINK
                           0016DC  4098 LINK = . 
      0016DC 09                    4099         .byte      9
      0016DD 49 4D 4D 45 44 49 41  4100         .ascii     "IMMEDIATE"
             54 45
      0016E6                       4101 IMMED:
      0016E6 CD 03 59         [ 4] 4102         CALL     DOLIT
      0016E9 80 00                 4103         .word     0x8000	;  IMEDD*256
      0016EB CD 05 F4         [ 4] 4104         CALL     LAST
      0016EE CD 03 E1         [ 4] 4105         CALL     AT
      0016F1 CD 03 E1         [ 4] 4106         CALL     AT
      0016F4 CD 04 E8         [ 4] 4107         CALL     ORR
      0016F7 CD 05 F4         [ 4] 4108         CALL     LAST
      0016FA CD 03 E1         [ 4] 4109         CALL     AT
      0016FD CC 03 CA         [ 2] 4110         JP     STORE
                                   4111 
                                   4112 ;; Defining words
                                   4113 
                                   4114 ;       CREATE  ( -- ; <string> )
                                   4115 ;       Compile a new array
                                   4116 ;       without allocating space.
      001700 16 DC                 4117         .word      LINK
                           001702  4118 LINK = . 
      001702 06                    4119         .byte      6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      001703 43 52 45 41 54 45     4120         .ascii     "CREATE"
      001709                       4121 CREAT:
      001709 CD 10 48         [ 4] 4122         CALL     TOKEN
      00170C CD 15 81         [ 4] 4123         CALL     SNAME
      00170F CD 16 02         [ 4] 4124         CALL     OVERT        
      001712 CD 13 D3         [ 4] 4125         CALL     COMPI 
                           000001  4126 .if PICATOUT_MOD
      001715 05 35                 4127         .word DOVAR 
                           000000  4128 .else
                                   4129         CALL     DOVAR
                                   4130 .endif 
      001717 81               [ 4] 4131         RET
                                   4132 
                                   4133 ;       VARIABLE        ( -- ; <string> )
                                   4134 ;       Compile a new variable
                                   4135 ;       initialized to 0.
      001718 17 02                 4136         .word      LINK
                           00171A  4137 LINK = . 
      00171A 08                    4138         .byte      8
      00171B 56 41 52 49 41 42 4C  4139         .ascii     "VARIABLE"
             45
      001723                       4140 VARIA:
                           000001  4141 .if PICATOUT_MOD
                                   4142 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      001723 CD 0A BD         [ 4] 4143         CALL HERE
      001726 CD 04 88         [ 4] 4144         CALL DUPP 
      001729 CD 09 37         [ 4] 4145         CALL CELLP
      00172C CD 05 D6         [ 4] 4146         CALL VPP 
      00172F CD 03 CA         [ 4] 4147         CALL STORE
                                   4148 .endif         
      001732 CD 17 09         [ 4] 4149         CALL CREAT
      001735 CD 04 88         [ 4] 4150         CALL DUPP
      001738 CD 13 8E         [ 4] 4151         CALL COMMA
      00173B CD 09 CE         [ 4] 4152         CALL ZERO
                           000001  4153 .if PICATOUT_MOD 
      00173E CD 04 98         [ 4] 4154         call SWAPP 
      001741 CD 03 CA         [ 4] 4155         CALL STORE
      001744 CD 1F 34         [ 4] 4156         CALL FMOVE ; move definition to FLASH
      001747 CD 06 32         [ 4] 4157         CALL QDUP 
      00174A CD 03 8C         [ 4] 4158         CALL QBRAN 
      00174D 17 56                 4159         .word SET_RAMLAST   
      00174F CD 1A 68         [ 4] 4160         call UPDATVP  ; don't update if variable kept in RAM.
      001752 CD 1F C8         [ 4] 4161         CALL UPDATPTR
      001755 81               [ 4] 4162         RET         
      001756                       4163 SET_RAMLAST: 
      001756 CD 05 F4         [ 4] 4164         CALL LAST 
      001759 CD 03 E1         [ 4] 4165         CALL AT 
      00175C CD 06 07         [ 4] 4166         CALL RAMLAST 
      00175F CC 03 CA         [ 2] 4167         jp STORE  
                                   4168 
                                   4169 .endif ;PICATOUT_MOD        
                                   4170 
                           000001  4171 .if PICATOUT_MOD
                                   4172 ;       CONSTANT  ( n -- ; <string> )
                                   4173 ;       Compile a new constant 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                   4174 ;       n CONSTANT name 
      001762 17 1A                 4175         .word LINK 
                           001764  4176         LINK=. 
      001764 08                    4177         .byte 8 
      001765 43 4F 4E 53 54 41 4E  4178         .ascii "CONSTANT" 
             54
      00176D                       4179 CONSTANT:          
      00176D CD 10 48         [ 4] 4180         CALL TOKEN
      001770 CD 15 81         [ 4] 4181         CALL SNAME 
      001773 CD 16 02         [ 4] 4182         CALL OVERT 
      001776 CD 13 D3         [ 4] 4183         CALL COMPI 
                           000001  4184 .if PICATOUT_MOD
      001779 17 97                 4185         .word DOCONST
                           000000  4186 .else
                                   4187         CALL DOCONST
                                   4188 .endif 
      00177B CD 13 8E         [ 4] 4189         CALL COMMA 
      00177E CD 1F 34         [ 4] 4190         CALL FMOVE
      001781 CD 06 32         [ 4] 4191         CALL QDUP 
      001784 CD 03 8C         [ 4] 4192         CALL QBRAN 
      001787 17 56                 4193         .word SET_RAMLAST  
      001789 CD 1F C8         [ 4] 4194         CALL UPDATPTR  
      00178C 81               [ 4] 4195 1$:     RET          
                                   4196 
                                   4197 ; CONSTANT runtime semantic 
                                   4198 ; doCONST  ( -- n )
      00178D 17 64                 4199         .word LINK 
                           00178F  4200         LINK=.
      00178F 07                    4201         .byte 7
      001790 44 4F 43 4F 4E 53 54  4202         .ascii "DOCONST"
      001797                       4203 DOCONST:
      001797 1D 00 02         [ 2] 4204         subw x,#CELLL
      00179A 90 85            [ 2] 4205         popw y 
      00179C 90 FE            [ 2] 4206         ldw y,(y) 
      00179E FF               [ 2] 4207         ldw (x),y 
      00179F 81               [ 4] 4208         ret 
                                   4209 .endif ;PICATOUT_MOD
                                   4210 
                                   4211 
                                   4212 ;; Tools
                                   4213 
                                   4214 ;       _TYPE   ( b u -- )
                                   4215 ;       Display a string. Filter
                                   4216 ;       non-printing characters.
      0017A0 17 8F                 4217         .word      LINK
                           0017A2  4218 LINK = . 
      0017A2 05                    4219         .byte      5
      0017A3 5F 54 59 50 45        4220         .ascii     "_TYPE"
      0017A8                       4221 UTYPE:
      0017A8 CD 04 51         [ 4] 4222         CALL     TOR     ;start count down loop
      0017AB 20 0F            [ 2] 4223         JRA     UTYP2   ;skip first pass
      0017AD CD 04 88         [ 4] 4224 UTYP1:  CALL     DUPP
      0017B0 CD 03 FF         [ 4] 4225         CALL     CAT
      0017B3 CD 09 F8         [ 4] 4226         CALL     TCHAR
      0017B6 CD 03 43         [ 4] 4227         CALL     EMIT    ;display only printable
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      0017B9 CD 09 62         [ 4] 4228         CALL     ONEP    ;increment address
      0017BC CD 03 6D         [ 4] 4229 UTYP2:  CALL     DONXT
      0017BF 17 AD                 4230         .word      UTYP1   ;loop till done
      0017C1 CC 04 7E         [ 2] 4231         JP     DROP
                                   4232 
                                   4233 ;       dm+     ( a u -- a )
                                   4234 ;       Dump u bytes from ,
                                   4235 ;       leaving a+u on  stack.
      0017C4 17 A2                 4236         .word      LINK
                           0017C6  4237 LINK = . 
      0017C6 03                    4238         .byte      3
      0017C7 64 6D 2B              4239         .ascii     "dm+"
      0017CA                       4240 DUMPP:
      0017CA CD 04 B2         [ 4] 4241         CALL     OVER
      0017CD CD 03 59         [ 4] 4242         CALL     DOLIT
      0017D0 00 04                 4243         .word      4
      0017D2 CD 0E 9E         [ 4] 4244         CALL     UDOTR   ;display address
      0017D5 CD 0D EE         [ 4] 4245         CALL     SPACE
      0017D8 CD 04 51         [ 4] 4246         CALL     TOR     ;start count down loop
      0017DB 20 11            [ 2] 4247         JRA     PDUM2   ;skip first pass
      0017DD CD 04 88         [ 4] 4248 PDUM1:  CALL     DUPP
      0017E0 CD 03 FF         [ 4] 4249         CALL     CAT
      0017E3 CD 03 59         [ 4] 4250         CALL     DOLIT
      0017E6 00 03                 4251         .word      3
      0017E8 CD 0E 9E         [ 4] 4252         CALL     UDOTR   ;display numeric data
      0017EB CD 09 62         [ 4] 4253         CALL     ONEP    ;increment address
      0017EE CD 03 6D         [ 4] 4254 PDUM2:  CALL     DONXT
      0017F1 17 DD                 4255         .word      PDUM1   ;loop till done
      0017F3 81               [ 4] 4256         RET
                                   4257 
                                   4258 ;       DUMP    ( a u -- )
                                   4259 ;       Dump u bytes from a,
                                   4260 ;       in a formatted manner.
      0017F4 17 C6                 4261         .word      LINK
                           0017F6  4262 LINK = . 
      0017F6 04                    4263         .byte      4
      0017F7 44 55 4D 50           4264         .ascii     "DUMP"
      0017FB                       4265 DUMP:
      0017FB CD 05 45         [ 4] 4266         CALL     BASE
      0017FE CD 03 E1         [ 4] 4267         CALL     AT
      001801 CD 04 51         [ 4] 4268         CALL     TOR
      001804 CD 0C 76         [ 4] 4269         CALL     HEX     ;save radix, set hex
      001807 CD 03 59         [ 4] 4270         CALL     DOLIT
      00180A 00 10                 4271         .word      16
      00180C CD 08 88         [ 4] 4272         CALL     SLASH   ;change count to lines
      00180F CD 04 51         [ 4] 4273         CALL     TOR     ;start count down loop
      001812 CD 0E 36         [ 4] 4274 DUMP1:  CALL     CR
      001815 CD 03 59         [ 4] 4275         CALL     DOLIT
      001818 00 10                 4276         .word      16
      00181A CD 06 6E         [ 4] 4277         CALL     DDUP
      00181D CD 17 CA         [ 4] 4278         CALL     DUMPP   ;display numeric
      001820 CD 06 43         [ 4] 4279         CALL     ROT
      001823 CD 06 43         [ 4] 4280         CALL     ROT
      001826 CD 0D EE         [ 4] 4281         CALL     SPACE
      001829 CD 0D EE         [ 4] 4282         CALL     SPACE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      00182C CD 17 A8         [ 4] 4283         CALL     UTYPE   ;display printable characters
      00182F CD 03 6D         [ 4] 4284         CALL     DONXT
      001832 18 12                 4285         .word      DUMP1   ;loop till done
      001834 CD 04 7E         [ 4] 4286 DUMP3:  CALL     DROP
      001837 CD 04 32         [ 4] 4287         CALL     RFROM
      00183A CD 05 45         [ 4] 4288         CALL     BASE
      00183D CC 03 CA         [ 2] 4289         JP     STORE   ;restore radix
                                   4290 
                                   4291 ;       .S      ( ... -- ... )
                                   4292 ;        Display  contents of stack.
      001840 17 F6                 4293         .word      LINK
                           001842  4294 LINK = . 
      001842 02                    4295         .byte      2
      001843 2E 53                 4296         .ascii     ".S"
      001845                       4297 DOTS:
      001845 CD 0E 36         [ 4] 4298         CALL     CR
      001848 CD 0A 11         [ 4] 4299         CALL     DEPTH   ;stack depth
      00184B CD 04 51         [ 4] 4300         CALL     TOR     ;start count down loop
      00184E 20 09            [ 2] 4301         JRA     DOTS2   ;skip first pass
      001850 CD 04 45         [ 4] 4302 DOTS1:  CALL     RAT
                           000001  4303 .if PICATOUT_MOD
                                   4304 ; Not required following modification I made To PICK 
                                   4305 ;        CALL ONEP
                                   4306 .endif 
      001853 CD 0A 28         [ 4] 4307 	CALL     PICK
      001856 CD 0E D1         [ 4] 4308         CALL     DOT     ;index stack, display contents
      001859 CD 03 6D         [ 4] 4309 DOTS2:  CALL     DONXT
      00185C 18 50                 4310         .word      DOTS1   ;loop till done
      00185E CD 0E 75         [ 4] 4311         CALL     DOTQP
      001861 05                    4312         .byte      5
      001862 20 3C 73 70 20        4313         .ascii     " <sp "
      001867 81               [ 4] 4314         RET
                                   4315 
                                   4316 ;       >NAME   ( ca -- na | F )
                                   4317 ;       Convert code address
                                   4318 ;       to a name address.
      001868 18 42                 4319         .word      LINK
                           00186A  4320 LINK = . 
      00186A 05                    4321         .byte      5
      00186B 3E 4E 41 4D 45        4322         .ascii     ">NAME"
      001870                       4323 TNAME:
      001870 CD 05 C8         [ 4] 4324         CALL     CNTXT   ;vocabulary link
      001873 CD 03 E1         [ 4] 4325 TNAM2:  CALL     AT
      001876 CD 04 88         [ 4] 4326         CALL     DUPP    ;?last word in a vocabulary
      001879 CD 03 8C         [ 4] 4327         CALL     QBRAN
      00187C 18 97                 4328         .word      TNAM4
      00187E CD 06 6E         [ 4] 4329         CALL     DDUP
      001881 CD 10 56         [ 4] 4330         CALL     NAMET
      001884 CD 04 FD         [ 4] 4331         CALL     XORR    ;compare
      001887 CD 03 8C         [ 4] 4332         CALL     QBRAN
      00188A 18 91                 4333         .word      TNAM3
      00188C CD 09 46         [ 4] 4334         CALL     CELLM   ;continue with next word
      00188F 20 E2            [ 2] 4335         JRA     TNAM2
      001891 CD 04 98         [ 4] 4336 TNAM3:  CALL     SWAPP
      001894 CC 04 7E         [ 2] 4337         JP     DROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      001897 CD 06 63         [ 4] 4338 TNAM4:  CALL     DDROP
      00189A CC 09 CE         [ 2] 4339         JP     ZERO
                                   4340 
                                   4341 ;       .ID     ( na -- )
                                   4342 ;        Display  name at address.
      00189D 18 6A                 4343         .word      LINK
                           00189F  4344 LINK = . 
      00189F 03                    4345         .byte      3
      0018A0 2E 49 44              4346         .ascii     ".ID"
      0018A3                       4347 DOTID:
      0018A3 CD 06 32         [ 4] 4348         CALL     QDUP    ;if zero no name
      0018A6 CD 03 8C         [ 4] 4349         CALL     QBRAN
      0018A9 18 B9                 4350         .word      DOTI1
      0018AB CD 0A A6         [ 4] 4351         CALL     COUNT
      0018AE CD 03 59         [ 4] 4352         CALL     DOLIT
      0018B1 00 1F                 4353         .word      0x1F
      0018B3 CD 04 D4         [ 4] 4354         CALL     ANDD    ;mask lexicon bits
      0018B6 CC 17 A8         [ 2] 4355         JP     UTYPE
      0018B9 CD 0E 75         [ 4] 4356 DOTI1:  CALL     DOTQP
      0018BC 09                    4357         .byte      9
      0018BD 20 6E 6F 4E 61 6D 65  4358         .ascii     " noName"
      0018C4 81               [ 4] 4359         RET
                                   4360 
                           000000  4361 WANT_SEE=0 
                           000000  4362 .if WANT_SEE 
                                   4363 ;       SEE     ( -- ; <string> )
                                   4364 ;       A simple decompiler.
                                   4365 ;       Updated for byte machines.
                                   4366         .word      LINK
                                   4367 LINK = . 
                                   4368         .byte      3
                                   4369         .ascii     "SEE"
                                   4370 SEE:
                                   4371         CALL     TICK    ;starting address
                                   4372         CALL     CR
                                   4373         CALL     ONEM
                                   4374 SEE1:   CALL     ONEP
                                   4375         CALL     DUPP
                                   4376         CALL     AT
                                   4377         CALL     DUPP    ;?does it contain a zero
                                   4378         CALL     QBRAN
                                   4379         .word    SEE2
                                   4380         CALL     TNAME   ;?is it a name
                                   4381 SEE2:   CALL     QDUP    ;name address or zero
                                   4382         CALL     QBRAN
                                   4383         .word    SEE3
                                   4384         CALL     SPACE
                                   4385         CALL     DOTID   ;display name
                                   4386         CALL     ONEP
                                   4387         JRA      SEE4
                                   4388 SEE3:   CALL     DUPP
                                   4389         CALL     CAT
                                   4390         CALL     UDOT    ;display number
                                   4391 SEE4:   CALL     NUFQ    ;user control
                                   4392         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                   4393         .word    SEE1
                                   4394         JP     DROP
                                   4395 .endif ; WANT_SEE 
                                   4396 
                                   4397 ;       WORDS   ( -- )
                                   4398 ;       Display names in vocabulary.
      0018C5 18 9F                 4399         .word      LINK
                           0018C7  4400 LINK = . 
      0018C7 05                    4401         .byte      5
      0018C8 57 4F 52 44 53        4402         .ascii     "WORDS"
      0018CD                       4403 WORDS:
      0018CD CD 0E 36         [ 4] 4404         CALL     CR
      0018D0 CD 05 C8         [ 4] 4405         CALL     CNTXT   ;only in context
      0018D3 CD 03 E1         [ 4] 4406 WORS1:  CALL     AT
      0018D6 CD 06 32         [ 4] 4407         CALL     QDUP    ;?at end of list
      0018D9 CD 03 8C         [ 4] 4408         CALL     QBRAN
      0018DC 18 F2                 4409         .word      WORS2
      0018DE CD 04 88         [ 4] 4410         CALL     DUPP
      0018E1 CD 0D EE         [ 4] 4411         CALL     SPACE
      0018E4 CD 18 A3         [ 4] 4412         CALL     DOTID   ;display a name
      0018E7 CD 09 46         [ 4] 4413         CALL     CELLM
      0018EA CD 03 A3         [ 4] 4414         CALL     BRAN
      0018ED 18 D3                 4415         .word      WORS1
      0018EF CD 04 7E         [ 4] 4416         CALL     DROP
      0018F2 81               [ 4] 4417 WORS2:  RET
                                   4418 
                                   4419         
                                   4420 ;; Hardware reset
                                   4421 
                                   4422 ;       hi      ( -- )
                                   4423 ;       Display sign-on message.
      0018F3 18 C7                 4424         .word      LINK
                           0018F5  4425 LINK = . 
      0018F5 02                    4426         .byte      2
      0018F6 68 69                 4427         .ascii     "hi"
      0018F8                       4428 HI:
      0018F8 CD 0E 36         [ 4] 4429         CALL     CR
      0018FB CD 0E 75         [ 4] 4430         CALL     DOTQP   ;initialize I/O
      0018FE 0F                    4431         .byte      15
      0018FF 73 74 6D 38 65 46 6F  4432         .ascii     "stm8eForth v"
             72 74 68 20 76
      00190B 33                    4433 	.byte      VER+'0'
      00190C 2E                    4434         .byte      '.' 
      00190D 30                    4435 	.byte      EXT+'0' ;version
      00190E CC 0E 36         [ 2] 4436         JP     CR
                                   4437 
                           000000  4438 WANT_DEBUG=0
                           000000  4439 .if WANT_DEBUG 
                                   4440 ;       DEBUG      ( -- )
                                   4441 ;       Display sign-on message.
                                   4442 ;        .word      LINK
                                   4443 LINK = . 
                                   4444         .byte      5
                                   4445         .ascii     "DEBUG"
                                   4446 DEBUG:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                   4447 	CALL DOLIT
                                   4448 	.word 0x65
                                   4449 	CALL EMIT
                                   4450 	CALL DOLIT
                                   4451 	.word 0
                                   4452  	CALL ZLESS 
                                   4453 	CALL DOLIT
                                   4454 	.word 0xFFFE
                                   4455 	CALL ZLESS 
                                   4456 	CALL UPLUS 
                                   4457  	CALL DROP 
                                   4458 	CALL DOLIT
                                   4459 	.word 3
                                   4460 	CALL UPLUS 
                                   4461 	CALL UPLUS 
                                   4462  	CALL DROP
                                   4463 	CALL DOLIT
                                   4464 	.word 0x43
                                   4465 	CALL UPLUS 
                                   4466  	CALL DROP
                                   4467 	CALL EMIT
                                   4468 	CALL DOLIT
                                   4469 	.word 0x4F
                                   4470 	CALL DOLIT
                                   4471 	.word 0x6F
                                   4472  	CALL XORR
                                   4473 	CALL DOLIT
                                   4474 	.word 0xF0
                                   4475  	CALL ANDD
                                   4476 	CALL DOLIT
                                   4477 	.word 0x4F
                                   4478  	CALL ORR
                                   4479 	CALL EMIT
                                   4480 	CALL DOLIT
                                   4481 	.word 8
                                   4482 	CALL DOLIT
                                   4483 	.word 6
                                   4484  	CALL SWAPP
                                   4485 	CALL OVER
                                   4486 	CALL XORR
                                   4487 	CALL DOLIT
                                   4488 	.word 3
                                   4489 	CALL ANDD 
                                   4490 	CALL ANDD
                                   4491 	CALL DOLIT
                                   4492 	.word 0x70
                                   4493 	CALL UPLUS 
                                   4494 	CALL DROP
                                   4495 	CALL EMIT
                                   4496 	CALL DOLIT
                                   4497 	.word 0
                                   4498 	CALL QBRAN
                                   4499 	.word DEBUG1
                                   4500 	CALL DOLIT
                                   4501 	.word 0x3F
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                   4502 DEBUG1:
                                   4503 	CALL DOLIT
                                   4504 	.word 0xFFFF
                                   4505 	CALL QBRAN
                                   4506 	.word DEBUG2
                                   4507 	CALL DOLIT
                                   4508 	.word 0x74
                                   4509 	CALL BRAN
                                   4510 	.word DEBUG3
                                   4511 DEBUG2:
                                   4512 	CALL DOLIT
                                   4513 	.word 0x21
                                   4514 DEBUG3:
                                   4515 	CALL EMIT
                                   4516 	CALL DOLIT
                                   4517 	.word 0x68
                                   4518 	CALL DOLIT
                                   4519 	.word 0x80
                                   4520 	CALL STORE
                                   4521 	CALL DOLIT
                                   4522 	.word 0x80
                                   4523 	CALL AT
                                   4524 	CALL EMIT
                                   4525 	CALL DOLIT
                                   4526 	.word 0x4D
                                   4527 	CALL TOR
                                   4528 	CALL RAT
                                   4529 	CALL RFROM
                                   4530 	CALL ANDD
                                   4531 	CALL EMIT
                                   4532 	CALL DOLIT
                                   4533 	.word 0x61
                                   4534 	CALL DOLIT
                                   4535 	.word 0xA
                                   4536 	CALL TOR
                                   4537 DEBUG4:
                                   4538 	CALL DOLIT
                                   4539 	.word 1
                                   4540 	CALL UPLUS 
                                   4541 	CALL DROP
                                   4542 	CALL DONXT
                                   4543 	.word DEBUG4
                                   4544 	CALL EMIT
                                   4545 	CALL DOLIT
                                   4546 	.word 0x656D
                                   4547 	CALL DOLIT
                                   4548 	.word 0x100
                                   4549 	CALL UMSTA
                                   4550 	CALL SWAPP
                                   4551 	CALL DOLIT
                                   4552 	.word 0x100
                                   4553 	CALL UMSTA
                                   4554 	CALL SWAPP 
                                   4555 	CALL DROP
                                   4556 	CALL EMIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                   4557 	CALL EMIT
                                   4558 	CALL DOLIT
                                   4559 	.word 0x2043
                                   4560 	CALL DOLIT
                                   4561 	.word 0
                                   4562 	CALL DOLIT
                                   4563 	.word 0x100
                                   4564 	CALL UMMOD
                                   4565 	CALL EMIT
                                   4566 	CALL EMIT
                                   4567 	;JP ORIG
                                   4568 	RET
                                   4569 .endif ; WANT_DEBUG 
                                   4570 
                                   4571 
                                   4572 ;       'BOOT   ( -- a )
                                   4573 ;       The application startup vector.
      001911 18 F5                 4574         .word      LINK
                           001913  4575 LINK = . 
      001913 05                    4576         .byte      5
      001914 27 42 4F 4F 54        4577         .ascii     "'BOOT"
      001919                       4578 TBOOT:
      001919 CD 05 35         [ 4] 4579         CALL     DOVAR
      00191C 40 02                 4580         .word    APP_RUN      ;application to boot
                                   4581 
                                   4582 ;       COLD    ( -- )
                                   4583 ;       The hilevel cold start s=ence.
      00191E 19 13                 4584         .word      LINK
                           001920  4585         LINK = . 
      001920 04                    4586         .byte      4
      001921 43 4F 4C 44           4587         .ascii     "COLD"
      001925                       4588 COLD:
                           000000  4589 .if WANT_DEBUG
                                   4590         CALL DEBUG
                                   4591 .endif 
      001925 CD 03 59         [ 4] 4592 COLD1:  CALL     DOLIT
      001928 00 27                 4593         .word      UZERO
      00192A CD 03 59         [ 4] 4594 	CALL     DOLIT
      00192D 00 06                 4595         .word      UPP
      00192F CD 03 59         [ 4] 4596         CALL     DOLIT
      001932 00 1A                 4597 	.word      UEND-UZERO
      001934 CD 0B 0A         [ 4] 4598         CALL     CMOVE   ;initialize user area
                                   4599 
                           000001  4600 .if PICATOUT_MOD
                                   4601 ; if APP_RUN==0 initialize with ca de 'hi'  
      001937 90 CE 40 02      [ 2] 4602         ldw y,APP_RUN 
      00193B 26 0B            [ 1] 4603         jrne 0$
      00193D 1D 00 02         [ 2] 4604         subw x,#CELLL 
      001940 90 AE 18 F8      [ 2] 4605         ldw y,#HI  
      001944 FF               [ 2] 4606         ldw (x),y
      001945 CD 1A 40         [ 4] 4607         call UPDATRUN 
      001948                       4608 0$:        
                                   4609 ; update LAST with APP_LAST 
                                   4610 ; if APP_LAST > LAST else do the opposite
      001948 90 CE 40 00      [ 2] 4611         ldw y,APP_LAST 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      00194C 90 B3 1A         [ 2] 4612         cpw y,ULAST 
      00194F 22 05            [ 1] 4613         jrugt 1$ 
                                   4614 ; save LAST at APP_LAST  
      001951 CD 1A 28         [ 4] 4615         call UPDATLAST 
      001954 20 06            [ 2] 4616         jra 2$
      001956                       4617 1$: ; update LAST with APP_LAST 
      001956 90 BF 1A         [ 2] 4618         ldw ULAST,y
      001959 90 BF 14         [ 2] 4619         ldw UCNTXT,y
      00195C                       4620 2$:  
                                   4621 ; update APP_CP if < app_space 
      00195C 90 CE 40 04      [ 2] 4622         ldw y,APP_CP  
      001960 90 B3 18         [ 2] 4623         cpw y,UCP   
      001963 24 06            [ 1] 4624         jruge 3$ 
      001965 CD 1A 51         [ 4] 4625         call UPDATCP
      001968 90 BE 18         [ 2] 4626         ldw y,UCP   
      00196B                       4627 3$:
      00196B 90 BF 18         [ 2] 4628         ldw UCP,y                 
                                   4629 ; update UVP with APP_VP  
                                   4630 ; if APP_VP>UVP else do the opposite 
      00196E 90 CE 40 06      [ 2] 4631         ldw y,APP_VP 
      001972 90 B3 16         [ 2] 4632         cpw y,UVP 
      001975 22 05            [ 1] 4633         jrugt 4$
      001977 CD 1A 68         [ 4] 4634         call UPDATVP 
      00197A 20 03            [ 2] 4635         jra 6$
      00197C                       4636 4$: ; update UVP with APP_VP 
      00197C 90 BF 16         [ 2] 4637         ldw UVP,y 
      00197F                       4638 6$:      
                                   4639 .endif ; PICATOUT_MOD
      00197F CD 13 39         [ 4] 4640         CALL     PRESE   ;initialize data stack and TIB
      001982 CD 19 19         [ 4] 4641         CALL     TBOOT
      001985 CD 0A F3         [ 4] 4642         CALL     ATEXE   ;application boot
      001988 CD 16 02         [ 4] 4643         CALL     OVERT
      00198B CC 13 56         [ 2] 4644         JP     QUIT    ;start interpretation
                                   4645 
                           000001  4646 .if PICATOUT_MOD
                                   4647         ; keep this include at end 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                   4648         .include "flash.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21 ;  routines to write to FLASH, EEPROM 
                                     22 ;  and OPTION 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26 ;--------------------------------
                                     27 ; initialize FPTR 
                                     28 ; FP!  ( ud -- )
                                     29 ;---------------------------------
      00198E 19 20                   30     .word LINK 
                           001990    31     LINK=.
      001990 03                      32     .byte 3 
      001991 46 50 21                33     .ascii "FP!"
      001994                         34 fptr_store:
      001994 90 93            [ 1]   35     ldw y,x
      001996 90 FE            [ 2]   36     ldw y,(y)
      001998 90 9F            [ 1]   37     ld a,yl 
      00199A B7 32            [ 1]   38     ld FPTR,a 
      00199C 1C 00 02         [ 2]   39     addw x,#CELLL 
      00199F 90 93            [ 1]   40     ldw y,x 
      0019A1 90 FE            [ 2]   41     ldw y,(y)
      0019A3 90 BF 33         [ 2]   42     ldw PTR16,y
      0019A6 1C 00 02         [ 2]   43     addw x,#CELLL 
      0019A9 81               [ 4]   44     ret 
                                     45 
                                     46 ;-----------------------------------
                                     47 ; return EEPROM base address 
                                     48 ; as a double 
                                     49 ;  EEPROM  ( -- ud )
                                     50 ;-----------------------------------
      0019AA 19 90                   51     .word LINK 
                           0019AC    52 LINK=.
      0019AC 06                      53     .byte 6 
      0019AD 45 45 50 52 4F 4D       54     .ascii "EEPROM"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      0019B3                         55 EEPROM: 
      0019B3 90 AE 40 00      [ 2]   56     ldw y,#EEPROM_BASE
      0019B7 1D 00 04         [ 2]   57     subw x,#2*CELLL 
      0019BA EF 02            [ 2]   58     ldw (2,x),y 
      0019BC 90 5F            [ 1]   59     clrw y 
      0019BE FF               [ 2]   60     ldw (x),y 
      0019BF 81               [ 4]   61     ret
                                     62 
                                     63 ;---------------------------------
                                     64 ; return APP_LAST pointer as double
                                     65 ; EEP-LAST ( -- ud )
                                     66 ;---------------------------------
      0019C0 19 AC                   67 	.word LINK 
                           0019C2    68 	LINK=.
      0019C2 08                      69 	.byte 8 
      0019C3 45 45 50 2D 4C 41 53    70 	.ascii "EEP-LAST"
             54
      0019CB                         71 EEPLAST:
      0019CB 1D 00 04         [ 2]   72 	subw x,#2*CELLL 
      0019CE 90 AE 40 00      [ 2]   73 	ldw y,#APP_LAST 
      0019D2 EF 02            [ 2]   74 	ldw (2,x),y 
      0019D4 90 5F            [ 1]   75 	clrw y 
      0019D6 FF               [ 2]   76 	ldw (x),y 
      0019D7 81               [ 4]   77 	ret 
                                     78 
                                     79 ;----------------------------------
                                     80 ; return APP_RUN pointer as double	
                                     81 ; EEP-RUN ( -- ud )
                                     82 ;-----------------------------------
      0019D8 19 C2                   83 	.word LINK 
                           0019DA    84 	LINK=.
      0019DA 07                      85 	.byte 7
      0019DB 45 45 50 2D 52 55 4E    86 	.ascii "EEP-RUN"
      0019E2                         87 EEPRUN:
      0019E2 1D 00 04         [ 2]   88 	subw x,#2*CELLL 
      0019E5 90 AE 40 02      [ 2]   89 	ldw y,#APP_RUN 
      0019E9 EF 02            [ 2]   90 	ldw (2,x),y 
      0019EB 90 5F            [ 1]   91 	clrw y 
      0019ED FF               [ 2]   92 	ldw (x),y 
      0019EE 81               [ 4]   93 	ret 
                                     94 
                                     95 ;------------------------------------
                                     96 ; return APP_CP pointer as double 
                                     97 ; EEP-CP ( -- ud )
                                     98 ;------------------------------------
      0019EF 19 DA                   99 	.word LINK
                           0019F1   100 	LINK=.
      0019F1 06                     101 	.byte 6 
      0019F2 45 45 50 2D 43 50      102 	.ascii "EEP-CP"
      0019F8                        103 EEPCP:
      0019F8 1D 00 04         [ 2]  104 	subw x,#2*CELLL 
      0019FB 90 AE 40 04      [ 2]  105 	ldw y,#APP_CP  
      0019FF EF 02            [ 2]  106 	ldw (2,x),y 
      001A01 90 5F            [ 1]  107 	clrw y 
      001A03 FF               [ 2]  108 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      001A04 81               [ 4]  109 	ret 
                                    110 
                                    111 ;------------------------------------
                                    112 ; return APP_VP pointer as double 
                                    113 ; EEP-VP ( -- ud )
                                    114 ;-------------------------------------
      001A05 19 F1                  115 	.word LINK
                           001A07   116 	LINK=.
      001A07 06                     117 	.byte 6
      001A08 45 45 50 2D 56 50      118 	.ascii "EEP-VP"
      001A0E                        119 EEPVP:
      001A0E 1D 00 04         [ 2]  120 	subw x,#2*CELLL 
      001A11 90 AE 40 06      [ 2]  121 	ldw y,#APP_VP  
      001A15 EF 02            [ 2]  122 	ldw (2,x),y 
      001A17 90 5F            [ 1]  123 	clrw y 
      001A19 FF               [ 2]  124 	ldw (x),y 
      001A1A 81               [ 4]  125 	ret 
                                    126 
                                    127 ;----------------------------------
                                    128 ; update APP_LAST with LAST 
                                    129 ; UPDAT-LAST ( -- )
                                    130 ;----------------------------------
      001A1B 1A 07                  131 	.word LINK 
                           001A1D   132 	LINK=.
      001A1D 0A                     133 	.byte 10
      001A1E 55 50 44 41 54 2D 4C   134 	.ascii "UPDAT-LAST"
             41 53 54
      001A28                        135 UPDATLAST:
      001A28 CD 05 F4         [ 4]  136 	call LAST
      001A2B CD 03 E1         [ 4]  137 	call AT  
      001A2E CD 19 CB         [ 4]  138 	call EEPLAST
      001A31 CC 1B A4         [ 2]  139 	jp ee_store 
                                    140 
                                    141 ;---------------------------------
                                    142 ; update APP_RUN 
                                    143 ; UPDAT-RUN ( a -- )
                                    144 ;---------------------------------
      001A34 1A 1D                  145 	.word LINK
                           001A36   146 	LINK=.
      001A36 09                     147 	.byte 9
      001A37 55 50 44 41 54 2D 52   148 	.ascii "UPDAT-RUN"
             55 4E
      001A40                        149 UPDATRUN:
      001A40 CD 19 E2         [ 4]  150 	call EEPRUN
      001A43 CC 1B A4         [ 2]  151 	jp ee_store 
                                    152 	
                                    153 ;---------------------------------
                                    154 ; update APP_CP with CP 
                                    155 ; UPDAT-CP ( -- )
                                    156 ;---------------------------------
      001A46 1A 36                  157 	.word LINK 
                           001A48   158 	LINK=.
      001A48 08                     159 	.byte 8 
      001A49 55 50 44 41 54 2D 43   160 	.ascii "UPDAT-CP"
             50
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001A51                        161 UPDATCP:
      001A51 CD 05 E4         [ 4]  162 	call CPP 
      001A54 CD 03 E1         [ 4]  163 	call AT 
      001A57 CD 19 F8         [ 4]  164 	call EEPCP 
      001A5A CC 1B A4         [ 2]  165 	jp ee_store 
                                    166 
                                    167 ;----------------------------------
                                    168 ; update APP_VP with VP 
                                    169 ; UPDAT-VP ( -- )
                                    170 ;----------------------------------
      001A5D 1A 48                  171 	.word LINK
                           001A5F   172 	LINK=.
      001A5F 08                     173 	.byte 8 
      001A60 55 50 44 41 54 2D 56   174 	.ascii "UPDAT-VP" 
             50
      001A68                        175 UPDATVP:
      001A68 CD 05 D6         [ 4]  176 	call VPP 
      001A6B CD 03 E1         [ 4]  177 	call AT
      001A6E CD 1A 0E         [ 4]  178 	call EEPVP 
      001A71 CC 1B A4         [ 2]  179 	jp ee_store
                                    180 	
                                    181 
                                    182 ;----------------------------------
                                    183 ; fetch integer at address over 65535
                                    184 ;  F@   ( ud -- n )
                                    185 ;----------------------------------
      001A74 1A 5F                  186     .word LINK 
                           001A76   187 LINK=.
      001A76 02                     188     .byte 2
      001A77 46 40                  189     .ascii "F@"
      001A79                        190 farat:
      001A79 CD 19 94         [ 4]  191     call fptr_store
      001A7C 92 BC 00 32      [ 5]  192     ldf a,[FPTR]
      001A80 1D 00 02         [ 2]  193     subw x,#CELLL 
      001A83 F7               [ 1]  194     ld (x),a 
      001A84 90 AE 00 01      [ 2]  195     ldw y,#1
      001A88 91 AF 00 32      [ 1]  196     ldf a,([FPTR],y)
      001A8C E7 01            [ 1]  197     ld (1,x),a
      001A8E 81               [ 4]  198     ret 
                                    199 
                                    200 ;-------------------------------------
                                    201 ; fetch C at address over 65535 
                                    202 ; FC@ ( ud -- c)
                                    203 ;-------------------------------------
      001A8F 1A 76                  204     .word LINK
                           001A91   205     LINK=.
      001A91 03                     206     .byte 3 
      001A92 46 43 40               207     .ascii "FC@" 
      001A95                        208 farcat:
      001A95 CD 19 94         [ 4]  209     call fptr_store 
      001A98 92 BC 00 32      [ 5]  210     ldf a,[FPTR]
      001A9C 1D 00 02         [ 2]  211     subw x,#CELLL 
      001A9F E7 01            [ 1]  212     ld (1,x),a 
      001AA1 7F               [ 1]  213     clr (x)
      001AA2 81               [ 4]  214     ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                                    215     
                                    216 ;----------------------------------
                                    217 ; unlock EEPROM/OPT for writing/erasing
                                    218 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    219 ;  UNLKEE   ( -- )
                                    220 ;----------------------------------
      001AA3 1A 91                  221     .word LINK 
                           001AA5   222 LINK=.
      001AA5 06                     223     .byte 6 
      001AA6 55 4E 4C 4B 45 45      224     .ascii "UNLKEE"
      001AAC                        225 unlock_eeprom:
      001AAC 35 00 50 5B      [ 1]  226 	mov FLASH_CR2,#0 
      001AB0 35 FF 50 5C      [ 1]  227 	mov FLASH_NCR2,#0xFF 
      001AB4 35 AE 50 64      [ 1]  228 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001AB8 35 56 50 64      [ 1]  229     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001ABC 72 07 50 5F FB   [ 2]  230 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001AC1 81               [ 4]  231 	ret
                                    232 
                                    233 ;----------------------------------
                                    234 ; unlock FLASH for writing/erasing
                                    235 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    236 ; UNLKFL  ( -- )
                                    237 ;----------------------------------
      001AC2 1A A5                  238     .word LINK 
                           001AC4   239 LINK=. 
      001AC4 06                     240     .byte 6 
      001AC5 55 4E 4C 4B 46 4C      241     .ascii "UNLKFL"    
      001ACB                        242 unlock_flash:
      001ACB 35 00 50 5B      [ 1]  243 	mov FLASH_CR2,#0 
      001ACF 35 FF 50 5C      [ 1]  244 	mov FLASH_NCR2,#0xFF 
      001AD3 35 56 50 62      [ 1]  245 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001AD7 35 AE 50 62      [ 1]  246 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001ADB 72 03 50 5F FB   [ 2]  247 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001AE0 81               [ 4]  248 	ret
                                    249 
                                    250 ;-----------------------------
                                    251 ; unlock FLASH or EEPROM 
                                    252 ; according to FPTR address 
                                    253 ;  UNLOCK ( -- )
                                    254 ;-----------------------------
      001AE1 1A C4                  255 	.word LINK 
                           001AE3   256 	LINK=.
      001AE3 06                     257 	.byte 6
      001AE4 55 4E 4C 4F 43 4B      258 	.ascii "UNLOCK"
      001AEA                        259 unlock:
                                    260 ; put addr[15:0] in Y, for bounds check.
      001AEA 90 BE 33         [ 2]  261 	ldw y,PTR16   ; Y=addr15:0
                                    262 ; check addr[23:16], if <> 0 then it is extened flash memory
      001AED 3D 32            [ 1]  263 	tnz FPTR 
      001AEF 26 16            [ 1]  264 	jrne 4$
      001AF1 90 A3 80 00      [ 2]  265     cpw y,#FLASH_BASE
      001AF5 24 10            [ 1]  266     jruge 4$
      001AF7 90 A3 40 00      [ 2]  267 	cpw y,#EEPROM_BASE  
      001AFB 25 0D            [ 1]  268     jrult 9$
      001AFD 90 A3 48 7F      [ 2]  269 	cpw y,#OPTION_END 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001B01 22 07            [ 1]  270 	jrugt 9$
      001B03 CD 1A AC         [ 4]  271 	call unlock_eeprom
      001B06 81               [ 4]  272 	ret 
      001B07 CD 1A CB         [ 4]  273 4$: call unlock_flash
      001B0A 81               [ 4]  274 9$: ret 
                                    275 
                                    276 ;-------------------------
                                    277 ; lock write access to 
                                    278 ; FLASH and EEPROM 
                                    279 ; LOCK ( -- )
                                    280 ;-------------------------
      001B0B 1A E3                  281 	.word LINK 
                           001B0D   282 	LINK=.
      001B0D 04                     283 	.byte 4 
      001B0E 4C 4F 43 4B            284 	.ascii "LOCK" 
      001B12                        285 lock: 
      001B12 72 13 50 5F      [ 1]  286 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001B16 72 17 50 5F      [ 1]  287 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001B1A 81               [ 4]  288 	ret 
                                    289 
                                    290 ;-------------------------
                                    291 ; increment FPTR 
                                    292 ; INC-FPTR ( -- )
                                    293 ;-------------------------
      001B1B 1B 0D                  294 	.word LINK 
                           001B1D   295 	LINK=. 
      001B1D 08                     296 	.byte 8 
      001B1E 49 4E 43 2D 46 50 54   297 	.ascii "INC-FPTR" 
             52
      001B26                        298 inc_fptr:
      001B26 3C 34            [ 1]  299 	inc PTR8 
      001B28 26 08            [ 1]  300 	jrne 1$
      001B2A 90 BE 32         [ 2]  301 	ldw y,FPTR 
      001B2D 90 5C            [ 2]  302 	incw y 
      001B2F 90 BF 32         [ 2]  303 	ldw FPTR,y 
      001B32 81               [ 4]  304 1$: ret 
                                    305 
                                    306 
                                    307 ;----------------------------
                                    308 ; write a byte at address pointed 
                                    309 ; by FPTR and increment FPTR.
                                    310 ; Expect pointer already initialized 
                                    311 ; and memory unlocked 
                                    312 ; WR-BYTE ( c -- )
                                    313 ;----------------------------
                                    314 
      001B33 1B 1D                  315 	.word LINK 
                           001B35   316 	LINK=. 
      001B35 07                     317 	.byte 7 
      001B36 57 52 2D 42 59 54 45   318 	.ascii "WR-BYTE" 
                                    319 
      001B3D                        320 write_byte:
      001B3D 90 93            [ 1]  321 	ldw y,x 
      001B3F 90 FE            [ 2]  322 	ldw y,(y)
      001B41 1C 00 02         [ 2]  323 	addw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001B44 90 9F            [ 1]  324 	ld a,yl
      001B46 92 BD 00 32      [ 4]  325 	ldf [FPTR],a
      001B4A 72 05 50 5F FB   [ 2]  326 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001B4F 20 D5            [ 2]  327 	jra inc_fptr 
                                    328 
                                    329 
                                    330 
                                    331 ;---------------------------------------
                                    332 ; write a byte to FLASH or EEPROM/OPTION  
                                    333 ; EEC!  (c ud -- )
                                    334 ;---------------------------------------
      001B51 1B 35                  335     .word LINK 
                           001B53   336 	LINK=.
      001B53 04                     337     .byte 4 
      001B54 45 45 43 21            338     .ascii "EEC!"
                                    339 	; local variables 
                           000001   340 	BTW = 1   ; byte to write offset on stack
                           000002   341     OPT = 2 
                           000002   342 	VSIZE = 2
      001B58                        343 ee_cstore:
      001B58 52 02            [ 2]  344 	sub sp,#VSIZE
      001B5A CD 19 94         [ 4]  345     call fptr_store
      001B5D E6 01            [ 1]  346 	ld a,(1,x)
      001B5F 43               [ 1]  347 	cpl a 
      001B60 6B 01            [ 1]  348 	ld (BTW,sp),a ; byte to write 
      001B62 0F 02            [ 1]  349 	clr (OPT,sp)  ; OPTION flag
      001B64 CD 1A EA         [ 4]  350 	call unlock 
                                    351 	; check if option
      001B67 3D 32            [ 1]  352 	tnz FPTR 
      001B69 26 19            [ 1]  353 	jrne 2$
      001B6B 90 BE 33         [ 2]  354 	ldw y,PTR16 
      001B6E 90 A3 48 00      [ 2]  355 	cpw y,#OPTION_BASE
      001B72 2B 10            [ 1]  356 	jrmi 2$
      001B74 90 A3 48 80      [ 2]  357 	cpw y,#OPTION_END+1
      001B78 2A 0A            [ 1]  358 	jrpl 2$
      001B7A 03 02            [ 1]  359 	cpl (OPT,sp)
                                    360 	; OPTION WRITE require this unlock 
      001B7C 72 1E 50 5B      [ 1]  361     bset FLASH_CR2,#FLASH_CR2_OPT
      001B80 72 1F 50 5C      [ 1]  362     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001B84                        363 2$: 
      001B84 CD 1B 3D         [ 4]  364 	call write_byte 	
      001B87 0D 02            [ 1]  365 	tnz (OPT,sp)
      001B89 27 0D            [ 1]  366 	jreq 3$ 
      001B8B 7B 01            [ 1]  367     ld a,(BTW,sp)
      001B8D 90 5F            [ 1]  368     clrw y
      001B8F 90 97            [ 1]  369 	ld yl,a 
      001B91 1D 00 02         [ 2]  370 	subw x,#CELLL 
      001B94 FF               [ 2]  371 	ldw (x),y 
      001B95 CD 1B 3D         [ 4]  372 	call write_byte
      001B98                        373 3$: 
      001B98 CD 1B 12         [ 4]  374 	call lock 
      001B9B 5B 02            [ 2]  375 	addw sp,#VSIZE 
      001B9D 81               [ 4]  376     ret
                                    377 
                                    378 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                                    379 ; write integer in FLASH|EEPROM
                                    380 ; EE! ( n ud -- )
                                    381 ;------------------------------
      001B9E 1B 53                  382 	.word LINK 
                           001BA0   383 	LINK=.
      001BA0 03                     384 	.byte 3 
      001BA1 45 45 21               385 	.ascii "EE!"
      001BA4                        386 ee_store:
      001BA4 CD 19 94         [ 4]  387 	call fptr_store 
      001BA7 CD 1A EA         [ 4]  388 	call unlock 
      001BAA 90 93            [ 1]  389 	ldw y,x 
      001BAC 90 FE            [ 2]  390 	ldw y,(y)
      001BAE 90 89            [ 2]  391 	pushw y 
      001BB0 90 5E            [ 1]  392 	swapw y 
      001BB2 FF               [ 2]  393 	ldw (x),y 
      001BB3 CD 1B 3D         [ 4]  394 	call write_byte 
      001BB6 90 85            [ 2]  395 	popw y 
      001BB8 1D 00 02         [ 2]  396 	subw x,#CELLL
      001BBB FF               [ 2]  397 	ldw (x),y 
      001BBC CD 1B 3D         [ 4]  398 	call write_byte
      001BBF CC 1B 12         [ 2]  399 	jp lock 
                                    400 
                                    401 
                                    402 ;----------------------------
                                    403 ; Erase flash memory row 
                                    404 ; stm8s208 as 128 bytes rows
                                    405 ; ROW-ERASE ( ud -- )
                                    406 ;----------------------------
      001BC2 1B A0                  407 	.word LINK 
                           001BC4   408 	LINK=. 
      001BC4 09                     409 	.byte 9 
      001BC5 52 4F 57 2D 45 52 41   410 	.ascii "ROW-ERASE" 
             53 45
      001BCE                        411 row_erase:
      001BCE CD 19 94         [ 4]  412 	call fptr_store
                                    413 ;code must be execute from RAM 
                                    414 ;copy routine to PAD 
      001BD1 1D 00 02         [ 2]  415 	subw x,#CELLL 
      001BD4 90 AE 1C 1B      [ 2]  416 	ldw y,#row_erase_proc
      001BD8 FF               [ 2]  417 	ldw (x),y 
      001BD9 CD 0A CE         [ 4]  418 	call PAD 
      001BDC 90 AE 1C 42      [ 2]  419 	ldw y,#row_erase_proc_end 
      001BE0 72 A2 1C 1B      [ 2]  420 	subw y,#row_erase_proc
      001BE4 1D 00 02         [ 2]  421 	subw x,#CELLL 
      001BE7 FF               [ 2]  422 	ldw (x),y 
      001BE8 CD 0B 0A         [ 4]  423 	call CMOVE 
      001BEB                        424 block_erase:
      001BEB 90 BE 33         [ 2]  425 	ldw y,FPTR+1
      001BEE 90 A3 20 80      [ 2]  426 	cpw y,#app_space 
      001BF2 2A 13            [ 1]  427 	jrpl erase_flash 
                                    428 ; erase EEPROM block
      001BF4 90 A3 40 00      [ 2]  429 	cpw y,#EEPROM_BASE 
      001BF8 24 01            [ 1]  430 	jruge 1$
      001BFA 81               [ 4]  431 	ret ; bad address 
      001BFB 90 A3 47 FF      [ 2]  432 1$: cpw y,#EEPROM_END 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001BFF 23 01            [ 2]  433 	jrule 2$ 
      001C01 81               [ 4]  434 	ret ; bad address 
      001C02                        435 2$:	
      001C02 CD 1A AC         [ 4]  436 	call unlock_eeprom 
      001C05 20 03            [ 2]  437 	jra proceed_erase
                                    438 ; erase flash block:
      001C07                        439 erase_flash:
      001C07 CD 1A CB         [ 4]  440 	call unlock_flash 
      001C0A                        441 proceed_erase:
      001C0A CD 0A CE         [ 4]  442 	call PAD 
      001C0D 90 93            [ 1]  443 	ldw y,x
      001C0F 90 FE            [ 2]  444 	ldw y,(y)
      001C11 1C 00 02         [ 2]  445 	addw x,#CELLL  
      001C14 90 FD            [ 4]  446 	call (y) 
      001C16 72 17 50 5F      [ 1]  447 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001C1A 81               [ 4]  448 	ret 
                                    449 
                                    450 ; this routine is to be copied to PAD 
      001C1B                        451 row_erase_proc:
      001C1B 35 20 50 5B      [ 1]  452 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001C1F 35 DF 50 5C      [ 1]  453 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001C23 4F               [ 1]  454 	clr a 
      001C24 90 5F            [ 1]  455 	clrw y 
      001C26 91 A7 00 32      [ 1]  456 	ldf ([FPTR],y),a
      001C2A 90 5C            [ 2]  457     incw y
      001C2C 91 A7 00 32      [ 1]  458 	ldf ([FPTR],y),a
      001C30 90 5C            [ 2]  459     incw y
      001C32 91 A7 00 32      [ 1]  460 	ldf ([FPTR],y),a
      001C36 90 5C            [ 2]  461     incw y
      001C38 91 A7 00 32      [ 1]  462 	ldf ([FPTR],y),a
      001C3C 72 05 50 5F FB   [ 2]  463 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001C41 81               [ 4]  464 	ret
      001C42                        465 row_erase_proc_end:
                                    466 
                                    467 
                                    468 ;-----------------------------------
                                    469 ; block programming must be 
                                    470 ; executed from RAM 
                                    471 ; initial contidions: 
                                    472 ; 		memory unlocked
                                    473 ;       FPTR initialized 
                                    474 ; input: 
                                    475 ;    x   buffer address 
                                    476 ;-----------------------------------
                           000001   477 	BCNT=1 
      001C42                        478 copy_buffer:
      001C42 4B 80            [ 1]  479 	push #BLOCK_SIZE  
                                    480 ;enable block programming 
      001C44 72 10 50 5B      [ 1]  481 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001C48 72 11 50 5C      [ 1]  482 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001C4C 90 5F            [ 1]  483 	clrw y
      001C4E F6               [ 1]  484 1$:	ld a,(x)
      001C4F 91 A7 00 32      [ 1]  485 	ldf ([FPTR],y),a
      001C53 5C               [ 2]  486 	incw x 
      001C54 90 5C            [ 2]  487 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001C56 0A 01            [ 1]  488 	dec (BCNT,sp)
      001C58 26 F4            [ 1]  489 	jrne 1$
                                    490 ; wait EOP bit 
      001C5A 72 05 50 5F FB   [ 2]  491 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001C5F 84               [ 1]  492 	pop a ; remove BCNT from stack 
      001C60 81               [ 4]  493 	ret 
      001C61                        494 copy_buffer_end:
                                    495 
                                    496 ;-------------------------
                                    497 ; move program_row to RAM 
                                    498 ; in TIB 
                                    499 ;------------------------
      001C61                        500 copy_prog_to_ram:
      001C61 1D 00 06         [ 2]  501 	subw x,#6
      001C64 90 AE 1C 42      [ 2]  502 	ldw y,#copy_buffer 
      001C68 EF 04            [ 2]  503 	ldw (4,x),y 
      001C6A 90 AE 17 00      [ 2]  504 	ldw y,#TIBBASE
      001C6E EF 02            [ 2]  505 	ldw (2,x),y 
      001C70 90 AE 1C 61      [ 2]  506 	ldw y,#copy_buffer_end 
      001C74 72 A2 1C 42      [ 2]  507 	subw y,#copy_buffer  
      001C78 FF               [ 2]  508 	ldw (x),y 
      001C79 CD 0B 0A         [ 4]  509 	call CMOVE 
      001C7C 81               [ 4]  510 	ret 
                                    511 
                                    512 
                                    513 ;-----------------------------
                                    514 ; write a row in FLASH/EEPROM 
                                    515 ; WR-ROW ( a ud -- )
                                    516 ; a -> address 128 byte buffer to write 
                                    517 ; ud ->  row address in FLASH|EEPROM 
                                    518 ;-----------------------------
      001C7D 1B C4                  519 	.word LINK 
                           001C7F   520 	LINK=.
      001C7F 06                     521 	.byte 6 
      001C80 57 52 2D 52 4F 57      522 	.ascii "WR-ROW"
      001C86                        523 write_row:
      001C86 CD 19 94         [ 4]  524 	call fptr_store
                                    525 ; align to FLASH block 
      001C89 A6 80            [ 1]  526 	ld a,#0x80 
      001C8B B4 34            [ 1]  527 	and a,PTR8 
      001C8D B7 34            [ 1]  528 	ld PTR8,a  
      001C8F CD 1C 61         [ 4]  529 	call copy_prog_to_ram
      001C92 CD 1A EA         [ 4]  530 	call unlock
      001C95 90 93            [ 1]  531 	ldw y,x 
      001C97 90 FE            [ 2]  532 	ldw y,(y)
      001C99 1C 00 02         [ 2]  533 	addw x,#CELLL 
      001C9C 89               [ 2]  534 	pushw x 
      001C9D 93               [ 1]  535 	ldw x,y ; buffer address in x 
      001C9E CD 17 00         [ 4]  536 	call TIBBASE
      001CA1 CD 1B 12         [ 4]  537 	call lock
      001CA4 85               [ 2]  538 	popw x 
      001CA5 81               [ 4]  539 	ret 
                                    540 
                                    541 ;-------------------------------------
                                    542 ; change value of OPTION register 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                                    543 ; SET-OPT (c n -- ) 
                                    544 ; c new value.
                                    545 ; n OPT  number {1..7}
                                    546 ;--------------------------------------
      001CA6 1C 7F                  547 		.word LINK 
                           001CA8   548 		LINK=.
      001CA8 07                     549 		.byte 7 
      001CA9 53 45 54 2D 4F 50 54   550 		.ascii "SET-OPT" 
      001CB0                        551 set_option: 
      001CB0 90 93            [ 1]  552 		ldw y,x 
      001CB2 90 FE            [ 2]  553 		ldw y,(y)
      001CB4 27 06            [ 1]  554 		jreq 1$
      001CB6 90 A3 00 07      [ 2]  555 		cpw y,#7 
      001CBA 23 04            [ 2]  556 		jrule 2$ 
                                    557 ; invalid OPTION number 		
      001CBC 1C 00 04         [ 2]  558 1$:		addw x,#2*CELLL
      001CBF 81               [ 4]  559 		ret
      001CC0 90 58            [ 2]  560 2$:		sllw y 
      001CC2 72 A9 47 FF      [ 2]  561 		addw y,#OPTION_BASE-1
      001CC6 FF               [ 2]  562 		ldw (x),y 
      001CC7 1D 00 02         [ 2]  563 		subw x,#CELLL 
      001CCA 90 5F            [ 1]  564 		clrw y 
      001CCC FF               [ 2]  565 		ldw (x),y 
      001CCD CD 1B 58         [ 4]  566 		call ee_cstore
      001CD0 81               [ 4]  567 		ret 
                                    568 
                                    569 
                                    570 
                                    571 ;--------------------------------------
                                    572 ; reset system to its original state 
                                    573 ; before any user modification
                                    574 ; PRISTINE ( -- )
                                    575 ;-------------------------------------
      001CD1 1C A8                  576 	.word LINK  
                           001CD3   577 	LINK=.
      001CD3 08                     578 	.byte 8 
      001CD4 50 52 49 53 54 49 4E   579 	.ascii "PRISTINE"
             45
      001CDC                        580 pristine:
                                    581 ;;; erase EEPROM
      001CDC CD 19 B3         [ 4]  582 	call EEPROM 
      001CDF CD 06 6E         [ 4]  583 1$:	call DDUP 
      001CE2 CD 1B CE         [ 4]  584 	call row_erase
      001CE5 90 93            [ 1]  585 	ldw y,x 
      001CE7 90 EE 02         [ 2]  586 	ldw y,(2,y)
      001CEA 72 A9 00 80      [ 2]  587 	addw y,#BLOCK_SIZE
      001CEE EF 02            [ 2]  588 	ldw (2,x),y
      001CF0 90 A3 48 00      [ 2]  589 	cpw y,#OPTION_BASE 
      001CF4 25 E9            [ 1]  590 	jrult 1$
                                    591 ;;; reset OPTION to default values
      001CF6 90 AE 00 01      [ 2]  592 	ldw y,#1 ; OPT1 
      001CFA FF               [ 2]  593 2$:	ldw (x),y   
      001CFB 90 5F            [ 1]  594 	clrw y 
      001CFD EF 02            [ 2]  595 	ldw (2,x),y  ; ( 0 1 -- ) 
      001CFF CD 06 6E         [ 4]  596 	call DDUP    ; ( 0 1 0 1 -- )  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001D02 CD 1C B0         [ 4]  597 	call set_option
      001D05 90 93            [ 1]  598 	ldw y,x 
      001D07 90 FE            [ 2]  599 	ldw y,(y)
      001D09 90 5C            [ 2]  600 	incw y  ; next OPTION 
      001D0B 90 A3 00 08      [ 2]  601 	cpw y,#8 
      001D0F 25 E9            [ 1]  602 	jrult 2$
                                    603 ;;; erase first row of app_space 	
      001D11 90 AE 20 80      [ 2]  604 	ldw y,#app_space
      001D15 EF 02            [ 2]  605 	ldw (2,x),y  
      001D17 90 5F            [ 1]  606 	clrw y 
      001D19 FF               [ 2]  607 	ldw (x),y ; ( app_space 0 -- )
      001D1A CD 1B CE         [ 4]  608 	call row_erase 
                                    609 ; reset interrupt vectors 
      001D1D 1D 00 02         [ 2]  610 	subw x,#CELLL 
      001D20 90 5F            [ 1]  611 	clrw y  
      001D22 FF               [ 2]  612 4$:	ldw (x),y  ; ( n -- ) int# 
      001D23 CD 04 88         [ 4]  613 	call DUPP  
      001D26 CD 1D 43         [ 4]  614 	call reset_vector
      001D29 90 93            [ 1]  615 	ldw y,x 
      001D2B 90 FE            [ 2]  616 	ldw y,(y)
      001D2D 90 5C            [ 2]  617 	incw y   ; next vector 
      001D2F 90 A3 00 19      [ 2]  618 	cpw y,#25 
      001D33 25 ED            [ 1]  619 	jrult 4$
      001D35 CC 00 00         [ 2]  620 	jp NonHandledInterrupt ; reset MCU
                                    621 
                                    622 ;------------------------------
                                    623 ; reset an interrupt vector 
                                    624 ; to its initial value 
                                    625 ; i.e. NonHandledInterrupt
                                    626 ; RST-IVEC ( n -- )
                                    627 ;-----------------------------
      001D38 1C D3                  628 	.word LINK 
                           001D3A   629 	LINK=. 
      001D3A 08                     630 	.byte 8 
      001D3B 52 53 54 2D 49 56 45   631 	.ascii "RST-IVEC"
             43
      001D43                        632 reset_vector:
      001D43 90 93            [ 1]  633 	ldw y,x
      001D45 1C 00 02         [ 2]  634 	addw x,#CELLL 
      001D48 90 FE            [ 2]  635 	ldw y,(y)
      001D4A 90 A3 00 17      [ 2]  636 	cpw y,#23 
      001D4E 27 3A            [ 1]  637 	jreq 9$
      001D50 90 A3 00 1D      [ 2]  638 	cpw y,#29 ; last vector
      001D54 22 34            [ 1]  639 	jrugt 9$  
      001D56 90 58            [ 2]  640 	sllw y 
      001D58 90 58            [ 2]  641 	sllw y 
      001D5A 72 A9 80 08      [ 2]  642 	addw y,#0x8008 ; irq0 address 
      001D5E 90 BF 24         [ 2]  643 	ldw YTEMP,y
      001D61 1D 00 06         [ 2]  644 	subw x,#3*CELLL 
      001D64 EF 02            [ 2]  645 	ldw (2,x),y 
      001D66 90 5F            [ 1]  646 	clrw y
      001D68 FF               [ 2]  647 	ldw (x),y 
      001D69 A6 82            [ 1]  648 	ld a,#0x82 
      001D6B 90 95            [ 1]  649 	ld yh,a
      001D6D EF 04            [ 2]  650 	ldw (4,x),y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001D6F CD 1B A4         [ 4]  651 	call ee_store
      001D72 1D 00 06         [ 2]  652 	subw x,#3*CELLL
      001D75 90 5F            [ 1]  653 	clrw y 
      001D77 FF               [ 2]  654 	ldw (x),y 
      001D78 90 AE 00 00      [ 2]  655 	ldw y,#NonHandledInterrupt
      001D7C EF 04            [ 2]  656 	ldw (4,x),y 
      001D7E 90 BE 24         [ 2]  657 	ldw y,YTEMP  
      001D81 72 A9 00 02      [ 2]  658 	addw y,#2
      001D85 EF 02            [ 2]  659 	ldw (2,x),y 
      001D87 CD 1B A4         [ 4]  660 	call ee_store
      001D8A 81               [ 4]  661 9$:	ret 
                                    662 
                                    663 
                                    664 ;------------------------------
                                    665 ; all interrupt vector with 
                                    666 ; an address >= a are resetted 
                                    667 ; to default
                                    668 ; CHKIVEC ( a -- )
                                    669 ;------------------------------
      001D8B 1D 3A                  670 	.word LINK 
                           001D8D   671 	LINK=.
      001D8D 07                     672 	.byte 7
      001D8E 43 48 4B 49 56 45 43   673 	.ascii "CHKIVEC"
                                    674 ;local variables 
                           000001   675 	SSP=1
                           000003   676 	CADR=3
                           000005   677 	OFS=5
                           000006   678 	VSIZE=6  
      001D95                        679 CHKIVEC:
      001D95 52 06            [ 2]  680 	sub sp,#VSIZE ;alloc local variables 
      001D97 90 93            [ 1]  681 	ldw y,x 
      001D99 90 FE            [ 2]  682 	ldw y,(y)
      001D9B 17 03            [ 2]  683 	ldw (CADR,sp),y ; ca 
      001D9D 1F 01            [ 2]  684 	ldw (SSP,sp),x 
      001D9F AE 80 0A         [ 2]  685 	ldw x,#0x800a ; irq0 address 
      001DA2 BF 33            [ 2]  686 	ldw PTR16,X
      001DA4 AE FF FC         [ 2]  687 	ldw x,#-4 
      001DA7 1C 00 04         [ 2]  688 1$:	addw x,#4
      001DAA A3 00 78         [ 2]  689 	cpw x,#30*4 ; irq0-29 
      001DAD 27 22            [ 1]  690 	jreq 9$
      001DAF 90 93            [ 1]  691 	ldw y,x  
      001DB1 91 D6 33         [ 4]  692 	ld a,([PTR16],y)
      001DB4 11 03            [ 1]  693 	cp a,(CADR,sp)
      001DB6 25 EF            [ 1]  694 	jrult 1$
      001DB8 90 5C            [ 2]  695 	incw y 
      001DBA 91 D6 33         [ 4]  696 	ld a,([PTR16],y)
      001DBD 11 04            [ 1]  697 	cp a,(CADR+1,sp) 
      001DBF 25 E6            [ 1]  698 	jrult 1$ 
      001DC1 1F 05            [ 2]  699 	ldw (OFS,sp),x 
      001DC3 54               [ 2]  700 	srlw x
      001DC4 54               [ 2]  701 	srlw x 
      001DC5 90 93            [ 1]  702 	ldw y,x 
      001DC7 1E 01            [ 2]  703 	ldw x,(SSP,sp)
      001DC9 FF               [ 2]  704 	ldw (x),y
      001DCA CD 1D 43         [ 4]  705 	call reset_vector
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001DCD 1E 05            [ 2]  706 	ldw x,(OFS,sp) 
      001DCF 20 D6            [ 2]  707 	jra 1$
      001DD1 1E 01            [ 2]  708 9$:	ldw x,(SSP,sp) 
      001DD3 1C 00 02         [ 2]  709 	addw x,#CELLL 
      001DD6 5B 06            [ 2]  710 	addw sp,#VSIZE ; drop local variables  
      001DD8 81               [ 4]  711 	ret 
                                    712 
                                    713 ;------------------------------
                                    714 ; set interrupt vector 
                                    715 ; SET-IVEC ( ud n -- )
                                    716 ;  ud Handler address
                                    717 ;  n  vector # 0 .. 29 
                                    718 ;-----------------------------
      001DD9 1D 8D                  719 	.word LINK
                           001DDB   720 	LINK=.
      001DDB 08                     721 	.byte 8 
      001DDC 53 45 54 2D 49 56 45   722 	.ascii "SET-IVEC" 
             43
      001DE4                        723 set_vector:
      001DE4 90 93            [ 1]  724     ldw y,x 
      001DE6 1C 00 02         [ 2]  725 	addw x,#CELLL 
      001DE9 90 FE            [ 2]  726 	ldw y,(y) ; vector #
      001DEB 90 A3 00 1D      [ 2]  727 	cpw y,#29 ; last vector
      001DEF 23 04            [ 2]  728 	jrule 2$
      001DF1 1C 00 04         [ 2]  729 	addw x,#2*CELLL 
      001DF4 81               [ 4]  730 	ret
      001DF5 90 58            [ 2]  731 2$:	sllw y 
      001DF7 90 58            [ 2]  732 	sllw y 
      001DF9 72 A9 80 08      [ 2]  733 	addw y,#0X8008 ; IRQ0 vector address 
      001DFD 90 BF 24         [ 2]  734 	ldw YTEMP,y ; vector address 
      001E00 A6 82            [ 1]  735 	ld a,#0x82 
      001E02 90 95            [ 1]  736 	ld yh,a 
      001E04 E6 01            [ 1]  737 	ld a,(1,x) ; isr address bits 23..16 
      001E06 90 97            [ 1]  738 	ld yl,a 
                                    739 ;  write 0x82 + most significant byte of int address	
      001E08 1D 00 06         [ 2]  740 	subw x,#3*CELLL 
      001E0B EF 04            [ 2]  741 	ldw (4,x),y 
      001E0D 90 BE 24         [ 2]  742 	ldw y,YTEMP
      001E10 EF 02            [ 2]  743 	ldw (2,x),y ; vector address 
      001E12 90 5F            [ 1]  744 	clrw y 
      001E14 FF               [ 2]  745 	ldw (x),y   ; as a double 
      001E15 CD 1B A4         [ 4]  746 	call ee_store 
      001E18 90 93            [ 1]  747 	ldw y,x 
      001E1A 90 EE 02         [ 2]  748 	ldw y,(2,y) ; bits 15..0 int vector 
      001E1D 1D 00 06         [ 2]  749 	subw x,#3*CELLL 
      001E20 EF 04            [ 2]  750 	ldw (4,x),y 
      001E22 90 BE 24         [ 2]  751 	ldw y,YTEMP 
      001E25 72 A9 00 02      [ 2]  752 	addw y,#2 
      001E29 EF 02            [ 2]  753 	ldw (2,x),y 
      001E2B 90 5F            [ 1]  754 	clrw y 
      001E2D FF               [ 2]  755 	ldw (x),y 
      001E2E CD 1B A4         [ 4]  756 	call ee_store
      001E31 1C 00 04         [ 2]  757 	addw x,#2*CELLL  
      001E34 81               [ 4]  758 9$: ret 
                                    759 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



                                    760 
                                    761 ;------------------------
                                    762 ; Compile word to flash
                                    763 ; EE, (w -- )
                                    764 ;-----------------------
      001E35 1D DB                  765 	.word LINK
                           001E37   766 	LINK=.
      001E37 03                     767 	.byte 3
      001E38 45 45 2C               768 	.ascii "EE,"
      001E3B                        769 ee_comma:
      001E3B 1D 00 04         [ 2]  770 	subw x,#2*CELLL 
      001E3E 90 BE 18         [ 2]  771 	ldw y,UCP
      001E41 90 89            [ 2]  772 	pushw y 
      001E43 EF 02            [ 2]  773 	ldw (2,x),y 
      001E45 90 5F            [ 1]  774 	clrw y 
      001E47 FF               [ 2]  775 	ldw (x),y
      001E48 CD 1B A4         [ 4]  776 	call ee_store
      001E4B 90 85            [ 2]  777 	popw y 
      001E4D 72 A9 00 02      [ 2]  778 	addw y,#2
      001E51 90 BF 18         [ 2]  779 	ldw UCP,y
      001E54 81               [ 4]  780 	ret 
                                    781 
                                    782 ;-------------------------
                                    783 ; Compile byte to flash 
                                    784 ; EEC, ( c -- )	
                                    785 ;-------------------------
      001E55 1E 37                  786 	.word LINK 
                           001E57   787 	LINK=.
      001E57 04                     788 	.byte 4 
      001E58 45 45 43 2C            789 	.ascii "EEC,"
      001E5C                        790 ee_ccomma:
      001E5C 1D 00 04         [ 2]  791 	subw x,#2*CELLL 
      001E5F 90 BE 18         [ 2]  792 	ldw y,UCP
      001E62 90 89            [ 2]  793 	pushw y 
      001E64 EF 02            [ 2]  794 	ldw (2,x),y 
      001E66 90 5F            [ 1]  795 	clrw y 
      001E68 FF               [ 2]  796 	ldw (x),y
      001E69 CD 1B 58         [ 4]  797 	call ee_cstore
      001E6C 90 85            [ 2]  798 	popw y 
      001E6E 90 5C            [ 2]  799 	incw y 
      001E70 90 BF 18         [ 2]  800 	ldw UCP,y
      001E73 81               [ 4]  801 	ret 
                                    802 
                                    803 
                                    804 ;--------------------------
                                    805 ; copy FLASH block to ROWBUF
                                    806 ; ROW2BUF ( ud -- )
                                    807 ;--------------------------
      001E74 1E 57                  808 	.word LINK 
                           001E76   809 	LINK=.
      001E76 07                     810 	.byte 7 
      001E77 52 4F 57 32 42 55 46   811 	.ascii "ROW2BUF"
      001E7E                        812 ROW2BUF: 
      001E7E CD 19 94         [ 4]  813 	call fptr_store 
      001E81 A6 80            [ 1]  814 	ld a,#BLOCK_SIZE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001E83 88               [ 1]  815 	push a 
      001E84 B4 34            [ 1]  816 	and a,PTR8 ; block align 
      001E86 B7 34            [ 1]  817 	ld PTR8,a
      001E88 90 AE 16 80      [ 2]  818 	ldw y,#ROWBUFF 
      001E8C 92 BC 00 32      [ 5]  819 1$: ldf a,[FPTR]
      001E90 90 F7            [ 1]  820 	ld (y),a
      001E92 CD 1B 26         [ 4]  821 	call inc_fptr
      001E95 90 5C            [ 2]  822 	incw y 
      001E97 0A 01            [ 1]  823 	dec (1,sp)
      001E99 26 F1            [ 1]  824 	jrne 1$ 
      001E9B 84               [ 1]  825 	pop a 
      001E9C 81               [ 4]  826 	ret 
                                    827 
                                    828 
                                    829 ;---------------------------
                                    830 ; copy ROWBUFF to flash 
                                    831 ; BUF2ROW ( ud -- )
                                    832 ; ud is row address as double 
                                    833 ;---------------------------
      001E9D 1E 76                  834 	.word LINK 
                           001E9F   835 	LINK=.
      001E9F 07                     836 	.byte 7 
      001EA0 42 55 46 32 52 4F 57   837 	.ascii "BUF2ROW" 
      001EA7                        838 BUF2ROW:
      001EA7 CD 05 83         [ 4]  839 	call TBUF ; ( ud rb -- )
      001EAA CD 06 43         [ 4]  840 	call ROT 
      001EAD CD 06 43         [ 4]  841 	call ROT  ; ( rb ud -- )
      001EB0 CD 1C 86         [ 4]  842 	call write_row 
      001EB3 81               [ 4]  843 	ret 
                                    844 
                                    845 ;---------------------------------
                                    846 ; how many byte free in that row 
                                    847 ; RFREE ( a -- n )
                                    848 ; a is least byte of target address
                                    849 ;----------------------------------
      001EB4 1E 9F                  850 	.word LINK 
                           001EB6   851 	LINK=.
      001EB6 05                     852 	.byte 5 
      001EB7 52 46 52 45 45         853 	.ascii "RFREE"
      001EBC                        854 RFREE:
      001EBC E6 01            [ 1]  855 	ld a,(1,x)
      001EBE A4 7F            [ 1]  856 	and a,#BLOCK_SIZE-1 
      001EC0 B7 24            [ 1]  857 	ld YTEMP,a 
      001EC2 A6 80            [ 1]  858 	ld a,#BLOCK_SIZE 
      001EC4 B0 24            [ 1]  859 	sub a,YTEMP 
      001EC6 90 5F            [ 1]  860 	clrw y 
      001EC8 90 97            [ 1]  861 	ld yl,a
      001ECA FF               [ 2]  862 	ldw (x),y 
      001ECB 81               [ 4]  863 	ret 
                                    864 
                                    865 ;---------------------------------
                                    866 ; write u bytes to flash/EEPROM 
                                    867 ; constraint to row limit 
                                    868 ; RAM2EE ( ud a u -- u2 )
                                    869 ; ud flash address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                    870 ; a ram address 
                                    871 ; u bytes count
                                    872 ; return u2 bytes written  
                                    873 ;-------------------------------
      001ECC 1E B6                  874 	.word LINK 
                           001ECE   875 	LINK=. 
      001ECE 06                     876 	.byte 6
      001ECF 52 41 4D 32 45 45      877 	.ascii "RAM2EE"
                                    878 	
      001ED5                        879 RAM2EE:
                                    880 ; copy ud on top 
      001ED5 90 93            [ 1]  881 	ldw y,x 
      001ED7 90 EE 06         [ 2]  882 	ldw y,(6,y) ; LSW of ud  
      001EDA 90 BF 24         [ 2]  883 	ldw YTEMP,y 
      001EDD 90 93            [ 1]  884 	ldw y,x 
      001EDF 90 EE 04         [ 2]  885 	ldw y,(4,y)  ; MSW of ud 
      001EE2 1D 00 04         [ 2]  886 	subw x,#2*CELLL 
      001EE5 FF               [ 2]  887 	ldw (x),y 
      001EE6 90 BE 24         [ 2]  888 	ldw y,YTEMP 
      001EE9 EF 02            [ 2]  889 	ldw (2,x),y 
      001EEB CD 1E 7E         [ 4]  890 	call ROW2BUF 
      001EEE 90 93            [ 1]  891 	ldw y,x 
      001EF0 90 EE 06         [ 2]  892 	ldw y,(6,y)
      001EF3 90 89            [ 2]  893 	pushw y ; udl 
      001EF5 90 9F            [ 1]  894 	ld a,yl
      001EF7 A4 7F            [ 1]  895 	and a,#BLOCK_SIZE-1 
      001EF9 90 5F            [ 1]  896 	clrw y 
      001EFB 90 97            [ 1]  897 	ld yl,a 
      001EFD 72 A9 16 80      [ 2]  898 	addw y,#ROWBUFF 
      001F01 1D 00 02         [ 2]  899 	subw x,#CELLL 
      001F04 FF               [ 2]  900 	ldw (x),y  
      001F05 CD 04 98         [ 4]  901 	call SWAPP ;  ( ud a ra u -- )
      001F08 CD 04 32         [ 4]  902 	call RFROM  
      001F0B CD 1E BC         [ 4]  903 	call RFREE 
      001F0E CD 07 83         [ 4]  904 	call MIN
      001F11 CD 04 88         [ 4]  905 	call DUPP 
      001F14 CD 04 51         [ 4]  906 	call TOR  
      001F17 CD 0B 0A         [ 4]  907 	call CMOVE
      001F1A CD 1E A7         [ 4]  908 	call BUF2ROW 
      001F1D CD 04 32         [ 4]  909 	call RFROM 
      001F20 81               [ 4]  910 	ret 
                                    911 
                                    912 ;--------------------------
                                    913 ; expand 16 bit address 
                                    914 ; to 32 bit address 
                                    915 ; FADDR ( a -- ud )
                                    916 ;--------------------------
      001F21 1E CE                  917 	.word LINK 
                           001F23   918 	LINK=. 
      001F23 05                     919 	.byte 5 
      001F24 46 41 44 44 52         920 	.ascii "FADDR"
      001F29                        921 FADDR:
      001F29 CC 09 CE         [ 2]  922 	jp ZERO 
                                    923 
                                    924 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                                    925 ; move new colon definition to FLASH 
                                    926 ; using WR-ROW for efficiency 
                                    927 ; preserving bytes already used 
                                    928 ; in the current block. 
                                    929 ; ud+c must not exceed block boundary 
                                    930 ; at this point the compiler as completed
                                    931 ; in RAM and pointers CP and CNTXT updated.
                                    932 ; CNTXT point to nfa of new word and  
                                    933 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                    934 ; 
                                    935 ; FMOVE ( -- cp+ )
                                    936 ; 
                                    937 ;--------------------------
      001F2C 1F 23                  938 	.word LINK 
                           001F2E   939 	LINK=.
      001F2E 05                     940 	.byte 5 
      001F2F 46 4D 4F 56 45         941 	.ascii "FMOVE" 
      001F34                        942 FMOVE:
      001F34 CD 05 95         [ 4]  943 	call TFLASH 
      001F37 CD 03 E1         [ 4]  944 	CALL AT 
      001F3A CD 03 8C         [ 4]  945 	CALL QBRAN 
      001F3D 1F B8                  946 	.word no_move  
      001F3F CD 05 E4         [ 4]  947 	call CPP
      001F42 CD 03 E1         [ 4]  948 	call AT  
      001F45 CD 04 88         [ 4]  949 	call DUPP ; ( udl udl -- )
      001F48 CD 05 C8         [ 4]  950 	call CNTXT 
      001F4B CD 03 E1         [ 4]  951 	call AT 
      001F4E CD 03 59         [ 4]  952 	call DOLIT 
      001F51 00 02                  953 	.word 2 
      001F53 CD 06 E1         [ 4]  954 	call SUBB ; ( udl udl a -- )
      001F56 CD 04 98         [ 4]  955 	call SWAPP 
      001F59 CD 1F 29         [ 4]  956 	call FADDR 
      001F5C CD 06 43         [ 4]  957 	call ROT  ; ( udl ud a -- )
      001F5F CD 04 88         [ 4]  958 	call DUPP 
      001F62 CD 04 51         [ 4]  959 	call TOR    ; R: a 
      001F65                        960 FMOVE2: 
      001F65 CD 0A BD         [ 4]  961 	call HERE 
      001F68 CD 04 45         [ 4]  962 	call RAT 
      001F6B CD 06 E1         [ 4]  963 	call SUBB ; (udl ud a wl -- )
      001F6E                        964 next_row:
      001F6E CD 04 88         [ 4]  965 	call DUPP 
      001F71 CD 04 51         [ 4]  966 	call TOR  ; ( udl ud a wl -- ) R: a wl
      001F74 CD 1E D5         [ 4]  967 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      001F77 CD 04 88         [ 4]  968 	call DUPP 
      001F7A CD 04 51         [ 4]  969 	call TOR
      001F7D CD 06 83         [ 4]  970 	call PLUS  ; ( udl+ ) 
      001F80 CD 04 88         [ 4]  971 	call DUPP 
      001F83 CD 09 CE         [ 4]  972 	call ZERO   ; ( udl+ ud -- )
      001F86 CD 04 32         [ 4]  973 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      001F89 CD 04 32         [ 4]  974 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      001F8C CD 04 B2         [ 4]  975 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      001F8F CD 06 E1         [ 4]  976 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      001F92 CD 04 88         [ 4]  977 	call DUPP 
      001F95 CD 03 8C         [ 4]  978 	call QBRAN
      001F98 1F B1                  979 	.word fmove_done 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      001F9A CD 04 98         [ 4]  980 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      001F9D CD 04 32         [ 4]  981 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      001FA0 CD 06 83         [ 4]  982 	call PLUS  ; ( udl+2 ud wl- a+ )
      001FA3 CD 04 88         [ 4]  983 	call DUPP 
      001FA6 CD 04 51         [ 4]  984 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      001FA9 CD 04 98         [ 4]  985 	call SWAPP 
      001FAC CD 03 A3         [ 4]  986 	call BRAN
      001FAF 1F 6E                  987 	.word next_row  
      001FB1                        988 fmove_done:	
      001FB1 CD 04 32         [ 4]  989 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      001FB4 1C 00 0A         [ 2]  990 	addw x,#5*CELLL ; (  -- udl+ ) new CP 
      001FB7 81               [ 4]  991  	ret  
      001FB8                        992 no_move:
      001FB8 CD 09 CE         [ 4]  993 	call ZERO
      001FBB 81               [ 4]  994 	ret 
                                    995 
                                    996 ;------------------------------------------
                                    997 ; adjust pointers after **FMOVE** operetion.
                                    998 ; UPDAT-PTR ( cp+ -- )
                                    999 ; cp+ is new CP position after FMOVE 
                                   1000 ;-------------------------------------------
      001FBC 1F 2E                 1001 	.word LINK 
                           001FBE  1002 	LINK=.
      001FBE 09                    1003 	.byte 9
      001FBF 55 50 44 41 54 2D 50  1004 	.ascii "UPDAT-PTR" 
             54 52
      001FC8                       1005 UPDATPTR:
                                   1006 ;reset VP to previous position  
      001FC8 CD 1A 0E         [ 4] 1007 	call EEPVP 
      001FCB CD 04 7E         [ 4] 1008 	call DROP 
      001FCE CD 03 E1         [ 4] 1009 	call AT
      001FD1 CD 05 D6         [ 4] 1010 	call VPP 
      001FD4 CD 03 CA         [ 4] 1011 	call STORE
                                   1012 ;update CONTEXT and LAST 
      001FD7 CD 19 F8         [ 4] 1013 	call EEPCP 
      001FDA CD 04 7E         [ 4] 1014 	call DROP
      001FDD CD 03 E1         [ 4] 1015 	call AT
      001FE0 CD 03 59         [ 4] 1016 	call DOLIT 
      001FE3 00 02                 1017 	.word 2 
      001FE5 CD 06 83         [ 4] 1018 	call PLUS 
      001FE8 CD 04 88         [ 4] 1019 	call DUPP 
      001FEB CD 05 C8         [ 4] 1020 	call CNTXT 
      001FEE CD 03 CA         [ 4] 1021 	call STORE
      001FF1 CD 05 F4         [ 4] 1022 	call LAST
      001FF4 CD 03 CA         [ 4] 1023 	call STORE 
      001FF7 CD 1A 28         [ 4] 1024 	call UPDATLAST 
                                   1025 ;update CP 
      001FFA CD 05 E4         [ 4] 1026 	call CPP 
      001FFD CD 03 CA         [ 4] 1027 	call STORE
      002000 CD 1A 51         [ 4] 1028 	call UPDATCP 
      002003 81               [ 4] 1029 	ret 
                                   1030 
                                   1031 ;-----------------------------
                                   1032 ; move interrupt sub-routine
                                   1033 ; in flash memory
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



                                   1034 ;----------------------------- 
      002004 1F BE                 1035 	.word LINK 
                           002006  1036 	LINK=. 
      002006 06                    1037 	.byte 6
      002007 49 46 4D 4F 56 45     1038 	.ascii "IFMOVE" 
      00200D                       1039 IFMOVE:
      00200D CD 05 95         [ 4] 1040 	call TFLASH 
      002010 CD 03 E1         [ 4] 1041 	CALL AT 
      002013 CD 03 8C         [ 4] 1042 	CALL QBRAN 
      002016 1F B8                 1043 	.word no_move 
      002018 CD 05 E4         [ 4] 1044 	call CPP 
      00201B CD 03 E1         [ 4] 1045 	call AT 
      00201E CD 04 88         [ 4] 1046 	call DUPP ; ( udl udl -- )
      002021 CD 1A 0E         [ 4] 1047 	call EEPVP 
      002024 CD 04 7E         [ 4] 1048 	call DROP
      002027 CD 03 E1         [ 4] 1049 	call AT  ; ( udl udl a )
      00202A CD 04 51         [ 4] 1050 	call TOR 
      00202D CD 1F 29         [ 4] 1051 	call FADDR
      002030 CD 04 45         [ 4] 1052 	call RAT ; ( udl ud a -- ) R: a 
      002033 CC 1F 65         [ 2] 1053 	jp FMOVE2 
                                   1054 
                                   1055 
                                   1056 ; application code begin here
      002080                       1057 	.bndry 128 ; align on flash block  
      002080                       1058 app_space: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



                                   4649 .endif ; PICATOUT_MOD
                                   4650 
                                   4651 ;===============================================================
                                   4652 
                           002006  4653 LASTN =	LINK   ;last name defined
                                   4654 
                                   4655 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        000704 R   |   6 ABOR1      001259 R
  6 ABOR2      001270 R   |   6 ABORQ      001251 R   |   6 ABORT      001242 R
  6 ABRTQ      00152D R   |   6 ABSS       0006FB R   |   6 ACCEP      0011D8 R
  6 ACCP1      0011E1 R   |   6 ACCP2      001207 R   |   6 ACCP3      00120A R
  6 ACCP4      00120C R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |   6 ADRADJ     000622 R
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  6 AFT        001518 R   |   6 AGAIN      00146E R   |   6 AHEAD      0014CB R
  6 ALLOT      001381 R   |   6 ANDD       0004D4 R   |     APP_CP  =  004004 
    APP_LAST=  004000     |     APP_RUN =  004002     |     APP_VP  =  004006 
  6 AT         0003E1 R   |   6 ATEXE      000AF3 R   |   6 AUTORUN    000123 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
  6 BACK1      001180 R   |   6 BASE       000545 R   |     BASEE   =  00000A 
    BCNT    =  000001     |   6 BCOMP      0013C3 R   |   6 BDIGS      000BDB R
    BEEP_BIT=  000004     |     BEEP_CSR=  0050F3     |     BEEP_MAS=  000010 
    BEEP_POR=  00000F     |   6 BEGIN      001450 R   |     BIT0    =  000000 
    BIT1    =  000001     |     BIT2    =  000002     |     BIT3    =  000003 
    BIT4    =  000004     |     BIT5    =  000005     |     BIT6    =  000006 
    BIT7    =  000007     |   6 BKSLA      001018 R   |   6 BKSP       001150 R
    BKSPP   =  000008     |   6 BLANK      0009C1 R   |     BLOCK_SI=  000080 
    BOOT_ROM=  006000     |     BOOT_ROM=  007FFF     |   6 BRAN       0003A3 R
    BTW     =  000001     |   6 BUF2ROW    001EA7 R   |   6 BYE        0000B0 R
    CADR    =  000003     |     CALLL   =  0000CD     |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CARRY   =  000028 
  6 CAT        0003FF R   |   6 CCOMMA     0013A5 R   |     CC_C    =  000000 
    CC_H    =  000004     |     CC_I0   =  000003     |     CC_I1   =  000005 
    CC_N    =  000002     |     CC_V    =  000007     |     CC_Z    =  000001 
    CELLL   =  000002     |   6 CELLM      000946 R   |   6 CELLP      000937 R
  6 CELLS      000955 R   |     CFG_GCR =  007F60     |     CFG_GCR_=  000001 
    CFG_GCR_=  000000     |   6 CHAR1      000E08 R   |   6 CHAR2      000E0B R
  6 CHKIVEC    001D95 R   |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |   6 CMOV1      000B12 R   |   6 CMOV2      000B2A R
  6 CMOVE      000B0A R   |     CNTDWN  =  000030     |   6 CNTXT      0005C8 R
  6 COLD       001925 R   |   6 COLD1      001925 R   |   6 COLON      0016C3 R
  6 COMMA      00138E R   |   6 COMPI      0013D3 R   |     COMPO   =  000040 
  6 CONSTANT   00176D R   |     CONVERT_=  000001     |   6 COUNT      000AA6 R
  6 CPP        0005E4 R   |     CPU_A   =  007F00     |     CPU_CCR =  007F0A 
    CPU_PCE =  007F01     |     CPU_PCH =  007F02     |     CPU_PCL =  007F03 
    CPU_SPH =  007F08     |     CPU_SPL =  007F09     |     CPU_XH  =  007F04 
    CPU_XL  =  007F05     |     CPU_YH  =  007F06     |     CPU_YL  =  007F07 
  6 CR         000E36 R   |   6 CREAT      001709 R   |     CRR     =  00000D 
  6 CSTOR      0003EE R   |   6 DAT        000A86 R   |     DATSTK  =  001680 
  6 DDROP      000663 R   |   6 DDUP       00066E R   |     DEBUG_BA=  007F00 
    DEBUG_EN=  007FFF     |   6 DECIM      000C8B R   |   6 DEPTH      000A11 R
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |   6 DGTQ1      000CD0 R
  6 DI         0000BE R   |   6 DIG        000C04 R   |   6 DIGIT      000B9F R
  6 DIGS       000C15 R   |   6 DIGS1      000C15 R   |   6 DIGS2      000C22 R
  6 DIGTQ      000C9F R   |     DM_BK1RE=  007F90     |     DM_BK1RH=  007F91 
    DM_BK1RL=  007F92     |     DM_BK2RE=  007F93     |     DM_BK2RH=  007F94 
    DM_BK2RL=  007F95     |     DM_CR1  =  007F96     |     DM_CR2  =  007F97 
    DM_CSR1 =  007F98     |     DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A 
  6 DN1        0006DB R   |   6 DNEGA      0006C0 R   |   6 DOCONST    001797 R
  6 DOLIT      000359 R   |   6 DONXT      00036D R   |   6 DOSTR      000E4C R
  6 DOT        000ED1 R   |   6 DOT1       000EE7 R   |   6 DOTI1      0018B9 R
  6 DOTID      0018A3 R   |   6 DOTO1      0012E5 R   |   6 DOTOK      0012CB R
  6 DOTPR      000FFA R   |   6 DOTQ       001547 R   |   6 DOTQP      000E75 R
  6 DOTR       000E83 R   |   6 DOTS       001845 R   |   6 DOTS1      001850 R
  6 DOTS2      001859 R   |   6 DOVAR      000535 R   |   6 DROP       00047E R
  6 DSTOR      000A60 R   |   6 DUMP       0017FB R   |   6 DUMP1      001812 R
  6 DUMP3      001834 R   |   6 DUMPP      0017CA R   |   6 DUPP       000488 R
  6 EDIGS      000C40 R   |   6 EEPCP      0019F8 R   |   6 EEPLAST    0019CB R
  6 EEPROM     0019B3 R   |     EEPROM_B=  004000     |     EEPROM_E=  0047FF 
    EEPROM_S=  000800     |   6 EEPRUN     0019E2 R   |   6 EEPVP      001A0E R
  6 EI         0000B7 R   |   6 ELSEE      0014A6 R   |   6 EMIT       000343 R
  6 EQ1        00071F R   |   6 EQUAL      000709 R   |   6 ERASE      000B6C R
    ERR     =  00001B     |   6 EVAL       00130E R   |   6 EVAL1      00130E R
  6 EVAL2      00132A R   |   6 EXE1       000B01 R   |   6 EXECU      0003B3 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]

Symbol Table

  6 EXIT       0003C3 R   |     EXT     =  000000     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |   6 EXTRC      000BC7 R   |   6 FADDR      001F29 R
    FHSE    =  7A1200     |     FHSI    =  F42400     |   6 FILL       000B39 R
  6 FILL1      000B56 R   |   6 FILL2      000B5F R   |   6 FIND       0010AC R
  6 FIND1      0010CA R   |   6 FIND2      0010F8 R   |   6 FIND3      001104 R
  6 FIND4      001118 R   |   6 FIND5      001125 R   |   6 FIND6      001109 R
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
    FLSI    =  01F400     |   6 FMOVE      001F34 R   |   6 FMOVE2     001F65 R
  6 FOR        001423 R   |   6 FORGET     000168 R   |   6 FORGET1    000197 R
  6 FORGET2    00021D R   |   6 FORGET4    000226 R   |   6 FORGET6    0001DF R
    FPTR    =  000032     |   6 FREEVAR    000233 R   |   6 FREEVAR4   000269 R
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_ODR=  000000 
    GPIO_SIZ=  000005     |   6 HERE       000ABD R   |   6 HEX        000C76 R
  6 HI         0018F8 R   |   6 HLD        0005B5 R   |   6 HOLD       000BEB R
    HSECNT  =  004809     |     I2C_CCRH=  00521C     |     I2C_CCRH=  000080 
    I2C_CCRH=  0000C0     |     I2C_CCRH=  000080     |     I2C_CCRH=  000000 
    I2C_CCRH=  000001     |     I2C_CCRH=  000000     |     I2C_CCRL=  00521B 
    I2C_CCRL=  00001A     |     I2C_CCRL=  000002     |     I2C_CCRL=  00000D 
    I2C_CCRL=  000050     |     I2C_CCRL=  000090     |     I2C_CCRL=  0000A0 
    I2C_CR1 =  005210     |     I2C_CR1_=  000006     |     I2C_CR1_=  000007 
    I2C_CR1_=  000000     |     I2C_CR2 =  005211     |     I2C_CR2_=  000002 
    I2C_CR2_=  000003     |     I2C_CR2_=  000000     |     I2C_CR2_=  000001 
    I2C_CR2_=  000007     |     I2C_DR  =  005216     |     I2C_FREQ=  005212 
    I2C_ITR =  00521A     |     I2C_ITR_=  000002     |     I2C_ITR_=  000000 
    I2C_ITR_=  000001     |     I2C_OARH=  005214     |     I2C_OARH=  000001 
    I2C_OARH=  000002     |     I2C_OARH=  000006     |     I2C_OARH=  000007 
    I2C_OARL=  005213     |     I2C_OARL=  000000     |     I2C_OAR_=  000813 
    I2C_OAR_=  000009     |     I2C_PECR=  00521E     |     I2C_READ=  000001 
    I2C_SR1 =  005217     |     I2C_SR1_=  000003     |     I2C_SR1_=  000001 
    I2C_SR1_=  000002     |     I2C_SR1_=  000006     |     I2C_SR1_=  000000 
    I2C_SR1_=  000004     |     I2C_SR1_=  000007     |     I2C_SR2 =  005218 
    I2C_SR2_=  000002     |     I2C_SR2_=  000001     |     I2C_SR2_=  000000 
    I2C_SR2_=  000003     |     I2C_SR2_=  000005     |     I2C_SR3 =  005219 
    I2C_SR3_=  000001     |     I2C_SR3_=  000007     |     I2C_SR3_=  000004 
    I2C_SR3_=  000000     |     I2C_SR3_=  000002     |     I2C_TRIS=  00521D 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_WRIT=  000000     |   6 ICOLON     0016D4 R   |   6 IFETCH     001441 R
  6 IFF        00147E R   |   6 IFMOVE     00200D R   |     IMEDD   =  000080 
  6 IMMED      0016E6 R   |   6 INCH       000337 R   |   6 INITOFS    00169C R
  6 INN        000563 R   |     INPUT_DI=  000000     |     INPUT_EI=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]

Symbol Table

    INPUT_FL=  000000     |     INPUT_PU=  000001     |   6 INTE1      0012AD R
  6 INTER      001283 R   |     INT_ADC2=  000016     |     INT_AUAR=  000012 
    INT_AWU =  000001     |     INT_CAN_=  000008     |     INT_CAN_=  000009 
    INT_CLK =  000002     |     INT_EXTI=  000003     |     INT_EXTI=  000004 
    INT_EXTI=  000005     |     INT_EXTI=  000006     |     INT_EXTI=  000007 
    INT_FLAS=  000018     |     INT_I2C =  000013     |     INT_SPI =  00000A 
    INT_TIM1=  00000C     |     INT_TIM1=  00000B     |     INT_TIM2=  00000E 
    INT_TIM2=  00000D     |     INT_TIM3=  000010     |     INT_TIM3=  00000F 
    INT_TIM4=  000017     |     INT_TLI =  000000     |     INT_UART=  000011 
    INT_UART=  000015     |     INT_UART=  000014     |     INT_VECT=  008060 
    INT_VECT=  00800C     |     INT_VECT=  008028     |     INT_VECT=  00802C 
    INT_VECT=  008010     |     INT_VECT=  008014     |     INT_VECT=  008018 
    INT_VECT=  00801C     |     INT_VECT=  008020     |     INT_VECT=  008024 
    INT_VECT=  008068     |     INT_VECT=  008054     |     INT_VECT=  008000 
    INT_VECT=  008030     |     INT_VECT=  008038     |     INT_VECT=  008034 
    INT_VECT=  008040     |     INT_VECT=  00803C     |     INT_VECT=  008048 
    INT_VECT=  008044     |     INT_VECT=  008064     |     INT_VECT=  008008 
    INT_VECT=  008004     |     INT_VECT=  008050     |     INT_VECT=  00804C 
    INT_VECT=  00805C     |     INT_VECT=  008058     |   6 INVER      00069D R
    IPR0    =  000002     |     IPR1    =  000001     |     IPR2    =  000000 
    IPR3    =  000003     |     IPR_MASK=  000003     |     IRET_COD=  000080 
  6 ISEMI      001631 R   |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
  6 JSRC       001686 R   |   6 KEY        000DB6 R   |   6 KTAP       00119D R
  6 KTAP1      0011C0 R   |   6 KTAP2      0011C3 R   |   6 LAST       0005F4 R
  6 LASTN   =  002006 R   |   6 LBRAC      0012BA R   |     LED2_BIT=  000005 
    LED2_MAS=  000020     |     LED2_POR=  00500A     |   6 LESS       000746 R
    LF      =  00000A     |   6 LINK    =  002006 R   |   6 LITER      0013F5 R
  6 LSHIFT     000980 R   |   6 LSHIFT1    000989 R   |   6 LSHIFT4    000991 R
  6 LT1        00075C R   |     MASKK   =  001F7F     |   6 MAX        000766 R
  6 MAX1       000779 R   |   6 MIN        000783 R   |   6 MIN1       000796 R
  6 MMOD1      000839 R   |   6 MMOD2      00084D R   |   6 MMOD3      000864 R
  6 MMSM1      0007E0 R   |   6 MMSM2      0007F4 R   |   6 MMSM3      0007F6 R
  6 MMSM4      0007FE R   |   6 MODD       00087E R   |   6 MONE       0009E7 R
    MS      =  00002E     |   6 MSEC       000273 R   |   6 MSMOD      00081C R
  6 MSTA1      00090F R   |   6 MSTAR      0008EC R   |     NAFR    =  004804 
  6 NAMEQ      001145 R   |   6 NAMET      001056 R   |     NCLKOPT =  004808 
  6 NEGAT      0006AE R   |   6 NEX1       00037A R   |   6 NEXT       001432 R
    NFLASH_W=  00480E     |     NHSECNT =  00480A     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
    NOPTBL  =  00487F     |   6 NTIB       000573 R   |     NUBC    =  004802 
  6 NUFQ       000DCC R   |   6 NUFQ1      000DE5 R   |   6 NUMBQ      000CE3 R
  6 NUMQ1      000D17 R   |   6 NUMQ2      000D48 R   |   6 NUMQ3      000D8A R
  6 NUMQ4      000D8F R   |   6 NUMQ5      000D9E R   |   6 NUMQ6      000DA1 R
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   6 NonHandl   000000 R
  6 OFFSET     000619 R   |     OFS     =  000005     |   6 ONE        0009D9 R
  6 ONEM       00096F R   |   6 ONEP       000962 R   |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]

Symbol Table

  6 ORIG       000043 R   |   6 ORR        0004E8 R   |   6 OUTPUT     000348 R
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |   6 OVER       0004B2 R   |   6 OVERT      001602 R
    PA      =  000000     |   6 PACKS      000B7E R   |   6 PAD        000ACE R
  6 PAREN      001009 R   |   6 PARS       000F02 R   |   6 PARS1      000F2D R
  6 PARS2      000F58 R   |   6 PARS3      000F5B R   |   6 PARS4      000F64 R
  6 PARS5      000F87 R   |   6 PARS6      000F9C R   |   6 PARS7      000FAB R
  6 PARS8      000FBA R   |   6 PARSE      000FCB R   |   6 PAUSE      000283 R
    PA_BASE =  005000     |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_BASE =  005005     |     PB_CR1  =  005008 
    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
    PB_ODR  =  005005     |     PC      =  00000A     |     PC_BASE =  00500A 
    PC_CR1  =  00500D     |     PC_CR2  =  00500E     |     PC_DDR  =  00500C 
    PC_IDR  =  00500B     |     PC_ODR  =  00500A     |     PD      =  00000F 
  6 PDUM1      0017DD R   |   6 PDUM2      0017EE R   |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
    PE_BASE =  005014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_BASE =  005019     |     PF_CR1  =  00501C 
    PF_CR2  =  00501D     |     PF_DDR  =  00501B     |     PF_IDR  =  00501A 
    PF_ODR  =  005019     |     PG      =  00001E     |     PG_BASE =  00501E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |     PH      =  000023 
    PH_BASE =  005023     |     PH_CR1  =  005026     |     PH_CR2  =  005027 
    PH_DDR  =  005025     |     PH_IDR  =  005024     |     PH_ODR  =  005023 
    PI      =  000028     |     PICATOUT=  000001     |   6 PICK       000A28 R
  6 PII        000150 R   |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   6 PLUS       000683 R   |   6 PNAM1      0015B7 R
  6 PRESE      001339 R   |     PROD1   =  000022     |     PROD2   =  000024 
    PROD3   =  000026     |   6 PROTECTE   00020F R   |   6 PSTOR      000A3F R
    PTR16   =  000033     |     PTR8    =  000034     |   6 QBRAN      00038C R
  6 QDUP       000632 R   |   6 QDUP1      00063C R   |   6 QKEY       000325 R
  6 QSTAC      0012F1 R   |   6 QUERY      00121D R   |   6 QUEST      000EF4 R
  6 QUIT       001356 R   |   6 QUIT1      00135E R   |   6 QUIT2      001361 R
  6 RAM2EE     001ED5 R   |     RAMBASE =  000000     |   6 RAMLAST    000607 R
    RAM_BASE=  000000     |     RAM_END =  0017FF     |     RAM_SIZE=  001800 
  6 RAT        000445 R   |   6 RBRAC      001673 R   |   6 REPEA      0014FB R
  6 RFREE      001EBC R   |   6 RFROM      000432 R   |     ROP     =  004800 
  6 ROT        000643 R   |   6 ROW2BUF    001E7E R   |     ROWBUFF =  001680 
    RP0     =  00002C     |   6 RPAT       00040F R   |     RPP     =  0017FF 
  6 RPSTO      00041C R   |   6 RSHIFT     00099C R   |   6 RSHIFT1    0009A5 R
  6 RSHIFT4    0009AD R   |     RST_SR  =  0050B3     |   6 SAME1      001074 R
  6 SAME2      00109D R   |   6 SAMEQ      00106C R   |   6 SCOM1      0015EC R
  6 SCOM2      0015EF R   |   6 SCOMP      0015CE R   |   6 SEMIS      001612 R
  6 SETISP     0000CA R   |   6 SET_RAML   001756 R   |     SFR_BASE=  005000 
    SFR_END =  0057FF     |   6 SIGN       000C2A R   |   6 SIGN1      000C3A R
  6 SLASH      000888 R   |   6 SLMOD      00086C R   |   6 SNAME      001581 R
    SP0     =  00002A     |   6 SPACE      000DEE R   |   6 SPACS      000DFD R
  6 SPAT       000468 R   |     SPI_CR1 =  005200     |     SPI_CR2 =  005201 
    SPI_CRCP=  005205     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_TXCR=  005207 
    SPP     =  001680     |   6 SPSTO      000475 R   |   6 SSMOD      000918 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]

Symbol Table

    SSP     =  000001     |     STACK   =  0017FF     |   6 STAR       0008E1 R
  6 STASL      000929 R   |   6 STORE      0003CA R   |   6 STR        000C58 R
  6 STRCQ      001403 R   |   6 STRQ       00153A R   |   6 STRQP      000E6B R
  6 SUBB       0006E1 R   |   6 SWAPP      000498 R   |     SWIM_CSR=  007F80 
  6 TAP        001187 R   |   6 TBOOT      001919 R   |   6 TBUF       000583 R
    TBUFFBAS=  001680     |   6 TCHA1      000A08 R   |   6 TCHAR      0009F8 R
  6 TEMP       000554 R   |   6 TEVAL      0005A6 R   |   6 TFLASH     000595 R
  6 THENN      001493 R   |   6 TIB        000ADF R   |     TIBB    =  001700 
    TIBBASE =  001700     |     TIC     =  000027     |   6 TICK       00136D R
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]

Symbol Table

    TIM2_CCE=  005308     |     TIM2_CCE=  000000     |     TIM2_CCE=  000001 
    TIM2_CCE=  000004     |     TIM2_CCE=  000005     |     TIM2_CCE=  005309 
    TIM2_CCM=  005305     |     TIM2_CCM=  005306     |     TIM2_CCM=  005307 
    TIM2_CCM=  000000     |     TIM2_CCM=  000004     |     TIM2_CCM=  000003 
    TIM2_CCR=  00530F     |     TIM2_CCR=  005310     |     TIM2_CCR=  005311 
    TIM2_CCR=  005312     |     TIM2_CCR=  005313     |     TIM2_CCR=  005314 
    TIM2_CNT=  00530A     |     TIM2_CNT=  00530B     |     TIM2_CR1=  005300 
    TIM2_CR1=  000007     |     TIM2_CR1=  000000     |     TIM2_CR1=  000003 
    TIM2_CR1=  000001     |     TIM2_CR1=  000002     |     TIM2_EGR=  005304 
    TIM2_EGR=  000001     |     TIM2_EGR=  000002     |     TIM2_EGR=  000003 
    TIM2_EGR=  000006     |     TIM2_EGR=  000000     |     TIM2_IER=  005301 
    TIM2_PSC=  00530C     |     TIM2_SR1=  005302     |     TIM2_SR2=  005303 
    TIM3_ARR=  00532B     |     TIM3_ARR=  00532C     |     TIM3_CCE=  005327 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCE=  000004 
    TIM3_CCE=  000005     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCM=  005325     |     TIM3_CCM=  005326     |     TIM3_CCM=  000000 
    TIM3_CCM=  000004     |     TIM3_CCM=  000003     |     TIM3_CCR=  00532D 
    TIM3_CCR=  00532E     |     TIM3_CCR=  00532F     |     TIM3_CCR=  005330 
    TIM3_CNT=  005328     |     TIM3_CNT=  005329     |     TIM3_CR1=  005320 
    TIM3_CR1=  000007     |     TIM3_CR1=  000000     |     TIM3_CR1=  000003 
    TIM3_CR1=  000001     |     TIM3_CR1=  000002     |     TIM3_EGR=  005324 
    TIM3_IER=  005321     |     TIM3_PSC=  00532A     |     TIM3_SR1=  005322 
    TIM3_SR2=  005323     |     TIM4_ARR=  005346     |     TIM4_CNT=  005344 
    TIM4_CR1=  005340     |     TIM4_CR1=  000007     |     TIM4_CR1=  000000 
    TIM4_CR1=  000003     |     TIM4_CR1=  000001     |     TIM4_CR1=  000002 
    TIM4_EGR=  005343     |     TIM4_EGR=  000000     |     TIM4_IER=  005341 
    TIM4_IER=  000000     |     TIM4_PSC=  005345     |     TIM4_PSC=  000000 
    TIM4_PSC=  000007     |     TIM4_PSC=  000004     |     TIM4_PSC=  000001 
    TIM4_PSC=  000005     |     TIM4_PSC=  000002     |     TIM4_PSC=  000006 
    TIM4_PSC=  000003     |     TIM4_PSC=  000000     |     TIM4_PSC=  000001 
    TIM4_PSC=  000002     |     TIM4_SR =  005342     |     TIM4_SR_=  000000 
  6 TIMEOUTQ   0002B3 R   |   6 TIMER      00029D R   |     TIM_CR1_=  000007 
    TIM_CR1_=  000000     |     TIM_CR1_=  000006     |     TIM_CR1_=  000005 
    TIM_CR1_=  000004     |     TIM_CR1_=  000003     |     TIM_CR1_=  000001 
    TIM_CR1_=  000002     |   6 TNAM2      001873 R   |   6 TNAM3      001891 R
  6 TNAM4      001897 R   |   6 TNAME      001870 R   |   6 TOFLASH    0002D8 R
  6 TOKEN      001048 R   |   6 TOR        000451 R   |   6 TORAM      000318 R
    TRUEE   =  00FFFF     |   6 TWOSL      0009B4 R   |   6 TYPE1      000E1D R
  6 TYPE2      000E29 R   |   6 TYPES      000E18 R   |   6 Timer4Ha   000005 R
    UART1   =  000000     |     UART1_BA=  005230     |     UART1_BR=  005232 
    UART1_BR=  005233     |     UART1_CR=  005234     |     UART1_CR=  005235 
    UART1_CR=  005236     |     UART1_CR=  005237     |     UART1_CR=  005238 
    UART1_DR=  005231     |     UART1_GT=  005239     |     UART1_PO=  000000 
    UART1_PS=  00523A     |     UART1_RX=  000004     |     UART1_SR=  005230 
    UART1_TX=  000005     |     UART3   =  000001     |     UART3_BA=  005240 
    UART3_BR=  005242     |     UART3_BR=  005243     |     UART3_CR=  005244 
    UART3_CR=  005245     |     UART3_CR=  005246     |     UART3_CR=  005247 
    UART3_CR=  004249     |     UART3_DR=  005241     |     UART3_PO=  00000F 
    UART3_RX=  000006     |     UART3_SR=  005240     |     UART3_TX=  000005 
    UART_BRR=  000002     |     UART_BRR=  000003     |     UART_CR1=  000004 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  000005 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]

Symbol Table

    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000006 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000007     |     UART_CR4=  000000 
    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000008     |     UART_CR5=  000003     |     UART_CR5=  000001 
    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_CR6=  000009     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DR =  000001     |     UART_GTR=  000009 
    UART_PSC=  00000A     |     UART_SR =  000000     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBASE   =  000006     |     UBC     =  004801 
    UCNTXT  =  000014     |     UCP     =  000018     |     UCTIB   =  00000C 
    UD1     =  000001     |     UD2     =  000002     |     UD3     =  000003 
    UD4     =  000004     |   6 UDOT       000EBE R   |   6 UDOTR      000E9E R
  6 UEND       000041 R   |     UHLD    =  000012     |     UINN    =  00000A 
    UINTER  =  000010     |     ULAST   =  00001A     |   6 ULES1      00073E R
  6 ULESS      000728 R   |   6 UMMOD      0007BE R   |   6 UMSTA      000897 R
  6 UNIQ1      001578 R   |   6 UNIQU      001559 R   |   6 UNTIL      00145B R
    UOFFSET =  00001C     |   6 UPDATCP    001A51 R   |   6 UPDATLAS   001A28 R
  6 UPDATPTR   001FC8 R   |   6 UPDATRUN   001A40 R   |   6 UPDATVP    001A68 R
  6 UPL1       000529 R   |   6 UPLUS      000512 R   |     UPP     =  000006 
    URLAST  =  000020     |     USR_BTN_=  000004     |     USR_BTN_=  000010 
    USR_BTN_=  005015     |     UTFLASH =  00001E     |     UTIB    =  00000E 
    UTMP    =  000008     |   6 UTYP1      0017AD R   |   6 UTYP2      0017BC R
  6 UTYPE      0017A8 R   |     UVP     =  000016     |   6 UZERO      000027 R
  6 VARIA      001723 R   |     VAR_BASE=  000080     |     VAR_TOP =  0017BF 
    VER     =  000003     |   6 VPP        0005D6 R   |     VSIZE   =  000006 
    WANT_DEB=  000000     |     WANT_SEE=  000000     |     WDGOPT  =  004805 
    WDGOPT_I=  000002     |     WDGOPT_L=  000003     |     WDGOPT_W=  000000 
    WDGOPT_W=  000001     |   6 WHILE      0014E1 R   |   6 WITHI      0007A3 R
  6 WORDD      001034 R   |   6 WORDS      0018CD R   |   6 WORS1      0018D3 R
  6 WORS2      0018F2 R   |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
  6 XORR       0004FD R   |     XTEMP   =  000022     |     YTEMP   =  000024 
  6 ZERO       0009CE R   |   6 ZL1        0004CA R   |   6 ZLESS      0004C1 R
  6 app_spac   002080 R   |   6 block_er   001BEB R   |   6 clear_ra   000019 R
  6 clock_in   00005E R   |   6 copy_buf   001C42 R   |   6 copy_buf   001C61 R
  6 copy_pro   001C61 R   |     da      =  000002     |     db      =  000003 
    dc      =  000000     |     dd      =  000001     |   6 ee_ccomm   001E5C R
  6 ee_comma   001E3B R   |   6 ee_cstor   001B58 R   |   6 ee_store   001BA4 R
  6 erase_fl   001C07 R   |   6 farat      001A79 R   |   6 farcat     001A95 R
  6 fmove_do   001FB1 R   |   6 fptr_sto   001994 R   |   6 inc_fptr   001B26 R
  6 lock       001B12 R   |   6 main       000016 R   |   6 next_row   001F6E R
  6 no_move    001FB8 R   |   6 pristine   001CDC R   |   6 proceed_   001C0A R
  6 reboot     0002CA R   |   6 reset_ve   001D43 R   |   6 row_eras   001BCE R
  6 row_eras   001C1B R   |   6 row_eras   001C42 R   |   6 set_opti   001CB0 R
  6 set_vect   001DE4 R   |   6 uart1_in   000070 R   |   6 unlock     001AEA R
  6 unlock_e   001AAC R   |   6 unlock_f   001ACB R   |   6 write_by   001B3D R
  6 write_ro   001C86 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   2080   flags    0

