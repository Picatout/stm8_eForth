ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;-------------------------------------------------------------
                                     21 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                     22 ;  assemble using sdasstm8
                                     23 ;  implemented on NUCLEO-8S208RB board
                                     24 ;  Adapted by picatout 2019/10/27
                                     25 ;  https://github.com/picatout/stm8_nucleo/eForth
                                     26 ;--------------------------------------------------------------
                                     27 	.module EFORTH
                                     28          .optsdcc -mstm8
                                                .include "inc/macros.inc" 
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        
                                            ; macro to create dictionary header record
                                            .macro _HEADER label,len,name 
                                        
                                            ; runtime literal 
                                            .macro _DOLIT value 
                                        
                                            ; branch if TOS<>0
                                            ; TBRANCH 
                                            .macro _TBRAN target 
                                            
                                            ; branch if TOS==0 
                                            ; 0BRANCH 
                                            .macro _QBRAN target 
                                        
                                            ; uncondittionnal BRANCH 
                                            .macro _BRAN target 
                                        
                                            ; run time NEXT 
                                            .macro _DONXT target 
                                        
                                            ; drop TOS 
                                            .macro _DROP 
                                          
                                           ; drop a double 
                                           .macro _DDROP 
                                        
                                                .include "inc/config.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        
                                        ; constants to select board
                                        ; to assemble for a specific 
                                        ; board or MCU set it to 1 and the other
                                        ; to 0. 
                                 
                                 
                                 
                                        
                                        ; select end of line character
                                 
                                 
                                        
                                        ; set to 1 to include 
                                        ; scaling constants vocabulary
                                        ; see: const_ratio.asm 
                                 
                                        
                                        ; set to 1 to include 
                                        ; constants tables vocabulary 
                                        ; see: ctable.asm 
                                 
                                        
                                        ; include double library 
                                 
                                        
                                        ; to include floating point 
                                        ; library
                                        ; require double library  
                                 
                                        
                                        ; set to 1 to make vocabulary 
                                        ; case sensitive 
                                 
                                        
                                        ; how many bytes are reserved 
                                        ; by system at EEPROM base.
                                 
                                        
                                 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        .endif
                                        
                                 
                                        	.include "inc/stm8s105.inc"
                                        .if DISCOVERY
                                        	.include "inc/stm8s_disco.inc"
                                        .endif 
                                        XMEM_SIZE=0 ; size in bytes of EXTENDED MEMORY 
                                        UART_SR=UART2_SR
                                        UART_DR=UART2_DR
                                        UART_BRR1=UART2_BRR1
                                        UART_BRR2=UART2_BRR2
                                        UART_CR1=UART2_CR1
                                        UART_CR2=UART2_CR2
                                        .endif 
                                        
                                        	
                                         
                                        
                                        
                                        
                                     32 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     34 
                                     35 ;===============================================================
                                     36 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     37 ;  Date: 2020-06-07 
                                     38 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     39 ;  Date: 2019-10-26
                                     40 ;  Changes to memory map:
                                     41 ;       0x16f0  Data Stack, growing downward
                                     42 ;       0x1700  Terminal input buffer TIB
                                     43 ;       0x17ff  Return Stack, growing downard
                                     44 ;================================================================
                                     45 ;       STM8EF, Version 2.1, 13 July
                                     46 ;               Implemented on STM8S-Discovery Board.
                                     47 ;               Assembled by ST VisualDevelop STVD 
                                     48 ;               Bootup on internal 2 MHz clock
                                     49 ;               Switch to external 16 MHz crystal clock
                                     50 ;
                                     51 ; FORTH Virtual Machine:
                                     52 ; Subroutine threaded model
                                     53 ; SP Return stack pointer
                                     54 ; X Data stack pointer
                                     55 ; A,Y Scratch pad registers
                                     56 ;
                                     57 ; Memory Map:
                                     58 ; 0x0 RAM memory, system variables
                                     59 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     60 ; 0x780 Data stack, growing downward
                                     61 ; 0x790 Terminal input buffer TIB
                                     62 ; 0x7FF Return stack, growing downward
                                     63 ; 0x8000 Interrupt vector table
                                     64 ; 0x8080 FORTH startup code
                                     65 ; 0x80E7 Start of FORTH dictionary in ROM
                                     66 ; 0x9584 End of FORTH dictionary
                                     67 ;
                                     68 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     69 ;                  use UART1 instead of UART2 for communication with user.
                                     70 ;                  UART1 is available as ttyACM* device via USB connection.
                                     71 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     72 ;                  and MSEC word that return MS value.
                                     73 ;
                                     74 ;       EF12, Version 2.1, 18apr00cht
                                     75 ;               move to 8000H replacing WHYP.
                                     76 ;               copy interrupt vectors from WHYPFLSH.S19
                                     77 ;               to EF12.S19 before flashing
                                     78 ;               add TICKS1 and DELAY1 for motor stepping
                                     79 ;
                                     80 ;       EF12, 02/18/00, C. H. Ting
                                     81 ;       Adapt 86eForth v2.02 to 68HC12.
                                     82 ;               Use WHYP to seed EF12.ASM
                                     83 ;               Use AS12 native 68HC12 assembler:
                                     84 ;               as12 ef12.asm >ef12.lst
                                     85 ;       EF12A, add ADC code, 02mar00cht
                                     86 ;       EF12B, 01mar00cht
                                     87 ;               stack to 0x78, return stack to 0xf8.
                                     88 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     89 ;               add PWM registers
                                     90 ;               add SPI registers and code
                                     91 ;       EF12C, 12mar00cht
                                     92 ;               add MAX5250 D/A converter
                                     93 ;       EF12D, 15mar00cht
                                     94 ;               add all the Lexel interface words
                                     95 ;       EF12E, 18apr00cht, save for reference
                                     96 ;
                                     97 ;       Copyright (c) 2000
                                     98 ;       Dr. C. H. Ting
                                     99 ;       156 14th Avenue
                                    100 ;       San Mateo, CA 94402
                                    101 ;       (650) 571-7639
                                    102 ;
                                    103 
                                    104       
                                    105 ;*********************************************************
                                    106 ;	Assembler constants
                                    107 ;*********************************************************
                           000000   108 RAMBASE =	0x0000	   ;ram base
                           000001   109 .if NUCLEO 
                           0017FF   110 STACK   =	0x17FF 	;system (return) stack empty 
                           001680   111 DATSTK  =	0x1680	;data stack  empty
                           001680   112 TBUFFBASE =     0x1680  ; flash read/write transaction buffer address  
                           001700   113 TIBBASE =       0X1700  ; transaction input buffer addr.
                           000000   114 .else ; DISCOVERY
                                    115 STACK   =	0x7FF 	;system (return) stack empty 
                                    116 DATSTK  =	0x680	;data stack  empty
                                    117 TBUFFBASE =     0x680  ; flash read/write transaction buffer address  
                                    118 TIBBASE =       0X700  ; transaction input buffer addr.
                                    119 .endif
                                    120 
                                    121 ;; Memory allocation
                           000006   122 UPP     =     RAMBASE+6          ; systeme variables base address 
                           001680   123 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0017FF   124 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           001680   125 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           001700   126 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   127 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0017BF   128 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    129 
                                    130 ; user variables constants 
                           000006   131 UBASE = UPP       ; numeric base 
                           000008   132 UFPSW = UBASE+2  ; floating point state word 
                           00000A   133 UTMP = UFPSW+2    ; temporary storage
                           00000C   134 UINN = UTMP+2     ; >IN tib pointer 
                           00000E   135 UCTIB = UINN+2    ; tib count 
                           000010   136 UTIB = UCTIB+2    ; tib address 
                           000012   137 UINTER = UTIB+2   ; interpreter vector 
                           000014   138 UHLD = UINTER+2   ; hold 
                           000016   139 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000018   140 UVP = UCNTXT+2    ; variable pointer 
                           00001A   141 UCP = UVP+2      ; code pointer
                           00001C   142 ULAST = UCP+2    ; last dictionary pointer 
                           00001E   143 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000020   144 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
                           000022   145 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    146 
                                    147 ;******  System Variables  ******
                           000024   148 XTEMP	=	URLAST +2;address called by CREATE
                           000026   149 YTEMP	=	XTEMP+2	;address called by CREATE
                           000024   150 PROD1 = XTEMP	;space for UM*
                           000026   151 PROD2 = PROD1+2
                           000028   152 PROD3 = PROD2+2
                           00002A   153 CARRY = PROD3+2
                           00002C   154 SP0	= CARRY+2	;initial data stack pointer
                           00002E   155 RP0	= SP0+2		;initial return stack pointer
                           000030   156 MS    =   RP0+2         ; millisecond counter 
                           000032   157 CNTDWN =  MS+2          ; count down timer 
                           000034   158 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000035   159 PTR16 = FPTR+1          ; middle byte of farptr 
                           000036   160 PTR8 = FPTR+2           ; least byte of farptr 
                           000038   161 SEEDX = PTR8+2          ; PRNG seed X 
                           00003A   162 SEEDY = SEEDX+2         ; PRNG seed Y 
                                    163 
                                    164 ; EEPROM persistant data  
                           004000   165 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   166 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   167 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   168 APP_VP = APP_CP+2  ; free data space pointer 
                                    169 
                                    170 
                                    171 ;***********************************************
                                    172 ;; Version control
                                    173 
                           000004   174 VER     =     4         ;major release version
                           000000   175 EXT     =     0         ;minor extension
                                    176 
                                    177 ;; Constants
                                    178 
                           00FFFF   179 TRUEE   =     0xFFFF      ;true flag
                                    180 
                           000040   181 COMPO   =     0x40     ;lexicon compile only bit
                           000080   182 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   183 MASKK   =     0x1F7F  ;lexicon bit mask
                                    184 
                           000002   185 CELLL   =     2       ;size of a cell
                           00000A   186 BASEE   =     10      ;default radix
                           000008   187 BKSPP   =     8       ;back space
                           00000A   188 LF      =     10      ;line feed
                           00000D   189 CRR     =     13      ;carriage return
                           000011   190 XON     =     17
                           000013   191 XOFF    =     19
                           00001B   192 ERR     =     27      ;error escape
                           000027   193 TIC     =     39      ;tick
                           0000CD   194 CALLL   =     0xCD     ;CALL opcodes
                           000080   195 IRET_CODE =   0x80    ; IRET opcode 
                                    196 
                                    197         .macro _ledon
                                    198         .if NUCLEO
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    199         bset PC_ODR,#LED2_BIT
                                    200         .else ;DISCOVERY 
                                    201         .if DISCOVERY
                                    202         bres PD_ODR,#LD1_BIT 
                                    203         .endif
                                    204         .endif
                                    205         .endm
                                    206 
                                    207         .macro _ledoff
                                    208         .if NUCLEO 
                                    209         bres PC_ODR,#LED2_BIT
                                    210         .else ;DISCOVERY 
                                    211         .if DISCOVERY
                                    212         bset PD_ODR,#LD1_BIT 
                                    213         .endif 
                                    214         .endif
                                    215         .endm
                                    216 
                                    217 ;**********************************************************
                                    218         .area DATA (ABS)
      000000                        219         .org RAMBASE 
                                    220 ;**********************************************************
                                    221 
                                    222 ;**********************************************************
                                    223         .area SSEG (ABS) ; STACK
      001700                        224         .org 0x1700
      001700                        225         .ds 256 
                                    226 ; space for DATSTK,TIB and STACK         
                                    227 ;**********************************************************
                                    228 
                                    229 ;**********************************************************
                                    230         .area HOME ; vectors table
                                    231 ;**********************************************************
      000000 82 00 00 16            232 	int main	        ; reset
      000004 82 00 00 00            233 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            234 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            235 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            236 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            237 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            238 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            239 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            240 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            241 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            242 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            243 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            244 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            245 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            246 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            247 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            248 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            249 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            250 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            251 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            252 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            253 	int NonHandledInterrupt	; irq19
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      000058 82 00 00 00            254 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            255 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            256 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            257 	int Timer4Handler	; irq23
      000068 82 00 00 00            258 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            259 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            260 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            261 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            262 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            263 	int NonHandledInterrupt	; irq29
                                    264 
                                    265 ;**********************************************************
                                    266         .area CODE
                                    267 ;**********************************************************
                                    268 
                                    269 ; non handled interrupt reset MCU
      000000                        270 NonHandledInterrupt:
      000000 A6 80            [ 1]  271         ld a, #0x80
      000002 C7 50 D1         [ 1]  272         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    273 	;iret
                                    274 
                                    275 ; used for milliseconds counter 
                                    276 ; MS is 16 bits counter 
      000005                        277 Timer4Handler:
      000005 72 5F 53 42      [ 1]  278 	clr TIM4_SR 
      000009 BE 30            [ 2]  279         ldw x,MS 
      00000B 5C               [ 1]  280         incw x 
      00000C BF 30            [ 2]  281         ldw MS,x
      00000E BE 32            [ 2]  282         ldw x,CNTDWN 
      000010 27 03            [ 1]  283         jreq 1$
      000012 5A               [ 2]  284         decw x 
      000013 BF 32            [ 2]  285         ldw CNTDWN,x 
      000015                        286 1$:         
      000015 80               [11]  287         iret 
                                    288 
                                    289 
                                    290 ;; Main entry points and COLD start data
      000016                        291 main:
                                    292 ; clear all RAM
      000016 AE 00 00         [ 2]  293 	ldw X,#RAMBASE
      000019                        294 clear_ram0:
      000019 7F               [ 1]  295 	clr (X)
      00001A 5C               [ 1]  296 	incw X
      00001B A3 17 FF         [ 2]  297 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  298 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  299         ldw x,#RPP
      000023 94               [ 1]  300         ldw sp,x
                                    301 ; set SEEDX and SEEDY to 1 
      000024 3C 39            [ 1]  302         inc SEEDX+1 
      000026 3C 3B            [ 1]  303         inc SEEDY+1          
      000028 CC 00 49         [ 2]  304 	jp ORIG
                                    305 
                                    306 ; COLD initialize these variables.
      00002B                        307 UZERO:
      00002B 00 0A                  308         .word      BASEE   ;BASE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      00002D 00 00                  309         .word      0       ; floating point state 
      00002F 00 00                  310         .word      0       ;tmp
      000031 00 00                  311         .word      0       ;>IN
      000033 00 00                  312         .word      0       ;#TIB
      000035 17 00                  313         .word      TIBB    ;TIB
      000037 14 33                  314         .word      INTER   ;'EVAL
      000039 00 00                  315         .word      0       ;HLD
      00003B 35 76                  316         .word      LASTN  ;CNTXT pointer
      00003D 00 80                  317         .word      VAR_BASE   ;variables free space pointer 
      00003F 36 00                  318         .word      app_space ; FLASH free space pointer 
      000041 35 76                  319         .word      LASTN   ;LAST
      000043 00 00                  320         .word      0        ; OFFSET 
      000045 00 00                  321         .word      0       ; TFLASH
                                    322 ;       .word      0       ; URLAST   
      000047 00 00                  323 UEND:   .word      0
                                    324 
      000049                        325 ORIG:   
                                    326 ; initialize SP
      000049 AE 17 FF         [ 2]  327         LDW     X,#STACK  ;initialize return stack
      00004C 94               [ 1]  328         LDW     SP,X
      00004D BF 2E            [ 2]  329         LDW     RP0,X
      00004F AE 16 80         [ 2]  330         LDW     X,#DATSTK ;initialize data stack
      000052 BF 2C            [ 2]  331         LDW     SP0,X
                           000001   332 .if NUCLEO        
                                    333 ; initialize PC_5 as output to control LED2
                                    334 ; added by Picatout 
      000054 72 1A 50 0D      [ 1]  335         bset PC_CR1,#LED2_BIT
      000058 72 1A 50 0E      [ 1]  336         bset PC_CR2,#LED2_BIT
      00005C 72 1A 50 0C      [ 1]  337         bset PC_DDR,#LED2_BIT
                                    338 .endif 
                           000000   339 .if DISCOVERY
                                    340         bset PD_CR1,#LD1_BIT
                                    341         bset PD_CR2,#LD1_BIT
                                    342         bset PD_DDR,#LD1_BIT 
                                    343 .endif
      000060                        344         _ledoff
                           000001     1         .if NUCLEO 
      000060 72 1B 50 0A      [ 1]    2         bres PC_ODR,#LED2_BIT
                           000000     3         .else ;DISCOVERY 
                                      4         .if DISCOVERY
                                      5         bset PD_ODR,#LD1_BIT 
                                      6         .endif 
                                      7         .endif
                                    345 ; initialize clock to HSI
                                    346 ; no divisor 16Mhz 
                                    347 ; Added by Picatout 
      000064                        348 clock_init:
      000064 72 5F 50 C6      [ 1]  349         clr CLK_CKDIVR
      000068 72 12 50 C5      [ 1]  350 	bset CLK_SWCR,#CLK_SWCR_SWEN
                           000001   351 .if NUCLEO|DOORBELL
      00006C A6 E1            [ 1]  352 	ld a,#CLK_SWR_HSI
                           000000   353 .else ; DISCOVERY as 16Mhz crystal
                                    354 	ld a,#CLK_SWR_HSE
                                    355 .endif 
      00006E C7 50 C4         [ 1]  356 	ld CLK_SWR,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      000071 C1 50 C3         [ 1]  357 1$:	cp a,CLK_CMSR
      000074 26 FB            [ 1]  358 	jrne 1$
                                    359         
                                    360 ; initialize UART, 115200 8N1
      000076                        361 uart_init:
                           000001   362 .if NUCLEO 
      000076 72 14 50 C7      [ 1]  363 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    364 	; configure tx pin
      00007A 72 1A 50 02      [ 1]  365 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      00007E 72 1A 50 03      [ 1]  366 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      000082 72 1A 50 04      [ 1]  367 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    368 	; baud rate 115200 Fmaster=16Mhz  16000000/115200=139=0x8b
                           000000   369 .else ; DISCOVERY use UART2 
                                    370 	bset CLK_PCKENR1,#CLK_PCKENR1_UART2
                                    371 	; configure tx pin
                                    372 	bset PD_DDR,#UART2_TX_PIN ; tx pin
                                    373 	bset PD_CR1,#UART2_TX_PIN ; push-pull output
                                    374 	bset PD_CR2,#UART2_TX_PIN ; fast output
                                    375 .endif
                                    376 ; baud rate 115200 Fmaster=8Mhz  
      000086 35 0B 52 33      [ 1]  377 	mov UART_BRR2,#0x0b ; must be loaded first
      00008A 35 08 52 32      [ 1]  378 	mov UART_BRR1,#0x8
      00008E 35 0C 52 35      [ 1]  379 	mov UART_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    380 ; initialize timer4, used for millisecond interrupt  
      000092 35 07 53 45      [ 1]  381 	mov TIM4_PSCR,#7 ; prescale 128  
      000096 35 7D 53 46      [ 1]  382 	mov TIM4_ARR,#125 ; set for 1msec.
      00009A 35 05 53 40      [ 1]  383 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      00009E 72 10 53 41      [ 1]  384 	bset TIM4_IER,#TIM4_IER_UIE 
                                    385 ; set TIM4 interrupt priority to highest
      0000A2 A6 3F            [ 1]  386         ld a,#~(IPR_MASK<<6)
      0000A4 C4 7F 75         [ 1]  387         and a,ITC_SPR6
      0000A7 AA C0            [ 1]  388         or a,#(IPR3<<6)
      0000A9 C7 7F 75         [ 1]  389         ld ITC_SPR6,a 
      0000AC 9A               [ 1]  390         rim
      0000AD CC 1B A3         [ 2]  391         jp  COLD   ;default=MN1
                                    392 
                           000000   393         LINK=0 
                                    394 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;        
                                    395 ;; place MCU in sleep mode with
                                    396 ;; halt opcode 
                                    397 ;; BYE ( -- )
                                    398 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000B0                        399         _HEADER BYE,3,"BYE"
      0000B0 00 00                    1         .word LINK 
                           0000B2     2         LINK=.
      0000B2 03                       3         .byte 3  
      0000B3 42 59 45                 4         .ascii "BYE"
      0000B6                          5         BYE:
      0000B6 8E               [10]  400         halt 
      0000B7 81               [ 4]  401         ret 
                                    402 
                                    403 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    404 ; Enable interrupts 
                                    405 ; EI ( -- )
                                    406 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      0000B8                        407         _HEADER EI,2,"EI"
      0000B8 00 B2                    1         .word LINK 
                           0000BA     2         LINK=.
      0000BA 02                       3         .byte 2  
      0000BB 45 49                    4         .ascii "EI"
      0000BD                          5         EI:
      0000BD 9A               [ 1]  408         rim 
      0000BE 81               [ 4]  409         ret 
                                    410 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    411 ; Disable interrupts
                                    412 ; DI ( -- )
                                    413 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000BF                        414         _HEADER DI,2,"DI"
      0000BF 00 BA                    1         .word LINK 
                           0000C1     2         LINK=.
      0000C1 02                       3         .byte 2  
      0000C2 44 49                    4         .ascii "DI"
      0000C4                          5         DI:
      0000C4 9B               [ 1]  415         sim 
      0000C5 81               [ 4]  416         ret 
                                    417 
                                    418 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    419 ; set interrupt priority level 
                                    420 ; SET-ISP ( n1 n2 -- )
                                    421 ; n1 level {1..3}
                                    422 ; n2 vector {0..29}
                                    423 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000C6                        424         _HEADER SETISP,7,"SET-ISP"
      0000C6 00 C1                    1         .word LINK 
                           0000C8     2         LINK=.
      0000C8 07                       3         .byte 7  
      0000C9 53 45 54 2D 49 53 50     4         .ascii "SET-ISP"
      0000D0                          5         SETISP:
      0000D0 90 93            [ 1]  425         ldw y,x 
      0000D2 90 FE            [ 2]  426         ldw y,(y)
      0000D4 A6 04            [ 1]  427         ld a,#4 ; 4 slot per register 
                                    428 ;  quotient select register, remainder select slot in register.        
      0000D6 90 62            [ 2]  429         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000D8 A4 03            [ 1]  430         and a,#3 
      0000DA 48               [ 1]  431         sll a ; 2*SLOT  lshift 
      0000DB 72 A9 7F 70      [ 2]  432         addw y,#ITC_SPR1 
      0000DF FF               [ 2]  433         ldw (x),y  ; ( level reg -- )
      0000E0 90 5F            [ 1]  434         clrw y 
      0000E2 90 97            [ 1]  435         ld yl,a 
      0000E4 1D 00 02         [ 2]  436         subw x,#CELLL 
      0000E7 FF               [ 2]  437         ldw (x),y  ; ( level reg lshift -- )
      0000E8 90 93            [ 1]  438         ldw y,x 
      0000EA 90 EE 02         [ 2]  439         ldw y,(2,y) 
      0000ED 90 F6            [ 1]  440         ld a,(y)   ; reg_value
      0000EF 1D 00 02         [ 2]  441         subw x,#CELLL 
      0000F2 FF               [ 2]  442         ldw (x),y ; ( level reg lshift rval -- )
      0000F3 CD 06 41         [ 4]  443         call OVER ; ( level reg lshift rval lshift -- )
      0000F6 CD 04 6F         [ 4]  444         call DOLIT 
      0000F9 00 03                  445         .word 3
      0000FB CD 06 29         [ 4]  446         call SWAPP  ; ( level reg lshift rval 3 lshift )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      0000FE CD 0B D0         [ 4]  447         call LSHIFT ; creat slot mask 
      000101 CD 08 75         [ 4]  448         call INVER  ; ( level reg lshift rval mask )
      000104 CD 06 76         [ 4]  449         call ANDD ; ( level reg lshift slot_masked )
      000107 CD 05 E2         [ 4]  450         call TOR  ; ( level reg lshift -- R: slot_masked )
      00010A CD 07 DD         [ 4]  451         call ROT  ; ( reg lshift level )
      00010D CD 06 29         [ 4]  452         call SWAPP ; ( reg level lshift )
      000110 CD 0B D0         [ 4]  453         call LSHIFT  ; ( reg slot_level -- )
      000113 CD 05 34         [ 4]  454         call RFROM ; ( reg slot_level masked_val )
      000116 CD 06 8A         [ 4]  455         call ORR   ; ( reg updated_rval )
      000119 CD 06 29         [ 4]  456         call SWAPP 
      00011C CD 04 F0         [ 4]  457         call CSTOR
                                    458 
                                    459 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    460 ; sélectionne l'application 
                                    461 ; qui démarre automatique lors 
                                    462 ; d'un COLD start 
                                    463 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00011F                        464         _HEADER AUTORUN,7,"AUTORUN"
      00011F 00 C8                    1         .word LINK 
                           000121     2         LINK=.
      000121 07                       3         .byte 7  
      000122 41 55 54 4F 52 55 4E     4         .ascii "AUTORUN"
      000129                          5         AUTORUN:
      000129 CD 11 F8         [ 4]  465         call TOKEN 
      00012C CD 06 19         [ 4]  466         call DUPP 
      00012F CD 04 98         [ 4]  467         call QBRAN 
      000132 02 0F                  468         .word FORGET2
      000134 CD 12 F5         [ 4]  469         call NAMEQ
      000137 CD 07 CC         [ 4]  470         call QDUP 
      00013A CD 04 98         [ 4]  471         call QBRAN 
      00013D 02 0F                  472         .word FORGET2
      00013F                        473         _DROP 
      00013F 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      000142 1D 00 04         [ 2]  474         subw x,#2*CELLL 
      000145 90 5F            [ 1]  475         clrw y 
      000147 FF               [ 2]  476         ldw (x),y 
      000148 90 AE 40 02      [ 2]  477         ldw y,#APP_RUN 
      00014C EF 02            [ 2]  478         ldw (2,x),y 
      00014E CC 1E 9F         [ 2]  479         jp EESTORE 
                                    480 
                                    481 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    482 ;; Reset dictionary pointer before 
                                    483 ;; forgotten word. RAM space and 
                                    484 ;; interrupt vector defined after 
                                    485 ;; must be resetted also.
                                    486 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000151                        487         _HEADER FORGET,6,"FORGET"
      000151 01 21                    1         .word LINK 
                           000153     2         LINK=.
      000153 06                       3         .byte 6  
      000154 46 4F 52 47 45 54        4         .ascii "FORGET"
      00015A                          5         FORGET:
      00015A CD 11 F8         [ 4]  488         call TOKEN
      00015D CD 06 19         [ 4]  489         call DUPP 
      000160 CD 04 98         [ 4]  490         call QBRAN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      000163 02 0F                  491         .word FORGET2
      000165 CD 12 F5         [ 4]  492         call NAMEQ ; ( a -- ca na | a F )
      000168 CD 07 CC         [ 4]  493         call QDUP 
      00016B CD 04 98         [ 4]  494         call QBRAN 
      00016E 02 0F                  495         .word FORGET2
                                    496 ; only forget users words 
      000170 CD 06 19         [ 4]  497         call DUPP ; ( ca na na )
      000173 CD 04 6F         [ 4]  498         call DOLIT 
      000176 36 00                  499         .word app_space 
      000178 CD 06 29         [ 4]  500         call SWAPP 
      00017B CD 09 10         [ 4]  501         call  ULESS 
      00017E CD 04 98         [ 4]  502         call QBRAN 
      000181 01 D1                  503         .word FORGET6 
                                    504 ; ( ca na -- )        
                                    505 ;reset ivec with address >= ca
      000183 CD 06 29         [ 4]  506         call SWAPP ; ( na ca -- ) 
      000186 CD 20 A2         [ 4]  507         call CHKIVEC ; ( na -- ) 
                                    508 ; start at LAST and link back to na 
                                    509 ; if variable found reset VP at that point.
      000189                        510 FORGET1:
      000189 CD 07 8E         [ 4]  511         call LAST 
      00018C CD 04 E3         [ 4]  512         call AT 
      00018F CD 06 19         [ 4]  513         call DUPP  ; ( -- na last last )
      000192 CD 02 25         [ 4]  514         call FREEVAR ; ( -- na last )
      000195 CD 06 19         [ 4]  515         call DUPP 
      000198 CD 04 6F         [ 4]  516         call DOLIT 
      00019B 00 02                  517         .word 2 
      00019D CD 08 D2         [ 4]  518         call SUBB ; ( na last -- na last lfa ) link address 
      0001A0 CD 04 E3         [ 4]  519         call AT 
      0001A3 CD 06 19         [ 4]  520         call DUPP ; ( -- na last a a )
      0001A6 CD 07 62         [ 4]  521         call CNTXT 
      0001A9 CD 04 D1         [ 4]  522         call STORE
      0001AC CD 07 8E         [ 4]  523         call LAST  
      0001AF CD 04 D1         [ 4]  524         call STORE ; ( --  na last )
      0001B2 CD 06 41         [ 4]  525         call OVER 
      0001B5 CD 08 FA         [ 4]  526         call EQUAL ; ( na last na -- na T|F ) 
      0001B8 CD 04 98         [ 4]  527         call QBRAN 
      0001BB 01 89                  528         .word FORGET1 
                                    529 ; ( na -- )
      0001BD CD 04 6F         [ 4]  530         call DOLIT 
      0001C0 00 02                  531         .word 2 
      0001C2 CD 08 D2         [ 4]  532         call SUBB 
      0001C5 CD 07 7E         [ 4]  533         call CPP 
      0001C8 CD 04 D1         [ 4]  534         call STORE  
      0001CB CD 1C D2         [ 4]  535         call UPDATCP 
      0001CE CC 1C A9         [ 2]  536         jp UPDATLAST 
      0001D1                        537 FORGET6: ; tried to forget a RAM or system word 
                                    538 ; ( ca na -- )
      0001D1 1D 00 02         [ 2]  539         subw x,#CELLL 
      0001D4 90 BE 2C         [ 2]  540         ldw y,SP0 
      0001D7 FF               [ 2]  541         ldw (x),y  
      0001D8 CD 09 10         [ 4]  542         call ULESS
      0001DB CD 04 98         [ 4]  543         call QBRAN 
      0001DE 02 01                  544         .word PROTECTED 
      0001E0 CD 14 01         [ 4]  545         call ABORQ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      0001E3 1D                     546         .byte 29
      0001E4 20 46 6F 72 20 52 41   547         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      000201                        548 PROTECTED:
      000201 CD 14 01         [ 4]  549         call ABORQ
      000204 0A                     550         .byte 10
      000205 20 50 72 6F 74 65 63   551         .ascii " Protected"
             74 65 64
      00020F                        552 FORGET2: ; no name or not found in dictionary 
      00020F CD 14 01         [ 4]  553         call ABORQ
      000212 05                     554         .byte 5
      000213 20 77 68 61 74         555         .ascii " what"
      000218                        556 FORGET4:
      000218 CC 06 0F         [ 2]  557         jp DROP 
                                    558 
                                    559 
                                    560 ;;;;;;;;;;;;;;;;;;;;;
                                    561 ; if na is variable 
                                    562 ; free variable data  
                                    563 ; FREEVAR ( na -- )
                                    564 ;;;;;;;;;;;;;;;;;;;;;;
      00021B                        565         _HEADER FREEVAR,7,"FREEVAR"
      00021B 01 53                    1         .word LINK 
                           00021D     2         LINK=.
      00021D 07                       3         .byte 7  
      00021E 46 52 45 45 56 41 52     4         .ascii "FREEVAR"
      000225                          5         FREEVAR:
      000225 CD 06 19         [ 4]  566         call DUPP ; ( na na -- )
      000228 CD 05 01         [ 4]  567         CALL CAT  ; ( na c -- )
      00022B CD 0B B2         [ 4]  568         call ONEP ;
      00022E CD 08 3C         [ 4]  569         CALL PLUS ; ( na c+1 -- ca ) 
      000231 CD 0B B2         [ 4]  570         call ONEP ; ( ca+ -- ) to get routne address 
      000234 CD 06 19         [ 4]  571         call DUPP ; ( ca+ ca+ -- )
      000237 CD 04 E3         [ 4]  572         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      00023A CD 04 6F         [ 4]  573         call DOLIT 
      00023D 06 CF                  574         .word DOVAR ; if routine address is DOVAR then variable 
      00023F CD 08 FA         [ 4]  575         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      000242 CD 04 98         [ 4]  576         call QBRAN 
      000245 02 5B                  577         .word FREEVAR4 
      000247 CD 04 6F         [ 4]  578         call DOLIT 
      00024A 00 02                  579         .word 2 
      00024C CD 08 3C         [ 4]  580         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      00024F CD 04 E3         [ 4]  581         call AT 
      000252 CD 07 70         [ 4]  582         call VPP   
      000255 CD 04 D1         [ 4]  583         call STORE 
      000258 CC 1C E9         [ 2]  584         jp UPDATVP 
      00025B                        585 FREEVAR4: ; not variable
      00025B CC 06 0F         [ 2]  586         jp  DROP 
                                    587 
                                    588 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    589 ;    SEED ( n -- )
                                    590 ; Initialize PRNG seed with n 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    591 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00025E                        592         _HEADER SEED,4,"SEED"
      00025E 02 1D                    1         .word LINK 
                           000260     2         LINK=.
      000260 04                       3         .byte 4  
      000261 53 45 45 44              4         .ascii "SEED"
      000265                          5         SEED:
      000265 90 93            [ 1]  593         ldw y,x 
      000267 1C 00 02         [ 2]  594         addw x,#CELLL
      00026A 90 FE            [ 2]  595         ldw y,(y)
      00026C 90 9E            [ 1]  596         ld a,yh 
      00026E B7 38            [ 1]  597         ld SEEDX,a 
      000270 90 9F            [ 1]  598         ld a,yl 
      000272 B7 3A            [ 1]  599         ld SEEDY,a 
      000274 81               [ 4]  600         ret 
                                    601 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    602 ;    RANDOM ( u1 -- u2 )
                                    603 ; Pseudo random number betwen 0 and u1-1
                                    604 ;  XOR32 algorithm 
                                    605 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000275                        606         _HEADER RANDOM,6,"RANDOM"
      000275 02 60                    1         .word LINK 
                           000277     2         LINK=.
      000277 06                       3         .byte 6  
      000278 52 41 4E 44 4F 4D        4         .ascii "RANDOM"
      00027E                          5         RANDOM:
                                    607 ;local variable 
                           000001   608         SPSAVE=1
                           000002   609         VSIZE=2 
      00027E 52 02            [ 2]  610         sub sp,#VSIZE
      000280 1F 01            [ 2]  611         ldw (SPSAVE,sp),x  
                                    612 ; XTEMP=(SEEDX<<5)^SEEDX 
      000282 90 93            [ 1]  613         ldw y,x 
      000284 90 FE            [ 2]  614         ldw y,(y)
      000286 90 BF 26         [ 2]  615         ldw YTEMP,y 
      000289 BE 38            [ 2]  616 	ldw x,SEEDX 
      00028B 58               [ 2]  617 	sllw x 
      00028C 58               [ 2]  618 	sllw x 
      00028D 58               [ 2]  619 	sllw x 
      00028E 58               [ 2]  620 	sllw x 
      00028F 58               [ 2]  621 	sllw x 
      000290 9E               [ 1]  622 	ld a,xh 
      000291 B8 38            [ 1]  623 	xor a,SEEDX 
      000293 B7 24            [ 1]  624 	ld XTEMP,a 
      000295 9F               [ 1]  625 	ld a,xl 
      000296 B8 39            [ 1]  626 	xor a,SEEDX+1 
      000298 B7 25            [ 1]  627 	ld XTEMP+1,a 
                                    628 ; SEEDX=SEEDY 
      00029A BE 3A            [ 2]  629 	ldw x,SEEDY 
      00029C BF 38            [ 2]  630 	ldw SEEDX,x  
                                    631 ; SEEDY=SEEDY^(SEEDY>>1)
      00029E 54               [ 2]  632 	srlw x 
      00029F 9E               [ 1]  633 	ld a,xh 
      0002A0 B8 3A            [ 1]  634 	xor a,SEEDY 
      0002A2 B7 3A            [ 1]  635 	ld SEEDY,a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      0002A4 9F               [ 1]  636 	ld a,xl 
      0002A5 B8 3B            [ 1]  637 	xor a,SEEDY+1 
      0002A7 B7 3B            [ 1]  638 	ld SEEDY+1,a 
                                    639 ; XTEMP>>3 
      0002A9 BE 24            [ 2]  640 	ldw x,XTEMP 
      0002AB 54               [ 2]  641 	srlw x 
      0002AC 54               [ 2]  642 	srlw x 
      0002AD 54               [ 2]  643 	srlw x 
                                    644 ; x=XTEMP^x 
      0002AE 9E               [ 1]  645 	ld a,xh 
      0002AF B8 24            [ 1]  646 	xor a,XTEMP 
      0002B1 95               [ 1]  647 	ld xh,a 
      0002B2 9F               [ 1]  648 	ld a,xl 
      0002B3 B8 25            [ 1]  649 	xor a,XTEMP+1  
      0002B5 97               [ 1]  650 	ld xl,a 
                                    651 ; SEEDY=x^SEEDY 
      0002B6 B8 3B            [ 1]  652 	xor a,SEEDY+1
      0002B8 97               [ 1]  653 	ld xl,a 
      0002B9 9E               [ 1]  654 	ld a,xh 
      0002BA B8 3A            [ 1]  655 	xor a,SEEDY
      0002BC 95               [ 1]  656 	ld xh,a 
      0002BD BF 3A            [ 2]  657 	ldw SEEDY,x 
                                    658 ; return SEEDY modulo YTEMP  
      0002BF 90 BE 26         [ 2]  659 	ldw y,YTEMP  
      0002C2 65               [ 2]  660 	divw x,y 
      0002C3 1E 01            [ 2]  661 	ldw x,(SPSAVE,sp)
      0002C5 FF               [ 2]  662         ldw (x),y 
      0002C6 5B 02            [ 2]  663         addw sp,#VSIZE 
      0002C8 81               [ 4]  664 	ret 
                                    665 
                                    666 
                                    667 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    668 ;; get millisecond counter 
                                    669 ;; msec ( -- u )
                                    670 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002C9                        671         _HEADER MSEC,4,"MSEC"
      0002C9 02 77                    1         .word LINK 
                           0002CB     2         LINK=.
      0002CB 04                       3         .byte 4  
      0002CC 4D 53 45 43              4         .ascii "MSEC"
      0002D0                          5         MSEC:
      0002D0 1D 00 02         [ 2]  672         subw x,#CELLL 
      0002D3 90 BE 30         [ 2]  673         ldw y,MS 
      0002D6 FF               [ 2]  674         ldw (x),y 
      0002D7 81               [ 4]  675         ret 
                                    676 
                                    677 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    678 ; suspend execution for u msec 
                                    679 ;  pause ( u -- )
                                    680 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002D8                        681         _HEADER PAUSE,5,"PAUSE"
      0002D8 02 CB                    1         .word LINK 
                           0002DA     2         LINK=.
      0002DA 05                       3         .byte 5  
      0002DB 50 41 55 53 45           4         .ascii "PAUSE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      0002E0                          5         PAUSE:
      0002E0 90 93            [ 1]  682         ldw y,x
      0002E2 90 FE            [ 2]  683         ldw y,(y)
      0002E4 72 B9 00 30      [ 2]  684         addw y,MS 
      0002E8 8F               [10]  685 1$:     wfi  
      0002E9 90 B3 30         [ 2]  686         cpw y,MS  
      0002EC 26 FA            [ 1]  687         jrne 1$        
      0002EE 1C 00 02         [ 2]  688         addw x,#CELLL 
      0002F1 81               [ 4]  689         ret 
                                    690 
                                    691 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    692 ; initialize count down timer 
                                    693 ;  TIMER ( u -- )  milliseconds
                                    694 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002F2                        695         _HEADER TIMER,5,"TIMER"
      0002F2 02 DA                    1         .word LINK 
                           0002F4     2         LINK=.
      0002F4 05                       3         .byte 5  
      0002F5 54 49 4D 45 52           4         .ascii "TIMER"
      0002FA                          5         TIMER:
      0002FA 90 93            [ 1]  696         ldw y,x
      0002FC 90 FE            [ 2]  697         ldw y,(y) 
      0002FE 90 BF 32         [ 2]  698         ldw CNTDWN,y
      000301 1C 00 02         [ 2]  699         addw x,#CELLL 
      000304 81               [ 4]  700         ret 
                                    701 
                                    702 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    703 ; check for TIMER exiparition 
                                    704 ;  TIMEOUT? ( -- 0|-1 )
                                    705 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000305                        706         _HEADER TIMEOUTQ,8,"TIMEOUT?"
      000305 02 F4                    1         .word LINK 
                           000307     2         LINK=.
      000307 08                       3         .byte 8  
      000308 54 49 4D 45 4F 55 54     4         .ascii "TIMEOUT?"
             3F
      000310                          5         TIMEOUTQ:
      000310 4F               [ 1]  707         clr a
      000311 1D 00 02         [ 2]  708         subw x,#CELLL 
      000314 90 BE 32         [ 2]  709         ldw y,CNTDWN 
      000317 26 01            [ 1]  710         jrne 1$ 
      000319 43               [ 1]  711         cpl a 
      00031A E7 01            [ 1]  712 1$:     ld (1,x),a 
      00031C F7               [ 1]  713         ld (x),a 
      00031D 81               [ 4]  714         ret         
                                    715 
                                    716 ;;;;;;;;;;;;;;;;;;;;;
                                    717 ; reboot MCU 
                                    718 ; REBOOT ( -- )
                                    719 ;;;;;;;;;;;;;;;;;;;;;
      00031E                        720         _HEADER reboot,6,"REBOOT"
      00031E 03 07                    1         .word LINK 
                           000320     2         LINK=.
      000320 06                       3         .byte 6  
      000321 52 45 42 4F 4F 54        4         .ascii "REBOOT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      000327                          5         reboot:
      000327 CC 00 00         [ 2]  721         jp NonHandledInterrupt
                                    722 
                                    723 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    724 ; compile to flash memory 
                                    725 ; TO-FLASH ( -- )
                                    726 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      00032A                        727         _HEADER TOFLASH,8,"TO-FLASH"
      00032A 03 20                    1         .word LINK 
                           00032C     2         LINK=.
      00032C 08                       3         .byte 8  
      00032D 54 4F 2D 46 4C 41 53     4         .ascii "TO-FLASH"
             48
      000335                          5         TOFLASH:
      000335 CD 07 A1         [ 4]  728         call RAMLAST 
      000338 CD 04 E3         [ 4]  729         call AT 
      00033B CD 07 CC         [ 4]  730         call QDUP 
      00033E CD 04 98         [ 4]  731         call QBRAN
      000341 03 64                  732         .word 1$
      000343 CD 14 01         [ 4]  733         call ABORQ 
      000346 1D                     734         .byte 29
      000347 20 4E 6F 74 20 77 68   735         .ascii " Not while definitions in RAM"   
             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      000364 90 AE FF FF      [ 2]  736 1$:     ldw y,#-1 
      000368 90 BF 20         [ 2]  737         ldw UTFLASH,y
      00036B 81               [ 4]  738         ret 
                                    739 
                                    740 ;;;;;;;;;;;;;;;;;;;;;;
                                    741 ; compile to RAM 
                                    742 ; TO-RAM ( -- )
                                    743 ;;;;;;;;;;;;;;;;;;;;;;
      00036C                        744         _HEADER TORAM,6,"TO-RAM"
      00036C 03 2C                    1         .word LINK 
                           00036E     2         LINK=.
      00036E 06                       3         .byte 6  
      00036F 54 4F 2D 52 41 4D        4         .ascii "TO-RAM"
      000375                          5         TORAM:
      000375 90 5F            [ 1]  745         clrw y 
      000377 90 BF 20         [ 2]  746         ldw UTFLASH,y 
      00037A 81               [ 4]  747         ret 
                                    748 
                                    749 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    750 ;; BAUD RATE constants table
                                    751 ; values to put in BRR1 & BRR2 
                                    752 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00037B                        753 baudrate: 
      00037B A0 1B                  754 	.byte 0xa0,0x1b ; 2400
      00037D D0 05                  755 	.byte 0xd0,0x5  ; 4800 
      00037F 68 03                  756 	.byte 0x68,0x3  ; 9600
      000381 34 01                  757 	.byte 0x34,0x1  ; 19200
      000383 11 06                  758 	.byte 0x11,0x6  ; 57600
      000385 08 0B                  759 	.byte 0x8,0xb   ; 115200
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                                    760 
                                    761 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    762 ; BAUD RATE CONSTANTS names 
                                    763 ; 2400 baud  ( -- n )
                                    764 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000387                        765         _HEADER B2K4,4,"B2K4"
      000387 03 6E                    1         .word LINK 
                           000389     2         LINK=.
      000389 04                       3         .byte 4  
      00038A 42 32 4B 34              4         .ascii "B2K4"
      00038E                          5         B2K4:
      00038E 1D 00 02         [ 2]  766 	subw x,#CELLL 
      000391 90 5F            [ 1]  767         clrw y
      000393 FF               [ 2]  768         ldw (x),y
      000394 81               [ 4]  769 	ret
                                    770 
                                    771 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    772 ; 4800 baud	
                                    773 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000395                        774         _HEADER B4K8,4,"B4K8"
      000395 03 89                    1         .word LINK 
                           000397     2         LINK=.
      000397 04                       3         .byte 4  
      000398 42 34 4B 38              4         .ascii "B4K8"
      00039C                          5         B4K8:
      00039C 1D 00 02         [ 2]  775         subw x,#CELLL 
      00039F 90 AE 00 02      [ 2]  776         ldw y,#2 
      0003A3 FF               [ 2]  777         ldw (x),y
      0003A4 81               [ 4]  778         ret 
                                    779 
                                    780 ;;;;;;;;;;;;;;;;;;;;
                                    781 ; 9600 baud
                                    782 ;;;;;;;;;;;;;;;;;;;;
      0003A5                        783         _HEADER B9K6,4,"B9K6"
      0003A5 03 97                    1         .word LINK 
                           0003A7     2         LINK=.
      0003A7 04                       3         .byte 4  
      0003A8 42 39 4B 36              4         .ascii "B9K6"
      0003AC                          5         B9K6:
      0003AC 1D 00 02         [ 2]  784         subw x,#CELLL 
      0003AF 90 AE 00 04      [ 2]  785         ldw y,#4 
      0003B3 FF               [ 2]  786         ldw (x),y 
      0003B4 81               [ 4]  787         ret 
                                    788 ;;;;;;;;;;;;;;
                                    789 ; 19200 baud
                                    790 ;;;;;;;;;;;;;;
      0003B5                        791         _HEADER B19K2,5,"B19K2"
      0003B5 03 A7                    1         .word LINK 
                           0003B7     2         LINK=.
      0003B7 05                       3         .byte 5  
      0003B8 42 31 39 4B 32           4         .ascii "B19K2"
      0003BD                          5         B19K2:
      0003BD 1D 00 02         [ 2]  792         subw x,#CELLL
      0003C0 90 AE 00 06      [ 2]  793         ldw y,#6 
      0003C4 FF               [ 2]  794         ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      0003C5 81               [ 4]  795         ret 
                                    796 ;;;;;;;;;;;;;;
                                    797 ; 57600 baud  
                                    798 ;;;;;;;;;;;;;;
      0003C6                        799         _HEADER B57K6,5,"B57K6"
      0003C6 03 B7                    1         .word LINK 
                           0003C8     2         LINK=.
      0003C8 05                       3         .byte 5  
      0003C9 42 35 37 4B 36           4         .ascii "B57K6"
      0003CE                          5         B57K6:
      0003CE 1D 00 02         [ 2]  800         subw x,#CELLL 
      0003D1 90 AE 00 08      [ 2]  801         ldw y,#8 
      0003D5 FF               [ 2]  802         ldw (x),y 
      0003D6 81               [ 4]  803         ret 
                                    804 ;;;;;;;;;;;;;;
                                    805 ; 115200 baud 
                                    806 ;;;;;;;;;;;;;;
      0003D7                        807         _HEADER B115K2,6,"B115K2"
      0003D7 03 C8                    1         .word LINK 
                           0003D9     2         LINK=.
      0003D9 06                       3         .byte 6  
      0003DA 42 31 31 35 4B 32        4         .ascii "B115K2"
      0003E0                          5         B115K2:
      0003E0 1D 00 02         [ 2]  808 	subw x,#CELLL 
      0003E3 90 AE 00 0A      [ 2]  809         ldw y,#10 
      0003E7 FF               [ 2]  810         ldw (x),y 
      0003E8 81               [ 4]  811         ret 
                                    812 
                                    813 ;;;;;;;;;;;;;;;;;;;;;;;	
                                    814 ;; set UART2 BAUD rate
                                    815 ;	BAUD ( u -- )
                                    816 ;;;;;;;;;;;;;;;;;;;;;;;
      0003E9                        817         _HEADER BAUD,4,"BAUD"
      0003E9 03 D9                    1         .word LINK 
                           0003EB     2         LINK=.
      0003EB 04                       3         .byte 4  
      0003EC 42 41 55 44              4         .ascii "BAUD"
      0003F0                          5         BAUD:
      0003F0 1D 00 02         [ 2]  818 	subw x,#CELLL
      0003F3 90 AE 03 7B      [ 2]  819         ldw y,#baudrate 
      0003F7 FF               [ 2]  820         ldw (x),y 
      0003F8 CD 08 3C         [ 4]  821         call PLUS
      0003FB 90 93            [ 1]  822         ldw y,x  
      0003FD 90 FE            [ 2]  823         ldw y,(y)
      0003FF 90 F6            [ 1]  824         ld a,(y)
      000401 88               [ 1]  825         push a 
      000402 90 5C            [ 1]  826         incw y 
      000404 90 F6            [ 1]  827         ld a,(y)
      000406 C7 52 33         [ 1]  828         ld UART_BRR2,a 
      000409 84               [ 1]  829         pop a
      00040A C7 52 32         [ 1]  830         ld UART_BRR1,a 
      00040D 1C 00 02         [ 2]  831         addw x,#CELLL 
      000410 81               [ 4]  832         ret 
                                    833 
                                    834 ;; Device dependent I/O
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                                    835 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    836 ;       ?RX     ( -- c T | F )
                                    837 ;         Return input byte and true, or false.
                                    838 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000411                        839         _HEADER QKEY,4,"?KEY"
      000411 03 EB                    1         .word LINK 
                           000413     2         LINK=.
      000413 04                       3         .byte 4  
      000414 3F 4B 45 59              4         .ascii "?KEY"
      000418                          5         QKEY:
      000418 90 5F            [ 1]  840         CLRW Y 
      00041A 72 0B 52 30 0B   [ 2]  841         BTJF UART_SR,#UART_SR_RXNE,INCH   ;check status
      00041F C6 52 31         [ 1]  842         LD    A,UART_DR   ;get char in A
      000422 1D 00 02         [ 2]  843 	SUBW	X,#2
      000425 E7 01            [ 1]  844         LD     (1,X),A
      000427 7F               [ 1]  845 	CLR	(X)
      000428 90 53            [ 2]  846         CPLW     Y
      00042A                        847 INCH:
      00042A 1D 00 02         [ 2]  848 		SUBW	X,#2
      00042D FF               [ 2]  849         LDW     (X),Y
      00042E 81               [ 4]  850         RET
                                    851 
                                    852 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    853 ;       TX!     ( c -- )
                                    854 ;       Send character c to  output device.
                                    855 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00042F                        856         _HEADER EMIT,4,"EMIT"
      00042F 04 13                    1         .word LINK 
                           000431     2         LINK=.
      000431 04                       3         .byte 4  
      000432 45 4D 49 54              4         .ascii "EMIT"
      000436                          5         EMIT:
      000436 E6 01            [ 1]  857         LD     A,(1,X)
      000438 1C 00 02         [ 2]  858 	ADDW	X,#2
      00043B 72 0F 52 30 FB   [ 2]  859 OUTPUT: BTJF UART_SR,#UART_SR_TXE,OUTPUT  ;loop until tx empty 
      000440 C7 52 31         [ 1]  860         LD    UART_DR,A   ;send A
      000443 81               [ 4]  861         RET
                                    862 
                                    863 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    864 ;       FC-XON  ( -- )
                                    865 ;       send XON character 
                                    866 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000444                        867         _HEADER FC_XON,6,"FC-XON"
      000444 04 31                    1         .word LINK 
                           000446     2         LINK=.
      000446 06                       3         .byte 6  
      000447 46 43 2D 58 4F 4E        4         .ascii "FC-XON"
      00044D                          5         FC_XON:
      00044D 1D 00 02         [ 2]  868         subw x,#CELLL 
      000450 7F               [ 1]  869         clr (x)
      000451 A6 11            [ 1]  870         ld a,#XON 
      000453 E7 01            [ 1]  871         ld (1,x),a 
      000455 CD 04 36         [ 4]  872         call EMIT 
      000458 81               [ 4]  873         ret 
                                    874 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                                    875 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    876 ;       FC-XOFF ( -- )
                                    877 ;       Send XOFF character 
                                    878 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000459                        879         _HEADER FC_XOFF,7,"FC-XOFF"
      000459 04 46                    1         .word LINK 
                           00045B     2         LINK=.
      00045B 07                       3         .byte 7  
      00045C 46 43 2D 58 4F 46 46     4         .ascii "FC-XOFF"
      000463                          5         FC_XOFF:
      000463 1D 00 02         [ 2]  880         subw x,#CELLL 
      000466 7F               [ 1]  881         clr (x)
      000467 A6 13            [ 1]  882         ld a,#XOFF 
      000469 E7 01            [ 1]  883         ld (1,x),a 
      00046B CD 04 36         [ 4]  884         call EMIT 
      00046E 81               [ 4]  885         ret
                                    886 
                                    887 ;; The kernel
                                    888 
                                    889 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    890 ;       doLIT   ( -- w )
                                    891 ;       Push an inline literal.
                                    892 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00046F                        893 DOLIT:
      00046F 1D 00 02         [ 2]  894 	SUBW X,#2
      000472 16 01            [ 2]  895         ldw y,(1,sp)
      000474 90 FE            [ 2]  896         ldw y,(y)
      000476 FF               [ 2]  897         ldw (x),y
      000477 90 85            [ 2]  898         popw y 
      000479 90 EC 02         [ 2]  899         jp (2,y)
                                    900 
                                    901 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    902 ;       NEXT    ( -- )
                                    903 ;       Code for  single index loop.
                                    904 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00047C                        905         _HEADER DONXT,COMPO+4,"NEXT"
      00047C 04 5B                    1         .word LINK 
                           00047E     2         LINK=.
      00047E 44                       3         .byte COMPO+4  
      00047F 4E 45 58 54              4         .ascii "NEXT"
      000483                          5         DONXT:
      000483 16 03            [ 2]  906 	LDW Y,(3,SP)
      000485 90 5A            [ 2]  907 	DECW Y
      000487 2A 07            [ 1]  908 	JRPL NEX1 ; jump if N=0
      000489 90 85            [ 2]  909 	POPW Y
      00048B 5B 02            [ 2]  910         addw sp,#2
      00048D 90 EC 02         [ 2]  911         JP (2,Y)
      000490                        912 NEX1:
      000490 17 03            [ 2]  913         LDW (3,SP),Y
      000492 90 85            [ 2]  914         POPW Y
      000494 90 FE            [ 2]  915 	LDW Y,(Y)
      000496 90 FC            [ 2]  916 	JP (Y)
                                    917 
                                    918 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    919 ;       ?branch ( f -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                    920 ;       Branch if flag is zero.
                                    921 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    922 ;       _HEADER QBRAN,COMPO+7,"?BRANCH"        
      000498                        923 QBRAN:	
      000498 90 93            [ 1]  924         LDW Y,X
      00049A 1C 00 02         [ 2]  925 	ADDW X,#2
      00049D 90 FE            [ 2]  926 	LDW Y,(Y)
      00049F 27 13            [ 1]  927         JREQ     BRAN
      0004A1 90 85            [ 2]  928 	POPW Y
      0004A3 90 EC 02         [ 2]  929 	JP (2,Y)
                                    930 
                                    931 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    932 ;  TBRANCH ( f -- )
                                    933 ;  branch if f==TRUE 
                                    934 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    935 ;        _HEADER TBRAN,COMPO+7,"TBRANCH"
      0004A6                        936 TBRAN: 
      0004A6 90 93            [ 1]  937         LDW Y,X 
      0004A8 1C 00 02         [ 2]  938         ADDW X,#2 
      0004AB 90 FE            [ 2]  939         LDW Y,(Y)
      0004AD 26 05            [ 1]  940         JRNE BRAN 
      0004AF 90 85            [ 2]  941         POPW Y 
      0004B1 90 EC 02         [ 2]  942         JP (2,Y)
                                    943 
                                    944 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    945 ;       branch  ( -- )
                                    946 ;       Branch to an inline address.
                                    947 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    948 ;       _HEADER BRAN,COMPO+6,"BRANCH"
      0004B4                        949 BRAN:
      0004B4 90 85            [ 2]  950         POPW Y
      0004B6 90 FE            [ 2]  951 	LDW Y,(Y)
      0004B8 90 FC            [ 2]  952         JP  (Y)
                                    953 
                                    954 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    955 ;       EXECUTE ( ca -- )
                                    956 ;       Execute  word at ca.
                                    957 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004BA                        958         _HEADER EXECU,7,"EXECUTE"
      0004BA 04 7E                    1         .word LINK 
                           0004BC     2         LINK=.
      0004BC 07                       3         .byte 7  
      0004BD 45 58 45 43 55 54 45     4         .ascii "EXECUTE"
      0004C4                          5         EXECU:
      0004C4 90 93            [ 1]  959         LDW Y,X
      0004C6 1C 00 02         [ 2]  960 	ADDW X,#2
      0004C9 90 FE            [ 2]  961 	LDW  Y,(Y)
      0004CB 90 FC            [ 2]  962         JP   (Y)
                                    963 
                           000001   964 OPTIMIZE = 1
                           000001   965 .if OPTIMIZE 
                                    966 ; remplacement de CALL EXIT par 
                                    967 ; le opcode de RET.
                                    968 ; Voir modification au code de ";"
                           000000   969 .else 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                    970 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    971 ;       EXIT    ( -- )
                                    972 ;       Terminate a colon definition.
                                    973 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    974 ;       _HEADER EXIT,4,"EXIT"
                                    975 EXIT:
                                    976         POPW Y
                                    977         RET
                                    978 .endif 
                                    979 
                                    980 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    981 ;       !       ( w a -- )
                                    982 ;       Pop  data stack to memory.
                                    983 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004CD                        984         _HEADER STORE,1,"!"
      0004CD 04 BC                    1         .word LINK 
                           0004CF     2         LINK=.
      0004CF 01                       3         .byte 1  
      0004D0 21                       4         .ascii "!"
      0004D1                          5         STORE:
      0004D1 90 93            [ 1]  985         LDW Y,X
      0004D3 90 FE            [ 2]  986         LDW Y,(Y)    ;Y=a
      0004D5 89               [ 2]  987         PUSHW X
      0004D6 EE 02            [ 2]  988         LDW X,(2,X) ; x=w 
      0004D8 90 FF            [ 2]  989         LDW (Y),X 
      0004DA 85               [ 2]  990         POPW X  
      0004DB 1C 00 04         [ 2]  991         ADDW X,#4 ; DDROP 
      0004DE 81               [ 4]  992         RET     
                                    993 
                                    994 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    995 ;       @       ( a -- w )
                                    996 ;       Push memory location to stack.
                                    997 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004DF                        998         _HEADER AT,1,"@"
      0004DF 04 CF                    1         .word LINK 
                           0004E1     2         LINK=.
      0004E1 01                       3         .byte 1  
      0004E2 40                       4         .ascii "@"
      0004E3                          5         AT:
      0004E3 90 93            [ 1]  999         LDW Y,X     ;Y = a
      0004E5 90 FE            [ 2] 1000         LDW Y,(Y)   ; address 
      0004E7 90 FE            [ 2] 1001         LDW Y,(Y)   ; value 
      0004E9 FF               [ 2] 1002         LDW (X),Y ;w = @Y
      0004EA 81               [ 4] 1003         RET     
                                   1004 
                                   1005 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1006 ;       C!      ( c b -- )
                                   1007 ;       Pop  data stack to byte memory.
                                   1008 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004EB                       1009         _HEADER CSTOR,2,"C!"
      0004EB 04 E1                    1         .word LINK 
                           0004ED     2         LINK=.
      0004ED 02                       3         .byte 2  
      0004EE 43 21                    4         .ascii "C!"
      0004F0                          5         CSTOR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      0004F0 90 93            [ 1] 1010         LDW Y,X
      0004F2 90 FE            [ 2] 1011 	LDW Y,(Y)    ;Y=b
      0004F4 E6 03            [ 1] 1012         LD A,(3,X)    ;D = c
      0004F6 90 F7            [ 1] 1013         LD  (Y),A     ;store c at b
      0004F8 1C 00 04         [ 2] 1014 	ADDW X,#4 ; DDROP 
      0004FB 81               [ 4] 1015         RET     
                                   1016 
                                   1017 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1018 ;       C@      ( b -- c )
                                   1019 ;       Push byte in memory to  stack.
                                   1020 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004FC                       1021         _HEADER CAT,2,"C@"
      0004FC 04 ED                    1         .word LINK 
                           0004FE     2         LINK=.
      0004FE 02                       3         .byte 2  
      0004FF 43 40                    4         .ascii "C@"
      000501                          5         CAT:
      000501 90 93            [ 1] 1022         LDW Y,X     ;Y=b
      000503 90 FE            [ 2] 1023         LDW Y,(Y)
      000505 90 F6            [ 1] 1024         LD A,(Y)
      000507 E7 01            [ 1] 1025         LD (1,X),A
      000509 7F               [ 1] 1026         CLR (X)
      00050A 81               [ 4] 1027         RET     
                                   1028 
                                   1029 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1030 ;       RP@     ( -- a )
                                   1031 ;       Push current RP to data stack.
                                   1032 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00050B                       1033         _HEADER RPAT,3,"RP@"
      00050B 04 FE                    1         .word LINK 
                           00050D     2         LINK=.
      00050D 03                       3         .byte 3  
      00050E 52 50 40                 4         .ascii "RP@"
      000511                          5         RPAT:
      000511 90 96            [ 1] 1034         LDW Y,SP    ;save return addr
      000513 1D 00 02         [ 2] 1035         SUBW X,#2
      000516 FF               [ 2] 1036         LDW (X),Y
      000517 81               [ 4] 1037         RET     
                                   1038 
                                   1039 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1040 ;       RP!     ( a -- )
                                   1041 ;       Set  return stack pointer.
                                   1042 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000518                       1043         _HEADER RPSTO,COMPO+3,"RP!"
      000518 05 0D                    1         .word LINK 
                           00051A     2         LINK=.
      00051A 43                       3         .byte COMPO+3  
      00051B 52 50 21                 4         .ascii "RP!"
      00051E                          5         RPSTO:
      00051E 90 85            [ 2] 1044         POPW Y
      000520 90 BF 26         [ 2] 1045         LDW YTEMP,Y
      000523 90 93            [ 1] 1046         LDW Y,X
      000525 90 FE            [ 2] 1047         LDW Y,(Y)
      000527 90 94            [ 1] 1048         LDW SP,Y
      000529 1C 00 02         [ 2] 1049         ADDW X,#CELLL ; a was not dropped, Picatout 2020-05-24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      00052C 92 CC 26         [ 5] 1050         JP [YTEMP]
                                   1051 
                                   1052 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1053 ;       R>      ( -- w )
                                   1054 ;       Pop return stack to data stack.
                                   1055 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00052F                       1056         _HEADER RFROM,2,"R>"
      00052F 05 1A                    1         .word LINK 
                           000531     2         LINK=.
      000531 02                       3         .byte 2  
      000532 52 3E                    4         .ascii "R>"
      000534                          5         RFROM:
      000534 1D 00 02         [ 2] 1057         SUBW X,#CELLL 
      000537 16 03            [ 2] 1058         LDW Y,(3,SP)
      000539 FF               [ 2] 1059         LDW (X),Y 
      00053A 90 85            [ 2] 1060         POPW Y 
      00053C 5B 02            [ 2] 1061         ADDW SP,#2 
      00053E 90 FC            [ 2] 1062         JP (Y)
                                   1063 
                                   1064 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1065 ;       R@      ( -- w )
                                   1066 ;       Copy top of return stack to stack.
                                   1067 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000540                       1068         _HEADER RAT,2,"R@"
      000540 05 31                    1         .word LINK 
                           000542     2         LINK=.
      000542 02                       3         .byte 2  
      000543 52 40                    4         .ascii "R@"
      000545                          5         RAT:
      000545 16 03            [ 2] 1069         ldw y,(3,sp)
      000547 1D 00 02         [ 2] 1070         subw x,#CELLL 
      00054A FF               [ 2] 1071         ldw (x),y 
      00054B 81               [ 4] 1072         ret 
                                   1073 
                                   1074 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1075 ;       LOCAL ( n -- )
                                   1076 ;       reserve n slots on return stack
                                   1077 ;       for local variables 
                                   1078 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00054C                       1079         _HEADER LOCAL,5,"LOCAL"
      00054C 05 42                    1         .word LINK 
                           00054E     2         LINK=.
      00054E 05                       3         .byte 5  
      00054F 4C 4F 43 41 4C           4         .ascii "LOCAL"
      000554                          5         LOCAL:
      000554 90 85            [ 2] 1080         POPW Y  
      000556 90 BF 26         [ 2] 1081         LDW YTEMP,Y ; RETURN ADDRESS 
      000559 E6 01            [ 1] 1082         LD A,(1,X)
      00055B 90 97            [ 1] 1083         LD YL,A 
      00055D A6 02            [ 1] 1084         LD A,#CELLL 
      00055F 90 42            [ 4] 1085         MUL Y,A 
      000561 90 BF 24         [ 2] 1086         LDw XTEMP,Y
      000564 90 96            [ 1] 1087         LDW Y,SP 
      000566 72 B2 00 24      [ 2] 1088         SUBW Y,XTEMP
      00056A 90 94            [ 1] 1089         LDW SP,Y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      00056C 1C 00 02         [ 2] 1090         ADDW X,#CELLL 
      00056F 92 CC 26         [ 5] 1091         JP [YTEMP]
                                   1092 
                                   1093 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1094 ;       NRDROP ( n -- )
                                   1095 ;       drop n elements from rstack
                                   1096 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000572                       1097         _HEADER NRDROP,6,"NRDROP" 
      000572 05 4E                    1         .word LINK 
                           000574     2         LINK=.
      000574 06                       3         .byte 6  
      000575 4E 52 44 52 4F 50        4         .ascii "NRDROP"
      00057B                          5         NRDROP:
      00057B 90 85            [ 2] 1098         POPW Y 
      00057D 90 BF 26         [ 2] 1099         LDW YTEMP,Y ; RETURN ADDRESS 
      000580 E6 01            [ 1] 1100         LD A,(1,X)
      000582 90 97            [ 1] 1101         LD YL,A  
      000584 A6 02            [ 1] 1102         LD A,#CELLL 
      000586 90 42            [ 4] 1103         MUL Y,A 
      000588 90 BF 24         [ 2] 1104         LDW XTEMP,Y 
      00058B 90 96            [ 1] 1105         LDW Y,SP 
      00058D 72 B9 00 24      [ 2] 1106         ADDW Y,XTEMP 
      000591 90 94            [ 1] 1107         LDW SP,Y  
      000593 1C 00 02         [ 2] 1108         ADDW X,#CELLL 
      000596 92 CC 26         [ 5] 1109         JP [YTEMP]
                                   1110 
                                   1111 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1112 ;        ( n -- w)
                                   1113 ;      fetch nth element ofr return stack 
                                   1114 ;      n==0 is same as R@ 
                                   1115 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000599                       1116         _HEADER NRAT,3,"NR@"
      000599 05 74                    1         .word LINK 
                           00059B     2         LINK=.
      00059B 03                       3         .byte 3  
      00059C 4E 52 40                 4         .ascii "NR@"
      00059F                          5         NRAT:
      00059F E6 01            [ 1] 1117         LD A,(1,X)
      0005A1 90 97            [ 1] 1118         LD YL,A 
      0005A3 A6 02            [ 1] 1119         LD A,#CELLL 
      0005A5 90 42            [ 4] 1120         MUL Y,A 
      0005A7 90 BF 26         [ 2] 1121         LDW YTEMP,Y 
      0005AA 90 96            [ 1] 1122         LDW Y,SP 
      0005AC 72 A9 00 03      [ 2] 1123         ADDW Y,#3 
      0005B0 72 B9 00 26      [ 2] 1124         ADDW Y,YTEMP 
      0005B4 90 FE            [ 2] 1125         LDW Y,(Y)
      0005B6 FF               [ 2] 1126         LDW (X),Y 
      0005B7 81               [ 4] 1127         RET 
                                   1128 
                                   1129 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1130 ;       NR! ( w n --  )
                                   1131 ;       store w on nth position of 
                                   1132 ;       return stack 
                                   1133 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005B8                       1134         _HEADER NRSTO,3,"NR!"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      0005B8 05 9B                    1         .word LINK 
                           0005BA     2         LINK=.
      0005BA 03                       3         .byte 3  
      0005BB 4E 52 21                 4         .ascii "NR!"
      0005BE                          5         NRSTO:
      0005BE 90 96            [ 1] 1135         LDW Y,SP
      0005C0 72 A9 00 03      [ 2] 1136         ADDW Y,#3 
      0005C4 90 BF 26         [ 2] 1137         LDW YTEMP,Y 
      0005C7 E6 01            [ 1] 1138         LD A,(1,X)
      0005C9 90 97            [ 1] 1139         LD YL,A 
      0005CB A6 02            [ 1] 1140         LD A,#CELLL 
      0005CD 90 42            [ 4] 1141         MUL Y,A 
      0005CF 72 B9 00 26      [ 2] 1142         ADDW Y,YTEMP
      0005D3 89               [ 2] 1143         PUSHW X 
      0005D4 EE 02            [ 2] 1144         LDW X,(2,X)
      0005D6 90 FF            [ 2] 1145         LDW (Y),X
      0005D8 85               [ 2] 1146         POPW X 
      0005D9 1C 00 04         [ 2] 1147         ADDW X,#2*CELLL 
      0005DC 81               [ 4] 1148         RET 
                                   1149 
                                   1150 
                                   1151 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1152 ;       >R      ( w -- )
                                   1153 ;       Push data stack to return stack.
                                   1154 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005DD                       1155         _HEADER TOR,COMPO+2,">R"
      0005DD 05 BA                    1         .word LINK 
                           0005DF     2         LINK=.
      0005DF 42                       3         .byte COMPO+2  
      0005E0 3E 52                    4         .ascii ">R"
      0005E2                          5         TOR:
      0005E2 90 85            [ 2] 1156         POPW Y    ;save return addr
      0005E4 90 BF 26         [ 2] 1157         LDW YTEMP,Y
      0005E7 90 93            [ 1] 1158         LDW Y,X
      0005E9 90 FE            [ 2] 1159         LDW Y,(Y)  ; W
      0005EB 90 89            [ 2] 1160         PUSHW Y    ;W >R 
      0005ED 1C 00 02         [ 2] 1161         ADDW X,#2
      0005F0 92 CC 26         [ 5] 1162         JP [YTEMP]
                                   1163 
                                   1164 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1165 ;       SP@     ( -- a )
                                   1166 ;       Push current stack pointer.
                                   1167 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005F3                       1168         _HEADER SPAT,3,"SP@"
      0005F3 05 DF                    1         .word LINK 
                           0005F5     2         LINK=.
      0005F5 03                       3         .byte 3  
      0005F6 53 50 40                 4         .ascii "SP@"
      0005F9                          5         SPAT:
      0005F9 90 93            [ 1] 1169 	LDW Y,X
      0005FB 1D 00 02         [ 2] 1170         SUBW X,#2
      0005FE FF               [ 2] 1171 	LDW (X),Y
      0005FF 81               [ 4] 1172         RET     
                                   1173 
                                   1174 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                   1175 ;       SP!     ( a -- )
                                   1176 ;       Set  data stack pointer.
                                   1177 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000600                       1178         _HEADER SPSTO,3,"SP!"
      000600 05 F5                    1         .word LINK 
                           000602     2         LINK=.
      000602 03                       3         .byte 3  
      000603 53 50 21                 4         .ascii "SP!"
      000606                          5         SPSTO:
      000606 FE               [ 2] 1179         LDW     X,(X)     ;X = a
      000607 81               [ 4] 1180         RET     
                                   1181 
                                   1182 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1183 ;       DROP    ( w -- )
                                   1184 ;       Discard top stack item.
                                   1185 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000608                       1186         _HEADER DROP,4,"DROP"
      000608 06 02                    1         .word LINK 
                           00060A     2         LINK=.
      00060A 04                       3         .byte 4  
      00060B 44 52 4F 50              4         .ascii "DROP"
      00060F                          5         DROP:
      00060F 1C 00 02         [ 2] 1187         ADDW X,#2     
      000612 81               [ 4] 1188         RET     
                                   1189 
                                   1190 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1191 ;       DUP     ( w -- w w )
                                   1192 ;       Duplicate  top stack item.
                                   1193 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000613                       1194         _HEADER DUPP,3,"DUP"
      000613 06 0A                    1         .word LINK 
                           000615     2         LINK=.
      000615 03                       3         .byte 3  
      000616 44 55 50                 4         .ascii "DUP"
      000619                          5         DUPP:
      000619 90 93            [ 1] 1195 	LDW Y,X
      00061B 1D 00 02         [ 2] 1196         SUBW X,#2
      00061E 90 FE            [ 2] 1197 	LDW Y,(Y)
      000620 FF               [ 2] 1198 	LDW (X),Y
      000621 81               [ 4] 1199         RET     
                                   1200 
                                   1201 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1202 ;       SWAP    ( w1 w2 -- w2 w1 )
                                   1203 ;       Exchange top two stack items.
                                   1204 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000622                       1205         _HEADER SWAPP,4,"SWAP"
      000622 06 15                    1         .word LINK 
                           000624     2         LINK=.
      000624 04                       3         .byte 4  
      000625 53 57 41 50              4         .ascii "SWAP"
      000629                          5         SWAPP:
      000629 90 93            [ 1] 1206         LDW Y,X
      00062B 90 FE            [ 2] 1207         LDW Y,(Y)
      00062D 90 89            [ 2] 1208         PUSHW Y  
      00062F 90 93            [ 1] 1209         LDW Y,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      000631 90 EE 02         [ 2] 1210         LDW Y,(2,Y)
      000634 FF               [ 2] 1211         LDW (X),Y
      000635 90 85            [ 2] 1212         POPW Y 
      000637 EF 02            [ 2] 1213         LDW (2,X),Y
      000639 81               [ 4] 1214         RET     
                                   1215 
                                   1216 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1217 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                   1218 ;       Copy second stack item to top.
                                   1219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00063A                       1220         _HEADER OVER,4,"OVER"
      00063A 06 24                    1         .word LINK 
                           00063C     2         LINK=.
      00063C 04                       3         .byte 4  
      00063D 4F 56 45 52              4         .ascii "OVER"
      000641                          5         OVER:
      000641 1D 00 02         [ 2] 1221         SUBW X,#2
      000644 90 93            [ 1] 1222         LDW Y,X
      000646 90 EE 04         [ 2] 1223         LDW Y,(4,Y)
      000649 FF               [ 2] 1224         LDW (X),Y
      00064A 81               [ 4] 1225         RET     
                                   1226 
                                   1227 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1228 ;       0<      ( n -- t )
                                   1229 ;       Return true if n is negative.
                                   1230 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00064B                       1231         _HEADER ZLESS,2,"0<"
      00064B 06 3C                    1         .word LINK 
                           00064D     2         LINK=.
      00064D 02                       3         .byte 2  
      00064E 30 3C                    4         .ascii "0<"
      000650                          5         ZLESS:
      000650 A6 FF            [ 1] 1232         LD A,#0xFF
      000652 90 93            [ 1] 1233         LDW Y,X
      000654 90 FE            [ 2] 1234         LDW Y,(Y)
      000656 2B 01            [ 1] 1235         JRMI     ZL1
      000658 4F               [ 1] 1236         CLR A   ;false
      000659 F7               [ 1] 1237 ZL1:    LD     (X),A
      00065A E7 01            [ 1] 1238         LD (1,X),A
      00065C 81               [ 4] 1239 	RET     
                                   1240 
                                   1241 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1242 ;       0= ( n -- f )
                                   1243 ;   n==0?
                                   1244 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00065D                       1245         _HEADER ZEQUAL,2,"0="
      00065D 06 4D                    1         .word LINK 
                           00065F     2         LINK=.
      00065F 02                       3         .byte 2  
      000660 30 3D                    4         .ascii "0="
      000662                          5         ZEQUAL:
      000662 A6 FF            [ 1] 1246         LD A,#0XFF 
      000664 90 93            [ 1] 1247         LDW Y,X 
      000666 90 FE            [ 2] 1248         LDW Y,(Y)
      000668 27 02            [ 1] 1249         JREQ ZEQU1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      00066A A6 00            [ 1] 1250         LD A,#0 
      00066C                       1251 ZEQU1:  
      00066C F7               [ 1] 1252         LD (X),A 
      00066D E7 01            [ 1] 1253         LD (1,X),A         
      00066F 81               [ 4] 1254         RET 
                                   1255 
                                   1256 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1257 ;       AND     ( w w -- w )
                                   1258 ;       Bitwise AND.
                                   1259 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000670                       1260         _HEADER ANDD,3,"AND"
      000670 06 5F                    1         .word LINK 
                           000672     2         LINK=.
      000672 03                       3         .byte 3  
      000673 41 4E 44                 4         .ascii "AND"
      000676                          5         ANDD:
      000676 F6               [ 1] 1261         LD  A,(X)    ;D=w
      000677 E4 02            [ 1] 1262         AND A,(2,X)
      000679 E7 02            [ 1] 1263         LD (2,X),A
      00067B E6 01            [ 1] 1264         LD A,(1,X)
      00067D E4 03            [ 1] 1265         AND A,(3,X)
      00067F E7 03            [ 1] 1266         LD (3,X),A
      000681 1C 00 02         [ 2] 1267         ADDW X,#2
      000684 81               [ 4] 1268         RET
                                   1269 
                                   1270 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1271 ;       OR      ( w w -- w )
                                   1272 ;       Bitwise inclusive OR.
                                   1273 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000685                       1274         _HEADER ORR,2,"OR"
      000685 06 72                    1         .word LINK 
                           000687     2         LINK=.
      000687 02                       3         .byte 2  
      000688 4F 52                    4         .ascii "OR"
      00068A                          5         ORR:
      00068A F6               [ 1] 1275         LD A,(X)    ;D=w
      00068B EA 02            [ 1] 1276         OR A,(2,X)
      00068D E7 02            [ 1] 1277         LD (2,X),A
      00068F E6 01            [ 1] 1278         LD A,(1,X)
      000691 EA 03            [ 1] 1279         OR A,(3,X)
      000693 E7 03            [ 1] 1280         LD (3,X),A
      000695 1C 00 02         [ 2] 1281         ADDW X,#2
      000698 81               [ 4] 1282         RET
                                   1283 
                                   1284 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1285 ;       XOR     ( w w -- w )
                                   1286 ;       Bitwise exclusive OR.
                                   1287 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000699                       1288         _HEADER XORR,3,"XOR"
      000699 06 87                    1         .word LINK 
                           00069B     2         LINK=.
      00069B 03                       3         .byte 3  
      00069C 58 4F 52                 4         .ascii "XOR"
      00069F                          5         XORR:
      00069F F6               [ 1] 1289         LD A,(X)    ;D=w
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      0006A0 E8 02            [ 1] 1290         XOR A,(2,X)
      0006A2 E7 02            [ 1] 1291         LD (2,X),A
      0006A4 E6 01            [ 1] 1292         LD A,(1,X)
      0006A6 E8 03            [ 1] 1293         XOR A,(3,X)
      0006A8 E7 03            [ 1] 1294         LD (3,X),A
      0006AA 1C 00 02         [ 2] 1295         ADDW X,#2
      0006AD 81               [ 4] 1296         RET
                                   1297 
                                   1298 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1299 ;       UM+     ( u u -- udsum )
                                   1300 ;       Add two unsigned single
                                   1301 ;       and return a double sum.
                                   1302 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006AE                       1303         _HEADER UPLUS,3,"UM+"
      0006AE 06 9B                    1         .word LINK 
                           0006B0     2         LINK=.
      0006B0 03                       3         .byte 3  
      0006B1 55 4D 2B                 4         .ascii "UM+"
      0006B4                          5         UPLUS:
      0006B4 A6 01            [ 1] 1304         LD A,#1
      0006B6 90 93            [ 1] 1305         LDW Y,X
      0006B8 90 EE 02         [ 2] 1306         LDW Y,(2,Y)
      0006BB 90 BF 26         [ 2] 1307         LDW YTEMP,Y
      0006BE 90 93            [ 1] 1308         LDW Y,X
      0006C0 90 FE            [ 2] 1309         LDW Y,(Y)
      0006C2 72 B9 00 26      [ 2] 1310         ADDW Y,YTEMP
      0006C6 EF 02            [ 2] 1311         LDW (2,X),Y
      0006C8 25 01            [ 1] 1312         JRC     UPL1
      0006CA 4F               [ 1] 1313         CLR A
      0006CB E7 01            [ 1] 1314 UPL1:   LD     (1,X),A
      0006CD 7F               [ 1] 1315         CLR (X)
      0006CE 81               [ 4] 1316         RET
                                   1317 
                                   1318 ;; System and user variables
                                   1319 
                                   1320 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1321 ;       doVAR   ( -- a )
                                   1322 ;       run time code 
                                   1323 ;       for VARIABLE and CREATE.
                                   1324 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1325 ;       HEADER DOVAR,COMPO+5,"DOVAR"
      0006CF                       1326 DOVAR:
      0006CF 1D 00 02         [ 2] 1327 	SUBW X,#2
      0006D2 90 85            [ 2] 1328         POPW Y    ;get return addr (pfa)
      0006D4 90 FE            [ 2] 1329         LDW Y,(Y) ; indirect address 
      0006D6 FF               [ 2] 1330         LDW (X),Y    ;push on stack
      0006D7 81               [ 4] 1331         RET     ;go to RET of EXEC
                                   1332 
                                   1333 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1334 ;       BASE    ( -- a )
                                   1335 ;       Radix base for numeric I/O.
                                   1336 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006D8                       1337         _HEADER BASE,4,"BASE"
      0006D8 06 B0                    1         .word LINK 
                           0006DA     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      0006DA 04                       3         .byte 4  
      0006DB 42 41 53 45              4         .ascii "BASE"
      0006DF                          5         BASE:
      0006DF 90 AE 00 06      [ 2] 1338 	LDW Y,#UBASE 
      0006E3 1D 00 02         [ 2] 1339 	SUBW X,#2
      0006E6 FF               [ 2] 1340         LDW (X),Y
      0006E7 81               [ 4] 1341         RET
                                   1342 
                                   1343 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1344 ;       tmp     ( -- a )
                                   1345 ;       A temporary storage.
                                   1346 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006E8                       1347         _HEADER TEMP,3,"TMP"
      0006E8 06 DA                    1         .word LINK 
                           0006EA     2         LINK=.
      0006EA 03                       3         .byte 3  
      0006EB 54 4D 50                 4         .ascii "TMP"
      0006EE                          5         TEMP:
      0006EE 90 AE 00 0A      [ 2] 1348 	LDW Y,#UTMP
      0006F2 1D 00 02         [ 2] 1349 	SUBW X,#2
      0006F5 FF               [ 2] 1350         LDW (X),Y
      0006F6 81               [ 4] 1351         RET
                                   1352 
                                   1353 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1354 ;       >IN     ( -- a )
                                   1355 ;        Hold parsing pointer.
                                   1356 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006F7                       1357         _HEADER INN,3,">IN"
      0006F7 06 EA                    1         .word LINK 
                           0006F9     2         LINK=.
      0006F9 03                       3         .byte 3  
      0006FA 3E 49 4E                 4         .ascii ">IN"
      0006FD                          5         INN:
      0006FD 90 AE 00 0C      [ 2] 1358 	LDW Y,#UINN 
      000701 1D 00 02         [ 2] 1359 	SUBW X,#2
      000704 FF               [ 2] 1360         LDW (X),Y
      000705 81               [ 4] 1361         RET
                                   1362 
                                   1363 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1364 ;       #TIB    ( -- a )
                                   1365 ;       Count in terminal input 
                                   1366 ;       buffer.
                                   1367 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000706                       1368         _HEADER NTIB,4,"#TIB"
      000706 06 F9                    1         .word LINK 
                           000708     2         LINK=.
      000708 04                       3         .byte 4  
      000709 23 54 49 42              4         .ascii "#TIB"
      00070D                          5         NTIB:
      00070D 90 AE 00 0E      [ 2] 1369 	LDW Y,#UCTIB 
      000711 1D 00 02         [ 2] 1370 	SUBW X,#2
      000714 FF               [ 2] 1371         LDW (X),Y
      000715 81               [ 4] 1372         RET
                                   1373 
                                   1374 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                   1375 ;       TBUF ( -- a )
                                   1376 ;       address of 128 bytes 
                                   1377 ;       transaction buffer
                                   1378 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000716                       1379         _HEADER TBUF,4,"TBUF"
      000716 07 08                    1         .word LINK 
                           000718     2         LINK=.
      000718 04                       3         .byte 4  
      000719 54 42 55 46              4         .ascii "TBUF"
      00071D                          5         TBUF:
      00071D 90 AE 16 80      [ 2] 1380         ldw y,#ROWBUFF
      000721 1D 00 02         [ 2] 1381         subw x,#CELLL
      000724 FF               [ 2] 1382         ldw (x),y 
      000725 81               [ 4] 1383         ret 
                                   1384 
                                   1385 ; systeme variable 
                                   1386 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1387 ; compilation destination 
                                   1388 ; TFLASH ( -- A )
                                   1389 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000726                       1390         _HEADER TFLASH,6,"TFLASH"
      000726 07 18                    1         .word LINK 
                           000728     2         LINK=.
      000728 06                       3         .byte 6  
      000729 54 46 4C 41 53 48        4         .ascii "TFLASH"
      00072F                          5         TFLASH:
      00072F 1D 00 02         [ 2] 1391         subw x,#CELLL 
      000732 90 AE 00 20      [ 2] 1392         ldw y,#UTFLASH
      000736 FF               [ 2] 1393         ldw (x),y 
      000737 81               [ 4] 1394         ret 
                                   1395 
                                   1396 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1397 ;       "EVAL   ( -- a )
                                   1398 ;       Execution vector of EVAL.
                                   1399 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000738                       1400         _HEADER TEVAL,5,"'EVAL"
      000738 07 28                    1         .word LINK 
                           00073A     2         LINK=.
      00073A 05                       3         .byte 5  
      00073B 27 45 56 41 4C           4         .ascii "'EVAL"
      000740                          5         TEVAL:
      000740 90 AE 00 12      [ 2] 1401 	LDW Y,#UINTER 
      000744 1D 00 02         [ 2] 1402 	SUBW X,#2
      000747 FF               [ 2] 1403         LDW (X),Y
      000748 81               [ 4] 1404         RET
                                   1405 
                                   1406 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1407 ;       HLD     ( -- a )
                                   1408 ;       Hold a pointer of output
                                   1409 ;        string.
                                   1410 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000749                       1411         _HEADER HLD,3,"HLD"
      000749 07 3A                    1         .word LINK 
                           00074B     2         LINK=.
      00074B 03                       3         .byte 3  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      00074C 48 4C 44                 4         .ascii "HLD"
      00074F                          5         HLD:
      00074F 90 AE 00 14      [ 2] 1412 	LDW Y,#UHLD 
      000753 1D 00 02         [ 2] 1413 	SUBW X,#2
      000756 FF               [ 2] 1414         LDW (X),Y
      000757 81               [ 4] 1415         RET
                                   1416 
                                   1417 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1418 ;       CONTEXT ( -- a )
                                   1419 ;       Start vocabulary search.
                                   1420 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000758                       1421         _HEADER CNTXT,7,"CONTEXT"
      000758 07 4B                    1         .word LINK 
                           00075A     2         LINK=.
      00075A 07                       3         .byte 7  
      00075B 43 4F 4E 54 45 58 54     4         .ascii "CONTEXT"
      000762                          5         CNTXT:
      000762 90 AE 00 16      [ 2] 1422 	LDW Y,#UCNTXT
      000766 1D 00 02         [ 2] 1423 	SUBW X,#2
      000769 FF               [ 2] 1424         LDW (X),Y
      00076A 81               [ 4] 1425         RET
                                   1426 
                                   1427 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1428 ;       VP      ( -- a )
                                   1429 ;       Point to top of variables
                                   1430 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00076B                       1431         _HEADER VPP,2,"VP"
      00076B 07 5A                    1         .word LINK 
                           00076D     2         LINK=.
      00076D 02                       3         .byte 2  
      00076E 56 50                    4         .ascii "VP"
      000770                          5         VPP:
      000770 90 AE 00 18      [ 2] 1432 	LDW Y,#UVP 
      000774 1D 00 02         [ 2] 1433 	SUBW X,#2
      000777 FF               [ 2] 1434         LDW (X),Y
      000778 81               [ 4] 1435         RET
                                   1436 
                                   1437 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1438 ;       CP    ( -- a )
                                   1439 ;       Pointer to top of FLASH 
                                   1440 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000779                       1441         _HEADER CPP,2,"CP"
      000779 07 6D                    1         .word LINK 
                           00077B     2         LINK=.
      00077B 02                       3         .byte 2  
      00077C 43 50                    4         .ascii "CP"
      00077E                          5         CPP:
      00077E 90 AE 00 1A      [ 2] 1442         ldw y,#UCP 
      000782 1D 00 02         [ 2] 1443         subw x,#CELLL 
      000785 FF               [ 2] 1444         ldw (x),y 
      000786 81               [ 4] 1445         ret                
                                   1446 
                                   1447 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1448 ;       LAST    ( -- a )
                                   1449 ;       Point to last name in 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                                   1450 ;       dictionary.
                                   1451 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000787                       1452         _HEADER LAST,4,"LAST"
      000787 07 7B                    1         .word LINK 
                           000789     2         LINK=.
      000789 04                       3         .byte 4  
      00078A 4C 41 53 54              4         .ascii "LAST"
      00078E                          5         LAST:
      00078E 90 AE 00 1C      [ 2] 1453 	LDW Y,#ULAST 
      000792 1D 00 02         [ 2] 1454 	SUBW X,#2
      000795 FF               [ 2] 1455         LDW (X),Y
      000796 81               [ 4] 1456         RET
                                   1457 
                                   1458 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1459 ; address of system variable URLAST 
                                   1460 ;       RAMLAST ( -- a )
                                   1461 ; RAM dictionary context 
                                   1462 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000797                       1463         _HEADER RAMLAST,7,"RAMLAST"
      000797 07 89                    1         .word LINK 
                           000799     2         LINK=.
      000799 07                       3         .byte 7  
      00079A 52 41 4D 4C 41 53 54     4         .ascii "RAMLAST"
      0007A1                          5         RAMLAST:
      0007A1 90 AE 00 22      [ 2] 1464         ldw y,#URLAST 
      0007A5 1D 00 02         [ 2] 1465         subw x,#CELLL 
      0007A8 FF               [ 2] 1466         ldw (x),y 
      0007A9 81               [ 4] 1467         ret 
                                   1468 
                                   1469 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1470 ;       OFFSET ( -- a )
                                   1471 ;       address of system 
                                   1472 ;       variable OFFSET 
                                   1473 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007AA                       1474         _HEADER OFFSET,6,"OFFSET"
      0007AA 07 99                    1         .word LINK 
                           0007AC     2         LINK=.
      0007AC 06                       3         .byte 6  
      0007AD 4F 46 46 53 45 54        4         .ascii "OFFSET"
      0007B3                          5         OFFSET:
      0007B3 1D 00 02         [ 2] 1475         subw x,#CELLL
      0007B6 90 AE 00 1E      [ 2] 1476         ldw y,#UOFFSET 
      0007BA FF               [ 2] 1477         ldw (x),y 
      0007BB 81               [ 4] 1478         ret 
                                   1479 
                                   1480 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1481 ; adjust jump address 
                                   1482 ;  adding OFFSET
                                   1483 ; ADR-ADJ ( a -- a+offset )
                                   1484 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007BC                       1485 ADRADJ: 
      0007BC CD 07 B3         [ 4] 1486         call OFFSET 
      0007BF CD 04 E3         [ 4] 1487         call AT 
      0007C2 CC 08 3C         [ 2] 1488         jp PLUS 
                                   1489 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                   1490 
                                   1491 ;; Common functions
                                   1492 
                                   1493 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1494 ;       ?DUP    ( w -- w w | 0 )
                                   1495 ;       Dup tos if its is not zero.
                                   1496 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007C5                       1497         _HEADER QDUP,4,"?DUP"
      0007C5 07 AC                    1         .word LINK 
                           0007C7     2         LINK=.
      0007C7 04                       3         .byte 4  
      0007C8 3F 44 55 50              4         .ascii "?DUP"
      0007CC                          5         QDUP:
      0007CC 90 93            [ 1] 1498         LDW Y,X
      0007CE 90 FE            [ 2] 1499 	LDW Y,(Y)
      0007D0 27 04            [ 1] 1500         JREQ     QDUP1
      0007D2 1D 00 02         [ 2] 1501 	SUBW X,#CELLL 
      0007D5 FF               [ 2] 1502         LDW (X),Y
      0007D6 81               [ 4] 1503 QDUP1:  RET
                                   1504 
                                   1505 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1506 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1507 ;       Rot 3rd item to top.
                                   1508 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007D7                       1509         _HEADER ROT,3,"ROT"
      0007D7 07 C7                    1         .word LINK 
                           0007D9     2         LINK=.
      0007D9 03                       3         .byte 3  
      0007DA 52 4F 54                 4         .ascii "ROT"
      0007DD                          5         ROT:
      0007DD 90 93            [ 1] 1510         ldw y,x 
      0007DF 90 FE            [ 2] 1511         ldw y,(y)
      0007E1 90 89            [ 2] 1512         pushw y 
      0007E3 90 93            [ 1] 1513         ldw y,x 
      0007E5 90 EE 04         [ 2] 1514         ldw y,(4,y)
      0007E8 FF               [ 2] 1515         ldw (x),y 
      0007E9 90 93            [ 1] 1516         ldw y,x 
      0007EB 90 EE 02         [ 2] 1517         ldw y,(2,y)
      0007EE EF 04            [ 2] 1518         ldw (4,x),y 
      0007F0 90 85            [ 2] 1519         popw y 
      0007F2 EF 02            [ 2] 1520         ldw (2,x),y
      0007F4 81               [ 4] 1521         ret 
                                   1522 
                                   1523 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1524 ;    <ROT ( n1 n2 n3 -- n3 n1 n2 )
                                   1525 ;    rotate left 3 top elements 
                                   1526 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007F5                       1527     _HEADER NROT,4,"<ROT"
      0007F5 07 D9                    1         .word LINK 
                           0007F7     2         LINK=.
      0007F7 04                       3         .byte 4  
      0007F8 3C 52 4F 54              4         .ascii "<ROT"
      0007FC                          5         NROT:
      0007FC 90 93            [ 1] 1528     LDW Y,X 
      0007FE 90 FE            [ 2] 1529     LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000800 90 89            [ 2] 1530     PUSHW Y ; n3 >R 
      000802 90 93            [ 1] 1531     LDW Y,X 
      000804 90 EE 02         [ 2] 1532     LDW Y,(2,Y) ; Y = n2 
      000807 FF               [ 2] 1533     LDW (X),Y   ; TOS = n2 
      000808 90 93            [ 1] 1534     LDW Y,X    
      00080A 90 EE 04         [ 2] 1535     LDW Y,(4,Y) ; Y = n1 
      00080D EF 02            [ 2] 1536     LDW (2,X),Y ;   = n1 
      00080F 90 85            [ 2] 1537     POPW Y  ; R> Y 
      000811 EF 04            [ 2] 1538     LDW (4,X),Y ; = n3 
      000813 81               [ 4] 1539     RET 
                                   1540 
                                   1541 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1542 ;       2DROP   ( w w -- )
                                   1543 ;       Discard two items on stack.
                                   1544 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000814                       1545         _HEADER DDROP,5,"2DROP"
      000814 07 F7                    1         .word LINK 
                           000816     2         LINK=.
      000816 05                       3         .byte 5  
      000817 32 44 52 4F 50           4         .ascii "2DROP"
      00081C                          5         DDROP:
      00081C 1C 00 04         [ 2] 1546         ADDW X,#4
      00081F 81               [ 4] 1547         RET
                                   1548 
                                   1549 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1550 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1551 ;       Duplicate top two items.
                                   1552 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000820                       1553         _HEADER DDUP,4,"2DUP"
      000820 08 16                    1         .word LINK 
                           000822     2         LINK=.
      000822 04                       3         .byte 4  
      000823 32 44 55 50              4         .ascii "2DUP"
      000827                          5         DDUP:
      000827 1D 00 04         [ 2] 1554         SUBW X,#4
      00082A 90 93            [ 1] 1555         LDW Y,X
      00082C 90 EE 06         [ 2] 1556         LDW Y,(6,Y)
      00082F EF 02            [ 2] 1557         LDW (2,X),Y
      000831 90 93            [ 1] 1558         LDW Y,X
      000833 90 EE 04         [ 2] 1559         LDW Y,(4,Y)
      000836 FF               [ 2] 1560         LDW (X),Y
      000837 81               [ 4] 1561         RET
                                   1562 
                                   1563 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1564 ;       +       ( w w -- sum )
                                   1565 ;       Add top two items.
                                   1566 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000838                       1567         _HEADER PLUS,1,"+"
      000838 08 22                    1         .word LINK 
                           00083A     2         LINK=.
      00083A 01                       3         .byte 1  
      00083B 2B                       4         .ascii "+"
      00083C                          5         PLUS:
      00083C 90 93            [ 1] 1568         LDW Y,X
      00083E 90 FE            [ 2] 1569         LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000840 90 BF 26         [ 2] 1570         LDW YTEMP,Y
      000843 1C 00 02         [ 2] 1571         ADDW X,#2
      000846 90 93            [ 1] 1572         LDW Y,X
      000848 90 FE            [ 2] 1573         LDW Y,(Y)
      00084A 72 B9 00 26      [ 2] 1574         ADDW Y,YTEMP
      00084E FF               [ 2] 1575         LDW (X),Y
      00084F 81               [ 4] 1576         RET
                                   1577 
                                   1578 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1579 ;       TRUE ( -- -1 )
                                   1580 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000850                       1581         _HEADER TRUE,4,"TRUE"
      000850 08 3A                    1         .word LINK 
                           000852     2         LINK=.
      000852 04                       3         .byte 4  
      000853 54 52 55 45              4         .ascii "TRUE"
      000857                          5         TRUE:
      000857 A6 FF            [ 1] 1582         LD A,#255 
      000859 1D 00 02         [ 2] 1583         SUBW X,#CELLL
      00085C F7               [ 1] 1584         LD (X),A 
      00085D E7 01            [ 1] 1585         LD (1,X),A 
      00085F 81               [ 4] 1586         RET 
                                   1587 
                                   1588 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1589 ;       FALSE ( -- 0 )
                                   1590 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000860                       1591         _HEADER FALSE,5,"FALSE"
      000860 08 52                    1         .word LINK 
                           000862     2         LINK=.
      000862 05                       3         .byte 5  
      000863 46 41 4C 53 45           4         .ascii "FALSE"
      000868                          5         FALSE:
      000868 1D 00 02         [ 2] 1592         SUBW X,#CELLL 
      00086B 7F               [ 1] 1593         CLR (X) 
      00086C 6F 01            [ 1] 1594         CLR (1,X)
      00086E 81               [ 4] 1595         RET 
                                   1596 
                                   1597 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1598 ;       NOT     ( w -- w )
                                   1599 ;       One's complement of tos.
                                   1600 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00086F                       1601         _HEADER INVER,3,"NOT"
      00086F 08 62                    1         .word LINK 
                           000871     2         LINK=.
      000871 03                       3         .byte 3  
      000872 4E 4F 54                 4         .ascii "NOT"
      000875                          5         INVER:
      000875 90 93            [ 1] 1602         LDW Y,X
      000877 90 FE            [ 2] 1603         LDW Y,(Y)
      000879 90 53            [ 2] 1604         CPLW Y
      00087B FF               [ 2] 1605         LDW (X),Y
      00087C 81               [ 4] 1606         RET
                                   1607 
                                   1608 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1609 ;       NEGATE  ( n -- -n )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                                   1610 ;       Two's complement of tos.
                                   1611 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00087D                       1612         _HEADER NEGAT,6,"NEGATE"
      00087D 08 71                    1         .word LINK 
                           00087F     2         LINK=.
      00087F 06                       3         .byte 6  
      000880 4E 45 47 41 54 45        4         .ascii "NEGATE"
      000886                          5         NEGAT:
      000886 90 93            [ 1] 1613         LDW Y,X
      000888 90 FE            [ 2] 1614         LDW Y,(Y)
      00088A 90 50            [ 2] 1615         NEGW Y
      00088C FF               [ 2] 1616         LDW (X),Y
      00088D 81               [ 4] 1617         RET
                                   1618 
                                   1619 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1620 ;       DNEGATE ( d -- -d )
                                   1621 ;       Two's complement of double.
                                   1622 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00088E                       1623         _HEADER DNEGA,7,"DNEGATE"
      00088E 08 7F                    1         .word LINK 
                           000890     2         LINK=.
      000890 07                       3         .byte 7  
      000891 44 4E 45 47 41 54 45     4         .ascii "DNEGATE"
      000898                          5         DNEGA:
      000898 90 93            [ 1] 1624         LDW Y,X
      00089A 90 FE            [ 2] 1625 	LDW Y,(Y)
      00089C 90 53            [ 2] 1626         CPLW Y
      00089E 90 89            [ 2] 1627         PUSHW Y      ; Y >R 
      0008A0 90 93            [ 1] 1628         LDW Y,X
      0008A2 90 EE 02         [ 2] 1629         LDW Y,(2,Y)
      0008A5 90 53            [ 2] 1630         CPLW Y
      0008A7 72 A9 00 01      [ 2] 1631         ADDW Y,#1
      0008AB EF 02            [ 2] 1632         LDW (2,X),Y
      0008AD 90 85            [ 2] 1633         POPW Y       ; R> Y  
      0008AF 24 02            [ 1] 1634         JRNC DN1 
      0008B1 90 5C            [ 1] 1635         INCW Y
      0008B3 FF               [ 2] 1636 DN1:    LDW (X),Y
      0008B4 81               [ 4] 1637         RET
                                   1638 
                                   1639 
                                   1640 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1641 ;       S>D ( n -- d )
                                   1642 ; convert single integer to double 
                                   1643 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008B5                       1644         _HEADER STOD,3,"S>D"
      0008B5 08 90                    1         .word LINK 
                           0008B7     2         LINK=.
      0008B7 03                       3         .byte 3  
      0008B8 53 3E 44                 4         .ascii "S>D"
      0008BB                          5         STOD:
      0008BB 1D 00 02         [ 2] 1645         SUBW X,#CELLL 
      0008BE 7F               [ 1] 1646         CLR (X) 
      0008BF 6F 01            [ 1] 1647         CLR (1,X) 
      0008C1 90 93            [ 1] 1648         LDW Y,X 
      0008C3 90 EE 02         [ 2] 1649         LDW Y,(2,Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      0008C6 2A 05            [ 1] 1650         JRPL 1$
      0008C8 90 AE FF FF      [ 2] 1651         LDW Y,#-1 
      0008CC FF               [ 2] 1652         LDW (X),Y 
      0008CD 81               [ 4] 1653 1$:     RET 
                                   1654 
                                   1655 
                                   1656 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1657 ;       -       ( n1 n2 -- n1-n2 )
                                   1658 ;       Subtraction.
                                   1659 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008CE                       1660         _HEADER SUBB,1,"-"
      0008CE 08 B7                    1         .word LINK 
                           0008D0     2         LINK=.
      0008D0 01                       3         .byte 1  
      0008D1 2D                       4         .ascii "-"
      0008D2                          5         SUBB:
      0008D2 90 93            [ 1] 1661         LDW Y,X
      0008D4 90 FE            [ 2] 1662         LDW Y,(Y) ; n2 
      0008D6 90 89            [ 2] 1663         PUSHW Y ; n2 >R 
      0008D8 1C 00 02         [ 2] 1664         ADDW X,#CELLL 
      0008DB 90 93            [ 1] 1665         LDW Y,X
      0008DD 90 FE            [ 2] 1666         LDW Y,(Y) ; n1 
      0008DF 72 F2 01         [ 2] 1667         SUBW Y,(1,SP) ; n1-n2 
      0008E2 FF               [ 2] 1668         LDW (X),Y
      0008E3 5B 02            [ 2] 1669         ADDW SP,#2 ; drop n2 from rstack 
      0008E5 81               [ 4] 1670         RET
                                   1671 
                                   1672 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1673 ;       ABS     ( n -- n )
                                   1674 ;       Return  absolute value of n.
                                   1675 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008E6                       1676         _HEADER ABSS,3,"ABS"
      0008E6 08 D0                    1         .word LINK 
                           0008E8     2         LINK=.
      0008E8 03                       3         .byte 3  
      0008E9 41 42 53                 4         .ascii "ABS"
      0008EC                          5         ABSS:
      0008EC 90 93            [ 1] 1677         LDW Y,X
      0008EE 90 FE            [ 2] 1678 	LDW Y,(Y)
      0008F0 2A 03            [ 1] 1679         JRPL     AB1     ;negate:
      0008F2 90 50            [ 2] 1680         NEGW     Y     ;else negate hi byte
      0008F4 FF               [ 2] 1681         LDW (X),Y
      0008F5 81               [ 4] 1682 AB1:    RET
                                   1683 
                                   1684 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1685 ;       =       ( w w -- t )
                                   1686 ;       Return true if top two are equal.
                                   1687 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008F6                       1688         _HEADER EQUAL,1,"="
      0008F6 08 E8                    1         .word LINK 
                           0008F8     2         LINK=.
      0008F8 01                       3         .byte 1  
      0008F9 3D                       4         .ascii "="
      0008FA                          5         EQUAL:
      0008FA A6 FF            [ 1] 1689         LD A,#0xFF  ;true
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      0008FC 90 93            [ 1] 1690         LDW Y,X    
      0008FE 90 FE            [ 2] 1691         LDW Y,(Y)   ; n2 
      000900 1C 00 02         [ 2] 1692         ADDW X,#CELLL 
      000903 F3               [ 2] 1693         CPW Y,(X)   ; n1==n2
      000904 27 01            [ 1] 1694         JREQ EQ1 
      000906 4F               [ 1] 1695         CLR A 
      000907 F7               [ 1] 1696 EQ1:    LD (X),A
      000908 E7 01            [ 1] 1697         LD (1,X),A
      00090A 81               [ 4] 1698 	RET     
                                   1699 
                                   1700 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1701 ;       U<      ( u1 u2 -- f )
                                   1702 ;       Unsigned compare of top two items.
                                   1703 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00090B                       1704         _HEADER ULESS,2,"U<"
      00090B 08 F8                    1         .word LINK 
                           00090D     2         LINK=.
      00090D 02                       3         .byte 2  
      00090E 55 3C                    4         .ascii "U<"
      000910                          5         ULESS:
      000910 A6 FF            [ 1] 1705         LD A,#0xFF  ;true
      000912 90 93            [ 1] 1706         LDW Y,X    
      000914 90 EE 02         [ 2] 1707         LDW Y,(2,Y) ; u1 
      000917 F3               [ 2] 1708         CPW Y,(X)   ; cpw u1  u2 
      000918 25 01            [ 1] 1709         JRULT     ULES1
      00091A 4F               [ 1] 1710         CLR A
      00091B 1C 00 02         [ 2] 1711 ULES1:  ADDW X,#CELLL 
      00091E F7               [ 1] 1712         LD (X),A
      00091F E7 01            [ 1] 1713         LD (1,X),A
      000921 81               [ 4] 1714 	RET     
                                   1715 
                                   1716 
                                   1717 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1718 ;       <       ( n1 n2 -- t )
                                   1719 ;       Signed compare of top two items.
                                   1720 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000922                       1721         _HEADER LESS,1,"<"
      000922 09 0D                    1         .word LINK 
                           000924     2         LINK=.
      000924 01                       3         .byte 1  
      000925 3C                       4         .ascii "<"
      000926                          5         LESS:
      000926 A6 FF            [ 1] 1722         LD A,#0xFF  ;true
      000928 90 93            [ 1] 1723         LDW Y,X    
      00092A 90 EE 02         [ 2] 1724         LDW Y,(2,Y)  ; n1 
      00092D F3               [ 2] 1725         CPW Y,(X)  ; n1 < n2 ? 
      00092E 2F 01            [ 1] 1726         JRSLT     LT1
      000930 4F               [ 1] 1727         CLR A
      000931 1C 00 02         [ 2] 1728 LT1:    ADDW X,#CELLL 
      000934 F7               [ 1] 1729         LD (X),A
      000935 E7 01            [ 1] 1730         LD (1,X),A
      000937 81               [ 4] 1731 	RET     
                                   1732 
                                   1733 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1734 ;   U> ( u1 u2 -- f )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                   1735 ;   f = true if u1>u2 
                                   1736 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000938                       1737         _HEADER UGREAT,2,"U>"
      000938 09 24                    1         .word LINK 
                           00093A     2         LINK=.
      00093A 02                       3         .byte 2  
      00093B 55 3E                    4         .ascii "U>"
      00093D                          5         UGREAT:
      00093D A6 FF            [ 1] 1738         LD A,#255  
      00093F 90 93            [ 1] 1739         LDW Y,X 
      000941 90 EE 02         [ 2] 1740         LDW Y,(2,Y)  ; u1 
      000944 F3               [ 2] 1741         CPW Y,(X)  ; u1 > u2 
      000945 22 01            [ 1] 1742         JRUGT UGREAT1 
      000947 4F               [ 1] 1743         CLR A   
      000948                       1744 UGREAT1:
      000948 1C 00 02         [ 2] 1745         ADDW X,#CELLL 
      00094B F7               [ 1] 1746         LD (X),A 
      00094C E7 01            [ 1] 1747         LD (1,X),A 
      00094E 81               [ 4] 1748         RET 
                                   1749 
                                   1750 
                                   1751 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1752 ;       >   (n1 n2 -- f )
                                   1753 ;  signed compare n1 n2 
                                   1754 ;  true if n1 > n2 
                                   1755 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00094F                       1756         _HEADER GREAT,1,">"
      00094F 09 3A                    1         .word LINK 
                           000951     2         LINK=.
      000951 01                       3         .byte 1  
      000952 3E                       4         .ascii ">"
      000953                          5         GREAT:
      000953 A6 FF            [ 1] 1757         LD A,#0xFF ;
      000955 90 93            [ 1] 1758         LDW Y,X 
      000957 90 EE 02         [ 2] 1759         LDW Y,(2,Y)  ; n1 
      00095A F3               [ 2] 1760         CPW Y,(X) ; n1 > n2 ?  
      00095B 2C 01            [ 1] 1761         JRSGT GREAT1 
      00095D 4F               [ 1] 1762         CLR  A
      00095E                       1763 GREAT1:
      00095E 1C 00 02         [ 2] 1764         ADDW X,#CELLL 
      000961 F7               [ 1] 1765         LD (X),A 
      000962 E7 01            [ 1] 1766         LD (1,X),A 
      000964 81               [ 4] 1767         RET 
                                   1768 
                                   1769 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1770 ;       MAX     ( n n -- n )
                                   1771 ;       Return greater of two top items.
                                   1772 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000965                       1773         _HEADER MAX,3,"MAX"
      000965 09 51                    1         .word LINK 
                           000967     2         LINK=.
      000967 03                       3         .byte 3  
      000968 4D 41 58                 4         .ascii "MAX"
      00096B                          5         MAX:
      00096B 90 93            [ 1] 1774         LDW Y,X    
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      00096D 90 FE            [ 2] 1775         LDW Y,(Y) ; n2 
      00096F E3 02            [ 2] 1776         CPW Y,(2,X)   
      000971 2F 02            [ 1] 1777         JRSLT  MAX1
      000973 EF 02            [ 2] 1778         LDW (2,X),Y
      000975 1C 00 02         [ 2] 1779 MAX1:   ADDW X,#2
      000978 81               [ 4] 1780 	RET     
                                   1781 
                                   1782 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1783 ;       MIN     ( n n -- n )
                                   1784 ;       Return smaller of top two items.
                                   1785 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000979                       1786         _HEADER MIN,3,"MIN"
      000979 09 67                    1         .word LINK 
                           00097B     2         LINK=.
      00097B 03                       3         .byte 3  
      00097C 4D 49 4E                 4         .ascii "MIN"
      00097F                          5         MIN:
      00097F 90 93            [ 1] 1787         LDW Y,X    
      000981 90 FE            [ 2] 1788         LDW Y,(Y)  ; n2 
      000983 E3 02            [ 2] 1789         CPW Y,(2,X) 
      000985 2C 02            [ 1] 1790         JRSGT MIN1
      000987 EF 02            [ 2] 1791         LDW (2,X),Y
      000989 1C 00 02         [ 2] 1792 MIN1:	ADDW X,#2
      00098C 81               [ 4] 1793 	RET     
                                   1794 
                                   1795 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1796 ;       WITHIN  ( u ul uh -- t )
                                   1797 ;       Return true if u is within
                                   1798 ;       range of ul and uh. ( ul <= u < uh )
                                   1799 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00098D                       1800         _HEADER WITHI,6,"WITHIN"
      00098D 09 7B                    1         .word LINK 
                           00098F     2         LINK=.
      00098F 06                       3         .byte 6  
      000990 57 49 54 48 49 4E        4         .ascii "WITHIN"
      000996                          5         WITHI:
      000996 CD 06 41         [ 4] 1801         CALL     OVER
      000999 CD 08 D2         [ 4] 1802         CALL     SUBB
      00099C CD 05 E2         [ 4] 1803         CALL     TOR
      00099F CD 08 D2         [ 4] 1804         CALL     SUBB
      0009A2 CD 05 34         [ 4] 1805         CALL     RFROM
      0009A5 CC 09 10         [ 2] 1806         JP     ULESS
                                   1807 
                                   1808 ;; Divide
                                   1809 
                                   1810 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1811 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1812 ;       Unsigned divide of a double by a
                                   1813 ;       single. Return mod and quotient.
                                   1814 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0009A8                       1815         _HEADER UMMOD,6,"UM/MOD" 
      0009A8 09 8F                    1         .word LINK 
                           0009AA     2         LINK=.
      0009AA 06                       3         .byte 6  
      0009AB 55 4D 2F 4D 4F 44        4         .ascii "UM/MOD"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      0009B1                          5         UMMOD:
                                   1816         ;;;;;; local variables ;;;;
                           000007  1817         DP=7
                           000005  1818         DIV=5 
                           000003  1819         UDL=3 
                           000001  1820         UDH=1
                                   1821         ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0009B1 90 93            [ 1] 1822         LDW Y,X 
      0009B3 90 EE 02         [ 2] 1823         LDW Y,(2,Y) ; udh 
      0009B6 26 0C            [ 1] 1824         JRNE UMMOD1 
                                   1825 ; udh==0 use faster U/MOD         
      0009B8 90 93            [ 1] 1826         LDW Y,X 
      0009BA 90 FE            [ 2] 1827         LDW Y,(Y)
      0009BC EF 02            [ 2] 1828         LDW (2,X),Y  ; replace udh by un 
      0009BE 1C 00 02         [ 2] 1829         ADDW X,#CELLL ; drop un  
      0009C1 CC 0A 1B         [ 2] 1830         JP USLMOD 
      0009C4                       1831 UMMOD1:
      0009C4 52 08            [ 2] 1832         SUB SP,#4*CELLL ; local variables space 
      0009C6 17 01            [ 2] 1833         LDW (UDH,SP),Y ; save udh 
      0009C8 90 93            [ 1] 1834         LDW Y,X 
      0009CA 5C               [ 1] 1835         INCW X 
      0009CB 5C               [ 1] 1836         INCW X 
      0009CC 1F 07            [ 2] 1837         LDW (DP,SP),X ; save DP 
      0009CE 90 FE            [ 2] 1838         LDW Y,(Y) ; divisor 
      0009D0 17 05            [ 2] 1839         LDW (DIV,SP),Y ; divisor 
      0009D2 51               [ 1] 1840         EXGW X,Y 
      0009D3 13 01            [ 2] 1841         CPW X,(UDH,SP) 
      0009D5 22 0D            [ 1] 1842         JRUGT UMMOD2
                                   1843 ; divisor < udh overflow          
      0009D7 1E 07            [ 2] 1844         LDW X,(DP,SP)
      0009D9 90 AE FF FF      [ 2] 1845         LDW Y,#-1 
      0009DD FF               [ 2] 1846         LDW (X),Y 
      0009DE 90 5F            [ 1] 1847         CLRW Y 
      0009E0 EF 02            [ 2] 1848         LDW (2,X),Y
      0009E2 20 2C            [ 2] 1849         JRA UMMOD8 
      0009E4                       1850 UMMOD2: ; shift left dividend until negative 
      0009E4 1E 01            [ 2] 1851         LDW X,(UDH,SP)
      0009E6 16 03            [ 2] 1852         LDW Y,(UDL,SP) ; X:Y dividend 
      0009E8 A6 10            [ 1] 1853         LD A,#16
      0009EA                       1854 UMMOD3:  
      0009EA 4D               [ 1] 1855         TNZ A 
      0009EB 27 0A            [ 1] 1856         JREQ UMMOD4 
      0009ED 5D               [ 2] 1857         TNZW X 
      0009EE 2B 07            [ 1] 1858         JRMI UMMOD4 
      0009F0 98               [ 1] 1859         RCF 
      0009F1 90 59            [ 2] 1860         RLCW Y 
      0009F3 59               [ 2] 1861         RLCW X
      0009F4 4A               [ 1] 1862         DEC A 
      0009F5 20 F3            [ 2] 1863         JRA UMMOD3 
      0009F7                       1864 UMMOD4:
      0009F7 17 03            [ 2] 1865         LDW (UDL,SP),Y ; save least bits of remainder  
      0009F9 16 05            [ 2] 1866         LDW Y,(DIV,SP) ; divisor 
      0009FB 65               [ 2] 1867         DIVW X,Y  ; X=X/Y , Y=X%Y 
      0009FC 1F 01            [ 2] 1868         LDW (UDH,SP),X ; save quotient 
      0009FE 1E 03            [ 2] 1869         LDW X,(UDL,SP) ; Y:X remainder 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



                                   1870 ; shift left remainder until A==0        
      000A00 4D               [ 1] 1871         TNZ A 
      000A01 27 06            [ 1] 1872         JREQ UMMOD6 
      000A03                       1873 UMMOD5: 
      000A03 59               [ 2] 1874         RLCW X 
      000A04 90 59            [ 2] 1875         RLCW Y 
      000A06 4A               [ 1] 1876         DEC A  
      000A07 26 FA            [ 1] 1877         JRNE UMMOD5 
      000A09                       1878 UMMOD6: ; Y=remainder 
      000A09 1E 07            [ 2] 1879         LDW X,(DP,SP)        
      000A0B EF 02            [ 2] 1880         LDW (2,X),Y 
      000A0D 16 01            [ 2] 1881         LDW Y,(UDH,SP)
      000A0F FF               [ 2] 1882         LDW (X),Y 
      000A10                       1883 UMMOD8:          
      000A10 5B 08            [ 2] 1884         ADDW SP,#4*CELLL 
      000A12 81               [ 4] 1885         RET
                                   1886 
                                   1887 
                                   1888 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1889 ;   U/MOD ( u1 u2 -- ur uq )
                                   1890 ;   unsigned divide u1/u2 
                                   1891 ;   return remainder and quotient 
                                   1892 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A13                       1893         _HEADER USLMOD,5,"U/MOD"
      000A13 09 AA                    1         .word LINK 
                           000A15     2         LINK=.
      000A15 05                       3         .byte 5  
      000A16 55 2F 4D 4F 44           4         .ascii "U/MOD"
      000A1B                          5         USLMOD:
      000A1B 90 93            [ 1] 1894         LDW Y,X 
      000A1D 90 FE            [ 2] 1895         LDW Y,(Y)  ; dividend 
      000A1F 89               [ 2] 1896         PUSHW X    ; DP >R 
      000A20 EE 02            [ 2] 1897         LDW X,(2,X) ; divisor 
      000A22 65               [ 2] 1898         DIVW X,Y 
      000A23 89               [ 2] 1899         PUSHW X     ; quotient 
      000A24 1E 03            [ 2] 1900         LDW X,(3,SP) ; DP 
      000A26 EF 02            [ 2] 1901         LDW (2,X),Y ; remainder 
      000A28 16 01            [ 2] 1902         LDW Y,(1,SP) ; quotient 
      000A2A FF               [ 2] 1903         LDW (X),Y 
      000A2B 5B 04            [ 2] 1904         ADDW SP,#2*CELLL ; drop quotient and DP from rstack 
      000A2D 81               [ 4] 1905         RET 
                                   1906 
                                   1907 
                                   1908 
                                   1909 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                   1910 ;       M/MOD   ( d n -- r q )
                                   1911 ;       Signed floored divide of double by
                                   1912 ;       single. Return mod and quotient.
                                   1913 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A2E                       1914         _HEADER MSMOD,5,"M/MOD"
      000A2E 0A 15                    1         .word LINK 
                           000A30     2         LINK=.
      000A30 05                       3         .byte 5  
      000A31 4D 2F 4D 4F 44           4         .ascii "M/MOD"
      000A36                          5         MSMOD:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000A36 CD 06 19         [ 4] 1915         CALL	DUPP
      000A39 CD 06 50         [ 4] 1916         CALL	ZLESS
      000A3C CD 06 19         [ 4] 1917         CALL	DUPP
      000A3F CD 05 E2         [ 4] 1918         CALL	TOR
      000A42 CD 04 98         [ 4] 1919         CALL	QBRAN
      000A45 0A 53                 1920         .word	MMOD1
      000A47 CD 08 86         [ 4] 1921         CALL	NEGAT
      000A4A CD 05 E2         [ 4] 1922         CALL	TOR
      000A4D CD 08 98         [ 4] 1923         CALL	DNEGA
      000A50 CD 05 34         [ 4] 1924         CALL	RFROM
      000A53 CD 05 E2         [ 4] 1925 MMOD1:	CALL	TOR
      000A56 CD 06 19         [ 4] 1926         CALL	DUPP
      000A59 CD 06 50         [ 4] 1927         CALL	ZLESS
      000A5C CD 04 98         [ 4] 1928         CALL	QBRAN
      000A5F 0A 67                 1929         .word	MMOD2
      000A61 CD 05 45         [ 4] 1930         CALL	RAT
      000A64 CD 08 3C         [ 4] 1931         CALL	PLUS
      000A67 CD 05 34         [ 4] 1932 MMOD2:	CALL	RFROM
      000A6A CD 09 B1         [ 4] 1933         CALL	UMMOD
      000A6D CD 05 34         [ 4] 1934         CALL	RFROM
      000A70 CD 04 98         [ 4] 1935         CALL	QBRAN
      000A73 0A 7E                 1936         .word	MMOD3
      000A75 CD 06 29         [ 4] 1937         CALL	SWAPP
      000A78 CD 08 86         [ 4] 1938         CALL	NEGAT
      000A7B CD 06 29         [ 4] 1939         CALL	SWAPP
      000A7E 81               [ 4] 1940 MMOD3:	RET
                                   1941 
                                   1942 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1943 ;       /MOD    ( n1 n2 -- r q )
                                   1944 ;       Signed divide n1/n2. 
                                   1945 ;       Return mod and quotient.
                                   1946 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A7F                       1947         _HEADER SLMOD,4,"/MOD"
      000A7F 0A 30                    1         .word LINK 
                           000A81     2         LINK=.
      000A81 04                       3         .byte 4  
      000A82 2F 4D 4F 44              4         .ascii "/MOD"
      000A86                          5         SLMOD:
      000A86 F6               [ 1] 1948         LD A,(X)
      000A87 88               [ 1] 1949         PUSH A   ; n2 sign 
      000A88 E6 02            [ 1] 1950         LD A,(2,X)
      000A8A 88               [ 1] 1951         PUSH A    ; n1 sign 
      000A8B CD 08 EC         [ 4] 1952         CALL ABSS 
      000A8E CD 05 E2         [ 4] 1953         CALL TOR  ; 
      000A91 CD 08 EC         [ 4] 1954         CALL ABSS 
      000A94 CD 05 45         [ 4] 1955         CALL RAT   
      000A97 CD 0A 1B         [ 4] 1956         CALL USLMOD 
      000A9A 7B 03            [ 1] 1957         LD A,(3,SP)
      000A9C 1A 04            [ 1] 1958         OR A,(4,SP)
      000A9E 2A 25            [ 1] 1959         JRPL SLMOD8 ; both positive nothing to change 
      000AA0 7B 03            [ 1] 1960         LD A,(3,SP)
      000AA2 18 04            [ 1] 1961         XOR A,(4,SP)
      000AA4 2A 12            [ 1] 1962         JRPL SLMOD1
                                   1963 ; dividend and divisor are opposite sign          
      000AA6 CD 0B B2         [ 4] 1964         CALL ONEP   ; add one to quotient 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000AA9 CD 08 86         [ 4] 1965         CALL NEGAT ; negative quotient
      000AAC CD 05 45         [ 4] 1966         CALL RAT 
      000AAF CD 07 DD         [ 4] 1967         CALL ROT 
      000AB2 CD 08 D2         [ 4] 1968         CALL SUBB  ; corrected_remainder=divisor-remainder 
      000AB5 CD 06 29         [ 4] 1969         CALL SWAPP
      000AB8                       1970 SLMOD1:
      000AB8 7B 04            [ 1] 1971         LD A,(4,SP) ; divisor sign 
      000ABA 2A 09            [ 1] 1972         JRPL SLMOD8 
      000ABC CD 05 E2         [ 4] 1973         CALL TOR 
      000ABF CD 08 86         [ 4] 1974         CALL NEGAT ; if divisor negative negate remainder 
      000AC2 CD 05 34         [ 4] 1975         CALL RFROM 
      000AC5                       1976 SLMOD8: 
      000AC5 5B 04            [ 2] 1977         ADDW SP,#4 
      000AC7 81               [ 4] 1978         RET 
                                   1979 
                                   1980 ;        CALL	OVER
                                   1981 ;        CALL	ZLESS
                                   1982 ;        CALL	SWAPP
                                   1983 ;        JP	MSMOD
                                   1984 
                                   1985 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1986 ;       MOD     ( n n -- r )
                                   1987 ;       Signed divide. Return mod only.
                                   1988 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AC8                       1989         _HEADER MODD,3,"MOD"
      000AC8 0A 81                    1         .word LINK 
                           000ACA     2         LINK=.
      000ACA 03                       3         .byte 3  
      000ACB 4D 4F 44                 4         .ascii "MOD"
      000ACE                          5         MODD:
      000ACE CD 0A 86         [ 4] 1990 	CALL	SLMOD
      000AD1 CC 06 0F         [ 2] 1991 	JP	DROP
                                   1992 
                                   1993 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1994 ;       /       ( n n -- q )
                                   1995 ;       Signed divide. Return quotient only.
                                   1996 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AD4                       1997         _HEADER SLASH,1,"/"
      000AD4 0A CA                    1         .word LINK 
                           000AD6     2         LINK=.
      000AD6 01                       3         .byte 1  
      000AD7 2F                       4         .ascii "/"
      000AD8                          5         SLASH:
      000AD8 CD 0A 86         [ 4] 1998         CALL	SLMOD
      000ADB CD 06 29         [ 4] 1999         CALL	SWAPP
      000ADE CC 06 0F         [ 2] 2000         JP	DROP
                                   2001 
                                   2002 ;; Multiply
                                   2003 
                                   2004 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2005 ;       UM*     ( u u -- ud )
                                   2006 ;       Unsigned multiply. Return 
                                   2007 ;       double product.
                                   2008 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AE1                       2009         _HEADER UMSTA,3,"UM*"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000AE1 0A D6                    1         .word LINK 
                           000AE3     2         LINK=.
      000AE3 03                       3         .byte 3  
      000AE4 55 4D 2A                 4         .ascii "UM*"
      000AE7                          5         UMSTA:
                                   2010 ; stack have 4 bytes u1=a,b u2=c,d
                                   2011 ; take advantage of SP addressing modes
                                   2012 ; these PRODx in RAM are not required
                                   2013 ; the product is kept on stack as local variable 
                                   2014         ;; bytes offset on data stack 
                           000002  2015         da=2 
                           000003  2016         db=3 
                           000000  2017         dc=0 
                           000001  2018         dd=1 
                                   2019         ;; product bytes offset on return stack 
                           000001  2020         UD1=1  ; ud bits 31..24
                           000002  2021         UD2=2  ; ud bits 23..16
                           000003  2022         UD3=3  ; ud bits 15..8 
                           000004  2023         UD4=4  ; ud bits 7..0 
                                   2024         ;; local variable for product set to zero   
      000AE7 90 5F            [ 1] 2025         clrw y 
      000AE9 90 89            [ 2] 2026         pushw y  ; bits 15..0
      000AEB 90 89            [ 2] 2027         pushw y  ; bits 31..16 
      000AED E6 03            [ 1] 2028         ld a,(db,x) ; b 
      000AEF 90 97            [ 1] 2029         ld yl,a 
      000AF1 E6 01            [ 1] 2030         ld a,(dd,x)   ; d
      000AF3 90 42            [ 4] 2031         mul y,a    ; b*d  
      000AF5 17 03            [ 2] 2032         ldw (UD3,sp),y ; lowest weight product 
      000AF7 E6 03            [ 1] 2033         ld a,(db,x)
      000AF9 90 97            [ 1] 2034         ld yl,a 
      000AFB E6 00            [ 1] 2035         ld a,(dc,x)
      000AFD 90 42            [ 4] 2036         mul y,a  ; b*c 
                                   2037         ;;; do the partial sum 
      000AFF 72 F9 02         [ 2] 2038         addw y,(UD2,sp)
      000B02 4F               [ 1] 2039         clr a 
      000B03 49               [ 1] 2040         rlc a
      000B04 6B 01            [ 1] 2041         ld (UD1,sp),a 
      000B06 17 02            [ 2] 2042         ldw (UD2,sp),y 
      000B08 E6 02            [ 1] 2043         ld a,(da,x)
      000B0A 90 97            [ 1] 2044         ld yl,a 
      000B0C E6 01            [ 1] 2045         ld a,(dd,x)
      000B0E 90 42            [ 4] 2046         mul y,a   ; a*d 
                                   2047         ;; do partial sum 
      000B10 72 F9 02         [ 2] 2048         addw y,(UD2,sp)
      000B13 4F               [ 1] 2049         clr a 
      000B14 19 01            [ 1] 2050         adc a,(UD1,sp)
      000B16 6B 01            [ 1] 2051         ld (UD1,sp),a  
      000B18 17 02            [ 2] 2052         ldw (UD2,sp),y 
      000B1A E6 02            [ 1] 2053         ld a,(da,x)
      000B1C 90 97            [ 1] 2054         ld yl,a 
      000B1E E6 00            [ 1] 2055         ld a,(dc,x)
      000B20 90 42            [ 4] 2056         mul y,a  ;  a*c highest weight product 
                                   2057         ;;; do partial sum 
      000B22 72 F9 01         [ 2] 2058         addw y,(UD1,sp)
      000B25 FF               [ 2] 2059         ldw (x),y  ; udh 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000B26 16 03            [ 2] 2060         ldw y,(UD3,sp)
      000B28 EF 02            [ 2] 2061         ldw (2,x),y  ; udl  
      000B2A 5B 04            [ 2] 2062         addw sp,#4 ; drop local variable 
      000B2C 81               [ 4] 2063         ret  
                                   2064 
                                   2065 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2066 ;       *       ( n n -- n )
                                   2067 ;       Signed multiply. Return 
                                   2068 ;       single product.
                                   2069 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B2D                       2070         _HEADER STAR,1,"*"
      000B2D 0A E3                    1         .word LINK 
                           000B2F     2         LINK=.
      000B2F 01                       3         .byte 1  
      000B30 2A                       4         .ascii "*"
      000B31                          5         STAR:
      000B31 CD 0A E7         [ 4] 2071 	CALL	UMSTA
      000B34 CC 06 0F         [ 2] 2072 	JP	DROP
                                   2073 
                                   2074 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2075 ;       M*      ( n n -- d )
                                   2076 ;       Signed multiply. Return 
                                   2077 ;       double product.
                                   2078 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B37                       2079         _HEADER MSTAR,2,"M*"
      000B37 0B 2F                    1         .word LINK 
                           000B39     2         LINK=.
      000B39 02                       3         .byte 2  
      000B3A 4D 2A                    4         .ascii "M*"
      000B3C                          5         MSTAR:
      000B3C CD 08 27         [ 4] 2080         CALL	DDUP
      000B3F CD 06 9F         [ 4] 2081         CALL	XORR
      000B42 CD 06 50         [ 4] 2082         CALL	ZLESS
      000B45 CD 05 E2         [ 4] 2083         CALL	TOR
      000B48 CD 08 EC         [ 4] 2084         CALL	ABSS
      000B4B CD 06 29         [ 4] 2085         CALL	SWAPP
      000B4E CD 08 EC         [ 4] 2086         CALL	ABSS
      000B51 CD 0A E7         [ 4] 2087         CALL	UMSTA
      000B54 CD 05 34         [ 4] 2088         CALL	RFROM
      000B57 CD 04 98         [ 4] 2089         CALL	QBRAN
      000B5A 0B 5F                 2090         .word	MSTA1
      000B5C CD 08 98         [ 4] 2091         CALL	DNEGA
      000B5F 81               [ 4] 2092 MSTA1:	RET
                                   2093 
                                   2094 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2095 ;       */MOD   ( n1 n2 n3 -- r q )
                                   2096 ;       Multiply n1 and n2, then divide
                                   2097 ;       by n3. Return mod and quotient.
                                   2098 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B60                       2099         _HEADER SSMOD,5,"*/MOD"
      000B60 0B 39                    1         .word LINK 
                           000B62     2         LINK=.
      000B62 05                       3         .byte 5  
      000B63 2A 2F 4D 4F 44           4         .ascii "*/MOD"
      000B68                          5         SSMOD:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000B68 CD 05 E2         [ 4] 2100         CALL     TOR
      000B6B CD 0B 3C         [ 4] 2101         CALL     MSTAR
      000B6E CD 05 34         [ 4] 2102         CALL     RFROM
      000B71 CC 0A 36         [ 2] 2103         JP     MSMOD
                                   2104 
                                   2105 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2106 ;       */      ( n1 n2 n3 -- q )
                                   2107 ;       Multiply n1 by n2, then divide
                                   2108 ;       by n3. Return quotient only.
                                   2109 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B74                       2110         _HEADER STASL,2,"*/"
      000B74 0B 62                    1         .word LINK 
                           000B76     2         LINK=.
      000B76 02                       3         .byte 2  
      000B77 2A 2F                    4         .ascii "*/"
      000B79                          5         STASL:
      000B79 CD 0B 68         [ 4] 2111         CALL	SSMOD
      000B7C CD 06 29         [ 4] 2112         CALL	SWAPP
      000B7F CC 06 0F         [ 2] 2113         JP	DROP
                                   2114 
                                   2115 ;; Miscellaneous
                                   2116 
                                   2117 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2118 ;       CELL+   ( a -- a )
                                   2119 ;       Add cell size in byte to address.
                                   2120 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B82                       2121         _HEADER CELLP,2,"2+"
      000B82 0B 76                    1         .word LINK 
                           000B84     2         LINK=.
      000B84 02                       3         .byte 2  
      000B85 32 2B                    4         .ascii "2+"
      000B87                          5         CELLP:
      000B87 90 93            [ 1] 2122         LDW Y,X
      000B89 90 FE            [ 2] 2123 	LDW Y,(Y)
      000B8B 72 A9 00 02      [ 2] 2124         ADDW Y,#CELLL 
      000B8F FF               [ 2] 2125         LDW (X),Y
      000B90 81               [ 4] 2126         RET
                                   2127 
                                   2128 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2129 ;       CELL-   ( a -- a )
                                   2130 ;       Subtract 2 from address.
                                   2131 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B91                       2132         _HEADER CELLM,2,"2-"
      000B91 0B 84                    1         .word LINK 
                           000B93     2         LINK=.
      000B93 02                       3         .byte 2  
      000B94 32 2D                    4         .ascii "2-"
      000B96                          5         CELLM:
      000B96 90 93            [ 1] 2133         LDW Y,X
      000B98 90 FE            [ 2] 2134 	LDW Y,(Y)
      000B9A 72 A2 00 02      [ 2] 2135         SUBW Y,#CELLL
      000B9E FF               [ 2] 2136         LDW (X),Y
      000B9F 81               [ 4] 2137         RET
                                   2138 
                                   2139 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                   2140 ;       CELLS   ( n -- n )
                                   2141 ;       Multiply tos by 2.
                                   2142 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BA0                       2143         _HEADER CELLS,2,"2*"
      000BA0 0B 93                    1         .word LINK 
                           000BA2     2         LINK=.
      000BA2 02                       3         .byte 2  
      000BA3 32 2A                    4         .ascii "2*"
      000BA5                          5         CELLS:
      000BA5 90 93            [ 1] 2144         LDW Y,X
      000BA7 90 FE            [ 2] 2145 	LDW Y,(Y)
      000BA9 90 58            [ 2] 2146         SLAW Y
      000BAB FF               [ 2] 2147         LDW (X),Y
      000BAC 81               [ 4] 2148         RET
                                   2149 
                                   2150 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2151 ;       1+      ( a -- a )
                                   2152 ;       Add cell size in byte 
                                   2153 ;       to address.
                                   2154 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BAD                       2155         _HEADER ONEP,2,"1+"
      000BAD 0B A2                    1         .word LINK 
                           000BAF     2         LINK=.
      000BAF 02                       3         .byte 2  
      000BB0 31 2B                    4         .ascii "1+"
      000BB2                          5         ONEP:
      000BB2 90 93            [ 1] 2156         LDW Y,X
      000BB4 90 FE            [ 2] 2157 	LDW Y,(Y)
      000BB6 90 5C            [ 1] 2158         INCW Y
      000BB8 FF               [ 2] 2159         LDW (X),Y
      000BB9 81               [ 4] 2160         RET
                                   2161 
                                   2162 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2163 ;       1-      ( a -- a )
                                   2164 ;       Subtract 2 from address.
                                   2165 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BBA                       2166         _HEADER ONEM,2,"1-"
      000BBA 0B AF                    1         .word LINK 
                           000BBC     2         LINK=.
      000BBC 02                       3         .byte 2  
      000BBD 31 2D                    4         .ascii "1-"
      000BBF                          5         ONEM:
      000BBF 90 93            [ 1] 2167         LDW Y,X
      000BC1 90 FE            [ 2] 2168 	LDW Y,(Y)
      000BC3 90 5A            [ 2] 2169         DECW Y
      000BC5 FF               [ 2] 2170         LDW (X),Y
      000BC6 81               [ 4] 2171         RET
                                   2172 
                                   2173 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2174 ;  shift left n times 
                                   2175 ; LSHIFT ( n1 n2 -- n1<<n2 )
                                   2176 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BC7                       2177         _HEADER LSHIFT,6,"LSHIFT"
      000BC7 0B BC                    1         .word LINK 
                           000BC9     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000BC9 06                       3         .byte 6  
      000BCA 4C 53 48 49 46 54        4         .ascii "LSHIFT"
      000BD0                          5         LSHIFT:
      000BD0 E6 01            [ 1] 2178         ld a,(1,x)
      000BD2 1C 00 02         [ 2] 2179         addw x,#CELLL 
      000BD5 90 93            [ 1] 2180         ldw y,x 
      000BD7 90 FE            [ 2] 2181         ldw y,(y)
      000BD9                       2182 LSHIFT1:
      000BD9 4D               [ 1] 2183         tnz a 
      000BDA 27 05            [ 1] 2184         jreq LSHIFT4 
      000BDC 90 58            [ 2] 2185         sllw y 
      000BDE 4A               [ 1] 2186         dec a 
      000BDF 20 F8            [ 2] 2187         jra LSHIFT1 
      000BE1                       2188 LSHIFT4:
      000BE1 FF               [ 2] 2189         ldw (x),y 
      000BE2 81               [ 4] 2190         ret 
                                   2191 
                                   2192 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2193 ; shift right n times                 
                                   2194 ; RSHIFT (n1 n2 -- n1>>n2 )
                                   2195 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BE3                       2196         _HEADER RSHIFT,6,"RSHIFT"
      000BE3 0B C9                    1         .word LINK 
                           000BE5     2         LINK=.
      000BE5 06                       3         .byte 6  
      000BE6 52 53 48 49 46 54        4         .ascii "RSHIFT"
      000BEC                          5         RSHIFT:
      000BEC E6 01            [ 1] 2197         ld a,(1,x)
      000BEE 1C 00 02         [ 2] 2198         addw x,#CELLL 
      000BF1 90 93            [ 1] 2199         ldw y,x 
      000BF3 90 FE            [ 2] 2200         ldw y,(y)
      000BF5                       2201 RSHIFT1:
      000BF5 4D               [ 1] 2202         tnz a 
      000BF6 27 05            [ 1] 2203         jreq RSHIFT4 
      000BF8 90 54            [ 2] 2204         srlw y 
      000BFA 4A               [ 1] 2205         dec a 
      000BFB 20 F8            [ 2] 2206         jra RSHIFT1 
      000BFD                       2207 RSHIFT4:
      000BFD FF               [ 2] 2208         ldw (x),y 
      000BFE 81               [ 4] 2209         ret 
                                   2210 
                                   2211 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2212 ;       2/      ( n -- n )
                                   2213 ;       divide  tos by 2.
                                   2214 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BFF                       2215         _HEADER TWOSL,2,"2/"
      000BFF 0B E5                    1         .word LINK 
                           000C01     2         LINK=.
      000C01 02                       3         .byte 2  
      000C02 32 2F                    4         .ascii "2/"
      000C04                          5         TWOSL:
      000C04 90 93            [ 1] 2216         LDW Y,X
      000C06 90 FE            [ 2] 2217 	LDW Y,(Y)
      000C08 90 57            [ 2] 2218         SRAW Y
      000C0A FF               [ 2] 2219         LDW (X),Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000C0B 81               [ 4] 2220         RET
                                   2221 
                                   2222 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2223 ;       BL      ( -- 32 )
                                   2224 ;       Return 32,  blank character.
                                   2225 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C0C                       2226         _HEADER BLANK,2,"BL"
      000C0C 0C 01                    1         .word LINK 
                           000C0E     2         LINK=.
      000C0E 02                       3         .byte 2  
      000C0F 42 4C                    4         .ascii "BL"
      000C11                          5         BLANK:
      000C11 1D 00 02         [ 2] 2227         SUBW X,#2
      000C14 90 AE 00 20      [ 2] 2228 	LDW Y,#32
      000C18 FF               [ 2] 2229         LDW (X),Y
      000C19 81               [ 4] 2230         RET
                                   2231 
                                   2232 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2233 ;         0     ( -- 0)
                                   2234 ;         Return 0.
                                   2235 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C1A                       2236         _HEADER ZERO,1,"0"
      000C1A 0C 0E                    1         .word LINK 
                           000C1C     2         LINK=.
      000C1C 01                       3         .byte 1  
      000C1D 30                       4         .ascii "0"
      000C1E                          5         ZERO:
      000C1E 1D 00 02         [ 2] 2237         SUBW X,#2
      000C21 90 5F            [ 1] 2238 	CLRW Y
      000C23 FF               [ 2] 2239         LDW (X),Y
      000C24 81               [ 4] 2240         RET
                                   2241 
                                   2242 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2243 ;         1     ( -- 1)
                                   2244 ;         Return 1.
                                   2245 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C25                       2246         _HEADER ONE,1,"1"
      000C25 0C 1C                    1         .word LINK 
                           000C27     2         LINK=.
      000C27 01                       3         .byte 1  
      000C28 31                       4         .ascii "1"
      000C29                          5         ONE:
      000C29 1D 00 02         [ 2] 2247         SUBW X,#2
      000C2C 90 AE 00 01      [ 2] 2248 	LDW Y,#1
      000C30 FF               [ 2] 2249         LDW (X),Y
      000C31 81               [ 4] 2250         RET
                                   2251 
                                   2252 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2253 ;         -1    ( -- -1)
                                   2254 ;   Return -1
                                   2255 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C32                       2256         _HEADER MONE,2,"-1"
      000C32 0C 27                    1         .word LINK 
                           000C34     2         LINK=.
      000C34 02                       3         .byte 2  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000C35 2D 31                    4         .ascii "-1"
      000C37                          5         MONE:
      000C37 1D 00 02         [ 2] 2257         SUBW X,#2
      000C3A 90 AE FF FF      [ 2] 2258 	LDW Y,#0xFFFF
      000C3E FF               [ 2] 2259         LDW (X),Y
      000C3F 81               [ 4] 2260         RET
                                   2261 
                                   2262 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2263 ;       >CHAR   ( c -- c )
                                   2264 ;       Filter non-printing characters.
                                   2265 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C40                       2266         _HEADER TCHAR,5,">CHAR"
      000C40 0C 34                    1         .word LINK 
                           000C42     2         LINK=.
      000C42 05                       3         .byte 5  
      000C43 3E 43 48 41 52           4         .ascii ">CHAR"
      000C48                          5         TCHAR:
      000C48 E6 01            [ 1] 2267         ld a,(1,x)
      000C4A A1 20            [ 1] 2268         cp a,#32  
      000C4C 2B 05            [ 1] 2269         jrmi 1$ 
      000C4E A1 7F            [ 1] 2270         cp a,#127 
      000C50 2A 01            [ 1] 2271         jrpl 1$ 
      000C52 81               [ 4] 2272         ret 
      000C53 A6 5F            [ 1] 2273 1$:     ld a,#'_ 
      000C55 E7 01            [ 1] 2274         ld (1,x),a 
      000C57 81               [ 4] 2275         ret 
                                   2276 
                                   2277 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2278 ;       DEPTH   ( -- n )
                                   2279 ;       Return  depth of  data stack.
                                   2280 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C58                       2281         _HEADER DEPTH,5,"DEPTH"
      000C58 0C 42                    1         .word LINK 
                           000C5A     2         LINK=.
      000C5A 05                       3         .byte 5  
      000C5B 44 45 50 54 48           4         .ascii "DEPTH"
      000C60                          5         DEPTH:
      000C60 90 BE 2C         [ 2] 2282         LDW Y,SP0    ;save data stack ptr
      000C63 BF 24            [ 2] 2283 	LDW XTEMP,X
      000C65 72 B2 00 24      [ 2] 2284         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000C69 90 57            [ 2] 2285         SRAW Y    ;Y = #stack items
      000C6B 1D 00 02         [ 2] 2286 	SUBW X,#2
      000C6E FF               [ 2] 2287         LDW (X),Y     ; if neg, underflow
      000C6F 81               [ 4] 2288         RET
                                   2289 
                                   2290 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2291 ;       PICK    ( ... +n -- ... w )
                                   2292 ;       Copy  nth stack item to tos.
                                   2293 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C70                       2294         _HEADER PICK,4,"PICK"
      000C70 0C 5A                    1         .word LINK 
                           000C72     2         LINK=.
      000C72 04                       3         .byte 4  
      000C73 50 49 43 4B              4         .ascii "PICK"
      000C77                          5         PICK:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000C77 90 93            [ 1] 2295         LDW Y,X   ;D = n1
      000C79 90 FE            [ 2] 2296         LDW Y,(Y)
                                   2297 ; modified for standard compliance          
                                   2298 ; 0 PICK must be equivalent to DUP 
      000C7B 90 5C            [ 1] 2299         INCW Y 
      000C7D 90 58            [ 2] 2300         SLAW Y
      000C7F BF 24            [ 2] 2301         LDW XTEMP,X
      000C81 72 B9 00 24      [ 2] 2302         ADDW Y,XTEMP
      000C85 90 FE            [ 2] 2303         LDW Y,(Y)
      000C87 FF               [ 2] 2304         LDW (X),Y
      000C88 81               [ 4] 2305         RET
                                   2306 
                                   2307 ;; Memory access
                                   2308 
                                   2309 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2310 ;       +!      ( n a -- )
                                   2311 ;       Add n to  contents at 
                                   2312 ;       address a.
                                   2313 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C89                       2314         _HEADER PSTOR,2,"+!"
      000C89 0C 72                    1         .word LINK 
                           000C8B     2         LINK=.
      000C8B 02                       3         .byte 2  
      000C8C 2B 21                    4         .ascii "+!"
      000C8E                          5         PSTOR:
      000C8E 90 93            [ 1] 2315         ldw y,x 
      000C90 90 FE            [ 2] 2316         ldw y,(y)
      000C92 90 BF 26         [ 2] 2317         ldw YTEMP,y  ; address
      000C95 90 FE            [ 2] 2318         ldw y,(y)  
      000C97 90 89            [ 2] 2319         pushw y  ; value at address 
      000C99 90 93            [ 1] 2320         ldw y,x 
      000C9B 90 EE 02         [ 2] 2321         ldw y,(2,y) ; n 
      000C9E 72 F9 01         [ 2] 2322         addw y,(1,sp) ; n+value
      000CA1 91 CF 26         [ 5] 2323         ldw [YTEMP],y ;  a!
      000CA4 90 85            [ 2] 2324         popw y    ;drop local var
      000CA6 1C 00 04         [ 2] 2325         addw x,#4 ; DDROP 
      000CA9 81               [ 4] 2326         ret 
                                   2327 
                                   2328 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2329 ;       2!      ( d a -- )
                                   2330 ;       Store  double integer 
                                   2331 ;       to address a.
                                   2332 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CAA                       2333         _HEADER DSTOR,2,"2!"
      000CAA 0C 8B                    1         .word LINK 
                           000CAC     2         LINK=.
      000CAC 02                       3         .byte 2  
      000CAD 32 21                    4         .ascii "2!"
      000CAF                          5         DSTOR:
      000CAF 90 93            [ 1] 2334         LDW Y,X 
      000CB1 89               [ 2] 2335         PUSHW X 
      000CB2 FE               [ 2] 2336         LDW X,(X) ; a 
      000CB3 90 EE 02         [ 2] 2337         LDW Y,(2,Y) ; dhi 
      000CB6 FF               [ 2] 2338         LDW (X),Y 
      000CB7 16 01            [ 2] 2339         LDW Y,(1,SP)  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000CB9 90 EE 04         [ 2] 2340         LDW Y,(4,Y) ; dlo 
      000CBC EF 02            [ 2] 2341         LDW (2,X),Y  
      000CBE 85               [ 2] 2342         POPW X 
      000CBF 1C 00 06         [ 2] 2343         ADDW X,#3*CELLL 
      000CC2 81               [ 4] 2344         RET 
                                   2345 
                                   2346 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2347 ;       2@      ( a -- d )
                                   2348 ;       Fetch double integer 
                                   2349 ;       from address a.
                                   2350 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CC3                       2351         _HEADER DAT,2,"2@"
      000CC3 0C AC                    1         .word LINK 
                           000CC5     2         LINK=.
      000CC5 02                       3         .byte 2  
      000CC6 32 40                    4         .ascii "2@"
      000CC8                          5         DAT:
      000CC8 90 93            [ 1] 2352         ldw y,x 
      000CCA 1D 00 02         [ 2] 2353         subw x,#CELLL 
      000CCD 90 FE            [ 2] 2354         ldw y,(y) ;address 
      000CCF 90 89            [ 2] 2355         pushw y  
      000CD1 90 FE            [ 2] 2356         ldw y,(y) ; dhi 
      000CD3 FF               [ 2] 2357         ldw (x),y 
      000CD4 90 85            [ 2] 2358         popw y 
      000CD6 90 EE 02         [ 2] 2359         ldw y,(2,y) ; dlo 
      000CD9 EF 02            [ 2] 2360         ldw (2,x),y 
      000CDB 81               [ 4] 2361         ret 
                                   2362 
                                   2363 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2364 ;       COUNT   ( b -- b +n )
                                   2365 ;       Return count byte of a string
                                   2366 ;       and add 1 to byte address.
                                   2367 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CDC                       2368         _HEADER COUNT,5,"COUNT"
      000CDC 0C C5                    1         .word LINK 
                           000CDE     2         LINK=.
      000CDE 05                       3         .byte 5  
      000CDF 43 4F 55 4E 54           4         .ascii "COUNT"
      000CE4                          5         COUNT:
      000CE4 90 93            [ 1] 2369         ldw y,x 
      000CE6 90 FE            [ 2] 2370         ldw y,(y) ; address 
      000CE8 90 F6            [ 1] 2371         ld a,(y)  ; count 
      000CEA 90 5C            [ 1] 2372         incw y 
      000CEC FF               [ 2] 2373         ldw (x),y 
      000CED 1D 00 02         [ 2] 2374         subw x,#CELLL 
      000CF0 E7 01            [ 1] 2375         ld (1,x),a 
      000CF2 7F               [ 1] 2376         clr (x)
      000CF3 81               [ 4] 2377         ret 
                                   2378 
                                   2379 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2380 ;       HERE    ( -- a )
                                   2381 ;       Return  top of  variables
                                   2382 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CF4                       2383         _HEADER HERE,4,"HERE"
      000CF4 0C DE                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



                           000CF6     2         LINK=.
      000CF6 04                       3         .byte 4  
      000CF7 48 45 52 45              4         .ascii "HERE"
      000CFB                          5         HERE:
      000CFB 90 AE 00 18      [ 2] 2384       	ldw y,#UVP 
      000CFF 90 FE            [ 2] 2385         ldw y,(y)
      000D01 1D 00 02         [ 2] 2386         subw x,#CELLL 
      000D04 FF               [ 2] 2387         ldw (x),y 
      000D05 81               [ 4] 2388         ret 
                                   2389 
                                   2390 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2391 ;       PAD     ( -- a )
                                   2392 ;       Return address of text buffer
                                   2393 ;       above  code dictionary.
                                   2394 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D06                       2395         _HEADER PAD,3,"PAD"
      000D06 0C F6                    1         .word LINK 
                           000D08     2         LINK=.
      000D08 03                       3         .byte 3  
      000D09 50 41 44                 4         .ascii "PAD"
      000D0C                          5         PAD:
      000D0C CD 0C FB         [ 4] 2396         CALL     HERE
      000D0F                       2397         _DOLIT   80
      000D0F CD 04 6F         [ 4]    1     CALL DOLIT 
      000D12 00 50                    2     .word 80 
      000D14 CC 08 3C         [ 2] 2398         JP     PLUS
                                   2399 
                                   2400 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2401 ;       TIB     ( -- a )
                                   2402 ;       Return address of 
                                   2403 ;       terminal input buffer.
                                   2404 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D17                       2405         _HEADER TIB,3,"TIB"
      000D17 0D 08                    1         .word LINK 
                           000D19     2         LINK=.
      000D19 03                       3         .byte 3  
      000D1A 54 49 42                 4         .ascii "TIB"
      000D1D                          5         TIB:
      000D1D CD 07 0D         [ 4] 2406         CALL     NTIB
      000D20 CD 0B 87         [ 4] 2407         CALL     CELLP
      000D23 CC 04 E3         [ 2] 2408         JP     AT
                                   2409 
                                   2410 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2411 ;       @EXECUTE        ( a -- )
                                   2412 ;       Execute vector stored in 
                                   2413 ;       address a.
                                   2414 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D26                       2415         _HEADER ATEXE,8,"@EXECUTE"
      000D26 0D 19                    1         .word LINK 
                           000D28     2         LINK=.
      000D28 08                       3         .byte 8  
      000D29 40 45 58 45 43 55 54     4         .ascii "@EXECUTE"
             45
      000D31                          5         ATEXE:
      000D31 CD 04 E3         [ 4] 2416         CALL     AT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      000D34 CD 07 CC         [ 4] 2417         CALL     QDUP    ;?address or zero
      000D37 CD 04 98         [ 4] 2418         CALL     QBRAN
      000D3A 0D 3F                 2419         .word      EXE1
      000D3C CD 04 C4         [ 4] 2420         CALL     EXECU   ;execute if non-zero
      000D3F 81               [ 4] 2421 EXE1:   RET     ;do nothing if zero
                                   2422 
                                   2423 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2424 ;       CMOVE   ( b1 b2 u -- )
                                   2425 ;       Copy u bytes from b1 to b2.
                                   2426 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D40                       2427         _HEADER CMOVE,5,"CMOVE"
      000D40 0D 28                    1         .word LINK 
                           000D42     2         LINK=.
      000D42 05                       3         .byte 5  
      000D43 43 4D 4F 56 45           4         .ascii "CMOVE"
      000D48                          5         CMOVE:
      000D48 CD 05 E2         [ 4] 2428         CALL	TOR
      000D4B CD 04 B4         [ 4] 2429         CALL	BRAN
      000D4E 0D 68                 2430         .word	CMOV2
      000D50 CD 05 E2         [ 4] 2431 CMOV1:	CALL	TOR
      000D53 CD 06 19         [ 4] 2432         CALL	DUPP
      000D56 CD 05 01         [ 4] 2433         CALL	CAT
      000D59 CD 05 45         [ 4] 2434         CALL	RAT
      000D5C CD 04 F0         [ 4] 2435         CALL	CSTOR
      000D5F CD 0B B2         [ 4] 2436         CALL	ONEP
      000D62 CD 05 34         [ 4] 2437         CALL	RFROM
      000D65 CD 0B B2         [ 4] 2438         CALL	ONEP
      000D68 CD 04 83         [ 4] 2439 CMOV2:	CALL	DONXT
      000D6B 0D 50                 2440         .word	CMOV1
      000D6D CC 08 1C         [ 2] 2441         JP	DDROP
                                   2442 
                                   2443 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2444 ;       FILL    ( b u c -- )
                                   2445 ;       Fill u bytes of character c
                                   2446 ;       to area beginning at b.
                                   2447 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D70                       2448         _HEADER FILL,4,"FILL"
      000D70 0D 42                    1         .word LINK 
                           000D72     2         LINK=.
      000D72 04                       3         .byte 4  
      000D73 46 49 4C 4C              4         .ascii "FILL"
      000D77                          5         FILL:
      000D77 90 93            [ 1] 2449         ldw y,x 
      000D79 90 E6 01         [ 1] 2450         ld a,(1,y) ; c 
      000D7C 1C 00 02         [ 2] 2451         addw x,#CELLL ; drop c 
      000D7F 90 93            [ 1] 2452         ldw y,x 
      000D81 90 FE            [ 2] 2453         ldw y,(y) ; count
      000D83 90 89            [ 2] 2454         pushw y 
      000D85 1C 00 02         [ 2] 2455         addw x,#CELLL ; drop u 
      000D88 90 93            [ 1] 2456         ldw y,x 
      000D8A 1C 00 02         [ 2] 2457         addw x,#CELLL ; drop b 
      000D8D 90 FE            [ 2] 2458         ldw y,(y) ; address
      000D8F 90 BF 26         [ 2] 2459         ldw YTEMP,y
      000D92 90 85            [ 2] 2460         popw y ; count 
      000D94                       2461 FILL1:  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      000D94 92 C7 26         [ 4] 2462         ld [YTEMP],a 
      000D97 3C 27            [ 1] 2463         inc YTEMP+1
      000D99 24 02            [ 1] 2464         jrnc FILL2 
      000D9B 3C 26            [ 1] 2465         inc YTEMP
      000D9D                       2466 FILL2: 
      000D9D 90 5A            [ 2] 2467         decw y ; count 
      000D9F 26 F3            [ 1] 2468         jrne FILL1  
      000DA1 81               [ 4] 2469         ret 
                                   2470 
                                   2471 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2472 ;       ERASE   ( b u -- )
                                   2473 ;       Erase u bytes beginning at b.
                                   2474 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DA2                       2475         _HEADER ERASE,5,"ERASE"
      000DA2 0D 72                    1         .word LINK 
                           000DA4     2         LINK=.
      000DA4 05                       3         .byte 5  
      000DA5 45 52 41 53 45           4         .ascii "ERASE"
      000DAA                          5         ERASE:
      000DAA 90 5F            [ 1] 2476         clrw y 
      000DAC 1D 00 02         [ 2] 2477         subw x,#CELLL 
      000DAF FF               [ 2] 2478         ldw (x),y 
      000DB0 CC 0D 77         [ 2] 2479         jp FILL 
                                   2480 
                                   2481 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2482 ;       PACK0   ( b u a -- a )
                                   2483 ;       Build a counted string with
                                   2484 ;       u characters from b. Null fill.
                                   2485 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DB3                       2486         _HEADER PACKS,5,"PACK0"
      000DB3 0D A4                    1         .word LINK 
                           000DB5     2         LINK=.
      000DB5 05                       3         .byte 5  
      000DB6 50 41 43 4B 30           4         .ascii "PACK0"
      000DBB                          5         PACKS:
      000DBB CD 06 19         [ 4] 2487         CALL     DUPP
      000DBE CD 05 E2         [ 4] 2488         CALL     TOR     ;strings only on cell boundary
      000DC1 CD 08 27         [ 4] 2489         CALL     DDUP
      000DC4 CD 04 F0         [ 4] 2490         CALL     CSTOR
      000DC7 CD 0B B2         [ 4] 2491         CALL     ONEP ;save count
      000DCA CD 06 29         [ 4] 2492         CALL     SWAPP
      000DCD CD 0D 48         [ 4] 2493         CALL     CMOVE
      000DD0 CD 05 34         [ 4] 2494         CALL     RFROM
      000DD3 81               [ 4] 2495         RET
                                   2496 
                                   2497 ;; Numeric output, single precision
                                   2498 
                                   2499 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2500 ;       DIGIT   ( u -- c )
                                   2501 ;       Convert digit u to a character.
                                   2502 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DD4                       2503         _HEADER DIGIT,5,"DIGIT"
      000DD4 0D B5                    1         .word LINK 
                           000DD6     2         LINK=.
      000DD6 05                       3         .byte 5  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      000DD7 44 49 47 49 54           4         .ascii "DIGIT"
      000DDC                          5         DIGIT:
      000DDC CD 04 6F         [ 4] 2504         CALL	DOLIT
      000DDF 00 09                 2505         .word	9
      000DE1 CD 06 41         [ 4] 2506         CALL	OVER
      000DE4 CD 09 26         [ 4] 2507         CALL	LESS
      000DE7 CD 04 6F         [ 4] 2508         CALL	DOLIT
      000DEA 00 07                 2509         .word	7
      000DEC CD 06 76         [ 4] 2510         CALL	ANDD
      000DEF CD 08 3C         [ 4] 2511         CALL	PLUS
      000DF2 CD 04 6F         [ 4] 2512         CALL	DOLIT
      000DF5 00 30                 2513         .word	48	;'0'
      000DF7 CC 08 3C         [ 2] 2514         JP	PLUS
                                   2515 
                                   2516 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2517 ;       EXTRACT ( n base -- n c )
                                   2518 ;       Extract least significant 
                                   2519 ;       digit from n.
                                   2520 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DFA                       2521         _HEADER EXTRC,7,"EXTRACT"
      000DFA 0D D6                    1         .word LINK 
                           000DFC     2         LINK=.
      000DFC 07                       3         .byte 7  
      000DFD 45 58 54 52 41 43 54     4         .ascii "EXTRACT"
      000E04                          5         EXTRC:
      000E04 CD 0C 1E         [ 4] 2522         CALL     ZERO
      000E07 CD 06 29         [ 4] 2523         CALL     SWAPP
      000E0A CD 09 B1         [ 4] 2524         CALL     UMMOD
      000E0D CD 06 29         [ 4] 2525         CALL     SWAPP
      000E10 CC 0D DC         [ 2] 2526         JP     DIGIT
                                   2527 
                                   2528 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2529 ;       <#      ( -- )
                                   2530 ;       Initiate  numeric 
                                   2531 ;       output process.
                                   2532 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E13                       2533         _HEADER BDIGS,2,"#<"
      000E13 0D FC                    1         .word LINK 
                           000E15     2         LINK=.
      000E15 02                       3         .byte 2  
      000E16 23 3C                    4         .ascii "#<"
      000E18                          5         BDIGS:
      000E18 CD 0D 0C         [ 4] 2534         CALL     PAD
      000E1B CD 07 4F         [ 4] 2535         CALL     HLD
      000E1E CC 04 D1         [ 2] 2536         JP     STORE
                                   2537 
                                   2538 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2539 ;       HOLD    ( c -- )
                                   2540 ;       Insert a character 
                                   2541 ;       into output string.
                                   2542 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E21                       2543         _HEADER HOLD,4,"HOLD"
      000E21 0E 15                    1         .word LINK 
                           000E23     2         LINK=.
      000E23 04                       3         .byte 4  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      000E24 48 4F 4C 44              4         .ascii "HOLD"
      000E28                          5         HOLD:
      000E28 CD 07 4F         [ 4] 2544         CALL     HLD
      000E2B CD 04 E3         [ 4] 2545         CALL     AT
      000E2E CD 0B BF         [ 4] 2546         CALL     ONEM
      000E31 CD 06 19         [ 4] 2547         CALL     DUPP
      000E34 CD 07 4F         [ 4] 2548         CALL     HLD
      000E37 CD 04 D1         [ 4] 2549         CALL     STORE
      000E3A CC 04 F0         [ 2] 2550         JP     CSTOR
                                   2551 
                                   2552 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2553 ;       #       ( u -- u )
                                   2554 ;       Extract one digit from u and
                                   2555 ;       append digit to output string.
                                   2556 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E3D                       2557         _HEADER DIG,1,"#"
      000E3D 0E 23                    1         .word LINK 
                           000E3F     2         LINK=.
      000E3F 01                       3         .byte 1  
      000E40 23                       4         .ascii "#"
      000E41                          5         DIG:
      000E41 CD 06 DF         [ 4] 2558         CALL     BASE
      000E44 CD 04 E3         [ 4] 2559         CALL     AT
      000E47 CD 0E 04         [ 4] 2560         CALL     EXTRC
      000E4A CC 0E 28         [ 2] 2561         JP     HOLD
                                   2562 
                                   2563 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2564 ;       #S      ( u -- 0 )
                                   2565 ;       Convert u until all digits
                                   2566 ;       are added to output string.
                                   2567 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E4D                       2568         _HEADER DIGS,2,"#S"
      000E4D 0E 3F                    1         .word LINK 
                           000E4F     2         LINK=.
      000E4F 02                       3         .byte 2  
      000E50 23 53                    4         .ascii "#S"
      000E52                          5         DIGS:
      000E52 CD 0E 41         [ 4] 2569 DIGS1:  CALL     DIG
      000E55 CD 06 19         [ 4] 2570         CALL     DUPP
      000E58 CD 04 98         [ 4] 2571         CALL     QBRAN
      000E5B 0E 5F                 2572         .word      DIGS2
      000E5D 20 F3            [ 2] 2573         JRA     DIGS1
      000E5F 81               [ 4] 2574 DIGS2:  RET
                                   2575 
                                   2576 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2577 ;       SIGN    ( n -- )
                                   2578 ;       Add a minus sign to
                                   2579 ;       numeric output string.
                                   2580 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E60                       2581         _HEADER SIGN,4,"SIGN"
      000E60 0E 4F                    1         .word LINK 
                           000E62     2         LINK=.
      000E62 04                       3         .byte 4  
      000E63 53 49 47 4E              4         .ascii "SIGN"
      000E67                          5         SIGN:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      000E67 CD 06 50         [ 4] 2582         CALL     ZLESS
      000E6A CD 04 98         [ 4] 2583         CALL     QBRAN
      000E6D 0E 77                 2584         .word      SIGN1
      000E6F CD 04 6F         [ 4] 2585         CALL     DOLIT
      000E72 00 2D                 2586         .word      45	;"-"
      000E74 CC 0E 28         [ 2] 2587         JP     HOLD
      000E77 81               [ 4] 2588 SIGN1:  RET
                                   2589 
                                   2590 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2591 ;       #>      ( w -- b u )
                                   2592 ;       Prepare output string.
                                   2593 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E78                       2594         _HEADER EDIGS,2,"#>"
      000E78 0E 62                    1         .word LINK 
                           000E7A     2         LINK=.
      000E7A 02                       3         .byte 2  
      000E7B 23 3E                    4         .ascii "#>"
      000E7D                          5         EDIGS:
      000E7D CD 06 0F         [ 4] 2595         CALL     DROP
      000E80 CD 07 4F         [ 4] 2596         CALL     HLD
      000E83 CD 04 E3         [ 4] 2597         CALL     AT
      000E86 CD 0D 0C         [ 4] 2598         CALL     PAD
      000E89 CD 06 41         [ 4] 2599         CALL     OVER
      000E8C CC 08 D2         [ 2] 2600         JP     SUBB
                                   2601 
                                   2602 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2603 ;       str     ( w -- b u )
                                   2604 ;       Convert a signed integer
                                   2605 ;       to a numeric string.
                                   2606 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E8F                       2607         _HEADER STR,3,"STR"
      000E8F 0E 7A                    1         .word LINK 
                           000E91     2         LINK=.
      000E91 03                       3         .byte 3  
      000E92 53 54 52                 4         .ascii "STR"
      000E95                          5         STR:
      000E95 CD 06 19         [ 4] 2608         CALL     DUPP
      000E98 CD 05 E2         [ 4] 2609         CALL     TOR
      000E9B CD 08 EC         [ 4] 2610         CALL     ABSS
      000E9E CD 0E 18         [ 4] 2611         CALL     BDIGS
      000EA1 CD 0E 52         [ 4] 2612         CALL     DIGS
      000EA4 CD 05 34         [ 4] 2613         CALL     RFROM
      000EA7 CD 0E 67         [ 4] 2614         CALL     SIGN
      000EAA CC 0E 7D         [ 2] 2615         JP     EDIGS
                                   2616 
                                   2617 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2618 ;       HEX     ( -- )
                                   2619 ;       Use radix 16 as base for
                                   2620 ;       numeric conversions.
                                   2621 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000EAD                       2622         _HEADER HEX,3,"HEX"
      000EAD 0E 91                    1         .word LINK 
                           000EAF     2         LINK=.
      000EAF 03                       3         .byte 3  
      000EB0 48 45 58                 4         .ascii "HEX"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      000EB3                          5         HEX:
      000EB3 CD 04 6F         [ 4] 2623         CALL     DOLIT
      000EB6 00 10                 2624         .word      16
      000EB8 CD 06 DF         [ 4] 2625         CALL     BASE
      000EBB CC 04 D1         [ 2] 2626         JP     STORE
                                   2627 
                                   2628 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2629 ;       DECIMAL ( -- )
                                   2630 ;       Use radix 10 as base
                                   2631 ;       for numeric conversions.
                                   2632 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000EBE                       2633         _HEADER DECIM,7,"DECIMAL"
      000EBE 0E AF                    1         .word LINK 
                           000EC0     2         LINK=.
      000EC0 07                       3         .byte 7  
      000EC1 44 45 43 49 4D 41 4C     4         .ascii "DECIMAL"
      000EC8                          5         DECIM:
      000EC8 CD 04 6F         [ 4] 2634         CALL     DOLIT
      000ECB 00 0A                 2635         .word      10
      000ECD CD 06 DF         [ 4] 2636         CALL     BASE
      000ED0 CC 04 D1         [ 2] 2637         JP     STORE
                                   2638 
                                   2639 ;; Numeric input, single precision
                                   2640 
                                   2641 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2642 ;       DIGIT?  ( c base -- u t )
                                   2643 ;       Convert a character to its numeric
                                   2644 ;       value. A flag indicates success.
                                   2645 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000ED3                       2646         _HEADER DIGTQ,6,"DIGIT?"
      000ED3 0E C0                    1         .word LINK 
                           000ED5     2         LINK=.
      000ED5 06                       3         .byte 6  
      000ED6 44 49 47 49 54 3F        4         .ascii "DIGIT?"
      000EDC                          5         DIGTQ:
      000EDC CD 05 E2         [ 4] 2647         CALL     TOR
      000EDF CD 04 6F         [ 4] 2648         CALL     DOLIT
      000EE2 00 30                 2649         .word     48	; "0"
      000EE4 CD 08 D2         [ 4] 2650         CALL     SUBB
      000EE7 CD 04 6F         [ 4] 2651         CALL     DOLIT
      000EEA 00 09                 2652         .word      9
      000EEC CD 06 41         [ 4] 2653         CALL     OVER
      000EEF CD 09 26         [ 4] 2654         CALL     LESS
      000EF2 CD 04 98         [ 4] 2655         CALL     QBRAN
      000EF5 0F 0D                 2656         .word      DGTQ1
      000EF7 CD 04 6F         [ 4] 2657         CALL     DOLIT
      000EFA 00 07                 2658         .word      7
      000EFC CD 08 D2         [ 4] 2659         CALL     SUBB
      000EFF CD 06 19         [ 4] 2660         CALL     DUPP
      000F02 CD 04 6F         [ 4] 2661         CALL     DOLIT
      000F05 00 0A                 2662         .word      10
      000F07 CD 09 26         [ 4] 2663         CALL     LESS
      000F0A CD 06 8A         [ 4] 2664         CALL     ORR
      000F0D CD 06 19         [ 4] 2665 DGTQ1:  CALL     DUPP
      000F10 CD 05 34         [ 4] 2666         CALL     RFROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      000F13 CC 09 10         [ 2] 2667         JP     ULESS
                                   2668 
                           000001  2669 .if  WANT_DOUBLE
                           000000  2670 .else 
                                   2671 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2672 ;       NUMBER? ( a -- n T | a F )
                                   2673 ;       Convert a number string to
                                   2674 ;       integer. Push a flag on tos.
                                   2675 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2676         _HEADER NUMBQ,7,"NUMBER?"
                                   2677         CALL     BASE
                                   2678         CALL     AT
                                   2679         CALL     TOR
                                   2680         CALL     ZERO
                                   2681         CALL     OVER
                                   2682         CALL     COUNT
                                   2683         CALL     OVER
                                   2684         CALL     CAT
                                   2685         CALL     DOLIT
                                   2686         .word     36	; "0x"
                                   2687         CALL     EQUAL
                                   2688         CALL     QBRAN
                                   2689         .word      NUMQ1
                                   2690         CALL     HEX
                                   2691         CALL     SWAPP
                                   2692         CALL     ONEP
                                   2693         CALL     SWAPP
                                   2694         CALL     ONEM
                                   2695 NUMQ1:  CALL     OVER
                                   2696         CALL     CAT
                                   2697         CALL     DOLIT
                                   2698         .word     45	; "-"
                                   2699         CALL     EQUAL
                                   2700         CALL     TOR
                                   2701         CALL     SWAPP
                                   2702         CALL     RAT
                                   2703         CALL     SUBB
                                   2704         CALL     SWAPP
                                   2705         CALL     RAT
                                   2706         CALL     PLUS
                                   2707         CALL     QDUP
                                   2708         CALL     QBRAN
                                   2709         .word      NUMQ6
                                   2710         CALL     ONEM
                                   2711         CALL     TOR
                                   2712 NUMQ2:  CALL     DUPP
                                   2713         CALL     TOR
                                   2714         CALL     CAT
                                   2715         CALL     BASE
                                   2716         CALL     AT
                                   2717         CALL     DIGTQ
                                   2718         CALL     QBRAN
                                   2719         .word      NUMQ4
                                   2720         CALL     SWAPP
                                   2721         CALL     BASE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                   2722         CALL     AT
                                   2723         CALL     STAR
                                   2724         CALL     PLUS
                                   2725         CALL     RFROM
                                   2726         CALL     ONEP
                                   2727         CALL     DONXT
                                   2728         .word      NUMQ2
                                   2729         CALL     RAT
                                   2730         CALL     SWAPP
                                   2731         CALL     DROP
                                   2732         CALL     QBRAN
                                   2733         .word      NUMQ3
                                   2734         CALL     NEGAT
                                   2735 NUMQ3:  CALL     SWAPP
                                   2736         JRA     NUMQ5
                                   2737 NUMQ4:  CALL     RFROM
                                   2738         CALL     RFROM
                                   2739         CALL     DDROP
                                   2740         CALL     DDROP
                                   2741         CALL     ZERO
                                   2742 NUMQ5:  CALL     DUPP
                                   2743 NUMQ6:  CALL     RFROM
                                   2744         CALL     DDROP
                                   2745         CALL     RFROM
                                   2746         CALL     BASE
                                   2747         JP     STORE
                                   2748 .endif ; WANT_DOUBLE  
                                   2749 
                                   2750 ;; Basic I/O
                                   2751 
                                   2752 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2753 ;       KEY     ( -- c )
                                   2754 ;       Wait for and return an
                                   2755 ;       input character.
                                   2756 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F16                       2757         _HEADER KEY,3,"KEY"
      000F16 0E D5                    1         .word LINK 
                           000F18     2         LINK=.
      000F18 03                       3         .byte 3  
      000F19 4B 45 59                 4         .ascii "KEY"
      000F1C                          5         KEY:
      000F1C 72 0B 52 30 FB   [ 2] 2758         btjf UART_SR,#UART_SR_RXNE,. 
      000F21 C6 52 31         [ 1] 2759         ld a,UART_DR 
      000F24 1D 00 02         [ 2] 2760         subw x,#CELLL 
      000F27 E7 01            [ 1] 2761         ld (1,x),a 
      000F29 7F               [ 1] 2762         clr (x)
      000F2A 81               [ 4] 2763         ret 
                                   2764 
                                   2765 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2766 ;       NUF?    ( -- t )
                                   2767 ;       Return false if no input,
                                   2768 ;       else pause and if CR return true.
                                   2769 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F2B                       2770         _HEADER NUFQ,4,"NUF?"
      000F2B 0F 18                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



                           000F2D     2         LINK=.
      000F2D 04                       3         .byte 4  
      000F2E 4E 55 46 3F              4         .ascii "NUF?"
      000F32                          5         NUFQ:
      000F32 CD 04 18         [ 4] 2771         CALL     QKEY
      000F35 CD 06 19         [ 4] 2772         CALL     DUPP
      000F38 CD 04 98         [ 4] 2773         CALL     QBRAN
      000F3B 0F 4B                 2774         .word    NUFQ1
      000F3D CD 08 1C         [ 4] 2775         CALL     DDROP
      000F40 CD 0F 1C         [ 4] 2776         CALL     KEY
      000F43 CD 04 6F         [ 4] 2777         CALL     DOLIT
      000F46 00 0D                 2778         .word      CRR
      000F48 CC 08 FA         [ 2] 2779         JP     EQUAL
      000F4B 81               [ 4] 2780 NUFQ1:  RET
                                   2781 
                                   2782 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2783 ;       SPACE   ( -- )
                                   2784 ;       Send  blank character to
                                   2785 ;       output device.
                                   2786 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F4C                       2787         _HEADER SPACE,5,"SPACE"
      000F4C 0F 2D                    1         .word LINK 
                           000F4E     2         LINK=.
      000F4E 05                       3         .byte 5  
      000F4F 53 50 41 43 45           4         .ascii "SPACE"
      000F54                          5         SPACE:
      000F54 CD 0C 11         [ 4] 2788         CALL     BLANK
      000F57 CC 04 36         [ 2] 2789         JP     EMIT
                                   2790 
                                   2791 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2792 ;       SPACES  ( +n -- )
                                   2793 ;       Send n spaces to output device.
                                   2794 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F5A                       2795         _HEADER SPACS,6,"SPACES"
      000F5A 0F 4E                    1         .word LINK 
                           000F5C     2         LINK=.
      000F5C 06                       3         .byte 6  
      000F5D 53 50 41 43 45 53        4         .ascii "SPACES"
      000F63                          5         SPACS:
      000F63 CD 0C 1E         [ 4] 2796         CALL     ZERO
      000F66 CD 09 6B         [ 4] 2797         CALL     MAX
      000F69 CD 05 E2         [ 4] 2798         CALL     TOR
      000F6C 20 03            [ 2] 2799         JRA      CHAR2
      000F6E CD 0F 54         [ 4] 2800 CHAR1:  CALL     SPACE
      000F71 CD 04 83         [ 4] 2801 CHAR2:  CALL     DONXT
      000F74 0F 6E                 2802         .word    CHAR1
      000F76 81               [ 4] 2803         RET
                                   2804 
                                   2805 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2806 ;       TYPE    ( b u -- )
                                   2807 ;       Output u characters from b.
                                   2808 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F77                       2809         _HEADER TYPES,4,"TYPE"
      000F77 0F 5C                    1         .word LINK 
                           000F79     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      000F79 04                       3         .byte 4  
      000F7A 54 59 50 45              4         .ascii "TYPE"
      000F7E                          5         TYPES:
      000F7E CD 05 E2         [ 4] 2810         CALL     TOR
      000F81 20 06            [ 2] 2811         JRA     TYPE2
      000F83 CD 0C E4         [ 4] 2812 TYPE1:  CALL     COUNT 
      000F86 CD 04 36         [ 4] 2813         CALL     EMIT
      000F89                       2814 TYPE2:  _DONXT  TYPE1
      000F89 CD 04 83         [ 4]    1     CALL DONXT 
      000F8C 0F 83                    2     .word TYPE1 
      000F8E CC 06 0F         [ 2] 2815         JP     DROP
                                   2816 
                                   2817 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2818 ;       CR      ( -- )
                                   2819 ;       Output a carriage return
                                   2820 ;       and a line feed.
                                   2821 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F91                       2822         _HEADER CR,2,"CR"
      000F91 0F 79                    1         .word LINK 
                           000F93     2         LINK=.
      000F93 02                       3         .byte 2  
      000F94 43 52                    4         .ascii "CR"
      000F96                          5         CR:
      000F96                       2823         _DOLIT  CRR 
      000F96 CD 04 6F         [ 4]    1     CALL DOLIT 
      000F99 00 0D                    2     .word CRR 
      000F9B CD 04 36         [ 4] 2824         CALL    EMIT
      000F9E                       2825         _DOLIT  LF
      000F9E CD 04 6F         [ 4]    1     CALL DOLIT 
      000FA1 00 0A                    2     .word LF 
      000FA3 CC 04 36         [ 2] 2826         JP      EMIT
                                   2827 
                                   2828 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2829 ;       do$     ( -- a )
                                   2830 ;       Return  address of a compiled
                                   2831 ;       string.
                                   2832 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2833 ;       _HEADER DOSTR,COMPO+3,"DO$"
      000FA6                       2834 DOSTR:
      000FA6 CD 05 34         [ 4] 2835         CALL     RFROM
      000FA9 CD 05 45         [ 4] 2836         CALL     RAT
      000FAC CD 05 34         [ 4] 2837         CALL     RFROM
      000FAF CD 0C E4         [ 4] 2838         CALL     COUNT
      000FB2 CD 08 3C         [ 4] 2839         CALL     PLUS
      000FB5 CD 05 E2         [ 4] 2840         CALL     TOR
      000FB8 CD 06 29         [ 4] 2841         CALL     SWAPP
      000FBB CD 05 E2         [ 4] 2842         CALL     TOR
      000FBE 81               [ 4] 2843         RET
                                   2844 
                                   2845 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2846 ;       $"|     ( -- a )
                                   2847 ;       Run time routine compiled by $".
                                   2848 ;       Return address of a compiled string.
                                   2849 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2850 ;       _HEADER STRQP,COMPO+3,"$\"|"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      000FBF                       2851 STRQP:
      000FBF CD 0F A6         [ 4] 2852         CALL     DOSTR
      000FC2 81               [ 4] 2853         RET
                                   2854 
                                   2855 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2856 ;       ."|     ( -- )
                                   2857 ;       Run time routine of ." .
                                   2858 ;       Output a compiled string.
                                   2859 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2860 ;       _HEADER DOTQP,COMPO+3,".\"|"
      000FC3                       2861 DOTQP:
      000FC3 CD 0F A6         [ 4] 2862         CALL     DOSTR
      000FC6 CD 0C E4         [ 4] 2863         CALL     COUNT
      000FC9 CC 0F 7E         [ 2] 2864         JP     TYPES
                                   2865 
                                   2866 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2867 ;       .R      ( n +n -- )
                                   2868 ;       Display an integer in a field
                                   2869 ;       of n columns, right justified.
                                   2870 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000FCC                       2871         _HEADER DOTR,2,".R"
      000FCC 0F 93                    1         .word LINK 
                           000FCE     2         LINK=.
      000FCE 02                       3         .byte 2  
      000FCF 2E 52                    4         .ascii ".R"
      000FD1                          5         DOTR:
      000FD1 CD 05 E2         [ 4] 2872         CALL     TOR
      000FD4 CD 0E 95         [ 4] 2873         CALL     STR
      000FD7 CD 05 34         [ 4] 2874         CALL     RFROM
      000FDA CD 06 41         [ 4] 2875         CALL     OVER
      000FDD CD 08 D2         [ 4] 2876         CALL     SUBB
      000FE0 CD 0F 63         [ 4] 2877         CALL     SPACS
      000FE3 CC 0F 7E         [ 2] 2878         JP     TYPES
                                   2879 
                                   2880 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2881 ;       U.R     ( u +n -- )
                                   2882 ;       Display an unsigned integer
                                   2883 ;       in n column, right justified.
                                   2884 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000FE6                       2885         _HEADER UDOTR,3,"U.R"
      000FE6 0F CE                    1         .word LINK 
                           000FE8     2         LINK=.
      000FE8 03                       3         .byte 3  
      000FE9 55 2E 52                 4         .ascii "U.R"
      000FEC                          5         UDOTR:
      000FEC CD 05 E2         [ 4] 2886         CALL     TOR
      000FEF CD 0E 18         [ 4] 2887         CALL     BDIGS
      000FF2 CD 0E 52         [ 4] 2888         CALL     DIGS
      000FF5 CD 0E 7D         [ 4] 2889         CALL     EDIGS
      000FF8 CD 05 34         [ 4] 2890         CALL     RFROM
      000FFB CD 06 41         [ 4] 2891         CALL     OVER
      000FFE CD 08 D2         [ 4] 2892         CALL     SUBB
      001001 CD 0F 63         [ 4] 2893         CALL     SPACS
      001004 CC 0F 7E         [ 2] 2894         JP     TYPES
                                   2895 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                   2896 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2897 ;       U.      ( u -- )
                                   2898 ;       Display an unsigned integer
                                   2899 ;       in free format.
                                   2900 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001007                       2901         _HEADER UDOT,2,"U."
      001007 0F E8                    1         .word LINK 
                           001009     2         LINK=.
      001009 02                       3         .byte 2  
      00100A 55 2E                    4         .ascii "U."
      00100C                          5         UDOT:
      00100C CD 0E 18         [ 4] 2902         CALL     BDIGS
      00100F CD 0E 52         [ 4] 2903         CALL     DIGS
      001012 CD 0E 7D         [ 4] 2904         CALL     EDIGS
      001015 CD 0F 54         [ 4] 2905         CALL     SPACE
      001018 CC 0F 7E         [ 2] 2906         JP     TYPES
                                   2907 
                                   2908 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2909 ;   H. ( n -- )
                                   2910 ;   display n in hexadecimal 
                                   2911 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00101B                       2912         _HEADER HDOT,2,"H."
      00101B 10 09                    1         .word LINK 
                           00101D     2         LINK=.
      00101D 02                       3         .byte 2  
      00101E 48 2E                    4         .ascii "H."
      001020                          5         HDOT:
      001020 CD 06 DF         [ 4] 2913         CALL BASE 
      001023 CD 04 E3         [ 4] 2914         CALL AT 
      001026 CD 05 E2         [ 4] 2915         CALL TOR 
      001029 CD 0E B3         [ 4] 2916         CALL HEX 
      00102C CD 10 0C         [ 4] 2917         CALL UDOT 
      00102F CD 05 34         [ 4] 2918         CALL RFROM 
      001032 CD 06 DF         [ 4] 2919         CALL BASE 
      001035 CD 04 D1         [ 4] 2920         CALL STORE 
      001038 81               [ 4] 2921         RET 
                                   2922 
                                   2923 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2924 ;       .       ( w -- )
                                   2925 ;       Display an integer in free
                                   2926 ;       format, preceeded by a space.
                                   2927 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001039                       2928         _HEADER DOT,1,"."
      001039 10 1D                    1         .word LINK 
                           00103B     2         LINK=.
      00103B 01                       3         .byte 1  
      00103C 2E                       4         .ascii "."
      00103D                          5         DOT:
      00103D CD 06 DF         [ 4] 2929         CALL     BASE
      001040 CD 04 E3         [ 4] 2930         CALL     AT
      001043 CD 04 6F         [ 4] 2931         CALL     DOLIT
      001046 00 0A                 2932         .word      10
      001048 CD 06 9F         [ 4] 2933         CALL     XORR    ;?decimal
      00104B CD 04 98         [ 4] 2934         CALL     QBRAN
      00104E 10 53                 2935         .word      DOT1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      001050 CC 10 0C         [ 2] 2936         JP     UDOT
      001053 CD 0E 95         [ 4] 2937 DOT1:   CALL     STR
      001056 CD 0F 54         [ 4] 2938         CALL     SPACE
      001059 CC 0F 7E         [ 2] 2939         JP     TYPES
                                   2940 
                                   2941 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2942 ;       ?       ( a -- )
                                   2943 ;       Display contents in memory cell.
                                   2944 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00105C                       2945         _HEADER QUEST,1,"?"
      00105C 10 3B                    1         .word LINK 
                           00105E     2         LINK=.
      00105E 01                       3         .byte 1  
      00105F 3F                       4         .ascii "?"
      001060                          5         QUEST:
      001060 CD 04 E3         [ 4] 2946         CALL     AT
      001063 CC 10 3D         [ 2] 2947         JP     DOT
                                   2948 
                                   2949 ;; Parsing
                                   2950 
                                   2951 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2952 ;       parse   ( b u c -- b u delta ; <string> )
                                   2953 ;       Scan string delimited by c.
                                   2954 ;       Return found string and its offset.
                                   2955 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001066                       2956         _HEADER PARS,5,"PARS$"
      001066 10 5E                    1         .word LINK 
                           001068     2         LINK=.
      001068 05                       3         .byte 5  
      001069 50 41 52 53 24           4         .ascii "PARS$"
      00106E                          5         PARS:
      00106E CD 06 EE         [ 4] 2957         CALL     TEMP
      001071 CD 04 D1         [ 4] 2958         CALL     STORE
      001074 CD 06 41         [ 4] 2959         CALL     OVER
      001077 CD 05 E2         [ 4] 2960         CALL     TOR
      00107A CD 06 19         [ 4] 2961         CALL     DUPP
      00107D CD 04 98         [ 4] 2962         CALL     QBRAN
      001080 11 26                 2963         .word    PARS8
      001082 CD 0B BF         [ 4] 2964         CALL     ONEM
      001085 CD 06 EE         [ 4] 2965         CALL     TEMP
      001088 CD 04 E3         [ 4] 2966         CALL     AT
      00108B CD 0C 11         [ 4] 2967         CALL     BLANK
      00108E CD 08 FA         [ 4] 2968         CALL     EQUAL
      001091 CD 04 98         [ 4] 2969         CALL     QBRAN
      001094 10 C7                 2970         .word      PARS3
      001096 CD 05 E2         [ 4] 2971         CALL     TOR
      001099 CD 0C 11         [ 4] 2972 PARS1:  CALL     BLANK
      00109C CD 06 41         [ 4] 2973         CALL     OVER
      00109F CD 05 01         [ 4] 2974         CALL     CAT     ;skip leading blanks ONLY
      0010A2 CD 08 D2         [ 4] 2975         CALL     SUBB
      0010A5 CD 06 50         [ 4] 2976         CALL     ZLESS
      0010A8 CD 08 75         [ 4] 2977         CALL     INVER
      0010AB CD 04 98         [ 4] 2978         CALL     QBRAN
      0010AE 10 C4                 2979         .word      PARS2
      0010B0 CD 0B B2         [ 4] 2980         CALL     ONEP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      0010B3 CD 04 83         [ 4] 2981         CALL     DONXT
      0010B6 10 99                 2982         .word      PARS1
      0010B8 CD 05 34         [ 4] 2983         CALL     RFROM
      0010BB CD 06 0F         [ 4] 2984         CALL     DROP
      0010BE CD 0C 1E         [ 4] 2985         CALL     ZERO
      0010C1 CC 06 19         [ 2] 2986         JP     DUPP
      0010C4 CD 05 34         [ 4] 2987 PARS2:  CALL     RFROM
      0010C7 CD 06 41         [ 4] 2988 PARS3:  CALL     OVER
      0010CA CD 06 29         [ 4] 2989         CALL     SWAPP
      0010CD CD 05 E2         [ 4] 2990         CALL     TOR
      0010D0 CD 06 EE         [ 4] 2991 PARS4:  CALL     TEMP
      0010D3 CD 04 E3         [ 4] 2992         CALL     AT
      0010D6 CD 06 41         [ 4] 2993         CALL     OVER
      0010D9 CD 05 01         [ 4] 2994         CALL     CAT
      0010DC CD 08 D2         [ 4] 2995         CALL     SUBB    ;scan for delimiter
      0010DF CD 06 EE         [ 4] 2996         CALL     TEMP
      0010E2 CD 04 E3         [ 4] 2997         CALL     AT
      0010E5 CD 0C 11         [ 4] 2998         CALL     BLANK
      0010E8 CD 08 FA         [ 4] 2999         CALL     EQUAL
      0010EB CD 04 98         [ 4] 3000         CALL     QBRAN
      0010EE 10 F3                 3001         .word      PARS5
      0010F0 CD 06 50         [ 4] 3002         CALL     ZLESS
      0010F3 CD 04 98         [ 4] 3003 PARS5:  CALL     QBRAN
      0010F6 11 08                 3004         .word      PARS6
      0010F8 CD 0B B2         [ 4] 3005         CALL     ONEP
      0010FB CD 04 83         [ 4] 3006         CALL     DONXT
      0010FE 10 D0                 3007         .word      PARS4
      001100 CD 06 19         [ 4] 3008         CALL     DUPP
      001103 CD 05 E2         [ 4] 3009         CALL     TOR
      001106 20 0F            [ 2] 3010         JRA     PARS7
      001108 CD 05 34         [ 4] 3011 PARS6:  CALL     RFROM
      00110B CD 06 0F         [ 4] 3012         CALL     DROP
      00110E CD 06 19         [ 4] 3013         CALL     DUPP
      001111 CD 0B B2         [ 4] 3014         CALL     ONEP
      001114 CD 05 E2         [ 4] 3015         CALL     TOR
      001117 CD 06 41         [ 4] 3016 PARS7:  CALL     OVER
      00111A CD 08 D2         [ 4] 3017         CALL     SUBB
      00111D CD 05 34         [ 4] 3018         CALL     RFROM
      001120 CD 05 34         [ 4] 3019         CALL     RFROM
      001123 CC 08 D2         [ 2] 3020         JP     SUBB
      001126 CD 06 41         [ 4] 3021 PARS8:  CALL     OVER
      001129 CD 05 34         [ 4] 3022         CALL     RFROM
      00112C CC 08 D2         [ 2] 3023         JP     SUBB
                                   3024 
                                   3025 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3026 ;       PARSE   ( c -- b u ; <string> )
                                   3027 ;       Scan input stream and return
                                   3028 ;       counted string delimited by c.
                                   3029 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00112F                       3030         _HEADER PARSE,5,"PARSE"
      00112F 10 68                    1         .word LINK 
                           001131     2         LINK=.
      001131 05                       3         .byte 5  
      001132 50 41 52 53 45           4         .ascii "PARSE"
      001137                          5         PARSE:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      001137 CD 05 E2         [ 4] 3031         CALL     TOR
      00113A CD 0D 1D         [ 4] 3032         CALL     TIB
      00113D CD 06 FD         [ 4] 3033         CALL     INN
      001140 CD 04 E3         [ 4] 3034         CALL     AT
      001143 CD 08 3C         [ 4] 3035         CALL     PLUS    ;current input buffer pointer
      001146 CD 07 0D         [ 4] 3036         CALL     NTIB
      001149 CD 04 E3         [ 4] 3037         CALL     AT
      00114C CD 06 FD         [ 4] 3038         CALL     INN
      00114F CD 04 E3         [ 4] 3039         CALL     AT
      001152 CD 08 D2         [ 4] 3040         CALL     SUBB    ;remaining count
      001155 CD 05 34         [ 4] 3041         CALL     RFROM
      001158 CD 10 6E         [ 4] 3042         CALL     PARS
      00115B CD 06 FD         [ 4] 3043         CALL     INN
      00115E CC 0C 8E         [ 2] 3044         JP     PSTOR
                                   3045 
                                   3046 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3047 ;       .(      ( -- )
                                   3048 ;       Output following string up to next ) .
                                   3049 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001161                       3050         _HEADER DOTPR,IMEDD+2,".("
      001161 11 31                    1         .word LINK 
                           001163     2         LINK=.
      001163 82                       3         .byte IMEDD+2  
      001164 2E 28                    4         .ascii ".("
      001166                          5         DOTPR:
      001166 CD 04 6F         [ 4] 3051         CALL     DOLIT
      001169 00 29                 3052         .word     41	; ")"
      00116B CD 11 37         [ 4] 3053         CALL     PARSE
      00116E CC 0F 7E         [ 2] 3054         JP     TYPES
                                   3055 
                                   3056 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3057 ;       (       ( -- )
                                   3058 ;       Ignore following string up to next ).
                                   3059 ;       A comment.
                                   3060 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001171                       3061         _HEADER PAREN,IMEDD+1,"("
      001171 11 63                    1         .word LINK 
                           001173     2         LINK=.
      001173 81                       3         .byte IMEDD+1  
      001174 28                       4         .ascii "("
      001175                          5         PAREN:
      001175 CD 04 6F         [ 4] 3062         CALL     DOLIT
      001178 00 29                 3063         .word     41	; ")"
      00117A CD 11 37         [ 4] 3064         CALL     PARSE
      00117D CC 08 1C         [ 2] 3065         JP     DDROP
                                   3066 
                                   3067 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3068 ;       \       ( -- )
                                   3069 ;       Ignore following text till
                                   3070 ;       end of line.
                                   3071 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001180                       3072         _HEADER BKSLA,IMEDD+1,"\\"
      001180 11 73                    1         .word LINK 
                           001182     2         LINK=.
      001182 81                       3         .byte IMEDD+1  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      001183 5C 5C                    4         .ascii "\\"
      001185                          5         BKSLA:
      001185 90 AE 00 0E      [ 2] 3073         ldw y,#UCTIB ; #TIB  
      001189 90 FE            [ 2] 3074         ldw y,(y)
      00118B 90 89            [ 2] 3075         pushw y ; count in TIB 
      00118D 90 AE 00 0C      [ 2] 3076         ldw y,#UINN ; >IN 
      001191 90 BF 26         [ 2] 3077         ldw YTEMP,y
      001194 90 85            [ 2] 3078         popw y 
      001196 91 CF 26         [ 5] 3079         ldw [YTEMP],y
      001199 81               [ 4] 3080         ret 
                                   3081 
                                   3082 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3083 ;       WORD    ( c -- a ; <string> )
                                   3084 ;       Parse a word from input stream
                                   3085 ;       and copy it to code dictionary.
                                   3086 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00119A                       3087         _HEADER WORDD,4,"WORD"
      00119A 11 82                    1         .word LINK 
                           00119C     2         LINK=.
      00119C 04                       3         .byte 4  
      00119D 57 4F 52 44              4         .ascii "WORD"
      0011A1                          5         WORDD:
      0011A1 CD 11 37         [ 4] 3088         CALL     PARSE
      0011A4 CD 0C FB         [ 4] 3089         CALL     HERE
      0011A7 CD 0B 87         [ 4] 3090         CALL     CELLP
                           000000  3091 .IF CASE_SENSE 
                                   3092         JP      PACKS 
                           000001  3093 .ELSE                 
      0011AA CD 0D BB         [ 4] 3094         CALL     PACKS
                                   3095 ; uppercase TOKEN 
      0011AD CD 06 19         [ 4] 3096         CALL    DUPP 
      0011B0 CD 0C E4         [ 4] 3097         CALL    COUNT 
      0011B3 CD 05 E2         [ 4] 3098         CALL    TOR 
      0011B6 CD 04 B4         [ 4] 3099         CALL    BRAN 
      0011B9 11 E7                 3100         .word   UPPER2  
      0011BB                       3101 UPPER:
      0011BB CD 06 19         [ 4] 3102         CALL    DUPP 
      0011BE CD 05 01         [ 4] 3103         CALL    CAT
      0011C1 CD 06 19         [ 4] 3104         CALL    DUPP 
      0011C4 CD 04 6F         [ 4] 3105         CALL   DOLIT
      0011C7 00 61                 3106         .word   'a' 
      0011C9 CD 04 6F         [ 4] 3107         CALL    DOLIT
      0011CC 00 7B                 3108         .word   'z'+1 
      0011CE CD 09 96         [ 4] 3109         CALL   WITHI 
      0011D1 CD 04 98         [ 4] 3110         CALL   QBRAN
      0011D4 11 DE                 3111         .word  UPPER1  
      0011D6 CD 04 6F         [ 4] 3112         CALL    DOLIT 
      0011D9 00 DF                 3113         .word   0xDF 
      0011DB CD 06 76         [ 4] 3114         CALL    ANDD 
      0011DE                       3115 UPPER1:
      0011DE CD 06 41         [ 4] 3116         CALL    OVER 
      0011E1 CD 04 F0         [ 4] 3117         CALL    CSTOR          
      0011E4 CD 0B B2         [ 4] 3118         CALL    ONEP 
      0011E7                       3119 UPPER2: 
      0011E7 CD 04 83         [ 4] 3120         CALL    DONXT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      0011EA 11 BB                 3121         .word   UPPER  
      0011EC CD 06 0F         [ 4] 3122         CALL    DROP  
      0011EF 81               [ 4] 3123         RET 
                                   3124 .ENDIF 
                                   3125 
                                   3126 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3127 ;       TOKEN   ( -- a ; <string> )
                                   3128 ;       Parse a word from input stream
                                   3129 ;       and copy it to name dictionary.
                                   3130 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0011F0                       3131         _HEADER TOKEN,5,"TOKEN"
      0011F0 11 9C                    1         .word LINK 
                           0011F2     2         LINK=.
      0011F2 05                       3         .byte 5  
      0011F3 54 4F 4B 45 4E           4         .ascii "TOKEN"
      0011F8                          5         TOKEN:
      0011F8 CD 0C 11         [ 4] 3132         CALL     BLANK
      0011FB CC 11 A1         [ 2] 3133         JP     WORDD
                                   3134 
                                   3135 ;; Dictionary search
                                   3136 
                                   3137 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3138 ;       NAME>   ( na -- ca )
                                   3139 ;       Return a code address given
                                   3140 ;       a name address.
                                   3141 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0011FE                       3142         _HEADER NAMET,5,"NAME>"
      0011FE 11 F2                    1         .word LINK 
                           001200     2         LINK=.
      001200 05                       3         .byte 5  
      001201 4E 41 4D 45 3E           4         .ascii "NAME>"
      001206                          5         NAMET:
      001206 CD 0C E4         [ 4] 3143         CALL     COUNT
      001209 CD 04 6F         [ 4] 3144         CALL     DOLIT
      00120C 00 1F                 3145         .word      31
      00120E CD 06 76         [ 4] 3146         CALL     ANDD
      001211 CC 08 3C         [ 2] 3147         JP     PLUS
                                   3148 
                                   3149 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3150 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   3151 ;       Compare u cells in two
                                   3152 ;       strings. Return 0 if identical.
                                   3153 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001214                       3154         _HEADER SAMEQ,5,"SAME?"
      001214 12 00                    1         .word LINK 
                           001216     2         LINK=.
      001216 05                       3         .byte 5  
      001217 53 41 4D 45 3F           4         .ascii "SAME?"
      00121C                          5         SAMEQ:
      00121C CD 0B BF         [ 4] 3155         CALL     ONEM
      00121F CD 05 E2         [ 4] 3156         CALL     TOR
      001222 20 29            [ 2] 3157         JRA     SAME2
      001224 CD 06 41         [ 4] 3158 SAME1:  CALL     OVER
      001227 CD 05 45         [ 4] 3159         CALL     RAT
      00122A CD 08 3C         [ 4] 3160         CALL     PLUS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      00122D CD 05 01         [ 4] 3161         CALL     CAT
      001230 CD 06 41         [ 4] 3162         CALL     OVER
      001233 CD 05 45         [ 4] 3163         CALL     RAT
      001236 CD 08 3C         [ 4] 3164         CALL     PLUS
      001239 CD 05 01         [ 4] 3165         CALL     CAT
      00123C CD 08 D2         [ 4] 3166         CALL     SUBB
      00123F CD 07 CC         [ 4] 3167         CALL     QDUP
      001242 CD 04 98         [ 4] 3168         CALL     QBRAN
      001245 12 4D                 3169         .word      SAME2
      001247 CD 05 34         [ 4] 3170         CALL     RFROM
      00124A CC 06 0F         [ 2] 3171         JP     DROP
      00124D CD 04 83         [ 4] 3172 SAME2:  CALL     DONXT
      001250 12 24                 3173         .word      SAME1
      001252 CC 0C 1E         [ 2] 3174         JP     ZERO
                                   3175 
                                   3176 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3177 ;       find    ( a va -- ca na | a F )
                                   3178 ;       Search vocabulary for string.
                                   3179 ;       Return ca and na if succeeded.
                                   3180 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001255                       3181         _HEADER FIND,4,"FIND"
      001255 12 16                    1         .word LINK 
                           001257     2         LINK=.
      001257 04                       3         .byte 4  
      001258 46 49 4E 44              4         .ascii "FIND"
      00125C                          5         FIND:
      00125C CD 06 29         [ 4] 3182         CALL     SWAPP
      00125F CD 06 19         [ 4] 3183         CALL     DUPP
      001262 CD 05 01         [ 4] 3184         CALL     CAT
      001265 CD 06 EE         [ 4] 3185         CALL     TEMP
      001268 CD 04 D1         [ 4] 3186         CALL     STORE
      00126B CD 06 19         [ 4] 3187         CALL     DUPP
      00126E CD 04 E3         [ 4] 3188         CALL     AT
      001271 CD 05 E2         [ 4] 3189         CALL     TOR
      001274 CD 0B 87         [ 4] 3190         CALL     CELLP
      001277 CD 06 29         [ 4] 3191         CALL     SWAPP
      00127A CD 04 E3         [ 4] 3192 FIND1:  CALL     AT
      00127D CD 06 19         [ 4] 3193         CALL     DUPP
      001280 CD 04 98         [ 4] 3194         CALL     QBRAN
      001283 12 B9                 3195         .word      FIND6
      001285 CD 06 19         [ 4] 3196         CALL     DUPP
      001288 CD 04 E3         [ 4] 3197         CALL     AT
      00128B CD 04 6F         [ 4] 3198         CALL     DOLIT
      00128E 1F 7F                 3199         .word      MASKK
      001290 CD 06 76         [ 4] 3200         CALL     ANDD
      001293 CD 05 45         [ 4] 3201         CALL     RAT
      001296 CD 06 9F         [ 4] 3202         CALL     XORR
      001299 CD 04 98         [ 4] 3203         CALL     QBRAN
      00129C 12 A8                 3204         .word      FIND2
      00129E CD 0B 87         [ 4] 3205         CALL     CELLP
      0012A1 CD 04 6F         [ 4] 3206         CALL     DOLIT
      0012A4 FF FF                 3207         .word     0xFFFF
      0012A6 20 0C            [ 2] 3208         JRA     FIND3
      0012A8 CD 0B 87         [ 4] 3209 FIND2:  CALL     CELLP
      0012AB CD 06 EE         [ 4] 3210         CALL     TEMP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      0012AE CD 04 E3         [ 4] 3211         CALL     AT
      0012B1 CD 12 1C         [ 4] 3212         CALL     SAMEQ
      0012B4 CD 04 B4         [ 4] 3213 FIND3:  CALL     BRAN
      0012B7 12 C8                 3214         .word      FIND4
      0012B9 CD 05 34         [ 4] 3215 FIND6:  CALL     RFROM
      0012BC CD 06 0F         [ 4] 3216         CALL     DROP
      0012BF CD 06 29         [ 4] 3217         CALL     SWAPP
      0012C2 CD 0B 96         [ 4] 3218         CALL     CELLM
      0012C5 CC 06 29         [ 2] 3219         JP     SWAPP
      0012C8 CD 04 98         [ 4] 3220 FIND4:  CALL     QBRAN
      0012CB 12 D5                 3221         .word      FIND5
      0012CD CD 0B 96         [ 4] 3222         CALL     CELLM
      0012D0 CD 0B 96         [ 4] 3223         CALL     CELLM
      0012D3 20 A5            [ 2] 3224         JRA     FIND1
      0012D5 CD 05 34         [ 4] 3225 FIND5:  CALL     RFROM
      0012D8 CD 06 0F         [ 4] 3226         CALL     DROP
      0012DB CD 06 29         [ 4] 3227         CALL     SWAPP
      0012DE CD 06 0F         [ 4] 3228         CALL     DROP
      0012E1 CD 0B 96         [ 4] 3229         CALL     CELLM
      0012E4 CD 06 19         [ 4] 3230         CALL     DUPP
      0012E7 CD 12 06         [ 4] 3231         CALL     NAMET
      0012EA CC 06 29         [ 2] 3232         JP     SWAPP
                                   3233 
                                   3234 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3235 ;       NAME?   ( a -- ca na | a F )
                                   3236 ;       Search vocabularies for a string.
                                   3237 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0012ED                       3238         _HEADER NAMEQ,5,"NAME?"
      0012ED 12 57                    1         .word LINK 
                           0012EF     2         LINK=.
      0012EF 05                       3         .byte 5  
      0012F0 4E 41 4D 45 3F           4         .ascii "NAME?"
      0012F5                          5         NAMEQ:
      0012F5 CD 07 62         [ 4] 3239         CALL   CNTXT
      0012F8 CC 12 5C         [ 2] 3240         JP     FIND
                                   3241 
                                   3242 ;; Terminal response
                                   3243 
                                   3244 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3245 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3246 ;       Backup cursor by one character.
                                   3247 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0012FB                       3248         _HEADER BKSP,2,"^H"
      0012FB 12 EF                    1         .word LINK 
                           0012FD     2         LINK=.
      0012FD 02                       3         .byte 2  
      0012FE 5E 48                    4         .ascii "^H"
      001300                          5         BKSP:
      001300 CD 05 E2         [ 4] 3249         CALL     TOR
      001303 CD 06 41         [ 4] 3250         CALL     OVER
      001306 CD 05 34         [ 4] 3251         CALL     RFROM
      001309 CD 06 29         [ 4] 3252         CALL     SWAPP
      00130C CD 06 41         [ 4] 3253         CALL     OVER
      00130F CD 06 9F         [ 4] 3254         CALL     XORR
      001312 CD 04 98         [ 4] 3255         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      001315 13 30                 3256         .word      BACK1
      001317 CD 04 6F         [ 4] 3257         CALL     DOLIT
      00131A 00 08                 3258         .word      BKSPP
      00131C CD 04 36         [ 4] 3259         CALL     EMIT
      00131F CD 0B BF         [ 4] 3260         CALL     ONEM
      001322 CD 0C 11         [ 4] 3261         CALL     BLANK
      001325 CD 04 36         [ 4] 3262         CALL     EMIT
      001328 CD 04 6F         [ 4] 3263         CALL     DOLIT
      00132B 00 08                 3264         .word      BKSPP
      00132D CC 04 36         [ 2] 3265         JP     EMIT
      001330 81               [ 4] 3266 BACK1:  RET
                                   3267 
                                   3268 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3269 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3270 ;       Accept and echo key stroke
                                   3271 ;       and bump cursor.
                                   3272 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001331                       3273         _HEADER TAP,3,"TAP"
      001331 12 FD                    1         .word LINK 
                           001333     2         LINK=.
      001333 03                       3         .byte 3  
      001334 54 41 50                 4         .ascii "TAP"
      001337                          5         TAP:
      001337 CD 06 19         [ 4] 3274         CALL     DUPP
      00133A CD 04 36         [ 4] 3275         CALL     EMIT
      00133D CD 06 41         [ 4] 3276         CALL     OVER
      001340 CD 04 F0         [ 4] 3277         CALL     CSTOR
      001343 CC 0B B2         [ 2] 3278         JP     ONEP
                                   3279 
                                   3280 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3281 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3282 ;       Process a key stroke,
                                   3283 ;       CR,LF or backspace.
                                   3284 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001346                       3285         _HEADER KTAP,4,"KTAP"
      001346 13 33                    1         .word LINK 
                           001348     2         LINK=.
      001348 04                       3         .byte 4  
      001349 4B 54 41 50              4         .ascii "KTAP"
      00134D                          5         KTAP:
      00134D CD 06 19         [ 4] 3286         CALL     DUPP
      001350 CD 04 6F         [ 4] 3287         CALL     DOLIT
                           000001  3288 .if EOL_CR
      001353 00 0D                 3289         .word   CRR
                           000000  3290 .else ; EOL_LF 
                                   3291         .word   LF
                                   3292 .endif 
      001355 CD 06 9F         [ 4] 3293         CALL     XORR
      001358 CD 04 98         [ 4] 3294         CALL     QBRAN
      00135B 13 73                 3295         .word      KTAP2
      00135D CD 04 6F         [ 4] 3296         CALL     DOLIT
      001360 00 08                 3297         .word      BKSPP
      001362 CD 06 9F         [ 4] 3298         CALL     XORR
      001365 CD 04 98         [ 4] 3299         CALL     QBRAN
      001368 13 70                 3300         .word      KTAP1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      00136A CD 0C 11         [ 4] 3301         CALL     BLANK
      00136D CC 13 37         [ 2] 3302         JP     TAP
      001370 CC 13 00         [ 2] 3303 KTAP1:  JP     BKSP
      001373 CD 06 0F         [ 4] 3304 KTAP2:  CALL     DROP
      001376 CD 06 29         [ 4] 3305         CALL     SWAPP
      001379 CD 06 0F         [ 4] 3306         CALL     DROP
      00137C CC 06 19         [ 2] 3307         JP     DUPP
                                   3308 
                                   3309 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3310 ;       accept  ( b u -- b u )
                                   3311 ;       Accept characters to input
                                   3312 ;       buffer. Return with actual count.
                                   3313 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00137F                       3314         _HEADER ACCEP,6,"ACCEPT"
      00137F 13 48                    1         .word LINK 
                           001381     2         LINK=.
      001381 06                       3         .byte 6  
      001382 41 43 43 45 50 54        4         .ascii "ACCEPT"
      001388                          5         ACCEP:
      001388 CD 06 41         [ 4] 3315         CALL     OVER
      00138B CD 08 3C         [ 4] 3316         CALL     PLUS
      00138E CD 06 41         [ 4] 3317         CALL     OVER
      001391 CD 08 27         [ 4] 3318 ACCP1:  CALL     DDUP
      001394 CD 06 9F         [ 4] 3319         CALL     XORR
      001397 CD 04 98         [ 4] 3320         CALL     QBRAN
      00139A 13 BC                 3321         .word      ACCP4
      00139C CD 0F 1C         [ 4] 3322         CALL     KEY
      00139F CD 06 19         [ 4] 3323         CALL     DUPP
      0013A2 CD 0C 11         [ 4] 3324         CALL     BLANK
      0013A5 CD 04 6F         [ 4] 3325         CALL     DOLIT
      0013A8 00 7F                 3326         .word      127
      0013AA CD 09 96         [ 4] 3327         CALL     WITHI
      0013AD CD 04 98         [ 4] 3328         CALL     QBRAN
      0013B0 13 B7                 3329         .word      ACCP2
      0013B2 CD 13 37         [ 4] 3330         CALL     TAP
      0013B5 20 03            [ 2] 3331         JRA     ACCP3
      0013B7 CD 13 4D         [ 4] 3332 ACCP2:  CALL     KTAP
      0013BA 20 D5            [ 2] 3333 ACCP3:  JRA     ACCP1
      0013BC CD 06 0F         [ 4] 3334 ACCP4:  CALL     DROP
      0013BF CD 06 41         [ 4] 3335         CALL     OVER
      0013C2 CC 08 D2         [ 2] 3336         JP     SUBB
                                   3337 
                                   3338 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3339 ;       QUERY   ( -- )
                                   3340 ;       Accept input stream to
                                   3341 ;       terminal input buffer.
                                   3342 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0013C5                       3343         _HEADER QUERY,5,"QUERY"
      0013C5 13 81                    1         .word LINK 
                           0013C7     2         LINK=.
      0013C7 05                       3         .byte 5  
      0013C8 51 55 45 52 59           4         .ascii "QUERY"
      0013CD                          5         QUERY:
      0013CD CD 0D 1D         [ 4] 3344         CALL     TIB
      0013D0 CD 04 6F         [ 4] 3345         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      0013D3 00 50                 3346         .word      80
      0013D5 CD 13 88         [ 4] 3347         CALL     ACCEP
      0013D8 CD 07 0D         [ 4] 3348         CALL     NTIB
      0013DB CD 04 D1         [ 4] 3349         CALL     STORE
      0013DE CD 06 0F         [ 4] 3350         CALL     DROP
      0013E1 CD 0C 1E         [ 4] 3351         CALL     ZERO
      0013E4 CD 06 FD         [ 4] 3352         CALL     INN
      0013E7 CC 04 D1         [ 2] 3353         JP     STORE
                                   3354 
                                   3355 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3356 ;       ABORT   ( -- )
                                   3357 ;       Reset data stack and
                                   3358 ;       jump to QUIT.
                                   3359 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0013EA                       3360         _HEADER ABORT,5,"ABORT"
      0013EA 13 C7                    1         .word LINK 
                           0013EC     2         LINK=.
      0013EC 05                       3         .byte 5  
      0013ED 41 42 4F 52 54           4         .ascii "ABORT"
      0013F2                          5         ABORT:
      0013F2 CD 14 E9         [ 4] 3361         CALL     PRESE
      0013F5 CC 15 06         [ 2] 3362         JP     QUIT
                                   3363 
                                   3364 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3365 ;       abort"  ( f -- )
                                   3366 ;       Run time routine of ABORT".
                                   3367 ;       Abort with a message.
                                   3368 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0013F8                       3369         _HEADER ABORQ,COMPO+6,'ABORT"'
      0013F8 13 EC                    1         .word LINK 
                           0013FA     2         LINK=.
      0013FA 46                       3         .byte COMPO+6  
      0013FB 41 42 4F 52 54 22        4         .ascii 'ABORT"'
      001401                          5         ABORQ:
      001401 CD 04 98         [ 4] 3370         CALL     QBRAN
      001404 14 20                 3371         .word      ABOR2   ;text flag
      001406 CD 0F A6         [ 4] 3372         CALL     DOSTR
      001409 CD 0F 54         [ 4] 3373 ABOR1:  CALL     SPACE
      00140C CD 0C E4         [ 4] 3374         CALL     COUNT
      00140F CD 0F 7E         [ 4] 3375         CALL     TYPES
      001412 CD 04 6F         [ 4] 3376         CALL     DOLIT
      001415 00 3F                 3377         .word     63 ; "?"
      001417 CD 04 36         [ 4] 3378         CALL     EMIT
      00141A CD 0F 96         [ 4] 3379         CALL     CR
      00141D CC 13 F2         [ 2] 3380         JP     ABORT   ;pass error string
      001420 CD 0F A6         [ 4] 3381 ABOR2:  CALL     DOSTR
      001423 CC 06 0F         [ 2] 3382         JP     DROP
                                   3383 
                                   3384 ;; The text interpreter
                                   3385 
                                   3386 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3387 ;       $INTERPRET      ( a -- )
                                   3388 ;       Interpret a word. If failed,
                                   3389 ;       try to convert it to an integer.
                                   3390 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      001426                       3391         _HEADER INTER,10,"$INTERPRET"
      001426 13 FA                    1         .word LINK 
                           001428     2         LINK=.
      001428 0A                       3         .byte 10  
      001429 24 49 4E 54 45 52 50     4         .ascii "$INTERPRET"
             52 45 54
      001433                          5         INTER:
      001433 CD 12 F5         [ 4] 3392         CALL     NAMEQ
      001436 CD 07 CC         [ 4] 3393         CALL     QDUP    ;?defined
      001439 CD 04 98         [ 4] 3394         CALL     QBRAN
      00143C 14 5D                 3395         .word      INTE1
      00143E CD 04 E3         [ 4] 3396         CALL     AT
      001441 CD 04 6F         [ 4] 3397         CALL     DOLIT
      001444 40 00                 3398 	.word       0x4000	; COMPO*256
      001446 CD 06 76         [ 4] 3399         CALL     ANDD    ;?compile only lexicon bits
      001449 CD 14 01         [ 4] 3400         CALL     ABORQ
      00144C 0D                    3401         .byte      13
      00144D 20 63 6F 6D 70 69 6C  3402         .ascii     " compile only"
             65 20 6F 6E 6C 79
      00145A CC 04 C4         [ 2] 3403         JP     EXECU
      00145D CD 25 9D         [ 4] 3404 INTE1:  CALL     NUMBQ   ;convert a number
      001460 CD 04 98         [ 4] 3405         CALL     QBRAN
      001463 14 09                 3406         .word    ABOR1
      001465 81               [ 4] 3407         RET
                                   3408 
                                   3409 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3410 ;       [       ( -- )
                                   3411 ;       Start  text interpreter.
                                   3412 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001466                       3413         _HEADER LBRAC,IMEDD+1,"["
      001466 14 28                    1         .word LINK 
                           001468     2         LINK=.
      001468 81                       3         .byte IMEDD+1  
      001469 5B                       4         .ascii "["
      00146A                          5         LBRAC:
      00146A CD 04 6F         [ 4] 3414         CALL   DOLIT
      00146D 14 33                 3415         .word  INTER
      00146F CD 07 40         [ 4] 3416         CALL   TEVAL
      001472 CC 04 D1         [ 2] 3417         JP     STORE
                                   3418 
                                   3419 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3420 ;       .OK     ( -- )
                                   3421 ;       Display 'ok' while interpreting.
                                   3422 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001475                       3423         _HEADER DOTOK,3,".OK"
      001475 14 68                    1         .word LINK 
                           001477     2         LINK=.
      001477 03                       3         .byte 3  
      001478 2E 4F 4B                 4         .ascii ".OK"
      00147B                          5         DOTOK:
      00147B CD 04 6F         [ 4] 3424         CALL     DOLIT
      00147E 14 33                 3425         .word      INTER
      001480 CD 07 40         [ 4] 3426         CALL     TEVAL
      001483 CD 04 E3         [ 4] 3427         CALL     AT
      001486 CD 08 FA         [ 4] 3428         CALL     EQUAL
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      001489 CD 04 98         [ 4] 3429         CALL     QBRAN
      00148C 14 95                 3430         .word      DOTO1
      00148E CD 0F C3         [ 4] 3431         CALL     DOTQP
      001491 03                    3432         .byte      3
      001492 20 6F 6B              3433         .ascii     " ok"
      001495 CC 0F 96         [ 2] 3434 DOTO1:  JP     CR
                                   3435 
                                   3436 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3437 ;       ?STACK  ( -- )
                                   3438 ;       Abort if stack underflows.
                                   3439 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001498                       3440         _HEADER QSTAC,6,"?STACK"
      001498 14 77                    1         .word LINK 
                           00149A     2         LINK=.
      00149A 06                       3         .byte 6  
      00149B 3F 53 54 41 43 4B        4         .ascii "?STACK"
      0014A1                          5         QSTAC:
      0014A1 CD 0C 60         [ 4] 3441         CALL     DEPTH
      0014A4 CD 06 50         [ 4] 3442         CALL     ZLESS   ;check only for underflow
      0014A7 CD 14 01         [ 4] 3443         CALL     ABORQ
      0014AA 0B                    3444         .byte      11
      0014AB 20 75 6E 64 65 72 66  3445         .ascii     " underflow "
             6C 6F 77 20
      0014B6 81               [ 4] 3446         RET
                                   3447 
                                   3448 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3449 ;       EVAL    ( -- )
                                   3450 ;       Interpret  input stream.
                                   3451 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014B7                       3452         _HEADER EVAL,4,"EVAL"
      0014B7 14 9A                    1         .word LINK 
                           0014B9     2         LINK=.
      0014B9 04                       3         .byte 4  
      0014BA 45 56 41 4C              4         .ascii "EVAL"
      0014BE                          5         EVAL:
      0014BE CD 11 F8         [ 4] 3453 EVAL1:  CALL     TOKEN
      0014C1 CD 06 19         [ 4] 3454         CALL     DUPP
      0014C4 CD 05 01         [ 4] 3455         CALL     CAT     ;?input stream empty
      0014C7 CD 04 98         [ 4] 3456         CALL     QBRAN
      0014CA 14 DA                 3457         .word    EVAL2
      0014CC CD 07 40         [ 4] 3458         CALL     TEVAL
      0014CF CD 0D 31         [ 4] 3459         CALL     ATEXE
      0014D2 CD 14 A1         [ 4] 3460         CALL     QSTAC   ;evaluate input, check stack
      0014D5 CD 04 B4         [ 4] 3461         CALL     BRAN
      0014D8 14 BE                 3462         .word    EVAL1
      0014DA CD 06 0F         [ 4] 3463 EVAL2:  CALL     DROP
      0014DD CC 14 7B         [ 2] 3464         JP       DOTOK
                                   3465 
                                   3466 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3467 ;       PRESET  ( -- )
                                   3468 ;       Reset data stack pointer and
                                   3469 ;       terminal input buffer.
                                   3470 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014E0                       3471         _HEADER PRESE,6,"PRESET"
      0014E0 14 B9                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                           0014E2     2         LINK=.
      0014E2 06                       3         .byte 6  
      0014E3 50 52 45 53 45 54        4         .ascii "PRESET"
      0014E9                          5         PRESE:
      0014E9 CD 04 6F         [ 4] 3472         CALL     DOLIT
      0014EC 16 80                 3473         .word      SPP
      0014EE CD 06 06         [ 4] 3474         CALL     SPSTO
      0014F1 CD 04 6F         [ 4] 3475         CALL     DOLIT
      0014F4 17 00                 3476         .word      TIBB
      0014F6 CD 07 0D         [ 4] 3477         CALL     NTIB
      0014F9 CD 0B 87         [ 4] 3478         CALL     CELLP
      0014FC CC 04 D1         [ 2] 3479         JP     STORE
                                   3480 
                                   3481 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3482 ;       QUIT    ( -- )
                                   3483 ;       Reset return stack pointer
                                   3484 ;       and start text interpreter.
                                   3485 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014FF                       3486         _HEADER QUIT,4,"QUIT"
      0014FF 14 E2                    1         .word LINK 
                           001501     2         LINK=.
      001501 04                       3         .byte 4  
      001502 51 55 49 54              4         .ascii "QUIT"
      001506                          5         QUIT:
      001506 CD 04 6F         [ 4] 3487         CALL     DOLIT
      001509 17 FF                 3488         .word      RPP
      00150B CD 05 1E         [ 4] 3489         CALL     RPSTO   ;reset return stack pointer
      00150E CD 14 6A         [ 4] 3490 QUIT1:  CALL     LBRAC   ;start interpretation
      001511 CD 13 CD         [ 4] 3491 QUIT2:  CALL     QUERY   ;get input
      001514 CD 14 BE         [ 4] 3492         CALL     EVAL
      001517 20 F8            [ 2] 3493         JRA     QUIT2   ;continue till error
                                   3494 
                                   3495 ;; The compiler
                                   3496 
                                   3497 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3498 ;       '       ( -- ca )
                                   3499 ;       Search vocabularies for
                                   3500 ;       next word in input stream.
                                   3501 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001519                       3502         _HEADER TICK,1,"'"
      001519 15 01                    1         .word LINK 
                           00151B     2         LINK=.
      00151B 01                       3         .byte 1  
      00151C 27                       4         .ascii "'"
      00151D                          5         TICK:
      00151D CD 11 F8         [ 4] 3503         CALL     TOKEN
      001520 CD 12 F5         [ 4] 3504         CALL     NAMEQ   ;?defined
      001523 CD 04 98         [ 4] 3505         CALL     QBRAN
      001526 14 09                 3506         .word      ABOR1
      001528 81               [ 4] 3507         RET     ;yes, push code address
                                   3508 
                                   3509 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3510 ;       ALLOT   ( n -- )
                                   3511 ;       Allocate n bytes to RAM 
                                   3512 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      001529                       3513         _HEADER ALLOT,5,"ALLOT"
      001529 15 1B                    1         .word LINK 
                           00152B     2         LINK=.
      00152B 05                       3         .byte 5  
      00152C 41 4C 4C 4F 54           4         .ascii "ALLOT"
      001531                          5         ALLOT:
      001531 CD 07 70         [ 4] 3514         CALL     VPP
                                   3515 ; must update APP_VP each time VP is modidied
      001534 CD 0C 8E         [ 4] 3516         call PSTOR 
      001537 CC 1C E9         [ 2] 3517         jp UPDATVP 
                                   3518 
                                   3519 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3520 ;       ,       ( w -- )
                                   3521 ;         Compile an integer into
                                   3522 ;         variable space.
                                   3523 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00153A                       3524         _HEADER COMMA,1,^/"\,"/
      00153A 15 2B                    1         .word LINK 
                           00153C     2         LINK=.
      00153C 01                       3         .byte 1  
      00153D 5C 2C                    4         .ascii "\,"
      00153F                          5         COMMA:
      00153F CD 0C FB         [ 4] 3525         CALL     HERE
      001542 CD 06 19         [ 4] 3526         CALL     DUPP
      001545 CD 0B 87         [ 4] 3527         CALL     CELLP   ;cell boundary
      001548 CD 07 70         [ 4] 3528         CALL     VPP
      00154B CD 04 D1         [ 4] 3529         CALL     STORE
      00154E CC 04 D1         [ 2] 3530         JP     STORE
                                   3531 
                                   3532 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3533 ;       C,      ( c -- )
                                   3534 ;       Compile a byte into
                                   3535 ;       variables space.
                                   3536 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001551                       3537         _HEADER CCOMMA,2,^/"C,"/
      001551 15 3C                    1         .word LINK 
                           001553     2         LINK=.
      001553 02                       3         .byte 2  
      001554 43 2C                    4         .ascii "C,"
      001556                          5         CCOMMA:
      001556 CD 0C FB         [ 4] 3538         CALL     HERE
      001559 CD 06 19         [ 4] 3539         CALL     DUPP
      00155C CD 0B B2         [ 4] 3540         CALL     ONEP
      00155F CD 07 70         [ 4] 3541         CALL     VPP
      001562 CD 04 D1         [ 4] 3542         CALL     STORE
      001565 CC 04 F0         [ 2] 3543         JP     CSTOR
                                   3544 
                                   3545 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3546 ;       [COMPILE]       ( -- ; <string> )
                                   3547 ;       Compile next immediate
                                   3548 ;       word into code dictionary.
                                   3549 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001568                       3550         _HEADER BCOMP,IMEDD+9,"[COMPILE]"
      001568 15 53                    1         .word LINK 
                           00156A     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      00156A 89                       3         .byte IMEDD+9  
      00156B 5B 43 4F 4D 50 49 4C     4         .ascii "[COMPILE]"
             45 5D
      001574                          5         BCOMP:
      001574 CD 15 1D         [ 4] 3551         CALL     TICK
      001577 CC 18 49         [ 2] 3552         JP     JSRC
                                   3553 
                                   3554 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3555 ;       COMPILE ( -- )
                                   3556 ;       Compile next jsr in
                                   3557 ;       colon list to code dictionary.
                                   3558 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00157A                       3559         _HEADER COMPI,COMPO+7,"COMPILE"
      00157A 15 6A                    1         .word LINK 
                           00157C     2         LINK=.
      00157C 47                       3         .byte COMPO+7  
      00157D 43 4F 4D 50 49 4C 45     4         .ascii "COMPILE"
      001584                          5         COMPI:
      001584 CD 05 34         [ 4] 3560         CALL     RFROM
      001587 CD 06 19         [ 4] 3561         CALL     DUPP
      00158A CD 04 E3         [ 4] 3562         CALL     AT
      00158D CD 18 49         [ 4] 3563         CALL     JSRC    ;compile subroutine
      001590 CD 0B 87         [ 4] 3564         CALL     CELLP
      001593 90 93            [ 1] 3565         ldw y,x 
      001595 90 FE            [ 2] 3566         ldw y,(y)
      001597 1C 00 02         [ 2] 3567         addw x,#CELLL 
      00159A 90 FC            [ 2] 3568         jp (y)
                                   3569 
                                   3570 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3571 ;       LITERAL ( w -- )
                                   3572 ;       Compile tos to dictionary
                                   3573 ;       as an integer literal.
                                   3574 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00159C                       3575         _HEADER LITER,COMPO+IMEDD+7,"LITERAL"
      00159C 15 7C                    1         .word LINK 
                           00159E     2         LINK=.
      00159E C7                       3         .byte COMPO+IMEDD+7  
      00159F 4C 49 54 45 52 41 4C     4         .ascii "LITERAL"
      0015A6                          5         LITER:
      0015A6 CD 15 84         [ 4] 3576         CALL     COMPI
      0015A9 04 6F                 3577         .word DOLIT 
      0015AB CC 15 3F         [ 2] 3578         JP     COMMA
                                   3579 
                                   3580 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3581 ;       $,"     ( -- )
                                   3582 ;       Compile a literal string
                                   3583 ;       up to next " .
                                   3584 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3585 ;        _HEADER STRCQ,3,^/'$,"'/
      0015AE                       3586 STRCQ:
      0015AE CD 04 6F         [ 4] 3587         CALL     DOLIT
      0015B1 00 22                 3588         .word     34	; "
      0015B3 CD 11 37         [ 4] 3589         CALL     PARSE
      0015B6 CD 0C FB         [ 4] 3590         CALL     HERE
      0015B9 CD 0D BB         [ 4] 3591         CALL     PACKS   ;string to code dictionary
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      0015BC CD 0C E4         [ 4] 3592         CALL     COUNT
      0015BF CD 08 3C         [ 4] 3593         CALL     PLUS    ;calculate aligned end of string
      0015C2 CD 07 70         [ 4] 3594         CALL     VPP
      0015C5 CC 04 D1         [ 2] 3595         JP     STORE
                                   3596 
                                   3597 ;; Structures
                                   3598 
                                   3599 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3600 ;       FOR     ( -- a )
                                   3601 ;       Start a FOR-NEXT loop
                                   3602 ;       structure in a colon definition.
                                   3603 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015C8                       3604         _HEADER FOR,IMEDD+3,"FOR"
      0015C8 15 9E                    1         .word LINK 
                           0015CA     2         LINK=.
      0015CA 83                       3         .byte IMEDD+3  
      0015CB 46 4F 52                 4         .ascii "FOR"
      0015CE                          5         FOR:
      0015CE CD 15 84         [ 4] 3605         CALL     COMPI
      0015D1 05 E2                 3606         .word TOR 
      0015D3 CC 0C FB         [ 2] 3607         JP     HERE
                                   3608 
                                   3609 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3610 ;       NEXT    ( a -- )
                                   3611 ;       Terminate a FOR-NEXT loop.
                                   3612 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015D6                       3613         _HEADER NEXT,IMEDD+4,"NEXT"
      0015D6 15 CA                    1         .word LINK 
                           0015D8     2         LINK=.
      0015D8 84                       3         .byte IMEDD+4  
      0015D9 4E 45 58 54              4         .ascii "NEXT"
      0015DD                          5         NEXT:
      0015DD CD 15 84         [ 4] 3614         CALL     COMPI
      0015E0 04 83                 3615         .word DONXT 
      0015E2 CD 07 BC         [ 4] 3616         call ADRADJ
      0015E5 CC 15 3F         [ 2] 3617         JP     COMMA
                                   3618 
                                   3619 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3620 ;       I ( -- n )
                                   3621 ;       stack COUNTER
                                   3622 ;       of innermost FOR-NEXT  
                                   3623 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015E8                       3624         _HEADER IFETCH,1,"I"
      0015E8 15 D8                    1         .word LINK 
                           0015EA     2         LINK=.
      0015EA 01                       3         .byte 1  
      0015EB 49                       4         .ascii "I"
      0015EC                          5         IFETCH:
      0015EC 1D 00 02         [ 2] 3625         subw x,#CELLL 
      0015EF 16 03            [ 2] 3626         ldw y,(3,sp)
      0015F1 FF               [ 2] 3627         ldw (x),y 
      0015F2 81               [ 4] 3628         ret 
                                   3629 
                                   3630 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3631 ;       J ( -- n )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                   3632 ;   stack COUNTER
                                   3633 ;   of outer FOR-NEXT  
                                   3634 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015F3                       3635         _HEADER JFETCH,1,"J"
      0015F3 15 EA                    1         .word LINK 
                           0015F5     2         LINK=.
      0015F5 01                       3         .byte 1  
      0015F6 4A                       4         .ascii "J"
      0015F7                          5         JFETCH:
      0015F7 1D 00 02         [ 2] 3636         SUBW X,#CELLL 
      0015FA 16 05            [ 2] 3637         LDW Y,(5,SP)
      0015FC FF               [ 2] 3638         LDW (X),Y 
      0015FD 81               [ 4] 3639         RET 
                                   3640 
                                   3641 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3642 ;       BEGIN   ( -- a )
                                   3643 ;       Start an infinite or
                                   3644 ;       indefinite loop structure.
                                   3645 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015FE                       3646         _HEADER BEGIN,IMEDD+5,"BEGIN"
      0015FE 15 F5                    1         .word LINK 
                           001600     2         LINK=.
      001600 85                       3         .byte IMEDD+5  
      001601 42 45 47 49 4E           4         .ascii "BEGIN"
      001606                          5         BEGIN:
      001606 CC 0C FB         [ 2] 3647         JP     HERE
                                   3648 
                                   3649 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3650 ;       UNTIL   ( a -- )
                                   3651 ;       Terminate a BEGIN-UNTIL
                                   3652 ;       indefinite loop structure.
                                   3653 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001609                       3654         _HEADER UNTIL,IMEDD+5,"UNTIL"
      001609 16 00                    1         .word LINK 
                           00160B     2         LINK=.
      00160B 85                       3         .byte IMEDD+5  
      00160C 55 4E 54 49 4C           4         .ascii "UNTIL"
      001611                          5         UNTIL:
      001611 CD 15 84         [ 4] 3655         CALL     COMPI
      001614 04 98                 3656         .word    QBRAN 
      001616 CD 07 BC         [ 4] 3657         call ADRADJ
      001619 CC 15 3F         [ 2] 3658         JP     COMMA
                                   3659 
                                   3660 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3661 ;       AGAIN   ( a -- )
                                   3662 ;       Terminate a BEGIN-AGAIN
                                   3663 ;       infinite loop structure.
                                   3664 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00161C                       3665         _HEADER AGAIN,IMEDD+5,"AGAIN"
      00161C 16 0B                    1         .word LINK 
                           00161E     2         LINK=.
      00161E 85                       3         .byte IMEDD+5  
      00161F 41 47 41 49 4E           4         .ascii "AGAIN"
      001624                          5         AGAIN:
      001624 CD 15 84         [ 4] 3666         CALL     COMPI
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      001627 04 B4                 3667         .word BRAN
      001629 CD 07 BC         [ 4] 3668         call ADRADJ 
      00162C CC 15 3F         [ 2] 3669         JP     COMMA
                                   3670 
                                   3671 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3672 ;       IF      ( -- A )
                                   3673 ;       Begin a conditional branch.
                                   3674 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00162F                       3675         _HEADER IFF,IMEDD+2,"IF"
      00162F 16 1E                    1         .word LINK 
                           001631     2         LINK=.
      001631 82                       3         .byte IMEDD+2  
      001632 49 46                    4         .ascii "IF"
      001634                          5         IFF:
      001634 CD 15 84         [ 4] 3676         CALL     COMPI
      001637 04 98                 3677         .word QBRAN
      001639 CD 0C FB         [ 4] 3678         CALL     HERE
      00163C CD 0C 1E         [ 4] 3679         CALL     ZERO
      00163F CC 15 3F         [ 2] 3680         JP     COMMA
                                   3681 
                                   3682 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3683 ;       THEN        ( A -- )
                                   3684 ;       Terminate a conditional 
                                   3685 ;       branch structure.
                                   3686 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001642                       3687         _HEADER THENN,IMEDD+4,"THEN"
      001642 16 31                    1         .word LINK 
                           001644     2         LINK=.
      001644 84                       3         .byte IMEDD+4  
      001645 54 48 45 4E              4         .ascii "THEN"
      001649                          5         THENN:
      001649 CD 0C FB         [ 4] 3688         CALL     HERE
      00164C CD 07 BC         [ 4] 3689         call ADRADJ 
      00164F CD 06 29         [ 4] 3690         CALL     SWAPP
      001652 CC 04 D1         [ 2] 3691         JP     STORE
                                   3692 
                                   3693 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3694 ;       ELSE        ( A -- A )
                                   3695 ;       Start the false clause in 
                                   3696 ;       an IF-ELSE-THEN structure.
                                   3697 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001655                       3698         _HEADER ELSEE,IMEDD+4,"ELSE"
      001655 16 44                    1         .word LINK 
                           001657     2         LINK=.
      001657 84                       3         .byte IMEDD+4  
      001658 45 4C 53 45              4         .ascii "ELSE"
      00165C                          5         ELSEE:
      00165C CD 15 84         [ 4] 3699         CALL     COMPI
      00165F 04 B4                 3700         .word BRAN
      001661 CD 0C FB         [ 4] 3701         CALL     HERE
      001664 CD 0C 1E         [ 4] 3702         CALL     ZERO
      001667 CD 15 3F         [ 4] 3703         CALL     COMMA
      00166A CD 06 29         [ 4] 3704         CALL     SWAPP
      00166D CD 0C FB         [ 4] 3705         CALL     HERE
      001670 CD 07 BC         [ 4] 3706         call ADRADJ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      001673 CD 06 29         [ 4] 3707         CALL     SWAPP
      001676 CC 04 D1         [ 2] 3708         JP     STORE
                                   3709 
                                   3710 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3711 ;       AHEAD       ( -- A )
                                   3712 ;       Compile a forward branch
                                   3713 ;       instruction.
                                   3714 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001679                       3715         _HEADER AHEAD,IMEDD+5,"AHEAD"
      001679 16 57                    1         .word LINK 
                           00167B     2         LINK=.
      00167B 85                       3         .byte IMEDD+5  
      00167C 41 48 45 41 44           4         .ascii "AHEAD"
      001681                          5         AHEAD:
      001681 CD 15 84         [ 4] 3716         CALL     COMPI
      001684 04 B4                 3717         .word BRAN
      001686 CD 0C FB         [ 4] 3718         CALL     HERE
      001689 CD 0C 1E         [ 4] 3719         CALL     ZERO
      00168C CC 15 3F         [ 2] 3720         JP     COMMA
                                   3721 
                                   3722 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3723 ;       WHILE       ( a -- A a )
                                   3724 ;       Conditional branch out of a 
                                   3725 ;       BEGIN-WHILE-REPEAT loop.
                                   3726 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00168F                       3727         _HEADER WHILE,IMEDD+5,"WHILE"
      00168F 16 7B                    1         .word LINK 
                           001691     2         LINK=.
      001691 85                       3         .byte IMEDD+5  
      001692 57 48 49 4C 45           4         .ascii "WHILE"
      001697                          5         WHILE:
      001697 CD 15 84         [ 4] 3728         CALL     COMPI
      00169A 04 98                 3729         .word QBRAN
      00169C CD 0C FB         [ 4] 3730         CALL     HERE
      00169F CD 0C 1E         [ 4] 3731         CALL     ZERO
      0016A2 CD 15 3F         [ 4] 3732         CALL     COMMA
      0016A5 CC 06 29         [ 2] 3733         JP     SWAPP
                                   3734 
                                   3735 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3736 ;       REPEAT      ( A a -- )
                                   3737 ;       Terminate a BEGIN-WHILE-REPEAT 
                                   3738 ;       indefinite loop.
                                   3739 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016A8                       3740         _HEADER REPEA,IMEDD+6,"REPEAT"
      0016A8 16 91                    1         .word LINK 
                           0016AA     2         LINK=.
      0016AA 86                       3         .byte IMEDD+6  
      0016AB 52 45 50 45 41 54        4         .ascii "REPEAT"
      0016B1                          5         REPEA:
      0016B1 CD 15 84         [ 4] 3741         CALL     COMPI
      0016B4 04 B4                 3742         .word BRAN
      0016B6 CD 07 BC         [ 4] 3743         call ADRADJ 
      0016B9 CD 15 3F         [ 4] 3744         CALL     COMMA
      0016BC CD 0C FB         [ 4] 3745         CALL     HERE
      0016BF CD 07 BC         [ 4] 3746         call ADRADJ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      0016C2 CD 06 29         [ 4] 3747         CALL     SWAPP
      0016C5 CC 04 D1         [ 2] 3748         JP     STORE
                                   3749 
                                   3750 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3751 ;       AFT         ( a -- a A )
                                   3752 ;       Jump to THEN in a FOR-AFT-THEN-NEXT 
                                   3753 ;       loop the first time through.
                                   3754 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016C8                       3755         _HEADER AFT,IMEDD+3,"AFT"
      0016C8 16 AA                    1         .word LINK 
                           0016CA     2         LINK=.
      0016CA 83                       3         .byte IMEDD+3  
      0016CB 41 46 54                 4         .ascii "AFT"
      0016CE                          5         AFT:
      0016CE CD 06 0F         [ 4] 3756         CALL     DROP
      0016D1 CD 16 81         [ 4] 3757         CALL     AHEAD
      0016D4 CD 0C FB         [ 4] 3758         CALL     HERE
      0016D7 CC 06 29         [ 2] 3759         JP     SWAPP
                                   3760 
                                   3761 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3762 ;       ABORT"      ( -- ; <string> )
                                   3763 ;       Conditional abort with an error message.
                                   3764 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016DA                       3765         _HEADER ABRTQ,IMEDD+6,'ABORT"'
      0016DA 16 CA                    1         .word LINK 
                           0016DC     2         LINK=.
      0016DC 86                       3         .byte IMEDD+6  
      0016DD 41 42 4F 52 54 22        4         .ascii 'ABORT"'
      0016E3                          5         ABRTQ:
      0016E3 CD 15 84         [ 4] 3766         CALL     COMPI
      0016E6 14 01                 3767         .word ABORQ
      0016E8 CC 15 AE         [ 2] 3768         JP     STRCQ
                                   3769 
                                   3770 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3771 ;       $"     ( -- ; <string> )
                                   3772 ;       Compile an inline string literal.
                                   3773 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016EB                       3774         _HEADER STRQ,IMEDD+2,'$"'
      0016EB 16 DC                    1         .word LINK 
                           0016ED     2         LINK=.
      0016ED 82                       3         .byte IMEDD+2  
      0016EE 24 22                    4         .ascii '$"'
      0016F0                          5         STRQ:
      0016F0 CD 15 84         [ 4] 3775         CALL     COMPI
      0016F3 0F BF                 3776         .word STRQP 
      0016F5 CC 15 AE         [ 2] 3777         JP     STRCQ
                                   3778 
                                   3779 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3780 ;       ."          ( -- ; <string> )
                                   3781 ;       Compile an inline string literal 
                                   3782 ;       to be typed out at run time.
                                   3783 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016F8                       3784         _HEADER DOTQ,IMEDD+2,'."'
      0016F8 16 ED                    1         .word LINK 
                           0016FA     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      0016FA 82                       3         .byte IMEDD+2  
      0016FB 2E 22                    4         .ascii '."'
      0016FD                          5         DOTQ:
      0016FD CD 15 84         [ 4] 3785         CALL     COMPI
      001700 0F C3                 3786         .word DOTQP 
      001702 CC 15 AE         [ 2] 3787         JP     STRCQ
                                   3788 
                                   3789 ;; Name compiler
                                   3790 
                                   3791 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3792 ;       ?UNIQUE ( a -- a )
                                   3793 ;       Display a warning message
                                   3794 ;       if word already exists.
                                   3795 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001705                       3796         _HEADER UNIQU,7,"?UNIQUE"
      001705 16 FA                    1         .word LINK 
                           001707     2         LINK=.
      001707 07                       3         .byte 7  
      001708 3F 55 4E 49 51 55 45     4         .ascii "?UNIQUE"
      00170F                          5         UNIQU:
      00170F CD 06 19         [ 4] 3797         CALL     DUPP
      001712 CD 12 F5         [ 4] 3798         CALL     NAMEQ   ;?name exists
      001715 CD 04 98         [ 4] 3799         CALL     QBRAN
      001718 17 2E                 3800         .word      UNIQ1
      00171A CD 0F C3         [ 4] 3801         CALL     DOTQP   ;redef are OK
      00171D 07                    3802         .byte       7
      00171E 20 72 65 44 65 66 20  3803         .ascii     " reDef "       
      001725 CD 06 41         [ 4] 3804         CALL     OVER
      001728 CD 0C E4         [ 4] 3805         CALL     COUNT
      00172B CD 0F 7E         [ 4] 3806         CALL     TYPES   ;just in case
      00172E CC 06 0F         [ 2] 3807 UNIQ1:  JP     DROP
                                   3808 
                                   3809 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3810 ;       $,n     ( na -- )
                                   3811 ;       Build a new dictionary name
                                   3812 ;       using string at na.
                                   3813 ; compile dans l'espace des variables 
                                   3814 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3815 ;        _HEADER SNAME,3,^/"$,n"/
      001731                       3816 SNAME: 
      001731 CD 06 19         [ 4] 3817         CALL     DUPP
      001734 CD 05 01         [ 4] 3818         CALL     CAT     ;?null input
      001737 CD 04 98         [ 4] 3819         CALL     QBRAN
      00173A 17 67                 3820         .word      PNAM1
      00173C CD 17 0F         [ 4] 3821         CALL     UNIQU   ;?redefinition
      00173F CD 06 19         [ 4] 3822         CALL     DUPP
      001742 CD 0C E4         [ 4] 3823         CALL     COUNT
      001745 CD 08 3C         [ 4] 3824         CALL     PLUS
      001748 CD 07 70         [ 4] 3825         CALL     VPP
      00174B CD 04 D1         [ 4] 3826         CALL     STORE
      00174E CD 06 19         [ 4] 3827         CALL     DUPP
      001751 CD 07 8E         [ 4] 3828         CALL     LAST
      001754 CD 04 D1         [ 4] 3829         CALL     STORE   ;save na for vocabulary link
      001757 CD 0B 96         [ 4] 3830         CALL     CELLM   ;link address
      00175A CD 07 62         [ 4] 3831         CALL     CNTXT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      00175D CD 04 E3         [ 4] 3832         CALL     AT
      001760 CD 06 29         [ 4] 3833         CALL     SWAPP
      001763 CD 04 D1         [ 4] 3834         CALL     STORE
      001766 81               [ 4] 3835         RET     ;save code pointer
      001767 CD 0F BF         [ 4] 3836 PNAM1:  CALL     STRQP
      00176A 05                    3837         .byte      5
      00176B 20 6E 61 6D 65        3838         .ascii     " name" ;null input
      001770 CC 14 09         [ 2] 3839         JP     ABOR1
                                   3840 
                                   3841 ;; FORTH compiler
                                   3842 
                                   3843 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3844 ;       $COMPILE        ( a -- )
                                   3845 ;       Compile next word to
                                   3846 ;       dictionary as a token or literal.
                                   3847 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001773                       3848         _HEADER SCOMP,8,"$COMPILE"
      001773 17 07                    1         .word LINK 
                           001775     2         LINK=.
      001775 08                       3         .byte 8  
      001776 24 43 4F 4D 50 49 4C     4         .ascii "$COMPILE"
             45
      00177E                          5         SCOMP:
      00177E CD 12 F5         [ 4] 3849         CALL     NAMEQ
      001781 CD 07 CC         [ 4] 3850         CALL     QDUP    ;?defined
      001784 CD 04 98         [ 4] 3851         CALL     QBRAN
      001787 17 9F                 3852         .word      SCOM2
      001789 CD 04 E3         [ 4] 3853         CALL     AT
      00178C CD 04 6F         [ 4] 3854         CALL     DOLIT
      00178F 80 00                 3855         .word     0x8000	;  IMEDD*256
      001791 CD 06 76         [ 4] 3856         CALL     ANDD    ;?immediate
      001794 CD 04 98         [ 4] 3857         CALL     QBRAN
      001797 17 9C                 3858         .word      SCOM1
      001799 CC 04 C4         [ 2] 3859         JP     EXECU
      00179C CC 18 49         [ 2] 3860 SCOM1:  JP     JSRC
      00179F CD 25 9D         [ 4] 3861 SCOM2:  CALL     NUMBQ   ;try to convert to number
      0017A2 CD 07 CC         [ 4] 3862         CALL    QDUP  
      0017A5 CD 04 98         [ 4] 3863         CALL     QBRAN
      0017A8 14 09                 3864         .word      ABOR1
      0017AA                       3865         _DOLIT  -1
      0017AA CD 04 6F         [ 4]    1     CALL DOLIT 
      0017AD FF FF                    2     .word -1 
      0017AF CD 08 FA         [ 4] 3866         CALL    EQUAL
      0017B2                       3867         _QBRAN DLITER  
      0017B2 CD 04 98         [ 4]    1     CALL QBRAN
      0017B5 29 70                    2     .word DLITER
      0017B7 CC 15 A6         [ 2] 3868         JP     LITER
                                   3869 
                                   3870 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3871 ;       OVERT   ( -- )
                                   3872 ;       Link a new word into vocabulary.
                                   3873 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017BA                       3874         _HEADER OVERT,5,"OVERT"
      0017BA 17 75                    1         .word LINK 
                           0017BC     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      0017BC 05                       3         .byte 5  
      0017BD 4F 56 45 52 54           4         .ascii "OVERT"
      0017C2                          5         OVERT:
      0017C2 CD 07 8E         [ 4] 3875         CALL     LAST
      0017C5 CD 04 E3         [ 4] 3876         CALL     AT
      0017C8 CD 07 62         [ 4] 3877         CALL     CNTXT
      0017CB CC 04 D1         [ 2] 3878         JP     STORE
                                   3879 
                                   3880 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3881 ;       ;       ( -- )
                                   3882 ;       Terminate a colon definition.
                                   3883 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017CE                       3884         _HEADER SEMIS,IMEDD+COMPO+1,^/";"/
      0017CE 17 BC                    1         .word LINK 
                           0017D0     2         LINK=.
      0017D0 C1                       3         .byte IMEDD+COMPO+1  
      0017D1 3B                       4         .ascii ";"
      0017D2                          5         SEMIS:
                           000001  3885 .if OPTIMIZE ; more compact and faster
      0017D2 CD 04 6F         [ 4] 3886         call DOLIT 
      0017D5 00 81                 3887         .word 0x81   ; opcode for RET 
      0017D7 CD 15 56         [ 4] 3888         call CCOMMA 
                           000000  3889 .else
                                   3890         CALL     COMPI
                                   3891         .word EXIT 
                                   3892 .endif 
      0017DA CD 14 6A         [ 4] 3893         CALL     LBRAC
      0017DD CD 17 C2         [ 4] 3894         call OVERT 
      0017E0 CD 22 41         [ 4] 3895         CALL FMOVE
      0017E3 CD 07 CC         [ 4] 3896         call QDUP 
      0017E6 CD 04 98         [ 4] 3897         call QBRAN 
      0017E9 19 19                 3898         .word SET_RAMLAST 
      0017EB CD 22 D5         [ 4] 3899         CALL UPDATPTR
      0017EE 81               [ 4] 3900         RET 
                                   3901 
                                   3902 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3903 ;       Terminate an ISR definition 
                                   3904 ;       retourn ca of ISR as double
                                   3905 ;       I; ( -- ud )
                                   3906 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017EF                       3907        _HEADER ISEMI,2+IMEDD+COMPO,^/"I;"/
      0017EF 17 D0                    1         .word LINK 
                           0017F1     2         LINK=.
      0017F1 C2                       3         .byte 2+IMEDD+COMPO  
      0017F2 49 3B                    4         .ascii "I;"
      0017F4                          5         ISEMI:
      0017F4 1D 00 02         [ 2] 3908         subw x,#CELLL  
      0017F7 90 AE 00 80      [ 2] 3909         ldw y,#IRET_CODE 
      0017FB FF               [ 2] 3910         ldw (x),y 
      0017FC CD 15 56         [ 4] 3911         call CCOMMA
      0017FF CD 14 6A         [ 4] 3912         call LBRAC 
      001802 CD 23 1A         [ 4] 3913         call IFMOVE
      001805 CD 07 CC         [ 4] 3914         call QDUP 
      001808 CD 04 98         [ 4] 3915         CALL QBRAN 
      00180B 19 19                 3916         .word SET_RAMLAST
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      00180D CD 07 7E         [ 4] 3917         CALL CPP
      001810 CD 04 E3         [ 4] 3918         call AT 
      001813 CD 06 29         [ 4] 3919         call SWAPP 
      001816 CD 07 7E         [ 4] 3920         CALL CPP 
      001819 CD 04 D1         [ 4] 3921         call STORE 
      00181C CD 1C D2         [ 4] 3922         call UPDATCP 
      00181F CD 1C 8F         [ 4] 3923         call EEPVP 
      001822                       3924         _DROP 
      001822 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      001825 CD 04 E3         [ 4] 3925         call AT 
      001828 CD 07 70         [ 4] 3926         call VPP 
      00182B CD 04 D1         [ 4] 3927         call STORE 
      00182E CC 0C 1E         [ 2] 3928         jp ZERO
      001831 81               [ 4] 3929         ret           
                                   3930         
                                   3931 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3932 ;       ]       ( -- )
                                   3933 ;       Start compiling words in
                                   3934 ;       input stream.
                                   3935 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001832                       3936         _HEADER RBRAC,1,"]"
      001832 17 F1                    1         .word LINK 
                           001834     2         LINK=.
      001834 01                       3         .byte 1  
      001835 5D                       4         .ascii "]"
      001836                          5         RBRAC:
      001836 CD 04 6F         [ 4] 3937         CALL   DOLIT
      001839 17 7E                 3938         .word  SCOMP
      00183B CD 07 40         [ 4] 3939         CALL   TEVAL
      00183E CC 04 D1         [ 2] 3940         JP     STORE
                                   3941 
                                   3942 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3943 ;       CALL,    ( ca -- )
                                   3944 ;       Compile a subroutine call.
                                   3945 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001841                       3946         _HEADER JSRC,5,^/"CALL,"/
      001841 18 34                    1         .word LINK 
                           001843     2         LINK=.
      001843 05                       3         .byte 5  
      001844 43 41 4C 4C 2C           4         .ascii "CALL,"
      001849                          5         JSRC:
      001849 CD 04 6F         [ 4] 3947         CALL     DOLIT
      00184C 00 CD                 3948         .word     CALLL     ;CALL
      00184E CD 15 56         [ 4] 3949         CALL     CCOMMA
      001851 CC 15 3F         [ 2] 3950         JP     COMMA
                                   3951 
                                   3952 ;       INIT-OFS ( -- )
                                   3953 ;       compute offset to adjust jump address 
                                   3954 ;       set variable OFFSET 
      001854 18 43                 3955         .word LINK 
                           001856  3956         LINK=.
      001856 08                    3957         .byte 8 
      001857 49 4E 49 54 2D 4F 46  3958         .ascii "INIT-OFS" 
             53
      00185F                       3959 INITOFS:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      00185F CD 07 2F         [ 4] 3960         call TFLASH 
      001862 CD 04 E3         [ 4] 3961         CALL AT 
      001865 CD 06 19         [ 4] 3962         CALL DUPP 
      001868 CD 04 98         [ 4] 3963         call QBRAN
      00186B 18 7C                 3964         .word 1$
      00186D                       3965         _DROP  
      00186D 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      001870 CD 07 7E         [ 4] 3966         call CPP 
      001873 CD 04 E3         [ 4] 3967         call AT 
      001876 CD 0C FB         [ 4] 3968         call HERE
      001879 CD 08 D2         [ 4] 3969         call SUBB 
      00187C CD 07 B3         [ 4] 3970 1$:     call OFFSET 
      00187F CC 04 D1         [ 2] 3971         jp STORE  
                                   3972 
                                   3973 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3974 ;       :       ( -- ; <string> )
                                   3975 ;       Start a new colon definition
                                   3976 ;       using next word as its name.
                                   3977 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001882                       3978         _HEADER COLON,1,":"
      001882 18 56                    1         .word LINK 
                           001884     2         LINK=.
      001884 01                       3         .byte 1  
      001885 3A                       4         .ascii ":"
      001886                          5         COLON:
      001886 CD 18 5F         [ 4] 3979         call INITOFS       
      001889 CD 11 F8         [ 4] 3980         CALL   TOKEN
      00188C CD 17 31         [ 4] 3981         CALL   SNAME
      00188F CC 18 36         [ 2] 3982         JP     RBRAC
                                   3983 
                                   3984 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3985 ;       I:  ( -- )
                                   3986 ;       Start interrupt service 
                                   3987 ;       routine definition
                                   3988 ;       those definition have 
                                   3989 ;       no name.
                                   3990 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001892                       3991         _HEADER ICOLON,2,"I:"
      001892 18 84                    1         .word LINK 
                           001894     2         LINK=.
      001894 02                       3         .byte 2  
      001895 49 3A                    4         .ascii "I:"
      001897                          5         ICOLON:
      001897 CD 18 5F         [ 4] 3992         call INITOFS 
      00189A CC 18 36         [ 2] 3993         jp RBRAC  
                                   3994 
                                   3995 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3996 ;       IMMEDIATE       ( -- )
                                   3997 ;       Make last compiled word
                                   3998 ;       an immediate word.
                                   3999 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00189D                       4000         _HEADER IMMED,9,"IMMEDIATE"
      00189D 18 94                    1         .word LINK 
                           00189F     2         LINK=.
      00189F 09                       3         .byte 9  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      0018A0 49 4D 4D 45 44 49 41     4         .ascii "IMMEDIATE"
             54 45
      0018A9                          5         IMMED:
      0018A9 CD 04 6F         [ 4] 4001         CALL     DOLIT
      0018AC 80 00                 4002         .word     0x8000	;  IMEDD*256
      0018AE CD 07 8E         [ 4] 4003         CALL     LAST
      0018B1 CD 04 E3         [ 4] 4004         CALL     AT
      0018B4 CD 04 E3         [ 4] 4005         CALL     AT
      0018B7 CD 06 8A         [ 4] 4006         CALL     ORR
      0018BA CD 07 8E         [ 4] 4007         CALL     LAST
      0018BD CD 04 E3         [ 4] 4008         CALL     AT
      0018C0 CC 04 D1         [ 2] 4009         JP     STORE
                                   4010 
                                   4011 ;; Defining words
                                   4012 
                                   4013 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4014 ;       CREATE  ( -- ; <string> )
                                   4015 ;       Compile a new array
                                   4016 ;       without allocating space.
                                   4017 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0018C3                       4018         _HEADER CREAT,6,"CREATE"
      0018C3 18 9F                    1         .word LINK 
                           0018C5     2         LINK=.
      0018C5 06                       3         .byte 6  
      0018C6 43 52 45 41 54 45        4         .ascii "CREATE"
      0018CC                          5         CREAT:
      0018CC CD 11 F8         [ 4] 4019         CALL     TOKEN
      0018CF CD 17 31         [ 4] 4020         CALL     SNAME
      0018D2 CD 17 C2         [ 4] 4021         CALL     OVERT        
      0018D5 CD 15 84         [ 4] 4022         CALL     COMPI 
      0018D8 06 CF                 4023         .word DOVAR 
      0018DA 81               [ 4] 4024         RET
                                   4025 
                                   4026 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4027 ;       VARIABLE  ( -- ; <string> )
                                   4028 ;       Compile a new variable
                                   4029 ;       initialized to 0.
                                   4030 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0018DB                       4031         _HEADER VARIA,8,"VARIABLE"
      0018DB 18 C5                    1         .word LINK 
                           0018DD     2         LINK=.
      0018DD 08                       3         .byte 8  
      0018DE 56 41 52 49 41 42 4C     4         .ascii "VARIABLE"
             45
      0018E6                          5         VARIA:
                                   4032 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      0018E6 CD 0C FB         [ 4] 4033         CALL HERE
      0018E9 CD 06 19         [ 4] 4034         CALL DUPP 
      0018EC CD 0B 87         [ 4] 4035         CALL CELLP
      0018EF CD 07 70         [ 4] 4036         CALL VPP 
      0018F2 CD 04 D1         [ 4] 4037         CALL STORE
      0018F5 CD 18 CC         [ 4] 4038         CALL CREAT
      0018F8 CD 06 19         [ 4] 4039         CALL DUPP
      0018FB CD 15 3F         [ 4] 4040         CALL COMMA
      0018FE CD 0C 1E         [ 4] 4041         CALL ZERO
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001901 CD 06 29         [ 4] 4042         call SWAPP 
      001904 CD 04 D1         [ 4] 4043         CALL STORE
      001907 CD 22 41         [ 4] 4044         CALL FMOVE ; move definition to FLASH
      00190A CD 07 CC         [ 4] 4045         CALL QDUP 
      00190D CD 04 98         [ 4] 4046         CALL QBRAN 
      001910 19 19                 4047         .word SET_RAMLAST   
      001912 CD 1C E9         [ 4] 4048         call UPDATVP  ; don't update if variable kept in RAM.
      001915 CD 22 D5         [ 4] 4049         CALL UPDATPTR
      001918 81               [ 4] 4050         RET         
      001919                       4051 SET_RAMLAST: 
      001919 CD 07 8E         [ 4] 4052         CALL LAST 
      00191C CD 04 E3         [ 4] 4053         CALL AT 
      00191F CD 07 A1         [ 4] 4054         CALL RAMLAST 
      001922 CC 04 D1         [ 2] 4055         jp STORE  
                                   4056 
                                   4057 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4058 ;       CONSTANT  ( n -- ; <string> )
                                   4059 ;       Compile a new constant 
                                   4060 ;       n CONSTANT name 
                                   4061 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001925                       4062         _HEADER CONSTANT,8,"CONSTANT"
      001925 18 DD                    1         .word LINK 
                           001927     2         LINK=.
      001927 08                       3         .byte 8  
      001928 43 4F 4E 53 54 41 4E     4         .ascii "CONSTANT"
             54
      001930                          5         CONSTANT:
      001930 CD 11 F8         [ 4] 4063         CALL TOKEN
      001933 CD 17 31         [ 4] 4064         CALL SNAME 
      001936 CD 17 C2         [ 4] 4065         CALL OVERT 
      001939 CD 15 84         [ 4] 4066         CALL COMPI 
      00193C 19 50                 4067         .word DOCONST
      00193E CD 15 3F         [ 4] 4068         CALL COMMA 
      001941 CD 22 41         [ 4] 4069         CALL FMOVE
      001944 CD 07 CC         [ 4] 4070         CALL QDUP 
      001947 CD 04 98         [ 4] 4071         CALL QBRAN 
      00194A 19 19                 4072         .word SET_RAMLAST  
      00194C CD 22 D5         [ 4] 4073         CALL UPDATPTR  
      00194F 81               [ 4] 4074 1$:     RET          
                                   4075 
                                   4076 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4077 ; CONSTANT runtime semantic 
                                   4078 ; doCONST  ( -- n )
                                   4079 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4080 ;       _HEADER DOCONST,7,"DOCONST"
      001950                       4081 DOCONST:
      001950 1D 00 02         [ 2] 4082         subw x,#CELLL
      001953 90 85            [ 2] 4083         popw y 
      001955 90 FE            [ 2] 4084         ldw y,(y) 
      001957 FF               [ 2] 4085         ldw (x),y 
      001958 81               [ 4] 4086         ret 
                                   4087 
                                   4088 ;----------------------------------
                                   4089 ; create double constant 
                                   4090 ; 2CONSTANT ( d -- ; <string> )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                                   4091 ;----------------------------------
      001959                       4092         _HEADER DCONST,9,"2CONSTANT"
      001959 19 27                    1         .word LINK 
                           00195B     2         LINK=.
      00195B 09                       3         .byte 9  
      00195C 32 43 4F 4E 53 54 41     4         .ascii "2CONSTANT"
             4E 54
      001965                          5         DCONST:
      001965 CD 11 F8         [ 4] 4093         CALL TOKEN
      001968 CD 17 31         [ 4] 4094         CALL SNAME 
      00196B CD 17 C2         [ 4] 4095         CALL OVERT 
      00196E CD 15 84         [ 4] 4096         CALL COMPI 
      001971 19 88                 4097         .word DO_DCONST
      001973 CD 15 3F         [ 4] 4098         CALL COMMA
      001976 CD 15 3F         [ 4] 4099         CALL COMMA  
      001979 CD 22 41         [ 4] 4100         CALL FMOVE
      00197C CD 07 CC         [ 4] 4101         CALL QDUP 
      00197F CD 04 98         [ 4] 4102         CALL QBRAN 
      001982 19 19                 4103         .word SET_RAMLAST  
      001984 CD 22 D5         [ 4] 4104         CALL UPDATPTR  
      001987 81               [ 4] 4105 1$:     RET          
                                   4106     
                                   4107 ;----------------------------------
                                   4108 ; runtime for DCONST 
                                   4109 ; stack double constant 
                                   4110 ; DO-DCONST ( -- d )
                                   4111 ;-----------------------------------
                                   4112 ;       _HEADER DO_DCONST,9,"DO-DCONST"
      001988                       4113 DO_DCONST:
      001988 90 85            [ 2] 4114     popw y 
      00198A 90 BF 26         [ 2] 4115     ldw YTEMP,y 
      00198D 1D 00 04         [ 2] 4116     subw x,#2*CELLL 
      001990 90 FE            [ 2] 4117     ldw y,(y)
      001992 FF               [ 2] 4118     ldw (x),y 
      001993 90 BE 26         [ 2] 4119     ldw y,YTEMP 
      001996 90 EE 02         [ 2] 4120     ldw y,(2,y)
      001999 EF 02            [ 2] 4121     ldw (2,x),y 
      00199B 81               [ 4] 4122     ret 
                                   4123 
                                   4124 ;; Tools
                                   4125 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4126 ;       _TYPE   ( b u -- )
                                   4127 ;       Display a string. Filter
                                   4128 ;       non-printing characters.
                                   4129 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00199C                       4130         _HEADER UTYPE,5,"_TYPE"
      00199C 19 5B                    1         .word LINK 
                           00199E     2         LINK=.
      00199E 05                       3         .byte 5  
      00199F 5F 54 59 50 45           4         .ascii "_TYPE"
      0019A4                          5         UTYPE:
      0019A4 CD 05 E2         [ 4] 4131         CALL     TOR     ;start count down loop
      0019A7 20 0F            [ 2] 4132         JRA     UTYP2   ;skip first pass
      0019A9 CD 06 19         [ 4] 4133 UTYP1:  CALL     DUPP
      0019AC CD 05 01         [ 4] 4134         CALL     CAT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      0019AF CD 0C 48         [ 4] 4135         CALL     TCHAR
      0019B2 CD 04 36         [ 4] 4136         CALL     EMIT    ;display only printable
      0019B5 CD 0B B2         [ 4] 4137         CALL     ONEP    ;increment address
      0019B8 CD 04 83         [ 4] 4138 UTYP2:  CALL     DONXT
      0019BB 19 A9                 4139         .word      UTYP1   ;loop till done
      0019BD CC 06 0F         [ 2] 4140         JP     DROP
                                   4141 
                                   4142 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4143 ;       dm+     ( a u -- a )
                                   4144 ;       Dump u bytes from ,
                                   4145 ;       leaving a+u on  stack.
                                   4146 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0019C0                       4147         _HEADER DUMPP,3,"DM+"
      0019C0 19 9E                    1         .word LINK 
                           0019C2     2         LINK=.
      0019C2 03                       3         .byte 3  
      0019C3 44 4D 2B                 4         .ascii "DM+"
      0019C6                          5         DUMPP:
      0019C6 CD 06 41         [ 4] 4148         CALL     OVER
      0019C9 CD 04 6F         [ 4] 4149         CALL     DOLIT
      0019CC 00 04                 4150         .word      4
      0019CE CD 0F EC         [ 4] 4151         CALL     UDOTR   ;display address
      0019D1 CD 0F 54         [ 4] 4152         CALL     SPACE
      0019D4 CD 05 E2         [ 4] 4153         CALL     TOR     ;start count down loop
      0019D7 20 11            [ 2] 4154         JRA     PDUM2   ;skip first pass
      0019D9 CD 06 19         [ 4] 4155 PDUM1:  CALL     DUPP
      0019DC CD 05 01         [ 4] 4156         CALL     CAT
      0019DF CD 04 6F         [ 4] 4157         CALL     DOLIT
      0019E2 00 03                 4158         .word      3
      0019E4 CD 0F EC         [ 4] 4159         CALL     UDOTR   ;display numeric data
      0019E7 CD 0B B2         [ 4] 4160         CALL     ONEP    ;increment address
      0019EA CD 04 83         [ 4] 4161 PDUM2:  CALL     DONXT
      0019ED 19 D9                 4162         .word      PDUM1   ;loop till done
      0019EF 81               [ 4] 4163         RET
                                   4164 
                                   4165 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4166 ;       DUMP    ( a u -- )
                                   4167 ;       Dump u bytes from a,
                                   4168 ;       in a formatted manner.
                                   4169 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0019F0                       4170         _HEADER DUMP,4,"DUMP"
      0019F0 19 C2                    1         .word LINK 
                           0019F2     2         LINK=.
      0019F2 04                       3         .byte 4  
      0019F3 44 55 4D 50              4         .ascii "DUMP"
      0019F7                          5         DUMP:
      0019F7 CD 06 DF         [ 4] 4171         CALL     BASE
      0019FA CD 04 E3         [ 4] 4172         CALL     AT
      0019FD CD 05 E2         [ 4] 4173         CALL     TOR
      001A00 CD 0E B3         [ 4] 4174         CALL     HEX     ;save radix, set hex
      001A03 CD 04 6F         [ 4] 4175         CALL     DOLIT
      001A06 00 10                 4176         .word      16
      001A08 CD 0A D8         [ 4] 4177         CALL     SLASH   ;change count to lines
      001A0B CD 05 E2         [ 4] 4178         CALL     TOR     ;start count down loop
      001A0E CD 0F 96         [ 4] 4179 DUMP1:  CALL     CR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001A11 CD 04 6F         [ 4] 4180         CALL     DOLIT
      001A14 00 10                 4181         .word      16
      001A16 CD 08 27         [ 4] 4182         CALL     DDUP
      001A19 CD 19 C6         [ 4] 4183         CALL     DUMPP   ;display numeric
      001A1C CD 07 DD         [ 4] 4184         CALL     ROT
      001A1F CD 07 DD         [ 4] 4185         CALL     ROT
      001A22 CD 0F 54         [ 4] 4186         CALL     SPACE
      001A25 CD 0F 54         [ 4] 4187         CALL     SPACE
      001A28 CD 19 A4         [ 4] 4188         CALL     UTYPE   ;display printable characters
      001A2B CD 04 83         [ 4] 4189         CALL     DONXT
      001A2E 1A 0E                 4190         .word      DUMP1   ;loop till done
      001A30 CD 06 0F         [ 4] 4191 DUMP3:  CALL     DROP
      001A33 CD 05 34         [ 4] 4192         CALL     RFROM
      001A36 CD 06 DF         [ 4] 4193         CALL     BASE
      001A39 CC 04 D1         [ 2] 4194         JP     STORE   ;restore radix
                                   4195 
                                   4196 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4197 ;       .S      ( ... -- ... )
                                   4198 ;        Display  contents of stack.
                                   4199 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A3C                       4200         _HEADER DOTS,2,".S"
      001A3C 19 F2                    1         .word LINK 
                           001A3E     2         LINK=.
      001A3E 02                       3         .byte 2  
      001A3F 2E 53                    4         .ascii ".S"
      001A41                          5         DOTS:
      001A41 CD 0F 96         [ 4] 4201         CALL     CR
      001A44 CD 0C 60         [ 4] 4202         CALL     DEPTH   ;stack depth
      001A47 CD 05 E2         [ 4] 4203         CALL     TOR     ;start count down loop
      001A4A 20 09            [ 2] 4204         JRA     DOTS2   ;skip first pass
      001A4C CD 05 45         [ 4] 4205 DOTS1:  CALL     RAT
      001A4F CD 0C 77         [ 4] 4206 	CALL     PICK
      001A52 CD 10 3D         [ 4] 4207         CALL     DOT     ;index stack, display contents
      001A55 CD 04 83         [ 4] 4208 DOTS2:  CALL     DONXT
      001A58 1A 4C                 4209         .word      DOTS1   ;loop till done
      001A5A CD 0F C3         [ 4] 4210         CALL     DOTQP
      001A5D 05                    4211         .byte      5
      001A5E 20 3C 73 70 20        4212         .ascii     " <sp "
      001A63 81               [ 4] 4213         RET
                                   4214 
                                   4215 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4216 ;       >NAME   ( ca -- na | F )
                                   4217 ;       Convert code address
                                   4218 ;       to a name address.
                                   4219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A64                       4220         _HEADER TNAME,5,">NAME"
      001A64 1A 3E                    1         .word LINK 
                           001A66     2         LINK=.
      001A66 05                       3         .byte 5  
      001A67 3E 4E 41 4D 45           4         .ascii ">NAME"
      001A6C                          5         TNAME:
      001A6C CD 07 62         [ 4] 4221         CALL     CNTXT   ;vocabulary link
      001A6F CD 04 E3         [ 4] 4222 TNAM2:  CALL     AT
      001A72 CD 06 19         [ 4] 4223         CALL     DUPP    ;?last word in a vocabulary
      001A75 CD 04 98         [ 4] 4224         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001A78 1A 93                 4225         .word      TNAM4
      001A7A CD 08 27         [ 4] 4226         CALL     DDUP
      001A7D CD 12 06         [ 4] 4227         CALL     NAMET
      001A80 CD 06 9F         [ 4] 4228         CALL     XORR    ;compare
      001A83 CD 04 98         [ 4] 4229         CALL     QBRAN
      001A86 1A 8D                 4230         .word      TNAM3
      001A88 CD 0B 96         [ 4] 4231         CALL     CELLM   ;continue with next word
      001A8B 20 E2            [ 2] 4232         JRA     TNAM2
      001A8D CD 06 29         [ 4] 4233 TNAM3:  CALL     SWAPP
      001A90 CC 06 0F         [ 2] 4234         JP     DROP
      001A93 CD 08 1C         [ 4] 4235 TNAM4:  CALL     DDROP
      001A96 CC 0C 1E         [ 2] 4236         JP     ZERO
                                   4237 
                                   4238 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4239 ;       .ID     ( na -- )
                                   4240 ;        Display  name at address.
                                   4241 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A99                       4242         _HEADER DOTID,3,".ID"
      001A99 1A 66                    1         .word LINK 
                           001A9B     2         LINK=.
      001A9B 03                       3         .byte 3  
      001A9C 2E 49 44                 4         .ascii ".ID"
      001A9F                          5         DOTID:
      001A9F CD 07 CC         [ 4] 4243         CALL     QDUP    ;if zero no name
      001AA2 CD 04 98         [ 4] 4244         CALL     QBRAN
      001AA5 1A B5                 4245         .word      DOTI1
      001AA7 CD 0C E4         [ 4] 4246         CALL     COUNT
      001AAA CD 04 6F         [ 4] 4247         CALL     DOLIT
      001AAD 00 1F                 4248         .word      0x1F
      001AAF CD 06 76         [ 4] 4249         CALL     ANDD    ;mask lexicon bits
      001AB2 CC 19 A4         [ 2] 4250         JP     UTYPE
      001AB5 CD 0F C3         [ 4] 4251 DOTI1:  CALL     DOTQP
      001AB8 09                    4252         .byte      9
      001AB9 20 6E 6F 4E 61 6D 65  4253         .ascii     " noName"
      001AC0 81               [ 4] 4254         RET
                                   4255 
                           000000  4256 WANT_SEE=0
                           000000  4257 .if WANT_SEE 
                                   4258 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4259 ;       SEE     ( -- ; <string> )
                                   4260 ;       A simple decompiler.
                                   4261 ;       Updated for byte machines.
                                   4262 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4263         _HEADER SEE,3,"SEE"
                                   4264         CALL     TICK    ;starting address
                                   4265         CALL     CR
                                   4266         CALL     ONEM
                                   4267 SEE1:   CALL     ONEP
                                   4268         CALL     DUPP
                                   4269         CALL     AT
                                   4270         CALL     DUPP
                                   4271         CALL     QBRAN
                                   4272         .word    SEE2
                                   4273         CALL     TNAME   ;?is it a name
                                   4274 SEE2:   CALL     QDUP    ;name address or zero
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                                   4275         CALL     QBRAN
                                   4276         .word    SEE3
                                   4277         CALL     SPACE
                                   4278         CALL     DOTID   ;display name
                                   4279         CALL     ONEP
                                   4280         JRA      SEE4
                                   4281 SEE3:   CALL     DUPP
                                   4282         CALL     CAT
                                   4283         CALL     UDOT    ;display number
                                   4284 SEE4:   CALL     NUFQ    ;user control
                                   4285         CALL     QBRAN
                                   4286         .word    SEE1
                                   4287         JP     DROP
                                   4288 .endif ; WANT_SEE 
                                   4289 
                                   4290 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4291 ;       WORDS   ( -- )
                                   4292 ;       Display names in vocabulary.
                                   4293 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001AC1                       4294         _HEADER WORDS,5,"WORDS"
      001AC1 1A 9B                    1         .word LINK 
                           001AC3     2         LINK=.
      001AC3 05                       3         .byte 5  
      001AC4 57 4F 52 44 53           4         .ascii "WORDS"
      001AC9                          5         WORDS:
      001AC9 CD 0F 96         [ 4] 4295         CALL     CR
      001ACC CD 07 62         [ 4] 4296         CALL     CNTXT   ;only in context
      001ACF CD 04 E3         [ 4] 4297 WORS1:  CALL     AT
      001AD2 CD 07 CC         [ 4] 4298         CALL     QDUP    ;?at end of list
      001AD5 CD 04 98         [ 4] 4299         CALL     QBRAN
      001AD8 1A EB                 4300         .word      WORS2
      001ADA CD 06 19         [ 4] 4301         CALL     DUPP
      001ADD CD 0F 54         [ 4] 4302         CALL     SPACE
      001AE0 CD 1A 9F         [ 4] 4303         CALL     DOTID   ;display a name
      001AE3 CD 0B 96         [ 4] 4304         CALL     CELLM
      001AE6 CD 04 B4         [ 4] 4305         CALL     BRAN
      001AE9 1A CF                 4306         .word      WORS1
      001AEB 81               [ 4] 4307 WORS2:  RET
                                   4308 
                                   4309         
                                   4310 ;; Hardware reset
                                   4311 
                                   4312 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4313 ;  COPYRIGTH
                                   4314 ; print copyright notice 
                                   4315 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001AEC                       4316 COPYRIGHT:
      001AEC CD 0F C3         [ 4] 4317     CALL DOTQP 
      001AEF 21                    4318     .byte 33 
      001AF0 4A 61 63 71 75 65 73  4319     .ascii "Jacques Deschenes, Copyright 2021"
             20 44 65 73 63 68 65
             6E 65 73 2C 20 43 6F
             70 79 72 69 67 68 74
             20 32 30 32 31
      001B11 CC 0F 96         [ 2] 4320     JP CR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



                                   4321 
                                   4322 
                                   4323 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4324 ;  PRT_LICENCE 
                                   4325 ;  print GPLV2 licence 
                                   4326 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B14                       4327 PRT_LICENCE:
      001B14 CD 0F C3         [ 4] 4328         CALL DOTQP 
      001B17 0F                    4329         .byte  15 
      001B18 4C 49 43 45 4E 43 45  4330         .ascii "LICENCE GPLV3\r\n"
             20 47 50 4C 56 33 0D
             0A
      001B27 81               [ 4] 4331         RET 
                                   4332 
                                   4333 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4334 ;    PRINT_VERSION ( c1 c2 -- )
                                   4335 ;    c2 minor 
                                   4336 ;    c1 major 
                                   4337 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B28                       4338 PRINT_VERSION:
      001B28 CD 0F C3         [ 4] 4339      CALL DOTQP 
      001B2B 09                    4340      .byte 9
      001B2C 20 76 65 72 73 69 6F  4341      .ascii " version "
             6E 20
      001B35 CD 0E 18         [ 4] 4342      CALL BDIGS 
      001B38 CD 0E 52         [ 4] 4343      CALL DIGS 
      001B3B CD 0E 52         [ 4] 4344      CALL DIGS 
      001B3E                       4345      _DOLIT '.' 
      001B3E CD 04 6F         [ 4]    1     CALL DOLIT 
      001B41 00 2E                    2     .word '.' 
      001B43 CD 0E 28         [ 4] 4346      CALL HOLD 
      001B46                       4347      _DROP 
      001B46 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      001B49 CD 0E 52         [ 4] 4348      CALL DIGS 
      001B4C CD 0E 7D         [ 4] 4349      CALL EDIGS 
      001B4F CD 0F 7E         [ 4] 4350      CALL TYPES 
      001B52 81               [ 4] 4351      RET 
                                   4352 
                                   4353 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4354 ;       hi      ( -- )
                                   4355 ;       Display sign-on message.
                                   4356 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B53                       4357         _HEADER HI,2,"HI"
      001B53 1A C3                    1         .word LINK 
                           001B55     2         LINK=.
      001B55 02                       3         .byte 2  
      001B56 48 49                    4         .ascii "HI"
      001B58                          5         HI:
      001B58 CD 0F 96         [ 4] 4358         CALL     CR
      001B5B CD 0F C3         [ 4] 4359         CALL     DOTQP   
      001B5E 0A                    4360         .byte      10
      001B5F 73 74 6D 38 65 46 6F  4361         .ascii     "stm8eForth"
             72 74 68
      001B69                       4362 	_DOLIT VER 
      001B69 CD 04 6F         [ 4]    1     CALL DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001B6C 00 04                    2     .word VER 
      001B6E                       4363         _DOLIT EXT 
      001B6E CD 04 6F         [ 4]    1     CALL DOLIT 
      001B71 00 00                    2     .word EXT 
      001B73 CD 1B 28         [ 4] 4364         CALL PRINT_VERSION 
      001B76 CD 0F C3         [ 4] 4365         CALL    DOTQP
                           000001  4366 .if NUCLEO          
      001B79 12                    4367         .byte 18
      001B7A 20 6F 6E 20 4E 55 43  4368         .ascii  " on NUCLEO-8S208RB"
             4C 45 4F 2D 38 53 32
             30 38 52 42
                                   4369 .endif
                           000000  4370 .if DISCOVERY
                                   4371         .byte 19
                                   4372         .ascii  " on STM8S-DISCOVERY"
                                   4373 .endif
                           000000  4374 .if DOORBELL
                                   4375         .byte 16
                                   4376         .ascii " on stm8s105k6b6"
                                   4377 .endif
      001B8C CC 0F 96         [ 2] 4378         JP     CR
                                   4379 
                           000000  4380 WANT_DEBUG=0
                           000000  4381 .if WANT_DEBUG 
                                   4382 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4383 ;       DEBUG      ( -- )
                                   4384 ;       Display sign-on message.
                                   4385 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4386         _HEADER DEBUG,5,"DEBUG"
                                   4387 	CALL DOLIT
                                   4388 	.word 0x65
                                   4389 	CALL EMIT
                                   4390 	CALL ZERO
                                   4391  	CALL ZLESS 
                                   4392 	CALL DOLIT
                                   4393 	.word 0xFFFE
                                   4394 	CALL ZLESS 
                                   4395 	CALL UPLUS 
                                   4396  	_DROP 
                                   4397 	CALL DOLIT
                                   4398 	.word 3
                                   4399 	CALL UPLUS 
                                   4400 	CALL UPLUS 
                                   4401  	_DROP
                                   4402 	CALL DOLIT
                                   4403 	.word 0x43
                                   4404 	CALL UPLUS 
                                   4405  	_DROP
                                   4406 	CALL EMIT
                                   4407 	CALL DOLIT
                                   4408 	.word 0x4F
                                   4409 	CALL DOLIT
                                   4410 	.word 0x6F
                                   4411  	CALL XORR
                                   4412 	CALL DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                   4413 	.word 0xF0
                                   4414  	CALL ANDD
                                   4415 	CALL DOLIT
                                   4416 	.word 0x4F
                                   4417  	CALL ORR
                                   4418 	CALL EMIT
                                   4419 	CALL DOLIT
                                   4420 	.word 8
                                   4421 	CALL DOLIT
                                   4422 	.word 6
                                   4423  	CALL SWAPP
                                   4424 	CALL OVER
                                   4425 	CALL XORR
                                   4426 	CALL DOLIT
                                   4427 	.word 3
                                   4428 	CALL ANDD 
                                   4429 	CALL ANDD
                                   4430 	CALL DOLIT
                                   4431 	.word 0x70
                                   4432 	CALL UPLUS 
                                   4433 	_DROP
                                   4434 	CALL EMIT
                                   4435 	CALL ZERO
                                   4436 	CALL QBRAN
                                   4437 	.word DEBUG1
                                   4438 	CALL DOLIT
                                   4439 	.word 0x3F
                                   4440 DEBUG1:
                                   4441 	CALL DOLIT
                                   4442 	.word 0xFFFF
                                   4443 	CALL QBRAN
                                   4444 	.word DEBUG2
                                   4445 	CALL DOLIT
                                   4446 	.word 0x74
                                   4447 	CALL BRAN
                                   4448 	.word DEBUG3
                                   4449 DEBUG2:
                                   4450 	CALL DOLIT
                                   4451 	.word 0x21
                                   4452 DEBUG3:
                                   4453 	CALL EMIT
                                   4454 	CALL DOLIT
                                   4455 	.word 0x68
                                   4456 	CALL DOLIT
                                   4457 	.word 0x80
                                   4458 	CALL STORE
                                   4459 	CALL DOLIT
                                   4460 	.word 0x80
                                   4461 	CALL AT
                                   4462 	CALL EMIT
                                   4463 	CALL DOLIT
                                   4464 	.word 0x4D
                                   4465 	CALL TOR
                                   4466 	CALL RAT
                                   4467 	CALL RFROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                                   4468 	CALL ANDD
                                   4469 	CALL EMIT
                                   4470 	CALL DOLIT
                                   4471 	.word 0x61
                                   4472 	CALL DOLIT
                                   4473 	.word 0xA
                                   4474 	CALL TOR
                                   4475 DEBUG4:
                                   4476 	CALL ONE
                                   4477 	CALL UPLUS 
                                   4478 	_DROP
                                   4479 	CALL DONXT
                                   4480 	.word DEBUG4
                                   4481 	CALL EMIT
                                   4482 	CALL DOLIT
                                   4483 	.word 0x656D
                                   4484 	CALL DOLIT
                                   4485 	.word 0x100
                                   4486 	CALL UMSTA
                                   4487 	CALL SWAPP
                                   4488 	CALL DOLIT
                                   4489 	.word 0x100
                                   4490 	CALL UMSTA
                                   4491 	CALL SWAPP 
                                   4492 	_DROP
                                   4493 	CALL EMIT
                                   4494 	CALL EMIT
                                   4495 	CALL DOLIT
                                   4496 	.word 0x2043
                                   4497 	CALL ZERO
                                   4498 	CALL DOLIT
                                   4499 	.word 0x100
                                   4500 	CALL UMMOD
                                   4501 	CALL EMIT
                                   4502 	CALL EMIT
                                   4503 	;JP ORIG
                                   4504 	RET
                                   4505 .endif ; WANT_DEBUG 
                                   4506 
                                   4507 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4508 ;       'BOOT   ( -- a )
                                   4509 ;       The application startup vector.
                                   4510 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B8F                       4511         _HEADER TBOOT,5,"'BOOT"
      001B8F 1B 55                    1         .word LINK 
                           001B91     2         LINK=.
      001B91 05                       3         .byte 5  
      001B92 27 42 4F 4F 54           4         .ascii "'BOOT"
      001B97                          5         TBOOT:
      001B97 CD 06 CF         [ 4] 4512         CALL     DOVAR
      001B9A 40 02                 4513         .word    APP_RUN      ;application to boot
                                   4514 
                                   4515 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4516 ;       COLD    ( -- )
                                   4517 ;       The hilevel cold start s=ence.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



                                   4518 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B9C                       4519         _HEADER COLD,4,"COLD"
      001B9C 1B 91                    1         .word LINK 
                           001B9E     2         LINK=.
      001B9E 04                       3         .byte 4  
      001B9F 43 4F 4C 44              4         .ascii "COLD"
      001BA3                          5         COLD:
                           000000  4520 .if WANT_DEBUG
                                   4521         CALL DEBUG
                                   4522 .endif ; WANT_DEBUG
      001BA3 CD 04 6F         [ 4] 4523 COLD1:  CALL     DOLIT
      001BA6 00 2B                 4524         .word      UZERO
      001BA8 CD 04 6F         [ 4] 4525 	CALL     DOLIT
      001BAB 00 06                 4526         .word      UPP
      001BAD CD 04 6F         [ 4] 4527         CALL     DOLIT
      001BB0 00 1C                 4528 	.word      UEND-UZERO
      001BB2 CD 0D 48         [ 4] 4529         CALL     CMOVE   ;initialize user area
                           000001  4530 .if WANT_FLOAT 
      001BB5 CD 2C 54         [ 4] 4531         CALL    FINIT 
                                   4532 .endif 
                                   4533 ; if APP_RUN==0 initialize with ca de 'hi'  
      001BB8 90 CE 40 02      [ 2] 4534         ldw y,APP_RUN 
      001BBC 26 0B            [ 1] 4535         jrne 0$
      001BBE 1D 00 02         [ 2] 4536         subw x,#CELLL 
      001BC1 90 AE 1B 58      [ 2] 4537         ldw y,#HI  
      001BC5 FF               [ 2] 4538         ldw (x),y
      001BC6 CD 1C C1         [ 4] 4539         call UPDATRUN 
      001BC9                       4540 0$:        
                                   4541 ; update LAST with APP_LAST 
                                   4542 ; if APP_LAST > LAST else do the opposite
      001BC9 90 CE 40 00      [ 2] 4543         ldw y,APP_LAST 
      001BCD 90 B3 1C         [ 2] 4544         cpw y,ULAST 
      001BD0 22 05            [ 1] 4545         jrugt 1$ 
                                   4546 ; save LAST at APP_LAST  
      001BD2 CD 1C A9         [ 4] 4547         call UPDATLAST 
      001BD5 20 06            [ 2] 4548         jra 2$
      001BD7                       4549 1$: ; update LAST with APP_LAST 
      001BD7 90 BF 1C         [ 2] 4550         ldw ULAST,y
      001BDA 90 BF 16         [ 2] 4551         ldw UCNTXT,y
      001BDD                       4552 2$:  
                                   4553 ; update APP_CP if < app_space 
      001BDD 90 CE 40 04      [ 2] 4554         ldw y,APP_CP  
      001BE1 90 B3 1A         [ 2] 4555         cpw y,UCP   
      001BE4 24 06            [ 1] 4556         jruge 3$ 
      001BE6 CD 1C D2         [ 4] 4557         call UPDATCP
      001BE9 90 BE 1A         [ 2] 4558         ldw y,UCP   
      001BEC                       4559 3$:
      001BEC 90 BF 1A         [ 2] 4560         ldw UCP,y                 
                                   4561 ; update UVP with APP_VP  
                                   4562 ; if APP_VP>UVP else do the opposite 
      001BEF 90 CE 40 06      [ 2] 4563         ldw y,APP_VP 
      001BF3 90 B3 18         [ 2] 4564         cpw y,UVP 
      001BF6 22 05            [ 1] 4565         jrugt 4$
      001BF8 CD 1C E9         [ 4] 4566         call UPDATVP 
      001BFB 20 03            [ 2] 4567         jra 6$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      001BFD                       4568 4$: ; update UVP with APP_VP 
      001BFD 90 BF 18         [ 2] 4569         ldw UVP,y 
      001C00                       4570 6$:      
      001C00 CD 14 E9         [ 4] 4571         CALL     PRESE   ;initialize data stack and TIB
      001C03 CD 1B 97         [ 4] 4572         CALL     TBOOT
      001C06 CD 0D 31         [ 4] 4573         CALL     ATEXE   ;application boot
      001C09 CD 17 C2         [ 4] 4574         CALL     OVERT
      001C0C CC 15 06         [ 2] 4575         JP     QUIT    ;start interpretation
                                   4576 
                                   4577 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



                                   4578         .include "flash.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;  routines to write to FLASH, EEPROM 
                                     23 ;  and OPTION 
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27 ;--------------------------------
                                     28 ; initialize FPTR 
                                     29 ; FP!  ( ud -- )
                                     30 ;---------------------------------
      001C0F 1B 9E                   31     .word LINK 
                           001C11    32     LINK=.
      001C11 03                      33     .byte 3 
      001C12 46 50 21                34     .ascii "FP!"
      001C15                         35 FPSTOR:
      001C15 90 93            [ 1]   36     ldw y,x
      001C17 90 FE            [ 2]   37     ldw y,(y)
      001C19 90 9F            [ 1]   38     ld a,yl 
      001C1B B7 34            [ 1]   39     ld FPTR,a 
      001C1D 1C 00 02         [ 2]   40     addw x,#CELLL 
      001C20 90 93            [ 1]   41     ldw y,x 
      001C22 90 FE            [ 2]   42     ldw y,(y)
      001C24 90 BF 35         [ 2]   43     ldw PTR16,y
      001C27 1C 00 02         [ 2]   44     addw x,#CELLL 
      001C2A 81               [ 4]   45     ret 
                                     46 
                                     47 ;-----------------------------------
                                     48 ; return EEPROM base address 
                                     49 ; as a double 
                                     50 ;  EEPROM  ( -- ud )
                                     51 ;-----------------------------------
      001C2B 1C 11                   52     .word LINK 
                           001C2D    53 LINK=.
      001C2D 06                      54     .byte 6 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      001C2E 45 45 50 52 4F 4D       55     .ascii "EEPROM"
      001C34                         56 EEPROM: 
      001C34 90 AE 40 00      [ 2]   57     ldw y,#EEPROM_BASE
      001C38 1D 00 04         [ 2]   58     subw x,#2*CELLL 
      001C3B EF 02            [ 2]   59     ldw (2,x),y 
      001C3D 90 5F            [ 1]   60     clrw y 
      001C3F FF               [ 2]   61     ldw (x),y 
      001C40 81               [ 4]   62     ret
                                     63 
                                     64 ;---------------------------------
                                     65 ; return APP_LAST pointer as double
                                     66 ; EEP-LAST ( -- ud )
                                     67 ;---------------------------------
      001C41 1C 2D                   68 	.word LINK 
                           001C43    69 	LINK=.
      001C43 08                      70 	.byte 8 
      001C44 45 45 50 2D 4C 41 53    71 	.ascii "EEP-LAST"
             54
      001C4C                         72 EEPLAST:
      001C4C 1D 00 04         [ 2]   73 	subw x,#2*CELLL 
      001C4F 90 AE 40 00      [ 2]   74 	ldw y,#APP_LAST 
      001C53 EF 02            [ 2]   75 	ldw (2,x),y 
      001C55 90 5F            [ 1]   76 	clrw y 
      001C57 FF               [ 2]   77 	ldw (x),y 
      001C58 81               [ 4]   78 	ret 
                                     79 
                                     80 ;----------------------------------
                                     81 ; return APP_RUN pointer as double	
                                     82 ; EEP-RUN ( -- ud )
                                     83 ;-----------------------------------
      001C59 1C 43                   84 	.word LINK 
                           001C5B    85 	LINK=.
      001C5B 07                      86 	.byte 7
      001C5C 45 45 50 2D 52 55 4E    87 	.ascii "EEP-RUN"
      001C63                         88 EEPRUN:
      001C63 1D 00 04         [ 2]   89 	subw x,#2*CELLL 
      001C66 90 AE 40 02      [ 2]   90 	ldw y,#APP_RUN 
      001C6A EF 02            [ 2]   91 	ldw (2,x),y 
      001C6C 90 5F            [ 1]   92 	clrw y 
      001C6E FF               [ 2]   93 	ldw (x),y 
      001C6F 81               [ 4]   94 	ret 
                                     95 
                                     96 ;------------------------------------
                                     97 ; return APP_CP pointer as double 
                                     98 ; EEP-CP ( -- ud )
                                     99 ;------------------------------------
      001C70 1C 5B                  100 	.word LINK
                           001C72   101 	LINK=.
      001C72 06                     102 	.byte 6 
      001C73 45 45 50 2D 43 50      103 	.ascii "EEP-CP"
      001C79                        104 EEPCP:
      001C79 1D 00 04         [ 2]  105 	subw x,#2*CELLL 
      001C7C 90 AE 40 04      [ 2]  106 	ldw y,#APP_CP  
      001C80 EF 02            [ 2]  107 	ldw (2,x),y 
      001C82 90 5F            [ 1]  108 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      001C84 FF               [ 2]  109 	ldw (x),y 
      001C85 81               [ 4]  110 	ret 
                                    111 
                                    112 ;------------------------------------
                                    113 ; return APP_VP pointer as double 
                                    114 ; EEP-VP ( -- ud )
                                    115 ;-------------------------------------
      001C86 1C 72                  116 	.word LINK
                           001C88   117 	LINK=.
      001C88 06                     118 	.byte 6
      001C89 45 45 50 2D 56 50      119 	.ascii "EEP-VP"
      001C8F                        120 EEPVP:
      001C8F 1D 00 04         [ 2]  121 	subw x,#2*CELLL 
      001C92 90 AE 40 06      [ 2]  122 	ldw y,#APP_VP  
      001C96 EF 02            [ 2]  123 	ldw (2,x),y 
      001C98 90 5F            [ 1]  124 	clrw y 
      001C9A FF               [ 2]  125 	ldw (x),y 
      001C9B 81               [ 4]  126 	ret 
                                    127 
                                    128 ;----------------------------------
                                    129 ; update APP_LAST with LAST 
                                    130 ; UPDAT-LAST ( -- )
                                    131 ;----------------------------------
      001C9C 1C 88                  132 	.word LINK 
                           001C9E   133 	LINK=.
      001C9E 0A                     134 	.byte 10
      001C9F 55 50 44 41 54 2D 4C   135 	.ascii "UPDAT-LAST"
             41 53 54
      001CA9                        136 UPDATLAST:
      001CA9 CD 07 8E         [ 4]  137 	call LAST
      001CAC CD 04 E3         [ 4]  138 	call AT  
      001CAF CD 1C 4C         [ 4]  139 	call EEPLAST
      001CB2 CC 1E 9F         [ 2]  140 	jp EESTORE 
                                    141 
                                    142 ;---------------------------------
                                    143 ; update APP_RUN 
                                    144 ; UPDAT-RUN ( a -- )
                                    145 ;---------------------------------
      001CB5 1C 9E                  146 	.word LINK
                           001CB7   147 	LINK=.
      001CB7 09                     148 	.byte 9
      001CB8 55 50 44 41 54 2D 52   149 	.ascii "UPDAT-RUN"
             55 4E
      001CC1                        150 UPDATRUN:
      001CC1 CD 1C 63         [ 4]  151 	call EEPRUN
      001CC4 CC 1E 9F         [ 2]  152 	jp EESTORE 
                                    153 	
                                    154 ;---------------------------------
                                    155 ; update APP_CP with CP 
                                    156 ; UPDAT-CP ( -- )
                                    157 ;---------------------------------
      001CC7 1C B7                  158 	.word LINK 
                           001CC9   159 	LINK=.
      001CC9 08                     160 	.byte 8 
      001CCA 55 50 44 41 54 2D 43   161 	.ascii "UPDAT-CP"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



             50
      001CD2                        162 UPDATCP:
      001CD2 CD 07 7E         [ 4]  163 	call CPP 
      001CD5 CD 04 E3         [ 4]  164 	call AT 
      001CD8 CD 1C 79         [ 4]  165 	call EEPCP 
      001CDB CC 1E 9F         [ 2]  166 	jp EESTORE 
                                    167 
                                    168 ;----------------------------------
                                    169 ; update APP_VP with VP 
                                    170 ; UPDAT-VP ( -- )
                                    171 ;----------------------------------
      001CDE 1C C9                  172 	.word LINK
                           001CE0   173 	LINK=.
      001CE0 08                     174 	.byte 8 
      001CE1 55 50 44 41 54 2D 56   175 	.ascii "UPDAT-VP" 
             50
      001CE9                        176 UPDATVP:
      001CE9 CD 07 70         [ 4]  177 	call VPP 
      001CEC CD 04 E3         [ 4]  178 	call AT
      001CEF CD 1C 8F         [ 4]  179 	call EEPVP 
      001CF2 CC 1E 9F         [ 2]  180 	jp EESTORE
                                    181 	
                           000001   182 .if NUCLEO
                                    183 ;----------------------------------
                                    184 ; fetch integer at address over 65535
                                    185 ;  F@   ( ud -- n )
                                    186 ;----------------------------------
      001CF5 1C E0                  187     .word LINK 
                           001CF7   188 LINK=.
      001CF7 02                     189     .byte 2
      001CF8 46 40                  190     .ascii "F@"
      001CFA                        191 FARAT:
      001CFA CD 1C 15         [ 4]  192     call FPSTOR
      001CFD CC 1D C2         [ 2]  193 	jp EE_READ 
                                    194 
                                    195 
                                    196 ;-------------------------------------
                                    197 ; fetch C at address over 65535 
                                    198 ; FC@ ( ud -- c)
                                    199 ;-------------------------------------
      001D00 1C F7                  200     .word LINK
                           001D02   201     LINK=.
      001D02 03                     202     .byte 3 
      001D03 46 43 40               203     .ascii "FC@" 
      001D06                        204 FARCAT:
      001D06 CD 1C 15         [ 4]  205     call FPSTOR
      001D09 CC 1D E4         [ 2]  206 	jp EE_CREAD  
                                    207 .endif ; NUCLEO 
                                    208 
                                    209 ;----------------------------------
                                    210 ; UNLOCK EEPROM/OPT for writing/erasing
                                    211 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    212 ;  UNLKEE   ( -- )
                                    213 ;----------------------------------
      001D0C 1D 02                  214     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



                           001D0E   215 LINK=.
      001D0E 06                     216     .byte 6 
      001D0F 55 4E 4C 4B 45 45      217     .ascii "UNLKEE"
      001D15                        218 UNLKEE:
      001D15 35 00 50 5B      [ 1]  219 	mov FLASH_CR2,#0 
      001D19 35 FF 50 5C      [ 1]  220 	mov FLASH_NCR2,#0xFF 
      001D1D 35 AE 50 64      [ 1]  221 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001D21 35 56 50 64      [ 1]  222     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001D25 72 07 50 5F FB   [ 2]  223 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001D2A 81               [ 4]  224 	ret
                                    225 
                                    226 ;----------------------------------
                                    227 ; UNLOCK FLASH for writing/erasing
                                    228 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    229 ; UNLKFL  ( -- )
                                    230 ;----------------------------------
      001D2B 1D 0E                  231     .word LINK 
                           001D2D   232 LINK=. 
      001D2D 06                     233     .byte 6 
      001D2E 55 4E 4C 4B 46 4C      234     .ascii "UNLKFL"    
      001D34                        235 UNLKFL:
      001D34 35 00 50 5B      [ 1]  236 	mov FLASH_CR2,#0 
      001D38 35 FF 50 5C      [ 1]  237 	mov FLASH_NCR2,#0xFF 
      001D3C 35 56 50 62      [ 1]  238 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001D40 35 AE 50 62      [ 1]  239 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001D44 72 03 50 5F FB   [ 2]  240 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001D49 81               [ 4]  241 	ret
                                    242 
                                    243 ;-----------------------------
                                    244 ; UNLOCK FLASH or EEPROM 
                                    245 ; according to FPTR address 
                                    246 ;  UNLOCK ( -- )
                                    247 ;-----------------------------
      001D4A 1D 2D                  248 	.word LINK 
                           001D4C   249 	LINK=.
      001D4C 06                     250 	.byte 6
      001D4D 55 4E 4C 4F 43 4B      251 	.ascii "UNLOCK"
      001D53                        252 UNLOCK:
                                    253 ; put addr[15:0] in Y, for bounds check.
      001D53 90 BE 35         [ 2]  254 	ldw y,PTR16   ; Y=addr15:0
                                    255 ; check addr[23:16], if <> 0 then it is extened flash memory
      001D56 3D 34            [ 1]  256 	tnz FPTR 
      001D58 26 16            [ 1]  257 	jrne 4$
      001D5A 90 A3 80 00      [ 2]  258     cpw y,#FLASH_BASE
      001D5E 24 10            [ 1]  259     jruge 4$
      001D60 90 A3 40 00      [ 2]  260 	cpw y,#EEPROM_BASE  
      001D64 25 0D            [ 1]  261     jrult 9$
      001D66 90 A3 48 7F      [ 2]  262 	cpw y,#OPTION_END 
      001D6A 22 07            [ 1]  263 	jrugt 9$
      001D6C CD 1D 15         [ 4]  264 	call UNLKEE
      001D6F 81               [ 4]  265 	ret 
      001D70 CD 1D 34         [ 4]  266 4$: call UNLKFL
      001D73 81               [ 4]  267 9$: ret 
                                    268 
                                    269 ;-------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



                                    270 ; LOCK write access to 
                                    271 ; FLASH and EEPROM 
                                    272 ; LOCK ( -- )
                                    273 ;-------------------------
      001D74 1D 4C                  274 	.word LINK 
                           001D76   275 	LINK=.
      001D76 04                     276 	.byte 4 
      001D77 4C 4F 43 4B            277 	.ascii "LOCK" 
      001D7B                        278 LOCK: 
      001D7B 72 13 50 5F      [ 1]  279 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001D7F 72 17 50 5F      [ 1]  280 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001D83 81               [ 4]  281 	ret 
                                    282 
                                    283 ;-------------------------
                                    284 ; increment FPTR 
                                    285 ; INC-FPTR ( -- )
                                    286 ;-------------------------
      001D84 1D 76                  287 	.word LINK 
                           001D86   288 	LINK=. 
      001D86 08                     289 	.byte 8 
      001D87 49 4E 43 2D 46 50 54   290 	.ascii "INC-FPTR" 
             52
      001D8F                        291 INC_FPTR:
      001D8F 3C 36            [ 1]  292 	inc PTR8 
      001D91 26 0C            [ 1]  293 	jrne 1$
      001D93 90 89            [ 2]  294 	pushw y 
      001D95 90 BE 34         [ 2]  295 	ldw y,FPTR 
      001D98 90 5C            [ 1]  296 	incw y 
      001D9A 90 BF 34         [ 2]  297 	ldw FPTR,y
      001D9D 90 85            [ 2]  298 	popw y  
      001D9F 81               [ 4]  299 1$: ret 
                                    300 
                                    301 ;------------------------------
                                    302 ; add u to FPTR 
                                    303 ; PTR+ ( u -- )
                                    304 ;------------------------------
      001DA0 1D 86                  305 	.word LINK 
                           001DA2   306 	LINK=.
      001DA2 04                     307 	.byte 4 
      001DA3 50 54 52 2B            308 	.ascii "PTR+"
      001DA7                        309 PTRPLUS:
      001DA7 90 93            [ 1]  310 	ldw y,x 
      001DA9 1C 00 02         [ 2]  311 	addw x,#CELLL 
      001DAC 72 B9 00 35      [ 2]  312 	addw y,PTR16 
      001DB0 90 BF 35         [ 2]  313 	ldw PTR16,y  
      001DB3 24 02            [ 1]  314 	jrnc 1$
      001DB5 3C 34            [ 1]  315 	inc FPTR 
      001DB7 81               [ 4]  316 1$: ret 
                                    317 
                                    318 ;---------------------------------
                                    319 ; read word at address pointed FPTR
                                    320 ; increment FPTR 
                                    321 ; EE-READ ( -- w )
                                    322 ;------------------------------------
      001DB8 1D A2                  323 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                           001DBA   324 	LINK=.
      001DBA 07                     325 	.byte 7 
      001DBB 45 45 2D 52 45 41 44   326 	.ascii "EE-READ"
      001DC2                        327 EE_READ:
      001DC2 1D 00 02         [ 2]  328 	subw x,#CELLL 
      001DC5 92 BC 00 34      [ 5]  329 	ldf a,[FPTR]
      001DC9 90 95            [ 1]  330 	ld yh,a 
      001DCB CD 1D 8F         [ 4]  331 	call INC_FPTR 
      001DCE 92 BC 00 34      [ 5]  332 	ldf a,[FPTR]
      001DD2 CD 1D 8F         [ 4]  333 	call INC_FPTR 
      001DD5 90 97            [ 1]  334 	ld yl,a 
      001DD7 FF               [ 2]  335 	ldw (x),y 
      001DD8 81               [ 4]  336 	ret 
                                    337 
                                    338 ;---------------------------------------
                                    339 ; Read byte at address pointed by FPTR 
                                    340 ; EE-CREAD ( -- c )
                                    341 ;---------------------------------------
      001DD9 1D BA                  342 	.word LINK 
                           001DDB   343 	LINK=.
      001DDB 08                     344 	.byte 8
      001DDC 45 45 2D 43 52 45 41   345 	.ascii "EE-CREAD" 
             44
      001DE4                        346 EE_CREAD:
      001DE4 1D 00 02         [ 2]  347 	subw x,#CELLL 
      001DE7 92 BC 00 34      [ 5]  348 	ldf a,[FPTR]	
      001DEB CD 1D 8F         [ 4]  349 	call INC_FPTR
      001DEE 90 5F            [ 1]  350 	clrw y 
      001DF0 90 97            [ 1]  351 	ld yl,a 
      001DF2 FF               [ 2]  352 	ldw (x),y 
      001DF3 81               [ 4]  353 	ret 
                                    354 
                                    355 ;----------------------------
                                    356 ; write a byte at address pointed 
                                    357 ; by FPTR and increment FPTR.
                                    358 ; Expect pointer already initialized 
                                    359 ; and memory unlocked 
                                    360 ; WR-BYTE ( c -- )
                                    361 ;----------------------------
      001DF4 1D DB                  362 	.word LINK 
                           001DF6   363 	LINK=. 
      001DF6 07                     364 	.byte 7 
      001DF7 57 52 2D 42 59 54 45   365 	.ascii "WR-BYTE" 
                                    366 
      001DFE                        367 WR_BYTE:
      001DFE CD 04 63         [ 4]  368 	call FC_XOFF
      001E01 90 93            [ 1]  369 	ldw y,x 
      001E03 90 FE            [ 2]  370 	ldw y,(y)
      001E05 1C 00 02         [ 2]  371 	addw x,#CELLL 
      001E08 90 9F            [ 1]  372 	ld a,yl
      001E0A 92 BD 00 34      [ 4]  373 	ldf [FPTR],a
      001E0E 72 05 50 5F FB   [ 2]  374 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001E13 CD 04 4D         [ 4]  375 	call FC_XON
      001E16 CC 1D 8F         [ 2]  376 	jp INC_FPTR 
                                    377 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                                    378 ;---------------------------------------
                                    379 ; write a word at address pointed 
                                    380 ; by FPTR and increment FPTR 
                                    381 ; Expect pointer already initialzed 
                                    382 ; and memory unlocked 
                                    383 ; WR-WORD ( w -- )
                                    384 ;---------------------------------------
      001E19 1D F6                  385 	.word LINK 
                           001E1B   386 	LINK=.
      001E1B 07                     387 	.byte 7 
      001E1C 57 52 2D 57 4F 52 44   388 	.ascii "WR-WORD" 
      001E23                        389 WR_WORD:
      001E23 CD 04 63         [ 4]  390 	call FC_XOFF
      001E26 90 93            [ 1]  391 	ldw y,x
      001E28 90 FE            [ 2]  392 	ldw y,(y)
      001E2A 1C 00 02         [ 2]  393 	addw x,#CELLL 
      001E2D 90 9E            [ 1]  394 	ld a,yh 
      001E2F 92 BD 00 34      [ 4]  395 	ldf [FPTR],a
      001E33 72 05 50 5F FB   [ 2]  396 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001E38 CD 1D 8F         [ 4]  397 	call INC_FPTR 
      001E3B 90 9F            [ 1]  398 	ld a,yl 
      001E3D 92 BD 00 34      [ 4]  399 	ldf [FPTR],a
      001E41 72 05 50 5F FB   [ 2]  400 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001E46 CD 04 4D         [ 4]  401 	call FC_XON
      001E49 CC 1D 8F         [ 2]  402 	jp INC_FPTR 
                                    403 
                                    404 
                                    405 ;---------------------------------------
                                    406 ; write a byte to FLASH or EEPROM/OPTION  
                                    407 ; EEC!  (c ud -- )
                                    408 ;---------------------------------------
      001E4C 1E 1B                  409     .word LINK 
                           001E4E   410 	LINK=.
      001E4E 04                     411     .byte 4 
      001E4F 45 45 43 21            412     .ascii "EEC!"
                                    413 	; local variables 
                           000001   414 	BTW = 1   ; byte to write offset on stack
                           000002   415     OPT = 2 
                           000002   416 	VSIZE = 2
      001E53                        417 EECSTORE:
      001E53 52 02            [ 2]  418 	sub sp,#VSIZE
      001E55 CD 1C 15         [ 4]  419     call FPSTOR
      001E58 E6 01            [ 1]  420 	ld a,(1,x)
      001E5A 43               [ 1]  421 	cpl a 
      001E5B 6B 01            [ 1]  422 	ld (BTW,sp),a ; byte to write 
      001E5D 0F 02            [ 1]  423 	clr (OPT,sp)  ; OPTION flag
      001E5F CD 1D 53         [ 4]  424 	call UNLOCK 
                                    425 	; check if option
      001E62 3D 34            [ 1]  426 	tnz FPTR 
      001E64 26 19            [ 1]  427 	jrne 2$
      001E66 90 BE 35         [ 2]  428 	ldw y,PTR16 
      001E69 90 A3 48 00      [ 2]  429 	cpw y,#OPTION_BASE
      001E6D 2B 10            [ 1]  430 	jrmi 2$
      001E6F 90 A3 48 80      [ 2]  431 	cpw y,#OPTION_END+1
      001E73 2A 0A            [ 1]  432 	jrpl 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      001E75 03 02            [ 1]  433 	cpl (OPT,sp)
                                    434 	; OPTION WRITE require this UNLOCK 
      001E77 72 1E 50 5B      [ 1]  435     bset FLASH_CR2,#FLASH_CR2_OPT
      001E7B 72 1F 50 5C      [ 1]  436     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001E7F                        437 2$: 
      001E7F CD 1D FE         [ 4]  438 	call WR_BYTE 	
      001E82 0D 02            [ 1]  439 	tnz (OPT,sp)
      001E84 27 0D            [ 1]  440 	jreq 3$ 
      001E86 7B 01            [ 1]  441     ld a,(BTW,sp)
      001E88 90 5F            [ 1]  442     clrw y
      001E8A 90 97            [ 1]  443 	ld yl,a 
      001E8C 1D 00 02         [ 2]  444 	subw x,#CELLL 
      001E8F FF               [ 2]  445 	ldw (x),y 
      001E90 CD 1D FE         [ 4]  446 	call WR_BYTE
      001E93                        447 3$: 
      001E93 CD 1D 7B         [ 4]  448 	call LOCK 
      001E96 5B 02            [ 2]  449 	addw sp,#VSIZE 
      001E98 81               [ 4]  450     ret
                                    451 
                                    452 ;------------------------------
                                    453 ; write integer in FLASH|EEPROM
                                    454 ; EE! ( n ud -- )
                                    455 ;------------------------------
      001E99 1E 4E                  456 	.word LINK 
                           001E9B   457 	LINK=.
      001E9B 03                     458 	.byte 3 
      001E9C 45 45 21               459 	.ascii "EE!"
      001E9F                        460 EESTORE:
      001E9F CD 1C 15         [ 4]  461 	call FPSTOR 
      001EA2 CD 1D 53         [ 4]  462 	call UNLOCK 
      001EA5 90 93            [ 1]  463 	ldw y,x 
      001EA7 90 FE            [ 2]  464 	ldw y,(y)
      001EA9 90 89            [ 2]  465 	pushw y 
      001EAB 90 5E            [ 1]  466 	swapw y 
      001EAD FF               [ 2]  467 	ldw (x),y 
      001EAE CD 1D FE         [ 4]  468 	call WR_BYTE 
      001EB1 90 85            [ 2]  469 	popw y 
      001EB3 1D 00 02         [ 2]  470 	subw x,#CELLL
      001EB6 FF               [ 2]  471 	ldw (x),y 
      001EB7 CD 1D FE         [ 4]  472 	call WR_BYTE
      001EBA CC 1D 7B         [ 2]  473 	jp LOCK 
                                    474 
                                    475 
                                    476 ;----------------------------
                                    477 ; Erase flash memory row 
                                    478 ; stm8s208 as 128 bytes rows
                                    479 ; ROW-ERASE ( ud -- )
                                    480 ;----------------------------
      001EBD 1E 9B                  481 	.word LINK 
                           001EBF   482 	LINK=. 
      001EBF 09                     483 	.byte 9 
      001EC0 52 4F 57 2D 45 52 41   484 	.ascii "ROW-ERASE" 
             53 45
      001EC9                        485 row_erase:
      001EC9 CD 04 63         [ 4]  486 	call FC_XOFF
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      001ECC CD 1C 15         [ 4]  487 	call FPSTOR
                                    488 ;code must be execute from RAM 
                                    489 ;copy routine to PAD 
      001ECF 1D 00 02         [ 2]  490 	subw x,#CELLL 
      001ED2 90 AE 1F 22      [ 2]  491 	ldw y,#row_erase_proc
      001ED6 FF               [ 2]  492 	ldw (x),y 
      001ED7 CD 0D 0C         [ 4]  493 	call PAD 
      001EDA 90 AE 1F 49      [ 2]  494 	ldw y,#row_erase_proc_end 
      001EDE 72 A2 1F 22      [ 2]  495 	subw y,#row_erase_proc
      001EE2 1D 00 02         [ 2]  496 	subw x,#CELLL 
      001EE5 FF               [ 2]  497 	ldw (x),y 
      001EE6 CD 0D 48         [ 4]  498 	call CMOVE 
      001EE9                        499 block_erase:
      001EE9 90 BE 35         [ 2]  500 	ldw y,FPTR+1
      001EEC 90 A3 36 00      [ 2]  501 	cpw y,#app_space 
      001EF0 2A 19            [ 1]  502 	jrpl erase_flash 
                                    503 ; erase EEPROM block
      001EF2 90 A3 40 00      [ 2]  504 	cpw y,#EEPROM_BASE 
      001EF6 24 04            [ 1]  505 	jruge 1$
      001EF8 CD 04 4D         [ 4]  506 	call FC_XON
      001EFB 81               [ 4]  507 	ret ; bad address 
      001EFC 90 A3 47 FF      [ 2]  508 1$: cpw y,#EEPROM_END 
      001F00 23 04            [ 2]  509 	jrule 2$ 
      001F02 CD 04 4D         [ 4]  510 	call FC_XON
      001F05 81               [ 4]  511 	ret ; bad address 
      001F06                        512 2$:	
      001F06 CD 1D 15         [ 4]  513 	call UNLKEE 
      001F09 20 03            [ 2]  514 	jra proceed_erase
                                    515 ; erase flash block:
      001F0B                        516 erase_flash:
      001F0B CD 1D 34         [ 4]  517 	call UNLKFL 
      001F0E                        518 proceed_erase:
      001F0E CD 0D 0C         [ 4]  519 	call PAD 
      001F11 90 93            [ 1]  520 	ldw y,x
      001F13 90 FE            [ 2]  521 	ldw y,(y)
      001F15 1C 00 02         [ 2]  522 	addw x,#CELLL  
      001F18 90 FD            [ 4]  523 	call (y) 
      001F1A 72 17 50 5F      [ 1]  524 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001F1E CD 04 4D         [ 4]  525 	call FC_XON
      001F21 81               [ 4]  526 	ret 
                                    527 
                                    528 ; this routine is to be copied to PAD 
      001F22                        529 row_erase_proc:
      001F22 35 20 50 5B      [ 1]  530 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001F26 35 DF 50 5C      [ 1]  531 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001F2A 4F               [ 1]  532 	clr a 
      001F2B 90 5F            [ 1]  533 	clrw y 
      001F2D 91 A7 00 34      [ 1]  534 	ldf ([FPTR],y),a
      001F31 90 5C            [ 1]  535     incw y
      001F33 91 A7 00 34      [ 1]  536 	ldf ([FPTR],y),a
      001F37 90 5C            [ 1]  537     incw y
      001F39 91 A7 00 34      [ 1]  538 	ldf ([FPTR],y),a
      001F3D 90 5C            [ 1]  539     incw y
      001F3F 91 A7 00 34      [ 1]  540 	ldf ([FPTR],y),a
      001F43 72 05 50 5F FB   [ 2]  541 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      001F48 81               [ 4]  542 	ret
      001F49                        543 row_erase_proc_end:
                                    544 
                                    545 
                                    546 ;-----------------------------------
                                    547 ; block programming must be 
                                    548 ; executed from RAM 
                                    549 ; initial contidions: 
                                    550 ; 		memory unlocked
                                    551 ;       FPTR initialized 
                                    552 ; input: 
                                    553 ;    x   buffer address 
                                    554 ;-----------------------------------
                           000001   555 	BCNT=1 
      001F49                        556 copy_buffer:
      001F49 4B 80            [ 1]  557 	push #BLOCK_SIZE  
                                    558 ;enable block programming 
      001F4B 72 10 50 5B      [ 1]  559 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001F4F 72 11 50 5C      [ 1]  560 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001F53 90 5F            [ 1]  561 	clrw y
      001F55 F6               [ 1]  562 1$:	ld a,(x)
      001F56 91 A7 00 34      [ 1]  563 	ldf ([FPTR],y),a
      001F5A 5C               [ 1]  564 	incw x 
      001F5B 90 5C            [ 1]  565 	incw y 
      001F5D 0A 01            [ 1]  566 	dec (BCNT,sp)
      001F5F 26 F4            [ 1]  567 	jrne 1$
                                    568 ; wait EOP bit 
      001F61 72 05 50 5F FB   [ 2]  569 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001F66 84               [ 1]  570 	pop a ; remove BCNT from stack 
      001F67 81               [ 4]  571 	ret 
      001F68                        572 copy_buffer_end:
                                    573 
                                    574 ;-------------------------
                                    575 ; move program_row to RAM 
                                    576 ; in TIB 
                                    577 ;------------------------
      001F68                        578 copy_prog_to_ram:
      001F68 1D 00 06         [ 2]  579 	subw x,#6
      001F6B 90 AE 1F 49      [ 2]  580 	ldw y,#copy_buffer 
      001F6F EF 04            [ 2]  581 	ldw (4,x),y 
      001F71 90 AE 17 00      [ 2]  582 	ldw y,#TIBBASE
      001F75 EF 02            [ 2]  583 	ldw (2,x),y 
      001F77 90 AE 1F 68      [ 2]  584 	ldw y,#copy_buffer_end 
      001F7B 72 A2 1F 49      [ 2]  585 	subw y,#copy_buffer  
      001F7F FF               [ 2]  586 	ldw (x),y 
      001F80 CD 0D 48         [ 4]  587 	call CMOVE 
      001F83 81               [ 4]  588 	ret 
                                    589 
                                    590 
                                    591 ;-----------------------------
                                    592 ; write a row in FLASH/EEPROM 
                                    593 ; WR-ROW ( a ud -- )
                                    594 ; a -> address 128 byte buffer to write 
                                    595 ; ud ->  row address in FLASH|EEPROM 
                                    596 ;-----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      001F84 1E BF                  597 	.word LINK 
                           001F86   598 	LINK=.
      001F86 06                     599 	.byte 6 
      001F87 57 52 2D 52 4F 57      600 	.ascii "WR-ROW"
      001F8D                        601 write_row:
      001F8D CD 04 63         [ 4]  602 	call FC_XOFF
      001F90 CD 1C 15         [ 4]  603 	call FPSTOR
                                    604 ; align to FLASH block 
      001F93 A6 80            [ 1]  605 	ld a,#0x80 
      001F95 B4 36            [ 1]  606 	and a,PTR8 
      001F97 B7 36            [ 1]  607 	ld PTR8,a  
      001F99 CD 1F 68         [ 4]  608 	call copy_prog_to_ram
      001F9C CD 1D 53         [ 4]  609 	call UNLOCK
      001F9F 90 93            [ 1]  610 	ldw y,x 
      001FA1 90 FE            [ 2]  611 	ldw y,(y)
      001FA3 1C 00 02         [ 2]  612 	addw x,#CELLL 
      001FA6 89               [ 2]  613 	pushw x 
      001FA7 93               [ 1]  614 	ldw x,y ; buffer address in x 
      001FA8 CD 17 00         [ 4]  615 	call TIBBASE
      001FAB CD 1D 7B         [ 4]  616 	call LOCK
      001FAE 85               [ 2]  617 	popw x 
      001FAF CD 04 4D         [ 4]  618 	call FC_XON 
      001FB2 81               [ 4]  619 	ret 
                                    620 
                                    621 ;-------------------------------------
                                    622 ; change value of OPTION register 
                                    623 ; SET-OPT (c n -- ) 
                                    624 ; c new value.
                                    625 ; n OPT  number {1..7}
                                    626 ;--------------------------------------
      001FB3 1F 86                  627 		.word LINK 
                           001FB5   628 		LINK=.
      001FB5 07                     629 		.byte 7 
      001FB6 53 45 54 2D 4F 50 54   630 		.ascii "SET-OPT" 
      001FBD                        631 set_option: 
      001FBD 90 93            [ 1]  632 		ldw y,x 
      001FBF 90 FE            [ 2]  633 		ldw y,(y)
      001FC1 27 06            [ 1]  634 		jreq 1$
      001FC3 90 A3 00 07      [ 2]  635 		cpw y,#7 
      001FC7 23 04            [ 2]  636 		jrule 2$ 
                                    637 ; invalid OPTION number 		
      001FC9 1C 00 04         [ 2]  638 1$:		addw x,#2*CELLL
      001FCC 81               [ 4]  639 		ret
      001FCD 90 58            [ 2]  640 2$:		sllw y 
      001FCF 72 A9 47 FF      [ 2]  641 		addw y,#OPTION_BASE-1
      001FD3 FF               [ 2]  642 		ldw (x),y 
      001FD4 1D 00 02         [ 2]  643 		subw x,#CELLL 
      001FD7 90 5F            [ 1]  644 		clrw y 
      001FD9 FF               [ 2]  645 		ldw (x),y 
      001FDA CD 1E 53         [ 4]  646 		call EECSTORE
      001FDD 81               [ 4]  647 		ret 
                                    648 
                                    649 
                                    650 
                                    651 ;--------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



                                    652 ; reset system to its original state 
                                    653 ; before any user modification
                                    654 ; PRISTINE ( -- )
                                    655 ;-------------------------------------
      001FDE 1F B5                  656 	.word LINK  
                           001FE0   657 	LINK=.
      001FE0 08                     658 	.byte 8 
      001FE1 50 52 49 53 54 49 4E   659 	.ascii "PRISTINE"
             45
      001FE9                        660 pristine:
                                    661 ;;; erase EEPROM
      001FE9 CD 1C 34         [ 4]  662 	call EEPROM 
      001FEC CD 08 27         [ 4]  663 1$:	call DDUP 
      001FEF CD 1E C9         [ 4]  664 	call row_erase
      001FF2 90 93            [ 1]  665 	ldw y,x 
      001FF4 90 EE 02         [ 2]  666 	ldw y,(2,y)
      001FF7 72 A9 00 80      [ 2]  667 	addw y,#BLOCK_SIZE
      001FFB EF 02            [ 2]  668 	ldw (2,x),y
      001FFD 90 A3 48 00      [ 2]  669 	cpw y,#OPTION_BASE 
      002001 25 E9            [ 1]  670 	jrult 1$
                                    671 ;;; reset OPTION to default values
      002003 90 AE 00 01      [ 2]  672 	ldw y,#1 ; OPT1 
      002007 FF               [ 2]  673 2$:	ldw (x),y   
      002008 90 5F            [ 1]  674 	clrw y 
      00200A EF 02            [ 2]  675 	ldw (2,x),y  ; ( 0 1 -- ) 
      00200C CD 08 27         [ 4]  676 	call DDUP    ; ( 0 1 0 1 -- )  
      00200F CD 1F BD         [ 4]  677 	call set_option
      002012 90 93            [ 1]  678 	ldw y,x 
      002014 90 FE            [ 2]  679 	ldw y,(y)
      002016 90 5C            [ 1]  680 	incw y  ; next OPTION 
      002018 90 A3 00 08      [ 2]  681 	cpw y,#8 
      00201C 25 E9            [ 1]  682 	jrult 2$
                                    683 ;;; erase first row of app_space 	
      00201E 90 AE 36 00      [ 2]  684 	ldw y,#app_space
      002022 EF 02            [ 2]  685 	ldw (2,x),y  
      002024 90 5F            [ 1]  686 	clrw y 
      002026 FF               [ 2]  687 	ldw (x),y ; ( app_space 0 -- )
      002027 CD 1E C9         [ 4]  688 	call row_erase 
                                    689 ; reset interrupt vectors 
      00202A 1D 00 02         [ 2]  690 	subw x,#CELLL 
      00202D 90 5F            [ 1]  691 	clrw y  
      00202F FF               [ 2]  692 4$:	ldw (x),y  ; ( n -- ) int# 
      002030 CD 06 19         [ 4]  693 	call DUPP  
      002033 CD 20 50         [ 4]  694 	call reset_vector
      002036 90 93            [ 1]  695 	ldw y,x 
      002038 90 FE            [ 2]  696 	ldw y,(y)
      00203A 90 5C            [ 1]  697 	incw y   ; next vector 
      00203C 90 A3 00 19      [ 2]  698 	cpw y,#25 
      002040 25 ED            [ 1]  699 	jrult 4$
      002042 CC 00 00         [ 2]  700 	jp NonHandledInterrupt ; reset MCU
                                    701 
                                    702 ;------------------------------
                                    703 ; reset an interrupt vector 
                                    704 ; to its initial value 
                                    705 ; i.e. NonHandledInterrupt
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



                                    706 ; RST-IVEC ( n -- )
                                    707 ;-----------------------------
      002045 1F E0                  708 	.word LINK 
                           002047   709 	LINK=. 
      002047 08                     710 	.byte 8 
      002048 52 53 54 2D 49 56 45   711 	.ascii "RST-IVEC"
             43
      002050                        712 reset_vector:
      002050 90 93            [ 1]  713 	ldw y,x
      002052 1C 00 02         [ 2]  714 	addw x,#CELLL 
      002055 90 FE            [ 2]  715 	ldw y,(y)
      002057 90 A3 00 17      [ 2]  716 	cpw y,#23 
      00205B 27 3A            [ 1]  717 	jreq 9$
      00205D 90 A3 00 1D      [ 2]  718 	cpw y,#29 ; last vector
      002061 22 34            [ 1]  719 	jrugt 9$  
      002063 90 58            [ 2]  720 	sllw y 
      002065 90 58            [ 2]  721 	sllw y 
      002067 72 A9 80 08      [ 2]  722 	addw y,#0x8008 ; irq0 address 
      00206B 90 BF 26         [ 2]  723 	ldw YTEMP,y
      00206E 1D 00 06         [ 2]  724 	subw x,#3*CELLL 
      002071 EF 02            [ 2]  725 	ldw (2,x),y 
      002073 90 5F            [ 1]  726 	clrw y
      002075 FF               [ 2]  727 	ldw (x),y 
      002076 A6 82            [ 1]  728 	ld a,#0x82 
      002078 90 95            [ 1]  729 	ld yh,a
      00207A EF 04            [ 2]  730 	ldw (4,x),y
      00207C CD 1E 9F         [ 4]  731 	call EESTORE
      00207F 1D 00 06         [ 2]  732 	subw x,#3*CELLL
      002082 90 5F            [ 1]  733 	clrw y 
      002084 FF               [ 2]  734 	ldw (x),y 
      002085 90 AE 00 00      [ 2]  735 	ldw y,#NonHandledInterrupt
      002089 EF 04            [ 2]  736 	ldw (4,x),y 
      00208B 90 BE 26         [ 2]  737 	ldw y,YTEMP  
      00208E 72 A9 00 02      [ 2]  738 	addw y,#2
      002092 EF 02            [ 2]  739 	ldw (2,x),y 
      002094 CD 1E 9F         [ 4]  740 	call EESTORE
      002097 81               [ 4]  741 9$:	ret 
                                    742 
                                    743 
                                    744 ;------------------------------
                                    745 ; all interrupt vector with 
                                    746 ; an address >= a are resetted 
                                    747 ; to default
                                    748 ; CHKIVEC ( a -- )
                                    749 ;------------------------------
      002098 20 47                  750 	.word LINK 
                           00209A   751 	LINK=.
      00209A 07                     752 	.byte 7
      00209B 43 48 4B 49 56 45 43   753 	.ascii "CHKIVEC"
                                    754 ;local variables 
                           000001   755 	SSP=1
                           000003   756 	CADR=3
                           000005   757 	OFS=5
                           000006   758 	VSIZE=6  
      0020A2                        759 CHKIVEC:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



      0020A2 52 06            [ 2]  760 	sub sp,#VSIZE ;alloc local variables 
      0020A4 90 93            [ 1]  761 	ldw y,x 
      0020A6 90 FE            [ 2]  762 	ldw y,(y)
      0020A8 17 03            [ 2]  763 	ldw (CADR,sp),y ; ca 
      0020AA 1F 01            [ 2]  764 	ldw (SSP,sp),x 
      0020AC AE 80 0A         [ 2]  765 	ldw x,#0x800a ; irq0 address 
      0020AF BF 35            [ 2]  766 	ldw PTR16,X
      0020B1 AE FF FC         [ 2]  767 	ldw x,#-4 
      0020B4 1C 00 04         [ 2]  768 1$:	addw x,#4
      0020B7 A3 00 78         [ 2]  769 	cpw x,#30*4 ; irq0-29 
      0020BA 27 22            [ 1]  770 	jreq 9$
      0020BC 90 93            [ 1]  771 	ldw y,x  
      0020BE 91 D6 35         [ 4]  772 	ld a,([PTR16],y)
      0020C1 11 03            [ 1]  773 	cp a,(CADR,sp)
      0020C3 25 EF            [ 1]  774 	jrult 1$
      0020C5 90 5C            [ 1]  775 	incw y 
      0020C7 91 D6 35         [ 4]  776 	ld a,([PTR16],y)
      0020CA 11 04            [ 1]  777 	cp a,(CADR+1,sp) 
      0020CC 25 E6            [ 1]  778 	jrult 1$ 
      0020CE 1F 05            [ 2]  779 	ldw (OFS,sp),x 
      0020D0 54               [ 2]  780 	srlw x
      0020D1 54               [ 2]  781 	srlw x 
      0020D2 90 93            [ 1]  782 	ldw y,x 
      0020D4 1E 01            [ 2]  783 	ldw x,(SSP,sp)
      0020D6 FF               [ 2]  784 	ldw (x),y
      0020D7 CD 20 50         [ 4]  785 	call reset_vector
      0020DA 1E 05            [ 2]  786 	ldw x,(OFS,sp) 
      0020DC 20 D6            [ 2]  787 	jra 1$
      0020DE 1E 01            [ 2]  788 9$:	ldw x,(SSP,sp) 
      0020E0 1C 00 02         [ 2]  789 	addw x,#CELLL 
      0020E3 5B 06            [ 2]  790 	addw sp,#VSIZE ; drop local variables  
      0020E5 81               [ 4]  791 	ret 
                                    792 
                                    793 ;------------------------------
                                    794 ; set interrupt vector 
                                    795 ; SET-IVEC ( ud n -- )
                                    796 ;  ud Handler address
                                    797 ;  n  vector # 0 .. 29 
                                    798 ;-----------------------------
      0020E6 20 9A                  799 	.word LINK
                           0020E8   800 	LINK=.
      0020E8 08                     801 	.byte 8 
      0020E9 53 45 54 2D 49 56 45   802 	.ascii "SET-IVEC" 
             43
      0020F1                        803 set_vector:
      0020F1 90 93            [ 1]  804     ldw y,x 
      0020F3 1C 00 02         [ 2]  805 	addw x,#CELLL 
      0020F6 90 FE            [ 2]  806 	ldw y,(y) ; vector #
      0020F8 90 A3 00 1D      [ 2]  807 	cpw y,#29 ; last vector
      0020FC 23 04            [ 2]  808 	jrule 2$
      0020FE 1C 00 04         [ 2]  809 	addw x,#2*CELLL 
      002101 81               [ 4]  810 	ret
      002102 90 58            [ 2]  811 2$:	sllw y 
      002104 90 58            [ 2]  812 	sllw y 
      002106 72 A9 80 08      [ 2]  813 	addw y,#0X8008 ; IRQ0 vector address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      00210A 90 BF 26         [ 2]  814 	ldw YTEMP,y ; vector address 
      00210D A6 82            [ 1]  815 	ld a,#0x82 
      00210F 90 95            [ 1]  816 	ld yh,a 
      002111 E6 01            [ 1]  817 	ld a,(1,x) ; isr address bits 23..16 
      002113 90 97            [ 1]  818 	ld yl,a 
                                    819 ;  write 0x82 + most significant byte of int address	
      002115 1D 00 06         [ 2]  820 	subw x,#3*CELLL 
      002118 EF 04            [ 2]  821 	ldw (4,x),y 
      00211A 90 BE 26         [ 2]  822 	ldw y,YTEMP
      00211D EF 02            [ 2]  823 	ldw (2,x),y ; vector address 
      00211F 90 5F            [ 1]  824 	clrw y 
      002121 FF               [ 2]  825 	ldw (x),y   ; as a double 
      002122 CD 1E 9F         [ 4]  826 	call EESTORE 
      002125 90 93            [ 1]  827 	ldw y,x 
      002127 90 EE 02         [ 2]  828 	ldw y,(2,y) ; bits 15..0 int vector 
      00212A 1D 00 06         [ 2]  829 	subw x,#3*CELLL 
      00212D EF 04            [ 2]  830 	ldw (4,x),y 
      00212F 90 BE 26         [ 2]  831 	ldw y,YTEMP 
      002132 72 A9 00 02      [ 2]  832 	addw y,#2 
      002136 EF 02            [ 2]  833 	ldw (2,x),y 
      002138 90 5F            [ 1]  834 	clrw y 
      00213A FF               [ 2]  835 	ldw (x),y 
      00213B CD 1E 9F         [ 4]  836 	call EESTORE
      00213E 1C 00 04         [ 2]  837 	addw x,#2*CELLL  
      002141 81               [ 4]  838 9$: ret 
                                    839 
                                    840 
                                    841 ;------------------------
                                    842 ; Compile word to flash
                                    843 ; EE, (w -- )
                                    844 ;-----------------------
      002142 20 E8                  845 	.word LINK
                           002144   846 	LINK=.
      002144 03                     847 	.byte 3
      002145 45 45 2C               848 	.ascii "EE,"
      002148                        849 EE_COMMA:
      002148 1D 00 04         [ 2]  850 	subw x,#2*CELLL 
      00214B 90 BE 1A         [ 2]  851 	ldw y,UCP
      00214E 90 89            [ 2]  852 	pushw y 
      002150 EF 02            [ 2]  853 	ldw (2,x),y 
      002152 90 5F            [ 1]  854 	clrw y 
      002154 FF               [ 2]  855 	ldw (x),y
      002155 CD 1E 9F         [ 4]  856 	call EESTORE
      002158 90 85            [ 2]  857 	popw y 
      00215A 72 A9 00 02      [ 2]  858 	addw y,#2
      00215E 90 BF 1A         [ 2]  859 	ldw UCP,y
      002161 81               [ 4]  860 	ret 
                                    861 
                                    862 
                                    863 ;-------------------------
                                    864 ; Compile byte to flash 
                                    865 ; EEC, ( c -- )	
                                    866 ;-------------------------
      002162 21 44                  867 	.word LINK 
                           002164   868 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      002164 04                     869 	.byte 4 
      002165 45 45 43 2C            870 	.ascii "EEC,"
      002169                        871 EE_CCOMMA:
      002169 1D 00 04         [ 2]  872 	subw x,#2*CELLL 
      00216C 90 BE 1A         [ 2]  873 	ldw y,UCP
      00216F 90 89            [ 2]  874 	pushw y 
      002171 EF 02            [ 2]  875 	ldw (2,x),y 
      002173 90 5F            [ 1]  876 	clrw y 
      002175 FF               [ 2]  877 	ldw (x),y
      002176 CD 1E 53         [ 4]  878 	call EECSTORE
      002179 90 85            [ 2]  879 	popw y 
      00217B 90 5C            [ 1]  880 	incw y 
      00217D 90 BF 1A         [ 2]  881 	ldw UCP,y
      002180 81               [ 4]  882 	ret 
                                    883 
                                    884 
                                    885 ;--------------------------
                                    886 ; copy FLASH block to ROWBUF
                                    887 ; ROW>BUF ( ud -- )
                                    888 ;--------------------------
      002181 21 64                  889 	.word LINK 
                           002183   890 	LINK=.
      002183 07                     891 	.byte 7 
      002184 52 4F 57 3E 42 55 46   892 	.ascii "ROW>BUF"
      00218B                        893 ROW2BUF: 
      00218B CD 1C 15         [ 4]  894 	call FPSTOR 
      00218E A6 80            [ 1]  895 	ld a,#BLOCK_SIZE
      002190 88               [ 1]  896 	push a 
      002191 B4 36            [ 1]  897 	and a,PTR8 ; block align 
      002193 B7 36            [ 1]  898 	ld PTR8,a
      002195 90 AE 16 80      [ 2]  899 	ldw y,#ROWBUFF 
      002199 92 BC 00 34      [ 5]  900 1$: ldf a,[FPTR]
      00219D 90 F7            [ 1]  901 	ld (y),a
      00219F CD 1D 8F         [ 4]  902 	call INC_FPTR
      0021A2 90 5C            [ 1]  903 	incw y 
      0021A4 0A 01            [ 1]  904 	dec (1,sp)
      0021A6 26 F1            [ 1]  905 	jrne 1$ 
      0021A8 84               [ 1]  906 	pop a 
      0021A9 81               [ 4]  907 	ret 
                                    908 
                                    909 
                                    910 ;---------------------------
                                    911 ; copy ROWBUFF to flash 
                                    912 ; BUF>ROW ( ud -- )
                                    913 ; ud is row address as double 
                                    914 ;---------------------------
      0021AA 21 83                  915 	.word LINK 
                           0021AC   916 	LINK=.
      0021AC 07                     917 	.byte 7 
      0021AD 42 55 46 3E 52 4F 57   918 	.ascii "BUF>ROW" 
      0021B4                        919 BUF2ROW:
      0021B4 CD 07 1D         [ 4]  920 	call TBUF ; ( ud rb -- )
      0021B7 CD 07 DD         [ 4]  921 	call ROT 
      0021BA CD 07 DD         [ 4]  922 	call ROT  ; ( rb ud -- )
      0021BD CD 1F 8D         [ 4]  923 	call write_row 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



      0021C0 81               [ 4]  924 	ret 
                                    925 
                                    926 ;---------------------------------
                                    927 ; how many byte free in that row 
                                    928 ; RFREE ( a -- n )
                                    929 ; a is least byte of target address
                                    930 ;----------------------------------
      0021C1 21 AC                  931 	.word LINK 
                           0021C3   932 	LINK=.
      0021C3 05                     933 	.byte 5 
      0021C4 52 46 52 45 45         934 	.ascii "RFREE"
      0021C9                        935 RFREE:
      0021C9 E6 01            [ 1]  936 	ld a,(1,x)
      0021CB A4 7F            [ 1]  937 	and a,#BLOCK_SIZE-1 
      0021CD B7 26            [ 1]  938 	ld YTEMP,a 
      0021CF A6 80            [ 1]  939 	ld a,#BLOCK_SIZE 
      0021D1 B0 26            [ 1]  940 	sub a,YTEMP 
      0021D3 90 5F            [ 1]  941 	clrw y 
      0021D5 90 97            [ 1]  942 	ld yl,a
      0021D7 FF               [ 2]  943 	ldw (x),y 
      0021D8 81               [ 4]  944 	ret 
                                    945 
                                    946 ;---------------------------------
                                    947 ; write u bytes to flash/EEPROM 
                                    948 ; constraint to row limit 
                                    949 ; RAM>EE ( ud a u -- u2 )
                                    950 ; ud flash address 
                                    951 ; a ram address 
                                    952 ; u bytes count
                                    953 ; return u2 bytes written  
                                    954 ;-------------------------------
      0021D9 21 C3                  955 	.word LINK 
                           0021DB   956 	LINK=. 
      0021DB 06                     957 	.byte 6
      0021DC 52 41 4D 3E 45 45      958 	.ascii "RAM>EE"
                                    959 	
      0021E2                        960 RAM2EE:
                                    961 ; copy ud on top 
      0021E2 90 93            [ 1]  962 	ldw y,x 
      0021E4 90 EE 06         [ 2]  963 	ldw y,(6,y) ; LSW of ud  
      0021E7 90 BF 26         [ 2]  964 	ldw YTEMP,y 
      0021EA 90 93            [ 1]  965 	ldw y,x 
      0021EC 90 EE 04         [ 2]  966 	ldw y,(4,y)  ; MSW of ud 
      0021EF 1D 00 04         [ 2]  967 	subw x,#2*CELLL 
      0021F2 FF               [ 2]  968 	ldw (x),y 
      0021F3 90 BE 26         [ 2]  969 	ldw y,YTEMP 
      0021F6 EF 02            [ 2]  970 	ldw (2,x),y 
      0021F8 CD 21 8B         [ 4]  971 	call ROW2BUF 
      0021FB 90 93            [ 1]  972 	ldw y,x 
      0021FD 90 EE 06         [ 2]  973 	ldw y,(6,y)
      002200 90 89            [ 2]  974 	pushw y ; udl 
      002202 90 9F            [ 1]  975 	ld a,yl
      002204 A4 7F            [ 1]  976 	and a,#BLOCK_SIZE-1 
      002206 90 5F            [ 1]  977 	clrw y 
      002208 90 97            [ 1]  978 	ld yl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      00220A 72 A9 16 80      [ 2]  979 	addw y,#ROWBUFF 
      00220E 1D 00 02         [ 2]  980 	subw x,#CELLL 
      002211 FF               [ 2]  981 	ldw (x),y  
      002212 CD 06 29         [ 4]  982 	call SWAPP ;  ( ud a ra u -- )
      002215 CD 05 34         [ 4]  983 	call RFROM  
      002218 CD 21 C9         [ 4]  984 	call RFREE 
      00221B CD 09 7F         [ 4]  985 	call MIN
      00221E CD 06 19         [ 4]  986 	call DUPP 
      002221 CD 05 E2         [ 4]  987 	call TOR  
      002224 CD 0D 48         [ 4]  988 	call CMOVE
      002227 CD 21 B4         [ 4]  989 	call BUF2ROW 
      00222A CD 05 34         [ 4]  990 	call RFROM 
      00222D 81               [ 4]  991 	ret 
                                    992 
                                    993 
                                    994 ;--------------------------
                                    995 ; expand 16 bit address 
                                    996 ; to 32 bit address 
                                    997 ; FADDR ( a -- ud )
                                    998 ;--------------------------
      00222E 21 DB                  999 	.word LINK 
                           002230  1000 	LINK=. 
      002230 05                    1001 	.byte 5 
      002231 46 41 44 44 52        1002 	.ascii "FADDR"
      002236                       1003 FADDR:
      002236 CC 0C 1E         [ 2] 1004 	jp ZERO 
                                   1005 
                                   1006 
                                   1007 ;--------------------------
                                   1008 ; move new colon definition to FLASH 
                                   1009 ; using WR-ROW for efficiency 
                                   1010 ; preserving bytes already used 
                                   1011 ; in the current block. 
                                   1012 ; At this point the compiler as completed
                                   1013 ; in RAM and pointers CP and CNTXT updated.
                                   1014 ; CNTXT point to nfa of new word and  
                                   1015 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                   1016 ; 
                                   1017 ; FMOVE ( -- cp+ )
                                   1018 ; 
                                   1019 ;--------------------------
      002239 22 30                 1020 	.word LINK 
                           00223B  1021 	LINK=.
      00223B 05                    1022 	.byte 5 
      00223C 46 4D 4F 56 45        1023 	.ascii "FMOVE" 
      002241                       1024 FMOVE:
      002241 CD 07 2F         [ 4] 1025 	call TFLASH 
      002244 CD 04 E3         [ 4] 1026 	CALL AT 
      002247 CD 04 98         [ 4] 1027 	CALL QBRAN 
      00224A 22 C5                 1028 	.word no_move  
      00224C CD 07 7E         [ 4] 1029 	call CPP
      00224F CD 04 E3         [ 4] 1030 	call AT  
      002252 CD 06 19         [ 4] 1031 	call DUPP ; ( udl udl -- )
      002255 CD 07 62         [ 4] 1032 	call CNTXT 
      002258 CD 04 E3         [ 4] 1033 	call AT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      00225B CD 04 6F         [ 4] 1034 	call DOLIT 
      00225E 00 02                 1035 	.word 2 
      002260 CD 08 D2         [ 4] 1036 	call SUBB ; ( udl udl a -- )
      002263 CD 06 29         [ 4] 1037 	call SWAPP 
      002266 CD 22 36         [ 4] 1038 	call FADDR 
      002269 CD 07 DD         [ 4] 1039 	call ROT  ; ( udl ud a -- )
      00226C CD 06 19         [ 4] 1040 	call DUPP 
      00226F CD 05 E2         [ 4] 1041 	call TOR    ; R: a 
      002272                       1042 FMOVE2: 
      002272 CD 0C FB         [ 4] 1043 	call HERE 
      002275 CD 05 45         [ 4] 1044 	call RAT 
      002278 CD 08 D2         [ 4] 1045 	call SUBB ; (udl ud a wl -- )
      00227B                       1046 next_row:
      00227B CD 06 19         [ 4] 1047 	call DUPP 
      00227E CD 05 E2         [ 4] 1048 	call TOR  ; ( udl ud a wl -- ) R: a wl
      002281 CD 21 E2         [ 4] 1049 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      002284 CD 06 19         [ 4] 1050 	call DUPP 
      002287 CD 05 E2         [ 4] 1051 	call TOR
      00228A CD 08 3C         [ 4] 1052 	call PLUS  ; ( udl+ ) 
      00228D CD 06 19         [ 4] 1053 	call DUPP 
      002290 CD 0C 1E         [ 4] 1054 	call ZERO   ; ( udl+ ud -- )
      002293 CD 05 34         [ 4] 1055 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      002296 CD 05 34         [ 4] 1056 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      002299 CD 06 41         [ 4] 1057 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      00229C CD 08 D2         [ 4] 1058 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      00229F CD 06 19         [ 4] 1059 	call DUPP 
      0022A2 CD 04 98         [ 4] 1060 	call QBRAN
      0022A5 22 BE                 1061 	.word fmove_done 
      0022A7 CD 06 29         [ 4] 1062 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      0022AA CD 05 34         [ 4] 1063 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      0022AD CD 08 3C         [ 4] 1064 	call PLUS  ; ( udl+2 ud wl- a+ )
      0022B0 CD 06 19         [ 4] 1065 	call DUPP 
      0022B3 CD 05 E2         [ 4] 1066 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      0022B6 CD 06 29         [ 4] 1067 	call SWAPP 
      0022B9 CD 04 B4         [ 4] 1068 	call BRAN
      0022BC 22 7B                 1069 	.word next_row  
      0022BE                       1070 fmove_done:	
      0022BE CD 05 34         [ 4] 1071 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      0022C1 1C 00 0A         [ 2] 1072 	addw x,#5*CELLL ; (  -- cp+ ) new CP 
      0022C4 81               [ 4] 1073  	ret  
      0022C5                       1074 no_move:
      0022C5 CD 0C 1E         [ 4] 1075 	call ZERO
      0022C8 81               [ 4] 1076 	ret 
                                   1077 
                                   1078 ;------------------------------------------
                                   1079 ; adjust pointers after **FMOVE** operetion.
                                   1080 ; UPDAT-PTR ( cp+ -- )
                                   1081 ; cp+ is new CP position after FMOVE 
                                   1082 ;-------------------------------------------
      0022C9 22 3B                 1083 	.word LINK 
                           0022CB  1084 	LINK=.
      0022CB 09                    1085 	.byte 9
      0022CC 55 50 44 41 54 2D 50  1086 	.ascii "UPDAT-PTR" 
             54 52
      0022D5                       1087 UPDATPTR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



                                   1088 ;reset VP to previous position  
      0022D5 CD 1C 8F         [ 4] 1089 	call EEPVP 
      0022D8                       1090 	_DROP 
      0022D8 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0022DB CD 04 E3         [ 4] 1091 	call AT
      0022DE CD 07 70         [ 4] 1092 	call VPP 
      0022E1 CD 04 D1         [ 4] 1093 	call STORE
                                   1094 ;update CONTEXT and LAST 
      0022E4 CD 1C 79         [ 4] 1095 	call EEPCP 
      0022E7                       1096 	_DROP
      0022E7 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0022EA CD 04 E3         [ 4] 1097 	call AT
      0022ED CD 04 6F         [ 4] 1098 	call DOLIT 
      0022F0 00 02                 1099 	.word 2 
      0022F2 CD 08 3C         [ 4] 1100 	call PLUS 
      0022F5 CD 06 19         [ 4] 1101 	call DUPP 
      0022F8 CD 07 62         [ 4] 1102 	call CNTXT 
      0022FB CD 04 D1         [ 4] 1103 	call STORE
      0022FE CD 07 8E         [ 4] 1104 	call LAST
      002301 CD 04 D1         [ 4] 1105 	call STORE 
      002304 CD 1C A9         [ 4] 1106 	call UPDATLAST 
                                   1107 ;update CP 
      002307 CD 07 7E         [ 4] 1108 	call CPP 
      00230A CD 04 D1         [ 4] 1109 	call STORE
      00230D CD 1C D2         [ 4] 1110 	call UPDATCP 
      002310 81               [ 4] 1111 	ret 
                                   1112 
                                   1113 ;-----------------------------
                                   1114 ; move interrupt sub-routine
                                   1115 ; in flash memory
                                   1116 ;----------------------------- 
      002311 22 CB                 1117 	.word LINK 
                           002313  1118 	LINK=. 
      002313 06                    1119 	.byte 6
      002314 49 46 4D 4F 56 45     1120 	.ascii "IFMOVE" 
      00231A                       1121 IFMOVE:
      00231A CD 07 2F         [ 4] 1122 	call TFLASH 
      00231D CD 04 E3         [ 4] 1123 	CALL AT 
      002320 CD 04 98         [ 4] 1124 	CALL QBRAN 
      002323 22 C5                 1125 	.word no_move 
      002325 CD 07 7E         [ 4] 1126 	call CPP 
      002328 CD 04 E3         [ 4] 1127 	call AT 
      00232B CD 06 19         [ 4] 1128 	call DUPP ; ( udl udl -- )
      00232E CD 1C 8F         [ 4] 1129 	call EEPVP 
      002331                       1130 	_DROP
      002331 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002334 CD 04 E3         [ 4] 1131 	call AT  ; ( udl udl a )
      002337 CD 05 E2         [ 4] 1132 	call TOR 
      00233A CD 22 36         [ 4] 1133 	call FADDR
      00233D CD 05 45         [ 4] 1134 	call RAT ; ( udl ud a -- ) R: a 
      002340 CC 22 72         [ 2] 1135 	jp FMOVE2 
                                   1136 
                                   1137 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



                           000001  4579 .if WANT_SCALING_CONST 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



                                   4580         .include "const_ratio.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;--------------------------------------------------------------------
                                     22 ; Irrationals constants 
                                     23 ; expressed as 2 integers ratio
                                     24 ; aproximation. These are to be used with scaling operators */ and */MOD 
                                     25 ; REF: https://www.forth.com/starting-forth/5-fixed-point-arithmetic/
                                     26 ;---------------------------------------------------------------------
                                     27 
                                     28 ;       PI ( --  355 113 )
                                     29 ; precision 8.5e-8 
                                     30 ; usage example to compute circle area
                                     31 ; : CAREA DUP * PI */ ;
                                     32 ; 
                                     33 
      002343 23 13                   34         .word LINK 
                           002345    35         LINK=.
      002345 02                      36         .byte 2
      002346 50 49                   37         .ascii "PI" 
      002348                         38 PII:
      002348 1D 00 04         [ 2]   39         subw x,#2*CELLL 
      00234B 90 AE 01 63      [ 2]   40         ldw y,#355 
      00234F EF 02            [ 2]   41         ldw (2,x),y 
      002351 90 AE 00 71      [ 2]   42         ldw y,#113 
      002355 FF               [ 2]   43         ldw (x),y 
      002356 81               [ 4]   44         ret 
                                     45 
                                     46 ;      SQRT2 ( -- 19601  13860 )
                                     47 ; precision: 1.5e-9 
                                     48 ; usage example to compute Voltage peek to peek from Vrms 
                                     49 ; : VPP SQRT2 */ 2 * ;
                                     50 ;
      002357 23 45                   51         .word LINK 
                           002359    52         LINK=.
      002359 05                      53         .byte 5 
      00235A 53 51 52 54 32          54         .ascii "SQRT2" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



      00235F                         55 SQRT2:
      00235F 1D 00 04         [ 2]   56         subw x,#2*CELLL 
      002362 90 AE 4C 91      [ 2]   57         ldw y,#19601 
      002366 EF 02            [ 2]   58         ldw (2,x),y 
      002368 90 AE 36 24      [ 2]   59         ldw y,#13860 
      00236C FF               [ 2]   60         ldw (x),y 
      00236D 81               [ 4]   61         ret 
                                     62 
                                     63 ;   SQRT3 ( -- 18817 10864 )
                                     64 ; precision: 1.1e-9
                                     65 ;
      00236E 23 59                   66         .word LINK 
                           002370    67         LINK=.
      002370 05                      68         .byte 5
      002371 53 51 52 54 33          69         .ascii "SQRT3" 
      002376                         70 SQRT3: 
      002376 1D 00 04         [ 2]   71     subw x,#2*CELLL 
      002379 90 AE 49 81      [ 2]   72     ldw y,#18817 
      00237D EF 02            [ 2]   73     ldw (2,x),y 
      00237F 90 AE 2A 70      [ 2]   74     ldw y,#10864 
      002383 FF               [ 2]   75     ldw (x),y 
      002384 81               [ 4]   76     ret 
                                     77 
                                     78 ;   E ( -- 28667 10546 )
                                     79 ; precision: 5.5e-9 
                                     80 ; natural log base 
      002385 23 70                   81         .word LINK 
                           002387    82         LINK=.
      002387 01                      83         .byte 1
      002388 45                      84         .ascii "E" 
      002389                         85 ENEPER:
      002389 1D 00 04         [ 2]   86     subw x,#2*CELLL 
      00238C 90 AE 6F FB      [ 2]   87     ldw y,#28667 
      002390 EF 02            [ 2]   88     ldw (2,x),y 
      002392 90 AE 29 32      [ 2]   89     ldw y,#10546 
      002396 FF               [ 2]   90     ldw (x),y 
      002397 81               [ 4]   91     ret 
                                     92 
                                     93 ;   SQRT10 ( -- 22936 7253 )
                                     94 ; precision: 5.7e-9 
      002398 23 87                   95         .word LINK 
                           00239A    96         LINK=.
      00239A 06                      97         .byte 6 
      00239B 53 51 52 54 31 30       98         .ascii "SQRT10" 
      0023A1                         99 SQRT10:
      0023A1 1D 00 04         [ 2]  100     subw x,#2*CELLL
      0023A4 90 AE 59 98      [ 2]  101     ldw y,#22936 
      0023A8 EF 02            [ 2]  102     ldw (2,x),y 
      0023AA 90 AE 1C 55      [ 2]  103     ldw y,#7253
      0023AE FF               [ 2]  104     ldw (x),y 
      0023AF 81               [ 4]  105     ret 
                                    106 
                                    107 ;   12RT2 ( -- 26797 25293 )
                                    108 ; precision: 1.0e-9 
                                    109 ; used in music to compute well tempered scale
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      0023B0 23 9A                  110         .word LINK 
                           0023B2   111         LINK=. 
      0023B2 05                     112         .byte 5 
      0023B3 31 32 52 54 32         113         .ascii "12RT2"
      0023B8                        114 RT12_2:
      0023B8 1D 00 04         [ 2]  115     subw x,#2*CELLL 
      0023BB 90 AE 68 AD      [ 2]  116     ldw y,#26797
      0023BF EF 02            [ 2]  117     ldw (2,x),y 
      0023C1 90 AE 62 CD      [ 2]  118     ldw y,#25293
      0023C5 FF               [ 2]  119     ldw (x),y 
      0023C6 81               [ 4]  120     ret 
                                    121 
                                    122 ;   LOG2s ( -- 2040 11103 )
                                    123 ; log(2)/1.6384
                                    124 ; precision: 1.1e-8
      0023C7 23 B2                  125         .word LINK 
                           0023C9   126         LINK=.
      0023C9 05                     127         .byte 5 
      0023CA 4C 4F 47 32 53         128         .ascii "LOG2S" 
      0023CF                        129 LOG2S:
      0023CF 1D 00 04         [ 2]  130     subw x,#2*CELLL
      0023D2 90 AE 07 F8      [ 2]  131     ldw y,#2040 
      0023D6 EF 02            [ 2]  132     ldw (2,x),y 
      0023D8 90 AE 2B 5F      [ 2]  133     ldw y,#11103 
      0023DC FF               [ 2]  134     ldw (x),y 
      0023DD 81               [ 4]  135     ret 
                                    136 
                                    137 ;   LN2 ( -- 485 11464 )
                                    138 ; ln(2)/16.384 
                                    139 ; precision: 1.0e-7 
      0023DE 23 C9                  140         .word LINK 
                           0023E0   141         LINK=.
      0023E0 04                     142         .byte 4 
      0023E1 4C 4E 32 53            143         .ascii "LN2S" 
      0023E5                        144 LN2S: 
      0023E5 1D 00 04         [ 2]  145     subw x,#2*CELLL
      0023E8 90 AE 01 E5      [ 2]  146     ldw y,#485
      0023EC EF 02            [ 2]  147     ldw (2,x),y 
      0023EE 90 AE 2C C8      [ 2]  148     ldw y,#11464 
      0023F2 FF               [ 2]  149     ldw (x),y 
      0023F3 81               [ 4]  150     ret 
                                    151 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



                                   4581 .endif
                           000001  4582 .if WANT_CONST_TABLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



                                   4583         .include "ctable.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;------------------------------
                                     22 ; words to create and read 
                                     23 ; constants tables in FLASH 
                                     24 ; and EEPROM
                                     25 ;------------------------------
                                     26 
                                     27 ;-----------------------------
                                     28 ; allocate space in CODE area 
                                     29 ; for constant table.
                                     30 ; CALLOT ( u -- ad )
                                     31 ; u  bytes to allocates 
                                     32 ; ad data address as double.
                                     33 ;-----------------------------
      0023F4 23 E0                   34     .word LINK 
                           0023F6    35     LINK=.
      0023F6 06                      36     .byte 6
      0023F7 43 41 4C 4C 4F 54       37     .ascii "CALLOT"
      0023FD                         38 CALLOT:
      0023FD CD 07 7E         [ 4]   39     CALL CPP
      002400 CD 06 19         [ 4]   40     CALL DUPP 
      002403 CD 04 E3         [ 4]   41     CALL AT 
      002406 CD 05 E2         [ 4]   42     CALL TOR 
      002409 CD 0C 8E         [ 4]   43     CALL PSTOR 
      00240C CD 1C D2         [ 4]   44     CALL UPDATCP 
      00240F CD 05 34         [ 4]   45     CALL RFROM
      002412 CC 0C 1E         [ 2]   46     JP ZERO 
                                     47 
                                     48 ;------------------------------
                                     49 ; create constants bytes table 
                                     50 ; in persistant memory
                                     51 ;  CTABLE ( n+ -- ad ; <string> )
                                     52 ; n+ bytes reserved 
                                     53 ;-----------------------------
      002415 23 F6                   54     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



                           002417    55     LINK=.
      002417 06                      56     .byte 6
      002418 43 54 41 42 4C 45       57     .ascii "CTABLE"
      00241E                         58 CTABLE:
      00241E CD 23 FD         [ 4]   59     CALL CALLOT     
      002421 CC 19 65         [ 2]   60     JP DCONST 
                                     61      
                                     62 
                                     63 ;--------------------------------
                                     64 ; create constants words table 
                                     65 ; in persistant memory 
                                     66 ; WTABLE ( n+ -- ad ; <string> )
                                     67 ; n+  words reserved  
                                     68 ;--------------------------------
      002424 24 17                   69     .word LINK 
                           002426    70     LINK=.
      002426 06                      71     .byte 6
      002427 57 54 41 42 4C 45       72     .ascii "WTABLE"
      00242D                         73 WTABLE:
      00242D CD 0B A5         [ 4]   74     CALL CELLS  
      002430 CD 23 FD         [ 4]   75     CALL CALLOT 
      002433 CC 19 65         [ 2]   76     JP DCONST 
                                     77 
                                     78 ;---------------------------------
                                     79 ; stack an element of CTABLE 
                                     80 ; CTABL@ ( u ad -- c )
                                     81 ; u element order {0..size-1}
                                     82 ; a|ad table address 
                                     83 ;--------------------------------
      002436 24 26                   84     .word LINK 
                           002438    85     LINK=.
      002438 06                      86     .byte 6
      002439 43 54 41 42 4C 40       87     .ascii "CTABL@" 
      00243F                         88 CTAT:
      00243F CD 1C 15         [ 4]   89     call FPSTOR 
      002442 CD 1D A7         [ 4]   90     call PTRPLUS 
      002445 CC 1D E4         [ 2]   91     jp EE_CREAD 
                                     92 
                                     93 ;---------------------------------
                                     94 ; stack an element of WTABLE 
                                     95 ; WTABL@ ( u ud -- w )
                                     96 ; u is element order {0..size-1}
                                     97 ; a|ud table address 
                                     98 ;----------------------------------
      002448 24 38                   99     .word LINK 
                           00244A   100     LINK=.
      00244A 06                     101     .byte 6
      00244B 57 54 41 42 4C 40      102     .ascii "WTABL@" 
      002451                        103 WTAT:
      002451 CD 1C 15         [ 4]  104     call FPSTOR 
      002454 CD 0B A5         [ 4]  105     call CELLS 
      002457 CD 1D A7         [ 4]  106     call PTRPLUS 
      00245A CD 1D C2         [ 4]  107     call EE_READ 
      00245D 81               [ 4]  108     ret 
                                    109 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



                                    110 ;--------------------------
                                    111 ; tool to initialize character table 
                                    112 ; CTINIT ( ad -- )
                                    113 ; ad is table address 
                                    114 ;--------------------------
      00245E 24 4A                  115     .word LINK 
                           002460   116     LINK=.
      002460 06                     117     .byte 6 
      002461 43 54 49 4E 49 54      118     .ascii "CTINIT"
      002467                        119 CTINIT:
      002467 CD 1C 15         [ 4]  120     CALL FPSTOR
      00246A CD 1D 53         [ 4]  121     CALL UNLOCK
      00246D CD 0C 1E         [ 4]  122     CALL ZERO 
      002470 CD 0B B2         [ 4]  123 1$: CALL ONEP 
      002473 CD 06 19         [ 4]  124     CALL DUPP 
      002476 CD 24 C3         [ 4]  125     CALL INTQ 
      002479 CD 04 98         [ 4]  126     CALL QBRAN 
      00247C 24 86                  127     .word 2$
      00247E CD 1D FE         [ 4]  128     call WR_BYTE 
      002481 CD 04 B4         [ 4]  129     CALL BRAN 
      002484 24 70                  130     .word 1$ 
      002486                        131 2$: _DDROP 
      002486 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002489 CD 1D 7B         [ 4]  132     CALL LOCK 
      00248C 81               [ 4]  133     ret 
                                    134 
                                    135 ;--------------------------
                                    136 ; tool to initialize word table 
                                    137 ; WTINIT ( ad -- )
                                    138 ; ad is table address 
                                    139 ;--------------------------
      00248D 24 60                  140     .word LINK 
                           00248F   141     LINK=.
      00248F 06                     142     .byte 6 
      002490 57 54 49 4E 49 54      143     .ascii "WTINIT"
      002496                        144 WTINIT:
      002496 CD 1C 15         [ 4]  145     CALL FPSTOR
      002499 CD 1D 53         [ 4]  146     CALL UNLOCK
      00249C CD 0C 1E         [ 4]  147     CALL ZERO 
      00249F CD 0B B2         [ 4]  148 1$: CALL ONEP 
      0024A2 CD 06 19         [ 4]  149     CALL DUPP
      0024A5 CD 24 C3         [ 4]  150     CALL INTQ
      0024A8 CD 04 98         [ 4]  151     CALL QBRAN 
      0024AB 24 B5                  152     .word 2$
      0024AD CD 1E 23         [ 4]  153     call WR_WORD 
      0024B0 CD 04 B4         [ 4]  154     CALL BRAN 
      0024B3 24 9F                  155     .word 1$ 
      0024B5                        156 2$: _DDROP 
      0024B5 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      0024B8 CD 1D 7B         [ 4]  157     CALL LOCK 
      0024BB 81               [ 4]  158     ret 
                                    159 
                                    160 ;------------------------
                                    161 ; Prompted input for integer 
                                    162 ; display n+ in bracket and
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



                                    163 ; '?' 
                                    164 ; [N]? ( n+ -- a )
                                    165 ;------------------------
      0024BC 24 8F                  166     .word LINK 
                           0024BE   167     LINK=.
      0024BE 04                     168     .byte 4
      0024BF 5B 4E 5D 3F            169     .ascii "[N]?" 
      0024C3                        170 INTQ:
      0024C3 CD 0F 96         [ 4]  171     CALL CR 
      0024C6 CD 04 6F         [ 4]  172     call DOLIT 
      0024C9 00 5B                  173     .word '[
      0024CB CD 04 36         [ 4]  174     CALL EMIT 
      0024CE CD 10 3D         [ 4]  175     CALL DOT 
      0024D1 CD 0F C3         [ 4]  176     CALL  DOTQP
      0024D4 03                     177     .byte 3
      0024D5 5D 3F 20               178     .ascii "]? " 
      0024D8 CD 13 CD         [ 4]  179     CALL QUERY 
      0024DB CD 11 F8         [ 4]  180     call TOKEN 
      0024DE CC 25 9D         [ 2]  181     jp NUMBQ
                                    182 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



                                   4584 .endif
                           000001  4585 .if WANT_DOUBLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



                                   4586         .include "double.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;************************************
                                     21 ;    doubles integers library 
                                     22 ;    doubles are signed 32 bits 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26     .module DOUBLE 
                                     27 
                           000001    28     DVER_MAJOR=1 
                           000000    29     DVER_MINOR=0 
                                     30 
                                     31 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     32 ;  DBL-VER ( -- )
                                     33 ;  print library version 
                                     34 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0024E1                         35     _HEADER DBLVER,7,"DBL-VER"
      0024E1 24 BE                    1         .word LINK 
                           0024E3     2         LINK=.
      0024E3 07                       3         .byte 7  
      0024E4 44 42 4C 2D 56 45 52     4         .ascii "DBL-VER"
      0024EB                          5         DBLVER:
      0024EB CD 0F 96         [ 4]   36     CALL CR 
      0024EE CD 0F C3         [ 4]   37     CALL DOTQP 
      0024F1 18                      38     .byte  24 
      0024F2 64 6F 75 62 6C 65 20    39     .ascii "double integer library, "
             69 6E 74 65 67 65 72
             20 6C 69 62 72 61 72
             79 2C 20
      00250A CD 1B 14         [ 4]   40     CALL PRT_LICENCE
      00250D CD 1A EC         [ 4]   41     CALL COPYRIGHT  
      002510                         42     _DOLIT DVER_MAJOR 
      002510 CD 04 6F         [ 4]    1     CALL DOLIT 
      002513 00 01                    2     .word DVER_MAJOR 
      002515                         43     _DOLIT DVER_MINOR  
      002515 CD 04 6F         [ 4]    1     CALL DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



      002518 00 00                    2     .word DVER_MINOR 
      00251A CC 1B 28         [ 2]   44     JP PRINT_VERSION  
                                     45 
                                     46 
                                     47 ; check for negative sign 
                                     48 ; ajust pointer and cntr 
      00251D                         49 nsign: ; addr cntr -- addr cntr f 
      00251D 1D 00 02         [ 2]   50     SUBW X,#CELLL ; a cntr f 
      002520 90 93            [ 1]   51     LDW Y,X 
      002522 90 EE 04         [ 2]   52     LDW Y,(4,Y) ; addr 
      002525 90 F6            [ 1]   53     LD A,(Y) ; char=*addr  
      002527 A1 2D            [ 1]   54     CP A,#'-' 
      002529 27 03            [ 1]   55     JREQ NEG_SIGN 
      00252B 4F               [ 1]   56     CLR A  
      00252C 20 18            [ 2]   57     JRA STO_SIGN 
      00252E                         58 NEG_SIGN:
                                     59 ; increment addr 
      00252E 90 93            [ 1]   60     LDW Y,X 
      002530 90 EE 04         [ 2]   61     LDW Y,(4,Y)
      002533 72 A9 00 01      [ 2]   62     ADDW Y,#1   ;addr+1 
      002537 EF 04            [ 2]   63     LDW (4,X),Y 
                                     64 ; decrement cntr 
      002539 90 93            [ 1]   65     LDW Y,X
      00253B 90 EE 02         [ 2]   66     LDW Y,(2,Y)
      00253E 72 A2 00 01      [ 2]   67     SUBW Y,#1   ;cntr-1 
      002542 EF 02            [ 2]   68     LDW (2,X),Y 
      002544 A6 FF            [ 1]   69     LD A,#0XFF
      002546                         70 STO_SIGN:   
      002546 F7               [ 1]   71     LD (X),A 
      002547 E7 01            [ 1]   72     LD (1,X),A 
      002549 81               [ 4]   73     RET 
                                     74 
                                     75 
                                     76 ; get all digits in row 
                                     77 ; stop at first non-digit or end of string 
                                     78 ; ( dlo dhi a cntr -- dlo dhi [ a+ cntr- | a+ 0 ] )
      00254A                         79 parse_digits:
      00254A                         80 1$:
      00254A CD 06 19         [ 4]   81     CALL DUPP 
      00254D                         82     _QBRAN 5$ 
      00254D CD 04 98         [ 4]    1     CALL QBRAN
      002550 25 92                    2     .word 5$
      002552 CD 05 E2         [ 4]   83     CALL TOR   ; dlo dhi a R: cntr 
      002555 CD 0C E4         [ 4]   84     CALL COUNT ; dlo dhi a+ char 
      002558 CD 06 DF         [ 4]   85     CALL BASE 
      00255B CD 04 E3         [ 4]   86     CALL AT 
      00255E CD 0E DC         [ 4]   87     CALL DIGTQ 
      002561                         88     _QBRAN 4$ ; not a digit
      002561 CD 04 98         [ 4]    1     CALL QBRAN
      002564 25 89                    2     .word 4$
      002566 CD 28 D0         [ 4]   89     CALL DTOR  ; dlo dhi R: cntr a+ c  
      002569 CD 06 DF         [ 4]   90     CALL BASE 
      00256C CD 04 E3         [ 4]   91     CALL AT 
      00256F CD 27 5B         [ 4]   92     CALL DSSTAR
      002572 CD 05 34         [ 4]   93     CALL RFROM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



      002575 CD 0C 1E         [ 4]   94     CALL ZERO 
      002578 CD 2B 93         [ 4]   95     CALL DPLUS 
      00257B CD 05 34         [ 4]   96     CALL RFROM  ; dlo dhi a+ 
      00257E CD 05 34         [ 4]   97     CALL RFROM ; dlo dhi a+ cntr 
      002581 CD 0B BF         [ 4]   98     CALL ONEM 
      002584                         99     _BRAN 1$ ; dlo dhi a+ R: 
      002584 CD 04 B4         [ 4]    1     CALL BRAN 
      002587 25 4A                    2     .word 1$ 
      002589                        100 4$: _DROP  ; dlo dhi a+ 
      002589 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00258C CD 0B BF         [ 4]  101     CALL ONEM  ; unget char 
      00258F CD 05 34         [ 4]  102     CALL RFROM ; dlo dhi a+ cntr-
      002592                        103 5$:
      002592 81               [ 4]  104     RET 
                                    105 
                                    106 
                                    107 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    108 ;   NUMBER? (a -- s -1 |d -2 | a F )
                                    109 ;   convert string to integer 
                                    110 ;   double begin with '#' 
                                    111 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002593                        112     _HEADER NUMBQ,7,"NUMBER?"
      002593 24 E3                    1         .word LINK 
                           002595     2         LINK=.
      002595 07                       3         .byte 7  
      002596 4E 55 4D 42 45 52 3F     4         .ascii "NUMBER?"
      00259D                          5         NUMBQ:
                                    113 ; save current base value 
      00259D CD 06 DF         [ 4]  114     CALL BASE 
      0025A0 CD 04 E3         [ 4]  115     CALL AT 
      0025A3 CD 05 E2         [ 4]  116     CALL TOR 
                                    117 ; initialize integer to 0     
      0025A6 1D 00 04         [ 2]  118     SUBW X,#4 
      0025A9 90 5F            [ 1]  119     CLRW Y 
      0025AB FF               [ 2]  120     LDW (X),Y 
      0025AC EF 02            [ 2]  121     LDW (2,X),Y ; a 0 0 R: base  
      0025AE                        122     _DOLIT 2 
      0025AE CD 04 6F         [ 4]    1     CALL DOLIT 
      0025B1 00 02                    2     .word 2 
      0025B3 CD 0C 77         [ 4]  123     CALL PICK  ; a 0 0 a R: base    
      0025B6 CD 0C E4         [ 4]  124     CALL COUNT ; a 0 0 a+ n 
                                    125 ; check for '#' double integer 
      0025B9 CD 06 41         [ 4]  126     CALL OVER  ; a 0 0 a+ n a+
      0025BC CD 05 01         [ 4]  127     CALL CAT   ; a 0 0 a+ n c 
      0025BF                        128     _DOLIT '#' ; a 0 0 a+ n c '#' 
      0025BF CD 04 6F         [ 4]    1     CALL DOLIT 
      0025C2 00 23                    2     .word '#' 
      0025C4 CD 08 FA         [ 4]  129     CALL EQUAL 
      0025C7 CD 05 E2         [ 4]  130     CALL TOR   ; a 0 0 a+ n R: base d? 
      0025CA CD 05 45         [ 4]  131     CALL RAT   ; a 0 0 a+ n d? R: base d?
      0025CD                        132     _QBRAN NUMQ0
      0025CD CD 04 98         [ 4]    1     CALL QBRAN
      0025D0 25 DE                    2     .word NUMQ0
                                    133 ; update a and count
      0025D2 CD 06 29         [ 4]  134     CALL SWAPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      0025D5 CD 0B B2         [ 4]  135     CALL ONEP 
      0025D8 CD 06 29         [ 4]  136     CALL SWAPP 
      0025DB CD 0B BF         [ 4]  137     CALL ONEM  ; a 0 0 a+ n- R: base d?
                                    138 ; check for '$' hexadecimal  
      0025DE                        139 NUMQ0: 
      0025DE CD 06 41         [ 4]  140     CALL OVER   
      0025E1 CD 05 01         [ 4]  141     CALL CAT   
      0025E4                        142     _DOLIT '$'
      0025E4 CD 04 6F         [ 4]    1     CALL DOLIT 
      0025E7 00 24                    2     .word '$' 
      0025E9 CD 08 FA         [ 4]  143     CALL EQUAL ; a 0 0 a+ n- f  
      0025EC                        144     _QBRAN NUMQ1 
      0025EC CD 04 98         [ 4]    1     CALL QBRAN
      0025EF 26 00                    2     .word NUMQ1
      0025F1 CD 0E B3         [ 4]  145     CALL HEX   ; switch to hexadecimal base 
                                    146 ; update a and count 
      0025F4 CD 06 29         [ 4]  147     CALL SWAPP 
      0025F7 CD 0B B2         [ 4]  148     CALL ONEP 
      0025FA CD 06 29         [ 4]  149     CALL SWAPP
      0025FD CD 0B BF         [ 4]  150     CALL ONEM ; a 0 0 a+ n-  R: base d?
                                    151 ; check for minus sign 
      002600                        152 NUMQ1: 
      002600 CD 25 1D         [ 4]  153     CALL nsign 
      002603 CD 05 E2         [ 4]  154     CALL TOR ; R: base d? sign  
                                    155 ; check for end of string     
      002606 CD 07 CC         [ 4]  156     CALL QDUP    ; a dlo dhi a+ cntr R: base d? sign 
      002609                        157     _QBRAN NUMQ4 ; yes , not a number 
      002609 CD 04 98         [ 4]    1     CALL QBRAN
      00260C 26 4B                    2     .word NUMQ4
      00260E CD 25 4A         [ 4]  158     CALL parse_digits
      002611 CD 07 CC         [ 4]  159     CALL QDUP 
      002614 CD 06 62         [ 4]  160     CALL ZEQUAL  
      002617                        161     _QBRAN NUMQ4 ; error not end of string  ( a dlo dhi a+ R: base d? sign )
      002617 CD 04 98         [ 4]    1     CALL QBRAN
      00261A 26 4B                    2     .word NUMQ4
      00261C                        162     _DROP  ; a dlo dhi 
      00261C 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00261F CD 05 34         [ 4]  163     CALL RFROM  ; a dlo dhi sign 
      002622                        164     _QBRAN NUMQ3
      002622 CD 04 98         [ 4]    1     CALL QBRAN
      002625 26 2A                    2     .word NUMQ3
      002627 CD 08 98         [ 4]  165     CALL DNEGA
      00262A                        166 NUMQ3: 
      00262A CD 07 DD         [ 4]  167     CALL ROT ; dlo dhi a  R: base d?
      00262D                        168     _DROP
      00262D 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002630                        169     _DOLIT -2  ; double return -2 flag 
      002630 CD 04 6F         [ 4]    1     CALL DOLIT 
      002633 FF FE                    2     .word -2 
      002635 CD 05 34         [ 4]  170     CALL RFROM ; dlo dhi d? R: base 
      002638                        171     _TBRAN NUMQ8 
      002638 CD 04 A6         [ 4]    1     CALL TBRAN 
      00263B 26 54                    2     .word NUMQ8 
      00263D CD 06 29         [ 4]  172     CALL SWAPP 
      002640                        173     _DROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



      002640 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002643 CD 0B B2         [ 4]  174     CALL ONEP   ; single return -1 flag   
      002646                        175     _BRAN NUMQ8
      002646 CD 04 B4         [ 4]    1     CALL BRAN 
      002649 26 54                    2     .word NUMQ8 
      00264B                        176 NUMQ4: ; not end of string error , ( a dlo dhi a+ cntr R: base d? sign )
                           000001   177 .if WANT_FLOAT
      00264B CD 05 34         [ 4]  178     CALL RFROM ; sign 
      00264E CD 05 34         [ 4]  179     CALL RFROM ; d? 
      002651 CD 2F 6E         [ 4]  180     CALL FLOATQ ; ( a dlo dhi a+ cntr sign d? )    
                           000000   181 .else 
                                    182     ADDW X,#4 ; drop dhi a+  , ( a dlo R: base d? sign ) 
                                    183     ADDW SP,#4 ; drop d? sign  R: base 
                                    184     CLRW Y 
                                    185     LDW (X),Y ; dlo replaced by 0 ( -- a 0 R: base ) 
                                    186 .endif 
                                    187 ; restore original base value     
      002654                        188 NUMQ8: 
      002654 CD 05 34         [ 4]  189     CALL RFROM 
      002657 CD 06 DF         [ 4]  190     CALL BASE 
      00265A CD 04 D1         [ 4]  191     CALL STORE 
      00265D 81               [ 4]  192     RET 
                                    193 
                                    194 
                                    195 
                                    196 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    197 ;   DABS ( d -- d )
                                    198 ;   absolute value of double
                                    199 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00265E                        200     _HEADER DABS,4,"DABS"
      00265E 25 95                    1         .word LINK 
                           002660     2         LINK=.
      002660 04                       3         .byte 4  
      002661 44 41 42 53              4         .ascii "DABS"
      002665                          5         DABS:
      002665 F6               [ 1]  201     LD A,(X) 
      002666 A4 80            [ 1]  202     AND A,#0X80 
      002668 27 03            [ 1]  203     JREQ DABS1 
      00266A CD 08 98         [ 4]  204     CALL DNEGA 
      00266D                        205 DABS1:
      00266D 81               [ 4]  206     RET 
                                    207 
                                    208 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    209 ;  DSIGN ( d -- d f )
                                    210 ;  sign of double 
                                    211 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00266E                        212     _HEADER DSIGN,5,"DSIGN"
      00266E 26 60                    1         .word LINK 
                           002670     2         LINK=.
      002670 05                       3         .byte 5  
      002671 44 53 49 47 4E           4         .ascii "DSIGN"
      002676                          5         DSIGN:
      002676 A6 00            [ 1]  213     LD A,#0 
      002678 90 93            [ 1]  214     LDW Y,X 
      00267A 90 FE            [ 2]  215     LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



      00267C 2A 02            [ 1]  216     JRPL DSIGN1
      00267E A6 FF            [ 1]  217     LD A,#0XFF 
      002680                        218 DSIGN1:
      002680 1D 00 02         [ 2]  219     SUBW X,#2 
      002683 F7               [ 1]  220     LD (X),A 
      002684 E7 01            [ 1]  221     LD (1,X),A 
      002686 81               [ 4]  222     RET 
                                    223 
                                    224 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    225 ;   DS/MOD ( ud us - ur qud )
                                    226 ;   unsigned divide double by single 
                                    227 ;   return double quotient 
                                    228 ;   and single remainder 
                                    229 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002687                        230     _HEADER DSLMOD,6,"DS/MOD"
      002687 26 70                    1         .word LINK 
                           002689     2         LINK=.
      002689 06                       3         .byte 6  
      00268A 44 53 2F 4D 4F 44        4         .ascii "DS/MOD"
      002690                          5         DSLMOD:
      002690 90 93            [ 1]  231         LDW     Y,X             ; stack pointer to Y
      002692 FE               [ 2]  232         LDW     X,(X)           ; un
      002693 BF 26            [ 2]  233         LDW     YTEMP,X         ; save un
      002695 93               [ 1]  234         LDW     X,Y
      002696 89               [ 2]  235         PUSHW   X               ; save stack pointer
      002697 90 89            [ 2]  236         PUSHW   Y 
      002699 EE 02            [ 2]  237         LDW     X,(2,X)           ; X=udh
      00269B 90 BE 26         [ 2]  238         LDW     Y,YTEMP         ; divisor 
      00269E 65               [ 2]  239         DIVW    X,Y 
      00269F BF 24            [ 2]  240         LDW     XTEMP,X         ; QUOTIENT hi 
      0026A1 93               [ 1]  241         LDW     X,Y             ; remainder in X 
      0026A2 90 85            [ 2]  242         POPW    Y 
      0026A4 90 EE 04         [ 2]  243         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      0026A7 A6 10            [ 1]  244         LD      A,#16           ; loop count
      0026A9 90 58            [ 2]  245         SLLW    Y               ; udl shift udl into udh
      0026AB                        246 DSLMOD3:
      0026AB 59               [ 2]  247         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      0026AC 25 04            [ 1]  248         JRC     DSLMODa         ; if carry out of rotate
      0026AE B3 26            [ 2]  249         CPW     X,YTEMP         ; compare udh to un
      0026B0 25 05            [ 1]  250         JRULT   DSLMOD4         ; can't subtract
      0026B2                        251 DSLMODa:
      0026B2 72 B0 00 26      [ 2]  252         SUBW    X,YTEMP         ; can subtract
      0026B6 98               [ 1]  253         RCF
      0026B7                        254 DSLMOD4:
      0026B7 8C               [ 1]  255         CCF                     ; quotient bit
      0026B8 90 59            [ 2]  256         RLCW    Y               ; rotate into quotient, rotate out udl
      0026BA 4A               [ 1]  257         DEC     A               ; repeat
      0026BB 26 EE            [ 1]  258         JRNE    DSLMOD3           ; if A == 0
      0026BD                        259 DSLMODb:
      0026BD BF 26            [ 2]  260         LDW     YTEMP,X         ; done, save remainder
      0026BF 85               [ 2]  261         POPW    X               ; restore stack pointer
      0026C0 EF 02            [ 2]  262         LDW     (2,X),Y           ; save quotient low 
      0026C2 90 BE 24         [ 2]  263         LDW     Y,XTEMP         ; quotient hi 
      0026C5 FF               [ 2]  264         LDW     (X),Y           ; save quotient hi 
      0026C6 90 BE 26         [ 2]  265         LDW     Y,YTEMP         ; remainder onto stack
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      0026C9 EF 04            [ 2]  266         LDW     (4,X),Y
      0026CB 81               [ 4]  267         RET 
                                    268 
                                    269 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    270 ;   D# ( d -- d )
                                    271 ;   extract least digit 
                                    272 ;   from double integer 
                                    273 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026CC                        274     _HEADER DDIG,2,"D#"
      0026CC 26 89                    1         .word LINK 
                           0026CE     2         LINK=.
      0026CE 02                       3         .byte 2  
      0026CF 44 23                    4         .ascii "D#"
      0026D1                          5         DDIG:
      0026D1 CD 06 DF         [ 4]  275     CALL BASE 
      0026D4 CD 04 E3         [ 4]  276     CALL AT 
      0026D7 CD 26 90         [ 4]  277     CALL DSLMOD
      0026DA CD 07 DD         [ 4]  278     CALL ROT   
      0026DD CD 0D DC         [ 4]  279     CALL DIGIT 
      0026E0 CD 0E 28         [ 4]  280     CALL HOLD 
      0026E3 81               [ 4]  281     RET 
                                    282 
                                    283 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    284 ;    D#S ( d -- s )
                                    285 ;   extract digit from double 
                                    286 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026E4                        287     _HEADER DDIGS,3,"D#S"
      0026E4 26 CE                    1         .word LINK 
                           0026E6     2         LINK=.
      0026E6 03                       3         .byte 3  
      0026E7 44 23 53                 4         .ascii "D#S"
      0026EA                          5         DDIGS:
      0026EA CD 26 D1         [ 4]  288     CALL    DDIG 
      0026ED CD 08 27         [ 4]  289     CALL    DDUP 
      0026F0 CD 28 56         [ 4]  290     CALL    DZEQUAL
      0026F3                        291     _QBRAN  DDIGS 
      0026F3 CD 04 98         [ 4]    1     CALL QBRAN
      0026F6 26 EA                    2     .word DDIGS
      0026F8 CD 06 0F         [ 4]  292     CALL    DROP 
      0026FB 81               [ 4]  293     RET 
                                    294 
                                    295 
                                    296 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    297 ;   D. ( d -- )
                                    298 ;   display double integer 
                                    299 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026FC                        300     _HEADER DDOT,2,"D."
      0026FC 26 E6                    1         .word LINK 
                           0026FE     2         LINK=.
      0026FE 02                       3         .byte 2  
      0026FF 44 2E                    4         .ascii "D."
      002701                          5         DDOT:
      002701 CD 0F 54         [ 4]  301     CALL SPACE 
      002704 CD 26 76         [ 4]  302     CALL DSIGN 
      002707 CD 05 E2         [ 4]  303     CALL TOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



      00270A CD 05 45         [ 4]  304     CALL RAT 
      00270D                        305     _QBRAN DDOT0
      00270D CD 04 98         [ 4]    1     CALL QBRAN
      002710 27 15                    2     .word DDOT0
      002712 CD 08 98         [ 4]  306     CALL DNEGA 
      002715                        307 DDOT0:     
      002715 CD 0E 18         [ 4]  308     CALL BDIGS 
      002718 CD 26 EA         [ 4]  309     CALL DDIGS 
      00271B CD 05 34         [ 4]  310     CALL RFROM 
      00271E                        311     _QBRAN DDOT1 
      00271E CD 04 98         [ 4]    1     CALL QBRAN
      002721 27 2B                    2     .word DDOT1
      002723                        312     _DOLIT '-' 
      002723 CD 04 6F         [ 4]    1     CALL DOLIT 
      002726 00 2D                    2     .word '-' 
      002728 CD 0E 28         [ 4]  313     CALL HOLD 
      00272B                        314 DDOT1: 
      00272B CD 0E 7D         [ 4]  315     CALL EDIGS 
      00272E CD 0F 7E         [ 4]  316     CALL TYPES     
      002731 81               [ 4]  317     RET 
                                    318 
                                    319 
                                    320 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    321 ;  UDS* ( ud u -- ud*u )
                                    322 ;  uint32*uint16 
                                    323 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002732                        324     _HEADER UDSSTAR,4,"UDS*"
      002732 26 FE                    1         .word LINK 
                           002734     2         LINK=.
      002734 04                       3         .byte 4  
      002735 55 44 53 2A              4         .ascii "UDS*"
      002739                          5         UDSSTAR:
      002739 CD 05 E2         [ 4]  325     CALL TOR 
      00273C CD 06 29         [ 4]  326     CALL SWAPP 
      00273F CD 05 45         [ 4]  327     CALL RAT 
      002742 CD 0A E7         [ 4]  328     CALL UMSTA ; udlo*u 
      002745 CD 07 DD         [ 4]  329     CALL ROT 
      002748 CD 05 34         [ 4]  330     CALL RFROM 
      00274B CD 0A E7         [ 4]  331     CALL UMSTA ; udhi*u 
      00274E                        332     _DROP  ; drop overflow 
      00274E 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002751 CD 08 3C         [ 4]  333     CALL PLUS  ; udlo*u+(uhi*u<<16)
      002754 81               [ 4]  334     RET 
                                    335 
                                    336 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    337 ; multiply double by unsigned single 
                                    338 ; return double 
                                    339 ;  ( d u -- d )
                                    340 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002755                        341     _HEADER DSSTAR,3,"DS*"
      002755 27 34                    1         .word LINK 
                           002757     2         LINK=.
      002757 03                       3         .byte 3  
      002758 44 53 2A                 4         .ascii "DS*"
      00275B                          5         DSSTAR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



                                    342 ;DSSTAR:
      00275B CD 05 E2         [ 4]  343     CALL TOR
      00275E CD 26 76         [ 4]  344     CALL DSIGN 
      002761 CD 07 FC         [ 4]  345     CALL NROT 
      002764 CD 26 65         [ 4]  346     CALL DABS
      002767 CD 05 34         [ 4]  347     CALL RFROM 
      00276A CD 27 39         [ 4]  348     CALL UDSSTAR  
      00276D CD 07 DD         [ 4]  349     CALL ROT 
      002770                        350     _QBRAN DSSTAR3 
      002770 CD 04 98         [ 4]    1     CALL QBRAN
      002773 27 78                    2     .word DSSTAR3
      002775 CD 08 98         [ 4]  351     CALL DNEGA 
      002778                        352 DSSTAR3:
      002778 81               [ 4]  353     RET 
                                    354 
                                    355 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    356 ;  2SWAP ( d1 d2 -- d2 d1 )
                                    357 ;  swap double 
                                    358 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002779                        359     _HEADER DSWAP,5,"2SWAP"
      002779 27 57                    1         .word LINK 
                           00277B     2         LINK=.
      00277B 05                       3         .byte 5  
      00277C 32 53 57 41 50           4         .ascii "2SWAP"
      002781                          5         DSWAP:
      002781 90 93            [ 1]  360     LDW Y,X 
      002783 90 FE            [ 2]  361     LDW Y,(Y)
      002785 90 BF 26         [ 2]  362     LDW YTEMP,Y ; d2 hi 
      002788 90 93            [ 1]  363     LDW Y,X 
      00278A 90 EE 02         [ 2]  364     LDW Y,(2,Y)
      00278D 90 BF 24         [ 2]  365     LDW XTEMP,Y  ; d2 lo 
      002790 90 93            [ 1]  366     LDW Y,X 
      002792 90 EE 04         [ 2]  367     LDW Y,(4,Y)  ; d1 hi 
      002795 FF               [ 2]  368     LDW (X),Y 
      002796 90 93            [ 1]  369     LDW Y,X
      002798 90 EE 06         [ 2]  370     LDW Y,(6,Y)  ; d1 lo 
      00279B EF 02            [ 2]  371     LDW (2,X),Y
      00279D 90 BE 26         [ 2]  372     LDW Y,YTEMP  
      0027A0 EF 04            [ 2]  373     LDW (4,X),Y 
      0027A2 90 BE 24         [ 2]  374     LDW Y,XTEMP 
      0027A5 EF 06            [ 2]  375     LDW (6,X),Y 
      0027A7 81               [ 4]  376     RET 
                                    377 
                                    378 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    379 ;    DCLZ ( d -- u )
                                    380 ;    double count leading zeros
                                    381 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027A8                        382     _HEADER DCLZ,4,"DCLZ"
      0027A8 27 7B                    1         .word LINK 
                           0027AA     2         LINK=.
      0027AA 04                       3         .byte 4  
      0027AB 44 43 4C 5A              4         .ascii "DCLZ"
      0027AF                          5         DCLZ:
      0027AF 4F               [ 1]  383     CLR A 
      0027B0 90 93            [ 1]  384     LDW Y,X 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



      0027B2 90 FE            [ 2]  385     LDW Y,(Y)
      0027B4 2B 18            [ 1]  386     JRMI DCLZ8 ; no leading zero 
      0027B6 27 09            [ 1]  387     JREQ DCLZ4 ; >=16 
      0027B8                        388 DCLZ1: ; <16
      0027B8 90 58            [ 2]  389     SLLW Y
      0027BA 4C               [ 1]  390     INC A 
      0027BB 90 5D            [ 2]  391     TNZW Y 
      0027BD 2B 0F            [ 1]  392     JRMI DCLZ8
      0027BF 20 F7            [ 2]  393     JRA DCLZ1 
      0027C1                        394 DCLZ4: ; >=16 
      0027C1 A6 10            [ 1]  395     LD A,#16 
      0027C3 90 93            [ 1]  396     LDW Y,X 
      0027C5 90 EE 02         [ 2]  397     LDW Y,(2,Y)
      0027C8 2B 04            [ 1]  398     JRMI DCLZ8 
      0027CA 26 EC            [ 1]  399     JRNE DCLZ1 
      0027CC AB 10            [ 1]  400     ADD A,#16
      0027CE                        401 DCLZ8: 
      0027CE 1C 00 02         [ 2]  402     ADDW X,#2 
      0027D1 90 5F            [ 1]  403     CLRW Y 
      0027D3 90 97            [ 1]  404     LD YL,A 
      0027D5 FF               [ 2]  405     LDW (X),Y 
      0027D6 81               [ 4]  406     RET 
                                    407 
                                    408 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    409 ;   <2ROT ( d1 d2 d3 -- d3 d1 d2 )
                                    410 ;   rotate left doubles 
                                    411 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027D7                        412     _HEADER NDROT,5,"<2ROT"
      0027D7 27 AA                    1         .word LINK 
                           0027D9     2         LINK=.
      0027D9 05                       3         .byte 5  
      0027DA 3C 32 52 4F 54           4         .ascii "<2ROT"
      0027DF                          5         NDROT:
                                    413 ; save d3 in temp 
      0027DF 90 93            [ 1]  414     LDW Y,X 
      0027E1 90 FE            [ 2]  415     LDW Y,(Y)
      0027E3 90 BF 26         [ 2]  416     LDW YTEMP,Y  ; d3 hi 
      0027E6 90 93            [ 1]  417     LDW Y,X 
      0027E8 90 EE 02         [ 2]  418     LDW Y,(2,Y)
      0027EB 90 BF 24         [ 2]  419     LDW XTEMP,Y  ; d3 lo 
                                    420 ; put d2 in d1 slot 
      0027EE 90 93            [ 1]  421     LDW Y,X 
      0027F0 90 EE 04         [ 2]  422     LDW Y,(4,Y) 
      0027F3 FF               [ 2]  423     LDW (X),Y   ; d2 hi 
      0027F4 90 93            [ 1]  424     LDW Y,X 
      0027F6 90 EE 06         [ 2]  425     LDW Y,(6,Y)
      0027F9 EF 02            [ 2]  426     LDW (2,X),Y ; d2 lo
                                    427 ; put d1 in d2 slot 
      0027FB 90 93            [ 1]  428     LDW Y,X 
      0027FD 90 EE 08         [ 2]  429     LDW Y,(8,Y) 
      002800 EF 04            [ 2]  430     LDW (4,X),Y ; d1 hi 
      002802 90 93            [ 1]  431     LDW Y,X 
      002804 90 EE 0A         [ 2]  432     LDW Y,(10,Y)
      002807 EF 06            [ 2]  433     LDW (6,X),Y  ; d1 lo 
                                    434 ; put d3 in d1 slot 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



      002809 90 BE 26         [ 2]  435     LDW Y,YTEMP 
      00280C EF 08            [ 2]  436     LDW (8,X),Y  ; d3 hi 
      00280E 90 BE 24         [ 2]  437     LDW Y,XTEMP 
      002811 EF 0A            [ 2]  438     LDW (10,X),Y  ; d3 lo 
      002813 81               [ 4]  439     RET 
                                    440 
                                    441 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    442 ;   2ROT ( d1 d2 d3 -- d2 d3 d1 )
                                    443 ;   rotate right doubles 
                                    444 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002814                        445     _HEADER DROT,4,"2ROT"
      002814 27 D9                    1         .word LINK 
                           002816     2         LINK=.
      002816 04                       3         .byte 4  
      002817 32 52 4F 54              4         .ascii "2ROT"
      00281B                          5         DROT:
                                    446 ; save d3 in temp 
      00281B 90 93            [ 1]  447     LDW Y,X 
      00281D 90 FE            [ 2]  448     LDW Y,(Y)
      00281F 90 BF 26         [ 2]  449     LDW YTEMP,Y ; d3 hi 
      002822 90 93            [ 1]  450     LDW Y,X 
      002824 90 EE 02         [ 2]  451     LDW Y,(2,Y)
      002827 90 BF 24         [ 2]  452     LDW XTEMP,Y ; d3 lo 
                                    453 ; put d1 in d3 slot 
      00282A 90 93            [ 1]  454     LDW Y,X 
      00282C 90 EE 08         [ 2]  455     LDW Y,(8,Y)
      00282F FF               [ 2]  456     LDW (X),Y  ; d1 hi 
      002830 90 93            [ 1]  457     LDW Y,X 
      002832 90 EE 0A         [ 2]  458     LDW Y,(10,Y) 
      002835 EF 02            [ 2]  459     LDW (2,X),Y ; d1 lo 
                                    460 ; put d2 in d1 slot 
      002837 90 93            [ 1]  461     LDW Y,X 
      002839 90 EE 04         [ 2]  462     LDW Y,(4,Y) ; d2 hi 
      00283C EF 08            [ 2]  463     LDW (8,X),Y 
      00283E 90 93            [ 1]  464     LDW Y,X 
      002840 90 EE 06         [ 2]  465     LDW Y,(6,Y) ; d2 lo 
      002843 EF 0A            [ 2]  466     LDW (10,X),Y 
                                    467 ; put d3 in d2 slot 
      002845 90 BE 26         [ 2]  468     LDW Y,YTEMP 
      002848 EF 04            [ 2]  469     LDW (4,X),Y 
      00284A 90 BE 24         [ 2]  470     LDW Y,XTEMP 
      00284D EF 06            [ 2]  471     LDW (6,X),Y 
      00284F 81               [ 4]  472     RET 
                                    473 
                                    474 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    475 ;    D0= ( d -- 0|-1 )
                                    476 ;    check if double is 0 
                                    477 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002850                        478     _HEADER DZEQUAL,3,"D0="
      002850 28 16                    1         .word LINK 
                           002852     2         LINK=.
      002852 03                       3         .byte 3  
      002853 44 30 3D                 4         .ascii "D0="
      002856                          5         DZEQUAL:
      002856 4F               [ 1]  479     CLR A  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



      002857 90 93            [ 1]  480     LDW Y,X 
      002859 90 FE            [ 2]  481     LDW Y,(Y)
      00285B 26 09            [ 1]  482     JRNE ZEQ1 
      00285D 90 93            [ 1]  483     LDW Y,X 
      00285F 90 EE 02         [ 2]  484     LDW Y,(2,Y)
      002862 26 02            [ 1]  485     JRNE ZEQ1 
      002864 A6 FF            [ 1]  486     LD A,#0xFF
      002866                        487 ZEQ1:
      002866 1C 00 02         [ 2]  488     ADDW X,#CELLL 
      002869 F7               [ 1]  489     LD (X),A
      00286A E7 01            [ 1]  490     LD (1,X),A
      00286C 81               [ 4]  491 	RET     
                                    492 
                                    493 
                                    494 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    495 ;   D= ( d1 d2 -- f )
                                    496 ;   d1==d2?
                                    497 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00286D                        498     _HEADER DEQUAL,2,"D="
      00286D 28 52                    1         .word LINK 
                           00286F     2         LINK=.
      00286F 02                       3         .byte 2  
      002870 44 3D                    4         .ascii "D="
      002872                          5         DEQUAL:
      002872 A6 00            [ 1]  499     LD A,#0 
      002874 90 93            [ 1]  500     LDW Y,X 
      002876 90 FE            [ 2]  501     LDW Y,(Y)
      002878 E3 04            [ 2]  502     CPW Y,(4,X)
      00287A 26 0B            [ 1]  503     JRNE DEQU4 
      00287C 90 93            [ 1]  504     LDW Y,X 
      00287E 90 EE 02         [ 2]  505     LDW Y,(2,Y)
      002881 E3 06            [ 2]  506     CPW Y,(6,X)
      002883 26 02            [ 1]  507     JRNE DEQU4 
      002885 A6 FF            [ 1]  508     LD A,#0XFF
      002887                        509 DEQU4:
      002887 1C 00 06         [ 2]  510     ADDW X,#6
      00288A F7               [ 1]  511     LD (X),A 
      00288B E7 01            [ 1]  512     LD (1,X),A 
      00288D 81               [ 4]  513     RET 
                                    514 
                                    515 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    516 ;   D> ( d1 d2 -- f )
                                    517 ;   d1>d2?
                                    518 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00288E                        519     _HEADER DGREAT,2,"D>"
      00288E 28 6F                    1         .word LINK 
                           002890     2         LINK=.
      002890 02                       3         .byte 2  
      002891 44 3E                    4         .ascii "D>"
      002893                          5         DGREAT:
      002893 CD 27 81         [ 4]  520     CALL DSWAP 
      002896 CC 28 9E         [ 2]  521     JP DLESS 
                                    522 
                                    523 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    524 ;   D< ( d1 d2 -- f )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



                                    525 ;   d1<d2? 
                                    526 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002899                        527     _HEADER DLESS,2,"D<"
      002899 28 90                    1         .word LINK 
                           00289B     2         LINK=.
      00289B 02                       3         .byte 2  
      00289C 44 3C                    4         .ascii "D<"
      00289E                          5         DLESS:
      00289E CD 2B C5         [ 4]  528     CALL DSUB
      0028A1 CD 0C 1E         [ 4]  529     CALL ZERO
      0028A4 CD 07 FC         [ 4]  530     CALL NROT  
      0028A7 CD 28 B9         [ 4]  531     CALL DZLESS 
      0028AA                        532     _QBRAN DLESS4
      0028AA CD 04 98         [ 4]    1     CALL QBRAN
      0028AD 28 B2                    2     .word DLESS4
      0028AF CD 08 75         [ 4]  533     CALL INVER  
      0028B2                        534 DLESS4:
      0028B2 81               [ 4]  535     RET
                                    536 
                                    537 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    538 ;  D0< ( d -- f )
                                    539 ;  d<0? 
                                    540 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028B3                        541     _HEADER DZLESS,3,"D0<"
      0028B3 28 9B                    1         .word LINK 
                           0028B5     2         LINK=.
      0028B5 03                       3         .byte 3  
      0028B6 44 30 3C                 4         .ascii "D0<"
      0028B9                          5         DZLESS:
      0028B9 A6 00            [ 1]  542     LD A,#0 
      0028BB 90 93            [ 1]  543     LDW Y,X 
      0028BD 90 FE            [ 2]  544     LDW Y,(Y)
      0028BF 2A 02            [ 1]  545     JRPL DZLESS1 
      0028C1 A6 FF            [ 1]  546     LD A,#0XFF 
      0028C3                        547 DZLESS1:
      0028C3 1C 00 02         [ 2]  548     ADDW X,#CELLL 
      0028C6 F7               [ 1]  549     LD (X),A 
      0028C7 E7 01            [ 1]  550     LD (1,X),A    
      0028C9 81               [ 4]  551     RET 
                                    552 
                                    553 
                                    554 
                                    555 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    556 ;   2>R ( d -- R: d )
                                    557 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028CA                        558     _HEADER DTOR,3,"2>R"
      0028CA 28 B5                    1         .word LINK 
                           0028CC     2         LINK=.
      0028CC 03                       3         .byte 3  
      0028CD 32 3E 52                 4         .ascii "2>R"
      0028D0                          5         DTOR:
      0028D0 90 85            [ 2]  559     POPW Y 
      0028D2 90 BF 26         [ 2]  560     LDW YTEMP,Y 
      0028D5 90 93            [ 1]  561     LDW Y,X 
      0028D7 90 EE 02         [ 2]  562     LDW Y,(2,Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



      0028DA 90 89            [ 2]  563     PUSHW Y   ; d low 
      0028DC 90 93            [ 1]  564     LDW Y,X 
      0028DE 90 FE            [ 2]  565     LDW Y,(Y)
      0028E0 90 89            [ 2]  566     PUSHW Y   ; d hi 
      0028E2 1C 00 04         [ 2]  567     ADDW X,#4  
      0028E5 92 CC 26         [ 5]  568     JP [YTEMP]
                                    569 
                                    570 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    571 ;  2R> ( -- d ) R: d --      
                                    572 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028E8                        573     _HEADER DRFROM,3,"2R>"
      0028E8 28 CC                    1         .word LINK 
                           0028EA     2         LINK=.
      0028EA 03                       3         .byte 3  
      0028EB 32 52 3E                 4         .ascii "2R>"
      0028EE                          5         DRFROM:
      0028EE 90 85            [ 2]  574     POPW Y      ; d hi 
      0028F0 90 BF 26         [ 2]  575     LDW YTEMP,Y 
      0028F3 1D 00 04         [ 2]  576     SUBW X,#4
      0028F6 90 85            [ 2]  577     POPW Y       ; d hi 
      0028F8 FF               [ 2]  578     LDW (X),Y 
      0028F9 90 85            [ 2]  579     POPW Y       ; d low  
      0028FB EF 02            [ 2]  580     LDW (2,X),Y 
      0028FD 92 CC 26         [ 5]  581     JP [YTEMP]
                                    582     
                                    583 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    584 ;   2R@ ( -- d )
                                    585 ;   fecth a double from RSTACK
                                    586 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002900                        587     _HEADER DRAT,3,"2R@"
      002900 28 EA                    1         .word LINK 
                           002902     2         LINK=.
      002902 03                       3         .byte 3  
      002903 32 52 40                 4         .ascii "2R@"
      002906                          5         DRAT:
      002906 90 85            [ 2]  588     POPW Y 
      002908 90 BF 26         [ 2]  589     LDW YTEMP,Y 
      00290B 1D 00 04         [ 2]  590     SUBW X,#4 
      00290E 16 01            [ 2]  591     LDW Y,(1,SP)
      002910 FF               [ 2]  592     LDW (X),Y 
      002911 16 03            [ 2]  593     LDW Y,(3,SP)
      002913 EF 02            [ 2]  594     LDW (2,X),Y 
      002915 92 CC 26         [ 5]  595     JP [YTEMP]
                                    596 
                                    597 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    598 ;  2VARIABLE <name> 
                                    599 ;  create a double variable 
                                    600 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002918                        601     _HEADER DVARIA,9,"2VARIABLE"
      002918 29 02                    1         .word LINK 
                           00291A     2         LINK=.
      00291A 09                       3         .byte 9  
      00291B 32 56 41 52 49 41 42     4         .ascii "2VARIABLE"
             4C 45
      002924                          5         DVARIA:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



      002924 CD 0C FB         [ 4]  602         CALL HERE
      002927 CD 06 19         [ 4]  603         CALL DUPP
      00292A                        604         _DOLIT 4  
      00292A CD 04 6F         [ 4]    1     CALL DOLIT 
      00292D 00 04                    2     .word 4 
      00292F CD 08 3C         [ 4]  605         CALL PLUS 
      002932 CD 07 70         [ 4]  606         CALL VPP 
      002935 CD 04 D1         [ 4]  607         CALL STORE
      002938 CD 18 CC         [ 4]  608         CALL CREAT
      00293B CD 06 19         [ 4]  609         CALL DUPP
      00293E CD 15 3F         [ 4]  610         CALL COMMA
      002941 CD 0C 1E         [ 4]  611         CALL ZERO
      002944 CD 06 41         [ 4]  612         CALL OVER 
      002947 CD 04 D1         [ 4]  613         CALL STORE 
      00294A CD 0C 1E         [ 4]  614         CALL ZERO 
      00294D CD 06 29         [ 4]  615         CALL SWAPP 
      002950 CD 04 D1         [ 4]  616         CALL STORE
      002953 CD 22 41         [ 4]  617         CALL FMOVE ; move definition to FLASH
      002956 CD 07 CC         [ 4]  618         CALL QDUP 
      002959 CD 04 98         [ 4]  619         CALL QBRAN 
      00295C 19 19                  620         .word SET_RAMLAST   
      00295E CD 1C E9         [ 4]  621         call UPDATVP  ; don't update if variable kept in RAM.
      002961 CD 22 D5         [ 4]  622         CALL UPDATPTR
      002964 81               [ 4]  623         RET         
                                    624 
                                    625 
                                    626 
                                    627 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    628 ;  2LITERAL ( d -- )
                                    629 ;  compile double literal 
                                    630 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002965                        631     _HEADER DLITER,IMEDD+8,"2LITERAL"
      002965 29 1A                    1         .word LINK 
                           002967     2         LINK=.
      002967 88                       3         .byte IMEDD+8  
      002968 32 4C 49 54 45 52 41     4         .ascii "2LITERAL"
             4C
      002970                          5         DLITER:
      002970 CD 15 84         [ 4]  632     CALL COMPI 
      002973 29 7B                  633     .word do2lit 
      002975 CD 15 3F         [ 4]  634     CALL COMMA 
      002978 CC 15 3F         [ 2]  635     JP   COMMA 
                                    636 
                                    637 
                                    638 ; runtime for 2LITERAL 
      00297B                        639 do2lit:
      00297B 1D 00 04         [ 2]  640     SUBW X,#4 
      00297E 16 01            [ 2]  641     LDW Y,(1,SP)
      002980 90 FE            [ 2]  642     LDW Y,(Y)
      002982 FF               [ 2]  643     LDW (X),Y 
      002983 16 01            [ 2]  644     LDW Y,(1,SP)
      002985 90 EE 02         [ 2]  645     LDW Y,(2,Y)
      002988 EF 02            [ 2]  646     LDW (2,X),Y 
      00298A 90 85            [ 2]  647     POPW Y 
      00298C 90 EC 04         [ 2]  648     JP (4,Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



                                    649 
                                    650 
                                    651 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    652 ;   2OVER ( d1 d2 -- d1 d2 d1 )
                                    653 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00298F                        654     _HEADER DOVER,5,"2OVER"
      00298F 29 67                    1         .word LINK 
                           002991     2         LINK=.
      002991 05                       3         .byte 5  
      002992 32 4F 56 45 52           4         .ascii "2OVER"
      002997                          5         DOVER:
      002997 90 93            [ 1]  655     LDW Y,X 
      002999 1D 00 04         [ 2]  656     SUBW X,#4 
      00299C 90 89            [ 2]  657     PUSHW Y 
      00299E 90 EE 04         [ 2]  658     LDW Y,(4,Y)  ; d1 hi 
      0029A1 FF               [ 2]  659     LDW (X),Y 
      0029A2 90 85            [ 2]  660     POPW Y 
      0029A4 90 EE 06         [ 2]  661     LDW Y,(6,Y)  ;d1 lo 
      0029A7 EF 02            [ 2]  662     LDW (2,X),Y 
      0029A9 81               [ 4]  663     RET 
                                    664 
                                    665 
                                    666 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    667 ;   D2/ ( d -- d/2 )
                                    668 ;   divide double by 2 
                                    669 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0029AA                        670     _HEADER D2SLASH,3,"D2/"
      0029AA 29 91                    1         .word LINK 
                           0029AC     2         LINK=.
      0029AC 03                       3         .byte 3  
      0029AD 44 32 2F                 4         .ascii "D2/"
      0029B0                          5         D2SLASH:
      0029B0 90 93            [ 1]  671     LDW Y,X 
      0029B2 90 FE            [ 2]  672     LDW Y,(Y)
      0029B4 90 57            [ 2]  673     SRAW Y 
      0029B6 FF               [ 2]  674     LDW (X),Y 
      0029B7 90 93            [ 1]  675     LDW Y,X 
      0029B9 90 EE 02         [ 2]  676     LDW Y,(2,Y)
      0029BC 90 56            [ 2]  677     RRCW Y 
      0029BE EF 02            [ 2]  678     LDW (2,X),Y 
      0029C0 81               [ 4]  679     RET
                                    680 
                                    681 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    682 ;  D2* ( d -- d*2 )
                                    683 ;  multiply double by 2 
                                    684 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0029C1                        685     _HEADER D2STAR,3,"D2*"
      0029C1 29 AC                    1         .word LINK 
                           0029C3     2         LINK=.
      0029C3 03                       3         .byte 3  
      0029C4 44 32 2A                 4         .ascii "D2*"
      0029C7                          5         D2STAR:
      0029C7 90 93            [ 1]  686     LDW Y,X 
      0029C9 90 EE 02         [ 2]  687     LDW Y,(2,Y)
      0029CC 98               [ 1]  688     RCF 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



      0029CD 90 59            [ 2]  689     RLCW Y 
      0029CF EF 02            [ 2]  690     LDW (2,X),Y 
      0029D1 90 93            [ 1]  691     LDW Y,X 
      0029D3 90 FE            [ 2]  692     LDW Y,(Y)
      0029D5 90 59            [ 2]  693     RLCW Y 
      0029D7 FF               [ 2]  694     LDW (X),Y 
      0029D8 81               [ 4]  695     RET 
                                    696 
                                    697 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    698 ;   DLSHIFT ( d n -- d )
                                    699 ;   left shift double 
                                    700 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0029D9                        701     _HEADER DLSHIFT,7,"DLSHIFT"
      0029D9 29 C3                    1         .word LINK 
                           0029DB     2         LINK=.
      0029DB 07                       3         .byte 7  
      0029DC 44 4C 53 48 49 46 54     4         .ascii "DLSHIFT"
      0029E3                          5         DLSHIFT:
      0029E3 E6 01            [ 1]  702     LD A,(1,X) ; shift count 
      0029E5 A4 1F            [ 1]  703     AND A,#31
      0029E7 1C 00 02         [ 2]  704     ADDW X,#CELLL 
      0029EA 90 93            [ 1]  705     LDW Y,X 
      0029EC 90 FE            [ 2]  706     LDW Y,(Y)
      0029EE 90 BF 26         [ 2]  707     LDW YTEMP,Y  ; d hi 
      0029F1 90 93            [ 1]  708     LDW Y,X 
      0029F3 90 EE 02         [ 2]  709     LDW Y,(2,Y)  ; d low 
      0029F6                        710 DLSHIFT1:
      0029F6 4D               [ 1]  711     TNZ A 
      0029F7 27 12            [ 1]  712     JREQ DLSHIFT2 
      0029F9 98               [ 1]  713     RCF 
      0029FA 90 59            [ 2]  714     RLCW Y 
      0029FC 90 89            [ 2]  715     PUSHW Y 
      0029FE 90 BE 26         [ 2]  716     LDW Y,YTEMP 
      002A01 90 59            [ 2]  717     RLCW Y 
      002A03 90 BF 26         [ 2]  718     LDW YTEMP,Y 
      002A06 90 85            [ 2]  719     POPW Y 
      002A08 4A               [ 1]  720     DEC A 
      002A09 20 EB            [ 2]  721     JRA DLSHIFT1 
      002A0B                        722 DLSHIFT2:
      002A0B EF 02            [ 2]  723     LDW (2,X),Y 
      002A0D 90 BE 26         [ 2]  724     LDW Y,YTEMP 
      002A10 FF               [ 2]  725     LDW (X),Y 
      002A11 81               [ 4]  726     RET 
                                    727 
                                    728 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    729 ;  DRSHIFT ( d n -- d )
                                    730 ;  shift right n bits 
                                    731 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002A12                        732     _HEADER DRSHIFT,7,"DRSHIFT"
      002A12 29 DB                    1         .word LINK 
                           002A14     2         LINK=.
      002A14 07                       3         .byte 7  
      002A15 44 52 53 48 49 46 54     4         .ascii "DRSHIFT"
      002A1C                          5         DRSHIFT:
      002A1C E6 01            [ 1]  733     LD A,(1,X)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



      002A1E A4 1F            [ 1]  734     AND A,#31
      002A20 1C 00 02         [ 2]  735     ADDW X,#2 
      002A23                        736 DRSHIFT1:
      002A23 4D               [ 1]  737     TNZ A 
      002A24 27 13            [ 1]  738     JREQ DRSHIFT2 
      002A26 90 93            [ 1]  739     LDW Y,X 
      002A28 90 FE            [ 2]  740     LDW Y,(Y)
      002A2A 90 54            [ 2]  741     SRLW Y 
      002A2C FF               [ 2]  742     LDW (X),Y 
      002A2D 90 93            [ 1]  743     LDW Y,X 
      002A2F 90 EE 02         [ 2]  744     LDW Y,(2,Y)
      002A32 90 56            [ 2]  745     RRCW Y 
      002A34 EF 02            [ 2]  746     LDW (2,X),Y 
      002A36 4A               [ 1]  747     DEC A
      002A37 20 EA            [ 2]  748     JRA DRSHIFT1  
      002A39                        749 DRSHIFT2:
      002A39 81               [ 4]  750     RET 
                                    751 
                                    752 
                                    753 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    754 ;   D* ( d1 d2 -- d3 )
                                    755 ;   double product 
                                    756 ;   d3 = d1 * d2
                                    757 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002A3A                        758     _HEADER DSTAR,2,"D*"
      002A3A 2A 14                    1         .word LINK 
                           002A3C     2         LINK=.
      002A3C 02                       3         .byte 2  
      002A3D 44 2A                    4         .ascii "D*"
      002A3F                          5         DSTAR:
      002A3F CD 06 19         [ 4]  759     CALL DUPP 
      002A42 CD 06 50         [ 4]  760     CALL ZLESS  
      002A45 CD 05 E2         [ 4]  761     CALL TOR    ; R: d2sign 
      002A48 CD 26 65         [ 4]  762     CALL DABS   
      002A4B CD 05 34         [ 4]  763     CALL RFROM 
      002A4E CD 07 FC         [ 4]  764     CALL NROT  ; d1 d2s ud2
      002A51 CD 28 D0         [ 4]  765     CALL DTOR  ; d1 d2s R: ud2  
      002A54 CD 05 E2         [ 4]  766     CALL TOR   ; d1 R: ud2 d2s   
      002A57 CD 06 19         [ 4]  767     CALL DUPP 
      002A5A CD 06 50         [ 4]  768     CALL ZLESS 
      002A5D CD 05 34         [ 4]  769     CALL RFROM 
      002A60 CD 06 9F         [ 4]  770     CALL XORR   
      002A63 CD 05 E2         [ 4]  771     CALL TOR   ; d1 R: ud2 prod_sign  
      002A66 CD 26 65         [ 4]  772     CALL DABS ; ud1 R: ud2 ps  
      002A69 CD 05 34         [ 4]  773     CALL RFROM  
      002A6C CD 07 FC         [ 4]  774     CALL NROT   ; ps ud1 
      002A6F CD 08 27         [ 4]  775     CALL DDUP   ; ps ud1 ud1  
      002A72 CD 05 34         [ 4]  776     CALL RFROM  ; ps ud1 ud1 ud2hi 
      002A75 CD 27 5B         [ 4]  777     CALL DSSTAR ; ps ud1 dprodhi 
                                    778 ; shift partial product 16 bits left 
      002A78                        779     _DROP   ; drop overflow 
      002A78 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002A7B CD 0C 1E         [ 4]  780     CALL ZERO   ; ps ud1 prodhi 
      002A7E CD 06 29         [ 4]  781     CALL SWAPP  
      002A81 CD 27 81         [ 4]  782     CALL DSWAP  ; ps dprodhi ud1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



      002A84 CD 05 34         [ 4]  783     CALL RFROM  ; ps dprodhi ud1 ud2lo
      002A87 CD 27 5B         [ 4]  784     CALL DSSTAR ; ps  dprodhi dprodlo 
      002A8A CD 2B 93         [ 4]  785     CALL DPLUS
      002A8D CD 07 DD         [ 4]  786     CALL ROT    ; dprod ps 
      002A90                        787     _QBRAN DDSTAR3 
      002A90 CD 04 98         [ 4]    1     CALL QBRAN
      002A93 2A 98                    2     .word DDSTAR3
      002A95 CD 08 98         [ 4]  788     CALL DNEGA 
      002A98                        789 DDSTAR3:  
      002A98 81               [ 4]  790     RET 
                                    791 
                                    792 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    793 ;  UD/MOD ( ud1 ud2 -- dr udq )
                                    794 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002A99                        795     _HEADER UDSLMOD,6,"UD/MOD"
      002A99 2A 3C                    1         .word LINK 
                           002A9B     2         LINK=.
      002A9B 06                       3         .byte 6  
      002A9C 55 44 2F 4D 4F 44        4         .ascii "UD/MOD"
      002AA2                          5         UDSLMOD:
                                    796 ; unsigned double division 
      002AA2 CD 0C 1E         [ 4]  797     CALL ZERO 
      002AA5 CD 0C 1E         [ 4]  798     CALL ZERO
      002AA8 CD 28 D0         [ 4]  799     CALL DTOR ; quotient  R: qlo qhi 
      002AAB CD 29 97         [ 4]  800     CALL DOVER 
      002AAE CD 27 AF         [ 4]  801     CALL DCLZ ; n2, dividend leading zeros  
      002AB1 CD 05 E2         [ 4]  802     CALL TOR 
      002AB4 CD 08 27         [ 4]  803     CALL DDUP    
      002AB7 CD 27 AF         [ 4]  804     CALL DCLZ  ; n1, divisor leading zeros
      002ABA CD 05 34         [ 4]  805     CALL RFROM ; n1 n2 
      002ABD CD 08 D2         [ 4]  806     CALL SUBB  ; loop count 
      002AC0 CD 06 19         [ 4]  807     CALL DUPP
      002AC3 CD 28 D0         [ 4]  808     CALL DTOR  ; ud1 ud2 R: qlo qhi cntr cntr 
      002AC6 CD 05 45         [ 4]  809     CALL RAT    
      002AC9 CD 06 50         [ 4]  810     CALL ZLESS 
      002ACC                        811     _TBRAN UDSLA7 ; quotient is null 
      002ACC CD 04 A6         [ 4]    1     CALL TBRAN 
      002ACF 2B 2E                    2     .word UDSLA7 
      002AD1 CD 05 45         [ 4]  812     CALL RAT 
      002AD4 CD 29 E3         [ 4]  813     CALL DLSHIFT ; align divisor with dividend 
      002AD7                        814 UDSLA3: ; division loop -- dividend divisor  
      002AD7 90 5F            [ 1]  815     CLRW Y 
      002AD9 90 89            [ 2]  816     PUSHW Y  
      002ADB CD 29 97         [ 4]  817     CALL DOVER 
      002ADE CD 29 97         [ 4]  818     CALL DOVER 
      002AE1 CD 28 9E         [ 4]  819     CALL DLESS 
      002AE4                        820     _TBRAN UDSLA4 
      002AE4 CD 04 A6         [ 4]    1     CALL TBRAN 
      002AE7 2A FD                    2     .word UDSLA4 
      002AE9 90 85            [ 2]  821     POPW Y 
      002AEB 72 A9 00 01      [ 2]  822     ADDW Y,#1 
      002AEF 90 89            [ 2]  823     PUSHW Y    ; quotiend least bit 
      002AF1 CD 08 27         [ 4]  824     CALL DDUP  ; dividend divisor divisor 
      002AF4 CD 28 D0         [ 4]  825     CALL DTOR  
      002AF7 CD 2B C5         [ 4]  826     CALL DSUB  ; dividend-divisor 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



      002AFA CD 28 EE         [ 4]  827     CALL DRFROM  ; dividend- divisor  
      002AFD                        828 UDSLA4: ; shift quotient and add 1 bit 
      002AFD 90 85            [ 2]  829     POPW Y 
      002AFF 90 BF 26         [ 2]  830     LDW YTEMP,Y 
      002B02 16 07            [ 2]  831     LDW Y,(7,SP) ; quotient low 
      002B04 98               [ 1]  832     RCF 
      002B05 90 59            [ 2]  833     RLCW Y
      002B07 17 07            [ 2]  834     LDW (7,SP),Y 
      002B09 16 05            [ 2]  835     LDW Y,(5,SP) ; quotient hi 
      002B0B 90 59            [ 2]  836     RLCW Y 
      002B0D 17 05            [ 2]  837     LDW (5,SP),Y 
      002B0F 16 07            [ 2]  838     LDW Y,(7,SP) 
      002B11 72 B9 00 26      [ 2]  839     ADDW Y,YTEMP
      002B15 17 07            [ 2]  840     LDW (7,SP),Y 
      002B17 16 01            [ 2]  841     LDW Y,(1,SP) ; loop counter 
      002B19 90 5D            [ 2]  842     TNZW Y 
      002B1B 27 1C            [ 1]  843     JREQ UDSLA8
      002B1D 72 A2 00 01      [ 2]  844     SUBW Y,#1  
      002B21 17 01            [ 2]  845     LDW (1,SP),Y  
                                    846 ; shift dividend left 1 bit      
      002B23 CD 27 81         [ 4]  847     CALL DSWAP 
      002B26 CD 29 C7         [ 4]  848     CALL D2STAR 
      002B29 CD 27 81         [ 4]  849     CALL DSWAP 
      002B2C 20 A9            [ 2]  850     JRA UDSLA3 
      002B2E                        851 UDSLA7:
      002B2E CD 0C 1E         [ 4]  852     CALL ZERO 
      002B31                        853     _DOLIT 1 
      002B31 CD 04 6F         [ 4]    1     CALL DOLIT 
      002B34 00 01                    2     .word 1 
      002B36 CD 05 BE         [ 4]  854     CALL NRSTO ; R: 0 0 0 cntr    
      002B39                        855 UDSLA8:
      002B39 1C 00 04         [ 2]  856     ADDW X,#4 ; drop divisor
      002B3C CD 05 34         [ 4]  857     CALL RFROM  
      002B3F                        858     _DROP ; drop cntr 
      002B3F 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002B42 CD 05 34         [ 4]  859     CALL RFROM   ; shift count
      002B45 CD 2A 1C         [ 4]  860     CALL DRSHIFT 
                                    861     ; quotient replace dividend 
      002B48 CD 28 EE         [ 4]  862     CALL DRFROM  ; quotient 
      002B4B 81               [ 4]  863     RET 
                                    864 
                                    865 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    866 ;   D/MOD  ( d1 d2 -- dr dq )
                                    867 ;   double division dq=d1/d2
                                    868 ;   dr remainder double 
                                    869 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B4C                        870     _HEADER DDSLMOD,5,"D/MOD"  
      002B4C 2A 9B                    1         .word LINK 
                           002B4E     2         LINK=.
      002B4E 05                       3         .byte 5  
      002B4F 44 2F 4D 4F 44           4         .ascii "D/MOD"
      002B54                          5         DDSLMOD:
      002B54 CD 26 76         [ 4]  871     CALL DSIGN 
      002B57 CD 05 E2         [ 4]  872     CALL TOR   ; R: divisor sign 
      002B5A CD 26 65         [ 4]  873     CALL DABS 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



      002B5D CD 27 81         [ 4]  874     CALL DSWAP 
      002B60 CD 26 76         [ 4]  875     CALL DSIGN ; dividend sign 
      002B63 CD 05 34         [ 4]  876     CALL RFROM 
      002B66 CD 06 9F         [ 4]  877     CALL XORR  ; quotient sign
      002B69 CD 05 E2         [ 4]  878     CALL TOR   ; 
      002B6C CD 26 65         [ 4]  879     CALL DABS  ; d2 ud1 R: sign 
      002B6F CD 27 81         [ 4]  880     CALL DSWAP  ; ud1 ud2 
      002B72 CD 2A A2         [ 4]  881     CALL UDSLMOD ; ud1/ud2 -- dr dq  
      002B75 90 85            [ 2]  882     POPW Y ; sign 
      002B77 90 5D            [ 2]  883     TNZW Y 
      002B79 2A 03            [ 1]  884     JRPL DSLA9 
      002B7B CD 08 98         [ 4]  885     CALL DNEGA ; remainder quotient 
      002B7E                        886 DSLA9: 
      002B7E 81               [ 4]  887     RET 
                                    888 
                                    889 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    890 ;   D/  ( d1 d2 -- dq )
                                    891 ;   division double by double 
                                    892 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B7F                        893     _HEADER DSLASH,2,"D/"
      002B7F 2B 4E                    1         .word LINK 
                           002B81     2         LINK=.
      002B81 02                       3         .byte 2  
      002B82 44 2F                    4         .ascii "D/"
      002B84                          5         DSLASH:
      002B84 CD 2B 54         [ 4]  894     CALL DDSLMOD
      002B87 CD 27 81         [ 4]  895     CALL DSWAP
      002B8A                        896     _DDROP 
      002B8A 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002B8D 81               [ 4]  897     RET 
                                    898 
                                    899 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    900 ;   D+ ( d1 d2 -- d3 )
                                    901 ;   add 2 doubles 
                                    902 ;   d3=d1+d2 
                                    903 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B8E                        904     _HEADER DPLUS,2,"D+"
      002B8E 2B 81                    1         .word LINK 
                           002B90     2         LINK=.
      002B90 02                       3         .byte 2  
      002B91 44 2B                    4         .ascii "D+"
      002B93                          5         DPLUS:
      002B93 90 93            [ 1]  905     LDW Y,X 
      002B95 90 FE            [ 2]  906     LDW Y,(Y)
      002B97 90 BF 26         [ 2]  907     LDW YTEMP,Y ; d2 hi 
      002B9A 90 93            [ 1]  908     LDW Y,X 
      002B9C 90 EE 02         [ 2]  909     LDW Y,(2,Y)
      002B9F 90 BF 24         [ 2]  910     LDW XTEMP,Y ; d2 lo 
      002BA2 1C 00 04         [ 2]  911     ADDW X,#4 
      002BA5 90 93            [ 1]  912     LDW Y,X 
      002BA7 90 EE 02         [ 2]  913     LDW Y,(2,Y) ; d1 lo
      002BAA 72 B9 00 24      [ 2]  914     ADDW Y,XTEMP
      002BAE EF 02            [ 2]  915     LDW (2,X),Y 
      002BB0 90 93            [ 1]  916     LDW Y,X 
      002BB2 90 FE            [ 2]  917     LDW Y,(Y) ; d1 hi 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



      002BB4 24 04            [ 1]  918     JRNC DPLUS1 
      002BB6 72 A9 00 01      [ 2]  919     ADDW Y,#1 
      002BBA                        920 DPLUS1: 
      002BBA 72 B9 00 26      [ 2]  921     ADDW Y,YTEMP 
      002BBE FF               [ 2]  922     LDW (X),Y 
      002BBF 81               [ 4]  923     RET 
                                    924 
                                    925 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    926 ;   D- ( d1 d2 -- d3 )
                                    927 ;   d3=d1-d2 
                                    928 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BC0                        929     _HEADER DSUB,2,"D-"
      002BC0 2B 90                    1         .word LINK 
                           002BC2     2         LINK=.
      002BC2 02                       3         .byte 2  
      002BC3 44 2D                    4         .ascii "D-"
      002BC5                          5         DSUB:
      002BC5 90 93            [ 1]  930     LDW Y,X 
      002BC7 90 FE            [ 2]  931     LDW Y,(Y)
      002BC9 90 BF 26         [ 2]  932     LDW YTEMP,Y ; d2 hi 
      002BCC 90 93            [ 1]  933     LDW Y,X 
      002BCE 90 EE 02         [ 2]  934     LDW Y,(2,Y)
      002BD1 90 BF 24         [ 2]  935     LDW XTEMP,Y ; d2 lo 
      002BD4 1C 00 04         [ 2]  936     ADDW X,#4 
      002BD7 90 93            [ 1]  937     LDW Y,X 
      002BD9 90 EE 02         [ 2]  938     LDW Y,(2,Y) ; d1 lo
      002BDC 72 B2 00 24      [ 2]  939     SUBW Y,XTEMP
      002BE0 EF 02            [ 2]  940     LDW (2,X),Y 
      002BE2 90 93            [ 1]  941     LDW Y,X 
      002BE4 90 FE            [ 2]  942     LDW Y,(Y) ; d1 hi 
      002BE6 24 04            [ 1]  943     JRNC DSUB1 
      002BE8 72 A2 00 01      [ 2]  944     SUBW Y,#1 
      002BEC                        945 DSUB1: 
      002BEC 72 B2 00 26      [ 2]  946     SUBW Y,YTEMP 
      002BF0 FF               [ 2]  947     LDW (X),Y 
      002BF1 81               [ 4]  948     RET 
                                    949 
                                    950 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



                                   4587 .endif 
                           000001  4588 .if WANT_FLOAT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



                                   4589         .include "float.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;*********************************
                                     21 ;    floating point library
                                     22 ;    adapted from 
                                     23 ;    Forth dimensions Vol. IV #1 
                                     24 ;    published in  may/june 1982
                                     25 ;
                                     26 ; Creation date: 2021-06-15 
                                     27 ;
                                     28 ;  This file is part of stm8_eforth 
                                     29 ;  project and same licence apply.
                                     30 ;************************************
                                     31 
                                     32 ;*************************************************
                                     33 ;  FLOAT format double for storage 
                                     34 ;  bits 23:0  signed mantissa
                                     35 ;  bits  31:24  signed exponent
                                     36 ;***********************************************  
                                     37 
                                     38     .module FLOAT 
                                     39 
                           000001    40 .if WANT_DOUBLE 
                                     41 ; already included 
                           000000    42 .else
                                     43 ;  must be included  
                                     44     .include "double.asm"
                                     45 .endif  
                                     46 
                           7FFFFF    47     MAX_MANTISSA = 0x7FFFFF 
                                     48 
                           000001    49     FLOAT_MAJOR=1 
                           000000    50     FLOAT_MINOR=0 
                                     51 
                                     52 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     53 ;   FLOAT-VER ( -- )
                                     54 ;   print library version 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



                                     55 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BF2                         56     _HEADER FVER,9,"FLOAT-VER"
      002BF2 2B C2                    1         .word LINK 
                           002BF4     2         LINK=.
      002BF4 09                       3         .byte 9  
      002BF5 46 4C 4F 41 54 2D 56     4         .ascii "FLOAT-VER"
             45 52
      002BFE                          5         FVER:
      002BFE CD 0F 96         [ 4]   57     CALL CR 
      002C01 CD 0F C3         [ 4]   58     CALL DOTQP 
      002C04 11                      59     .byte  17 
      002C05 66 6C 6F 61 74 33 32    60     .ascii "float32 library, "
             20 6C 69 62 72 61 72
             79 2C 20
      002C16 CD 1B 14         [ 4]   61     CALL PRT_LICENCE 
      002C19 CD 1A EC         [ 4]   62     CALL COPYRIGHT 
      002C1C                         63     _DOLIT FLOAT_MAJOR     
      002C1C CD 04 6F         [ 4]    1     CALL DOLIT 
      002C1F 00 01                    2     .word FLOAT_MAJOR 
      002C21                         64     _DOLIT FLOAT_MINOR 
      002C21 CD 04 6F         [ 4]    1     CALL DOLIT 
      002C24 00 00                    2     .word FLOAT_MINOR 
      002C26 CC 1B 28         [ 2]   65     JP PRINT_VERSION 
                                     66 
                                     67 
                                     68 ;-------------------------
                                     69 ;    FPSW ( -- a )
                                     70 ;    floating state variable
                                     71 ;    bit 0 zero flag 
                                     72 ;    bit 1 negative flag 
                                     73 ;    bit 2 overflow/error flag 
                                     74 ;---------------------------
      002C29                         75     _HEADER FPSW,4,"FPSW"
      002C29 2B F4                    1         .word LINK 
                           002C2B     2         LINK=.
      002C2B 04                       3         .byte 4  
      002C2C 46 50 53 57              4         .ascii "FPSW"
      002C30                          5         FPSW:
      002C30 90 AE 00 08      [ 2]   76 	LDW Y,#UFPSW  
      002C34 1D 00 02         [ 2]   77 	SUBW X,#2
      002C37 FF               [ 2]   78     LDW (X),Y
      002C38 81               [ 4]   79     RET
                                     80 
                                     81 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     82 ;   FRESET ( -- )
                                     83 ;   reset FPSW variable 
                                     84 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
      002C39                         85     _HEADER FRESET,6,"FRESET"
      002C39 2C 2B                    1         .word LINK 
                           002C3B     2         LINK=.
      002C3B 06                       3         .byte 6  
      002C3C 46 52 45 53 45 54        4         .ascii "FRESET"
      002C42                          5         FRESET:
      002C42 CD 0C 1E         [ 4]   86     CALL ZERO  
      002C45 CD 2C 30         [ 4]   87     CALL FPSW 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



      002C48 CD 04 D1         [ 4]   88     CALL STORE 
      002C4B 81               [ 4]   89     RET 
                                     90 
                                     91 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     92 ;   FINIT ( -- )
                                     93 ;   initialize floating point 
                                     94 ;   library 
                                     95 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C4C                         96     _HEADER FINIT,5,"FINIT"
      002C4C 2C 3B                    1         .word LINK 
                           002C4E     2         LINK=.
      002C4E 05                       3         .byte 5  
      002C4F 46 49 4E 49 54           4         .ascii "FINIT"
      002C54                          5         FINIT:
      002C54 CD 2C 42         [ 4]   97     CALL FRESET 
      002C57 81               [ 4]   98     RET 
                                     99 
                                    100 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    101 ;    FER ( -- u )
                                    102 ;    return FPSW value 
                                    103 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C58                        104     _HEADER FER,3,"FER"
      002C58 2C 4E                    1         .word LINK 
                           002C5A     2         LINK=.
      002C5A 03                       3         .byte 3  
      002C5B 46 45 52                 4         .ascii "FER"
      002C5E                          5         FER:
      002C5E CD 2C 30         [ 4]  105     CALL FPSW 
      002C61 CD 04 E3         [ 4]  106     CALL AT 
      002C64 81               [ 4]  107     RET 
                                    108 
                                    109 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    110 ;    FZE  ( -- 0|-1 )
                                    111 ;    return FPSW zero flag 
                                    112 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C65                        113     _HEADER FZE,3,"FZE"
      002C65 2C 5A                    1         .word LINK 
                           002C67     2         LINK=.
      002C67 03                       3         .byte 3  
      002C68 46 5A 45                 4         .ascii "FZE"
      002C6B                          5         FZE:
      002C6B CD 2C 30         [ 4]  114     CALL FPSW
      002C6E CD 04 E3         [ 4]  115     CALL AT  
      002C71 CD 0C 29         [ 4]  116     CALL ONE 
      002C74 CD 06 76         [ 4]  117     CALL ANDD
      002C77 CD 08 86         [ 4]  118     CALL NEGAT  
      002C7A 81               [ 4]  119     RET 
                                    120 
                                    121 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    122 ;    FNE ( -- 0|-1 )
                                    123 ;    return FPSW negative flag 
                                    124 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C7B                        125     _HEADER FNE,3,"FNE"
      002C7B 2C 67                    1         .word LINK 
                           002C7D     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



      002C7D 03                       3         .byte 3  
      002C7E 46 4E 45                 4         .ascii "FNE"
      002C81                          5         FNE:
      002C81 CD 2C 30         [ 4]  126     CALL FPSW 
      002C84 CD 04 E3         [ 4]  127     CALL AT 
      002C87                        128     _DOLIT 2 
      002C87 CD 04 6F         [ 4]    1     CALL DOLIT 
      002C8A 00 02                    2     .word 2 
      002C8C CD 06 76         [ 4]  129     CALL ANDD
      002C8F CD 0C 04         [ 4]  130     CALL TWOSL
      002C92 CD 08 86         [ 4]  131     CALL NEGAT   
      002C95 81               [ 4]  132     RET 
                                    133 
                                    134 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    135 ;   FOV (  -- 0|-1 )
                                    136 ;   return FPSW overflow flag 
                                    137 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C96                        138     _HEADER FOV,3,"FOV"
      002C96 2C 7D                    1         .word LINK 
                           002C98     2         LINK=.
      002C98 03                       3         .byte 3  
      002C99 46 4F 56                 4         .ascii "FOV"
      002C9C                          5         FOV:
      002C9C CD 2C 30         [ 4]  139     CALL FPSW
      002C9F CD 04 E3         [ 4]  140     CALL AT  
      002CA2                        141     _DOLIT 4 
      002CA2 CD 04 6F         [ 4]    1     CALL DOLIT 
      002CA5 00 04                    2     .word 4 
      002CA7 CD 06 76         [ 4]  142     CALL ANDD
      002CAA                        143     _DOLIT 2 
      002CAA CD 04 6F         [ 4]    1     CALL DOLIT 
      002CAD 00 02                    2     .word 2 
      002CAF CD 0B EC         [ 4]  144     CALL RSHIFT 
      002CB2 CD 08 86         [ 4]  145     CALL NEGAT  
      002CB5 81               [ 4]  146     RET 
                                    147 
                                    148 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    149 ;    SFZ ( f# -- f# )
                                    150 ;    set FPSW zero flag 
                                    151 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002CB6                        152     _HEADER SFZ,3,"SFZ"
      002CB6 2C 98                    1         .word LINK 
                           002CB8     2         LINK=.
      002CB8 03                       3         .byte 3  
      002CB9 53 46 5A                 4         .ascii "SFZ"
      002CBC                          5         SFZ:
      002CBC CD 2C 5E         [ 4]  153     CALL FER 
      002CBF                        154     _DOLIT 0xfffe 
      002CBF CD 04 6F         [ 4]    1     CALL DOLIT 
      002CC2 FF FE                    2     .word 0xfffe 
      002CC4 CD 06 76         [ 4]  155     CALL ANDD 
      002CC7 CD 05 E2         [ 4]  156     CALL TOR    
      002CCA CD 08 27         [ 4]  157     CALL DDUP 
      002CCD                        158     _DOLIT 0xFF  
      002CCD CD 04 6F         [ 4]    1     CALL DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



      002CD0 00 FF                    2     .word 0xFF 
      002CD2 CD 06 76         [ 4]  159     CALL ANDD
      002CD5 CD 28 56         [ 4]  160     CALL DZEQUAL 
      002CD8                        161     _DOLIT 1 
      002CD8 CD 04 6F         [ 4]    1     CALL DOLIT 
      002CDB 00 01                    2     .word 1 
      002CDD CD 06 76         [ 4]  162     CALL ANDD 
      002CE0 CD 05 34         [ 4]  163     CALL RFROM 
      002CE3 CD 06 8A         [ 4]  164     CALL ORR 
      002CE6 CD 2C 30         [ 4]  165     CALL FPSW 
      002CE9 CD 04 D1         [ 4]  166     CALL STORE 
      002CEC 81               [ 4]  167     RET 
                                    168 
                                    169 
                                    170 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    171 ;   SFN ( f# -- f# )
                                    172 ;   set FPSW negative flag 
                                    173 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002CED                        174     _HEADER SFN,3,"SFN"
      002CED 2C B8                    1         .word LINK 
                           002CEF     2         LINK=.
      002CEF 03                       3         .byte 3  
      002CF0 53 46 4E                 4         .ascii "SFN"
      002CF3                          5         SFN:
      002CF3 CD 2C 5E         [ 4]  175     CALL FER 
      002CF6                        176     _DOLIT 0xFFFD 
      002CF6 CD 04 6F         [ 4]    1     CALL DOLIT 
      002CF9 FF FD                    2     .word 0xFFFD 
      002CFB CD 06 76         [ 4]  177     CALL ANDD  
      002CFE CD 05 E2         [ 4]  178     CALL TOR 
      002D01 CD 06 19         [ 4]  179     CALL DUPP 
      002D04                        180     _DOLIT 0X80 
      002D04 CD 04 6F         [ 4]    1     CALL DOLIT 
      002D07 00 80                    2     .word 0X80 
      002D09 CD 06 76         [ 4]  181     CALL ANDD 
      002D0C                        182     _DOLIT 6 
      002D0C CD 04 6F         [ 4]    1     CALL DOLIT 
      002D0F 00 06                    2     .word 6 
      002D11 CD 0B EC         [ 4]  183     CALL RSHIFT 
      002D14 CD 05 34         [ 4]  184     CALL RFROM 
      002D17 CD 06 8A         [ 4]  185     CALL ORR 
      002D1A CD 2C 30         [ 4]  186     CALL FPSW 
      002D1D CD 04 D1         [ 4]  187     CALL STORE 
      002D20 81               [ 4]  188     RET 
                                    189 
                                    190 
                                    191 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    192 ;   SFV ( -- )
                                    193 ;   set overflow flag 
                                    194 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002D21                        195     _HEADER SFV,3,"SFV"
      002D21 2C EF                    1         .word LINK 
                           002D23     2         LINK=.
      002D23 03                       3         .byte 3  
      002D24 53 46 56                 4         .ascii "SFV"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



      002D27                          5         SFV:
      002D27 CD 2C 5E         [ 4]  196     CALL FER 
      002D2A                        197     _DOLIT 4 
      002D2A CD 04 6F         [ 4]    1     CALL DOLIT 
      002D2D 00 04                    2     .word 4 
      002D2F CD 06 8A         [ 4]  198     CALL ORR 
      002D32 CD 2C 30         [ 4]  199     CALL FPSW 
      002D35 CD 04 D1         [ 4]  200     CALL STORE 
      002D38 81               [ 4]  201     RET 
                                    202 
                                    203 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    204 ;  F>ME ( f# -- m e )
                                    205 ;  split float in mantissa/exponent 
                                    206 ;  m mantissa as a double 
                                    207 ;  e exponent as a single 
                                    208 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002D39                        209     _HEADER ATEXP,4,"F>ME"             
      002D39 2D 23                    1         .word LINK 
                           002D3B     2         LINK=.
      002D3B 04                       3         .byte 4  
      002D3C 46 3E 4D 45              4         .ascii "F>ME"
      002D40                          5         ATEXP:
      002D40 CD 2C 42         [ 4]  210     CALL FRESET
      002D43 CD 2C F3         [ 4]  211     CALL SFN
      002D46 CD 2C BC         [ 4]  212     CALL SFZ 
      002D49 90 93            [ 1]  213     LDW Y,X 
      002D4B 90 FE            [ 2]  214     LDW Y,(Y)
      002D4D 90 89            [ 2]  215     PUSHW Y 
      002D4F 4F               [ 1]  216     CLR A  
      002D50 90 5E            [ 1]  217     SWAPW Y 
      002D52 2A 01            [ 1]  218     JRPL ATEXP1 
      002D54 43               [ 1]  219     CPL A 
      002D55                        220 ATEXP1: ; sign extend mantissa 
      002D55 90 5E            [ 1]  221     SWAPW Y 
      002D57 90 95            [ 1]  222     LD YH,A 
      002D59 FF               [ 2]  223     LDW (X),Y 
      002D5A 1D 00 02         [ 2]  224     SUBW X,#CELLL 
      002D5D 90 85            [ 2]  225     POPW Y 
      002D5F 4F               [ 1]  226     CLR A 
      002D60 90 5D            [ 2]  227     TNZW Y 
      002D62 2A 01            [ 1]  228     JRPL ATEXP2 
      002D64 43               [ 1]  229     CPL A 
      002D65                        230 ATEXP2:
      002D65 90 5E            [ 1]  231     SWAPW Y 
      002D67 90 95            [ 1]  232     LD YH,A 
      002D69 FF               [ 2]  233     LDW (X),Y 
      002D6A 81               [ 4]  234     RET 
                                    235 
                                    236 
                                    237 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    238 ;    ME>F ( m e -- f# )
                                    239 ;    built float from mantissa/exponent 
                                    240 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002D6B                        241     _HEADER STEXP,4,"ME>F"
      002D6B 2D 3B                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



                           002D6D     2         LINK=.
      002D6D 04                       3         .byte 4  
      002D6E 4D 45 3E 46              4         .ascii "ME>F"
      002D72                          5         STEXP:
      002D72 CD 06 19         [ 4]  242     CALL DUPP 
      002D75 CD 08 EC         [ 4]  243     CALL ABSS 
      002D78                        244     _DOLIT 127 
      002D78 CD 04 6F         [ 4]    1     CALL DOLIT 
      002D7B 00 7F                    2     .word 127 
      002D7D CD 09 53         [ 4]  245     CALL GREAT
      002D80                        246     _QBRAN STEXP1
      002D80 CD 04 98         [ 4]    1     CALL QBRAN
      002D83 2D 88                    2     .word STEXP1
      002D85 CD 2D 27         [ 4]  247     CALL SFV
      002D88                        248 STEXP1:
      002D88 90 93            [ 1]  249     LDW Y,X 
      002D8A 90 FE            [ 2]  250     LDW Y,(Y)
      002D8C 4F               [ 1]  251     CLR A 
      002D8D 90 95            [ 1]  252     LD YH,A
      002D8F 90 5E            [ 1]  253     SWAPW Y 
      002D91 90 89            [ 2]  254     PUSHW Y  ; e >r 
      002D93 1C 00 02         [ 2]  255     ADDW X,#CELLL 
      002D96 CD 08 27         [ 4]  256     CALL DDUP 
      002D99 CD 26 65         [ 4]  257     CALL DABS
      002D9C CD 06 29         [ 4]  258     CALL SWAPP 
      002D9F                        259     _DROP  
      002D9F 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002DA2                        260     _DOLIT 127 
      002DA2 CD 04 6F         [ 4]    1     CALL DOLIT 
      002DA5 00 7F                    2     .word 127 
      002DA7 CD 09 53         [ 4]  261     CALL GREAT 
      002DAA                        262     _QBRAN STEXP2 
      002DAA CD 04 98         [ 4]    1     CALL QBRAN
      002DAD 2D B2                    2     .word STEXP2
      002DAF CD 2D 27         [ 4]  263     CALL SFV 
      002DB2                        264 STEXP2: 
      002DB2 4F               [ 1]  265     CLR A 
      002DB3 F7               [ 1]  266     LD (X),A     
      002DB4 CD 05 34         [ 4]  267     CALL RFROM 
      002DB7 CD 06 8A         [ 4]  268     CALL ORR
      002DBA CD 2C BC         [ 4]  269     CALL SFZ 
      002DBD CD 2C F3         [ 4]  270     CALL SFN 
      002DC0 81               [ 4]  271     RET 
                                    272 
                                    273 
                                    274 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    275 ;   E. ( f# -- )
                                    276 ;   print float in scientific 
                                    277 ;   format 
                                    278 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002DC1                        279     _HEADER EDOT,2,"E."
      002DC1 2D 6D                    1         .word LINK 
                           002DC3     2         LINK=.
      002DC3 02                       3         .byte 2  
      002DC4 45 2E                    4         .ascii "E."
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



      002DC6                          5         EDOT:
      002DC6 CD 06 DF         [ 4]  280     CALL BASE 
      002DC9 CD 04 E3         [ 4]  281     CALL AT 
      002DCC CD 05 E2         [ 4]  282     CALL TOR 
      002DCF                        283     _DOLIT 10 
      002DCF CD 04 6F         [ 4]    1     CALL DOLIT 
      002DD2 00 0A                    2     .word 10 
      002DD4 CD 06 DF         [ 4]  284     CALL BASE 
      002DD7 CD 04 D1         [ 4]  285     CALL STORE 
      002DDA CD 2D 40         [ 4]  286     CALL ATEXP ; m e 
      002DDD                        287 EDOT0:
      002DDD CD 05 E2         [ 4]  288     CALL TOR   
      002DE0 CD 26 65         [ 4]  289     CALL DABS 
      002DE3 CD 0F 54         [ 4]  290     CALL SPACE 
      002DE6 CD 0E 18         [ 4]  291     CALL BDIGS     
      002DE9                        292 EDOT2: 
      002DE9 CD 26 D1         [ 4]  293     CALL DDIG
      002DEC CD 05 34         [ 4]  294     CALL RFROM 
      002DEF CD 0B B2         [ 4]  295     CALL ONEP 
      002DF2 CD 05 E2         [ 4]  296     CALL TOR 
      002DF5 CD 06 19         [ 4]  297     CALL DUPP
      002DF8                        298     _QBRAN EDOT3 
      002DF8 CD 04 98         [ 4]    1     CALL QBRAN
      002DFB 2E 02                    2     .word EDOT3
      002DFD                        299     _BRAN EDOT2  
      002DFD CD 04 B4         [ 4]    1     CALL BRAN 
      002E00 2D E9                    2     .word EDOT2 
      002E02                        300 EDOT3:
      002E02 CD 06 41         [ 4]  301     CALL OVER 
      002E05 CD 06 DF         [ 4]  302     CALL BASE 
      002E08 CD 04 E3         [ 4]  303     CALL AT 
      002E0B CD 09 10         [ 4]  304     CALL ULESS 
      002E0E                        305     _QBRAN EDOT2 
      002E0E CD 04 98         [ 4]    1     CALL QBRAN
      002E11 2D E9                    2     .word EDOT2
      002E13                        306     _DOLIT '.'
      002E13 CD 04 6F         [ 4]    1     CALL DOLIT 
      002E16 00 2E                    2     .word '.' 
      002E18 CD 0E 28         [ 4]  307     CALL HOLD  
      002E1B CD 26 D1         [ 4]  308     CALL DDIG
      002E1E CD 2C 81         [ 4]  309     CALL FNE 
      002E21                        310     _QBRAN EDOT4 
      002E21 CD 04 98         [ 4]    1     CALL QBRAN
      002E24 2E 2E                    2     .word EDOT4
      002E26                        311     _DOLIT '-'
      002E26 CD 04 6F         [ 4]    1     CALL DOLIT 
      002E29 00 2D                    2     .word '-' 
      002E2B CD 0E 28         [ 4]  312     CALL HOLD 
      002E2E                        313 EDOT4:       
      002E2E                        314     _DROP 
      002E2E 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002E31 CD 0E 7D         [ 4]  315     CALL EDIGS 
      002E34 CD 0F 7E         [ 4]  316     CALL TYPES
      002E37 CD 05 34         [ 4]  317     CALL RFROM 
      002E3A CD 07 CC         [ 4]  318     CALL QDUP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]



      002E3D                        319     _QBRAN EDOT5     
      002E3D CD 04 98         [ 4]    1     CALL QBRAN
      002E40 2E 4D                    2     .word EDOT5
      002E42                        320     _DOLIT 'E'
      002E42 CD 04 6F         [ 4]    1     CALL DOLIT 
      002E45 00 45                    2     .word 'E' 
      002E47 CD 04 36         [ 4]  321     CALL EMIT 
      002E4A CD 10 3D         [ 4]  322     CALL DOT
      002E4D                        323 EDOT5: 
      002E4D CD 05 34         [ 4]  324     CALL RFROM 
      002E50 CD 06 DF         [ 4]  325     CALL BASE 
      002E53 CD 04 D1         [ 4]  326     CALL STORE  
      002E56 81               [ 4]  327     RET 
                                    328 
                                    329 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                    330 ;   F. (f# -- )
                                    331 ;   print float in fixed
                                    332 ;   point format. 
                                    333 ;;;;;;;;;;;;;;;;;;;;;;;;;
      002E57                        334     _HEADER FDOT,2,"F."
      002E57 2D C3                    1         .word LINK 
                           002E59     2         LINK=.
      002E59 02                       3         .byte 2  
      002E5A 46 2E                    4         .ascii "F."
      002E5C                          5         FDOT:
      002E5C CD 06 DF         [ 4]  335     CALL BASE 
      002E5F CD 04 E3         [ 4]  336     CALL AT 
      002E62 CD 05 E2         [ 4]  337     CALL TOR 
      002E65                        338     _DOLIT 10 
      002E65 CD 04 6F         [ 4]    1     CALL DOLIT 
      002E68 00 0A                    2     .word 10 
      002E6A CD 06 DF         [ 4]  339     CALL BASE 
      002E6D CD 04 D1         [ 4]  340     CALL STORE 
      002E70 CD 2D 40         [ 4]  341     CALL    ATEXP
      002E73 CD 06 19         [ 4]  342     CALL    DUPP  
      002E76 CD 08 EC         [ 4]  343     CALL    ABSS 
      002E79                        344     _DOLIT  8
      002E79 CD 04 6F         [ 4]    1     CALL DOLIT 
      002E7C 00 08                    2     .word 8 
      002E7E CD 09 53         [ 4]  345     CALL    GREAT 
      002E81                        346     _QBRAN  FDOT1 
      002E81 CD 04 98         [ 4]    1     CALL QBRAN
      002E84 2E 89                    2     .word FDOT1
      002E86 CC 2D DD         [ 2]  347     JP      EDOT0 
      002E89                        348 FDOT1:
      002E89 CD 0F 54         [ 4]  349     CALL    SPACE 
      002E8C CD 05 E2         [ 4]  350     CALL    TOR 
      002E8F CD 2C 81         [ 4]  351     CALL    FNE 
      002E92                        352     _QBRAN  FDOT0 
      002E92 CD 04 98         [ 4]    1     CALL QBRAN
      002E95 2E 9A                    2     .word FDOT0
      002E97 CD 08 98         [ 4]  353     CALL    DNEGA 
      002E9A                        354 FDOT0: 
      002E9A CD 0E 18         [ 4]  355     CALL    BDIGS
      002E9D CD 05 45         [ 4]  356     CALL    RAT  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]



      002EA0 CD 06 50         [ 4]  357     CALL    ZLESS 
      002EA3                        358     _QBRAN  FDOT6 
      002EA3 CD 04 98         [ 4]    1     CALL QBRAN
      002EA6 2E D1                    2     .word FDOT6
      002EA8                        359 FDOT2: ; e<0 
      002EA8 CD 26 D1         [ 4]  360     CALL    DDIG 
      002EAB CD 05 34         [ 4]  361     CALL    RFROM
      002EAE CD 0B B2         [ 4]  362     CALL    ONEP 
      002EB1 CD 07 CC         [ 4]  363     CALL    QDUP 
      002EB4                        364     _QBRAN  FDOT3 
      002EB4 CD 04 98         [ 4]    1     CALL QBRAN
      002EB7 2E C1                    2     .word FDOT3
      002EB9 CD 05 E2         [ 4]  365     CALL    TOR 
      002EBC                        366     _BRAN   FDOT2 
      002EBC CD 04 B4         [ 4]    1     CALL BRAN 
      002EBF 2E A8                    2     .word FDOT2 
      002EC1                        367 FDOT3:
      002EC1                        368     _DOLIT  '.' 
      002EC1 CD 04 6F         [ 4]    1     CALL DOLIT 
      002EC4 00 2E                    2     .word '.' 
      002EC6 CD 0E 28         [ 4]  369     CALL    HOLD 
      002EC9 CD 26 EA         [ 4]  370     CALL    DDIGS
      002ECC                        371     _BRAN   FDOT9  
      002ECC CD 04 B4         [ 4]    1     CALL BRAN 
      002ECF 2E E6                    2     .word FDOT9 
      002ED1                        372 FDOT6: ; e>=0 
      002ED1                        373     _BRAN   FDOT8
      002ED1 CD 04 B4         [ 4]    1     CALL BRAN 
      002ED4 2E DE                    2     .word FDOT8 
      002ED6                        374 FDOT7:     
      002ED6                        375     _DOLIT  '0'
      002ED6 CD 04 6F         [ 4]    1     CALL DOLIT 
      002ED9 00 30                    2     .word '0' 
      002EDB CD 0E 28         [ 4]  376     CALL    HOLD 
      002EDE                        377 FDOT8:
      002EDE CD 04 83         [ 4]  378     CALL    DONXT 
      002EE1 2E D6                  379     .word   FDOT7
      002EE3 CD 26 EA         [ 4]  380     CALL    DDIGS 
      002EE6                        381 FDOT9:
      002EE6 CD 2C 81         [ 4]  382     CALL    FNE 
      002EE9                        383     _QBRAN  FDOT10 
      002EE9 CD 04 98         [ 4]    1     CALL QBRAN
      002EEC 2E F6                    2     .word FDOT10
      002EEE                        384     _DOLIT '-' 
      002EEE CD 04 6F         [ 4]    1     CALL DOLIT 
      002EF1 00 2D                    2     .word '-' 
      002EF3 CD 0E 28         [ 4]  385     CALL   HOLD 
      002EF6                        386 FDOT10:
      002EF6 CD 0E 7D         [ 4]  387     CALL    EDIGS 
      002EF9 CD 0F 7E         [ 4]  388     CALL    TYPES 
      002EFC CD 05 34         [ 4]  389     CALL    RFROM 
      002EFF CD 06 DF         [ 4]  390     CALL    BASE 
      002F02 CD 04 D1         [ 4]  391     CALL    STORE 
      002F05 81               [ 4]  392     RET 
                                    393 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]



                                    394 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    395 ; return parsed exponent or 
                                    396 ; 0 if failed
                                    397 ; at entry exprect *a=='E'    
                                    398 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002F06                        399 parse_exponent: ; a cntr -- e -1 | 0 
      002F06 CD 05 E2         [ 4]  400     CALL TOR   ; R: cntr 
      002F09 CD 06 19         [ 4]  401     CALL DUPP 
      002F0C CD 05 01         [ 4]  402     CALL CAT 
      002F0F                        403     _DOLIT 'E' 
      002F0F CD 04 6F         [ 4]    1     CALL DOLIT 
      002F12 00 45                    2     .word 'E' 
      002F14 CD 08 FA         [ 4]  404     CALL EQUAL 
      002F17                        405     _QBRAN 1$
      002F17 CD 04 98         [ 4]    1     CALL QBRAN
      002F1A 2F 47                    2     .word 1$
      002F1C CD 0B B2         [ 4]  406     CALL ONEP 
      002F1F CD 05 34         [ 4]  407     CALL RFROM  ; a cntr 
      002F22 CD 0B BF         [ 4]  408     CALL ONEM
      002F25 CD 06 19         [ 4]  409     CALL DUPP 
      002F28                        410     _QBRAN 2$ ; a cntr 
      002F28 CD 04 98         [ 4]    1     CALL QBRAN
      002F2B 2F 4A                    2     .word 2$
      002F2D CD 0C 1E         [ 4]  411     CALL ZERO
      002F30 CD 06 19         [ 4]  412     CALL DUPP 
      002F33 CD 27 81         [ 4]  413     CALL DSWAP ; 0 0 a cntr  
      002F36 CD 25 1D         [ 4]  414     CALL nsign 
      002F39 CD 05 E2         [ 4]  415     CALL TOR   ; R: esign  
      002F3C CD 25 4A         [ 4]  416     CALL parse_digits
      002F3F                        417     _QBRAN PARSEXP_SUCCESS ; parsed to end of string 
      002F3F CD 04 98         [ 4]    1     CALL QBRAN
      002F42 2F 51                    2     .word PARSEXP_SUCCESS
                                    418 ; failed invalid character
      002F44                        419     _DDROP ; 0 a 
      002F44 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002F47                        420 1$: 
      002F47 CD 05 34         [ 4]  421     CALL RFROM ; sign||cntr  
      002F4A                        422 2$:
      002F4A                        423     _DDROP  ; a cntr || a sign || 0 cntr   
      002F4A 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002F4D CD 0C 1E         [ 4]  424     CALL ZERO   ; return only 0 
      002F50 81               [ 4]  425     RET 
      002F51                        426 PARSEXP_SUCCESS: 
      002F51                        427     _DDROP ; drop dhi a 
      002F51 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002F54 CD 05 34         [ 4]  428     CALL RFROM ; es 
      002F57                        429     _QBRAN 1$
      002F57 CD 04 98         [ 4]    1     CALL QBRAN
      002F5A 2F 5F                    2     .word 1$
      002F5C CD 08 86         [ 4]  430     CALL NEGAT
      002F5F                        431 1$:
      002F5F                        432     _DOLIT -1 ; -- e -1 
      002F5F CD 04 6F         [ 4]    1     CALL DOLIT 
      002F62 FF FF                    2     .word -1 
      002F64 81               [ 4]  433     RET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]



                                    434 
                                    435 
                                    436 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    437 ;   FLOAT?  ( a dlo dhi a+ cntr sign d? -- f -3 | a 0 )
                                    438 ;   called by NUMBER? 
                                    439 ;   convert string to float 
                                    440 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002F65                        441     _HEADER FLOATQ,5,"FLOAT?"
      002F65 2E 59                    1         .word LINK 
                           002F67     2         LINK=.
      002F67 05                       3         .byte 5  
      002F68 46 4C 4F 41 54 3F        4         .ascii "FLOAT?"
      002F6E                          5         FLOATQ:
      002F6E                        442     _QBRAN FLOATQ0 
      002F6E CD 04 98         [ 4]    1     CALL QBRAN
      002F71 2F 78                    2     .word FLOATQ0
      002F73                        443     _BRAN FLOAT_ERROR  ; not a float, string start with '#'
      002F73 CD 04 B4         [ 4]    1     CALL BRAN 
      002F76 30 1D                    2     .word FLOAT_ERROR 
      002F78                        444 FLOATQ0:
                                    445 ; BASE must be 10 
      002F78 CD 06 DF         [ 4]  446     CALL BASE 
      002F7B CD 04 E3         [ 4]  447     CALL AT 
      002F7E                        448     _DOLIT 10 
      002F7E CD 04 6F         [ 4]    1     CALL DOLIT 
      002F81 00 0A                    2     .word 10 
      002F83 CD 08 FA         [ 4]  449     CALL EQUAL 
      002F86                        450     _QBRAN FLOAT_ERROR 
      002F86 CD 04 98         [ 4]    1     CALL QBRAN
      002F89 30 1D                    2     .word FLOAT_ERROR
                                    451 ; if float next char is '.' or 'E' 
      002F8B CD 05 E2         [ 4]  452     CALL TOR ; R: sign  
      002F8E CD 05 E2         [ 4]  453     CALL TOR ; R: sign cntr 
      002F91 CD 06 19         [ 4]  454     CALL DUPP
      002F94 CD 05 01         [ 4]  455     CALL CAT 
      002F97                        456     _DOLIT '.' 
      002F97 CD 04 6F         [ 4]    1     CALL DOLIT 
      002F9A 00 2E                    2     .word '.' 
      002F9C CD 08 FA         [ 4]  457     CALL EQUAL 
      002F9F                        458     _QBRAN FLOATQ1 ; not a dot 
      002F9F CD 04 98         [ 4]    1     CALL QBRAN
      002FA2 2F DD                    2     .word FLOATQ1
      002FA4 CD 0B B2         [ 4]  459     CALL ONEP 
      002FA7 CD 05 34         [ 4]  460     CALL RFROM  ; dlo dhi a cntr R: sign  
      002FAA CD 0B BF         [ 4]  461     CALL ONEM 
      002FAD CD 06 19         [ 4]  462     CALL DUPP 
      002FB0 CD 05 E2         [ 4]  463     CALL TOR  ; R: sign cntr 
                                    464 ; parse fractional part
      002FB3 CD 25 4A         [ 4]  465     CALL parse_digits ; dlo dhi a cntr -- dm a cntr 
      002FB6 CD 06 19         [ 4]  466     CALL DUPP 
      002FB9 CD 05 34         [ 4]  467     CALL RFROM 
      002FBC CD 06 29         [ 4]  468     CALL SWAPP 
      002FBF CD 08 D2         [ 4]  469     CALL SUBB ; fd -> fraction digits count 
      002FC2 CD 05 E2         [ 4]  470     CALL TOR  ; dlo dhi a cntr R: sign fd 
      002FC5 CD 06 19         [ 4]  471     CALL DUPP ; cntr cntr  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]



      002FC8                        472     _QBRAN 1$ ; end of string, no exponent
      002FC8 CD 04 98         [ 4]    1     CALL QBRAN
      002FCB 2F D2                    2     .word 1$
      002FCD                        473     _BRAN FLOATQ2
      002FCD CD 04 B4         [ 4]    1     CALL BRAN 
      002FD0 2F E6                    2     .word FLOATQ2 
      002FD2 CD 06 29         [ 4]  474 1$: CALL SWAPP 
      002FD5                        475     _DROP ; a
      002FD5 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002FD8                        476     _BRAN FLOATQ3        
      002FD8 CD 04 B4         [ 4]    1     CALL BRAN 
      002FDB 2F EE                    2     .word FLOATQ3 
      002FDD                        477 FLOATQ1: ; must push fd==0 on RSTACK 
      002FDD CD 05 34         [ 4]  478     CALL RFROM ; cntr 
      002FE0 CD 0C 1E         [ 4]  479     CALL ZERO  ; fd 
      002FE3 CD 05 E2         [ 4]  480     CALL TOR   ; dm a cntr R: sign fd 
      002FE6                        481 FLOATQ2: 
      002FE6 CD 2F 06         [ 4]  482     CALL parse_exponent 
      002FE9                        483     _QBRAN FLOAT_ERROR0 ; exponent expected 
      002FE9 CD 04 98         [ 4]    1     CALL QBRAN
      002FEC 30 1A                    2     .word FLOAT_ERROR0
      002FEE                        484 FLOATQ3: ; dm 0 || dm e  
      002FEE CD 05 34         [ 4]  485     CALL RFROM ;  fd  
      002FF1 CD 08 D2         [ 4]  486     CALL SUBB  ; exp=e-fd 
      002FF4 CD 07 FC         [ 4]  487     CALL NROT 
      002FF7 CD 05 34         [ 4]  488     CALL RFROM  ; sign 
      002FFA                        489     _QBRAN FLOATQ4 
      002FFA CD 04 98         [ 4]    1     CALL QBRAN
      002FFD 30 02                    2     .word FLOATQ4
      002FFF CD 08 98         [ 4]  490     CALL DNEGA 
      003002                        491 FLOATQ4:
      003002 CD 07 DD         [ 4]  492     CALL ROT 
      003005 CD 2D 72         [ 4]  493     CALL STEXP 
      003008 CD 07 DD         [ 4]  494     CALL ROT 
      00300B                        495     _DROP 
      00300B 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00300E CD 2C F3         [ 4]  496     CALL SFN 
      003011 CD 2C BC         [ 4]  497     CALL SFZ 
      003014                        498     _DOLIT -3 
      003014 CD 04 6F         [ 4]    1     CALL DOLIT 
      003017 FF FD                    2     .word -3 
      003019 81               [ 4]  499     RET       
      00301A                        500 FLOAT_ERROR0: 
      00301A CD 28 EE         [ 4]  501     CALL DRFROM ; sign df      
      00301D                        502 FLOAT_ERROR: 
      00301D CD 0C 60         [ 4]  503     CALL DEPTH 
      003020 CD 0B A5         [ 4]  504     CALL CELLS 
      003023 CD 05 F9         [ 4]  505     CALL SPAT 
      003026 CD 06 29         [ 4]  506     CALL SWAPP 
      003029 CD 08 3C         [ 4]  507     CALL PLUS  
      00302C CD 06 06         [ 4]  508     CALL SPSTO 
      00302F CD 0C 1E         [ 4]  509     CALL ZERO 
      003032 81               [ 4]  510     RET 
                                    511 
                                    512 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]



                                    513 ;  LSCALE ( f# -- f# )
                                    514 ;  m *=10 , e -= 1
                                    515 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003033                        516     _HEADER LSCALE,6,"LSCALE"
      003033 2F 67                    1         .word LINK 
                           003035     2         LINK=.
      003035 06                       3         .byte 6  
      003036 4C 53 43 41 4C 45        4         .ascii "LSCALE"
      00303C                          5         LSCALE:
      00303C CD 2D 40         [ 4]  517     CALL ATEXP 
      00303F CD 0C 29         [ 4]  518     CALL ONE 
      003042 CD 08 D2         [ 4]  519     CALL SUBB 
      003045 CD 05 E2         [ 4]  520     CALL TOR
      003048                        521     _DOLIT 10 
      003048 CD 04 6F         [ 4]    1     CALL DOLIT 
      00304B 00 0A                    2     .word 10 
      00304D CD 27 5B         [ 4]  522     CALL DSSTAR
      003050 CD 05 34         [ 4]  523     CALL RFROM 
      003053 CD 2D 72         [ 4]  524     CALL STEXP 
      003056 81               [ 4]  525     RET  
                                    526 
                                    527 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    528 ;  RSCALE ( f# -- f# )
                                    529 ;  m /=10 , e+=1 
                                    530 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003057                        531     _HEADER RSCALE,6,"RSCALE"
      003057 30 35                    1         .word LINK 
                           003059     2         LINK=.
      003059 06                       3         .byte 6  
      00305A 52 53 43 41 4C 45        4         .ascii "RSCALE"
      003060                          5         RSCALE:
      003060 CD 2D 40         [ 4]  532     CALL ATEXP 
      003063 CD 0C 29         [ 4]  533     CALL ONE 
      003066 CD 08 3C         [ 4]  534     CALL PLUS 
      003069 CD 05 E2         [ 4]  535     CALL TOR 
      00306C                        536     _DOLIT 10 
      00306C CD 04 6F         [ 4]    1     CALL DOLIT 
      00306F 00 0A                    2     .word 10 
      003071 CD 26 90         [ 4]  537     CALL DSLMOD 
      003074 CD 07 DD         [ 4]  538     CALL ROT 
      003077                        539     _DROP 
      003077 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00307A CD 05 34         [ 4]  540     CALL RFROM 
      00307D CD 2D 72         [ 4]  541     CALL STEXP 
      003080 81               [ 4]  542     RET 
                                    543 
                                    544 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    545 ;  SCALEUP ( ud u1 u2 -- ud*10 u1 u2 )
                                    546 ;  while (ud<=0xcccccccc && u1<u2 ){
                                    547 ;        ud*10;
                                    548 ;        u2--;
                                    549 ;  }  
                                    550 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003081                        551 SCALEUP:
      003081 CD 08 27         [ 4]  552     CALL DDUP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]



      003084 CD 09 26         [ 4]  553     CALL LESS  
      003087                        554     _QBRAN SCALEUP3
      003087 CD 04 98         [ 4]    1     CALL QBRAN
      00308A 30 B7                    2     .word SCALEUP3
      00308C CD 28 D0         [ 4]  555     CALL DTOR   ; R: u1 u2  
      00308F CD 08 27         [ 4]  556     CALL DDUP 
      003092                        557     _DOLIT 0XCCCC 
      003092 CD 04 6F         [ 4]    1     CALL DOLIT 
      003095 CC CC                    2     .word 0XCCCC 
      003097                        558     _DOLIT 0XCCC 
      003097 CD 04 6F         [ 4]    1     CALL DOLIT 
      00309A 0C CC                    2     .word 0XCCC 
      00309C CD 28 93         [ 4]  559     CALL DGREAT  
      00309F                        560     _TBRAN SCALEUP2 
      00309F CD 04 A6         [ 4]    1     CALL TBRAN 
      0030A2 30 B4                    2     .word SCALEUP2 
      0030A4                        561     _DOLIT 10 
      0030A4 CD 04 6F         [ 4]    1     CALL DOLIT 
      0030A7 00 0A                    2     .word 10 
      0030A9 CD 27 39         [ 4]  562     CALL UDSSTAR 
      0030AC CD 28 EE         [ 4]  563     CALL DRFROM 
      0030AF CD 0B BF         [ 4]  564     CALL ONEM
      0030B2 20 CD            [ 2]  565     JRA SCALEUP
      0030B4                        566 SCALEUP2:
      0030B4 CD 28 EE         [ 4]  567     CALL DRFROM
      0030B7                        568 SCALEUP3: 
      0030B7 81               [ 4]  569     RET 
                                    570 
                                    571 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    572 ; SCALEDOWN ( ud u1 u2 -- ud u1 u2 )
                                    573 ;  whhile (ud && u1>u2 ){ 
                                    574 ;     ud/10;
                                    575 ;     u2++;
                                    576 ;  } 
                                    577 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0030B8                        578 SCALEDOWN: 
      0030B8 CD 08 27         [ 4]  579     CALL DDUP 
      0030BB CD 09 53         [ 4]  580     CALL GREAT 
      0030BE                        581     _QBRAN SCALDN3 
      0030BE CD 04 98         [ 4]    1     CALL QBRAN
      0030C1 30 E7                    2     .word SCALDN3
      0030C3 CD 28 D0         [ 4]  582     CALL DTOR 
      0030C6 CD 08 27         [ 4]  583     CALL DDUP 
      0030C9 CD 28 56         [ 4]  584     CALL DZEQUAL 
      0030CC                        585     _TBRAN SCALDN2  
      0030CC CD 04 A6         [ 4]    1     CALL TBRAN 
      0030CF 30 E4                    2     .word SCALDN2 
      0030D1                        586     _DOLIT 10
      0030D1 CD 04 6F         [ 4]    1     CALL DOLIT 
      0030D4 00 0A                    2     .word 10 
      0030D6 CD 0C 1E         [ 4]  587     CALL ZERO  
      0030D9 CD 2B 84         [ 4]  588     CALL DSLASH 
      0030DC CD 28 EE         [ 4]  589     CALL DRFROM 
      0030DF CD 0B B2         [ 4]  590     CALL ONEP  
      0030E2 20 D4            [ 2]  591     JRA SCALEDOWN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]



      0030E4                        592 SCALDN2:
      0030E4 CD 28 EE         [ 4]  593     CALL DRFROM 
      0030E7                        594 SCALDN3:
      0030E7 81               [ 4]  595     RET 
                                    596 
                                    597 
                                    598 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    599 ;  F-ALIGN ( f#1 f#2 -- m1 m2 e )
                                    600 ;  align to same exponent 
                                    601 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0030E8                        602     _HEADER FALIGN,7,"F-ALIGN"
      0030E8 30 59                    1         .word LINK 
                           0030EA     2         LINK=.
      0030EA 07                       3         .byte 7  
      0030EB 46 2D 41 4C 49 47 4E     4         .ascii "F-ALIGN"
      0030F2                          5         FALIGN:
      0030F2 CD 2D 40         [ 4]  603     CALL ATEXP 
      0030F5 CD 05 E2         [ 4]  604     CALL TOR 
      0030F8 CD 27 81         [ 4]  605     CALL DSWAP 
      0030FB CD 2D 40         [ 4]  606     CALL ATEXP 
      0030FE CD 05 E2         [ 4]  607     CALL TOR    ; m2 m1 R: e2 e1 
      003101 CD 27 81         [ 4]  608     CALL DSWAP 
      003104 CD 29 06         [ 4]  609     CALL DRAT 
      003107 CD 08 FA         [ 4]  610     CALL EQUAL 
      00310A                        611     _TBRAN FALGN8
      00310A CD 04 A6         [ 4]    1     CALL TBRAN 
      00310D 31 8F                    2     .word FALGN8 
                                    612 ; scaleup the largest float 
                                    613 ; but limit mantissa <=0xccccccc
                                    614 ; to avoid mantissa overflow     
      00310F CD 29 06         [ 4]  615     CALL DRAT ; m1 m2 e2 e1 
      003112 CD 09 53         [ 4]  616     CALL GREAT 
      003115                        617     _QBRAN FALGN4 ; e2<e1 
      003115 CD 04 98         [ 4]    1     CALL QBRAN
      003118 31 2B                    2     .word FALGN4
                                    618 ; e2>e1 then scale up m2   
      00311A CD 28 EE         [ 4]  619     CALL DRFROM 
      00311D CD 06 29         [ 4]  620     CALL SWAPP 
      003120 CD 30 81         [ 4]  621     CALL SCALEUP 
      003123 CD 06 29         [ 4]  622     CALL SWAPP 
      003126 CD 28 D0         [ 4]  623     CALL DTOR 
      003129 20 0F            [ 2]  624     JRA FALGN6
      00312B                        625 FALGN4: ; e2<e1 then scaleup m1 
      00312B CD 27 81         [ 4]  626     CALL DSWAP 
      00312E CD 28 EE         [ 4]  627     CALL DRFROM 
      003131 CD 30 81         [ 4]  628     CALL SCALEUP 
      003134 CD 28 D0         [ 4]  629     CALL DTOR
      003137 CD 27 81         [ 4]  630     CALL DSWAP 
                                    631 ; check again for e2==e1 
                                    632 ; if scaleup was not enough 
                                    633 ; to equalize exponent then
                                    634 ; scaledown smallest float     
      00313A                        635 FALGN6: 
      00313A CD 29 06         [ 4]  636     CALL DRAT 
      00313D CD 08 FA         [ 4]  637     CALL EQUAL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]



      003140                        638     _TBRAN FALGN8 
      003140 CD 04 A6         [ 4]    1     CALL TBRAN 
      003143 31 8F                    2     .word FALGN8 
                                    639 ; e2!=e1 need to scale down smallest 
      003145 CD 29 06         [ 4]  640     CALL DRAT 
      003148 CD 09 53         [ 4]  641     CALL GREAT 
      00314B                        642     _QBRAN FALGN7 ; e2<e1 
      00314B CD 04 98         [ 4]    1     CALL QBRAN
      00314E 31 61                    2     .word FALGN7
                                    643 ; e2>e1 scaledown m1 
      003150 CD 27 81         [ 4]  644     CALL DSWAP 
      003153 CD 28 EE         [ 4]  645     CALL DRFROM 
      003156 CD 30 B8         [ 4]  646     CALL SCALEDOWN
      003159 CD 06 29         [ 4]  647     CALL SWAPP 
      00315C CD 28 D0         [ 4]  648     CALL DTOR 
      00315F 20 0F            [ 2]  649     JRA FALGN71  
      003161                        650 FALGN7: ; e2<e1 scaledown m2 
      003161 CD 28 EE         [ 4]  651     CALL DRFROM 
      003164 CD 06 29         [ 4]  652     CALL SWAPP 
      003167 CD 30 B8         [ 4]  653     CALL SCALEDOWN 
      00316A CD 06 29         [ 4]  654     CALL SWAPP 
      00316D CD 28 D0         [ 4]  655     CALL DTOR 
                                    656 ; after scaledown if e2!=e1 
                                    657 ; this imply that one of mantissa 
                                    658 ; as been nullified by scalling 
                                    659 ; hence keep largest exponent 
      003170                        660 FALGN71:
      003170 CD 29 06         [ 4]  661     CALL DRAT 
      003173 CD 08 FA         [ 4]  662     CALL EQUAL
      003176                        663     _TBRAN FALGN8 
      003176 CD 04 A6         [ 4]    1     CALL TBRAN 
      003179 31 8F                    2     .word FALGN8 
      00317B CD 28 EE         [ 4]  664     CALL DRFROM 
      00317E CD 08 27         [ 4]  665     CALL DDUP 
      003181 CD 09 53         [ 4]  666     CALL GREAT 
      003184                        667     _TBRAN FALGN72
      003184 CD 04 A6         [ 4]    1     CALL TBRAN 
      003187 31 8C                    2     .word FALGN72 
      003189 CD 06 29         [ 4]  668     CALL SWAPP     
      00318C                        669 FALGN72:
      00318C CD 28 D0         [ 4]  670     CALL DTOR  ; now smallest e is at rtop.
      00318F                        671 FALGN8:
      00318F CD 28 EE         [ 4]  672     CALL DRFROM 
      003192                        673     _DROP 
      003192 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      003195 81               [ 4]  674     RET 
                                    675 
                                    676 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    677 ;   F+ ( f#1 f#2 -- f#1+f#2 )
                                    678 ;   float addition 
                                    679 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003196                        680     _HEADER FPLUS,2,"F+"
      003196 30 EA                    1         .word LINK 
                           003198     2         LINK=.
      003198 02                       3         .byte 2  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]



      003199 46 2B                    4         .ascii "F+"
      00319B                          5         FPLUS:
      00319B CD 30 F2         [ 4]  681     CALL FALIGN 
      00319E CD 05 E2         [ 4]  682     CALL TOR 
      0031A1 CD 2B 93         [ 4]  683     CALL DPLUS
      0031A4 CD 26 76         [ 4]  684     CALL DSIGN 
      0031A7 CD 05 E2         [ 4]  685     CALL TOR 
      0031AA CD 26 65         [ 4]  686     CALL DABS 
      0031AD CD 32 10         [ 4]  687     CALL SCALETOM
      0031B0 CD 05 34         [ 4]  688     CALL RFROM 
      0031B3                        689     _QBRAN FPLUS1 
      0031B3 CD 04 98         [ 4]    1     CALL QBRAN
      0031B6 31 BB                    2     .word FPLUS1
      0031B8 CD 08 98         [ 4]  690     CALL DNEGA  
      0031BB                        691 FPLUS1: 
      0031BB CD 07 DD         [ 4]  692     CALL ROT   
      0031BE CD 05 34         [ 4]  693     CALL RFROM
      0031C1 CD 08 3C         [ 4]  694     CALL PLUS  
      0031C4 CD 2D 72         [ 4]  695     CALL STEXP 
      0031C7 81               [ 4]  696     RET 
                                    697 
                                    698 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    699 ;  F- ( f#1 f#2 -- f#1-f#2 )
                                    700 ;  substraction 
                                    701 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0031C8                        702     _HEADER FSUB,2,"F-"
      0031C8 31 98                    1         .word LINK 
                           0031CA     2         LINK=.
      0031CA 02                       3         .byte 2  
      0031CB 46 2D                    4         .ascii "F-"
      0031CD                          5         FSUB:
      0031CD CD 30 F2         [ 4]  703     CALL FALIGN 
      0031D0 CD 05 E2         [ 4]  704     CALL TOR 
      0031D3 CD 2B C5         [ 4]  705     CALL DSUB
      0031D6 CD 26 76         [ 4]  706     CALL DSIGN 
      0031D9 CD 05 E2         [ 4]  707     CALL TOR 
      0031DC CD 26 65         [ 4]  708     CALL DABS 
      0031DF CD 32 10         [ 4]  709     CALL SCALETOM 
      0031E2 CD 05 34         [ 4]  710     CALL RFROM 
      0031E5                        711     _QBRAN FSUB1 
      0031E5 CD 04 98         [ 4]    1     CALL QBRAN
      0031E8 31 ED                    2     .word FSUB1
      0031EA CD 08 98         [ 4]  712     CALL DNEGA 
      0031ED                        713 FSUB1:
      0031ED CD 07 DD         [ 4]  714     CALL ROT 
      0031F0 CD 05 34         [ 4]  715     CALL RFROM
      0031F3 CD 08 3C         [ 4]  716     CALL PLUS  
      0031F6 CD 2D 72         [ 4]  717     CALL STEXP 
      0031F9 81               [ 4]  718     RET 
                                    719 
                                    720 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    721 ; /mod10  ( m -- m/10 r )
                                    722 ; divide mantissa by 10 
                                    723 ; return quotient and remainder 
                                    724 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]



      0031FA                        725 UMOD10:
      0031FA                        726     _DOLIT 10 
      0031FA CD 04 6F         [ 4]    1     CALL DOLIT 
      0031FD 00 0A                    2     .word 10 
      0031FF CD 26 90         [ 4]  727     CALL DSLMOD
      003202 CD 07 DD         [ 4]  728     CALL ROT  
      003205 81               [ 4]  729     RET 
                                    730 
                                    731 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    732 ;   SCALE>M ( ud1 -- e ud2 )
                                    733 ;   scale down a double  
                                    734 ;   by repeated d/10
                                    735 ;   until ud<=MAX_MANTISSA   
                                    736 ;   e is log10 exponent of scaled down
                                    737 ;   ud2 is scaled down ud1 
                                    738 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003206                        739     _HEADER SCALETOM,7,"SCALE>M"
      003206 31 CA                    1         .word LINK 
                           003208     2         LINK=.
      003208 07                       3         .byte 7  
      003209 53 43 41 4C 45 3E 4D     4         .ascii "SCALE>M"
      003210                          5         SCALETOM:
      003210 CD 0C 1E         [ 4]  740     CALL ZERO 
      003213 CD 07 FC         [ 4]  741     CALL NROT 
      003216                        742 SCAL1:
      003216 CD 06 19         [ 4]  743     CALL DUPP 
      003219                        744     _DOLIT 0X7F 
      003219 CD 04 6F         [ 4]    1     CALL DOLIT 
      00321C 00 7F                    2     .word 0X7F 
      00321E CD 09 3D         [ 4]  745     CALL UGREAT 
      003221                        746     _QBRAN SCAL2  
      003221 CD 04 98         [ 4]    1     CALL QBRAN
      003224 32 3A                    2     .word SCAL2
      003226 CD 31 FA         [ 4]  747     CALL UMOD10 
      003229                        748     _DROP 
      003229 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00322C CD 07 DD         [ 4]  749     CALL ROT 
      00322F CD 0B B2         [ 4]  750     CALL ONEP 
      003232 CD 07 FC         [ 4]  751     CALL NROT  
      003235                        752     _BRAN SCAL1 
      003235 CD 04 B4         [ 4]    1     CALL BRAN 
      003238 32 16                    2     .word SCAL1 
      00323A                        753 SCAL2: 
      00323A 81               [ 4]  754     RET 
                                    755 
                                    756 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    757 ;  UDIV10 ( ut -- ut )
                                    758 ;  divide a 48 bits uint by 10 
                                    759 ;  used to scale down MM* 
                                    760 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00323B                        761 UDIV10:
      00323B 90 93            [ 1]  762     LDW Y,X 
      00323D 90 FE            [ 2]  763     LDW Y,(Y)
      00323F A6 0A            [ 1]  764     LD A,#10 
      003241 90 62            [ 2]  765     DIV Y,A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 180.
Hexadecimal [24-Bits]



      003243 FF               [ 2]  766     LDW (X),Y 
      003244 90 95            [ 1]  767     LD YH,A 
      003246 E6 02            [ 1]  768     LD A,(2,X)
      003248 90 97            [ 1]  769     LD YL,A 
      00324A A6 0A            [ 1]  770     LD A,#10 
      00324C 90 62            [ 2]  771     DIV Y,A 
      00324E 90 95            [ 1]  772     LD YH,A 
      003250 90 9F            [ 1]  773     LD A,YL 
      003252 E7 02            [ 1]  774     LD (2,X),A 
      003254 E6 03            [ 1]  775     LD A,(3,X)
      003256 90 97            [ 1]  776     LD YL,A 
      003258 A6 0A            [ 1]  777     LD A,#10 
      00325A 90 62            [ 2]  778     DIV Y,A 
      00325C 90 95            [ 1]  779     LD YH,A 
      00325E 90 9F            [ 1]  780     LD A,YL 
      003260 E7 03            [ 1]  781     LD (3,X),A 
      003262 E6 04            [ 1]  782     LD A,(4,X)
      003264 90 97            [ 1]  783     LD YL,A 
      003266 A6 0A            [ 1]  784     LD A,#10 
      003268 90 62            [ 2]  785     DIV Y,A 
      00326A 90 95            [ 1]  786     LD YH,A 
      00326C 90 9F            [ 1]  787     LD A,YL 
      00326E E7 04            [ 1]  788     LD (4,X),A 
      003270 E6 05            [ 1]  789     LD A,(5,X)
      003272 90 97            [ 1]  790     LD YL,A 
      003274 A6 0A            [ 1]  791     LD A,#10 
      003276 90 62            [ 2]  792     DIV Y,A 
      003278 90 9F            [ 1]  793     LD A,YL 
      00327A E7 05            [ 1]  794     LD (5,X),A 
      00327C 81               [ 4]  795     RET 
                                    796 
                                    797 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    798 ;   MM* ( m1 m2 -- m3 e )
                                    799 ;   mantissa product 
                                    800 ;  scale down to 23 bits 
                                    801 ;   e  is log10 scaling factor.
                                    802 ;   The maximum product size 
                                    803 ;   before scaling is 46 bits .
                                    804 ;   UDIV10 is used to scale down.  
                                    805 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00327D                        806     _HEADER MMSTAR,3,"MM*"
      00327D 32 08                    1         .word LINK 
                           00327F     2         LINK=.
      00327F 03                       3         .byte 3  
      003280 4D 4D 2A                 4         .ascii "MM*"
      003283                          5         MMSTAR:
      003283 CD 08 27         [ 4]  807     CALL DDUP
      003286 CD 28 56         [ 4]  808     CALL DZEQUAL
      003289                        809     _TBRAN MMSTA2
      003289 CD 04 A6         [ 4]    1     CALL TBRAN 
      00328C 32 99                    2     .word MMSTA2 
      00328E                        810 MMSTA1:
      00328E CD 29 97         [ 4]  811     CALL DOVER 
      003291 CD 28 56         [ 4]  812     CALL DZEQUAL 
      003294                        813     _QBRAN MMSTA3 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 181.
Hexadecimal [24-Bits]



      003294 CD 04 98         [ 4]    1     CALL QBRAN
      003297 32 A4                    2     .word MMSTA3
      003299                        814 MMSTA2: ; ( -- 0 0 0 )
      003299 1C 00 02         [ 2]  815     ADDW X,#2 
      00329C 90 5F            [ 1]  816     CLRW Y 
      00329E FF               [ 2]  817     LDW (X),Y 
      00329F EF 02            [ 2]  818     LDW (2,X),Y
      0032A1 EF 04            [ 2]  819     LDW (4,X),Y 
      0032A3 81               [ 4]  820     RET 
      0032A4                        821 MMSTA3:
      0032A4 CD 26 76         [ 4]  822     CALL DSIGN 
      0032A7 CD 05 E2         [ 4]  823     CALL TOR    ; R: m2sign 
      0032AA CD 26 65         [ 4]  824     CALL DABS   ; m1 um2 
      0032AD CD 27 81         [ 4]  825     CALL DSWAP  ; um2 m1 
      0032B0 CD 26 76         [ 4]  826     CALL DSIGN  ; um2 m1 m1sign 
      0032B3 CD 05 34         [ 4]  827     CALL RFROM 
      0032B6 CD 06 9F         [ 4]  828     CALL XORR 
      0032B9 CD 05 E2         [ 4]  829     CALL TOR   ; R: product_sign 
      0032BC CD 26 65         [ 4]  830     CALL DABS  ; um2 um1  
      0032BF CD 28 D0         [ 4]  831     CALL DTOR  ; um2 
      0032C2 CD 06 19         [ 4]  832     CALL DUPP  ; um2 um2hi 
      0032C5 CD 05 45         [ 4]  833     CALL RAT   ; um2 um2hi um1hi
                                    834 ; first partial product  
                                    835 ; pd1=um2hi*um1hi 
      0032C8 CD 0B 31         [ 4]  836     CALL STAR 
      0032CB CD 0C 1E         [ 4]  837     CALL ZERO 
      0032CE CD 06 29         [ 4]  838     CALL SWAPP ; pd1<<16  
      0032D1 CD 27 81         [ 4]  839     CALL DSWAP ; pd1 um2 
      0032D4 CD 06 41         [ 4]  840     CALL OVER  ; pd1 um2 um2lo 
      0032D7 CD 05 34         [ 4]  841     CALL RFROM ; pd1 um2 um2lo um1hi 
                                    842 ; pd2=um2lo*um1hi 
      0032DA CD 0A E7         [ 4]  843     CALL UMSTA ; pd1 um2 pd2 
      0032DD CD 27 81         [ 4]  844     CALL DSWAP ; pd1 pd2 um2 
      0032E0 CD 05 45         [ 4]  845     CALL RAT   ; pd1 pd2 um2 um1lo 
                                    846 ; pd3= um2hi*um1lo 
      0032E3 CD 0A E7         [ 4]  847     CALL UMSTA ; pd1 pd2 um2lo pd3 
      0032E6 CD 07 DD         [ 4]  848     CALL ROT ; pd1 pd2 pd3 um2lo 
      0032E9 CD 05 E2         [ 4]  849     CALL TOR ; pd1 pd2 pd3 R: psign um1lo um2lo 
                                    850 ; pd1+pd2+pd3  pd1
      0032EC CD 2B 93         [ 4]  851     CALL DPLUS 
      0032EF CD 2B 93         [ 4]  852     CALL DPLUS  
      0032F2 CD 28 EE         [ 4]  853     CALL DRFROM ; triple um2lo um1lo 
                                    854 ; last partial product um2lo*um1lo 
      0032F5 CD 0A E7         [ 4]  855     CALL UMSTA ; prod pd4 
                                    856 ; mm*=prod<<16+pd4  
      0032F8 CD 28 D0         [ 4]  857     CALL DTOR ;   R: psign pd4lo pd4hi  
                                    858  ; add pd4hi to prodlo and propagate carry 
      0032FB 90 93            [ 1]  859     LDW Y,X 
      0032FD 90 EE 02         [ 2]  860     LDW Y,(2,Y)  ; prodlo 
      003300 72 F9 01         [ 2]  861     ADDW Y,(1,SP)  ; prodlo+pd4hi 
      003303 17 01            [ 2]  862     LDW (1,SP),Y    ; plo phi  
      003305 90 93            [ 1]  863     LDW Y,X
      003307 90 FE            [ 2]  864     LDW Y,(Y) ; prodhi  
      003309 24 04            [ 1]  865     JRNC MMSTA4
      00330B 72 A9 00 01      [ 2]  866     ADDW Y,#1 ; add carry 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 182.
Hexadecimal [24-Bits]



      00330F                        867 MMSTA4:     
      00330F 1D 00 02         [ 2]  868     SUBW X,#2 
      003312 FF               [ 2]  869     LDW (X),Y 
      003313 90 85            [ 2]  870     POPW Y 
      003315 EF 02            [ 2]  871     LDW (2,X),Y 
      003317 90 85            [ 2]  872     POPW Y 
      003319 EF 04            [ 2]  873     LDW (4,X),Y
      00331B CD 0C 1E         [ 4]  874     CALL ZERO 
      00331E CD 05 E2         [ 4]  875     CALL TOR 
      003321                        876 MMSTA5:
      003321 CD 07 CC         [ 4]  877     CALL QDUP 
      003324                        878     _QBRAN MMSTA6 
      003324 CD 04 98         [ 4]    1     CALL QBRAN
      003327 33 3A                    2     .word MMSTA6
      003329 CD 32 3B         [ 4]  879     CALL UDIV10 
      00332C CD 05 34         [ 4]  880     CALL RFROM 
      00332F CD 0B B2         [ 4]  881     CALL ONEP 
      003332 CD 05 E2         [ 4]  882     CALL TOR 
      003335                        883     _BRAN MMSTA5 
      003335 CD 04 B4         [ 4]    1     CALL BRAN 
      003338 33 21                    2     .word MMSTA5 
                                    884 ; now scale to double 
                                    885 ; scale further <= MAX_MANTISSA 
      00333A                        886 MMSTA6: 
      00333A CD 05 34         [ 4]  887     CALL RFROM 
      00333D CD 07 FC         [ 4]  888     CALL NROT 
      003340 CD 32 10         [ 4]  889     CALL SCALETOM
      003343 CD 28 D0         [ 4]  890     CALL DTOR 
      003346 CD 08 3C         [ 4]  891     CALL PLUS 
      003349 CD 28 EE         [ 4]  892     CALL DRFROM 
      00334C CD 05 34         [ 4]  893     CALL RFROM
      00334F                        894     _QBRAN MMSTA7
      00334F CD 04 98         [ 4]    1     CALL QBRAN
      003352 33 57                    2     .word MMSTA7
      003354 CD 08 98         [ 4]  895     CALL DNEGA
      003357                        896 MMSTA7:
      003357 CD 07 DD         [ 4]  897     CALL ROT ; m e 
      00335A 81               [ 4]  898     RET 
                                    899 
                                    900 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    901 ;    F* ( f#1 f#2 -- f#3 )
                                    902 ;    float product 
                                    903 ;    f#3=f#1 * f#2 
                                    904 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00335B                        905     _HEADER FSTAR,2,"F*"
      00335B 32 7F                    1         .word LINK 
                           00335D     2         LINK=.
      00335D 02                       3         .byte 2  
      00335E 46 2A                    4         .ascii "F*"
      003360                          5         FSTAR:
      003360 CD 2D 40         [ 4]  906     CALL ATEXP ; f#1 m2 e2 
      003363 CD 05 E2         [ 4]  907     CALL TOR   
      003366 CD 27 81         [ 4]  908     CALL DSWAP ; m2 f#1
      003369 CD 2D 40         [ 4]  909     CALL ATEXP ; m2 m1 e1 
      00336C CD 05 34         [ 4]  910     CALL RFROM ; m2 m1 e1 e2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 183.
Hexadecimal [24-Bits]



      00336F CD 08 3C         [ 4]  911     CALL PLUS  ; m2 m1 e 
      003372 CD 05 E2         [ 4]  912     CALL TOR   ; m2 m1 R: e 
      003375 CD 32 83         [ 4]  913     CALL MMSTAR ; m2*m1 e   
      003378 CD 05 34         [ 4]  914     CALL RFROM 
      00337B CD 08 3C         [ 4]  915     CALL PLUS 
      00337E CD 2D 72         [ 4]  916     CALL STEXP ; f#3 
      003381 81               [ 4]  917     RET 
                                    918 
                                    919 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    920 ;  F/ ( f#1 f#2 -- f#3 )
                                    921 ;  float division
                                    922 ;  f#3 = f#1/f#2
                                    923 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003382                        924     _HEADER FSLASH,2,"F/"
      003382 33 5D                    1         .word LINK 
                           003384     2         LINK=.
      003384 02                       3         .byte 2  
      003385 46 2F                    4         .ascii "F/"
      003387                          5         FSLASH:
      003387 CD 2D 40         [ 4]  925     CALL ATEXP  ; f#1 m2 e2 
      00338A CD 05 E2         [ 4]  926     CALL TOR    ; f#1 m2   R: e2 
      00338D CD 26 76         [ 4]  927     CALL DSIGN  ; f#1 m2 m2sign 
      003390 CD 05 E2         [ 4]  928     CALL TOR    ; F#1 m2 R: e2 m2s 
      003393 CD 26 65         [ 4]  929     CALL DABS   ; F#1 um2 
      003396 CD 27 81         [ 4]  930     CALL DSWAP  ; m2 f#1 
      003399 CD 2D 40         [ 4]  931     CALL ATEXP  ; m2 m1 e1 
      00339C CD 0C 29         [ 4]  932     CALL ONE    ; e2 slot on rstack  
      00339F CD 05 9F         [ 4]  933     CALL NRAT   ; m2 m1 e1 e2 
      0033A2 CD 08 D2         [ 4]  934     CALL SUBB   ; m2 m1 e 
      0033A5 CD 0C 29         [ 4]  935     CALL ONE    ; e slot on rstack 
      0033A8 CD 05 BE         [ 4]  936     CALL NRSTO  ; m2 m1 R: e m2s 
      0033AB CD 26 76         [ 4]  937     CALL DSIGN  ; m2 m1 m1sign 
      0033AE CD 05 34         [ 4]  938     CALL RFROM  ; m2 m1 m1s m2s  
      0033B1 CD 06 9F         [ 4]  939     CALL XORR   ; m2 m1 quot_sign R: e 
      0033B4 CD 05 34         [ 4]  940     CALL RFROM   
      0033B7 CD 28 D0         [ 4]  941     CALL DTOR   ; m2 m1 R: qs e  
      0033BA CD 26 65         [ 4]  942     CALL DABS   ; um2 um1 R: qs e  
      0033BD CD 27 81         [ 4]  943     CALL DSWAP  ; m1 m2 R: qs e
      0033C0 CD 08 27         [ 4]  944     CALL DDUP  ; m1 m2 m2 R: qs e
      0033C3 CD 28 D0         [ 4]  945     CALL DTOR  ; m1 m2 R: qs e m2 ( keep divisor need later ) 
      0033C6 CD 2A A2         [ 4]  946     CALL UDSLMOD ; remainder m1/m2 R: e m2 
      0033C9                        947 FSLASH1: 
      0033C9 CD 29 97         [ 4]  948     CALL DOVER ; if remainder null done 
      0033CC CD 28 56         [ 4]  949     CALL DZEQUAL 
      0033CF                        950     _TBRAN FSLASH8 
      0033CF CD 04 A6         [ 4]    1     CALL TBRAN 
      0033D2 34 2F                    2     .word FSLASH8 
                                    951 ; get fractional digits from remainder until mantissa saturate
                                    952 ; remainder mantissa R: e divisor 
                                    953 ; check for mantissa saturation 
      0033D4 CD 08 27         [ 4]  954     CALL DDUP 
      0033D7                        955     _DOLIT 0XCCCC 
      0033D7 CD 04 6F         [ 4]    1     CALL DOLIT 
      0033DA CC CC                    2     .word 0XCCCC 
      0033DC                        956     _DOLIT 0xC
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 184.
Hexadecimal [24-Bits]



      0033DC CD 04 6F         [ 4]    1     CALL DOLIT 
      0033DF 00 0C                    2     .word 0xC 
      0033E1 CD 28 93         [ 4]  957     CALL DGREAT 
      0033E4                        958     _TBRAN FSLASH8 ; another loop would result in mantissa overflow 
      0033E4 CD 04 A6         [ 4]    1     CALL TBRAN 
      0033E7 34 2F                    2     .word FSLASH8 
                                    959 ; multiply mantissa by 10 
      0033E9                        960     _DOLIT 10 
      0033E9 CD 04 6F         [ 4]    1     CALL DOLIT 
      0033EC 00 0A                    2     .word 10 
      0033EE CD 0C 1E         [ 4]  961     CALL ZERO 
      0033F1 CD 2A 3F         [ 4]  962     CALL DSTAR 
                                    963 ; mutliply remainder by 10     
      0033F4 CD 27 81         [ 4]  964     CALL DSWAP 
      0033F7                        965     _DOLIT 10 
      0033F7 CD 04 6F         [ 4]    1     CALL DOLIT 
      0033FA 00 0A                    2     .word 10 
      0033FC CD 0C 1E         [ 4]  966     CALL ZERO 
      0033FF CD 2A 3F         [ 4]  967     CALL DSTAR 
                                    968 ; divide remainder by m2     
      003402 CD 29 06         [ 4]  969     CALL DRAT  ; mantissa remainder divisor R: e divisor 
      003405 CD 2A A2         [ 4]  970     CALL UDSLMOD ; mantissa dr dq R: qs e divisor 
      003408 CD 27 81         [ 4]  971     CALL DSWAP ; mantissa frac_digit remainder R: qs e divisor  
      00340B CD 28 D0         [ 4]  972     CALL DTOR  ; mantissa frac_digit R: qs e divisor remainder 
      00340E CD 2B 93         [ 4]  973     CALL DPLUS ; mantissa+frac_digit 
      003411 CD 28 EE         [ 4]  974     CALL DRFROM ; mantissa remainder R: qs e divisor  
      003414 CD 27 81         [ 4]  975     CALL DSWAP  ; remainder mantissa  
                                    976 ; increment e 
      003417                        977     _DOLIT 2    ; e slot on rstack 
      003417 CD 04 6F         [ 4]    1     CALL DOLIT 
      00341A 00 02                    2     .word 2 
      00341C CD 05 9F         [ 4]  978     CALL NRAT   ;  2 NR@ -- e 
      00341F CD 0B B2         [ 4]  979     CALL ONEP   ; increment exponent 
      003422                        980     _DOLIT 2 
      003422 CD 04 6F         [ 4]    1     CALL DOLIT 
      003425 00 02                    2     .word 2 
      003427 CD 05 BE         [ 4]  981     CALL NRSTO  ; e 2 NR! , update e on rstack     
      00342A                        982     _BRAN FSLASH1
      00342A CD 04 B4         [ 4]    1     CALL BRAN 
      00342D 33 C9                    2     .word FSLASH1 
      00342F                        983 FSLASH8: ; remainder mantissa R: qs e divisor 
      00342F CD 27 81         [ 4]  984     CALL DSWAP  
      003432                        985     _DDROP  ; drop remainder     
      003432 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      003435 CD 28 EE         [ 4]  986     CALL DRFROM
      003438                        987     _DDROP  ; drop divisor 
      003438 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      00343B CD 15 F7         [ 4]  988     CALL JFETCH    ; quotient sign 
      00343E                        989     _QBRAN FSLASH9 
      00343E CD 04 98         [ 4]    1     CALL QBRAN
      003441 34 46                    2     .word FSLASH9
      003443 CD 08 98         [ 4]  990     CALL DNEGA  
      003446                        991 FSLASH9:
      003446 CD 05 34         [ 4]  992     CALL RFROM  ; exponent 
      003449 CD 2D 72         [ 4]  993     CALL STEXP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 185.
Hexadecimal [24-Bits]



      00344C CD 05 34         [ 4]  994     CALL RFROM 
      00344F                        995     _DROP ; drop qs 
      00344F 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      003452 81               [ 4]  996     RET 
                                    997 
                                    998 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    999 ;   D>F  ( # -- f# )
                                   1000 ;   convert double to float 
                                   1001 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003453                       1002     _HEADER DTOF,3,"D>F"
      003453 33 84                    1         .word LINK 
                           003455     2         LINK=.
      003455 03                       3         .byte 3  
      003456 44 3E 46                 4         .ascii "D>F"
      003459                          5         DTOF:
      003459 CD 26 76         [ 4] 1003     CALL DSIGN 
      00345C CD 05 E2         [ 4] 1004     CALL TOR
      00345F CD 26 65         [ 4] 1005     CALL DABS  
      003462                       1006 DTOF1:      
      003462 CD 32 10         [ 4] 1007     CALL SCALETOM 
      003465 CD 05 34         [ 4] 1008     CALL RFROM
      003468                       1009     _QBRAN DTOF2 
      003468 CD 04 98         [ 4]    1     CALL QBRAN
      00346B 34 70                    2     .word DTOF2
      00346D CD 08 98         [ 4] 1010     CALL DNEGA 
      003470                       1011 DTOF2: 
      003470 CD 07 DD         [ 4] 1012     CALL ROT 
      003473 CD 2D 72         [ 4] 1013     CALL STEXP 
      003476 81               [ 4] 1014     RET 
                                   1015 
                                   1016 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1017 ;   F>D  ( f# -- # )
                                   1018 ;  convert float to double 
                                   1019 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003477                       1020     _HEADER FTOD,3,"F>D"
      003477 34 55                    1         .word LINK 
                           003479     2         LINK=.
      003479 03                       3         .byte 3  
      00347A 46 3E 44                 4         .ascii "F>D"
      00347D                          5         FTOD:
      00347D CD 2D 40         [ 4] 1021     CALL ATEXP ; m e 
      003480 CD 07 CC         [ 4] 1022     CALL QDUP
      003483                       1023     _QBRAN FTOD9
      003483 CD 04 98         [ 4]    1     CALL QBRAN
      003486 35 13                    2     .word FTOD9
      003488 CD 05 E2         [ 4] 1024     CALL TOR 
      00348B CD 26 76         [ 4] 1025     CALL DSIGN 
      00348E CD 07 FC         [ 4] 1026     CALL NROT 
      003491 CD 26 65         [ 4] 1027     CALL DABS
      003494 CD 05 34         [ 4] 1028     CALL RFROM  
      003497 CD 06 19         [ 4] 1029     CALL DUPP   
      00349A CD 06 50         [ 4] 1030     CALL ZLESS 
      00349D                       1031     _QBRAN FTOD4 
      00349D CD 04 98         [ 4]    1     CALL QBRAN
      0034A0 34 DB                    2     .word FTOD4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 186.
Hexadecimal [24-Bits]



                                   1032 ; negative exponent 
      0034A2 CD 08 EC         [ 4] 1033     CALL ABSS 
      0034A5 CD 05 E2         [ 4] 1034     CALL TOR
      0034A8                       1035     _BRAN FTOD2  
      0034A8 CD 04 B4         [ 4]    1     CALL BRAN 
      0034AB 34 C6                    2     .word FTOD2 
      0034AD                       1036 FTOD1:
      0034AD CD 08 27         [ 4] 1037     CALL DDUP 
      0034B0 CD 28 56         [ 4] 1038     CALL DZEQUAL 
      0034B3                       1039     _TBRAN FTOD3 
      0034B3 CD 04 A6         [ 4]    1     CALL TBRAN 
      0034B6 34 D0                    2     .word FTOD3 
      0034B8                       1040     _DOLIT 10 
      0034B8 CD 04 6F         [ 4]    1     CALL DOLIT 
      0034BB 00 0A                    2     .word 10 
      0034BD CD 26 90         [ 4] 1041     CALL DSLMOD 
      0034C0 CD 07 DD         [ 4] 1042     CALL ROT 
      0034C3                       1043     _DROP
      0034C3 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0034C6                       1044 FTOD2:      
      0034C6                       1045     _DONXT FTOD1
      0034C6 CD 04 83         [ 4]    1     CALL DONXT 
      0034C9 34 AD                    2     .word FTOD1 
      0034CB                       1046     _BRAN FTOD8   
      0034CB CD 04 B4         [ 4]    1     CALL BRAN 
      0034CE 35 08                    2     .word FTOD8 
      0034D0                       1047 FTOD3: 
      0034D0 CD 05 34         [ 4] 1048     CALL RFROM 
      0034D3                       1049     _DROP 
      0034D3 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0034D6                       1050     _BRAN FTOD8  
      0034D6 CD 04 B4         [ 4]    1     CALL BRAN 
      0034D9 35 08                    2     .word FTOD8 
                                   1051 ; positive exponent 
      0034DB                       1052 FTOD4:
      0034DB CD 05 E2         [ 4] 1053     CALL TOR 
      0034DE                       1054     _BRAN FTOD6
      0034DE CD 04 B4         [ 4]    1     CALL BRAN 
      0034E1 35 03                    2     .word FTOD6 
      0034E3                       1055 FTOD5:
      0034E3 CD 08 27         [ 4] 1056     CALL DDUP 
      0034E6                       1057     _DOLIT 0XCCCC
      0034E6 CD 04 6F         [ 4]    1     CALL DOLIT 
      0034E9 CC CC                    2     .word 0XCCCC 
      0034EB                       1058     _DOLIT 0XCCC  
      0034EB CD 04 6F         [ 4]    1     CALL DOLIT 
      0034EE 0C CC                    2     .word 0XCCC 
      0034F0 CD 28 93         [ 4] 1059     CALL DGREAT 
      0034F3                       1060     _TBRAN FTOD3 
      0034F3 CD 04 A6         [ 4]    1     CALL TBRAN 
      0034F6 34 D0                    2     .word FTOD3 
      0034F8                       1061     _DOLIT 10 
      0034F8 CD 04 6F         [ 4]    1     CALL DOLIT 
      0034FB 00 0A                    2     .word 10 
      0034FD CD 0C 1E         [ 4] 1062     CALL ZERO 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 187.
Hexadecimal [24-Bits]



      003500 CD 2A 3F         [ 4] 1063     CALL DSTAR 
      003503                       1064 FTOD6: 
      003503                       1065     _DONXT FTOD5 
      003503 CD 04 83         [ 4]    1     CALL DONXT 
      003506 34 E3                    2     .word FTOD5 
      003508                       1066 FTOD8:
      003508 CD 07 DD         [ 4] 1067     CALL ROT 
      00350B                       1068     _QBRAN FTOD9 
      00350B CD 04 98         [ 4]    1     CALL QBRAN
      00350E 35 13                    2     .word FTOD9
      003510 CD 08 98         [ 4] 1069     CALL DNEGA
      003513                       1070 FTOD9:          
      003513 81               [ 4] 1071     RET 
                                   1072 
                                   1073 
                                   1074 ;;;;;;;;;;;;;;;;;;;;;;;;
                                   1075 ;   F0< ( f# -- f )
                                   1076 ;   true if f#<0
                                   1077 ;;;;;;;;;;;;;;;;;;;;;;;;
      003514                       1078     _HEADER FZLESS,3,"F0<"
      003514 34 79                    1         .word LINK 
                           003516     2         LINK=.
      003516 03                       3         .byte 3  
      003517 46 30 3C                 4         .ascii "F0<"
      00351A                          5         FZLESS:
      00351A CD 2D 40         [ 4] 1079     CALL ATEXP 
      00351D                       1080     _DROP 
      00351D 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      003520 CD 06 29         [ 4] 1081     CALL SWAPP 
      003523                       1082     _DROP 
      003523 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      003526 CD 06 50         [ 4] 1083     CALL ZLESS 
      003529 81               [ 4] 1084     RET
                                   1085 
                                   1086 ;;;;;;;;;;;;;;;;;;;;;;;;
                                   1087 ;   F< ( f#1 f#2 -- f )
                                   1088 ; true if f#1 < f#1 
                                   1089 ;;;;;;;;;;;;;;;;;;;;;;;
      00352A                       1090     _HEADER FLESS,2,"F<"
      00352A 35 16                    1         .word LINK 
                           00352C     2         LINK=.
      00352C 02                       3         .byte 2  
      00352D 46 3C                    4         .ascii "F<"
      00352F                          5         FLESS:
      00352F CD 31 CD         [ 4] 1091     CALL FSUB  
      003532 CC 35 1A         [ 2] 1092     JP FZLESS
                                   1093 
                                   1094 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1095 ;   F> ( f#1 f#2 -- f )
                                   1096 ;   true fi f#1>f#2
                                   1097 ;;;;;;;;;;;;;;;;;;;;;;;;;
      003535                       1098     _HEADER FGREAT,2,"F>"
      003535 35 2C                    1         .word LINK 
                           003537     2         LINK=.
      003537 02                       3         .byte 2  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 188.
Hexadecimal [24-Bits]



      003538 46 3E                    4         .ascii "F>"
      00353A                          5         FGREAT:
      00353A CD 27 81         [ 4] 1099     CALL DSWAP 
      00353D CC 35 2F         [ 2] 1100     JP FLESS 
                                   1101 
                                   1102 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1103 ;   F= ( f#1 f#2 -- f ) 
                                   1104 ;   true fi f#1==f#2 
                                   1105 ;;;;;;;;;;;;;;;;;;;;;;;;;
      003540                       1106     _HEADER FEQUAL,2,"F="
      003540 35 37                    1         .word LINK 
                           003542     2         LINK=.
      003542 02                       3         .byte 2  
      003543 46 3D                    4         .ascii "F="
      003545                          5         FEQUAL:
      003545 CC 28 72         [ 2] 1107     JP DEQUAL 
                                   1108 
                                   1109 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1110 ;   F0= ( f# -- f )
                                   1111 ;   true if f# is 0.0 
                                   1112 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      003548                       1113     _HEADER FZEQUAL,3,"F0="
      003548 35 42                    1         .word LINK 
                           00354A     2         LINK=.
      00354A 03                       3         .byte 3  
      00354B 46 30 3D                 4         .ascii "F0="
      00354E                          5         FZEQUAL:
      00354E CD 2D 40         [ 4] 1114     CALL ATEXP 
      003551                       1115     _DROP 
      003551 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      003554 CC 28 56         [ 2] 1116     JP DZEQUAL  
                                   1117 
                                   1118 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1119 ;  FNEGATE ( f#1 -- f#2 )
                                   1120 ;  f#2 is negation of f#1 
                                   1121 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      003557                       1122     _HEADER FNEGA,7,"FNEGATE"
      003557 35 4A                    1         .word LINK 
                           003559     2         LINK=.
      003559 07                       3         .byte 7  
      00355A 46 4E 45 47 41 54 45     4         .ascii "FNEGATE"
      003561                          5         FNEGA:
      003561 CD 2D 40         [ 4] 1123     CALL ATEXP 
      003564 CD 05 E2         [ 4] 1124     CALL TOR 
      003567 CD 08 98         [ 4] 1125     CALL DNEGA
      00356A CD 05 34         [ 4] 1126     CALL RFROM 
      00356D CD 2D 72         [ 4] 1127     CALL STEXP 
      003570 CD 2C F3         [ 4] 1128     CALL SFN 
      003573 81               [ 4] 1129     RET 
                                   1130 
                                   1131 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1132 ;  FABS ( f#1 -- abs(f#1) )
                                   1133 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003574                       1134     _HEADER FABS,4,"FABS"
      003574 35 59                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 189.
Hexadecimal [24-Bits]



                           003576     2         LINK=.
      003576 04                       3         .byte 4  
      003577 46 41 42 53              4         .ascii "FABS"
      00357B                          5         FABS:
      00357B CD 2D 40         [ 4] 1135     CALL ATEXP 
      00357E CD 05 E2         [ 4] 1136     CALL TOR 
      003581 CD 06 19         [ 4] 1137     CALL DUPP 
      003584                       1138     _DOLIT 0X80 
      003584 CD 04 6F         [ 4]    1     CALL DOLIT 
      003587 00 80                    2     .word 0X80 
      003589 CD 06 76         [ 4] 1139     CALL ANDD 
      00358C                       1140     _QBRAN FABS1
      00358C CD 04 98         [ 4]    1     CALL QBRAN
      00358F 35 94                    2     .word FABS1
      003591 CD 08 98         [ 4] 1141     CALL DNEGA 
      003594                       1142 FABS1: 
      003594 CD 05 34         [ 4] 1143     CALL RFROM 
      003597 CD 2D 72         [ 4] 1144     CALL STEXP 
      00359A CD 2C F3         [ 4] 1145     CALL SFN 
      00359D 81               [ 4] 1146     RET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 190.
Hexadecimal [24-Bits]



                                   4590 .endif 
                                   4591 
                                   4592 ;===============================================================
                                   4593 
                           003576  4594 LASTN =	LINK   ;last name defined
                                   4595 
                                   4596 ; application code begin here
      003600                       4597 	.bndry 128 ; align on flash block  
      003600                       4598 app_space: 
                                   4599 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 191.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        0008F5 R   |   6 ABOR1      001409 R
  6 ABOR2      001420 R   |   6 ABORQ      001401 R   |   6 ABORT      0013F2 R
  6 ABRTQ      0016E3 R   |   6 ABSS       0008EC R   |   6 ACCEP      001388 R
  6 ACCP1      001391 R   |   6 ACCP2      0013B7 R   |   6 ACCP3      0013BA R
  6 ACCP4      0013BC R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |   6 ADRADJ     0007BC R
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  6 AFT        0016CE R   |   6 AGAIN      001624 R   |   6 AHEAD      001681 R
  6 ALLOT      001531 R   |   6 ANDD       000676 R   |     APP_CP  =  004004 
    APP_LAST=  004000     |     APP_RUN =  004002     |     APP_VP  =  004006 
  6 AT         0004E3 R   |   6 ATEXE      000D31 R   |   6 ATEXP      002D40 R
  6 ATEXP1     002D55 R   |   6 ATEXP2     002D65 R   |   6 AUTORUN    000129 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |   6 B115K2     0003E0 R
    B19200  =  000003     |   6 B19K2      0003BD R   |     B1_MASK =  000002 
    B230400 =  000007     |     B2400   =  000000     |   6 B2K4       00038E R
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |   6 B4K8       00039C R
    B4_MASK =  000010     |     B57600  =  000005     |   6 B57K6      0003CE R
    B5_MASK =  000020     |     B6_MASK =  000040     |     B7_MASK =  000080 
    B921600 =  000009     |     B9600   =  000002     |   6 B9K6       0003AC R
  6 BACK1      001330 R   |   6 BASE       0006DF R   |     BASEE   =  00000A 
  6 BAUD       0003F0 R   |     BCNT    =  000001     |   6 BCOMP      001574 R
  6 BDIGS      000E18 R   |     BEEP_BIT=  000004     |     BEEP_CSR=  0050F3 
    BEEP_MAS=  000010     |     BEEP_POR=  00000F     |   6 BEGIN      001606 R
    BIT0    =  000000     |     BIT1    =  000001     |     BIT2    =  000002 
    BIT3    =  000003     |     BIT4    =  000004     |     BIT5    =  000005 
    BIT6    =  000006     |     BIT7    =  000007     |   6 BKSLA      001185 R
  6 BKSP       001300 R   |     BKSPP   =  000008     |   6 BLANK      000C11 R
    BLOCK_SI=  000080     |     BOOT_ROM=  006000     |     BOOT_ROM=  007FFF 
  6 BRAN       0004B4 R   |     BTW     =  000001     |   6 BUF2ROW    0021B4 R
  6 BYE        0000B6 R   |     CADR    =  000003     |     CALLL   =  0000CD 
  6 CALLOT     0023FD R   |     CAN_DGR =  005426     |     CAN_FPSR=  005427 
    CAN_IER =  005425     |     CAN_MCR =  005420     |     CAN_MSR =  005421 
    CAN_P0  =  005428     |     CAN_P1  =  005429     |     CAN_P2  =  00542A 
    CAN_P3  =  00542B     |     CAN_P4  =  00542C     |     CAN_P5  =  00542D 
    CAN_P6  =  00542E     |     CAN_P7  =  00542F     |     CAN_P8  =  005430 
    CAN_P9  =  005431     |     CAN_PA  =  005432     |     CAN_PB  =  005433 
    CAN_PC  =  005434     |     CAN_PD  =  005435     |     CAN_PE  =  005436 
    CAN_PF  =  005437     |     CAN_RFR =  005424     |     CAN_TPR =  005423 
    CAN_TSR =  005422     |     CARRY   =  00002A     |     CASE_SEN=  000000 
  6 CAT        000501 R   |   6 CCOMMA     001556 R   |     CC_C    =  000000 
    CC_H    =  000004     |     CC_I0   =  000003     |     CC_I1   =  000005 
    CC_N    =  000002     |     CC_V    =  000007     |     CC_Z    =  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 192.
Hexadecimal [24-Bits]

Symbol Table

    CELLL   =  000002     |   6 CELLM      000B96 R   |   6 CELLP      000B87 R
  6 CELLS      000BA5 R   |     CFG_GCR =  007F60     |     CFG_GCR_=  000001 
    CFG_GCR_=  000000     |   6 CHAR1      000F6E R   |   6 CHAR2      000F71 R
  6 CHKIVEC    0020A2 R   |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |   6 CMOV1      000D50 R   |   6 CMOV2      000D68 R
  6 CMOVE      000D48 R   |     CNTDWN  =  000032     |   6 CNTXT      000762 R
  6 COLD       001BA3 R   |   6 COLD1      001BA3 R   |   6 COLON      001886 R
  6 COMMA      00153F R   |   6 COMPI      001584 R   |     COMPO   =  000040 
  6 CONSTANT   001930 R   |   6 COPYRIGH   001AEC R   |   6 COUNT      000CE4 R
  6 CPP        00077E R   |     CPU_A   =  007F00     |     CPU_CCR =  007F0A 
    CPU_PCE =  007F01     |     CPU_PCH =  007F02     |     CPU_PCL =  007F03 
    CPU_SPH =  007F08     |     CPU_SPL =  007F09     |     CPU_XH  =  007F04 
    CPU_XL  =  007F05     |     CPU_YH  =  007F06     |     CPU_YL  =  007F07 
  6 CR         000F96 R   |   6 CREAT      0018CC R   |     CRR     =  00000D 
  6 CSTOR      0004F0 R   |   6 CTABLE     00241E R   |   6 CTAT       00243F R
  6 CTINIT     002467 R   |   6 D2SLASH    0029B0 R   |   6 D2STAR     0029C7 R
  6 DABS       002665 R   |   6 DABS1      00266D R   |   6 DAT        000CC8 R
    DATSTK  =  001680     |   6 DBLVER     0024EB R   |   6 DCLZ       0027AF R
  6 DCLZ1      0027B8 R   |   6 DCLZ4      0027C1 R   |   6 DCLZ8      0027CE R
  6 DCONST     001965 R   |   6 DDIG       0026D1 R   |   6 DDIGS      0026EA R
  6 DDOT       002701 R   |   6 DDOT0      002715 R   |   6 DDOT1      00272B R
  6 DDROP      00081C R   |   6 DDSLMOD    002B54 R   |   6 DDSTAR3    002A98 R
  6 DDUP       000827 R   |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
  6 DECIM      000EC8 R   |   6 DEPTH      000C60 R   |   6 DEQU4      002887 R
  6 DEQUAL     002872 R   |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
  6 DGREAT     002893 R   |   6 DGTQ1      000F0D R   |   6 DI         0000C4 R
  6 DIG        000E41 R   |   6 DIGIT      000DDC R   |   6 DIGS       000E52 R
  6 DIGS1      000E52 R   |   6 DIGS2      000E5F R   |   6 DIGTQ      000EDC R
    DISCOVER=  000000     |     DIV     =  000005     |   6 DLESS      00289E R
  6 DLESS4     0028B2 R   |   6 DLITER     002970 R   |   6 DLSHIFT    0029E3 R
  6 DLSHIFT1   0029F6 R   |   6 DLSHIFT2   002A0B R   |     DM_BK1RE=  007F90 
    DM_BK1RH=  007F91     |     DM_BK1RL=  007F92     |     DM_BK2RE=  007F93 
    DM_BK2RH=  007F94     |     DM_BK2RL=  007F95     |     DM_CR1  =  007F96 
    DM_CR2  =  007F97     |     DM_CSR1 =  007F98     |     DM_CSR2 =  007F99 
    DM_ENFCT=  007F9A     |   6 DN1        0008B3 R   |   6 DNEGA      000898 R
  6 DOCONST    001950 R   |   6 DOLIT      00046F R   |   6 DONXT      000483 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 193.
Hexadecimal [24-Bits]

Symbol Table

    DOORBELL=  000000     |   6 DOSTR      000FA6 R   |   6 DOT        00103D R
  6 DOT1       001053 R   |   6 DOTI1      001AB5 R   |   6 DOTID      001A9F R
  6 DOTO1      001495 R   |   6 DOTOK      00147B R   |   6 DOTPR      001166 R
  6 DOTQ       0016FD R   |   6 DOTQP      000FC3 R   |   6 DOTR       000FD1 R
  6 DOTS       001A41 R   |   6 DOTS1      001A4C R   |   6 DOTS2      001A55 R
  6 DOVAR      0006CF R   |   6 DOVER      002997 R   |   6 DO_DCONS   001988 R
    DP      =  000007     |   6 DPLUS      002B93 R   |   6 DPLUS1     002BBA R
  6 DRAT       002906 R   |   6 DRFROM     0028EE R   |   6 DROP       00060F R
  6 DROT       00281B R   |   6 DRSHIFT    002A1C R   |   6 DRSHIFT1   002A23 R
  6 DRSHIFT2   002A39 R   |   6 DSIGN      002676 R   |   6 DSIGN1     002680 R
  6 DSLA9      002B7E R   |   6 DSLASH     002B84 R   |   6 DSLMOD     002690 R
  6 DSLMOD3    0026AB R   |   6 DSLMOD4    0026B7 R   |   6 DSLMODa    0026B2 R
  6 DSLMODb    0026BD R   |   6 DSSTAR     00275B R   |   6 DSSTAR3    002778 R
  6 DSTAR      002A3F R   |   6 DSTOR      000CAF R   |   6 DSUB       002BC5 R
  6 DSUB1      002BEC R   |   6 DSWAP      002781 R   |   6 DTOF       003459 R
  6 DTOF1      003462 R   |   6 DTOF2      003470 R   |   6 DTOR       0028D0 R
  6 DUMP       0019F7 R   |   6 DUMP1      001A0E R   |   6 DUMP3      001A30 R
  6 DUMPP      0019C6 R   |   6 DUPP       000619 R   |   6 DVARIA     002924 R
    DVER_MAJ=  000001     |     DVER_MIN=  000000     |   6 DZEQUAL    002856 R
  6 DZLESS     0028B9 R   |   6 DZLESS1    0028C3 R   |   6 EDIGS      000E7D R
  6 EDOT       002DC6 R   |   6 EDOT0      002DDD R   |   6 EDOT2      002DE9 R
  6 EDOT3      002E02 R   |   6 EDOT4      002E2E R   |   6 EDOT5      002E4D R
  6 EECSTORE   001E53 R   |   6 EEPCP      001C79 R   |   6 EEPLAST    001C4C R
  6 EEPROM     001C34 R   |     EEPROM_B=  004000     |     EEPROM_E=  0047FF 
    EEPROM_R=  000010     |     EEPROM_S=  000800     |   6 EEPRUN     001C63 R
  6 EEPVP      001C8F R   |   6 EESTORE    001E9F R   |   6 EE_CCOMM   002169 R
  6 EE_COMMA   002148 R   |   6 EE_CREAD   001DE4 R   |   6 EE_READ    001DC2 R
  6 EI         0000BD R   |   6 ELSEE      00165C R   |   6 EMIT       000436 R
  6 ENEPER     002389 R   |     EOL_CR  =  000001     |     EOL_LF  =  000000 
  6 EQ1        000907 R   |   6 EQUAL      0008FA R   |   6 ERASE      000DAA R
    ERR     =  00001B     |   6 EVAL       0014BE R   |   6 EVAL1      0014BE R
  6 EVAL2      0014DA R   |   6 EXE1       000D3F R   |   6 EXECU      0004C4 R
    EXT     =  000000     |     EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1 
  6 EXTRC      000E04 R   |   6 FABS       00357B R   |   6 FABS1      003594 R
  6 FADDR      002236 R   |   6 FALGN4     00312B R   |   6 FALGN6     00313A R
  6 FALGN7     003161 R   |   6 FALGN71    003170 R   |   6 FALGN72    00318C R
  6 FALGN8     00318F R   |   6 FALIGN     0030F2 R   |   6 FALSE      000868 R
  6 FARAT      001CFA R   |   6 FARCAT     001D06 R   |   6 FC_XOFF    000463 R
  6 FC_XON     00044D R   |   6 FDOT       002E5C R   |   6 FDOT0      002E9A R
  6 FDOT1      002E89 R   |   6 FDOT10     002EF6 R   |   6 FDOT2      002EA8 R
  6 FDOT3      002EC1 R   |   6 FDOT6      002ED1 R   |   6 FDOT7      002ED6 R
  6 FDOT8      002EDE R   |   6 FDOT9      002EE6 R   |   6 FEQUAL     003545 R
  6 FER        002C5E R   |   6 FGREAT     00353A R   |     FHSE    =  7A1200 
    FHSI    =  F42400     |   6 FILL       000D77 R   |   6 FILL1      000D94 R
  6 FILL2      000D9D R   |   6 FIND       00125C R   |   6 FIND1      00127A R
  6 FIND2      0012A8 R   |   6 FIND3      0012B4 R   |   6 FIND4      0012C8 R
  6 FIND5      0012D5 R   |   6 FIND6      0012B9 R   |   6 FINIT      002C54 R
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 194.
Hexadecimal [24-Bits]

Symbol Table

    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
  6 FLESS      00352F R   |   6 FLOATQ     002F6E R   |   6 FLOATQ0    002F78 R
  6 FLOATQ1    002FDD R   |   6 FLOATQ2    002FE6 R   |   6 FLOATQ3    002FEE R
  6 FLOATQ4    003002 R   |   6 FLOAT_ER   00301D R   |   6 FLOAT_ER   00301A R
    FLOAT_MA=  000001     |     FLOAT_MI=  000000     |     FLSI    =  01F400 
  6 FMOVE      002241 R   |   6 FMOVE2     002272 R   |   6 FNE        002C81 R
  6 FNEGA      003561 R   |   6 FOR        0015CE R   |   6 FORGET     00015A R
  6 FORGET1    000189 R   |   6 FORGET2    00020F R   |   6 FORGET4    000218 R
  6 FORGET6    0001D1 R   |   6 FOV        002C9C R   |   6 FPLUS      00319B R
  6 FPLUS1     0031BB R   |   6 FPSTOR     001C15 R   |   6 FPSW       002C30 R
    FPTR    =  000034     |   6 FREEVAR    000225 R   |   6 FREEVAR4   00025B R
  6 FRESET     002C42 R   |   6 FSLASH     003387 R   |   6 FSLASH1    0033C9 R
  6 FSLASH8    00342F R   |   6 FSLASH9    003446 R   |   6 FSTAR      003360 R
  6 FSUB       0031CD R   |   6 FSUB1      0031ED R   |   6 FTOD       00347D R
  6 FTOD1      0034AD R   |   6 FTOD2      0034C6 R   |   6 FTOD3      0034D0 R
  6 FTOD4      0034DB R   |   6 FTOD5      0034E3 R   |   6 FTOD6      003503 R
  6 FTOD8      003508 R   |   6 FTOD9      003513 R   |   6 FVER       002BFE R
  6 FZE        002C6B R   |   6 FZEQUAL    00354E R   |   6 FZLESS     00351A R
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_ODR=  000000 
    GPIO_SIZ=  000005     |   6 GREAT      000953 R   |   6 GREAT1     00095E R
  6 HDOT       001020 R   |   6 HERE       000CFB R   |   6 HEX        000EB3 R
  6 HI         001B58 R   |   6 HLD        00074F R   |   6 HOLD       000E28 R
    HSECNT  =  004809     |     I2C_CCRH=  00521C     |     I2C_CCRH=  000080 
    I2C_CCRH=  0000C0     |     I2C_CCRH=  000080     |     I2C_CCRH=  000000 
    I2C_CCRH=  000001     |     I2C_CCRH=  000000     |     I2C_CCRL=  00521B 
    I2C_CCRL=  00001A     |     I2C_CCRL=  000002     |     I2C_CCRL=  00000D 
    I2C_CCRL=  000050     |     I2C_CCRL=  000090     |     I2C_CCRL=  0000A0 
    I2C_CR1 =  005210     |     I2C_CR1_=  000006     |     I2C_CR1_=  000007 
    I2C_CR1_=  000000     |     I2C_CR2 =  005211     |     I2C_CR2_=  000002 
    I2C_CR2_=  000003     |     I2C_CR2_=  000000     |     I2C_CR2_=  000001 
    I2C_CR2_=  000007     |     I2C_DR  =  005216     |     I2C_FREQ=  005212 
    I2C_ITR =  00521A     |     I2C_ITR_=  000002     |     I2C_ITR_=  000000 
    I2C_ITR_=  000001     |     I2C_OARH=  005214     |     I2C_OARH=  000001 
    I2C_OARH=  000002     |     I2C_OARH=  000006     |     I2C_OARH=  000007 
    I2C_OARL=  005213     |     I2C_OARL=  000000     |     I2C_OAR_=  000813 
    I2C_OAR_=  000009     |     I2C_PECR=  00521E     |     I2C_READ=  000001 
    I2C_SR1 =  005217     |     I2C_SR1_=  000003     |     I2C_SR1_=  000001 
    I2C_SR1_=  000002     |     I2C_SR1_=  000006     |     I2C_SR1_=  000000 
    I2C_SR1_=  000004     |     I2C_SR1_=  000007     |     I2C_SR2 =  005218 
    I2C_SR2_=  000002     |     I2C_SR2_=  000001     |     I2C_SR2_=  000000 
    I2C_SR2_=  000003     |     I2C_SR2_=  000005     |     I2C_SR3 =  005219 
    I2C_SR3_=  000001     |     I2C_SR3_=  000007     |     I2C_SR3_=  000004 
    I2C_SR3_=  000000     |     I2C_SR3_=  000002     |     I2C_TRIS=  00521D 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_WRIT=  000000     |   6 ICOLON     001897 R   |   6 IFETCH     0015EC R
  6 IFF        001634 R   |   6 IFMOVE     00231A R   |     IMEDD   =  000080 
  6 IMMED      0018A9 R   |   6 INCH       00042A R   |   6 INC_FPTR   001D8F R
  6 INITOFS    00185F R   |   6 INN        0006FD R   |     INPUT_DI=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 195.
Hexadecimal [24-Bits]

Symbol Table

    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_PU=  000001 
  6 INTE1      00145D R   |   6 INTER      001433 R   |   6 INTQ       0024C3 R
    INT_ADC2=  000016     |     INT_AUAR=  000012     |     INT_AWU =  000001 
    INT_CAN_=  000008     |     INT_CAN_=  000009     |     INT_CLK =  000002 
    INT_EXTI=  000003     |     INT_EXTI=  000004     |     INT_EXTI=  000005 
    INT_EXTI=  000006     |     INT_EXTI=  000007     |     INT_FLAS=  000018 
    INT_I2C =  000013     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000011     |     INT_UART=  000015 
    INT_UART=  000014     |     INT_VECT=  008060     |     INT_VECT=  00800C 
    INT_VECT=  008028     |     INT_VECT=  00802C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  008050     |     INT_VECT=  00804C     |     INT_VECT=  00805C 
    INT_VECT=  008058     |   6 INVER      000875 R   |     IPR0    =  000002 
    IPR1    =  000001     |     IPR2    =  000000     |     IPR3    =  000003 
    IPR_MASK=  000003     |     IRET_COD=  000080     |   6 ISEMI      0017F4 R
    ITC_SPR1=  007F70     |     ITC_SPR2=  007F71     |     ITC_SPR3=  007F72 
    ITC_SPR4=  007F73     |     ITC_SPR5=  007F74     |     ITC_SPR6=  007F75 
    ITC_SPR7=  007F76     |     ITC_SPR8=  007F77     |     IWDG_KR =  0050E0 
    IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2     |   6 JFETCH     0015F7 R
  6 JSRC       001849 R   |   6 KEY        000F1C R   |   6 KTAP       00134D R
  6 KTAP1      001370 R   |   6 KTAP2      001373 R   |   6 LAST       00078E R
  6 LASTN   =  003576 R   |   6 LBRAC      00146A R   |     LED2_BIT=  000005 
    LED2_MAS=  000020     |     LED2_POR=  00500A     |   6 LESS       000926 R
    LF      =  00000A     |   6 LINK    =  003576 R   |   6 LITER      0015A6 R
  6 LN2S       0023E5 R   |   6 LOCAL      000554 R   |   6 LOCK       001D7B R
  6 LOG2S      0023CF R   |   6 LSCALE     00303C R   |   6 LSHIFT     000BD0 R
  6 LSHIFT1    000BD9 R   |   6 LSHIFT4    000BE1 R   |   6 LT1        000931 R
    MASKK   =  001F7F     |   6 MAX        00096B R   |   6 MAX1       000975 R
    MAX_MANT=  7FFFFF     |   6 MIN        00097F R   |   6 MIN1       000989 R
  6 MMOD1      000A53 R   |   6 MMOD2      000A67 R   |   6 MMOD3      000A7E R
  6 MMSTA1     00328E R   |   6 MMSTA2     003299 R   |   6 MMSTA3     0032A4 R
  6 MMSTA4     00330F R   |   6 MMSTA5     003321 R   |   6 MMSTA6     00333A R
  6 MMSTA7     003357 R   |   6 MMSTAR     003283 R   |   6 MODD       000ACE R
  6 MONE       000C37 R   |     MS      =  000030     |   6 MSEC       0002D0 R
  6 MSMOD      000A36 R   |   6 MSTA1      000B5F R   |   6 MSTAR      000B3C R
    NAFR    =  004804     |   6 NAMEQ      0012F5 R   |   6 NAMET      001206 R
    NCLKOPT =  004808     |   6 NDROT      0027DF R   |   6 NEGAT      000886 R
  6 NEG_SIGN   00252E R   |   6 NEX1       000490 R   |   6 NEXT       0015DD R
    NFLASH_W=  00480E     |     NHSECNT =  00480A     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
    NOPTBL  =  00487F     |   6 NRAT       00059F R   |   6 NRDROP     00057B R
  6 NROT       0007FC R   |   6 NRSTO      0005BE R   |   6 NTIB       00070D R
    NUBC    =  004802     |     NUCLEO  =  000001     |   6 NUFQ       000F32 R
  6 NUFQ1      000F4B R   |   6 NUMBQ      00259D R   |   6 NUMQ0      0025DE R
  6 NUMQ1      002600 R   |   6 NUMQ3      00262A R   |   6 NUMQ4      00264B R
  6 NUMQ8      002654 R   |     NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD 
    NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 196.
Hexadecimal [24-Bits]

Symbol Table

  6 NonHandl   000000 R   |   6 OFFSET     0007B3 R   |     OFS     =  000005 
  6 ONE        000C29 R   |   6 ONEM       000BBF R   |   6 ONEP       000BB2 R
    OPT     =  000002     |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTIMIZE=  000001     |     OPTION_B=  004800 
    OPTION_E=  00487F     |     OPTION_S=  000080     |   6 ORIG       000049 R
  6 ORR        00068A R   |   6 OUTPUT     00043B R   |     OUTPUT_F=  000001 
    OUTPUT_O=  000000     |     OUTPUT_P=  000001     |     OUTPUT_S=  000000 
  6 OVER       000641 R   |   6 OVERT      0017C2 R   |     PA      =  000000 
  6 PACKS      000DBB R   |   6 PAD        000D0C R   |   6 PAREN      001175 R
  6 PARS       00106E R   |   6 PARS1      001099 R   |   6 PARS2      0010C4 R
  6 PARS3      0010C7 R   |   6 PARS4      0010D0 R   |   6 PARS5      0010F3 R
  6 PARS6      001108 R   |   6 PARS7      001117 R   |   6 PARS8      001126 R
  6 PARSE      001137 R   |   6 PARSEXP_   002F51 R   |   6 PAUSE      0002E0 R
    PA_BASE =  005000     |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_BASE =  005005     |     PB_CR1  =  005008 
    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
    PB_ODR  =  005005     |     PC      =  00000A     |     PC_BASE =  00500A 
    PC_CR1  =  00500D     |     PC_CR2  =  00500E     |     PC_DDR  =  00500C 
    PC_IDR  =  00500B     |     PC_ODR  =  00500A     |     PD      =  00000F 
  6 PDUM1      0019D9 R   |   6 PDUM2      0019EA R   |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
    PE_BASE =  005014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_BASE =  005019     |     PF_CR1  =  00501C 
    PF_CR2  =  00501D     |     PF_DDR  =  00501B     |     PF_IDR  =  00501A 
    PF_ODR  =  005019     |     PG      =  00001E     |     PG_BASE =  00501E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |     PH      =  000023 
    PH_BASE =  005023     |     PH_CR1  =  005026     |     PH_CR2  =  005027 
    PH_DDR  =  005025     |     PH_IDR  =  005024     |     PH_ODR  =  005023 
    PI      =  000028     |   6 PICK       000C77 R   |   6 PII        002348 R
    PI_BASE =  005028     |     PI_CR1  =  00502B     |     PI_CR2  =  00502C 
    PI_DDR  =  00502A     |     PI_IDR  =  005029     |     PI_ODR  =  005028 
  6 PLUS       00083C R   |   6 PNAM1      001767 R   |   6 PRESE      0014E9 R
  6 PRINT_VE   001B28 R   |     PROD1   =  000024     |     PROD2   =  000026 
    PROD3   =  000028     |   6 PROTECTE   000201 R   |   6 PRT_LICE   001B14 R
  6 PSTOR      000C8E R   |     PTR16   =  000035     |     PTR8    =  000036 
  6 PTRPLUS    001DA7 R   |   6 QBRAN      000498 R   |   6 QDUP       0007CC R
  6 QDUP1      0007D6 R   |   6 QKEY       000418 R   |   6 QSTAC      0014A1 R
  6 QUERY      0013CD R   |   6 QUEST      001060 R   |   6 QUIT       001506 R
  6 QUIT1      00150E R   |   6 QUIT2      001511 R   |   6 RAM2EE     0021E2 R
    RAMBASE =  000000     |   6 RAMLAST    0007A1 R   |     RAM_BASE=  000000 
    RAM_END =  0017FF     |     RAM_SIZE=  001800     |   6 RANDOM     00027E R
  6 RAT        000545 R   |   6 RBRAC      001836 R   |   6 REPEA      0016B1 R
  6 RFREE      0021C9 R   |   6 RFROM      000534 R   |     ROP     =  004800 
  6 ROT        0007DD R   |   6 ROW2BUF    00218B R   |     ROWBUFF =  001680 
    RP0     =  00002E     |   6 RPAT       000511 R   |     RPP     =  0017FF 
  6 RPSTO      00051E R   |   6 RSCALE     003060 R   |   6 RSHIFT     000BEC R
  6 RSHIFT1    000BF5 R   |   6 RSHIFT4    000BFD R   |     RST_SR  =  0050B3 
  6 RT12_2     0023B8 R   |   6 SAME1      001224 R   |   6 SAME2      00124D R
  6 SAMEQ      00121C R   |   6 SCAL1      003216 R   |   6 SCAL2      00323A R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 197.
Hexadecimal [24-Bits]

Symbol Table

  6 SCALDN2    0030E4 R   |   6 SCALDN3    0030E7 R   |   6 SCALEDOW   0030B8 R
  6 SCALETOM   003210 R   |   6 SCALEUP    003081 R   |   6 SCALEUP2   0030B4 R
  6 SCALEUP3   0030B7 R   |   6 SCOM1      00179C R   |   6 SCOM2      00179F R
  6 SCOMP      00177E R   |   6 SEED       000265 R   |     SEEDX   =  000038 
    SEEDY   =  00003A     |   6 SEMIS      0017D2 R   |   6 SETISP     0000D0 R
  6 SET_RAML   001919 R   |   6 SFN        002CF3 R   |     SFR_BASE=  005000 
    SFR_END =  0057FF     |   6 SFV        002D27 R   |   6 SFZ        002CBC R
  6 SIGN       000E67 R   |   6 SIGN1      000E77 R   |   6 SLASH      000AD8 R
  6 SLMOD      000A86 R   |   6 SLMOD1     000AB8 R   |   6 SLMOD8     000AC5 R
  6 SNAME      001731 R   |     SP0     =  00002C     |   6 SPACE      000F54 R
  6 SPACS      000F63 R   |   6 SPAT       0005F9 R   |     SPI_CR1 =  005200 
    SPI_CR2 =  005201     |     SPI_CRCP=  005205     |     SPI_DR  =  005204 
    SPI_ICR =  005202     |     SPI_RXCR=  005206     |     SPI_SR  =  005203 
    SPI_TXCR=  005207     |     SPP     =  001680     |     SPSAVE  =  000001 
  6 SPSTO      000606 R   |   6 SQRT10     0023A1 R   |   6 SQRT2      00235F R
  6 SQRT3      002376 R   |   6 SSMOD      000B68 R   |     SSP     =  000001 
    STACK   =  0017FF     |   6 STAR       000B31 R   |   6 STASL      000B79 R
  6 STEXP      002D72 R   |   6 STEXP1     002D88 R   |   6 STEXP2     002DB2 R
  6 STOD       0008BB R   |   6 STORE      0004D1 R   |   6 STO_SIGN   002546 R
  6 STR        000E95 R   |   6 STRCQ      0015AE R   |   6 STRQ       0016F0 R
  6 STRQP      000FBF R   |   6 SUBB       0008D2 R   |   6 SWAPP      000629 R
    SWIM_CSR=  007F80     |   6 TAP        001337 R   |   6 TBOOT      001B97 R
  6 TBRAN      0004A6 R   |   6 TBUF       00071D R   |     TBUFFBAS=  001680 
  6 TCHAR      000C48 R   |   6 TEMP       0006EE R   |   6 TEVAL      000740 R
  6 TFLASH     00072F R   |   6 THENN      001649 R   |   6 TIB        000D1D R
    TIBB    =  001700     |     TIBBASE =  001700     |     TIC     =  000027 
  6 TICK       00151D R   |     TIM1_ARR=  005262     |     TIM1_ARR=  005263 
    TIM1_BKR=  00526D     |     TIM1_CCE=  00525C     |     TIM1_CCE=  00525D 
    TIM1_CCM=  005258     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  005259     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525A     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525B     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCR=  005265     |     TIM1_CCR=  005266     |     TIM1_CCR=  005267 
    TIM1_CCR=  005268     |     TIM1_CCR=  005269     |     TIM1_CCR=  00526A 
    TIM1_CCR=  00526B     |     TIM1_CCR=  00526C     |     TIM1_CNT=  00525E 
    TIM1_CNT=  00525F     |     TIM1_CR1=  005250     |     TIM1_CR2=  005251 
    TIM1_CR2=  000000     |     TIM1_CR2=  000002     |     TIM1_CR2=  000004 
    TIM1_CR2=  000005     |     TIM1_CR2=  000006     |     TIM1_DTR=  00526E 
    TIM1_EGR=  005257     |     TIM1_EGR=  000007     |     TIM1_EGR=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 198.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_EGR=  000002     |     TIM1_EGR=  000003     |     TIM1_EGR=  000004 
    TIM1_EGR=  000005     |     TIM1_EGR=  000006     |     TIM1_EGR=  000000 
    TIM1_ETR=  005253     |     TIM1_ETR=  000006     |     TIM1_ETR=  000000 
    TIM1_ETR=  000001     |     TIM1_ETR=  000002     |     TIM1_ETR=  000003 
    TIM1_ETR=  000007     |     TIM1_ETR=  000004     |     TIM1_ETR=  000005 
    TIM1_IER=  005254     |     TIM1_IER=  000007     |     TIM1_IER=  000001 
    TIM1_IER=  000002     |     TIM1_IER=  000003     |     TIM1_IER=  000004 
    TIM1_IER=  000005     |     TIM1_IER=  000006     |     TIM1_IER=  000000 
    TIM1_OIS=  00526F     |     TIM1_PSC=  005260     |     TIM1_PSC=  005261 
    TIM1_RCR=  005264     |     TIM1_SMC=  005252     |     TIM1_SMC=  000007 
    TIM1_SMC=  000000     |     TIM1_SMC=  000001     |     TIM1_SMC=  000002 
    TIM1_SMC=  000004     |     TIM1_SMC=  000005     |     TIM1_SMC=  000006 
    TIM1_SR1=  005255     |     TIM1_SR1=  000007     |     TIM1_SR1=  000001 
    TIM1_SR1=  000002     |     TIM1_SR1=  000003     |     TIM1_SR1=  000004 
    TIM1_SR1=  000005     |     TIM1_SR1=  000006     |     TIM1_SR1=  000000 
    TIM1_SR2=  005256     |     TIM1_SR2=  000001     |     TIM1_SR2=  000002 
    TIM1_SR2=  000003     |     TIM1_SR2=  000004     |     TIM2_ARR=  00530D 
    TIM2_ARR=  00530E     |     TIM2_CCE=  005308     |     TIM2_CCE=  000000 
    TIM2_CCE=  000001     |     TIM2_CCE=  000004     |     TIM2_CCE=  000005 
    TIM2_CCE=  005309     |     TIM2_CCM=  005305     |     TIM2_CCM=  005306 
    TIM2_CCM=  005307     |     TIM2_CCM=  000000     |     TIM2_CCM=  000004 
    TIM2_CCM=  000003     |     TIM2_CCR=  00530F     |     TIM2_CCR=  005310 
    TIM2_CCR=  005311     |     TIM2_CCR=  005312     |     TIM2_CCR=  005313 
    TIM2_CCR=  005314     |     TIM2_CNT=  00530A     |     TIM2_CNT=  00530B 
    TIM2_CR1=  005300     |     TIM2_CR1=  000007     |     TIM2_CR1=  000000 
    TIM2_CR1=  000003     |     TIM2_CR1=  000001     |     TIM2_CR1=  000002 
    TIM2_EGR=  005304     |     TIM2_EGR=  000001     |     TIM2_EGR=  000002 
    TIM2_EGR=  000003     |     TIM2_EGR=  000006     |     TIM2_EGR=  000000 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |   6 TIMEOUTQ   000310 R   |   6 TIMER      0002FA R
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |   6 TNAM2      001A6F R
  6 TNAM3      001A8D R   |   6 TNAM4      001A93 R   |   6 TNAME      001A6C R
  6 TOFLASH    000335 R   |   6 TOKEN      0011F8 R   |   6 TOR        0005E2 R
  6 TORAM      000375 R   |   6 TRUE       000857 R   |     TRUEE   =  00FFFF 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 199.
Hexadecimal [24-Bits]

Symbol Table

  6 TWOSL      000C04 R   |   6 TYPE1      000F83 R   |   6 TYPE2      000F89 R
  6 TYPES      000F7E R   |   6 Timer4Ha   000005 R   |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
    UART3   =  000001     |     UART3_BA=  005240     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  005232 
    UART_BRR=  005233     |     UART_CR1=  005234     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  005235     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  005231     |     UART_GTR=  000009     |     UART_PSC=  00000A 
    UART_SR =  005230     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBASE   =  000006     |     UBC     =  004801     |     UCNTXT  =  000016 
    UCP     =  00001A     |     UCTIB   =  00000E     |     UD1     =  000001 
    UD2     =  000002     |     UD3     =  000003     |     UD4     =  000004 
    UDH     =  000001     |   6 UDIV10     00323B R   |     UDL     =  000003 
  6 UDOT       00100C R   |   6 UDOTR      000FEC R   |   6 UDSLA3     002AD7 R
  6 UDSLA4     002AFD R   |   6 UDSLA7     002B2E R   |   6 UDSLA8     002B39 R
  6 UDSLMOD    002AA2 R   |   6 UDSSTAR    002739 R   |   6 UEND       000047 R
    UFPSW   =  000008     |   6 UGREAT     00093D R   |   6 UGREAT1    000948 R
    UHLD    =  000014     |     UINN    =  00000C     |     UINTER  =  000012 
    ULAST   =  00001C     |   6 ULES1      00091B R   |   6 ULESS      000910 R
  6 UMMOD      0009B1 R   |   6 UMMOD1     0009C4 R   |   6 UMMOD2     0009E4 R
  6 UMMOD3     0009EA R   |   6 UMMOD4     0009F7 R   |   6 UMMOD5     000A03 R
  6 UMMOD6     000A09 R   |   6 UMMOD8     000A10 R   |   6 UMOD10     0031FA R
  6 UMSTA      000AE7 R   |   6 UNIQ1      00172E R   |   6 UNIQU      00170F R
  6 UNLKEE     001D15 R   |   6 UNLKFL     001D34 R   |   6 UNLOCK     001D53 R
  6 UNTIL      001611 R   |     UOFFSET =  00001E     |   6 UPDATCP    001CD2 R
  6 UPDATLAS   001CA9 R   |   6 UPDATPTR   0022D5 R   |   6 UPDATRUN   001CC1 R
  6 UPDATVP    001CE9 R   |   6 UPL1       0006CB R   |   6 UPLUS      0006B4 R
    UPP     =  000006     |   6 UPPER      0011BB R   |   6 UPPER1     0011DE R
  6 UPPER2     0011E7 R   |     URLAST  =  000022     |   6 USLMOD     000A1B R
    USR_BTN_=  000004     |     USR_BTN_=  000010     |     USR_BTN_=  005015 
    UTFLASH =  000020     |     UTIB    =  000010     |     UTMP    =  00000A 
  6 UTYP1      0019A9 R   |   6 UTYP2      0019B8 R   |   6 UTYPE      0019A4 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 200.
Hexadecimal [24-Bits]

Symbol Table

    UVP     =  000018     |   6 UZERO      00002B R   |   6 VARIA      0018E6 R
    VAR_BASE=  000080     |     VAR_TOP =  0017BF     |     VER     =  000004 
  6 VPP        000770 R   |     VSIZE   =  000006     |     WANT_CON=  000001 
    WANT_DEB=  000000     |     WANT_DOU=  000001     |     WANT_FLO=  000001 
    WANT_SCA=  000001     |     WANT_SEE=  000000     |     WDGOPT  =  004805 
    WDGOPT_I=  000002     |     WDGOPT_L=  000003     |     WDGOPT_W=  000000 
    WDGOPT_W=  000001     |   6 WHILE      001697 R   |   6 WITHI      000996 R
  6 WORDD      0011A1 R   |   6 WORDS      001AC9 R   |   6 WORS1      001ACF R
  6 WORS2      001AEB R   |   6 WR_BYTE    001DFE R   |   6 WR_WORD    001E23 R
  6 WTABLE     00242D R   |   6 WTAT       002451 R   |   6 WTINIT     002496 R
    WWDG_CR =  0050D1     |     WWDG_WR =  0050D2     |     XMEM_SIZ=  017830 
    XOFF    =  000013     |     XON     =  000011     |   6 XORR       00069F R
    XTEMP   =  000024     |     YTEMP   =  000026     |   6 ZEQ1       002866 R
  6 ZEQU1      00066C R   |   6 ZEQUAL     000662 R   |   6 ZERO       000C1E R
  6 ZL1        000659 R   |   6 ZLESS      000650 R   |   6 app_spac   003600 R
  6 baudrate   00037B R   |   6 block_er   001EE9 R   |   6 clear_ra   000019 R
  6 clock_in   000064 R   |   6 copy_buf   001F49 R   |   6 copy_buf   001F68 R
  6 copy_pro   001F68 R   |     da      =  000002     |     db      =  000003 
    dc      =  000000     |     dd      =  000001     |   6 do2lit     00297B R
  6 erase_fl   001F0B R   |   6 fmove_do   0022BE R   |   6 main       000016 R
  6 next_row   00227B R   |   6 no_move    0022C5 R   |   6 nsign      00251D R
  6 parse_di   00254A R   |   6 parse_ex   002F06 R   |   6 pristine   001FE9 R
  6 proceed_   001F0E R   |   6 reboot     000327 R   |   6 reset_ve   002050 R
  6 row_eras   001EC9 R   |   6 row_eras   001F22 R   |   6 row_eras   001F49 R
  6 set_opti   001FBD R   |   6 set_vect   0020F1 R   |   6 uart_ini   000076 R
  6 write_ro   001F8D R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 201.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   3600   flags    0

