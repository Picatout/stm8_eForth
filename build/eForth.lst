ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;-------------------------------------------------------------
                                     21 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                     22 ;  assemble using sdasstm8
                                     23 ;  implemented on NUCLEO-8S208RB board
                                     24 ;  Adapted by picatout 2019/10/27
                                     25 ;  https://github.com/picatout/stm8_nucleo/eForth
                                     26 ;--------------------------------------------------------------
                                     27 	.module EFORTH
                                     28          .optsdcc -mstm8
                                                .include "inc/macros.inc" 
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        
                                            ; macro to create dictionary header record
                                            .macro _HEADER label,len,name 
                                        
                                            ; runtime literal 
                                            .macro _DOLIT value 
                                        
                                            ; branch if TOS<>0
                                            ; TBRANCH 
                                            .macro _TBRAN target 
                                            
                                            ; branch if TOS==0 
                                            ; 0BRANCH 
                                            .macro _QBRAN target 
                                        
                                            ; uncondittionnal BRANCH 
                                            .macro _BRAN target 
                                        
                                            ; run time NEXT 
                                            .macro _DONXT target 
                                                .include "inc/config.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        
                                        ; constants to select board
                                        ; to assemble for a specific 
                                        ; board or MCU set it to 1 and the other
                                        ; to 0. 
                                 
                                 
                                 
                                        
                                        ; select end of line character
                                 
                                 
                                        
                                        ; set to 1 to include 
                                        ; scaling constants vocabulary
                                        ; see: const_ratio.asm 
                                 
                                        
                                        ; set to 1 to include 
                                        ; constants tables vocabulary 
                                        ; see: ctable.asm 
                                 
                                        
                                        ; include double library 
                                 
                                        
                                        ; to include floating point 
                                        ; library
                                        ; require double library  
                                 
                                        
                                        ; set to 1 to make vocabulary 
                                        ; case sensitive 
                                 
                                        
                                        ; how many bytes are reserved 
                                        ; by system at EEPROM base.
                                 
                                        
                                 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        .endif
                                        
                                 
                                        	.include "inc/stm8s105.inc"
                                        .if DISCOVERY
                                        	.include "inc/stm8s_disco.inc"
                                        .endif 
                                        XMEM_SIZE=0 ; size in bytes of EXTENDED MEMORY 
                                        UART_SR=UART2_SR
                                        UART_DR=UART2_DR
                                        UART_BRR1=UART2_BRR1
                                        UART_BRR2=UART2_BRR2
                                        UART_CR1=UART2_CR1
                                        UART_CR2=UART2_CR2
                                        .endif 
                                        
                                        	
                                         
                                        
                                        
                                        
                                     32 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     34 
                                     35 ;===============================================================
                                     36 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     37 ;  Date: 2020-06-07 
                                     38 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     39 ;  Date: 2019-10-26
                                     40 ;  Changes to memory map:
                                     41 ;       0x16f0  Data Stack, growing downward
                                     42 ;       0x1700  Terminal input buffer TIB
                                     43 ;       0x17ff  Return Stack, growing downard
                                     44 ;================================================================
                                     45 ;       STM8EF, Version 2.1, 13 July
                                     46 ;               Implemented on STM8S-Discovery Board.
                                     47 ;               Assembled by ST VisualDevelop STVD 
                                     48 ;               Bootup on internal 2 MHz clock
                                     49 ;               Switch to external 16 MHz crystal clock
                                     50 ;
                                     51 ; FORTH Virtual Machine:
                                     52 ; Subroutine threaded model
                                     53 ; SP Return stack pointer
                                     54 ; X Data stack pointer
                                     55 ; A,Y Scratch pad registers
                                     56 ;
                                     57 ; Memory Map:
                                     58 ; 0x0 RAM memory, system variables
                                     59 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     60 ; 0x780 Data stack, growing downward
                                     61 ; 0x790 Terminal input buffer TIB
                                     62 ; 0x7FF Return stack, growing downward
                                     63 ; 0x8000 Interrupt vector table
                                     64 ; 0x8080 FORTH startup code
                                     65 ; 0x80E7 Start of FORTH dictionary in ROM
                                     66 ; 0x9584 End of FORTH dictionary
                                     67 ;
                                     68 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     69 ;                  use UART1 instead of UART2 for communication with user.
                                     70 ;                  UART1 is available as ttyACM* device via USB connection.
                                     71 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     72 ;                  and MSEC word that return MS value.
                                     73 ;
                                     74 ;       EF12, Version 2.1, 18apr00cht
                                     75 ;               move to 8000H replacing WHYP.
                                     76 ;               copy interrupt vectors from WHYPFLSH.S19
                                     77 ;               to EF12.S19 before flashing
                                     78 ;               add TICKS1 and DELAY1 for motor stepping
                                     79 ;
                                     80 ;       EF12, 02/18/00, C. H. Ting
                                     81 ;       Adapt 86eForth v2.02 to 68HC12.
                                     82 ;               Use WHYP to seed EF12.ASM
                                     83 ;               Use AS12 native 68HC12 assembler:
                                     84 ;               as12 ef12.asm >ef12.lst
                                     85 ;       EF12A, add ADC code, 02mar00cht
                                     86 ;       EF12B, 01mar00cht
                                     87 ;               stack to 0x78, return stack to 0xf8.
                                     88 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     89 ;               add PWM registers
                                     90 ;               add SPI registers and code
                                     91 ;       EF12C, 12mar00cht
                                     92 ;               add MAX5250 D/A converter
                                     93 ;       EF12D, 15mar00cht
                                     94 ;               add all the Lexel interface words
                                     95 ;       EF12E, 18apr00cht, save for reference
                                     96 ;
                                     97 ;       Copyright (c) 2000
                                     98 ;       Dr. C. H. Ting
                                     99 ;       156 14th Avenue
                                    100 ;       San Mateo, CA 94402
                                    101 ;       (650) 571-7639
                                    102 ;
                                    103 
                                    104       
                                    105 ;*********************************************************
                                    106 ;	Assembler constants
                                    107 ;*********************************************************
                           000000   108 RAMBASE =	0x0000	   ;ram base
                           000001   109 .if NUCLEO 
                           0017FF   110 STACK   =	0x17FF 	;system (return) stack empty 
                           001680   111 DATSTK  =	0x1680	;data stack  empty
                           001680   112 TBUFFBASE =     0x1680  ; flash read/write transaction buffer address  
                           001700   113 TIBBASE =       0X1700  ; transaction input buffer addr.
                           000000   114 .else ; DISCOVERY
                                    115 STACK   =	0x7FF 	;system (return) stack empty 
                                    116 DATSTK  =	0x680	;data stack  empty
                                    117 TBUFFBASE =     0x680  ; flash read/write transaction buffer address  
                                    118 TIBBASE =       0X700  ; transaction input buffer addr.
                                    119 .endif
                                    120 
                                    121 ;; Memory allocation
                           000006   122 UPP     =     RAMBASE+6          ; systeme variables base address 
                           001680   123 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0017FF   124 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           001680   125 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           001700   126 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   127 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0017BF   128 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    129 
                                    130 ; user variables constants 
                           000006   131 UBASE = UPP       ; numeric base 
                           000008   132 UFPSW = UBASE+2  ; floating point state word 
                           00000A   133 UTMP = UFPSW+2    ; temporary storage
                           00000C   134 UINN = UTMP+2     ; >IN tib pointer 
                           00000E   135 UCTIB = UINN+2    ; tib count 
                           000010   136 UTIB = UCTIB+2    ; tib address 
                           000012   137 UINTER = UTIB+2   ; interpreter vector 
                           000014   138 UHLD = UINTER+2   ; hold 
                           000016   139 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000018   140 UVP = UCNTXT+2    ; variable pointer 
                           00001A   141 UCP = UVP+2      ; code pointer
                           00001C   142 ULAST = UCP+2    ; last dictionary pointer 
                           00001E   143 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000020   144 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
                           000022   145 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    146 
                                    147 ;******  System Variables  ******
                           000024   148 XTEMP	=	URLAST +2;address called by CREATE
                           000026   149 YTEMP	=	XTEMP+2	;address called by CREATE
                           000024   150 PROD1 = XTEMP	;space for UM*
                           000026   151 PROD2 = PROD1+2
                           000028   152 PROD3 = PROD2+2
                           00002A   153 CARRY = PROD3+2
                           00002C   154 SP0	= CARRY+2	;initial data stack pointer
                           00002E   155 RP0	= SP0+2		;initial return stack pointer
                           000030   156 MS    =   RP0+2         ; millisecond counter 
                           000032   157 CNTDWN =  MS+2          ; count down timer 
                           000034   158 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000035   159 PTR16 = FPTR+1          ; middle byte of farptr 
                           000036   160 PTR8 = FPTR+2           ; least byte of farptr 
                           000038   161 SEEDX = PTR8+2          ; PRNG seed X 
                           00003A   162 SEEDY = SEEDX+2         ; PRNG seed Y 
                                    163 
                                    164 ; EEPROM persistant data  
                           004000   165 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   166 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   167 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   168 APP_VP = APP_CP+2  ; free data space pointer 
                                    169 
                                    170 
                                    171 ;***********************************************
                                    172 ;; Version control
                                    173 
                           000004   174 VER     =     4         ;major release version
                           000000   175 EXT     =     0         ;minor extension
                                    176 
                                    177 ;; Constants
                                    178 
                           00FFFF   179 TRUEE   =     0xFFFF      ;true flag
                                    180 
                           000040   181 COMPO   =     0x40     ;lexicon compile only bit
                           000080   182 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   183 MASKK   =     0x1F7F  ;lexicon bit mask
                                    184 
                           000002   185 CELLL   =     2       ;size of a cell
                           00000A   186 BASEE   =     10      ;default radix
                           000008   187 BKSPP   =     8       ;back space
                           00000A   188 LF      =     10      ;line feed
                           00000D   189 CRR     =     13      ;carriage return
                           000011   190 XON     =     17
                           000013   191 XOFF    =     19
                           00001B   192 ERR     =     27      ;error escape
                           000027   193 TIC     =     39      ;tick
                           0000CD   194 CALLL   =     0xCD     ;CALL opcodes
                           000080   195 IRET_CODE =   0x80    ; IRET opcode 
                                    196 
                                    197         .macro _ledon
                                    198         .if NUCLEO
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    199         bset PC_ODR,#LED2_BIT
                                    200         .else ;DISCOVERY 
                                    201         .if DISCOVERY
                                    202         bres PD_ODR,#LD1_BIT 
                                    203         .endif
                                    204         .endif
                                    205         .endm
                                    206 
                                    207         .macro _ledoff
                                    208         .if NUCLEO 
                                    209         bres PC_ODR,#LED2_BIT
                                    210         .else ;DISCOVERY 
                                    211         .if DISCOVERY
                                    212         bset PD_ODR,#LD1_BIT 
                                    213         .endif 
                                    214         .endif
                                    215         .endm
                                    216 
                                    217 ;**********************************************************
                                    218         .area DATA (ABS)
      000000                        219         .org RAMBASE 
                                    220 ;**********************************************************
                                    221 
                                    222 ;**********************************************************
                                    223         .area SSEG (ABS) ; STACK
      001700                        224         .org 0x1700
      001700                        225         .ds 256 
                                    226 ; space for DATSTK,TIB and STACK         
                                    227 ;**********************************************************
                                    228 
                                    229 ;**********************************************************
                                    230         .area HOME ; vectors table
                                    231 ;**********************************************************
      000000 82 00 00 16            232 	int main	        ; reset
      000004 82 00 00 00            233 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            234 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            235 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            236 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            237 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            238 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            239 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            240 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            241 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            242 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            243 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            244 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            245 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            246 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            247 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            248 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            249 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            250 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            251 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            252 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            253 	int NonHandledInterrupt	; irq19
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      000058 82 00 00 00            254 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            255 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            256 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            257 	int Timer4Handler	; irq23
      000068 82 00 00 00            258 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            259 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            260 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            261 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            262 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            263 	int NonHandledInterrupt	; irq29
                                    264 
                                    265 ;**********************************************************
                                    266         .area CODE
                                    267 ;**********************************************************
                                    268 
                                    269 ; non handled interrupt reset MCU
      000000                        270 NonHandledInterrupt:
      000000 A6 80            [ 1]  271         ld a, #0x80
      000002 C7 50 D1         [ 1]  272         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    273 	;iret
                                    274 
                                    275 ; used for milliseconds counter 
                                    276 ; MS is 16 bits counter 
      000005                        277 Timer4Handler:
      000005 72 5F 53 42      [ 1]  278 	clr TIM4_SR 
      000009 BE 30            [ 2]  279         ldw x,MS 
      00000B 5C               [ 1]  280         incw x 
      00000C BF 30            [ 2]  281         ldw MS,x
      00000E BE 32            [ 2]  282         ldw x,CNTDWN 
      000010 27 03            [ 1]  283         jreq 1$
      000012 5A               [ 2]  284         decw x 
      000013 BF 32            [ 2]  285         ldw CNTDWN,x 
      000015                        286 1$:         
      000015 80               [11]  287         iret 
                                    288 
                                    289 
                                    290 ;; Main entry points and COLD start data
      000016                        291 main:
                                    292 ; clear all RAM
      000016 AE 00 00         [ 2]  293 	ldw X,#RAMBASE
      000019                        294 clear_ram0:
      000019 7F               [ 1]  295 	clr (X)
      00001A 5C               [ 1]  296 	incw X
      00001B A3 17 FF         [ 2]  297 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  298 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  299         ldw x,#RPP
      000023 94               [ 1]  300         ldw sp,x
                                    301 ; set SEEDX and SEEDY to 1 
      000024 3C 39            [ 1]  302         inc SEEDX+1 
      000026 3C 3B            [ 1]  303         inc SEEDY+1          
      000028 CC 00 49         [ 2]  304 	jp ORIG
                                    305 
                                    306 ; COLD initialize these variables.
      00002B                        307 UZERO:
      00002B 00 0A                  308         .word      BASEE   ;BASE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      00002D 00 00                  309         .word      0       ; floating point state 
      00002F 00 00                  310         .word      0       ;tmp
      000031 00 00                  311         .word      0       ;>IN
      000033 00 00                  312         .word      0       ;#TIB
      000035 17 00                  313         .word      TIBB    ;TIB
      000037 13 4C                  314         .word      INTER   ;'EVAL
      000039 00 00                  315         .word      0       ;HLD
      00003B 31 CE                  316         .word      LASTN  ;CNTXT pointer
      00003D 00 80                  317         .word      VAR_BASE   ;variables free space pointer 
      00003F 32 80                  318         .word      app_space ; FLASH free space pointer 
      000041 31 CE                  319         .word      LASTN   ;LAST
      000043 00 00                  320         .word      0        ; OFFSET 
      000045 00 00                  321         .word      0       ; TFLASH
                                    322 ;       .word      0       ; URLAST   
      000047 00 00                  323 UEND:   .word      0
                                    324 
      000049                        325 ORIG:   
                                    326 ; initialize SP
      000049 AE 17 FF         [ 2]  327         LDW     X,#STACK  ;initialize return stack
      00004C 94               [ 1]  328         LDW     SP,X
      00004D BF 2E            [ 2]  329         LDW     RP0,X
      00004F AE 16 80         [ 2]  330         LDW     X,#DATSTK ;initialize data stack
      000052 BF 2C            [ 2]  331         LDW     SP0,X
                           000001   332 .if NUCLEO        
                                    333 ; initialize PC_5 as output to control LED2
                                    334 ; added by Picatout 
      000054 72 1A 50 0D      [ 1]  335         bset PC_CR1,#LED2_BIT
      000058 72 1A 50 0E      [ 1]  336         bset PC_CR2,#LED2_BIT
      00005C 72 1A 50 0C      [ 1]  337         bset PC_DDR,#LED2_BIT
                                    338 .endif 
                           000000   339 .if DISCOVERY
                                    340         bset PD_CR1,#LD1_BIT
                                    341         bset PD_CR2,#LD1_BIT
                                    342         bset PD_DDR,#LD1_BIT 
                                    343 .endif
      000060                        344         _ledoff
                           000001     1         .if NUCLEO 
      000060 72 1B 50 0A      [ 1]    2         bres PC_ODR,#LED2_BIT
                           000000     3         .else ;DISCOVERY 
                                      4         .if DISCOVERY
                                      5         bset PD_ODR,#LD1_BIT 
                                      6         .endif 
                                      7         .endif
                                    345 ; initialize clock to HSI
                                    346 ; no divisor 16Mhz 
                                    347 ; Added by Picatout 
      000064                        348 clock_init:
      000064 72 5F 50 C6      [ 1]  349         clr CLK_CKDIVR
      000068 72 12 50 C5      [ 1]  350 	bset CLK_SWCR,#CLK_SWCR_SWEN
                           000001   351 .if NUCLEO|DOORBELL
      00006C A6 E1            [ 1]  352 	ld a,#CLK_SWR_HSI
                           000000   353 .else ; DISCOVERY as 16Mhz crystal
                                    354 	ld a,#CLK_SWR_HSE
                                    355 .endif 
      00006E C7 50 C4         [ 1]  356 	ld CLK_SWR,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      000071 C1 50 C3         [ 1]  357 1$:	cp a,CLK_CMSR
      000074 26 FB            [ 1]  358 	jrne 1$
                                    359         
                                    360 ; initialize UART, 115200 8N1
      000076                        361 uart_init:
                           000001   362 .if NUCLEO 
      000076 72 14 50 C7      [ 1]  363 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    364 	; configure tx pin
      00007A 72 1A 50 02      [ 1]  365 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      00007E 72 1A 50 03      [ 1]  366 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      000082 72 1A 50 04      [ 1]  367 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    368 	; baud rate 115200 Fmaster=16Mhz  16000000/115200=139=0x8b
                           000000   369 .else ; DISCOVERY use UART2 
                                    370 	bset CLK_PCKENR1,#CLK_PCKENR1_UART2
                                    371 	; configure tx pin
                                    372 	bset PD_DDR,#UART2_TX_PIN ; tx pin
                                    373 	bset PD_CR1,#UART2_TX_PIN ; push-pull output
                                    374 	bset PD_CR2,#UART2_TX_PIN ; fast output
                                    375 .endif
                                    376 ; baud rate 115200 Fmaster=8Mhz  
      000086 35 0B 52 33      [ 1]  377 	mov UART_BRR2,#0x0b ; must be loaded first
      00008A 35 08 52 32      [ 1]  378 	mov UART_BRR1,#0x8
      00008E 35 0C 52 35      [ 1]  379 	mov UART_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    380 ; initialize timer4, used for millisecond interrupt  
      000092 35 07 53 45      [ 1]  381 	mov TIM4_PSCR,#7 ; prescale 128  
      000096 35 7D 53 46      [ 1]  382 	mov TIM4_ARR,#125 ; set for 1msec.
      00009A 35 05 53 40      [ 1]  383 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      00009E 72 10 53 41      [ 1]  384 	bset TIM4_IER,#TIM4_IER_UIE 
                                    385 ; set TIM4 interrupt priority to highest
      0000A2 A6 3F            [ 1]  386         ld a,#~(IPR_MASK<<6)
      0000A4 C4 7F 75         [ 1]  387         and a,ITC_SPR6
      0000A7 AA C0            [ 1]  388         or a,#(IPR3<<6)
      0000A9 C7 7F 75         [ 1]  389         ld ITC_SPR6,a 
      0000AC 9A               [ 1]  390         rim
      0000AD CC 1A 58         [ 2]  391         jp  COLD   ;default=MN1
                                    392 
                           000000   393         LINK=0 
                                    394 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;        
                                    395 ;; place MCU in sleep mode with
                                    396 ;; halt opcode 
                                    397 ;; BYE ( -- )
                                    398 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000B0                        399         _HEADER BYE,3,"BYE"
      0000B0 00 00                    1         .word LINK 
                           0000B2     2         LINK=.
      0000B2 03                       3         .byte 3  
      0000B3 42 59 45                 4         .ascii "BYE"
      0000B6                          5         BYE:
      0000B6 8E               [10]  400         halt 
      0000B7 81               [ 4]  401         ret 
                                    402 
                                    403 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    404 ; Enable interrupts 
                                    405 ; EI ( -- )
                                    406 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      0000B8                        407         _HEADER EI,2,"EI"
      0000B8 00 B2                    1         .word LINK 
                           0000BA     2         LINK=.
      0000BA 02                       3         .byte 2  
      0000BB 45 49                    4         .ascii "EI"
      0000BD                          5         EI:
      0000BD 9A               [ 1]  408         rim 
      0000BE 81               [ 4]  409         ret 
                                    410 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    411 ; Disable interrupts
                                    412 ; DI ( -- )
                                    413 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000BF                        414         _HEADER DI,2,"DI"
      0000BF 00 BA                    1         .word LINK 
                           0000C1     2         LINK=.
      0000C1 02                       3         .byte 2  
      0000C2 44 49                    4         .ascii "DI"
      0000C4                          5         DI:
      0000C4 9B               [ 1]  415         sim 
      0000C5 81               [ 4]  416         ret 
                                    417 
                                    418 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    419 ; set interrupt priority level 
                                    420 ; SET-ISP ( n1 n2 -- )
                                    421 ; n1 level {1..3}
                                    422 ; n2 vector {0..29}
                                    423 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000C6                        424         _HEADER SETISP,7,"SET-ISP"
      0000C6 00 C1                    1         .word LINK 
                           0000C8     2         LINK=.
      0000C8 07                       3         .byte 7  
      0000C9 53 45 54 2D 49 53 50     4         .ascii "SET-ISP"
      0000D0                          5         SETISP:
      0000D0 90 93            [ 1]  425         ldw y,x 
      0000D2 90 FE            [ 2]  426         ldw y,(y)
      0000D4 A6 04            [ 1]  427         ld a,#4 ; 4 slot per register 
                                    428 ;  quotient select register, remainder select slot in register.        
      0000D6 90 62            [ 2]  429         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000D8 A4 03            [ 1]  430         and a,#3 
      0000DA 48               [ 1]  431         sll a ; 2*SLOT  lshift 
      0000DB 72 A9 7F 70      [ 2]  432         addw y,#ITC_SPR1 
      0000DF FF               [ 2]  433         ldw (x),y  ; ( level reg -- )
      0000E0 90 5F            [ 1]  434         clrw y 
      0000E2 90 97            [ 1]  435         ld yl,a 
      0000E4 1D 00 02         [ 2]  436         subw x,#CELLL 
      0000E7 FF               [ 2]  437         ldw (x),y  ; ( level reg lshift -- )
      0000E8 90 93            [ 1]  438         ldw y,x 
      0000EA 90 EE 02         [ 2]  439         ldw y,(2,y) 
      0000ED 90 F6            [ 1]  440         ld a,(y)   ; reg_value
      0000EF 1D 00 02         [ 2]  441         subw x,#CELLL 
      0000F2 FF               [ 2]  442         ldw (x),y ; ( level reg lshift rval -- )
      0000F3 CD 05 B0         [ 4]  443         call OVER ; ( level reg lshift rval lshift -- )
      0000F6 CD 04 6F         [ 4]  444         call DOLIT 
      0000F9 00 03                  445         .word 3
      0000FB CD 05 98         [ 4]  446         call SWAPP  ; ( level reg lshift rval 3 lshift )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      0000FE CD 0A E9         [ 4]  447         call LSHIFT ; creat slot mask 
      000101 CD 07 C7         [ 4]  448         call INVER  ; ( level reg lshift rval mask )
      000104 CD 05 E5         [ 4]  449         call ANDD ; ( level reg lshift slot_masked )
      000107 CD 05 51         [ 4]  450         call TOR  ; ( level reg lshift -- R: slot_masked )
      00010A CD 07 4C         [ 4]  451         call ROT  ; ( reg lshift level )
      00010D CD 05 98         [ 4]  452         call SWAPP ; ( reg level lshift )
      000110 CD 0A E9         [ 4]  453         call LSHIFT  ; ( reg slot_level -- )
      000113 CD 05 34         [ 4]  454         call RFROM ; ( reg slot_level masked_val )
      000116 CD 05 F9         [ 4]  455         call ORR   ; ( reg updated_rval )
      000119 CD 05 98         [ 4]  456         call SWAPP 
      00011C CD 04 F0         [ 4]  457         call CSTOR
                                    458 
                                    459 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    460 ; sélectionne l'application 
                                    461 ; qui démarre automatique lors 
                                    462 ; d'un COLD start 
                                    463 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00011F                        464         _HEADER AUTORUN,7,"AUTORUN"
      00011F 00 C8                    1         .word LINK 
                           000121     2         LINK=.
      000121 07                       3         .byte 7  
      000122 41 55 54 4F 52 55 4E     4         .ascii "AUTORUN"
      000129                          5         AUTORUN:
      000129 CD 11 11         [ 4]  465         call TOKEN 
      00012C CD 05 88         [ 4]  466         call DUPP 
      00012F CD 04 98         [ 4]  467         call QBRAN 
      000132 02 0F                  468         .word FORGET2
      000134 CD 12 0E         [ 4]  469         call NAMEQ
      000137 CD 07 3B         [ 4]  470         call QDUP 
      00013A CD 04 98         [ 4]  471         call QBRAN 
      00013D 02 0F                  472         .word FORGET2
      00013F CD 05 7E         [ 4]  473         call DROP 
      000142 1D 00 04         [ 2]  474         subw x,#2*CELLL 
      000145 90 5F            [ 1]  475         clrw y 
      000147 FF               [ 2]  476         ldw (x),y 
      000148 90 AE 40 02      [ 2]  477         ldw y,#APP_RUN 
      00014C EF 02            [ 2]  478         ldw (2,x),y 
      00014E CC 1D 54         [ 2]  479         jp EESTORE 
                                    480 
                                    481 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    482 ;; Reset dictionary pointer before 
                                    483 ;; forgotten word. RAM space and 
                                    484 ;; interrupt vector defined after 
                                    485 ;; must be resetted also.
                                    486 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000151                        487         _HEADER FORGET,6,"FORGET"
      000151 01 21                    1         .word LINK 
                           000153     2         LINK=.
      000153 06                       3         .byte 6  
      000154 46 4F 52 47 45 54        4         .ascii "FORGET"
      00015A                          5         FORGET:
      00015A CD 11 11         [ 4]  488         call TOKEN
      00015D CD 05 88         [ 4]  489         call DUPP 
      000160 CD 04 98         [ 4]  490         call QBRAN 
      000163 02 0F                  491         .word FORGET2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      000165 CD 12 0E         [ 4]  492         call NAMEQ ; ( a -- ca na | a F )
      000168 CD 07 3B         [ 4]  493         call QDUP 
      00016B CD 04 98         [ 4]  494         call QBRAN 
      00016E 02 0F                  495         .word FORGET2
                                    496 ; only forget users words 
      000170 CD 05 88         [ 4]  497         call DUPP ; ( ca na na )
      000173 CD 04 6F         [ 4]  498         call DOLIT 
      000176 32 80                  499         .word app_space 
      000178 CD 05 98         [ 4]  500         call SWAPP 
      00017B CD 08 6D         [ 4]  501         call  ULESS 
      00017E CD 04 98         [ 4]  502         call QBRAN 
      000181 01 D1                  503         .word FORGET6 
                                    504 ; ( ca na -- )        
                                    505 ;reset ivec with address >= ca
      000183 CD 05 98         [ 4]  506         call SWAPP ; ( na ca -- ) 
      000186 CD 1F 57         [ 4]  507         call CHKIVEC ; ( na -- ) 
                                    508 ; start at LAST and link back to na 
                                    509 ; if variable found reset VP at that point.
      000189                        510 FORGET1:
      000189 CD 06 FD         [ 4]  511         call LAST 
      00018C CD 04 E3         [ 4]  512         call AT 
      00018F CD 05 88         [ 4]  513         call DUPP  ; ( -- na last last )
      000192 CD 02 25         [ 4]  514         call FREEVAR ; ( -- na last )
      000195 CD 05 88         [ 4]  515         call DUPP 
      000198 CD 04 6F         [ 4]  516         call DOLIT 
      00019B 00 02                  517         .word 2 
      00019D CD 08 26         [ 4]  518         call SUBB ; ( na last -- na last lfa ) link address 
      0001A0 CD 04 E3         [ 4]  519         call AT 
      0001A3 CD 05 88         [ 4]  520         call DUPP ; ( -- na last a a )
      0001A6 CD 06 D1         [ 4]  521         call CNTXT 
      0001A9 CD 04 D1         [ 4]  522         call STORE
      0001AC CD 06 FD         [ 4]  523         call LAST  
      0001AF CD 04 D1         [ 4]  524         call STORE ; ( --  na last )
      0001B2 CD 05 B0         [ 4]  525         call OVER 
      0001B5 CD 08 4E         [ 4]  526         call EQUAL ; ( na last na -- na T|F ) 
      0001B8 CD 04 98         [ 4]  527         call QBRAN 
      0001BB 01 89                  528         .word FORGET1 
                                    529 ; ( na -- )
      0001BD CD 04 6F         [ 4]  530         call DOLIT 
      0001C0 00 02                  531         .word 2 
      0001C2 CD 08 26         [ 4]  532         call SUBB 
      0001C5 CD 06 ED         [ 4]  533         call CPP 
      0001C8 CD 04 D1         [ 4]  534         call STORE  
      0001CB CD 1B 87         [ 4]  535         call UPDATCP 
      0001CE CC 1B 5E         [ 2]  536         jp UPDATLAST 
      0001D1                        537 FORGET6: ; tried to forget a RAM or system word 
                                    538 ; ( ca na -- )
      0001D1 1D 00 02         [ 2]  539         subw x,#CELLL 
      0001D4 90 BE 2C         [ 2]  540         ldw y,SP0 
      0001D7 FF               [ 2]  541         ldw (x),y  
      0001D8 CD 08 6D         [ 4]  542         call ULESS
      0001DB CD 04 98         [ 4]  543         call QBRAN 
      0001DE 02 01                  544         .word PROTECTED 
      0001E0 CD 13 1A         [ 4]  545         call ABORQ 
      0001E3 1D                     546         .byte 29
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      0001E4 20 46 6F 72 20 52 41   547         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      000201                        548 PROTECTED:
      000201 CD 13 1A         [ 4]  549         call ABORQ
      000204 0A                     550         .byte 10
      000205 20 50 72 6F 74 65 63   551         .ascii " Protected"
             74 65 64
      00020F                        552 FORGET2: ; no name or not found in dictionary 
      00020F CD 13 1A         [ 4]  553         call ABORQ
      000212 05                     554         .byte 5
      000213 20 77 68 61 74         555         .ascii " what"
      000218                        556 FORGET4:
      000218 CC 05 7E         [ 2]  557         jp DROP 
                                    558 
                                    559 
                                    560 ;;;;;;;;;;;;;;;;;;;;;
                                    561 ; if na is variable 
                                    562 ; free variable data  
                                    563 ; FREEVAR ( na -- )
                                    564 ;;;;;;;;;;;;;;;;;;;;;;
      00021B                        565         _HEADER FREEVAR,7,"FREEVAR"
      00021B 01 53                    1         .word LINK 
                           00021D     2         LINK=.
      00021D 07                       3         .byte 7  
      00021E 46 52 45 45 56 41 52     4         .ascii "FREEVAR"
      000225                          5         FREEVAR:
      000225 CD 05 88         [ 4]  566         call DUPP ; ( na na -- )
      000228 CD 05 01         [ 4]  567         CALL CAT  ; ( na c -- )
      00022B CD 0A CB         [ 4]  568         call ONEP ;
      00022E CD 07 AD         [ 4]  569         CALL PLUS ; ( na c+1 -- ca ) 
      000231 CD 0A CB         [ 4]  570         call ONEP ; ( ca+ -- ) to get routne address 
      000234 CD 05 88         [ 4]  571         call DUPP ; ( ca+ ca+ -- )
      000237 CD 04 E3         [ 4]  572         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      00023A CD 04 6F         [ 4]  573         call DOLIT 
      00023D 06 3E                  574         .word DOVAR ; if routine address is DOVAR then variable 
      00023F CD 08 4E         [ 4]  575         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      000242 CD 04 98         [ 4]  576         call QBRAN 
      000245 02 5B                  577         .word FREEVAR4 
      000247 CD 04 6F         [ 4]  578         call DOLIT 
      00024A 00 02                  579         .word 2 
      00024C CD 07 AD         [ 4]  580         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      00024F CD 04 E3         [ 4]  581         call AT 
      000252 CD 06 DF         [ 4]  582         call VPP   
      000255 CD 04 D1         [ 4]  583         call STORE 
      000258 CC 1B 9E         [ 2]  584         jp UPDATVP 
      00025B                        585 FREEVAR4: ; not variable
      00025B CC 05 7E         [ 2]  586         jp  DROP 
                                    587 
                                    588 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    589 ;    SEED ( n -- )
                                    590 ; Initialize PRNG seed with n 
                                    591 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      00025E                        592         _HEADER SEED,4,"SEED"
      00025E 02 1D                    1         .word LINK 
                           000260     2         LINK=.
      000260 04                       3         .byte 4  
      000261 53 45 45 44              4         .ascii "SEED"
      000265                          5         SEED:
      000265 90 93            [ 1]  593         ldw y,x 
      000267 1C 00 02         [ 2]  594         addw x,#CELLL
      00026A 90 FE            [ 2]  595         ldw y,(y)
      00026C 90 9E            [ 1]  596         ld a,yh 
      00026E B7 38            [ 1]  597         ld SEEDX,a 
      000270 90 9F            [ 1]  598         ld a,yl 
      000272 B7 3A            [ 1]  599         ld SEEDY,a 
      000274 81               [ 4]  600         ret 
                                    601 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    602 ;    RANDOM ( u1 -- u2 )
                                    603 ; Pseudo random number betwen 0 and u1-1
                                    604 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000275                        605         _HEADER RANDOM,6,"RANDOM"
      000275 02 60                    1         .word LINK 
                           000277     2         LINK=.
      000277 06                       3         .byte 6  
      000278 52 41 4E 44 4F 4D        4         .ascii "RANDOM"
      00027E                          5         RANDOM:
                                    606 ;local variable 
                           000001   607         SPSAVE=1
                           000002   608         VSIZE=2 
      00027E 52 02            [ 2]  609         sub sp,#VSIZE
      000280 1F 01            [ 2]  610         ldw (SPSAVE,sp),x  
                                    611 ; XTEMP=(SEEDX<<5)^SEEDX 
      000282 90 93            [ 1]  612         ldw y,x 
      000284 90 FE            [ 2]  613         ldw y,(y)
      000286 90 BF 26         [ 2]  614         ldw YTEMP,y 
      000289 BE 38            [ 2]  615 	ldw x,SEEDX 
      00028B 58               [ 2]  616 	sllw x 
      00028C 58               [ 2]  617 	sllw x 
      00028D 58               [ 2]  618 	sllw x 
      00028E 58               [ 2]  619 	sllw x 
      00028F 58               [ 2]  620 	sllw x 
      000290 9E               [ 1]  621 	ld a,xh 
      000291 B8 38            [ 1]  622 	xor a,SEEDX 
      000293 B7 24            [ 1]  623 	ld XTEMP,a 
      000295 9F               [ 1]  624 	ld a,xl 
      000296 B8 39            [ 1]  625 	xor a,SEEDX+1 
      000298 B7 25            [ 1]  626 	ld XTEMP+1,a 
                                    627 ; SEEDX=SEEDY 
      00029A BE 3A            [ 2]  628 	ldw x,SEEDY 
      00029C BF 38            [ 2]  629 	ldw SEEDX,x  
                                    630 ; SEEDY=SEEDY^(SEEDY>>1)
      00029E 54               [ 2]  631 	srlw x 
      00029F 9E               [ 1]  632 	ld a,xh 
      0002A0 B8 3A            [ 1]  633 	xor a,SEEDY 
      0002A2 B7 3A            [ 1]  634 	ld SEEDY,a  
      0002A4 9F               [ 1]  635 	ld a,xl 
      0002A5 B8 3B            [ 1]  636 	xor a,SEEDY+1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      0002A7 B7 3B            [ 1]  637 	ld SEEDY+1,a 
                                    638 ; XTEMP>>3 
      0002A9 BE 24            [ 2]  639 	ldw x,XTEMP 
      0002AB 54               [ 2]  640 	srlw x 
      0002AC 54               [ 2]  641 	srlw x 
      0002AD 54               [ 2]  642 	srlw x 
                                    643 ; x=XTEMP^x 
      0002AE 9E               [ 1]  644 	ld a,xh 
      0002AF B8 24            [ 1]  645 	xor a,XTEMP 
      0002B1 95               [ 1]  646 	ld xh,a 
      0002B2 9F               [ 1]  647 	ld a,xl 
      0002B3 B8 25            [ 1]  648 	xor a,XTEMP+1  
      0002B5 97               [ 1]  649 	ld xl,a 
                                    650 ; SEEDY=x^SEEDY 
      0002B6 B8 3B            [ 1]  651 	xor a,SEEDY+1
      0002B8 97               [ 1]  652 	ld xl,a 
      0002B9 9E               [ 1]  653 	ld a,xh 
      0002BA B8 3A            [ 1]  654 	xor a,SEEDY
      0002BC 95               [ 1]  655 	ld xh,a 
      0002BD BF 3A            [ 2]  656 	ldw SEEDY,x 
                                    657 ; return SEEDY modulo YTEMP  
      0002BF 90 BE 26         [ 2]  658 	ldw y,YTEMP  
      0002C2 65               [ 2]  659 	divw x,y 
      0002C3 1E 01            [ 2]  660 	ldw x,(SPSAVE,sp)
      0002C5 FF               [ 2]  661         ldw (x),y 
      0002C6 5B 02            [ 2]  662         addw sp,#VSIZE 
      0002C8 81               [ 4]  663 	ret 
                                    664 
                                    665 
                                    666 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    667 ;; get millisecond counter 
                                    668 ;; msec ( -- u )
                                    669 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002C9                        670         _HEADER MSEC,4,"MSEC"
      0002C9 02 77                    1         .word LINK 
                           0002CB     2         LINK=.
      0002CB 04                       3         .byte 4  
      0002CC 4D 53 45 43              4         .ascii "MSEC"
      0002D0                          5         MSEC:
      0002D0 1D 00 02         [ 2]  671         subw x,#CELLL 
      0002D3 90 BE 30         [ 2]  672         ldw y,MS 
      0002D6 FF               [ 2]  673         ldw (x),y 
      0002D7 81               [ 4]  674         ret 
                                    675 
                                    676 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    677 ; suspend execution for u msec 
                                    678 ;  pause ( u -- )
                                    679 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002D8                        680         _HEADER PAUSE,5,"PAUSE"
      0002D8 02 CB                    1         .word LINK 
                           0002DA     2         LINK=.
      0002DA 05                       3         .byte 5  
      0002DB 50 41 55 53 45           4         .ascii "PAUSE"
      0002E0                          5         PAUSE:
      0002E0 90 93            [ 1]  681         ldw y,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      0002E2 90 FE            [ 2]  682         ldw y,(y)
      0002E4 72 B9 00 30      [ 2]  683         addw y,MS 
      0002E8 8F               [10]  684 1$:     wfi  
      0002E9 90 B3 30         [ 2]  685         cpw y,MS  
      0002EC 26 FA            [ 1]  686         jrne 1$        
      0002EE 1C 00 02         [ 2]  687         addw x,#CELLL 
      0002F1 81               [ 4]  688         ret 
                                    689 
                                    690 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    691 ; initialize count down timer 
                                    692 ;  TIMER ( u -- )  milliseconds
                                    693 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002F2                        694         _HEADER TIMER,5,"TIMER"
      0002F2 02 DA                    1         .word LINK 
                           0002F4     2         LINK=.
      0002F4 05                       3         .byte 5  
      0002F5 54 49 4D 45 52           4         .ascii "TIMER"
      0002FA                          5         TIMER:
      0002FA 90 93            [ 1]  695         ldw y,x
      0002FC 90 FE            [ 2]  696         ldw y,(y) 
      0002FE 90 BF 32         [ 2]  697         ldw CNTDWN,y
      000301 1C 00 02         [ 2]  698         addw x,#CELLL 
      000304 81               [ 4]  699         ret 
                                    700 
                                    701 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    702 ; check for TIMER exiparition 
                                    703 ;  TIMEOUT? ( -- 0|-1 )
                                    704 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000305                        705         _HEADER TIMEOUTQ,8,"TIMEOUT?"
      000305 02 F4                    1         .word LINK 
                           000307     2         LINK=.
      000307 08                       3         .byte 8  
      000308 54 49 4D 45 4F 55 54     4         .ascii "TIMEOUT?"
             3F
      000310                          5         TIMEOUTQ:
      000310 4F               [ 1]  706         clr a
      000311 1D 00 02         [ 2]  707         subw x,#CELLL 
      000314 90 BE 32         [ 2]  708         ldw y,CNTDWN 
      000317 26 01            [ 1]  709         jrne 1$ 
      000319 43               [ 1]  710         cpl a 
      00031A E7 01            [ 1]  711 1$:     ld (1,x),a 
      00031C F7               [ 1]  712         ld (x),a 
      00031D 81               [ 4]  713         ret         
                                    714 
                                    715 ;;;;;;;;;;;;;;;;;;;;;
                                    716 ; reboot MCU 
                                    717 ; REBOOT ( -- )
                                    718 ;;;;;;;;;;;;;;;;;;;;;
      00031E                        719         _HEADER reboot,6,"REBOOT"
      00031E 03 07                    1         .word LINK 
                           000320     2         LINK=.
      000320 06                       3         .byte 6  
      000321 52 45 42 4F 4F 54        4         .ascii "REBOOT"
      000327                          5         reboot:
      000327 CC 00 00         [ 2]  720         jp NonHandledInterrupt
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    721 
                                    722 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    723 ; compile to flash memory 
                                    724 ; TO-FLASH ( -- )
                                    725 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      00032A                        726         _HEADER TOFLASH,8,"TO-FLASH"
      00032A 03 20                    1         .word LINK 
                           00032C     2         LINK=.
      00032C 08                       3         .byte 8  
      00032D 54 4F 2D 46 4C 41 53     4         .ascii "TO-FLASH"
             48
      000335                          5         TOFLASH:
      000335 CD 07 10         [ 4]  727         call RAMLAST 
      000338 CD 04 E3         [ 4]  728         call AT 
      00033B CD 07 3B         [ 4]  729         call QDUP 
      00033E CD 04 98         [ 4]  730         call QBRAN
      000341 03 64                  731         .word 1$
      000343 CD 13 1A         [ 4]  732         call ABORQ 
      000346 1D                     733         .byte 29
      000347 20 4E 6F 74 20 77 68   734         .ascii " Not while definitions in RAM"   
             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      000364 90 AE FF FF      [ 2]  735 1$:     ldw y,#-1 
      000368 90 BF 20         [ 2]  736         ldw UTFLASH,y
      00036B 81               [ 4]  737         ret 
                                    738 
                                    739 ;;;;;;;;;;;;;;;;;;;;;;
                                    740 ; compile to RAM 
                                    741 ; TO-RAM ( -- )
                                    742 ;;;;;;;;;;;;;;;;;;;;;;
      00036C                        743         _HEADER TORAM,6,"TO-RAM"
      00036C 03 2C                    1         .word LINK 
                           00036E     2         LINK=.
      00036E 06                       3         .byte 6  
      00036F 54 4F 2D 52 41 4D        4         .ascii "TO-RAM"
      000375                          5         TORAM:
      000375 90 5F            [ 1]  744         clrw y 
      000377 90 BF 20         [ 2]  745         ldw UTFLASH,y 
      00037A 81               [ 4]  746         ret 
                                    747 
                                    748 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    749 ;; BAUD RATE constants table
                                    750 ; values to put in BRR1 & BRR2 
                                    751 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00037B                        752 baudrate: 
      00037B A0 1B                  753 	.byte 0xa0,0x1b ; 2400
      00037D D0 05                  754 	.byte 0xd0,0x5  ; 4800 
      00037F 68 03                  755 	.byte 0x68,0x3  ; 9600
      000381 34 01                  756 	.byte 0x34,0x1  ; 19200
      000383 11 06                  757 	.byte 0x11,0x6  ; 57600
      000385 08 0B                  758 	.byte 0x8,0xb   ; 115200
                                    759 
                                    760 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                                    761 ; BAUD RATE CONSTANTS names 
                                    762 ; 2400 baud  ( -- n )
                                    763 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000387                        764         _HEADER B2K4,4,"B2K4"
      000387 03 6E                    1         .word LINK 
                           000389     2         LINK=.
      000389 04                       3         .byte 4  
      00038A 42 32 4B 34              4         .ascii "B2K4"
      00038E                          5         B2K4:
      00038E 1D 00 02         [ 2]  765 	subw x,#CELLL 
      000391 90 5F            [ 1]  766         clrw y
      000393 FF               [ 2]  767         ldw (x),y
      000394 81               [ 4]  768 	ret
                                    769 
                                    770 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    771 ; 4800 baud	
                                    772 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000395                        773         _HEADER B4K8,4,"B4K8"
      000395 03 89                    1         .word LINK 
                           000397     2         LINK=.
      000397 04                       3         .byte 4  
      000398 42 34 4B 38              4         .ascii "B4K8"
      00039C                          5         B4K8:
      00039C 1D 00 02         [ 2]  774         subw x,#CELLL 
      00039F 90 AE 00 02      [ 2]  775         ldw y,#2 
      0003A3 FF               [ 2]  776         ldw (x),y
      0003A4 81               [ 4]  777         ret 
                                    778 
                                    779 ;;;;;;;;;;;;;;;;;;;;
                                    780 ; 9600 baud
                                    781 ;;;;;;;;;;;;;;;;;;;;
      0003A5                        782         _HEADER B9K6,4,"B9K6"
      0003A5 03 97                    1         .word LINK 
                           0003A7     2         LINK=.
      0003A7 04                       3         .byte 4  
      0003A8 42 39 4B 36              4         .ascii "B9K6"
      0003AC                          5         B9K6:
      0003AC 1D 00 02         [ 2]  783         subw x,#CELLL 
      0003AF 90 AE 00 04      [ 2]  784         ldw y,#4 
      0003B3 FF               [ 2]  785         ldw (x),y 
      0003B4 81               [ 4]  786         ret 
                                    787 ;;;;;;;;;;;;;;
                                    788 ; 19200 baud
                                    789 ;;;;;;;;;;;;;;
      0003B5                        790         _HEADER B19K2,5,"B19K2"
      0003B5 03 A7                    1         .word LINK 
                           0003B7     2         LINK=.
      0003B7 05                       3         .byte 5  
      0003B8 42 31 39 4B 32           4         .ascii "B19K2"
      0003BD                          5         B19K2:
      0003BD 1D 00 02         [ 2]  791         subw x,#CELLL
      0003C0 90 AE 00 06      [ 2]  792         ldw y,#6 
      0003C4 FF               [ 2]  793         ldw (x),y 
      0003C5 81               [ 4]  794         ret 
                                    795 ;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    796 ; 57600 baud  
                                    797 ;;;;;;;;;;;;;;
      0003C6                        798         _HEADER B57K6,5,"B57K6"
      0003C6 03 B7                    1         .word LINK 
                           0003C8     2         LINK=.
      0003C8 05                       3         .byte 5  
      0003C9 42 35 37 4B 36           4         .ascii "B57K6"
      0003CE                          5         B57K6:
      0003CE 1D 00 02         [ 2]  799         subw x,#CELLL 
      0003D1 90 AE 00 08      [ 2]  800         ldw y,#8 
      0003D5 FF               [ 2]  801         ldw (x),y 
      0003D6 81               [ 4]  802         ret 
                                    803 ;;;;;;;;;;;;;;
                                    804 ; 115200 baud 
                                    805 ;;;;;;;;;;;;;;
      0003D7                        806         _HEADER B115K2,6,"B115K2"
      0003D7 03 C8                    1         .word LINK 
                           0003D9     2         LINK=.
      0003D9 06                       3         .byte 6  
      0003DA 42 31 31 35 4B 32        4         .ascii "B115K2"
      0003E0                          5         B115K2:
      0003E0 1D 00 02         [ 2]  807 	subw x,#CELLL 
      0003E3 90 AE 00 0A      [ 2]  808         ldw y,#10 
      0003E7 FF               [ 2]  809         ldw (x),y 
      0003E8 81               [ 4]  810         ret 
                                    811 
                                    812 ;;;;;;;;;;;;;;;;;;;;;;;	
                                    813 ;; set UART2 BAUD rate
                                    814 ;	BAUD ( u -- )
                                    815 ;;;;;;;;;;;;;;;;;;;;;;;
      0003E9                        816         _HEADER BAUD,4,"BAUD"
      0003E9 03 D9                    1         .word LINK 
                           0003EB     2         LINK=.
      0003EB 04                       3         .byte 4  
      0003EC 42 41 55 44              4         .ascii "BAUD"
      0003F0                          5         BAUD:
      0003F0 1D 00 02         [ 2]  817 	subw x,#CELLL
      0003F3 90 AE 03 7B      [ 2]  818         ldw y,#baudrate 
      0003F7 FF               [ 2]  819         ldw (x),y 
      0003F8 CD 07 AD         [ 4]  820         call PLUS
      0003FB 90 93            [ 1]  821         ldw y,x  
      0003FD 90 FE            [ 2]  822         ldw y,(y)
      0003FF 90 F6            [ 1]  823         ld a,(y)
      000401 88               [ 1]  824         push a 
      000402 90 5C            [ 1]  825         incw y 
      000404 90 F6            [ 1]  826         ld a,(y)
      000406 C7 52 33         [ 1]  827         ld UART_BRR2,a 
      000409 84               [ 1]  828         pop a
      00040A C7 52 32         [ 1]  829         ld UART_BRR1,a 
      00040D 1C 00 02         [ 2]  830         addw x,#CELLL 
      000410 81               [ 4]  831         ret 
                                    832 
                                    833 ;; Device dependent I/O
                                    834 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    835 ;       ?RX     ( -- c T | F )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                                    836 ;         Return input byte and true, or false.
                                    837 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000411                        838         _HEADER QKEY,4,"?KEY"
      000411 03 EB                    1         .word LINK 
                           000413     2         LINK=.
      000413 04                       3         .byte 4  
      000414 3F 4B 45 59              4         .ascii "?KEY"
      000418                          5         QKEY:
      000418 90 5F            [ 1]  839         CLRW Y 
      00041A 72 0B 52 30 0B   [ 2]  840         BTJF UART_SR,#UART_SR_RXNE,INCH   ;check status
      00041F C6 52 31         [ 1]  841         LD    A,UART_DR   ;get char in A
      000422 1D 00 02         [ 2]  842 	SUBW	X,#2
      000425 E7 01            [ 1]  843         LD     (1,X),A
      000427 7F               [ 1]  844 	CLR	(X)
      000428 90 53            [ 2]  845         CPLW     Y
      00042A                        846 INCH:
      00042A 1D 00 02         [ 2]  847 		SUBW	X,#2
      00042D FF               [ 2]  848         LDW     (X),Y
      00042E 81               [ 4]  849         RET
                                    850 
                                    851 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    852 ;       TX!     ( c -- )
                                    853 ;       Send character c to  output device.
                                    854 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00042F                        855         _HEADER EMIT,4,"EMIT"
      00042F 04 13                    1         .word LINK 
                           000431     2         LINK=.
      000431 04                       3         .byte 4  
      000432 45 4D 49 54              4         .ascii "EMIT"
      000436                          5         EMIT:
      000436 E6 01            [ 1]  856         LD     A,(1,X)
      000438 1C 00 02         [ 2]  857 	ADDW	X,#2
      00043B 72 0F 52 30 FB   [ 2]  858 OUTPUT: BTJF UART_SR,#UART_SR_TXE,OUTPUT  ;loop until tx empty 
      000440 C7 52 31         [ 1]  859         LD    UART_DR,A   ;send A
      000443 81               [ 4]  860         RET
                                    861 
                                    862 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    863 ;       FC-XON  ( -- )
                                    864 ;       send XON character 
                                    865 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000444                        866         _HEADER FC_XON,6,"FC-XON"
      000444 04 31                    1         .word LINK 
                           000446     2         LINK=.
      000446 06                       3         .byte 6  
      000447 46 43 2D 58 4F 4E        4         .ascii "FC-XON"
      00044D                          5         FC_XON:
      00044D 1D 00 02         [ 2]  867         subw x,#CELLL 
      000450 7F               [ 1]  868         clr (x)
      000451 A6 11            [ 1]  869         ld a,#XON 
      000453 E7 01            [ 1]  870         ld (1,x),a 
      000455 CD 04 36         [ 4]  871         call EMIT 
      000458 81               [ 4]  872         ret 
                                    873 
                                    874 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    875 ;       FC-XOFF ( -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                                    876 ;       Send XOFF character 
                                    877 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000459                        878         _HEADER FC_XOFF,7,"FC-XOFF"
      000459 04 46                    1         .word LINK 
                           00045B     2         LINK=.
      00045B 07                       3         .byte 7  
      00045C 46 43 2D 58 4F 46 46     4         .ascii "FC-XOFF"
      000463                          5         FC_XOFF:
      000463 1D 00 02         [ 2]  879         subw x,#CELLL 
      000466 7F               [ 1]  880         clr (x)
      000467 A6 13            [ 1]  881         ld a,#XOFF 
      000469 E7 01            [ 1]  882         ld (1,x),a 
      00046B CD 04 36         [ 4]  883         call EMIT 
      00046E 81               [ 4]  884         ret
                                    885 
                                    886 ;; The kernel
                                    887 
                                    888 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    889 ;       doLIT   ( -- w )
                                    890 ;       Push an inline literal.
                                    891 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00046F                        892 DOLIT:
      00046F 1D 00 02         [ 2]  893 	SUBW X,#2
      000472 16 01            [ 2]  894         ldw y,(1,sp)
      000474 90 FE            [ 2]  895         ldw y,(y)
      000476 FF               [ 2]  896         ldw (x),y
      000477 90 85            [ 2]  897         popw y 
      000479 90 EC 02         [ 2]  898         jp (2,y)
                                    899 
                                    900 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    901 ;       NEXT    ( -- )
                                    902 ;       Code for  single index loop.
                                    903 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00047C                        904         _HEADER DONXT,COMPO+4,"NEXT"
      00047C 04 5B                    1         .word LINK 
                           00047E     2         LINK=.
      00047E 44                       3         .byte COMPO+4  
      00047F 4E 45 58 54              4         .ascii "NEXT"
      000483                          5         DONXT:
      000483 16 03            [ 2]  905 	LDW Y,(3,SP)
      000485 90 5A            [ 2]  906 	DECW Y
      000487 2A 07            [ 1]  907 	JRPL NEX1 ; jump if N=0
      000489 90 85            [ 2]  908 	POPW Y
      00048B 5B 02            [ 2]  909         addw sp,#2
      00048D 90 EC 02         [ 2]  910         JP (2,Y)
      000490                        911 NEX1:
      000490 17 03            [ 2]  912         LDW (3,SP),Y
      000492 90 85            [ 2]  913         POPW Y
      000494 90 FE            [ 2]  914 	LDW Y,(Y)
      000496 90 FC            [ 2]  915 	JP (Y)
                                    916 
                                    917 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    918 ;       ?branch ( f -- )
                                    919 ;       Branch if flag is zero.
                                    920 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                    921 ;       _HEADER QBRAN,COMPO+7,"?BRANCH"        
      000498                        922 QBRAN:	
      000498 90 93            [ 1]  923         LDW Y,X
      00049A 1C 00 02         [ 2]  924 	ADDW X,#2
      00049D 90 FE            [ 2]  925 	LDW Y,(Y)
      00049F 27 13            [ 1]  926         JREQ     BRAN
      0004A1 90 85            [ 2]  927 	POPW Y
      0004A3 90 EC 02         [ 2]  928 	JP (2,Y)
                                    929 
                                    930 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    931 ;  TBRANCH ( f -- )
                                    932 ;  branch if f==TRUE 
                                    933 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    934 ;        _HEADER TBRAN,COMPO+7,"TBRANCH"
      0004A6                        935 TBRAN: 
      0004A6 90 93            [ 1]  936         LDW Y,X 
      0004A8 1C 00 02         [ 2]  937         ADDW X,#2 
      0004AB 90 FE            [ 2]  938         LDW Y,(Y)
      0004AD 26 05            [ 1]  939         JRNE BRAN 
      0004AF 90 85            [ 2]  940         POPW Y 
      0004B1 90 EC 02         [ 2]  941         JP (2,Y)
                                    942 
                                    943 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    944 ;       branch  ( -- )
                                    945 ;       Branch to an inline address.
                                    946 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    947 ;       _HEADER BRAN,COMPO+6,"BRANCH"
      0004B4                        948 BRAN:
      0004B4 90 85            [ 2]  949         POPW Y
      0004B6 90 FE            [ 2]  950 	LDW Y,(Y)
      0004B8 90 FC            [ 2]  951         JP     (Y)
                                    952 
                                    953 ;       EXECUTE ( ca -- )
                                    954 ;       Execute  word at ca.
      0004BA 04 7E                  955         .word      LINK
                           0004BC   956 LINK	= 	.
      0004BC 07                     957         .byte       7
      0004BD 45 58 45 43 55 54 45   958         .ascii     "EXECUTE"
      0004C4                        959 EXECU:
      0004C4 90 93            [ 1]  960         LDW Y,X
      0004C6 1C 00 02         [ 2]  961 	ADDW X,#2
      0004C9 90 FE            [ 2]  962 	LDW  Y,(Y)
      0004CB 90 FC            [ 2]  963         JP   (Y)
                                    964 
                           000001   965 OPTIMIZE = 1
                           000001   966 .if OPTIMIZE 
                                    967 ; remplacement de CALL EXIT par 
                                    968 ; le opcode de RET.
                                    969 ; Voir modification au code de ";"
                           000000   970 .else 
                                    971 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    972 ;       EXIT    ( -- )
                                    973 ;       Terminate a colon definition.
                                    974 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    975 ;       _HEADER EXIT,4,"EXIT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                    976 EXIT:
                                    977         POPW Y
                                    978         RET
                                    979 .endif 
                                    980 
                                    981 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    982 ;       !       ( w a -- )
                                    983 ;       Pop  data stack to memory.
                                    984 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004CD                        985         _HEADER STORE,1,"!"
      0004CD 04 BC                    1         .word LINK 
                           0004CF     2         LINK=.
      0004CF 01                       3         .byte 1  
      0004D0 21                       4         .ascii "!"
      0004D1                          5         STORE:
      0004D1 90 93            [ 1]  986         LDW Y,X
      0004D3 90 FE            [ 2]  987         LDW Y,(Y)    ;Y=a
      0004D5 89               [ 2]  988         PUSHW X
      0004D6 EE 02            [ 2]  989         LDW X,(2,X) ; x=w 
      0004D8 90 FF            [ 2]  990         LDW (Y),X 
      0004DA 85               [ 2]  991         POPW X  
      0004DB 1C 00 04         [ 2]  992         ADDW X,#4 ; DDROP 
      0004DE 81               [ 4]  993         RET     
                                    994 
                                    995 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    996 ;       @       ( a -- w )
                                    997 ;       Push memory location to stack.
                                    998 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004DF                        999         _HEADER AT,1,"@"
      0004DF 04 CF                    1         .word LINK 
                           0004E1     2         LINK=.
      0004E1 01                       3         .byte 1  
      0004E2 40                       4         .ascii "@"
      0004E3                          5         AT:
      0004E3 90 93            [ 1] 1000         LDW Y,X     ;Y = a
      0004E5 90 FE            [ 2] 1001         LDW Y,(Y)   ; address 
      0004E7 90 FE            [ 2] 1002         LDW Y,(Y)   ; value 
      0004E9 FF               [ 2] 1003         LDW (X),Y ;w = @Y
      0004EA 81               [ 4] 1004         RET     
                                   1005 
                                   1006 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1007 ;       C!      ( c b -- )
                                   1008 ;       Pop  data stack to byte memory.
                                   1009 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004EB                       1010         _HEADER CSTOR,2,"C!"
      0004EB 04 E1                    1         .word LINK 
                           0004ED     2         LINK=.
      0004ED 02                       3         .byte 2  
      0004EE 43 21                    4         .ascii "C!"
      0004F0                          5         CSTOR:
      0004F0 90 93            [ 1] 1011         LDW Y,X
      0004F2 90 FE            [ 2] 1012 	LDW Y,(Y)    ;Y=b
      0004F4 E6 03            [ 1] 1013         LD A,(3,X)    ;D = c
      0004F6 90 F7            [ 1] 1014         LD  (Y),A     ;store c at b
      0004F8 1C 00 04         [ 2] 1015 	ADDW X,#4 ; DDROP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      0004FB 81               [ 4] 1016         RET     
                                   1017 
                                   1018 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1019 ;       C@      ( b -- c )
                                   1020 ;       Push byte in memory to  stack.
                                   1021 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004FC                       1022         _HEADER CAT,2,"C@"
      0004FC 04 ED                    1         .word LINK 
                           0004FE     2         LINK=.
      0004FE 02                       3         .byte 2  
      0004FF 43 40                    4         .ascii "C@"
      000501                          5         CAT:
      000501 90 93            [ 1] 1023         LDW Y,X     ;Y=b
      000503 90 FE            [ 2] 1024         LDW Y,(Y)
      000505 90 F6            [ 1] 1025         LD A,(Y)
      000507 E7 01            [ 1] 1026         LD (1,X),A
      000509 7F               [ 1] 1027         CLR (X)
      00050A 81               [ 4] 1028         RET     
                                   1029 
                                   1030 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1031 ;       RP@     ( -- a )
                                   1032 ;       Push current RP to data stack.
                                   1033 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00050B                       1034         _HEADER RPAT,3,"RP@"
      00050B 04 FE                    1         .word LINK 
                           00050D     2         LINK=.
      00050D 03                       3         .byte 3  
      00050E 52 50 40                 4         .ascii "RP@"
      000511                          5         RPAT:
      000511 90 96            [ 1] 1035         LDW Y,SP    ;save return addr
      000513 1D 00 02         [ 2] 1036         SUBW X,#2
      000516 FF               [ 2] 1037         LDW (X),Y
      000517 81               [ 4] 1038         RET     
                                   1039 
                                   1040 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1041 ;       RP!     ( a -- )
                                   1042 ;       Set  return stack pointer.
                                   1043 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000518                       1044         _HEADER RPSTO,COMPO+3,"RP!"
      000518 05 0D                    1         .word LINK 
                           00051A     2         LINK=.
      00051A 43                       3         .byte COMPO+3  
      00051B 52 50 21                 4         .ascii "RP!"
      00051E                          5         RPSTO:
      00051E 90 85            [ 2] 1045         POPW Y
      000520 90 BF 26         [ 2] 1046         LDW YTEMP,Y
      000523 90 93            [ 1] 1047         LDW Y,X
      000525 90 FE            [ 2] 1048         LDW Y,(Y)
      000527 90 94            [ 1] 1049         LDW SP,Y
      000529 1C 00 02         [ 2] 1050         ADDW X,#CELLL ; a was not dropped, Picatout 2020-05-24
      00052C 92 CC 26         [ 5] 1051         JP [YTEMP]
                                   1052 
                                   1053 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1054 ;       R>      ( -- w )
                                   1055 ;       Pop return stack to data stack.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                                   1056 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00052F                       1057         _HEADER RFROM,2,"R>"
      00052F 05 1A                    1         .word LINK 
                           000531     2         LINK=.
      000531 02                       3         .byte 2  
      000532 52 3E                    4         .ascii "R>"
      000534                          5         RFROM:
      000534 1D 00 02         [ 2] 1058         SUBW X,#CELLL 
      000537 16 03            [ 2] 1059         LDW Y,(3,SP)
      000539 FF               [ 2] 1060         LDW (X),Y 
      00053A 90 85            [ 2] 1061         POPW Y 
      00053C 5B 02            [ 2] 1062         ADDW SP,#2 
      00053E 90 FC            [ 2] 1063         JP (Y)
                                   1064 
                                   1065 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1066 ;       R@      ( -- w )
                                   1067 ;       Copy top of return stack to stack.
                                   1068 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000540                       1069         _HEADER RAT,2,"R@"
      000540 05 31                    1         .word LINK 
                           000542     2         LINK=.
      000542 02                       3         .byte 2  
      000543 52 40                    4         .ascii "R@"
      000545                          5         RAT:
      000545 16 03            [ 2] 1070         ldw y,(3,sp)
      000547 1D 00 02         [ 2] 1071         subw x,#CELLL 
      00054A FF               [ 2] 1072         ldw (x),y 
      00054B 81               [ 4] 1073         ret 
                                   1074 
                                   1075 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1076 ;       >R      ( w -- )
                                   1077 ;       Push data stack to return stack.
                                   1078 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00054C                       1079         _HEADER TOR,COMPO+2,">R"
      00054C 05 42                    1         .word LINK 
                           00054E     2         LINK=.
      00054E 42                       3         .byte COMPO+2  
      00054F 3E 52                    4         .ascii ">R"
      000551                          5         TOR:
      000551 90 85            [ 2] 1080         POPW Y    ;save return addr
      000553 90 BF 26         [ 2] 1081         LDW YTEMP,Y
      000556 90 93            [ 1] 1082         LDW Y,X
      000558 90 FE            [ 2] 1083         LDW Y,(Y)  ; W
      00055A 90 89            [ 2] 1084         PUSHW Y    ;W >R 
      00055C 1C 00 02         [ 2] 1085         ADDW X,#2
      00055F 92 CC 26         [ 5] 1086         JP [YTEMP]
                                   1087 
                                   1088 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1089 ;       SP@     ( -- a )
                                   1090 ;       Push current stack pointer.
                                   1091 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000562                       1092         _HEADER SPAT,3,"SP@"
      000562 05 4E                    1         .word LINK 
                           000564     2         LINK=.
      000564 03                       3         .byte 3  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      000565 53 50 40                 4         .ascii "SP@"
      000568                          5         SPAT:
      000568 90 93            [ 1] 1093 	LDW Y,X
      00056A 1D 00 02         [ 2] 1094         SUBW X,#2
      00056D FF               [ 2] 1095 	LDW (X),Y
      00056E 81               [ 4] 1096         RET     
                                   1097 
                                   1098 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1099 ;       SP!     ( a -- )
                                   1100 ;       Set  data stack pointer.
                                   1101 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00056F                       1102         _HEADER SPSTO,3,"SP!"
      00056F 05 64                    1         .word LINK 
                           000571     2         LINK=.
      000571 03                       3         .byte 3  
      000572 53 50 21                 4         .ascii "SP!"
      000575                          5         SPSTO:
      000575 FE               [ 2] 1103         LDW     X,(X)     ;X = a
      000576 81               [ 4] 1104         RET     
                                   1105 
                                   1106 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1107 ;       DROP    ( w -- )
                                   1108 ;       Discard top stack item.
                                   1109 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000577                       1110         _HEADER DROP,4,"DROP"
      000577 05 71                    1         .word LINK 
                           000579     2         LINK=.
      000579 04                       3         .byte 4  
      00057A 44 52 4F 50              4         .ascii "DROP"
      00057E                          5         DROP:
      00057E 1C 00 02         [ 2] 1111         ADDW X,#2     
      000581 81               [ 4] 1112         RET     
                                   1113 
                                   1114 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1115 ;       DUP     ( w -- w w )
                                   1116 ;       Duplicate  top stack item.
                                   1117 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000582                       1118         _HEADER DUPP,3,"DUP"
      000582 05 79                    1         .word LINK 
                           000584     2         LINK=.
      000584 03                       3         .byte 3  
      000585 44 55 50                 4         .ascii "DUP"
      000588                          5         DUPP:
      000588 90 93            [ 1] 1119 	LDW Y,X
      00058A 1D 00 02         [ 2] 1120         SUBW X,#2
      00058D 90 FE            [ 2] 1121 	LDW Y,(Y)
      00058F FF               [ 2] 1122 	LDW (X),Y
      000590 81               [ 4] 1123         RET     
                                   1124 
                                   1125 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1126 ;       SWAP    ( w1 w2 -- w2 w1 )
                                   1127 ;       Exchange top two stack items.
                                   1128 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000591                       1129         _HEADER SWAPP,4,"SWAP"
      000591 05 84                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                           000593     2         LINK=.
      000593 04                       3         .byte 4  
      000594 53 57 41 50              4         .ascii "SWAP"
      000598                          5         SWAPP:
      000598 90 93            [ 1] 1130         LDW Y,X
      00059A 90 FE            [ 2] 1131         LDW Y,(Y)
      00059C 90 89            [ 2] 1132         PUSHW Y  
      00059E 90 93            [ 1] 1133         LDW Y,X
      0005A0 90 EE 02         [ 2] 1134         LDW Y,(2,Y)
      0005A3 FF               [ 2] 1135         LDW (X),Y
      0005A4 90 85            [ 2] 1136         POPW Y 
      0005A6 EF 02            [ 2] 1137         LDW (2,X),Y
      0005A8 81               [ 4] 1138         RET     
                                   1139 
                                   1140 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1141 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                   1142 ;       Copy second stack item to top.
                                   1143 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005A9                       1144         _HEADER OVER,4,"OVER"
      0005A9 05 93                    1         .word LINK 
                           0005AB     2         LINK=.
      0005AB 04                       3         .byte 4  
      0005AC 4F 56 45 52              4         .ascii "OVER"
      0005B0                          5         OVER:
      0005B0 1D 00 02         [ 2] 1145         SUBW X,#2
      0005B3 90 93            [ 1] 1146         LDW Y,X
      0005B5 90 EE 04         [ 2] 1147         LDW Y,(4,Y)
      0005B8 FF               [ 2] 1148         LDW (X),Y
      0005B9 81               [ 4] 1149         RET     
                                   1150 
                                   1151 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1152 ;       0<      ( n -- t )
                                   1153 ;       Return true if n is negative.
                                   1154 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005BA                       1155         _HEADER ZLESS,2,"0<"
      0005BA 05 AB                    1         .word LINK 
                           0005BC     2         LINK=.
      0005BC 02                       3         .byte 2  
      0005BD 30 3C                    4         .ascii "0<"
      0005BF                          5         ZLESS:
      0005BF A6 FF            [ 1] 1156         LD A,#0xFF
      0005C1 90 93            [ 1] 1157         LDW Y,X
      0005C3 90 FE            [ 2] 1158         LDW Y,(Y)
      0005C5 2B 01            [ 1] 1159         JRMI     ZL1
      0005C7 4F               [ 1] 1160         CLR A   ;false
      0005C8 F7               [ 1] 1161 ZL1:    LD     (X),A
      0005C9 E7 01            [ 1] 1162         LD (1,X),A
      0005CB 81               [ 4] 1163 	RET     
                                   1164 
                                   1165 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1166 ;       0= ( n -- f )
                                   1167 ;   n==0?
                                   1168 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005CC                       1169         _HEADER ZEQUAL,2,"0="
      0005CC 05 BC                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                           0005CE     2         LINK=.
      0005CE 02                       3         .byte 2  
      0005CF 30 3D                    4         .ascii "0="
      0005D1                          5         ZEQUAL:
      0005D1 A6 FF            [ 1] 1170         LD A,#0XFF 
      0005D3 90 93            [ 1] 1171         LDW Y,X 
      0005D5 90 FE            [ 2] 1172         LDW Y,(Y)
      0005D7 27 02            [ 1] 1173         JREQ ZEQU1 
      0005D9 A6 00            [ 1] 1174         LD A,#0 
      0005DB                       1175 ZEQU1:  
      0005DB F7               [ 1] 1176         LD (X),A 
      0005DC E7 01            [ 1] 1177         LD (1,X),A         
      0005DE 81               [ 4] 1178         RET 
                                   1179 
                                   1180 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1181 ;       AND     ( w w -- w )
                                   1182 ;       Bitwise AND.
                                   1183 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005DF                       1184         _HEADER ANDD,3,"AND"
      0005DF 05 CE                    1         .word LINK 
                           0005E1     2         LINK=.
      0005E1 03                       3         .byte 3  
      0005E2 41 4E 44                 4         .ascii "AND"
      0005E5                          5         ANDD:
      0005E5 F6               [ 1] 1185         LD  A,(X)    ;D=w
      0005E6 E4 02            [ 1] 1186         AND A,(2,X)
      0005E8 E7 02            [ 1] 1187         LD (2,X),A
      0005EA E6 01            [ 1] 1188         LD A,(1,X)
      0005EC E4 03            [ 1] 1189         AND A,(3,X)
      0005EE E7 03            [ 1] 1190         LD (3,X),A
      0005F0 1C 00 02         [ 2] 1191         ADDW X,#2
      0005F3 81               [ 4] 1192         RET
                                   1193 
                                   1194 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1195 ;       OR      ( w w -- w )
                                   1196 ;       Bitwise inclusive OR.
                                   1197 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005F4                       1198         _HEADER ORR,2,"OR"
      0005F4 05 E1                    1         .word LINK 
                           0005F6     2         LINK=.
      0005F6 02                       3         .byte 2  
      0005F7 4F 52                    4         .ascii "OR"
      0005F9                          5         ORR:
      0005F9 F6               [ 1] 1199         LD A,(X)    ;D=w
      0005FA EA 02            [ 1] 1200         OR A,(2,X)
      0005FC E7 02            [ 1] 1201         LD (2,X),A
      0005FE E6 01            [ 1] 1202         LD A,(1,X)
      000600 EA 03            [ 1] 1203         OR A,(3,X)
      000602 E7 03            [ 1] 1204         LD (3,X),A
      000604 1C 00 02         [ 2] 1205         ADDW X,#2
      000607 81               [ 4] 1206         RET
                                   1207 
                                   1208 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1209 ;       XOR     ( w w -- w )
                                   1210 ;       Bitwise exclusive OR.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                                   1211 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000608                       1212         _HEADER XORR,3,"XOR"
      000608 05 F6                    1         .word LINK 
                           00060A     2         LINK=.
      00060A 03                       3         .byte 3  
      00060B 58 4F 52                 4         .ascii "XOR"
      00060E                          5         XORR:
      00060E F6               [ 1] 1213         LD A,(X)    ;D=w
      00060F E8 02            [ 1] 1214         XOR A,(2,X)
      000611 E7 02            [ 1] 1215         LD (2,X),A
      000613 E6 01            [ 1] 1216         LD A,(1,X)
      000615 E8 03            [ 1] 1217         XOR A,(3,X)
      000617 E7 03            [ 1] 1218         LD (3,X),A
      000619 1C 00 02         [ 2] 1219         ADDW X,#2
      00061C 81               [ 4] 1220         RET
                                   1221 
                                   1222 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1223 ;       UM+     ( u u -- udsum )
                                   1224 ;       Add two unsigned single
                                   1225 ;       and return a double sum.
                                   1226 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00061D                       1227         _HEADER UPLUS,3,"UM+"
      00061D 06 0A                    1         .word LINK 
                           00061F     2         LINK=.
      00061F 03                       3         .byte 3  
      000620 55 4D 2B                 4         .ascii "UM+"
      000623                          5         UPLUS:
      000623 A6 01            [ 1] 1228         LD A,#1
      000625 90 93            [ 1] 1229         LDW Y,X
      000627 90 EE 02         [ 2] 1230         LDW Y,(2,Y)
      00062A 90 BF 26         [ 2] 1231         LDW YTEMP,Y
      00062D 90 93            [ 1] 1232         LDW Y,X
      00062F 90 FE            [ 2] 1233         LDW Y,(Y)
      000631 72 B9 00 26      [ 2] 1234         ADDW Y,YTEMP
      000635 EF 02            [ 2] 1235         LDW (2,X),Y
      000637 25 01            [ 1] 1236         JRC     UPL1
      000639 4F               [ 1] 1237         CLR A
      00063A E7 01            [ 1] 1238 UPL1:   LD     (1,X),A
      00063C 7F               [ 1] 1239         CLR (X)
      00063D 81               [ 4] 1240         RET
                                   1241 
                                   1242 ;; System and user variables
                                   1243 
                                   1244 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1245 ;       doVAR   ( -- a )
                                   1246 ;       run time code 
                                   1247 ;       for VARIABLE and CREATE.
                                   1248 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1249 ;       HEADER DOVAR,COMPO+5,"DOVAR"
      00063E                       1250 DOVAR:
      00063E 1D 00 02         [ 2] 1251 	SUBW X,#2
      000641 90 85            [ 2] 1252         POPW Y    ;get return addr (pfa)
      000643 90 FE            [ 2] 1253         LDW Y,(Y) ; indirect address 
      000645 FF               [ 2] 1254         LDW (X),Y    ;push on stack
      000646 81               [ 4] 1255         RET     ;go to RET of EXEC
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                   1256 
                                   1257 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1258 ;       BASE    ( -- a )
                                   1259 ;       Radix base for numeric I/O.
                                   1260 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000647                       1261         _HEADER BASE,4,"BASE"
      000647 06 1F                    1         .word LINK 
                           000649     2         LINK=.
      000649 04                       3         .byte 4  
      00064A 42 41 53 45              4         .ascii "BASE"
      00064E                          5         BASE:
      00064E 90 AE 00 06      [ 2] 1262 	LDW Y,#UBASE 
      000652 1D 00 02         [ 2] 1263 	SUBW X,#2
      000655 FF               [ 2] 1264         LDW (X),Y
      000656 81               [ 4] 1265         RET
                                   1266 
                                   1267 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1268 ;       tmp     ( -- a )
                                   1269 ;       A temporary storage.
                                   1270 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000657                       1271         _HEADER TEMP,3,"TMP"
      000657 06 49                    1         .word LINK 
                           000659     2         LINK=.
      000659 03                       3         .byte 3  
      00065A 54 4D 50                 4         .ascii "TMP"
      00065D                          5         TEMP:
      00065D 90 AE 00 0A      [ 2] 1272 	LDW Y,#UTMP
      000661 1D 00 02         [ 2] 1273 	SUBW X,#2
      000664 FF               [ 2] 1274         LDW (X),Y
      000665 81               [ 4] 1275         RET
                                   1276 
                                   1277 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1278 ;       >IN     ( -- a )
                                   1279 ;        Hold parsing pointer.
                                   1280 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000666                       1281         _HEADER INN,3,">IN"
      000666 06 59                    1         .word LINK 
                           000668     2         LINK=.
      000668 03                       3         .byte 3  
      000669 3E 49 4E                 4         .ascii ">IN"
      00066C                          5         INN:
      00066C 90 AE 00 0C      [ 2] 1282 	LDW Y,#UINN 
      000670 1D 00 02         [ 2] 1283 	SUBW X,#2
      000673 FF               [ 2] 1284         LDW (X),Y
      000674 81               [ 4] 1285         RET
                                   1286 
                                   1287 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1288 ;       #TIB    ( -- a )
                                   1289 ;       Count in terminal input 
                                   1290 ;       buffer.
                                   1291 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000675                       1292         _HEADER NTIB,4,"#TIB"
      000675 06 68                    1         .word LINK 
                           000677     2         LINK=.
      000677 04                       3         .byte 4  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      000678 23 54 49 42              4         .ascii "#TIB"
      00067C                          5         NTIB:
      00067C 90 AE 00 0E      [ 2] 1293 	LDW Y,#UCTIB 
      000680 1D 00 02         [ 2] 1294 	SUBW X,#2
      000683 FF               [ 2] 1295         LDW (X),Y
      000684 81               [ 4] 1296         RET
                                   1297 
                                   1298 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1299 ;       TBUF ( -- a )
                                   1300 ;       address of 128 bytes 
                                   1301 ;       transaction buffer
                                   1302 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000685                       1303         _HEADER TBUF,4,"TBUF"
      000685 06 77                    1         .word LINK 
                           000687     2         LINK=.
      000687 04                       3         .byte 4  
      000688 54 42 55 46              4         .ascii "TBUF"
      00068C                          5         TBUF:
      00068C 90 AE 16 80      [ 2] 1304         ldw y,#ROWBUFF
      000690 1D 00 02         [ 2] 1305         subw x,#CELLL
      000693 FF               [ 2] 1306         ldw (x),y 
      000694 81               [ 4] 1307         ret 
                                   1308 
                                   1309 ; systeme variable 
                                   1310 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1311 ; compilation destination 
                                   1312 ; TFLASH ( -- A )
                                   1313 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000695                       1314         _HEADER TFLASH,6,"TFLASH"
      000695 06 87                    1         .word LINK 
                           000697     2         LINK=.
      000697 06                       3         .byte 6  
      000698 54 46 4C 41 53 48        4         .ascii "TFLASH"
      00069E                          5         TFLASH:
      00069E 1D 00 02         [ 2] 1315         subw x,#CELLL 
      0006A1 90 AE 00 20      [ 2] 1316         ldw y,#UTFLASH
      0006A5 FF               [ 2] 1317         ldw (x),y 
      0006A6 81               [ 4] 1318         ret 
                                   1319 
                                   1320 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1321 ;       "EVAL   ( -- a )
                                   1322 ;       Execution vector of EVAL.
                                   1323 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006A7                       1324         _HEADER TEVAL,5,"'EVAL"
      0006A7 06 97                    1         .word LINK 
                           0006A9     2         LINK=.
      0006A9 05                       3         .byte 5  
      0006AA 27 45 56 41 4C           4         .ascii "'EVAL"
      0006AF                          5         TEVAL:
      0006AF 90 AE 00 12      [ 2] 1325 	LDW Y,#UINTER 
      0006B3 1D 00 02         [ 2] 1326 	SUBW X,#2
      0006B6 FF               [ 2] 1327         LDW (X),Y
      0006B7 81               [ 4] 1328         RET
                                   1329 
                                   1330 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                   1331 ;       HLD     ( -- a )
                                   1332 ;       Hold a pointer of output
                                   1333 ;        string.
                                   1334 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006B8                       1335         _HEADER HLD,3,"HLD"
      0006B8 06 A9                    1         .word LINK 
                           0006BA     2         LINK=.
      0006BA 03                       3         .byte 3  
      0006BB 48 4C 44                 4         .ascii "HLD"
      0006BE                          5         HLD:
      0006BE 90 AE 00 14      [ 2] 1336 	LDW Y,#UHLD 
      0006C2 1D 00 02         [ 2] 1337 	SUBW X,#2
      0006C5 FF               [ 2] 1338         LDW (X),Y
      0006C6 81               [ 4] 1339         RET
                                   1340 
                                   1341 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1342 ;       CONTEXT ( -- a )
                                   1343 ;       Start vocabulary search.
                                   1344 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006C7                       1345         _HEADER CNTXT,7,"CONTEXT"
      0006C7 06 BA                    1         .word LINK 
                           0006C9     2         LINK=.
      0006C9 07                       3         .byte 7  
      0006CA 43 4F 4E 54 45 58 54     4         .ascii "CONTEXT"
      0006D1                          5         CNTXT:
      0006D1 90 AE 00 16      [ 2] 1346 	LDW Y,#UCNTXT
      0006D5 1D 00 02         [ 2] 1347 	SUBW X,#2
      0006D8 FF               [ 2] 1348         LDW (X),Y
      0006D9 81               [ 4] 1349         RET
                                   1350 
                                   1351 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1352 ;       VP      ( -- a )
                                   1353 ;       Point to top of variables
                                   1354 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006DA                       1355         _HEADER VPP,2,"VP"
      0006DA 06 C9                    1         .word LINK 
                           0006DC     2         LINK=.
      0006DC 02                       3         .byte 2  
      0006DD 56 50                    4         .ascii "VP"
      0006DF                          5         VPP:
      0006DF 90 AE 00 18      [ 2] 1356 	LDW Y,#UVP 
      0006E3 1D 00 02         [ 2] 1357 	SUBW X,#2
      0006E6 FF               [ 2] 1358         LDW (X),Y
      0006E7 81               [ 4] 1359         RET
                                   1360 
                                   1361 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1362 ;       CP    ( -- a )
                                   1363 ;       Pointer to top of FLASH 
                                   1364 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006E8                       1365         _HEADER CPP,2,"CP"
      0006E8 06 DC                    1         .word LINK 
                           0006EA     2         LINK=.
      0006EA 02                       3         .byte 2  
      0006EB 43 50                    4         .ascii "CP"
      0006ED                          5         CPP:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      0006ED 90 AE 00 1A      [ 2] 1366         ldw y,#UCP 
      0006F1 1D 00 02         [ 2] 1367         subw x,#CELLL 
      0006F4 FF               [ 2] 1368         ldw (x),y 
      0006F5 81               [ 4] 1369         ret                
                                   1370 
                                   1371 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1372 ;       LAST    ( -- a )
                                   1373 ;       Point to last name in 
                                   1374 ;       dictionary.
                                   1375 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006F6                       1376         _HEADER LAST,4,"LAST"
      0006F6 06 EA                    1         .word LINK 
                           0006F8     2         LINK=.
      0006F8 04                       3         .byte 4  
      0006F9 4C 41 53 54              4         .ascii "LAST"
      0006FD                          5         LAST:
      0006FD 90 AE 00 1C      [ 2] 1377 	LDW Y,#ULAST 
      000701 1D 00 02         [ 2] 1378 	SUBW X,#2
      000704 FF               [ 2] 1379         LDW (X),Y
      000705 81               [ 4] 1380         RET
                                   1381 
                                   1382 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1383 ; address of system variable URLAST 
                                   1384 ;       RAMLAST ( -- a )
                                   1385 ; RAM dictionary context 
                                   1386 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000706                       1387         _HEADER RAMLAST,7,"RAMLAST"
      000706 06 F8                    1         .word LINK 
                           000708     2         LINK=.
      000708 07                       3         .byte 7  
      000709 52 41 4D 4C 41 53 54     4         .ascii "RAMLAST"
      000710                          5         RAMLAST:
      000710 90 AE 00 22      [ 2] 1388         ldw y,#URLAST 
      000714 1D 00 02         [ 2] 1389         subw x,#CELLL 
      000717 FF               [ 2] 1390         ldw (x),y 
      000718 81               [ 4] 1391         ret 
                                   1392 
                                   1393 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1394 ;       OFFSET ( -- a )
                                   1395 ;       address of system 
                                   1396 ;       variable OFFSET 
                                   1397 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000719                       1398         _HEADER OFFSET,6,"OFFSET"
      000719 07 08                    1         .word LINK 
                           00071B     2         LINK=.
      00071B 06                       3         .byte 6  
      00071C 4F 46 46 53 45 54        4         .ascii "OFFSET"
      000722                          5         OFFSET:
      000722 1D 00 02         [ 2] 1399         subw x,#CELLL
      000725 90 AE 00 1E      [ 2] 1400         ldw y,#UOFFSET 
      000729 FF               [ 2] 1401         ldw (x),y 
      00072A 81               [ 4] 1402         ret 
                                   1403 
                                   1404 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1405 ; adjust jump address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                                   1406 ;  adding OFFSET
                                   1407 ; ADR-ADJ ( a -- a+offset )
                                   1408 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00072B                       1409 ADRADJ: 
      00072B CD 07 22         [ 4] 1410         call OFFSET 
      00072E CD 04 E3         [ 4] 1411         call AT 
      000731 CC 07 AD         [ 2] 1412         jp PLUS 
                                   1413 
                                   1414 
                                   1415 ;; Common functions
                                   1416 
                                   1417 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1418 ;       ?DUP    ( w -- w w | 0 )
                                   1419 ;       Dup tos if its is not zero.
                                   1420 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000734                       1421         _HEADER QDUP,4,"?DUP"
      000734 07 1B                    1         .word LINK 
                           000736     2         LINK=.
      000736 04                       3         .byte 4  
      000737 3F 44 55 50              4         .ascii "?DUP"
      00073B                          5         QDUP:
      00073B 90 93            [ 1] 1422         LDW Y,X
      00073D 90 FE            [ 2] 1423 	LDW Y,(Y)
      00073F 27 04            [ 1] 1424         JREQ     QDUP1
      000741 1D 00 02         [ 2] 1425 	SUBW X,#2
      000744 FF               [ 2] 1426         LDW (X),Y
      000745 81               [ 4] 1427 QDUP1:  RET
                                   1428 
                                   1429 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1430 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1431 ;       Rot 3rd item to top.
                                   1432 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000746                       1433         _HEADER ROT,3,"ROT"
      000746 07 36                    1         .word LINK 
                           000748     2         LINK=.
      000748 03                       3         .byte 3  
      000749 52 4F 54                 4         .ascii "ROT"
      00074C                          5         ROT:
      00074C 90 93            [ 1] 1434         ldw y,x 
      00074E 90 FE            [ 2] 1435         ldw y,(y)
      000750 90 89            [ 2] 1436         pushw y 
      000752 90 93            [ 1] 1437         ldw y,x 
      000754 90 EE 04         [ 2] 1438         ldw y,(4,y)
      000757 FF               [ 2] 1439         ldw (x),y 
      000758 90 93            [ 1] 1440         ldw y,x 
      00075A 90 EE 02         [ 2] 1441         ldw y,(2,y)
      00075D EF 04            [ 2] 1442         ldw (4,x),y 
      00075F 90 85            [ 2] 1443         popw y 
      000761 EF 02            [ 2] 1444         ldw (2,x),y
      000763 81               [ 4] 1445         ret 
                                   1446 
                                   1447 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1448 ;    <ROT ( n1 n2 n3 -- n3 n1 n2 )
                                   1449 ;    rotate left 3 top elements 
                                   1450 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      000764                       1451     _HEADER NROT,4,"<ROT"
      000764 07 48                    1         .word LINK 
                           000766     2         LINK=.
      000766 04                       3         .byte 4  
      000767 3C 52 4F 54              4         .ascii "<ROT"
      00076B                          5         NROT:
      00076B 90 93            [ 1] 1452     LDW Y,X 
      00076D 90 FE            [ 2] 1453     LDW Y,(Y)
      00076F 90 BF 26         [ 2] 1454     LDW YTEMP,Y ; n3  
      000772 90 93            [ 1] 1455     LDW Y,X 
      000774 90 EE 02         [ 2] 1456     LDW Y,(2,Y) ; Y = n2 
      000777 FF               [ 2] 1457     LDW (X),Y   ; TOS = n2 
      000778 90 93            [ 1] 1458     LDW Y,X    
      00077A 90 EE 04         [ 2] 1459     LDW Y,(4,Y) ; Y = n1 
      00077D EF 02            [ 2] 1460     LDW (2,X),Y ;   = n1 
      00077F 90 BE 26         [ 2] 1461     LDW Y,YTEMP 
      000782 EF 04            [ 2] 1462     LDW (4,X),Y ; = n3 
      000784 81               [ 4] 1463     RET 
                                   1464 
                                   1465 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1466 ;       2DROP   ( w w -- )
                                   1467 ;       Discard two items on stack.
                                   1468 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000785                       1469         _HEADER DDROP,5,"2DROP"
      000785 07 66                    1         .word LINK 
                           000787     2         LINK=.
      000787 05                       3         .byte 5  
      000788 32 44 52 4F 50           4         .ascii "2DROP"
      00078D                          5         DDROP:
      00078D 1C 00 04         [ 2] 1470         ADDW X,#4
      000790 81               [ 4] 1471         RET
                                   1472 
                                   1473 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1474 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1475 ;       Duplicate top two items.
                                   1476 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000791                       1477         _HEADER DDUP,4,"2DUP"
      000791 07 87                    1         .word LINK 
                           000793     2         LINK=.
      000793 04                       3         .byte 4  
      000794 32 44 55 50              4         .ascii "2DUP"
      000798                          5         DDUP:
      000798 1D 00 04         [ 2] 1478         SUBW X,#4
      00079B 90 93            [ 1] 1479         LDW Y,X
      00079D 90 EE 06         [ 2] 1480         LDW Y,(6,Y)
      0007A0 EF 02            [ 2] 1481         LDW (2,X),Y
      0007A2 90 93            [ 1] 1482         LDW Y,X
      0007A4 90 EE 04         [ 2] 1483         LDW Y,(4,Y)
      0007A7 FF               [ 2] 1484         LDW (X),Y
      0007A8 81               [ 4] 1485         RET
                                   1486 
                                   1487 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1488 ;       +       ( w w -- sum )
                                   1489 ;       Add top two items.
                                   1490 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      0007A9                       1491         _HEADER PLUS,1,"+"
      0007A9 07 93                    1         .word LINK 
                           0007AB     2         LINK=.
      0007AB 01                       3         .byte 1  
      0007AC 2B                       4         .ascii "+"
      0007AD                          5         PLUS:
      0007AD 90 93            [ 1] 1492         LDW Y,X
      0007AF 90 FE            [ 2] 1493         LDW Y,(Y)
      0007B1 90 BF 26         [ 2] 1494         LDW YTEMP,Y
      0007B4 1C 00 02         [ 2] 1495         ADDW X,#2
      0007B7 90 93            [ 1] 1496         LDW Y,X
      0007B9 90 FE            [ 2] 1497         LDW Y,(Y)
      0007BB 72 B9 00 26      [ 2] 1498         ADDW Y,YTEMP
      0007BF FF               [ 2] 1499         LDW (X),Y
      0007C0 81               [ 4] 1500         RET
                                   1501 
                                   1502 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1503 ;       NOT     ( w -- w )
                                   1504 ;       One's complement of tos.
                                   1505 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007C1                       1506         _HEADER INVER,3,"NOT"
      0007C1 07 AB                    1         .word LINK 
                           0007C3     2         LINK=.
      0007C3 03                       3         .byte 3  
      0007C4 4E 4F 54                 4         .ascii "NOT"
      0007C7                          5         INVER:
      0007C7 90 93            [ 1] 1507         LDW Y,X
      0007C9 90 FE            [ 2] 1508         LDW Y,(Y)
      0007CB 90 53            [ 2] 1509         CPLW Y
      0007CD FF               [ 2] 1510         LDW (X),Y
      0007CE 81               [ 4] 1511         RET
                                   1512 
                                   1513 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1514 ;       NEGATE  ( n -- -n )
                                   1515 ;       Two's complement of tos.
                                   1516 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007CF                       1517         _HEADER NEGAT,6,"NEGATE"
      0007CF 07 C3                    1         .word LINK 
                           0007D1     2         LINK=.
      0007D1 06                       3         .byte 6  
      0007D2 4E 45 47 41 54 45        4         .ascii "NEGATE"
      0007D8                          5         NEGAT:
      0007D8 90 93            [ 1] 1518         LDW Y,X
      0007DA 90 FE            [ 2] 1519         LDW Y,(Y)
      0007DC 90 50            [ 2] 1520         NEGW Y
      0007DE FF               [ 2] 1521         LDW (X),Y
      0007DF 81               [ 4] 1522         RET
                                   1523 
                                   1524 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1525 ;       DNEGATE ( d -- -d )
                                   1526 ;       Two's complement of top double.
                                   1527 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007E0                       1528         _HEADER DNEGA,7,"DNEGATE"
      0007E0 07 D1                    1         .word LINK 
                           0007E2     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      0007E2 07                       3         .byte 7  
      0007E3 44 4E 45 47 41 54 45     4         .ascii "DNEGATE"
      0007EA                          5         DNEGA:
      0007EA 90 93            [ 1] 1529         LDW Y,X
      0007EC 90 FE            [ 2] 1530 	LDW Y,(Y)
      0007EE 90 53            [ 2] 1531         CPLW Y     
      0007F0 90 BF 26         [ 2] 1532 	LDW YTEMP,Y
      0007F3 90 93            [ 1] 1533         LDW Y,X
      0007F5 90 EE 02         [ 2] 1534         LDW Y,(2,Y)
      0007F8 90 53            [ 2] 1535         CPLW Y
      0007FA 72 A9 00 01      [ 2] 1536         addw y,#1
      0007FE EF 02            [ 2] 1537         LDW (2,X),Y
      000800 90 BE 26         [ 2] 1538         LDW Y,YTEMP
      000803 24 02            [ 1] 1539         JRNC DN1 
      000805 90 5C            [ 1] 1540         INCW Y
      000807 FF               [ 2] 1541 DN1:    LDW (X),Y
      000808 81               [ 4] 1542         RET
                                   1543 
                                   1544 
                                   1545 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1546 ;       S>D ( n -- d )
                                   1547 ; convert single integer to double 
                                   1548 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000809                       1549         _HEADER STOD,3,"S>D"
      000809 07 E2                    1         .word LINK 
                           00080B     2         LINK=.
      00080B 03                       3         .byte 3  
      00080C 53 3E 44                 4         .ascii "S>D"
      00080F                          5         STOD:
      00080F 1D 00 02         [ 2] 1550         subw x,#CELLL 
      000812 90 5F            [ 1] 1551         clrw y 
      000814 FF               [ 2] 1552         ldw (x),y 
      000815 90 93            [ 1] 1553         ldw y,x 
      000817 90 EE 02         [ 2] 1554         ldw y,(2,y)
      00081A 2A 05            [ 1] 1555         jrpl 1$ 
      00081C 90 AE FF FF      [ 2] 1556         ldw y,#-1
      000820 FF               [ 2] 1557         ldw (x),y 
      000821 81               [ 4] 1558 1$:     ret 
                                   1559 
                                   1560 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1561 ;       -       ( n1 n2 -- n1-n2 )
                                   1562 ;       Subtraction.
                                   1563 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000822                       1564         _HEADER SUBB,1,"-"
      000822 08 0B                    1         .word LINK 
                           000824     2         LINK=.
      000824 01                       3         .byte 1  
      000825 2D                       4         .ascii "-"
      000826                          5         SUBB:
      000826 90 93            [ 1] 1565         LDW Y,X
      000828 90 FE            [ 2] 1566         LDW Y,(Y)
      00082A 90 BF 26         [ 2] 1567         LDW YTEMP,Y
      00082D 1C 00 02         [ 2] 1568         ADDW X,#2
      000830 90 93            [ 1] 1569         LDW Y,X
      000832 90 FE            [ 2] 1570         LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000834 72 B2 00 26      [ 2] 1571         SUBW Y,YTEMP
      000838 FF               [ 2] 1572         LDW (X),Y
      000839 81               [ 4] 1573         RET
                                   1574 
                                   1575 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1576 ;       ABS     ( n -- n )
                                   1577 ;       Return  absolute value of n.
                                   1578 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00083A                       1579         _HEADER ABSS,3,"ABS"
      00083A 08 24                    1         .word LINK 
                           00083C     2         LINK=.
      00083C 03                       3         .byte 3  
      00083D 41 42 53                 4         .ascii "ABS"
      000840                          5         ABSS:
      000840 90 93            [ 1] 1580         LDW Y,X
      000842 90 FE            [ 2] 1581 	LDW Y,(Y)
      000844 2A 03            [ 1] 1582         JRPL     AB1     ;negate:
      000846 90 50            [ 2] 1583         NEGW     Y     ;else negate hi byte
      000848 FF               [ 2] 1584         LDW (X),Y
      000849 81               [ 4] 1585 AB1:    RET
                                   1586 
                                   1587 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1588 ;       =       ( w w -- t )
                                   1589 ;       Return true if top two are =al.
                                   1590 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00084A                       1591         _HEADER EQUAL,1,"="
      00084A 08 3C                    1         .word LINK 
                           00084C     2         LINK=.
      00084C 01                       3         .byte 1  
      00084D 3D                       4         .ascii "="
      00084E                          5         EQUAL:
      00084E A6 FF            [ 1] 1592         LD A,#0xFF  ;true
      000850 90 93            [ 1] 1593         LDW Y,X    ;D = n2
      000852 90 FE            [ 2] 1594         LDW Y,(Y)
      000854 90 BF 26         [ 2] 1595         LDW YTEMP,Y
      000857 1C 00 02         [ 2] 1596         ADDW X,#2
      00085A 90 93            [ 1] 1597         LDW Y,X
      00085C 90 FE            [ 2] 1598         LDW Y,(Y)
      00085E 90 B3 26         [ 2] 1599         CPW Y,YTEMP     ;if n2 <> n1
      000861 27 01            [ 1] 1600         JREQ     EQ1
      000863 4F               [ 1] 1601         CLR A
      000864 F7               [ 1] 1602 EQ1:    LD (X),A
      000865 E7 01            [ 1] 1603         LD (1,X),A
      000867 81               [ 4] 1604 	RET     
                                   1605 
                                   1606 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1607 ;       U<      ( u u -- t )
                                   1608 ;       Unsigned compare of top two items.
                                   1609 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000868                       1610         _HEADER ULESS,2,"U<"
      000868 08 4C                    1         .word LINK 
                           00086A     2         LINK=.
      00086A 02                       3         .byte 2  
      00086B 55 3C                    4         .ascii "U<"
      00086D                          5         ULESS:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      00086D A6 FF            [ 1] 1611         LD A,#0xFF  ;true
      00086F 90 93            [ 1] 1612         LDW Y,X    ;D = n2
      000871 90 FE            [ 2] 1613         LDW Y,(Y)
      000873 90 BF 26         [ 2] 1614         LDW YTEMP,Y
      000876 1C 00 02         [ 2] 1615         ADDW X,#2
      000879 90 93            [ 1] 1616         LDW Y,X
      00087B 90 FE            [ 2] 1617         LDW Y,(Y)
      00087D 90 B3 26         [ 2] 1618         CPW Y,YTEMP     ;if n2 <> n1
      000880 25 01            [ 1] 1619         JRULT     ULES1
      000882 4F               [ 1] 1620         CLR A
      000883 F7               [ 1] 1621 ULES1:  LD (X),A
      000884 E7 01            [ 1] 1622         LD (1,X),A
      000886 81               [ 4] 1623 	RET     
                                   1624 
                                   1625 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1626 ;       <       ( n1 n2 -- t )
                                   1627 ;       Signed compare of top two items.
                                   1628 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000887                       1629         _HEADER LESS,1,"<"
      000887 08 6A                    1         .word LINK 
                           000889     2         LINK=.
      000889 01                       3         .byte 1  
      00088A 3C                       4         .ascii "<"
      00088B                          5         LESS:
      00088B A6 FF            [ 1] 1630         LD A,#0xFF  ;true
      00088D 90 93            [ 1] 1631         LDW Y,X    ;D = n2
      00088F 90 FE            [ 2] 1632         LDW Y,(Y)
      000891 90 BF 26         [ 2] 1633         LDW YTEMP,Y
      000894 1C 00 02         [ 2] 1634         ADDW X,#2
      000897 90 93            [ 1] 1635         LDW Y,X
      000899 90 FE            [ 2] 1636         LDW Y,(Y)
      00089B 90 B3 26         [ 2] 1637         CPW Y,YTEMP     ;if n2 <> n1
      00089E 2F 01            [ 1] 1638         JRSLT     LT1
      0008A0 4F               [ 1] 1639         CLR A
      0008A1 F7               [ 1] 1640 LT1:    LD (X),A
      0008A2 E7 01            [ 1] 1641         LD (1,X),A
      0008A4 81               [ 4] 1642 	RET     
                                   1643 
                                   1644 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1645 ;   U> ( u1 u2 -- f )
                                   1646 ;   f = true if u1>u2 
                                   1647 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008A5                       1648     _HEADER UGREAT,2,"U>"
      0008A5 08 89                    1         .word LINK 
                           0008A7     2         LINK=.
      0008A7 02                       3         .byte 2  
      0008A8 55 3E                    4         .ascii "U>"
      0008AA                          5         UGREAT:
      0008AA A6 00            [ 1] 1649     LD A,#0 
      0008AC 90 93            [ 1] 1650     LDW Y,X 
      0008AE 90 FE            [ 2] 1651     LDW Y,(Y)
      0008B0 90 BF 26         [ 2] 1652     LDW YTEMP,Y 
      0008B3 1C 00 02         [ 2] 1653     ADDW X,#2 
      0008B6 90 93            [ 1] 1654     LDW Y,X
      0008B8 90 FE            [ 2] 1655     LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      0008BA 90 B3 26         [ 2] 1656     CPW Y,YTEMP 
      0008BD 23 02            [ 2] 1657     JRULE UGREAT1 
      0008BF A6 FF            [ 1] 1658     LD A,#0xff  
      0008C1                       1659 UGREAT1:
      0008C1 F7               [ 1] 1660     LD (X),A 
      0008C2 E7 01            [ 1] 1661     LD (1,X),A 
      0008C4 81               [ 4] 1662     RET 
                                   1663 
                                   1664 
                                   1665 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1666 ;       >   (n1 n2 -- f )
                                   1667 ;  signed compare n1 n2 
                                   1668 ;  true if n1 > n2 
                                   1669 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008C5                       1670         _HEADER GREAT,1,">"
      0008C5 08 A7                    1         .word LINK 
                           0008C7     2         LINK=.
      0008C7 01                       3         .byte 1  
      0008C8 3E                       4         .ascii ">"
      0008C9                          5         GREAT:
      0008C9 A6 FF            [ 1] 1671         LD A,#0xFF ;
      0008CB 90 93            [ 1] 1672         LDW Y,X 
      0008CD 90 FE            [ 2] 1673         LDW Y,(Y)
      0008CF 90 BF 26         [ 2] 1674         LDW YTEMP,Y 
      0008D2 1C 00 02         [ 2] 1675         ADDW X,#2 
      0008D5 90 93            [ 1] 1676         LDW Y,X 
      0008D7 90 FE            [ 2] 1677         LDW Y,(Y)
      0008D9 90 B3 26         [ 2] 1678         CPW  Y,YTEMP 
      0008DC 2C 01            [ 1] 1679         JRSGT GREAT1 
      0008DE 4F               [ 1] 1680         CLR  A
      0008DF                       1681 GREAT1:
      0008DF F7               [ 1] 1682         LD (X),A 
      0008E0 E7 01            [ 1] 1683         LD (1,X),A 
      0008E2 81               [ 4] 1684         RET 
                                   1685 
                                   1686 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1687 ;       MAX     ( n n -- n )
                                   1688 ;       Return greater of two top items.
                                   1689 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008E3                       1690         _HEADER MAX,3,"MAX"
      0008E3 08 C7                    1         .word LINK 
                           0008E5     2         LINK=.
      0008E5 03                       3         .byte 3  
      0008E6 4D 41 58                 4         .ascii "MAX"
      0008E9                          5         MAX:
      0008E9 90 93            [ 1] 1691         LDW Y,X    ;D = n2
      0008EB 90 EE 02         [ 2] 1692         LDW Y,(2,Y)
      0008EE 90 BF 26         [ 2] 1693         LDW YTEMP,Y
      0008F1 90 93            [ 1] 1694         LDW Y,X
      0008F3 90 FE            [ 2] 1695         LDW Y,(Y)
      0008F5 90 B3 26         [ 2] 1696         CPW Y,YTEMP     ;if n2 <> n1
      0008F8 2F 02            [ 1] 1697         JRSLT     MAX1
      0008FA EF 02            [ 2] 1698         LDW (2,X),Y
      0008FC 1C 00 02         [ 2] 1699 MAX1:   ADDW X,#2
      0008FF 81               [ 4] 1700 	RET     
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                   1701 
                                   1702 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1703 ;       MIN     ( n n -- n )
                                   1704 ;       Return smaller of top two items.
                                   1705 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000900                       1706         _HEADER MIN,3,"MIN"
      000900 08 E5                    1         .word LINK 
                           000902     2         LINK=.
      000902 03                       3         .byte 3  
      000903 4D 49 4E                 4         .ascii "MIN"
      000906                          5         MIN:
      000906 90 93            [ 1] 1707         LDW Y,X    ;D = n2
      000908 90 EE 02         [ 2] 1708         LDW Y,(2,Y)
      00090B 90 BF 26         [ 2] 1709         LDW YTEMP,Y
      00090E 90 93            [ 1] 1710         LDW Y,X
      000910 90 FE            [ 2] 1711         LDW Y,(Y)
      000912 90 B3 26         [ 2] 1712         CPW Y,YTEMP     ;if n2 <> n1
      000915 2C 02            [ 1] 1713         JRSGT     MIN1
      000917 EF 02            [ 2] 1714         LDW (2,X),Y
      000919 1C 00 02         [ 2] 1715 MIN1:	ADDW X,#2
      00091C 81               [ 4] 1716 	RET     
                                   1717 
                                   1718 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1719 ;       WITHIN  ( u ul uh -- t )
                                   1720 ;       Return true if u is within
                                   1721 ;       range of ul and uh. ( ul <= u < uh )
                                   1722 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00091D                       1723         _HEADER WITHI,6,"WITHIN"
      00091D 09 02                    1         .word LINK 
                           00091F     2         LINK=.
      00091F 06                       3         .byte 6  
      000920 57 49 54 48 49 4E        4         .ascii "WITHIN"
      000926                          5         WITHI:
      000926 CD 05 B0         [ 4] 1724         CALL     OVER
      000929 CD 08 26         [ 4] 1725         CALL     SUBB
      00092C CD 05 51         [ 4] 1726         CALL     TOR
      00092F CD 08 26         [ 4] 1727         CALL     SUBB
      000932 CD 05 34         [ 4] 1728         CALL     RFROM
      000935 CC 08 6D         [ 2] 1729         JP     ULESS
                                   1730 
                                   1731 ;; Divide
                                   1732 
                                   1733 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1734 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1735 ;       Unsigned divide of a double by a
                                   1736 ;       single. Return mod and quotient.
                                   1737 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000938                       1738         _HEADER UMMOD,6,"UM/MOD"
      000938 09 1F                    1         .word LINK 
                           00093A     2         LINK=.
      00093A 06                       3         .byte 6  
      00093B 55 4D 2F 4D 4F 44        4         .ascii "UM/MOD"
      000941                          5         UMMOD:
                                   1739 ; 2021-02-22
                                   1740 ; changed algortihm for Jeeek one 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                   1741 ; ref: https://github.com/TG9541/stm8ef/pull/406        
      000941 90 93            [ 1] 1742         LDW     Y,X             ; stack pointer to Y
      000943 FE               [ 2] 1743         LDW     X,(X)           ; un
      000944 BF 26            [ 2] 1744         LDW     YTEMP,X         ; save un
      000946 93               [ 1] 1745         LDW     X,Y
      000947 5C               [ 1] 1746         INCW    X               ; drop un
      000948 5C               [ 1] 1747         INCW    X
      000949 89               [ 2] 1748         PUSHW   X               ; save stack pointer
      00094A FE               [ 2] 1749         LDW     X,(X)           ; X=udh
      00094B 90 EE 04         [ 2] 1750         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      00094E B3 26            [ 2] 1751         CPW     X,YTEMP
      000950 25 0B            [ 1] 1752         JRULT   MMSM1           ; X is still on the R-stack
      000952 85               [ 2] 1753         POPW    X               ; restore stack pointer
      000953 90 AE FF FF      [ 2] 1754         LDW     Y,#0xFFFF       ; overflow result:
      000957 FF               [ 2] 1755         LDW     (X),Y           ; quotient max. 16 bit value
      000958 90 5F            [ 1] 1756         CLRW    Y
      00095A EF 02            [ 2] 1757         LDW     (2,X),Y         ; remainder 0
      00095C 81               [ 4] 1758         RET
      00095D                       1759 MMSM1:
      00095D A6 10            [ 1] 1760         LD      A,#16           ; loop count
      00095F 90 58            [ 2] 1761         SLLW    Y               ; udl shift udl into udh
      000961                       1762 MMSM3:
      000961 59               [ 2] 1763         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      000962 25 04            [ 1] 1764         JRC     MMSMa           ; if carry out of rotate
      000964 B3 26            [ 2] 1765         CPW     X,YTEMP         ; compare udh to un
      000966 25 05            [ 1] 1766         JRULT   MMSM4           ; can't subtract
      000968                       1767 MMSMa:
      000968 72 B0 00 26      [ 2] 1768         SUBW    X,YTEMP         ; can subtract
      00096C 98               [ 1] 1769         RCF
      00096D                       1770 MMSM4:
      00096D 8C               [ 1] 1771         CCF                     ; quotient bit
      00096E 90 59            [ 2] 1772         RLCW    Y               ; rotate into quotient, rotate out udl
      000970 4A               [ 1] 1773         DEC     A               ; repeat
      000971 26 EE            [ 1] 1774         JRNE    MMSM3           ; if A == 0
      000973                       1775 MMSMb:
      000973 BF 26            [ 2] 1776         LDW     YTEMP,X         ; done, save remainder
      000975 85               [ 2] 1777         POPW    X               ; restore stack pointer
      000976 FF               [ 2] 1778         LDW     (X),Y           ; save quotient
      000977 90 BE 26         [ 2] 1779         LDW     Y,YTEMP         ; remainder onto stack
      00097A EF 02            [ 2] 1780         LDW     (2,X),Y
      00097C 81               [ 4] 1781         RET
                                   1782 
                                   1783 
                                   1784 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                   1785 ;       M/MOD   ( d n -- r q )
                                   1786 ;       Signed floored divide of double by
                                   1787 ;       single. Return mod and quotient.
                                   1788 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00097D                       1789         _HEADER MSMOD,5,"M/MOD"
      00097D 09 3A                    1         .word LINK 
                           00097F     2         LINK=.
      00097F 05                       3         .byte 5  
      000980 4D 2F 4D 4F 44           4         .ascii "M/MOD"
      000985                          5         MSMOD:
      000985 CD 05 88         [ 4] 1790         CALL	DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000988 CD 05 BF         [ 4] 1791         CALL	ZLESS
      00098B CD 05 88         [ 4] 1792         CALL	DUPP
      00098E CD 05 51         [ 4] 1793         CALL	TOR
      000991 CD 04 98         [ 4] 1794         CALL	QBRAN
      000994 09 A2                 1795         .word	MMOD1
      000996 CD 07 D8         [ 4] 1796         CALL	NEGAT
      000999 CD 05 51         [ 4] 1797         CALL	TOR
      00099C CD 07 EA         [ 4] 1798         CALL	DNEGA
      00099F CD 05 34         [ 4] 1799         CALL	RFROM
      0009A2 CD 05 51         [ 4] 1800 MMOD1:	CALL	TOR
      0009A5 CD 05 88         [ 4] 1801         CALL	DUPP
      0009A8 CD 05 BF         [ 4] 1802         CALL	ZLESS
      0009AB CD 04 98         [ 4] 1803         CALL	QBRAN
      0009AE 09 B6                 1804         .word	MMOD2
      0009B0 CD 05 45         [ 4] 1805         CALL	RAT
      0009B3 CD 07 AD         [ 4] 1806         CALL	PLUS
      0009B6 CD 05 34         [ 4] 1807 MMOD2:	CALL	RFROM
      0009B9 CD 09 41         [ 4] 1808         CALL	UMMOD
      0009BC CD 05 34         [ 4] 1809         CALL	RFROM
      0009BF CD 04 98         [ 4] 1810         CALL	QBRAN
      0009C2 09 CD                 1811         .word	MMOD3
      0009C4 CD 05 98         [ 4] 1812         CALL	SWAPP
      0009C7 CD 07 D8         [ 4] 1813         CALL	NEGAT
      0009CA CD 05 98         [ 4] 1814         CALL	SWAPP
      0009CD 81               [ 4] 1815 MMOD3:	RET
                                   1816 
                                   1817 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1818 ;       /MOD    ( n n -- r q )
                                   1819 ;       Signed divide. Return mod 
                                   1820 ;       and quotient.
                                   1821 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0009CE                       1822         _HEADER SLMOD,4,"/MOD"
      0009CE 09 7F                    1         .word LINK 
                           0009D0     2         LINK=.
      0009D0 04                       3         .byte 4  
      0009D1 2F 4D 4F 44              4         .ascii "/MOD"
      0009D5                          5         SLMOD:
      0009D5 CD 05 B0         [ 4] 1823         CALL	OVER
      0009D8 CD 05 BF         [ 4] 1824         CALL	ZLESS
      0009DB CD 05 98         [ 4] 1825         CALL	SWAPP
      0009DE CC 09 85         [ 2] 1826         JP	MSMOD
                                   1827 
                                   1828 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1829 ;       MOD     ( n n -- r )
                                   1830 ;       Signed divide. Return mod only.
                                   1831 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0009E1                       1832         _HEADER MODD,3,"MOD"
      0009E1 09 D0                    1         .word LINK 
                           0009E3     2         LINK=.
      0009E3 03                       3         .byte 3  
      0009E4 4D 4F 44                 4         .ascii "MOD"
      0009E7                          5         MODD:
      0009E7 CD 09 D5         [ 4] 1833 	CALL	SLMOD
      0009EA CC 05 7E         [ 2] 1834 	JP	DROP
                                   1835 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                   1836 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1837 ;       /       ( n n -- q )
                                   1838 ;       Signed divide. Return quotient only.
                                   1839 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0009ED                       1840         _HEADER SLASH,1,"/"
      0009ED 09 E3                    1         .word LINK 
                           0009EF     2         LINK=.
      0009EF 01                       3         .byte 1  
      0009F0 2F                       4         .ascii "/"
      0009F1                          5         SLASH:
      0009F1 CD 09 D5         [ 4] 1841         CALL	SLMOD
      0009F4 CD 05 98         [ 4] 1842         CALL	SWAPP
      0009F7 CC 05 7E         [ 2] 1843         JP	DROP
                                   1844 
                                   1845 ;; Multiply
                                   1846 
                                   1847 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1848 ;       UM*     ( u u -- ud )
                                   1849 ;       Unsigned multiply. Return 
                                   1850 ;       double product.
                                   1851 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0009FA                       1852         _HEADER UMSTA,3,"UM*"
      0009FA 09 EF                    1         .word LINK 
                           0009FC     2         LINK=.
      0009FC 03                       3         .byte 3  
      0009FD 55 4D 2A                 4         .ascii "UM*"
      000A00                          5         UMSTA:
                                   1853 ; stack have 4 bytes u1=a,b u2=c,d
                                   1854 ; take advantage of SP addressing modes
                                   1855 ; these PRODx in RAM are not required
                                   1856 ; the product is kept on stack as local variable 
                                   1857         ;; bytes offset on data stack 
                           000002  1858         da=2 
                           000003  1859         db=3 
                           000000  1860         dc=0 
                           000001  1861         dd=1 
                                   1862         ;; product bytes offset on return stack 
                           000001  1863         UD1=1  ; ud bits 31..24
                           000002  1864         UD2=2  ; ud bits 23..16
                           000003  1865         UD3=3  ; ud bits 15..8 
                           000004  1866         UD4=4  ; ud bits 7..0 
                                   1867         ;; local variable for product set to zero   
      000A00 90 5F            [ 1] 1868         clrw y 
      000A02 90 89            [ 2] 1869         pushw y  ; bits 15..0
      000A04 90 89            [ 2] 1870         pushw y  ; bits 31..16 
      000A06 E6 03            [ 1] 1871         ld a,(db,x) ; b 
      000A08 90 97            [ 1] 1872         ld yl,a 
      000A0A E6 01            [ 1] 1873         ld a,(dd,x)   ; d
      000A0C 90 42            [ 4] 1874         mul y,a    ; b*d  
      000A0E 17 03            [ 2] 1875         ldw (UD3,sp),y ; lowest weight product 
      000A10 E6 03            [ 1] 1876         ld a,(db,x)
      000A12 90 97            [ 1] 1877         ld yl,a 
      000A14 E6 00            [ 1] 1878         ld a,(dc,x)
      000A16 90 42            [ 4] 1879         mul y,a  ; b*c 
                                   1880         ;;; do the partial sum 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000A18 72 F9 02         [ 2] 1881         addw y,(UD2,sp)
      000A1B 4F               [ 1] 1882         clr a 
      000A1C 49               [ 1] 1883         rlc a
      000A1D 6B 01            [ 1] 1884         ld (UD1,sp),a 
      000A1F 17 02            [ 2] 1885         ldw (UD2,sp),y 
      000A21 E6 02            [ 1] 1886         ld a,(da,x)
      000A23 90 97            [ 1] 1887         ld yl,a 
      000A25 E6 01            [ 1] 1888         ld a,(dd,x)
      000A27 90 42            [ 4] 1889         mul y,a   ; a*d 
                                   1890         ;; do partial sum 
      000A29 72 F9 02         [ 2] 1891         addw y,(UD2,sp)
      000A2C 4F               [ 1] 1892         clr a 
      000A2D 19 01            [ 1] 1893         adc a,(UD1,sp)
      000A2F 6B 01            [ 1] 1894         ld (UD1,sp),a  
      000A31 17 02            [ 2] 1895         ldw (UD2,sp),y 
      000A33 E6 02            [ 1] 1896         ld a,(da,x)
      000A35 90 97            [ 1] 1897         ld yl,a 
      000A37 E6 00            [ 1] 1898         ld a,(dc,x)
      000A39 90 42            [ 4] 1899         mul y,a  ;  a*c highest weight product 
                                   1900         ;;; do partial sum 
      000A3B 72 F9 01         [ 2] 1901         addw y,(UD1,sp)
      000A3E FF               [ 2] 1902         ldw (x),y  ; udh 
      000A3F 16 03            [ 2] 1903         ldw y,(UD3,sp)
      000A41 EF 02            [ 2] 1904         ldw (2,x),y  ; udl  
      000A43 5B 04            [ 2] 1905         addw sp,#4 ; drop local variable 
      000A45 81               [ 4] 1906         ret  
                                   1907 
                                   1908 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1909 ;       *       ( n n -- n )
                                   1910 ;       Signed multiply. Return 
                                   1911 ;       single product.
                                   1912 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A46                       1913         _HEADER STAR,1,"*"
      000A46 09 FC                    1         .word LINK 
                           000A48     2         LINK=.
      000A48 01                       3         .byte 1  
      000A49 2A                       4         .ascii "*"
      000A4A                          5         STAR:
      000A4A CD 0A 00         [ 4] 1914 	CALL	UMSTA
      000A4D CC 05 7E         [ 2] 1915 	JP	DROP
                                   1916 
                                   1917 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1918 ;       M*      ( n n -- d )
                                   1919 ;       Signed multiply. Return 
                                   1920 ;       double product.
                                   1921 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A50                       1922         _HEADER MSTAR,2,"M*"
      000A50 0A 48                    1         .word LINK 
                           000A52     2         LINK=.
      000A52 02                       3         .byte 2  
      000A53 4D 2A                    4         .ascii "M*"
      000A55                          5         MSTAR:
      000A55 CD 07 98         [ 4] 1923         CALL	DDUP
      000A58 CD 06 0E         [ 4] 1924         CALL	XORR
      000A5B CD 05 BF         [ 4] 1925         CALL	ZLESS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000A5E CD 05 51         [ 4] 1926         CALL	TOR
      000A61 CD 08 40         [ 4] 1927         CALL	ABSS
      000A64 CD 05 98         [ 4] 1928         CALL	SWAPP
      000A67 CD 08 40         [ 4] 1929         CALL	ABSS
      000A6A CD 0A 00         [ 4] 1930         CALL	UMSTA
      000A6D CD 05 34         [ 4] 1931         CALL	RFROM
      000A70 CD 04 98         [ 4] 1932         CALL	QBRAN
      000A73 0A 78                 1933         .word	MSTA1
      000A75 CD 07 EA         [ 4] 1934         CALL	DNEGA
      000A78 81               [ 4] 1935 MSTA1:	RET
                                   1936 
                                   1937 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1938 ;       */MOD   ( n1 n2 n3 -- r q )
                                   1939 ;       Multiply n1 and n2, then divide
                                   1940 ;       by n3. Return mod and quotient.
                                   1941 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A79                       1942         _HEADER SSMOD,5,"*/MOD"
      000A79 0A 52                    1         .word LINK 
                           000A7B     2         LINK=.
      000A7B 05                       3         .byte 5  
      000A7C 2A 2F 4D 4F 44           4         .ascii "*/MOD"
      000A81                          5         SSMOD:
      000A81 CD 05 51         [ 4] 1943         CALL     TOR
      000A84 CD 0A 55         [ 4] 1944         CALL     MSTAR
      000A87 CD 05 34         [ 4] 1945         CALL     RFROM
      000A8A CC 09 85         [ 2] 1946         JP     MSMOD
                                   1947 
                                   1948 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1949 ;       */      ( n1 n2 n3 -- q )
                                   1950 ;       Multiply n1 by n2, then divide
                                   1951 ;       by n3. Return quotient only.
                                   1952 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A8D                       1953         _HEADER STASL,2,"*/"
      000A8D 0A 7B                    1         .word LINK 
                           000A8F     2         LINK=.
      000A8F 02                       3         .byte 2  
      000A90 2A 2F                    4         .ascii "*/"
      000A92                          5         STASL:
      000A92 CD 0A 81         [ 4] 1954         CALL	SSMOD
      000A95 CD 05 98         [ 4] 1955         CALL	SWAPP
      000A98 CC 05 7E         [ 2] 1956         JP	DROP
                                   1957 
                                   1958 ;; Miscellaneous
                                   1959 
                                   1960 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1961 ;       CELL+   ( a -- a )
                                   1962 ;       Add cell size in byte to address.
                                   1963 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A9B                       1964         _HEADER CELLP,2,"2+"
      000A9B 0A 8F                    1         .word LINK 
                           000A9D     2         LINK=.
      000A9D 02                       3         .byte 2  
      000A9E 32 2B                    4         .ascii "2+"
      000AA0                          5         CELLP:
      000AA0 90 93            [ 1] 1965         LDW Y,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000AA2 90 FE            [ 2] 1966 	LDW Y,(Y)
      000AA4 72 A9 00 02      [ 2] 1967         ADDW Y,#CELLL 
      000AA8 FF               [ 2] 1968         LDW (X),Y
      000AA9 81               [ 4] 1969         RET
                                   1970 
                                   1971 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1972 ;       CELL-   ( a -- a )
                                   1973 ;       Subtract 2 from address.
                                   1974 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AAA                       1975         _HEADER CELLM,2,"2-"
      000AAA 0A 9D                    1         .word LINK 
                           000AAC     2         LINK=.
      000AAC 02                       3         .byte 2  
      000AAD 32 2D                    4         .ascii "2-"
      000AAF                          5         CELLM:
      000AAF 90 93            [ 1] 1976         LDW Y,X
      000AB1 90 FE            [ 2] 1977 	LDW Y,(Y)
      000AB3 72 A2 00 02      [ 2] 1978         SUBW Y,#CELLL
      000AB7 FF               [ 2] 1979         LDW (X),Y
      000AB8 81               [ 4] 1980         RET
                                   1981 
                                   1982 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1983 ;       CELLS   ( n -- n )
                                   1984 ;       Multiply tos by 2.
                                   1985 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AB9                       1986         _HEADER CELLS,2,"2*"
      000AB9 0A AC                    1         .word LINK 
                           000ABB     2         LINK=.
      000ABB 02                       3         .byte 2  
      000ABC 32 2A                    4         .ascii "2*"
      000ABE                          5         CELLS:
      000ABE 90 93            [ 1] 1987         LDW Y,X
      000AC0 90 FE            [ 2] 1988 	LDW Y,(Y)
      000AC2 90 58            [ 2] 1989         SLAW Y
      000AC4 FF               [ 2] 1990         LDW (X),Y
      000AC5 81               [ 4] 1991         RET
                                   1992 
                                   1993 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1994 ;       1+      ( a -- a )
                                   1995 ;       Add cell size in byte 
                                   1996 ;       to address.
                                   1997 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AC6                       1998         _HEADER ONEP,2,"1+"
      000AC6 0A BB                    1         .word LINK 
                           000AC8     2         LINK=.
      000AC8 02                       3         .byte 2  
      000AC9 31 2B                    4         .ascii "1+"
      000ACB                          5         ONEP:
      000ACB 90 93            [ 1] 1999         LDW Y,X
      000ACD 90 FE            [ 2] 2000 	LDW Y,(Y)
      000ACF 90 5C            [ 1] 2001         INCW Y
      000AD1 FF               [ 2] 2002         LDW (X),Y
      000AD2 81               [ 4] 2003         RET
                                   2004 
                                   2005 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



                                   2006 ;       1-      ( a -- a )
                                   2007 ;       Subtract 2 from address.
                                   2008 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AD3                       2009         _HEADER ONEM,2,"1-"
      000AD3 0A C8                    1         .word LINK 
                           000AD5     2         LINK=.
      000AD5 02                       3         .byte 2  
      000AD6 31 2D                    4         .ascii "1-"
      000AD8                          5         ONEM:
      000AD8 90 93            [ 1] 2010         LDW Y,X
      000ADA 90 FE            [ 2] 2011 	LDW Y,(Y)
      000ADC 90 5A            [ 2] 2012         DECW Y
      000ADE FF               [ 2] 2013         LDW (X),Y
      000ADF 81               [ 4] 2014         RET
                                   2015 
                                   2016 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2017 ;  shift left n times 
                                   2018 ; LSHIFT ( n1 n2 -- n1<<n2 )
                                   2019 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AE0                       2020         _HEADER LSHIFT,6,"LSHIFT"
      000AE0 0A D5                    1         .word LINK 
                           000AE2     2         LINK=.
      000AE2 06                       3         .byte 6  
      000AE3 4C 53 48 49 46 54        4         .ascii "LSHIFT"
      000AE9                          5         LSHIFT:
      000AE9 E6 01            [ 1] 2021         ld a,(1,x)
      000AEB 1C 00 02         [ 2] 2022         addw x,#CELLL 
      000AEE 90 93            [ 1] 2023         ldw y,x 
      000AF0 90 FE            [ 2] 2024         ldw y,(y)
      000AF2                       2025 LSHIFT1:
      000AF2 4D               [ 1] 2026         tnz a 
      000AF3 27 05            [ 1] 2027         jreq LSHIFT4 
      000AF5 90 58            [ 2] 2028         sllw y 
      000AF7 4A               [ 1] 2029         dec a 
      000AF8 20 F8            [ 2] 2030         jra LSHIFT1 
      000AFA                       2031 LSHIFT4:
      000AFA FF               [ 2] 2032         ldw (x),y 
      000AFB 81               [ 4] 2033         ret 
                                   2034 
                                   2035 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2036 ; shift right n times                 
                                   2037 ; RSHIFT (n1 n2 -- n1>>n2 )
                                   2038 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AFC                       2039         _HEADER RSHIFT,6,"RSHIFT"
      000AFC 0A E2                    1         .word LINK 
                           000AFE     2         LINK=.
      000AFE 06                       3         .byte 6  
      000AFF 52 53 48 49 46 54        4         .ascii "RSHIFT"
      000B05                          5         RSHIFT:
      000B05 E6 01            [ 1] 2040         ld a,(1,x)
      000B07 1C 00 02         [ 2] 2041         addw x,#CELLL 
      000B0A 90 93            [ 1] 2042         ldw y,x 
      000B0C 90 FE            [ 2] 2043         ldw y,(y)
      000B0E                       2044 RSHIFT1:
      000B0E 4D               [ 1] 2045         tnz a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000B0F 27 05            [ 1] 2046         jreq RSHIFT4 
      000B11 90 54            [ 2] 2047         srlw y 
      000B13 4A               [ 1] 2048         dec a 
      000B14 20 F8            [ 2] 2049         jra RSHIFT1 
      000B16                       2050 RSHIFT4:
      000B16 FF               [ 2] 2051         ldw (x),y 
      000B17 81               [ 4] 2052         ret 
                                   2053 
                                   2054 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2055 ;       2/      ( n -- n )
                                   2056 ;       divide  tos by 2.
                                   2057 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B18                       2058         _HEADER TWOSL,2,"2/"
      000B18 0A FE                    1         .word LINK 
                           000B1A     2         LINK=.
      000B1A 02                       3         .byte 2  
      000B1B 32 2F                    4         .ascii "2/"
      000B1D                          5         TWOSL:
      000B1D 90 93            [ 1] 2059         LDW Y,X
      000B1F 90 FE            [ 2] 2060 	LDW Y,(Y)
      000B21 90 57            [ 2] 2061         SRAW Y
      000B23 FF               [ 2] 2062         LDW (X),Y
      000B24 81               [ 4] 2063         RET
                                   2064 
                                   2065 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2066 ;       BL      ( -- 32 )
                                   2067 ;       Return 32,  blank character.
                                   2068 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B25                       2069         _HEADER BLANK,2,"BL"
      000B25 0B 1A                    1         .word LINK 
                           000B27     2         LINK=.
      000B27 02                       3         .byte 2  
      000B28 42 4C                    4         .ascii "BL"
      000B2A                          5         BLANK:
      000B2A 1D 00 02         [ 2] 2070         SUBW X,#2
      000B2D 90 AE 00 20      [ 2] 2071 	LDW Y,#32
      000B31 FF               [ 2] 2072         LDW (X),Y
      000B32 81               [ 4] 2073         RET
                                   2074 
                                   2075 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2076 ;         0     ( -- 0)
                                   2077 ;         Return 0.
                                   2078 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B33                       2079         _HEADER ZERO,1,"0"
      000B33 0B 27                    1         .word LINK 
                           000B35     2         LINK=.
      000B35 01                       3         .byte 1  
      000B36 30                       4         .ascii "0"
      000B37                          5         ZERO:
      000B37 1D 00 02         [ 2] 2080         SUBW X,#2
      000B3A 90 5F            [ 1] 2081 	CLRW Y
      000B3C FF               [ 2] 2082         LDW (X),Y
      000B3D 81               [ 4] 2083         RET
                                   2084 
                                   2085 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



                                   2086 ;         1     ( -- 1)
                                   2087 ;         Return 1.
                                   2088 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B3E                       2089         _HEADER ONE,1,"1"
      000B3E 0B 35                    1         .word LINK 
                           000B40     2         LINK=.
      000B40 01                       3         .byte 1  
      000B41 31                       4         .ascii "1"
      000B42                          5         ONE:
      000B42 1D 00 02         [ 2] 2090         SUBW X,#2
      000B45 90 AE 00 01      [ 2] 2091 	LDW Y,#1
      000B49 FF               [ 2] 2092         LDW (X),Y
      000B4A 81               [ 4] 2093         RET
                                   2094 
                                   2095 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2096 ;         -1    ( -- -1)
                                   2097 ;   Return -1
                                   2098 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B4B                       2099         _HEADER MONE,2,"-1"
      000B4B 0B 40                    1         .word LINK 
                           000B4D     2         LINK=.
      000B4D 02                       3         .byte 2  
      000B4E 2D 31                    4         .ascii "-1"
      000B50                          5         MONE:
      000B50 1D 00 02         [ 2] 2100         SUBW X,#2
      000B53 90 AE FF FF      [ 2] 2101 	LDW Y,#0xFFFF
      000B57 FF               [ 2] 2102         LDW (X),Y
      000B58 81               [ 4] 2103         RET
                                   2104 
                                   2105 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2106 ;       >CHAR   ( c -- c )
                                   2107 ;       Filter non-printing characters.
                                   2108 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B59                       2109         _HEADER TCHAR,5,">CHAR"
      000B59 0B 4D                    1         .word LINK 
                           000B5B     2         LINK=.
      000B5B 05                       3         .byte 5  
      000B5C 3E 43 48 41 52           4         .ascii ">CHAR"
      000B61                          5         TCHAR:
      000B61 E6 01            [ 1] 2110         ld a,(1,x)
      000B63 A1 20            [ 1] 2111         cp a,#32  
      000B65 2B 05            [ 1] 2112         jrmi 1$ 
      000B67 A1 7F            [ 1] 2113         cp a,#127 
      000B69 2A 01            [ 1] 2114         jrpl 1$ 
      000B6B 81               [ 4] 2115         ret 
      000B6C A6 5F            [ 1] 2116 1$:     ld a,#'_ 
      000B6E E7 01            [ 1] 2117         ld (1,x),a 
      000B70 81               [ 4] 2118         ret 
                                   2119 
                                   2120 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2121 ;       DEPTH   ( -- n )
                                   2122 ;       Return  depth of  data stack.
                                   2123 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B71                       2124         _HEADER DEPTH,5,"DEPTH"
      000B71 0B 5B                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                           000B73     2         LINK=.
      000B73 05                       3         .byte 5  
      000B74 44 45 50 54 48           4         .ascii "DEPTH"
      000B79                          5         DEPTH:
      000B79 90 BE 2C         [ 2] 2125         LDW Y,SP0    ;save data stack ptr
      000B7C BF 24            [ 2] 2126 	LDW XTEMP,X
      000B7E 72 B2 00 24      [ 2] 2127         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000B82 90 57            [ 2] 2128         SRAW Y    ;Y = #stack items
      000B84 1D 00 02         [ 2] 2129 	SUBW X,#2
      000B87 FF               [ 2] 2130         LDW (X),Y     ; if neg, underflow
      000B88 81               [ 4] 2131         RET
                                   2132 
                                   2133 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2134 ;       PICK    ( ... +n -- ... w )
                                   2135 ;       Copy  nth stack item to tos.
                                   2136 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B89                       2137         _HEADER PICK,4,"PICK"
      000B89 0B 73                    1         .word LINK 
                           000B8B     2         LINK=.
      000B8B 04                       3         .byte 4  
      000B8C 50 49 43 4B              4         .ascii "PICK"
      000B90                          5         PICK:
      000B90 90 93            [ 1] 2138         LDW Y,X   ;D = n1
      000B92 90 FE            [ 2] 2139         LDW Y,(Y)
                                   2140 ; modified for standard compliance          
                                   2141 ; 0 PICK must be equivalent to DUP 
      000B94 90 5C            [ 1] 2142         INCW Y 
      000B96 90 58            [ 2] 2143         SLAW Y
      000B98 BF 24            [ 2] 2144         LDW XTEMP,X
      000B9A 72 B9 00 24      [ 2] 2145         ADDW Y,XTEMP
      000B9E 90 FE            [ 2] 2146         LDW Y,(Y)
      000BA0 FF               [ 2] 2147         LDW (X),Y
      000BA1 81               [ 4] 2148         RET
                                   2149 
                                   2150 ;; Memory access
                                   2151 
                                   2152 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2153 ;       +!      ( n a -- )
                                   2154 ;       Add n to  contents at 
                                   2155 ;       address a.
                                   2156 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BA2                       2157         _HEADER PSTOR,2,"+!"
      000BA2 0B 8B                    1         .word LINK 
                           000BA4     2         LINK=.
      000BA4 02                       3         .byte 2  
      000BA5 2B 21                    4         .ascii "+!"
      000BA7                          5         PSTOR:
      000BA7 90 93            [ 1] 2158         ldw y,x 
      000BA9 90 FE            [ 2] 2159         ldw y,(y)
      000BAB 90 BF 26         [ 2] 2160         ldw YTEMP,y  ; address
      000BAE 90 FE            [ 2] 2161         ldw y,(y)  
      000BB0 90 89            [ 2] 2162         pushw y  ; value at address 
      000BB2 90 93            [ 1] 2163         ldw y,x 
      000BB4 90 EE 02         [ 2] 2164         ldw y,(2,y) ; n 
      000BB7 72 F9 01         [ 2] 2165         addw y,(1,sp) ; n+value
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000BBA 91 CF 26         [ 5] 2166         ldw [YTEMP],y ;  a!
      000BBD 90 85            [ 2] 2167         popw y    ;drop local var
      000BBF 1C 00 04         [ 2] 2168         addw x,#4 ; DDROP 
      000BC2 81               [ 4] 2169         ret 
                                   2170 
                                   2171 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2172 ;       2!      ( d a -- )
                                   2173 ;       Store  double integer 
                                   2174 ;       to address a.
                                   2175 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BC3                       2176         _HEADER DSTOR,2,"2!"
      000BC3 0B A4                    1         .word LINK 
                           000BC5     2         LINK=.
      000BC5 02                       3         .byte 2  
      000BC6 32 21                    4         .ascii "2!"
      000BC8                          5         DSTOR:
      000BC8 90 93            [ 1] 2177         LDW Y,X 
      000BCA 89               [ 2] 2178         PUSHW X 
      000BCB FE               [ 2] 2179         LDW X,(X) ; a 
      000BCC 90 EE 02         [ 2] 2180         LDW Y,(2,Y) ; dhi 
      000BCF FF               [ 2] 2181         LDW (X),Y 
      000BD0 16 01            [ 2] 2182         LDW Y,(1,SP)  
      000BD2 90 EE 04         [ 2] 2183         LDW Y,(4,Y) ; dlo 
      000BD5 EF 02            [ 2] 2184         LDW (2,X),Y  
      000BD7 85               [ 2] 2185         POPW X 
      000BD8 1C 00 06         [ 2] 2186         ADDW X,#3*CELLL 
      000BDB 81               [ 4] 2187         RET 
                                   2188 
                                   2189 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2190 ;       2@      ( a -- d )
                                   2191 ;       Fetch double integer 
                                   2192 ;       from address a.
                                   2193 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BDC                       2194         _HEADER DAT,2,"2@"
      000BDC 0B C5                    1         .word LINK 
                           000BDE     2         LINK=.
      000BDE 02                       3         .byte 2  
      000BDF 32 40                    4         .ascii "2@"
      000BE1                          5         DAT:
      000BE1 90 93            [ 1] 2195         ldw y,x 
      000BE3 1D 00 02         [ 2] 2196         subw x,#CELLL 
      000BE6 90 FE            [ 2] 2197         ldw y,(y) ;address 
      000BE8 90 89            [ 2] 2198         pushw y  
      000BEA 90 FE            [ 2] 2199         ldw y,(y) ; dhi 
      000BEC FF               [ 2] 2200         ldw (x),y 
      000BED 90 85            [ 2] 2201         popw y 
      000BEF 90 EE 02         [ 2] 2202         ldw y,(2,y) ; dlo 
      000BF2 EF 02            [ 2] 2203         ldw (2,x),y 
      000BF4 81               [ 4] 2204         ret 
                                   2205 
                                   2206 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2207 ;       COUNT   ( b -- b +n )
                                   2208 ;       Return count byte of a string
                                   2209 ;       and add 1 to byte address.
                                   2210 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000BF5                       2211         _HEADER COUNT,5,"COUNT"
      000BF5 0B DE                    1         .word LINK 
                           000BF7     2         LINK=.
      000BF7 05                       3         .byte 5  
      000BF8 43 4F 55 4E 54           4         .ascii "COUNT"
      000BFD                          5         COUNT:
      000BFD 90 93            [ 1] 2212         ldw y,x 
      000BFF 90 FE            [ 2] 2213         ldw y,(y) ; address 
      000C01 90 F6            [ 1] 2214         ld a,(y)  ; count 
      000C03 90 5C            [ 1] 2215         incw y 
      000C05 FF               [ 2] 2216         ldw (x),y 
      000C06 1D 00 02         [ 2] 2217         subw x,#CELLL 
      000C09 E7 01            [ 1] 2218         ld (1,x),a 
      000C0B 7F               [ 1] 2219         clr (x)
      000C0C 81               [ 4] 2220         ret 
                                   2221 
                                   2222 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2223 ;       HERE    ( -- a )
                                   2224 ;       Return  top of  variables
                                   2225 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C0D                       2226         _HEADER HERE,4,"HERE"
      000C0D 0B F7                    1         .word LINK 
                           000C0F     2         LINK=.
      000C0F 04                       3         .byte 4  
      000C10 48 45 52 45              4         .ascii "HERE"
      000C14                          5         HERE:
      000C14 90 AE 00 18      [ 2] 2227       	ldw y,#UVP 
      000C18 90 FE            [ 2] 2228         ldw y,(y)
      000C1A 1D 00 02         [ 2] 2229         subw x,#CELLL 
      000C1D FF               [ 2] 2230         ldw (x),y 
      000C1E 81               [ 4] 2231         ret 
                                   2232 
                                   2233 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2234 ;       PAD     ( -- a )
                                   2235 ;       Return address of text buffer
                                   2236 ;       above  code dictionary.
                                   2237 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C1F                       2238         _HEADER PAD,3,"PAD"
      000C1F 0C 0F                    1         .word LINK 
                           000C21     2         LINK=.
      000C21 03                       3         .byte 3  
      000C22 50 41 44                 4         .ascii "PAD"
      000C25                          5         PAD:
      000C25 CD 0C 14         [ 4] 2239         CALL     HERE
      000C28                       2240         _DOLIT   80
      000C28 CD 04 6F         [ 4]    1     CALL DOLIT 
      000C2B 00 50                    2     .word 80 
      000C2D CC 07 AD         [ 2] 2241         JP     PLUS
                                   2242 
                                   2243 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2244 ;       TIB     ( -- a )
                                   2245 ;       Return address of 
                                   2246 ;       terminal input buffer.
                                   2247 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C30                       2248         _HEADER TIB,3,"TIB"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000C30 0C 21                    1         .word LINK 
                           000C32     2         LINK=.
      000C32 03                       3         .byte 3  
      000C33 54 49 42                 4         .ascii "TIB"
      000C36                          5         TIB:
      000C36 CD 06 7C         [ 4] 2249         CALL     NTIB
      000C39 CD 0A A0         [ 4] 2250         CALL     CELLP
      000C3C CC 04 E3         [ 2] 2251         JP     AT
                                   2252 
                                   2253 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2254 ;       @EXECUTE        ( a -- )
                                   2255 ;       Execute vector stored in 
                                   2256 ;       address a.
                                   2257 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C3F                       2258         _HEADER ATEXE,8,"@EXECUTE"
      000C3F 0C 32                    1         .word LINK 
                           000C41     2         LINK=.
      000C41 08                       3         .byte 8  
      000C42 40 45 58 45 43 55 54     4         .ascii "@EXECUTE"
             45
      000C4A                          5         ATEXE:
      000C4A CD 04 E3         [ 4] 2259         CALL     AT
      000C4D CD 07 3B         [ 4] 2260         CALL     QDUP    ;?address or zero
      000C50 CD 04 98         [ 4] 2261         CALL     QBRAN
      000C53 0C 58                 2262         .word      EXE1
      000C55 CD 04 C4         [ 4] 2263         CALL     EXECU   ;execute if non-zero
      000C58 81               [ 4] 2264 EXE1:   RET     ;do nothing if zero
                                   2265 
                                   2266 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2267 ;       CMOVE   ( b1 b2 u -- )
                                   2268 ;       Copy u bytes from b1 to b2.
                                   2269 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C59                       2270         _HEADER CMOVE,5,"CMOVE"
      000C59 0C 41                    1         .word LINK 
                           000C5B     2         LINK=.
      000C5B 05                       3         .byte 5  
      000C5C 43 4D 4F 56 45           4         .ascii "CMOVE"
      000C61                          5         CMOVE:
      000C61 CD 05 51         [ 4] 2271         CALL	TOR
      000C64 CD 04 B4         [ 4] 2272         CALL	BRAN
      000C67 0C 81                 2273         .word	CMOV2
      000C69 CD 05 51         [ 4] 2274 CMOV1:	CALL	TOR
      000C6C CD 05 88         [ 4] 2275         CALL	DUPP
      000C6F CD 05 01         [ 4] 2276         CALL	CAT
      000C72 CD 05 45         [ 4] 2277         CALL	RAT
      000C75 CD 04 F0         [ 4] 2278         CALL	CSTOR
      000C78 CD 0A CB         [ 4] 2279         CALL	ONEP
      000C7B CD 05 34         [ 4] 2280         CALL	RFROM
      000C7E CD 0A CB         [ 4] 2281         CALL	ONEP
      000C81 CD 04 83         [ 4] 2282 CMOV2:	CALL	DONXT
      000C84 0C 69                 2283         .word	CMOV1
      000C86 CC 07 8D         [ 2] 2284         JP	DDROP
                                   2285 
                                   2286 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2287 ;       FILL    ( b u c -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                                   2288 ;       Fill u bytes of character c
                                   2289 ;       to area beginning at b.
                                   2290 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C89                       2291         _HEADER FILL,4,"FILL"
      000C89 0C 5B                    1         .word LINK 
                           000C8B     2         LINK=.
      000C8B 04                       3         .byte 4  
      000C8C 46 49 4C 4C              4         .ascii "FILL"
      000C90                          5         FILL:
      000C90 90 93            [ 1] 2292         ldw y,x 
      000C92 90 E6 01         [ 1] 2293         ld a,(1,y) ; c 
      000C95 1C 00 02         [ 2] 2294         addw x,#CELLL ; drop c 
      000C98 90 93            [ 1] 2295         ldw y,x 
      000C9A 90 FE            [ 2] 2296         ldw y,(y) ; count
      000C9C 90 89            [ 2] 2297         pushw y 
      000C9E 1C 00 02         [ 2] 2298         addw x,#CELLL ; drop u 
      000CA1 90 93            [ 1] 2299         ldw y,x 
      000CA3 1C 00 02         [ 2] 2300         addw x,#CELLL ; drop b 
      000CA6 90 FE            [ 2] 2301         ldw y,(y) ; address
      000CA8 90 BF 26         [ 2] 2302         ldw YTEMP,y
      000CAB 90 85            [ 2] 2303         popw y ; count 
      000CAD                       2304 FILL1:  
      000CAD 92 C7 26         [ 4] 2305         ld [YTEMP],a 
      000CB0 3C 27            [ 1] 2306         inc YTEMP+1
      000CB2 24 02            [ 1] 2307         jrnc FILL2 
      000CB4 3C 26            [ 1] 2308         inc YTEMP
      000CB6                       2309 FILL2: 
      000CB6 90 5A            [ 2] 2310         decw y ; count 
      000CB8 26 F3            [ 1] 2311         jrne FILL1  
      000CBA 81               [ 4] 2312         ret 
                                   2313 
                                   2314 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2315 ;       ERASE   ( b u -- )
                                   2316 ;       Erase u bytes beginning at b.
                                   2317 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CBB                       2318         _HEADER ERASE,5,"ERASE"
      000CBB 0C 8B                    1         .word LINK 
                           000CBD     2         LINK=.
      000CBD 05                       3         .byte 5  
      000CBE 45 52 41 53 45           4         .ascii "ERASE"
      000CC3                          5         ERASE:
      000CC3 90 5F            [ 1] 2319         clrw y 
      000CC5 1D 00 02         [ 2] 2320         subw x,#CELLL 
      000CC8 FF               [ 2] 2321         ldw (x),y 
      000CC9 CC 0C 90         [ 2] 2322         jp FILL 
                                   2323 
                                   2324 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2325 ;       PACK0   ( b u a -- a )
                                   2326 ;       Build a counted string with
                                   2327 ;       u characters from b. Null fill.
                                   2328 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CCC                       2329         _HEADER PACKS,5,"PACK0"
      000CCC 0C BD                    1         .word LINK 
                           000CCE     2         LINK=.
      000CCE 05                       3         .byte 5  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000CCF 50 41 43 4B 30           4         .ascii "PACK0"
      000CD4                          5         PACKS:
      000CD4 CD 05 88         [ 4] 2330         CALL     DUPP
      000CD7 CD 05 51         [ 4] 2331         CALL     TOR     ;strings only on cell boundary
      000CDA CD 07 98         [ 4] 2332         CALL     DDUP
      000CDD CD 04 F0         [ 4] 2333         CALL     CSTOR
      000CE0 CD 0A CB         [ 4] 2334         CALL     ONEP ;save count
      000CE3 CD 05 98         [ 4] 2335         CALL     SWAPP
      000CE6 CD 0C 61         [ 4] 2336         CALL     CMOVE
      000CE9 CD 05 34         [ 4] 2337         CALL     RFROM
      000CEC 81               [ 4] 2338         RET
                                   2339 
                                   2340 ;; Numeric output, single precision
                                   2341 
                                   2342 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2343 ;       DIGIT   ( u -- c )
                                   2344 ;       Convert digit u to a character.
                                   2345 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CED                       2346         _HEADER DIGIT,5,"DIGIT"
      000CED 0C CE                    1         .word LINK 
                           000CEF     2         LINK=.
      000CEF 05                       3         .byte 5  
      000CF0 44 49 47 49 54           4         .ascii "DIGIT"
      000CF5                          5         DIGIT:
      000CF5 CD 04 6F         [ 4] 2347         CALL	DOLIT
      000CF8 00 09                 2348         .word	9
      000CFA CD 05 B0         [ 4] 2349         CALL	OVER
      000CFD CD 08 8B         [ 4] 2350         CALL	LESS
      000D00 CD 04 6F         [ 4] 2351         CALL	DOLIT
      000D03 00 07                 2352         .word	7
      000D05 CD 05 E5         [ 4] 2353         CALL	ANDD
      000D08 CD 07 AD         [ 4] 2354         CALL	PLUS
      000D0B CD 04 6F         [ 4] 2355         CALL	DOLIT
      000D0E 00 30                 2356         .word	48	;'0'
      000D10 CC 07 AD         [ 2] 2357         JP	PLUS
                                   2358 
                                   2359 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2360 ;       EXTRACT ( n base -- n c )
                                   2361 ;       Extract least significant 
                                   2362 ;       digit from n.
                                   2363 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D13                       2364         _HEADER EXTRC,7,"EXTRACT"
      000D13 0C EF                    1         .word LINK 
                           000D15     2         LINK=.
      000D15 07                       3         .byte 7  
      000D16 45 58 54 52 41 43 54     4         .ascii "EXTRACT"
      000D1D                          5         EXTRC:
      000D1D CD 0B 37         [ 4] 2365         CALL     ZERO
      000D20 CD 05 98         [ 4] 2366         CALL     SWAPP
      000D23 CD 09 41         [ 4] 2367         CALL     UMMOD
      000D26 CD 05 98         [ 4] 2368         CALL     SWAPP
      000D29 CC 0C F5         [ 2] 2369         JP     DIGIT
                                   2370 
                                   2371 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2372 ;       <#      ( -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



                                   2373 ;       Initiate  numeric 
                                   2374 ;       output process.
                                   2375 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D2C                       2376         _HEADER BDIGS,2,"#<"
      000D2C 0D 15                    1         .word LINK 
                           000D2E     2         LINK=.
      000D2E 02                       3         .byte 2  
      000D2F 23 3C                    4         .ascii "#<"
      000D31                          5         BDIGS:
      000D31 CD 0C 25         [ 4] 2377         CALL     PAD
      000D34 CD 06 BE         [ 4] 2378         CALL     HLD
      000D37 CC 04 D1         [ 2] 2379         JP     STORE
                                   2380 
                                   2381 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2382 ;       HOLD    ( c -- )
                                   2383 ;       Insert a character 
                                   2384 ;       into output string.
                                   2385 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D3A                       2386         _HEADER HOLD,4,"HOLD"
      000D3A 0D 2E                    1         .word LINK 
                           000D3C     2         LINK=.
      000D3C 04                       3         .byte 4  
      000D3D 48 4F 4C 44              4         .ascii "HOLD"
      000D41                          5         HOLD:
      000D41 CD 06 BE         [ 4] 2387         CALL     HLD
      000D44 CD 04 E3         [ 4] 2388         CALL     AT
      000D47 CD 0A D8         [ 4] 2389         CALL     ONEM
      000D4A CD 05 88         [ 4] 2390         CALL     DUPP
      000D4D CD 06 BE         [ 4] 2391         CALL     HLD
      000D50 CD 04 D1         [ 4] 2392         CALL     STORE
      000D53 CC 04 F0         [ 2] 2393         JP     CSTOR
                                   2394 
                                   2395 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2396 ;       #       ( u -- u )
                                   2397 ;       Extract one digit from u and
                                   2398 ;       append digit to output string.
                                   2399 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D56                       2400         _HEADER DIG,1,"#"
      000D56 0D 3C                    1         .word LINK 
                           000D58     2         LINK=.
      000D58 01                       3         .byte 1  
      000D59 23                       4         .ascii "#"
      000D5A                          5         DIG:
      000D5A CD 06 4E         [ 4] 2401         CALL     BASE
      000D5D CD 04 E3         [ 4] 2402         CALL     AT
      000D60 CD 0D 1D         [ 4] 2403         CALL     EXTRC
      000D63 CC 0D 41         [ 2] 2404         JP     HOLD
                                   2405 
                                   2406 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2407 ;       #S      ( u -- 0 )
                                   2408 ;       Convert u until all digits
                                   2409 ;       are added to output string.
                                   2410 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D66                       2411         _HEADER DIGS,2,"#S"
      000D66 0D 58                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



                           000D68     2         LINK=.
      000D68 02                       3         .byte 2  
      000D69 23 53                    4         .ascii "#S"
      000D6B                          5         DIGS:
      000D6B CD 0D 5A         [ 4] 2412 DIGS1:  CALL     DIG
      000D6E CD 05 88         [ 4] 2413         CALL     DUPP
      000D71 CD 04 98         [ 4] 2414         CALL     QBRAN
      000D74 0D 78                 2415         .word      DIGS2
      000D76 20 F3            [ 2] 2416         JRA     DIGS1
      000D78 81               [ 4] 2417 DIGS2:  RET
                                   2418 
                                   2419 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2420 ;       SIGN    ( n -- )
                                   2421 ;       Add a minus sign to
                                   2422 ;       numeric output string.
                                   2423 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D79                       2424         _HEADER SIGN,4,"SIGN"
      000D79 0D 68                    1         .word LINK 
                           000D7B     2         LINK=.
      000D7B 04                       3         .byte 4  
      000D7C 53 49 47 4E              4         .ascii "SIGN"
      000D80                          5         SIGN:
      000D80 CD 05 BF         [ 4] 2425         CALL     ZLESS
      000D83 CD 04 98         [ 4] 2426         CALL     QBRAN
      000D86 0D 90                 2427         .word      SIGN1
      000D88 CD 04 6F         [ 4] 2428         CALL     DOLIT
      000D8B 00 2D                 2429         .word      45	;"-"
      000D8D CC 0D 41         [ 2] 2430         JP     HOLD
      000D90 81               [ 4] 2431 SIGN1:  RET
                                   2432 
                                   2433 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2434 ;       #>      ( w -- b u )
                                   2435 ;       Prepare output string.
                                   2436 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D91                       2437         _HEADER EDIGS,2,"#>"
      000D91 0D 7B                    1         .word LINK 
                           000D93     2         LINK=.
      000D93 02                       3         .byte 2  
      000D94 23 3E                    4         .ascii "#>"
      000D96                          5         EDIGS:
      000D96 CD 05 7E         [ 4] 2438         CALL     DROP
      000D99 CD 06 BE         [ 4] 2439         CALL     HLD
      000D9C CD 04 E3         [ 4] 2440         CALL     AT
      000D9F CD 0C 25         [ 4] 2441         CALL     PAD
      000DA2 CD 05 B0         [ 4] 2442         CALL     OVER
      000DA5 CC 08 26         [ 2] 2443         JP     SUBB
                                   2444 
                                   2445 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2446 ;       str     ( w -- b u )
                                   2447 ;       Convert a signed integer
                                   2448 ;       to a numeric string.
                                   2449 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DA8                       2450         _HEADER STR,3,"STR"
      000DA8 0D 93                    1         .word LINK 
                           000DAA     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      000DAA 03                       3         .byte 3  
      000DAB 53 54 52                 4         .ascii "STR"
      000DAE                          5         STR:
      000DAE CD 05 88         [ 4] 2451         CALL     DUPP
      000DB1 CD 05 51         [ 4] 2452         CALL     TOR
      000DB4 CD 08 40         [ 4] 2453         CALL     ABSS
      000DB7 CD 0D 31         [ 4] 2454         CALL     BDIGS
      000DBA CD 0D 6B         [ 4] 2455         CALL     DIGS
      000DBD CD 05 34         [ 4] 2456         CALL     RFROM
      000DC0 CD 0D 80         [ 4] 2457         CALL     SIGN
      000DC3 CC 0D 96         [ 2] 2458         JP     EDIGS
                                   2459 
                                   2460 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2461 ;       HEX     ( -- )
                                   2462 ;       Use radix 16 as base for
                                   2463 ;       numeric conversions.
                                   2464 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DC6                       2465         _HEADER HEX,3,"HEX"
      000DC6 0D AA                    1         .word LINK 
                           000DC8     2         LINK=.
      000DC8 03                       3         .byte 3  
      000DC9 48 45 58                 4         .ascii "HEX"
      000DCC                          5         HEX:
      000DCC CD 04 6F         [ 4] 2466         CALL     DOLIT
      000DCF 00 10                 2467         .word      16
      000DD1 CD 06 4E         [ 4] 2468         CALL     BASE
      000DD4 CC 04 D1         [ 2] 2469         JP     STORE
                                   2470 
                                   2471 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2472 ;       DECIMAL ( -- )
                                   2473 ;       Use radix 10 as base
                                   2474 ;       for numeric conversions.
                                   2475 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DD7                       2476         _HEADER DECIM,7,"DECIMAL"
      000DD7 0D C8                    1         .word LINK 
                           000DD9     2         LINK=.
      000DD9 07                       3         .byte 7  
      000DDA 44 45 43 49 4D 41 4C     4         .ascii "DECIMAL"
      000DE1                          5         DECIM:
      000DE1 CD 04 6F         [ 4] 2477         CALL     DOLIT
      000DE4 00 0A                 2478         .word      10
      000DE6 CD 06 4E         [ 4] 2479         CALL     BASE
      000DE9 CC 04 D1         [ 2] 2480         JP     STORE
                                   2481 
                                   2482 ;; Numeric input, single precision
                                   2483 
                                   2484 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2485 ;       DIGIT?  ( c base -- u t )
                                   2486 ;       Convert a character to its numeric
                                   2487 ;       value. A flag indicates success.
                                   2488 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DEC                       2489         _HEADER DIGTQ,6,"DIGIT?"
      000DEC 0D D9                    1         .word LINK 
                           000DEE     2         LINK=.
      000DEE 06                       3         .byte 6  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      000DEF 44 49 47 49 54 3F        4         .ascii "DIGIT?"
      000DF5                          5         DIGTQ:
      000DF5 CD 05 51         [ 4] 2490         CALL     TOR
      000DF8 CD 04 6F         [ 4] 2491         CALL     DOLIT
      000DFB 00 30                 2492         .word     48	; "0"
      000DFD CD 08 26         [ 4] 2493         CALL     SUBB
      000E00 CD 04 6F         [ 4] 2494         CALL     DOLIT
      000E03 00 09                 2495         .word      9
      000E05 CD 05 B0         [ 4] 2496         CALL     OVER
      000E08 CD 08 8B         [ 4] 2497         CALL     LESS
      000E0B CD 04 98         [ 4] 2498         CALL     QBRAN
      000E0E 0E 26                 2499         .word      DGTQ1
      000E10 CD 04 6F         [ 4] 2500         CALL     DOLIT
      000E13 00 07                 2501         .word      7
      000E15 CD 08 26         [ 4] 2502         CALL     SUBB
      000E18 CD 05 88         [ 4] 2503         CALL     DUPP
      000E1B CD 04 6F         [ 4] 2504         CALL     DOLIT
      000E1E 00 0A                 2505         .word      10
      000E20 CD 08 8B         [ 4] 2506         CALL     LESS
      000E23 CD 05 F9         [ 4] 2507         CALL     ORR
      000E26 CD 05 88         [ 4] 2508 DGTQ1:  CALL     DUPP
      000E29 CD 05 34         [ 4] 2509         CALL     RFROM
      000E2C CC 08 6D         [ 2] 2510         JP     ULESS
                                   2511 
                           000001  2512 .if  WANT_DOUBLE
                           000000  2513 .else 
                                   2514 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2515 ;       NUMBER? ( a -- n T | a F )
                                   2516 ;       Convert a number string to
                                   2517 ;       integer. Push a flag on tos.
                                   2518 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2519         _HEADER NUMBQ,7,"NUMBER?"
                                   2520         CALL     BASE
                                   2521         CALL     AT
                                   2522         CALL     TOR
                                   2523         CALL     ZERO
                                   2524         CALL     OVER
                                   2525         CALL     COUNT
                                   2526         CALL     OVER
                                   2527         CALL     CAT
                                   2528         CALL     DOLIT
                                   2529         .word     36	; "0x"
                                   2530         CALL     EQUAL
                                   2531         CALL     QBRAN
                                   2532         .word      NUMQ1
                                   2533         CALL     HEX
                                   2534         CALL     SWAPP
                                   2535         CALL     ONEP
                                   2536         CALL     SWAPP
                                   2537         CALL     ONEM
                                   2538 NUMQ1:  CALL     OVER
                                   2539         CALL     CAT
                                   2540         CALL     DOLIT
                                   2541         .word     45	; "-"
                                   2542         CALL     EQUAL
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                                   2543         CALL     TOR
                                   2544         CALL     SWAPP
                                   2545         CALL     RAT
                                   2546         CALL     SUBB
                                   2547         CALL     SWAPP
                                   2548         CALL     RAT
                                   2549         CALL     PLUS
                                   2550         CALL     QDUP
                                   2551         CALL     QBRAN
                                   2552         .word      NUMQ6
                                   2553         CALL     ONEM
                                   2554         CALL     TOR
                                   2555 NUMQ2:  CALL     DUPP
                                   2556         CALL     TOR
                                   2557         CALL     CAT
                                   2558         CALL     BASE
                                   2559         CALL     AT
                                   2560         CALL     DIGTQ
                                   2561         CALL     QBRAN
                                   2562         .word      NUMQ4
                                   2563         CALL     SWAPP
                                   2564         CALL     BASE
                                   2565         CALL     AT
                                   2566         CALL     STAR
                                   2567         CALL     PLUS
                                   2568         CALL     RFROM
                                   2569         CALL     ONEP
                                   2570         CALL     DONXT
                                   2571         .word      NUMQ2
                                   2572         CALL     RAT
                                   2573         CALL     SWAPP
                                   2574         CALL     DROP
                                   2575         CALL     QBRAN
                                   2576         .word      NUMQ3
                                   2577         CALL     NEGAT
                                   2578 NUMQ3:  CALL     SWAPP
                                   2579         JRA     NUMQ5
                                   2580 NUMQ4:  CALL     RFROM
                                   2581         CALL     RFROM
                                   2582         CALL     DDROP
                                   2583         CALL     DDROP
                                   2584         CALL     ZERO
                                   2585 NUMQ5:  CALL     DUPP
                                   2586 NUMQ6:  CALL     RFROM
                                   2587         CALL     DDROP
                                   2588         CALL     RFROM
                                   2589         CALL     BASE
                                   2590         JP     STORE
                                   2591 .endif ; WANT_DOUBLE  
                                   2592 
                                   2593 ;; Basic I/O
                                   2594 
                                   2595 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2596 ;       KEY     ( -- c )
                                   2597 ;       Wait for and return an
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                   2598 ;       input character.
                                   2599 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E2F                       2600         _HEADER KEY,3,"KEY"
      000E2F 0D EE                    1         .word LINK 
                           000E31     2         LINK=.
      000E31 03                       3         .byte 3  
      000E32 4B 45 59                 4         .ascii "KEY"
      000E35                          5         KEY:
      000E35 72 0B 52 30 FB   [ 2] 2601         btjf UART_SR,#UART_SR_RXNE,. 
      000E3A C6 52 31         [ 1] 2602         ld a,UART_DR 
      000E3D 1D 00 02         [ 2] 2603         subw x,#CELLL 
      000E40 E7 01            [ 1] 2604         ld (1,x),a 
      000E42 7F               [ 1] 2605         clr (x)
      000E43 81               [ 4] 2606         ret 
                                   2607 
                                   2608 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2609 ;       NUF?    ( -- t )
                                   2610 ;       Return false if no input,
                                   2611 ;       else pause and if CR return true.
                                   2612 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E44                       2613         _HEADER NUFQ,4,"NUF?"
      000E44 0E 31                    1         .word LINK 
                           000E46     2         LINK=.
      000E46 04                       3         .byte 4  
      000E47 4E 55 46 3F              4         .ascii "NUF?"
      000E4B                          5         NUFQ:
      000E4B CD 04 18         [ 4] 2614         CALL     QKEY
      000E4E CD 05 88         [ 4] 2615         CALL     DUPP
      000E51 CD 04 98         [ 4] 2616         CALL     QBRAN
      000E54 0E 64                 2617         .word    NUFQ1
      000E56 CD 07 8D         [ 4] 2618         CALL     DDROP
      000E59 CD 0E 35         [ 4] 2619         CALL     KEY
      000E5C CD 04 6F         [ 4] 2620         CALL     DOLIT
      000E5F 00 0D                 2621         .word      CRR
      000E61 CC 08 4E         [ 2] 2622         JP     EQUAL
      000E64 81               [ 4] 2623 NUFQ1:  RET
                                   2624 
                                   2625 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2626 ;       SPACE   ( -- )
                                   2627 ;       Send  blank character to
                                   2628 ;       output device.
                                   2629 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E65                       2630         _HEADER SPACE,5,"SPACE"
      000E65 0E 46                    1         .word LINK 
                           000E67     2         LINK=.
      000E67 05                       3         .byte 5  
      000E68 53 50 41 43 45           4         .ascii "SPACE"
      000E6D                          5         SPACE:
      000E6D CD 0B 2A         [ 4] 2631         CALL     BLANK
      000E70 CC 04 36         [ 2] 2632         JP     EMIT
                                   2633 
                                   2634 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2635 ;       SPACES  ( +n -- )
                                   2636 ;       Send n spaces to output device.
                                   2637 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      000E73                       2638         _HEADER SPACS,6,"SPACES"
      000E73 0E 67                    1         .word LINK 
                           000E75     2         LINK=.
      000E75 06                       3         .byte 6  
      000E76 53 50 41 43 45 53        4         .ascii "SPACES"
      000E7C                          5         SPACS:
      000E7C CD 0B 37         [ 4] 2639         CALL     ZERO
      000E7F CD 08 E9         [ 4] 2640         CALL     MAX
      000E82 CD 05 51         [ 4] 2641         CALL     TOR
      000E85 20 03            [ 2] 2642         JRA      CHAR2
      000E87 CD 0E 6D         [ 4] 2643 CHAR1:  CALL     SPACE
      000E8A CD 04 83         [ 4] 2644 CHAR2:  CALL     DONXT
      000E8D 0E 87                 2645         .word    CHAR1
      000E8F 81               [ 4] 2646         RET
                                   2647 
                                   2648 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2649 ;       TYPE    ( b u -- )
                                   2650 ;       Output u characters from b.
                                   2651 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E90                       2652         _HEADER TYPES,4,"TYPE"
      000E90 0E 75                    1         .word LINK 
                           000E92     2         LINK=.
      000E92 04                       3         .byte 4  
      000E93 54 59 50 45              4         .ascii "TYPE"
      000E97                          5         TYPES:
      000E97 CD 05 51         [ 4] 2653         CALL     TOR
      000E9A 20 06            [ 2] 2654         JRA     TYPE2
      000E9C CD 0B FD         [ 4] 2655 TYPE1:  CALL     COUNT 
      000E9F CD 04 36         [ 4] 2656         CALL     EMIT
      000EA2                       2657 TYPE2:  _DONXT  TYPE1
      000EA2 CD 04 83         [ 4]    1     CALL DONXT 
      000EA5 0E 9C                    2     .word TYPE1 
      000EA7 CC 05 7E         [ 2] 2658         JP     DROP
                                   2659 
                                   2660 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2661 ;       CR      ( -- )
                                   2662 ;       Output a carriage return
                                   2663 ;       and a line feed.
                                   2664 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000EAA                       2665         _HEADER CR,2,"CR"
      000EAA 0E 92                    1         .word LINK 
                           000EAC     2         LINK=.
      000EAC 02                       3         .byte 2  
      000EAD 43 52                    4         .ascii "CR"
      000EAF                          5         CR:
      000EAF                       2666         _DOLIT  CRR 
      000EAF CD 04 6F         [ 4]    1     CALL DOLIT 
      000EB2 00 0D                    2     .word CRR 
      000EB4 CD 04 36         [ 4] 2667         CALL    EMIT
      000EB7                       2668         _DOLIT  LF
      000EB7 CD 04 6F         [ 4]    1     CALL DOLIT 
      000EBA 00 0A                    2     .word LF 
      000EBC CC 04 36         [ 2] 2669         JP      EMIT
                                   2670 
                                   2671 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



                                   2672 ;       do$     ( -- a )
                                   2673 ;       Return  address of a compiled
                                   2674 ;       string.
                                   2675 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2676 ;       _HEADER DOSTR,COMPO+3,"DO$"
      000EBF                       2677 DOSTR:
      000EBF CD 05 34         [ 4] 2678         CALL     RFROM
      000EC2 CD 05 45         [ 4] 2679         CALL     RAT
      000EC5 CD 05 34         [ 4] 2680         CALL     RFROM
      000EC8 CD 0B FD         [ 4] 2681         CALL     COUNT
      000ECB CD 07 AD         [ 4] 2682         CALL     PLUS
      000ECE CD 05 51         [ 4] 2683         CALL     TOR
      000ED1 CD 05 98         [ 4] 2684         CALL     SWAPP
      000ED4 CD 05 51         [ 4] 2685         CALL     TOR
      000ED7 81               [ 4] 2686         RET
                                   2687 
                                   2688 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2689 ;       $"|     ( -- a )
                                   2690 ;       Run time routine compiled by $".
                                   2691 ;       Return address of a compiled string.
                                   2692 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2693 ;       _HEADER STRQP,COMPO+3,"$\"|"
      000ED8                       2694 STRQP:
      000ED8 CD 0E BF         [ 4] 2695         CALL     DOSTR
      000EDB 81               [ 4] 2696         RET
                                   2697 
                                   2698 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2699 ;       ."|     ( -- )
                                   2700 ;       Run time routine of ." .
                                   2701 ;       Output a compiled string.
                                   2702 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2703 ;       _HEADER DOTQP,COMPO+3,".\"|"
      000EDC                       2704 DOTQP:
      000EDC CD 0E BF         [ 4] 2705         CALL     DOSTR
      000EDF CD 0B FD         [ 4] 2706         CALL     COUNT
      000EE2 CC 0E 97         [ 2] 2707         JP     TYPES
                                   2708 
                                   2709 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2710 ;       .R      ( n +n -- )
                                   2711 ;       Display an integer in a field
                                   2712 ;       of n columns, right justified.
                                   2713 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000EE5                       2714         _HEADER DOTR,2,".R"
      000EE5 0E AC                    1         .word LINK 
                           000EE7     2         LINK=.
      000EE7 02                       3         .byte 2  
      000EE8 2E 52                    4         .ascii ".R"
      000EEA                          5         DOTR:
      000EEA CD 05 51         [ 4] 2715         CALL     TOR
      000EED CD 0D AE         [ 4] 2716         CALL     STR
      000EF0 CD 05 34         [ 4] 2717         CALL     RFROM
      000EF3 CD 05 B0         [ 4] 2718         CALL     OVER
      000EF6 CD 08 26         [ 4] 2719         CALL     SUBB
      000EF9 CD 0E 7C         [ 4] 2720         CALL     SPACS
      000EFC CC 0E 97         [ 2] 2721         JP     TYPES
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                   2722 
                                   2723 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2724 ;       U.R     ( u +n -- )
                                   2725 ;       Display an unsigned integer
                                   2726 ;       in n column, right justified.
                                   2727 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000EFF                       2728         _HEADER UDOTR,3,"U.R"
      000EFF 0E E7                    1         .word LINK 
                           000F01     2         LINK=.
      000F01 03                       3         .byte 3  
      000F02 55 2E 52                 4         .ascii "U.R"
      000F05                          5         UDOTR:
      000F05 CD 05 51         [ 4] 2729         CALL     TOR
      000F08 CD 0D 31         [ 4] 2730         CALL     BDIGS
      000F0B CD 0D 6B         [ 4] 2731         CALL     DIGS
      000F0E CD 0D 96         [ 4] 2732         CALL     EDIGS
      000F11 CD 05 34         [ 4] 2733         CALL     RFROM
      000F14 CD 05 B0         [ 4] 2734         CALL     OVER
      000F17 CD 08 26         [ 4] 2735         CALL     SUBB
      000F1A CD 0E 7C         [ 4] 2736         CALL     SPACS
      000F1D CC 0E 97         [ 2] 2737         JP     TYPES
                                   2738 
                                   2739 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2740 ;       U.      ( u -- )
                                   2741 ;       Display an unsigned integer
                                   2742 ;       in free format.
                                   2743 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F20                       2744         _HEADER UDOT,2,"U."
      000F20 0F 01                    1         .word LINK 
                           000F22     2         LINK=.
      000F22 02                       3         .byte 2  
      000F23 55 2E                    4         .ascii "U."
      000F25                          5         UDOT:
      000F25 CD 0D 31         [ 4] 2745         CALL     BDIGS
      000F28 CD 0D 6B         [ 4] 2746         CALL     DIGS
      000F2B CD 0D 96         [ 4] 2747         CALL     EDIGS
      000F2E CD 0E 6D         [ 4] 2748         CALL     SPACE
      000F31 CC 0E 97         [ 2] 2749         JP     TYPES
                                   2750 
                                   2751 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2752 ;   H. ( n -- )
                                   2753 ;   display n in hexadecimal 
                                   2754 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F34                       2755         _HEADER HDOT,2,"H."
      000F34 0F 22                    1         .word LINK 
                           000F36     2         LINK=.
      000F36 02                       3         .byte 2  
      000F37 48 2E                    4         .ascii "H."
      000F39                          5         HDOT:
      000F39 CD 06 4E         [ 4] 2756         CALL BASE 
      000F3C CD 04 E3         [ 4] 2757         CALL AT 
      000F3F CD 05 51         [ 4] 2758         CALL TOR 
      000F42 CD 0D CC         [ 4] 2759         CALL HEX 
      000F45 CD 0F 25         [ 4] 2760         CALL UDOT 
      000F48 CD 05 34         [ 4] 2761         CALL RFROM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      000F4B CD 06 4E         [ 4] 2762         CALL BASE 
      000F4E CD 04 D1         [ 4] 2763         CALL STORE 
      000F51 81               [ 4] 2764         RET 
                                   2765 
                                   2766 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2767 ;       .       ( w -- )
                                   2768 ;       Display an integer in free
                                   2769 ;       format, preceeded by a space.
                                   2770 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F52                       2771         _HEADER DOT,1,"."
      000F52 0F 36                    1         .word LINK 
                           000F54     2         LINK=.
      000F54 01                       3         .byte 1  
      000F55 2E                       4         .ascii "."
      000F56                          5         DOT:
      000F56 CD 06 4E         [ 4] 2772         CALL     BASE
      000F59 CD 04 E3         [ 4] 2773         CALL     AT
      000F5C CD 04 6F         [ 4] 2774         CALL     DOLIT
      000F5F 00 0A                 2775         .word      10
      000F61 CD 06 0E         [ 4] 2776         CALL     XORR    ;?decimal
      000F64 CD 04 98         [ 4] 2777         CALL     QBRAN
      000F67 0F 6C                 2778         .word      DOT1
      000F69 CC 0F 25         [ 2] 2779         JP     UDOT
      000F6C CD 0D AE         [ 4] 2780 DOT1:   CALL     STR
      000F6F CD 0E 6D         [ 4] 2781         CALL     SPACE
      000F72 CC 0E 97         [ 2] 2782         JP     TYPES
                                   2783 
                                   2784 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2785 ;       ?       ( a -- )
                                   2786 ;       Display contents in memory cell.
                                   2787 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F75                       2788         _HEADER QUEST,1,"?"
      000F75 0F 54                    1         .word LINK 
                           000F77     2         LINK=.
      000F77 01                       3         .byte 1  
      000F78 3F                       4         .ascii "?"
      000F79                          5         QUEST:
      000F79 CD 04 E3         [ 4] 2789         CALL     AT
      000F7C CC 0F 56         [ 2] 2790         JP     DOT
                                   2791 
                                   2792 ;; Parsing
                                   2793 
                                   2794 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2795 ;       parse   ( b u c -- b u delta ; <string> )
                                   2796 ;       Scan string delimited by c.
                                   2797 ;       Return found string and its offset.
                                   2798 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F7F                       2799         _HEADER PARS,5,"PARS$"
      000F7F 0F 77                    1         .word LINK 
                           000F81     2         LINK=.
      000F81 05                       3         .byte 5  
      000F82 50 41 52 53 24           4         .ascii "PARS$"
      000F87                          5         PARS:
      000F87 CD 06 5D         [ 4] 2800         CALL     TEMP
      000F8A CD 04 D1         [ 4] 2801         CALL     STORE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      000F8D CD 05 B0         [ 4] 2802         CALL     OVER
      000F90 CD 05 51         [ 4] 2803         CALL     TOR
      000F93 CD 05 88         [ 4] 2804         CALL     DUPP
      000F96 CD 04 98         [ 4] 2805         CALL     QBRAN
      000F99 10 3F                 2806         .word    PARS8
      000F9B CD 0A D8         [ 4] 2807         CALL     ONEM
      000F9E CD 06 5D         [ 4] 2808         CALL     TEMP
      000FA1 CD 04 E3         [ 4] 2809         CALL     AT
      000FA4 CD 0B 2A         [ 4] 2810         CALL     BLANK
      000FA7 CD 08 4E         [ 4] 2811         CALL     EQUAL
      000FAA CD 04 98         [ 4] 2812         CALL     QBRAN
      000FAD 0F E0                 2813         .word      PARS3
      000FAF CD 05 51         [ 4] 2814         CALL     TOR
      000FB2 CD 0B 2A         [ 4] 2815 PARS1:  CALL     BLANK
      000FB5 CD 05 B0         [ 4] 2816         CALL     OVER
      000FB8 CD 05 01         [ 4] 2817         CALL     CAT     ;skip leading blanks ONLY
      000FBB CD 08 26         [ 4] 2818         CALL     SUBB
      000FBE CD 05 BF         [ 4] 2819         CALL     ZLESS
      000FC1 CD 07 C7         [ 4] 2820         CALL     INVER
      000FC4 CD 04 98         [ 4] 2821         CALL     QBRAN
      000FC7 0F DD                 2822         .word      PARS2
      000FC9 CD 0A CB         [ 4] 2823         CALL     ONEP
      000FCC CD 04 83         [ 4] 2824         CALL     DONXT
      000FCF 0F B2                 2825         .word      PARS1
      000FD1 CD 05 34         [ 4] 2826         CALL     RFROM
      000FD4 CD 05 7E         [ 4] 2827         CALL     DROP
      000FD7 CD 0B 37         [ 4] 2828         CALL     ZERO
      000FDA CC 05 88         [ 2] 2829         JP     DUPP
      000FDD CD 05 34         [ 4] 2830 PARS2:  CALL     RFROM
      000FE0 CD 05 B0         [ 4] 2831 PARS3:  CALL     OVER
      000FE3 CD 05 98         [ 4] 2832         CALL     SWAPP
      000FE6 CD 05 51         [ 4] 2833         CALL     TOR
      000FE9 CD 06 5D         [ 4] 2834 PARS4:  CALL     TEMP
      000FEC CD 04 E3         [ 4] 2835         CALL     AT
      000FEF CD 05 B0         [ 4] 2836         CALL     OVER
      000FF2 CD 05 01         [ 4] 2837         CALL     CAT
      000FF5 CD 08 26         [ 4] 2838         CALL     SUBB    ;scan for delimiter
      000FF8 CD 06 5D         [ 4] 2839         CALL     TEMP
      000FFB CD 04 E3         [ 4] 2840         CALL     AT
      000FFE CD 0B 2A         [ 4] 2841         CALL     BLANK
      001001 CD 08 4E         [ 4] 2842         CALL     EQUAL
      001004 CD 04 98         [ 4] 2843         CALL     QBRAN
      001007 10 0C                 2844         .word      PARS5
      001009 CD 05 BF         [ 4] 2845         CALL     ZLESS
      00100C CD 04 98         [ 4] 2846 PARS5:  CALL     QBRAN
      00100F 10 21                 2847         .word      PARS6
      001011 CD 0A CB         [ 4] 2848         CALL     ONEP
      001014 CD 04 83         [ 4] 2849         CALL     DONXT
      001017 0F E9                 2850         .word      PARS4
      001019 CD 05 88         [ 4] 2851         CALL     DUPP
      00101C CD 05 51         [ 4] 2852         CALL     TOR
      00101F 20 0F            [ 2] 2853         JRA     PARS7
      001021 CD 05 34         [ 4] 2854 PARS6:  CALL     RFROM
      001024 CD 05 7E         [ 4] 2855         CALL     DROP
      001027 CD 05 88         [ 4] 2856         CALL     DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      00102A CD 0A CB         [ 4] 2857         CALL     ONEP
      00102D CD 05 51         [ 4] 2858         CALL     TOR
      001030 CD 05 B0         [ 4] 2859 PARS7:  CALL     OVER
      001033 CD 08 26         [ 4] 2860         CALL     SUBB
      001036 CD 05 34         [ 4] 2861         CALL     RFROM
      001039 CD 05 34         [ 4] 2862         CALL     RFROM
      00103C CC 08 26         [ 2] 2863         JP     SUBB
      00103F CD 05 B0         [ 4] 2864 PARS8:  CALL     OVER
      001042 CD 05 34         [ 4] 2865         CALL     RFROM
      001045 CC 08 26         [ 2] 2866         JP     SUBB
                                   2867 
                                   2868 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2869 ;       PARSE   ( c -- b u ; <string> )
                                   2870 ;       Scan input stream and return
                                   2871 ;       counted string delimited by c.
                                   2872 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001048                       2873         _HEADER PARSE,5,"PARSE"
      001048 0F 81                    1         .word LINK 
                           00104A     2         LINK=.
      00104A 05                       3         .byte 5  
      00104B 50 41 52 53 45           4         .ascii "PARSE"
      001050                          5         PARSE:
      001050 CD 05 51         [ 4] 2874         CALL     TOR
      001053 CD 0C 36         [ 4] 2875         CALL     TIB
      001056 CD 06 6C         [ 4] 2876         CALL     INN
      001059 CD 04 E3         [ 4] 2877         CALL     AT
      00105C CD 07 AD         [ 4] 2878         CALL     PLUS    ;current input buffer pointer
      00105F CD 06 7C         [ 4] 2879         CALL     NTIB
      001062 CD 04 E3         [ 4] 2880         CALL     AT
      001065 CD 06 6C         [ 4] 2881         CALL     INN
      001068 CD 04 E3         [ 4] 2882         CALL     AT
      00106B CD 08 26         [ 4] 2883         CALL     SUBB    ;remaining count
      00106E CD 05 34         [ 4] 2884         CALL     RFROM
      001071 CD 0F 87         [ 4] 2885         CALL     PARS
      001074 CD 06 6C         [ 4] 2886         CALL     INN
      001077 CC 0B A7         [ 2] 2887         JP     PSTOR
                                   2888 
                                   2889 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2890 ;       .(      ( -- )
                                   2891 ;       Output following string up to next ) .
                                   2892 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00107A                       2893         _HEADER DOTPR,IMEDD+2,".("
      00107A 10 4A                    1         .word LINK 
                           00107C     2         LINK=.
      00107C 82                       3         .byte IMEDD+2  
      00107D 2E 28                    4         .ascii ".("
      00107F                          5         DOTPR:
      00107F CD 04 6F         [ 4] 2894         CALL     DOLIT
      001082 00 29                 2895         .word     41	; ")"
      001084 CD 10 50         [ 4] 2896         CALL     PARSE
      001087 CC 0E 97         [ 2] 2897         JP     TYPES
                                   2898 
                                   2899 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2900 ;       (       ( -- )
                                   2901 ;       Ignore following string up to next ).
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                   2902 ;       A comment.
                                   2903 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00108A                       2904         _HEADER PAREN,IMEDD+1,"("
      00108A 10 7C                    1         .word LINK 
                           00108C     2         LINK=.
      00108C 81                       3         .byte IMEDD+1  
      00108D 28                       4         .ascii "("
      00108E                          5         PAREN:
      00108E CD 04 6F         [ 4] 2905         CALL     DOLIT
      001091 00 29                 2906         .word     41	; ")"
      001093 CD 10 50         [ 4] 2907         CALL     PARSE
      001096 CC 07 8D         [ 2] 2908         JP     DDROP
                                   2909 
                                   2910 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2911 ;       \       ( -- )
                                   2912 ;       Ignore following text till
                                   2913 ;       end of line.
                                   2914 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001099                       2915         _HEADER BKSLA,IMEDD+1,"\\"
      001099 10 8C                    1         .word LINK 
                           00109B     2         LINK=.
      00109B 81                       3         .byte IMEDD+1  
      00109C 5C 5C                    4         .ascii "\\"
      00109E                          5         BKSLA:
      00109E 90 AE 00 0E      [ 2] 2916         ldw y,#UCTIB ; #TIB  
      0010A2 90 FE            [ 2] 2917         ldw y,(y)
      0010A4 90 89            [ 2] 2918         pushw y ; count in TIB 
      0010A6 90 AE 00 0C      [ 2] 2919         ldw y,#UINN ; >IN 
      0010AA 90 BF 26         [ 2] 2920         ldw YTEMP,y
      0010AD 90 85            [ 2] 2921         popw y 
      0010AF 91 CF 26         [ 5] 2922         ldw [YTEMP],y
      0010B2 81               [ 4] 2923         ret 
                                   2924 
                                   2925 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2926 ;       WORD    ( c -- a ; <string> )
                                   2927 ;       Parse a word from input stream
                                   2928 ;       and copy it to code dictionary.
                                   2929 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0010B3                       2930         _HEADER WORDD,4,"WORD"
      0010B3 10 9B                    1         .word LINK 
                           0010B5     2         LINK=.
      0010B5 04                       3         .byte 4  
      0010B6 57 4F 52 44              4         .ascii "WORD"
      0010BA                          5         WORDD:
      0010BA CD 10 50         [ 4] 2931         CALL     PARSE
      0010BD CD 0C 14         [ 4] 2932         CALL     HERE
      0010C0 CD 0A A0         [ 4] 2933         CALL     CELLP
                           000000  2934 .IF CASE_SENSE 
                                   2935         JP      PACKS 
                           000001  2936 .ELSE                 
      0010C3 CD 0C D4         [ 4] 2937         CALL     PACKS
                                   2938 ; uppercase TOKEN 
      0010C6 CD 05 88         [ 4] 2939         CALL    DUPP 
      0010C9 CD 0B FD         [ 4] 2940         CALL    COUNT 
      0010CC CD 05 51         [ 4] 2941         CALL    TOR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      0010CF CD 04 B4         [ 4] 2942         CALL    BRAN 
      0010D2 11 00                 2943         .word   UPPER2  
      0010D4                       2944 UPPER:
      0010D4 CD 05 88         [ 4] 2945         CALL    DUPP 
      0010D7 CD 05 01         [ 4] 2946         CALL    CAT
      0010DA CD 05 88         [ 4] 2947         CALL    DUPP 
      0010DD CD 04 6F         [ 4] 2948         CALL   DOLIT
      0010E0 00 61                 2949         .word   'a' 
      0010E2 CD 04 6F         [ 4] 2950         CALL    DOLIT
      0010E5 00 7B                 2951         .word   'z'+1 
      0010E7 CD 09 26         [ 4] 2952         CALL   WITHI 
      0010EA CD 04 98         [ 4] 2953         CALL   QBRAN
      0010ED 10 F7                 2954         .word  UPPER1  
      0010EF CD 04 6F         [ 4] 2955         CALL    DOLIT 
      0010F2 00 DF                 2956         .word   0xDF 
      0010F4 CD 05 E5         [ 4] 2957         CALL    ANDD 
      0010F7                       2958 UPPER1:
      0010F7 CD 05 B0         [ 4] 2959         CALL    OVER 
      0010FA CD 04 F0         [ 4] 2960         CALL    CSTOR          
      0010FD CD 0A CB         [ 4] 2961         CALL    ONEP 
      001100                       2962 UPPER2: 
      001100 CD 04 83         [ 4] 2963         CALL    DONXT
      001103 10 D4                 2964         .word   UPPER  
      001105 CD 05 7E         [ 4] 2965         CALL    DROP  
      001108 81               [ 4] 2966         RET 
                                   2967 .ENDIF 
                                   2968 
                                   2969 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2970 ;       TOKEN   ( -- a ; <string> )
                                   2971 ;       Parse a word from input stream
                                   2972 ;       and copy it to name dictionary.
                                   2973 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001109                       2974         _HEADER TOKEN,5,"TOKEN"
      001109 10 B5                    1         .word LINK 
                           00110B     2         LINK=.
      00110B 05                       3         .byte 5  
      00110C 54 4F 4B 45 4E           4         .ascii "TOKEN"
      001111                          5         TOKEN:
      001111 CD 0B 2A         [ 4] 2975         CALL     BLANK
      001114 CC 10 BA         [ 2] 2976         JP     WORDD
                                   2977 
                                   2978 ;; Dictionary search
                                   2979 
                                   2980 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2981 ;       NAME>   ( na -- ca )
                                   2982 ;       Return a code address given
                                   2983 ;       a name address.
                                   2984 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001117                       2985         _HEADER NAMET,5,"NAME>"
      001117 11 0B                    1         .word LINK 
                           001119     2         LINK=.
      001119 05                       3         .byte 5  
      00111A 4E 41 4D 45 3E           4         .ascii "NAME>"
      00111F                          5         NAMET:
      00111F CD 0B FD         [ 4] 2986         CALL     COUNT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      001122 CD 04 6F         [ 4] 2987         CALL     DOLIT
      001125 00 1F                 2988         .word      31
      001127 CD 05 E5         [ 4] 2989         CALL     ANDD
      00112A CC 07 AD         [ 2] 2990         JP     PLUS
                                   2991 
                                   2992 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2993 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   2994 ;       Compare u cells in two
                                   2995 ;       strings. Return 0 if identical.
                                   2996 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00112D                       2997         _HEADER SAMEQ,5,"SAME?"
      00112D 11 19                    1         .word LINK 
                           00112F     2         LINK=.
      00112F 05                       3         .byte 5  
      001130 53 41 4D 45 3F           4         .ascii "SAME?"
      001135                          5         SAMEQ:
      001135 CD 0A D8         [ 4] 2998         CALL     ONEM
      001138 CD 05 51         [ 4] 2999         CALL     TOR
      00113B 20 29            [ 2] 3000         JRA     SAME2
      00113D CD 05 B0         [ 4] 3001 SAME1:  CALL     OVER
      001140 CD 05 45         [ 4] 3002         CALL     RAT
      001143 CD 07 AD         [ 4] 3003         CALL     PLUS
      001146 CD 05 01         [ 4] 3004         CALL     CAT
      001149 CD 05 B0         [ 4] 3005         CALL     OVER
      00114C CD 05 45         [ 4] 3006         CALL     RAT
      00114F CD 07 AD         [ 4] 3007         CALL     PLUS
      001152 CD 05 01         [ 4] 3008         CALL     CAT
      001155 CD 08 26         [ 4] 3009         CALL     SUBB
      001158 CD 07 3B         [ 4] 3010         CALL     QDUP
      00115B CD 04 98         [ 4] 3011         CALL     QBRAN
      00115E 11 66                 3012         .word      SAME2
      001160 CD 05 34         [ 4] 3013         CALL     RFROM
      001163 CC 05 7E         [ 2] 3014         JP     DROP
      001166 CD 04 83         [ 4] 3015 SAME2:  CALL     DONXT
      001169 11 3D                 3016         .word      SAME1
      00116B CC 0B 37         [ 2] 3017         JP     ZERO
                                   3018 
                                   3019 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3020 ;       find    ( a va -- ca na | a F )
                                   3021 ;       Search vocabulary for string.
                                   3022 ;       Return ca and na if succeeded.
                                   3023 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00116E                       3024         _HEADER FIND,4,"FIND"
      00116E 11 2F                    1         .word LINK 
                           001170     2         LINK=.
      001170 04                       3         .byte 4  
      001171 46 49 4E 44              4         .ascii "FIND"
      001175                          5         FIND:
      001175 CD 05 98         [ 4] 3025         CALL     SWAPP
      001178 CD 05 88         [ 4] 3026         CALL     DUPP
      00117B CD 05 01         [ 4] 3027         CALL     CAT
      00117E CD 06 5D         [ 4] 3028         CALL     TEMP
      001181 CD 04 D1         [ 4] 3029         CALL     STORE
      001184 CD 05 88         [ 4] 3030         CALL     DUPP
      001187 CD 04 E3         [ 4] 3031         CALL     AT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      00118A CD 05 51         [ 4] 3032         CALL     TOR
      00118D CD 0A A0         [ 4] 3033         CALL     CELLP
      001190 CD 05 98         [ 4] 3034         CALL     SWAPP
      001193 CD 04 E3         [ 4] 3035 FIND1:  CALL     AT
      001196 CD 05 88         [ 4] 3036         CALL     DUPP
      001199 CD 04 98         [ 4] 3037         CALL     QBRAN
      00119C 11 D2                 3038         .word      FIND6
      00119E CD 05 88         [ 4] 3039         CALL     DUPP
      0011A1 CD 04 E3         [ 4] 3040         CALL     AT
      0011A4 CD 04 6F         [ 4] 3041         CALL     DOLIT
      0011A7 1F 7F                 3042         .word      MASKK
      0011A9 CD 05 E5         [ 4] 3043         CALL     ANDD
      0011AC CD 05 45         [ 4] 3044         CALL     RAT
      0011AF CD 06 0E         [ 4] 3045         CALL     XORR
      0011B2 CD 04 98         [ 4] 3046         CALL     QBRAN
      0011B5 11 C1                 3047         .word      FIND2
      0011B7 CD 0A A0         [ 4] 3048         CALL     CELLP
      0011BA CD 04 6F         [ 4] 3049         CALL     DOLIT
      0011BD FF FF                 3050         .word     0xFFFF
      0011BF 20 0C            [ 2] 3051         JRA     FIND3
      0011C1 CD 0A A0         [ 4] 3052 FIND2:  CALL     CELLP
      0011C4 CD 06 5D         [ 4] 3053         CALL     TEMP
      0011C7 CD 04 E3         [ 4] 3054         CALL     AT
      0011CA CD 11 35         [ 4] 3055         CALL     SAMEQ
      0011CD CD 04 B4         [ 4] 3056 FIND3:  CALL     BRAN
      0011D0 11 E1                 3057         .word      FIND4
      0011D2 CD 05 34         [ 4] 3058 FIND6:  CALL     RFROM
      0011D5 CD 05 7E         [ 4] 3059         CALL     DROP
      0011D8 CD 05 98         [ 4] 3060         CALL     SWAPP
      0011DB CD 0A AF         [ 4] 3061         CALL     CELLM
      0011DE CC 05 98         [ 2] 3062         JP     SWAPP
      0011E1 CD 04 98         [ 4] 3063 FIND4:  CALL     QBRAN
      0011E4 11 EE                 3064         .word      FIND5
      0011E6 CD 0A AF         [ 4] 3065         CALL     CELLM
      0011E9 CD 0A AF         [ 4] 3066         CALL     CELLM
      0011EC 20 A5            [ 2] 3067         JRA     FIND1
      0011EE CD 05 34         [ 4] 3068 FIND5:  CALL     RFROM
      0011F1 CD 05 7E         [ 4] 3069         CALL     DROP
      0011F4 CD 05 98         [ 4] 3070         CALL     SWAPP
      0011F7 CD 05 7E         [ 4] 3071         CALL     DROP
      0011FA CD 0A AF         [ 4] 3072         CALL     CELLM
      0011FD CD 05 88         [ 4] 3073         CALL     DUPP
      001200 CD 11 1F         [ 4] 3074         CALL     NAMET
      001203 CC 05 98         [ 2] 3075         JP     SWAPP
                                   3076 
                                   3077 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3078 ;       NAME?   ( a -- ca na | a F )
                                   3079 ;       Search vocabularies for a string.
                                   3080 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001206                       3081         _HEADER NAMEQ,5,"NAME?"
      001206 11 70                    1         .word LINK 
                           001208     2         LINK=.
      001208 05                       3         .byte 5  
      001209 4E 41 4D 45 3F           4         .ascii "NAME?"
      00120E                          5         NAMEQ:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      00120E CD 06 D1         [ 4] 3082         CALL   CNTXT
      001211 CC 11 75         [ 2] 3083         JP     FIND
                                   3084 
                                   3085 ;; Terminal response
                                   3086 
                                   3087 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3088 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3089 ;       Backup cursor by one character.
                                   3090 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001214                       3091         _HEADER BKSP,2,"^H"
      001214 12 08                    1         .word LINK 
                           001216     2         LINK=.
      001216 02                       3         .byte 2  
      001217 5E 48                    4         .ascii "^H"
      001219                          5         BKSP:
      001219 CD 05 51         [ 4] 3092         CALL     TOR
      00121C CD 05 B0         [ 4] 3093         CALL     OVER
      00121F CD 05 34         [ 4] 3094         CALL     RFROM
      001222 CD 05 98         [ 4] 3095         CALL     SWAPP
      001225 CD 05 B0         [ 4] 3096         CALL     OVER
      001228 CD 06 0E         [ 4] 3097         CALL     XORR
      00122B CD 04 98         [ 4] 3098         CALL     QBRAN
      00122E 12 49                 3099         .word      BACK1
      001230 CD 04 6F         [ 4] 3100         CALL     DOLIT
      001233 00 08                 3101         .word      BKSPP
      001235 CD 04 36         [ 4] 3102         CALL     EMIT
      001238 CD 0A D8         [ 4] 3103         CALL     ONEM
      00123B CD 0B 2A         [ 4] 3104         CALL     BLANK
      00123E CD 04 36         [ 4] 3105         CALL     EMIT
      001241 CD 04 6F         [ 4] 3106         CALL     DOLIT
      001244 00 08                 3107         .word      BKSPP
      001246 CC 04 36         [ 2] 3108         JP     EMIT
      001249 81               [ 4] 3109 BACK1:  RET
                                   3110 
                                   3111 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3112 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3113 ;       Accept and echo key stroke
                                   3114 ;       and bump cursor.
                                   3115 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00124A                       3116         _HEADER TAP,3,"TAP"
      00124A 12 16                    1         .word LINK 
                           00124C     2         LINK=.
      00124C 03                       3         .byte 3  
      00124D 54 41 50                 4         .ascii "TAP"
      001250                          5         TAP:
      001250 CD 05 88         [ 4] 3117         CALL     DUPP
      001253 CD 04 36         [ 4] 3118         CALL     EMIT
      001256 CD 05 B0         [ 4] 3119         CALL     OVER
      001259 CD 04 F0         [ 4] 3120         CALL     CSTOR
      00125C CC 0A CB         [ 2] 3121         JP     ONEP
                                   3122 
                                   3123 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3124 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3125 ;       Process a key stroke,
                                   3126 ;       CR,LF or backspace.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                   3127 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00125F                       3128         _HEADER KTAP,4,"KTAP"
      00125F 12 4C                    1         .word LINK 
                           001261     2         LINK=.
      001261 04                       3         .byte 4  
      001262 4B 54 41 50              4         .ascii "KTAP"
      001266                          5         KTAP:
      001266 CD 05 88         [ 4] 3129         CALL     DUPP
      001269 CD 04 6F         [ 4] 3130         CALL     DOLIT
                           000001  3131 .if EOL_CR
      00126C 00 0D                 3132         .word   CRR
                           000000  3133 .else ; EOL_LF 
                                   3134         .word   LF
                                   3135 .endif 
      00126E CD 06 0E         [ 4] 3136         CALL     XORR
      001271 CD 04 98         [ 4] 3137         CALL     QBRAN
      001274 12 8C                 3138         .word      KTAP2
      001276 CD 04 6F         [ 4] 3139         CALL     DOLIT
      001279 00 08                 3140         .word      BKSPP
      00127B CD 06 0E         [ 4] 3141         CALL     XORR
      00127E CD 04 98         [ 4] 3142         CALL     QBRAN
      001281 12 89                 3143         .word      KTAP1
      001283 CD 0B 2A         [ 4] 3144         CALL     BLANK
      001286 CC 12 50         [ 2] 3145         JP     TAP
      001289 CC 12 19         [ 2] 3146 KTAP1:  JP     BKSP
      00128C CD 05 7E         [ 4] 3147 KTAP2:  CALL     DROP
      00128F CD 05 98         [ 4] 3148         CALL     SWAPP
      001292 CD 05 7E         [ 4] 3149         CALL     DROP
      001295 CC 05 88         [ 2] 3150         JP     DUPP
                                   3151 
                                   3152 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3153 ;       accept  ( b u -- b u )
                                   3154 ;       Accept characters to input
                                   3155 ;       buffer. Return with actual count.
                                   3156 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001298                       3157         _HEADER ACCEP,6,"ACCEPT"
      001298 12 61                    1         .word LINK 
                           00129A     2         LINK=.
      00129A 06                       3         .byte 6  
      00129B 41 43 43 45 50 54        4         .ascii "ACCEPT"
      0012A1                          5         ACCEP:
      0012A1 CD 05 B0         [ 4] 3158         CALL     OVER
      0012A4 CD 07 AD         [ 4] 3159         CALL     PLUS
      0012A7 CD 05 B0         [ 4] 3160         CALL     OVER
      0012AA CD 07 98         [ 4] 3161 ACCP1:  CALL     DDUP
      0012AD CD 06 0E         [ 4] 3162         CALL     XORR
      0012B0 CD 04 98         [ 4] 3163         CALL     QBRAN
      0012B3 12 D5                 3164         .word      ACCP4
      0012B5 CD 0E 35         [ 4] 3165         CALL     KEY
      0012B8 CD 05 88         [ 4] 3166         CALL     DUPP
      0012BB CD 0B 2A         [ 4] 3167         CALL     BLANK
      0012BE CD 04 6F         [ 4] 3168         CALL     DOLIT
      0012C1 00 7F                 3169         .word      127
      0012C3 CD 09 26         [ 4] 3170         CALL     WITHI
      0012C6 CD 04 98         [ 4] 3171         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      0012C9 12 D0                 3172         .word      ACCP2
      0012CB CD 12 50         [ 4] 3173         CALL     TAP
      0012CE 20 03            [ 2] 3174         JRA     ACCP3
      0012D0 CD 12 66         [ 4] 3175 ACCP2:  CALL     KTAP
      0012D3 20 D5            [ 2] 3176 ACCP3:  JRA     ACCP1
      0012D5 CD 05 7E         [ 4] 3177 ACCP4:  CALL     DROP
      0012D8 CD 05 B0         [ 4] 3178         CALL     OVER
      0012DB CC 08 26         [ 2] 3179         JP     SUBB
                                   3180 
                                   3181 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3182 ;       QUERY   ( -- )
                                   3183 ;       Accept input stream to
                                   3184 ;       terminal input buffer.
                                   3185 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0012DE                       3186         _HEADER QUERY,5,"QUERY"
      0012DE 12 9A                    1         .word LINK 
                           0012E0     2         LINK=.
      0012E0 05                       3         .byte 5  
      0012E1 51 55 45 52 59           4         .ascii "QUERY"
      0012E6                          5         QUERY:
      0012E6 CD 0C 36         [ 4] 3187         CALL     TIB
      0012E9 CD 04 6F         [ 4] 3188         CALL     DOLIT
      0012EC 00 50                 3189         .word      80
      0012EE CD 12 A1         [ 4] 3190         CALL     ACCEP
      0012F1 CD 06 7C         [ 4] 3191         CALL     NTIB
      0012F4 CD 04 D1         [ 4] 3192         CALL     STORE
      0012F7 CD 05 7E         [ 4] 3193         CALL     DROP
      0012FA CD 0B 37         [ 4] 3194         CALL     ZERO
      0012FD CD 06 6C         [ 4] 3195         CALL     INN
      001300 CC 04 D1         [ 2] 3196         JP     STORE
                                   3197 
                                   3198 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3199 ;       ABORT   ( -- )
                                   3200 ;       Reset data stack and
                                   3201 ;       jump to QUIT.
                                   3202 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001303                       3203         _HEADER ABORT,5,"ABORT"
      001303 12 E0                    1         .word LINK 
                           001305     2         LINK=.
      001305 05                       3         .byte 5  
      001306 41 42 4F 52 54           4         .ascii "ABORT"
      00130B                          5         ABORT:
      00130B CD 14 02         [ 4] 3204         CALL     PRESE
      00130E CC 14 1F         [ 2] 3205         JP     QUIT
                                   3206 
                                   3207 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3208 ;       abort"  ( f -- )
                                   3209 ;       Run time routine of ABORT".
                                   3210 ;       Abort with a message.
                                   3211 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001311                       3212         _HEADER ABORQ,COMPO+6,'ABORT"'
      001311 13 05                    1         .word LINK 
                           001313     2         LINK=.
      001313 46                       3         .byte COMPO+6  
      001314 41 42 4F 52 54 22        4         .ascii 'ABORT"'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      00131A                          5         ABORQ:
      00131A CD 04 98         [ 4] 3213         CALL     QBRAN
      00131D 13 39                 3214         .word      ABOR2   ;text flag
      00131F CD 0E BF         [ 4] 3215         CALL     DOSTR
      001322 CD 0E 6D         [ 4] 3216 ABOR1:  CALL     SPACE
      001325 CD 0B FD         [ 4] 3217         CALL     COUNT
      001328 CD 0E 97         [ 4] 3218         CALL     TYPES
      00132B CD 04 6F         [ 4] 3219         CALL     DOLIT
      00132E 00 3F                 3220         .word     63 ; "?"
      001330 CD 04 36         [ 4] 3221         CALL     EMIT
      001333 CD 0E AF         [ 4] 3222         CALL     CR
      001336 CC 13 0B         [ 2] 3223         JP     ABORT   ;pass error string
      001339 CD 0E BF         [ 4] 3224 ABOR2:  CALL     DOSTR
      00133C CC 05 7E         [ 2] 3225         JP     DROP
                                   3226 
                                   3227 ;; The text interpreter
                                   3228 
                                   3229 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3230 ;       $INTERPRET      ( a -- )
                                   3231 ;       Interpret a word. If failed,
                                   3232 ;       try to convert it to an integer.
                                   3233 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00133F                       3234         _HEADER INTER,10,"$INTERPRET"
      00133F 13 13                    1         .word LINK 
                           001341     2         LINK=.
      001341 0A                       3         .byte 10  
      001342 24 49 4E 54 45 52 50     4         .ascii "$INTERPRET"
             52 45 54
      00134C                          5         INTER:
      00134C CD 12 0E         [ 4] 3235         CALL     NAMEQ
      00134F CD 07 3B         [ 4] 3236         CALL     QDUP    ;?defined
      001352 CD 04 98         [ 4] 3237         CALL     QBRAN
      001355 13 76                 3238         .word      INTE1
      001357 CD 04 E3         [ 4] 3239         CALL     AT
      00135A CD 04 6F         [ 4] 3240         CALL     DOLIT
      00135D 40 00                 3241 	.word       0x4000	; COMPO*256
      00135F CD 05 E5         [ 4] 3242         CALL     ANDD    ;?compile only lexicon bits
      001362 CD 13 1A         [ 4] 3243         CALL     ABORQ
      001365 0D                    3244         .byte      13
      001366 20 63 6F 6D 70 69 6C  3245         .ascii     " compile only"
             65 20 6F 6E 6C 79
      001373 CC 04 C4         [ 2] 3246         JP     EXECU
      001376 CD 24 21         [ 4] 3247 INTE1:  CALL     NUMBQ   ;convert a number
      001379 CD 04 98         [ 4] 3248         CALL     QBRAN
      00137C 13 22                 3249         .word    ABOR1
      00137E 81               [ 4] 3250         RET
                                   3251 
                                   3252 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3253 ;       [       ( -- )
                                   3254 ;       Start  text interpreter.
                                   3255 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00137F                       3256         _HEADER LBRAC,IMEDD+1,"["
      00137F 13 41                    1         .word LINK 
                           001381     2         LINK=.
      001381 81                       3         .byte IMEDD+1  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      001382 5B                       4         .ascii "["
      001383                          5         LBRAC:
      001383 CD 04 6F         [ 4] 3257         CALL   DOLIT
      001386 13 4C                 3258         .word  INTER
      001388 CD 06 AF         [ 4] 3259         CALL   TEVAL
      00138B CC 04 D1         [ 2] 3260         JP     STORE
                                   3261 
                                   3262 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3263 ;       .OK     ( -- )
                                   3264 ;       Display 'ok' while interpreting.
                                   3265 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00138E                       3266         _HEADER DOTOK,3,".OK"
      00138E 13 81                    1         .word LINK 
                           001390     2         LINK=.
      001390 03                       3         .byte 3  
      001391 2E 4F 4B                 4         .ascii ".OK"
      001394                          5         DOTOK:
      001394 CD 04 6F         [ 4] 3267         CALL     DOLIT
      001397 13 4C                 3268         .word      INTER
      001399 CD 06 AF         [ 4] 3269         CALL     TEVAL
      00139C CD 04 E3         [ 4] 3270         CALL     AT
      00139F CD 08 4E         [ 4] 3271         CALL     EQUAL
      0013A2 CD 04 98         [ 4] 3272         CALL     QBRAN
      0013A5 13 AE                 3273         .word      DOTO1
      0013A7 CD 0E DC         [ 4] 3274         CALL     DOTQP
      0013AA 03                    3275         .byte      3
      0013AB 20 6F 6B              3276         .ascii     " ok"
      0013AE CC 0E AF         [ 2] 3277 DOTO1:  JP     CR
                                   3278 
                                   3279 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3280 ;       ?STACK  ( -- )
                                   3281 ;       Abort if stack underflows.
                                   3282 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0013B1                       3283         _HEADER QSTAC,6,"?STACK"
      0013B1 13 90                    1         .word LINK 
                           0013B3     2         LINK=.
      0013B3 06                       3         .byte 6  
      0013B4 3F 53 54 41 43 4B        4         .ascii "?STACK"
      0013BA                          5         QSTAC:
      0013BA CD 0B 79         [ 4] 3284         CALL     DEPTH
      0013BD CD 05 BF         [ 4] 3285         CALL     ZLESS   ;check only for underflow
      0013C0 CD 13 1A         [ 4] 3286         CALL     ABORQ
      0013C3 0B                    3287         .byte      11
      0013C4 20 75 6E 64 65 72 66  3288         .ascii     " underflow "
             6C 6F 77 20
      0013CF 81               [ 4] 3289         RET
                                   3290 
                                   3291 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3292 ;       EVAL    ( -- )
                                   3293 ;       Interpret  input stream.
                                   3294 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0013D0                       3295         _HEADER EVAL,4,"EVAL"
      0013D0 13 B3                    1         .word LINK 
                           0013D2     2         LINK=.
      0013D2 04                       3         .byte 4  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      0013D3 45 56 41 4C              4         .ascii "EVAL"
      0013D7                          5         EVAL:
      0013D7 CD 11 11         [ 4] 3296 EVAL1:  CALL     TOKEN
      0013DA CD 05 88         [ 4] 3297         CALL     DUPP
      0013DD CD 05 01         [ 4] 3298         CALL     CAT     ;?input stream empty
      0013E0 CD 04 98         [ 4] 3299         CALL     QBRAN
      0013E3 13 F3                 3300         .word    EVAL2
      0013E5 CD 06 AF         [ 4] 3301         CALL     TEVAL
      0013E8 CD 0C 4A         [ 4] 3302         CALL     ATEXE
      0013EB CD 13 BA         [ 4] 3303         CALL     QSTAC   ;evaluate input, check stack
      0013EE CD 04 B4         [ 4] 3304         CALL     BRAN
      0013F1 13 D7                 3305         .word    EVAL1
      0013F3 CD 05 7E         [ 4] 3306 EVAL2:  CALL     DROP
      0013F6 CC 13 94         [ 2] 3307         JP       DOTOK
                                   3308 
                                   3309 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3310 ;       PRESET  ( -- )
                                   3311 ;       Reset data stack pointer and
                                   3312 ;       terminal input buffer.
                                   3313 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0013F9                       3314         _HEADER PRESE,6,"PRESET"
      0013F9 13 D2                    1         .word LINK 
                           0013FB     2         LINK=.
      0013FB 06                       3         .byte 6  
      0013FC 50 52 45 53 45 54        4         .ascii "PRESET"
      001402                          5         PRESE:
      001402 CD 04 6F         [ 4] 3315         CALL     DOLIT
      001405 16 80                 3316         .word      SPP
      001407 CD 05 75         [ 4] 3317         CALL     SPSTO
      00140A CD 04 6F         [ 4] 3318         CALL     DOLIT
      00140D 17 00                 3319         .word      TIBB
      00140F CD 06 7C         [ 4] 3320         CALL     NTIB
      001412 CD 0A A0         [ 4] 3321         CALL     CELLP
      001415 CC 04 D1         [ 2] 3322         JP     STORE
                                   3323 
                                   3324 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3325 ;       QUIT    ( -- )
                                   3326 ;       Reset return stack pointer
                                   3327 ;       and start text interpreter.
                                   3328 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001418                       3329         _HEADER QUIT,4,"QUIT"
      001418 13 FB                    1         .word LINK 
                           00141A     2         LINK=.
      00141A 04                       3         .byte 4  
      00141B 51 55 49 54              4         .ascii "QUIT"
      00141F                          5         QUIT:
      00141F CD 04 6F         [ 4] 3330         CALL     DOLIT
      001422 17 FF                 3331         .word      RPP
      001424 CD 05 1E         [ 4] 3332         CALL     RPSTO   ;reset return stack pointer
      001427 CD 13 83         [ 4] 3333 QUIT1:  CALL     LBRAC   ;start interpretation
      00142A CD 12 E6         [ 4] 3334 QUIT2:  CALL     QUERY   ;get input
      00142D CD 13 D7         [ 4] 3335         CALL     EVAL
      001430 20 F8            [ 2] 3336         JRA     QUIT2   ;continue till error
                                   3337 
                                   3338 ;; The compiler
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                   3339 
                                   3340 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3341 ;       '       ( -- ca )
                                   3342 ;       Search vocabularies for
                                   3343 ;       next word in input stream.
                                   3344 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001432                       3345         _HEADER TICK,1,"'"
      001432 14 1A                    1         .word LINK 
                           001434     2         LINK=.
      001434 01                       3         .byte 1  
      001435 27                       4         .ascii "'"
      001436                          5         TICK:
      001436 CD 11 11         [ 4] 3346         CALL     TOKEN
      001439 CD 12 0E         [ 4] 3347         CALL     NAMEQ   ;?defined
      00143C CD 04 98         [ 4] 3348         CALL     QBRAN
      00143F 13 22                 3349         .word      ABOR1
      001441 81               [ 4] 3350         RET     ;yes, push code address
                                   3351 
                                   3352 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3353 ;       ALLOT   ( n -- )
                                   3354 ;       Allocate n bytes to RAM 
                                   3355 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001442                       3356         _HEADER ALLOT,5,"ALLOT"
      001442 14 34                    1         .word LINK 
                           001444     2         LINK=.
      001444 05                       3         .byte 5  
      001445 41 4C 4C 4F 54           4         .ascii "ALLOT"
      00144A                          5         ALLOT:
      00144A CD 06 DF         [ 4] 3357         CALL     VPP
                                   3358 ; must update APP_VP each time VP is modidied
      00144D CD 0B A7         [ 4] 3359         call PSTOR 
      001450 CC 1B 9E         [ 2] 3360         jp UPDATVP 
                                   3361 
                                   3362 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3363 ;       ,       ( w -- )
                                   3364 ;         Compile an integer into
                                   3365 ;         variable space.
                                   3366 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3367 ;        _HEADER COMMA,1,'\,'
      001453 14 44                 3368         .word      LINK
                           001455  3369 LINK = . 
      001455 01                    3370         .byte      1
      001456 2C                    3371         .ascii     ","
      001457                       3372 COMMA:
      001457 CD 0C 14         [ 4] 3373         CALL     HERE
      00145A CD 05 88         [ 4] 3374         CALL     DUPP
      00145D CD 0A A0         [ 4] 3375         CALL     CELLP   ;cell boundary
      001460 CD 06 DF         [ 4] 3376         CALL     VPP
      001463 CD 04 D1         [ 4] 3377         CALL     STORE
      001466 CC 04 D1         [ 2] 3378         JP     STORE
                                   3379 
                                   3380 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3381 ;       C,      ( c -- )
                                   3382 ;       Compile a byte into
                                   3383 ;       variables space.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                   3384 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3385 ;        _HEADER CCOMMA,2,"C,"
      001469 14 55                 3386       .word      LINK
                           00146B  3387 LINK = . 
      00146B 02                    3388         .byte      2
      00146C 43 2C                 3389         .ascii     "C,"
      00146E                       3390 CCOMMA:
      00146E CD 0C 14         [ 4] 3391         CALL     HERE
      001471 CD 05 88         [ 4] 3392         CALL     DUPP
      001474 CD 0A CB         [ 4] 3393         CALL     ONEP
      001477 CD 06 DF         [ 4] 3394         CALL     VPP
      00147A CD 04 D1         [ 4] 3395         CALL     STORE
      00147D CC 04 F0         [ 2] 3396         JP     CSTOR
                                   3397 
                                   3398 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3399 ;       [COMPILE]       ( -- ; <string> )
                                   3400 ;       Compile next immediate
                                   3401 ;       word into code dictionary.
                                   3402 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001480                       3403         _HEADER BCOMP,IMEDD+9,"[COMPILE]"
      001480 14 6B                    1         .word LINK 
                           001482     2         LINK=.
      001482 89                       3         .byte IMEDD+9  
      001483 5B 43 4F 4D 50 49 4C     4         .ascii "[COMPILE]"
             45 5D
      00148C                          5         BCOMP:
      00148C CD 14 36         [ 4] 3404         CALL     TICK
      00148F CC 17 6D         [ 2] 3405         JP     JSRC
                                   3406 
                                   3407 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3408 ;       COMPILE ( -- )
                                   3409 ;       Compile next jsr in
                                   3410 ;       colon list to code dictionary.
                                   3411 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001492                       3412         _HEADER COMPI,COMPO+7,"COMPILE"
      001492 14 82                    1         .word LINK 
                           001494     2         LINK=.
      001494 47                       3         .byte COMPO+7  
      001495 43 4F 4D 50 49 4C 45     4         .ascii "COMPILE"
      00149C                          5         COMPI:
      00149C CD 05 34         [ 4] 3413         CALL     RFROM
      00149F CD 05 88         [ 4] 3414         CALL     DUPP
      0014A2 CD 04 E3         [ 4] 3415         CALL     AT
      0014A5 CD 17 6D         [ 4] 3416         CALL     JSRC    ;compile subroutine
      0014A8 CD 0A A0         [ 4] 3417         CALL     CELLP
      0014AB 90 93            [ 1] 3418         ldw y,x 
      0014AD 90 FE            [ 2] 3419         ldw y,(y)
      0014AF 1C 00 02         [ 2] 3420         addw x,#CELLL 
      0014B2 90 FC            [ 2] 3421         jp (y)
                                   3422 
                                   3423 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3424 ;       LITERAL ( w -- )
                                   3425 ;       Compile tos to dictionary
                                   3426 ;       as an integer literal.
                                   3427 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      0014B4                       3428         _HEADER LITER,COMPO+IMEDD+7,"LITERAL"
      0014B4 14 94                    1         .word LINK 
                           0014B6     2         LINK=.
      0014B6 C7                       3         .byte COMPO+IMEDD+7  
      0014B7 4C 49 54 45 52 41 4C     4         .ascii "LITERAL"
      0014BE                          5         LITER:
      0014BE CD 14 9C         [ 4] 3429         CALL     COMPI
      0014C1 04 6F                 3430         .word DOLIT 
      0014C3 CC 14 57         [ 2] 3431         JP     COMMA
                                   3432 
                                   3433 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3434 ;       $,"     ( -- )
                                   3435 ;       Compile a literal string
                                   3436 ;       up to next " .
                                   3437 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3438 ;        _HEADER STRCQ,3,'$,"'
      0014C6 14 B6                 3439         .word      LINK
                           0014C8  3440 LINK = . 
      0014C8 03                    3441         .byte      3
      0014C9 24 2C 22              3442         .byte     '$',',','"'
      0014CC                       3443 STRCQ:
      0014CC CD 04 6F         [ 4] 3444         CALL     DOLIT
      0014CF 00 22                 3445         .word     34	; "
      0014D1 CD 10 50         [ 4] 3446         CALL     PARSE
      0014D4 CD 0C 14         [ 4] 3447         CALL     HERE
      0014D7 CD 0C D4         [ 4] 3448         CALL     PACKS   ;string to code dictionary
      0014DA CD 0B FD         [ 4] 3449         CALL     COUNT
      0014DD CD 07 AD         [ 4] 3450         CALL     PLUS    ;calculate aligned end of string
      0014E0 CD 06 DF         [ 4] 3451         CALL     VPP
      0014E3 CC 04 D1         [ 2] 3452         JP     STORE
                                   3453 
                                   3454 ;; Structures
                                   3455 
                                   3456 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3457 ;       FOR     ( -- a )
                                   3458 ;       Start a FOR-NEXT loop
                                   3459 ;       structure in a colon definition.
                                   3460 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014E6                       3461         _HEADER FOR,IMEDD+3,"FOR"
      0014E6 14 C8                    1         .word LINK 
                           0014E8     2         LINK=.
      0014E8 83                       3         .byte IMEDD+3  
      0014E9 46 4F 52                 4         .ascii "FOR"
      0014EC                          5         FOR:
      0014EC CD 14 9C         [ 4] 3462         CALL     COMPI
      0014EF 05 51                 3463         .word TOR 
      0014F1 CC 0C 14         [ 2] 3464         JP     HERE
                                   3465 
                                   3466 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3467 ;       NEXT    ( a -- )
                                   3468 ;       Terminate a FOR-NEXT loop.
                                   3469 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014F4                       3470         _HEADER NEXT,IMEDD+4,"NEXT"
      0014F4 14 E8                    1         .word LINK 
                           0014F6     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      0014F6 84                       3         .byte IMEDD+4  
      0014F7 4E 45 58 54              4         .ascii "NEXT"
      0014FB                          5         NEXT:
      0014FB CD 14 9C         [ 4] 3471         CALL     COMPI
      0014FE 04 83                 3472         .word DONXT 
      001500 CD 07 2B         [ 4] 3473         call ADRADJ
      001503 CC 14 57         [ 2] 3474         JP     COMMA
                                   3475 
                                   3476 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3477 ;       I ( -- n )
                                   3478 ;       stack COUNTER
                                   3479 ;       of innermost FOR-NEXT  
                                   3480 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001506                       3481         _HEADER IFETCH,1,"I"
      001506 14 F6                    1         .word LINK 
                           001508     2         LINK=.
      001508 01                       3         .byte 1  
      001509 49                       4         .ascii "I"
      00150A                          5         IFETCH:
      00150A 1D 00 02         [ 2] 3482         subw x,#CELLL 
      00150D 16 03            [ 2] 3483         ldw y,(3,sp)
      00150F FF               [ 2] 3484         ldw (x),y 
      001510 81               [ 4] 3485         ret 
                                   3486 
                                   3487 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3488 ;       J ( -- n )
                                   3489 ;   stack COUNTER
                                   3490 ;   of second level FOR-NEXT  
                                   3491 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001511                       3492         _HEADER JFETCH,1,"J"
      001511 15 08                    1         .word LINK 
                           001513     2         LINK=.
      001513 01                       3         .byte 1  
      001514 4A                       4         .ascii "J"
      001515                          5         JFETCH:
      001515 1D 00 02         [ 2] 3493         SUBW X,#CELLL 
      001518 16 05            [ 2] 3494         LDW Y,(5,SP)
      00151A FF               [ 2] 3495         LDW (X),Y 
      00151B 81               [ 4] 3496         RET 
                                   3497 
                                   3498 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3499 ;       BEGIN   ( -- a )
                                   3500 ;       Start an infinite or
                                   3501 ;       indefinite loop structure.
                                   3502 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00151C                       3503         _HEADER BEGIN,IMEDD+5,"BEGIN"
      00151C 15 13                    1         .word LINK 
                           00151E     2         LINK=.
      00151E 85                       3         .byte IMEDD+5  
      00151F 42 45 47 49 4E           4         .ascii "BEGIN"
      001524                          5         BEGIN:
      001524 CC 0C 14         [ 2] 3504         JP     HERE
                                   3505 
                                   3506 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3507 ;       UNTIL   ( a -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                   3508 ;       Terminate a BEGIN-UNTIL
                                   3509 ;       indefinite loop structure.
                                   3510 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001527                       3511         _HEADER UNTIL,IMEDD+5,"UNTIL"
      001527 15 1E                    1         .word LINK 
                           001529     2         LINK=.
      001529 85                       3         .byte IMEDD+5  
      00152A 55 4E 54 49 4C           4         .ascii "UNTIL"
      00152F                          5         UNTIL:
      00152F CD 14 9C         [ 4] 3512         CALL     COMPI
      001532 04 98                 3513         .word    QBRAN 
      001534 CD 07 2B         [ 4] 3514         call ADRADJ
      001537 CC 14 57         [ 2] 3515         JP     COMMA
                                   3516 
                                   3517 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3518 ;       AGAIN   ( a -- )
                                   3519 ;       Terminate a BEGIN-AGAIN
                                   3520 ;       infinite loop structure.
                                   3521 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00153A                       3522         _HEADER AGAIN,IMEDD+5,"AGAIN"
      00153A 15 29                    1         .word LINK 
                           00153C     2         LINK=.
      00153C 85                       3         .byte IMEDD+5  
      00153D 41 47 41 49 4E           4         .ascii "AGAIN"
      001542                          5         AGAIN:
      001542 CD 14 9C         [ 4] 3523         CALL     COMPI
      001545 04 B4                 3524         .word BRAN
      001547 CD 07 2B         [ 4] 3525         call ADRADJ 
      00154A CC 14 57         [ 2] 3526         JP     COMMA
                                   3527 
                                   3528 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3529 ;       IF      ( -- A )
                                   3530 ;       Begin a conditional branch.
                                   3531 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00154D                       3532         _HEADER IFF,IMEDD+2,"IF"
      00154D 15 3C                    1         .word LINK 
                           00154F     2         LINK=.
      00154F 82                       3         .byte IMEDD+2  
      001550 49 46                    4         .ascii "IF"
      001552                          5         IFF:
      001552 CD 14 9C         [ 4] 3533         CALL     COMPI
      001555 04 98                 3534         .word QBRAN
      001557 CD 0C 14         [ 4] 3535         CALL     HERE
      00155A CD 0B 37         [ 4] 3536         CALL     ZERO
      00155D CC 14 57         [ 2] 3537         JP     COMMA
                                   3538 
                                   3539 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3540 ;       THEN        ( A -- )
                                   3541 ;       Terminate a conditional 
                                   3542 ;       branch structure.
                                   3543 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001560                       3544         _HEADER THENN,IMEDD+4,"THEN"
      001560 15 4F                    1         .word LINK 
                           001562     2         LINK=.
      001562 84                       3         .byte IMEDD+4  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      001563 54 48 45 4E              4         .ascii "THEN"
      001567                          5         THENN:
      001567 CD 0C 14         [ 4] 3545         CALL     HERE
      00156A CD 07 2B         [ 4] 3546         call ADRADJ 
      00156D CD 05 98         [ 4] 3547         CALL     SWAPP
      001570 CC 04 D1         [ 2] 3548         JP     STORE
                                   3549 
                                   3550 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3551 ;       ELSE        ( A -- A )
                                   3552 ;       Start the false clause in 
                                   3553 ;       an IF-ELSE-THEN structure.
                                   3554 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001573                       3555         _HEADER ELSEE,IMEDD+4,"ELSE"
      001573 15 62                    1         .word LINK 
                           001575     2         LINK=.
      001575 84                       3         .byte IMEDD+4  
      001576 45 4C 53 45              4         .ascii "ELSE"
      00157A                          5         ELSEE:
      00157A CD 14 9C         [ 4] 3556         CALL     COMPI
      00157D 04 B4                 3557         .word BRAN
      00157F CD 0C 14         [ 4] 3558         CALL     HERE
      001582 CD 0B 37         [ 4] 3559         CALL     ZERO
      001585 CD 14 57         [ 4] 3560         CALL     COMMA
      001588 CD 05 98         [ 4] 3561         CALL     SWAPP
      00158B CD 0C 14         [ 4] 3562         CALL     HERE
      00158E CD 07 2B         [ 4] 3563         call ADRADJ 
      001591 CD 05 98         [ 4] 3564         CALL     SWAPP
      001594 CC 04 D1         [ 2] 3565         JP     STORE
                                   3566 
                                   3567 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3568 ;       AHEAD       ( -- A )
                                   3569 ;       Compile a forward branch
                                   3570 ;       instruction.
                                   3571 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001597                       3572         _HEADER AHEAD,IMEDD+5,"AHEAD"
      001597 15 75                    1         .word LINK 
                           001599     2         LINK=.
      001599 85                       3         .byte IMEDD+5  
      00159A 41 48 45 41 44           4         .ascii "AHEAD"
      00159F                          5         AHEAD:
      00159F CD 14 9C         [ 4] 3573         CALL     COMPI
      0015A2 04 B4                 3574         .word BRAN
      0015A4 CD 0C 14         [ 4] 3575         CALL     HERE
      0015A7 CD 0B 37         [ 4] 3576         CALL     ZERO
      0015AA CC 14 57         [ 2] 3577         JP     COMMA
                                   3578 
                                   3579 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3580 ;       WHILE       ( a -- A a )
                                   3581 ;       Conditional branch out of a 
                                   3582 ;       BEGIN-WHILE-REPEAT loop.
                                   3583 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015AD                       3584         _HEADER WHILE,IMEDD+5,"WHILE"
      0015AD 15 99                    1         .word LINK 
                           0015AF     2         LINK=.
      0015AF 85                       3         .byte IMEDD+5  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      0015B0 57 48 49 4C 45           4         .ascii "WHILE"
      0015B5                          5         WHILE:
      0015B5 CD 14 9C         [ 4] 3585         CALL     COMPI
      0015B8 04 98                 3586         .word QBRAN
      0015BA CD 0C 14         [ 4] 3587         CALL     HERE
      0015BD CD 0B 37         [ 4] 3588         CALL     ZERO
      0015C0 CD 14 57         [ 4] 3589         CALL     COMMA
      0015C3 CC 05 98         [ 2] 3590         JP     SWAPP
                                   3591 
                                   3592 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3593 ;       REPEAT      ( A a -- )
                                   3594 ;       Terminate a BEGIN-WHILE-REPEAT 
                                   3595 ;       indefinite loop.
                                   3596 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015C6                       3597         _HEADER REPEA,IMEDD+6,"REPEAT"
      0015C6 15 AF                    1         .word LINK 
                           0015C8     2         LINK=.
      0015C8 86                       3         .byte IMEDD+6  
      0015C9 52 45 50 45 41 54        4         .ascii "REPEAT"
      0015CF                          5         REPEA:
      0015CF CD 14 9C         [ 4] 3598         CALL     COMPI
      0015D2 04 B4                 3599         .word BRAN
      0015D4 CD 07 2B         [ 4] 3600         call ADRADJ 
      0015D7 CD 14 57         [ 4] 3601         CALL     COMMA
      0015DA CD 0C 14         [ 4] 3602         CALL     HERE
      0015DD CD 07 2B         [ 4] 3603         call ADRADJ 
      0015E0 CD 05 98         [ 4] 3604         CALL     SWAPP
      0015E3 CC 04 D1         [ 2] 3605         JP     STORE
                                   3606 
                                   3607 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3608 ;       AFT         ( a -- a A )
                                   3609 ;       Jump to THEN in a FOR-AFT-THEN-NEXT 
                                   3610 ;       loop the first time through.
                                   3611 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015E6                       3612         _HEADER AFT,IMEDD+3,"AFT"
      0015E6 15 C8                    1         .word LINK 
                           0015E8     2         LINK=.
      0015E8 83                       3         .byte IMEDD+3  
      0015E9 41 46 54                 4         .ascii "AFT"
      0015EC                          5         AFT:
      0015EC CD 05 7E         [ 4] 3613         CALL     DROP
      0015EF CD 15 9F         [ 4] 3614         CALL     AHEAD
      0015F2 CD 0C 14         [ 4] 3615         CALL     HERE
      0015F5 CC 05 98         [ 2] 3616         JP     SWAPP
                                   3617 
                                   3618 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3619 ;       ABORT"      ( -- ; <string> )
                                   3620 ;       Conditional abort with an error message.
                                   3621 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015F8                       3622         _HEADER ABRTQ,IMEDD+6,'ABORT"'
      0015F8 15 E8                    1         .word LINK 
                           0015FA     2         LINK=.
      0015FA 86                       3         .byte IMEDD+6  
      0015FB 41 42 4F 52 54 22        4         .ascii 'ABORT"'
      001601                          5         ABRTQ:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      001601 CD 14 9C         [ 4] 3623         CALL     COMPI
      001604 13 1A                 3624         .word ABORQ
      001606 CC 14 CC         [ 2] 3625         JP     STRCQ
                                   3626 
                                   3627 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3628 ;       $"     ( -- ; <string> )
                                   3629 ;       Compile an inline string literal.
                                   3630 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001609                       3631         _HEADER STRQ,IMEDD+2,'$"'
      001609 15 FA                    1         .word LINK 
                           00160B     2         LINK=.
      00160B 82                       3         .byte IMEDD+2  
      00160C 24 22                    4         .ascii '$"'
      00160E                          5         STRQ:
      00160E CD 14 9C         [ 4] 3632         CALL     COMPI
      001611 0E D8                 3633         .word STRQP 
      001613 CC 14 CC         [ 2] 3634         JP     STRCQ
                                   3635 
                                   3636 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3637 ;       ."          ( -- ; <string> )
                                   3638 ;       Compile an inline string literal 
                                   3639 ;       to be typed out at run time.
                                   3640 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001616                       3641         _HEADER DOTQ,IMEDD+2,'."'
      001616 16 0B                    1         .word LINK 
                           001618     2         LINK=.
      001618 82                       3         .byte IMEDD+2  
      001619 2E 22                    4         .ascii '."'
      00161B                          5         DOTQ:
      00161B CD 14 9C         [ 4] 3642         CALL     COMPI
      00161E 0E DC                 3643         .word DOTQP 
      001620 CC 14 CC         [ 2] 3644         JP     STRCQ
                                   3645 
                                   3646 ;; Name compiler
                                   3647 
                                   3648 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3649 ;       ?UNIQUE ( a -- a )
                                   3650 ;       Display a warning message
                                   3651 ;       if word already exists.
                                   3652 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001623                       3653         _HEADER UNIQU,7,"?UNIQUE"
      001623 16 18                    1         .word LINK 
                           001625     2         LINK=.
      001625 07                       3         .byte 7  
      001626 3F 55 4E 49 51 55 45     4         .ascii "?UNIQUE"
      00162D                          5         UNIQU:
      00162D CD 05 88         [ 4] 3654         CALL     DUPP
      001630 CD 12 0E         [ 4] 3655         CALL     NAMEQ   ;?name exists
      001633 CD 04 98         [ 4] 3656         CALL     QBRAN
      001636 16 4C                 3657         .word      UNIQ1
      001638 CD 0E DC         [ 4] 3658         CALL     DOTQP   ;redef are OK
      00163B 07                    3659         .byte       7
      00163C 20 72 65 44 65 66 20  3660         .ascii     " reDef "       
      001643 CD 05 B0         [ 4] 3661         CALL     OVER
      001646 CD 0B FD         [ 4] 3662         CALL     COUNT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      001649 CD 0E 97         [ 4] 3663         CALL     TYPES   ;just in case
      00164C CC 05 7E         [ 2] 3664 UNIQ1:  JP     DROP
                                   3665 
                                   3666 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3667 ;       $,n     ( na -- )
                                   3668 ;       Build a new dictionary name
                                   3669 ;       using string at na.
                                   3670 ; compile dans l'espace des variables 
                                   3671 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3672 ;        _HEADER SNAME,3,"$,n"
      00164F 16 25                 3673         .word      LINK
                           001651  3674 LINK = . 
      001651 03                    3675         .byte      3
      001652 24 2C 6E              3676         .ascii     "$,n"
      001655                       3677 SNAME:
      001655 CD 05 88         [ 4] 3678         CALL     DUPP
      001658 CD 05 01         [ 4] 3679         CALL     CAT     ;?null input
      00165B CD 04 98         [ 4] 3680         CALL     QBRAN
      00165E 16 8B                 3681         .word      PNAM1
      001660 CD 16 2D         [ 4] 3682         CALL     UNIQU   ;?redefinition
      001663 CD 05 88         [ 4] 3683         CALL     DUPP
      001666 CD 0B FD         [ 4] 3684         CALL     COUNT
      001669 CD 07 AD         [ 4] 3685         CALL     PLUS
      00166C CD 06 DF         [ 4] 3686         CALL     VPP
      00166F CD 04 D1         [ 4] 3687         CALL     STORE
      001672 CD 05 88         [ 4] 3688         CALL     DUPP
      001675 CD 06 FD         [ 4] 3689         CALL     LAST
      001678 CD 04 D1         [ 4] 3690         CALL     STORE   ;save na for vocabulary link
      00167B CD 0A AF         [ 4] 3691         CALL     CELLM   ;link address
      00167E CD 06 D1         [ 4] 3692         CALL     CNTXT
      001681 CD 04 E3         [ 4] 3693         CALL     AT
      001684 CD 05 98         [ 4] 3694         CALL     SWAPP
      001687 CD 04 D1         [ 4] 3695         CALL     STORE
      00168A 81               [ 4] 3696         RET     ;save code pointer
      00168B CD 0E D8         [ 4] 3697 PNAM1:  CALL     STRQP
      00168E 05                    3698         .byte      5
      00168F 20 6E 61 6D 65        3699         .ascii     " name" ;null input
      001694 CC 13 22         [ 2] 3700         JP     ABOR1
                                   3701 
                                   3702 ;; FORTH compiler
                                   3703 
                                   3704 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3705 ;       $COMPILE        ( a -- )
                                   3706 ;       Compile next word to
                                   3707 ;       dictionary as a token or literal.
                                   3708 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001697                       3709         _HEADER SCOMP,8,"$COMPILE"
      001697 16 51                    1         .word LINK 
                           001699     2         LINK=.
      001699 08                       3         .byte 8  
      00169A 24 43 4F 4D 50 49 4C     4         .ascii "$COMPILE"
             45
      0016A2                          5         SCOMP:
      0016A2 CD 12 0E         [ 4] 3710         CALL     NAMEQ
      0016A5 CD 07 3B         [ 4] 3711         CALL     QDUP    ;?defined
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      0016A8 CD 04 98         [ 4] 3712         CALL     QBRAN
      0016AB 16 C3                 3713         .word      SCOM2
      0016AD CD 04 E3         [ 4] 3714         CALL     AT
      0016B0 CD 04 6F         [ 4] 3715         CALL     DOLIT
      0016B3 80 00                 3716         .word     0x8000	;  IMEDD*256
      0016B5 CD 05 E5         [ 4] 3717         CALL     ANDD    ;?immediate
      0016B8 CD 04 98         [ 4] 3718         CALL     QBRAN
      0016BB 16 C0                 3719         .word      SCOM1
      0016BD CC 04 C4         [ 2] 3720         JP     EXECU
      0016C0 CC 17 6D         [ 2] 3721 SCOM1:  JP     JSRC
      0016C3 CD 24 21         [ 4] 3722 SCOM2:  CALL     NUMBQ   ;try to convert to number
      0016C6 CD 07 3B         [ 4] 3723         CALL    QDUP  
      0016C9 CD 04 98         [ 4] 3724         CALL     QBRAN
      0016CC 13 22                 3725         .word      ABOR1
      0016CE                       3726         _DOLIT  -1
      0016CE CD 04 6F         [ 4]    1     CALL DOLIT 
      0016D1 FF FF                    2     .word -1 
      0016D3 CD 08 4E         [ 4] 3727         CALL    EQUAL
      0016D6                       3728         _QBRAN DLITER  
      0016D6 CD 04 98         [ 4]    1     CALL QBRAN
      0016D9 28 6E                    2     .word DLITER
      0016DB CC 14 BE         [ 2] 3729         JP     LITER
                                   3730 
                                   3731 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3732 ;       OVERT   ( -- )
                                   3733 ;       Link a new word into vocabulary.
                                   3734 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016DE                       3735         _HEADER OVERT,5,"OVERT"
      0016DE 16 99                    1         .word LINK 
                           0016E0     2         LINK=.
      0016E0 05                       3         .byte 5  
      0016E1 4F 56 45 52 54           4         .ascii "OVERT"
      0016E6                          5         OVERT:
      0016E6 CD 06 FD         [ 4] 3736         CALL     LAST
      0016E9 CD 04 E3         [ 4] 3737         CALL     AT
      0016EC CD 06 D1         [ 4] 3738         CALL     CNTXT
      0016EF CC 04 D1         [ 2] 3739         JP     STORE
                                   3740 
                                   3741 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3742 ;       ;       ( -- )
                                   3743 ;       Terminate a colon definition.
                                   3744 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3745 ;        _HEADER SEMIS,IMEDD+COMPO+1,";"
      0016F2 16 E0                 3746         .word      LINK
                           0016F4  3747 LINK = . 
      0016F4 C1                    3748 	.byte      IMEDD+COMPO+1
      0016F5 3B                    3749         .ascii     ";"
      0016F6                       3750 SEMIS:
                           000001  3751 .if OPTIMIZE ; more compact and faster
      0016F6 CD 04 6F         [ 4] 3752         call DOLIT 
      0016F9 00 81                 3753         .word 0x81   ; opcode for RET 
      0016FB CD 14 6E         [ 4] 3754         call CCOMMA 
                           000000  3755 .else
                                   3756         CALL     COMPI
                                   3757         .word EXIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



                                   3758 .endif 
      0016FE CD 13 83         [ 4] 3759         CALL     LBRAC
      001701 CD 16 E6         [ 4] 3760         call OVERT 
      001704 CD 20 F6         [ 4] 3761         CALL FMOVE
      001707 CD 07 3B         [ 4] 3762         call QDUP 
      00170A CD 04 98         [ 4] 3763         call QBRAN 
      00170D 18 3D                 3764         .word SET_RAMLAST 
      00170F CD 21 8A         [ 4] 3765         CALL UPDATPTR
      001712 81               [ 4] 3766         RET 
                                   3767 
                                   3768 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3769 ;       Terminate an ISR definition 
                                   3770 ;       retourn ca of ISR as double
                                   3771 ;       I; ( -- ud )
                                   3772 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3773 ;       _HEADER ISEMI,2+IMEDD+COMPO,"I;"
      001713 16 F4                 3774         .word LINK 
                           001715  3775         LINK=.
      001715 C2                    3776         .byte 2+IMEDD+COMPO 
      001716 49 3B                 3777         .ascii "I;" 
      001718                       3778 ISEMI:
      001718 1D 00 02         [ 2] 3779         subw x,#CELLL  
      00171B 90 AE 00 80      [ 2] 3780         ldw y,#IRET_CODE 
      00171F FF               [ 2] 3781         ldw (x),y 
      001720 CD 14 6E         [ 4] 3782         call CCOMMA
      001723 CD 13 83         [ 4] 3783         call LBRAC 
      001726 CD 21 CF         [ 4] 3784         call IFMOVE
      001729 CD 07 3B         [ 4] 3785         call QDUP 
      00172C CD 04 98         [ 4] 3786         CALL QBRAN 
      00172F 18 3D                 3787         .word SET_RAMLAST
      001731 CD 06 ED         [ 4] 3788         CALL CPP
      001734 CD 04 E3         [ 4] 3789         call AT 
      001737 CD 05 98         [ 4] 3790         call SWAPP 
      00173A CD 06 ED         [ 4] 3791         CALL CPP 
      00173D CD 04 D1         [ 4] 3792         call STORE 
      001740 CD 1B 87         [ 4] 3793         call UPDATCP 
      001743 CD 1B 44         [ 4] 3794         call EEPVP 
      001746 CD 05 7E         [ 4] 3795         call DROP 
      001749 CD 04 E3         [ 4] 3796         call AT 
      00174C CD 06 DF         [ 4] 3797         call VPP 
      00174F CD 04 D1         [ 4] 3798         call STORE 
      001752 CC 0B 37         [ 2] 3799         jp ZERO
      001755 81               [ 4] 3800         ret           
                                   3801         
                                   3802 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3803 ;       ]       ( -- )
                                   3804 ;       Start compiling words in
                                   3805 ;       input stream.
                                   3806 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001756                       3807         _HEADER RBRAC,1,"]"
      001756 17 15                    1         .word LINK 
                           001758     2         LINK=.
      001758 01                       3         .byte 1  
      001759 5D                       4         .ascii "]"
      00175A                          5         RBRAC:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      00175A CD 04 6F         [ 4] 3808         CALL   DOLIT
      00175D 16 A2                 3809         .word  SCOMP
      00175F CD 06 AF         [ 4] 3810         CALL   TEVAL
      001762 CC 04 D1         [ 2] 3811         JP     STORE
                                   3812 
                                   3813 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3814 ;       CALL,    ( ca -- )
                                   3815 ;       Compile a subroutine call.
                                   3816 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3817 ;        _HEADER JSRC,5,"CALL,"
      001765 17 58                 3818         .word      LINK
                           001767  3819 LINK = . 
      001767 05                    3820         .byte      5
      001768 43 41 4C 4C 2C        3821         .ascii     "CALL,"
      00176D                       3822 JSRC:
      00176D CD 04 6F         [ 4] 3823         CALL     DOLIT
      001770 00 CD                 3824         .word     CALLL     ;CALL
      001772 CD 14 6E         [ 4] 3825         CALL     CCOMMA
      001775 CC 14 57         [ 2] 3826         JP     COMMA
                                   3827 
                                   3828 ;       INIT-OFS ( -- )
                                   3829 ;       compute offset to adjust jump address 
                                   3830 ;       set variable OFFSET 
      001778 17 67                 3831         .word LINK 
                           00177A  3832         LINK=.
      00177A 08                    3833         .byte 8 
      00177B 49 4E 49 54 2D 4F 46  3834         .ascii "INIT-OFS" 
             53
      001783                       3835 INITOFS:
      001783 CD 06 9E         [ 4] 3836         call TFLASH 
      001786 CD 04 E3         [ 4] 3837         CALL AT 
      001789 CD 05 88         [ 4] 3838         CALL DUPP 
      00178C CD 04 98         [ 4] 3839         call QBRAN
      00178F 17 A0                 3840         .word 1$
      001791 CD 05 7E         [ 4] 3841         call DROP  
      001794 CD 06 ED         [ 4] 3842         call CPP 
      001797 CD 04 E3         [ 4] 3843         call AT 
      00179A CD 0C 14         [ 4] 3844         call HERE
      00179D CD 08 26         [ 4] 3845         call SUBB 
      0017A0 CD 07 22         [ 4] 3846 1$:     call OFFSET 
      0017A3 CC 04 D1         [ 2] 3847         jp STORE  
                                   3848 
                                   3849 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3850 ;       :       ( -- ; <string> )
                                   3851 ;       Start a new colon definition
                                   3852 ;       using next word as its name.
                                   3853 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017A6                       3854         _HEADER COLON,1,":"
      0017A6 17 7A                    1         .word LINK 
                           0017A8     2         LINK=.
      0017A8 01                       3         .byte 1  
      0017A9 3A                       4         .ascii ":"
      0017AA                          5         COLON:
      0017AA CD 17 83         [ 4] 3855         call INITOFS       
      0017AD CD 11 11         [ 4] 3856         CALL   TOKEN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      0017B0 CD 16 55         [ 4] 3857         CALL   SNAME
      0017B3 CC 17 5A         [ 2] 3858         JP     RBRAC
                                   3859 
                                   3860 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3861 ;       I:  ( -- )
                                   3862 ;       Start interrupt service 
                                   3863 ;       routine definition
                                   3864 ;       those definition have 
                                   3865 ;       no name.
                                   3866 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017B6                       3867         _HEADER ICOLON,2,"I:"
      0017B6 17 A8                    1         .word LINK 
                           0017B8     2         LINK=.
      0017B8 02                       3         .byte 2  
      0017B9 49 3A                    4         .ascii "I:"
      0017BB                          5         ICOLON:
      0017BB CD 17 83         [ 4] 3868         call INITOFS 
      0017BE CC 17 5A         [ 2] 3869         jp RBRAC  
                                   3870 
                                   3871 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3872 ;       IMMEDIATE       ( -- )
                                   3873 ;       Make last compiled word
                                   3874 ;       an immediate word.
                                   3875 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017C1                       3876         _HEADER IMMED,9,"IMMEDIATE"
      0017C1 17 B8                    1         .word LINK 
                           0017C3     2         LINK=.
      0017C3 09                       3         .byte 9  
      0017C4 49 4D 4D 45 44 49 41     4         .ascii "IMMEDIATE"
             54 45
      0017CD                          5         IMMED:
      0017CD CD 04 6F         [ 4] 3877         CALL     DOLIT
      0017D0 80 00                 3878         .word     0x8000	;  IMEDD*256
      0017D2 CD 06 FD         [ 4] 3879         CALL     LAST
      0017D5 CD 04 E3         [ 4] 3880         CALL     AT
      0017D8 CD 04 E3         [ 4] 3881         CALL     AT
      0017DB CD 05 F9         [ 4] 3882         CALL     ORR
      0017DE CD 06 FD         [ 4] 3883         CALL     LAST
      0017E1 CD 04 E3         [ 4] 3884         CALL     AT
      0017E4 CC 04 D1         [ 2] 3885         JP     STORE
                                   3886 
                                   3887 ;; Defining words
                                   3888 
                                   3889 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3890 ;       CREATE  ( -- ; <string> )
                                   3891 ;       Compile a new array
                                   3892 ;       without allocating space.
                                   3893 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017E7                       3894         _HEADER CREAT,6,"CREATE"
      0017E7 17 C3                    1         .word LINK 
                           0017E9     2         LINK=.
      0017E9 06                       3         .byte 6  
      0017EA 43 52 45 41 54 45        4         .ascii "CREATE"
      0017F0                          5         CREAT:
      0017F0 CD 11 11         [ 4] 3895         CALL     TOKEN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      0017F3 CD 16 55         [ 4] 3896         CALL     SNAME
      0017F6 CD 16 E6         [ 4] 3897         CALL     OVERT        
      0017F9 CD 14 9C         [ 4] 3898         CALL     COMPI 
      0017FC 06 3E                 3899         .word DOVAR 
      0017FE 81               [ 4] 3900         RET
                                   3901 
                                   3902 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3903 ;       VARIABLE  ( -- ; <string> )
                                   3904 ;       Compile a new variable
                                   3905 ;       initialized to 0.
                                   3906 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017FF                       3907         _HEADER VARIA,8,"VARIABLE"
      0017FF 17 E9                    1         .word LINK 
                           001801     2         LINK=.
      001801 08                       3         .byte 8  
      001802 56 41 52 49 41 42 4C     4         .ascii "VARIABLE"
             45
      00180A                          5         VARIA:
                                   3908 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      00180A CD 0C 14         [ 4] 3909         CALL HERE
      00180D CD 05 88         [ 4] 3910         CALL DUPP 
      001810 CD 0A A0         [ 4] 3911         CALL CELLP
      001813 CD 06 DF         [ 4] 3912         CALL VPP 
      001816 CD 04 D1         [ 4] 3913         CALL STORE
      001819 CD 17 F0         [ 4] 3914         CALL CREAT
      00181C CD 05 88         [ 4] 3915         CALL DUPP
      00181F CD 14 57         [ 4] 3916         CALL COMMA
      001822 CD 0B 37         [ 4] 3917         CALL ZERO
      001825 CD 05 98         [ 4] 3918         call SWAPP 
      001828 CD 04 D1         [ 4] 3919         CALL STORE
      00182B CD 20 F6         [ 4] 3920         CALL FMOVE ; move definition to FLASH
      00182E CD 07 3B         [ 4] 3921         CALL QDUP 
      001831 CD 04 98         [ 4] 3922         CALL QBRAN 
      001834 18 3D                 3923         .word SET_RAMLAST   
      001836 CD 1B 9E         [ 4] 3924         call UPDATVP  ; don't update if variable kept in RAM.
      001839 CD 21 8A         [ 4] 3925         CALL UPDATPTR
      00183C 81               [ 4] 3926         RET         
      00183D                       3927 SET_RAMLAST: 
      00183D CD 06 FD         [ 4] 3928         CALL LAST 
      001840 CD 04 E3         [ 4] 3929         CALL AT 
      001843 CD 07 10         [ 4] 3930         CALL RAMLAST 
      001846 CC 04 D1         [ 2] 3931         jp STORE  
                                   3932 
                                   3933 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3934 ;       CONSTANT  ( n -- ; <string> )
                                   3935 ;       Compile a new constant 
                                   3936 ;       n CONSTANT name 
                                   3937 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001849                       3938         _HEADER CONSTANT,8,"CONSTANT"
      001849 18 01                    1         .word LINK 
                           00184B     2         LINK=.
      00184B 08                       3         .byte 8  
      00184C 43 4F 4E 53 54 41 4E     4         .ascii "CONSTANT"
             54
      001854                          5         CONSTANT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001854 CD 11 11         [ 4] 3939         CALL TOKEN
      001857 CD 16 55         [ 4] 3940         CALL SNAME 
      00185A CD 16 E6         [ 4] 3941         CALL OVERT 
      00185D CD 14 9C         [ 4] 3942         CALL COMPI 
      001860 18 74                 3943         .word DOCONST
      001862 CD 14 57         [ 4] 3944         CALL COMMA 
      001865 CD 20 F6         [ 4] 3945         CALL FMOVE
      001868 CD 07 3B         [ 4] 3946         CALL QDUP 
      00186B CD 04 98         [ 4] 3947         CALL QBRAN 
      00186E 18 3D                 3948         .word SET_RAMLAST  
      001870 CD 21 8A         [ 4] 3949         CALL UPDATPTR  
      001873 81               [ 4] 3950 1$:     RET          
                                   3951 
                                   3952 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3953 ; CONSTANT runtime semantic 
                                   3954 ; doCONST  ( -- n )
                                   3955 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3956 ;       _HEADER DOCONST,7,"DOCONST"
                                   3957 ;        .word LINK 
      001874                       3958 DOCONST:
      001874 1D 00 02         [ 2] 3959         subw x,#CELLL
      001877 90 85            [ 2] 3960         popw y 
      001879 90 FE            [ 2] 3961         ldw y,(y) 
      00187B FF               [ 2] 3962         ldw (x),y 
      00187C 81               [ 4] 3963         ret 
                                   3964 
                                   3965 ;----------------------------------
                                   3966 ; create double constant 
                                   3967 ; 2CONSTANT ( d -- ; <string> )
                                   3968 ;----------------------------------
      00187D 18 4B                 3969     .word LINK 
                           00187F  3970     LINK=.
      00187F 09                    3971     .byte 9 
      001880 32 43 4F 4E 53 54 41  3972     .ascii "2CONSTANT"
             4E 54
      001889                       3973 DCONST:
      001889 CD 11 11         [ 4] 3974         CALL TOKEN
      00188C CD 16 55         [ 4] 3975         CALL SNAME 
      00188F CD 16 E6         [ 4] 3976         CALL OVERT 
      001892 CD 14 9C         [ 4] 3977         CALL COMPI 
      001895 18 AC                 3978         .word DO_DCONST
      001897 CD 14 57         [ 4] 3979         CALL COMMA
      00189A CD 14 57         [ 4] 3980         CALL COMMA  
      00189D CD 20 F6         [ 4] 3981         CALL FMOVE
      0018A0 CD 07 3B         [ 4] 3982         CALL QDUP 
      0018A3 CD 04 98         [ 4] 3983         CALL QBRAN 
      0018A6 18 3D                 3984         .word SET_RAMLAST  
      0018A8 CD 21 8A         [ 4] 3985         CALL UPDATPTR  
      0018AB 81               [ 4] 3986 1$:     RET          
                                   3987     
                                   3988 ;----------------------------------
                                   3989 ; runtime for DCONST 
                                   3990 ; stack double constant 
                                   3991 ; DO-DCONST ( -- d )
                                   3992 ;-----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



                                   3993 ;       _HEADER DO_DCONST,9,"DO-DCONST"
                                   3994 ;        .word LINK 
                                   3995 ;        LINK=.
                                   3996 ;        .byte 9 
                                   3997 ;        .ascii "DO-DCONST"
      0018AC                       3998 DO_DCONST:
      0018AC 90 85            [ 2] 3999     popw y 
      0018AE 90 BF 26         [ 2] 4000     ldw YTEMP,y 
      0018B1 1D 00 04         [ 2] 4001     subw x,#2*CELLL 
      0018B4 90 FE            [ 2] 4002     ldw y,(y)
      0018B6 FF               [ 2] 4003     ldw (x),y 
      0018B7 90 BE 26         [ 2] 4004     ldw y,YTEMP 
      0018BA 90 EE 02         [ 2] 4005     ldw y,(2,y)
      0018BD EF 02            [ 2] 4006     ldw (2,x),y 
      0018BF 81               [ 4] 4007     ret 
                                   4008 
                                   4009 ;; Tools
                                   4010 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4011 ;       _TYPE   ( b u -- )
                                   4012 ;       Display a string. Filter
                                   4013 ;       non-printing characters.
                                   4014 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0018C0                       4015         _HEADER UTYPE,5,"_TYPE"
      0018C0 18 7F                    1         .word LINK 
                           0018C2     2         LINK=.
      0018C2 05                       3         .byte 5  
      0018C3 5F 54 59 50 45           4         .ascii "_TYPE"
      0018C8                          5         UTYPE:
      0018C8 CD 05 51         [ 4] 4016         CALL     TOR     ;start count down loop
      0018CB 20 0F            [ 2] 4017         JRA     UTYP2   ;skip first pass
      0018CD CD 05 88         [ 4] 4018 UTYP1:  CALL     DUPP
      0018D0 CD 05 01         [ 4] 4019         CALL     CAT
      0018D3 CD 0B 61         [ 4] 4020         CALL     TCHAR
      0018D6 CD 04 36         [ 4] 4021         CALL     EMIT    ;display only printable
      0018D9 CD 0A CB         [ 4] 4022         CALL     ONEP    ;increment address
      0018DC CD 04 83         [ 4] 4023 UTYP2:  CALL     DONXT
      0018DF 18 CD                 4024         .word      UTYP1   ;loop till done
      0018E1 CC 05 7E         [ 2] 4025         JP     DROP
                                   4026 
                                   4027 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4028 ;       dm+     ( a u -- a )
                                   4029 ;       Dump u bytes from ,
                                   4030 ;       leaving a+u on  stack.
                                   4031 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0018E4                       4032         _HEADER DUMPP,3,"DM+"
      0018E4 18 C2                    1         .word LINK 
                           0018E6     2         LINK=.
      0018E6 03                       3         .byte 3  
      0018E7 44 4D 2B                 4         .ascii "DM+"
      0018EA                          5         DUMPP:
      0018EA CD 05 B0         [ 4] 4033         CALL     OVER
      0018ED CD 04 6F         [ 4] 4034         CALL     DOLIT
      0018F0 00 04                 4035         .word      4
      0018F2 CD 0F 05         [ 4] 4036         CALL     UDOTR   ;display address
      0018F5 CD 0E 6D         [ 4] 4037         CALL     SPACE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      0018F8 CD 05 51         [ 4] 4038         CALL     TOR     ;start count down loop
      0018FB 20 11            [ 2] 4039         JRA     PDUM2   ;skip first pass
      0018FD CD 05 88         [ 4] 4040 PDUM1:  CALL     DUPP
      001900 CD 05 01         [ 4] 4041         CALL     CAT
      001903 CD 04 6F         [ 4] 4042         CALL     DOLIT
      001906 00 03                 4043         .word      3
      001908 CD 0F 05         [ 4] 4044         CALL     UDOTR   ;display numeric data
      00190B CD 0A CB         [ 4] 4045         CALL     ONEP    ;increment address
      00190E CD 04 83         [ 4] 4046 PDUM2:  CALL     DONXT
      001911 18 FD                 4047         .word      PDUM1   ;loop till done
      001913 81               [ 4] 4048         RET
                                   4049 
                                   4050 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4051 ;       DUMP    ( a u -- )
                                   4052 ;       Dump u bytes from a,
                                   4053 ;       in a formatted manner.
                                   4054 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001914                       4055         _HEADER DUMP,4,"DUMP"
      001914 18 E6                    1         .word LINK 
                           001916     2         LINK=.
      001916 04                       3         .byte 4  
      001917 44 55 4D 50              4         .ascii "DUMP"
      00191B                          5         DUMP:
      00191B CD 06 4E         [ 4] 4056         CALL     BASE
      00191E CD 04 E3         [ 4] 4057         CALL     AT
      001921 CD 05 51         [ 4] 4058         CALL     TOR
      001924 CD 0D CC         [ 4] 4059         CALL     HEX     ;save radix, set hex
      001927 CD 04 6F         [ 4] 4060         CALL     DOLIT
      00192A 00 10                 4061         .word      16
      00192C CD 09 F1         [ 4] 4062         CALL     SLASH   ;change count to lines
      00192F CD 05 51         [ 4] 4063         CALL     TOR     ;start count down loop
      001932 CD 0E AF         [ 4] 4064 DUMP1:  CALL     CR
      001935 CD 04 6F         [ 4] 4065         CALL     DOLIT
      001938 00 10                 4066         .word      16
      00193A CD 07 98         [ 4] 4067         CALL     DDUP
      00193D CD 18 EA         [ 4] 4068         CALL     DUMPP   ;display numeric
      001940 CD 07 4C         [ 4] 4069         CALL     ROT
      001943 CD 07 4C         [ 4] 4070         CALL     ROT
      001946 CD 0E 6D         [ 4] 4071         CALL     SPACE
      001949 CD 0E 6D         [ 4] 4072         CALL     SPACE
      00194C CD 18 C8         [ 4] 4073         CALL     UTYPE   ;display printable characters
      00194F CD 04 83         [ 4] 4074         CALL     DONXT
      001952 19 32                 4075         .word      DUMP1   ;loop till done
      001954 CD 05 7E         [ 4] 4076 DUMP3:  CALL     DROP
      001957 CD 05 34         [ 4] 4077         CALL     RFROM
      00195A CD 06 4E         [ 4] 4078         CALL     BASE
      00195D CC 04 D1         [ 2] 4079         JP     STORE   ;restore radix
                                   4080 
                                   4081 ;       .S      ( ... -- ... )
                                   4082 ;        Display  contents of stack.
      001960 19 16                 4083         .word      LINK
                           001962  4084 LINK = . 
      001962 02                    4085         .byte      2
      001963 2E 53                 4086         .ascii     ".S"
      001965                       4087 DOTS:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001965 CD 0E AF         [ 4] 4088         CALL     CR
      001968 CD 0B 79         [ 4] 4089         CALL     DEPTH   ;stack depth
      00196B CD 05 51         [ 4] 4090         CALL     TOR     ;start count down loop
      00196E 20 09            [ 2] 4091         JRA     DOTS2   ;skip first pass
      001970 CD 05 45         [ 4] 4092 DOTS1:  CALL     RAT
      001973 CD 0B 90         [ 4] 4093 	CALL     PICK
      001976 CD 0F 56         [ 4] 4094         CALL     DOT     ;index stack, display contents
      001979 CD 04 83         [ 4] 4095 DOTS2:  CALL     DONXT
      00197C 19 70                 4096         .word      DOTS1   ;loop till done
      00197E CD 0E DC         [ 4] 4097         CALL     DOTQP
      001981 05                    4098         .byte      5
      001982 20 3C 73 70 20        4099         .ascii     " <sp "
      001987 81               [ 4] 4100         RET
                                   4101 
                                   4102 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4103 ;       >NAME   ( ca -- na | F )
                                   4104 ;       Convert code address
                                   4105 ;       to a name address.
                                   4106 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001988                       4107         _HEADER TNAME,5,">NAME"
      001988 19 62                    1         .word LINK 
                           00198A     2         LINK=.
      00198A 05                       3         .byte 5  
      00198B 3E 4E 41 4D 45           4         .ascii ">NAME"
      001990                          5         TNAME:
      001990 CD 06 D1         [ 4] 4108         CALL     CNTXT   ;vocabulary link
      001993 CD 04 E3         [ 4] 4109 TNAM2:  CALL     AT
      001996 CD 05 88         [ 4] 4110         CALL     DUPP    ;?last word in a vocabulary
      001999 CD 04 98         [ 4] 4111         CALL     QBRAN
      00199C 19 B7                 4112         .word      TNAM4
      00199E CD 07 98         [ 4] 4113         CALL     DDUP
      0019A1 CD 11 1F         [ 4] 4114         CALL     NAMET
      0019A4 CD 06 0E         [ 4] 4115         CALL     XORR    ;compare
      0019A7 CD 04 98         [ 4] 4116         CALL     QBRAN
      0019AA 19 B1                 4117         .word      TNAM3
      0019AC CD 0A AF         [ 4] 4118         CALL     CELLM   ;continue with next word
      0019AF 20 E2            [ 2] 4119         JRA     TNAM2
      0019B1 CD 05 98         [ 4] 4120 TNAM3:  CALL     SWAPP
      0019B4 CC 05 7E         [ 2] 4121         JP     DROP
      0019B7 CD 07 8D         [ 4] 4122 TNAM4:  CALL     DDROP
      0019BA CC 0B 37         [ 2] 4123         JP     ZERO
                                   4124 
                                   4125 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4126 ;       .ID     ( na -- )
                                   4127 ;        Display  name at address.
                                   4128 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0019BD                       4129         _HEADER DOTID,3,".ID"
      0019BD 19 8A                    1         .word LINK 
                           0019BF     2         LINK=.
      0019BF 03                       3         .byte 3  
      0019C0 2E 49 44                 4         .ascii ".ID"
      0019C3                          5         DOTID:
      0019C3 CD 07 3B         [ 4] 4130         CALL     QDUP    ;if zero no name
      0019C6 CD 04 98         [ 4] 4131         CALL     QBRAN
      0019C9 19 D9                 4132         .word      DOTI1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      0019CB CD 0B FD         [ 4] 4133         CALL     COUNT
      0019CE CD 04 6F         [ 4] 4134         CALL     DOLIT
      0019D1 00 1F                 4135         .word      0x1F
      0019D3 CD 05 E5         [ 4] 4136         CALL     ANDD    ;mask lexicon bits
      0019D6 CC 18 C8         [ 2] 4137         JP     UTYPE
      0019D9 CD 0E DC         [ 4] 4138 DOTI1:  CALL     DOTQP
      0019DC 09                    4139         .byte      9
      0019DD 20 6E 6F 4E 61 6D 65  4140         .ascii     " noName"
      0019E4 81               [ 4] 4141         RET
                                   4142 
                           000000  4143 WANT_SEE=0
                           000000  4144 .if WANT_SEE 
                                   4145 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4146 ;       SEE     ( -- ; <string> )
                                   4147 ;       A simple decompiler.
                                   4148 ;       Updated for byte machines.
                                   4149 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4150         _HEADER SEE,3,"SEE"
                                   4151         CALL     TICK    ;starting address
                                   4152         CALL     CR
                                   4153         CALL     ONEM
                                   4154 SEE1:   CALL     ONEP
                                   4155         CALL     DUPP
                                   4156         CALL     AT
                                   4157         CALL     DUPP
                                   4158         CALL     QBRAN
                                   4159         .word    SEE2
                                   4160         CALL     TNAME   ;?is it a name
                                   4161 SEE2:   CALL     QDUP    ;name address or zero
                                   4162         CALL     QBRAN
                                   4163         .word    SEE3
                                   4164         CALL     SPACE
                                   4165         CALL     DOTID   ;display name
                                   4166         CALL     ONEP
                                   4167         JRA      SEE4
                                   4168 SEE3:   CALL     DUPP
                                   4169         CALL     CAT
                                   4170         CALL     UDOT    ;display number
                                   4171 SEE4:   CALL     NUFQ    ;user control
                                   4172         CALL     QBRAN
                                   4173         .word    SEE1
                                   4174         JP     DROP
                                   4175 .endif ; WANT_SEE 
                                   4176 
                                   4177 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4178 ;       WORDS   ( -- )
                                   4179 ;       Display names in vocabulary.
                                   4180 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0019E5                       4181         _HEADER WORDS,5,"WORDS"
      0019E5 19 BF                    1         .word LINK 
                           0019E7     2         LINK=.
      0019E7 05                       3         .byte 5  
      0019E8 57 4F 52 44 53           4         .ascii "WORDS"
      0019ED                          5         WORDS:
      0019ED CD 0E AF         [ 4] 4182         CALL     CR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      0019F0 CD 06 D1         [ 4] 4183         CALL     CNTXT   ;only in context
      0019F3 CD 04 E3         [ 4] 4184 WORS1:  CALL     AT
      0019F6 CD 07 3B         [ 4] 4185         CALL     QDUP    ;?at end of list
      0019F9 CD 04 98         [ 4] 4186         CALL     QBRAN
      0019FC 1A 0F                 4187         .word      WORS2
      0019FE CD 05 88         [ 4] 4188         CALL     DUPP
      001A01 CD 0E 6D         [ 4] 4189         CALL     SPACE
      001A04 CD 19 C3         [ 4] 4190         CALL     DOTID   ;display a name
      001A07 CD 0A AF         [ 4] 4191         CALL     CELLM
      001A0A CD 04 B4         [ 4] 4192         CALL     BRAN
      001A0D 19 F3                 4193         .word      WORS1
      001A0F 81               [ 4] 4194 WORS2:  RET
                                   4195 
                                   4196         
                                   4197 ;; Hardware reset
                                   4198 
                                   4199 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4200 ;       hi      ( -- )
                                   4201 ;       Display sign-on message.
                                   4202 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A10                       4203         _HEADER HI,2,"HI"
      001A10 19 E7                    1         .word LINK 
                           001A12     2         LINK=.
      001A12 02                       3         .byte 2  
      001A13 48 49                    4         .ascii "HI"
      001A15                          5         HI:
      001A15 CD 0E AF         [ 4] 4204         CALL     CR
      001A18 CD 0E DC         [ 4] 4205         CALL     DOTQP   ;initialize I/O
      001A1B 0F                    4206         .byte      15
      001A1C 73 74 6D 38 65 46 6F  4207         .ascii     "stm8eForth v"
             72 74 68 20 76
      001A28 34                    4208 	.byte      VER+'0'
      001A29 2E                    4209         .byte      '.' 
      001A2A 30                    4210 	.byte      EXT+'0' ;version
      001A2B CD 0E DC         [ 4] 4211         CALL    DOTQP
                           000001  4212 .if NUCLEO          
      001A2E 12                    4213         .byte 18
      001A2F 20 6F 6E 20 4E 55 43  4214         .ascii  " on NUCLEO-8S208RB"
             4C 45 4F 2D 38 53 32
             30 38 52 42
                                   4215 .endif
                           000000  4216 .if DISCOVERY
                                   4217         .byte 19
                                   4218         .ascii  " on STM8S-DISCOVERY"
                                   4219 .endif
                           000000  4220 .if DOORBELL
                                   4221         .byte 16
                                   4222         .ascii " on stm8s105k6b6"
                                   4223 .endif
      001A41 CC 0E AF         [ 2] 4224         JP     CR
                                   4225 
                           000000  4226 WANT_DEBUG=0
                           000000  4227 .if WANT_DEBUG 
                                   4228 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4229 ;       DEBUG      ( -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                   4230 ;       Display sign-on message.
                                   4231 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4232         _HEADER DEBUG,5,"DEBUG"
                                   4233 	CALL DOLIT
                                   4234 	.word 0x65
                                   4235 	CALL EMIT
                                   4236 	CALL DOLIT
                                   4237 	.word 0
                                   4238  	CALL ZLESS 
                                   4239 	CALL DOLIT
                                   4240 	.word 0xFFFE
                                   4241 	CALL ZLESS 
                                   4242 	CALL UPLUS 
                                   4243  	CALL DROP 
                                   4244 	CALL DOLIT
                                   4245 	.word 3
                                   4246 	CALL UPLUS 
                                   4247 	CALL UPLUS 
                                   4248  	CALL DROP
                                   4249 	CALL DOLIT
                                   4250 	.word 0x43
                                   4251 	CALL UPLUS 
                                   4252  	CALL DROP
                                   4253 	CALL EMIT
                                   4254 	CALL DOLIT
                                   4255 	.word 0x4F
                                   4256 	CALL DOLIT
                                   4257 	.word 0x6F
                                   4258  	CALL XORR
                                   4259 	CALL DOLIT
                                   4260 	.word 0xF0
                                   4261  	CALL ANDD
                                   4262 	CALL DOLIT
                                   4263 	.word 0x4F
                                   4264  	CALL ORR
                                   4265 	CALL EMIT
                                   4266 	CALL DOLIT
                                   4267 	.word 8
                                   4268 	CALL DOLIT
                                   4269 	.word 6
                                   4270  	CALL SWAPP
                                   4271 	CALL OVER
                                   4272 	CALL XORR
                                   4273 	CALL DOLIT
                                   4274 	.word 3
                                   4275 	CALL ANDD 
                                   4276 	CALL ANDD
                                   4277 	CALL DOLIT
                                   4278 	.word 0x70
                                   4279 	CALL UPLUS 
                                   4280 	CALL DROP
                                   4281 	CALL EMIT
                                   4282 	CALL DOLIT
                                   4283 	.word 0
                                   4284 	CALL QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                                   4285 	.word DEBUG1
                                   4286 	CALL DOLIT
                                   4287 	.word 0x3F
                                   4288 DEBUG1:
                                   4289 	CALL DOLIT
                                   4290 	.word 0xFFFF
                                   4291 	CALL QBRAN
                                   4292 	.word DEBUG2
                                   4293 	CALL DOLIT
                                   4294 	.word 0x74
                                   4295 	CALL BRAN
                                   4296 	.word DEBUG3
                                   4297 DEBUG2:
                                   4298 	CALL DOLIT
                                   4299 	.word 0x21
                                   4300 DEBUG3:
                                   4301 	CALL EMIT
                                   4302 	CALL DOLIT
                                   4303 	.word 0x68
                                   4304 	CALL DOLIT
                                   4305 	.word 0x80
                                   4306 	CALL STORE
                                   4307 	CALL DOLIT
                                   4308 	.word 0x80
                                   4309 	CALL AT
                                   4310 	CALL EMIT
                                   4311 	CALL DOLIT
                                   4312 	.word 0x4D
                                   4313 	CALL TOR
                                   4314 	CALL RAT
                                   4315 	CALL RFROM
                                   4316 	CALL ANDD
                                   4317 	CALL EMIT
                                   4318 	CALL DOLIT
                                   4319 	.word 0x61
                                   4320 	CALL DOLIT
                                   4321 	.word 0xA
                                   4322 	CALL TOR
                                   4323 DEBUG4:
                                   4324 	CALL DOLIT
                                   4325 	.word 1
                                   4326 	CALL UPLUS 
                                   4327 	CALL DROP
                                   4328 	CALL DONXT
                                   4329 	.word DEBUG4
                                   4330 	CALL EMIT
                                   4331 	CALL DOLIT
                                   4332 	.word 0x656D
                                   4333 	CALL DOLIT
                                   4334 	.word 0x100
                                   4335 	CALL UMSTA
                                   4336 	CALL SWAPP
                                   4337 	CALL DOLIT
                                   4338 	.word 0x100
                                   4339 	CALL UMSTA
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                                   4340 	CALL SWAPP 
                                   4341 	CALL DROP
                                   4342 	CALL EMIT
                                   4343 	CALL EMIT
                                   4344 	CALL DOLIT
                                   4345 	.word 0x2043
                                   4346 	CALL DOLIT
                                   4347 	.word 0
                                   4348 	CALL DOLIT
                                   4349 	.word 0x100
                                   4350 	CALL UMMOD
                                   4351 	CALL EMIT
                                   4352 	CALL EMIT
                                   4353 	;JP ORIG
                                   4354 	RET
                                   4355 .endif ; WANT_DEBUG 
                                   4356 
                                   4357 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4358 ;       'BOOT   ( -- a )
                                   4359 ;       The application startup vector.
                                   4360 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A44                       4361         _HEADER TBOOT,5,"'BOOT"
      001A44 1A 12                    1         .word LINK 
                           001A46     2         LINK=.
      001A46 05                       3         .byte 5  
      001A47 27 42 4F 4F 54           4         .ascii "'BOOT"
      001A4C                          5         TBOOT:
      001A4C CD 06 3E         [ 4] 4362         CALL     DOVAR
      001A4F 40 02                 4363         .word    APP_RUN      ;application to boot
                                   4364 
                                   4365 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4366 ;       COLD    ( -- )
                                   4367 ;       The hilevel cold start s=ence.
                                   4368 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A51                       4369         _HEADER COLD,4,"COLD"
      001A51 1A 46                    1         .word LINK 
                           001A53     2         LINK=.
      001A53 04                       3         .byte 4  
      001A54 43 4F 4C 44              4         .ascii "COLD"
      001A58                          5         COLD:
                           000000  4370 .if WANT_DEBUG
                                   4371         CALL DEBUG
                                   4372 .endif ; WANT_DEBUG
      001A58 CD 04 6F         [ 4] 4373 COLD1:  CALL     DOLIT
      001A5B 00 2B                 4374         .word      UZERO
      001A5D CD 04 6F         [ 4] 4375 	CALL     DOLIT
      001A60 00 06                 4376         .word      UPP
      001A62 CD 04 6F         [ 4] 4377         CALL     DOLIT
      001A65 00 1C                 4378 	.word      UEND-UZERO
      001A67 CD 0C 61         [ 4] 4379         CALL     CMOVE   ;initialize user area
                           000001  4380 .if WANT_FLOAT 
      001A6A CD 2B 21         [ 4] 4381         CALL    FINIT 
                                   4382 .endif 
                                   4383 ; if APP_RUN==0 initialize with ca de 'hi'  
      001A6D 90 CE 40 02      [ 2] 4384         ldw y,APP_RUN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001A71 26 0B            [ 1] 4385         jrne 0$
      001A73 1D 00 02         [ 2] 4386         subw x,#CELLL 
      001A76 90 AE 1A 15      [ 2] 4387         ldw y,#HI  
      001A7A FF               [ 2] 4388         ldw (x),y
      001A7B CD 1B 76         [ 4] 4389         call UPDATRUN 
      001A7E                       4390 0$:        
                                   4391 ; update LAST with APP_LAST 
                                   4392 ; if APP_LAST > LAST else do the opposite
      001A7E 90 CE 40 00      [ 2] 4393         ldw y,APP_LAST 
      001A82 90 B3 1C         [ 2] 4394         cpw y,ULAST 
      001A85 22 05            [ 1] 4395         jrugt 1$ 
                                   4396 ; save LAST at APP_LAST  
      001A87 CD 1B 5E         [ 4] 4397         call UPDATLAST 
      001A8A 20 06            [ 2] 4398         jra 2$
      001A8C                       4399 1$: ; update LAST with APP_LAST 
      001A8C 90 BF 1C         [ 2] 4400         ldw ULAST,y
      001A8F 90 BF 16         [ 2] 4401         ldw UCNTXT,y
      001A92                       4402 2$:  
                                   4403 ; update APP_CP if < app_space 
      001A92 90 CE 40 04      [ 2] 4404         ldw y,APP_CP  
      001A96 90 B3 1A         [ 2] 4405         cpw y,UCP   
      001A99 24 06            [ 1] 4406         jruge 3$ 
      001A9B CD 1B 87         [ 4] 4407         call UPDATCP
      001A9E 90 BE 1A         [ 2] 4408         ldw y,UCP   
      001AA1                       4409 3$:
      001AA1 90 BF 1A         [ 2] 4410         ldw UCP,y                 
                                   4411 ; update UVP with APP_VP  
                                   4412 ; if APP_VP>UVP else do the opposite 
      001AA4 90 CE 40 06      [ 2] 4413         ldw y,APP_VP 
      001AA8 90 B3 18         [ 2] 4414         cpw y,UVP 
      001AAB 22 05            [ 1] 4415         jrugt 4$
      001AAD CD 1B 9E         [ 4] 4416         call UPDATVP 
      001AB0 20 03            [ 2] 4417         jra 6$
      001AB2                       4418 4$: ; update UVP with APP_VP 
      001AB2 90 BF 18         [ 2] 4419         ldw UVP,y 
      001AB5                       4420 6$:      
      001AB5 CD 14 02         [ 4] 4421         CALL     PRESE   ;initialize data stack and TIB
      001AB8 CD 1A 4C         [ 4] 4422         CALL     TBOOT
      001ABB CD 0C 4A         [ 4] 4423         CALL     ATEXE   ;application boot
      001ABE CD 16 E6         [ 4] 4424         CALL     OVERT
      001AC1 CC 14 1F         [ 2] 4425         JP     QUIT    ;start interpretation
                                   4426 
                                   4427 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



                                   4428         .include "flash.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;  routines to write to FLASH, EEPROM 
                                     23 ;  and OPTION 
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27 ;--------------------------------
                                     28 ; initialize FPTR 
                                     29 ; FP!  ( ud -- )
                                     30 ;---------------------------------
      001AC4 1A 53                   31     .word LINK 
                           001AC6    32     LINK=.
      001AC6 03                      33     .byte 3 
      001AC7 46 50 21                34     .ascii "FP!"
      001ACA                         35 FPSTOR:
      001ACA 90 93            [ 1]   36     ldw y,x
      001ACC 90 FE            [ 2]   37     ldw y,(y)
      001ACE 90 9F            [ 1]   38     ld a,yl 
      001AD0 B7 34            [ 1]   39     ld FPTR,a 
      001AD2 1C 00 02         [ 2]   40     addw x,#CELLL 
      001AD5 90 93            [ 1]   41     ldw y,x 
      001AD7 90 FE            [ 2]   42     ldw y,(y)
      001AD9 90 BF 35         [ 2]   43     ldw PTR16,y
      001ADC 1C 00 02         [ 2]   44     addw x,#CELLL 
      001ADF 81               [ 4]   45     ret 
                                     46 
                                     47 ;-----------------------------------
                                     48 ; return EEPROM base address 
                                     49 ; as a double 
                                     50 ;  EEPROM  ( -- ud )
                                     51 ;-----------------------------------
      001AE0 1A C6                   52     .word LINK 
                           001AE2    53 LINK=.
      001AE2 06                      54     .byte 6 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      001AE3 45 45 50 52 4F 4D       55     .ascii "EEPROM"
      001AE9                         56 EEPROM: 
      001AE9 90 AE 40 00      [ 2]   57     ldw y,#EEPROM_BASE
      001AED 1D 00 04         [ 2]   58     subw x,#2*CELLL 
      001AF0 EF 02            [ 2]   59     ldw (2,x),y 
      001AF2 90 5F            [ 1]   60     clrw y 
      001AF4 FF               [ 2]   61     ldw (x),y 
      001AF5 81               [ 4]   62     ret
                                     63 
                                     64 ;---------------------------------
                                     65 ; return APP_LAST pointer as double
                                     66 ; EEP-LAST ( -- ud )
                                     67 ;---------------------------------
      001AF6 1A E2                   68 	.word LINK 
                           001AF8    69 	LINK=.
      001AF8 08                      70 	.byte 8 
      001AF9 45 45 50 2D 4C 41 53    71 	.ascii "EEP-LAST"
             54
      001B01                         72 EEPLAST:
      001B01 1D 00 04         [ 2]   73 	subw x,#2*CELLL 
      001B04 90 AE 40 00      [ 2]   74 	ldw y,#APP_LAST 
      001B08 EF 02            [ 2]   75 	ldw (2,x),y 
      001B0A 90 5F            [ 1]   76 	clrw y 
      001B0C FF               [ 2]   77 	ldw (x),y 
      001B0D 81               [ 4]   78 	ret 
                                     79 
                                     80 ;----------------------------------
                                     81 ; return APP_RUN pointer as double	
                                     82 ; EEP-RUN ( -- ud )
                                     83 ;-----------------------------------
      001B0E 1A F8                   84 	.word LINK 
                           001B10    85 	LINK=.
      001B10 07                      86 	.byte 7
      001B11 45 45 50 2D 52 55 4E    87 	.ascii "EEP-RUN"
      001B18                         88 EEPRUN:
      001B18 1D 00 04         [ 2]   89 	subw x,#2*CELLL 
      001B1B 90 AE 40 02      [ 2]   90 	ldw y,#APP_RUN 
      001B1F EF 02            [ 2]   91 	ldw (2,x),y 
      001B21 90 5F            [ 1]   92 	clrw y 
      001B23 FF               [ 2]   93 	ldw (x),y 
      001B24 81               [ 4]   94 	ret 
                                     95 
                                     96 ;------------------------------------
                                     97 ; return APP_CP pointer as double 
                                     98 ; EEP-CP ( -- ud )
                                     99 ;------------------------------------
      001B25 1B 10                  100 	.word LINK
                           001B27   101 	LINK=.
      001B27 06                     102 	.byte 6 
      001B28 45 45 50 2D 43 50      103 	.ascii "EEP-CP"
      001B2E                        104 EEPCP:
      001B2E 1D 00 04         [ 2]  105 	subw x,#2*CELLL 
      001B31 90 AE 40 04      [ 2]  106 	ldw y,#APP_CP  
      001B35 EF 02            [ 2]  107 	ldw (2,x),y 
      001B37 90 5F            [ 1]  108 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      001B39 FF               [ 2]  109 	ldw (x),y 
      001B3A 81               [ 4]  110 	ret 
                                    111 
                                    112 ;------------------------------------
                                    113 ; return APP_VP pointer as double 
                                    114 ; EEP-VP ( -- ud )
                                    115 ;-------------------------------------
      001B3B 1B 27                  116 	.word LINK
                           001B3D   117 	LINK=.
      001B3D 06                     118 	.byte 6
      001B3E 45 45 50 2D 56 50      119 	.ascii "EEP-VP"
      001B44                        120 EEPVP:
      001B44 1D 00 04         [ 2]  121 	subw x,#2*CELLL 
      001B47 90 AE 40 06      [ 2]  122 	ldw y,#APP_VP  
      001B4B EF 02            [ 2]  123 	ldw (2,x),y 
      001B4D 90 5F            [ 1]  124 	clrw y 
      001B4F FF               [ 2]  125 	ldw (x),y 
      001B50 81               [ 4]  126 	ret 
                                    127 
                                    128 ;----------------------------------
                                    129 ; update APP_LAST with LAST 
                                    130 ; UPDAT-LAST ( -- )
                                    131 ;----------------------------------
      001B51 1B 3D                  132 	.word LINK 
                           001B53   133 	LINK=.
      001B53 0A                     134 	.byte 10
      001B54 55 50 44 41 54 2D 4C   135 	.ascii "UPDAT-LAST"
             41 53 54
      001B5E                        136 UPDATLAST:
      001B5E CD 06 FD         [ 4]  137 	call LAST
      001B61 CD 04 E3         [ 4]  138 	call AT  
      001B64 CD 1B 01         [ 4]  139 	call EEPLAST
      001B67 CC 1D 54         [ 2]  140 	jp EESTORE 
                                    141 
                                    142 ;---------------------------------
                                    143 ; update APP_RUN 
                                    144 ; UPDAT-RUN ( a -- )
                                    145 ;---------------------------------
      001B6A 1B 53                  146 	.word LINK
                           001B6C   147 	LINK=.
      001B6C 09                     148 	.byte 9
      001B6D 55 50 44 41 54 2D 52   149 	.ascii "UPDAT-RUN"
             55 4E
      001B76                        150 UPDATRUN:
      001B76 CD 1B 18         [ 4]  151 	call EEPRUN
      001B79 CC 1D 54         [ 2]  152 	jp EESTORE 
                                    153 	
                                    154 ;---------------------------------
                                    155 ; update APP_CP with CP 
                                    156 ; UPDAT-CP ( -- )
                                    157 ;---------------------------------
      001B7C 1B 6C                  158 	.word LINK 
                           001B7E   159 	LINK=.
      001B7E 08                     160 	.byte 8 
      001B7F 55 50 44 41 54 2D 43   161 	.ascii "UPDAT-CP"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



             50
      001B87                        162 UPDATCP:
      001B87 CD 06 ED         [ 4]  163 	call CPP 
      001B8A CD 04 E3         [ 4]  164 	call AT 
      001B8D CD 1B 2E         [ 4]  165 	call EEPCP 
      001B90 CC 1D 54         [ 2]  166 	jp EESTORE 
                                    167 
                                    168 ;----------------------------------
                                    169 ; update APP_VP with VP 
                                    170 ; UPDAT-VP ( -- )
                                    171 ;----------------------------------
      001B93 1B 7E                  172 	.word LINK
                           001B95   173 	LINK=.
      001B95 08                     174 	.byte 8 
      001B96 55 50 44 41 54 2D 56   175 	.ascii "UPDAT-VP" 
             50
      001B9E                        176 UPDATVP:
      001B9E CD 06 DF         [ 4]  177 	call VPP 
      001BA1 CD 04 E3         [ 4]  178 	call AT
      001BA4 CD 1B 44         [ 4]  179 	call EEPVP 
      001BA7 CC 1D 54         [ 2]  180 	jp EESTORE
                                    181 	
                           000001   182 .if NUCLEO
                                    183 ;----------------------------------
                                    184 ; fetch integer at address over 65535
                                    185 ;  F@   ( ud -- n )
                                    186 ;----------------------------------
      001BAA 1B 95                  187     .word LINK 
                           001BAC   188 LINK=.
      001BAC 02                     189     .byte 2
      001BAD 46 40                  190     .ascii "F@"
      001BAF                        191 FARAT:
      001BAF CD 1A CA         [ 4]  192     call FPSTOR
      001BB2 CC 1C 77         [ 2]  193 	jp EE_READ 
                                    194 
                                    195 
                                    196 ;-------------------------------------
                                    197 ; fetch C at address over 65535 
                                    198 ; FC@ ( ud -- c)
                                    199 ;-------------------------------------
      001BB5 1B AC                  200     .word LINK
                           001BB7   201     LINK=.
      001BB7 03                     202     .byte 3 
      001BB8 46 43 40               203     .ascii "FC@" 
      001BBB                        204 FARCAT:
      001BBB CD 1A CA         [ 4]  205     call FPSTOR
      001BBE CC 1C 99         [ 2]  206 	jp EE_CREAD  
                                    207 .endif ; NUCLEO 
                                    208 
                                    209 ;----------------------------------
                                    210 ; UNLOCK EEPROM/OPT for writing/erasing
                                    211 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    212 ;  UNLKEE   ( -- )
                                    213 ;----------------------------------
      001BC1 1B B7                  214     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



                           001BC3   215 LINK=.
      001BC3 06                     216     .byte 6 
      001BC4 55 4E 4C 4B 45 45      217     .ascii "UNLKEE"
      001BCA                        218 UNLKEE:
      001BCA 35 00 50 5B      [ 1]  219 	mov FLASH_CR2,#0 
      001BCE 35 FF 50 5C      [ 1]  220 	mov FLASH_NCR2,#0xFF 
      001BD2 35 AE 50 64      [ 1]  221 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001BD6 35 56 50 64      [ 1]  222     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001BDA 72 07 50 5F FB   [ 2]  223 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001BDF 81               [ 4]  224 	ret
                                    225 
                                    226 ;----------------------------------
                                    227 ; UNLOCK FLASH for writing/erasing
                                    228 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    229 ; UNLKFL  ( -- )
                                    230 ;----------------------------------
      001BE0 1B C3                  231     .word LINK 
                           001BE2   232 LINK=. 
      001BE2 06                     233     .byte 6 
      001BE3 55 4E 4C 4B 46 4C      234     .ascii "UNLKFL"    
      001BE9                        235 UNLKFL:
      001BE9 35 00 50 5B      [ 1]  236 	mov FLASH_CR2,#0 
      001BED 35 FF 50 5C      [ 1]  237 	mov FLASH_NCR2,#0xFF 
      001BF1 35 56 50 62      [ 1]  238 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001BF5 35 AE 50 62      [ 1]  239 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001BF9 72 03 50 5F FB   [ 2]  240 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001BFE 81               [ 4]  241 	ret
                                    242 
                                    243 ;-----------------------------
                                    244 ; UNLOCK FLASH or EEPROM 
                                    245 ; according to FPTR address 
                                    246 ;  UNLOCK ( -- )
                                    247 ;-----------------------------
      001BFF 1B E2                  248 	.word LINK 
                           001C01   249 	LINK=.
      001C01 06                     250 	.byte 6
      001C02 55 4E 4C 4F 43 4B      251 	.ascii "UNLOCK"
      001C08                        252 UNLOCK:
                                    253 ; put addr[15:0] in Y, for bounds check.
      001C08 90 BE 35         [ 2]  254 	ldw y,PTR16   ; Y=addr15:0
                                    255 ; check addr[23:16], if <> 0 then it is extened flash memory
      001C0B 3D 34            [ 1]  256 	tnz FPTR 
      001C0D 26 16            [ 1]  257 	jrne 4$
      001C0F 90 A3 80 00      [ 2]  258     cpw y,#FLASH_BASE
      001C13 24 10            [ 1]  259     jruge 4$
      001C15 90 A3 40 00      [ 2]  260 	cpw y,#EEPROM_BASE  
      001C19 25 0D            [ 1]  261     jrult 9$
      001C1B 90 A3 48 7F      [ 2]  262 	cpw y,#OPTION_END 
      001C1F 22 07            [ 1]  263 	jrugt 9$
      001C21 CD 1B CA         [ 4]  264 	call UNLKEE
      001C24 81               [ 4]  265 	ret 
      001C25 CD 1B E9         [ 4]  266 4$: call UNLKFL
      001C28 81               [ 4]  267 9$: ret 
                                    268 
                                    269 ;-------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



                                    270 ; LOCK write access to 
                                    271 ; FLASH and EEPROM 
                                    272 ; LOCK ( -- )
                                    273 ;-------------------------
      001C29 1C 01                  274 	.word LINK 
                           001C2B   275 	LINK=.
      001C2B 04                     276 	.byte 4 
      001C2C 4C 4F 43 4B            277 	.ascii "LOCK" 
      001C30                        278 LOCK: 
      001C30 72 13 50 5F      [ 1]  279 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001C34 72 17 50 5F      [ 1]  280 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001C38 81               [ 4]  281 	ret 
                                    282 
                                    283 ;-------------------------
                                    284 ; increment FPTR 
                                    285 ; INC-FPTR ( -- )
                                    286 ;-------------------------
      001C39 1C 2B                  287 	.word LINK 
                           001C3B   288 	LINK=. 
      001C3B 08                     289 	.byte 8 
      001C3C 49 4E 43 2D 46 50 54   290 	.ascii "INC-FPTR" 
             52
      001C44                        291 INC_FPTR:
      001C44 3C 36            [ 1]  292 	inc PTR8 
      001C46 26 0C            [ 1]  293 	jrne 1$
      001C48 90 89            [ 2]  294 	pushw y 
      001C4A 90 BE 34         [ 2]  295 	ldw y,FPTR 
      001C4D 90 5C            [ 1]  296 	incw y 
      001C4F 90 BF 34         [ 2]  297 	ldw FPTR,y
      001C52 90 85            [ 2]  298 	popw y  
      001C54 81               [ 4]  299 1$: ret 
                                    300 
                                    301 ;------------------------------
                                    302 ; add u to FPTR 
                                    303 ; PTR+ ( u -- )
                                    304 ;------------------------------
      001C55 1C 3B                  305 	.word LINK 
                           001C57   306 	LINK=.
      001C57 04                     307 	.byte 4 
      001C58 50 54 52 2B            308 	.ascii "PTR+"
      001C5C                        309 PTRPLUS:
      001C5C 90 93            [ 1]  310 	ldw y,x 
      001C5E 1C 00 02         [ 2]  311 	addw x,#CELLL 
      001C61 72 B9 00 35      [ 2]  312 	addw y,PTR16 
      001C65 90 BF 35         [ 2]  313 	ldw PTR16,y  
      001C68 24 02            [ 1]  314 	jrnc 1$
      001C6A 3C 34            [ 1]  315 	inc FPTR 
      001C6C 81               [ 4]  316 1$: ret 
                                    317 
                                    318 ;---------------------------------
                                    319 ; read word at address pointed FPTR
                                    320 ; increment FPTR 
                                    321 ; EE-READ ( -- w )
                                    322 ;------------------------------------
      001C6D 1C 57                  323 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



                           001C6F   324 	LINK=.
      001C6F 07                     325 	.byte 7 
      001C70 45 45 2D 52 45 41 44   326 	.ascii "EE-READ"
      001C77                        327 EE_READ:
      001C77 1D 00 02         [ 2]  328 	subw x,#CELLL 
      001C7A 92 BC 00 34      [ 5]  329 	ldf a,[FPTR]
      001C7E 90 95            [ 1]  330 	ld yh,a 
      001C80 CD 1C 44         [ 4]  331 	call INC_FPTR 
      001C83 92 BC 00 34      [ 5]  332 	ldf a,[FPTR]
      001C87 CD 1C 44         [ 4]  333 	call INC_FPTR 
      001C8A 90 97            [ 1]  334 	ld yl,a 
      001C8C FF               [ 2]  335 	ldw (x),y 
      001C8D 81               [ 4]  336 	ret 
                                    337 
                                    338 ;---------------------------------------
                                    339 ; Read byte at address pointed by FPTR 
                                    340 ; EE-CREAD ( -- c )
                                    341 ;---------------------------------------
      001C8E 1C 6F                  342 	.word LINK 
                           001C90   343 	LINK=.
      001C90 08                     344 	.byte 8
      001C91 45 45 2D 43 52 45 41   345 	.ascii "EE-CREAD" 
             44
      001C99                        346 EE_CREAD:
      001C99 1D 00 02         [ 2]  347 	subw x,#CELLL 
      001C9C 92 BC 00 34      [ 5]  348 	ldf a,[FPTR]	
      001CA0 CD 1C 44         [ 4]  349 	call INC_FPTR
      001CA3 90 5F            [ 1]  350 	clrw y 
      001CA5 90 97            [ 1]  351 	ld yl,a 
      001CA7 FF               [ 2]  352 	ldw (x),y 
      001CA8 81               [ 4]  353 	ret 
                                    354 
                                    355 ;----------------------------
                                    356 ; write a byte at address pointed 
                                    357 ; by FPTR and increment FPTR.
                                    358 ; Expect pointer already initialized 
                                    359 ; and memory unlocked 
                                    360 ; WR-BYTE ( c -- )
                                    361 ;----------------------------
      001CA9 1C 90                  362 	.word LINK 
                           001CAB   363 	LINK=. 
      001CAB 07                     364 	.byte 7 
      001CAC 57 52 2D 42 59 54 45   365 	.ascii "WR-BYTE" 
                                    366 
      001CB3                        367 WR_BYTE:
      001CB3 CD 04 63         [ 4]  368 	call FC_XOFF
      001CB6 90 93            [ 1]  369 	ldw y,x 
      001CB8 90 FE            [ 2]  370 	ldw y,(y)
      001CBA 1C 00 02         [ 2]  371 	addw x,#CELLL 
      001CBD 90 9F            [ 1]  372 	ld a,yl
      001CBF 92 BD 00 34      [ 4]  373 	ldf [FPTR],a
      001CC3 72 05 50 5F FB   [ 2]  374 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001CC8 CD 04 4D         [ 4]  375 	call FC_XON
      001CCB CC 1C 44         [ 2]  376 	jp INC_FPTR 
                                    377 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



                                    378 ;---------------------------------------
                                    379 ; write a word at address pointed 
                                    380 ; by FPTR and increment FPTR 
                                    381 ; Expect pointer already initialzed 
                                    382 ; and memory unlocked 
                                    383 ; WR-WORD ( w -- )
                                    384 ;---------------------------------------
      001CCE 1C AB                  385 	.word LINK 
                           001CD0   386 	LINK=.
      001CD0 07                     387 	.byte 7 
      001CD1 57 52 2D 57 4F 52 44   388 	.ascii "WR-WORD" 
      001CD8                        389 WR_WORD:
      001CD8 CD 04 63         [ 4]  390 	call FC_XOFF
      001CDB 90 93            [ 1]  391 	ldw y,x
      001CDD 90 FE            [ 2]  392 	ldw y,(y)
      001CDF 1C 00 02         [ 2]  393 	addw x,#CELLL 
      001CE2 90 9E            [ 1]  394 	ld a,yh 
      001CE4 92 BD 00 34      [ 4]  395 	ldf [FPTR],a
      001CE8 72 05 50 5F FB   [ 2]  396 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001CED CD 1C 44         [ 4]  397 	call INC_FPTR 
      001CF0 90 9F            [ 1]  398 	ld a,yl 
      001CF2 92 BD 00 34      [ 4]  399 	ldf [FPTR],a
      001CF6 72 05 50 5F FB   [ 2]  400 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001CFB CD 04 4D         [ 4]  401 	call FC_XON
      001CFE CC 1C 44         [ 2]  402 	jp INC_FPTR 
                                    403 
                                    404 
                                    405 ;---------------------------------------
                                    406 ; write a byte to FLASH or EEPROM/OPTION  
                                    407 ; EEC!  (c ud -- )
                                    408 ;---------------------------------------
      001D01 1C D0                  409     .word LINK 
                           001D03   410 	LINK=.
      001D03 04                     411     .byte 4 
      001D04 45 45 43 21            412     .ascii "EEC!"
                                    413 	; local variables 
                           000001   414 	BTW = 1   ; byte to write offset on stack
                           000002   415     OPT = 2 
                           000002   416 	VSIZE = 2
      001D08                        417 EECSTORE:
      001D08 52 02            [ 2]  418 	sub sp,#VSIZE
      001D0A CD 1A CA         [ 4]  419     call FPSTOR
      001D0D E6 01            [ 1]  420 	ld a,(1,x)
      001D0F 43               [ 1]  421 	cpl a 
      001D10 6B 01            [ 1]  422 	ld (BTW,sp),a ; byte to write 
      001D12 0F 02            [ 1]  423 	clr (OPT,sp)  ; OPTION flag
      001D14 CD 1C 08         [ 4]  424 	call UNLOCK 
                                    425 	; check if option
      001D17 3D 34            [ 1]  426 	tnz FPTR 
      001D19 26 19            [ 1]  427 	jrne 2$
      001D1B 90 BE 35         [ 2]  428 	ldw y,PTR16 
      001D1E 90 A3 48 00      [ 2]  429 	cpw y,#OPTION_BASE
      001D22 2B 10            [ 1]  430 	jrmi 2$
      001D24 90 A3 48 80      [ 2]  431 	cpw y,#OPTION_END+1
      001D28 2A 0A            [ 1]  432 	jrpl 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      001D2A 03 02            [ 1]  433 	cpl (OPT,sp)
                                    434 	; OPTION WRITE require this UNLOCK 
      001D2C 72 1E 50 5B      [ 1]  435     bset FLASH_CR2,#FLASH_CR2_OPT
      001D30 72 1F 50 5C      [ 1]  436     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001D34                        437 2$: 
      001D34 CD 1C B3         [ 4]  438 	call WR_BYTE 	
      001D37 0D 02            [ 1]  439 	tnz (OPT,sp)
      001D39 27 0D            [ 1]  440 	jreq 3$ 
      001D3B 7B 01            [ 1]  441     ld a,(BTW,sp)
      001D3D 90 5F            [ 1]  442     clrw y
      001D3F 90 97            [ 1]  443 	ld yl,a 
      001D41 1D 00 02         [ 2]  444 	subw x,#CELLL 
      001D44 FF               [ 2]  445 	ldw (x),y 
      001D45 CD 1C B3         [ 4]  446 	call WR_BYTE
      001D48                        447 3$: 
      001D48 CD 1C 30         [ 4]  448 	call LOCK 
      001D4B 5B 02            [ 2]  449 	addw sp,#VSIZE 
      001D4D 81               [ 4]  450     ret
                                    451 
                                    452 ;------------------------------
                                    453 ; write integer in FLASH|EEPROM
                                    454 ; EE! ( n ud -- )
                                    455 ;------------------------------
      001D4E 1D 03                  456 	.word LINK 
                           001D50   457 	LINK=.
      001D50 03                     458 	.byte 3 
      001D51 45 45 21               459 	.ascii "EE!"
      001D54                        460 EESTORE:
      001D54 CD 1A CA         [ 4]  461 	call FPSTOR 
      001D57 CD 1C 08         [ 4]  462 	call UNLOCK 
      001D5A 90 93            [ 1]  463 	ldw y,x 
      001D5C 90 FE            [ 2]  464 	ldw y,(y)
      001D5E 90 89            [ 2]  465 	pushw y 
      001D60 90 5E            [ 1]  466 	swapw y 
      001D62 FF               [ 2]  467 	ldw (x),y 
      001D63 CD 1C B3         [ 4]  468 	call WR_BYTE 
      001D66 90 85            [ 2]  469 	popw y 
      001D68 1D 00 02         [ 2]  470 	subw x,#CELLL
      001D6B FF               [ 2]  471 	ldw (x),y 
      001D6C CD 1C B3         [ 4]  472 	call WR_BYTE
      001D6F CC 1C 30         [ 2]  473 	jp LOCK 
                                    474 
                                    475 
                                    476 ;----------------------------
                                    477 ; Erase flash memory row 
                                    478 ; stm8s208 as 128 bytes rows
                                    479 ; ROW-ERASE ( ud -- )
                                    480 ;----------------------------
      001D72 1D 50                  481 	.word LINK 
                           001D74   482 	LINK=. 
      001D74 09                     483 	.byte 9 
      001D75 52 4F 57 2D 45 52 41   484 	.ascii "ROW-ERASE" 
             53 45
      001D7E                        485 row_erase:
      001D7E CD 04 63         [ 4]  486 	call FC_XOFF
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      001D81 CD 1A CA         [ 4]  487 	call FPSTOR
                                    488 ;code must be execute from RAM 
                                    489 ;copy routine to PAD 
      001D84 1D 00 02         [ 2]  490 	subw x,#CELLL 
      001D87 90 AE 1D D7      [ 2]  491 	ldw y,#row_erase_proc
      001D8B FF               [ 2]  492 	ldw (x),y 
      001D8C CD 0C 25         [ 4]  493 	call PAD 
      001D8F 90 AE 1D FE      [ 2]  494 	ldw y,#row_erase_proc_end 
      001D93 72 A2 1D D7      [ 2]  495 	subw y,#row_erase_proc
      001D97 1D 00 02         [ 2]  496 	subw x,#CELLL 
      001D9A FF               [ 2]  497 	ldw (x),y 
      001D9B CD 0C 61         [ 4]  498 	call CMOVE 
      001D9E                        499 block_erase:
      001D9E 90 BE 35         [ 2]  500 	ldw y,FPTR+1
      001DA1 90 A3 32 80      [ 2]  501 	cpw y,#app_space 
      001DA5 2A 19            [ 1]  502 	jrpl erase_flash 
                                    503 ; erase EEPROM block
      001DA7 90 A3 40 00      [ 2]  504 	cpw y,#EEPROM_BASE 
      001DAB 24 04            [ 1]  505 	jruge 1$
      001DAD CD 04 4D         [ 4]  506 	call FC_XON
      001DB0 81               [ 4]  507 	ret ; bad address 
      001DB1 90 A3 47 FF      [ 2]  508 1$: cpw y,#EEPROM_END 
      001DB5 23 04            [ 2]  509 	jrule 2$ 
      001DB7 CD 04 4D         [ 4]  510 	call FC_XON
      001DBA 81               [ 4]  511 	ret ; bad address 
      001DBB                        512 2$:	
      001DBB CD 1B CA         [ 4]  513 	call UNLKEE 
      001DBE 20 03            [ 2]  514 	jra proceed_erase
                                    515 ; erase flash block:
      001DC0                        516 erase_flash:
      001DC0 CD 1B E9         [ 4]  517 	call UNLKFL 
      001DC3                        518 proceed_erase:
      001DC3 CD 0C 25         [ 4]  519 	call PAD 
      001DC6 90 93            [ 1]  520 	ldw y,x
      001DC8 90 FE            [ 2]  521 	ldw y,(y)
      001DCA 1C 00 02         [ 2]  522 	addw x,#CELLL  
      001DCD 90 FD            [ 4]  523 	call (y) 
      001DCF 72 17 50 5F      [ 1]  524 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001DD3 CD 04 4D         [ 4]  525 	call FC_XON
      001DD6 81               [ 4]  526 	ret 
                                    527 
                                    528 ; this routine is to be copied to PAD 
      001DD7                        529 row_erase_proc:
      001DD7 35 20 50 5B      [ 1]  530 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001DDB 35 DF 50 5C      [ 1]  531 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001DDF 4F               [ 1]  532 	clr a 
      001DE0 90 5F            [ 1]  533 	clrw y 
      001DE2 91 A7 00 34      [ 1]  534 	ldf ([FPTR],y),a
      001DE6 90 5C            [ 1]  535     incw y
      001DE8 91 A7 00 34      [ 1]  536 	ldf ([FPTR],y),a
      001DEC 90 5C            [ 1]  537     incw y
      001DEE 91 A7 00 34      [ 1]  538 	ldf ([FPTR],y),a
      001DF2 90 5C            [ 1]  539     incw y
      001DF4 91 A7 00 34      [ 1]  540 	ldf ([FPTR],y),a
      001DF8 72 05 50 5F FB   [ 2]  541 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      001DFD 81               [ 4]  542 	ret
      001DFE                        543 row_erase_proc_end:
                                    544 
                                    545 
                                    546 ;-----------------------------------
                                    547 ; block programming must be 
                                    548 ; executed from RAM 
                                    549 ; initial contidions: 
                                    550 ; 		memory unlocked
                                    551 ;       FPTR initialized 
                                    552 ; input: 
                                    553 ;    x   buffer address 
                                    554 ;-----------------------------------
                           000001   555 	BCNT=1 
      001DFE                        556 copy_buffer:
      001DFE 4B 80            [ 1]  557 	push #BLOCK_SIZE  
                                    558 ;enable block programming 
      001E00 72 10 50 5B      [ 1]  559 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001E04 72 11 50 5C      [ 1]  560 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001E08 90 5F            [ 1]  561 	clrw y
      001E0A F6               [ 1]  562 1$:	ld a,(x)
      001E0B 91 A7 00 34      [ 1]  563 	ldf ([FPTR],y),a
      001E0F 5C               [ 1]  564 	incw x 
      001E10 90 5C            [ 1]  565 	incw y 
      001E12 0A 01            [ 1]  566 	dec (BCNT,sp)
      001E14 26 F4            [ 1]  567 	jrne 1$
                                    568 ; wait EOP bit 
      001E16 72 05 50 5F FB   [ 2]  569 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001E1B 84               [ 1]  570 	pop a ; remove BCNT from stack 
      001E1C 81               [ 4]  571 	ret 
      001E1D                        572 copy_buffer_end:
                                    573 
                                    574 ;-------------------------
                                    575 ; move program_row to RAM 
                                    576 ; in TIB 
                                    577 ;------------------------
      001E1D                        578 copy_prog_to_ram:
      001E1D 1D 00 06         [ 2]  579 	subw x,#6
      001E20 90 AE 1D FE      [ 2]  580 	ldw y,#copy_buffer 
      001E24 EF 04            [ 2]  581 	ldw (4,x),y 
      001E26 90 AE 17 00      [ 2]  582 	ldw y,#TIBBASE
      001E2A EF 02            [ 2]  583 	ldw (2,x),y 
      001E2C 90 AE 1E 1D      [ 2]  584 	ldw y,#copy_buffer_end 
      001E30 72 A2 1D FE      [ 2]  585 	subw y,#copy_buffer  
      001E34 FF               [ 2]  586 	ldw (x),y 
      001E35 CD 0C 61         [ 4]  587 	call CMOVE 
      001E38 81               [ 4]  588 	ret 
                                    589 
                                    590 
                                    591 ;-----------------------------
                                    592 ; write a row in FLASH/EEPROM 
                                    593 ; WR-ROW ( a ud -- )
                                    594 ; a -> address 128 byte buffer to write 
                                    595 ; ud ->  row address in FLASH|EEPROM 
                                    596 ;-----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



      001E39 1D 74                  597 	.word LINK 
                           001E3B   598 	LINK=.
      001E3B 06                     599 	.byte 6 
      001E3C 57 52 2D 52 4F 57      600 	.ascii "WR-ROW"
      001E42                        601 write_row:
      001E42 CD 04 63         [ 4]  602 	call FC_XOFF
      001E45 CD 1A CA         [ 4]  603 	call FPSTOR
                                    604 ; align to FLASH block 
      001E48 A6 80            [ 1]  605 	ld a,#0x80 
      001E4A B4 36            [ 1]  606 	and a,PTR8 
      001E4C B7 36            [ 1]  607 	ld PTR8,a  
      001E4E CD 1E 1D         [ 4]  608 	call copy_prog_to_ram
      001E51 CD 1C 08         [ 4]  609 	call UNLOCK
      001E54 90 93            [ 1]  610 	ldw y,x 
      001E56 90 FE            [ 2]  611 	ldw y,(y)
      001E58 1C 00 02         [ 2]  612 	addw x,#CELLL 
      001E5B 89               [ 2]  613 	pushw x 
      001E5C 93               [ 1]  614 	ldw x,y ; buffer address in x 
      001E5D CD 17 00         [ 4]  615 	call TIBBASE
      001E60 CD 1C 30         [ 4]  616 	call LOCK
      001E63 85               [ 2]  617 	popw x 
      001E64 CD 04 4D         [ 4]  618 	call FC_XON 
      001E67 81               [ 4]  619 	ret 
                                    620 
                                    621 ;-------------------------------------
                                    622 ; change value of OPTION register 
                                    623 ; SET-OPT (c n -- ) 
                                    624 ; c new value.
                                    625 ; n OPT  number {1..7}
                                    626 ;--------------------------------------
      001E68 1E 3B                  627 		.word LINK 
                           001E6A   628 		LINK=.
      001E6A 07                     629 		.byte 7 
      001E6B 53 45 54 2D 4F 50 54   630 		.ascii "SET-OPT" 
      001E72                        631 set_option: 
      001E72 90 93            [ 1]  632 		ldw y,x 
      001E74 90 FE            [ 2]  633 		ldw y,(y)
      001E76 27 06            [ 1]  634 		jreq 1$
      001E78 90 A3 00 07      [ 2]  635 		cpw y,#7 
      001E7C 23 04            [ 2]  636 		jrule 2$ 
                                    637 ; invalid OPTION number 		
      001E7E 1C 00 04         [ 2]  638 1$:		addw x,#2*CELLL
      001E81 81               [ 4]  639 		ret
      001E82 90 58            [ 2]  640 2$:		sllw y 
      001E84 72 A9 47 FF      [ 2]  641 		addw y,#OPTION_BASE-1
      001E88 FF               [ 2]  642 		ldw (x),y 
      001E89 1D 00 02         [ 2]  643 		subw x,#CELLL 
      001E8C 90 5F            [ 1]  644 		clrw y 
      001E8E FF               [ 2]  645 		ldw (x),y 
      001E8F CD 1D 08         [ 4]  646 		call EECSTORE
      001E92 81               [ 4]  647 		ret 
                                    648 
                                    649 
                                    650 
                                    651 ;--------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                                    652 ; reset system to its original state 
                                    653 ; before any user modification
                                    654 ; PRISTINE ( -- )
                                    655 ;-------------------------------------
      001E93 1E 6A                  656 	.word LINK  
                           001E95   657 	LINK=.
      001E95 08                     658 	.byte 8 
      001E96 50 52 49 53 54 49 4E   659 	.ascii "PRISTINE"
             45
      001E9E                        660 pristine:
                                    661 ;;; erase EEPROM
      001E9E CD 1A E9         [ 4]  662 	call EEPROM 
      001EA1 CD 07 98         [ 4]  663 1$:	call DDUP 
      001EA4 CD 1D 7E         [ 4]  664 	call row_erase
      001EA7 90 93            [ 1]  665 	ldw y,x 
      001EA9 90 EE 02         [ 2]  666 	ldw y,(2,y)
      001EAC 72 A9 00 80      [ 2]  667 	addw y,#BLOCK_SIZE
      001EB0 EF 02            [ 2]  668 	ldw (2,x),y
      001EB2 90 A3 48 00      [ 2]  669 	cpw y,#OPTION_BASE 
      001EB6 25 E9            [ 1]  670 	jrult 1$
                                    671 ;;; reset OPTION to default values
      001EB8 90 AE 00 01      [ 2]  672 	ldw y,#1 ; OPT1 
      001EBC FF               [ 2]  673 2$:	ldw (x),y   
      001EBD 90 5F            [ 1]  674 	clrw y 
      001EBF EF 02            [ 2]  675 	ldw (2,x),y  ; ( 0 1 -- ) 
      001EC1 CD 07 98         [ 4]  676 	call DDUP    ; ( 0 1 0 1 -- )  
      001EC4 CD 1E 72         [ 4]  677 	call set_option
      001EC7 90 93            [ 1]  678 	ldw y,x 
      001EC9 90 FE            [ 2]  679 	ldw y,(y)
      001ECB 90 5C            [ 1]  680 	incw y  ; next OPTION 
      001ECD 90 A3 00 08      [ 2]  681 	cpw y,#8 
      001ED1 25 E9            [ 1]  682 	jrult 2$
                                    683 ;;; erase first row of app_space 	
      001ED3 90 AE 32 80      [ 2]  684 	ldw y,#app_space
      001ED7 EF 02            [ 2]  685 	ldw (2,x),y  
      001ED9 90 5F            [ 1]  686 	clrw y 
      001EDB FF               [ 2]  687 	ldw (x),y ; ( app_space 0 -- )
      001EDC CD 1D 7E         [ 4]  688 	call row_erase 
                                    689 ; reset interrupt vectors 
      001EDF 1D 00 02         [ 2]  690 	subw x,#CELLL 
      001EE2 90 5F            [ 1]  691 	clrw y  
      001EE4 FF               [ 2]  692 4$:	ldw (x),y  ; ( n -- ) int# 
      001EE5 CD 05 88         [ 4]  693 	call DUPP  
      001EE8 CD 1F 05         [ 4]  694 	call reset_vector
      001EEB 90 93            [ 1]  695 	ldw y,x 
      001EED 90 FE            [ 2]  696 	ldw y,(y)
      001EEF 90 5C            [ 1]  697 	incw y   ; next vector 
      001EF1 90 A3 00 19      [ 2]  698 	cpw y,#25 
      001EF5 25 ED            [ 1]  699 	jrult 4$
      001EF7 CC 00 00         [ 2]  700 	jp NonHandledInterrupt ; reset MCU
                                    701 
                                    702 ;------------------------------
                                    703 ; reset an interrupt vector 
                                    704 ; to its initial value 
                                    705 ; i.e. NonHandledInterrupt
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                                    706 ; RST-IVEC ( n -- )
                                    707 ;-----------------------------
      001EFA 1E 95                  708 	.word LINK 
                           001EFC   709 	LINK=. 
      001EFC 08                     710 	.byte 8 
      001EFD 52 53 54 2D 49 56 45   711 	.ascii "RST-IVEC"
             43
      001F05                        712 reset_vector:
      001F05 90 93            [ 1]  713 	ldw y,x
      001F07 1C 00 02         [ 2]  714 	addw x,#CELLL 
      001F0A 90 FE            [ 2]  715 	ldw y,(y)
      001F0C 90 A3 00 17      [ 2]  716 	cpw y,#23 
      001F10 27 3A            [ 1]  717 	jreq 9$
      001F12 90 A3 00 1D      [ 2]  718 	cpw y,#29 ; last vector
      001F16 22 34            [ 1]  719 	jrugt 9$  
      001F18 90 58            [ 2]  720 	sllw y 
      001F1A 90 58            [ 2]  721 	sllw y 
      001F1C 72 A9 80 08      [ 2]  722 	addw y,#0x8008 ; irq0 address 
      001F20 90 BF 26         [ 2]  723 	ldw YTEMP,y
      001F23 1D 00 06         [ 2]  724 	subw x,#3*CELLL 
      001F26 EF 02            [ 2]  725 	ldw (2,x),y 
      001F28 90 5F            [ 1]  726 	clrw y
      001F2A FF               [ 2]  727 	ldw (x),y 
      001F2B A6 82            [ 1]  728 	ld a,#0x82 
      001F2D 90 95            [ 1]  729 	ld yh,a
      001F2F EF 04            [ 2]  730 	ldw (4,x),y
      001F31 CD 1D 54         [ 4]  731 	call EESTORE
      001F34 1D 00 06         [ 2]  732 	subw x,#3*CELLL
      001F37 90 5F            [ 1]  733 	clrw y 
      001F39 FF               [ 2]  734 	ldw (x),y 
      001F3A 90 AE 00 00      [ 2]  735 	ldw y,#NonHandledInterrupt
      001F3E EF 04            [ 2]  736 	ldw (4,x),y 
      001F40 90 BE 26         [ 2]  737 	ldw y,YTEMP  
      001F43 72 A9 00 02      [ 2]  738 	addw y,#2
      001F47 EF 02            [ 2]  739 	ldw (2,x),y 
      001F49 CD 1D 54         [ 4]  740 	call EESTORE
      001F4C 81               [ 4]  741 9$:	ret 
                                    742 
                                    743 
                                    744 ;------------------------------
                                    745 ; all interrupt vector with 
                                    746 ; an address >= a are resetted 
                                    747 ; to default
                                    748 ; CHKIVEC ( a -- )
                                    749 ;------------------------------
      001F4D 1E FC                  750 	.word LINK 
                           001F4F   751 	LINK=.
      001F4F 07                     752 	.byte 7
      001F50 43 48 4B 49 56 45 43   753 	.ascii "CHKIVEC"
                                    754 ;local variables 
                           000001   755 	SSP=1
                           000003   756 	CADR=3
                           000005   757 	OFS=5
                           000006   758 	VSIZE=6  
      001F57                        759 CHKIVEC:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      001F57 52 06            [ 2]  760 	sub sp,#VSIZE ;alloc local variables 
      001F59 90 93            [ 1]  761 	ldw y,x 
      001F5B 90 FE            [ 2]  762 	ldw y,(y)
      001F5D 17 03            [ 2]  763 	ldw (CADR,sp),y ; ca 
      001F5F 1F 01            [ 2]  764 	ldw (SSP,sp),x 
      001F61 AE 80 0A         [ 2]  765 	ldw x,#0x800a ; irq0 address 
      001F64 BF 35            [ 2]  766 	ldw PTR16,X
      001F66 AE FF FC         [ 2]  767 	ldw x,#-4 
      001F69 1C 00 04         [ 2]  768 1$:	addw x,#4
      001F6C A3 00 78         [ 2]  769 	cpw x,#30*4 ; irq0-29 
      001F6F 27 22            [ 1]  770 	jreq 9$
      001F71 90 93            [ 1]  771 	ldw y,x  
      001F73 91 D6 35         [ 4]  772 	ld a,([PTR16],y)
      001F76 11 03            [ 1]  773 	cp a,(CADR,sp)
      001F78 25 EF            [ 1]  774 	jrult 1$
      001F7A 90 5C            [ 1]  775 	incw y 
      001F7C 91 D6 35         [ 4]  776 	ld a,([PTR16],y)
      001F7F 11 04            [ 1]  777 	cp a,(CADR+1,sp) 
      001F81 25 E6            [ 1]  778 	jrult 1$ 
      001F83 1F 05            [ 2]  779 	ldw (OFS,sp),x 
      001F85 54               [ 2]  780 	srlw x
      001F86 54               [ 2]  781 	srlw x 
      001F87 90 93            [ 1]  782 	ldw y,x 
      001F89 1E 01            [ 2]  783 	ldw x,(SSP,sp)
      001F8B FF               [ 2]  784 	ldw (x),y
      001F8C CD 1F 05         [ 4]  785 	call reset_vector
      001F8F 1E 05            [ 2]  786 	ldw x,(OFS,sp) 
      001F91 20 D6            [ 2]  787 	jra 1$
      001F93 1E 01            [ 2]  788 9$:	ldw x,(SSP,sp) 
      001F95 1C 00 02         [ 2]  789 	addw x,#CELLL 
      001F98 5B 06            [ 2]  790 	addw sp,#VSIZE ; drop local variables  
      001F9A 81               [ 4]  791 	ret 
                                    792 
                                    793 ;------------------------------
                                    794 ; set interrupt vector 
                                    795 ; SET-IVEC ( ud n -- )
                                    796 ;  ud Handler address
                                    797 ;  n  vector # 0 .. 29 
                                    798 ;-----------------------------
      001F9B 1F 4F                  799 	.word LINK
                           001F9D   800 	LINK=.
      001F9D 08                     801 	.byte 8 
      001F9E 53 45 54 2D 49 56 45   802 	.ascii "SET-IVEC" 
             43
      001FA6                        803 set_vector:
      001FA6 90 93            [ 1]  804     ldw y,x 
      001FA8 1C 00 02         [ 2]  805 	addw x,#CELLL 
      001FAB 90 FE            [ 2]  806 	ldw y,(y) ; vector #
      001FAD 90 A3 00 1D      [ 2]  807 	cpw y,#29 ; last vector
      001FB1 23 04            [ 2]  808 	jrule 2$
      001FB3 1C 00 04         [ 2]  809 	addw x,#2*CELLL 
      001FB6 81               [ 4]  810 	ret
      001FB7 90 58            [ 2]  811 2$:	sllw y 
      001FB9 90 58            [ 2]  812 	sllw y 
      001FBB 72 A9 80 08      [ 2]  813 	addw y,#0X8008 ; IRQ0 vector address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      001FBF 90 BF 26         [ 2]  814 	ldw YTEMP,y ; vector address 
      001FC2 A6 82            [ 1]  815 	ld a,#0x82 
      001FC4 90 95            [ 1]  816 	ld yh,a 
      001FC6 E6 01            [ 1]  817 	ld a,(1,x) ; isr address bits 23..16 
      001FC8 90 97            [ 1]  818 	ld yl,a 
                                    819 ;  write 0x82 + most significant byte of int address	
      001FCA 1D 00 06         [ 2]  820 	subw x,#3*CELLL 
      001FCD EF 04            [ 2]  821 	ldw (4,x),y 
      001FCF 90 BE 26         [ 2]  822 	ldw y,YTEMP
      001FD2 EF 02            [ 2]  823 	ldw (2,x),y ; vector address 
      001FD4 90 5F            [ 1]  824 	clrw y 
      001FD6 FF               [ 2]  825 	ldw (x),y   ; as a double 
      001FD7 CD 1D 54         [ 4]  826 	call EESTORE 
      001FDA 90 93            [ 1]  827 	ldw y,x 
      001FDC 90 EE 02         [ 2]  828 	ldw y,(2,y) ; bits 15..0 int vector 
      001FDF 1D 00 06         [ 2]  829 	subw x,#3*CELLL 
      001FE2 EF 04            [ 2]  830 	ldw (4,x),y 
      001FE4 90 BE 26         [ 2]  831 	ldw y,YTEMP 
      001FE7 72 A9 00 02      [ 2]  832 	addw y,#2 
      001FEB EF 02            [ 2]  833 	ldw (2,x),y 
      001FED 90 5F            [ 1]  834 	clrw y 
      001FEF FF               [ 2]  835 	ldw (x),y 
      001FF0 CD 1D 54         [ 4]  836 	call EESTORE
      001FF3 1C 00 04         [ 2]  837 	addw x,#2*CELLL  
      001FF6 81               [ 4]  838 9$: ret 
                                    839 
                                    840 
                                    841 ;------------------------
                                    842 ; Compile word to flash
                                    843 ; EE, (w -- )
                                    844 ;-----------------------
      001FF7 1F 9D                  845 	.word LINK
                           001FF9   846 	LINK=.
      001FF9 03                     847 	.byte 3
      001FFA 45 45 2C               848 	.ascii "EE,"
      001FFD                        849 EE_COMMA:
      001FFD 1D 00 04         [ 2]  850 	subw x,#2*CELLL 
      002000 90 BE 1A         [ 2]  851 	ldw y,UCP
      002003 90 89            [ 2]  852 	pushw y 
      002005 EF 02            [ 2]  853 	ldw (2,x),y 
      002007 90 5F            [ 1]  854 	clrw y 
      002009 FF               [ 2]  855 	ldw (x),y
      00200A CD 1D 54         [ 4]  856 	call EESTORE
      00200D 90 85            [ 2]  857 	popw y 
      00200F 72 A9 00 02      [ 2]  858 	addw y,#2
      002013 90 BF 1A         [ 2]  859 	ldw UCP,y
      002016 81               [ 4]  860 	ret 
                                    861 
                                    862 
                                    863 ;-------------------------
                                    864 ; Compile byte to flash 
                                    865 ; EEC, ( c -- )	
                                    866 ;-------------------------
      002017 1F F9                  867 	.word LINK 
                           002019   868 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      002019 04                     869 	.byte 4 
      00201A 45 45 43 2C            870 	.ascii "EEC,"
      00201E                        871 EE_CCOMMA:
      00201E 1D 00 04         [ 2]  872 	subw x,#2*CELLL 
      002021 90 BE 1A         [ 2]  873 	ldw y,UCP
      002024 90 89            [ 2]  874 	pushw y 
      002026 EF 02            [ 2]  875 	ldw (2,x),y 
      002028 90 5F            [ 1]  876 	clrw y 
      00202A FF               [ 2]  877 	ldw (x),y
      00202B CD 1D 08         [ 4]  878 	call EECSTORE
      00202E 90 85            [ 2]  879 	popw y 
      002030 90 5C            [ 1]  880 	incw y 
      002032 90 BF 1A         [ 2]  881 	ldw UCP,y
      002035 81               [ 4]  882 	ret 
                                    883 
                                    884 
                                    885 ;--------------------------
                                    886 ; copy FLASH block to ROWBUF
                                    887 ; ROW>BUF ( ud -- )
                                    888 ;--------------------------
      002036 20 19                  889 	.word LINK 
                           002038   890 	LINK=.
      002038 07                     891 	.byte 7 
      002039 52 4F 57 3E 42 55 46   892 	.ascii "ROW>BUF"
      002040                        893 ROW2BUF: 
      002040 CD 1A CA         [ 4]  894 	call FPSTOR 
      002043 A6 80            [ 1]  895 	ld a,#BLOCK_SIZE
      002045 88               [ 1]  896 	push a 
      002046 B4 36            [ 1]  897 	and a,PTR8 ; block align 
      002048 B7 36            [ 1]  898 	ld PTR8,a
      00204A 90 AE 16 80      [ 2]  899 	ldw y,#ROWBUFF 
      00204E 92 BC 00 34      [ 5]  900 1$: ldf a,[FPTR]
      002052 90 F7            [ 1]  901 	ld (y),a
      002054 CD 1C 44         [ 4]  902 	call INC_FPTR
      002057 90 5C            [ 1]  903 	incw y 
      002059 0A 01            [ 1]  904 	dec (1,sp)
      00205B 26 F1            [ 1]  905 	jrne 1$ 
      00205D 84               [ 1]  906 	pop a 
      00205E 81               [ 4]  907 	ret 
                                    908 
                                    909 
                                    910 ;---------------------------
                                    911 ; copy ROWBUFF to flash 
                                    912 ; BUF>ROW ( ud -- )
                                    913 ; ud is row address as double 
                                    914 ;---------------------------
      00205F 20 38                  915 	.word LINK 
                           002061   916 	LINK=.
      002061 07                     917 	.byte 7 
      002062 42 55 46 3E 52 4F 57   918 	.ascii "BUF>ROW" 
      002069                        919 BUF2ROW:
      002069 CD 06 8C         [ 4]  920 	call TBUF ; ( ud rb -- )
      00206C CD 07 4C         [ 4]  921 	call ROT 
      00206F CD 07 4C         [ 4]  922 	call ROT  ; ( rb ud -- )
      002072 CD 1E 42         [ 4]  923 	call write_row 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      002075 81               [ 4]  924 	ret 
                                    925 
                                    926 ;---------------------------------
                                    927 ; how many byte free in that row 
                                    928 ; RFREE ( a -- n )
                                    929 ; a is least byte of target address
                                    930 ;----------------------------------
      002076 20 61                  931 	.word LINK 
                           002078   932 	LINK=.
      002078 05                     933 	.byte 5 
      002079 52 46 52 45 45         934 	.ascii "RFREE"
      00207E                        935 RFREE:
      00207E E6 01            [ 1]  936 	ld a,(1,x)
      002080 A4 7F            [ 1]  937 	and a,#BLOCK_SIZE-1 
      002082 B7 26            [ 1]  938 	ld YTEMP,a 
      002084 A6 80            [ 1]  939 	ld a,#BLOCK_SIZE 
      002086 B0 26            [ 1]  940 	sub a,YTEMP 
      002088 90 5F            [ 1]  941 	clrw y 
      00208A 90 97            [ 1]  942 	ld yl,a
      00208C FF               [ 2]  943 	ldw (x),y 
      00208D 81               [ 4]  944 	ret 
                                    945 
                                    946 ;---------------------------------
                                    947 ; write u bytes to flash/EEPROM 
                                    948 ; constraint to row limit 
                                    949 ; RAM>EE ( ud a u -- u2 )
                                    950 ; ud flash address 
                                    951 ; a ram address 
                                    952 ; u bytes count
                                    953 ; return u2 bytes written  
                                    954 ;-------------------------------
      00208E 20 78                  955 	.word LINK 
                           002090   956 	LINK=. 
      002090 06                     957 	.byte 6
      002091 52 41 4D 3E 45 45      958 	.ascii "RAM>EE"
                                    959 	
      002097                        960 RAM2EE:
                                    961 ; copy ud on top 
      002097 90 93            [ 1]  962 	ldw y,x 
      002099 90 EE 06         [ 2]  963 	ldw y,(6,y) ; LSW of ud  
      00209C 90 BF 26         [ 2]  964 	ldw YTEMP,y 
      00209F 90 93            [ 1]  965 	ldw y,x 
      0020A1 90 EE 04         [ 2]  966 	ldw y,(4,y)  ; MSW of ud 
      0020A4 1D 00 04         [ 2]  967 	subw x,#2*CELLL 
      0020A7 FF               [ 2]  968 	ldw (x),y 
      0020A8 90 BE 26         [ 2]  969 	ldw y,YTEMP 
      0020AB EF 02            [ 2]  970 	ldw (2,x),y 
      0020AD CD 20 40         [ 4]  971 	call ROW2BUF 
      0020B0 90 93            [ 1]  972 	ldw y,x 
      0020B2 90 EE 06         [ 2]  973 	ldw y,(6,y)
      0020B5 90 89            [ 2]  974 	pushw y ; udl 
      0020B7 90 9F            [ 1]  975 	ld a,yl
      0020B9 A4 7F            [ 1]  976 	and a,#BLOCK_SIZE-1 
      0020BB 90 5F            [ 1]  977 	clrw y 
      0020BD 90 97            [ 1]  978 	ld yl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



      0020BF 72 A9 16 80      [ 2]  979 	addw y,#ROWBUFF 
      0020C3 1D 00 02         [ 2]  980 	subw x,#CELLL 
      0020C6 FF               [ 2]  981 	ldw (x),y  
      0020C7 CD 05 98         [ 4]  982 	call SWAPP ;  ( ud a ra u -- )
      0020CA CD 05 34         [ 4]  983 	call RFROM  
      0020CD CD 20 7E         [ 4]  984 	call RFREE 
      0020D0 CD 09 06         [ 4]  985 	call MIN
      0020D3 CD 05 88         [ 4]  986 	call DUPP 
      0020D6 CD 05 51         [ 4]  987 	call TOR  
      0020D9 CD 0C 61         [ 4]  988 	call CMOVE
      0020DC CD 20 69         [ 4]  989 	call BUF2ROW 
      0020DF CD 05 34         [ 4]  990 	call RFROM 
      0020E2 81               [ 4]  991 	ret 
                                    992 
                                    993 
                                    994 ;--------------------------
                                    995 ; expand 16 bit address 
                                    996 ; to 32 bit address 
                                    997 ; FADDR ( a -- ud )
                                    998 ;--------------------------
      0020E3 20 90                  999 	.word LINK 
                           0020E5  1000 	LINK=. 
      0020E5 05                    1001 	.byte 5 
      0020E6 46 41 44 44 52        1002 	.ascii "FADDR"
      0020EB                       1003 FADDR:
      0020EB CC 0B 37         [ 2] 1004 	jp ZERO 
                                   1005 
                                   1006 
                                   1007 ;--------------------------
                                   1008 ; move new colon definition to FLASH 
                                   1009 ; using WR-ROW for efficiency 
                                   1010 ; preserving bytes already used 
                                   1011 ; in the current block. 
                                   1012 ; At this point the compiler as completed
                                   1013 ; in RAM and pointers CP and CNTXT updated.
                                   1014 ; CNTXT point to nfa of new word and  
                                   1015 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                   1016 ; 
                                   1017 ; FMOVE ( -- cp+ )
                                   1018 ; 
                                   1019 ;--------------------------
      0020EE 20 E5                 1020 	.word LINK 
                           0020F0  1021 	LINK=.
      0020F0 05                    1022 	.byte 5 
      0020F1 46 4D 4F 56 45        1023 	.ascii "FMOVE" 
      0020F6                       1024 FMOVE:
      0020F6 CD 06 9E         [ 4] 1025 	call TFLASH 
      0020F9 CD 04 E3         [ 4] 1026 	CALL AT 
      0020FC CD 04 98         [ 4] 1027 	CALL QBRAN 
      0020FF 21 7A                 1028 	.word no_move  
      002101 CD 06 ED         [ 4] 1029 	call CPP
      002104 CD 04 E3         [ 4] 1030 	call AT  
      002107 CD 05 88         [ 4] 1031 	call DUPP ; ( udl udl -- )
      00210A CD 06 D1         [ 4] 1032 	call CNTXT 
      00210D CD 04 E3         [ 4] 1033 	call AT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



      002110 CD 04 6F         [ 4] 1034 	call DOLIT 
      002113 00 02                 1035 	.word 2 
      002115 CD 08 26         [ 4] 1036 	call SUBB ; ( udl udl a -- )
      002118 CD 05 98         [ 4] 1037 	call SWAPP 
      00211B CD 20 EB         [ 4] 1038 	call FADDR 
      00211E CD 07 4C         [ 4] 1039 	call ROT  ; ( udl ud a -- )
      002121 CD 05 88         [ 4] 1040 	call DUPP 
      002124 CD 05 51         [ 4] 1041 	call TOR    ; R: a 
      002127                       1042 FMOVE2: 
      002127 CD 0C 14         [ 4] 1043 	call HERE 
      00212A CD 05 45         [ 4] 1044 	call RAT 
      00212D CD 08 26         [ 4] 1045 	call SUBB ; (udl ud a wl -- )
      002130                       1046 next_row:
      002130 CD 05 88         [ 4] 1047 	call DUPP 
      002133 CD 05 51         [ 4] 1048 	call TOR  ; ( udl ud a wl -- ) R: a wl
      002136 CD 20 97         [ 4] 1049 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      002139 CD 05 88         [ 4] 1050 	call DUPP 
      00213C CD 05 51         [ 4] 1051 	call TOR
      00213F CD 07 AD         [ 4] 1052 	call PLUS  ; ( udl+ ) 
      002142 CD 05 88         [ 4] 1053 	call DUPP 
      002145 CD 0B 37         [ 4] 1054 	call ZERO   ; ( udl+ ud -- )
      002148 CD 05 34         [ 4] 1055 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      00214B CD 05 34         [ 4] 1056 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      00214E CD 05 B0         [ 4] 1057 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      002151 CD 08 26         [ 4] 1058 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      002154 CD 05 88         [ 4] 1059 	call DUPP 
      002157 CD 04 98         [ 4] 1060 	call QBRAN
      00215A 21 73                 1061 	.word fmove_done 
      00215C CD 05 98         [ 4] 1062 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      00215F CD 05 34         [ 4] 1063 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      002162 CD 07 AD         [ 4] 1064 	call PLUS  ; ( udl+2 ud wl- a+ )
      002165 CD 05 88         [ 4] 1065 	call DUPP 
      002168 CD 05 51         [ 4] 1066 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      00216B CD 05 98         [ 4] 1067 	call SWAPP 
      00216E CD 04 B4         [ 4] 1068 	call BRAN
      002171 21 30                 1069 	.word next_row  
      002173                       1070 fmove_done:	
      002173 CD 05 34         [ 4] 1071 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      002176 1C 00 0A         [ 2] 1072 	addw x,#5*CELLL ; (  -- cp+ ) new CP 
      002179 81               [ 4] 1073  	ret  
      00217A                       1074 no_move:
      00217A CD 0B 37         [ 4] 1075 	call ZERO
      00217D 81               [ 4] 1076 	ret 
                                   1077 
                                   1078 ;------------------------------------------
                                   1079 ; adjust pointers after **FMOVE** operetion.
                                   1080 ; UPDAT-PTR ( cp+ -- )
                                   1081 ; cp+ is new CP position after FMOVE 
                                   1082 ;-------------------------------------------
      00217E 20 F0                 1083 	.word LINK 
                           002180  1084 	LINK=.
      002180 09                    1085 	.byte 9
      002181 55 50 44 41 54 2D 50  1086 	.ascii "UPDAT-PTR" 
             54 52
      00218A                       1087 UPDATPTR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



                                   1088 ;reset VP to previous position  
      00218A CD 1B 44         [ 4] 1089 	call EEPVP 
      00218D CD 05 7E         [ 4] 1090 	call DROP 
      002190 CD 04 E3         [ 4] 1091 	call AT
      002193 CD 06 DF         [ 4] 1092 	call VPP 
      002196 CD 04 D1         [ 4] 1093 	call STORE
                                   1094 ;update CONTEXT and LAST 
      002199 CD 1B 2E         [ 4] 1095 	call EEPCP 
      00219C CD 05 7E         [ 4] 1096 	call DROP
      00219F CD 04 E3         [ 4] 1097 	call AT
      0021A2 CD 04 6F         [ 4] 1098 	call DOLIT 
      0021A5 00 02                 1099 	.word 2 
      0021A7 CD 07 AD         [ 4] 1100 	call PLUS 
      0021AA CD 05 88         [ 4] 1101 	call DUPP 
      0021AD CD 06 D1         [ 4] 1102 	call CNTXT 
      0021B0 CD 04 D1         [ 4] 1103 	call STORE
      0021B3 CD 06 FD         [ 4] 1104 	call LAST
      0021B6 CD 04 D1         [ 4] 1105 	call STORE 
      0021B9 CD 1B 5E         [ 4] 1106 	call UPDATLAST 
                                   1107 ;update CP 
      0021BC CD 06 ED         [ 4] 1108 	call CPP 
      0021BF CD 04 D1         [ 4] 1109 	call STORE
      0021C2 CD 1B 87         [ 4] 1110 	call UPDATCP 
      0021C5 81               [ 4] 1111 	ret 
                                   1112 
                                   1113 ;-----------------------------
                                   1114 ; move interrupt sub-routine
                                   1115 ; in flash memory
                                   1116 ;----------------------------- 
      0021C6 21 80                 1117 	.word LINK 
                           0021C8  1118 	LINK=. 
      0021C8 06                    1119 	.byte 6
      0021C9 49 46 4D 4F 56 45     1120 	.ascii "IFMOVE" 
      0021CF                       1121 IFMOVE:
      0021CF CD 06 9E         [ 4] 1122 	call TFLASH 
      0021D2 CD 04 E3         [ 4] 1123 	CALL AT 
      0021D5 CD 04 98         [ 4] 1124 	CALL QBRAN 
      0021D8 21 7A                 1125 	.word no_move 
      0021DA CD 06 ED         [ 4] 1126 	call CPP 
      0021DD CD 04 E3         [ 4] 1127 	call AT 
      0021E0 CD 05 88         [ 4] 1128 	call DUPP ; ( udl udl -- )
      0021E3 CD 1B 44         [ 4] 1129 	call EEPVP 
      0021E6 CD 05 7E         [ 4] 1130 	call DROP
      0021E9 CD 04 E3         [ 4] 1131 	call AT  ; ( udl udl a )
      0021EC CD 05 51         [ 4] 1132 	call TOR 
      0021EF CD 20 EB         [ 4] 1133 	call FADDR
      0021F2 CD 05 45         [ 4] 1134 	call RAT ; ( udl ud a -- ) R: a 
      0021F5 CC 21 27         [ 2] 1135 	jp FMOVE2 
                                   1136 
                                   1137 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



                           000001  4429 .if WANT_SCALING_CONST 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



                                   4430         .include "const_ratio.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;--------------------------------------------------------------------
                                     22 ; Irrationals constants 
                                     23 ; expressed as 2 integers ratio
                                     24 ; aproximation. These are to be used with scaling operators */ and */MOD 
                                     25 ; REF: https://www.forth.com/starting-forth/5-fixed-point-arithmetic/
                                     26 ;---------------------------------------------------------------------
                                     27 
                                     28 ;       PI ( --  355 113 )
                                     29 ; precision 8.5e-8 
                                     30 ; usage example to compute circle area
                                     31 ; : CAREA DUP * PI */ ;
                                     32 ; 
                                     33 
      0021F8 21 C8                   34         .word LINK 
                           0021FA    35         LINK=.
      0021FA 02                      36         .byte 2
      0021FB 50 49                   37         .ascii "PI" 
      0021FD                         38 PII:
      0021FD 1D 00 04         [ 2]   39         subw x,#2*CELLL 
      002200 90 AE 01 63      [ 2]   40         ldw y,#355 
      002204 EF 02            [ 2]   41         ldw (2,x),y 
      002206 90 AE 00 71      [ 2]   42         ldw y,#113 
      00220A FF               [ 2]   43         ldw (x),y 
      00220B 81               [ 4]   44         ret 
                                     45 
                                     46 ;      SQRT2 ( -- 19601  13860 )
                                     47 ; precision: 1.5e-9 
                                     48 ; usage example to compute Voltage peek to peek from Vrms 
                                     49 ; : VPP SQRT2 */ 2 * ;
                                     50 ;
      00220C 21 FA                   51         .word LINK 
                           00220E    52         LINK=.
      00220E 05                      53         .byte 5 
      00220F 53 51 52 54 32          54         .ascii "SQRT2" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      002214                         55 SQRT2:
      002214 1D 00 04         [ 2]   56         subw x,#2*CELLL 
      002217 90 AE 4C 91      [ 2]   57         ldw y,#19601 
      00221B EF 02            [ 2]   58         ldw (2,x),y 
      00221D 90 AE 36 24      [ 2]   59         ldw y,#13860 
      002221 FF               [ 2]   60         ldw (x),y 
      002222 81               [ 4]   61         ret 
                                     62 
                                     63 ;   SQRT3 ( -- 18817 10864 )
                                     64 ; precision: 1.1e-9
                                     65 ;
      002223 22 0E                   66         .word LINK 
                           002225    67         LINK=.
      002225 05                      68         .byte 5
      002226 53 51 52 54 33          69         .ascii "SQRT3" 
      00222B                         70 SQRT3: 
      00222B 1D 00 04         [ 2]   71     subw x,#2*CELLL 
      00222E 90 AE 49 81      [ 2]   72     ldw y,#18817 
      002232 EF 02            [ 2]   73     ldw (2,x),y 
      002234 90 AE 2A 70      [ 2]   74     ldw y,#10864 
      002238 FF               [ 2]   75     ldw (x),y 
      002239 81               [ 4]   76     ret 
                                     77 
                                     78 ;   E ( -- 28667 10546 )
                                     79 ; precision: 5.5e-9 
                                     80 ; natural log base 
      00223A 22 25                   81         .word LINK 
                           00223C    82         LINK=.
      00223C 01                      83         .byte 1
      00223D 45                      84         .ascii "E" 
      00223E                         85 ENEPER:
      00223E 1D 00 04         [ 2]   86     subw x,#2*CELLL 
      002241 90 AE 6F FB      [ 2]   87     ldw y,#28667 
      002245 EF 02            [ 2]   88     ldw (2,x),y 
      002247 90 AE 29 32      [ 2]   89     ldw y,#10546 
      00224B FF               [ 2]   90     ldw (x),y 
      00224C 81               [ 4]   91     ret 
                                     92 
                                     93 ;   SQRT10 ( -- 22936 7253 )
                                     94 ; precision: 5.7e-9 
      00224D 22 3C                   95         .word LINK 
                           00224F    96         LINK=.
      00224F 06                      97         .byte 6 
      002250 53 51 52 54 31 30       98         .ascii "SQRT10" 
      002256                         99 SQRT10:
      002256 1D 00 04         [ 2]  100     subw x,#2*CELLL
      002259 90 AE 59 98      [ 2]  101     ldw y,#22936 
      00225D EF 02            [ 2]  102     ldw (2,x),y 
      00225F 90 AE 1C 55      [ 2]  103     ldw y,#7253
      002263 FF               [ 2]  104     ldw (x),y 
      002264 81               [ 4]  105     ret 
                                    106 
                                    107 ;   12RT2 ( -- 26797 25293 )
                                    108 ; precision: 1.0e-9 
                                    109 ; used in music to compute well tempered scale
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      002265 22 4F                  110         .word LINK 
                           002267   111         LINK=. 
      002267 05                     112         .byte 5 
      002268 31 32 52 54 32         113         .ascii "12RT2"
      00226D                        114 RT12_2:
      00226D 1D 00 04         [ 2]  115     subw x,#2*CELLL 
      002270 90 AE 68 AD      [ 2]  116     ldw y,#26797
      002274 EF 02            [ 2]  117     ldw (2,x),y 
      002276 90 AE 62 CD      [ 2]  118     ldw y,#25293
      00227A FF               [ 2]  119     ldw (x),y 
      00227B 81               [ 4]  120     ret 
                                    121 
                                    122 ;   LOG2s ( -- 2040 11103 )
                                    123 ; log(2)/1.6384
                                    124 ; precision: 1.1e-8
      00227C 22 67                  125         .word LINK 
                           00227E   126         LINK=.
      00227E 05                     127         .byte 5 
      00227F 4C 4F 47 32 53         128         .ascii "LOG2S" 
      002284                        129 LOG2S:
      002284 1D 00 04         [ 2]  130     subw x,#2*CELLL
      002287 90 AE 07 F8      [ 2]  131     ldw y,#2040 
      00228B EF 02            [ 2]  132     ldw (2,x),y 
      00228D 90 AE 2B 5F      [ 2]  133     ldw y,#11103 
      002291 FF               [ 2]  134     ldw (x),y 
      002292 81               [ 4]  135     ret 
                                    136 
                                    137 ;   LN2 ( -- 485 11464 )
                                    138 ; ln(2)/16.384 
                                    139 ; precision: 1.0e-7 
      002293 22 7E                  140         .word LINK 
                           002295   141         LINK=.
      002295 04                     142         .byte 4 
      002296 4C 4E 32 53            143         .ascii "LN2S" 
      00229A                        144 LN2S: 
      00229A 1D 00 04         [ 2]  145     subw x,#2*CELLL
      00229D 90 AE 01 E5      [ 2]  146     ldw y,#485
      0022A1 EF 02            [ 2]  147     ldw (2,x),y 
      0022A3 90 AE 2C C8      [ 2]  148     ldw y,#11464 
      0022A7 FF               [ 2]  149     ldw (x),y 
      0022A8 81               [ 4]  150     ret 
                                    151 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



                                   4431 .endif
                           000001  4432 .if WANT_CONST_TABLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



                                   4433         .include "ctable.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;------------------------------
                                     22 ; words to create and read 
                                     23 ; constants tables in FLASH 
                                     24 ; and EEPROM
                                     25 ;------------------------------
                                     26 
                                     27 ;-----------------------------
                                     28 ; allocate space in CODE area 
                                     29 ; for constant table.
                                     30 ; CALLOT ( u -- ad )
                                     31 ; u  bytes to allocates 
                                     32 ; ad data address as double.
                                     33 ;-----------------------------
      0022A9 22 95                   34     .word LINK 
                           0022AB    35     LINK=.
      0022AB 06                      36     .byte 6
      0022AC 43 41 4C 4C 4F 54       37     .ascii "CALLOT"
      0022B2                         38 CALLOT:
      0022B2 CD 06 ED         [ 4]   39     CALL CPP
      0022B5 CD 05 88         [ 4]   40     CALL DUPP 
      0022B8 CD 04 E3         [ 4]   41     CALL AT 
      0022BB CD 05 51         [ 4]   42     CALL TOR 
      0022BE CD 0B A7         [ 4]   43     CALL PSTOR 
      0022C1 CD 1B 87         [ 4]   44     CALL UPDATCP 
      0022C4 CD 05 34         [ 4]   45     CALL RFROM
      0022C7 CC 0B 37         [ 2]   46     JP ZERO 
                                     47 
                                     48 ;------------------------------
                                     49 ; create constants bytes table 
                                     50 ; in persistant memory
                                     51 ;  CTABLE ( n+ -- ad ; <string> )
                                     52 ; n+ bytes reserved 
                                     53 ;-----------------------------
      0022CA 22 AB                   54     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



                           0022CC    55     LINK=.
      0022CC 06                      56     .byte 6
      0022CD 43 54 41 42 4C 45       57     .ascii "CTABLE"
      0022D3                         58 CTABLE:
      0022D3 CD 22 B2         [ 4]   59     CALL CALLOT     
      0022D6 CC 18 89         [ 2]   60     JP DCONST 
                                     61      
                                     62 
                                     63 ;--------------------------------
                                     64 ; create constants words table 
                                     65 ; in persistant memory 
                                     66 ; WTABLE ( n+ -- ad ; <string> )
                                     67 ; n+  words reserved  
                                     68 ;--------------------------------
      0022D9 22 CC                   69     .word LINK 
                           0022DB    70     LINK=.
      0022DB 06                      71     .byte 6
      0022DC 57 54 41 42 4C 45       72     .ascii "WTABLE"
      0022E2                         73 WTABLE:
      0022E2 CD 0A BE         [ 4]   74     CALL CELLS  
      0022E5 CD 22 B2         [ 4]   75     CALL CALLOT 
      0022E8 CC 18 89         [ 2]   76     JP DCONST 
                                     77 
                                     78 ;---------------------------------
                                     79 ; stack an element of CTABLE 
                                     80 ; CTABL@ ( u ad -- c )
                                     81 ; u element order {0..size-1}
                                     82 ; a|ad table address 
                                     83 ;--------------------------------
      0022EB 22 DB                   84     .word LINK 
                           0022ED    85     LINK=.
      0022ED 06                      86     .byte 6
      0022EE 43 54 41 42 4C 40       87     .ascii "CTABL@" 
      0022F4                         88 CTAT:
      0022F4 CD 1A CA         [ 4]   89     call FPSTOR 
      0022F7 CD 1C 5C         [ 4]   90     call PTRPLUS 
      0022FA CC 1C 99         [ 2]   91     jp EE_CREAD 
                                     92 
                                     93 ;---------------------------------
                                     94 ; stack an element of WTABLE 
                                     95 ; WTABL@ ( u ud -- w )
                                     96 ; u is element order {0..size-1}
                                     97 ; a|ud table address 
                                     98 ;----------------------------------
      0022FD 22 ED                   99     .word LINK 
                           0022FF   100     LINK=.
      0022FF 06                     101     .byte 6
      002300 57 54 41 42 4C 40      102     .ascii "WTABL@" 
      002306                        103 WTAT:
      002306 CD 1A CA         [ 4]  104     call FPSTOR 
      002309 CD 0A BE         [ 4]  105     call CELLS 
      00230C CD 1C 5C         [ 4]  106     call PTRPLUS 
      00230F CD 1C 77         [ 4]  107     call EE_READ 
      002312 81               [ 4]  108     ret 
                                    109 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



                                    110 ;--------------------------
                                    111 ; tool to initialize character table 
                                    112 ; CTINIT ( ad -- )
                                    113 ; ad is table address 
                                    114 ;--------------------------
      002313 22 FF                  115     .word LINK 
                           002315   116     LINK=.
      002315 06                     117     .byte 6 
      002316 43 54 49 4E 49 54      118     .ascii "CTINIT"
      00231C                        119 CTINIT:
      00231C CD 1A CA         [ 4]  120     CALL FPSTOR
      00231F CD 1C 08         [ 4]  121     CALL UNLOCK
      002322 CD 0B 37         [ 4]  122     CALL ZERO 
      002325 CD 0A CB         [ 4]  123 1$: CALL ONEP 
      002328 CD 05 88         [ 4]  124     CALL DUPP 
      00232B CD 23 78         [ 4]  125     CALL INTQ 
      00232E CD 04 98         [ 4]  126     CALL QBRAN 
      002331 23 3B                  127     .word 2$
      002333 CD 1C B3         [ 4]  128     call WR_BYTE 
      002336 CD 04 B4         [ 4]  129     CALL BRAN 
      002339 23 25                  130     .word 1$ 
      00233B CD 07 8D         [ 4]  131 2$: CALL DDROP 
      00233E CD 1C 30         [ 4]  132     CALL LOCK 
      002341 81               [ 4]  133     ret 
                                    134 
                                    135 ;--------------------------
                                    136 ; tool to initialize word table 
                                    137 ; WTINIT ( ad -- )
                                    138 ; ad is table address 
                                    139 ;--------------------------
      002342 23 15                  140     .word LINK 
                           002344   141     LINK=.
      002344 06                     142     .byte 6 
      002345 57 54 49 4E 49 54      143     .ascii "WTINIT"
      00234B                        144 WTINIT:
      00234B CD 1A CA         [ 4]  145     CALL FPSTOR
      00234E CD 1C 08         [ 4]  146     CALL UNLOCK
      002351 CD 0B 37         [ 4]  147     CALL ZERO 
      002354 CD 0A CB         [ 4]  148 1$: CALL ONEP 
      002357 CD 05 88         [ 4]  149     CALL DUPP
      00235A CD 23 78         [ 4]  150     CALL INTQ
      00235D CD 04 98         [ 4]  151     CALL QBRAN 
      002360 23 6A                  152     .word 2$
      002362 CD 1C D8         [ 4]  153     call WR_WORD 
      002365 CD 04 B4         [ 4]  154     CALL BRAN 
      002368 23 54                  155     .word 1$ 
      00236A CD 07 8D         [ 4]  156 2$: CALL DDROP 
      00236D CD 1C 30         [ 4]  157     CALL LOCK 
      002370 81               [ 4]  158     ret 
                                    159 
                                    160 ;------------------------
                                    161 ; Prompted input for integer 
                                    162 ; display n+ in bracket and
                                    163 ; '?' 
                                    164 ; [N]? ( n+ -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



                                    165 ;------------------------
      002371 23 44                  166     .word LINK 
                           002373   167     LINK=.
      002373 04                     168     .byte 4
      002374 5B 4E 5D 3F            169     .ascii "[N]?" 
      002378                        170 INTQ:
      002378 CD 0E AF         [ 4]  171     CALL CR 
      00237B CD 04 6F         [ 4]  172     call DOLIT 
      00237E 00 5B                  173     .word '[
      002380 CD 04 36         [ 4]  174     CALL EMIT 
      002383 CD 0F 56         [ 4]  175     CALL DOT 
      002386 CD 0E DC         [ 4]  176     CALL  DOTQP
      002389 03                     177     .byte 3
      00238A 5D 3F 20               178     .ascii "]? " 
      00238D CD 12 E6         [ 4]  179     CALL QUERY 
      002390 CD 11 11         [ 4]  180     call TOKEN 
      002393 CC 24 21         [ 2]  181     jp NUMBQ
                                    182 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



                                   4434 .endif
                           000001  4435 .if WANT_DOUBLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



                                   4436         .include "double.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;************************************
                                     21 ;    doubles integers library 
                                     22 ;    doubles are signed 32 bits 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26     .module DOUBLE 
                                     27 
                                     28 ; check for negative sign 
                                     29 ; ajust pointer and cntr 
      002396                         30 nsign: ; a cntr -- a cntr f 
      002396 CD 0B 37         [ 4]   31     CALL ZERO 
      002399 CD 05 51         [ 4]   32     CALL TOR  ; R: sign 
      00239C CD 05 51         [ 4]   33     CALL TOR  ; R: sign cntr 
      00239F CD 05 88         [ 4]   34     CALL DUPP 
      0023A2 CD 05 01         [ 4]   35     CALL CAT 
      0023A5                         36     _DOLIT '-'
      0023A5 CD 04 6F         [ 4]    1     CALL DOLIT 
      0023A8 00 2D                    2     .word '-' 
      0023AA CD 08 4E         [ 4]   37     CALL EQUAL 
      0023AD                         38     _QBRAN nsign1 
      0023AD CD 04 98         [ 4]    1     CALL QBRAN
      0023B0 23 C7                    2     .word nsign1
      0023B2 CD 0A CB         [ 4]   39     CALL ONEP ; a+ 
      0023B5 CD 05 34         [ 4]   40     CALL RFROM 
      0023B8 CD 0A D8         [ 4]   41     CALL ONEM ; cntr-
      0023BB CD 05 34         [ 4]   42     CALL RFROM ; sign 
      0023BE CD 07 C7         [ 4]   43     CALL INVER ; -1
      0023C1 CD 05 51         [ 4]   44     CALL TOR   ; R: sign 
      0023C4 CD 05 51         [ 4]   45     CALL TOR   ; R: cntr 
      0023C7                         46 nsign1:
      0023C7 CD 05 34         [ 4]   47     CALL RFROM 
      0023CA CD 05 34         [ 4]   48     CALL RFROM 
      0023CD 81               [ 4]   49     RET 
                                     50 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



                                     51 
                                     52 ; get all digits in row 
                                     53 ; stop at first non-digit or end of string 
                                     54 ; ( dlo dhi a cntr -- dlo dhi [ a+ cntr- | a+ 0 ] )
      0023CE                         55 parse_digits:
      0023CE                         56 1$:
      0023CE CD 05 88         [ 4]   57     CALL DUPP 
      0023D1                         58     _QBRAN 5$ 
      0023D1 CD 04 98         [ 4]    1     CALL QBRAN
      0023D4 24 16                    2     .word 5$
      0023D6 CD 05 51         [ 4]   59     CALL TOR   ; dlo dhi a R: cntr 
      0023D9 CD 0B FD         [ 4]   60     CALL COUNT ; dlo dhi a+ char 
      0023DC CD 06 4E         [ 4]   61     CALL BASE 
      0023DF CD 04 E3         [ 4]   62     CALL AT 
      0023E2 CD 0D F5         [ 4]   63     CALL DIGTQ 
      0023E5                         64     _QBRAN 4$ ; not a digit
      0023E5 CD 04 98         [ 4]    1     CALL QBRAN
      0023E8 24 0D                    2     .word 4$
      0023EA CD 27 CE         [ 4]   65     CALL DTOR  ; dlo dhi R: cntr a+ c  
      0023ED CD 06 4E         [ 4]   66     CALL BASE 
      0023F0 CD 04 E3         [ 4]   67     CALL AT 
      0023F3 CD 26 08         [ 4]   68     CALL DSSTAR
      0023F6 CD 05 34         [ 4]   69     CALL RFROM 
      0023F9 CD 0B 37         [ 4]   70     CALL ZERO 
      0023FC CD 2A 95         [ 4]   71     CALL DPLUS 
      0023FF CD 05 34         [ 4]   72     CALL RFROM  ; dlo dhi a+ 
      002402 CD 05 34         [ 4]   73     CALL RFROM ; dlo dhi a+ cntr 
      002405 CD 0A D8         [ 4]   74     CALL ONEM 
      002408                         75     _BRAN 1$ ; dlo dhi a+ R: 
      002408 CD 04 B4         [ 4]    1     CALL BRAN 
      00240B 23 CE                    2     .word 1$ 
      00240D CD 05 7E         [ 4]   76 4$: CALL DROP  ; dlo dhi a+ 
      002410 CD 0A D8         [ 4]   77     CALL ONEM  ; unget char 
      002413 CD 05 34         [ 4]   78     CALL RFROM ; dlo dhi a+ cntr-
      002416                         79 5$:
      002416 81               [ 4]   80     RET 
                                     81 
                                     82 
                                     83 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     84 ;   NUMBER? (a -- s -1 |d -2 | a F )
                                     85 ;   convert string to integer 
                                     86 ;   double begin with '#' 
                                     87 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002417                         88     _HEADER NUMBQ,7,"NUMBER?"
      002417 23 73                    1         .word LINK 
                           002419     2         LINK=.
      002419 07                       3         .byte 7  
      00241A 4E 55 4D 42 45 52 3F     4         .ascii "NUMBER?"
      002421                          5         NUMBQ:
                                     89 ; save current base value 
      002421 CD 06 4E         [ 4]   90     CALL BASE 
      002424 CD 04 E3         [ 4]   91     CALL AT 
      002427 CD 05 51         [ 4]   92     CALL TOR 
                                     93 ; initialize integer to 0     
      00242A 1D 00 04         [ 2]   94     SUBW X,#4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



      00242D 90 5F            [ 1]   95     CLRW Y 
      00242F FF               [ 2]   96     LDW (X),Y 
      002430 EF 02            [ 2]   97     LDW (2,X),Y ; a 0 0 R: base  
      002432                         98     _DOLIT 2 
      002432 CD 04 6F         [ 4]    1     CALL DOLIT 
      002435 00 02                    2     .word 2 
      002437 CD 0B 90         [ 4]   99     CALL PICK  ; a 0 0 a R: base    
      00243A CD 0B FD         [ 4]  100     CALL COUNT ; a 0 0 a+ n 
                                    101 ; check for '#' double integer 
      00243D CD 05 B0         [ 4]  102     CALL OVER  ; a 0 0 a+ n a+
      002440 CD 05 01         [ 4]  103     CALL CAT   ; a 0 0 a+ n c 
      002443                        104     _DOLIT '#' ; a 0 0 a+ n c '#' 
      002443 CD 04 6F         [ 4]    1     CALL DOLIT 
      002446 00 23                    2     .word '#' 
      002448 CD 08 4E         [ 4]  105     CALL EQUAL 
      00244B CD 05 51         [ 4]  106     CALL TOR   ; a 0 0 a+ n R: base d? 
      00244E CD 05 45         [ 4]  107     CALL RAT   ; a 0 0 a+ n d? R: base d?
      002451                        108     _QBRAN NUMQ0
      002451 CD 04 98         [ 4]    1     CALL QBRAN
      002454 24 62                    2     .word NUMQ0
                                    109 ; update a and count
      002456 CD 05 98         [ 4]  110     CALL SWAPP 
      002459 CD 0A CB         [ 4]  111     CALL ONEP 
      00245C CD 05 98         [ 4]  112     CALL SWAPP 
      00245F CD 0A D8         [ 4]  113     CALL ONEM  ; a 0 0 a+ n- R: base d?
                                    114 ; check for '$' hexadecimal  
      002462                        115 NUMQ0: 
      002462 CD 05 B0         [ 4]  116     CALL OVER   
      002465 CD 05 01         [ 4]  117     CALL CAT   
      002468                        118     _DOLIT '$'
      002468 CD 04 6F         [ 4]    1     CALL DOLIT 
      00246B 00 24                    2     .word '$' 
      00246D CD 08 4E         [ 4]  119     CALL EQUAL ; a 0 0 a+ n- f  
      002470                        120     _QBRAN NUMQ1 
      002470 CD 04 98         [ 4]    1     CALL QBRAN
      002473 24 84                    2     .word NUMQ1
      002475 CD 0D CC         [ 4]  121     CALL HEX   ; switch to hexadecimal base 
                                    122 ; update a and count 
      002478 CD 05 98         [ 4]  123     CALL SWAPP 
      00247B CD 0A CB         [ 4]  124     CALL ONEP 
      00247E CD 05 98         [ 4]  125     CALL SWAPP
      002481 CD 0A D8         [ 4]  126     CALL ONEM ; a 0 0 a+ n-  R: base d?
                                    127 ; check for minus sign 
      002484                        128 NUMQ1: 
      002484 CD 23 96         [ 4]  129     CALL nsign 
      002487 CD 05 51         [ 4]  130     CALL TOR ; R: base d? sign  
                                    131 ; check for end of string     
      00248A CD 07 3B         [ 4]  132     CALL QDUP    ; a dlo dhi a+ cntr R: base d? sign 
      00248D                        133     _QBRAN NUMQ4 ; yes , not a number 
      00248D CD 04 98         [ 4]    1     CALL QBRAN
      002490 24 CF                    2     .word NUMQ4
      002492 CD 23 CE         [ 4]  134     CALL parse_digits
      002495 CD 07 3B         [ 4]  135     CALL QDUP 
      002498 CD 05 D1         [ 4]  136     CALL ZEQUAL  
      00249B                        137     _QBRAN NUMQ4 ; error not end of string  ( a dlo dhi a+ R: base d? sign )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



      00249B CD 04 98         [ 4]    1     CALL QBRAN
      00249E 24 CF                    2     .word NUMQ4
      0024A0 CD 05 7E         [ 4]  138     CALL DROP  ; a dlo dhi 
      0024A3 CD 05 34         [ 4]  139     CALL RFROM  ; a dlo dhi sign 
      0024A6                        140     _QBRAN NUMQ3
      0024A6 CD 04 98         [ 4]    1     CALL QBRAN
      0024A9 24 AE                    2     .word NUMQ3
      0024AB CD 07 EA         [ 4]  141     CALL DNEGA
      0024AE                        142 NUMQ3: 
      0024AE CD 07 4C         [ 4]  143     CALL ROT ; dlo dhi a  R: base d?
      0024B1 CD 05 7E         [ 4]  144     CALL DROP
      0024B4                        145     _DOLIT -2  ; double return -2 flag 
      0024B4 CD 04 6F         [ 4]    1     CALL DOLIT 
      0024B7 FF FE                    2     .word -2 
      0024B9 CD 05 34         [ 4]  146     CALL RFROM ; dlo dhi d? R: base 
      0024BC                        147     _TBRAN NUMQ8 
      0024BC CD 04 A6         [ 4]    1     CALL TBRAN 
      0024BF 24 D8                    2     .word NUMQ8 
      0024C1 CD 05 98         [ 4]  148     CALL SWAPP 
      0024C4 CD 05 7E         [ 4]  149     CALL DROP
      0024C7 CD 0A CB         [ 4]  150     CALL ONEP   ; single return -1 flag   
      0024CA                        151     _BRAN NUMQ8
      0024CA CD 04 B4         [ 4]    1     CALL BRAN 
      0024CD 24 D8                    2     .word NUMQ8 
      0024CF                        152 NUMQ4: ; not end of string error , ( a dlo dhi a+ cntr R: base d? sign )
                           000001   153 .if WANT_FLOAT
      0024CF CD 05 34         [ 4]  154     CALL RFROM ; sign 
      0024D2 CD 05 34         [ 4]  155     CALL RFROM ; d? 
      0024D5 CD 2E 76         [ 4]  156     CALL FLOATQ ; ( a dlo dhi a+ cntr sign d? )    
                           000000   157 .else 
                                    158     ADDW X,#4 ; drop dhi a+  , ( a dlo R: base d? sign ) 
                                    159     ADDW SP,#4 ; drop d? sign  R: base 
                                    160     CLRW Y 
                                    161     LDW (X),Y ; dlo replaced by 0 ( -- a 0 R: base ) 
                                    162 .endif 
                                    163 ; restore original base value     
      0024D8                        164 NUMQ8: 
      0024D8 CD 05 34         [ 4]  165     CALL RFROM 
      0024DB CD 06 4E         [ 4]  166     CALL BASE 
      0024DE CD 04 D1         [ 4]  167     CALL STORE 
      0024E1 81               [ 4]  168     RET 
                                    169 
                                    170 
                                    171 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    172 ;    D0= ( d -- 0|-1 )
                                    173 ;    check if double is 0 
                                    174 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0024E2                        175     _HEADER DZEQUAL,3,"D0="
      0024E2 24 19                    1         .word LINK 
                           0024E4     2         LINK=.
      0024E4 03                       3         .byte 3  
      0024E5 44 30 3D                 4         .ascii "D0="
      0024E8                          5         DZEQUAL:
      0024E8 CD 05 F9         [ 4]  176     CALL ORR 
      0024EB A6 FF            [ 1]  177     LD A,#0xFF
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



      0024ED 90 93            [ 1]  178     LDW Y,X
      0024EF 90 FE            [ 2]  179     LDW Y,(Y)
      0024F1 90 A3 00 00      [ 2]  180     CPW Y,#0 
      0024F5 27 01            [ 1]  181     JREQ  ZEQ1
      0024F7 4F               [ 1]  182     CLR A   ;false
      0024F8                        183 ZEQ1:
      0024F8 F7               [ 1]  184     LD     (X),A
      0024F9 E7 01            [ 1]  185     LD (1,X),A
      0024FB 81               [ 4]  186 	RET     
                                    187     
                                    188 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    189 ;  2NEGATE ( d -- d )
                                    190 ;  negate double (2's complement)
                                    191 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0024FC                        192     _HEADER DNEGAT,7,"2NEGATE"
      0024FC 24 E4                    1         .word LINK 
                           0024FE     2         LINK=.
      0024FE 07                       3         .byte 7  
      0024FF 32 4E 45 47 41 54 45     4         .ascii "2NEGATE"
      002506                          5         DNEGAT:
      002506 CD 07 C7         [ 4]  193     CALL INVER
      002509 CD 05 98         [ 4]  194     CALL SWAPP 
      00250C CD 07 C7         [ 4]  195     CALL INVER 
      00250F 90 93            [ 1]  196     LDW  Y,X 
      002511 90 FE            [ 2]  197     LDW Y,(Y)
      002513 72 A9 00 01      [ 2]  198     ADDW Y,#1 
      002517 FF               [ 2]  199     LDW (X),Y 
      002518 24 0B            [ 1]  200     JRNC DNEG1 
      00251A 90 93            [ 1]  201     LDW Y,X 
      00251C 90 EE 02         [ 2]  202     LDW Y,(2,Y)
      00251F 72 A9 00 01      [ 2]  203     ADDW Y,#1
      002523 EF 02            [ 2]  204     LDW (2,X),Y 
      002525                        205 DNEG1:
      002525 CD 05 98         [ 4]  206     CALL SWAPP 
      002528 81               [ 4]  207     RET      
                                    208 
                                    209 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    210 ;   DABS ( d -- d )
                                    211 ;   absolute value of double
                                    212 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002529                        213     _HEADER DABS,4,"DABS"
      002529 24 FE                    1         .word LINK 
                           00252B     2         LINK=.
      00252B 04                       3         .byte 4  
      00252C 44 41 42 53              4         .ascii "DABS"
      002530                          5         DABS:
      002530 CD 05 88         [ 4]  214     CALL DUPP 
      002533 CD 05 BF         [ 4]  215     CALL ZLESS 
      002536                        216     _QBRAN DABS1 
      002536 CD 04 98         [ 4]    1     CALL QBRAN
      002539 25 3E                    2     .word DABS1
      00253B CD 07 EA         [ 4]  217     CALL DNEGA 
      00253E                        218 DABS1:
      00253E 81               [ 4]  219     RET 
                                    220 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



                                    221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    222 ;  DSIGN ( d -- d f )
                                    223 ;  sign of double 
                                    224 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00253F                        225     _HEADER DSIGN,5,"DSIGN"
      00253F 25 2B                    1         .word LINK 
                           002541     2         LINK=.
      002541 05                       3         .byte 5  
      002542 44 53 49 47 4E           4         .ascii "DSIGN"
      002547                          5         DSIGN:
      002547 A6 00            [ 1]  226     LD A,#0 
      002549 90 93            [ 1]  227     LDW Y,X 
      00254B 90 FE            [ 2]  228     LDW Y,(Y)
      00254D 2A 02            [ 1]  229     JRPL DSIGN1
      00254F A6 FF            [ 1]  230     LD A,#0XFF 
      002551                        231 DSIGN1:
      002551 1D 00 02         [ 2]  232     SUBW X,#2 
      002554 F7               [ 1]  233     LD (X),A 
      002555 E7 01            [ 1]  234     LD (1,X),A 
      002557 81               [ 4]  235     RET 
                                    236 
                                    237 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    238 ;   D/MOD ( d s - r qd )
                                    239 ;   unsigned divide double by single 
                                    240 ;   return double quotient 
                                    241 ;   and single remainder 
                                    242 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002558                        243     _HEADER DSLMOD,5,"D/MOD"
      002558 25 41                    1         .word LINK 
                           00255A     2         LINK=.
      00255A 05                       3         .byte 5  
      00255B 44 2F 4D 4F 44           4         .ascii "D/MOD"
      002560                          5         DSLMOD:
      002560 90 93            [ 1]  244         LDW     Y,X             ; stack pointer to Y
      002562 FE               [ 2]  245         LDW     X,(X)           ; un
      002563 BF 26            [ 2]  246         LDW     YTEMP,X         ; save un
      002565 93               [ 1]  247         LDW     X,Y
      002566 89               [ 2]  248         PUSHW   X               ; save stack pointer
      002567 90 89            [ 2]  249         PUSHW   Y 
      002569 EE 02            [ 2]  250         LDW     X,(2,X)           ; X=udh
      00256B 90 BE 26         [ 2]  251         LDW     Y,YTEMP         ; divisor 
      00256E 65               [ 2]  252         DIVW    X,Y 
      00256F BF 24            [ 2]  253         LDW     XTEMP,X         ; QUOTIENT hi 
      002571 93               [ 1]  254         LDW     X,Y             ; remainder in X 
      002572 90 85            [ 2]  255         POPW    Y 
      002574 90 EE 04         [ 2]  256         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      002577 A6 10            [ 1]  257         LD      A,#16           ; loop count
      002579 90 58            [ 2]  258         SLLW    Y               ; udl shift udl into udh
      00257B                        259 DSLMOD3:
      00257B 59               [ 2]  260         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      00257C 25 04            [ 1]  261         JRC     DSLMODa         ; if carry out of rotate
      00257E B3 26            [ 2]  262         CPW     X,YTEMP         ; compare udh to un
      002580 25 05            [ 1]  263         JRULT   DSLMOD4         ; can't subtract
      002582                        264 DSLMODa:
      002582 72 B0 00 26      [ 2]  265         SUBW    X,YTEMP         ; can subtract
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



      002586 98               [ 1]  266         RCF
      002587                        267 DSLMOD4:
      002587 8C               [ 1]  268         CCF                     ; quotient bit
      002588 90 59            [ 2]  269         RLCW    Y               ; rotate into quotient, rotate out udl
      00258A 4A               [ 1]  270         DEC     A               ; repeat
      00258B 26 EE            [ 1]  271         JRNE    DSLMOD3           ; if A == 0
      00258D                        272 DSLMODb:
      00258D BF 26            [ 2]  273         LDW     YTEMP,X         ; done, save remainder
      00258F 85               [ 2]  274         POPW    X               ; restore stack pointer
      002590 EF 02            [ 2]  275         LDW     (2,X),Y           ; save quotient low 
      002592 90 BE 24         [ 2]  276         LDW     Y,XTEMP         ; quotient hi 
      002595 FF               [ 2]  277         LDW     (X),Y           ; save quotient hi 
      002596 90 BE 26         [ 2]  278         LDW     Y,YTEMP         ; remainder onto stack
      002599 EF 04            [ 2]  279         LDW     (4,X),Y
      00259B 81               [ 4]  280         RET 
                                    281 
                                    282 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    283 ;   D# ( d -- d )
                                    284 ;   extract least digit 
                                    285 ;   from double integer 
                                    286 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00259C                        287     _HEADER DDIG,2,"D#"
      00259C 25 5A                    1         .word LINK 
                           00259E     2         LINK=.
      00259E 02                       3         .byte 2  
      00259F 44 23                    4         .ascii "D#"
      0025A1                          5         DDIG:
      0025A1 CD 06 4E         [ 4]  288     CALL BASE 
      0025A4 CD 04 E3         [ 4]  289     CALL AT 
      0025A7 CD 25 60         [ 4]  290     CALL DSLMOD
      0025AA CD 07 4C         [ 4]  291     CALL ROT   
      0025AD CD 0C F5         [ 4]  292     CALL DIGIT 
      0025B0 CD 0D 41         [ 4]  293     CALL HOLD 
      0025B3 81               [ 4]  294     RET 
                                    295 
                                    296 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    297 ;    D#S ( d -- s )
                                    298 ;   extract digit from double 
                                    299 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0025B4                        300     _HEADER DDIGS,3,"D#S"
      0025B4 25 9E                    1         .word LINK 
                           0025B6     2         LINK=.
      0025B6 03                       3         .byte 3  
      0025B7 44 23 53                 4         .ascii "D#S"
      0025BA                          5         DDIGS:
      0025BA CD 25 A1         [ 4]  301     CALL    DDIG 
      0025BD CD 07 98         [ 4]  302     CALL    DDUP 
      0025C0 CD 24 E8         [ 4]  303     CALL    DZEQUAL
      0025C3                        304     _QBRAN  DDIGS 
      0025C3 CD 04 98         [ 4]    1     CALL QBRAN
      0025C6 25 BA                    2     .word DDIGS
      0025C8 CD 05 7E         [ 4]  305     CALL    DROP 
      0025CB 81               [ 4]  306     RET 
                                    307 
                                    308 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



                                    309 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    310 ;   D. ( d -- )
                                    311 ;   display double integer 
                                    312 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0025CC                        313     _HEADER DDOT,2,"D."
      0025CC 25 B6                    1         .word LINK 
                           0025CE     2         LINK=.
      0025CE 02                       3         .byte 2  
      0025CF 44 2E                    4         .ascii "D."
      0025D1                          5         DDOT:
      0025D1 CD 0E 6D         [ 4]  314     CALL SPACE 
      0025D4 CD 25 47         [ 4]  315     CALL DSIGN 
      0025D7 CD 05 51         [ 4]  316     CALL TOR
      0025DA CD 05 45         [ 4]  317     CALL RAT 
      0025DD                        318     _QBRAN DDOT0
      0025DD CD 04 98         [ 4]    1     CALL QBRAN
      0025E0 25 E5                    2     .word DDOT0
      0025E2 CD 07 EA         [ 4]  319     CALL DNEGA 
      0025E5                        320 DDOT0:     
      0025E5 CD 0D 31         [ 4]  321     CALL BDIGS 
      0025E8 CD 25 BA         [ 4]  322     CALL DDIGS 
      0025EB CD 05 34         [ 4]  323     CALL RFROM 
      0025EE                        324     _QBRAN DDOT1 
      0025EE CD 04 98         [ 4]    1     CALL QBRAN
      0025F1 25 FB                    2     .word DDOT1
      0025F3                        325     _DOLIT '-' 
      0025F3 CD 04 6F         [ 4]    1     CALL DOLIT 
      0025F6 00 2D                    2     .word '-' 
      0025F8 CD 0D 41         [ 4]  326     CALL HOLD 
      0025FB                        327 DDOT1: 
      0025FB CD 0D 96         [ 4]  328     CALL EDIGS 
      0025FE CD 0E 97         [ 4]  329     CALL TYPES     
      002601 81               [ 4]  330     RET 
                                    331 
                                    332 
                                    333 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    334 ; multiply double by single 
                                    335 ; return double 
                                    336 ;  ( d s -- d )
                                    337 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002602                        338     _HEADER DSSTAR,3,"DS*"
      002602 25 CE                    1         .word LINK 
                           002604     2         LINK=.
      002604 03                       3         .byte 3  
      002605 44 53 2A                 4         .ascii "DS*"
      002608                          5         DSSTAR:
                                    339 ;DSSTAR:
      002608 CD 05 51         [ 4]  340     CALL TOR
      00260B CD 05 88         [ 4]  341     CALL DUPP 
      00260E CD 05 BF         [ 4]  342     CALL ZLESS
      002611 CD 05 88         [ 4]  343     CALL DUPP 
      002614 CD 05 51         [ 4]  344     CALL TOR 
      002617                        345     _QBRAN DSSTAR1 
      002617 CD 04 98         [ 4]    1     CALL QBRAN
      00261A 26 1F                    2     .word DSSTAR1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      00261C CD 07 EA         [ 4]  346     CALL DNEGA 
      00261F                        347 DSSTAR1:
      00261F CD 05 34         [ 4]  348     CALL RFROM 
      002622 CD 07 6B         [ 4]  349     CALL NROT       
      002625 CD 05 98         [ 4]  350     CALL SWAPP 
      002628 CD 05 45         [ 4]  351     CALL RAT 
      00262B CD 0A 00         [ 4]  352     CALL UMSTA
      00262E CD 07 4C         [ 4]  353     CALL ROT 
      002631 CD 05 34         [ 4]  354     CALL RFROM 
      002634 CD 0A 00         [ 4]  355     CALL UMSTA 
      002637 CD 05 7E         [ 4]  356     CALL DROP ; DROP OVERFLOW 
      00263A CD 07 AD         [ 4]  357     CALL PLUS 
      00263D CD 07 4C         [ 4]  358     CALL ROT 
      002640                        359     _QBRAN DSSTAR3 
      002640 CD 04 98         [ 4]    1     CALL QBRAN
      002643 26 48                    2     .word DSSTAR3
      002645 CD 07 EA         [ 4]  360     CALL DNEGA 
      002648                        361 DSSTAR3:
      002648 81               [ 4]  362     RET 
                                    363 
                                    364 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    365 ;  2SWAP ( d1 d2 -- d2 d1 )
                                    366 ;  swap double 
                                    367 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002649                        368     _HEADER DSWAP,5,"2SWAP"
      002649 26 04                    1         .word LINK 
                           00264B     2         LINK=.
      00264B 05                       3         .byte 5  
      00264C 32 53 57 41 50           4         .ascii "2SWAP"
      002651                          5         DSWAP:
      002651 90 93            [ 1]  369     LDW Y,X 
      002653 90 FE            [ 2]  370     LDW Y,(Y)
      002655 90 BF 26         [ 2]  371     LDW YTEMP,Y ; d2 hi 
      002658 90 93            [ 1]  372     LDW Y,X 
      00265A 90 EE 02         [ 2]  373     LDW Y,(2,Y)
      00265D 90 BF 24         [ 2]  374     LDW XTEMP,Y  ; d2 lo 
      002660 90 93            [ 1]  375     LDW Y,X 
      002662 90 EE 04         [ 2]  376     LDW Y,(4,Y)  ; d1 hi 
      002665 FF               [ 2]  377     LDW (X),Y 
      002666 90 93            [ 1]  378     LDW Y,X
      002668 90 EE 06         [ 2]  379     LDW Y,(6,Y)  ; d1 lo 
      00266B EF 02            [ 2]  380     LDW (2,X),Y
      00266D 90 BE 26         [ 2]  381     LDW Y,YTEMP  
      002670 EF 04            [ 2]  382     LDW (4,X),Y 
      002672 90 BE 24         [ 2]  383     LDW Y,XTEMP 
      002675 EF 06            [ 2]  384     LDW (6,X),Y 
      002677 81               [ 4]  385     RET 
                                    386 
                                    387 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    388 ;    DCLZ ( d -- u )
                                    389 ;    double count leading zeros
                                    390 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002678                        391     _HEADER DCLZ,4,"DCLZ"
      002678 26 4B                    1         .word LINK 
                           00267A     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



      00267A 04                       3         .byte 4  
      00267B 44 43 4C 5A              4         .ascii "DCLZ"
      00267F                          5         DCLZ:
      00267F 4F               [ 1]  392     CLR A 
      002680 90 93            [ 1]  393     LDW Y,X 
      002682 90 FE            [ 2]  394     LDW Y,(Y)
      002684 2B 18            [ 1]  395     JRMI DCLZ8 ; no leading zero 
      002686 27 09            [ 1]  396     JREQ DCLZ4 ; >=16 
      002688                        397 DCLZ1: ; <16
      002688 90 58            [ 2]  398     SLLW Y
      00268A 4C               [ 1]  399     INC A 
      00268B 90 5D            [ 2]  400     TNZW Y 
      00268D 2B 0F            [ 1]  401     JRMI DCLZ8
      00268F 20 F7            [ 2]  402     JRA DCLZ1 
      002691                        403 DCLZ4:
      002691 A6 10            [ 1]  404     LD A,#16 
      002693 90 93            [ 1]  405     LDW Y,X 
      002695 90 EE 02         [ 2]  406     LDW Y,(2,Y)
      002698 2B 04            [ 1]  407     JRMI DCLZ8 
      00269A 26 EC            [ 1]  408     JRNE DCLZ1 
      00269C AB 10            [ 1]  409     ADD A,#16
      00269E                        410 DCLZ8: 
      00269E 1C 00 02         [ 2]  411     ADDW X,#2 
      0026A1 90 5F            [ 1]  412     CLRW Y 
      0026A3 90 97            [ 1]  413     LD YL,A 
      0026A5 FF               [ 2]  414     LDW (X),Y 
      0026A6 81               [ 4]  415     RET 
                                    416 
                                    417 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    418 ;   2<ROT ( d1 d2 d3 -- d3 d1 d2 )
                                    419 ;   rotate left doubles 
                                    420 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026A7                        421     _HEADER NDROT,5,"2<ROT"
      0026A7 26 7A                    1         .word LINK 
                           0026A9     2         LINK=.
      0026A9 05                       3         .byte 5  
      0026AA 32 3C 52 4F 54           4         .ascii "2<ROT"
      0026AF                          5         NDROT:
                                    422 ; save d3 in temp 
      0026AF 90 93            [ 1]  423     LDW Y,X 
      0026B1 90 FE            [ 2]  424     LDW Y,(Y)
      0026B3 90 BF 26         [ 2]  425     LDW YTEMP,Y  ; d3 hi 
      0026B6 90 93            [ 1]  426     LDW Y,X 
      0026B8 90 EE 02         [ 2]  427     LDW Y,(2,Y)
      0026BB 90 BF 24         [ 2]  428     LDW XTEMP,Y  ; d3 lo 
                                    429 ; put d2 in d1 slot 
      0026BE 90 93            [ 1]  430     LDW Y,X 
      0026C0 90 EE 04         [ 2]  431     LDW Y,(4,Y) 
      0026C3 FF               [ 2]  432     LDW (X),Y   ; d2 hi 
      0026C4 90 93            [ 1]  433     LDW Y,X 
      0026C6 90 EE 06         [ 2]  434     LDW Y,(6,Y)
      0026C9 EF 02            [ 2]  435     LDW (2,X),Y ; d2 lo
                                    436 ; put d1 in d2 slot 
      0026CB 90 93            [ 1]  437     LDW Y,X 
      0026CD 90 EE 08         [ 2]  438     LDW Y,(8,Y) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



      0026D0 EF 04            [ 2]  439     LDW (4,X),Y ; d1 hi 
      0026D2 90 93            [ 1]  440     LDW Y,X 
      0026D4 90 EE 0A         [ 2]  441     LDW Y,(10,Y)
      0026D7 EF 06            [ 2]  442     LDW (6,X),Y  ; d1 lo 
                                    443 ; put d3 in d1 slot 
      0026D9 90 BE 26         [ 2]  444     LDW Y,YTEMP 
      0026DC EF 08            [ 2]  445     LDW (8,X),Y  ; d3 hi 
      0026DE 90 BE 24         [ 2]  446     LDW Y,XTEMP 
      0026E1 EF 0A            [ 2]  447     LDW (10,X),Y  ; d3 lo 
      0026E3 81               [ 4]  448     RET 
                                    449 
                                    450 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    451 ;   2ROT ( d1 d2 d3 -- d2 d3 d1 )
                                    452 ;   rotate right doubles 
                                    453 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026E4                        454     _HEADER DROT,4,"2ROT"
      0026E4 26 A9                    1         .word LINK 
                           0026E6     2         LINK=.
      0026E6 04                       3         .byte 4  
      0026E7 32 52 4F 54              4         .ascii "2ROT"
      0026EB                          5         DROT:
                                    455 ; save d3 in temp 
      0026EB 90 93            [ 1]  456     LDW Y,X 
      0026ED 90 FE            [ 2]  457     LDW Y,(Y)
      0026EF 90 BF 26         [ 2]  458     LDW YTEMP,Y ; d3 hi 
      0026F2 90 93            [ 1]  459     LDW Y,X 
      0026F4 90 EE 02         [ 2]  460     LDW Y,(2,Y)
      0026F7 90 BF 24         [ 2]  461     LDW XTEMP,Y ; d3 lo 
                                    462 ; put d1 in d3 slot 
      0026FA 90 93            [ 1]  463     LDW Y,X 
      0026FC 90 EE 08         [ 2]  464     LDW Y,(8,Y)
      0026FF FF               [ 2]  465     LDW (X),Y  ; d1 hi 
      002700 90 93            [ 1]  466     LDW Y,X 
      002702 90 EE 0A         [ 2]  467     LDW Y,(10,Y) 
      002705 EF 02            [ 2]  468     LDW (2,X),Y ; d1 lo 
                                    469 ; put d2 in d1 slot 
      002707 90 93            [ 1]  470     LDW Y,X 
      002709 90 EE 04         [ 2]  471     LDW Y,(4,Y) ; d2 hi 
      00270C EF 08            [ 2]  472     LDW (8,X),Y 
      00270E 90 93            [ 1]  473     LDW Y,X 
      002710 90 EE 06         [ 2]  474     LDW Y,(6,Y) ; d2 lo 
      002713 EF 0A            [ 2]  475     LDW (10,X),Y 
                                    476 ; put d3 in d2 slot 
      002715 90 BE 26         [ 2]  477     LDW Y,YTEMP 
      002718 EF 04            [ 2]  478     LDW (4,X),Y 
      00271A 90 BE 24         [ 2]  479     LDW Y,XTEMP 
      00271D EF 06            [ 2]  480     LDW (6,X),Y 
      00271F 81               [ 4]  481     RET 
                                    482 
                                    483 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    484 ;   D= ( d1 d2 -- f )
                                    485 ;   d1==d2?
                                    486 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002720                        487     _HEADER DEQUAL,2,"D="
      002720 26 E6                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



                           002722     2         LINK=.
      002722 02                       3         .byte 2  
      002723 44 3D                    4         .ascii "D="
      002725                          5         DEQUAL:
      002725 A6 00            [ 1]  488     LD A,#0 
      002727 90 93            [ 1]  489     LDW Y,X 
      002729 90 FE            [ 2]  490     LDW Y,(Y)
      00272B E3 04            [ 2]  491     CPW Y,(4,X)
      00272D 26 0B            [ 1]  492     JRNE DEQU4 
      00272F 90 93            [ 1]  493     LDW Y,X 
      002731 90 EE 02         [ 2]  494     LDW Y,(2,Y)
      002734 E3 06            [ 2]  495     CPW Y,(6,X)
      002736 26 02            [ 1]  496     JRNE DEQU4 
      002738 A6 FF            [ 1]  497     LD A,#0XFF
      00273A                        498 DEQU4:
      00273A 1C 00 06         [ 2]  499     ADDW X,#6
      00273D F7               [ 1]  500     LD (X),A 
      00273E E7 01            [ 1]  501     LD (1,X),A 
      002740 81               [ 4]  502     RET 
                                    503 
                                    504 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    505 ;   D> ( d1 d2 -- f )
                                    506 ;   d1>d2?
                                    507 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002741                        508     _HEADER DGREAT,2,"D>"
      002741 27 22                    1         .word LINK 
                           002743     2         LINK=.
      002743 02                       3         .byte 2  
      002744 44 3E                    4         .ascii "D>"
      002746                          5         DGREAT:
      002746 A6 FF            [ 1]  509     LD A,#0XFF 
      002748 90 93            [ 1]  510     LDW Y,X 
      00274A 90 EE 04         [ 2]  511     LDW Y,(4,Y)  ; d1 hi 
      00274D F3               [ 2]  512     CPW Y,(X)    ; d2 hi 
      00274E 2C 0B            [ 1]  513     JRSGT DGREAT4 
      002750 90 93            [ 1]  514     LDW Y,X 
      002752 90 EE 06         [ 2]  515     LDW Y,(6,Y)
      002755 E3 02            [ 2]  516     CPW Y,(2,X)
      002757 22 02            [ 1]  517     JRUGT DGREAT4 
      002759 A6 00            [ 1]  518     LD A,#0
      00275B                        519 DGREAT4:
      00275B 1C 00 06         [ 2]  520     ADDW X,#6
      00275E F7               [ 1]  521     LD (X),A 
      00275F E7 01            [ 1]  522     LD (1,X),A 
      002761 81               [ 4]  523     RET
                                    524 
                                    525 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    526 ;   D< ( d1 d2 -- f )
                                    527 ;   d1<d2? 
                                    528 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002762                        529     _HEADER DLESS,2,"D<"
      002762 27 43                    1         .word LINK 
                           002764     2         LINK=.
      002764 02                       3         .byte 2  
      002765 44 3C                    4         .ascii "D<"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



      002767                          5         DLESS:
      002767 CD 2A C7         [ 4]  530     CALL DSUB
      00276A                        531     _DOLIT 0 
      00276A CD 04 6F         [ 4]    1     CALL DOLIT 
      00276D 00 00                    2     .word 0 
      00276F CD 07 6B         [ 4]  532     CALL NROT  
      002772 CD 27 84         [ 4]  533     CALL DZLESS 
      002775                        534     _QBRAN DLESS4
      002775 CD 04 98         [ 4]    1     CALL QBRAN
      002778 27 7D                    2     .word DLESS4
      00277A CD 07 C7         [ 4]  535     CALL INVER  
      00277D                        536 DLESS4:
      00277D 81               [ 4]  537     RET
                                    538 
                                    539 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    540 ;  D0< ( d -- f )
                                    541 ;  d<0? 
                                    542 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00277E                        543     _HEADER DZLESS,3,"D0<"
      00277E 27 64                    1         .word LINK 
                           002780     2         LINK=.
      002780 03                       3         .byte 3  
      002781 44 30 3C                 4         .ascii "D0<"
      002784                          5         DZLESS:
      002784 A6 00            [ 1]  544     LD A,#0 
      002786 90 93            [ 1]  545     LDW Y,X 
      002788 90 FE            [ 2]  546     LDW Y,(Y)
      00278A 2A 02            [ 1]  547     JRPL DZLESS1 
      00278C A6 FF            [ 1]  548     LD A,#0XFF 
      00278E                        549 DZLESS1:
      00278E 1C 00 02         [ 2]  550     ADDW X,#2 
      002791 F7               [ 1]  551     LD (X),A 
      002792 E7 01            [ 1]  552     LD (1,X),A    
      002794 81               [ 4]  553     RET 
                                    554 
                                    555 
                                    556 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    557 ;  DCMP ( d1 d2 -- d1 d2 -1|0|1 )
                                    558 ; compare 2 doubles 
                                    559 ; keep the doubles 
                                    560 ; return flag: 
                                    561 ;    -1 if d1<d2 
                                    562 ;     0 if d1==d2
                                    563 ;     1 if d1>d2 
                                    564 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002795                        565     _HEADER DCMP,4,"DCMP"
      002795 27 80                    1         .word LINK 
                           002797     2         LINK=.
      002797 04                       3         .byte 4  
      002798 44 43 4D 50              4         .ascii "DCMP"
      00279C                          5         DCMP:
      00279C 90 93            [ 1]  566     LDW Y,X 
      00279E 90 EE 04         [ 2]  567     LDW Y,(4,Y)
      0027A1 F3               [ 2]  568     CPW Y,(X) 
      0027A2 27 04            [ 1]  569     JREQ DCMP2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



      0027A4 2F 13            [ 1]  570     JRSLT DCMP_SMALL 
      0027A6 20 17            [ 2]  571     JRA  DCMP_GREAT 
      0027A8                        572 DCMP2:    
      0027A8 90 93            [ 1]  573     LDW Y,X 
      0027AA 90 EE 06         [ 2]  574     LDW Y,(6,Y)
      0027AD E3 02            [ 2]  575     CPW Y,(2,X)
      0027AF 27 04            [ 1]  576     JREQ DCMP_EQUAL  
      0027B1 25 06            [ 1]  577     JRULT DCMP_SMALL 
      0027B3 20 0A            [ 2]  578     JRA DCMP_GREAT
      0027B5                        579 DCMP_EQUAL:
      0027B5 90 5F            [ 1]  580     CLRW Y 
      0027B7 20 0A            [ 2]  581     JRA DCMP4 
      0027B9                        582 DCMP_SMALL:
      0027B9 90 AE FF FF      [ 2]  583     LDW Y,#-1 
      0027BD 20 04            [ 2]  584     JRA DCMP4 
      0027BF                        585 DCMP_GREAT:
      0027BF 90 AE 00 01      [ 2]  586     LDW Y,#1
      0027C3                        587 DCMP4:
      0027C3 1D 00 02         [ 2]  588     SUBW X,#2 
      0027C6 FF               [ 2]  589     LDW (X),Y 
      0027C7 81               [ 4]  590     RET
                                    591 
                                    592 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    593 ;   2>R ( d -- R: d )
                                    594 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027C8                        595     _HEADER DTOR,3,"2>R"
      0027C8 27 97                    1         .word LINK 
                           0027CA     2         LINK=.
      0027CA 03                       3         .byte 3  
      0027CB 32 3E 52                 4         .ascii "2>R"
      0027CE                          5         DTOR:
      0027CE 90 85            [ 2]  596     POPW Y 
      0027D0 90 BF 26         [ 2]  597     LDW YTEMP,Y 
      0027D3 90 93            [ 1]  598     LDW Y,X 
      0027D5 90 EE 02         [ 2]  599     LDW Y,(2,Y)
      0027D8 90 89            [ 2]  600     PUSHW Y   ; d low 
      0027DA 90 93            [ 1]  601     LDW Y,X 
      0027DC 90 FE            [ 2]  602     LDW Y,(Y)
      0027DE 90 89            [ 2]  603     PUSHW Y   ; d hi 
      0027E0 1C 00 04         [ 2]  604     ADDW X,#4  
      0027E3 92 CC 26         [ 5]  605     JP [YTEMP]
                                    606 
                                    607 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    608 ;  2R> ( -- d ) R: d --      
                                    609 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027E6                        610     _HEADER DRFROM,3,"2R>"
      0027E6 27 CA                    1         .word LINK 
                           0027E8     2         LINK=.
      0027E8 03                       3         .byte 3  
      0027E9 32 52 3E                 4         .ascii "2R>"
      0027EC                          5         DRFROM:
      0027EC 90 85            [ 2]  611     POPW Y      ; d hi 
      0027EE 90 BF 26         [ 2]  612     LDW YTEMP,Y 
      0027F1 1D 00 04         [ 2]  613     SUBW X,#4
      0027F4 90 85            [ 2]  614     POPW Y       ; d hi 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



      0027F6 FF               [ 2]  615     LDW (X),Y 
      0027F7 90 85            [ 2]  616     POPW Y       ; d low  
      0027F9 EF 02            [ 2]  617     LDW (2,X),Y 
      0027FB 92 CC 26         [ 5]  618     JP [YTEMP]
                                    619     
                                    620 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    621 ;   2R@ ( -- d )
                                    622 ;   fecth a double from RSTACK
                                    623 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027FE                        624     _HEADER DRAT,3,"2R@"
      0027FE 27 E8                    1         .word LINK 
                           002800     2         LINK=.
      002800 03                       3         .byte 3  
      002801 32 52 40                 4         .ascii "2R@"
      002804                          5         DRAT:
      002804 90 85            [ 2]  625     POPW Y 
      002806 90 BF 26         [ 2]  626     LDW YTEMP,Y 
      002809 1D 00 04         [ 2]  627     SUBW X,#4 
      00280C 16 01            [ 2]  628     LDW Y,(1,SP)
      00280E FF               [ 2]  629     LDW (X),Y 
      00280F 16 03            [ 2]  630     LDW Y,(3,SP)
      002811 EF 02            [ 2]  631     LDW (2,X),Y 
      002813 92 CC 26         [ 5]  632     JP [YTEMP]
                                    633 
                                    634 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    635 ;  2VARIABLE <name> 
                                    636 ;  create a double variable 
                                    637 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002816                        638     _HEADER DVARIA,9,"2VARIABLE"
      002816 28 00                    1         .word LINK 
                           002818     2         LINK=.
      002818 09                       3         .byte 9  
      002819 32 56 41 52 49 41 42     4         .ascii "2VARIABLE"
             4C 45
      002822                          5         DVARIA:
      002822 CD 0C 14         [ 4]  639         CALL HERE
      002825 CD 05 88         [ 4]  640         CALL DUPP
      002828                        641         _DOLIT 4  
      002828 CD 04 6F         [ 4]    1     CALL DOLIT 
      00282B 00 04                    2     .word 4 
      00282D CD 07 AD         [ 4]  642         CALL PLUS 
      002830 CD 06 DF         [ 4]  643         CALL VPP 
      002833 CD 04 D1         [ 4]  644         CALL STORE
      002836 CD 17 F0         [ 4]  645         CALL CREAT
      002839 CD 05 88         [ 4]  646         CALL DUPP
      00283C CD 14 57         [ 4]  647         CALL COMMA
      00283F CD 0B 37         [ 4]  648         CALL ZERO
      002842 CD 05 B0         [ 4]  649         CALL OVER 
      002845 CD 04 D1         [ 4]  650         CALL STORE 
      002848 CD 0B 37         [ 4]  651         CALL ZERO 
      00284B CD 05 98         [ 4]  652         CALL SWAPP 
      00284E CD 04 D1         [ 4]  653         CALL STORE
      002851 CD 20 F6         [ 4]  654         CALL FMOVE ; move definition to FLASH
      002854 CD 07 3B         [ 4]  655         CALL QDUP 
      002857 CD 04 98         [ 4]  656         CALL QBRAN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



      00285A 18 3D                  657         .word SET_RAMLAST   
      00285C CD 1B 9E         [ 4]  658         call UPDATVP  ; don't update if variable kept in RAM.
      00285F CD 21 8A         [ 4]  659         CALL UPDATPTR
      002862 81               [ 4]  660         RET         
                                    661 
                                    662 
                                    663 
                                    664 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    665 ;  2LITERAL ( d -- )
                                    666 ;  compile double literal 
                                    667 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002863                        668     _HEADER DLITER,IMEDD+8,"2LITERAL"
      002863 28 18                    1         .word LINK 
                           002865     2         LINK=.
      002865 88                       3         .byte IMEDD+8  
      002866 32 4C 49 54 45 52 41     4         .ascii "2LITERAL"
             4C
      00286E                          5         DLITER:
      00286E CD 14 9C         [ 4]  669     CALL COMPI 
      002871 28 79                  670     .word do2lit 
      002873 CD 14 57         [ 4]  671     CALL COMMA 
      002876 CC 14 57         [ 2]  672     JP   COMMA 
                                    673 
                                    674 
                                    675 ; runtime for 2LITERAL 
      002879                        676 do2lit:
      002879 1D 00 04         [ 2]  677     SUBW X,#4 
      00287C 16 01            [ 2]  678     LDW Y,(1,SP)
      00287E 90 FE            [ 2]  679     LDW Y,(Y)
      002880 FF               [ 2]  680     LDW (X),Y 
      002881 16 01            [ 2]  681     LDW Y,(1,SP)
      002883 90 EE 02         [ 2]  682     LDW Y,(2,Y)
      002886 EF 02            [ 2]  683     LDW (2,X),Y 
      002888 90 85            [ 2]  684     POPW Y 
      00288A 90 EC 04         [ 2]  685     JP (4,Y)
                                    686 
                                    687 
                                    688 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    689 ;   2OVER ( d1 d2 -- d1 d2 d1 )
                                    690 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00288D                        691     _HEADER DOVER,5,"2OVER"
      00288D 28 65                    1         .word LINK 
                           00288F     2         LINK=.
      00288F 05                       3         .byte 5  
      002890 32 4F 56 45 52           4         .ascii "2OVER"
      002895                          5         DOVER:
      002895 90 93            [ 1]  692     LDW Y,X 
      002897 1D 00 04         [ 2]  693     SUBW X,#4 
      00289A 90 89            [ 2]  694     PUSHW Y 
      00289C 90 EE 04         [ 2]  695     LDW Y,(4,Y)  ; d1 hi 
      00289F FF               [ 2]  696     LDW (X),Y 
      0028A0 90 85            [ 2]  697     POPW Y 
      0028A2 90 EE 06         [ 2]  698     LDW Y,(6,Y)  ;d1 lo 
      0028A5 EF 02            [ 2]  699     LDW (2,X),Y 
      0028A7 81               [ 4]  700     RET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



                                    701 
                                    702 
                                    703 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    704 ;   D2/ ( d -- d/2 )
                                    705 ;   divide double by 2 
                                    706 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028A8                        707     _HEADER D2SLASH,3,"D2/"
      0028A8 28 8F                    1         .word LINK 
                           0028AA     2         LINK=.
      0028AA 03                       3         .byte 3  
      0028AB 44 32 2F                 4         .ascii "D2/"
      0028AE                          5         D2SLASH:
      0028AE 90 93            [ 1]  708     LDW Y,X 
      0028B0 90 FE            [ 2]  709     LDW Y,(Y)
      0028B2 90 57            [ 2]  710     SRAW Y 
      0028B4 FF               [ 2]  711     LDW (X),Y 
      0028B5 90 93            [ 1]  712     LDW Y,X 
      0028B7 90 EE 02         [ 2]  713     LDW Y,(2,Y)
      0028BA 90 56            [ 2]  714     RRCW Y 
      0028BC EF 02            [ 2]  715     LDW (2,X),Y 
      0028BE 81               [ 4]  716     RET
                                    717 
                                    718 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    719 ;  D2* ( d -- d*2 )
                                    720 ;  multiply double by 2 
                                    721 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028BF                        722     _HEADER D2STAR,3,"D2*"
      0028BF 28 AA                    1         .word LINK 
                           0028C1     2         LINK=.
      0028C1 03                       3         .byte 3  
      0028C2 44 32 2A                 4         .ascii "D2*"
      0028C5                          5         D2STAR:
      0028C5 90 93            [ 1]  723     LDW Y,X 
      0028C7 90 EE 02         [ 2]  724     LDW Y,(2,Y)
      0028CA 98               [ 1]  725     RCF 
      0028CB 90 59            [ 2]  726     RLCW Y 
      0028CD EF 02            [ 2]  727     LDW (2,X),Y 
      0028CF 90 93            [ 1]  728     LDW Y,X 
      0028D1 90 FE            [ 2]  729     LDW Y,(Y)
      0028D3 90 59            [ 2]  730     RLCW Y 
      0028D5 FF               [ 2]  731     LDW (X),Y 
      0028D6 81               [ 4]  732     RET 
                                    733 
                                    734 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    735 ;   DLSHIFT ( d n -- d )
                                    736 ;   left shift double 
                                    737 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028D7                        738     _HEADER DLSHIFT,7,"DLSHIFT"
      0028D7 28 C1                    1         .word LINK 
                           0028D9     2         LINK=.
      0028D9 07                       3         .byte 7  
      0028DA 44 4C 53 48 49 46 54     4         .ascii "DLSHIFT"
      0028E1                          5         DLSHIFT:
      0028E1 E6 01            [ 1]  739     LD A,(1,X) ; shift count 
      0028E3 1C 00 02         [ 2]  740     ADDW X,#2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



      0028E6 90 93            [ 1]  741     LDW Y,X 
      0028E8 90 FE            [ 2]  742     LDW Y,(Y)
      0028EA 90 BF 26         [ 2]  743     LDW YTEMP,Y  ; d hi 
      0028ED 90 93            [ 1]  744     LDW Y,X 
      0028EF 90 EE 02         [ 2]  745     LDW Y,(2,Y)  ; d low 
      0028F2                        746 DLSHIFT1:
      0028F2 4D               [ 1]  747     TNZ A 
      0028F3 27 12            [ 1]  748     JREQ DLSHIFT2 
      0028F5 98               [ 1]  749     RCF 
      0028F6 90 59            [ 2]  750     RLCW Y 
      0028F8 90 89            [ 2]  751     PUSHW Y 
      0028FA 90 BE 26         [ 2]  752     LDW Y,YTEMP 
      0028FD 90 59            [ 2]  753     RLCW Y 
      0028FF 90 BF 26         [ 2]  754     LDW YTEMP,Y 
      002902 90 85            [ 2]  755     POPW Y 
      002904 4A               [ 1]  756     DEC A 
      002905 20 EB            [ 2]  757     JRA DLSHIFT1 
      002907                        758 DLSHIFT2:
      002907 EF 02            [ 2]  759     LDW (2,X),Y 
      002909 90 BE 26         [ 2]  760     LDW Y,YTEMP 
      00290C FF               [ 2]  761     LDW (X),Y 
      00290D 81               [ 4]  762     RET 
                                    763 
                                    764 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    765 ;  DRSHIFT ( d n -- d )
                                    766 ;  shift right n bits 
                                    767 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00290E                        768     _HEADER DRSHIFT,7,"DRSHIFT"
      00290E 28 D9                    1         .word LINK 
                           002910     2         LINK=.
      002910 07                       3         .byte 7  
      002911 44 52 53 48 49 46 54     4         .ascii "DRSHIFT"
      002918                          5         DRSHIFT:
      002918 E6 01            [ 1]  769     LD A,(1,X)
      00291A A4 1F            [ 1]  770     AND A,#0X1F 
      00291C 1C 00 02         [ 2]  771     ADDW X,#2 
      00291F                        772 DRSHIFT1:
      00291F 4D               [ 1]  773     TNZ A 
      002920 27 13            [ 1]  774     JREQ DRSHIFT2 
      002922 90 93            [ 1]  775     LDW Y,X 
      002924 90 FE            [ 2]  776     LDW Y,(Y)
      002926 90 57            [ 2]  777     SRAW Y 
      002928 FF               [ 2]  778     LDW (X),Y 
      002929 90 93            [ 1]  779     LDW Y,X 
      00292B 90 EE 02         [ 2]  780     LDW Y,(2,Y)
      00292E 90 56            [ 2]  781     RRCW Y 
      002930 EF 02            [ 2]  782     LDW (2,X),Y 
      002932 4A               [ 1]  783     DEC A
      002933 20 EA            [ 2]  784     JRA DRSHIFT1  
      002935                        785 DRSHIFT2:
      002935 81               [ 4]  786     RET 
                                    787 
                                    788 
                                    789 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    790 ;   D* ( d1 d2 -- d3 )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



                                    791 ;   double product 
                                    792 ;   
                                    793 ;   d3 = d1 * d2
                                    794 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002936                        795     _HEADER DSTAR,2,"D*"
      002936 29 10                    1         .word LINK 
                           002938     2         LINK=.
      002938 02                       3         .byte 2  
      002939 44 2A                    4         .ascii "D*"
      00293B                          5         DSTAR:
      00293B CD 05 88         [ 4]  796     CALL DUPP 
      00293E CD 05 BF         [ 4]  797     CALL ZLESS  
      002941 CD 05 51         [ 4]  798     CALL TOR    ; R: d2sign 
      002944 CD 25 30         [ 4]  799     CALL DABS   
      002947 CD 05 34         [ 4]  800     CALL RFROM 
      00294A CD 07 6B         [ 4]  801     CALL NROT  ; d1 d2s ud2
      00294D CD 27 CE         [ 4]  802     CALL DTOR  ; d1 d2s R: ud2  
      002950 CD 05 51         [ 4]  803     CALL TOR   ; d1 R: ud2 d2s   
      002953 CD 05 88         [ 4]  804     CALL DUPP 
      002956 CD 05 BF         [ 4]  805     CALL ZLESS 
      002959 CD 05 34         [ 4]  806     CALL RFROM 
      00295C CD 06 0E         [ 4]  807     CALL XORR   
      00295F CD 05 51         [ 4]  808     CALL TOR   ; d1 R: ud2 prod_sign  
      002962 CD 25 30         [ 4]  809     CALL DABS ; ud1 R: ud2 ps  
      002965 CD 05 34         [ 4]  810     CALL RFROM  
      002968 CD 07 6B         [ 4]  811     CALL NROT   ; ps ud1 
      00296B CD 07 98         [ 4]  812     CALL DDUP   ; ps ud1 ud1  
      00296E CD 05 34         [ 4]  813     CALL RFROM  ; ps ud1 ud1 ud2hi 
      002971 CD 26 08         [ 4]  814     CALL DSSTAR ; ps ud1 dprodhi 
                                    815 ; shift partial product 16 bits left 
      002974 CD 05 7E         [ 4]  816     CALL DROP   ; drop overflow 
      002977 CD 0B 37         [ 4]  817     CALL ZERO   ; ps ud1 prodhi 
      00297A CD 05 98         [ 4]  818     CALL SWAPP  
      00297D CD 26 51         [ 4]  819     CALL DSWAP  ; ps dprodhi ud1 
      002980 CD 05 34         [ 4]  820     CALL RFROM  ; ps dprodhi ud1 ud2lo
      002983 CD 26 08         [ 4]  821     CALL DSSTAR ; ps  dprodhi dprodlo 
      002986 CD 2A 95         [ 4]  822     CALL DPLUS
      002989 CD 07 4C         [ 4]  823     CALL ROT    ; dprod ps 
      00298C                        824     _QBRAN DDSTAR3 
      00298C CD 04 98         [ 4]    1     CALL QBRAN
      00298F 29 94                    2     .word DDSTAR3
      002991 CD 07 EA         [ 4]  825     CALL DNEGA 
      002994                        826 DDSTAR3:  
      002994 81               [ 4]  827     RET 
                                    828 
                                    829 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    830 ;   DD/MOD  ( d1 d2 -- dr dq )
                                    831 ;   double division dq=d1/d2
                                    832 ;   dr remainder double 
                                    833 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002995                        834     _HEADER DDSLMOD,6,"DD/MOD"  
      002995 29 38                    1         .word LINK 
                           002997     2         LINK=.
      002997 06                       3         .byte 6  
      002998 44 44 2F 4D 4F 44        4         .ascii "DD/MOD"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



      00299E                          5         DDSLMOD:
      00299E                        835     _DOLIT 0 
      00299E CD 04 6F         [ 4]    1     CALL DOLIT 
      0029A1 00 00                    2     .word 0 
      0029A3 CD 05 51         [ 4]  836     CALL TOR   ; R: sign 
      0029A6 90 93            [ 1]  837     LDW Y,X     
      0029A8 90 FE            [ 2]  838     LDW Y,(Y)
      0029AA 2A 0C            [ 1]  839     JRPL DSLA1
      0029AC CD 07 EA         [ 4]  840     CALL DNEGA  ; ud2 
      0029AF CD 05 34         [ 4]  841     CALL RFROM 
      0029B2 CD 07 C7         [ 4]  842     CALL INVER 
      0029B5 CD 05 51         [ 4]  843     CALL TOR  ; sign inverted 
      0029B8                        844 DSLA1:
      0029B8                        845     _DOLIT 2 
      0029B8 CD 04 6F         [ 4]    1     CALL DOLIT 
      0029BB 00 02                    2     .word 2 
      0029BD CD 0B 90         [ 4]  846     CALL PICK 
      0029C0 CD 05 BF         [ 4]  847     CALL ZLESS 
      0029C3                        848     _QBRAN DSLA2
      0029C3 CD 04 98         [ 4]    1     CALL QBRAN
      0029C6 29 DA                    2     .word DSLA2
      0029C8 CD 26 51         [ 4]  849     CALL DSWAP 
      0029CB CD 07 EA         [ 4]  850     CALL DNEGA  ; ud1 
      0029CE CD 26 51         [ 4]  851     CALL DSWAP  ; ud1 ud2 ( divident divisor )     
      0029D1 CD 05 34         [ 4]  852     CALL RFROM 
      0029D4 CD 07 C7         [ 4]  853     CALL INVER 
      0029D7 CD 05 51         [ 4]  854     CALL TOR   ;  sign inverted again 
      0029DA                        855 DSLA2:
                                    856 ; unsigned double division 
      0029DA CD 0B 37         [ 4]  857     CALL ZERO 
      0029DD CD 0B 37         [ 4]  858     CALL ZERO
      0029E0 CD 27 CE         [ 4]  859     CALL DTOR ; quotient  R: sign qlo qhi 
      0029E3 CD 28 95         [ 4]  860     CALL DOVER 
      0029E6 CD 26 7F         [ 4]  861     CALL DCLZ ; n2, dividend leading zeros  
      0029E9 CD 05 51         [ 4]  862     CALL TOR 
      0029EC CD 07 98         [ 4]  863     CALL DDUP    
      0029EF CD 26 7F         [ 4]  864     CALL DCLZ  ; n1, divisor leading zeros
      0029F2 CD 05 34         [ 4]  865     CALL RFROM ; n1 n2 
      0029F5 CD 08 26         [ 4]  866     CALL SUBB
      0029F8 CD 05 88         [ 4]  867     CALL DUPP   
      0029FB CD 05 BF         [ 4]  868     CALL ZLESS 
      0029FE                        869     _TBRAN DSLA7 ; quotient is null 
      0029FE CD 04 A6         [ 4]    1     CALL TBRAN 
      002A01 2A 71                    2     .word DSLA7 
      002A03 CD 05 88         [ 4]  870     CALL DUPP 
      002A06 CD 05 51         [ 4]  871     CALL TOR    ; loop counter 
      002A09 CD 05 88         [ 4]  872     CALL DUPP 
      002A0C CD 05 51         [ 4]  873     CALL TOR    ; need to copies 
      002A0F CD 07 3B         [ 4]  874     CALL QDUP 
      002A12                        875     _QBRAN DSLA3
      002A12 CD 04 98         [ 4]    1     CALL QBRAN
      002A15 2A 1A                    2     .word DSLA3
      002A17 CD 28 E1         [ 4]  876     CALL DLSHIFT ; align divisor with dividend 
      002A1A                        877 DSLA3: ; division loop -- dividend divisor  
      002A1A 90 5F            [ 1]  878     CLRW Y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



      002A1C 90 89            [ 2]  879     PUSHW Y  
      002A1E CD 28 95         [ 4]  880     CALL DOVER 
      002A21 CD 28 95         [ 4]  881     CALL DOVER 
      002A24 CD 27 67         [ 4]  882     CALL DLESS 
      002A27                        883     _TBRAN DSLA4 
      002A27 CD 04 A6         [ 4]    1     CALL TBRAN 
      002A2A 2A 40                    2     .word DSLA4 
      002A2C 90 85            [ 2]  884     POPW Y 
      002A2E 72 A9 00 01      [ 2]  885     ADDW Y,#1 
      002A32 90 89            [ 2]  886     PUSHW Y    ; quotiend least bit 
      002A34 CD 07 98         [ 4]  887     CALL DDUP  ; dividend divisor divisor 
      002A37 CD 27 CE         [ 4]  888     CALL DTOR  
      002A3A CD 2A C7         [ 4]  889     CALL DSUB  ; dividend-divisor 
      002A3D CD 27 EC         [ 4]  890     CALL DRFROM  ; dividend- divisor  
      002A40                        891 DSLA4: ; shift quotient and add 1 bit 
      002A40 90 85            [ 2]  892     POPW Y 
      002A42 90 BF 26         [ 2]  893     LDW YTEMP,Y 
      002A45 16 07            [ 2]  894     LDW Y,(7,SP) ; quotient low 
      002A47 98               [ 1]  895     RCF 
      002A48 90 59            [ 2]  896     RLCW Y
      002A4A 17 07            [ 2]  897     LDW (7,SP),Y 
      002A4C 16 05            [ 2]  898     LDW Y,(5,SP) ; quotient hi 
      002A4E 90 59            [ 2]  899     RLCW Y 
      002A50 17 05            [ 2]  900     LDW (5,SP),Y 
      002A52 16 07            [ 2]  901     LDW Y,(7,SP) 
      002A54 72 B9 00 26      [ 2]  902     ADDW Y,YTEMP
      002A58 17 07            [ 2]  903     LDW (7,SP),Y 
      002A5A 16 01            [ 2]  904     LDW Y,(1,SP) ; loop counter 
      002A5C 90 5D            [ 2]  905     TNZW Y 
      002A5E 27 14            [ 1]  906     JREQ DSLA8
      002A60 72 A2 00 01      [ 2]  907     SUBW Y,#1  
      002A64 17 01            [ 2]  908     LDW (1,SP),Y  
                                    909 ; shift dividend left 1 bit      
      002A66 CD 26 51         [ 4]  910     CALL DSWAP 
      002A69 CD 28 C5         [ 4]  911     CALL D2STAR 
      002A6C CD 26 51         [ 4]  912     CALL DSWAP 
      002A6F 20 A9            [ 2]  913     JRA DSLA3 
      002A71                        914 DSLA7:
      002A71 1C 00 02         [ 2]  915     ADDW X,#2 ; drop shift count  
      002A74                        916 DSLA8:
      002A74 1C 00 04         [ 2]  917     ADDW X,#4 ; drop divisor
      002A77 CD 05 34         [ 4]  918     CALL RFROM
      002A7A CD 05 7E         [ 4]  919     CALL DROP   ; loop counter 
      002A7D CD 05 34         [ 4]  920     CALL RFROM   ; shift count
      002A80 CD 29 18         [ 4]  921     CALL DRSHIFT 
                                    922     ; quotient replace dividend 
      002A83 CD 27 EC         [ 4]  923     CALL DRFROM  ; quotient 
      002A86 90 85            [ 2]  924     POPW Y ; sign 
      002A88 90 5D            [ 2]  925     TNZW Y 
      002A8A 27 03            [ 1]  926     JREQ DSLA9 
      002A8C CD 07 EA         [ 4]  927     CALL DNEGA ; remainder quotient 
      002A8F                        928 DSLA9: 
      002A8F 81               [ 4]  929     RET 
                                    930 
                                    931 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



                                    932 ;   D+ ( d1 d2 -- d3 )
                                    933 ;   add 2 doubles 
                                    934 ;   d3=d1+d2 
                                    935 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002A90                        936     _HEADER DPLUS,2,"D+"
      002A90 29 97                    1         .word LINK 
                           002A92     2         LINK=.
      002A92 02                       3         .byte 2  
      002A93 44 2B                    4         .ascii "D+"
      002A95                          5         DPLUS:
      002A95 90 93            [ 1]  937     LDW Y,X 
      002A97 90 FE            [ 2]  938     LDW Y,(Y)
      002A99 90 BF 26         [ 2]  939     LDW YTEMP,Y ; d2 hi 
      002A9C 90 93            [ 1]  940     LDW Y,X 
      002A9E 90 EE 02         [ 2]  941     LDW Y,(2,Y)
      002AA1 90 BF 24         [ 2]  942     LDW XTEMP,Y ; d2 lo 
      002AA4 1C 00 04         [ 2]  943     ADDW X,#4 
      002AA7 90 93            [ 1]  944     LDW Y,X 
      002AA9 90 EE 02         [ 2]  945     LDW Y,(2,Y) ; d1 lo
      002AAC 72 B9 00 24      [ 2]  946     ADDW Y,XTEMP
      002AB0 EF 02            [ 2]  947     LDW (2,X),Y 
      002AB2 90 93            [ 1]  948     LDW Y,X 
      002AB4 90 FE            [ 2]  949     LDW Y,(Y) ; d1 hi 
      002AB6 24 04            [ 1]  950     JRNC DPLUS1 
      002AB8 72 A9 00 01      [ 2]  951     ADDW Y,#1 
      002ABC                        952 DPLUS1: 
      002ABC 72 B9 00 26      [ 2]  953     ADDW Y,YTEMP 
      002AC0 FF               [ 2]  954     LDW (X),Y 
      002AC1 81               [ 4]  955     RET 
                                    956 
                                    957 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    958 ;   D- ( d1 d2 -- d3 )
                                    959 ;   d3=d1-d2 
                                    960 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002AC2                        961     _HEADER DSUB,2,"D-"
      002AC2 2A 92                    1         .word LINK 
                           002AC4     2         LINK=.
      002AC4 02                       3         .byte 2  
      002AC5 44 2D                    4         .ascii "D-"
      002AC7                          5         DSUB:
      002AC7 90 93            [ 1]  962     LDW Y,X 
      002AC9 90 FE            [ 2]  963     LDW Y,(Y)
      002ACB 90 BF 26         [ 2]  964     LDW YTEMP,Y ; d2 hi 
      002ACE 90 93            [ 1]  965     LDW Y,X 
      002AD0 90 EE 02         [ 2]  966     LDW Y,(2,Y)
      002AD3 90 BF 24         [ 2]  967     LDW XTEMP,Y ; d2 lo 
      002AD6 1C 00 04         [ 2]  968     ADDW X,#4 
      002AD9 90 93            [ 1]  969     LDW Y,X 
      002ADB 90 EE 02         [ 2]  970     LDW Y,(2,Y) ; d1 lo
      002ADE 72 B2 00 24      [ 2]  971     SUBW Y,XTEMP
      002AE2 EF 02            [ 2]  972     LDW (2,X),Y 
      002AE4 90 93            [ 1]  973     LDW Y,X 
      002AE6 90 FE            [ 2]  974     LDW Y,(Y) ; d1 hi 
      002AE8 24 04            [ 1]  975     JRNC DSUB1 
      002AEA 72 A2 00 01      [ 2]  976     SUBW Y,#1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



      002AEE                        977 DSUB1: 
      002AEE 72 B2 00 26      [ 2]  978     SUBW Y,YTEMP 
      002AF2 FF               [ 2]  979     LDW (X),Y 
      002AF3 81               [ 4]  980     RET 
                                    981 
                                    982 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



                                   4437 .endif 
                           000001  4438 .if WANT_FLOAT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



                                   4439         .include "float.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;*********************************
                                     21 ;    floating point library
                                     22 ;    adapted from 
                                     23 ;    Forth dimensions Vol. IV #1 
                                     24 ;    published in  may/june 1982
                                     25 ;
                                     26 ; Creation date: 2021-06-15 
                                     27 ;
                                     28 ; NOTE: I used a different format 
                                     29 ;       for float number. This 
                                     30 ;       enable comparison of floats 
                                     31 ;       as they were integer hence 
                                     32 ;       there no need for F>,F<,etc 
                                     33 ;
                                     34 ;  This file is part of stm8_eforth 
                                     35 ;  project and same licence apply.
                                     36 ;************************************
                                     37 
                                     38 ;*************************************************
                                     39 ;  FLOAT format double for storage 
                                     40 ;  bits 22:0  mantissa absolute value 
                                     41 ;  bits  30:23  exponent with 127 offset added  
                                     42 ;  bit 31  mantissa sign 
                                     43 ;  float value: if bit 31 is 1 negate mantissa
                                     44 ;                else keep mantissas as bits 22:0
                                     45 ;                as is
                                     46 ;                eponent: 10^^(exp-127) 
                                     47 ;***********************************************  
                                     48 
                                     49     .module FLOAT 
                                     50 
                           000001    51 .if WANT_DOUBLE 
                                     52 ; already included 
                           000000    53 .else
                                     54 ;  must be included  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



                                     55     .include "double.asm"
                                     56 .endif  
                                     57 
                           7FFFFF    58     MAX_MANTISSA = 0x7FFFFF 
                                     59 
                                     60 ;-------------------------
                                     61 ;    FPSW ( -- a )
                                     62 ;    floating state variable
                                     63 ;    bit 0 zero flag 
                                     64 ;    bit 1 negative flag 
                                     65 ;    bit 2 overflow/error flag 
                                     66 ;---------------------------
      002AF4                         67     _HEADER FPSW,4,"FPSW"
      002AF4 2A C4                    1         .word LINK 
                           002AF6     2         LINK=.
      002AF6 04                       3         .byte 4  
      002AF7 46 50 53 57              4         .ascii "FPSW"
      002AFB                          5         FPSW:
      002AFB 90 AE 00 08      [ 2]   68 	LDW Y,#UFPSW  
      002AFF 1D 00 02         [ 2]   69 	SUBW X,#2
      002B02 FF               [ 2]   70     LDW (X),Y
      002B03 81               [ 4]   71     RET
                                     72 
                                     73 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     74 ;   FRESET ( -- )
                                     75 ;   reset FPSW variable 
                                     76 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
      002B04                         77     _HEADER FRESET,6,"FRESET"
      002B04 2A F6                    1         .word LINK 
                           002B06     2         LINK=.
      002B06 06                       3         .byte 6  
      002B07 46 52 45 53 45 54        4         .ascii "FRESET"
      002B0D                          5         FRESET:
      002B0D                         78     _DOLIT 0 
      002B0D CD 04 6F         [ 4]    1     CALL DOLIT 
      002B10 00 00                    2     .word 0 
      002B12 CD 2A FB         [ 4]   79     CALL FPSW 
      002B15 CD 04 D1         [ 4]   80     CALL STORE 
      002B18 81               [ 4]   81     RET 
                                     82 
                                     83 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     84 ;   FINIT ( -- )
                                     85 ;   initialize floating point 
                                     86 ;   library 
                                     87 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B19                         88     _HEADER FINIT,5,"FINIT"
      002B19 2B 06                    1         .word LINK 
                           002B1B     2         LINK=.
      002B1B 05                       3         .byte 5  
      002B1C 46 49 4E 49 54           4         .ascii "FINIT"
      002B21                          5         FINIT:
      002B21 CD 2B 0D         [ 4]   89     CALL FRESET 
      002B24 81               [ 4]   90     RET 
                                     91 
                                     92 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



                                     93 ;    FER ( -- u )
                                     94 ;    return FPSW value 
                                     95 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B25                         96     _HEADER FER,3,"FER"
      002B25 2B 1B                    1         .word LINK 
                           002B27     2         LINK=.
      002B27 03                       3         .byte 3  
      002B28 46 45 52                 4         .ascii "FER"
      002B2B                          5         FER:
      002B2B CD 2A FB         [ 4]   97     CALL FPSW 
      002B2E CD 04 E3         [ 4]   98     CALL AT 
      002B31 81               [ 4]   99     RET 
                                    100 
                                    101 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    102 ;    FZE  ( -- z )
                                    103 ;    return FPSW zero flag 
                                    104 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B32                        105     _HEADER FZE,3,"FZE"
      002B32 2B 27                    1         .word LINK 
                           002B34     2         LINK=.
      002B34 03                       3         .byte 3  
      002B35 46 5A 45                 4         .ascii "FZE"
      002B38                          5         FZE:
      002B38 CD 2A FB         [ 4]  106     CALL FPSW
      002B3B CD 04 E3         [ 4]  107     CALL AT  
      002B3E                        108     _DOLIT 1
      002B3E CD 04 6F         [ 4]    1     CALL DOLIT 
      002B41 00 01                    2     .word 1 
      002B43 CD 05 E5         [ 4]  109     CALL ANDD 
      002B46 81               [ 4]  110     RET 
                                    111 
                                    112 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    113 ;    FNE ( -- n )
                                    114 ;    return FPSW negative flag 
                                    115 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B47                        116     _HEADER FNE,3,"FNE"
      002B47 2B 34                    1         .word LINK 
                           002B49     2         LINK=.
      002B49 03                       3         .byte 3  
      002B4A 46 4E 45                 4         .ascii "FNE"
      002B4D                          5         FNE:
      002B4D CD 2A FB         [ 4]  117     CALL FPSW 
      002B50 CD 04 E3         [ 4]  118     CALL AT 
      002B53                        119     _DOLIT 2 
      002B53 CD 04 6F         [ 4]    1     CALL DOLIT 
      002B56 00 02                    2     .word 2 
      002B58 CD 05 E5         [ 4]  120     CALL ANDD 
      002B5B 81               [ 4]  121     RET 
                                    122 
                                    123 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    124 ;   FOV (A -- v )
                                    125 ;   return FPSW overflow flag 
                                    126 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B5C                        127     _HEADER FOV,3,"FOV"
      002B5C 2B 49                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



                           002B5E     2         LINK=.
      002B5E 03                       3         .byte 3  
      002B5F 46 4F 56                 4         .ascii "FOV"
      002B62                          5         FOV:
      002B62 CD 2A FB         [ 4]  128     CALL FPSW
      002B65 CD 04 E3         [ 4]  129     CALL AT  
      002B68                        130     _DOLIT 4 
      002B68 CD 04 6F         [ 4]    1     CALL DOLIT 
      002B6B 00 04                    2     .word 4 
      002B6D CD 05 E5         [ 4]  131     CALL ANDD 
      002B70 81               [ 4]  132     RET 
                                    133 
                                    134 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    135 ;    SFZ ( f# -- f# )
                                    136 ;    set FPSW zero flag 
                                    137 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B71                        138     _HEADER SFZ,3,"SFZ"
      002B71 2B 5E                    1         .word LINK 
                           002B73     2         LINK=.
      002B73 03                       3         .byte 3  
      002B74 53 46 5A                 4         .ascii "SFZ"
      002B77                          5         SFZ:
      002B77 CD 07 98         [ 4]  139     CALL DDUP 
      002B7A CD 2B 2B         [ 4]  140     CALL FER 
      002B7D                        141     _DOLIT 0xfffe 
      002B7D CD 04 6F         [ 4]    1     CALL DOLIT 
      002B80 FF FE                    2     .word 0xfffe 
      002B82 CD 05 E5         [ 4]  142     CALL ANDD 
      002B85 CD 05 51         [ 4]  143     CALL TOR    
      002B88                        144     _DOLIT 0x807F 
      002B88 CD 04 6F         [ 4]    1     CALL DOLIT 
      002B8B 80 7F                    2     .word 0x807F 
      002B8D CD 05 E5         [ 4]  145     CALL ANDD 
      002B90 CD 24 E8         [ 4]  146     CALL DZEQUAL 
      002B93                        147     _DOLIT 1 
      002B93 CD 04 6F         [ 4]    1     CALL DOLIT 
      002B96 00 01                    2     .word 1 
      002B98 CD 05 E5         [ 4]  148     CALL ANDD 
      002B9B CD 05 34         [ 4]  149     CALL RFROM 
      002B9E CD 05 F9         [ 4]  150     CALL ORR 
      002BA1 CD 2A FB         [ 4]  151     CALL FPSW 
      002BA4 CD 04 D1         [ 4]  152     CALL STORE 
      002BA7 81               [ 4]  153     RET 
                                    154 
                                    155 
                                    156 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    157 ;   SFN ( f# -- f# )
                                    158 ;   set FPSW negative flag 
                                    159 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BA8                        160     _HEADER SFN,3,"SFN"
      002BA8 2B 73                    1         .word LINK 
                           002BAA     2         LINK=.
      002BAA 03                       3         .byte 3  
      002BAB 53 46 4E                 4         .ascii "SFN"
      002BAE                          5         SFN:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



      002BAE CD 05 88         [ 4]  161     CALL DUPP  
      002BB1 CD 2B 2B         [ 4]  162     CALL FER 
      002BB4                        163     _DOLIT 0xFFFD 
      002BB4 CD 04 6F         [ 4]    1     CALL DOLIT 
      002BB7 FF FD                    2     .word 0xFFFD 
      002BB9 CD 05 E5         [ 4]  164     CALL ANDD  
      002BBC CD 05 51         [ 4]  165     CALL TOR 
      002BBF                        166     _DOLIT 0x8000
      002BBF CD 04 6F         [ 4]    1     CALL DOLIT 
      002BC2 80 00                    2     .word 0x8000 
      002BC4 CD 05 E5         [ 4]  167     CALL ANDD
      002BC7 90 93            [ 1]  168     LDW Y,X 
      002BC9 90 FE            [ 2]  169     LDW Y,(Y)
      002BCB 98               [ 1]  170     RCF 
      002BCC 90 59            [ 2]  171     RLCW Y 
      002BCE 90 59            [ 2]  172     RLCW Y 
      002BD0 90 59            [ 2]  173     RLCW Y 
      002BD2 FF               [ 2]  174     LDW (X),Y 
      002BD3 CD 05 34         [ 4]  175     CALL RFROM 
      002BD6 CD 05 F9         [ 4]  176     CALL ORR 
      002BD9 CD 2A FB         [ 4]  177     CALL FPSW
      002BDC CD 04 D1         [ 4]  178     CALL STORE 
      002BDF 81               [ 4]  179     RET 
                                    180 
                                    181 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    182 ;   SFV ( -- )
                                    183 ;   set overflow flag 
                                    184 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BE0                        185     _HEADER SFV,3,"SFV"
      002BE0 2B AA                    1         .word LINK 
                           002BE2     2         LINK=.
      002BE2 03                       3         .byte 3  
      002BE3 53 46 56                 4         .ascii "SFV"
      002BE6                          5         SFV:
      002BE6 CD 2A FB         [ 4]  186     CALL FPSW 
      002BE9 CD 04 E3         [ 4]  187     CALL AT 
      002BEC                        188     _DOLIT 4 
      002BEC CD 04 6F         [ 4]    1     CALL DOLIT 
      002BEF 00 04                    2     .word 4 
      002BF1 CD 05 F9         [ 4]  189     CALL ORR 
      002BF4 CD 2A FB         [ 4]  190     CALL FPSW 
      002BF7 CD 04 D1         [ 4]  191     CALL STORE 
      002BFA 81               [ 4]  192     RET 
                                    193 
                                    194 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    195 ;  F>ME ( f# -- m e )
                                    196 ;  split float in mantissa/exponent 
                                    197 ;  m mantissa as a double 
                                    198 ;  e exponent as a single 
                                    199 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BFB                        200     _HEADER ATEXP,4,"F>ME"             
      002BFB 2B E2                    1         .word LINK 
                           002BFD     2         LINK=.
      002BFD 04                       3         .byte 4  
      002BFE 46 3E 4D 45              4         .ascii "F>ME"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



      002C02                          5         ATEXP:
      002C02 CD 2B 0D         [ 4]  201     CALL FRESET
      002C05 CD 2B AE         [ 4]  202     CALL SFN
      002C08 CD 2B 77         [ 4]  203     CALL SFZ 
      002C0B CD 05 88         [ 4]  204     CALL DUPP
      002C0E                        205     _DOLIT 0X7F80 
      002C0E CD 04 6F         [ 4]    1     CALL DOLIT 
      002C11 7F 80                    2     .word 0X7F80 
      002C13 CD 05 E5         [ 4]  206     CALL ANDD 
      002C16                        207     _DOLIT 7 
      002C16 CD 04 6F         [ 4]    1     CALL DOLIT 
      002C19 00 07                    2     .word 7 
      002C1B CD 0B 05         [ 4]  208     CALL RSHIFT
      002C1E                        209     _DOLIT 127 
      002C1E CD 04 6F         [ 4]    1     CALL DOLIT 
      002C21 00 7F                    2     .word 127 
      002C23 CD 08 26         [ 4]  210     CALL SUBB
      002C26 CD 05 51         [ 4]  211     CALL TOR 
      002C29                        212     _DOLIT 0x7F
      002C29 CD 04 6F         [ 4]    1     CALL DOLIT 
      002C2C 00 7F                    2     .word 0x7F 
      002C2E CD 05 E5         [ 4]  213     CALL ANDD  ; mantissa as double  
      002C31 CD 2B 4D         [ 4]  214     CALL FNE 
      002C34                        215     _QBRAN POSMANT 
      002C34 CD 04 98         [ 4]    1     CALL QBRAN
      002C37 2C 3C                    2     .word POSMANT
      002C39 CD 25 06         [ 4]  216     CALL DNEGAT 
      002C3C                        217 POSMANT:
      002C3C CD 05 34         [ 4]  218     CALL RFROM 
      002C3F 81               [ 4]  219     RET 
                                    220 
                                    221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    222 ;    ME>F ( m e -- f# )
                                    223 ;    built float from mantissa/exponent 
                                    224 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C40                        225     _HEADER STEXP,4,"ME>F"
      002C40 2B FD                    1         .word LINK 
                           002C42     2         LINK=.
      002C42 04                       3         .byte 4  
      002C43 4D 45 3E 46              4         .ascii "ME>F"
      002C47                          5         STEXP:
      002C47 CD 05 88         [ 4]  226     CALL DUPP 
      002C4A CD 08 40         [ 4]  227     CALL ABSS 
      002C4D                        228     _DOLIT 127 
      002C4D CD 04 6F         [ 4]    1     CALL DOLIT 
      002C50 00 7F                    2     .word 127 
      002C52 CD 08 AA         [ 4]  229     CALL UGREAT
      002C55                        230     _QBRAN STEXP1
      002C55 CD 04 98         [ 4]    1     CALL QBRAN
      002C58 2C 5D                    2     .word STEXP1
      002C5A CD 2B E6         [ 4]  231     CALL SFV  
      002C5D                        232 STEXP1:
      002C5D                        233     _DOLIT 127 
      002C5D CD 04 6F         [ 4]    1     CALL DOLIT 
      002C60 00 7F                    2     .word 127 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



      002C62 CD 07 AD         [ 4]  234     CALL PLUS 
      002C65                        235     _DOLIT 0XFF 
      002C65 CD 04 6F         [ 4]    1     CALL DOLIT 
      002C68 00 FF                    2     .word 0XFF 
      002C6A CD 05 E5         [ 4]  236     CALL ANDD 
      002C6D                        237     _DOLIT 7 
      002C6D CD 04 6F         [ 4]    1     CALL DOLIT 
      002C70 00 07                    2     .word 7 
      002C72 CD 0A E9         [ 4]  238     CALL LSHIFT 
      002C75 CD 05 51         [ 4]  239     CALL TOR   ; R: e 
      002C78 CD 05 88         [ 4]  240     CALL DUPP 
      002C7B                        241     _DOLIT 0X8000 
      002C7B CD 04 6F         [ 4]    1     CALL DOLIT 
      002C7E 80 00                    2     .word 0X8000 
      002C80 CD 05 E5         [ 4]  242     CALL ANDD 
      002C83                        243     _QBRAN STEXP2 
      002C83 CD 04 98         [ 4]    1     CALL QBRAN
      002C86 2C 99                    2     .word STEXP2
      002C88                        244     _DOLIT 0X8000 
      002C88 CD 04 6F         [ 4]    1     CALL DOLIT 
      002C8B 80 00                    2     .word 0X8000 
      002C8D CD 05 34         [ 4]  245     CALL RFROM 
      002C90 CD 05 F9         [ 4]  246     CALL ORR
      002C93 CD 05 51         [ 4]  247     CALL TOR
      002C96 CD 25 06         [ 4]  248     CALL DNEGAT  
      002C99                        249 STEXP2:
      002C99 CD 05 88         [ 4]  250     CALL DUPP 
      002C9C                        251     _DOLIT 0X7F
      002C9C CD 04 6F         [ 4]    1     CALL DOLIT 
      002C9F 00 7F                    2     .word 0X7F 
      002CA1 CD 08 AA         [ 4]  252     CALL UGREAT 
      002CA4                        253     _QBRAN STEXP3 
      002CA4 CD 04 98         [ 4]    1     CALL QBRAN
      002CA7 2C AC                    2     .word STEXP3
      002CA9 CD 2B E6         [ 4]  254     CALL SFV 
      002CAC                        255 STEXP3:
      002CAC                        256     _DOLIT 0X7F 
      002CAC CD 04 6F         [ 4]    1     CALL DOLIT 
      002CAF 00 7F                    2     .word 0X7F 
      002CB1 CD 05 E5         [ 4]  257     CALL ANDD 
      002CB4 CD 05 34         [ 4]  258     CALL RFROM 
      002CB7 CD 05 F9         [ 4]  259     CALL ORR 
      002CBA CD 2B 77         [ 4]  260     CALL SFZ 
      002CBD CD 2B AE         [ 4]  261     CALL SFN 
      002CC0 81               [ 4]  262     RET 
                                    263 
                                    264 
                                    265 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    266 ;   E. ( f# -- )
                                    267 ;   print float in scientific 
                                    268 ;   format 
                                    269 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002CC1                        270     _HEADER EDOT,2,"E."
      002CC1 2C 42                    1         .word LINK 
                           002CC3     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



      002CC3 02                       3         .byte 2  
      002CC4 45 2E                    4         .ascii "E."
      002CC6                          5         EDOT:
      002CC6 CD 06 4E         [ 4]  271     CALL BASE 
      002CC9 CD 04 E3         [ 4]  272     CALL AT 
      002CCC CD 05 51         [ 4]  273     CALL TOR 
      002CCF                        274     _DOLIT 10 
      002CCF CD 04 6F         [ 4]    1     CALL DOLIT 
      002CD2 00 0A                    2     .word 10 
      002CD4 CD 06 4E         [ 4]  275     CALL BASE 
      002CD7 CD 04 D1         [ 4]  276     CALL STORE 
      002CDA CD 2C 02         [ 4]  277     CALL ATEXP ; m e 
      002CDD                        278 EDOT0:
      002CDD CD 05 51         [ 4]  279     CALL TOR   
      002CE0 CD 2B 4D         [ 4]  280     CALL FNE 
      002CE3                        281     _QBRAN EDOT1
      002CE3 CD 04 98         [ 4]    1     CALL QBRAN
      002CE6 2C EB                    2     .word EDOT1
      002CE8 CD 25 06         [ 4]  282     CALL DNEGAT
      002CEB                        283 EDOT1:
      002CEB CD 0E 6D         [ 4]  284     CALL SPACE 
      002CEE CD 0D 31         [ 4]  285     CALL BDIGS     
      002CF1                        286 EDOT2: 
      002CF1 CD 25 A1         [ 4]  287     CALL DDIG
      002CF4 CD 05 34         [ 4]  288     CALL RFROM 
      002CF7 CD 0A CB         [ 4]  289     CALL ONEP 
      002CFA CD 05 51         [ 4]  290     CALL TOR 
      002CFD CD 05 88         [ 4]  291     CALL DUPP
      002D00                        292     _QBRAN EDOT3 
      002D00 CD 04 98         [ 4]    1     CALL QBRAN
      002D03 2D 0A                    2     .word EDOT3
      002D05                        293     _BRAN EDOT2  
      002D05 CD 04 B4         [ 4]    1     CALL BRAN 
      002D08 2C F1                    2     .word EDOT2 
      002D0A                        294 EDOT3:
      002D0A CD 05 B0         [ 4]  295     CALL OVER 
      002D0D CD 06 4E         [ 4]  296     CALL BASE 
      002D10 CD 04 E3         [ 4]  297     CALL AT 
      002D13 CD 08 6D         [ 4]  298     CALL ULESS 
      002D16                        299     _QBRAN EDOT2 
      002D16 CD 04 98         [ 4]    1     CALL QBRAN
      002D19 2C F1                    2     .word EDOT2
      002D1B                        300     _DOLIT '.'
      002D1B CD 04 6F         [ 4]    1     CALL DOLIT 
      002D1E 00 2E                    2     .word '.' 
      002D20 CD 0D 41         [ 4]  301     CALL HOLD  
      002D23 CD 25 A1         [ 4]  302     CALL DDIG
      002D26 CD 2B 4D         [ 4]  303     CALL FNE 
      002D29                        304     _QBRAN EDOT4 
      002D29 CD 04 98         [ 4]    1     CALL QBRAN
      002D2C 2D 39                    2     .word EDOT4
      002D2E                        305     _DOLIT '-'
      002D2E CD 04 6F         [ 4]    1     CALL DOLIT 
      002D31 00 2D                    2     .word '-' 
      002D33 CD 0D 41         [ 4]  306     CALL HOLD 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



      002D36 CD 05 7E         [ 4]  307     CALL DROP 
      002D39                        308 EDOT4:       
      002D39 CD 0D 96         [ 4]  309     CALL EDIGS 
      002D3C CD 0E 97         [ 4]  310     CALL TYPES
      002D3F CD 05 34         [ 4]  311     CALL RFROM 
      002D42 CD 07 3B         [ 4]  312     CALL QDUP 
      002D45                        313     _QBRAN EDOT5     
      002D45 CD 04 98         [ 4]    1     CALL QBRAN
      002D48 2D 55                    2     .word EDOT5
      002D4A                        314     _DOLIT 'E'
      002D4A CD 04 6F         [ 4]    1     CALL DOLIT 
      002D4D 00 45                    2     .word 'E' 
      002D4F CD 04 36         [ 4]  315     CALL EMIT 
      002D52 CD 0F 56         [ 4]  316     CALL DOT
      002D55                        317 EDOT5: 
      002D55 CD 05 34         [ 4]  318     CALL RFROM 
      002D58 CD 06 4E         [ 4]  319     CALL BASE 
      002D5B CD 04 D1         [ 4]  320     CALL STORE  
      002D5E 81               [ 4]  321     RET 
                                    322 
                                    323 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                    324 ;   F. (f# -- )
                                    325 ;   print float in fixed
                                    326 ;   point format. 
                                    327 ;;;;;;;;;;;;;;;;;;;;;;;;;
      002D5F                        328     _HEADER FDOT,2,"F."
      002D5F 2C C3                    1         .word LINK 
                           002D61     2         LINK=.
      002D61 02                       3         .byte 2  
      002D62 46 2E                    4         .ascii "F."
      002D64                          5         FDOT:
      002D64 CD 06 4E         [ 4]  329     CALL BASE 
      002D67 CD 04 E3         [ 4]  330     CALL AT 
      002D6A CD 05 51         [ 4]  331     CALL TOR 
      002D6D                        332     _DOLIT 10 
      002D6D CD 04 6F         [ 4]    1     CALL DOLIT 
      002D70 00 0A                    2     .word 10 
      002D72 CD 06 4E         [ 4]  333     CALL BASE 
      002D75 CD 04 D1         [ 4]  334     CALL STORE 
      002D78 CD 2C 02         [ 4]  335     CALL    ATEXP
      002D7B CD 05 88         [ 4]  336     CALL    DUPP  
      002D7E CD 08 40         [ 4]  337     CALL    ABSS 
      002D81                        338     _DOLIT  8
      002D81 CD 04 6F         [ 4]    1     CALL DOLIT 
      002D84 00 08                    2     .word 8 
      002D86 CD 08 C9         [ 4]  339     CALL    GREAT 
      002D89                        340     _QBRAN  FDOT1 
      002D89 CD 04 98         [ 4]    1     CALL QBRAN
      002D8C 2D 91                    2     .word FDOT1
      002D8E CC 2C DD         [ 2]  341     JP      EDOT0 
      002D91                        342 FDOT1:
      002D91 CD 0E 6D         [ 4]  343     CALL    SPACE 
      002D94 CD 05 51         [ 4]  344     CALL    TOR 
      002D97 CD 2B 4D         [ 4]  345     CALL    FNE 
      002D9A                        346     _QBRAN  FDOT0 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



      002D9A CD 04 98         [ 4]    1     CALL QBRAN
      002D9D 2D A2                    2     .word FDOT0
      002D9F CD 25 06         [ 4]  347     CALL    DNEGAT 
      002DA2                        348 FDOT0: 
      002DA2 CD 0D 31         [ 4]  349     CALL    BDIGS
      002DA5 CD 05 45         [ 4]  350     CALL    RAT  
      002DA8 CD 05 BF         [ 4]  351     CALL    ZLESS 
      002DAB                        352     _QBRAN  FDOT6 
      002DAB CD 04 98         [ 4]    1     CALL QBRAN
      002DAE 2D D9                    2     .word FDOT6
      002DB0                        353 FDOT2: ; e<0 
      002DB0 CD 25 A1         [ 4]  354     CALL    DDIG 
      002DB3 CD 05 34         [ 4]  355     CALL    RFROM
      002DB6 CD 0A CB         [ 4]  356     CALL    ONEP 
      002DB9 CD 07 3B         [ 4]  357     CALL    QDUP 
      002DBC                        358     _QBRAN  FDOT3 
      002DBC CD 04 98         [ 4]    1     CALL QBRAN
      002DBF 2D C9                    2     .word FDOT3
      002DC1 CD 05 51         [ 4]  359     CALL    TOR 
      002DC4                        360     _BRAN   FDOT2 
      002DC4 CD 04 B4         [ 4]    1     CALL BRAN 
      002DC7 2D B0                    2     .word FDOT2 
      002DC9                        361 FDOT3:
      002DC9                        362     _DOLIT  '.' 
      002DC9 CD 04 6F         [ 4]    1     CALL DOLIT 
      002DCC 00 2E                    2     .word '.' 
      002DCE CD 0D 41         [ 4]  363     CALL    HOLD 
      002DD1 CD 25 BA         [ 4]  364     CALL    DDIGS
      002DD4                        365     _BRAN   FDOT9  
      002DD4 CD 04 B4         [ 4]    1     CALL BRAN 
      002DD7 2D EE                    2     .word FDOT9 
      002DD9                        366 FDOT6: ; e>=0 
      002DD9                        367     _BRAN   FDOT8
      002DD9 CD 04 B4         [ 4]    1     CALL BRAN 
      002DDC 2D E6                    2     .word FDOT8 
      002DDE                        368 FDOT7:     
      002DDE                        369     _DOLIT  '0'
      002DDE CD 04 6F         [ 4]    1     CALL DOLIT 
      002DE1 00 30                    2     .word '0' 
      002DE3 CD 0D 41         [ 4]  370     CALL    HOLD 
      002DE6                        371 FDOT8:
      002DE6 CD 04 83         [ 4]  372     CALL    DONXT 
      002DE9 2D DE                  373     .word   FDOT7
      002DEB CD 25 BA         [ 4]  374     CALL    DDIGS 
      002DEE                        375 FDOT9:
      002DEE CD 2B 4D         [ 4]  376     CALL    FNE 
      002DF1                        377     _QBRAN  FDOT10 
      002DF1 CD 04 98         [ 4]    1     CALL QBRAN
      002DF4 2D FE                    2     .word FDOT10
      002DF6                        378     _DOLIT '-' 
      002DF6 CD 04 6F         [ 4]    1     CALL DOLIT 
      002DF9 00 2D                    2     .word '-' 
      002DFB CD 0D 41         [ 4]  379     CALL   HOLD 
      002DFE                        380 FDOT10:
      002DFE CD 0D 96         [ 4]  381     CALL    EDIGS 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



      002E01 CD 0E 97         [ 4]  382     CALL    TYPES 
      002E04 CD 05 34         [ 4]  383     CALL    RFROM 
      002E07 CD 06 4E         [ 4]  384     CALL    BASE 
      002E0A CD 04 D1         [ 4]  385     CALL    STORE 
      002E0D 81               [ 4]  386     RET 
                                    387 
                                    388 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    389 ; return parsed exponent or 
                                    390 ; 0 if failed
                                    391 ; at entry exprect *a=='E'    
                                    392 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002E0E                        393 parse_exponent: ; a cntr -- e -1 | 0 
      002E0E CD 05 51         [ 4]  394     CALL TOR   ; R: cntr 
      002E11 CD 05 88         [ 4]  395     CALL DUPP 
      002E14 CD 05 01         [ 4]  396     CALL CAT 
      002E17                        397     _DOLIT 'E' 
      002E17 CD 04 6F         [ 4]    1     CALL DOLIT 
      002E1A 00 45                    2     .word 'E' 
      002E1C CD 08 4E         [ 4]  398     CALL EQUAL 
      002E1F                        399     _QBRAN 1$
      002E1F CD 04 98         [ 4]    1     CALL QBRAN
      002E22 2E 4F                    2     .word 1$
      002E24 CD 0A CB         [ 4]  400     CALL ONEP 
      002E27 CD 05 34         [ 4]  401     CALL RFROM  ; a cntr 
      002E2A CD 0A D8         [ 4]  402     CALL ONEM
      002E2D CD 05 88         [ 4]  403     CALL DUPP 
      002E30                        404     _QBRAN 2$ ; a cntr 
      002E30 CD 04 98         [ 4]    1     CALL QBRAN
      002E33 2E 52                    2     .word 2$
      002E35 CD 0B 37         [ 4]  405     CALL ZERO
      002E38 CD 05 88         [ 4]  406     CALL DUPP 
      002E3B CD 26 51         [ 4]  407     CALL DSWAP ; 0 0 a cntr  
      002E3E CD 23 96         [ 4]  408     CALL nsign 
      002E41 CD 05 51         [ 4]  409     CALL TOR   ; R: esign  
      002E44 CD 23 CE         [ 4]  410     CALL parse_digits
      002E47                        411     _QBRAN PARSEXP_SUCCESS ; parsed to end of string 
      002E47 CD 04 98         [ 4]    1     CALL QBRAN
      002E4A 2E 59                    2     .word PARSEXP_SUCCESS
                                    412 ; failed invalid character
      002E4C CD 07 8D         [ 4]  413     CALL DDROP ; 0 a 
      002E4F                        414 1$: 
      002E4F CD 05 34         [ 4]  415     CALL RFROM ; sign||cntr  
      002E52                        416 2$:
      002E52 CD 07 8D         [ 4]  417     CALL DDROP  ; a cntr || a sign || 0 cntr   
      002E55 CD 0B 37         [ 4]  418     CALL ZERO   ; return only 0 
      002E58 81               [ 4]  419     RET 
      002E59                        420 PARSEXP_SUCCESS: 
      002E59 CD 07 8D         [ 4]  421     CALL DDROP ; drop dhi a 
      002E5C CD 05 34         [ 4]  422     CALL RFROM ; es 
      002E5F                        423     _QBRAN 1$
      002E5F CD 04 98         [ 4]    1     CALL QBRAN
      002E62 2E 67                    2     .word 1$
      002E64 CD 07 D8         [ 4]  424     CALL NEGAT
      002E67                        425 1$:
      002E67                        426     _DOLIT -1 ; -- e -1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



      002E67 CD 04 6F         [ 4]    1     CALL DOLIT 
      002E6A FF FF                    2     .word -1 
      002E6C 81               [ 4]  427     RET 
                                    428 
                                    429 
                                    430 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    431 ;   FLOAT?  ( a dlo dhi a+ cntr sign d? -- f -3 | a 0 )
                                    432 ;   called by NUMBER? 
                                    433 ;   convert string to float 
                                    434 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002E6D                        435     _HEADER FLOATQ,5,"FLOAT?"
      002E6D 2D 61                    1         .word LINK 
                           002E6F     2         LINK=.
      002E6F 05                       3         .byte 5  
      002E70 46 4C 4F 41 54 3F        4         .ascii "FLOAT?"
      002E76                          5         FLOATQ:
      002E76                        436     _QBRAN FLOATQ0 
      002E76 CD 04 98         [ 4]    1     CALL QBRAN
      002E79 2E 80                    2     .word FLOATQ0
      002E7B                        437     _BRAN FLOAT_ERROR  ; not a float, string start with '#'
      002E7B CD 04 B4         [ 4]    1     CALL BRAN 
      002E7E 2F 1F                    2     .word FLOAT_ERROR 
      002E80                        438 FLOATQ0:
                                    439 ; BASE must be 10 
      002E80 CD 06 4E         [ 4]  440     CALL BASE 
      002E83 CD 04 E3         [ 4]  441     CALL AT 
      002E86                        442     _DOLIT 10 
      002E86 CD 04 6F         [ 4]    1     CALL DOLIT 
      002E89 00 0A                    2     .word 10 
      002E8B CD 08 4E         [ 4]  443     CALL EQUAL 
      002E8E                        444     _QBRAN FLOAT_ERROR 
      002E8E CD 04 98         [ 4]    1     CALL QBRAN
      002E91 2F 1F                    2     .word FLOAT_ERROR
                                    445 ; if float next char is '.' or 'E' 
      002E93 CD 05 51         [ 4]  446     CALL TOR ; R: sign  
      002E96 CD 05 51         [ 4]  447     CALL TOR ; R: sign cntr 
      002E99 CD 05 88         [ 4]  448     CALL DUPP
      002E9C CD 05 01         [ 4]  449     CALL CAT 
      002E9F                        450     _DOLIT '.' 
      002E9F CD 04 6F         [ 4]    1     CALL DOLIT 
      002EA2 00 2E                    2     .word '.' 
      002EA4 CD 08 4E         [ 4]  451     CALL EQUAL 
      002EA7                        452     _QBRAN FLOATQ1 ; not a dot 
      002EA7 CD 04 98         [ 4]    1     CALL QBRAN
      002EAA 2E E5                    2     .word FLOATQ1
      002EAC CD 0A CB         [ 4]  453     CALL ONEP 
      002EAF CD 05 34         [ 4]  454     CALL RFROM  ; dlo dhi a cntr R: sign  
      002EB2 CD 0A D8         [ 4]  455     CALL ONEM 
      002EB5 CD 05 88         [ 4]  456     CALL DUPP 
      002EB8 CD 05 51         [ 4]  457     CALL TOR  ; R: sign cntr 
                                    458 ; parse fractional part
      002EBB CD 23 CE         [ 4]  459     CALL parse_digits ; dlo dhi a cntr -- dm a cntr 
      002EBE CD 05 88         [ 4]  460     CALL DUPP 
      002EC1 CD 05 34         [ 4]  461     CALL RFROM 
      002EC4 CD 05 98         [ 4]  462     CALL SWAPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]



      002EC7 CD 08 26         [ 4]  463     CALL SUBB ; fd -> fraction digits count 
      002ECA CD 05 51         [ 4]  464     CALL TOR  ; dlo dhi a cntr R: sign fd 
      002ECD CD 05 88         [ 4]  465     CALL DUPP ; cntr cntr  
      002ED0                        466     _QBRAN 1$ ; end of string, no exponent
      002ED0 CD 04 98         [ 4]    1     CALL QBRAN
      002ED3 2E DA                    2     .word 1$
      002ED5                        467     _BRAN FLOATQ2
      002ED5 CD 04 B4         [ 4]    1     CALL BRAN 
      002ED8 2E EE                    2     .word FLOATQ2 
      002EDA CD 05 98         [ 4]  468 1$: CALL SWAPP 
      002EDD CD 05 7E         [ 4]  469     CALL DROP ; a
      002EE0                        470     _BRAN FLOATQ3        
      002EE0 CD 04 B4         [ 4]    1     CALL BRAN 
      002EE3 2E F6                    2     .word FLOATQ3 
      002EE5                        471 FLOATQ1: ; must push fd==0 on RSTACK 
      002EE5 CD 05 34         [ 4]  472     CALL RFROM ; cntr 
      002EE8 CD 0B 37         [ 4]  473     CALL ZERO  ; fd 
      002EEB CD 05 51         [ 4]  474     CALL TOR   ; dm a cntr R: sign fd 
      002EEE                        475 FLOATQ2: 
      002EEE CD 2E 0E         [ 4]  476     CALL parse_exponent 
      002EF1                        477     _QBRAN FLOAT_ERROR0 ; exponent expected 
      002EF1 CD 04 98         [ 4]    1     CALL QBRAN
      002EF4 2F 1C                    2     .word FLOAT_ERROR0
      002EF6                        478 FLOATQ3: ; dm 0 || dm e  
      002EF6 CD 05 34         [ 4]  479     CALL RFROM ;  fd  
      002EF9 CD 08 26         [ 4]  480     CALL SUBB  ; exp=e-fd 
      002EFC CD 07 6B         [ 4]  481     CALL NROT 
      002EFF CD 05 34         [ 4]  482     CALL RFROM  ; sign 
      002F02                        483     _QBRAN FLOATQ4 
      002F02 CD 04 98         [ 4]    1     CALL QBRAN
      002F05 2F 0A                    2     .word FLOATQ4
      002F07 CD 07 EA         [ 4]  484     CALL DNEGA 
      002F0A                        485 FLOATQ4:
      002F0A CD 07 4C         [ 4]  486     CALL ROT 
      002F0D CD 2C 47         [ 4]  487     CALL STEXP 
      002F10 CD 07 4C         [ 4]  488     CALL ROT 
      002F13 CD 05 7E         [ 4]  489     CALL DROP 
      002F16                        490     _DOLIT -3 
      002F16 CD 04 6F         [ 4]    1     CALL DOLIT 
      002F19 FF FD                    2     .word -3 
      002F1B 81               [ 4]  491     RET       
      002F1C                        492 FLOAT_ERROR0: 
      002F1C CD 27 EC         [ 4]  493     CALL DRFROM ; sign df      
      002F1F                        494 FLOAT_ERROR: 
      002F1F CD 0B 79         [ 4]  495     CALL DEPTH 
      002F22 CD 0A BE         [ 4]  496     CALL CELLS 
      002F25 CD 05 68         [ 4]  497     CALL SPAT 
      002F28 CD 05 98         [ 4]  498     CALL SWAPP 
      002F2B CD 07 AD         [ 4]  499     CALL PLUS  
      002F2E CD 05 75         [ 4]  500     CALL SPSTO 
      002F31                        501     _DOLIT 0 
      002F31 CD 04 6F         [ 4]    1     CALL DOLIT 
      002F34 00 00                    2     .word 0 
      002F36 81               [ 4]  502     RET 
                                    503 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]



                                    504 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    505 ;  LSCALE ( f# -- f# )
                                    506 ;  m *=fbase , e -= 1
                                    507 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002F37                        508     _HEADER LSCALE,6,"LSCALE"
      002F37 2E 6F                    1         .word LINK 
                           002F39     2         LINK=.
      002F39 06                       3         .byte 6  
      002F3A 4C 53 43 41 4C 45        4         .ascii "LSCALE"
      002F40                          5         LSCALE:
      002F40 CD 2C 02         [ 4]  509     CALL ATEXP 
      002F43                        510     _DOLIT 1 
      002F43 CD 04 6F         [ 4]    1     CALL DOLIT 
      002F46 00 01                    2     .word 1 
      002F48 CD 08 26         [ 4]  511     CALL SUBB 
      002F4B CD 05 51         [ 4]  512     CALL TOR
      002F4E                        513     _DOLIT 10 
      002F4E CD 04 6F         [ 4]    1     CALL DOLIT 
      002F51 00 0A                    2     .word 10 
      002F53 CD 26 08         [ 4]  514     CALL DSSTAR
      002F56 CD 05 34         [ 4]  515     CALL RFROM 
      002F59 CD 2C 47         [ 4]  516     CALL STEXP 
      002F5C 81               [ 4]  517     RET  
                                    518 
                                    519 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    520 ;  RSCALE ( f# -- f# )
                                    521 ;  m /=fbase , e+=1 
                                    522 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002F5D                        523     _HEADER RSCALE,6,"RSCALE"
      002F5D 2F 39                    1         .word LINK 
                           002F5F     2         LINK=.
      002F5F 06                       3         .byte 6  
      002F60 52 53 43 41 4C 45        4         .ascii "RSCALE"
      002F66                          5         RSCALE:
      002F66 CD 2C 02         [ 4]  524     CALL ATEXP 
      002F69                        525     _DOLIT 1 
      002F69 CD 04 6F         [ 4]    1     CALL DOLIT 
      002F6C 00 01                    2     .word 1 
      002F6E CD 07 AD         [ 4]  526     CALL PLUS 
      002F71 CD 05 51         [ 4]  527     CALL TOR 
      002F74                        528     _DOLIT 10 
      002F74 CD 04 6F         [ 4]    1     CALL DOLIT 
      002F77 00 0A                    2     .word 10 
      002F79 CD 25 60         [ 4]  529     CALL DSLMOD 
      002F7C CD 07 4C         [ 4]  530     CALL ROT 
      002F7F CD 05 7E         [ 4]  531     CALL DROP 
      002F82 CD 05 34         [ 4]  532     CALL RFROM 
      002F85 CD 2C 47         [ 4]  533     CALL STEXP 
      002F88 81               [ 4]  534     RET 
                                    535 
                                    536 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    537 ;   SCALE>M ( ud1 -- e ud2 )
                                    538 ;   scale down a double  
                                    539 ;   by repeated d/10
                                    540 ;   until ud<=MAX_MANTISSA   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]



                                    541 ;   e is log10 exponent of scaled down
                                    542 ;   ud2 is scaled down ud1 
                                    543 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002F89                        544     _HEADER SCALETOM,7,"SCALE>M"
      002F89 2F 5F                    1         .word LINK 
                           002F8B     2         LINK=.
      002F8B 07                       3         .byte 7  
      002F8C 53 43 41 4C 45 3E 4D     4         .ascii "SCALE>M"
      002F93                          5         SCALETOM:
      002F93 CD 0B 37         [ 4]  545     CALL ZERO 
      002F96 CD 07 6B         [ 4]  546     CALL NROT 
      002F99                        547 SCAL1:
      002F99 CD 05 88         [ 4]  548     CALL DUPP 
      002F9C                        549     _DOLIT 0X7F 
      002F9C CD 04 6F         [ 4]    1     CALL DOLIT 
      002F9F 00 7F                    2     .word 0X7F 
      002FA1 CD 08 AA         [ 4]  550     CALL UGREAT 
      002FA4                        551     _QBRAN SCAL2  
      002FA4 CD 04 98         [ 4]    1     CALL QBRAN
      002FA7 2F C5                    2     .word SCAL2
      002FA9                        552     _DOLIT 10 
      002FA9 CD 04 6F         [ 4]    1     CALL DOLIT 
      002FAC 00 0A                    2     .word 10 
      002FAE CD 25 60         [ 4]  553     CALL DSLMOD 
      002FB1 CD 07 4C         [ 4]  554     CALL ROT  
      002FB4 CD 05 7E         [ 4]  555     CALL DROP
      002FB7 CD 07 4C         [ 4]  556     CALL ROT 
      002FBA CD 0A CB         [ 4]  557     CALL ONEP 
      002FBD CD 07 6B         [ 4]  558     CALL NROT  
      002FC0                        559     _BRAN SCAL1 
      002FC0 CD 04 B4         [ 4]    1     CALL BRAN 
      002FC3 2F 99                    2     .word SCAL1 
      002FC5                        560 SCAL2: 
      002FC5 81               [ 4]  561     RET 
                                    562 
                                    563 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    564 ;  UDIV10 ( ut -- ut )
                                    565 ;  divide a 48 bits uint by 10 
                                    566 ;  used to scale down MM* 
                                    567 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002FC6                        568 UDIV10:
      002FC6 90 93            [ 1]  569     LDW Y,X 
      002FC8 90 FE            [ 2]  570     LDW Y,(Y)
      002FCA A6 0A            [ 1]  571     LD A,#10 
      002FCC 90 62            [ 2]  572     DIV Y,A 
      002FCE FF               [ 2]  573     LDW (X),Y 
      002FCF 90 95            [ 1]  574     LD YH,A 
      002FD1 E6 02            [ 1]  575     LD A,(2,X)
      002FD3 90 97            [ 1]  576     LD YL,A 
      002FD5 A6 0A            [ 1]  577     LD A,#10 
      002FD7 90 62            [ 2]  578     DIV Y,A 
      002FD9 90 95            [ 1]  579     LD YH,A 
      002FDB 90 9F            [ 1]  580     LD A,YL 
      002FDD E7 02            [ 1]  581     LD (2,X),A 
      002FDF E6 03            [ 1]  582     LD A,(3,X)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]



      002FE1 90 97            [ 1]  583     LD YL,A 
      002FE3 A6 0A            [ 1]  584     LD A,#10 
      002FE5 90 62            [ 2]  585     DIV Y,A 
      002FE7 90 95            [ 1]  586     LD YH,A 
      002FE9 90 9F            [ 1]  587     LD A,YL 
      002FEB E7 03            [ 1]  588     LD (3,X),A 
      002FED E6 04            [ 1]  589     LD A,(4,X)
      002FEF 90 97            [ 1]  590     LD YL,A 
      002FF1 A6 0A            [ 1]  591     LD A,#10 
      002FF3 90 62            [ 2]  592     DIV Y,A 
      002FF5 90 95            [ 1]  593     LD YH,A 
      002FF7 90 9F            [ 1]  594     LD A,YL 
      002FF9 E7 04            [ 1]  595     LD (4,X),A 
      002FFB E6 05            [ 1]  596     LD A,(5,X)
      002FFD 90 97            [ 1]  597     LD YL,A 
      002FFF A6 0A            [ 1]  598     LD A,#10 
      003001 90 62            [ 2]  599     DIV Y,A 
      003003 90 9F            [ 1]  600     LD A,YL 
      003005 E7 05            [ 1]  601     LD (5,X),A 
      003007 81               [ 4]  602     RET 
                                    603 
                                    604 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    605 ;   MM* ( m1 m2 -- m3 e )
                                    606 ;   mantissa product 
                                    607 ;  scale down to 23 bits 
                                    608 ;   e  is log10 scaling factor.
                                    609 ;   The maximum product size 
                                    610 ;   before scaling is 46 bits .
                                    611 ;   UDIV10 is used to scale down.  
                                    612 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003008                        613     _HEADER MMSTAR,3,"MM*"
      003008 2F 8B                    1         .word LINK 
                           00300A     2         LINK=.
      00300A 03                       3         .byte 3  
      00300B 4D 4D 2A                 4         .ascii "MM*"
      00300E                          5         MMSTAR:
      00300E CD 07 98         [ 4]  614     CALL DDUP
      003011 CD 24 E8         [ 4]  615     CALL DZEQUAL
      003014                        616     _TBRAN MMSTA2
      003014 CD 04 A6         [ 4]    1     CALL TBRAN 
      003017 30 24                    2     .word MMSTA2 
      003019                        617 MMSTA1:
      003019 CD 28 95         [ 4]  618     CALL DOVER 
      00301C CD 24 E8         [ 4]  619     CALL DZEQUAL 
      00301F                        620     _QBRAN MMSTA3 
      00301F CD 04 98         [ 4]    1     CALL QBRAN
      003022 30 2F                    2     .word MMSTA3
      003024                        621 MMSTA2: ; ( -- 0 0 0 )
      003024 1C 00 02         [ 2]  622     ADDW X,#2 
      003027 90 5F            [ 1]  623     CLRW Y 
      003029 FF               [ 2]  624     LDW (X),Y 
      00302A EF 02            [ 2]  625     LDW (2,X),Y
      00302C EF 04            [ 2]  626     LDW (4,X),Y 
      00302E 81               [ 4]  627     RET 
      00302F                        628 MMSTA3:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]



      00302F CD 25 47         [ 4]  629     CALL DSIGN 
      003032 CD 05 51         [ 4]  630     CALL TOR    ; R: m2sign 
      003035 CD 25 30         [ 4]  631     CALL DABS   ; m1 um2 
      003038 CD 26 51         [ 4]  632     CALL DSWAP  ; um2 m1 
      00303B CD 25 47         [ 4]  633     CALL DSIGN  ; um2 m1 m1sign 
      00303E CD 05 34         [ 4]  634     CALL RFROM 
      003041 CD 06 0E         [ 4]  635     CALL XORR 
      003044 CD 05 51         [ 4]  636     CALL TOR   ; R: product_sign 
      003047 CD 25 30         [ 4]  637     CALL DABS  ; um2 um1  
      00304A CD 27 CE         [ 4]  638     CALL DTOR  ; um2 
      00304D CD 05 88         [ 4]  639     CALL DUPP  ; um2 um2hi 
      003050 CD 05 45         [ 4]  640     CALL RAT   ; um2 um2hi um1hi
                                    641 ; first partial product  
                                    642 ; pd1=um2hi*um1hi 
      003053 CD 0A 4A         [ 4]  643     CALL STAR 
      003056 CD 0B 37         [ 4]  644     CALL ZERO 
      003059 CD 05 98         [ 4]  645     CALL SWAPP ; pd1<<16  
      00305C CD 26 51         [ 4]  646     CALL DSWAP ; pd1 um2 
      00305F CD 05 B0         [ 4]  647     CALL OVER  ; pd1 um2 um2lo 
      003062 CD 05 34         [ 4]  648     CALL RFROM ; pd1 um2 um2lo um1hi 
                                    649 ; pd2=um2lo*um1hi 
      003065 CD 0A 00         [ 4]  650     CALL UMSTA ; pd1 um2 pd2 
      003068 CD 26 51         [ 4]  651     CALL DSWAP ; pd1 pd2 um2 
      00306B CD 05 45         [ 4]  652     CALL RAT   ; pd1 pd2 um2 um1lo 
                                    653 ; pd3= um2hi*um1lo 
      00306E CD 0A 00         [ 4]  654     CALL UMSTA ; pd1 pd2 um2lo pd3 
      003071 CD 07 4C         [ 4]  655     CALL ROT ; pd1 pd2 pd3 um2lo 
      003074 CD 05 51         [ 4]  656     CALL TOR ; pd1 pd2 pd3 R: psign um1lo um2lo 
                                    657 ; pd1+pd2+pd3  pd1
      003077 CD 2A 95         [ 4]  658     CALL DPLUS 
      00307A CD 2A 95         [ 4]  659     CALL DPLUS  
      00307D CD 27 EC         [ 4]  660     CALL DRFROM ; triple um2lo um1lo 
                                    661 ; last partial product um2lo*um1lo 
      003080 CD 0A 00         [ 4]  662     CALL UMSTA ; prod pd4 
                                    663 ; mm*=prod<<16+pd4  
      003083 CD 27 CE         [ 4]  664     CALL DTOR ;   R: psign pd4lo pd4hi  
                                    665  ; add pd4hi to prodlo and propagate carry 
      003086 90 93            [ 1]  666     LDW Y,X 
      003088 90 EE 02         [ 2]  667     LDW Y,(2,Y)  ; prodlo 
      00308B 72 F9 01         [ 2]  668     ADDW Y,(1,SP)  ; prodlo+pd4hi 
      00308E 17 01            [ 2]  669     LDW (1,SP),Y    ; plo phi  
      003090 90 93            [ 1]  670     LDW Y,X
      003092 90 FE            [ 2]  671     LDW Y,(Y) ; prodhi  
      003094 24 04            [ 1]  672     JRNC MMSTA4
      003096 72 A9 00 01      [ 2]  673     ADDW Y,#1 ; add carry 
      00309A                        674 MMSTA4:     
      00309A 1D 00 02         [ 2]  675     SUBW X,#2 
      00309D FF               [ 2]  676     LDW (X),Y 
      00309E 90 85            [ 2]  677     POPW Y 
      0030A0 EF 02            [ 2]  678     LDW (2,X),Y 
      0030A2 90 85            [ 2]  679     POPW Y 
      0030A4 EF 04            [ 2]  680     LDW (4,X),Y
      0030A6 CD 0B 37         [ 4]  681     CALL ZERO 
      0030A9 CD 05 51         [ 4]  682     CALL TOR 
      0030AC                        683 MMSTA5:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]



      0030AC CD 07 3B         [ 4]  684     CALL QDUP 
      0030AF                        685     _QBRAN MMSTA6 
      0030AF CD 04 98         [ 4]    1     CALL QBRAN
      0030B2 30 C5                    2     .word MMSTA6
      0030B4 CD 2F C6         [ 4]  686     CALL UDIV10 
      0030B7 CD 05 34         [ 4]  687     CALL RFROM 
      0030BA CD 0A CB         [ 4]  688     CALL ONEP 
      0030BD CD 05 51         [ 4]  689     CALL TOR 
      0030C0                        690     _BRAN MMSTA5 
      0030C0 CD 04 B4         [ 4]    1     CALL BRAN 
      0030C3 30 AC                    2     .word MMSTA5 
                                    691 ; now scale to double 
                                    692 ; scale further <= MAX_MANTISSA 
      0030C5                        693 MMSTA6: 
      0030C5 CD 05 34         [ 4]  694     CALL RFROM 
      0030C8 CD 07 6B         [ 4]  695     CALL NROT 
      0030CB CD 2F 93         [ 4]  696     CALL SCALETOM
      0030CE CD 27 CE         [ 4]  697     CALL DTOR 
      0030D1 CD 07 AD         [ 4]  698     CALL PLUS 
      0030D4 CD 27 EC         [ 4]  699     CALL DRFROM 
      0030D7 CD 05 34         [ 4]  700     CALL RFROM
      0030DA                        701     _QBRAN MMSTA7
      0030DA CD 04 98         [ 4]    1     CALL QBRAN
      0030DD 30 E2                    2     .word MMSTA7
      0030DF CD 07 EA         [ 4]  702     CALL DNEGA
      0030E2                        703 MMSTA7:
      0030E2 CD 07 4C         [ 4]  704     CALL ROT ; m e 
      0030E5 81               [ 4]  705     RET 
                                    706 
                                    707 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    708 ;    F* ( f#1 f#2 -- f#3 )
                                    709 ;    float product 
                                    710 ;    f#3=f#1 * f#2 
                                    711 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0030E6                        712     _HEADER FSTAR,2,"F*"
      0030E6 30 0A                    1         .word LINK 
                           0030E8     2         LINK=.
      0030E8 02                       3         .byte 2  
      0030E9 46 2A                    4         .ascii "F*"
      0030EB                          5         FSTAR:
      0030EB CD 2C 02         [ 4]  713     CALL ATEXP ; f#1 m2 e2 
      0030EE CD 05 51         [ 4]  714     CALL TOR   
      0030F1 CD 26 51         [ 4]  715     CALL DSWAP ; m2 f#1
      0030F4 CD 2C 02         [ 4]  716     CALL ATEXP ; m2 m1 e1 
      0030F7 CD 05 34         [ 4]  717     CALL RFROM ; m2 m1 e1 e2 
      0030FA CD 07 AD         [ 4]  718     CALL PLUS  ; m2 m1 e 
      0030FD CD 05 51         [ 4]  719     CALL TOR   ; m2 m1 R: e 
      003100 CD 30 0E         [ 4]  720     CALL MMSTAR ; m2*m1 e   
      003103 CD 05 34         [ 4]  721     CALL RFROM 
      003106 CD 07 AD         [ 4]  722     CALL PLUS 
      003109 CD 2C 47         [ 4]  723     CALL STEXP ; f#3 
      00310C 81               [ 4]  724     RET 
                                    725 
                                    726 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    727 ;  F/ ( f#1 f#2 -- f#3 )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]



                                    728 ;  float division
                                    729 ;  f#3 = f#1/f#2
                                    730 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00310D                        731     _HEADER FSLASH,2,"F/"
      00310D 30 E8                    1         .word LINK 
                           00310F     2         LINK=.
      00310F 02                       3         .byte 2  
      003110 46 2F                    4         .ascii "F/"
      003112                          5         FSLASH:
      003112 CD 2C 02         [ 4]  732     CALL ATEXP  ; f#1 m2 e2  
      003115 CD 05 51         [ 4]  733     CALL TOR    ; f#1 m2   R: e2 
      003118 CD 26 51         [ 4]  734     CALL DSWAP  ; m2 f#1 
      00311B CD 2C 02         [ 4]  735     CALL ATEXP  ; m2 m1 e1 
      00311E CD 05 34         [ 4]  736     CALL RFROM  ; m2 m1 e1 e2
      003121 CD 07 AD         [ 4]  737     CALL PLUS   ; m2 m1 e 
      003124 CD 05 51         [ 4]  738     CALL TOR    ; m2 m1 R: e 
      003127 CD 26 51         [ 4]  739     CALL DSWAP  ; m1 m2 R: e
      00312A CD 07 98         [ 4]  740     CALL DDUP  ; m1 m2 m2 R: e
      00312D CD 27 CE         [ 4]  741     CALL DTOR  ; m1 m2 R: e m2 ( keep divisor need later ) 
      003130 CD 29 9E         [ 4]  742     CALL DDSLMOD ; remainder m1/m2 R: e m2 
      003133 CD 28 95         [ 4]  743     CALL DOVER ; if remainder null done 
      003136 CD 24 E8         [ 4]  744     CALL DZEQUAL 
      003139                        745     _TBRAN FSLASH8 
      003139 CD 04 A6         [ 4]    1     CALL TBRAN 
      00313C 31 95                    2     .word FSLASH8 
                                    746 ; get fractional digits from remainder until mantissa saturate
      00313E                        747 FSLASH1: ; remainder mantissa R: e divisor 
                                    748 ; check for mantissa saturation 
      00313E CD 07 98         [ 4]  749     CALL DDUP 
      003141                        750     _DOLIT 0XCCCC 
      003141 CD 04 6F         [ 4]    1     CALL DOLIT 
      003144 CC CC                    2     .word 0XCCCC 
      003146                        751     _DOLIT 0xC
      003146 CD 04 6F         [ 4]    1     CALL DOLIT 
      003149 00 0C                    2     .word 0xC 
      00314B CD 27 46         [ 4]  752     CALL DGREAT 
      00314E                        753     _TBRAN FSLASH8 ; another loop would result in mantissa overflow 
      00314E CD 04 A6         [ 4]    1     CALL TBRAN 
      003151 31 95                    2     .word FSLASH8 
                                    754 ; multiply mantissa by 10 
      003153                        755     _DOLIT 10 
      003153 CD 04 6F         [ 4]    1     CALL DOLIT 
      003156 00 0A                    2     .word 10 
      003158 CD 0B 37         [ 4]  756     CALL ZERO 
      00315B CD 29 3B         [ 4]  757     CALL DSTAR 
                                    758 ; mutliply remainder by 10     
      00315E CD 26 51         [ 4]  759     CALL DSWAP 
      003161                        760     _DOLIT 10 
      003161 CD 04 6F         [ 4]    1     CALL DOLIT 
      003164 00 0A                    2     .word 10 
      003166 CD 0B 37         [ 4]  761     CALL ZERO 
      003169 CD 29 3B         [ 4]  762     CALL DSTAR 
                                    763 ; divide remainder by m2     
      00316C CD 28 04         [ 4]  764     CALL DRAT 
      00316F CD 29 9E         [ 4]  765     CALL DDSLMOD 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]



      003172 CD 26 51         [ 4]  766     CALL DSWAP ; mantissa frac_digit remainder R: e divisor  
      003175 CD 27 CE         [ 4]  767     CALL DTOR  ; mantissa frac_digit R: e divisor remainder 
      003178 CD 2A 95         [ 4]  768     CALL DPLUS ; mantissa+frac_digit 
      00317B CD 27 EC         [ 4]  769     CALL DRFROM ; mantissa remainder 
      00317E CD 27 EC         [ 4]  770     CALL DRFROM ; mantissa remainder divisor 
      003181 CD 05 34         [ 4]  771     CALL RFROM  ; mantissa remainder divisor e 
      003184 CD 0A D8         [ 4]  772     CALL ONEM   ; decrement exponent 
      003187 CD 05 51         [ 4]  773     CALL TOR    ; mantissa remainder divisor R: e 
      00318A CD 27 CE         [ 4]  774     CALL DTOR   ; mantissa remainder R: e divisor 
      00318D CD 26 51         [ 4]  775     CALL DSWAP  ; remainder mantissa  
      003190                        776     _BRAN FSLASH1
      003190 CD 04 B4         [ 4]    1     CALL BRAN 
      003193 31 3E                    2     .word FSLASH1 
      003195                        777 FSLASH8: ; remainder mantissa R: e divisor 
      003195 CD 26 51         [ 4]  778     CALL DSWAP  
      003198 CD 07 8D         [ 4]  779     CALL DDROP  ; drop remainder     
      00319B CD 27 EC         [ 4]  780     CALL DRFROM
      00319E CD 07 8D         [ 4]  781     CALL DDROP  ; drop divisor 
      0031A1 CD 05 34         [ 4]  782     CALL RFROM  ; exponent 
      0031A4 CD 2C 47         [ 4]  783     CALL STEXP 
      0031A7 81               [ 4]  784     RET 
                                    785 
                                    786 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    787 ;   D>F  ( # -- f# )
                                    788 ;   convert double to float 
                                    789 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0031A8                        790     _HEADER DTOF,3,"D>F"
      0031A8 31 0F                    1         .word LINK 
                           0031AA     2         LINK=.
      0031AA 03                       3         .byte 3  
      0031AB 44 3E 46                 4         .ascii "D>F"
      0031AE                          5         DTOF:
      0031AE CD 25 47         [ 4]  791     CALL DSIGN 
      0031B1 CD 05 51         [ 4]  792     CALL TOR
      0031B4 CD 25 30         [ 4]  793     CALL DABS  
      0031B7                        794 DTOF1:      
      0031B7 CD 2F 93         [ 4]  795     CALL SCALETOM 
      0031BA CD 05 34         [ 4]  796     CALL RFROM
      0031BD                        797     _QBRAN DTOF2 
      0031BD CD 04 98         [ 4]    1     CALL QBRAN
      0031C0 31 C5                    2     .word DTOF2
      0031C2 CD 25 06         [ 4]  798     CALL DNEGAT 
      0031C5                        799 DTOF2: 
      0031C5 CD 07 4C         [ 4]  800     CALL ROT 
      0031C8 CD 2C 47         [ 4]  801     CALL STEXP 
      0031CB 81               [ 4]  802     RET 
                                    803 
                                    804 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    805 ;   F>D  ( f# -- # )
                                    806 ;  convert float to double 
                                    807 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0031CC                        808     _HEADER FTOD,3,"F>D"
      0031CC 31 AA                    1         .word LINK 
                           0031CE     2         LINK=.
      0031CE 03                       3         .byte 3  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]



      0031CF 46 3E 44                 4         .ascii "F>D"
      0031D2                          5         FTOD:
      0031D2 CD 2C 02         [ 4]  809     CALL ATEXP ; m e 
      0031D5 CD 07 3B         [ 4]  810     CALL QDUP
      0031D8                        811     _QBRAN FTOD9
      0031D8 CD 04 98         [ 4]    1     CALL QBRAN
      0031DB 32 68                    2     .word FTOD9
      0031DD CD 05 51         [ 4]  812     CALL TOR 
      0031E0 CD 25 47         [ 4]  813     CALL DSIGN 
      0031E3 CD 07 6B         [ 4]  814     CALL NROT 
      0031E6 CD 25 30         [ 4]  815     CALL DABS
      0031E9 CD 05 34         [ 4]  816     CALL RFROM  
      0031EC CD 05 88         [ 4]  817     CALL DUPP   
      0031EF CD 05 BF         [ 4]  818     CALL ZLESS 
      0031F2                        819     _QBRAN FTOD4 
      0031F2 CD 04 98         [ 4]    1     CALL QBRAN
      0031F5 32 30                    2     .word FTOD4
                                    820 ; negative exponent 
      0031F7 CD 08 40         [ 4]  821     CALL ABSS 
      0031FA CD 05 51         [ 4]  822     CALL TOR
      0031FD                        823     _BRAN FTOD2  
      0031FD CD 04 B4         [ 4]    1     CALL BRAN 
      003200 32 1B                    2     .word FTOD2 
      003202                        824 FTOD1:
      003202 CD 07 98         [ 4]  825     CALL DDUP 
      003205 CD 24 E8         [ 4]  826     CALL DZEQUAL 
      003208                        827     _TBRAN FTOD3 
      003208 CD 04 A6         [ 4]    1     CALL TBRAN 
      00320B 32 25                    2     .word FTOD3 
      00320D                        828     _DOLIT 10 
      00320D CD 04 6F         [ 4]    1     CALL DOLIT 
      003210 00 0A                    2     .word 10 
      003212 CD 25 60         [ 4]  829     CALL DSLMOD 
      003215 CD 07 4C         [ 4]  830     CALL ROT 
      003218 CD 05 7E         [ 4]  831     CALL DROP
      00321B                        832 FTOD2:      
      00321B                        833     _DONXT FTOD1
      00321B CD 04 83         [ 4]    1     CALL DONXT 
      00321E 32 02                    2     .word FTOD1 
      003220                        834     _BRAN FTOD8   
      003220 CD 04 B4         [ 4]    1     CALL BRAN 
      003223 32 5D                    2     .word FTOD8 
      003225                        835 FTOD3: 
      003225 CD 05 34         [ 4]  836     CALL RFROM 
      003228 CD 05 7E         [ 4]  837     CALL DROP 
      00322B                        838     _BRAN FTOD8  
      00322B CD 04 B4         [ 4]    1     CALL BRAN 
      00322E 32 5D                    2     .word FTOD8 
                                    839 ; positive exponent 
      003230                        840 FTOD4:
      003230 CD 05 51         [ 4]  841     CALL TOR 
      003233                        842     _BRAN FTOD6
      003233 CD 04 B4         [ 4]    1     CALL BRAN 
      003236 32 58                    2     .word FTOD6 
      003238                        843 FTOD5:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]



      003238 CD 07 98         [ 4]  844     CALL DDUP 
      00323B                        845     _DOLIT 0XCCCC
      00323B CD 04 6F         [ 4]    1     CALL DOLIT 
      00323E CC CC                    2     .word 0XCCCC 
      003240                        846     _DOLIT 0XCCC  
      003240 CD 04 6F         [ 4]    1     CALL DOLIT 
      003243 0C CC                    2     .word 0XCCC 
      003245 CD 27 46         [ 4]  847     CALL DGREAT 
      003248                        848     _TBRAN FTOD3 
      003248 CD 04 A6         [ 4]    1     CALL TBRAN 
      00324B 32 25                    2     .word FTOD3 
      00324D                        849     _DOLIT 10 
      00324D CD 04 6F         [ 4]    1     CALL DOLIT 
      003250 00 0A                    2     .word 10 
      003252 CD 0B 37         [ 4]  850     CALL ZERO 
      003255 CD 29 3B         [ 4]  851     CALL DSTAR 
      003258                        852 FTOD6: 
      003258                        853     _DONXT FTOD5 
      003258 CD 04 83         [ 4]    1     CALL DONXT 
      00325B 32 38                    2     .word FTOD5 
      00325D                        854 FTOD8:
      00325D CD 07 4C         [ 4]  855     CALL ROT 
      003260                        856     _QBRAN FTOD9 
      003260 CD 04 98         [ 4]    1     CALL QBRAN
      003263 32 68                    2     .word FTOD9
      003265 CD 07 EA         [ 4]  857     CALL DNEGA
      003268                        858 FTOD9:          
      003268 81               [ 4]  859     RET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]



                                   4440 .endif 
                                   4441 
                                   4442 ;===============================================================
                                   4443 
                           0031CE  4444 LASTN =	LINK   ;last name defined
                                   4445 
                                   4446 ; application code begin here
      003280                       4447 	.bndry 128 ; align on flash block  
      003280                       4448 app_space: 
                                   4449 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 180.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        000849 R   |   6 ABOR1      001322 R
  6 ABOR2      001339 R   |   6 ABORQ      00131A R   |   6 ABORT      00130B R
  6 ABRTQ      001601 R   |   6 ABSS       000840 R   |   6 ACCEP      0012A1 R
  6 ACCP1      0012AA R   |   6 ACCP2      0012D0 R   |   6 ACCP3      0012D3 R
  6 ACCP4      0012D5 R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |   6 ADRADJ     00072B R
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  6 AFT        0015EC R   |   6 AGAIN      001542 R   |   6 AHEAD      00159F R
  6 ALLOT      00144A R   |   6 ANDD       0005E5 R   |     APP_CP  =  004004 
    APP_LAST=  004000     |     APP_RUN =  004002     |     APP_VP  =  004006 
  6 AT         0004E3 R   |   6 ATEXE      000C4A R   |   6 ATEXP      002C02 R
  6 AUTORUN    000129 R   |     AWU_APR =  0050F1     |     AWU_CSR =  0050F0 
    AWU_TBR =  0050F2     |     B0_MASK =  000001     |     B115200 =  000006 
  6 B115K2     0003E0 R   |     B19200  =  000003     |   6 B19K2      0003BD R
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
  6 B2K4       00038E R   |     B2_MASK =  000004     |     B38400  =  000004 
    B3_MASK =  000008     |     B460800 =  000008     |     B4800   =  000001 
  6 B4K8       00039C R   |     B4_MASK =  000010     |     B57600  =  000005 
  6 B57K6      0003CE R   |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
  6 B9K6       0003AC R   |   6 BACK1      001249 R   |   6 BASE       00064E R
    BASEE   =  00000A     |   6 BAUD       0003F0 R   |     BCNT    =  000001 
  6 BCOMP      00148C R   |   6 BDIGS      000D31 R   |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
  6 BEGIN      001524 R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
  6 BKSLA      00109E R   |   6 BKSP       001219 R   |     BKSPP   =  000008 
  6 BLANK      000B2A R   |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |   6 BRAN       0004B4 R   |     BTW     =  000001 
  6 BUF2ROW    002069 R   |   6 BYE        0000B6 R   |     CADR    =  000003 
    CALLL   =  0000CD     |   6 CALLOT     0022B2 R   |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CARRY   =  00002A 
    CASE_SEN=  000000     |   6 CAT        000501 R   |   6 CCOMMA     00146E R
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CELLL   =  000002     |   6 CELLM      000AAF R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 181.
Hexadecimal [24-Bits]

Symbol Table

  6 CELLP      000AA0 R   |   6 CELLS      000ABE R   |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   6 CHAR1      000E87 R
  6 CHAR2      000E8A R   |   6 CHKIVEC    001F57 R   |     CLKOPT  =  004807 
    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |   6 CMOV1      000C69 R
  6 CMOV2      000C81 R   |   6 CMOVE      000C61 R   |     CNTDWN  =  000032 
  6 CNTXT      0006D1 R   |   6 COLD       001A58 R   |   6 COLD1      001A58 R
  6 COLON      0017AA R   |   6 COMMA      001457 R   |   6 COMPI      00149C R
    COMPO   =  000040     |   6 CONSTANT   001854 R   |   6 COUNT      000BFD R
  6 CPP        0006ED R   |     CPU_A   =  007F00     |     CPU_CCR =  007F0A 
    CPU_PCE =  007F01     |     CPU_PCH =  007F02     |     CPU_PCL =  007F03 
    CPU_SPH =  007F08     |     CPU_SPL =  007F09     |     CPU_XH  =  007F04 
    CPU_XL  =  007F05     |     CPU_YH  =  007F06     |     CPU_YL  =  007F07 
  6 CR         000EAF R   |   6 CREAT      0017F0 R   |     CRR     =  00000D 
  6 CSTOR      0004F0 R   |   6 CTABLE     0022D3 R   |   6 CTAT       0022F4 R
  6 CTINIT     00231C R   |   6 D2SLASH    0028AE R   |   6 D2STAR     0028C5 R
  6 DABS       002530 R   |   6 DABS1      00253E R   |   6 DAT        000BE1 R
    DATSTK  =  001680     |   6 DCLZ       00267F R   |   6 DCLZ1      002688 R
  6 DCLZ4      002691 R   |   6 DCLZ8      00269E R   |   6 DCMP       00279C R
  6 DCMP2      0027A8 R   |   6 DCMP4      0027C3 R   |   6 DCMP_EQU   0027B5 R
  6 DCMP_GRE   0027BF R   |   6 DCMP_SMA   0027B9 R   |   6 DCONST     001889 R
  6 DDIG       0025A1 R   |   6 DDIGS      0025BA R   |   6 DDOT       0025D1 R
  6 DDOT0      0025E5 R   |   6 DDOT1      0025FB R   |   6 DDROP      00078D R
  6 DDSLMOD    00299E R   |   6 DDSTAR3    002994 R   |   6 DDUP       000798 R
    DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF     |   6 DECIM      000DE1 R
  6 DEPTH      000B79 R   |   6 DEQU4      00273A R   |   6 DEQUAL     002725 R
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |   6 DGREAT     002746 R
  6 DGREAT4    00275B R   |   6 DGTQ1      000E26 R   |   6 DI         0000C4 R
  6 DIG        000D5A R   |   6 DIGIT      000CF5 R   |   6 DIGS       000D6B R
  6 DIGS1      000D6B R   |   6 DIGS2      000D78 R   |   6 DIGTQ      000DF5 R
    DISCOVER=  000000     |   6 DLESS      002767 R   |   6 DLESS4     00277D R
  6 DLITER     00286E R   |   6 DLSHIFT    0028E1 R   |   6 DLSHIFT1   0028F2 R
  6 DLSHIFT2   002907 R   |     DM_BK1RE=  007F90     |     DM_BK1RH=  007F91 
    DM_BK1RL=  007F92     |     DM_BK2RE=  007F93     |     DM_BK2RH=  007F94 
    DM_BK2RL=  007F95     |     DM_CR1  =  007F96     |     DM_CR2  =  007F97 
    DM_CSR1 =  007F98     |     DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A 
  6 DN1        000807 R   |   6 DNEG1      002525 R   |   6 DNEGA      0007EA R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 182.
Hexadecimal [24-Bits]

Symbol Table

  6 DNEGAT     002506 R   |   6 DOCONST    001874 R   |   6 DOLIT      00046F R
  6 DONXT      000483 R   |     DOORBELL=  000000     |   6 DOSTR      000EBF R
  6 DOT        000F56 R   |   6 DOT1       000F6C R   |   6 DOTI1      0019D9 R
  6 DOTID      0019C3 R   |   6 DOTO1      0013AE R   |   6 DOTOK      001394 R
  6 DOTPR      00107F R   |   6 DOTQ       00161B R   |   6 DOTQP      000EDC R
  6 DOTR       000EEA R   |   6 DOTS       001965 R   |   6 DOTS1      001970 R
  6 DOTS2      001979 R   |   6 DOVAR      00063E R   |   6 DOVER      002895 R
  6 DO_DCONS   0018AC R   |   6 DPLUS      002A95 R   |   6 DPLUS1     002ABC R
  6 DRAT       002804 R   |   6 DRFROM     0027EC R   |   6 DROP       00057E R
  6 DROT       0026EB R   |   6 DRSHIFT    002918 R   |   6 DRSHIFT1   00291F R
  6 DRSHIFT2   002935 R   |   6 DSIGN      002547 R   |   6 DSIGN1     002551 R
  6 DSLA1      0029B8 R   |   6 DSLA2      0029DA R   |   6 DSLA3      002A1A R
  6 DSLA4      002A40 R   |   6 DSLA7      002A71 R   |   6 DSLA8      002A74 R
  6 DSLA9      002A8F R   |   6 DSLMOD     002560 R   |   6 DSLMOD3    00257B R
  6 DSLMOD4    002587 R   |   6 DSLMODa    002582 R   |   6 DSLMODb    00258D R
  6 DSSTAR     002608 R   |   6 DSSTAR1    00261F R   |   6 DSSTAR3    002648 R
  6 DSTAR      00293B R   |   6 DSTOR      000BC8 R   |   6 DSUB       002AC7 R
  6 DSUB1      002AEE R   |   6 DSWAP      002651 R   |   6 DTOF       0031AE R
  6 DTOF1      0031B7 R   |   6 DTOF2      0031C5 R   |   6 DTOR       0027CE R
  6 DUMP       00191B R   |   6 DUMP1      001932 R   |   6 DUMP3      001954 R
  6 DUMPP      0018EA R   |   6 DUPP       000588 R   |   6 DVARIA     002822 R
  6 DZEQUAL    0024E8 R   |   6 DZLESS     002784 R   |   6 DZLESS1    00278E R
  6 EDIGS      000D96 R   |   6 EDOT       002CC6 R   |   6 EDOT0      002CDD R
  6 EDOT1      002CEB R   |   6 EDOT2      002CF1 R   |   6 EDOT3      002D0A R
  6 EDOT4      002D39 R   |   6 EDOT5      002D55 R   |   6 EECSTORE   001D08 R
  6 EEPCP      001B2E R   |   6 EEPLAST    001B01 R   |   6 EEPROM     001AE9 R
    EEPROM_B=  004000     |     EEPROM_E=  0047FF     |     EEPROM_R=  000010 
    EEPROM_S=  000800     |   6 EEPRUN     001B18 R   |   6 EEPVP      001B44 R
  6 EESTORE    001D54 R   |   6 EE_CCOMM   00201E R   |   6 EE_COMMA   001FFD R
  6 EE_CREAD   001C99 R   |   6 EE_READ    001C77 R   |   6 EI         0000BD R
  6 ELSEE      00157A R   |   6 EMIT       000436 R   |   6 ENEPER     00223E R
    EOL_CR  =  000001     |     EOL_LF  =  000000     |   6 EQ1        000864 R
  6 EQUAL      00084E R   |   6 ERASE      000CC3 R   |     ERR     =  00001B 
  6 EVAL       0013D7 R   |   6 EVAL1      0013D7 R   |   6 EVAL2      0013F3 R
  6 EXE1       000C58 R   |   6 EXECU      0004C4 R   |     EXT     =  000000 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |   6 EXTRC      000D1D R
  6 FADDR      0020EB R   |   6 FARAT      001BAF R   |   6 FARCAT     001BBB R
  6 FC_XOFF    000463 R   |   6 FC_XON     00044D R   |   6 FDOT       002D64 R
  6 FDOT0      002DA2 R   |   6 FDOT1      002D91 R   |   6 FDOT10     002DFE R
  6 FDOT2      002DB0 R   |   6 FDOT3      002DC9 R   |   6 FDOT6      002DD9 R
  6 FDOT7      002DDE R   |   6 FDOT8      002DE6 R   |   6 FDOT9      002DEE R
  6 FER        002B2B R   |     FHSE    =  7A1200     |     FHSI    =  F42400 
  6 FILL       000C90 R   |   6 FILL1      000CAD R   |   6 FILL2      000CB6 R
  6 FIND       001175 R   |   6 FIND1      001193 R   |   6 FIND2      0011C1 R
  6 FIND3      0011CD R   |   6 FIND4      0011E1 R   |   6 FIND5      0011EE R
  6 FIND6      0011D2 R   |   6 FINIT      002B21 R   |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 183.
Hexadecimal [24-Bits]

Symbol Table

    FLASH_IA=  000000     |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |   6 FLOATQ     002E76 R
  6 FLOATQ0    002E80 R   |   6 FLOATQ1    002EE5 R   |   6 FLOATQ2    002EEE R
  6 FLOATQ3    002EF6 R   |   6 FLOATQ4    002F0A R   |   6 FLOAT_ER   002F1F R
  6 FLOAT_ER   002F1C R   |     FLSI    =  01F400     |   6 FMOVE      0020F6 R
  6 FMOVE2     002127 R   |   6 FNE        002B4D R   |   6 FOR        0014EC R
  6 FORGET     00015A R   |   6 FORGET1    000189 R   |   6 FORGET2    00020F R
  6 FORGET4    000218 R   |   6 FORGET6    0001D1 R   |   6 FOV        002B62 R
  6 FPSTOR     001ACA R   |   6 FPSW       002AFB R   |     FPTR    =  000034 
  6 FREEVAR    000225 R   |   6 FREEVAR4   00025B R   |   6 FRESET     002B0D R
  6 FSLASH     003112 R   |   6 FSLASH1    00313E R   |   6 FSLASH8    003195 R
  6 FSTAR      0030EB R   |   6 FTOD       0031D2 R   |   6 FTOD1      003202 R
  6 FTOD2      00321B R   |   6 FTOD3      003225 R   |   6 FTOD4      003230 R
  6 FTOD5      003238 R   |   6 FTOD6      003258 R   |   6 FTOD8      00325D R
  6 FTOD9      003268 R   |   6 FZE        002B38 R   |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
  6 GREAT      0008C9 R   |   6 GREAT1     0008DF R   |   6 HDOT       000F39 R
  6 HERE       000C14 R   |   6 HEX        000DCC R   |   6 HI         001A15 R
  6 HLD        0006BE R   |   6 HOLD       000D41 R   |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  6 ICOLON     0017BB R   |   6 IFETCH     00150A R   |   6 IFF        001552 R
  6 IFMOVE     0021CF R   |     IMEDD   =  000080     |   6 IMMED      0017CD R
  6 INCH       00042A R   |   6 INC_FPTR   001C44 R   |   6 INITOFS    001783 R
  6 INN        00066C R   |     INPUT_DI=  000000     |     INPUT_EI=  000001 
    INPUT_FL=  000000     |     INPUT_PU=  000001     |   6 INTE1      001376 R
  6 INTER      00134C R   |   6 INTQ       002378 R   |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 184.
Hexadecimal [24-Bits]

Symbol Table

    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
  6 INVER      0007C7 R   |     IPR0    =  000002     |     IPR1    =  000001 
    IPR2    =  000000     |     IPR3    =  000003     |     IPR_MASK=  000003 
    IRET_COD=  000080     |   6 ISEMI      001718 R   |     ITC_SPR1=  007F70 
    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |   6 JFETCH     001515 R   |   6 JSRC       00176D R
  6 KEY        000E35 R   |   6 KTAP       001266 R   |   6 KTAP1      001289 R
  6 KTAP2      00128C R   |   6 LAST       0006FD R   |   6 LASTN   =  0031CE R
  6 LBRAC      001383 R   |     LED2_BIT=  000005     |     LED2_MAS=  000020 
    LED2_POR=  00500A     |   6 LESS       00088B R   |     LF      =  00000A 
  6 LINK    =  0031CE R   |   6 LITER      0014BE R   |   6 LN2S       00229A R
  6 LOCK       001C30 R   |   6 LOG2S      002284 R   |   6 LSCALE     002F40 R
  6 LSHIFT     000AE9 R   |   6 LSHIFT1    000AF2 R   |   6 LSHIFT4    000AFA R
  6 LT1        0008A1 R   |     MASKK   =  001F7F     |   6 MAX        0008E9 R
  6 MAX1       0008FC R   |     MAX_MANT=  7FFFFF     |   6 MIN        000906 R
  6 MIN1       000919 R   |   6 MMOD1      0009A2 R   |   6 MMOD2      0009B6 R
  6 MMOD3      0009CD R   |   6 MMSM1      00095D R   |   6 MMSM3      000961 R
  6 MMSM4      00096D R   |   6 MMSMa      000968 R   |   6 MMSMb      000973 R
  6 MMSTA1     003019 R   |   6 MMSTA2     003024 R   |   6 MMSTA3     00302F R
  6 MMSTA4     00309A R   |   6 MMSTA5     0030AC R   |   6 MMSTA6     0030C5 R
  6 MMSTA7     0030E2 R   |   6 MMSTAR     00300E R   |   6 MODD       0009E7 R
  6 MONE       000B50 R   |     MS      =  000030     |   6 MSEC       0002D0 R
  6 MSMOD      000985 R   |   6 MSTA1      000A78 R   |   6 MSTAR      000A55 R
    NAFR    =  004804     |   6 NAMEQ      00120E R   |   6 NAMET      00111F R
    NCLKOPT =  004808     |   6 NDROT      0026AF R   |   6 NEGAT      0007D8 R
  6 NEX1       000490 R   |   6 NEXT       0014FB R   |     NFLASH_W=  00480E 
    NHSECNT =  00480A     |     NOPT1   =  004802     |     NOPT2   =  004804 
    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPT6   =  00480C     |     NOPT7   =  00480E     |     NOPTBL  =  00487F 
  6 NROT       00076B R   |   6 NTIB       00067C R   |     NUBC    =  004802 
    NUCLEO  =  000001     |   6 NUFQ       000E4B R   |   6 NUFQ1      000E64 R
  6 NUMBQ      002421 R   |   6 NUMQ0      002462 R   |   6 NUMQ1      002484 R
  6 NUMQ3      0024AE R   |   6 NUMQ4      0024CF R   |   6 NUMQ8      0024D8 R
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   6 NonHandl   000000 R
  6 OFFSET     000722 R   |     OFS     =  000005     |   6 ONE        000B42 R
  6 ONEM       000AD8 R   |   6 ONEP       000ACB R   |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 185.
Hexadecimal [24-Bits]

Symbol Table

    OPTIMIZE=  000001     |     OPTION_B=  004800     |     OPTION_E=  00487F 
    OPTION_S=  000080     |   6 ORIG       000049 R   |   6 ORR        0005F9 R
  6 OUTPUT     00043B R   |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |   6 OVER       0005B0 R
  6 OVERT      0016E6 R   |     PA      =  000000     |   6 PACKS      000CD4 R
  6 PAD        000C25 R   |   6 PAREN      00108E R   |   6 PARS       000F87 R
  6 PARS1      000FB2 R   |   6 PARS2      000FDD R   |   6 PARS3      000FE0 R
  6 PARS4      000FE9 R   |   6 PARS5      00100C R   |   6 PARS6      001021 R
  6 PARS7      001030 R   |   6 PARS8      00103F R   |   6 PARSE      001050 R
  6 PARSEXP_   002E59 R   |   6 PAUSE      0002E0 R   |     PA_BASE =  005000 
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_BASE =  005005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_BASE =  00500A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |   6 PDUM1      0018FD R
  6 PDUM2      00190E R   |     PD_BASE =  00500F     |     PD_CR1  =  005012 
    PD_CR2  =  005013     |     PD_DDR  =  005011     |     PD_IDR  =  005010 
    PD_ODR  =  00500F     |     PE      =  000014     |     PE_BASE =  005014 
    PE_CR1  =  005017     |     PE_CR2  =  005018     |     PE_DDR  =  005016 
    PE_IDR  =  005015     |     PE_ODR  =  005014     |     PF      =  000019 
    PF_BASE =  005019     |     PF_CR1  =  00501C     |     PF_CR2  =  00501D 
    PF_DDR  =  00501B     |     PF_IDR  =  00501A     |     PF_ODR  =  005019 
    PG      =  00001E     |     PG_BASE =  00501E     |     PG_CR1  =  005021 
    PG_CR2  =  005022     |     PG_DDR  =  005020     |     PG_IDR  =  00501F 
    PG_ODR  =  00501E     |     PH      =  000023     |     PH_BASE =  005023 
    PH_CR1  =  005026     |     PH_CR2  =  005027     |     PH_DDR  =  005025 
    PH_IDR  =  005024     |     PH_ODR  =  005023     |     PI      =  000028 
  6 PICK       000B90 R   |   6 PII        0021FD R   |     PI_BASE =  005028 
    PI_CR1  =  00502B     |     PI_CR2  =  00502C     |     PI_DDR  =  00502A 
    PI_IDR  =  005029     |     PI_ODR  =  005028     |   6 PLUS       0007AD R
  6 PNAM1      00168B R   |   6 POSMANT    002C3C R   |   6 PRESE      001402 R
    PROD1   =  000024     |     PROD2   =  000026     |     PROD3   =  000028 
  6 PROTECTE   000201 R   |   6 PSTOR      000BA7 R   |     PTR16   =  000035 
    PTR8    =  000036     |   6 PTRPLUS    001C5C R   |   6 QBRAN      000498 R
  6 QDUP       00073B R   |   6 QDUP1      000745 R   |   6 QKEY       000418 R
  6 QSTAC      0013BA R   |   6 QUERY      0012E6 R   |   6 QUEST      000F79 R
  6 QUIT       00141F R   |   6 QUIT1      001427 R   |   6 QUIT2      00142A R
  6 RAM2EE     002097 R   |     RAMBASE =  000000     |   6 RAMLAST    000710 R
    RAM_BASE=  000000     |     RAM_END =  0017FF     |     RAM_SIZE=  001800 
  6 RANDOM     00027E R   |   6 RAT        000545 R   |   6 RBRAC      00175A R
  6 REPEA      0015CF R   |   6 RFREE      00207E R   |   6 RFROM      000534 R
    ROP     =  004800     |   6 ROT        00074C R   |   6 ROW2BUF    002040 R
    ROWBUFF =  001680     |     RP0     =  00002E     |   6 RPAT       000511 R
    RPP     =  0017FF     |   6 RPSTO      00051E R   |   6 RSCALE     002F66 R
  6 RSHIFT     000B05 R   |   6 RSHIFT1    000B0E R   |   6 RSHIFT4    000B16 R
    RST_SR  =  0050B3     |   6 RT12_2     00226D R   |   6 SAME1      00113D R
  6 SAME2      001166 R   |   6 SAMEQ      001135 R   |   6 SCAL1      002F99 R
  6 SCAL2      002FC5 R   |   6 SCALETOM   002F93 R   |   6 SCOM1      0016C0 R
  6 SCOM2      0016C3 R   |   6 SCOMP      0016A2 R   |   6 SEED       000265 R
    SEEDX   =  000038     |     SEEDY   =  00003A     |   6 SEMIS      0016F6 R
  6 SETISP     0000D0 R   |   6 SET_RAML   00183D R   |   6 SFN        002BAE R
    SFR_BASE=  005000     |     SFR_END =  0057FF     |   6 SFV        002BE6 R
  6 SFZ        002B77 R   |   6 SIGN       000D80 R   |   6 SIGN1      000D90 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 186.
Hexadecimal [24-Bits]

Symbol Table

  6 SLASH      0009F1 R   |   6 SLMOD      0009D5 R   |   6 SNAME      001655 R
    SP0     =  00002C     |   6 SPACE      000E6D R   |   6 SPACS      000E7C R
  6 SPAT       000568 R   |     SPI_CR1 =  005200     |     SPI_CR2 =  005201 
    SPI_CRCP=  005205     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_TXCR=  005207 
    SPP     =  001680     |     SPSAVE  =  000001     |   6 SPSTO      000575 R
  6 SQRT10     002256 R   |   6 SQRT2      002214 R   |   6 SQRT3      00222B R
  6 SSMOD      000A81 R   |     SSP     =  000001     |     STACK   =  0017FF 
  6 STAR       000A4A R   |   6 STASL      000A92 R   |   6 STEXP      002C47 R
  6 STEXP1     002C5D R   |   6 STEXP2     002C99 R   |   6 STEXP3     002CAC R
  6 STOD       00080F R   |   6 STORE      0004D1 R   |   6 STR        000DAE R
  6 STRCQ      0014CC R   |   6 STRQ       00160E R   |   6 STRQP      000ED8 R
  6 SUBB       000826 R   |   6 SWAPP      000598 R   |     SWIM_CSR=  007F80 
  6 TAP        001250 R   |   6 TBOOT      001A4C R   |   6 TBRAN      0004A6 R
  6 TBUF       00068C R   |     TBUFFBAS=  001680     |   6 TCHAR      000B61 R
  6 TEMP       00065D R   |   6 TEVAL      0006AF R   |   6 TFLASH     00069E R
  6 THENN      001567 R   |   6 TIB        000C36 R   |     TIBB    =  001700 
    TIBBASE =  001700     |     TIC     =  000027     |   6 TICK       001436 R
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 187.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  000000     |     TIM2_CCE=  000001 
    TIM2_CCE=  000004     |     TIM2_CCE=  000005     |     TIM2_CCE=  005309 
    TIM2_CCM=  005305     |     TIM2_CCM=  005306     |     TIM2_CCM=  005307 
    TIM2_CCM=  000000     |     TIM2_CCM=  000004     |     TIM2_CCM=  000003 
    TIM2_CCR=  00530F     |     TIM2_CCR=  005310     |     TIM2_CCR=  005311 
    TIM2_CCR=  005312     |     TIM2_CCR=  005313     |     TIM2_CCR=  005314 
    TIM2_CNT=  00530A     |     TIM2_CNT=  00530B     |     TIM2_CR1=  005300 
    TIM2_CR1=  000007     |     TIM2_CR1=  000000     |     TIM2_CR1=  000003 
    TIM2_CR1=  000001     |     TIM2_CR1=  000002     |     TIM2_EGR=  005304 
    TIM2_EGR=  000001     |     TIM2_EGR=  000002     |     TIM2_EGR=  000003 
    TIM2_EGR=  000006     |     TIM2_EGR=  000000     |     TIM2_IER=  005301 
    TIM2_PSC=  00530C     |     TIM2_SR1=  005302     |     TIM2_SR2=  005303 
    TIM3_ARR=  00532B     |     TIM3_ARR=  00532C     |     TIM3_CCE=  005327 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCE=  000004 
    TIM3_CCE=  000005     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCM=  005325     |     TIM3_CCM=  005326     |     TIM3_CCM=  000000 
    TIM3_CCM=  000004     |     TIM3_CCM=  000003     |     TIM3_CCR=  00532D 
    TIM3_CCR=  00532E     |     TIM3_CCR=  00532F     |     TIM3_CCR=  005330 
    TIM3_CNT=  005328     |     TIM3_CNT=  005329     |     TIM3_CR1=  005320 
    TIM3_CR1=  000007     |     TIM3_CR1=  000000     |     TIM3_CR1=  000003 
    TIM3_CR1=  000001     |     TIM3_CR1=  000002     |     TIM3_EGR=  005324 
    TIM3_IER=  005321     |     TIM3_PSC=  00532A     |     TIM3_SR1=  005322 
    TIM3_SR2=  005323     |     TIM4_ARR=  005346     |     TIM4_CNT=  005344 
    TIM4_CR1=  005340     |     TIM4_CR1=  000007     |     TIM4_CR1=  000000 
    TIM4_CR1=  000003     |     TIM4_CR1=  000001     |     TIM4_CR1=  000002 
    TIM4_EGR=  005343     |     TIM4_EGR=  000000     |     TIM4_IER=  005341 
    TIM4_IER=  000000     |     TIM4_PSC=  005345     |     TIM4_PSC=  000000 
    TIM4_PSC=  000007     |     TIM4_PSC=  000004     |     TIM4_PSC=  000001 
    TIM4_PSC=  000005     |     TIM4_PSC=  000002     |     TIM4_PSC=  000006 
    TIM4_PSC=  000003     |     TIM4_PSC=  000000     |     TIM4_PSC=  000001 
    TIM4_PSC=  000002     |     TIM4_SR =  005342     |     TIM4_SR_=  000000 
  6 TIMEOUTQ   000310 R   |   6 TIMER      0002FA R   |     TIM_CR1_=  000007 
    TIM_CR1_=  000000     |     TIM_CR1_=  000006     |     TIM_CR1_=  000005 
    TIM_CR1_=  000004     |     TIM_CR1_=  000003     |     TIM_CR1_=  000001 
    TIM_CR1_=  000002     |   6 TNAM2      001993 R   |   6 TNAM3      0019B1 R
  6 TNAM4      0019B7 R   |   6 TNAME      001990 R   |   6 TOFLASH    000335 R
  6 TOKEN      001111 R   |   6 TOR        000551 R   |   6 TORAM      000375 R
    TRUEE   =  00FFFF     |   6 TWOSL      000B1D R   |   6 TYPE1      000E9C R
  6 TYPE2      000EA2 R   |   6 TYPES      000E97 R   |   6 Timer4Ha   000005 R
    UART1   =  000000     |     UART1_BA=  005230     |     UART1_BR=  005232 
    UART1_BR=  005233     |     UART1_CR=  005234     |     UART1_CR=  005235 
    UART1_CR=  005236     |     UART1_CR=  005237     |     UART1_CR=  005238 
    UART1_DR=  005231     |     UART1_GT=  005239     |     UART1_PO=  000000 
    UART1_PS=  00523A     |     UART1_RX=  000004     |     UART1_SR=  005230 
    UART1_TX=  000005     |     UART3   =  000001     |     UART3_BA=  005240 
    UART3_BR=  005242     |     UART3_BR=  005243     |     UART3_CR=  005244 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 188.
Hexadecimal [24-Bits]

Symbol Table

    UART3_CR=  005245     |     UART3_CR=  005246     |     UART3_CR=  005247 
    UART3_CR=  004249     |     UART3_DR=  005241     |     UART3_PO=  00000F 
    UART3_RX=  000006     |     UART3_SR=  005240     |     UART3_TX=  000005 
    UART_BRR=  005232     |     UART_BRR=  005233     |     UART_CR1=  005234 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  005235 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000006 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000007     |     UART_CR4=  000000 
    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000008     |     UART_CR5=  000003     |     UART_CR5=  000001 
    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_CR6=  000009     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DR =  005231     |     UART_GTR=  000009 
    UART_PSC=  00000A     |     UART_SR =  005230     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBASE   =  000006     |     UBC     =  004801 
    UCNTXT  =  000016     |     UCP     =  00001A     |     UCTIB   =  00000E 
    UD1     =  000001     |     UD2     =  000002     |     UD3     =  000003 
    UD4     =  000004     |   6 UDIV10     002FC6 R   |   6 UDOT       000F25 R
  6 UDOTR      000F05 R   |   6 UEND       000047 R   |     UFPSW   =  000008 
  6 UGREAT     0008AA R   |   6 UGREAT1    0008C1 R   |     UHLD    =  000014 
    UINN    =  00000C     |     UINTER  =  000012     |     ULAST   =  00001C 
  6 ULES1      000883 R   |   6 ULESS      00086D R   |   6 UMMOD      000941 R
  6 UMSTA      000A00 R   |   6 UNIQ1      00164C R   |   6 UNIQU      00162D R
  6 UNLKEE     001BCA R   |   6 UNLKFL     001BE9 R   |   6 UNLOCK     001C08 R
  6 UNTIL      00152F R   |     UOFFSET =  00001E     |   6 UPDATCP    001B87 R
  6 UPDATLAS   001B5E R   |   6 UPDATPTR   00218A R   |   6 UPDATRUN   001B76 R
  6 UPDATVP    001B9E R   |   6 UPL1       00063A R   |   6 UPLUS      000623 R
    UPP     =  000006     |   6 UPPER      0010D4 R   |   6 UPPER1     0010F7 R
  6 UPPER2     001100 R   |     URLAST  =  000022     |     USR_BTN_=  000004 
    USR_BTN_=  000010     |     USR_BTN_=  005015     |     UTFLASH =  000020 
    UTIB    =  000010     |     UTMP    =  00000A     |   6 UTYP1      0018CD R
  6 UTYP2      0018DC R   |   6 UTYPE      0018C8 R   |     UVP     =  000018 
  6 UZERO      00002B R   |   6 VARIA      00180A R   |     VAR_BASE=  000080 
    VAR_TOP =  0017BF     |     VER     =  000004     |   6 VPP        0006DF R
    VSIZE   =  000006     |     WANT_CON=  000001     |     WANT_DEB=  000000 
    WANT_DOU=  000001     |     WANT_FLO=  000001     |     WANT_SCA=  000001 
    WANT_SEE=  000000     |     WDGOPT  =  004805     |     WDGOPT_I=  000002 
    WDGOPT_L=  000003     |     WDGOPT_W=  000000     |     WDGOPT_W=  000001 
  6 WHILE      0015B5 R   |   6 WITHI      000926 R   |   6 WORDD      0010BA R
  6 WORDS      0019ED R   |   6 WORS1      0019F3 R   |   6 WORS2      001A0F R
  6 WR_BYTE    001CB3 R   |   6 WR_WORD    001CD8 R   |   6 WTABLE     0022E2 R
  6 WTAT       002306 R   |   6 WTINIT     00234B R   |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |     XMEM_SIZ=  017830     |     XOFF    =  000013 
    XON     =  000011     |   6 XORR       00060E R   |     XTEMP   =  000024 
    YTEMP   =  000026     |   6 ZEQ1       0024F8 R   |   6 ZEQU1      0005DB R
  6 ZEQUAL     0005D1 R   |   6 ZERO       000B37 R   |   6 ZL1        0005C8 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 189.
Hexadecimal [24-Bits]

Symbol Table

  6 ZLESS      0005BF R   |   6 app_spac   003280 R   |   6 baudrate   00037B R
  6 block_er   001D9E R   |   6 clear_ra   000019 R   |   6 clock_in   000064 R
  6 copy_buf   001DFE R   |   6 copy_buf   001E1D R   |   6 copy_pro   001E1D R
    da      =  000002     |     db      =  000003     |     dc      =  000000 
    dd      =  000001     |   6 do2lit     002879 R   |   6 erase_fl   001DC0 R
  6 fmove_do   002173 R   |   6 main       000016 R   |   6 next_row   002130 R
  6 no_move    00217A R   |   6 nsign      002396 R   |   6 nsign1     0023C7 R
  6 parse_di   0023CE R   |   6 parse_ex   002E0E R   |   6 pristine   001E9E R
  6 proceed_   001DC3 R   |   6 reboot     000327 R   |   6 reset_ve   001F05 R
  6 row_eras   001D7E R   |   6 row_eras   001DD7 R   |   6 row_eras   001DFE R
  6 set_opti   001E72 R   |   6 set_vect   001FA6 R   |   6 uart_ini   000076 R
  6 write_ro   001E42 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 190.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   3280   flags    0

