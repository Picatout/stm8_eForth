ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;-------------------------------------------------------------
                                     21 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                     22 ;  assemble using sdasstm8
                                     23 ;  implemented on NUCLEO-8S208RB board
                                     24 ;  Adapted by picatout 2019/10/27
                                     25 ;  https://github.com/picatout/stm8_nucleo/eForth
                                     26 ;--------------------------------------------------------------
                                     27 	.module EFORTH
                                     28          .optsdcc -mstm8
                                                .include "inc/macros.inc" 
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        
                                            ; macro to create dictionary header record
                                            .macro _HEADER label,len,name 
                                        
                                            ; runtime literal 
                                            .macro _DOLIT value 
                                        
                                            ; branch if TOS<>0
                                            ; TBRANCH 
                                            .macro _TBRAN target 
                                            
                                            ; branch if TOS==0 
                                            ; 0BRANCH 
                                            .macro _QBRAN target 
                                        
                                            ; uncondittionnal BRANCH 
                                            .macro _BRAN target 
                                        
                                            ; run time NEXT 
                                            .macro _DONXT target 
                                        
                                            ; drop TOS 
                                            .macro _DROP 
                                          
                                           ; drop a double 
                                           .macro _DDROP 
                                        
                                                .include "inc/config.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        
                                        ; constants to select board
                                        ; to assemble for a specific 
                                        ; board or MCU set it to 1 and the other
                                        ; to 0. 
                                 
                                 
                                 
                                        
                                        ; select end of line character
                                 
                                 
                                        
                                        ; set to 1 to include 
                                        ; scaling constants vocabulary
                                        ; see: const_ratio.asm 
                                 
                                        
                                        ; set to 1 to include 
                                        ; constants tables vocabulary 
                                        ; see: ctable.asm 
                                 
                                        
                                        ; include double library 
                                 
                                        
                                        ; to include floating point 
                                        ; library
                                        ; require double library  
                                 
                                        
                                        ; to include float24.asm 
                                        ; library 
                                 
                                        
                                        ; set to 1 to make vocabulary 
                                        ; case sensitive 
                                 
                                        
                                        ; how many bytes are reserved 
                                        ; by system at EEPROM base.
                                 
                                        
                                 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        .endif
                                        
                                 
                                        	.include "inc/stm8s105.inc"
                                        .if DISCOVERY
                                        	.include "inc/stm8s_disco.inc"
                                        .endif 
                                        XMEM_SIZE=0 ; size in bytes of EXTENDED MEMORY 
                                        UART_SR=UART2_SR
                                        UART_DR=UART2_DR
                                        UART_BRR1=UART2_BRR1
                                        UART_BRR2=UART2_BRR2
                                        UART_CR1=UART2_CR1
                                        UART_CR2=UART2_CR2
                                        .endif 
                                        
                                        	
                                         
                                        
                                        
                                        
                                     32 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     34 
                                     35 ;===============================================================
                                     36 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     37 ;  Date: 2020-06-07 
                                     38 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     39 ;  Date: 2019-10-26
                                     40 ;  Changes to memory map:
                                     41 ;       0x16f0  Data Stack, growing downward
                                     42 ;       0x1700  Terminal input buffer TIB
                                     43 ;       0x17ff  Return Stack, growing downard
                                     44 ;================================================================
                                     45 ;       STM8EF, Version 2.1, 13 July
                                     46 ;               Implemented on STM8S-Discovery Board.
                                     47 ;               Assembled by ST VisualDevelop STVD 
                                     48 ;               Bootup on internal 2 MHz clock
                                     49 ;               Switch to external 16 MHz crystal clock
                                     50 ;
                                     51 ; FORTH Virtual Machine:
                                     52 ; Subroutine threaded model
                                     53 ; SP Return stack pointer
                                     54 ; X Data stack pointer
                                     55 ; A,Y Scratch pad registers
                                     56 ;
                                     57 ; Memory Map:
                                     58 ; 0x0 RAM memory, system variables
                                     59 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     60 ; 0x780 Data stack, growing downward
                                     61 ; 0x790 Terminal input buffer TIB
                                     62 ; 0x7FF Return stack, growing downward
                                     63 ; 0x8000 Interrupt vector table
                                     64 ; 0x8080 FORTH startup code
                                     65 ; 0x80E7 Start of FORTH dictionary in ROM
                                     66 ; 0x9584 End of FORTH dictionary
                                     67 ;
                                     68 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     69 ;                  use UART1 instead of UART2 for communication with user.
                                     70 ;                  UART1 is available as ttyACM* device via USB connection.
                                     71 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     72 ;                  and MSEC word that return MS value.
                                     73 ;
                                     74 ;       EF12, Version 2.1, 18apr00cht
                                     75 ;               move to 8000H replacing WHYP.
                                     76 ;               copy interrupt vectors from WHYPFLSH.S19
                                     77 ;               to EF12.S19 before flashing
                                     78 ;               add TICKS1 and DELAY1 for motor stepping
                                     79 ;
                                     80 ;       EF12, 02/18/00, C. H. Ting
                                     81 ;       Adapt 86eForth v2.02 to 68HC12.
                                     82 ;               Use WHYP to seed EF12.ASM
                                     83 ;               Use AS12 native 68HC12 assembler:
                                     84 ;               as12 ef12.asm >ef12.lst
                                     85 ;       EF12A, add ADC code, 02mar00cht
                                     86 ;       EF12B, 01mar00cht
                                     87 ;               stack to 0x78, return stack to 0xf8.
                                     88 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     89 ;               add PWM registers
                                     90 ;               add SPI registers and code
                                     91 ;       EF12C, 12mar00cht
                                     92 ;               add MAX5250 D/A converter
                                     93 ;       EF12D, 15mar00cht
                                     94 ;               add all the Lexel interface words
                                     95 ;       EF12E, 18apr00cht, save for reference
                                     96 ;
                                     97 ;       Copyright (c) 2000
                                     98 ;       Dr. C. H. Ting
                                     99 ;       156 14th Avenue
                                    100 ;       San Mateo, CA 94402
                                    101 ;       (650) 571-7639
                                    102 ;
                                    103 
                                    104       
                                    105 ;*********************************************************
                                    106 ;	Assembler constants
                                    107 ;*********************************************************
                           000000   108 RAMBASE =	0x0000	   ;ram base
                           000001   109 .if NUCLEO 
                           0017FF   110 STACK   =	0x17FF 	;system (return) stack empty 
                           001680   111 DATSTK  =	0x1680	;data stack  empty
                           001680   112 TBUFFBASE =     0x1680  ; flash read/write transaction buffer address  
                           001700   113 TIBBASE =       0X1700  ; transaction input buffer addr.
                           000000   114 .else ; DISCOVERY
                                    115 STACK   =	0x7FF 	;system (return) stack empty 
                                    116 DATSTK  =	0x680	;data stack  empty
                                    117 TBUFFBASE =     0x680  ; flash read/write transaction buffer address  
                                    118 TIBBASE =       0X700  ; transaction input buffer addr.
                                    119 .endif
                                    120 
                                    121 ;; Memory allocation
                           000006   122 UPP     =     RAMBASE+6          ; systeme variables base address 
                           001680   123 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0017FF   124 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           001680   125 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           001700   126 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   127 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0017BF   128 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    129 
                                    130 ; user variables constants 
                           000006   131 UBASE = UPP       ; numeric base 
                           000008   132 UFPSW = UBASE+2  ; floating point state word 
                           00000A   133 UTMP = UFPSW+2    ; temporary storage
                           00000C   134 UINN = UTMP+2     ; >IN tib pointer 
                           00000E   135 UCTIB = UINN+2    ; tib count 
                           000010   136 UTIB = UCTIB+2    ; tib address 
                           000012   137 UINTER = UTIB+2   ; interpreter vector 
                           000014   138 UHLD = UINTER+2   ; hold 
                           000016   139 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000018   140 UVP = UCNTXT+2    ; variable pointer 
                           00001A   141 UCP = UVP+2      ; code pointer
                           00001C   142 ULAST = UCP+2    ; last dictionary pointer 
                           00001E   143 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000020   144 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
                           000022   145 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    146 
                                    147 ;******  System Variables  ******
                           000024   148 XTEMP	=	URLAST +2;address called by CREATE
                           000026   149 YTEMP	=	XTEMP+2	;address called by CREATE
                           000024   150 PROD1 = XTEMP	;space for UM*
                           000026   151 PROD2 = PROD1+2
                           000028   152 PROD3 = PROD2+2
                           00002A   153 CARRY = PROD3+2
                           00002C   154 SP0	= CARRY+2	;initial data stack pointer
                           00002E   155 RP0	= SP0+2		;initial return stack pointer
                           000030   156 MS    =   RP0+2         ; millisecond counter 
                           000032   157 CNTDWN =  MS+2          ; count down timer 
                           000034   158 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000035   159 PTR16 = FPTR+1          ; middle byte of farptr 
                           000036   160 PTR8 = FPTR+2           ; least byte of farptr 
                           000038   161 SEEDX = PTR8+2          ; PRNG seed X 
                           00003A   162 SEEDY = SEEDX+2         ; PRNG seed Y 
                                    163 
                                    164 ; EEPROM persistant data  
                           004000   165 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   166 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   167 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   168 APP_VP = APP_CP+2  ; free data space pointer 
                                    169 
                                    170 
                                    171 ;***********************************************
                                    172 ;; Version control
                                    173 
                           000004   174 VER     =     4         ;major release version
                           000000   175 EXT     =     0         ;minor extension
                                    176 
                                    177 ;; Constants
                                    178 
                           00FFFF   179 TRUEE   =     0xFFFF      ;true flag
                                    180 
                           000040   181 COMPO   =     0x40     ;lexicon compile only bit
                           000080   182 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   183 MASKK   =     0x1F7F  ;lexicon bit mask
                                    184 
                           000002   185 CELLL   =     2       ;size of a cell
                           00000A   186 BASEE   =     10      ;default radix
                           000008   187 BKSPP   =     8       ;back space
                           00000A   188 LF      =     10      ;line feed
                           00000D   189 CRR     =     13      ;carriage return
                           000011   190 XON     =     17
                           000013   191 XOFF    =     19
                           00001B   192 ERR     =     27      ;error escape
                           000027   193 TIC     =     39      ;tick
                           0000CD   194 CALLL   =     0xCD     ;CALL opcodes
                           000080   195 IRET_CODE =   0x80    ; IRET opcode 
                           00001C   196 ADDWX   =     0x1C    ; opcode for ADDW X,#word  
                           0000CC   197 JPIMM   =     0xCC    ; JP addr opcode 
                                    198 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    199         .macro _ledon
                                    200         .if NUCLEO
                                    201         bset PC_ODR,#LED2_BIT
                                    202         .else ;DISCOVERY 
                                    203         .if DISCOVERY
                                    204         bres PD_ODR,#LD1_BIT 
                                    205         .endif
                                    206         .endif
                                    207         .endm
                                    208 
                                    209         .macro _ledoff
                                    210         .if NUCLEO 
                                    211         bres PC_ODR,#LED2_BIT
                                    212         .else ;DISCOVERY 
                                    213         .if DISCOVERY
                                    214         bset PD_ODR,#LD1_BIT 
                                    215         .endif 
                                    216         .endif
                                    217         .endm
                                    218 
                                    219 ;**********************************************************
                                    220         .area DATA (ABS)
      000000                        221         .org RAMBASE 
                                    222 ;**********************************************************
                                    223 
                                    224 ;**********************************************************
                                    225         .area SSEG (ABS) ; STACK
      001700                        226         .org 0x1700
      001700                        227         .ds 256 
                                    228 ; space for DATSTK,TIB and STACK         
                                    229 ;**********************************************************
                                    230 
                                    231 ;**********************************************************
                                    232         .area HOME ; vectors table
                                    233 ;**********************************************************
      000000 82 00 00 16            234 	int main	        ; reset
      000004 82 00 00 00            235 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            236 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            237 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            238 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            239 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            240 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            241 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            242 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            243 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            244 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            245 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            246 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            247 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            248 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            249 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            250 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            251 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            252 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            253 	int NonHandledInterrupt	; irq17
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      000050 82 00 00 00            254 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            255 	int NonHandledInterrupt	; irq19
      000058 82 00 00 00            256 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            257 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            258 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            259 	int Timer4Handler	; irq23
      000068 82 00 00 00            260 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            261 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            262 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            263 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            264 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            265 	int NonHandledInterrupt	; irq29
                                    266 
                                    267 ;**********************************************************
                                    268         .area CODE
                                    269 ;**********************************************************
                                    270 
                                    271 ; non handled interrupt reset MCU
      000000                        272 NonHandledInterrupt:
      000000 A6 80            [ 1]  273         ld a, #0x80
      000002 C7 50 D1         [ 1]  274         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    275 	;iret
                                    276 
                                    277 ; used for milliseconds counter 
                                    278 ; MS is 16 bits counter 
      000005                        279 Timer4Handler:
      000005 72 5F 53 42      [ 1]  280 	clr TIM4_SR 
      000009 BE 30            [ 2]  281         ldw x,MS 
      00000B 5C               [ 1]  282         incw x 
      00000C BF 30            [ 2]  283         ldw MS,x
      00000E BE 32            [ 2]  284         ldw x,CNTDWN 
      000010 27 03            [ 1]  285         jreq 1$
      000012 5A               [ 2]  286         decw x 
      000013 BF 32            [ 2]  287         ldw CNTDWN,x 
      000015                        288 1$:         
      000015 80               [11]  289         iret 
                                    290 
                                    291 
                                    292 ;; Main entry points and COLD start data
      000016                        293 main:
                                    294 ; clear all RAM
      000016 AE 00 00         [ 2]  295 	ldw X,#RAMBASE
      000019                        296 clear_ram0:
      000019 7F               [ 1]  297 	clr (X)
      00001A 5C               [ 1]  298 	incw X
      00001B A3 17 FF         [ 2]  299 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  300 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  301         ldw x,#RPP
      000023 94               [ 1]  302         ldw sp,x
                                    303 ; set SEEDX and SEEDY to 1 
      000024 3C 39            [ 1]  304         inc SEEDX+1 
      000026 3C 3B            [ 1]  305         inc SEEDY+1          
      000028 CC 00 49         [ 2]  306 	jp ORIG
                                    307 
                                    308 ; COLD initialize these variables.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      00002B                        309 UZERO:
      00002B 00 0A                  310         .word      BASEE   ;BASE
      00002D 00 00                  311         .word      0       ; floating point state 
      00002F 00 00                  312         .word      0       ;tmp
      000031 00 00                  313         .word      0       ;>IN
      000033 00 00                  314         .word      0       ;#TIB
      000035 17 00                  315         .word      TIBB    ;TIB
      000037 15 16                  316         .word      INTER   ;'EVAL
      000039 00 00                  317         .word      0       ;HLD
      00003B 2F AA                  318         .word      LASTN  ;CNTXT pointer
      00003D 00 80                  319         .word      VAR_BASE   ;variables free space pointer 
      00003F 30 00                  320         .word      app_space ; FLASH free space pointer 
      000041 2F AA                  321         .word      LASTN   ;LAST
      000043 00 00                  322         .word      0        ; OFFSET 
      000045 00 00                  323         .word      0       ; TFLASH
                                    324 ;       .word      0       ; URLAST   
      000047 00 00                  325 UEND:   .word      0
                                    326 
      000049                        327 ORIG:   
                                    328 ; initialize SP
      000049 AE 17 FF         [ 2]  329         LDW     X,#STACK  ;initialize return stack
      00004C 94               [ 1]  330         LDW     SP,X
      00004D BF 2E            [ 2]  331         LDW     RP0,X
      00004F AE 16 80         [ 2]  332         LDW     X,#DATSTK ;initialize data stack
      000052 BF 2C            [ 2]  333         LDW     SP0,X
                           000001   334 .if NUCLEO        
                                    335 ; initialize PC_5 as output to control LED2
                                    336 ; added by Picatout 
      000054 72 1A 50 0D      [ 1]  337         bset PC_CR1,#LED2_BIT
      000058 72 1A 50 0E      [ 1]  338         bset PC_CR2,#LED2_BIT
      00005C 72 1A 50 0C      [ 1]  339         bset PC_DDR,#LED2_BIT
                                    340 .endif 
                           000000   341 .if DISCOVERY
                                    342         bset PD_CR1,#LD1_BIT
                                    343         bset PD_CR2,#LD1_BIT
                                    344         bset PD_DDR,#LD1_BIT 
                                    345 .endif
      000060                        346         _ledoff
                           000001     1         .if NUCLEO 
      000060 72 1B 50 0A      [ 1]    2         bres PC_ODR,#LED2_BIT
                           000000     3         .else ;DISCOVERY 
                                      4         .if DISCOVERY
                                      5         bset PD_ODR,#LD1_BIT 
                                      6         .endif 
                                      7         .endif
                                    347 ; initialize clock to HSI
                                    348 ; no divisor 16Mhz 
                                    349 ; Added by Picatout 
      000064                        350 clock_init:
      000064 72 5F 50 C6      [ 1]  351         clr CLK_CKDIVR
      000068 72 12 50 C5      [ 1]  352 	bset CLK_SWCR,#CLK_SWCR_SWEN
                           000001   353 .if NUCLEO|DOORBELL
      00006C A6 E1            [ 1]  354 	ld a,#CLK_SWR_HSI
                           000000   355 .else ; DISCOVERY as 16Mhz crystal
                                    356 	ld a,#CLK_SWR_HSE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                                    357 .endif 
      00006E C7 50 C4         [ 1]  358 	ld CLK_SWR,a
      000071 C1 50 C3         [ 1]  359 1$:	cp a,CLK_CMSR
      000074 26 FB            [ 1]  360 	jrne 1$
                                    361         
                                    362 ; initialize UART, 115200 8N1
      000076                        363 uart_init:
                           000001   364 .if NUCLEO 
      000076 72 14 50 C7      [ 1]  365 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    366 	; configure tx pin
      00007A 72 1A 50 02      [ 1]  367 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      00007E 72 1A 50 03      [ 1]  368 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      000082 72 1A 50 04      [ 1]  369 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    370 	; baud rate 115200 Fmaster=16Mhz  16000000/115200=139=0x8b
                           000000   371 .else ; DISCOVERY use UART2 
                                    372 	bset CLK_PCKENR1,#CLK_PCKENR1_UART2
                                    373 	; configure tx pin
                                    374 	bset PD_DDR,#UART2_TX_PIN ; tx pin
                                    375 	bset PD_CR1,#UART2_TX_PIN ; push-pull output
                                    376 	bset PD_CR2,#UART2_TX_PIN ; fast output
                                    377 .endif
                                    378 ; baud rate 115200 Fmaster=8Mhz  
      000086 35 0B 52 33      [ 1]  379 	mov UART_BRR2,#0x0b ; must be loaded first
      00008A 35 08 52 32      [ 1]  380 	mov UART_BRR1,#0x8
      00008E 35 0C 52 35      [ 1]  381 	mov UART_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    382 ; initialize timer4, used for millisecond interrupt  
      000092 35 07 53 45      [ 1]  383 	mov TIM4_PSCR,#7 ; prescale 128  
      000096 35 7D 53 46      [ 1]  384 	mov TIM4_ARR,#125 ; set for 1msec.
      00009A 35 05 53 40      [ 1]  385 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      00009E 72 10 53 41      [ 1]  386 	bset TIM4_IER,#TIM4_IER_UIE 
                                    387 ; set TIM4 interrupt priority to highest
      0000A2 A6 3F            [ 1]  388         ld a,#~(IPR_MASK<<6)
      0000A4 C4 7F 75         [ 1]  389         and a,ITC_SPR6
      0000A7 AA C0            [ 1]  390         or a,#(IPR3<<6)
      0000A9 C7 7F 75         [ 1]  391         ld ITC_SPR6,a 
      0000AC 9A               [ 1]  392         rim
      0000AD CC 1C F1         [ 2]  393         jp  COLD   ;default=MN1
                                    394 
                                    395 
                           000000   396         LINK = 0  ; used by _HEADER macro 
                                    397 
                                    398 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;        
                                    399 ;; place MCU in sleep mode with
                                    400 ;; halt opcode 
                                    401 ;; BYE ( -- )
                                    402 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000B0                        403         _HEADER BYE,3,"BYE"
      0000B0 00 00                    1         .word LINK 
                           0000B2     2         LINK=.
      0000B2 03                       3         .byte 3  
      0000B3 42 59 45                 4         .ascii "BYE"
      0000B6                          5         BYE:
      0000B6 8E               [10]  404         halt 
      0000B7 81               [ 4]  405         ret 
                                    406 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    407 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    408 ; Enable interrupts 
                                    409 ; EI ( -- )
                                    410 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000B8                        411         _HEADER EI,2,"EI"
      0000B8 00 B2                    1         .word LINK 
                           0000BA     2         LINK=.
      0000BA 02                       3         .byte 2  
      0000BB 45 49                    4         .ascii "EI"
      0000BD                          5         EI:
      0000BD 9A               [ 1]  412         rim 
      0000BE 81               [ 4]  413         ret 
                                    414 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    415 ; Disable interrupts
                                    416 ; DI ( -- )
                                    417 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000BF                        418         _HEADER DI,2,"DI"
      0000BF 00 BA                    1         .word LINK 
                           0000C1     2         LINK=.
      0000C1 02                       3         .byte 2  
      0000C2 44 49                    4         .ascii "DI"
      0000C4                          5         DI:
      0000C4 9B               [ 1]  419         sim 
      0000C5 81               [ 4]  420         ret 
                                    421 
                                    422 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    423 ; set interrupt priority level 
                                    424 ; SET-ISP ( n1 n2 -- )
                                    425 ; n1 level {1..3}
                                    426 ; n2 vector {0..29}
                                    427 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000C6                        428         _HEADER SETISP,7,"SET-ISP"
      0000C6 00 C1                    1         .word LINK 
                           0000C8     2         LINK=.
      0000C8 07                       3         .byte 7  
      0000C9 53 45 54 2D 49 53 50     4         .ascii "SET-ISP"
      0000D0                          5         SETISP:
      0000D0 90 93            [ 1]  429         ldw y,x 
      0000D2 90 FE            [ 2]  430         ldw y,(y)
      0000D4 A6 04            [ 1]  431         ld a,#4 ; 4 slot per register 
                                    432 ;  quotient select register, remainder select slot in register.        
      0000D6 90 62            [ 2]  433         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000D8 A4 03            [ 1]  434         and a,#3 
      0000DA 48               [ 1]  435         sll a ; 2*SLOT  lshift 
      0000DB 72 A9 7F 70      [ 2]  436         addw y,#ITC_SPR1 
      0000DF FF               [ 2]  437         ldw (x),y  ; ( level reg -- )
      0000E0 90 5F            [ 1]  438         clrw y 
      0000E2 90 97            [ 1]  439         ld yl,a 
      0000E4 1D 00 02         [ 2]  440         subw x,#CELLL 
      0000E7 FF               [ 2]  441         ldw (x),y  ; ( level reg lshift -- )
      0000E8 90 93            [ 1]  442         ldw y,x 
      0000EA 90 EE 02         [ 2]  443         ldw y,(2,y) 
      0000ED 90 F6            [ 1]  444         ld a,(y)   ; reg_value
      0000EF 1D 00 02         [ 2]  445         subw x,#CELLL 
      0000F2 FF               [ 2]  446         ldw (x),y ; ( level reg lshift rval -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      0000F3 CD 06 42         [ 4]  447         call OVER ; ( level reg lshift rval lshift -- )
      0000F6 CD 04 70         [ 4]  448         call DOLIT 
      0000F9 00 03                  449         .word 3
      0000FB CD 06 2A         [ 4]  450         call SWAPP  ; ( level reg lshift rval 3 lshift )
      0000FE CD 0B C1         [ 4]  451         call LSHIFT ; creat slot mask 
      000101 CD 08 76         [ 4]  452         call INVER  ; ( level reg lshift rval mask )
      000104 CD 06 77         [ 4]  453         call ANDD ; ( level reg lshift slot_masked )
      000107 CD 05 E3         [ 4]  454         call TOR  ; ( level reg lshift -- R: slot_masked )
      00010A CD 07 DE         [ 4]  455         call ROT  ; ( reg lshift level )
      00010D CD 06 2A         [ 4]  456         call SWAPP ; ( reg level lshift )
      000110 CD 0B C1         [ 4]  457         call LSHIFT  ; ( reg slot_level -- )
      000113 CD 05 35         [ 4]  458         call RFROM ; ( reg slot_level masked_val )
      000116 CD 06 8B         [ 4]  459         call ORR   ; ( reg updated_rval )
      000119 CD 06 2A         [ 4]  460         call SWAPP 
      00011C CC 04 F1         [ 2]  461         jp CSTOR
                                    462 
                                    463 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    464 ; sélectionne l'application 
                                    465 ; qui démarre automatique lors 
                                    466 ; d'un COLD start 
                                    467 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00011F                        468         _HEADER AUTORUN,7,"AUTORUN"
      00011F 00 C8                    1         .word LINK 
                           000121     2         LINK=.
      000121 07                       3         .byte 7  
      000122 41 55 54 4F 52 55 4E     4         .ascii "AUTORUN"
      000129                          5         AUTORUN:
      000129 CD 12 DB         [ 4]  469         call TOKEN 
      00012C CD 06 1A         [ 4]  470         call DUPP 
      00012F CD 04 99         [ 4]  471         call QBRAN 
      000132 02 0F                  472         .word FORGET2
      000134 CD 13 D8         [ 4]  473         call NAMEQ
      000137 CD 07 CD         [ 4]  474         call QDUP 
      00013A CD 04 99         [ 4]  475         call QBRAN 
      00013D 02 0F                  476         .word FORGET2
      00013F                        477         _DROP 
      00013F 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      000142 1D 00 04         [ 2]  478         subw x,#2*CELLL 
      000145 90 5F            [ 1]  479         clrw y 
      000147 FF               [ 2]  480         ldw (x),y 
      000148 90 AE 40 02      [ 2]  481         ldw y,#APP_RUN 
      00014C EF 02            [ 2]  482         ldw (2,x),y 
      00014E CC 1F ED         [ 2]  483         jp EESTORE 
                                    484 
                                    485 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    486 ;; Reset dictionary pointer before 
                                    487 ;; forgotten word. RAM space and 
                                    488 ;; interrupt vector defined after 
                                    489 ;; must be resetted also.
                                    490 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000151                        491         _HEADER FORGET,6,"FORGET"
      000151 01 21                    1         .word LINK 
                           000153     2         LINK=.
      000153 06                       3         .byte 6  
      000154 46 4F 52 47 45 54        4         .ascii "FORGET"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      00015A                          5         FORGET:
      00015A CD 12 DB         [ 4]  492         call TOKEN
      00015D CD 06 1A         [ 4]  493         call DUPP 
      000160 CD 04 99         [ 4]  494         call QBRAN 
      000163 02 0F                  495         .word FORGET2
      000165 CD 13 D8         [ 4]  496         call NAMEQ ; ( a -- ca na | a F )
      000168 CD 07 CD         [ 4]  497         call QDUP 
      00016B CD 04 99         [ 4]  498         call QBRAN 
      00016E 02 0F                  499         .word FORGET2
                                    500 ; only forget users words 
      000170 CD 06 1A         [ 4]  501         call DUPP ; ( ca na na )
      000173 CD 04 70         [ 4]  502         call DOLIT 
      000176 30 00                  503         .word app_space 
      000178 CD 06 2A         [ 4]  504         call SWAPP 
      00017B CD 09 11         [ 4]  505         call  ULESS 
      00017E CD 04 99         [ 4]  506         call QBRAN 
      000181 01 D1                  507         .word FORGET6 
                                    508 ; ( ca na -- )        
                                    509 ;reset ivec with address >= ca
      000183 CD 06 2A         [ 4]  510         call SWAPP ; ( na ca -- ) 
      000186 CD 21 F0         [ 4]  511         call CHKIVEC ; ( na -- ) 
                                    512 ; start at LAST and link back to na 
                                    513 ; if variable found reset VP at that point.
      000189                        514 FORGET1:
      000189 CD 07 8F         [ 4]  515         call LAST 
      00018C CD 04 E4         [ 4]  516         call AT 
      00018F CD 06 1A         [ 4]  517         call DUPP  ; ( -- na last last )
      000192 CD 02 25         [ 4]  518         call FREEVAR ; ( -- na last )
      000195 CD 06 1A         [ 4]  519         call DUPP 
      000198 CD 04 70         [ 4]  520         call DOLIT 
      00019B 00 02                  521         .word 2 
      00019D CD 08 D3         [ 4]  522         call SUBB ; ( na last -- na last lfa ) link address 
      0001A0 CD 04 E4         [ 4]  523         call AT 
      0001A3 CD 06 1A         [ 4]  524         call DUPP ; ( -- na last a a )
      0001A6 CD 07 63         [ 4]  525         call CNTXT 
      0001A9 CD 04 D2         [ 4]  526         call STORE
      0001AC CD 07 8F         [ 4]  527         call LAST  
      0001AF CD 04 D2         [ 4]  528         call STORE ; ( --  na last )
      0001B2 CD 06 42         [ 4]  529         call OVER 
      0001B5 CD 08 FB         [ 4]  530         call EQUAL ; ( na last na -- na T|F ) 
      0001B8 CD 04 99         [ 4]  531         call QBRAN 
      0001BB 01 89                  532         .word FORGET1 
                                    533 ; ( na -- )
      0001BD CD 04 70         [ 4]  534         call DOLIT 
      0001C0 00 02                  535         .word 2 
      0001C2 CD 08 D3         [ 4]  536         call SUBB 
      0001C5 CD 07 7F         [ 4]  537         call CPP 
      0001C8 CD 04 D2         [ 4]  538         call STORE  
      0001CB CD 1E 20         [ 4]  539         call UPDATCP 
      0001CE CC 1D F7         [ 2]  540         jp UPDATLAST 
      0001D1                        541 FORGET6: ; tried to forget a RAM or system word 
                                    542 ; ( ca na -- )
      0001D1 1D 00 02         [ 2]  543         subw x,#CELLL 
      0001D4 90 BE 2C         [ 2]  544         ldw y,SP0 
      0001D7 FF               [ 2]  545         ldw (x),y  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      0001D8 CD 09 11         [ 4]  546         call ULESS
      0001DB CD 04 99         [ 4]  547         call QBRAN 
      0001DE 02 01                  548         .word PROTECTED 
      0001E0 CD 14 E4         [ 4]  549         call ABORQ 
      0001E3 1D                     550         .byte 29
      0001E4 20 46 6F 72 20 52 41   551         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      000201                        552 PROTECTED:
      000201 CD 14 E4         [ 4]  553         call ABORQ
      000204 0A                     554         .byte 10
      000205 20 50 72 6F 74 65 63   555         .ascii " Protected"
             74 65 64
      00020F                        556 FORGET2: ; no name or not found in dictionary 
      00020F CD 14 E4         [ 4]  557         call ABORQ
      000212 05                     558         .byte 5
      000213 20 77 68 61 74         559         .ascii " what"
      000218                        560 FORGET4:
      000218 CC 06 10         [ 2]  561         jp DROP 
                                    562 
                                    563 
                                    564 ;;;;;;;;;;;;;;;;;;;;;
                                    565 ; if na is variable 
                                    566 ; free variable data  
                                    567 ; FREEVAR ( na -- )
                                    568 ;;;;;;;;;;;;;;;;;;;;;;
      00021B                        569         _HEADER FREEVAR,7,"FREEVAR"
      00021B 01 53                    1         .word LINK 
                           00021D     2         LINK=.
      00021D 07                       3         .byte 7  
      00021E 46 52 45 45 56 41 52     4         .ascii "FREEVAR"
      000225                          5         FREEVAR:
      000225 CD 06 1A         [ 4]  570         call DUPP ; ( na na -- )
      000228 CD 05 02         [ 4]  571         CALL CAT  ; ( na c -- )
      00022B CD 0B A3         [ 4]  572         call ONEP ;
      00022E CD 08 3D         [ 4]  573         CALL PLUS ; ( na c+1 -- ca ) 
      000231 CD 0B A3         [ 4]  574         call ONEP ; ( ca+ -- ) to get routne address 
      000234 CD 06 1A         [ 4]  575         call DUPP ; ( ca+ ca+ -- )
      000237 CD 04 E4         [ 4]  576         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      00023A CD 04 70         [ 4]  577         call DOLIT 
      00023D 06 D0                  578         .word DOVAR ; if routine address is DOVAR then variable 
      00023F CD 08 FB         [ 4]  579         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      000242 CD 04 99         [ 4]  580         call QBRAN 
      000245 02 5B                  581         .word FREEVAR4 
      000247 CD 04 70         [ 4]  582         call DOLIT 
      00024A 00 02                  583         .word 2 
      00024C CD 08 3D         [ 4]  584         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      00024F CD 04 E4         [ 4]  585         call AT 
      000252 CD 07 71         [ 4]  586         call VPP   
      000255 CD 04 D2         [ 4]  587         call STORE 
      000258 CC 1E 37         [ 2]  588         jp UPDATVP 
      00025B                        589 FREEVAR4: ; not variable
      00025B                        590         _DROP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      00025B 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00025E 81               [ 4]  591         RET 
                                    592 
                                    593 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    594 ;    SEED ( n -- )
                                    595 ; Initialize PRNG seed with n 
                                    596 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00025F                        597         _HEADER SEED,4,"SEED"
      00025F 02 1D                    1         .word LINK 
                           000261     2         LINK=.
      000261 04                       3         .byte 4  
      000262 53 45 45 44              4         .ascii "SEED"
      000266                          5         SEED:
      000266 90 93            [ 1]  598         ldw y,x 
      000268 1C 00 02         [ 2]  599         addw x,#CELLL
      00026B 90 FE            [ 2]  600         ldw y,(y)
      00026D 90 9E            [ 1]  601         ld a,yh 
      00026F B7 38            [ 1]  602         ld SEEDX,a 
      000271 90 9F            [ 1]  603         ld a,yl 
      000273 B7 3A            [ 1]  604         ld SEEDY,a 
      000275 81               [ 4]  605         ret 
                                    606 
                                    607 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    608 ;    RANDOM ( u1 -- u2 )
                                    609 ; Pseudo random number betwen 0 and u1-1
                                    610 ;  XOR32 algorithm 
                                    611 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000276                        612         _HEADER RANDOM,6,"RANDOM"
      000276 02 61                    1         .word LINK 
                           000278     2         LINK=.
      000278 06                       3         .byte 6  
      000279 52 41 4E 44 4F 4D        4         .ascii "RANDOM"
      00027F                          5         RANDOM:
                                    613 ;local variable 
                           000001   614         SPSAVE=1
                           000002   615         VSIZE=2 
      00027F 52 02            [ 2]  616         sub sp,#VSIZE
      000281 1F 01            [ 2]  617         ldw (SPSAVE,sp),x  
                                    618 ; XTEMP=(SEEDX<<5)^SEEDX 
      000283 90 93            [ 1]  619         ldw y,x 
      000285 90 FE            [ 2]  620         ldw y,(y)
      000287 90 BF 26         [ 2]  621         ldw YTEMP,y 
      00028A BE 38            [ 2]  622 	ldw x,SEEDX 
      00028C 58               [ 2]  623 	sllw x 
      00028D 58               [ 2]  624 	sllw x 
      00028E 58               [ 2]  625 	sllw x 
      00028F 58               [ 2]  626 	sllw x 
      000290 58               [ 2]  627 	sllw x 
      000291 9E               [ 1]  628 	ld a,xh 
      000292 B8 38            [ 1]  629 	xor a,SEEDX 
      000294 B7 24            [ 1]  630 	ld XTEMP,a 
      000296 9F               [ 1]  631 	ld a,xl 
      000297 B8 39            [ 1]  632 	xor a,SEEDX+1 
      000299 B7 25            [ 1]  633 	ld XTEMP+1,a 
                                    634 ; SEEDX=SEEDY 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      00029B BE 3A            [ 2]  635 	ldw x,SEEDY 
      00029D BF 38            [ 2]  636 	ldw SEEDX,x  
                                    637 ; SEEDY=SEEDY^(SEEDY>>1)
      00029F 54               [ 2]  638 	srlw x 
      0002A0 9E               [ 1]  639 	ld a,xh 
      0002A1 B8 3A            [ 1]  640 	xor a,SEEDY 
      0002A3 B7 3A            [ 1]  641 	ld SEEDY,a  
      0002A5 9F               [ 1]  642 	ld a,xl 
      0002A6 B8 3B            [ 1]  643 	xor a,SEEDY+1 
      0002A8 B7 3B            [ 1]  644 	ld SEEDY+1,a 
                                    645 ; XTEMP>>3 
      0002AA BE 24            [ 2]  646 	ldw x,XTEMP 
      0002AC 54               [ 2]  647 	srlw x 
      0002AD 54               [ 2]  648 	srlw x 
      0002AE 54               [ 2]  649 	srlw x 
                                    650 ; x=XTEMP^x 
      0002AF 9E               [ 1]  651 	ld a,xh 
      0002B0 B8 24            [ 1]  652 	xor a,XTEMP 
      0002B2 95               [ 1]  653 	ld xh,a 
      0002B3 9F               [ 1]  654 	ld a,xl 
      0002B4 B8 25            [ 1]  655 	xor a,XTEMP+1  
      0002B6 97               [ 1]  656 	ld xl,a 
                                    657 ; SEEDY=x^SEEDY 
      0002B7 B8 3B            [ 1]  658 	xor a,SEEDY+1
      0002B9 97               [ 1]  659 	ld xl,a 
      0002BA 9E               [ 1]  660 	ld a,xh 
      0002BB B8 3A            [ 1]  661 	xor a,SEEDY
      0002BD 95               [ 1]  662 	ld xh,a 
      0002BE BF 3A            [ 2]  663 	ldw SEEDY,x 
                                    664 ; return SEEDY modulo YTEMP  
      0002C0 90 BE 26         [ 2]  665 	ldw y,YTEMP  
      0002C3 65               [ 2]  666 	divw x,y 
      0002C4 1E 01            [ 2]  667 	ldw x,(SPSAVE,sp)
      0002C6 FF               [ 2]  668         ldw (x),y 
      0002C7 5B 02            [ 2]  669         addw sp,#VSIZE 
      0002C9 81               [ 4]  670 	ret 
                                    671 
                                    672 
                                    673 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    674 ;; get millisecond counter 
                                    675 ;; msec ( -- u )
                                    676 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002CA                        677         _HEADER MSEC,4,"MSEC"
      0002CA 02 78                    1         .word LINK 
                           0002CC     2         LINK=.
      0002CC 04                       3         .byte 4  
      0002CD 4D 53 45 43              4         .ascii "MSEC"
      0002D1                          5         MSEC:
      0002D1 1D 00 02         [ 2]  678         subw x,#CELLL 
      0002D4 90 BE 30         [ 2]  679         ldw y,MS 
      0002D7 FF               [ 2]  680         ldw (x),y 
      0002D8 81               [ 4]  681         ret 
                                    682 
                                    683 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    684 ; suspend execution for u msec 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                                    685 ;  pause ( u -- )
                                    686 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002D9                        687         _HEADER PAUSE,5,"PAUSE"
      0002D9 02 CC                    1         .word LINK 
                           0002DB     2         LINK=.
      0002DB 05                       3         .byte 5  
      0002DC 50 41 55 53 45           4         .ascii "PAUSE"
      0002E1                          5         PAUSE:
      0002E1 90 93            [ 1]  688         ldw y,x
      0002E3 90 FE            [ 2]  689         ldw y,(y)
      0002E5 72 B9 00 30      [ 2]  690         addw y,MS 
      0002E9 8F               [10]  691 1$:     wfi  
      0002EA 90 B3 30         [ 2]  692         cpw y,MS  
      0002ED 26 FA            [ 1]  693         jrne 1$        
      0002EF 1C 00 02         [ 2]  694         addw x,#CELLL 
      0002F2 81               [ 4]  695         ret 
                                    696 
                                    697 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    698 ; initialize count down timer 
                                    699 ;  TIMER ( u -- )  milliseconds
                                    700 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002F3                        701         _HEADER TIMER,5,"TIMER"
      0002F3 02 DB                    1         .word LINK 
                           0002F5     2         LINK=.
      0002F5 05                       3         .byte 5  
      0002F6 54 49 4D 45 52           4         .ascii "TIMER"
      0002FB                          5         TIMER:
      0002FB 90 93            [ 1]  702         ldw y,x
      0002FD 90 FE            [ 2]  703         ldw y,(y) 
      0002FF 90 BF 32         [ 2]  704         ldw CNTDWN,y
      000302 1C 00 02         [ 2]  705         addw x,#CELLL 
      000305 81               [ 4]  706         ret 
                                    707 
                                    708 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    709 ; check for TIMER exiparition 
                                    710 ;  TIMEOUT? ( -- 0|-1 )
                                    711 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000306                        712         _HEADER TIMEOUTQ,8,"TIMEOUT?"
      000306 02 F5                    1         .word LINK 
                           000308     2         LINK=.
      000308 08                       3         .byte 8  
      000309 54 49 4D 45 4F 55 54     4         .ascii "TIMEOUT?"
             3F
      000311                          5         TIMEOUTQ:
      000311 4F               [ 1]  713         clr a
      000312 1D 00 02         [ 2]  714         subw x,#CELLL 
      000315 90 BE 32         [ 2]  715         ldw y,CNTDWN 
      000318 26 01            [ 1]  716         jrne 1$ 
      00031A 43               [ 1]  717         cpl a 
      00031B E7 01            [ 1]  718 1$:     ld (1,x),a 
      00031D F7               [ 1]  719         ld (x),a 
      00031E 81               [ 4]  720         ret         
                                    721 
                                    722 ;;;;;;;;;;;;;;;;;;;;;
                                    723 ; reboot MCU 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    724 ; REBOOT ( -- )
                                    725 ;;;;;;;;;;;;;;;;;;;;;
      00031F                        726         _HEADER reboot,6,"REBOOT"
      00031F 03 08                    1         .word LINK 
                           000321     2         LINK=.
      000321 06                       3         .byte 6  
      000322 52 45 42 4F 4F 54        4         .ascii "REBOOT"
      000328                          5         reboot:
      000328 CC 00 00         [ 2]  727         jp NonHandledInterrupt
                                    728 
                                    729 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    730 ; compile to flash memory 
                                    731 ; TO-FLASH ( -- )
                                    732 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      00032B                        733         _HEADER TOFLASH,8,"TO-FLASH"
      00032B 03 21                    1         .word LINK 
                           00032D     2         LINK=.
      00032D 08                       3         .byte 8  
      00032E 54 4F 2D 46 4C 41 53     4         .ascii "TO-FLASH"
             48
      000336                          5         TOFLASH:
      000336 CD 07 A2         [ 4]  734         call RAMLAST 
      000339 CD 04 E4         [ 4]  735         call AT 
      00033C CD 07 CD         [ 4]  736         call QDUP 
      00033F CD 04 99         [ 4]  737         call QBRAN
      000342 03 65                  738         .word 1$
      000344 CD 14 E4         [ 4]  739         call ABORQ 
      000347 1D                     740         .byte 29
      000348 20 4E 6F 74 20 77 68   741         .ascii " Not while definitions in RAM"   
             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      000365 90 AE FF FF      [ 2]  742 1$:     ldw y,#-1 
      000369 90 BF 20         [ 2]  743         ldw UTFLASH,y
      00036C 81               [ 4]  744         ret 
                                    745 
                                    746 ;;;;;;;;;;;;;;;;;;;;;;
                                    747 ; compile to RAM 
                                    748 ; TO-RAM ( -- )
                                    749 ;;;;;;;;;;;;;;;;;;;;;;
      00036D                        750         _HEADER TORAM,6,"TO-RAM"
      00036D 03 2D                    1         .word LINK 
                           00036F     2         LINK=.
      00036F 06                       3         .byte 6  
      000370 54 4F 2D 52 41 4D        4         .ascii "TO-RAM"
      000376                          5         TORAM:
      000376 90 5F            [ 1]  751         clrw y 
      000378 90 BF 20         [ 2]  752         ldw UTFLASH,y 
      00037B 81               [ 4]  753         ret 
                                    754 
                                    755 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    756 ;; BAUD RATE constants table
                                    757 ; values to put in BRR1 & BRR2 
                                    758 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      00037C                        759 baudrate: 
      00037C A0 1B                  760 	.byte 0xa0,0x1b ; 2400
      00037E D0 05                  761 	.byte 0xd0,0x5  ; 4800 
      000380 68 03                  762 	.byte 0x68,0x3  ; 9600
      000382 34 01                  763 	.byte 0x34,0x1  ; 19200
      000384 11 06                  764 	.byte 0x11,0x6  ; 57600
      000386 08 0B                  765 	.byte 0x8,0xb   ; 115200
                                    766 
                                    767 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    768 ; BAUD RATE CONSTANTS names 
                                    769 ; 2400 baud  ( -- n )
                                    770 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000388                        771         _HEADER B2K4,4,"B2K4"
      000388 03 6F                    1         .word LINK 
                           00038A     2         LINK=.
      00038A 04                       3         .byte 4  
      00038B 42 32 4B 34              4         .ascii "B2K4"
      00038F                          5         B2K4:
      00038F 1D 00 02         [ 2]  772 	subw x,#CELLL 
      000392 90 5F            [ 1]  773         clrw y
      000394 FF               [ 2]  774         ldw (x),y
      000395 81               [ 4]  775 	ret
                                    776 
                                    777 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    778 ; 4800 baud	
                                    779 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000396                        780         _HEADER B4K8,4,"B4K8"
      000396 03 8A                    1         .word LINK 
                           000398     2         LINK=.
      000398 04                       3         .byte 4  
      000399 42 34 4B 38              4         .ascii "B4K8"
      00039D                          5         B4K8:
      00039D 1D 00 02         [ 2]  781         subw x,#CELLL 
      0003A0 90 AE 00 02      [ 2]  782         ldw y,#2 
      0003A4 FF               [ 2]  783         ldw (x),y
      0003A5 81               [ 4]  784         ret 
                                    785 
                                    786 ;;;;;;;;;;;;;;;;;;;;
                                    787 ; 9600 baud
                                    788 ;;;;;;;;;;;;;;;;;;;;
      0003A6                        789         _HEADER B9K6,4,"B9K6"
      0003A6 03 98                    1         .word LINK 
                           0003A8     2         LINK=.
      0003A8 04                       3         .byte 4  
      0003A9 42 39 4B 36              4         .ascii "B9K6"
      0003AD                          5         B9K6:
      0003AD 1D 00 02         [ 2]  790         subw x,#CELLL 
      0003B0 90 AE 00 04      [ 2]  791         ldw y,#4 
      0003B4 FF               [ 2]  792         ldw (x),y 
      0003B5 81               [ 4]  793         ret 
                                    794 ;;;;;;;;;;;;;;
                                    795 ; 19200 baud
                                    796 ;;;;;;;;;;;;;;
      0003B6                        797         _HEADER B19K2,5,"B19K2"
      0003B6 03 A8                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                           0003B8     2         LINK=.
      0003B8 05                       3         .byte 5  
      0003B9 42 31 39 4B 32           4         .ascii "B19K2"
      0003BE                          5         B19K2:
      0003BE 1D 00 02         [ 2]  798         subw x,#CELLL
      0003C1 90 AE 00 06      [ 2]  799         ldw y,#6 
      0003C5 FF               [ 2]  800         ldw (x),y 
      0003C6 81               [ 4]  801         ret 
                                    802 ;;;;;;;;;;;;;;
                                    803 ; 57600 baud  
                                    804 ;;;;;;;;;;;;;;
      0003C7                        805         _HEADER B57K6,5,"B57K6"
      0003C7 03 B8                    1         .word LINK 
                           0003C9     2         LINK=.
      0003C9 05                       3         .byte 5  
      0003CA 42 35 37 4B 36           4         .ascii "B57K6"
      0003CF                          5         B57K6:
      0003CF 1D 00 02         [ 2]  806         subw x,#CELLL 
      0003D2 90 AE 00 08      [ 2]  807         ldw y,#8 
      0003D6 FF               [ 2]  808         ldw (x),y 
      0003D7 81               [ 4]  809         ret 
                                    810 ;;;;;;;;;;;;;;
                                    811 ; 115200 baud 
                                    812 ;;;;;;;;;;;;;;
      0003D8                        813         _HEADER B115K2,6,"B115K2"
      0003D8 03 C9                    1         .word LINK 
                           0003DA     2         LINK=.
      0003DA 06                       3         .byte 6  
      0003DB 42 31 31 35 4B 32        4         .ascii "B115K2"
      0003E1                          5         B115K2:
      0003E1 1D 00 02         [ 2]  814 	subw x,#CELLL 
      0003E4 90 AE 00 0A      [ 2]  815         ldw y,#10 
      0003E8 FF               [ 2]  816         ldw (x),y 
      0003E9 81               [ 4]  817         ret 
                                    818 
                                    819 ;;;;;;;;;;;;;;;;;;;;;;;	
                                    820 ;; set UART2 BAUD rate
                                    821 ;	BAUD ( u -- )
                                    822 ;;;;;;;;;;;;;;;;;;;;;;;
      0003EA                        823         _HEADER BAUD,4,"BAUD"
      0003EA 03 DA                    1         .word LINK 
                           0003EC     2         LINK=.
      0003EC 04                       3         .byte 4  
      0003ED 42 41 55 44              4         .ascii "BAUD"
      0003F1                          5         BAUD:
      0003F1 1D 00 02         [ 2]  824 	subw x,#CELLL
      0003F4 90 AE 03 7C      [ 2]  825         ldw y,#baudrate 
      0003F8 FF               [ 2]  826         ldw (x),y 
      0003F9 CD 08 3D         [ 4]  827         call PLUS
      0003FC 90 93            [ 1]  828         ldw y,x  
      0003FE 90 FE            [ 2]  829         ldw y,(y)
      000400 90 F6            [ 1]  830         ld a,(y)
      000402 88               [ 1]  831         push a 
      000403 90 5C            [ 1]  832         incw y 
      000405 90 F6            [ 1]  833         ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      000407 C7 52 33         [ 1]  834         ld UART_BRR2,a 
      00040A 84               [ 1]  835         pop a
      00040B C7 52 32         [ 1]  836         ld UART_BRR1,a 
      00040E 1C 00 02         [ 2]  837         addw x,#CELLL 
      000411 81               [ 4]  838         ret 
                                    839 
                                    840 ;; Device dependent I/O
                                    841 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    842 ;       ?RX     ( -- c T | F )
                                    843 ;         Return input byte and true, or false.
                                    844 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000412                        845         _HEADER QKEY,4,"?KEY"
      000412 03 EC                    1         .word LINK 
                           000414     2         LINK=.
      000414 04                       3         .byte 4  
      000415 3F 4B 45 59              4         .ascii "?KEY"
      000419                          5         QKEY:
      000419 90 5F            [ 1]  846         CLRW Y 
      00041B 72 0B 52 30 0B   [ 2]  847         BTJF UART_SR,#UART_SR_RXNE,INCH   ;check status
      000420 C6 52 31         [ 1]  848         LD    A,UART_DR   ;get char in A
      000423 1D 00 02         [ 2]  849 	SUBW	X,#2
      000426 E7 01            [ 1]  850         LD     (1,X),A
      000428 7F               [ 1]  851 	CLR	(X)
      000429 90 53            [ 2]  852         CPLW     Y
      00042B                        853 INCH:
      00042B 1D 00 02         [ 2]  854 		SUBW	X,#2
      00042E FF               [ 2]  855         LDW     (X),Y
      00042F 81               [ 4]  856         RET
                                    857 
                                    858 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    859 ;       TX!     ( c -- )
                                    860 ;       Send character c to  output device.
                                    861 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000430                        862         _HEADER EMIT,4,"EMIT"
      000430 04 14                    1         .word LINK 
                           000432     2         LINK=.
      000432 04                       3         .byte 4  
      000433 45 4D 49 54              4         .ascii "EMIT"
      000437                          5         EMIT:
      000437 E6 01            [ 1]  863         LD     A,(1,X)
      000439 1C 00 02         [ 2]  864 	ADDW	X,#2
      00043C 72 0F 52 30 FB   [ 2]  865 OUTPUT: BTJF UART_SR,#UART_SR_TXE,OUTPUT  ;loop until tx empty 
      000441 C7 52 31         [ 1]  866         LD    UART_DR,A   ;send A
      000444 81               [ 4]  867         RET
                                    868 
                                    869 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    870 ;       FC-XON  ( -- )
                                    871 ;       send XON character 
                                    872 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000445                        873         _HEADER FC_XON,6,"FC-XON"
      000445 04 32                    1         .word LINK 
                           000447     2         LINK=.
      000447 06                       3         .byte 6  
      000448 46 43 2D 58 4F 4E        4         .ascii "FC-XON"
      00044E                          5         FC_XON:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      00044E 1D 00 02         [ 2]  874         subw x,#CELLL 
      000451 7F               [ 1]  875         clr (x)
      000452 A6 11            [ 1]  876         ld a,#XON 
      000454 E7 01            [ 1]  877         ld (1,x),a 
      000456 CD 04 37         [ 4]  878         call EMIT 
      000459 81               [ 4]  879         ret 
                                    880 
                                    881 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    882 ;       FC-XOFF ( -- )
                                    883 ;       Send XOFF character 
                                    884 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00045A                        885         _HEADER FC_XOFF,7,"FC-XOFF"
      00045A 04 47                    1         .word LINK 
                           00045C     2         LINK=.
      00045C 07                       3         .byte 7  
      00045D 46 43 2D 58 4F 46 46     4         .ascii "FC-XOFF"
      000464                          5         FC_XOFF:
      000464 1D 00 02         [ 2]  886         subw x,#CELLL 
      000467 7F               [ 1]  887         clr (x)
      000468 A6 13            [ 1]  888         ld a,#XOFF 
      00046A E7 01            [ 1]  889         ld (1,x),a 
      00046C CD 04 37         [ 4]  890         call EMIT 
      00046F 81               [ 4]  891         ret
                                    892 
                                    893 ;; The kernel
                                    894 
                                    895 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    896 ;       doLIT   ( -- w )
                                    897 ;       Push an inline literal.
                                    898 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000470                        899 DOLIT:
      000470 1D 00 02         [ 2]  900 	SUBW X,#2
      000473 16 01            [ 2]  901         ldw y,(1,sp)
      000475 90 FE            [ 2]  902         ldw y,(y)
      000477 FF               [ 2]  903         ldw (x),y
      000478 90 85            [ 2]  904         popw y 
      00047A 90 EC 02         [ 2]  905         jp (2,y)
                                    906 
                                    907 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    908 ;       NEXT    ( -- )
                                    909 ;       Code for  single index loop.
                                    910 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00047D                        911         _HEADER DONXT,COMPO+4,"NEXT"
      00047D 04 5C                    1         .word LINK 
                           00047F     2         LINK=.
      00047F 44                       3         .byte COMPO+4  
      000480 4E 45 58 54              4         .ascii "NEXT"
      000484                          5         DONXT:
      000484 16 03            [ 2]  912 	LDW Y,(3,SP)
      000486 90 5A            [ 2]  913 	DECW Y
      000488 2A 07            [ 1]  914 	JRPL NEX1 ; jump if N=0
      00048A 90 85            [ 2]  915 	POPW Y
      00048C 5B 02            [ 2]  916         addw sp,#2
      00048E 90 EC 02         [ 2]  917         JP (2,Y)
      000491                        918 NEX1:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      000491 17 03            [ 2]  919         LDW (3,SP),Y
      000493 90 85            [ 2]  920         POPW Y
      000495 90 FE            [ 2]  921 	LDW Y,(Y)
      000497 90 FC            [ 2]  922 	JP (Y)
                                    923 
                                    924 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    925 ;       ?branch ( f -- )
                                    926 ;       Branch if flag is zero.
                                    927 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    928 ;       _HEADER QBRAN,COMPO+7,"?BRANCH"        
      000499                        929 QBRAN:	
      000499 90 93            [ 1]  930         LDW Y,X
      00049B 1C 00 02         [ 2]  931 	ADDW X,#2
      00049E 90 FE            [ 2]  932 	LDW Y,(Y)
      0004A0 27 13            [ 1]  933         JREQ     BRAN
      0004A2 90 85            [ 2]  934 	POPW Y
      0004A4 90 EC 02         [ 2]  935 	JP (2,Y)
                                    936 
                                    937 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    938 ;  TBRANCH ( f -- )
                                    939 ;  branch if f==TRUE 
                                    940 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    941 ;        _HEADER TBRAN,COMPO+7,"TBRANCH"
      0004A7                        942 TBRAN: 
      0004A7 90 93            [ 1]  943         LDW Y,X 
      0004A9 1C 00 02         [ 2]  944         ADDW X,#2 
      0004AC 90 FE            [ 2]  945         LDW Y,(Y)
      0004AE 26 05            [ 1]  946         JRNE BRAN 
      0004B0 90 85            [ 2]  947         POPW Y 
      0004B2 90 EC 02         [ 2]  948         JP (2,Y)
                                    949 
                                    950 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    951 ;       branch  ( -- )
                                    952 ;       Branch to an inline address.
                                    953 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    954 ;       _HEADER BRAN,COMPO+6,"BRANCH"
      0004B5                        955 BRAN:
      0004B5 90 85            [ 2]  956         POPW Y
      0004B7 90 FE            [ 2]  957 	LDW Y,(Y)
      0004B9 90 FC            [ 2]  958         JP  (Y)
                                    959 
                                    960 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    961 ;       EXECUTE ( ca -- )
                                    962 ;       Execute  word at ca.
                                    963 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004BB                        964         _HEADER EXECU,7,"EXECUTE"
      0004BB 04 7F                    1         .word LINK 
                           0004BD     2         LINK=.
      0004BD 07                       3         .byte 7  
      0004BE 45 58 45 43 55 54 45     4         .ascii "EXECUTE"
      0004C5                          5         EXECU:
      0004C5 90 93            [ 1]  965         LDW Y,X
      0004C7 1C 00 02         [ 2]  966 	ADDW X,#CELLL 
      0004CA 90 FE            [ 2]  967 	LDW  Y,(Y)
      0004CC 90 FC            [ 2]  968         JP   (Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                    969 
                           000001   970 OPTIMIZE = 1
                           000001   971 .if OPTIMIZE 
                                    972 ; remplacement de CALL EXIT par 
                                    973 ; le opcode de RET.
                                    974 ; Voir modification au code de ";"
                           000000   975 .else 
                                    976 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    977 ;       EXIT    ( -- )
                                    978 ;       Terminate a colon definition.
                                    979 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    980 ;       _HEADER EXIT,4,"EXIT"
                                    981 EXIT:
                                    982         POPW Y
                                    983         RET
                                    984 .endif 
                                    985 
                                    986 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    987 ;       !       ( w a -- )
                                    988 ;       Pop  data stack to memory.
                                    989 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004CE                        990         _HEADER STORE,1,"!"
      0004CE 04 BD                    1         .word LINK 
                           0004D0     2         LINK=.
      0004D0 01                       3         .byte 1  
      0004D1 21                       4         .ascii "!"
      0004D2                          5         STORE:
      0004D2 90 93            [ 1]  991         LDW Y,X
      0004D4 90 FE            [ 2]  992         LDW Y,(Y)    ;Y=a
      0004D6 89               [ 2]  993         PUSHW X
      0004D7 EE 02            [ 2]  994         LDW X,(2,X) ; x=w 
      0004D9 90 FF            [ 2]  995         LDW (Y),X 
      0004DB 85               [ 2]  996         POPW X  
      0004DC                        997         _DDROP 
      0004DC 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      0004DF 81               [ 4]  998         RET     
                                    999 
                                   1000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1001 ;       @       ( a -- w )
                                   1002 ;       Push memory location to stack.
                                   1003 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004E0                       1004         _HEADER AT,1,"@"
      0004E0 04 D0                    1         .word LINK 
                           0004E2     2         LINK=.
      0004E2 01                       3         .byte 1  
      0004E3 40                       4         .ascii "@"
      0004E4                          5         AT:
      0004E4 90 93            [ 1] 1005         LDW Y,X     ;Y = a
      0004E6 90 FE            [ 2] 1006         LDW Y,(Y)   ; address 
      0004E8 90 FE            [ 2] 1007         LDW Y,(Y)   ; value 
      0004EA FF               [ 2] 1008         LDW (X),Y ;w = @Y
      0004EB 81               [ 4] 1009         RET     
                                   1010 
                                   1011 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1012 ;       C!      ( c b -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                                   1013 ;       Pop  data stack to byte memory.
                                   1014 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004EC                       1015         _HEADER CSTOR,2,"C!"
      0004EC 04 E2                    1         .word LINK 
                           0004EE     2         LINK=.
      0004EE 02                       3         .byte 2  
      0004EF 43 21                    4         .ascii "C!"
      0004F1                          5         CSTOR:
      0004F1 90 93            [ 1] 1016         LDW Y,X
      0004F3 90 FE            [ 2] 1017 	LDW Y,(Y)    ;Y=b
      0004F5 E6 03            [ 1] 1018         LD A,(3,X)    ;D = c
      0004F7 90 F7            [ 1] 1019         LD  (Y),A     ;store c at b
      0004F9 1C 00 04         [ 2] 1020 	ADDW X,#4 ; DDROP 
      0004FC 81               [ 4] 1021         RET     
                                   1022 
                                   1023 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1024 ;       C@      ( b -- c )
                                   1025 ;       Push byte in memory to  stack.
                                   1026 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004FD                       1027         _HEADER CAT,2,"C@"
      0004FD 04 EE                    1         .word LINK 
                           0004FF     2         LINK=.
      0004FF 02                       3         .byte 2  
      000500 43 40                    4         .ascii "C@"
      000502                          5         CAT:
      000502 90 93            [ 1] 1028         LDW Y,X     ;Y=b
      000504 90 FE            [ 2] 1029         LDW Y,(Y)
      000506 90 F6            [ 1] 1030         LD A,(Y)
      000508 E7 01            [ 1] 1031         LD (1,X),A
      00050A 7F               [ 1] 1032         CLR (X)
      00050B 81               [ 4] 1033         RET     
                                   1034 
                                   1035 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1036 ;       RP@     ( -- a )
                                   1037 ;       Push current RP to data stack.
                                   1038 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00050C                       1039         _HEADER RPAT,3,"RP@"
      00050C 04 FF                    1         .word LINK 
                           00050E     2         LINK=.
      00050E 03                       3         .byte 3  
      00050F 52 50 40                 4         .ascii "RP@"
      000512                          5         RPAT:
      000512 90 96            [ 1] 1040         LDW Y,SP    ;save return addr
      000514 1D 00 02         [ 2] 1041         SUBW X,#2
      000517 FF               [ 2] 1042         LDW (X),Y
      000518 81               [ 4] 1043         RET     
                                   1044 
                                   1045 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1046 ;       RP!     ( a -- )
                                   1047 ;       Set  return stack pointer.
                                   1048 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000519                       1049         _HEADER RPSTO,COMPO+3,"RP!"
      000519 05 0E                    1         .word LINK 
                           00051B     2         LINK=.
      00051B 43                       3         .byte COMPO+3  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      00051C 52 50 21                 4         .ascii "RP!"
      00051F                          5         RPSTO:
      00051F 90 85            [ 2] 1050         POPW Y
      000521 90 BF 26         [ 2] 1051         LDW YTEMP,Y
      000524 90 93            [ 1] 1052         LDW Y,X
      000526 90 FE            [ 2] 1053         LDW Y,(Y)
      000528 90 94            [ 1] 1054         LDW SP,Y
      00052A 1C 00 02         [ 2] 1055         ADDW X,#CELLL ; a was not dropped, Picatout 2020-05-24
      00052D 92 CC 26         [ 5] 1056         JP [YTEMP]
                                   1057 
                                   1058 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1059 ;       R>      ( -- w )
                                   1060 ;       Pop return stack to data stack.
                                   1061 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000530                       1062         _HEADER RFROM,2,"R>"
      000530 05 1B                    1         .word LINK 
                           000532     2         LINK=.
      000532 02                       3         .byte 2  
      000533 52 3E                    4         .ascii "R>"
      000535                          5         RFROM:
      000535 1D 00 02         [ 2] 1063         SUBW X,#CELLL 
      000538 16 03            [ 2] 1064         LDW Y,(3,SP)
      00053A FF               [ 2] 1065         LDW (X),Y 
      00053B 90 85            [ 2] 1066         POPW Y 
      00053D 5B 02            [ 2] 1067         ADDW SP,#2 
      00053F 90 FC            [ 2] 1068         JP (Y)
                                   1069 
                                   1070 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1071 ;       R@      ( -- w )
                                   1072 ;       Copy top of return stack to stack.
                                   1073 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000541                       1074         _HEADER RAT,2,"R@"
      000541 05 32                    1         .word LINK 
                           000543     2         LINK=.
      000543 02                       3         .byte 2  
      000544 52 40                    4         .ascii "R@"
      000546                          5         RAT:
      000546 16 03            [ 2] 1075         ldw y,(3,sp)
      000548 1D 00 02         [ 2] 1076         subw x,#CELLL 
      00054B FF               [ 2] 1077         ldw (x),y 
      00054C 81               [ 4] 1078         ret 
                                   1079 
                                   1080 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1081 ;       LOCAL ( n -- )
                                   1082 ;       reserve n slots on return stack
                                   1083 ;       for local variables 
                                   1084 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00054D                       1085         _HEADER LOCAL,5,"LOCAL"
      00054D 05 43                    1         .word LINK 
                           00054F     2         LINK=.
      00054F 05                       3         .byte 5  
      000550 4C 4F 43 41 4C           4         .ascii "LOCAL"
      000555                          5         LOCAL:
      000555 90 85            [ 2] 1086         POPW Y  
      000557 90 BF 26         [ 2] 1087         LDW YTEMP,Y ; RETURN ADDRESS 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      00055A E6 01            [ 1] 1088         LD A,(1,X)
      00055C 90 97            [ 1] 1089         LD YL,A 
      00055E A6 02            [ 1] 1090         LD A,#CELLL 
      000560 90 42            [ 4] 1091         MUL Y,A 
      000562 90 BF 24         [ 2] 1092         LDw XTEMP,Y
      000565 90 96            [ 1] 1093         LDW Y,SP 
      000567 72 B2 00 24      [ 2] 1094         SUBW Y,XTEMP
      00056B 90 94            [ 1] 1095         LDW SP,Y 
      00056D 1C 00 02         [ 2] 1096         ADDW X,#CELLL 
      000570 92 CC 26         [ 5] 1097         JP [YTEMP]
                                   1098 
                                   1099 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1100 ;       NRDROP ( n -- )
                                   1101 ;       drop n elements from rstack
                                   1102 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000573                       1103         _HEADER NRDROP,6,"NRDROP" 
      000573 05 4F                    1         .word LINK 
                           000575     2         LINK=.
      000575 06                       3         .byte 6  
      000576 4E 52 44 52 4F 50        4         .ascii "NRDROP"
      00057C                          5         NRDROP:
      00057C 90 85            [ 2] 1104         POPW Y 
      00057E 90 BF 26         [ 2] 1105         LDW YTEMP,Y ; RETURN ADDRESS 
      000581 E6 01            [ 1] 1106         LD A,(1,X)
      000583 90 97            [ 1] 1107         LD YL,A  
      000585 A6 02            [ 1] 1108         LD A,#CELLL 
      000587 90 42            [ 4] 1109         MUL Y,A 
      000589 90 BF 24         [ 2] 1110         LDW XTEMP,Y 
      00058C 90 96            [ 1] 1111         LDW Y,SP 
      00058E 72 B9 00 24      [ 2] 1112         ADDW Y,XTEMP 
      000592 90 94            [ 1] 1113         LDW SP,Y  
      000594 1C 00 02         [ 2] 1114         ADDW X,#CELLL 
      000597 92 CC 26         [ 5] 1115         JP [YTEMP]
                                   1116 
                                   1117 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1118 ;        ( n -- w)
                                   1119 ;      fetch nth element ofr return stack 
                                   1120 ;      n==0 is same as R@ 
                                   1121 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00059A                       1122         _HEADER NRAT,3,"NR@"
      00059A 05 75                    1         .word LINK 
                           00059C     2         LINK=.
      00059C 03                       3         .byte 3  
      00059D 4E 52 40                 4         .ascii "NR@"
      0005A0                          5         NRAT:
      0005A0 E6 01            [ 1] 1123         LD A,(1,X)
      0005A2 90 97            [ 1] 1124         LD YL,A 
      0005A4 A6 02            [ 1] 1125         LD A,#CELLL 
      0005A6 90 42            [ 4] 1126         MUL Y,A 
      0005A8 90 BF 26         [ 2] 1127         LDW YTEMP,Y 
      0005AB 90 96            [ 1] 1128         LDW Y,SP 
      0005AD 72 A9 00 03      [ 2] 1129         ADDW Y,#3 
      0005B1 72 B9 00 26      [ 2] 1130         ADDW Y,YTEMP 
      0005B5 90 FE            [ 2] 1131         LDW Y,(Y)
      0005B7 FF               [ 2] 1132         LDW (X),Y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      0005B8 81               [ 4] 1133         RET 
                                   1134 
                                   1135 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1136 ;       NR! ( w n --  )
                                   1137 ;       store w on nth position of 
                                   1138 ;       return stack 
                                   1139 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005B9                       1140         _HEADER NRSTO,3,"NR!"
      0005B9 05 9C                    1         .word LINK 
                           0005BB     2         LINK=.
      0005BB 03                       3         .byte 3  
      0005BC 4E 52 21                 4         .ascii "NR!"
      0005BF                          5         NRSTO:
      0005BF 90 96            [ 1] 1141         LDW Y,SP
      0005C1 72 A9 00 03      [ 2] 1142         ADDW Y,#3 
      0005C5 90 BF 26         [ 2] 1143         LDW YTEMP,Y 
      0005C8 E6 01            [ 1] 1144         LD A,(1,X)
      0005CA 90 97            [ 1] 1145         LD YL,A 
      0005CC A6 02            [ 1] 1146         LD A,#CELLL 
      0005CE 90 42            [ 4] 1147         MUL Y,A 
      0005D0 72 B9 00 26      [ 2] 1148         ADDW Y,YTEMP
      0005D4 89               [ 2] 1149         PUSHW X 
      0005D5 EE 02            [ 2] 1150         LDW X,(2,X)
      0005D7 90 FF            [ 2] 1151         LDW (Y),X
      0005D9 85               [ 2] 1152         POPW X 
      0005DA 1C 00 04         [ 2] 1153         ADDW X,#2*CELLL 
      0005DD 81               [ 4] 1154         RET 
                                   1155 
                                   1156 
                                   1157 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1158 ;       >R      ( w -- )
                                   1159 ;       Push data stack to return stack.
                                   1160 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005DE                       1161         _HEADER TOR,COMPO+2,">R"
      0005DE 05 BB                    1         .word LINK 
                           0005E0     2         LINK=.
      0005E0 42                       3         .byte COMPO+2  
      0005E1 3E 52                    4         .ascii ">R"
      0005E3                          5         TOR:
      0005E3 90 85            [ 2] 1162         POPW Y    ;save return addr
      0005E5 90 BF 26         [ 2] 1163         LDW YTEMP,Y
      0005E8 90 93            [ 1] 1164         LDW Y,X
      0005EA 90 FE            [ 2] 1165         LDW Y,(Y)  ; W
      0005EC 90 89            [ 2] 1166         PUSHW Y    ;W >R 
      0005EE 1C 00 02         [ 2] 1167         ADDW X,#2
      0005F1 92 CC 26         [ 5] 1168         JP [YTEMP]
                                   1169 
                                   1170 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1171 ;       SP@     ( -- a )
                                   1172 ;       Push current stack pointer.
                                   1173 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005F4                       1174         _HEADER SPAT,3,"SP@"
      0005F4 05 E0                    1         .word LINK 
                           0005F6     2         LINK=.
      0005F6 03                       3         .byte 3  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      0005F7 53 50 40                 4         .ascii "SP@"
      0005FA                          5         SPAT:
      0005FA 90 93            [ 1] 1175 	LDW Y,X
      0005FC 1D 00 02         [ 2] 1176         SUBW X,#2
      0005FF FF               [ 2] 1177 	LDW (X),Y
      000600 81               [ 4] 1178         RET     
                                   1179 
                                   1180 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1181 ;       SP!     ( a -- )
                                   1182 ;       Set  data stack pointer.
                                   1183 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000601                       1184         _HEADER SPSTO,3,"SP!"
      000601 05 F6                    1         .word LINK 
                           000603     2         LINK=.
      000603 03                       3         .byte 3  
      000604 53 50 21                 4         .ascii "SP!"
      000607                          5         SPSTO:
      000607 FE               [ 2] 1185         LDW     X,(X)     ;X = a
      000608 81               [ 4] 1186         RET     
                                   1187 
                                   1188 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1189 ;       DROP    ( w -- )
                                   1190 ;       Discard top stack item.
                                   1191 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000609                       1192         _HEADER DROP,4,"DROP"
      000609 06 03                    1         .word LINK 
                           00060B     2         LINK=.
      00060B 04                       3         .byte 4  
      00060C 44 52 4F 50              4         .ascii "DROP"
      000610                          5         DROP:
      000610 1C 00 02         [ 2] 1193         ADDW X,#2     
      000613 81               [ 4] 1194         RET     
                                   1195 
                                   1196 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1197 ;       DUP     ( w -- w w )
                                   1198 ;       Duplicate  top stack item.
                                   1199 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000614                       1200         _HEADER DUPP,3,"DUP"
      000614 06 0B                    1         .word LINK 
                           000616     2         LINK=.
      000616 03                       3         .byte 3  
      000617 44 55 50                 4         .ascii "DUP"
      00061A                          5         DUPP:
      00061A 90 93            [ 1] 1201 	LDW Y,X
      00061C 1D 00 02         [ 2] 1202         SUBW X,#2
      00061F 90 FE            [ 2] 1203 	LDW Y,(Y)
      000621 FF               [ 2] 1204 	LDW (X),Y
      000622 81               [ 4] 1205         RET     
                                   1206 
                                   1207 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1208 ;       SWAP    ( w1 w2 -- w2 w1 )
                                   1209 ;       Exchange top two stack items.
                                   1210 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000623                       1211         _HEADER SWAPP,4,"SWAP"
      000623 06 16                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                           000625     2         LINK=.
      000625 04                       3         .byte 4  
      000626 53 57 41 50              4         .ascii "SWAP"
      00062A                          5         SWAPP:
      00062A 90 93            [ 1] 1212         LDW Y,X
      00062C 90 FE            [ 2] 1213         LDW Y,(Y)
      00062E 90 89            [ 2] 1214         PUSHW Y  
      000630 90 93            [ 1] 1215         LDW Y,X
      000632 90 EE 02         [ 2] 1216         LDW Y,(2,Y)
      000635 FF               [ 2] 1217         LDW (X),Y
      000636 90 85            [ 2] 1218         POPW Y 
      000638 EF 02            [ 2] 1219         LDW (2,X),Y
      00063A 81               [ 4] 1220         RET     
                                   1221 
                                   1222 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1223 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                   1224 ;       Copy second stack item to top.
                                   1225 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00063B                       1226         _HEADER OVER,4,"OVER"
      00063B 06 25                    1         .word LINK 
                           00063D     2         LINK=.
      00063D 04                       3         .byte 4  
      00063E 4F 56 45 52              4         .ascii "OVER"
      000642                          5         OVER:
      000642 1D 00 02         [ 2] 1227         SUBW X,#2
      000645 90 93            [ 1] 1228         LDW Y,X
      000647 90 EE 04         [ 2] 1229         LDW Y,(4,Y)
      00064A FF               [ 2] 1230         LDW (X),Y
      00064B 81               [ 4] 1231         RET     
                                   1232 
                                   1233 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1234 ;       0<      ( n -- t )
                                   1235 ;       Return true if n is negative.
                                   1236 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00064C                       1237         _HEADER ZLESS,2,"0<"
      00064C 06 3D                    1         .word LINK 
                           00064E     2         LINK=.
      00064E 02                       3         .byte 2  
      00064F 30 3C                    4         .ascii "0<"
      000651                          5         ZLESS:
      000651 A6 FF            [ 1] 1238         LD A,#0xFF
      000653 90 93            [ 1] 1239         LDW Y,X
      000655 90 FE            [ 2] 1240         LDW Y,(Y)
      000657 2B 01            [ 1] 1241         JRMI     ZL1
      000659 4F               [ 1] 1242         CLR A   ;false
      00065A F7               [ 1] 1243 ZL1:    LD     (X),A
      00065B E7 01            [ 1] 1244         LD (1,X),A
      00065D 81               [ 4] 1245 	RET     
                                   1246 
                                   1247 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1248 ;       0= ( n -- f )
                                   1249 ;   n==0?
                                   1250 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00065E                       1251         _HEADER ZEQUAL,2,"0="
      00065E 06 4E                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                           000660     2         LINK=.
      000660 02                       3         .byte 2  
      000661 30 3D                    4         .ascii "0="
      000663                          5         ZEQUAL:
      000663 A6 FF            [ 1] 1252         LD A,#0XFF 
      000665 90 93            [ 1] 1253         LDW Y,X 
      000667 90 FE            [ 2] 1254         LDW Y,(Y)
      000669 27 02            [ 1] 1255         JREQ ZEQU1 
      00066B A6 00            [ 1] 1256         LD A,#0 
      00066D                       1257 ZEQU1:  
      00066D F7               [ 1] 1258         LD (X),A 
      00066E E7 01            [ 1] 1259         LD (1,X),A         
      000670 81               [ 4] 1260         RET 
                                   1261 
                                   1262 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1263 ;       AND     ( w w -- w )
                                   1264 ;       Bitwise AND.
                                   1265 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000671                       1266         _HEADER ANDD,3,"AND"
      000671 06 60                    1         .word LINK 
                           000673     2         LINK=.
      000673 03                       3         .byte 3  
      000674 41 4E 44                 4         .ascii "AND"
      000677                          5         ANDD:
      000677 F6               [ 1] 1267         LD  A,(X)    ;D=w
      000678 E4 02            [ 1] 1268         AND A,(2,X)
      00067A E7 02            [ 1] 1269         LD (2,X),A
      00067C E6 01            [ 1] 1270         LD A,(1,X)
      00067E E4 03            [ 1] 1271         AND A,(3,X)
      000680 E7 03            [ 1] 1272         LD (3,X),A
      000682 1C 00 02         [ 2] 1273         ADDW X,#2
      000685 81               [ 4] 1274         RET
                                   1275 
                                   1276 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1277 ;       OR      ( w w -- w )
                                   1278 ;       Bitwise inclusive OR.
                                   1279 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000686                       1280         _HEADER ORR,2,"OR"
      000686 06 73                    1         .word LINK 
                           000688     2         LINK=.
      000688 02                       3         .byte 2  
      000689 4F 52                    4         .ascii "OR"
      00068B                          5         ORR:
      00068B F6               [ 1] 1281         LD A,(X)    ;D=w
      00068C EA 02            [ 1] 1282         OR A,(2,X)
      00068E E7 02            [ 1] 1283         LD (2,X),A
      000690 E6 01            [ 1] 1284         LD A,(1,X)
      000692 EA 03            [ 1] 1285         OR A,(3,X)
      000694 E7 03            [ 1] 1286         LD (3,X),A
      000696 1C 00 02         [ 2] 1287         ADDW X,#2
      000699 81               [ 4] 1288         RET
                                   1289 
                                   1290 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1291 ;       XOR     ( w w -- w )
                                   1292 ;       Bitwise exclusive OR.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                   1293 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00069A                       1294         _HEADER XORR,3,"XOR"
      00069A 06 88                    1         .word LINK 
                           00069C     2         LINK=.
      00069C 03                       3         .byte 3  
      00069D 58 4F 52                 4         .ascii "XOR"
      0006A0                          5         XORR:
      0006A0 F6               [ 1] 1295         LD A,(X)    ;D=w
      0006A1 E8 02            [ 1] 1296         XOR A,(2,X)
      0006A3 E7 02            [ 1] 1297         LD (2,X),A
      0006A5 E6 01            [ 1] 1298         LD A,(1,X)
      0006A7 E8 03            [ 1] 1299         XOR A,(3,X)
      0006A9 E7 03            [ 1] 1300         LD (3,X),A
      0006AB 1C 00 02         [ 2] 1301         ADDW X,#2
      0006AE 81               [ 4] 1302         RET
                                   1303 
                                   1304 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1305 ;       UM+     ( u u -- udsum )
                                   1306 ;       Add two unsigned single
                                   1307 ;       and return a double sum.
                                   1308 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006AF                       1309         _HEADER UPLUS,3,"UM+"
      0006AF 06 9C                    1         .word LINK 
                           0006B1     2         LINK=.
      0006B1 03                       3         .byte 3  
      0006B2 55 4D 2B                 4         .ascii "UM+"
      0006B5                          5         UPLUS:
      0006B5 A6 01            [ 1] 1310         LD A,#1
      0006B7 90 93            [ 1] 1311         LDW Y,X
      0006B9 90 EE 02         [ 2] 1312         LDW Y,(2,Y)
      0006BC 90 BF 26         [ 2] 1313         LDW YTEMP,Y
      0006BF 90 93            [ 1] 1314         LDW Y,X
      0006C1 90 FE            [ 2] 1315         LDW Y,(Y)
      0006C3 72 B9 00 26      [ 2] 1316         ADDW Y,YTEMP
      0006C7 EF 02            [ 2] 1317         LDW (2,X),Y
      0006C9 25 01            [ 1] 1318         JRC     UPL1
      0006CB 4F               [ 1] 1319         CLR A
      0006CC E7 01            [ 1] 1320 UPL1:   LD     (1,X),A
      0006CE 7F               [ 1] 1321         CLR (X)
      0006CF 81               [ 4] 1322         RET
                                   1323 
                                   1324 ;; System and user variables
                                   1325 
                                   1326 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1327 ;       doVAR   ( -- a )
                                   1328 ;       run time code 
                                   1329 ;       for VARIABLE and CREATE.
                                   1330 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1331 ;       HEADER DOVAR,COMPO+5,"DOVAR"
      0006D0                       1332 DOVAR:
      0006D0 1D 00 02         [ 2] 1333 	SUBW X,#2
      0006D3 90 85            [ 2] 1334         POPW Y    ;get return addr (pfa)
      0006D5 90 FE            [ 2] 1335         LDW Y,(Y) ; indirect address 
      0006D7 FF               [ 2] 1336         LDW (X),Y    ;push on stack
      0006D8 81               [ 4] 1337         RET     ;go to RET of EXEC
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                   1338 
                                   1339 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1340 ;       BASE    ( -- a )
                                   1341 ;       Radix base for numeric I/O.
                                   1342 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006D9                       1343         _HEADER BASE,4,"BASE"
      0006D9 06 B1                    1         .word LINK 
                           0006DB     2         LINK=.
      0006DB 04                       3         .byte 4  
      0006DC 42 41 53 45              4         .ascii "BASE"
      0006E0                          5         BASE:
      0006E0 90 AE 00 06      [ 2] 1344 	LDW Y,#UBASE 
      0006E4 1D 00 02         [ 2] 1345 	SUBW X,#2
      0006E7 FF               [ 2] 1346         LDW (X),Y
      0006E8 81               [ 4] 1347         RET
                                   1348 
                                   1349 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1350 ;       tmp     ( -- a )
                                   1351 ;       A temporary storage.
                                   1352 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006E9                       1353         _HEADER TEMP,3,"TMP"
      0006E9 06 DB                    1         .word LINK 
                           0006EB     2         LINK=.
      0006EB 03                       3         .byte 3  
      0006EC 54 4D 50                 4         .ascii "TMP"
      0006EF                          5         TEMP:
      0006EF 90 AE 00 0A      [ 2] 1354 	LDW Y,#UTMP
      0006F3 1D 00 02         [ 2] 1355 	SUBW X,#2
      0006F6 FF               [ 2] 1356         LDW (X),Y
      0006F7 81               [ 4] 1357         RET
                                   1358 
                                   1359 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1360 ;       >IN     ( -- a )
                                   1361 ;        Hold parsing pointer.
                                   1362 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006F8                       1363         _HEADER INN,3,">IN"
      0006F8 06 EB                    1         .word LINK 
                           0006FA     2         LINK=.
      0006FA 03                       3         .byte 3  
      0006FB 3E 49 4E                 4         .ascii ">IN"
      0006FE                          5         INN:
      0006FE 90 AE 00 0C      [ 2] 1364 	LDW Y,#UINN 
      000702 1D 00 02         [ 2] 1365 	SUBW X,#2
      000705 FF               [ 2] 1366         LDW (X),Y
      000706 81               [ 4] 1367         RET
                                   1368 
                                   1369 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1370 ;       #TIB    ( -- a )
                                   1371 ;       Count in terminal input 
                                   1372 ;       buffer.
                                   1373 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000707                       1374         _HEADER NTIB,4,"#TIB"
      000707 06 FA                    1         .word LINK 
                           000709     2         LINK=.
      000709 04                       3         .byte 4  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      00070A 23 54 49 42              4         .ascii "#TIB"
      00070E                          5         NTIB:
      00070E 90 AE 00 0E      [ 2] 1375 	LDW Y,#UCTIB 
      000712 1D 00 02         [ 2] 1376 	SUBW X,#2
      000715 FF               [ 2] 1377         LDW (X),Y
      000716 81               [ 4] 1378         RET
                                   1379 
                                   1380 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1381 ;       TBUF ( -- a )
                                   1382 ;       address of 128 bytes 
                                   1383 ;       transaction buffer
                                   1384 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000717                       1385         _HEADER TBUF,4,"TBUF"
      000717 07 09                    1         .word LINK 
                           000719     2         LINK=.
      000719 04                       3         .byte 4  
      00071A 54 42 55 46              4         .ascii "TBUF"
      00071E                          5         TBUF:
      00071E 90 AE 16 80      [ 2] 1386         ldw y,#ROWBUFF
      000722 1D 00 02         [ 2] 1387         subw x,#CELLL
      000725 FF               [ 2] 1388         ldw (x),y 
      000726 81               [ 4] 1389         ret 
                                   1390 
                                   1391 ; systeme variable 
                                   1392 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1393 ; compilation destination 
                                   1394 ; TFLASH ( -- A )
                                   1395 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000727                       1396         _HEADER TFLASH,6,"TFLASH"
      000727 07 19                    1         .word LINK 
                           000729     2         LINK=.
      000729 06                       3         .byte 6  
      00072A 54 46 4C 41 53 48        4         .ascii "TFLASH"
      000730                          5         TFLASH:
      000730 1D 00 02         [ 2] 1397         subw x,#CELLL 
      000733 90 AE 00 20      [ 2] 1398         ldw y,#UTFLASH
      000737 FF               [ 2] 1399         ldw (x),y 
      000738 81               [ 4] 1400         ret 
                                   1401 
                                   1402 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1403 ;       "EVAL   ( -- a )
                                   1404 ;       Execution vector of EVAL.
                                   1405 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000739                       1406         _HEADER TEVAL,5,"'EVAL"
      000739 07 29                    1         .word LINK 
                           00073B     2         LINK=.
      00073B 05                       3         .byte 5  
      00073C 27 45 56 41 4C           4         .ascii "'EVAL"
      000741                          5         TEVAL:
      000741 90 AE 00 12      [ 2] 1407 	LDW Y,#UINTER 
      000745 1D 00 02         [ 2] 1408 	SUBW X,#2
      000748 FF               [ 2] 1409         LDW (X),Y
      000749 81               [ 4] 1410         RET
                                   1411 
                                   1412 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                                   1413 ;       HLD     ( -- a )
                                   1414 ;       Hold a pointer of output
                                   1415 ;        string.
                                   1416 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00074A                       1417         _HEADER HLD,3,"HLD"
      00074A 07 3B                    1         .word LINK 
                           00074C     2         LINK=.
      00074C 03                       3         .byte 3  
      00074D 48 4C 44                 4         .ascii "HLD"
      000750                          5         HLD:
      000750 90 AE 00 14      [ 2] 1418 	LDW Y,#UHLD 
      000754 1D 00 02         [ 2] 1419 	SUBW X,#2
      000757 FF               [ 2] 1420         LDW (X),Y
      000758 81               [ 4] 1421         RET
                                   1422 
                                   1423 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1424 ;       CONTEXT ( -- a )
                                   1425 ;       Start vocabulary search.
                                   1426 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000759                       1427         _HEADER CNTXT,7,"CONTEXT"
      000759 07 4C                    1         .word LINK 
                           00075B     2         LINK=.
      00075B 07                       3         .byte 7  
      00075C 43 4F 4E 54 45 58 54     4         .ascii "CONTEXT"
      000763                          5         CNTXT:
      000763 90 AE 00 16      [ 2] 1428 	LDW Y,#UCNTXT
      000767 1D 00 02         [ 2] 1429 	SUBW X,#2
      00076A FF               [ 2] 1430         LDW (X),Y
      00076B 81               [ 4] 1431         RET
                                   1432 
                                   1433 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1434 ;       VP      ( -- a )
                                   1435 ;       Point to top of variables
                                   1436 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00076C                       1437         _HEADER VPP,2,"VP"
      00076C 07 5B                    1         .word LINK 
                           00076E     2         LINK=.
      00076E 02                       3         .byte 2  
      00076F 56 50                    4         .ascii "VP"
      000771                          5         VPP:
      000771 90 AE 00 18      [ 2] 1438 	LDW Y,#UVP 
      000775 1D 00 02         [ 2] 1439 	SUBW X,#2
      000778 FF               [ 2] 1440         LDW (X),Y
      000779 81               [ 4] 1441         RET
                                   1442 
                                   1443 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1444 ;       CP    ( -- a )
                                   1445 ;       Pointer to top of FLASH 
                                   1446 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00077A                       1447         _HEADER CPP,2,"CP"
      00077A 07 6E                    1         .word LINK 
                           00077C     2         LINK=.
      00077C 02                       3         .byte 2  
      00077D 43 50                    4         .ascii "CP"
      00077F                          5         CPP:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      00077F 90 AE 00 1A      [ 2] 1448         ldw y,#UCP 
      000783 1D 00 02         [ 2] 1449         subw x,#CELLL 
      000786 FF               [ 2] 1450         ldw (x),y 
      000787 81               [ 4] 1451         ret                
                                   1452 
                                   1453 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1454 ;       LAST    ( -- a )
                                   1455 ;       Point to last name in 
                                   1456 ;       dictionary.
                                   1457 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000788                       1458         _HEADER LAST,4,"LAST"
      000788 07 7C                    1         .word LINK 
                           00078A     2         LINK=.
      00078A 04                       3         .byte 4  
      00078B 4C 41 53 54              4         .ascii "LAST"
      00078F                          5         LAST:
      00078F 90 AE 00 1C      [ 2] 1459 	LDW Y,#ULAST 
      000793 1D 00 02         [ 2] 1460 	SUBW X,#2
      000796 FF               [ 2] 1461         LDW (X),Y
      000797 81               [ 4] 1462         RET
                                   1463 
                                   1464 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1465 ; address of system variable URLAST 
                                   1466 ;       RAMLAST ( -- a )
                                   1467 ; RAM dictionary context 
                                   1468 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000798                       1469         _HEADER RAMLAST,7,"RAMLAST"
      000798 07 8A                    1         .word LINK 
                           00079A     2         LINK=.
      00079A 07                       3         .byte 7  
      00079B 52 41 4D 4C 41 53 54     4         .ascii "RAMLAST"
      0007A2                          5         RAMLAST:
      0007A2 90 AE 00 22      [ 2] 1470         ldw y,#URLAST 
      0007A6 1D 00 02         [ 2] 1471         subw x,#CELLL 
      0007A9 FF               [ 2] 1472         ldw (x),y 
      0007AA 81               [ 4] 1473         ret 
                                   1474 
                                   1475 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1476 ;       OFFSET ( -- a )
                                   1477 ;       address of system 
                                   1478 ;       variable OFFSET 
                                   1479 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007AB                       1480         _HEADER OFFSET,6,"OFFSET"
      0007AB 07 9A                    1         .word LINK 
                           0007AD     2         LINK=.
      0007AD 06                       3         .byte 6  
      0007AE 4F 46 46 53 45 54        4         .ascii "OFFSET"
      0007B4                          5         OFFSET:
      0007B4 1D 00 02         [ 2] 1481         subw x,#CELLL
      0007B7 90 AE 00 1E      [ 2] 1482         ldw y,#UOFFSET 
      0007BB FF               [ 2] 1483         ldw (x),y 
      0007BC 81               [ 4] 1484         ret 
                                   1485 
                                   1486 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1487 ; adjust jump address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                   1488 ;  adding OFFSET
                                   1489 ; ADR-ADJ ( a -- a+offset )
                                   1490 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007BD                       1491 ADRADJ: 
      0007BD CD 07 B4         [ 4] 1492         call OFFSET 
      0007C0 CD 04 E4         [ 4] 1493         call AT 
      0007C3 CC 08 3D         [ 2] 1494         jp PLUS 
                                   1495 
                                   1496 
                                   1497 ;; Common functions
                                   1498 
                                   1499 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1500 ;       ?DUP    ( w -- w w | 0 )
                                   1501 ;       Dup tos if its is not zero.
                                   1502 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007C6                       1503         _HEADER QDUP,4,"?DUP"
      0007C6 07 AD                    1         .word LINK 
                           0007C8     2         LINK=.
      0007C8 04                       3         .byte 4  
      0007C9 3F 44 55 50              4         .ascii "?DUP"
      0007CD                          5         QDUP:
      0007CD 90 93            [ 1] 1504         LDW Y,X
      0007CF 90 FE            [ 2] 1505 	LDW Y,(Y)
      0007D1 27 04            [ 1] 1506         JREQ     QDUP1
      0007D3 1D 00 02         [ 2] 1507 	SUBW X,#CELLL 
      0007D6 FF               [ 2] 1508         LDW (X),Y
      0007D7 81               [ 4] 1509 QDUP1:  RET
                                   1510 
                                   1511 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1512 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1513 ;       Rot 3rd item to top.
                                   1514 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007D8                       1515         _HEADER ROT,3,"ROT"
      0007D8 07 C8                    1         .word LINK 
                           0007DA     2         LINK=.
      0007DA 03                       3         .byte 3  
      0007DB 52 4F 54                 4         .ascii "ROT"
      0007DE                          5         ROT:
      0007DE 90 93            [ 1] 1516         ldw y,x 
      0007E0 90 FE            [ 2] 1517         ldw y,(y)
      0007E2 90 89            [ 2] 1518         pushw y 
      0007E4 90 93            [ 1] 1519         ldw y,x 
      0007E6 90 EE 04         [ 2] 1520         ldw y,(4,y)
      0007E9 FF               [ 2] 1521         ldw (x),y 
      0007EA 90 93            [ 1] 1522         ldw y,x 
      0007EC 90 EE 02         [ 2] 1523         ldw y,(2,y)
      0007EF EF 04            [ 2] 1524         ldw (4,x),y 
      0007F1 90 85            [ 2] 1525         popw y 
      0007F3 EF 02            [ 2] 1526         ldw (2,x),y
      0007F5 81               [ 4] 1527         ret 
                                   1528 
                                   1529 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1530 ;    <ROT ( n1 n2 n3 -- n3 n1 n2 )
                                   1531 ;    rotate left 3 top elements 
                                   1532 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      0007F6                       1533     _HEADER NROT,4,"<ROT"
      0007F6 07 DA                    1         .word LINK 
                           0007F8     2         LINK=.
      0007F8 04                       3         .byte 4  
      0007F9 3C 52 4F 54              4         .ascii "<ROT"
      0007FD                          5         NROT:
      0007FD 90 93            [ 1] 1534     LDW Y,X 
      0007FF 90 FE            [ 2] 1535     LDW Y,(Y)
      000801 90 89            [ 2] 1536     PUSHW Y ; n3 >R 
      000803 90 93            [ 1] 1537     LDW Y,X 
      000805 90 EE 02         [ 2] 1538     LDW Y,(2,Y) ; Y = n2 
      000808 FF               [ 2] 1539     LDW (X),Y   ; TOS = n2 
      000809 90 93            [ 1] 1540     LDW Y,X    
      00080B 90 EE 04         [ 2] 1541     LDW Y,(4,Y) ; Y = n1 
      00080E EF 02            [ 2] 1542     LDW (2,X),Y ;   = n1 
      000810 90 85            [ 2] 1543     POPW Y  ; R> Y 
      000812 EF 04            [ 2] 1544     LDW (4,X),Y ; = n3 
      000814 81               [ 4] 1545     RET 
                                   1546 
                                   1547 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1548 ;       2DROP   ( w w -- )
                                   1549 ;       Discard two items on stack.
                                   1550 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000815                       1551         _HEADER DDROP,5,"2DROP"
      000815 07 F8                    1         .word LINK 
                           000817     2         LINK=.
      000817 05                       3         .byte 5  
      000818 32 44 52 4F 50           4         .ascii "2DROP"
      00081D                          5         DDROP:
      00081D 1C 00 04         [ 2] 1552         ADDW X,#4
      000820 81               [ 4] 1553         RET
                                   1554 
                                   1555 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1556 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1557 ;       Duplicate top two items.
                                   1558 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000821                       1559         _HEADER DDUP,4,"2DUP"
      000821 08 17                    1         .word LINK 
                           000823     2         LINK=.
      000823 04                       3         .byte 4  
      000824 32 44 55 50              4         .ascii "2DUP"
      000828                          5         DDUP:
      000828 1D 00 04         [ 2] 1560         SUBW X,#4
      00082B 90 93            [ 1] 1561         LDW Y,X
      00082D 90 EE 06         [ 2] 1562         LDW Y,(6,Y)
      000830 EF 02            [ 2] 1563         LDW (2,X),Y
      000832 90 93            [ 1] 1564         LDW Y,X
      000834 90 EE 04         [ 2] 1565         LDW Y,(4,Y)
      000837 FF               [ 2] 1566         LDW (X),Y
      000838 81               [ 4] 1567         RET
                                   1568 
                                   1569 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1570 ;       +       ( w w -- sum )
                                   1571 ;       Add top two items.
                                   1572 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000839                       1573         _HEADER PLUS,1,"+"
      000839 08 23                    1         .word LINK 
                           00083B     2         LINK=.
      00083B 01                       3         .byte 1  
      00083C 2B                       4         .ascii "+"
      00083D                          5         PLUS:
      00083D 90 93            [ 1] 1574         LDW Y,X
      00083F 90 FE            [ 2] 1575         LDW Y,(Y)
      000841 90 BF 26         [ 2] 1576         LDW YTEMP,Y
      000844 1C 00 02         [ 2] 1577         ADDW X,#2
      000847 90 93            [ 1] 1578         LDW Y,X
      000849 90 FE            [ 2] 1579         LDW Y,(Y)
      00084B 72 B9 00 26      [ 2] 1580         ADDW Y,YTEMP
      00084F FF               [ 2] 1581         LDW (X),Y
      000850 81               [ 4] 1582         RET
                                   1583 
                                   1584 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1585 ;       TRUE ( -- -1 )
                                   1586 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000851                       1587         _HEADER TRUE,4,"TRUE"
      000851 08 3B                    1         .word LINK 
                           000853     2         LINK=.
      000853 04                       3         .byte 4  
      000854 54 52 55 45              4         .ascii "TRUE"
      000858                          5         TRUE:
      000858 A6 FF            [ 1] 1588         LD A,#255 
      00085A 1D 00 02         [ 2] 1589         SUBW X,#CELLL
      00085D F7               [ 1] 1590         LD (X),A 
      00085E E7 01            [ 1] 1591         LD (1,X),A 
      000860 81               [ 4] 1592         RET 
                                   1593 
                                   1594 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1595 ;       FALSE ( -- 0 )
                                   1596 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000861                       1597         _HEADER FALSE,5,"FALSE"
      000861 08 53                    1         .word LINK 
                           000863     2         LINK=.
      000863 05                       3         .byte 5  
      000864 46 41 4C 53 45           4         .ascii "FALSE"
      000869                          5         FALSE:
      000869 1D 00 02         [ 2] 1598         SUBW X,#CELLL 
      00086C 7F               [ 1] 1599         CLR (X) 
      00086D 6F 01            [ 1] 1600         CLR (1,X)
      00086F 81               [ 4] 1601         RET 
                                   1602 
                                   1603 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1604 ;       NOT     ( w -- w )
                                   1605 ;       One's complement of tos.
                                   1606 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000870                       1607         _HEADER INVER,3,"NOT"
      000870 08 63                    1         .word LINK 
                           000872     2         LINK=.
      000872 03                       3         .byte 3  
      000873 4E 4F 54                 4         .ascii "NOT"
      000876                          5         INVER:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      000876 90 93            [ 1] 1608         LDW Y,X
      000878 90 FE            [ 2] 1609         LDW Y,(Y)
      00087A 90 53            [ 2] 1610         CPLW Y
      00087C FF               [ 2] 1611         LDW (X),Y
      00087D 81               [ 4] 1612         RET
                                   1613 
                                   1614 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1615 ;       NEGATE  ( n -- -n )
                                   1616 ;       Two's complement of tos.
                                   1617 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00087E                       1618         _HEADER NEGAT,6,"NEGATE"
      00087E 08 72                    1         .word LINK 
                           000880     2         LINK=.
      000880 06                       3         .byte 6  
      000881 4E 45 47 41 54 45        4         .ascii "NEGATE"
      000887                          5         NEGAT:
      000887 90 93            [ 1] 1619         LDW Y,X
      000889 90 FE            [ 2] 1620         LDW Y,(Y)
      00088B 90 50            [ 2] 1621         NEGW Y
      00088D FF               [ 2] 1622         LDW (X),Y
      00088E 81               [ 4] 1623         RET
                                   1624 
                                   1625 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1626 ;       DNEGATE ( d -- -d )
                                   1627 ;       Two's complement of double.
                                   1628 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00088F                       1629         _HEADER DNEGA,7,"DNEGATE"
      00088F 08 80                    1         .word LINK 
                           000891     2         LINK=.
      000891 07                       3         .byte 7  
      000892 44 4E 45 47 41 54 45     4         .ascii "DNEGATE"
      000899                          5         DNEGA:
      000899 90 93            [ 1] 1630         LDW Y,X
      00089B 90 FE            [ 2] 1631 	LDW Y,(Y)
      00089D 90 53            [ 2] 1632         CPLW Y
      00089F 90 89            [ 2] 1633         PUSHW Y      ; Y >R 
      0008A1 90 93            [ 1] 1634         LDW Y,X
      0008A3 90 EE 02         [ 2] 1635         LDW Y,(2,Y)
      0008A6 90 53            [ 2] 1636         CPLW Y
      0008A8 72 A9 00 01      [ 2] 1637         ADDW Y,#1
      0008AC EF 02            [ 2] 1638         LDW (2,X),Y
      0008AE 90 85            [ 2] 1639         POPW Y       ; R> Y  
      0008B0 24 02            [ 1] 1640         JRNC DN1 
      0008B2 90 5C            [ 1] 1641         INCW Y
      0008B4 FF               [ 2] 1642 DN1:    LDW (X),Y
      0008B5 81               [ 4] 1643         RET
                                   1644 
                                   1645 
                                   1646 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1647 ;       S>D ( n -- d )
                                   1648 ; convert single integer to double 
                                   1649 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008B6                       1650         _HEADER STOD,3,"S>D"
      0008B6 08 91                    1         .word LINK 
                           0008B8     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      0008B8 03                       3         .byte 3  
      0008B9 53 3E 44                 4         .ascii "S>D"
      0008BC                          5         STOD:
      0008BC 1D 00 02         [ 2] 1651         SUBW X,#CELLL 
      0008BF 7F               [ 1] 1652         CLR (X) 
      0008C0 6F 01            [ 1] 1653         CLR (1,X) 
      0008C2 90 93            [ 1] 1654         LDW Y,X 
      0008C4 90 EE 02         [ 2] 1655         LDW Y,(2,Y)
      0008C7 2A 05            [ 1] 1656         JRPL 1$
      0008C9 90 AE FF FF      [ 2] 1657         LDW Y,#-1 
      0008CD FF               [ 2] 1658         LDW (X),Y 
      0008CE 81               [ 4] 1659 1$:     RET 
                                   1660 
                                   1661 
                                   1662 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1663 ;       -       ( n1 n2 -- n1-n2 )
                                   1664 ;       Subtraction.
                                   1665 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008CF                       1666         _HEADER SUBB,1,"-"
      0008CF 08 B8                    1         .word LINK 
                           0008D1     2         LINK=.
      0008D1 01                       3         .byte 1  
      0008D2 2D                       4         .ascii "-"
      0008D3                          5         SUBB:
      0008D3 90 93            [ 1] 1667         LDW Y,X
      0008D5 90 FE            [ 2] 1668         LDW Y,(Y) ; n2 
      0008D7 90 BF 26         [ 2] 1669         LDW YTEMP,Y 
      0008DA 1C 00 02         [ 2] 1670         ADDW X,#CELLL 
      0008DD 90 93            [ 1] 1671         LDW Y,X
      0008DF 90 FE            [ 2] 1672         LDW Y,(Y) ; n1 
      0008E1 72 B2 00 26      [ 2] 1673         SUBW Y,YTEMP ; n1-n2 
      0008E5 FF               [ 2] 1674         LDW (X),Y
      0008E6 81               [ 4] 1675         RET
                                   1676 
                                   1677 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1678 ;       ABS     ( n -- n )
                                   1679 ;       Return  absolute value of n.
                                   1680 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008E7                       1681         _HEADER ABSS,3,"ABS"
      0008E7 08 D1                    1         .word LINK 
                           0008E9     2         LINK=.
      0008E9 03                       3         .byte 3  
      0008EA 41 42 53                 4         .ascii "ABS"
      0008ED                          5         ABSS:
      0008ED 90 93            [ 1] 1682         LDW Y,X
      0008EF 90 FE            [ 2] 1683 	LDW Y,(Y)
      0008F1 2A 03            [ 1] 1684         JRPL     AB1     ;negate:
      0008F3 90 50            [ 2] 1685         NEGW     Y     ;else negate hi byte
      0008F5 FF               [ 2] 1686         LDW (X),Y
      0008F6 81               [ 4] 1687 AB1:    RET
                                   1688 
                                   1689 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1690 ;       =       ( w w -- t )
                                   1691 ;       Return true if top two are equal.
                                   1692 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      0008F7                       1693         _HEADER EQUAL,1,"="
      0008F7 08 E9                    1         .word LINK 
                           0008F9     2         LINK=.
      0008F9 01                       3         .byte 1  
      0008FA 3D                       4         .ascii "="
      0008FB                          5         EQUAL:
      0008FB A6 FF            [ 1] 1694         LD A,#0xFF  ;true
      0008FD 90 93            [ 1] 1695         LDW Y,X    
      0008FF 90 FE            [ 2] 1696         LDW Y,(Y)   ; n2 
      000901 1C 00 02         [ 2] 1697         ADDW X,#CELLL 
      000904 F3               [ 2] 1698         CPW Y,(X)   ; n1==n2
      000905 27 01            [ 1] 1699         JREQ EQ1 
      000907 4F               [ 1] 1700         CLR A 
      000908 F7               [ 1] 1701 EQ1:    LD (X),A
      000909 E7 01            [ 1] 1702         LD (1,X),A
      00090B 81               [ 4] 1703 	RET     
                                   1704 
                                   1705 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1706 ;       U<      ( u1 u2 -- f )
                                   1707 ;       Unsigned compare of top two items.
                                   1708 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00090C                       1709         _HEADER ULESS,2,"U<"
      00090C 08 F9                    1         .word LINK 
                           00090E     2         LINK=.
      00090E 02                       3         .byte 2  
      00090F 55 3C                    4         .ascii "U<"
      000911                          5         ULESS:
      000911 A6 FF            [ 1] 1710         LD A,#0xFF  ;true
      000913 90 93            [ 1] 1711         LDW Y,X    
      000915 90 EE 02         [ 2] 1712         LDW Y,(2,Y) ; u1 
      000918 F3               [ 2] 1713         CPW Y,(X)   ; cpw u1  u2 
      000919 25 01            [ 1] 1714         JRULT     ULES1
      00091B 4F               [ 1] 1715         CLR A
      00091C 1C 00 02         [ 2] 1716 ULES1:  ADDW X,#CELLL 
      00091F F7               [ 1] 1717         LD (X),A
      000920 E7 01            [ 1] 1718         LD (1,X),A
      000922 81               [ 4] 1719 	RET     
                                   1720 
                                   1721 
                                   1722 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1723 ;       <       ( n1 n2 -- t )
                                   1724 ;       Signed compare of top two items.
                                   1725 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000923                       1726         _HEADER LESS,1,"<"
      000923 09 0E                    1         .word LINK 
                           000925     2         LINK=.
      000925 01                       3         .byte 1  
      000926 3C                       4         .ascii "<"
      000927                          5         LESS:
      000927 A6 FF            [ 1] 1727         LD A,#0xFF  ;true
      000929 90 93            [ 1] 1728         LDW Y,X    
      00092B 90 EE 02         [ 2] 1729         LDW Y,(2,Y)  ; n1 
      00092E F3               [ 2] 1730         CPW Y,(X)  ; n1 < n2 ? 
      00092F 2F 01            [ 1] 1731         JRSLT     LT1
      000931 4F               [ 1] 1732         CLR A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000932 1C 00 02         [ 2] 1733 LT1:    ADDW X,#CELLL 
      000935 F7               [ 1] 1734         LD (X),A
      000936 E7 01            [ 1] 1735         LD (1,X),A
      000938 81               [ 4] 1736 	RET     
                                   1737 
                                   1738 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1739 ;   U> ( u1 u2 -- f )
                                   1740 ;   f = true if u1>u2 
                                   1741 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000939                       1742         _HEADER UGREAT,2,"U>"
      000939 09 25                    1         .word LINK 
                           00093B     2         LINK=.
      00093B 02                       3         .byte 2  
      00093C 55 3E                    4         .ascii "U>"
      00093E                          5         UGREAT:
      00093E A6 FF            [ 1] 1743         LD A,#255  
      000940 90 93            [ 1] 1744         LDW Y,X 
      000942 90 EE 02         [ 2] 1745         LDW Y,(2,Y)  ; u1 
      000945 F3               [ 2] 1746         CPW Y,(X)  ; u1 > u2 
      000946 22 01            [ 1] 1747         JRUGT UGREAT1 
      000948 4F               [ 1] 1748         CLR A   
      000949                       1749 UGREAT1:
      000949 1C 00 02         [ 2] 1750         ADDW X,#CELLL 
      00094C F7               [ 1] 1751         LD (X),A 
      00094D E7 01            [ 1] 1752         LD (1,X),A 
      00094F 81               [ 4] 1753         RET 
                                   1754 
                                   1755 
                                   1756 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1757 ;       >   (n1 n2 -- f )
                                   1758 ;  signed compare n1 n2 
                                   1759 ;  true if n1 > n2 
                                   1760 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000950                       1761         _HEADER GREAT,1,">"
      000950 09 3B                    1         .word LINK 
                           000952     2         LINK=.
      000952 01                       3         .byte 1  
      000953 3E                       4         .ascii ">"
      000954                          5         GREAT:
      000954 A6 FF            [ 1] 1762         LD A,#0xFF ;
      000956 90 93            [ 1] 1763         LDW Y,X 
      000958 90 EE 02         [ 2] 1764         LDW Y,(2,Y)  ; n1 
      00095B F3               [ 2] 1765         CPW Y,(X) ; n1 > n2 ?  
      00095C 2C 01            [ 1] 1766         JRSGT GREAT1 
      00095E 4F               [ 1] 1767         CLR  A
      00095F                       1768 GREAT1:
      00095F 1C 00 02         [ 2] 1769         ADDW X,#CELLL 
      000962 F7               [ 1] 1770         LD (X),A 
      000963 E7 01            [ 1] 1771         LD (1,X),A 
      000965 81               [ 4] 1772         RET 
                                   1773 
                                   1774 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1775 ;       MAX     ( n n -- n )
                                   1776 ;       Return greater of two top items.
                                   1777 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000966                       1778         _HEADER MAX,3,"MAX"
      000966 09 52                    1         .word LINK 
                           000968     2         LINK=.
      000968 03                       3         .byte 3  
      000969 4D 41 58                 4         .ascii "MAX"
      00096C                          5         MAX:
      00096C 90 93            [ 1] 1779         LDW Y,X    
      00096E 90 FE            [ 2] 1780         LDW Y,(Y) ; n2 
      000970 E3 02            [ 2] 1781         CPW Y,(2,X)   
      000972 2F 02            [ 1] 1782         JRSLT  MAX1
      000974 EF 02            [ 2] 1783         LDW (2,X),Y
      000976 1C 00 02         [ 2] 1784 MAX1:   ADDW X,#2
      000979 81               [ 4] 1785 	RET     
                                   1786 
                                   1787 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1788 ;       MIN     ( n n -- n )
                                   1789 ;       Return smaller of top two items.
                                   1790 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00097A                       1791         _HEADER MIN,3,"MIN"
      00097A 09 68                    1         .word LINK 
                           00097C     2         LINK=.
      00097C 03                       3         .byte 3  
      00097D 4D 49 4E                 4         .ascii "MIN"
      000980                          5         MIN:
      000980 90 93            [ 1] 1792         LDW Y,X    
      000982 90 FE            [ 2] 1793         LDW Y,(Y)  ; n2 
      000984 E3 02            [ 2] 1794         CPW Y,(2,X) 
      000986 2C 02            [ 1] 1795         JRSGT MIN1
      000988 EF 02            [ 2] 1796         LDW (2,X),Y
      00098A 1C 00 02         [ 2] 1797 MIN1:	ADDW X,#2
      00098D 81               [ 4] 1798 	RET     
                                   1799 
                                   1800 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1801 ;       WITHIN  ( u ul uh -- t )
                                   1802 ;       Return true if u is within
                                   1803 ;       range of ul and uh. ( ul <= u < uh )
                                   1804 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00098E                       1805         _HEADER WITHI,6,"WITHIN"
      00098E 09 7C                    1         .word LINK 
                           000990     2         LINK=.
      000990 06                       3         .byte 6  
      000991 57 49 54 48 49 4E        4         .ascii "WITHIN"
      000997                          5         WITHI:
      000997 CD 06 42         [ 4] 1806         CALL     OVER
      00099A CD 08 D3         [ 4] 1807         CALL     SUBB
      00099D CD 05 E3         [ 4] 1808         CALL     TOR
      0009A0 CD 08 D3         [ 4] 1809         CALL     SUBB
      0009A3 CD 05 35         [ 4] 1810         CALL     RFROM
      0009A6 CC 09 11         [ 2] 1811         JP     ULESS
                                   1812 
                                   1813 ;; Divide
                                   1814 
                                   1815 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1816 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1817 ;       Unsigned divide of a double by a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                   1818 ;       single. Return mod and quotient.
                                   1819 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1820 ; 2021-02-22
                                   1821 ; changed algorithm for Jeeek one 
                                   1822 ; ref: https://github.com/TG9541/stm8ef/pull/406        
      0009A9                       1823         _HEADER UMMOD,6,"UM/MOD"
      0009A9 09 90                    1         .word LINK 
                           0009AB     2         LINK=.
      0009AB 06                       3         .byte 6  
      0009AC 55 4D 2F 4D 4F 44        4         .ascii "UM/MOD"
      0009B2                          5         UMMOD:
      0009B2 90 93            [ 1] 1824         LDW     Y,X             ; stack pointer to Y
      0009B4 FE               [ 2] 1825         LDW     X,(X)           ; un
      0009B5 BF 26            [ 2] 1826         LDW     YTEMP,X         ; save un
      0009B7 93               [ 1] 1827         LDW     X,Y
      0009B8 5C               [ 1] 1828         INCW    X               ; drop un
      0009B9 5C               [ 1] 1829         INCW    X
      0009BA 89               [ 2] 1830         PUSHW   X               ; save stack pointer
      0009BB FE               [ 2] 1831         LDW     X,(X)           ; X=udh
      0009BC 26 0B            [ 1] 1832         JRNE    MMSM0
      0009BE 1E 01            [ 2] 1833         LDW    X,(1,SP)
      0009C0 EE 02            [ 2] 1834         LDW    X,(2,X)          ; udl 
      0009C2 90 BE 26         [ 2] 1835         LDW     Y,YTEMP         ;divisor 
      0009C5 65               [ 2] 1836         DIVW    X,Y             ; udl/un 
      0009C6 51               [ 1] 1837         EXGW    X,Y 
      0009C7 20 26            [ 2] 1838         JRA     MMSMb 
      0009C9                       1839 MMSM0:    
      0009C9 90 EE 04         [ 2] 1840         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      0009CC B3 26            [ 2] 1841         CPW     X,YTEMP
      0009CE 25 09            [ 1] 1842         JRULT   MMSM1           ; X is still on the R-stack
      0009D0 85               [ 2] 1843         POPW    X               ; restore stack pointer
      0009D1 90 5F            [ 1] 1844         CLRW    Y
      0009D3 EF 02            [ 2] 1845         LDW     (2,X),Y         ; remainder 0
      0009D5 90 5A            [ 2] 1846         DECW    Y
      0009D7 FF               [ 2] 1847         LDW     (X),Y           ; quotient max. 16 bit value
      0009D8 81               [ 4] 1848         RET
      0009D9                       1849 MMSM1:
      0009D9 A6 10            [ 1] 1850         LD      A,#16           ; loop count
      0009DB 90 58            [ 2] 1851         SLLW    Y               ; udl shift udl into udh
      0009DD                       1852 MMSM3:
      0009DD 59               [ 2] 1853         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      0009DE 25 04            [ 1] 1854         JRC     MMSMa           ; if carry out of rotate
      0009E0 B3 26            [ 2] 1855         CPW     X,YTEMP         ; compare udh to un
      0009E2 25 05            [ 1] 1856         JRULT   MMSM4           ; can't subtract
      0009E4                       1857 MMSMa:
      0009E4 72 B0 00 26      [ 2] 1858         SUBW    X,YTEMP         ; can subtract
      0009E8 98               [ 1] 1859         RCF
      0009E9                       1860 MMSM4:
      0009E9 8C               [ 1] 1861         CCF                     ; quotient bit
      0009EA 90 59            [ 2] 1862         RLCW    Y               ; rotate into quotient, rotate out udl
      0009EC 4A               [ 1] 1863         DEC     A               ; repeat
      0009ED 26 EE            [ 1] 1864         JRNE    MMSM3           ; if A == 0
      0009EF                       1865 MMSMb:
      0009EF BF 26            [ 2] 1866         LDW     YTEMP,X         ; done, save remainder
      0009F1 85               [ 2] 1867         POPW    X               ; restore stack pointer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      0009F2 FF               [ 2] 1868         LDW     (X),Y           ; save quotient
      0009F3 90 BE 26         [ 2] 1869         LDW     Y,YTEMP         ; remainder onto stack
      0009F6 EF 02            [ 2] 1870         LDW     (2,X),Y
      0009F8 81               [ 4] 1871         RET
                                   1872 
                                   1873 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1874 ;   U/MOD ( u1 u2 -- ur uq )
                                   1875 ;   unsigned divide u1/u2 
                                   1876 ;   return remainder and quotient 
                                   1877 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0009F9                       1878         _HEADER USLMOD,5,"U/MOD"
      0009F9 09 AB                    1         .word LINK 
                           0009FB     2         LINK=.
      0009FB 05                       3         .byte 5  
      0009FC 55 2F 4D 4F 44           4         .ascii "U/MOD"
      000A01                          5         USLMOD:
      000A01 90 93            [ 1] 1879         LDW Y,X 
      000A03 90 FE            [ 2] 1880         LDW Y,(Y)  ; dividend 
      000A05 89               [ 2] 1881         PUSHW X    ; DP >R 
      000A06 EE 02            [ 2] 1882         LDW X,(2,X) ; divisor 
      000A08 65               [ 2] 1883         DIVW X,Y 
      000A09 89               [ 2] 1884         PUSHW X     ; quotient 
      000A0A 1E 03            [ 2] 1885         LDW X,(3,SP) ; DP 
      000A0C EF 02            [ 2] 1886         LDW (2,X),Y ; remainder 
      000A0E 16 01            [ 2] 1887         LDW Y,(1,SP) ; quotient 
      000A10 FF               [ 2] 1888         LDW (X),Y 
      000A11 5B 04            [ 2] 1889         ADDW SP,#2*CELLL ; drop quotient and DP from rstack 
      000A13 81               [ 4] 1890         RET 
                                   1891 
                                   1892 
                                   1893 
                                   1894 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                   1895 ;       M/MOD   ( d n -- r q )
                                   1896 ;       Signed floored divide of double by
                                   1897 ;       single. Return mod and quotient.
                                   1898 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A14                       1899         _HEADER MSMOD,5,"M/MOD"
      000A14 09 FB                    1         .word LINK 
                           000A16     2         LINK=.
      000A16 05                       3         .byte 5  
      000A17 4D 2F 4D 4F 44           4         .ascii "M/MOD"
      000A1C                          5         MSMOD:
      000A1C CD 06 1A         [ 4] 1900         CALL	DUPP
      000A1F CD 06 51         [ 4] 1901         CALL	ZLESS
      000A22 CD 06 1A         [ 4] 1902         CALL	DUPP
      000A25 CD 05 E3         [ 4] 1903         CALL	TOR
      000A28 CD 04 99         [ 4] 1904         CALL	QBRAN
      000A2B 0A 39                 1905         .word	MMOD1
      000A2D CD 08 87         [ 4] 1906         CALL	NEGAT
      000A30 CD 05 E3         [ 4] 1907         CALL	TOR
      000A33 CD 08 99         [ 4] 1908         CALL	DNEGA
      000A36 CD 05 35         [ 4] 1909         CALL	RFROM
      000A39 CD 05 E3         [ 4] 1910 MMOD1:	CALL	TOR
      000A3C CD 06 1A         [ 4] 1911         CALL	DUPP
      000A3F CD 06 51         [ 4] 1912         CALL	ZLESS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000A42 CD 04 99         [ 4] 1913         CALL	QBRAN
      000A45 0A 4D                 1914         .word	MMOD2
      000A47 CD 05 46         [ 4] 1915         CALL	RAT
      000A4A CD 08 3D         [ 4] 1916         CALL	PLUS
      000A4D CD 05 35         [ 4] 1917 MMOD2:	CALL	RFROM
      000A50 CD 09 B2         [ 4] 1918         CALL	UMMOD
      000A53 CD 05 35         [ 4] 1919         CALL	RFROM
      000A56 CD 04 99         [ 4] 1920         CALL	QBRAN
      000A59 0A 64                 1921         .word	MMOD3
      000A5B CD 06 2A         [ 4] 1922         CALL	SWAPP
      000A5E CD 08 87         [ 4] 1923         CALL	NEGAT
      000A61 CC 06 2A         [ 2] 1924         JP	SWAPP
      000A64 81               [ 4] 1925 MMOD3:	RET
                                   1926 
                                   1927 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1928 ;       /MOD    ( n1 n2 -- r q )
                                   1929 ;       Signed divide n1/n2. 
                                   1930 ;       Return mod and quotient.
                                   1931 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A65                       1932         _HEADER SLMOD,4,"/MOD"
      000A65 0A 16                    1         .word LINK 
                           000A67     2         LINK=.
      000A67 04                       3         .byte 4  
      000A68 2F 4D 4F 44              4         .ascii "/MOD"
      000A6C                          5         SLMOD:
      000A6C F6               [ 1] 1933         LD A,(X)
      000A6D 88               [ 1] 1934         PUSH A   ; n2 sign 
      000A6E E6 02            [ 1] 1935         LD A,(2,X)
      000A70 88               [ 1] 1936         PUSH A    ; n1 sign 
      000A71 CD 08 ED         [ 4] 1937         CALL ABSS 
      000A74 CD 05 E3         [ 4] 1938         CALL TOR  ; 
      000A77 CD 08 ED         [ 4] 1939         CALL ABSS 
      000A7A CD 05 46         [ 4] 1940         CALL RAT   
      000A7D CD 0A 01         [ 4] 1941         CALL USLMOD 
      000A80 7B 03            [ 1] 1942         LD A,(3,SP)
      000A82 1A 04            [ 1] 1943         OR A,(4,SP)
      000A84 2A 30            [ 1] 1944         JRPL SLMOD8 ; both positive nothing to change 
      000A86 7B 03            [ 1] 1945         LD A,(3,SP)
      000A88 18 04            [ 1] 1946         XOR A,(4,SP)
      000A8A 2A 1D            [ 1] 1947         JRPL SLMOD1
                                   1948 ; dividend and divisor are opposite sign          
      000A8C CD 08 87         [ 4] 1949         CALL NEGAT ; negative quotient
      000A8F CD 06 42         [ 4] 1950         CALL OVER 
      000A92 CD 06 63         [ 4] 1951         CALL ZEQUAL 
      000A95                       1952         _TBRAN SLMOD8 
      000A95 CD 04 A7         [ 4]    1     CALL TBRAN 
      000A98 0A B6                    2     .word SLMOD8 
      000A9A CD 0B B0         [ 4] 1953         CALL ONEM   ; add one to quotient 
      000A9D CD 05 46         [ 4] 1954         CALL RAT 
      000AA0 CD 07 DE         [ 4] 1955         CALL ROT 
      000AA3 CD 08 D3         [ 4] 1956         CALL SUBB  ; corrected_remainder=divisor-remainder 
      000AA6 CD 06 2A         [ 4] 1957         CALL SWAPP
      000AA9                       1958 SLMOD1:
      000AA9 7B 04            [ 1] 1959         LD A,(4,SP) ; divisor sign 
      000AAB 2A 09            [ 1] 1960         JRPL SLMOD8 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000AAD CD 05 E3         [ 4] 1961         CALL TOR 
      000AB0 CD 08 87         [ 4] 1962         CALL NEGAT ; if divisor negative negate remainder 
      000AB3 CD 05 35         [ 4] 1963         CALL RFROM 
      000AB6                       1964 SLMOD8: 
      000AB6 5B 04            [ 2] 1965         ADDW SP,#4 
      000AB8 81               [ 4] 1966         RET 
                                   1967 
                                   1968 
                                   1969 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1970 ;       MOD     ( n n -- r )
                                   1971 ;       Signed divide. Return mod only.
                                   1972 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AB9                       1973         _HEADER MODD,3,"MOD"
      000AB9 0A 67                    1         .word LINK 
                           000ABB     2         LINK=.
      000ABB 03                       3         .byte 3  
      000ABC 4D 4F 44                 4         .ascii "MOD"
      000ABF                          5         MODD:
      000ABF CD 0A 6C         [ 4] 1974 	CALL	SLMOD
      000AC2 CC 06 10         [ 2] 1975 	JP	DROP
                                   1976 
                                   1977 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1978 ;       /       ( n n -- q )
                                   1979 ;       Signed divide. Return quotient only.
                                   1980 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AC5                       1981         _HEADER SLASH,1,"/"
      000AC5 0A BB                    1         .word LINK 
                           000AC7     2         LINK=.
      000AC7 01                       3         .byte 1  
      000AC8 2F                       4         .ascii "/"
      000AC9                          5         SLASH:
      000AC9 CD 0A 6C         [ 4] 1982         CALL	SLMOD
      000ACC CD 06 2A         [ 4] 1983         CALL	SWAPP
      000ACF CC 06 10         [ 2] 1984         JP	DROP
                                   1985 
                                   1986 ;; Multiply
                                   1987 
                                   1988 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1989 ;       UM*     ( u1 u2 -- ud )
                                   1990 ;       Unsigned multiply. Return 
                                   1991 ;       double product.
                                   1992 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AD2                       1993         _HEADER UMSTA,3,"UM*"
      000AD2 0A C7                    1         .word LINK 
                           000AD4     2         LINK=.
      000AD4 03                       3         .byte 3  
      000AD5 55 4D 2A                 4         .ascii "UM*"
      000AD8                          5         UMSTA:
                                   1994 ; stack have 4 bytes u1=a:b u2=c:d
                                   1995         ;; bytes offset on data stack 
                           000002  1996         da=2 
                           000003  1997         db=3 
                           000000  1998         dc=0 
                           000001  1999         dd=1 
                                   2000         ;;;;;; local variables ;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



                                   2001         ;; product bytes offset on return stack 
                           000001  2002         UD1=1  ; ud bits 31..24
                           000002  2003         UD2=2  ; ud bits 23..16
                           000003  2004         UD3=3  ; ud bits 15..8 
                           000004  2005         UD4=4  ; ud bits 7..0 
                                   2006         ;; local variable for product set to zero   
      000AD8 90 5F            [ 1] 2007         clrw y 
      000ADA 90 89            [ 2] 2008         pushw y  ; bits 15..0
      000ADC 90 89            [ 2] 2009         pushw y  ; bits 31..16 
      000ADE E6 03            [ 1] 2010         ld a,(db,x) ; b 
      000AE0 90 97            [ 1] 2011         ld yl,a 
      000AE2 E6 01            [ 1] 2012         ld a,(dd,x)   ; d
      000AE4 90 42            [ 4] 2013         mul y,a    ; b*d  
      000AE6 17 03            [ 2] 2014         ldw (UD3,sp),y ; lowest weight product 
      000AE8 E6 03            [ 1] 2015         ld a,(db,x)
      000AEA 90 97            [ 1] 2016         ld yl,a 
      000AEC E6 00            [ 1] 2017         ld a,(dc,x)
      000AEE 90 42            [ 4] 2018         mul y,a  ; b*c 
                                   2019         ;;; do the partial sum 
      000AF0 72 F9 02         [ 2] 2020         addw y,(UD2,sp)
      000AF3 4F               [ 1] 2021         clr a 
      000AF4 49               [ 1] 2022         rlc a
      000AF5 6B 01            [ 1] 2023         ld (UD1,sp),a 
      000AF7 17 02            [ 2] 2024         ldw (UD2,sp),y 
      000AF9 E6 02            [ 1] 2025         ld a,(da,x)
      000AFB 90 97            [ 1] 2026         ld yl,a 
      000AFD E6 01            [ 1] 2027         ld a,(dd,x)
      000AFF 90 42            [ 4] 2028         mul y,a   ; a*d 
                                   2029         ;; do partial sum 
      000B01 72 F9 02         [ 2] 2030         addw y,(UD2,sp)
      000B04 4F               [ 1] 2031         clr a 
      000B05 19 01            [ 1] 2032         adc a,(UD1,sp)
      000B07 6B 01            [ 1] 2033         ld (UD1,sp),a  
      000B09 17 02            [ 2] 2034         ldw (UD2,sp),y 
      000B0B E6 02            [ 1] 2035         ld a,(da,x)
      000B0D 90 97            [ 1] 2036         ld yl,a 
      000B0F E6 00            [ 1] 2037         ld a,(dc,x)
      000B11 90 42            [ 4] 2038         mul y,a  ;  a*c highest weight product 
                                   2039         ;;; do partial sum 
      000B13 72 F9 01         [ 2] 2040         addw y,(UD1,sp)
      000B16 FF               [ 2] 2041         ldw (x),y  ; udh 
      000B17 16 03            [ 2] 2042         ldw y,(UD3,sp)
      000B19 EF 02            [ 2] 2043         ldw (2,x),y  ; udl  
      000B1B 5B 04            [ 2] 2044         addw sp,#4 ; drop local variable 
      000B1D 81               [ 4] 2045         ret  
                                   2046 
                                   2047 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2048 ;       *       ( n n -- n )
                                   2049 ;       Signed multiply. Return 
                                   2050 ;       single product.
                                   2051 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B1E                       2052         _HEADER STAR,1,"*"
      000B1E 0A D4                    1         .word LINK 
                           000B20     2         LINK=.
      000B20 01                       3         .byte 1  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000B21 2A                       4         .ascii "*"
      000B22                          5         STAR:
      000B22 CD 0A D8         [ 4] 2053 	CALL	UMSTA
      000B25 CC 06 10         [ 2] 2054 	JP	DROP
                                   2055 
                                   2056 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2057 ;       M*      ( n n -- d )
                                   2058 ;       Signed multiply. Return 
                                   2059 ;       double product.
                                   2060 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B28                       2061         _HEADER MSTAR,2,"M*"
      000B28 0B 20                    1         .word LINK 
                           000B2A     2         LINK=.
      000B2A 02                       3         .byte 2  
      000B2B 4D 2A                    4         .ascii "M*"
      000B2D                          5         MSTAR:
      000B2D CD 08 28         [ 4] 2062         CALL	DDUP
      000B30 CD 06 A0         [ 4] 2063         CALL	XORR
      000B33 CD 06 51         [ 4] 2064         CALL	ZLESS
      000B36 CD 05 E3         [ 4] 2065         CALL	TOR
      000B39 CD 08 ED         [ 4] 2066         CALL	ABSS
      000B3C CD 06 2A         [ 4] 2067         CALL	SWAPP
      000B3F CD 08 ED         [ 4] 2068         CALL	ABSS
      000B42 CD 0A D8         [ 4] 2069         CALL	UMSTA
      000B45 CD 05 35         [ 4] 2070         CALL	RFROM
      000B48 CD 04 99         [ 4] 2071         CALL	QBRAN
      000B4B 0B 50                 2072         .word	MSTA1
      000B4D CC 08 99         [ 2] 2073         JP	DNEGA
      000B50 81               [ 4] 2074 MSTA1:	RET
                                   2075 
                                   2076 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2077 ;       */MOD   ( n1 n2 n3 -- r q )
                                   2078 ;       Multiply n1 and n2, then divide
                                   2079 ;       by n3. Return mod and quotient.
                                   2080 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B51                       2081         _HEADER SSMOD,5,"*/MOD"
      000B51 0B 2A                    1         .word LINK 
                           000B53     2         LINK=.
      000B53 05                       3         .byte 5  
      000B54 2A 2F 4D 4F 44           4         .ascii "*/MOD"
      000B59                          5         SSMOD:
      000B59 CD 05 E3         [ 4] 2082         CALL     TOR
      000B5C CD 0B 2D         [ 4] 2083         CALL     MSTAR
      000B5F CD 05 35         [ 4] 2084         CALL     RFROM
      000B62 CC 0A 1C         [ 2] 2085         JP     MSMOD
                                   2086 
                                   2087 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2088 ;       */      ( n1 n2 n3 -- q )
                                   2089 ;       Multiply n1 by n2, then divide
                                   2090 ;       by n3. Return quotient only.
                                   2091 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B65                       2092         _HEADER STASL,2,"*/"
      000B65 0B 53                    1         .word LINK 
                           000B67     2         LINK=.
      000B67 02                       3         .byte 2  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000B68 2A 2F                    4         .ascii "*/"
      000B6A                          5         STASL:
      000B6A CD 0B 59         [ 4] 2093         CALL	SSMOD
      000B6D CD 06 2A         [ 4] 2094         CALL	SWAPP
      000B70 CC 06 10         [ 2] 2095         JP	DROP
                                   2096 
                                   2097 ;; Miscellaneous
                                   2098 
                                   2099 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2100 ;       2+   ( a -- a )
                                   2101 ;       Add cell size in byte to address.
                                   2102 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B73                       2103         _HEADER CELLP,2,"2+"
      000B73 0B 67                    1         .word LINK 
                           000B75     2         LINK=.
      000B75 02                       3         .byte 2  
      000B76 32 2B                    4         .ascii "2+"
      000B78                          5         CELLP:
      000B78 90 93            [ 1] 2104         LDW Y,X
      000B7A 90 FE            [ 2] 2105 	LDW Y,(Y)
      000B7C 72 A9 00 02      [ 2] 2106         ADDW Y,#CELLL 
      000B80 FF               [ 2] 2107         LDW (X),Y
      000B81 81               [ 4] 2108         RET
                                   2109 
                                   2110 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2111 ;       2-   ( a -- a )
                                   2112 ;       Subtract 2 from address.
                                   2113 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B82                       2114         _HEADER CELLM,2,"2-"
      000B82 0B 75                    1         .word LINK 
                           000B84     2         LINK=.
      000B84 02                       3         .byte 2  
      000B85 32 2D                    4         .ascii "2-"
      000B87                          5         CELLM:
      000B87 90 93            [ 1] 2115         LDW Y,X
      000B89 90 FE            [ 2] 2116 	LDW Y,(Y)
      000B8B 72 A2 00 02      [ 2] 2117         SUBW Y,#CELLL
      000B8F FF               [ 2] 2118         LDW (X),Y
      000B90 81               [ 4] 2119         RET
                                   2120 
                                   2121 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2122 ;       2*   ( n -- n )
                                   2123 ;       Multiply tos by 2.
                                   2124 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B91                       2125         _HEADER CELLS,2,"2*"
      000B91 0B 84                    1         .word LINK 
                           000B93     2         LINK=.
      000B93 02                       3         .byte 2  
      000B94 32 2A                    4         .ascii "2*"
      000B96                          5         CELLS:
      000B96 90 93            [ 1] 2126         LDW Y,X
      000B98 90 FE            [ 2] 2127 	LDW Y,(Y)
      000B9A 90 58            [ 2] 2128         SLAW Y
      000B9C FF               [ 2] 2129         LDW (X),Y
      000B9D 81               [ 4] 2130         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                   2131 
                                   2132 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2133 ;       1+      ( a -- a )
                                   2134 ;       Add cell size in byte 
                                   2135 ;       to address.
                                   2136 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B9E                       2137         _HEADER ONEP,2,"1+"
      000B9E 0B 93                    1         .word LINK 
                           000BA0     2         LINK=.
      000BA0 02                       3         .byte 2  
      000BA1 31 2B                    4         .ascii "1+"
      000BA3                          5         ONEP:
      000BA3 90 93            [ 1] 2138         LDW Y,X
      000BA5 90 FE            [ 2] 2139 	LDW Y,(Y)
      000BA7 90 5C            [ 1] 2140         INCW Y
      000BA9 FF               [ 2] 2141         LDW (X),Y
      000BAA 81               [ 4] 2142         RET
                                   2143 
                                   2144 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2145 ;       1-      ( a -- a )
                                   2146 ;       Subtract 2 from address.
                                   2147 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BAB                       2148         _HEADER ONEM,2,"1-"
      000BAB 0B A0                    1         .word LINK 
                           000BAD     2         LINK=.
      000BAD 02                       3         .byte 2  
      000BAE 31 2D                    4         .ascii "1-"
      000BB0                          5         ONEM:
      000BB0 90 93            [ 1] 2149         LDW Y,X
      000BB2 90 FE            [ 2] 2150 	LDW Y,(Y)
      000BB4 90 5A            [ 2] 2151         DECW Y
      000BB6 FF               [ 2] 2152         LDW (X),Y
      000BB7 81               [ 4] 2153         RET
                                   2154 
                                   2155 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2156 ;  shift left n times 
                                   2157 ; LSHIFT ( n1 n2 -- n1<<n2 )
                                   2158 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BB8                       2159         _HEADER LSHIFT,6,"LSHIFT"
      000BB8 0B AD                    1         .word LINK 
                           000BBA     2         LINK=.
      000BBA 06                       3         .byte 6  
      000BBB 4C 53 48 49 46 54        4         .ascii "LSHIFT"
      000BC1                          5         LSHIFT:
      000BC1 E6 01            [ 1] 2160         ld a,(1,x)
      000BC3 1C 00 02         [ 2] 2161         addw x,#CELLL 
      000BC6 90 93            [ 1] 2162         ldw y,x 
      000BC8 90 FE            [ 2] 2163         ldw y,(y)
      000BCA                       2164 LSHIFT1:
      000BCA 4D               [ 1] 2165         tnz a 
      000BCB 27 05            [ 1] 2166         jreq LSHIFT4 
      000BCD 90 58            [ 2] 2167         sllw y 
      000BCF 4A               [ 1] 2168         dec a 
      000BD0 20 F8            [ 2] 2169         jra LSHIFT1 
      000BD2                       2170 LSHIFT4:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000BD2 FF               [ 2] 2171         ldw (x),y 
      000BD3 81               [ 4] 2172         ret 
                                   2173 
                                   2174 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2175 ; shift right n times                 
                                   2176 ; RSHIFT (n1 n2 -- n1>>n2 )
                                   2177 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BD4                       2178         _HEADER RSHIFT,6,"RSHIFT"
      000BD4 0B BA                    1         .word LINK 
                           000BD6     2         LINK=.
      000BD6 06                       3         .byte 6  
      000BD7 52 53 48 49 46 54        4         .ascii "RSHIFT"
      000BDD                          5         RSHIFT:
      000BDD E6 01            [ 1] 2179         ld a,(1,x)
      000BDF 1C 00 02         [ 2] 2180         addw x,#CELLL 
      000BE2 90 93            [ 1] 2181         ldw y,x 
      000BE4 90 FE            [ 2] 2182         ldw y,(y)
      000BE6                       2183 RSHIFT1:
      000BE6 4D               [ 1] 2184         tnz a 
      000BE7 27 05            [ 1] 2185         jreq RSHIFT4 
      000BE9 90 54            [ 2] 2186         srlw y 
      000BEB 4A               [ 1] 2187         dec a 
      000BEC 20 F8            [ 2] 2188         jra RSHIFT1 
      000BEE                       2189 RSHIFT4:
      000BEE FF               [ 2] 2190         ldw (x),y 
      000BEF 81               [ 4] 2191         ret 
                                   2192 
                                   2193 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2194 ;       2/      ( n -- n )
                                   2195 ;       divide  tos by 2.
                                   2196 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BF0                       2197         _HEADER TWOSL,2,"2/"
      000BF0 0B D6                    1         .word LINK 
                           000BF2     2         LINK=.
      000BF2 02                       3         .byte 2  
      000BF3 32 2F                    4         .ascii "2/"
      000BF5                          5         TWOSL:
      000BF5 90 93            [ 1] 2198         LDW Y,X
      000BF7 90 FE            [ 2] 2199 	LDW Y,(Y)
      000BF9 90 57            [ 2] 2200         SRAW Y
      000BFB FF               [ 2] 2201         LDW (X),Y
      000BFC 81               [ 4] 2202         RET
                                   2203 
                                   2204 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2205 ;       BL      ( -- 32 )
                                   2206 ;       Return 32,  blank character.
                                   2207 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BFD                       2208         _HEADER BLANK,2,"BL"
      000BFD 0B F2                    1         .word LINK 
                           000BFF     2         LINK=.
      000BFF 02                       3         .byte 2  
      000C00 42 4C                    4         .ascii "BL"
      000C02                          5         BLANK:
      000C02 1D 00 02         [ 2] 2209         SUBW X,#2
      000C05 90 AE 00 20      [ 2] 2210 	LDW Y,#32
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000C09 FF               [ 2] 2211         LDW (X),Y
      000C0A 81               [ 4] 2212         RET
                                   2213 
                                   2214 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2215 ;         0     ( -- 0)
                                   2216 ;         Return 0.
                                   2217 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C0B                       2218         _HEADER ZERO,1,"0"
      000C0B 0B FF                    1         .word LINK 
                           000C0D     2         LINK=.
      000C0D 01                       3         .byte 1  
      000C0E 30                       4         .ascii "0"
      000C0F                          5         ZERO:
      000C0F 1D 00 02         [ 2] 2219         SUBW X,#2
      000C12 90 5F            [ 1] 2220 	CLRW Y
      000C14 FF               [ 2] 2221         LDW (X),Y
      000C15 81               [ 4] 2222         RET
                                   2223 
                                   2224 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2225 ;         1     ( -- 1)
                                   2226 ;         Return 1.
                                   2227 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C16                       2228         _HEADER ONE,1,"1"
      000C16 0C 0D                    1         .word LINK 
                           000C18     2         LINK=.
      000C18 01                       3         .byte 1  
      000C19 31                       4         .ascii "1"
      000C1A                          5         ONE:
      000C1A 1D 00 02         [ 2] 2229         SUBW X,#2
      000C1D 90 AE 00 01      [ 2] 2230 	LDW Y,#1
      000C21 FF               [ 2] 2231         LDW (X),Y
      000C22 81               [ 4] 2232         RET
                                   2233 
                                   2234 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2235 ;         -1    ( -- -1)
                                   2236 ;   Return -1
                                   2237 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C23                       2238         _HEADER MONE,2,"-1"
      000C23 0C 18                    1         .word LINK 
                           000C25     2         LINK=.
      000C25 02                       3         .byte 2  
      000C26 2D 31                    4         .ascii "-1"
      000C28                          5         MONE:
      000C28 1D 00 02         [ 2] 2239         SUBW X,#2
      000C2B 90 AE FF FF      [ 2] 2240 	LDW Y,#0xFFFF
      000C2F FF               [ 2] 2241         LDW (X),Y
      000C30 81               [ 4] 2242         RET
                                   2243 
                                   2244 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2245 ;       >CHAR   ( c -- c )
                                   2246 ;       Filter non-printing characters.
                                   2247 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C31                       2248         _HEADER TCHAR,5,">CHAR"
      000C31 0C 25                    1         .word LINK 
                           000C33     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000C33 05                       3         .byte 5  
      000C34 3E 43 48 41 52           4         .ascii ">CHAR"
      000C39                          5         TCHAR:
      000C39 E6 01            [ 1] 2249         ld a,(1,x)
      000C3B A1 20            [ 1] 2250         cp a,#32  
      000C3D 2B 05            [ 1] 2251         jrmi 1$ 
      000C3F A1 7F            [ 1] 2252         cp a,#127 
      000C41 2A 01            [ 1] 2253         jrpl 1$ 
      000C43 81               [ 4] 2254         ret 
      000C44 A6 5F            [ 1] 2255 1$:     ld a,#'_ 
      000C46 E7 01            [ 1] 2256         ld (1,x),a 
      000C48 81               [ 4] 2257         ret 
                                   2258 
                                   2259 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2260 ;       DEPTH   ( -- n )
                                   2261 ;       Return  depth of  data stack.
                                   2262 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C49                       2263         _HEADER DEPTH,5,"DEPTH"
      000C49 0C 33                    1         .word LINK 
                           000C4B     2         LINK=.
      000C4B 05                       3         .byte 5  
      000C4C 44 45 50 54 48           4         .ascii "DEPTH"
      000C51                          5         DEPTH:
      000C51 90 BE 2C         [ 2] 2264         LDW Y,SP0    ;save data stack ptr
      000C54 BF 24            [ 2] 2265 	LDW XTEMP,X
      000C56 72 B2 00 24      [ 2] 2266         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000C5A 90 57            [ 2] 2267         SRAW Y    ;Y = #stack items
      000C5C 1D 00 02         [ 2] 2268 	SUBW X,#2
      000C5F FF               [ 2] 2269         LDW (X),Y     ; if neg, underflow
      000C60 81               [ 4] 2270         RET
                                   2271 
                                   2272 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2273 ;       PICK    ( ... +n -- ... w )
                                   2274 ;       Copy  nth stack item to tos.
                                   2275 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C61                       2276         _HEADER PICK,4,"PICK"
      000C61 0C 4B                    1         .word LINK 
                           000C63     2         LINK=.
      000C63 04                       3         .byte 4  
      000C64 50 49 43 4B              4         .ascii "PICK"
      000C68                          5         PICK:
      000C68 90 93            [ 1] 2277         LDW Y,X   ;D = n1
      000C6A 90 FE            [ 2] 2278         LDW Y,(Y)
                                   2279 ; modified for standard compliance          
                                   2280 ; 0 PICK must be equivalent to DUP 
      000C6C 90 5C            [ 1] 2281         INCW Y 
      000C6E 90 58            [ 2] 2282         SLAW Y
      000C70 BF 24            [ 2] 2283         LDW XTEMP,X
      000C72 72 B9 00 24      [ 2] 2284         ADDW Y,XTEMP
      000C76 90 FE            [ 2] 2285         LDW Y,(Y)
      000C78 FF               [ 2] 2286         LDW (X),Y
      000C79 81               [ 4] 2287         RET
                                   2288 
                                   2289 ;; Memory access
                                   2290 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                                   2291 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2292 ;       +!      ( n a -- )
                                   2293 ;       Add n to  contents at 
                                   2294 ;       address a.
                                   2295 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C7A                       2296         _HEADER PSTOR,2,"+!"
      000C7A 0C 63                    1         .word LINK 
                           000C7C     2         LINK=.
      000C7C 02                       3         .byte 2  
      000C7D 2B 21                    4         .ascii "+!"
      000C7F                          5         PSTOR:
      000C7F 89               [ 2] 2297         PUSHW X   ; R: DP 
      000C80 90 93            [ 1] 2298         LDW Y,X 
      000C82 FE               [ 2] 2299         LDW X,(X) ; a 
      000C83 90 EE 02         [ 2] 2300         LDW Y,(2,Y)  ; n 
      000C86 90 89            [ 2] 2301         PUSHW Y      ; R: DP n 
      000C88 90 93            [ 1] 2302         LDW Y,X 
      000C8A 90 FE            [ 2] 2303         LDW Y,(Y)
      000C8C 72 F9 01         [ 2] 2304         ADDW Y,(1,SP) ; *a + n 
      000C8F FF               [ 2] 2305         LDW (X),Y 
      000C90 1E 03            [ 2] 2306         LDW X,(3,SP) ; DP
      000C92 1C 00 04         [ 2] 2307         ADDW X,#2*CELLL  ; ( n a -- )  
      000C95 5B 04            [ 2] 2308         ADDW SP,#2*CELLL ; R: DP n -- 
      000C97 81               [ 4] 2309         RET 
                                   2310                 
                                   2311 
                                   2312 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2313 ;       2!      ( d a -- )
                                   2314 ;       Store  double integer 
                                   2315 ;       to address a.
                                   2316 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C98                       2317         _HEADER DSTOR,2,"2!"
      000C98 0C 7C                    1         .word LINK 
                           000C9A     2         LINK=.
      000C9A 02                       3         .byte 2  
      000C9B 32 21                    4         .ascii "2!"
      000C9D                          5         DSTOR:
      000C9D 90 93            [ 1] 2318         LDW Y,X 
      000C9F 89               [ 2] 2319         PUSHW X 
      000CA0 FE               [ 2] 2320         LDW X,(X) ; a 
      000CA1 90 EE 02         [ 2] 2321         LDW Y,(2,Y) ; dhi 
      000CA4 FF               [ 2] 2322         LDW (X),Y 
      000CA5 16 01            [ 2] 2323         LDW Y,(1,SP)  
      000CA7 90 EE 04         [ 2] 2324         LDW Y,(4,Y) ; dlo 
      000CAA EF 02            [ 2] 2325         LDW (2,X),Y  
      000CAC 85               [ 2] 2326         POPW X 
      000CAD 1C 00 06         [ 2] 2327         ADDW X,#3*CELLL 
      000CB0 81               [ 4] 2328         RET 
                                   2329 
                                   2330 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2331 ;       2@      ( a -- d )
                                   2332 ;       Fetch double integer 
                                   2333 ;       from address a.
                                   2334 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CB1                       2335         _HEADER DAT,2,"2@"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000CB1 0C 9A                    1         .word LINK 
                           000CB3     2         LINK=.
      000CB3 02                       3         .byte 2  
      000CB4 32 40                    4         .ascii "2@"
      000CB6                          5         DAT:
      000CB6 90 93            [ 1] 2336         ldw y,x 
      000CB8 1D 00 02         [ 2] 2337         subw x,#CELLL 
      000CBB 90 FE            [ 2] 2338         ldw y,(y) ;address 
      000CBD 90 89            [ 2] 2339         pushw y  
      000CBF 90 FE            [ 2] 2340         ldw y,(y) ; dhi 
      000CC1 FF               [ 2] 2341         ldw (x),y 
      000CC2 90 85            [ 2] 2342         popw y 
      000CC4 90 EE 02         [ 2] 2343         ldw y,(2,y) ; dlo 
      000CC7 EF 02            [ 2] 2344         ldw (2,x),y 
      000CC9 81               [ 4] 2345         ret 
                                   2346 
                                   2347 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2348 ;       COUNT   ( b -- b +n )
                                   2349 ;       Return count byte of a string
                                   2350 ;       and add 1 to byte address.
                                   2351 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CCA                       2352         _HEADER COUNT,5,"COUNT"
      000CCA 0C B3                    1         .word LINK 
                           000CCC     2         LINK=.
      000CCC 05                       3         .byte 5  
      000CCD 43 4F 55 4E 54           4         .ascii "COUNT"
      000CD2                          5         COUNT:
      000CD2 90 93            [ 1] 2353         ldw y,x 
      000CD4 90 FE            [ 2] 2354         ldw y,(y) ; address 
      000CD6 90 F6            [ 1] 2355         ld a,(y)  ; count 
      000CD8 90 5C            [ 1] 2356         incw y 
      000CDA FF               [ 2] 2357         ldw (x),y 
      000CDB 1D 00 02         [ 2] 2358         subw x,#CELLL 
      000CDE E7 01            [ 1] 2359         ld (1,x),a 
      000CE0 7F               [ 1] 2360         clr (x)
      000CE1 81               [ 4] 2361         ret 
                                   2362 
                                   2363 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2364 ;       HERE    ( -- a )
                                   2365 ;       Return  top of  variables
                                   2366 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CE2                       2367         _HEADER HERE,4,"HERE"
      000CE2 0C CC                    1         .word LINK 
                           000CE4     2         LINK=.
      000CE4 04                       3         .byte 4  
      000CE5 48 45 52 45              4         .ascii "HERE"
      000CE9                          5         HERE:
      000CE9 90 AE 00 18      [ 2] 2368       	ldw y,#UVP 
      000CED 90 FE            [ 2] 2369         ldw y,(y)
      000CEF 1D 00 02         [ 2] 2370         subw x,#CELLL 
      000CF2 FF               [ 2] 2371         ldw (x),y 
      000CF3 81               [ 4] 2372         ret 
                                   2373 
                                   2374 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2375 ;       PAD     ( -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



                                   2376 ;       Return address of text buffer
                                   2377 ;       above  code dictionary.
                                   2378 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CF4                       2379         _HEADER PAD,3,"PAD"
      000CF4 0C E4                    1         .word LINK 
                           000CF6     2         LINK=.
      000CF6 03                       3         .byte 3  
      000CF7 50 41 44                 4         .ascii "PAD"
      000CFA                          5         PAD:
      000CFA CD 0C E9         [ 4] 2380         CALL     HERE
      000CFD                       2381         _DOLIT   80
      000CFD CD 04 70         [ 4]    1     CALL DOLIT 
      000D00 00 50                    2     .word 80 
      000D02 CC 08 3D         [ 2] 2382         JP     PLUS
                                   2383 
                                   2384 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2385 ;       TIB     ( -- a )
                                   2386 ;       Return address of 
                                   2387 ;       terminal input buffer.
                                   2388 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D05                       2389         _HEADER TIB,3,"TIB"
      000D05 0C F6                    1         .word LINK 
                           000D07     2         LINK=.
      000D07 03                       3         .byte 3  
      000D08 54 49 42                 4         .ascii "TIB"
      000D0B                          5         TIB:
      000D0B CD 07 0E         [ 4] 2390         CALL     NTIB
      000D0E CD 0B 78         [ 4] 2391         CALL     CELLP
      000D11 CC 04 E4         [ 2] 2392         JP     AT
                                   2393 
                                   2394 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2395 ;       @EXECUTE        ( a -- )
                                   2396 ;       Execute vector stored in 
                                   2397 ;       address a.
                                   2398 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D14                       2399         _HEADER ATEXE,8,"@EXECUTE"
      000D14 0D 07                    1         .word LINK 
                           000D16     2         LINK=.
      000D16 08                       3         .byte 8  
      000D17 40 45 58 45 43 55 54     4         .ascii "@EXECUTE"
             45
      000D1F                          5         ATEXE:
      000D1F CD 04 E4         [ 4] 2400         CALL     AT
      000D22 CD 07 CD         [ 4] 2401         CALL     QDUP    ;?address or zero
      000D25 CD 04 99         [ 4] 2402         CALL     QBRAN
      000D28 0D 2D                 2403         .word      EXE1
      000D2A CD 04 C5         [ 4] 2404         CALL     EXECU   ;execute if non-zero
      000D2D 81               [ 4] 2405 EXE1:   RET     ;do nothing if zero
                                   2406 
                                   2407 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2408 ;       CMOVE   ( b1 b2 u -- )
                                   2409 ;       Copy u bytes from b1 to b2.
                                   2410 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D2E                       2411         _HEADER CMOVE,5,"CMOVE"
      000D2E 0D 16                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



                           000D30     2         LINK=.
      000D30 05                       3         .byte 5  
      000D31 43 4D 4F 56 45           4         .ascii "CMOVE"
      000D36                          5         CMOVE:
                                   2412         ;;;;  local variables ;;;;;;;
                           000005  2413         DP = 5
                           000003  2414         YTMP = 3 
                           000001  2415         CNT  = 1 
                                   2416         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D36 89               [ 2] 2417         PUSHW X  ; R: DP  
      000D37 52 02            [ 2] 2418         SUB SP,#2 ; R: DP YTMP 
      000D39 90 93            [ 1] 2419         LDW Y,X 
      000D3B 90 FE            [ 2] 2420         LDW Y,(Y) ; CNT 
      000D3D 90 89            [ 2] 2421         PUSHW Y  ; R: DP YTMP CNT
      000D3F 90 93            [ 1] 2422         LDW Y,X 
      000D41 90 EE 02         [ 2] 2423         LDW Y,(2,Y) ; b2, dest 
      000D44 EE 04            [ 2] 2424         LDW X,(4,X) ; b1, src 
      000D46 17 03            [ 2] 2425         LDW (YTMP,SP),Y 
      000D48 13 03            [ 2] 2426         CPW X,(YTMP,SP) 
      000D4A 22 1A            [ 1] 2427         JRUGT CMOV2  ; src>dest 
                                   2428 ; src<dest copy from top to bottom
      000D4C 72 FB 01         [ 2] 2429         ADDW X,(CNT,SP)
      000D4F 72 F9 01         [ 2] 2430         ADDW Y,(CNT,SP)
      000D52                       2431 CMOV1:  
      000D52 17 03            [ 2] 2432         LDW (YTMP,SP),Y 
      000D54 16 01            [ 2] 2433         LDW Y,(CNT,SP)
      000D56 27 22            [ 1] 2434         JREQ CMOV3 
      000D58 90 5A            [ 2] 2435         DECW Y 
      000D5A 17 01            [ 2] 2436         LDW (CNT,SP),Y 
      000D5C 16 03            [ 2] 2437         LDW Y,(YTMP,SP)
      000D5E 5A               [ 2] 2438         DECW X
      000D5F F6               [ 1] 2439         LD A,(X)
      000D60 90 5A            [ 2] 2440         DECW Y 
      000D62 90 F7            [ 1] 2441         LD (Y),A 
      000D64 20 EC            [ 2] 2442         JRA CMOV1
                                   2443 ; src>dest copy from bottom to top   
      000D66                       2444 CMOV2: 
      000D66 17 03            [ 2] 2445         LDW (YTMP,SP),Y 
      000D68 16 01            [ 2] 2446         LDW Y,(CNT,SP)
      000D6A 27 0E            [ 1] 2447         JREQ CMOV3
      000D6C 90 5A            [ 2] 2448         DECW Y 
      000D6E 17 01            [ 2] 2449         LDW (CNT,SP),Y 
      000D70 16 03            [ 2] 2450         LDW Y,(YTMP,SP)
      000D72 F6               [ 1] 2451         LD A,(X)
      000D73 5C               [ 1] 2452         INCW X 
      000D74 90 F7            [ 1] 2453         LD (Y),A 
      000D76 90 5C            [ 1] 2454         INCW Y 
      000D78 20 EC            [ 2] 2455         JRA CMOV2 
      000D7A                       2456 CMOV3:
      000D7A 1E 05            [ 2] 2457         LDW X,(DP,SP)
      000D7C 1C 00 06         [ 2] 2458         ADDW X,#3*CELLL 
      000D7F 5B 06            [ 2] 2459         ADDW SP,#3*CELLL 
      000D81 81               [ 4] 2460         RET 
                                   2461         
                                   2462 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                                   2463 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2464 ;       FILL    ( b u c -- )
                                   2465 ;       Fill u bytes of character c
                                   2466 ;       to area beginning at b.
                                   2467 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D82                       2468         _HEADER FILL,4,"FILL"
      000D82 0D 30                    1         .word LINK 
                           000D84     2         LINK=.
      000D84 04                       3         .byte 4  
      000D85 46 49 4C 4C              4         .ascii "FILL"
      000D89                          5         FILL:
      000D89 E6 01            [ 1] 2469         LD A,(1,X)
      000D8B 90 93            [ 1] 2470         LDW Y,X 
      000D8D 1C 00 06         [ 2] 2471         ADDW X,#3*CELLL 
      000D90 89               [ 2] 2472         PUSHW X ; R: DP 
      000D91 93               [ 1] 2473         LDW X,Y 
      000D92 EE 04            [ 2] 2474         LDW X,(4,X) ; b
      000D94 90 EE 02         [ 2] 2475         LDW Y,(2,Y) ; u
      000D97                       2476 FILL0:
      000D97 27 06            [ 1] 2477         JREQ FILL1
      000D99 F7               [ 1] 2478         LD (X),A 
      000D9A 5C               [ 1] 2479         INCW X 
      000D9B 90 5A            [ 2] 2480         DECW Y 
      000D9D 20 F8            [ 2] 2481         JRA FILL0         
      000D9F 85               [ 2] 2482 FILL1: POPW X 
      000DA0 81               [ 4] 2483         RET         
                                   2484         
                                   2485 
                                   2486 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2487 ;       ERASE   ( b u -- )
                                   2488 ;       Erase u bytes beginning at b.
                                   2489 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DA1                       2490         _HEADER ERASE,5,"ERASE"
      000DA1 0D 84                    1         .word LINK 
                           000DA3     2         LINK=.
      000DA3 05                       3         .byte 5  
      000DA4 45 52 41 53 45           4         .ascii "ERASE"
      000DA9                          5         ERASE:
      000DA9 90 5F            [ 1] 2491         clrw y 
      000DAB 1D 00 02         [ 2] 2492         subw x,#CELLL 
      000DAE FF               [ 2] 2493         ldw (x),y 
      000DAF CC 0D 89         [ 2] 2494         jp FILL 
                                   2495 
                                   2496 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2497 ;       PACK0   ( b u a -- a )
                                   2498 ;       Build a counted string with
                                   2499 ;       u characters from b. Null fill.
                                   2500 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DB2                       2501         _HEADER PACKS,5,"PACK0"
      000DB2 0D A3                    1         .word LINK 
                           000DB4     2         LINK=.
      000DB4 05                       3         .byte 5  
      000DB5 50 41 43 4B 30           4         .ascii "PACK0"
      000DBA                          5         PACKS:
      000DBA CD 06 1A         [ 4] 2502         CALL     DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      000DBD CD 05 E3         [ 4] 2503         CALL     TOR     ;strings only on cell boundary
      000DC0 CD 08 28         [ 4] 2504         CALL     DDUP
      000DC3 CD 04 F1         [ 4] 2505         CALL     CSTOR
      000DC6 CD 0B A3         [ 4] 2506         CALL     ONEP ;save count
      000DC9 CD 06 2A         [ 4] 2507         CALL     SWAPP
      000DCC CD 0D 36         [ 4] 2508         CALL     CMOVE
      000DCF CD 05 35         [ 4] 2509         CALL     RFROM
      000DD2 81               [ 4] 2510         RET
                                   2511 
                                   2512 ;; Numeric output, single precision
                                   2513 
                                   2514 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2515 ;       DIGIT   ( u -- c )
                                   2516 ;       Convert digit u to a character.
                                   2517 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DD3                       2518         _HEADER DIGIT,5,"DIGIT"
      000DD3 0D B4                    1         .word LINK 
                           000DD5     2         LINK=.
      000DD5 05                       3         .byte 5  
      000DD6 44 49 47 49 54           4         .ascii "DIGIT"
      000DDB                          5         DIGIT:
      000DDB CD 04 70         [ 4] 2519         CALL	DOLIT
      000DDE 00 09                 2520         .word	9
      000DE0 CD 06 42         [ 4] 2521         CALL	OVER
      000DE3 CD 09 27         [ 4] 2522         CALL	LESS
      000DE6 CD 04 70         [ 4] 2523         CALL	DOLIT
      000DE9 00 07                 2524         .word	7
      000DEB CD 06 77         [ 4] 2525         CALL	ANDD
      000DEE CD 08 3D         [ 4] 2526         CALL	PLUS
      000DF1 CD 04 70         [ 4] 2527         CALL	DOLIT
      000DF4 00 30                 2528         .word	48	;'0'
      000DF6 CC 08 3D         [ 2] 2529         JP	PLUS
                                   2530 
                                   2531 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2532 ;       EXTRACT ( n base -- n c )
                                   2533 ;       Extract least significant 
                                   2534 ;       digit from n.
                                   2535 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DF9                       2536         _HEADER EXTRC,7,"EXTRACT"
      000DF9 0D D5                    1         .word LINK 
                           000DFB     2         LINK=.
      000DFB 07                       3         .byte 7  
      000DFC 45 58 54 52 41 43 54     4         .ascii "EXTRACT"
      000E03                          5         EXTRC:
      000E03 CD 0C 0F         [ 4] 2537         CALL     ZERO
      000E06 CD 06 2A         [ 4] 2538         CALL     SWAPP
      000E09 CD 09 B2         [ 4] 2539         CALL     UMMOD
      000E0C CD 06 2A         [ 4] 2540         CALL     SWAPP
      000E0F CC 0D DB         [ 2] 2541         JP     DIGIT
                                   2542 
                                   2543 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2544 ;       <#      ( -- )
                                   2545 ;       Initiate  numeric 
                                   2546 ;       output process.
                                   2547 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      000E12                       2548         _HEADER BDIGS,2,"#<"
      000E12 0D FB                    1         .word LINK 
                           000E14     2         LINK=.
      000E14 02                       3         .byte 2  
      000E15 23 3C                    4         .ascii "#<"
      000E17                          5         BDIGS:
      000E17 CD 0C FA         [ 4] 2549         CALL     PAD
      000E1A CD 07 50         [ 4] 2550         CALL     HLD
      000E1D CC 04 D2         [ 2] 2551         JP     STORE
                                   2552 
                                   2553 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2554 ;       HOLD    ( c -- )
                                   2555 ;       Insert a character 
                                   2556 ;       into output string.
                                   2557 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E20                       2558         _HEADER HOLD,4,"HOLD"
      000E20 0E 14                    1         .word LINK 
                           000E22     2         LINK=.
      000E22 04                       3         .byte 4  
      000E23 48 4F 4C 44              4         .ascii "HOLD"
      000E27                          5         HOLD:
      000E27 CD 07 50         [ 4] 2559         CALL     HLD
      000E2A CD 04 E4         [ 4] 2560         CALL     AT
      000E2D CD 0B B0         [ 4] 2561         CALL     ONEM
      000E30 CD 06 1A         [ 4] 2562         CALL     DUPP
      000E33 CD 07 50         [ 4] 2563         CALL     HLD
      000E36 CD 04 D2         [ 4] 2564         CALL     STORE
      000E39 CC 04 F1         [ 2] 2565         JP     CSTOR
                                   2566 
                                   2567 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2568 ;       #       ( u -- u )
                                   2569 ;       Extract one digit from u and
                                   2570 ;       append digit to output string.
                                   2571 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E3C                       2572         _HEADER DIG,1,"#"
      000E3C 0E 22                    1         .word LINK 
                           000E3E     2         LINK=.
      000E3E 01                       3         .byte 1  
      000E3F 23                       4         .ascii "#"
      000E40                          5         DIG:
      000E40 CD 06 E0         [ 4] 2573         CALL     BASE
      000E43 CD 04 E4         [ 4] 2574         CALL     AT
      000E46 CD 0E 03         [ 4] 2575         CALL     EXTRC
      000E49 CC 0E 27         [ 2] 2576         JP     HOLD
                                   2577 
                                   2578 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2579 ;       #S      ( u -- 0 )
                                   2580 ;       Convert u until all digits
                                   2581 ;       are added to output string.
                                   2582 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E4C                       2583         _HEADER DIGS,2,"#S"
      000E4C 0E 3E                    1         .word LINK 
                           000E4E     2         LINK=.
      000E4E 02                       3         .byte 2  
      000E4F 23 53                    4         .ascii "#S"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      000E51                          5         DIGS:
      000E51 CD 0E 40         [ 4] 2584 DIGS1:  CALL     DIG
      000E54 CD 06 1A         [ 4] 2585         CALL     DUPP
      000E57 CD 04 99         [ 4] 2586         CALL     QBRAN
      000E5A 0E 5E                 2587         .word      DIGS2
      000E5C 20 F3            [ 2] 2588         JRA     DIGS1
      000E5E 81               [ 4] 2589 DIGS2:  RET
                                   2590 
                                   2591 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2592 ;       SIGN    ( n -- )
                                   2593 ;       Add a minus sign to
                                   2594 ;       numeric output string.
                                   2595 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E5F                       2596         _HEADER SIGN,4,"SIGN"
      000E5F 0E 4E                    1         .word LINK 
                           000E61     2         LINK=.
      000E61 04                       3         .byte 4  
      000E62 53 49 47 4E              4         .ascii "SIGN"
      000E66                          5         SIGN:
      000E66 CD 06 51         [ 4] 2597         CALL     ZLESS
      000E69 CD 04 99         [ 4] 2598         CALL     QBRAN
      000E6C 0E 76                 2599         .word      SIGN1
      000E6E CD 04 70         [ 4] 2600         CALL     DOLIT
      000E71 00 2D                 2601         .word      45	;"-"
      000E73 CC 0E 27         [ 2] 2602         JP     HOLD
      000E76 81               [ 4] 2603 SIGN1:  RET
                                   2604 
                                   2605 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2606 ;       #>      ( w -- b u )
                                   2607 ;       Prepare output string.
                                   2608 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E77                       2609         _HEADER EDIGS,2,"#>"
      000E77 0E 61                    1         .word LINK 
                           000E79     2         LINK=.
      000E79 02                       3         .byte 2  
      000E7A 23 3E                    4         .ascii "#>"
      000E7C                          5         EDIGS:
      000E7C CD 06 10         [ 4] 2610         CALL     DROP
      000E7F CD 07 50         [ 4] 2611         CALL     HLD
      000E82 CD 04 E4         [ 4] 2612         CALL     AT
      000E85 CD 0C FA         [ 4] 2613         CALL     PAD
      000E88 CD 06 42         [ 4] 2614         CALL     OVER
      000E8B CC 08 D3         [ 2] 2615         JP     SUBB
                                   2616 
                                   2617 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2618 ;       str     ( w -- b u )
                                   2619 ;       Convert a signed integer
                                   2620 ;       to a numeric string.
                                   2621 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E8E                       2622         _HEADER STR,3,"STR"
      000E8E 0E 79                    1         .word LINK 
                           000E90     2         LINK=.
      000E90 03                       3         .byte 3  
      000E91 53 54 52                 4         .ascii "STR"
      000E94                          5         STR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      000E94 CD 06 1A         [ 4] 2623         CALL     DUPP
      000E97 CD 05 E3         [ 4] 2624         CALL     TOR
      000E9A CD 08 ED         [ 4] 2625         CALL     ABSS
      000E9D CD 0E 17         [ 4] 2626         CALL     BDIGS
      000EA0 CD 0E 51         [ 4] 2627         CALL     DIGS
      000EA3 CD 05 35         [ 4] 2628         CALL     RFROM
      000EA6 CD 0E 66         [ 4] 2629         CALL     SIGN
      000EA9 CC 0E 7C         [ 2] 2630         JP     EDIGS
                                   2631 
                                   2632 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2633 ;       HEX     ( -- )
                                   2634 ;       Use radix 16 as base for
                                   2635 ;       numeric conversions.
                                   2636 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000EAC                       2637         _HEADER HEX,3,"HEX"
      000EAC 0E 90                    1         .word LINK 
                           000EAE     2         LINK=.
      000EAE 03                       3         .byte 3  
      000EAF 48 45 58                 4         .ascii "HEX"
      000EB2                          5         HEX:
      000EB2 CD 04 70         [ 4] 2638         CALL     DOLIT
      000EB5 00 10                 2639         .word      16
      000EB7 CD 06 E0         [ 4] 2640         CALL     BASE
      000EBA CC 04 D2         [ 2] 2641         JP     STORE
                                   2642 
                                   2643 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2644 ;       DECIMAL ( -- )
                                   2645 ;       Use radix 10 as base
                                   2646 ;       for numeric conversions.
                                   2647 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000EBD                       2648         _HEADER DECIM,7,"DECIMAL"
      000EBD 0E AE                    1         .word LINK 
                           000EBF     2         LINK=.
      000EBF 07                       3         .byte 7  
      000EC0 44 45 43 49 4D 41 4C     4         .ascii "DECIMAL"
      000EC7                          5         DECIM:
      000EC7 CD 04 70         [ 4] 2649         CALL     DOLIT
      000ECA 00 0A                 2650         .word      10
      000ECC CD 06 E0         [ 4] 2651         CALL     BASE
      000ECF CC 04 D2         [ 2] 2652         JP     STORE
                                   2653 
                                   2654 ;; Numeric input, single precision
                                   2655 
                                   2656 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2657 ;       DIGIT?  ( c base -- u t )
                                   2658 ;       Convert a character to its numeric
                                   2659 ;       value. A flag indicates success.
                                   2660 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000ED2                       2661         _HEADER DIGTQ,6,"DIGIT?"
      000ED2 0E BF                    1         .word LINK 
                           000ED4     2         LINK=.
      000ED4 06                       3         .byte 6  
      000ED5 44 49 47 49 54 3F        4         .ascii "DIGIT?"
      000EDB                          5         DIGTQ:
      000EDB CD 05 E3         [ 4] 2662         CALL     TOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      000EDE CD 04 70         [ 4] 2663         CALL     DOLIT
      000EE1 00 30                 2664         .word     48	; "0"
      000EE3 CD 08 D3         [ 4] 2665         CALL     SUBB
      000EE6 CD 04 70         [ 4] 2666         CALL     DOLIT
      000EE9 00 09                 2667         .word      9
      000EEB CD 06 42         [ 4] 2668         CALL     OVER
      000EEE CD 09 27         [ 4] 2669         CALL     LESS
      000EF1 CD 04 99         [ 4] 2670         CALL     QBRAN
      000EF4 0F 0C                 2671         .word      DGTQ1
      000EF6 CD 04 70         [ 4] 2672         CALL     DOLIT
      000EF9 00 07                 2673         .word      7
      000EFB CD 08 D3         [ 4] 2674         CALL     SUBB
      000EFE CD 06 1A         [ 4] 2675         CALL     DUPP
      000F01 CD 04 70         [ 4] 2676         CALL     DOLIT
      000F04 00 0A                 2677         .word      10
      000F06 CD 09 27         [ 4] 2678         CALL     LESS
      000F09 CD 06 8B         [ 4] 2679         CALL     ORR
      000F0C CD 06 1A         [ 4] 2680 DGTQ1:  CALL     DUPP
      000F0F CD 05 35         [ 4] 2681         CALL     RFROM
      000F12 CC 09 11         [ 2] 2682         JP     ULESS
                                   2683 
                           000000  2684 .if  WANT_DOUBLE  
                           000001  2685 .iff 
                                   2686 
                                   2687 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2688 ; get all digits in row 
                                   2689 ; stop at first non-digit or end of string
                                   2690 ; ( n a cntr -- n  a+ cntr-  )
                                   2691 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F15                       2692 parse_digits:
      000F15 CD 06 1A         [ 4] 2693     CALL DUPP 
      000F18                       2694     _QBRAN 5$  
      000F18 CD 04 99         [ 4]    1     CALL QBRAN
      000F1B 0F 57                    2     .word 5$
      000F1D CD 05 E3         [ 4] 2695     CALL TOR   ; n a R: cntr 
      000F20 CD 0C D2         [ 4] 2696 1$: CALL COUNT ; n a+ char 
      000F23 CD 06 E0         [ 4] 2697     CALL BASE 
      000F26 CD 04 E4         [ 4] 2698     CALL AT 
      000F29 CD 0E DB         [ 4] 2699     CALL DIGTQ 
      000F2C                       2700     _QBRAN 4$ ; not a digit
      000F2C CD 04 99         [ 4]    1     CALL QBRAN
      000F2F 0F 4B                    2     .word 4$
      000F31 CD 07 DE         [ 4] 2701     CALL ROT 
      000F34 CD 06 E0         [ 4] 2702     CALL BASE 
      000F37 CD 04 E4         [ 4] 2703     CALL AT 
      000F3A CD 0B 22         [ 4] 2704     CALL STAR
      000F3D CD 08 3D         [ 4] 2705     CALL PLUS
      000F40 CD 06 2A         [ 4] 2706     CALL SWAPP  
      000F43 CD 05 35         [ 4] 2707     CALL RFROM  ; n a+ cntr 
      000F46 CD 0B B0         [ 4] 2708     CALL ONEM 
      000F49 20 CA            [ 2] 2709     JRA parse_digits ; n a+ cntr  
      000F4B                       2710 4$: ; n a+ char R: cntr 
      000F4B 90 93            [ 1] 2711     LDW Y,X 
      000F4D 90 EE 02         [ 2] 2712     LDW Y,(2,Y)
      000F50 90 5A            [ 2] 2713     DECW Y  ; dec(a)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      000F52 EF 02            [ 2] 2714     LDW (2,X),Y 
      000F54 90 85            [ 2] 2715     POPW Y 
      000F56 FF               [ 2] 2716     LDW (X),Y ; n a cntr  
      000F57                       2717 5$:
      000F57 81               [ 4] 2718     RET 
                                   2719 
                                   2720 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2721 ;       NUMBER? ( a -- n T | a F )
                                   2722 ;       Convert a number string to
                                   2723 ;       integer. Push a flag on tos.
                                   2724 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F58                       2725         _HEADER NUMBQ,7,"NUMBER?"
      000F58 0E D4                    1         .word LINK 
                           000F5A     2         LINK=.
      000F5A 07                       3         .byte 7  
      000F5B 4E 55 4D 42 45 52 3F     4         .ascii "NUMBER?"
      000F62                          5         NUMBQ:
                                   2726 ; save BASE
      000F62 CD 06 E0         [ 4] 2727         CALL     BASE
      000F65 CD 04 E4         [ 4] 2728         CALL     AT
      000F68 CD 05 E3         [ 4] 2729         CALL     TOR
      000F6B CD 0C 0F         [ 4] 2730         CALL     ZERO
      000F6E CD 06 42         [ 4] 2731         CALL     OVER
      000F71 CD 0C D2         [ 4] 2732         CALL     COUNT ; string length,  a 0 a+ cnt 
                                   2733 ;  check hexadecimal character        
      000F74 CD 06 42         [ 4] 2734         CALL     OVER           ; a 0 a+ cnt a+ 
      000F77 CD 05 02         [ 4] 2735         CALL     CAT
      000F7A                       2736         _DOLIT   '$'  ; hex?    ; a 0 a+ cnt char '$'
      000F7A CD 04 70         [ 4]    1     CALL DOLIT 
      000F7D 00 24                    2     .word '$' 
      000F7F CD 08 FB         [ 4] 2737         CALL     EQUAL
      000F82                       2738         _QBRAN   NUMQ1
      000F82 CD 04 99         [ 4]    1     CALL QBRAN
      000F85 0F 96                    2     .word NUMQ1
      000F87 CD 0E B2         [ 4] 2739         CALL     HEX
      000F8A CD 06 2A         [ 4] 2740         CALL     SWAPP
      000F8D CD 0B A3         [ 4] 2741         CALL     ONEP
      000F90 CD 06 2A         [ 4] 2742         CALL     SWAPP
      000F93 CD 0B B0         [ 4] 2743         CALL     ONEM
                                   2744 ; check for negative sign         
      000F96 CD 06 42         [ 4] 2745 NUMQ1:  CALL     OVER
      000F99 CD 05 02         [ 4] 2746         CALL     CAT
      000F9C                       2747         _DOLIT   '-'
      000F9C CD 04 70         [ 4]    1     CALL DOLIT 
      000F9F 00 2D                    2     .word '-' 
      000FA1 CD 08 FB         [ 4] 2748         CALL     EQUAL
      000FA4 CD 05 E3         [ 4] 2749         CALL     TOR    ; a 0 a+ cnt R: base sign 
                                   2750 ; update address and count 
      000FA7 CD 06 2A         [ 4] 2751         CALL     SWAPP
      000FAA CD 05 46         [ 4] 2752         CALL     RAT
      000FAD CD 08 D3         [ 4] 2753         CALL     SUBB
      000FB0 CD 06 2A         [ 4] 2754         CALL     SWAPP
      000FB3 CD 05 46         [ 4] 2755         CALL     RAT
      000FB6 CD 08 3D         [ 4] 2756         CALL     PLUS  ; a 0 a+ cnt- R: base sign 
      000FB9 CD 07 CD         [ 4] 2757         CALL     QDUP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      000FBC                       2758         _QBRAN   NUMQ4  ; end of string  a 0 a+ R: base sign 
      000FBC CD 04 99         [ 4]    1     CALL QBRAN
      000FBF 0F E4                    2     .word NUMQ4
      000FC1 CD 0F 15         [ 4] 2759         CALL     parse_digits ; a 0 a+ cntr- -- a n a+ cntr-  R: base sign 
      000FC4 CD 06 1A         [ 4] 2760         CALL     DUPP   ; a n a+ cnt cnt -- R: base sign  
      000FC7                       2761         _TBRAN   NUMQ6
      000FC7 CD 04 A7         [ 4]    1     CALL TBRAN 
      000FCA 0F EC                    2     .word NUMQ6 
      000FCC CD 08 1D         [ 4] 2762         CALL     DDROP   ; a n  R: base sign  
      000FCF CD 05 35         [ 4] 2763         CALL     RFROM   ; a n sign R: base 
      000FD2                       2764         _QBRAN   NUMQ3
      000FD2 CD 04 99         [ 4]    1     CALL QBRAN
      000FD5 0F DA                    2     .word NUMQ3
      000FD7 CD 08 87         [ 4] 2765         CALL     NEGAT ; a n R: base 
      000FDA CD 06 2A         [ 4] 2766 NUMQ3:  CALL     SWAPP
      000FDD 90 AE FF FF      [ 2] 2767         LDW  Y, #-1 
      000FE1 FF               [ 2] 2768         LDW (X),Y     ; n -1 R: base 
      000FE2 20 0E            [ 2] 2769         JRA      NUMQ9
      000FE4 CD 05 35         [ 4] 2770 NUMQ4:  CALL     RFROM
      000FE7 CD 08 1D         [ 4] 2771         CALL     DDROP
      000FEA 20 06            [ 2] 2772         JRA      NUMQ9 
      000FEC                       2773 NUMQ6:  
                           000001  2774 .if WANT_FLOAT24 
                           000001  2775 .ift 
      000FEC CD 05 35         [ 4] 2776         CALL     RFROM ; a n a+ cnt sign R: base 
      000FEF CD 28 BA         [ 4] 2777         CALL     FLOATQ  
                           000000  2778 .iff
                                   2779         ADDW SP,#CELLL ; remove sign from rstack 
                                   2780         ADDW  X,#2*CELLL ; drop a+ cnt S: a n  R: sign 
                                   2781         CLRW Y  
                                   2782         LDW (X),Y  ;  a 0 R: base 
                                   2783 .endif 
                                   2784 ; restore BASE 
      000FF2                       2785 NUMQ9: 
      000FF2 CD 05 35         [ 4] 2786         CALL     RFROM
      000FF5 CD 06 E0         [ 4] 2787         CALL     BASE
      000FF8 CC 04 D2         [ 2] 2788         JP       STORE
                                   2789 .endif ; WANT_DOUBLE   
                                   2790 
                                   2791 ;; Basic I/O
                                   2792 
                                   2793 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2794 ;       KEY     ( -- c )
                                   2795 ;       Wait for and return an
                                   2796 ;       input character.
                                   2797 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000FFB                       2798         _HEADER KEY,3,"KEY"
      000FFB 0F 5A                    1         .word LINK 
                           000FFD     2         LINK=.
      000FFD 03                       3         .byte 3  
      000FFE 4B 45 59                 4         .ascii "KEY"
      001001                          5         KEY:
      001001 72 0B 52 30 FB   [ 2] 2799         btjf UART_SR,#UART_SR_RXNE,. 
      001006 C6 52 31         [ 1] 2800         ld a,UART_DR 
      001009 1D 00 02         [ 2] 2801         subw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      00100C E7 01            [ 1] 2802         ld (1,x),a 
      00100E 7F               [ 1] 2803         clr (x)
      00100F 81               [ 4] 2804         ret 
                                   2805 
                                   2806 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2807 ;       NUF?    ( -- t )
                                   2808 ;       Return false if no input,
                                   2809 ;       else pause and if CR return true.
                                   2810 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001010                       2811         _HEADER NUFQ,4,"NUF?"
      001010 0F FD                    1         .word LINK 
                           001012     2         LINK=.
      001012 04                       3         .byte 4  
      001013 4E 55 46 3F              4         .ascii "NUF?"
      001017                          5         NUFQ:
      001017 CD 04 19         [ 4] 2812         CALL     QKEY
      00101A CD 06 1A         [ 4] 2813         CALL     DUPP
      00101D CD 04 99         [ 4] 2814         CALL     QBRAN
      001020 10 30                 2815         .word    NUFQ1
      001022 CD 08 1D         [ 4] 2816         CALL     DDROP
      001025 CD 10 01         [ 4] 2817         CALL     KEY
      001028 CD 04 70         [ 4] 2818         CALL     DOLIT
      00102B 00 0D                 2819         .word      CRR
      00102D CC 08 FB         [ 2] 2820         JP     EQUAL
      001030 81               [ 4] 2821 NUFQ1:  RET
                                   2822 
                                   2823 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2824 ;       SPACE   ( -- )
                                   2825 ;       Send  blank character to
                                   2826 ;       output device.
                                   2827 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001031                       2828         _HEADER SPACE,5,"SPACE"
      001031 10 12                    1         .word LINK 
                           001033     2         LINK=.
      001033 05                       3         .byte 5  
      001034 53 50 41 43 45           4         .ascii "SPACE"
      001039                          5         SPACE:
      001039 CD 0C 02         [ 4] 2829         CALL     BLANK
      00103C CC 04 37         [ 2] 2830         JP     EMIT
                                   2831 
                                   2832 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2833 ;       SPACES  ( +n -- )
                                   2834 ;       Send n spaces to output device.
                                   2835 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00103F                       2836         _HEADER SPACS,6,"SPACES"
      00103F 10 33                    1         .word LINK 
                           001041     2         LINK=.
      001041 06                       3         .byte 6  
      001042 53 50 41 43 45 53        4         .ascii "SPACES"
      001048                          5         SPACS:
      001048 CD 0C 0F         [ 4] 2837         CALL     ZERO
      00104B CD 09 6C         [ 4] 2838         CALL     MAX
      00104E CD 05 E3         [ 4] 2839         CALL     TOR
      001051 20 03            [ 2] 2840         JRA      CHAR2
      001053 CD 10 39         [ 4] 2841 CHAR1:  CALL     SPACE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      001056 CD 04 84         [ 4] 2842 CHAR2:  CALL     DONXT
      001059 10 53                 2843         .word    CHAR1
      00105B 81               [ 4] 2844         RET
                                   2845 
                                   2846 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2847 ;       TYPE    ( b u -- )
                                   2848 ;       Output u characters from b.
                                   2849 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00105C                       2850         _HEADER TYPES,4,"TYPE"
      00105C 10 41                    1         .word LINK 
                           00105E     2         LINK=.
      00105E 04                       3         .byte 4  
      00105F 54 59 50 45              4         .ascii "TYPE"
      001063                          5         TYPES:
      001063 CD 05 E3         [ 4] 2851         CALL     TOR
      001066 20 06            [ 2] 2852         JRA     TYPE2
      001068 CD 0C D2         [ 4] 2853 TYPE1:  CALL     COUNT 
      00106B CD 04 37         [ 4] 2854         CALL     EMIT
      00106E                       2855 TYPE2:  _DONXT  TYPE1
      00106E CD 04 84         [ 4]    1     CALL DONXT 
      001071 10 68                    2     .word TYPE1 
      001073                       2856         _DROP
      001073 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      001076 81               [ 4] 2857         RET 
                                   2858 
                                   2859 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2860 ;       CR      ( -- )
                                   2861 ;       Output a carriage return
                                   2862 ;       and a line feed.
                                   2863 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001077                       2864         _HEADER CR,2,"CR"
      001077 10 5E                    1         .word LINK 
                           001079     2         LINK=.
      001079 02                       3         .byte 2  
      00107A 43 52                    4         .ascii "CR"
      00107C                          5         CR:
      00107C                       2865         _DOLIT  CRR 
      00107C CD 04 70         [ 4]    1     CALL DOLIT 
      00107F 00 0D                    2     .word CRR 
      001081 CD 04 37         [ 4] 2866         CALL    EMIT
      001084                       2867         _DOLIT  LF
      001084 CD 04 70         [ 4]    1     CALL DOLIT 
      001087 00 0A                    2     .word LF 
      001089 CC 04 37         [ 2] 2868         JP      EMIT
                                   2869 
                                   2870 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2871 ;       do$     ( -- a )
                                   2872 ;       Return  address of a compiled
                                   2873 ;       string.
                                   2874 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2875 ;       _HEADER DOSTR,COMPO+3,"DO$"
      00108C                       2876 DOSTR:
      00108C CD 05 35         [ 4] 2877         CALL     RFROM
      00108F CD 05 46         [ 4] 2878         CALL     RAT
      001092 CD 05 35         [ 4] 2879         CALL     RFROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      001095 CD 0C D2         [ 4] 2880         CALL     COUNT
      001098 CD 08 3D         [ 4] 2881         CALL     PLUS
      00109B CD 05 E3         [ 4] 2882         CALL     TOR
      00109E CD 06 2A         [ 4] 2883         CALL     SWAPP
      0010A1 CD 05 E3         [ 4] 2884         CALL     TOR
      0010A4 81               [ 4] 2885         RET
                                   2886 
                                   2887 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2888 ;       $"|     ( -- a )
                                   2889 ;       Run time routine compiled by $".
                                   2890 ;       Return address of a compiled string.
                                   2891 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2892 ;       _HEADER STRQP,COMPO+3,"$\"|"
      0010A5                       2893 STRQP:
      0010A5 CD 10 8C         [ 4] 2894         CALL     DOSTR
      0010A8 81               [ 4] 2895         RET
                                   2896 
                                   2897 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2898 ;       ."|     ( -- )
                                   2899 ;       Run time routine of ." .
                                   2900 ;       Output a compiled string.
                                   2901 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2902 ;       _HEADER DOTQP,COMPO+3,".\"|"
      0010A9                       2903 DOTQP:
      0010A9 CD 10 8C         [ 4] 2904         CALL     DOSTR
      0010AC CD 0C D2         [ 4] 2905         CALL     COUNT
      0010AF CC 10 63         [ 2] 2906         JP     TYPES
                                   2907 
                                   2908 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2909 ;       .R      ( n +n -- )
                                   2910 ;       Display an integer in a field
                                   2911 ;       of n columns, right justified.
                                   2912 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0010B2                       2913         _HEADER DOTR,2,".R"
      0010B2 10 79                    1         .word LINK 
                           0010B4     2         LINK=.
      0010B4 02                       3         .byte 2  
      0010B5 2E 52                    4         .ascii ".R"
      0010B7                          5         DOTR:
      0010B7 CD 05 E3         [ 4] 2914         CALL     TOR
      0010BA CD 0E 94         [ 4] 2915         CALL     STR
      0010BD CD 05 35         [ 4] 2916         CALL     RFROM
      0010C0 CD 06 42         [ 4] 2917         CALL     OVER
      0010C3 CD 08 D3         [ 4] 2918         CALL     SUBB
      0010C6 CD 10 48         [ 4] 2919         CALL     SPACS
      0010C9 CC 10 63         [ 2] 2920         JP     TYPES
                                   2921 
                                   2922 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2923 ;       U.R     ( u +n -- )
                                   2924 ;       Display an unsigned integer
                                   2925 ;       in n column, right justified.
                                   2926 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0010CC                       2927         _HEADER UDOTR,3,"U.R"
      0010CC 10 B4                    1         .word LINK 
                           0010CE     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      0010CE 03                       3         .byte 3  
      0010CF 55 2E 52                 4         .ascii "U.R"
      0010D2                          5         UDOTR:
      0010D2 CD 05 E3         [ 4] 2928         CALL     TOR
      0010D5 CD 0E 17         [ 4] 2929         CALL     BDIGS
      0010D8 CD 0E 51         [ 4] 2930         CALL     DIGS
      0010DB CD 0E 7C         [ 4] 2931         CALL     EDIGS
      0010DE CD 05 35         [ 4] 2932         CALL     RFROM
      0010E1 CD 06 42         [ 4] 2933         CALL     OVER
      0010E4 CD 08 D3         [ 4] 2934         CALL     SUBB
      0010E7 CD 10 48         [ 4] 2935         CALL     SPACS
      0010EA CC 10 63         [ 2] 2936         JP     TYPES
                                   2937 
                                   2938 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2939 ;       U.      ( u -- )
                                   2940 ;       Display an unsigned integer
                                   2941 ;       in free format.
                                   2942 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0010ED                       2943         _HEADER UDOT,2,"U."
      0010ED 10 CE                    1         .word LINK 
                           0010EF     2         LINK=.
      0010EF 02                       3         .byte 2  
      0010F0 55 2E                    4         .ascii "U."
      0010F2                          5         UDOT:
      0010F2 CD 0E 17         [ 4] 2944         CALL     BDIGS
      0010F5 CD 0E 51         [ 4] 2945         CALL     DIGS
      0010F8 CD 0E 7C         [ 4] 2946         CALL     EDIGS
      0010FB CD 10 39         [ 4] 2947         CALL     SPACE
      0010FE CC 10 63         [ 2] 2948         JP     TYPES
                                   2949 
                                   2950 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2951 ;   H. ( n -- )
                                   2952 ;   display n in hexadecimal 
                                   2953 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001101                       2954         _HEADER HDOT,2,"H."
      001101 10 EF                    1         .word LINK 
                           001103     2         LINK=.
      001103 02                       3         .byte 2  
      001104 48 2E                    4         .ascii "H."
      001106                          5         HDOT:
      001106 CD 06 E0         [ 4] 2955         CALL BASE 
      001109 CD 04 E4         [ 4] 2956         CALL AT 
      00110C CD 05 E3         [ 4] 2957         CALL TOR 
      00110F CD 0E B2         [ 4] 2958         CALL HEX 
      001112 CD 10 F2         [ 4] 2959         CALL UDOT 
      001115 CD 05 35         [ 4] 2960         CALL RFROM 
      001118 CD 06 E0         [ 4] 2961         CALL BASE 
      00111B CC 04 D2         [ 2] 2962         JP STORE 
                                   2963          
                                   2964 
                                   2965 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2966 ;       .       ( w -- )
                                   2967 ;       Display an integer in free
                                   2968 ;       format, preceeded by a space.
                                   2969 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      00111E                       2970         _HEADER DOT,1,"."
      00111E 11 03                    1         .word LINK 
                           001120     2         LINK=.
      001120 01                       3         .byte 1  
      001121 2E                       4         .ascii "."
      001122                          5         DOT:
      001122 CD 06 E0         [ 4] 2971         CALL     BASE
      001125 CD 04 E4         [ 4] 2972         CALL     AT
      001128 CD 04 70         [ 4] 2973         CALL     DOLIT
      00112B 00 0A                 2974         .word      10
      00112D CD 06 A0         [ 4] 2975         CALL     XORR    ;?decimal
      001130 CD 04 99         [ 4] 2976         CALL     QBRAN
      001133 11 37                 2977         .word      DOT1
      001135 20 BB            [ 2] 2978         JRA     UDOT
      001137 CD 0E 94         [ 4] 2979 DOT1:   CALL     STR
      00113A CD 10 39         [ 4] 2980         CALL     SPACE
      00113D CC 10 63         [ 2] 2981         JP     TYPES
                                   2982 
                                   2983 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2984 ;       ?       ( a -- )
                                   2985 ;       Display contents in memory cell.
                                   2986 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001140                       2987         _HEADER QUEST,1,"?"
      001140 11 20                    1         .word LINK 
                           001142     2         LINK=.
      001142 01                       3         .byte 1  
      001143 3F                       4         .ascii "?"
      001144                          5         QUEST:
      001144 CD 04 E4         [ 4] 2988         CALL     AT
      001147 20 D9            [ 2] 2989         JRA     DOT
                                   2990 
                                   2991 ;; Parsing
                                   2992 
                                   2993 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2994 ;       parse   ( b u c -- b u delta ; <string> )
                                   2995 ;       Scan string delimited by c.
                                   2996 ;       Return found string and its offset.
                                   2997 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001149                       2998         _HEADER PARS,5,"PARS$"
      001149 11 42                    1         .word LINK 
                           00114B     2         LINK=.
      00114B 05                       3         .byte 5  
      00114C 50 41 52 53 24           4         .ascii "PARS$"
      001151                          5         PARS:
      001151 CD 06 EF         [ 4] 2999         CALL     TEMP
      001154 CD 04 D2         [ 4] 3000         CALL     STORE
      001157 CD 06 42         [ 4] 3001         CALL     OVER
      00115A CD 05 E3         [ 4] 3002         CALL     TOR
      00115D CD 06 1A         [ 4] 3003         CALL     DUPP
      001160 CD 04 99         [ 4] 3004         CALL     QBRAN
      001163 12 09                 3005         .word    PARS8
      001165 CD 0B B0         [ 4] 3006         CALL     ONEM
      001168 CD 06 EF         [ 4] 3007         CALL     TEMP
      00116B CD 04 E4         [ 4] 3008         CALL     AT
      00116E CD 0C 02         [ 4] 3009         CALL     BLANK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      001171 CD 08 FB         [ 4] 3010         CALL     EQUAL
      001174 CD 04 99         [ 4] 3011         CALL     QBRAN
      001177 11 AA                 3012         .word      PARS3
      001179 CD 05 E3         [ 4] 3013         CALL     TOR
      00117C CD 0C 02         [ 4] 3014 PARS1:  CALL     BLANK
      00117F CD 06 42         [ 4] 3015         CALL     OVER
      001182 CD 05 02         [ 4] 3016         CALL     CAT     ;skip leading blanks ONLY
      001185 CD 08 D3         [ 4] 3017         CALL     SUBB
      001188 CD 06 51         [ 4] 3018         CALL     ZLESS
      00118B CD 08 76         [ 4] 3019         CALL     INVER
      00118E CD 04 99         [ 4] 3020         CALL     QBRAN
      001191 11 A7                 3021         .word      PARS2
      001193 CD 0B A3         [ 4] 3022         CALL     ONEP
      001196 CD 04 84         [ 4] 3023         CALL     DONXT
      001199 11 7C                 3024         .word      PARS1
      00119B CD 05 35         [ 4] 3025         CALL     RFROM
      00119E CD 06 10         [ 4] 3026         CALL     DROP
      0011A1 CD 0C 0F         [ 4] 3027         CALL     ZERO
      0011A4 CC 06 1A         [ 2] 3028         JP     DUPP
      0011A7 CD 05 35         [ 4] 3029 PARS2:  CALL     RFROM
      0011AA CD 06 42         [ 4] 3030 PARS3:  CALL     OVER
      0011AD CD 06 2A         [ 4] 3031         CALL     SWAPP
      0011B0 CD 05 E3         [ 4] 3032         CALL     TOR
      0011B3 CD 06 EF         [ 4] 3033 PARS4:  CALL     TEMP
      0011B6 CD 04 E4         [ 4] 3034         CALL     AT
      0011B9 CD 06 42         [ 4] 3035         CALL     OVER
      0011BC CD 05 02         [ 4] 3036         CALL     CAT
      0011BF CD 08 D3         [ 4] 3037         CALL     SUBB    ;scan for delimiter
      0011C2 CD 06 EF         [ 4] 3038         CALL     TEMP
      0011C5 CD 04 E4         [ 4] 3039         CALL     AT
      0011C8 CD 0C 02         [ 4] 3040         CALL     BLANK
      0011CB CD 08 FB         [ 4] 3041         CALL     EQUAL
      0011CE CD 04 99         [ 4] 3042         CALL     QBRAN
      0011D1 11 D6                 3043         .word      PARS5
      0011D3 CD 06 51         [ 4] 3044         CALL     ZLESS
      0011D6 CD 04 99         [ 4] 3045 PARS5:  CALL     QBRAN
      0011D9 11 EB                 3046         .word      PARS6
      0011DB CD 0B A3         [ 4] 3047         CALL     ONEP
      0011DE CD 04 84         [ 4] 3048         CALL     DONXT
      0011E1 11 B3                 3049         .word      PARS4
      0011E3 CD 06 1A         [ 4] 3050         CALL     DUPP
      0011E6 CD 05 E3         [ 4] 3051         CALL     TOR
      0011E9 20 0F            [ 2] 3052         JRA     PARS7
      0011EB CD 05 35         [ 4] 3053 PARS6:  CALL     RFROM
      0011EE CD 06 10         [ 4] 3054         CALL     DROP
      0011F1 CD 06 1A         [ 4] 3055         CALL     DUPP
      0011F4 CD 0B A3         [ 4] 3056         CALL     ONEP
      0011F7 CD 05 E3         [ 4] 3057         CALL     TOR
      0011FA CD 06 42         [ 4] 3058 PARS7:  CALL     OVER
      0011FD CD 08 D3         [ 4] 3059         CALL     SUBB
      001200 CD 05 35         [ 4] 3060         CALL     RFROM
      001203 CD 05 35         [ 4] 3061         CALL     RFROM
      001206 CC 08 D3         [ 2] 3062         JP     SUBB
      001209 CD 06 42         [ 4] 3063 PARS8:  CALL     OVER
      00120C CD 05 35         [ 4] 3064         CALL     RFROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      00120F CC 08 D3         [ 2] 3065         JP     SUBB
                                   3066 
                                   3067 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3068 ;       PARSE   ( c -- b u ; <string> )
                                   3069 ;       Scan input stream and return
                                   3070 ;       counted string delimited by c.
                                   3071 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001212                       3072         _HEADER PARSE,5,"PARSE"
      001212 11 4B                    1         .word LINK 
                           001214     2         LINK=.
      001214 05                       3         .byte 5  
      001215 50 41 52 53 45           4         .ascii "PARSE"
      00121A                          5         PARSE:
      00121A CD 05 E3         [ 4] 3073         CALL     TOR
      00121D CD 0D 0B         [ 4] 3074         CALL     TIB
      001220 CD 06 FE         [ 4] 3075         CALL     INN
      001223 CD 04 E4         [ 4] 3076         CALL     AT
      001226 CD 08 3D         [ 4] 3077         CALL     PLUS    ;current input buffer pointer
      001229 CD 07 0E         [ 4] 3078         CALL     NTIB
      00122C CD 04 E4         [ 4] 3079         CALL     AT
      00122F CD 06 FE         [ 4] 3080         CALL     INN
      001232 CD 04 E4         [ 4] 3081         CALL     AT
      001235 CD 08 D3         [ 4] 3082         CALL     SUBB    ;remaining count
      001238 CD 05 35         [ 4] 3083         CALL     RFROM
      00123B CD 11 51         [ 4] 3084         CALL     PARS
      00123E CD 06 FE         [ 4] 3085         CALL     INN
      001241 CC 0C 7F         [ 2] 3086         JP     PSTOR
                                   3087 
                                   3088 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3089 ;       .(      ( -- )
                                   3090 ;       Output following string up to next ) .
                                   3091 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001244                       3092         _HEADER DOTPR,IMEDD+2,".("
      001244 12 14                    1         .word LINK 
                           001246     2         LINK=.
      001246 82                       3         .byte IMEDD+2  
      001247 2E 28                    4         .ascii ".("
      001249                          5         DOTPR:
      001249 CD 04 70         [ 4] 3093         CALL     DOLIT
      00124C 00 29                 3094         .word     41	; ")"
      00124E CD 12 1A         [ 4] 3095         CALL     PARSE
      001251 CC 10 63         [ 2] 3096         JP     TYPES
                                   3097 
                                   3098 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3099 ;       (       ( -- )
                                   3100 ;       Ignore following string up to next ).
                                   3101 ;       A comment.
                                   3102 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001254                       3103         _HEADER PAREN,IMEDD+1,"("
      001254 12 46                    1         .word LINK 
                           001256     2         LINK=.
      001256 81                       3         .byte IMEDD+1  
      001257 28                       4         .ascii "("
      001258                          5         PAREN:
      001258 CD 04 70         [ 4] 3104         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      00125B 00 29                 3105         .word     41	; ")"
      00125D CD 12 1A         [ 4] 3106         CALL     PARSE
      001260 CC 08 1D         [ 2] 3107         JP     DDROP
                                   3108 
                                   3109 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3110 ;       \       ( -- )
                                   3111 ;       Ignore following text till
                                   3112 ;       end of line.
                                   3113 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001263                       3114         _HEADER BKSLA,IMEDD+1,"\\"
      001263 12 56                    1         .word LINK 
                           001265     2         LINK=.
      001265 81                       3         .byte IMEDD+1  
      001266 5C 5C                    4         .ascii "\\"
      001268                          5         BKSLA:
      001268 90 AE 00 0E      [ 2] 3115         ldw y,#UCTIB ; #TIB  
      00126C 90 FE            [ 2] 3116         ldw y,(y)
      00126E 90 89            [ 2] 3117         pushw y ; count in TIB 
      001270 90 AE 00 0C      [ 2] 3118         ldw y,#UINN ; >IN 
      001274 90 BF 26         [ 2] 3119         ldw YTEMP,y
      001277 90 85            [ 2] 3120         popw y 
      001279 91 CF 26         [ 5] 3121         ldw [YTEMP],y
      00127C 81               [ 4] 3122         ret 
                                   3123 
                                   3124 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3125 ;       WORD    ( c -- a ; <string> )
                                   3126 ;       Parse a word from input stream
                                   3127 ;       and copy it to code dictionary.
                                   3128 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00127D                       3129         _HEADER WORDD,4,"WORD"
      00127D 12 65                    1         .word LINK 
                           00127F     2         LINK=.
      00127F 04                       3         .byte 4  
      001280 57 4F 52 44              4         .ascii "WORD"
      001284                          5         WORDD:
      001284 CD 12 1A         [ 4] 3130         CALL     PARSE
      001287 CD 0C E9         [ 4] 3131         CALL     HERE
      00128A CD 0B 78         [ 4] 3132         CALL     CELLP
                           000000  3133 .IF CASE_SENSE 
                                   3134         JP      PACKS 
                           000001  3135 .ELSE                 
      00128D CD 0D BA         [ 4] 3136         CALL     PACKS
                                   3137 ; uppercase TOKEN 
      001290 CD 06 1A         [ 4] 3138         CALL    DUPP 
      001293 CD 0C D2         [ 4] 3139         CALL    COUNT 
      001296 CD 05 E3         [ 4] 3140         CALL    TOR 
      001299 CD 04 B5         [ 4] 3141         CALL    BRAN 
      00129C 12 CA                 3142         .word   UPPER2  
      00129E                       3143 UPPER:
      00129E CD 06 1A         [ 4] 3144         CALL    DUPP 
      0012A1 CD 05 02         [ 4] 3145         CALL    CAT
      0012A4 CD 06 1A         [ 4] 3146         CALL    DUPP 
      0012A7 CD 04 70         [ 4] 3147         CALL   DOLIT
      0012AA 00 61                 3148         .word   'a' 
      0012AC CD 04 70         [ 4] 3149         CALL    DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      0012AF 00 7B                 3150         .word   'z'+1 
      0012B1 CD 09 97         [ 4] 3151         CALL   WITHI 
      0012B4 CD 04 99         [ 4] 3152         CALL   QBRAN
      0012B7 12 C1                 3153         .word  UPPER1  
      0012B9 CD 04 70         [ 4] 3154         CALL    DOLIT 
      0012BC 00 DF                 3155         .word   0xDF 
      0012BE CD 06 77         [ 4] 3156         CALL    ANDD 
      0012C1                       3157 UPPER1:
      0012C1 CD 06 42         [ 4] 3158         CALL    OVER 
      0012C4 CD 04 F1         [ 4] 3159         CALL    CSTOR          
      0012C7 CD 0B A3         [ 4] 3160         CALL    ONEP 
      0012CA                       3161 UPPER2: 
      0012CA CD 04 84         [ 4] 3162         CALL    DONXT
      0012CD 12 9E                 3163         .word   UPPER  
      0012CF CD 06 10         [ 4] 3164         CALL    DROP  
      0012D2 81               [ 4] 3165         RET 
                                   3166 .ENDIF 
                                   3167 
                                   3168 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3169 ;       TOKEN   ( -- a ; <string> )
                                   3170 ;       Parse a word from input stream
                                   3171 ;       and copy it to name dictionary.
                                   3172 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0012D3                       3173         _HEADER TOKEN,5,"TOKEN"
      0012D3 12 7F                    1         .word LINK 
                           0012D5     2         LINK=.
      0012D5 05                       3         .byte 5  
      0012D6 54 4F 4B 45 4E           4         .ascii "TOKEN"
      0012DB                          5         TOKEN:
      0012DB CD 0C 02         [ 4] 3174         CALL     BLANK
      0012DE CC 12 84         [ 2] 3175         JP     WORDD
                                   3176 
                                   3177 ;; Dictionary search
                                   3178 
                                   3179 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3180 ;       NAME>   ( na -- ca )
                                   3181 ;       Return a code address given
                                   3182 ;       a name address.
                                   3183 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0012E1                       3184         _HEADER NAMET,5,"NAME>"
      0012E1 12 D5                    1         .word LINK 
                           0012E3     2         LINK=.
      0012E3 05                       3         .byte 5  
      0012E4 4E 41 4D 45 3E           4         .ascii "NAME>"
      0012E9                          5         NAMET:
      0012E9 CD 0C D2         [ 4] 3185         CALL     COUNT
      0012EC CD 04 70         [ 4] 3186         CALL     DOLIT
      0012EF 00 1F                 3187         .word      31
      0012F1 CD 06 77         [ 4] 3188         CALL     ANDD
      0012F4 CC 08 3D         [ 2] 3189         JP     PLUS
                                   3190 
                                   3191 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3192 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   3193 ;       Compare u cells in two
                                   3194 ;       strings. Return 0 if identical.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                                   3195 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0012F7                       3196         _HEADER SAMEQ,5,"SAME?"
      0012F7 12 E3                    1         .word LINK 
                           0012F9     2         LINK=.
      0012F9 05                       3         .byte 5  
      0012FA 53 41 4D 45 3F           4         .ascii "SAME?"
      0012FF                          5         SAMEQ:
      0012FF CD 0B B0         [ 4] 3197         CALL     ONEM
      001302 CD 05 E3         [ 4] 3198         CALL     TOR
      001305 20 29            [ 2] 3199         JRA     SAME2
      001307 CD 06 42         [ 4] 3200 SAME1:  CALL     OVER
      00130A CD 05 46         [ 4] 3201         CALL     RAT
      00130D CD 08 3D         [ 4] 3202         CALL     PLUS
      001310 CD 05 02         [ 4] 3203         CALL     CAT
      001313 CD 06 42         [ 4] 3204         CALL     OVER
      001316 CD 05 46         [ 4] 3205         CALL     RAT
      001319 CD 08 3D         [ 4] 3206         CALL     PLUS
      00131C CD 05 02         [ 4] 3207         CALL     CAT
      00131F CD 08 D3         [ 4] 3208         CALL     SUBB
      001322 CD 07 CD         [ 4] 3209         CALL     QDUP
      001325 CD 04 99         [ 4] 3210         CALL     QBRAN
      001328 13 30                 3211         .word      SAME2
      00132A CD 05 35         [ 4] 3212         CALL     RFROM
      00132D CC 06 10         [ 2] 3213         JP     DROP
      001330 CD 04 84         [ 4] 3214 SAME2:  CALL     DONXT
      001333 13 07                 3215         .word      SAME1
      001335 CC 0C 0F         [ 2] 3216         JP     ZERO
                                   3217 
                                   3218 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3219 ;       find    ( a va -- ca na | a F )
                                   3220 ;       Search vocabulary for string.
                                   3221 ;       Return ca and na if succeeded.
                                   3222 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001338                       3223         _HEADER FIND,4,"FIND"
      001338 12 F9                    1         .word LINK 
                           00133A     2         LINK=.
      00133A 04                       3         .byte 4  
      00133B 46 49 4E 44              4         .ascii "FIND"
      00133F                          5         FIND:
      00133F CD 06 2A         [ 4] 3224         CALL     SWAPP
      001342 CD 06 1A         [ 4] 3225         CALL     DUPP
      001345 CD 05 02         [ 4] 3226         CALL     CAT
      001348 CD 06 EF         [ 4] 3227         CALL     TEMP
      00134B CD 04 D2         [ 4] 3228         CALL     STORE
      00134E CD 06 1A         [ 4] 3229         CALL     DUPP
      001351 CD 04 E4         [ 4] 3230         CALL     AT
      001354 CD 05 E3         [ 4] 3231         CALL     TOR
      001357 CD 0B 78         [ 4] 3232         CALL     CELLP
      00135A CD 06 2A         [ 4] 3233         CALL     SWAPP
      00135D CD 04 E4         [ 4] 3234 FIND1:  CALL     AT
      001360 CD 06 1A         [ 4] 3235         CALL     DUPP
      001363 CD 04 99         [ 4] 3236         CALL     QBRAN
      001366 13 9C                 3237         .word      FIND6
      001368 CD 06 1A         [ 4] 3238         CALL     DUPP
      00136B CD 04 E4         [ 4] 3239         CALL     AT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      00136E CD 04 70         [ 4] 3240         CALL     DOLIT
      001371 1F 7F                 3241         .word      MASKK
      001373 CD 06 77         [ 4] 3242         CALL     ANDD
      001376 CD 05 46         [ 4] 3243         CALL     RAT
      001379 CD 06 A0         [ 4] 3244         CALL     XORR
      00137C CD 04 99         [ 4] 3245         CALL     QBRAN
      00137F 13 8B                 3246         .word      FIND2
      001381 CD 0B 78         [ 4] 3247         CALL     CELLP
      001384 CD 04 70         [ 4] 3248         CALL     DOLIT
      001387 FF FF                 3249         .word     0xFFFF
      001389 20 0C            [ 2] 3250         JRA     FIND3
      00138B CD 0B 78         [ 4] 3251 FIND2:  CALL     CELLP
      00138E CD 06 EF         [ 4] 3252         CALL     TEMP
      001391 CD 04 E4         [ 4] 3253         CALL     AT
      001394 CD 12 FF         [ 4] 3254         CALL     SAMEQ
      001397 CD 04 B5         [ 4] 3255 FIND3:  CALL     BRAN
      00139A 13 AB                 3256         .word      FIND4
      00139C CD 05 35         [ 4] 3257 FIND6:  CALL     RFROM
      00139F CD 06 10         [ 4] 3258         CALL     DROP
      0013A2 CD 06 2A         [ 4] 3259         CALL     SWAPP
      0013A5 CD 0B 87         [ 4] 3260         CALL     CELLM
      0013A8 CC 06 2A         [ 2] 3261         JP     SWAPP
      0013AB CD 04 99         [ 4] 3262 FIND4:  CALL     QBRAN
      0013AE 13 B8                 3263         .word      FIND5
      0013B0 CD 0B 87         [ 4] 3264         CALL     CELLM
      0013B3 CD 0B 87         [ 4] 3265         CALL     CELLM
      0013B6 20 A5            [ 2] 3266         JRA     FIND1
      0013B8 CD 05 35         [ 4] 3267 FIND5:  CALL     RFROM
      0013BB CD 06 10         [ 4] 3268         CALL     DROP
      0013BE CD 06 2A         [ 4] 3269         CALL     SWAPP
      0013C1 CD 06 10         [ 4] 3270         CALL     DROP
      0013C4 CD 0B 87         [ 4] 3271         CALL     CELLM
      0013C7 CD 06 1A         [ 4] 3272         CALL     DUPP
      0013CA CD 12 E9         [ 4] 3273         CALL     NAMET
      0013CD CC 06 2A         [ 2] 3274         JP     SWAPP
                                   3275 
                                   3276 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3277 ;       NAME?   ( a -- ca na | a F )
                                   3278 ;       Search vocabularies for a string.
                                   3279 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0013D0                       3280         _HEADER NAMEQ,5,"NAME?"
      0013D0 13 3A                    1         .word LINK 
                           0013D2     2         LINK=.
      0013D2 05                       3         .byte 5  
      0013D3 4E 41 4D 45 3F           4         .ascii "NAME?"
      0013D8                          5         NAMEQ:
      0013D8 CD 07 63         [ 4] 3281         CALL   CNTXT
      0013DB CC 13 3F         [ 2] 3282         JP     FIND
                                   3283 
                                   3284 ;; Terminal response
                                   3285 
                                   3286 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3287 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3288 ;       Backup cursor by one character.
                                   3289 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      0013DE                       3290         _HEADER BKSP,2,"^H"
      0013DE 13 D2                    1         .word LINK 
                           0013E0     2         LINK=.
      0013E0 02                       3         .byte 2  
      0013E1 5E 48                    4         .ascii "^H"
      0013E3                          5         BKSP:
      0013E3 CD 05 E3         [ 4] 3291         CALL     TOR
      0013E6 CD 06 42         [ 4] 3292         CALL     OVER
      0013E9 CD 05 35         [ 4] 3293         CALL     RFROM
      0013EC CD 06 2A         [ 4] 3294         CALL     SWAPP
      0013EF CD 06 42         [ 4] 3295         CALL     OVER
      0013F2 CD 06 A0         [ 4] 3296         CALL     XORR
      0013F5 CD 04 99         [ 4] 3297         CALL     QBRAN
      0013F8 14 13                 3298         .word      BACK1
      0013FA CD 04 70         [ 4] 3299         CALL     DOLIT
      0013FD 00 08                 3300         .word      BKSPP
      0013FF CD 04 37         [ 4] 3301         CALL     EMIT
      001402 CD 0B B0         [ 4] 3302         CALL     ONEM
      001405 CD 0C 02         [ 4] 3303         CALL     BLANK
      001408 CD 04 37         [ 4] 3304         CALL     EMIT
      00140B CD 04 70         [ 4] 3305         CALL     DOLIT
      00140E 00 08                 3306         .word      BKSPP
      001410 CC 04 37         [ 2] 3307         JP     EMIT
      001413 81               [ 4] 3308 BACK1:  RET
                                   3309 
                                   3310 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3311 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3312 ;       Accept and echo key stroke
                                   3313 ;       and bump cursor.
                                   3314 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001414                       3315         _HEADER TAP,3,"TAP"
      001414 13 E0                    1         .word LINK 
                           001416     2         LINK=.
      001416 03                       3         .byte 3  
      001417 54 41 50                 4         .ascii "TAP"
      00141A                          5         TAP:
      00141A CD 06 1A         [ 4] 3316         CALL     DUPP
      00141D CD 04 37         [ 4] 3317         CALL     EMIT
      001420 CD 06 42         [ 4] 3318         CALL     OVER
      001423 CD 04 F1         [ 4] 3319         CALL     CSTOR
      001426 CC 0B A3         [ 2] 3320         JP     ONEP
                                   3321 
                                   3322 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3323 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3324 ;       Process a key stroke,
                                   3325 ;       CR,LF or backspace.
                                   3326 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001429                       3327         _HEADER KTAP,4,"KTAP"
      001429 14 16                    1         .word LINK 
                           00142B     2         LINK=.
      00142B 04                       3         .byte 4  
      00142C 4B 54 41 50              4         .ascii "KTAP"
      001430                          5         KTAP:
      001430 CD 06 1A         [ 4] 3328         CALL     DUPP
      001433 CD 04 70         [ 4] 3329         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                           000001  3330 .if EOL_CR
      001436 00 0D                 3331         .word   CRR
                           000000  3332 .else ; EOL_LF 
                                   3333         .word   LF
                                   3334 .endif 
      001438 CD 06 A0         [ 4] 3335         CALL     XORR
      00143B CD 04 99         [ 4] 3336         CALL     QBRAN
      00143E 14 56                 3337         .word      KTAP2
      001440 CD 04 70         [ 4] 3338         CALL     DOLIT
      001443 00 08                 3339         .word      BKSPP
      001445 CD 06 A0         [ 4] 3340         CALL     XORR
      001448 CD 04 99         [ 4] 3341         CALL     QBRAN
      00144B 14 53                 3342         .word      KTAP1
      00144D CD 0C 02         [ 4] 3343         CALL     BLANK
      001450 CC 14 1A         [ 2] 3344         JP     TAP
      001453 CC 13 E3         [ 2] 3345 KTAP1:  JP     BKSP
      001456 CD 06 10         [ 4] 3346 KTAP2:  CALL     DROP
      001459 CD 06 2A         [ 4] 3347         CALL     SWAPP
      00145C CD 06 10         [ 4] 3348         CALL     DROP
      00145F CC 06 1A         [ 2] 3349         JP     DUPP
                                   3350 
                                   3351 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3352 ;       accept  ( b u -- b u )
                                   3353 ;       Accept characters to input
                                   3354 ;       buffer. Return with actual count.
                                   3355 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001462                       3356         _HEADER ACCEP,6,"ACCEPT"
      001462 14 2B                    1         .word LINK 
                           001464     2         LINK=.
      001464 06                       3         .byte 6  
      001465 41 43 43 45 50 54        4         .ascii "ACCEPT"
      00146B                          5         ACCEP:
      00146B CD 06 42         [ 4] 3357         CALL     OVER
      00146E CD 08 3D         [ 4] 3358         CALL     PLUS
      001471 CD 06 42         [ 4] 3359         CALL     OVER
      001474 CD 08 28         [ 4] 3360 ACCP1:  CALL     DDUP
      001477 CD 06 A0         [ 4] 3361         CALL     XORR
      00147A CD 04 99         [ 4] 3362         CALL     QBRAN
      00147D 14 9F                 3363         .word      ACCP4
      00147F CD 10 01         [ 4] 3364         CALL     KEY
      001482 CD 06 1A         [ 4] 3365         CALL     DUPP
      001485 CD 0C 02         [ 4] 3366         CALL     BLANK
      001488 CD 04 70         [ 4] 3367         CALL     DOLIT
      00148B 00 7F                 3368         .word      127
      00148D CD 09 97         [ 4] 3369         CALL     WITHI
      001490 CD 04 99         [ 4] 3370         CALL     QBRAN
      001493 14 9A                 3371         .word      ACCP2
      001495 CD 14 1A         [ 4] 3372         CALL     TAP
      001498 20 03            [ 2] 3373         JRA     ACCP3
      00149A CD 14 30         [ 4] 3374 ACCP2:  CALL     KTAP
      00149D 20 D5            [ 2] 3375 ACCP3:  JRA     ACCP1
      00149F CD 06 10         [ 4] 3376 ACCP4:  CALL     DROP
      0014A2 CD 06 42         [ 4] 3377         CALL     OVER
      0014A5 CC 08 D3         [ 2] 3378         JP     SUBB
                                   3379 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                   3380 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3381 ;       QUERY   ( -- )
                                   3382 ;       Accept input stream to
                                   3383 ;       terminal input buffer.
                                   3384 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014A8                       3385         _HEADER QUERY,5,"QUERY"
      0014A8 14 64                    1         .word LINK 
                           0014AA     2         LINK=.
      0014AA 05                       3         .byte 5  
      0014AB 51 55 45 52 59           4         .ascii "QUERY"
      0014B0                          5         QUERY:
      0014B0 CD 0D 0B         [ 4] 3386         CALL     TIB
      0014B3 CD 04 70         [ 4] 3387         CALL     DOLIT
      0014B6 00 50                 3388         .word      80
      0014B8 CD 14 6B         [ 4] 3389         CALL     ACCEP
      0014BB CD 07 0E         [ 4] 3390         CALL     NTIB
      0014BE CD 04 D2         [ 4] 3391         CALL     STORE
      0014C1 CD 06 10         [ 4] 3392         CALL     DROP
      0014C4 CD 0C 0F         [ 4] 3393         CALL     ZERO
      0014C7 CD 06 FE         [ 4] 3394         CALL     INN
      0014CA CC 04 D2         [ 2] 3395         JP     STORE
                                   3396 
                                   3397 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3398 ;       ABORT   ( -- )
                                   3399 ;       Reset data stack and
                                   3400 ;       jump to QUIT.
                                   3401 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014CD                       3402         _HEADER ABORT,5,"ABORT"
      0014CD 14 AA                    1         .word LINK 
                           0014CF     2         LINK=.
      0014CF 05                       3         .byte 5  
      0014D0 41 42 4F 52 54           4         .ascii "ABORT"
      0014D5                          5         ABORT:
      0014D5 CD 15 C9         [ 4] 3403         CALL     PRESE
      0014D8 CC 15 E6         [ 2] 3404         JP     QUIT
                                   3405 
                                   3406 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3407 ;       abort"  ( f -- )
                                   3408 ;       Run time routine of ABORT".
                                   3409 ;       Abort with a message.
                                   3410 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014DB                       3411         _HEADER ABORQ,COMPO+6,'ABORT"'
      0014DB 14 CF                    1         .word LINK 
                           0014DD     2         LINK=.
      0014DD 46                       3         .byte COMPO+6  
      0014DE 41 42 4F 52 54 22        4         .ascii 'ABORT"'
      0014E4                          5         ABORQ:
      0014E4 CD 04 99         [ 4] 3412         CALL     QBRAN
      0014E7 15 03                 3413         .word      ABOR2   ;text flag
      0014E9 CD 10 8C         [ 4] 3414         CALL     DOSTR
      0014EC CD 10 39         [ 4] 3415 ABOR1:  CALL     SPACE
      0014EF CD 0C D2         [ 4] 3416         CALL     COUNT
      0014F2 CD 10 63         [ 4] 3417         CALL     TYPES
      0014F5 CD 04 70         [ 4] 3418         CALL     DOLIT
      0014F8 00 3F                 3419         .word     63 ; "?"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      0014FA CD 04 37         [ 4] 3420         CALL     EMIT
      0014FD CD 10 7C         [ 4] 3421         CALL     CR
      001500 CC 14 D5         [ 2] 3422         JP     ABORT   ;pass error string
      001503 CD 10 8C         [ 4] 3423 ABOR2:  CALL     DOSTR
      001506 CC 06 10         [ 2] 3424         JP     DROP
                                   3425 
                                   3426 ;; The text interpreter
                                   3427 
                                   3428 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3429 ;       $INTERPRET      ( a -- )
                                   3430 ;       Interpret a word. If failed,
                                   3431 ;       try to convert it to an integer.
                                   3432 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001509                       3433         _HEADER INTER,10,"$INTERPRET"
      001509 14 DD                    1         .word LINK 
                           00150B     2         LINK=.
      00150B 0A                       3         .byte 10  
      00150C 24 49 4E 54 45 52 50     4         .ascii "$INTERPRET"
             52 45 54
      001516                          5         INTER:
      001516 CD 13 D8         [ 4] 3434         CALL     NAMEQ
      001519 CD 07 CD         [ 4] 3435         CALL     QDUP    ;?defined
      00151C CD 04 99         [ 4] 3436         CALL     QBRAN
      00151F 15 40                 3437         .word      INTE1
      001521 CD 04 E4         [ 4] 3438         CALL     AT
      001524 CD 04 70         [ 4] 3439         CALL     DOLIT
      001527 40 00                 3440 	.word       0x4000	; COMPO*256
      001529 CD 06 77         [ 4] 3441         CALL     ANDD    ;?compile only lexicon bits
      00152C CD 14 E4         [ 4] 3442         CALL     ABORQ
      00152F 0D                    3443         .byte      13
      001530 20 63 6F 6D 70 69 6C  3444         .ascii     " compile only"
             65 20 6F 6E 6C 79
      00153D CC 04 C5         [ 2] 3445         JP      EXECU
      001540                       3446 INTE1:  
      001540 CD 0F 62         [ 4] 3447         CALL     NUMBQ   ;convert a number
      001543 CD 04 99         [ 4] 3448         CALL     QBRAN
      001546 14 EC                 3449         .word    ABOR1
      001548 81               [ 4] 3450         RET
                                   3451 
                                   3452 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3453 ;       [       ( -- )
                                   3454 ;       Start  text interpreter.
                                   3455 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001549                       3456         _HEADER LBRAC,IMEDD+1,"["
      001549 15 0B                    1         .word LINK 
                           00154B     2         LINK=.
      00154B 81                       3         .byte IMEDD+1  
      00154C 5B                       4         .ascii "["
      00154D                          5         LBRAC:
      00154D CD 04 70         [ 4] 3457         CALL   DOLIT
      001550 15 16                 3458         .word  INTER
      001552 CD 07 41         [ 4] 3459         CALL   TEVAL
      001555 CC 04 D2         [ 2] 3460         JP     STORE
                                   3461 
                                   3462 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                   3463 ;       .OK     ( -- )
                                   3464 ;       Display 'ok' while interpreting.
                                   3465 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001558                       3466         _HEADER DOTOK,3,".OK"
      001558 15 4B                    1         .word LINK 
                           00155A     2         LINK=.
      00155A 03                       3         .byte 3  
      00155B 2E 4F 4B                 4         .ascii ".OK"
      00155E                          5         DOTOK:
      00155E CD 04 70         [ 4] 3467         CALL     DOLIT
      001561 15 16                 3468         .word      INTER
      001563 CD 07 41         [ 4] 3469         CALL     TEVAL
      001566 CD 04 E4         [ 4] 3470         CALL     AT
      001569 CD 08 FB         [ 4] 3471         CALL     EQUAL
      00156C CD 04 99         [ 4] 3472         CALL     QBRAN
      00156F 15 78                 3473         .word      DOTO1
      001571 CD 10 A9         [ 4] 3474         CALL     DOTQP
      001574 03                    3475         .byte      3
      001575 20 6F 6B              3476         .ascii     " ok"
      001578 CC 10 7C         [ 2] 3477 DOTO1:  JP     CR
                                   3478 
                                   3479 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3480 ;       ?STACK  ( -- )
                                   3481 ;       Abort if stack underflows.
                                   3482 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00157B                       3483         _HEADER QSTAC,6,"?STACK"
      00157B 15 5A                    1         .word LINK 
                           00157D     2         LINK=.
      00157D 06                       3         .byte 6  
      00157E 3F 53 54 41 43 4B        4         .ascii "?STACK"
      001584                          5         QSTAC:
      001584 CD 0C 51         [ 4] 3484         CALL     DEPTH
      001587 CD 06 51         [ 4] 3485         CALL     ZLESS   ;check only for underflow
      00158A CD 14 E4         [ 4] 3486         CALL     ABORQ
      00158D 0B                    3487         .byte      11
      00158E 20 75 6E 64 65 72 66  3488         .ascii     " underflow "
             6C 6F 77 20
      001599 81               [ 4] 3489         RET
                                   3490 
                                   3491 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3492 ;       EVAL    ( -- )
                                   3493 ;       Interpret  input stream.
                                   3494 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00159A                       3495         _HEADER EVAL,4,"EVAL"
      00159A 15 7D                    1         .word LINK 
                           00159C     2         LINK=.
      00159C 04                       3         .byte 4  
      00159D 45 56 41 4C              4         .ascii "EVAL"
      0015A1                          5         EVAL:
      0015A1 CD 12 DB         [ 4] 3496 EVAL1:  CALL     TOKEN
      0015A4 CD 06 1A         [ 4] 3497         CALL     DUPP
      0015A7 CD 05 02         [ 4] 3498         CALL     CAT     ;?input stream empty
      0015AA CD 04 99         [ 4] 3499         CALL     QBRAN
      0015AD 15 BA                 3500         .word    EVAL2
      0015AF CD 07 41         [ 4] 3501         CALL     TEVAL
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      0015B2 CD 0D 1F         [ 4] 3502         CALL     ATEXE
      0015B5 CD 15 84         [ 4] 3503         CALL     QSTAC   ;evaluate input, check stack
      0015B8 20 E7            [ 2] 3504         JRA     EVAL1 
      0015BA CD 06 10         [ 4] 3505 EVAL2:  CALL     DROP
      0015BD CC 15 5E         [ 2] 3506         JP       DOTOK
                                   3507 
                                   3508 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3509 ;       PRESET  ( -- )
                                   3510 ;       Reset data stack pointer and
                                   3511 ;       terminal input buffer.
                                   3512 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015C0                       3513         _HEADER PRESE,6,"PRESET"
      0015C0 15 9C                    1         .word LINK 
                           0015C2     2         LINK=.
      0015C2 06                       3         .byte 6  
      0015C3 50 52 45 53 45 54        4         .ascii "PRESET"
      0015C9                          5         PRESE:
      0015C9 CD 04 70         [ 4] 3514         CALL     DOLIT
      0015CC 16 80                 3515         .word      SPP
      0015CE CD 06 07         [ 4] 3516         CALL     SPSTO
      0015D1 CD 04 70         [ 4] 3517         CALL     DOLIT
      0015D4 17 00                 3518         .word      TIBB
      0015D6 CD 07 0E         [ 4] 3519         CALL     NTIB
      0015D9 CD 0B 78         [ 4] 3520         CALL     CELLP
      0015DC CC 04 D2         [ 2] 3521         JP     STORE
                                   3522 
                                   3523 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3524 ;       QUIT    ( -- )
                                   3525 ;       Reset return stack pointer
                                   3526 ;       and start text interpreter.
                                   3527 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015DF                       3528         _HEADER QUIT,4,"QUIT"
      0015DF 15 C2                    1         .word LINK 
                           0015E1     2         LINK=.
      0015E1 04                       3         .byte 4  
      0015E2 51 55 49 54              4         .ascii "QUIT"
      0015E6                          5         QUIT:
      0015E6 CD 04 70         [ 4] 3529         CALL     DOLIT
      0015E9 17 FF                 3530         .word      RPP
      0015EB CD 05 1F         [ 4] 3531         CALL     RPSTO   ;reset return stack pointer
      0015EE CD 15 4D         [ 4] 3532 QUIT1:  CALL     LBRAC   ;start interpretation
      0015F1 CD 14 B0         [ 4] 3533 QUIT2:  CALL     QUERY   ;get input
      0015F4 CD 15 A1         [ 4] 3534         CALL     EVAL
      0015F7 20 F8            [ 2] 3535         JRA     QUIT2   ;continue till error
                                   3536 
                                   3537 ;; The compiler
                                   3538 
                                   3539 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3540 ;       '       ( -- ca )
                                   3541 ;       Search vocabularies for
                                   3542 ;       next word in input stream.
                                   3543 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015F9                       3544         _HEADER TICK,1,"'"
      0015F9 15 E1                    1         .word LINK 
                           0015FB     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      0015FB 01                       3         .byte 1  
      0015FC 27                       4         .ascii "'"
      0015FD                          5         TICK:
      0015FD CD 12 DB         [ 4] 3545         CALL     TOKEN
      001600 CD 13 D8         [ 4] 3546         CALL     NAMEQ   ;?defined
      001603 CD 04 99         [ 4] 3547         CALL     QBRAN
      001606 14 EC                 3548         .word      ABOR1
      001608 81               [ 4] 3549         RET     ;yes, push code address
                                   3550 
                                   3551 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3552 ;       ALLOT   ( n -- )
                                   3553 ;       Allocate n bytes to RAM 
                                   3554 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001609                       3555         _HEADER ALLOT,5,"ALLOT"
      001609 15 FB                    1         .word LINK 
                           00160B     2         LINK=.
      00160B 05                       3         .byte 5  
      00160C 41 4C 4C 4F 54           4         .ascii "ALLOT"
      001611                          5         ALLOT:
      001611 CD 07 71         [ 4] 3556         CALL     VPP
                                   3557 ; must update APP_VP each time VP is modidied
      001614 CD 0C 7F         [ 4] 3558         call PSTOR 
      001617 CC 1E 37         [ 2] 3559         jp UPDATVP 
                                   3560 
                                   3561 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3562 ;       ,       ( w -- )
                                   3563 ;         Compile an integer into
                                   3564 ;         variable space.
                                   3565 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00161A                       3566         _HEADER COMMA,1,^/"\,"/
      00161A 16 0B                    1         .word LINK 
                           00161C     2         LINK=.
      00161C 01                       3         .byte 1  
      00161D 5C 2C                    4         .ascii "\,"
      00161F                          5         COMMA:
      00161F CD 0C E9         [ 4] 3567         CALL     HERE
      001622 CD 06 1A         [ 4] 3568         CALL     DUPP
      001625 CD 0B 78         [ 4] 3569         CALL     CELLP   ;cell boundary
      001628 CD 07 71         [ 4] 3570         CALL     VPP
      00162B CD 04 D2         [ 4] 3571         CALL     STORE
      00162E CC 04 D2         [ 2] 3572         JP     STORE
                                   3573 
                                   3574 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3575 ;       C,      ( c -- )
                                   3576 ;       Compile a byte into
                                   3577 ;       variables space.
                                   3578 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001631                       3579         _HEADER CCOMMA,2,^/"C,"/
      001631 16 1C                    1         .word LINK 
                           001633     2         LINK=.
      001633 02                       3         .byte 2  
      001634 43 2C                    4         .ascii "C,"
      001636                          5         CCOMMA:
      001636 CD 0C E9         [ 4] 3580         CALL     HERE
      001639 CD 06 1A         [ 4] 3581         CALL     DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      00163C CD 0B A3         [ 4] 3582         CALL     ONEP
      00163F CD 07 71         [ 4] 3583         CALL     VPP
      001642 CD 04 D2         [ 4] 3584         CALL     STORE
      001645 CC 04 F1         [ 2] 3585         JP     CSTOR
                                   3586 
                                   3587 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3588 ;       [COMPILE]       ( -- ; <string> )
                                   3589 ;       Compile next immediate
                                   3590 ;       word into code dictionary.
                                   3591 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001648                       3592         _HEADER BCOMP,COMPO+IMEDD+9,"[COMPILE]"
      001648 16 33                    1         .word LINK 
                           00164A     2         LINK=.
      00164A C9                       3         .byte COMPO+IMEDD+9  
      00164B 5B 43 4F 4D 50 49 4C     4         .ascii "[COMPILE]"
             45 5D
      001654                          5         BCOMP:
      001654 CD 15 FD         [ 4] 3593         CALL     TICK
      001657 CC 19 3B         [ 2] 3594         JP     JSRC
                                   3595 
                                   3596 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3597 ;       COMPILE ( -- )
                                   3598 ;       Compile next jsr in
                                   3599 ;       colon list to code dictionary.
                                   3600 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00165A                       3601         _HEADER COMPI,COMPO+7,"COMPILE"
      00165A 16 4A                    1         .word LINK 
                           00165C     2         LINK=.
      00165C 47                       3         .byte COMPO+7  
      00165D 43 4F 4D 50 49 4C 45     4         .ascii "COMPILE"
      001664                          5         COMPI:
      001664 CD 05 35         [ 4] 3602         CALL     RFROM
      001667 CD 06 1A         [ 4] 3603         CALL     DUPP
      00166A CD 04 E4         [ 4] 3604         CALL     AT
      00166D CD 19 3B         [ 4] 3605         CALL     JSRC    ;compile subroutine
      001670 CD 0B 78         [ 4] 3606         CALL     CELLP
      001673 90 93            [ 1] 3607         ldw y,x 
      001675 90 FE            [ 2] 3608         ldw y,(y)
      001677 1C 00 02         [ 2] 3609         addw x,#CELLL 
      00167A 90 FC            [ 2] 3610         jp (y)
                                   3611 
                                   3612 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3613 ;       LITERAL ( w -- )
                                   3614 ;       Compile tos to dictionary
                                   3615 ;       as an integer literal.
                                   3616 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00167C                       3617         _HEADER LITER,COMPO+IMEDD+7,"LITERAL"
      00167C 16 5C                    1         .word LINK 
                           00167E     2         LINK=.
      00167E C7                       3         .byte COMPO+IMEDD+7  
      00167F 4C 49 54 45 52 41 4C     4         .ascii "LITERAL"
      001686                          5         LITER:
      001686 CD 16 64         [ 4] 3618         CALL     COMPI
      001689 04 70                 3619         .word DOLIT 
      00168B CC 16 1F         [ 2] 3620         JP     COMMA
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                   3621 
                                   3622 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3623 ;       $,"     ( -- )
                                   3624 ;       Compile a literal string
                                   3625 ;       up to next " .
                                   3626 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3627 ;        _HEADER STRCQ,3,^/'$,"'/
      00168E                       3628 STRCQ:
      00168E CD 04 70         [ 4] 3629         CALL     DOLIT
      001691 00 22                 3630         .word     34	; "
      001693 CD 12 1A         [ 4] 3631         CALL     PARSE
      001696 CD 0C E9         [ 4] 3632         CALL     HERE
      001699 CD 0D BA         [ 4] 3633         CALL     PACKS   ;string to code dictionary
      00169C CD 0C D2         [ 4] 3634         CALL     COUNT
      00169F CD 08 3D         [ 4] 3635         CALL     PLUS    ;calculate aligned end of string
      0016A2 CD 07 71         [ 4] 3636         CALL     VPP
      0016A5 CC 04 D2         [ 2] 3637         JP     STORE
                                   3638 
                                   3639 ;; Structures
                                   3640 
                                   3641 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3642 ;       FOR     ( -- a )
                                   3643 ;       Start a FOR-NEXT loop
                                   3644 ;       structure in a colon definition.
                                   3645 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016A8                       3646         _HEADER FOR,COMPO+IMEDD+3,"FOR"
      0016A8 16 7E                    1         .word LINK 
                           0016AA     2         LINK=.
      0016AA C3                       3         .byte COMPO+IMEDD+3  
      0016AB 46 4F 52                 4         .ascii "FOR"
      0016AE                          5         FOR:
      0016AE CD 16 64         [ 4] 3647         CALL     COMPI
      0016B1 05 E3                 3648         .word TOR 
      0016B3 CC 0C E9         [ 2] 3649         JP     HERE
                                   3650 
                                   3651 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3652 ;       NEXT    ( a -- )
                                   3653 ;       Terminate a FOR-NEXT loop.
                                   3654 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016B6                       3655         _HEADER NEXT,COMPO+IMEDD+4,"NEXT"
      0016B6 16 AA                    1         .word LINK 
                           0016B8     2         LINK=.
      0016B8 C4                       3         .byte COMPO+IMEDD+4  
      0016B9 4E 45 58 54              4         .ascii "NEXT"
      0016BD                          5         NEXT:
      0016BD CD 16 64         [ 4] 3656         CALL     COMPI
      0016C0 04 84                 3657         .word DONXT 
      0016C2 CD 07 BD         [ 4] 3658         call ADRADJ
      0016C5 CC 16 1F         [ 2] 3659         JP     COMMA
                                   3660 
                                   3661 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3662 ;       I ( -- n )
                                   3663 ;       stack COUNTER
                                   3664 ;       of innermost FOR-NEXT  
                                   3665 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      0016C8                       3666         _HEADER IFETCH,1,"I"
      0016C8 16 B8                    1         .word LINK 
                           0016CA     2         LINK=.
      0016CA 01                       3         .byte 1  
      0016CB 49                       4         .ascii "I"
      0016CC                          5         IFETCH:
      0016CC 1D 00 02         [ 2] 3667         subw x,#CELLL 
      0016CF 16 03            [ 2] 3668         ldw y,(3,sp)
      0016D1 FF               [ 2] 3669         ldw (x),y 
      0016D2 81               [ 4] 3670         ret 
                                   3671 
                                   3672 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3673 ;       J ( -- n )
                                   3674 ;   stack COUNTER
                                   3675 ;   of outer FOR-NEXT  
                                   3676 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016D3                       3677         _HEADER JFETCH,1,"J"
      0016D3 16 CA                    1         .word LINK 
                           0016D5     2         LINK=.
      0016D5 01                       3         .byte 1  
      0016D6 4A                       4         .ascii "J"
      0016D7                          5         JFETCH:
      0016D7 1D 00 02         [ 2] 3678         SUBW X,#CELLL 
      0016DA 16 05            [ 2] 3679         LDW Y,(5,SP)
      0016DC FF               [ 2] 3680         LDW (X),Y 
      0016DD 81               [ 4] 3681         RET 
                                   3682 
                                   3683 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3684 ;       BEGIN   ( -- a )
                                   3685 ;       Start an infinite or
                                   3686 ;       indefinite loop structure.
                                   3687 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016DE                       3688         _HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
      0016DE 16 D5                    1         .word LINK 
                           0016E0     2         LINK=.
      0016E0 C5                       3         .byte COMPO+IMEDD+5  
      0016E1 42 45 47 49 4E           4         .ascii "BEGIN"
      0016E6                          5         BEGIN:
      0016E6 CC 0C E9         [ 2] 3689         JP     HERE
                                   3690 
                                   3691 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3692 ;       UNTIL   ( a -- )
                                   3693 ;       Terminate a BEGIN-UNTIL
                                   3694 ;       indefinite loop structure.
                                   3695 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016E9                       3696         _HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
      0016E9 16 E0                    1         .word LINK 
                           0016EB     2         LINK=.
      0016EB C5                       3         .byte COMPO+IMEDD+5  
      0016EC 55 4E 54 49 4C           4         .ascii "UNTIL"
      0016F1                          5         UNTIL:
      0016F1 CD 16 64         [ 4] 3697         CALL     COMPI
      0016F4 04 99                 3698         .word    QBRAN 
      0016F6 CD 07 BD         [ 4] 3699         call ADRADJ
      0016F9 CC 16 1F         [ 2] 3700         JP     COMMA
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                   3701 
                                   3702 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3703 ;       AGAIN   ( a -- )
                                   3704 ;       Terminate a BEGIN-AGAIN
                                   3705 ;       infinite loop structure.
                                   3706 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016FC                       3707         _HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
      0016FC 16 EB                    1         .word LINK 
                           0016FE     2         LINK=.
      0016FE C5                       3         .byte COMPO+IMEDD+5  
      0016FF 41 47 41 49 4E           4         .ascii "AGAIN"
      001704                          5         AGAIN:
                           000001  3708 .if OPTIMIZE 
      001704                       3709         _DOLIT JPIMM 
      001704 CD 04 70         [ 4]    1     CALL DOLIT 
      001707 00 CC                    2     .word JPIMM 
      001709 CD 16 36         [ 4] 3710         CALL  CCOMMA
                           000000  3711 .else 
                                   3712         CALL     COMPI
                                   3713         .word BRAN
                                   3714 .endif 
      00170C CD 07 BD         [ 4] 3715         call ADRADJ 
      00170F CC 16 1F         [ 2] 3716         JP     COMMA
                                   3717 
                                   3718 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3719 ;       IF      ( -- A )
                                   3720 ;       Begin a conditional branch.
                                   3721 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001712                       3722         _HEADER IFF,COMPO+IMEDD+2,"IF"
      001712 16 FE                    1         .word LINK 
                           001714     2         LINK=.
      001714 C2                       3         .byte COMPO+IMEDD+2  
      001715 49 46                    4         .ascii "IF"
      001717                          5         IFF:
      001717 CD 16 64         [ 4] 3723         CALL     COMPI
      00171A 04 99                 3724         .word QBRAN
      00171C CD 0C E9         [ 4] 3725         CALL     HERE
      00171F CD 0C 0F         [ 4] 3726         CALL     ZERO
      001722 CC 16 1F         [ 2] 3727         JP     COMMA
                                   3728 
                                   3729 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3730 ;       THEN        ( A -- )
                                   3731 ;       Terminate a conditional 
                                   3732 ;       branch structure.
                                   3733 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001725                       3734         _HEADER THENN,COMPO+IMEDD+4,"THEN"
      001725 17 14                    1         .word LINK 
                           001727     2         LINK=.
      001727 C4                       3         .byte COMPO+IMEDD+4  
      001728 54 48 45 4E              4         .ascii "THEN"
      00172C                          5         THENN:
      00172C CD 0C E9         [ 4] 3735         CALL     HERE
      00172F CD 07 BD         [ 4] 3736         call ADRADJ 
      001732 CD 06 2A         [ 4] 3737         CALL     SWAPP
      001735 CC 04 D2         [ 2] 3738         JP     STORE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



                                   3739 
                                   3740 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3741 ;       ELSE        ( A -- A )
                                   3742 ;       Start the false clause in 
                                   3743 ;       an IF-ELSE-THEN structure.
                                   3744 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001738                       3745         _HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
      001738 17 27                    1         .word LINK 
                           00173A     2         LINK=.
      00173A C4                       3         .byte COMPO+IMEDD+4  
      00173B 45 4C 53 45              4         .ascii "ELSE"
      00173F                          5         ELSEE:
                           000001  3746 .if OPTIMIZE 
      00173F                       3747         _DOLIT JPIMM 
      00173F CD 04 70         [ 4]    1     CALL DOLIT 
      001742 00 CC                    2     .word JPIMM 
      001744 CD 16 36         [ 4] 3748         CALL CCOMMA 
                           000000  3749 .else 
                                   3750          CALL     COMPI
                                   3751         .word BRAN
                                   3752 .endif 
      001747 CD 0C E9         [ 4] 3753         CALL     HERE
      00174A CD 0C 0F         [ 4] 3754         CALL     ZERO
      00174D CD 16 1F         [ 4] 3755         CALL     COMMA
      001750 CD 06 2A         [ 4] 3756         CALL     SWAPP
      001753 CD 0C E9         [ 4] 3757         CALL     HERE
      001756 CD 07 BD         [ 4] 3758         call ADRADJ 
      001759 CD 06 2A         [ 4] 3759         CALL     SWAPP
      00175C CC 04 D2         [ 2] 3760         JP     STORE
                                   3761 
                                   3762 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3763 ;       AHEAD       ( -- A )
                                   3764 ;       Compile a forward branch
                                   3765 ;       instruction.
                                   3766 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00175F                       3767         _HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
      00175F 17 3A                    1         .word LINK 
                           001761     2         LINK=.
      001761 C5                       3         .byte COMPO+IMEDD+5  
      001762 41 48 45 41 44           4         .ascii "AHEAD"
      001767                          5         AHEAD:
                           000001  3768 .if OPTIMIZE 
      001767                       3769         _DOLIT JPIMM 
      001767 CD 04 70         [ 4]    1     CALL DOLIT 
      00176A 00 CC                    2     .word JPIMM 
      00176C CD 16 36         [ 4] 3770         CALL CCOMMA
                           000000  3771 .else 
                                   3772         CALL     COMPI
                                   3773         .word BRAN
                                   3774 .endif 
      00176F CD 0C E9         [ 4] 3775         CALL     HERE
      001772 CD 0C 0F         [ 4] 3776         CALL     ZERO
      001775 CC 16 1F         [ 2] 3777         JP     COMMA
                                   3778 
                                   3779 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



                                   3780 ;       WHILE       ( a -- A a )
                                   3781 ;       Conditional branch out of a 
                                   3782 ;       BEGIN-WHILE-REPEAT loop.
                                   3783 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001778                       3784         _HEADER WHILE,COMPO+IMEDD+5,"WHILE"
      001778 17 61                    1         .word LINK 
                           00177A     2         LINK=.
      00177A C5                       3         .byte COMPO+IMEDD+5  
      00177B 57 48 49 4C 45           4         .ascii "WHILE"
      001780                          5         WHILE:
      001780 CD 16 64         [ 4] 3785         CALL     COMPI
      001783 04 99                 3786         .word QBRAN
      001785 CD 0C E9         [ 4] 3787         CALL     HERE
      001788 CD 0C 0F         [ 4] 3788         CALL     ZERO
      00178B CD 16 1F         [ 4] 3789         CALL     COMMA
      00178E CC 06 2A         [ 2] 3790         JP     SWAPP
                                   3791 
                                   3792 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3793 ;       REPEAT      ( A a -- )
                                   3794 ;       Terminate a BEGIN-WHILE-REPEAT 
                                   3795 ;       indefinite loop.
                                   3796 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001791                       3797         _HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
      001791 17 7A                    1         .word LINK 
                           001793     2         LINK=.
      001793 C6                       3         .byte COMPO+IMEDD+6  
      001794 52 45 50 45 41 54        4         .ascii "REPEAT"
      00179A                          5         REPEA:
                           000001  3798 .if OPTIMIZE 
      00179A                       3799         _DOLIT JPIMM 
      00179A CD 04 70         [ 4]    1     CALL DOLIT 
      00179D 00 CC                    2     .word JPIMM 
      00179F CD 16 36         [ 4] 3800         CALL  CCOMMA
                           000000  3801 .else 
                                   3802         CALL     COMPI
                                   3803         .word BRAN
                                   3804 .endif 
      0017A2 CD 07 BD         [ 4] 3805         call ADRADJ 
      0017A5 CD 16 1F         [ 4] 3806         CALL     COMMA
      0017A8 CD 0C E9         [ 4] 3807         CALL     HERE
      0017AB CD 07 BD         [ 4] 3808         call ADRADJ 
      0017AE CD 06 2A         [ 4] 3809         CALL     SWAPP
      0017B1 CC 04 D2         [ 2] 3810         JP     STORE
                                   3811 
                                   3812 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3813 ;       AFT         ( a -- a A )
                                   3814 ;       Jump to THEN in a FOR-AFT-THEN-NEXT 
                                   3815 ;       loop the first time through.
                                   3816 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017B4                       3817         _HEADER AFT,COMPO+IMEDD+3,"AFT"
      0017B4 17 93                    1         .word LINK 
                           0017B6     2         LINK=.
      0017B6 C3                       3         .byte COMPO+IMEDD+3  
      0017B7 41 46 54                 4         .ascii "AFT"
      0017BA                          5         AFT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      0017BA CD 06 10         [ 4] 3818         CALL     DROP
      0017BD CD 17 67         [ 4] 3819         CALL     AHEAD
      0017C0 CD 0C E9         [ 4] 3820         CALL     HERE
      0017C3 CC 06 2A         [ 2] 3821         JP     SWAPP
                                   3822 
                                   3823 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3824 ;       ABORT"      ( -- ; <string> )
                                   3825 ;       Conditional abort with an error message.
                                   3826 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017C6                       3827         _HEADER ABRTQ,IMEDD+6,'ABORT"'
      0017C6 17 B6                    1         .word LINK 
                           0017C8     2         LINK=.
      0017C8 86                       3         .byte IMEDD+6  
      0017C9 41 42 4F 52 54 22        4         .ascii 'ABORT"'
      0017CF                          5         ABRTQ:
      0017CF CD 16 64         [ 4] 3828         CALL     COMPI
      0017D2 14 E4                 3829         .word ABORQ
      0017D4 CC 16 8E         [ 2] 3830         JP     STRCQ
                                   3831 
                                   3832 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3833 ;       $"     ( -- ; <string> )
                                   3834 ;       Compile an inline string literal.
                                   3835 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017D7                       3836         _HEADER STRQ,IMEDD+2,'$"'
      0017D7 17 C8                    1         .word LINK 
                           0017D9     2         LINK=.
      0017D9 82                       3         .byte IMEDD+2  
      0017DA 24 22                    4         .ascii '$"'
      0017DC                          5         STRQ:
      0017DC CD 16 64         [ 4] 3837         CALL     COMPI
      0017DF 10 A5                 3838         .word STRQP 
      0017E1 CC 16 8E         [ 2] 3839         JP     STRCQ
                                   3840 
                                   3841 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3842 ;       ."          ( -- ; <string> )
                                   3843 ;       Compile an inline string literal 
                                   3844 ;       to be typed out at run time.
                                   3845 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017E4                       3846         _HEADER DOTQ,IMEDD+2,'."'
      0017E4 17 D9                    1         .word LINK 
                           0017E6     2         LINK=.
      0017E6 82                       3         .byte IMEDD+2  
      0017E7 2E 22                    4         .ascii '."'
      0017E9                          5         DOTQ:
      0017E9 CD 16 64         [ 4] 3847         CALL     COMPI
      0017EC 10 A9                 3848         .word DOTQP 
      0017EE CC 16 8E         [ 2] 3849         JP     STRCQ
                                   3850 
                                   3851 ;; Name compiler
                                   3852 
                                   3853 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3854 ;       ?UNIQUE ( a -- a )
                                   3855 ;       Display a warning message
                                   3856 ;       if word already exists.
                                   3857 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      0017F1                       3858         _HEADER UNIQU,7,"?UNIQUE"
      0017F1 17 E6                    1         .word LINK 
                           0017F3     2         LINK=.
      0017F3 07                       3         .byte 7  
      0017F4 3F 55 4E 49 51 55 45     4         .ascii "?UNIQUE"
      0017FB                          5         UNIQU:
      0017FB CD 06 1A         [ 4] 3859         CALL     DUPP
      0017FE CD 13 D8         [ 4] 3860         CALL     NAMEQ   ;?name exists
      001801 CD 04 99         [ 4] 3861         CALL     QBRAN
      001804 18 1A                 3862         .word      UNIQ1
      001806 CD 10 A9         [ 4] 3863         CALL     DOTQP   ;redef are OK
      001809 07                    3864         .byte       7
      00180A 20 72 65 44 65 66 20  3865         .ascii     " reDef "       
      001811 CD 06 42         [ 4] 3866         CALL     OVER
      001814 CD 0C D2         [ 4] 3867         CALL     COUNT
      001817 CD 10 63         [ 4] 3868         CALL     TYPES   ;just in case
      00181A CC 06 10         [ 2] 3869 UNIQ1:  JP     DROP
                                   3870 
                                   3871 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3872 ;       $,n     ( na -- )
                                   3873 ;       Build a new dictionary name
                                   3874 ;       using string at na.
                                   3875 ; compile dans l'espace des variables 
                                   3876 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3877 ;        _HEADER SNAME,3,^/"$,n"/
      00181D                       3878 SNAME: 
      00181D CD 06 1A         [ 4] 3879         CALL     DUPP
      001820 CD 05 02         [ 4] 3880         CALL     CAT     ;?null input
      001823 CD 04 99         [ 4] 3881         CALL     QBRAN
      001826 18 53                 3882         .word      PNAM1
      001828 CD 17 FB         [ 4] 3883         CALL     UNIQU   ;?redefinition
      00182B CD 06 1A         [ 4] 3884         CALL     DUPP
      00182E CD 0C D2         [ 4] 3885         CALL     COUNT
      001831 CD 08 3D         [ 4] 3886         CALL     PLUS
      001834 CD 07 71         [ 4] 3887         CALL     VPP
      001837 CD 04 D2         [ 4] 3888         CALL     STORE
      00183A CD 06 1A         [ 4] 3889         CALL     DUPP
      00183D CD 07 8F         [ 4] 3890         CALL     LAST
      001840 CD 04 D2         [ 4] 3891         CALL     STORE   ;save na for vocabulary link
      001843 CD 0B 87         [ 4] 3892         CALL     CELLM   ;link address
      001846 CD 07 63         [ 4] 3893         CALL     CNTXT
      001849 CD 04 E4         [ 4] 3894         CALL     AT
      00184C CD 06 2A         [ 4] 3895         CALL     SWAPP
      00184F CD 04 D2         [ 4] 3896         CALL     STORE
      001852 81               [ 4] 3897         RET     ;save code pointer
      001853 CD 10 A5         [ 4] 3898 PNAM1:  CALL     STRQP
      001856 05                    3899         .byte      5
      001857 20 6E 61 6D 65        3900         .ascii     " name" ;null input
      00185C CC 14 EC         [ 2] 3901         JP     ABOR1
                                   3902 
                                   3903 ;; FORTH compiler
                                   3904 
                                   3905 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3906 ;       $COMPILE        ( a -- )
                                   3907 ;       Compile next word to
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                                   3908 ;       dictionary as a token or literal.
                                   3909 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00185F                       3910         _HEADER SCOMP,8,"$COMPILE"
      00185F 17 F3                    1         .word LINK 
                           001861     2         LINK=.
      001861 08                       3         .byte 8  
      001862 24 43 4F 4D 50 49 4C     4         .ascii "$COMPILE"
             45
      00186A                          5         SCOMP:
      00186A CD 13 D8         [ 4] 3911         CALL     NAMEQ
      00186D CD 07 CD         [ 4] 3912         CALL     QDUP    ;?defined
      001870 CD 04 99         [ 4] 3913         CALL     QBRAN
      001873 18 8B                 3914         .word      SCOM2
      001875 CD 04 E4         [ 4] 3915         CALL     AT
      001878 CD 04 70         [ 4] 3916         CALL     DOLIT
      00187B 80 00                 3917         .word     0x8000	;  IMEDD*256
      00187D CD 06 77         [ 4] 3918         CALL     ANDD    ;?immediate
      001880 CD 04 99         [ 4] 3919         CALL     QBRAN
      001883 18 88                 3920         .word      SCOM1
      001885 CC 04 C5         [ 2] 3921         JP     EXECU
      001888 CC 19 3B         [ 2] 3922 SCOM1:  JP     JSRC
      00188B CD 0F 62         [ 4] 3923 SCOM2:  CALL     NUMBQ   ;try to convert to number 
      00188E CD 07 CD         [ 4] 3924         CALL    QDUP  
      001891 CD 04 99         [ 4] 3925         CALL     QBRAN
      001894 14 EC                 3926         .word      ABOR1
                           000000  3927 .if WANT_DOUBLE 
                                   3928         _DOLIT  -1
                                   3929         CALL    EQUAL
                                   3930         _QBRAN DLITER
                                   3931         JP  LITER 
                                   3932 .endif 
                           000001  3933 .if WANT_FLOAT24 
      001896                       3934         _DOLIT -1 
      001896 CD 04 70         [ 4]    1     CALL DOLIT 
      001899 FF FF                    2     .word -1 
      00189B CD 08 FB         [ 4] 3935         CALL EQUAL 
      00189E                       3936         _QBRAN FLITER
      00189E CD 04 99         [ 4]    1     CALL QBRAN
      0018A1 29 E4                    2     .word FLITER
      0018A3 CC 16 86         [ 2] 3937         JP  LITER  
                                   3938 .endif 
      0018A6                       3939         _DROP 
      0018A6 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0018A9 CC 16 86         [ 2] 3940         JP     LITER
                                   3941 
                                   3942 
                                   3943 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3944 ;       OVERT   ( -- )
                                   3945 ;       Link a new word into vocabulary.
                                   3946 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0018AC                       3947         _HEADER OVERT,5,"OVERT"
      0018AC 18 61                    1         .word LINK 
                           0018AE     2         LINK=.
      0018AE 05                       3         .byte 5  
      0018AF 4F 56 45 52 54           4         .ascii "OVERT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      0018B4                          5         OVERT:
      0018B4 CD 07 8F         [ 4] 3948         CALL     LAST
      0018B7 CD 04 E4         [ 4] 3949         CALL     AT
      0018BA CD 07 63         [ 4] 3950         CALL     CNTXT
      0018BD CC 04 D2         [ 2] 3951         JP     STORE
                                   3952 
                                   3953 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3954 ;       ;       ( -- )
                                   3955 ;       Terminate a colon definition.
                                   3956 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0018C0                       3957         _HEADER SEMIS,IMEDD+COMPO+1,^/";"/
      0018C0 18 AE                    1         .word LINK 
                           0018C2     2         LINK=.
      0018C2 C1                       3         .byte IMEDD+COMPO+1  
      0018C3 3B                       4         .ascii ";"
      0018C4                          5         SEMIS:
                           000001  3958 .if OPTIMIZE ; more compact and faster
      0018C4 CD 04 70         [ 4] 3959         call DOLIT 
      0018C7 00 81                 3960         .word 0x81   ; opcode for RET 
      0018C9 CD 16 36         [ 4] 3961         call CCOMMA 
                           000000  3962 .else
                                   3963         CALL     COMPI
                                   3964         .word EXIT 
                                   3965 .endif 
      0018CC CD 15 4D         [ 4] 3966         CALL     LBRAC
      0018CF CD 18 B4         [ 4] 3967         call OVERT 
      0018D2 CD 23 8F         [ 4] 3968         CALL FMOVE
      0018D5 CD 07 CD         [ 4] 3969         call QDUP 
      0018D8 CD 04 99         [ 4] 3970         call QBRAN 
      0018DB 1A 68                 3971         .word SET_RAMLAST 
      0018DD CD 24 23         [ 4] 3972         CALL UPDATPTR
      0018E0 81               [ 4] 3973         RET 
                                   3974 
                                   3975 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3976 ;       Terminate an ISR definition 
                                   3977 ;       retourn ca of ISR as double
                                   3978 ;       I; ( -- ud )
                                   3979 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0018E1                       3980        _HEADER ISEMI,2+IMEDD+COMPO,^/"I;"/
      0018E1 18 C2                    1         .word LINK 
                           0018E3     2         LINK=.
      0018E3 C2                       3         .byte 2+IMEDD+COMPO  
      0018E4 49 3B                    4         .ascii "I;"
      0018E6                          5         ISEMI:
      0018E6 1D 00 02         [ 2] 3981         subw x,#CELLL  
      0018E9 90 AE 00 80      [ 2] 3982         ldw y,#IRET_CODE 
      0018ED FF               [ 2] 3983         ldw (x),y 
      0018EE CD 16 36         [ 4] 3984         call CCOMMA
      0018F1 CD 15 4D         [ 4] 3985         call LBRAC 
      0018F4 CD 24 68         [ 4] 3986         call IFMOVE
      0018F7 CD 07 CD         [ 4] 3987         call QDUP 
      0018FA CD 04 99         [ 4] 3988         CALL QBRAN 
      0018FD 1A 68                 3989         .word SET_RAMLAST
      0018FF CD 07 7F         [ 4] 3990         CALL CPP
      001902 CD 04 E4         [ 4] 3991         call AT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001905 CD 06 2A         [ 4] 3992         call SWAPP 
      001908 CD 07 7F         [ 4] 3993         CALL CPP 
      00190B CD 04 D2         [ 4] 3994         call STORE 
      00190E CD 1E 20         [ 4] 3995         call UPDATCP 
      001911 CD 1D DD         [ 4] 3996         call EEPVP 
      001914                       3997         _DROP 
      001914 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      001917 CD 04 E4         [ 4] 3998         call AT 
      00191A CD 07 71         [ 4] 3999         call VPP 
      00191D CD 04 D2         [ 4] 4000         call STORE 
      001920 CC 0C 0F         [ 2] 4001         jp ZERO
      001923 81               [ 4] 4002         ret           
                                   4003         
                                   4004 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4005 ;       ]       ( -- )
                                   4006 ;       Start compiling words in
                                   4007 ;       input stream.
                                   4008 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001924                       4009         _HEADER RBRAC,1,"]"
      001924 18 E3                    1         .word LINK 
                           001926     2         LINK=.
      001926 01                       3         .byte 1  
      001927 5D                       4         .ascii "]"
      001928                          5         RBRAC:
      001928 CD 04 70         [ 4] 4010         CALL   DOLIT
      00192B 18 6A                 4011         .word  SCOMP
      00192D CD 07 41         [ 4] 4012         CALL   TEVAL
      001930 CC 04 D2         [ 2] 4013         JP     STORE
                                   4014 
                                   4015 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4016 ;       CALL,    ( ca -- )
                                   4017 ;       Compile a subroutine call.
                                   4018 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001933                       4019         _HEADER JSRC,5,^/"CALL,"/
      001933 19 26                    1         .word LINK 
                           001935     2         LINK=.
      001935 05                       3         .byte 5  
      001936 43 41 4C 4C 2C           4         .ascii "CALL,"
      00193B                          5         JSRC:
                           000001  4020 .if OPTIMIZE 
                                   4021 ;;;;; optimization code ;;;;;;;;;;;;;;;
      00193B 90 AE 06 10      [ 2] 4022         LDW Y,#DROP 
      00193F 90 BF 26         [ 2] 4023         LDW YTEMP,Y 
      001942 90 93            [ 1] 4024         LDW Y,X 
      001944 90 FE            [ 2] 4025         LDW Y,(Y)
      001946 90 B3 26         [ 2] 4026         CPW Y,YTEMP 
      001949 26 13            [ 1] 4027         JRNE JSRC1         
                                   4028 ; replace CALL DROP BY  ADDW X,#CELLL 
      00194B 1C 00 02         [ 2] 4029         ADDW X,#CELLL 
      00194E                       4030         _DOLIT ADDWX ; opcode 
      00194E CD 04 70         [ 4]    1     CALL DOLIT 
      001951 00 1C                    2     .word ADDWX 
      001953 CD 16 36         [ 4] 4031         CALL   CCOMMA 
      001956                       4032         _DOLIT CELLL 
      001956 CD 04 70         [ 4]    1     CALL DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001959 00 02                    2     .word CELLL 
      00195B CC 16 1F         [ 2] 4033         JP      COMMA 
      00195E                       4034 JSRC1: ; check for DDROP 
      00195E 90 AE 08 1D      [ 2] 4035         LDW Y,#DDROP 
      001962 90 BF 26         [ 2] 4036         LDW YTEMP,Y 
      001965 90 93            [ 1] 4037         LDW Y,X 
      001967 90 FE            [ 2] 4038         LDW Y,(Y)
      001969 90 B3 26         [ 2] 4039         CPW Y,YTEMP 
      00196C 26 13            [ 1] 4040         JRNE JSRC2 
                                   4041 ; replace CALL DDROP BY ADDW X,#2*CELLL 
      00196E 1C 00 02         [ 2] 4042         ADDW X,#CELLL 
      001971                       4043         _DOLIT ADDWX 
      001971 CD 04 70         [ 4]    1     CALL DOLIT 
      001974 00 1C                    2     .word ADDWX 
      001976 CD 16 36         [ 4] 4044         CALL  CCOMMA 
      001979                       4045         _DOLIT 2*CELLL 
      001979 CD 04 70         [ 4]    1     CALL DOLIT 
      00197C 00 04                    2     .word 2*CELLL 
      00197E CC 16 1F         [ 2] 4046         JP  COMMA 
      001981                       4047 JSRC2: 
                                   4048 ;;;;;;;; end optimization code ;;;;;;;;;;        
                                   4049 .endif        
      001981 CD 04 70         [ 4] 4050         CALL     DOLIT
      001984 00 CD                 4051         .word     CALLL     ;CALL
      001986 CD 16 36         [ 4] 4052         CALL     CCOMMA
      001989 CC 16 1F         [ 2] 4053         JP     COMMA
                                   4054 
                                   4055 ;       INIT-OFS ( -- )
                                   4056 ;       compute offset to adjust jump address 
                                   4057 ;       set variable OFFSET 
      00198C 19 35                 4058         .word LINK 
                           00198E  4059         LINK=.
      00198E 08                    4060         .byte 8 
      00198F 49 4E 49 54 2D 4F 46  4061         .ascii "INIT-OFS" 
             53
      001997                       4062 INITOFS:
      001997 CD 07 30         [ 4] 4063         call TFLASH 
      00199A CD 04 E4         [ 4] 4064         CALL AT 
      00199D CD 06 1A         [ 4] 4065         CALL DUPP 
      0019A0 CD 04 99         [ 4] 4066         call QBRAN
      0019A3 19 B4                 4067         .word 1$
      0019A5                       4068         _DROP  
      0019A5 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0019A8 CD 07 7F         [ 4] 4069         call CPP 
      0019AB CD 04 E4         [ 4] 4070         call AT 
      0019AE CD 0C E9         [ 4] 4071         call HERE
      0019B1 CD 08 D3         [ 4] 4072         call SUBB 
      0019B4 CD 07 B4         [ 4] 4073 1$:     call OFFSET 
      0019B7 CC 04 D2         [ 2] 4074         jp STORE  
                                   4075 
                                   4076 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4077 ;       :       ( -- ; <string> )
                                   4078 ;       Start a new colon definition
                                   4079 ;       using next word as its name.
                                   4080 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      0019BA                       4081         _HEADER COLON,1,":"
      0019BA 19 8E                    1         .word LINK 
                           0019BC     2         LINK=.
      0019BC 01                       3         .byte 1  
      0019BD 3A                       4         .ascii ":"
      0019BE                          5         COLON:
      0019BE CD 19 97         [ 4] 4082         call INITOFS       
      0019C1 CD 12 DB         [ 4] 4083         CALL   TOKEN
      0019C4 CD 18 1D         [ 4] 4084         CALL   SNAME
      0019C7 CC 19 28         [ 2] 4085         JP     RBRAC
                                   4086 
                                   4087 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4088 ;       I:  ( -- )
                                   4089 ;       Start interrupt service 
                                   4090 ;       routine definition
                                   4091 ;       those definition have 
                                   4092 ;       no name.
                                   4093 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0019CA                       4094         _HEADER ICOLON,2,"I:"
      0019CA 19 BC                    1         .word LINK 
                           0019CC     2         LINK=.
      0019CC 02                       3         .byte 2  
      0019CD 49 3A                    4         .ascii "I:"
      0019CF                          5         ICOLON:
      0019CF CD 19 97         [ 4] 4095         call INITOFS 
      0019D2 CC 19 28         [ 2] 4096         jp RBRAC  
                                   4097 
                                   4098 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4099 ;       IMMEDIATE       ( -- )
                                   4100 ;       Make last compiled word
                                   4101 ;       an immediate word.
                                   4102 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0019D5                       4103         _HEADER IMMED,9,"IMMEDIATE"
      0019D5 19 CC                    1         .word LINK 
                           0019D7     2         LINK=.
      0019D7 09                       3         .byte 9  
      0019D8 49 4D 4D 45 44 49 41     4         .ascii "IMMEDIATE"
             54 45
      0019E1                          5         IMMED:
      0019E1 CD 04 70         [ 4] 4104         CALL	DOLIT
      0019E4 80 00                 4105         .word	(IMEDD<<8)
      0019E6 CD 07 8F         [ 4] 4106 IMM01:  CALL	LAST
      0019E9 CD 04 E4         [ 4] 4107         CALL    AT
      0019EC CD 04 E4         [ 4] 4108         CALL    AT
      0019EF CD 06 8B         [ 4] 4109         CALL    ORR
      0019F2 CD 07 8F         [ 4] 4110         CALL    LAST
      0019F5 CD 04 E4         [ 4] 4111         CALL    AT
      0019F8 CC 04 D2         [ 2] 4112         JP      STORE
                                   4113 
                                   4114 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4115 ;		COMPILE-ONLY  ( -- )
                                   4116 ;		Make last compiled word 
                                   4117 ;		a compile only word.
                                   4118 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0019FB                       4119         _HEADER COMPONLY,12,"COMPILE-ONLY"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      0019FB 19 D7                    1         .word LINK 
                           0019FD     2         LINK=.
      0019FD 0C                       3         .byte 12  
      0019FE 43 4F 4D 50 49 4C 45     4         .ascii "COMPILE-ONLY"
             2D 4F 4E 4C 59
      001A0A                          5         COMPONLY:
      001A0A CD 04 70         [ 4] 4120         CALL     DOLIT
      001A0D 40 00                 4121         .word    (COMPO<<8)
      001A0F CC 19 E6         [ 2] 4122         JP       IMM01
                                   4123 		
                                   4124 ;; Defining words
                                   4125 
                                   4126 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4127 ;       CREATE  ( -- ; <string> )
                                   4128 ;       Compile a new array
                                   4129 ;       without allocating space.
                                   4130 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A12                       4131         _HEADER CREAT,6,"CREATE"
      001A12 19 FD                    1         .word LINK 
                           001A14     2         LINK=.
      001A14 06                       3         .byte 6  
      001A15 43 52 45 41 54 45        4         .ascii "CREATE"
      001A1B                          5         CREAT:
      001A1B CD 12 DB         [ 4] 4132         CALL     TOKEN
      001A1E CD 18 1D         [ 4] 4133         CALL     SNAME
      001A21 CD 18 B4         [ 4] 4134         CALL     OVERT        
      001A24 CD 16 64         [ 4] 4135         CALL     COMPI 
      001A27 06 D0                 4136         .word DOVAR 
      001A29 81               [ 4] 4137         RET
                                   4138 
                                   4139 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4140 ;       VARIABLE  ( -- ; <string> )
                                   4141 ;       Compile a new variable
                                   4142 ;       initialized to 0.
                                   4143 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A2A                       4144         _HEADER VARIA,8,"VARIABLE"
      001A2A 1A 14                    1         .word LINK 
                           001A2C     2         LINK=.
      001A2C 08                       3         .byte 8  
      001A2D 56 41 52 49 41 42 4C     4         .ascii "VARIABLE"
             45
      001A35                          5         VARIA:
                                   4145 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      001A35 CD 0C E9         [ 4] 4146         CALL HERE
      001A38 CD 06 1A         [ 4] 4147         CALL DUPP 
      001A3B CD 0B 78         [ 4] 4148         CALL CELLP
      001A3E CD 07 71         [ 4] 4149         CALL VPP 
      001A41 CD 04 D2         [ 4] 4150         CALL STORE
      001A44 CD 1A 1B         [ 4] 4151         CALL CREAT
      001A47 CD 06 1A         [ 4] 4152         CALL DUPP
      001A4A CD 16 1F         [ 4] 4153         CALL COMMA
      001A4D CD 0C 0F         [ 4] 4154         CALL ZERO
      001A50 CD 06 2A         [ 4] 4155         call SWAPP 
      001A53 CD 04 D2         [ 4] 4156         CALL STORE
      001A56 CD 23 8F         [ 4] 4157         CALL FMOVE ; move definition to FLASH
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001A59 CD 07 CD         [ 4] 4158         CALL QDUP 
      001A5C CD 04 99         [ 4] 4159         CALL QBRAN 
      001A5F 1A 68                 4160         .word SET_RAMLAST   
      001A61 CD 1E 37         [ 4] 4161         call UPDATVP  ; don't update if variable kept in RAM.
      001A64 CD 24 23         [ 4] 4162         CALL UPDATPTR
      001A67 81               [ 4] 4163         RET         
      001A68                       4164 SET_RAMLAST: 
      001A68 CD 07 8F         [ 4] 4165         CALL LAST 
      001A6B CD 04 E4         [ 4] 4166         CALL AT 
      001A6E CD 07 A2         [ 4] 4167         CALL RAMLAST 
      001A71 CC 04 D2         [ 2] 4168         JP STORE  
                                   4169 
                                   4170 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4171 ;       CONSTANT  ( n -- ; <string> )
                                   4172 ;       Compile a new constant 
                                   4173 ;       n CONSTANT name 
                                   4174 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A74                       4175         _HEADER CONSTANT,8,"CONSTANT"
      001A74 1A 2C                    1         .word LINK 
                           001A76     2         LINK=.
      001A76 08                       3         .byte 8  
      001A77 43 4F 4E 53 54 41 4E     4         .ascii "CONSTANT"
             54
      001A7F                          5         CONSTANT:
      001A7F CD 12 DB         [ 4] 4176         CALL TOKEN
      001A82 CD 18 1D         [ 4] 4177         CALL SNAME 
      001A85 CD 18 B4         [ 4] 4178         CALL OVERT 
      001A88 CD 16 64         [ 4] 4179         CALL COMPI 
      001A8B 1A 9F                 4180         .word DOCONST
      001A8D CD 16 1F         [ 4] 4181         CALL COMMA 
      001A90 CD 23 8F         [ 4] 4182         CALL FMOVE
      001A93 CD 07 CD         [ 4] 4183         CALL QDUP 
      001A96 CD 04 99         [ 4] 4184         CALL QBRAN 
      001A99 1A 68                 4185         .word SET_RAMLAST  
      001A9B CD 24 23         [ 4] 4186         CALL UPDATPTR  
      001A9E 81               [ 4] 4187 1$:     RET          
                                   4188 
                                   4189 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4190 ; CONSTANT runtime semantic 
                                   4191 ; doCONST  ( -- n )
                                   4192 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4193 ;       _HEADER DOCONST,7,"DOCONST"
      001A9F                       4194 DOCONST:
      001A9F 1D 00 02         [ 2] 4195         subw x,#CELLL
      001AA2 90 85            [ 2] 4196         popw y 
      001AA4 90 FE            [ 2] 4197         ldw y,(y) 
      001AA6 FF               [ 2] 4198         ldw (x),y 
      001AA7 81               [ 4] 4199         ret 
                                   4200 
                                   4201 ;----------------------------------
                                   4202 ; create double constant 
                                   4203 ; 2CONSTANT ( d -- ; <string> )
                                   4204 ;----------------------------------
      001AA8                       4205         _HEADER DCONST,9,"2CONSTANT"
      001AA8 1A 76                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                           001AAA     2         LINK=.
      001AAA 09                       3         .byte 9  
      001AAB 32 43 4F 4E 53 54 41     4         .ascii "2CONSTANT"
             4E 54
      001AB4                          5         DCONST:
      001AB4 CD 12 DB         [ 4] 4206         CALL TOKEN
      001AB7 CD 18 1D         [ 4] 4207         CALL SNAME 
      001ABA CD 18 B4         [ 4] 4208         CALL OVERT 
      001ABD CD 16 64         [ 4] 4209         CALL COMPI 
      001AC0 1A D7                 4210         .word DO_DCONST
      001AC2 CD 16 1F         [ 4] 4211         CALL COMMA
      001AC5 CD 16 1F         [ 4] 4212         CALL COMMA  
      001AC8 CD 23 8F         [ 4] 4213         CALL FMOVE
      001ACB CD 07 CD         [ 4] 4214         CALL QDUP 
      001ACE CD 04 99         [ 4] 4215         CALL QBRAN 
      001AD1 1A 68                 4216         .word SET_RAMLAST  
      001AD3 CD 24 23         [ 4] 4217         CALL UPDATPTR  
      001AD6 81               [ 4] 4218 1$:     RET          
                                   4219     
                                   4220 ;----------------------------------
                                   4221 ; runtime for DCONST 
                                   4222 ; stack double constant 
                                   4223 ; DO-DCONST ( -- d )
                                   4224 ;-----------------------------------
                                   4225 ;       _HEADER DO_DCONST,9,"DO-DCONST"
      001AD7                       4226 DO_DCONST:
      001AD7 90 85            [ 2] 4227     popw y 
      001AD9 90 BF 26         [ 2] 4228     ldw YTEMP,y 
      001ADC 1D 00 04         [ 2] 4229     subw x,#2*CELLL 
      001ADF 90 FE            [ 2] 4230     ldw y,(y)
      001AE1 FF               [ 2] 4231     ldw (x),y 
      001AE2 90 BE 26         [ 2] 4232     ldw y,YTEMP 
      001AE5 90 EE 02         [ 2] 4233     ldw y,(2,y)
      001AE8 EF 02            [ 2] 4234     ldw (2,x),y 
      001AEA 81               [ 4] 4235     ret 
                                   4236 
                                   4237 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4238 ;;          TOOLS 
                                   4239 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4240 
                                   4241 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4242 ;       _TYPE   ( b u -- )
                                   4243 ;       Display a string. Filter
                                   4244 ;       non-printing characters.
                                   4245 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001AEB                       4246         _HEADER UTYPE,5,"_TYPE"
      001AEB 1A AA                    1         .word LINK 
                           001AED     2         LINK=.
      001AED 05                       3         .byte 5  
      001AEE 5F 54 59 50 45           4         .ascii "_TYPE"
      001AF3                          5         UTYPE:
      001AF3 CD 05 E3         [ 4] 4247         CALL     TOR     ;start count down loop
      001AF6 20 0F            [ 2] 4248         JRA     UTYP2   ;skip first pass
      001AF8 CD 06 1A         [ 4] 4249 UTYP1:  CALL     DUPP
      001AFB CD 05 02         [ 4] 4250         CALL     CAT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001AFE CD 0C 39         [ 4] 4251         CALL     TCHAR
      001B01 CD 04 37         [ 4] 4252         CALL     EMIT    ;display only printable
      001B04 CD 0B A3         [ 4] 4253         CALL     ONEP    ;increment address
      001B07 CD 04 84         [ 4] 4254 UTYP2:  CALL     DONXT
      001B0A 1A F8                 4255         .word      UTYP1   ;loop till done
      001B0C CC 06 10         [ 2] 4256         JP     DROP
                                   4257 
                                   4258 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4259 ;       dm+     ( a u -- a )
                                   4260 ;       Dump u bytes from ,
                                   4261 ;       leaving a+u on  stack.
                                   4262 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B0F                       4263         _HEADER DUMPP,3,"DM+"
      001B0F 1A ED                    1         .word LINK 
                           001B11     2         LINK=.
      001B11 03                       3         .byte 3  
      001B12 44 4D 2B                 4         .ascii "DM+"
      001B15                          5         DUMPP:
      001B15 CD 06 42         [ 4] 4264         CALL     OVER
      001B18 CD 04 70         [ 4] 4265         CALL     DOLIT
      001B1B 00 04                 4266         .word      4
      001B1D CD 10 D2         [ 4] 4267         CALL     UDOTR   ;display address
      001B20 CD 10 39         [ 4] 4268         CALL     SPACE
      001B23 CD 05 E3         [ 4] 4269         CALL     TOR     ;start count down loop
      001B26 20 11            [ 2] 4270         JRA     PDUM2   ;skip first pass
      001B28 CD 06 1A         [ 4] 4271 PDUM1:  CALL     DUPP
      001B2B CD 05 02         [ 4] 4272         CALL     CAT
      001B2E CD 04 70         [ 4] 4273         CALL     DOLIT
      001B31 00 03                 4274         .word      3
      001B33 CD 10 D2         [ 4] 4275         CALL     UDOTR   ;display numeric data
      001B36 CD 0B A3         [ 4] 4276         CALL     ONEP    ;increment address
      001B39 CD 04 84         [ 4] 4277 PDUM2:  CALL     DONXT
      001B3C 1B 28                 4278         .word      PDUM1   ;loop till done
      001B3E 81               [ 4] 4279         RET
                                   4280 
                                   4281 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4282 ;       DUMP    ( a u -- )
                                   4283 ;       Dump u bytes from a,
                                   4284 ;       in a formatted manner.
                                   4285 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B3F                       4286         _HEADER DUMP,4,"DUMP"
      001B3F 1B 11                    1         .word LINK 
                           001B41     2         LINK=.
      001B41 04                       3         .byte 4  
      001B42 44 55 4D 50              4         .ascii "DUMP"
      001B46                          5         DUMP:
      001B46 CD 06 E0         [ 4] 4287         CALL     BASE
      001B49 CD 04 E4         [ 4] 4288         CALL     AT
      001B4C CD 05 E3         [ 4] 4289         CALL     TOR
      001B4F CD 0E B2         [ 4] 4290         CALL     HEX     ;save radix, set hex
      001B52 CD 04 70         [ 4] 4291         CALL     DOLIT
      001B55 00 10                 4292         .word      16
      001B57 CD 0A C9         [ 4] 4293         CALL     SLASH   ;change count to lines
      001B5A CD 05 E3         [ 4] 4294         CALL     TOR     ;start count down loop
      001B5D CD 10 7C         [ 4] 4295 DUMP1:  CALL     CR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001B60 CD 04 70         [ 4] 4296         CALL     DOLIT
      001B63 00 10                 4297         .word      16
      001B65 CD 08 28         [ 4] 4298         CALL     DDUP
      001B68 CD 1B 15         [ 4] 4299         CALL     DUMPP   ;display numeric
      001B6B CD 07 DE         [ 4] 4300         CALL     ROT
      001B6E CD 07 DE         [ 4] 4301         CALL     ROT
      001B71 CD 10 39         [ 4] 4302         CALL     SPACE
      001B74 CD 10 39         [ 4] 4303         CALL     SPACE
      001B77 CD 1A F3         [ 4] 4304         CALL     UTYPE   ;display printable characters
      001B7A CD 04 84         [ 4] 4305         CALL     DONXT
      001B7D 1B 5D                 4306         .word      DUMP1   ;loop till done
      001B7F CD 06 10         [ 4] 4307 DUMP3:  CALL     DROP
      001B82 CD 05 35         [ 4] 4308         CALL     RFROM
      001B85 CD 06 E0         [ 4] 4309         CALL     BASE
      001B88 CC 04 D2         [ 2] 4310         JP     STORE   ;restore radix
                                   4311 
                                   4312 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4313 ;       .S      ( ... -- ... )
                                   4314 ;        Display  contents of stack.
                                   4315 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B8B                       4316         _HEADER DOTS,2,".S"
      001B8B 1B 41                    1         .word LINK 
                           001B8D     2         LINK=.
      001B8D 02                       3         .byte 2  
      001B8E 2E 53                    4         .ascii ".S"
      001B90                          5         DOTS:
      001B90 CD 10 7C         [ 4] 4317         CALL     CR
      001B93 CD 0C 51         [ 4] 4318         CALL     DEPTH   ;stack depth
      001B96 CD 05 E3         [ 4] 4319         CALL     TOR     ;start count down loop
      001B99 20 09            [ 2] 4320         JRA     DOTS2   ;skip first pass
      001B9B CD 05 46         [ 4] 4321 DOTS1:  CALL     RAT
      001B9E CD 0C 68         [ 4] 4322 	CALL     PICK
      001BA1 CD 11 22         [ 4] 4323         CALL     DOT     ;index stack, display contents
      001BA4 CD 04 84         [ 4] 4324 DOTS2:  CALL     DONXT
      001BA7 1B 9B                 4325         .word      DOTS1   ;loop till done
      001BA9 CD 10 A9         [ 4] 4326         CALL     DOTQP
      001BAC 05                    4327         .byte      5
      001BAD 20 3C 73 70 20        4328         .ascii     " <sp "
      001BB2 81               [ 4] 4329         RET
                                   4330 
                                   4331 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4332 ;       >NAME   ( ca -- na | F )
                                   4333 ;       Convert code address
                                   4334 ;       to a name address.
                                   4335 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001BB3                       4336         _HEADER TNAME,5,">NAME"
      001BB3 1B 8D                    1         .word LINK 
                           001BB5     2         LINK=.
      001BB5 05                       3         .byte 5  
      001BB6 3E 4E 41 4D 45           4         .ascii ">NAME"
      001BBB                          5         TNAME:
      001BBB CD 07 63         [ 4] 4337         CALL     CNTXT   ;vocabulary link
      001BBE CD 04 E4         [ 4] 4338 TNAM2:  CALL     AT
      001BC1 CD 06 1A         [ 4] 4339         CALL     DUPP    ;?last word in a vocabulary
      001BC4 CD 04 99         [ 4] 4340         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001BC7 1B E2                 4341         .word      TNAM4
      001BC9 CD 08 28         [ 4] 4342         CALL     DDUP
      001BCC CD 12 E9         [ 4] 4343         CALL     NAMET
      001BCF CD 06 A0         [ 4] 4344         CALL     XORR    ;compare
      001BD2 CD 04 99         [ 4] 4345         CALL     QBRAN
      001BD5 1B DC                 4346         .word      TNAM3
      001BD7 CD 0B 87         [ 4] 4347         CALL     CELLM   ;continue with next word
      001BDA 20 E2            [ 2] 4348         JRA     TNAM2
      001BDC CD 06 2A         [ 4] 4349 TNAM3:  CALL     SWAPP
      001BDF CC 06 10         [ 2] 4350         JP     DROP
      001BE2 CD 08 1D         [ 4] 4351 TNAM4:  CALL     DDROP
      001BE5 CC 0C 0F         [ 2] 4352         JP     ZERO
                                   4353 
                                   4354 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4355 ;       .ID     ( na -- )
                                   4356 ;        Display  name at address.
                                   4357 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001BE8                       4358         _HEADER DOTID,3,".ID"
      001BE8 1B B5                    1         .word LINK 
                           001BEA     2         LINK=.
      001BEA 03                       3         .byte 3  
      001BEB 2E 49 44                 4         .ascii ".ID"
      001BEE                          5         DOTID:
      001BEE CD 07 CD         [ 4] 4359         CALL     QDUP    ;if zero no name
      001BF1 CD 04 99         [ 4] 4360         CALL     QBRAN
      001BF4 1C 04                 4361         .word      DOTI1
      001BF6 CD 0C D2         [ 4] 4362         CALL     COUNT
      001BF9 CD 04 70         [ 4] 4363         CALL     DOLIT
      001BFC 00 1F                 4364         .word      0x1F
      001BFE CD 06 77         [ 4] 4365         CALL     ANDD    ;mask lexicon bits
      001C01 CC 1A F3         [ 2] 4366         JP     UTYPE
      001C04 CD 10 A9         [ 4] 4367 DOTI1:  CALL     DOTQP
      001C07 09                    4368         .byte      9
      001C08 20 6E 6F 4E 61 6D 65  4369         .ascii     " noName"
      001C0F 81               [ 4] 4370         RET
                                   4371 
                           000000  4372 WANT_SEE=0
                           000000  4373 .if WANT_SEE 
                                   4374 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4375 ;       SEE     ( -- ; <string> )
                                   4376 ;       A simple decompiler.
                                   4377 ;       Updated for byte machines.
                                   4378 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4379         _HEADER SEE,3,"SEE"
                                   4380         CALL     TICK    ;starting address
                                   4381         CALL     CR
                                   4382         CALL     ONEM
                                   4383 SEE1:   CALL     ONEP
                                   4384         CALL     DUPP
                                   4385         CALL     AT
                                   4386         CALL     DUPP
                                   4387         CALL     QBRAN
                                   4388         .word    SEE2
                                   4389         CALL     TNAME   ;?is it a name
                                   4390 SEE2:   CALL     QDUP    ;name address or zero
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                   4391         CALL     QBRAN
                                   4392         .word    SEE3
                                   4393         CALL     SPACE
                                   4394         CALL     DOTID   ;display name
                                   4395         CALL     ONEP
                                   4396         JRA      SEE4
                                   4397 SEE3:   CALL     DUPP
                                   4398         CALL     CAT
                                   4399         CALL     UDOT    ;display number
                                   4400 SEE4:   CALL     NUFQ    ;user control
                                   4401         CALL     QBRAN
                                   4402         .word    SEE1
                                   4403         JP     DROP
                                   4404 .endif ; WANT_SEE 
                                   4405 
                                   4406 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4407 ;       WORDS   ( -- )
                                   4408 ;       Display names in vocabulary.
                                   4409 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001C10                       4410         _HEADER WORDS,5,"WORDS"
      001C10 1B EA                    1         .word LINK 
                           001C12     2         LINK=.
      001C12 05                       3         .byte 5  
      001C13 57 4F 52 44 53           4         .ascii "WORDS"
      001C18                          5         WORDS:
      001C18 CD 10 7C         [ 4] 4411         CALL     CR
      001C1B CD 07 63         [ 4] 4412         CALL     CNTXT   ;only in context
      001C1E CD 04 E4         [ 4] 4413 WORS1:  CALL     AT
      001C21 CD 07 CD         [ 4] 4414         CALL     QDUP    ;?at end of list
      001C24 CD 04 99         [ 4] 4415         CALL     QBRAN
      001C27 1C 3A                 4416         .word      WORS2
      001C29 CD 06 1A         [ 4] 4417         CALL     DUPP
      001C2C CD 10 39         [ 4] 4418         CALL     SPACE
      001C2F CD 1B EE         [ 4] 4419         CALL     DOTID   ;display a name
      001C32 CD 0B 87         [ 4] 4420         CALL     CELLM
      001C35 CD 04 B5         [ 4] 4421         CALL     BRAN
      001C38 1C 1E                 4422         .word      WORS1
      001C3A 81               [ 4] 4423 WORS2:  RET
                                   4424 
                                   4425         
                                   4426 ;; Hardware reset
                                   4427 
                                   4428 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4429 ;  COPYRIGTH
                                   4430 ; print copyright notice 
                                   4431 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001C3B                       4432 COPYRIGHT:
      001C3B CD 10 A9         [ 4] 4433     CALL DOTQP 
      001C3E 21                    4434     .byte 33 
      001C3F 4A 61 63 71 75 65 73  4435     .ascii "Jacques Deschenes, Copyright 2021"
             20 44 65 73 63 68 65
             6E 65 73 2C 20 43 6F
             70 79 72 69 67 68 74
             20 32 30 32 31
      001C60 CC 10 7C         [ 2] 4436     JP CR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                                   4437 
                                   4438 
                                   4439 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4440 ;  PRT_LICENCE 
                                   4441 ;  print GPLV2 licence 
                                   4442 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001C63                       4443 PRT_LICENCE:
      001C63 CD 10 A9         [ 4] 4444         CALL DOTQP 
      001C66 0F                    4445         .byte  15 
      001C67 4C 49 43 45 4E 43 45  4446         .ascii "LICENCE GPLV3\r\n"
             20 47 50 4C 56 33 0D
             0A
      001C76 81               [ 4] 4447         RET 
                                   4448 
                                   4449 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4450 ;    PRINT_VERSION ( c1 c2 -- )
                                   4451 ;    c2 minor 
                                   4452 ;    c1 major 
                                   4453 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001C77                       4454 PRINT_VERSION:
      001C77 CD 10 A9         [ 4] 4455      CALL DOTQP 
      001C7A 09                    4456      .byte 9
      001C7B 20 76 65 72 73 69 6F  4457      .ascii " version "
             6E 20
      001C84 CD 0E 17         [ 4] 4458      CALL BDIGS 
      001C87 CD 0E 51         [ 4] 4459      CALL DIGS 
      001C8A CD 0E 51         [ 4] 4460      CALL DIGS 
      001C8D                       4461      _DOLIT '.' 
      001C8D CD 04 70         [ 4]    1     CALL DOLIT 
      001C90 00 2E                    2     .word '.' 
      001C92 CD 0E 27         [ 4] 4462      CALL HOLD 
      001C95                       4463      _DROP 
      001C95 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      001C98 CD 0E 51         [ 4] 4464      CALL DIGS 
      001C9B CD 0E 7C         [ 4] 4465      CALL EDIGS 
      001C9E CC 10 63         [ 2] 4466      JP TYPES 
                                   4467       
                                   4468 
                                   4469 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4470 ;       hi      ( -- )
                                   4471 ;       Display sign-on message.
                                   4472 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001CA1                       4473         _HEADER HI,2,"HI"
      001CA1 1C 12                    1         .word LINK 
                           001CA3     2         LINK=.
      001CA3 02                       3         .byte 2  
      001CA4 48 49                    4         .ascii "HI"
      001CA6                          5         HI:
      001CA6 CD 10 7C         [ 4] 4474         CALL     CR
      001CA9 CD 10 A9         [ 4] 4475         CALL     DOTQP   
      001CAC 0A                    4476         .byte      10
      001CAD 73 74 6D 38 65 46 6F  4477         .ascii     "stm8eForth"
             72 74 68
      001CB7                       4478 	_DOLIT VER 
      001CB7 CD 04 70         [ 4]    1     CALL DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      001CBA 00 04                    2     .word VER 
      001CBC                       4479         _DOLIT EXT 
      001CBC CD 04 70         [ 4]    1     CALL DOLIT 
      001CBF 00 00                    2     .word EXT 
      001CC1 CD 1C 77         [ 4] 4480         CALL PRINT_VERSION 
      001CC4 CD 10 A9         [ 4] 4481         CALL    DOTQP
                           000001  4482 .if NUCLEO          
      001CC7 12                    4483         .byte 18
      001CC8 20 6F 6E 20 4E 55 43  4484         .ascii  " on NUCLEO-8S208RB"
             4C 45 4F 2D 38 53 32
             30 38 52 42
                                   4485 .endif
                           000000  4486 .if DISCOVERY
                                   4487         .byte 19
                                   4488         .ascii  " on STM8S-DISCOVERY"
                                   4489 .endif
                           000000  4490 .if DOORBELL
                                   4491         .byte 16
                                   4492         .ascii " on stm8s105k6b6"
                                   4493 .endif
      001CDA CC 10 7C         [ 2] 4494         JP     CR
                                   4495 
                           000000  4496 WANT_DEBUG=0
                           000000  4497 .if WANT_DEBUG 
                                   4498 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4499 ;       DEBUG      ( -- )
                                   4500 ;       Display sign-on message.
                                   4501 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4502         _HEADER DEBUG,5,"DEBUG"
                                   4503 	CALL DOLIT
                                   4504 	.word 0x65
                                   4505 	CALL EMIT
                                   4506 	CALL ZERO
                                   4507  	CALL ZLESS 
                                   4508 	CALL DOLIT
                                   4509 	.word 0xFFFE
                                   4510 	CALL ZLESS 
                                   4511 	CALL UPLUS 
                                   4512  	_DROP 
                                   4513 	CALL DOLIT
                                   4514 	.word 3
                                   4515 	CALL UPLUS 
                                   4516 	CALL UPLUS 
                                   4517  	_DROP
                                   4518 	CALL DOLIT
                                   4519 	.word 0x43
                                   4520 	CALL UPLUS 
                                   4521  	_DROP
                                   4522 	CALL EMIT
                                   4523 	CALL DOLIT
                                   4524 	.word 0x4F
                                   4525 	CALL DOLIT
                                   4526 	.word 0x6F
                                   4527  	CALL XORR
                                   4528 	CALL DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



                                   4529 	.word 0xF0
                                   4530  	CALL ANDD
                                   4531 	CALL DOLIT
                                   4532 	.word 0x4F
                                   4533  	CALL ORR
                                   4534 	CALL EMIT
                                   4535 	CALL DOLIT
                                   4536 	.word 8
                                   4537 	CALL DOLIT
                                   4538 	.word 6
                                   4539  	CALL SWAPP
                                   4540 	CALL OVER
                                   4541 	CALL XORR
                                   4542 	CALL DOLIT
                                   4543 	.word 3
                                   4544 	CALL ANDD 
                                   4545 	CALL ANDD
                                   4546 	CALL DOLIT
                                   4547 	.word 0x70
                                   4548 	CALL UPLUS 
                                   4549 	_DROP
                                   4550 	CALL EMIT
                                   4551 	CALL ZERO
                                   4552 	CALL QBRAN
                                   4553 	.word DEBUG1
                                   4554 	CALL DOLIT
                                   4555 	.word 0x3F
                                   4556 DEBUG1:
                                   4557 	CALL DOLIT
                                   4558 	.word 0xFFFF
                                   4559 	CALL QBRAN
                                   4560 	.word DEBUG2
                                   4561 	CALL DOLIT
                                   4562 	.word 0x74
                                   4563 	CALL BRAN
                                   4564 	.word DEBUG3
                                   4565 DEBUG2:
                                   4566 	CALL DOLIT
                                   4567 	.word 0x21
                                   4568 DEBUG3:
                                   4569 	CALL EMIT
                                   4570 	CALL DOLIT
                                   4571 	.word 0x68
                                   4572 	CALL DOLIT
                                   4573 	.word 0x80
                                   4574 	CALL STORE
                                   4575 	CALL DOLIT
                                   4576 	.word 0x80
                                   4577 	CALL AT
                                   4578 	CALL EMIT
                                   4579 	CALL DOLIT
                                   4580 	.word 0x4D
                                   4581 	CALL TOR
                                   4582 	CALL RAT
                                   4583 	CALL RFROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



                                   4584 	CALL ANDD
                                   4585 	CALL EMIT
                                   4586 	CALL DOLIT
                                   4587 	.word 0x61
                                   4588 	CALL DOLIT
                                   4589 	.word 0xA
                                   4590 	CALL TOR
                                   4591 DEBUG4:
                                   4592 	CALL ONE
                                   4593 	CALL UPLUS 
                                   4594 	_DROP
                                   4595 	CALL DONXT
                                   4596 	.word DEBUG4
                                   4597 	CALL EMIT
                                   4598 	CALL DOLIT
                                   4599 	.word 0x656D
                                   4600 	CALL DOLIT
                                   4601 	.word 0x100
                                   4602 	CALL UMSTA
                                   4603 	CALL SWAPP
                                   4604 	CALL DOLIT
                                   4605 	.word 0x100
                                   4606 	CALL UMSTA
                                   4607 	CALL SWAPP 
                                   4608 	_DROP
                                   4609 	CALL EMIT
                                   4610 	CALL EMIT
                                   4611 	CALL DOLIT
                                   4612 	.word 0x2043
                                   4613 	CALL ZERO
                                   4614 	CALL DOLIT
                                   4615 	.word 0x100
                                   4616 	CALL UMMOD
                                   4617 	CALL EMIT
                                   4618 	CALL EMIT
                                   4619 	;JP ORIG
                                   4620 	RET
                                   4621 .endif ; WANT_DEBUG 
                                   4622 
                                   4623 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4624 ;       'BOOT   ( -- a )
                                   4625 ;       The application startup vector.
                                   4626 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001CDD                       4627         _HEADER TBOOT,5,"'BOOT"
      001CDD 1C A3                    1         .word LINK 
                           001CDF     2         LINK=.
      001CDF 05                       3         .byte 5  
      001CE0 27 42 4F 4F 54           4         .ascii "'BOOT"
      001CE5                          5         TBOOT:
      001CE5 CD 06 D0         [ 4] 4628         CALL     DOVAR
      001CE8 40 02                 4629         .word    APP_RUN      ;application to boot
                                   4630 
                                   4631 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4632 ;       COLD    ( -- )
                                   4633 ;       The hilevel cold start s=ence.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



                                   4634 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001CEA                       4635         _HEADER COLD,4,"COLD"
      001CEA 1C DF                    1         .word LINK 
                           001CEC     2         LINK=.
      001CEC 04                       3         .byte 4  
      001CED 43 4F 4C 44              4         .ascii "COLD"
      001CF1                          5         COLD:
                           000000  4636 .if WANT_DEBUG
                                   4637         CALL DEBUG
                                   4638 .endif ; WANT_DEBUG
      001CF1 CD 04 70         [ 4] 4639 COLD1:  CALL     DOLIT
      001CF4 00 2B                 4640         .word      UZERO
      001CF6 CD 04 70         [ 4] 4641 	CALL     DOLIT
      001CF9 00 06                 4642         .word      UPP
      001CFB CD 04 70         [ 4] 4643         CALL     DOLIT
      001CFE 00 1C                 4644 	.word      UEND-UZERO
      001D00 CD 0D 36         [ 4] 4645         CALL     CMOVE   ;initialize user area
                           000001  4646 .if WANT_FLOAT + WANT_FLOAT24 
      001D03 CD 25 E0         [ 4] 4647         CALL    FINIT 
                                   4648 .endif 
                                   4649 ; if APP_RUN==0 initialize with ca de 'hi'  
      001D06 90 CE 40 02      [ 2] 4650         ldw y,APP_RUN 
      001D0A 26 0B            [ 1] 4651         jrne 0$
      001D0C 1D 00 02         [ 2] 4652         subw x,#CELLL 
      001D0F 90 AE 1C A6      [ 2] 4653         ldw y,#HI  
      001D13 FF               [ 2] 4654         ldw (x),y
      001D14 CD 1E 0F         [ 4] 4655         call UPDATRUN 
      001D17                       4656 0$:        
                                   4657 ; update LAST with APP_LAST 
                                   4658 ; if APP_LAST > LAST else do the opposite
      001D17 90 CE 40 00      [ 2] 4659         ldw y,APP_LAST 
      001D1B 90 B3 1C         [ 2] 4660         cpw y,ULAST 
      001D1E 22 05            [ 1] 4661         jrugt 1$ 
                                   4662 ; save LAST at APP_LAST  
      001D20 CD 1D F7         [ 4] 4663         call UPDATLAST 
      001D23 20 06            [ 2] 4664         jra 2$
      001D25                       4665 1$: ; update LAST with APP_LAST 
      001D25 90 BF 1C         [ 2] 4666         ldw ULAST,y
      001D28 90 BF 16         [ 2] 4667         ldw UCNTXT,y
      001D2B                       4668 2$:  
                                   4669 ; update APP_CP if < app_space 
      001D2B 90 CE 40 04      [ 2] 4670         ldw y,APP_CP  
      001D2F 90 B3 1A         [ 2] 4671         cpw y,UCP   
      001D32 24 06            [ 1] 4672         jruge 3$ 
      001D34 CD 1E 20         [ 4] 4673         call UPDATCP
      001D37 90 BE 1A         [ 2] 4674         ldw y,UCP   
      001D3A                       4675 3$:
      001D3A 90 BF 1A         [ 2] 4676         ldw UCP,y                 
                                   4677 ; update UVP with APP_VP  
                                   4678 ; if APP_VP>UVP else do the opposite 
      001D3D 90 CE 40 06      [ 2] 4679         ldw y,APP_VP 
      001D41 90 B3 18         [ 2] 4680         cpw y,UVP 
      001D44 22 05            [ 1] 4681         jrugt 4$
      001D46 CD 1E 37         [ 4] 4682         call UPDATVP 
      001D49 20 03            [ 2] 4683         jra 6$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      001D4B                       4684 4$: ; update UVP with APP_VP 
      001D4B 90 BF 18         [ 2] 4685         ldw UVP,y 
      001D4E                       4686 6$:      
      001D4E CD 15 C9         [ 4] 4687         CALL     PRESE   ;initialize data stack and TIB
      001D51 CD 1C E5         [ 4] 4688         CALL     TBOOT
      001D54 CD 0D 1F         [ 4] 4689         CALL     ATEXE   ;application boot
      001D57 CD 18 B4         [ 4] 4690         CALL     OVERT
      001D5A CC 15 E6         [ 2] 4691         JP     QUIT    ;start interpretation
                                   4692 
                                   4693 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



                                   4694         .include "flash.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;  routines to write to FLASH, EEPROM 
                                     23 ;  and OPTION 
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27 ;--------------------------------
                                     28 ; initialize FPTR 
                                     29 ; FP!  ( ud -- )
                                     30 ;---------------------------------
      001D5D 1C EC                   31     .word LINK 
                           001D5F    32     LINK=.
      001D5F 03                      33     .byte 3 
      001D60 46 50 21                34     .ascii "FP!"
      001D63                         35 FPSTOR:
      001D63 90 93            [ 1]   36     ldw y,x
      001D65 90 FE            [ 2]   37     ldw y,(y)
      001D67 90 9F            [ 1]   38     ld a,yl 
      001D69 B7 34            [ 1]   39     ld FPTR,a 
      001D6B 1C 00 02         [ 2]   40     addw x,#CELLL 
      001D6E 90 93            [ 1]   41     ldw y,x 
      001D70 90 FE            [ 2]   42     ldw y,(y)
      001D72 90 BF 35         [ 2]   43     ldw PTR16,y
      001D75 1C 00 02         [ 2]   44     addw x,#CELLL 
      001D78 81               [ 4]   45     ret 
                                     46 
                                     47 ;-----------------------------------
                                     48 ; return EEPROM base address 
                                     49 ; as a double 
                                     50 ;  EEPROM  ( -- ud )
                                     51 ;-----------------------------------
      001D79 1D 5F                   52     .word LINK 
                           001D7B    53 LINK=.
      001D7B 06                      54     .byte 6 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      001D7C 45 45 50 52 4F 4D       55     .ascii "EEPROM"
      001D82                         56 EEPROM: 
      001D82 90 AE 40 00      [ 2]   57     ldw y,#EEPROM_BASE
      001D86 1D 00 04         [ 2]   58     subw x,#2*CELLL 
      001D89 EF 02            [ 2]   59     ldw (2,x),y 
      001D8B 90 5F            [ 1]   60     clrw y 
      001D8D FF               [ 2]   61     ldw (x),y 
      001D8E 81               [ 4]   62     ret
                                     63 
                                     64 ;---------------------------------
                                     65 ; return APP_LAST pointer as double
                                     66 ; EEP-LAST ( -- ud )
                                     67 ;---------------------------------
      001D8F 1D 7B                   68 	.word LINK 
                           001D91    69 	LINK=.
      001D91 08                      70 	.byte 8 
      001D92 45 45 50 2D 4C 41 53    71 	.ascii "EEP-LAST"
             54
      001D9A                         72 EEPLAST:
      001D9A 1D 00 04         [ 2]   73 	subw x,#2*CELLL 
      001D9D 90 AE 40 00      [ 2]   74 	ldw y,#APP_LAST 
      001DA1 EF 02            [ 2]   75 	ldw (2,x),y 
      001DA3 90 5F            [ 1]   76 	clrw y 
      001DA5 FF               [ 2]   77 	ldw (x),y 
      001DA6 81               [ 4]   78 	ret 
                                     79 
                                     80 ;----------------------------------
                                     81 ; return APP_RUN pointer as double	
                                     82 ; EEP-RUN ( -- ud )
                                     83 ;-----------------------------------
      001DA7 1D 91                   84 	.word LINK 
                           001DA9    85 	LINK=.
      001DA9 07                      86 	.byte 7
      001DAA 45 45 50 2D 52 55 4E    87 	.ascii "EEP-RUN"
      001DB1                         88 EEPRUN:
      001DB1 1D 00 04         [ 2]   89 	subw x,#2*CELLL 
      001DB4 90 AE 40 02      [ 2]   90 	ldw y,#APP_RUN 
      001DB8 EF 02            [ 2]   91 	ldw (2,x),y 
      001DBA 90 5F            [ 1]   92 	clrw y 
      001DBC FF               [ 2]   93 	ldw (x),y 
      001DBD 81               [ 4]   94 	ret 
                                     95 
                                     96 ;------------------------------------
                                     97 ; return APP_CP pointer as double 
                                     98 ; EEP-CP ( -- ud )
                                     99 ;------------------------------------
      001DBE 1D A9                  100 	.word LINK
                           001DC0   101 	LINK=.
      001DC0 06                     102 	.byte 6 
      001DC1 45 45 50 2D 43 50      103 	.ascii "EEP-CP"
      001DC7                        104 EEPCP:
      001DC7 1D 00 04         [ 2]  105 	subw x,#2*CELLL 
      001DCA 90 AE 40 04      [ 2]  106 	ldw y,#APP_CP  
      001DCE EF 02            [ 2]  107 	ldw (2,x),y 
      001DD0 90 5F            [ 1]  108 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      001DD2 FF               [ 2]  109 	ldw (x),y 
      001DD3 81               [ 4]  110 	ret 
                                    111 
                                    112 ;------------------------------------
                                    113 ; return APP_VP pointer as double 
                                    114 ; EEP-VP ( -- ud )
                                    115 ;-------------------------------------
      001DD4 1D C0                  116 	.word LINK
                           001DD6   117 	LINK=.
      001DD6 06                     118 	.byte 6
      001DD7 45 45 50 2D 56 50      119 	.ascii "EEP-VP"
      001DDD                        120 EEPVP:
      001DDD 1D 00 04         [ 2]  121 	subw x,#2*CELLL 
      001DE0 90 AE 40 06      [ 2]  122 	ldw y,#APP_VP  
      001DE4 EF 02            [ 2]  123 	ldw (2,x),y 
      001DE6 90 5F            [ 1]  124 	clrw y 
      001DE8 FF               [ 2]  125 	ldw (x),y 
      001DE9 81               [ 4]  126 	ret 
                                    127 
                                    128 ;----------------------------------
                                    129 ; update APP_LAST with LAST 
                                    130 ; UPDAT-LAST ( -- )
                                    131 ;----------------------------------
      001DEA 1D D6                  132 	.word LINK 
                           001DEC   133 	LINK=.
      001DEC 0A                     134 	.byte 10
      001DED 55 50 44 41 54 2D 4C   135 	.ascii "UPDAT-LAST"
             41 53 54
      001DF7                        136 UPDATLAST:
      001DF7 CD 07 8F         [ 4]  137 	call LAST
      001DFA CD 04 E4         [ 4]  138 	call AT  
      001DFD CD 1D 9A         [ 4]  139 	call EEPLAST
      001E00 CC 1F ED         [ 2]  140 	jp EESTORE 
                                    141 
                                    142 ;---------------------------------
                                    143 ; update APP_RUN 
                                    144 ; UPDAT-RUN ( a -- )
                                    145 ;---------------------------------
      001E03 1D EC                  146 	.word LINK
                           001E05   147 	LINK=.
      001E05 09                     148 	.byte 9
      001E06 55 50 44 41 54 2D 52   149 	.ascii "UPDAT-RUN"
             55 4E
      001E0F                        150 UPDATRUN:
      001E0F CD 1D B1         [ 4]  151 	call EEPRUN
      001E12 CC 1F ED         [ 2]  152 	jp EESTORE 
                                    153 	
                                    154 ;---------------------------------
                                    155 ; update APP_CP with CP 
                                    156 ; UPDAT-CP ( -- )
                                    157 ;---------------------------------
      001E15 1E 05                  158 	.word LINK 
                           001E17   159 	LINK=.
      001E17 08                     160 	.byte 8 
      001E18 55 50 44 41 54 2D 43   161 	.ascii "UPDAT-CP"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



             50
      001E20                        162 UPDATCP:
      001E20 CD 07 7F         [ 4]  163 	call CPP 
      001E23 CD 04 E4         [ 4]  164 	call AT 
      001E26 CD 1D C7         [ 4]  165 	call EEPCP 
      001E29 CC 1F ED         [ 2]  166 	jp EESTORE 
                                    167 
                                    168 ;----------------------------------
                                    169 ; update APP_VP with VP 
                                    170 ; UPDAT-VP ( -- )
                                    171 ;----------------------------------
      001E2C 1E 17                  172 	.word LINK
                           001E2E   173 	LINK=.
      001E2E 08                     174 	.byte 8 
      001E2F 55 50 44 41 54 2D 56   175 	.ascii "UPDAT-VP" 
             50
      001E37                        176 UPDATVP:
      001E37 CD 07 71         [ 4]  177 	call VPP 
      001E3A CD 04 E4         [ 4]  178 	call AT
      001E3D CD 1D DD         [ 4]  179 	call EEPVP 
      001E40 CC 1F ED         [ 2]  180 	jp EESTORE
                                    181 	
                           000001   182 .if NUCLEO
                                    183 ;----------------------------------
                                    184 ; fetch integer at address over 65535
                                    185 ;  F@   ( ud -- n )
                                    186 ;----------------------------------
      001E43 1E 2E                  187     .word LINK 
                           001E45   188 LINK=.
      001E45 02                     189     .byte 2
      001E46 46 40                  190     .ascii "F@"
      001E48                        191 FARAT:
      001E48 CD 1D 63         [ 4]  192     call FPSTOR
      001E4B CC 1F 10         [ 2]  193 	jp EE_READ 
                                    194 
                                    195 
                                    196 ;-------------------------------------
                                    197 ; fetch C at address over 65535 
                                    198 ; FC@ ( ud -- c)
                                    199 ;-------------------------------------
      001E4E 1E 45                  200     .word LINK
                           001E50   201     LINK=.
      001E50 03                     202     .byte 3 
      001E51 46 43 40               203     .ascii "FC@" 
      001E54                        204 FARCAT:
      001E54 CD 1D 63         [ 4]  205     call FPSTOR
      001E57 CC 1F 32         [ 2]  206 	jp EE_CREAD  
                                    207 .endif ; NUCLEO 
                                    208 
                                    209 ;----------------------------------
                                    210 ; UNLOCK EEPROM/OPT for writing/erasing
                                    211 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    212 ;  UNLKEE   ( -- )
                                    213 ;----------------------------------
      001E5A 1E 50                  214     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                           001E5C   215 LINK=.
      001E5C 06                     216     .byte 6 
      001E5D 55 4E 4C 4B 45 45      217     .ascii "UNLKEE"
      001E63                        218 UNLKEE:
      001E63 35 00 50 5B      [ 1]  219 	mov FLASH_CR2,#0 
      001E67 35 FF 50 5C      [ 1]  220 	mov FLASH_NCR2,#0xFF 
      001E6B 35 AE 50 64      [ 1]  221 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001E6F 35 56 50 64      [ 1]  222     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001E73 72 07 50 5F FB   [ 2]  223 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001E78 81               [ 4]  224 	ret
                                    225 
                                    226 ;----------------------------------
                                    227 ; UNLOCK FLASH for writing/erasing
                                    228 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    229 ; UNLKFL  ( -- )
                                    230 ;----------------------------------
      001E79 1E 5C                  231     .word LINK 
                           001E7B   232 LINK=. 
      001E7B 06                     233     .byte 6 
      001E7C 55 4E 4C 4B 46 4C      234     .ascii "UNLKFL"    
      001E82                        235 UNLKFL:
      001E82 35 00 50 5B      [ 1]  236 	mov FLASH_CR2,#0 
      001E86 35 FF 50 5C      [ 1]  237 	mov FLASH_NCR2,#0xFF 
      001E8A 35 56 50 62      [ 1]  238 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001E8E 35 AE 50 62      [ 1]  239 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001E92 72 03 50 5F FB   [ 2]  240 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001E97 81               [ 4]  241 	ret
                                    242 
                                    243 ;-----------------------------
                                    244 ; UNLOCK FLASH or EEPROM 
                                    245 ; according to FPTR address 
                                    246 ;  UNLOCK ( -- )
                                    247 ;-----------------------------
      001E98 1E 7B                  248 	.word LINK 
                           001E9A   249 	LINK=.
      001E9A 06                     250 	.byte 6
      001E9B 55 4E 4C 4F 43 4B      251 	.ascii "UNLOCK"
      001EA1                        252 UNLOCK:
                                    253 ; put addr[15:0] in Y, for bounds check.
      001EA1 90 BE 35         [ 2]  254 	ldw y,PTR16   ; Y=addr15:0
                                    255 ; check addr[23:16], if <> 0 then it is extened flash memory
      001EA4 3D 34            [ 1]  256 	tnz FPTR 
      001EA6 26 16            [ 1]  257 	jrne 4$
      001EA8 90 A3 80 00      [ 2]  258     cpw y,#FLASH_BASE
      001EAC 24 10            [ 1]  259     jruge 4$
      001EAE 90 A3 40 00      [ 2]  260 	cpw y,#EEPROM_BASE  
      001EB2 25 0D            [ 1]  261     jrult 9$
      001EB4 90 A3 48 7F      [ 2]  262 	cpw y,#OPTION_END 
      001EB8 22 07            [ 1]  263 	jrugt 9$
      001EBA CD 1E 63         [ 4]  264 	call UNLKEE
      001EBD 81               [ 4]  265 	ret 
      001EBE CD 1E 82         [ 4]  266 4$: call UNLKFL
      001EC1 81               [ 4]  267 9$: ret 
                                    268 
                                    269 ;-------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                                    270 ; LOCK write access to 
                                    271 ; FLASH and EEPROM 
                                    272 ; LOCK ( -- )
                                    273 ;-------------------------
      001EC2 1E 9A                  274 	.word LINK 
                           001EC4   275 	LINK=.
      001EC4 04                     276 	.byte 4 
      001EC5 4C 4F 43 4B            277 	.ascii "LOCK" 
      001EC9                        278 LOCK: 
      001EC9 72 13 50 5F      [ 1]  279 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001ECD 72 17 50 5F      [ 1]  280 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001ED1 81               [ 4]  281 	ret 
                                    282 
                                    283 ;-------------------------
                                    284 ; increment FPTR 
                                    285 ; INC-FPTR ( -- )
                                    286 ;-------------------------
      001ED2 1E C4                  287 	.word LINK 
                           001ED4   288 	LINK=. 
      001ED4 08                     289 	.byte 8 
      001ED5 49 4E 43 2D 46 50 54   290 	.ascii "INC-FPTR" 
             52
      001EDD                        291 INC_FPTR:
      001EDD 3C 36            [ 1]  292 	inc PTR8 
      001EDF 26 0C            [ 1]  293 	jrne 1$
      001EE1 90 89            [ 2]  294 	pushw y 
      001EE3 90 BE 34         [ 2]  295 	ldw y,FPTR 
      001EE6 90 5C            [ 1]  296 	incw y 
      001EE8 90 BF 34         [ 2]  297 	ldw FPTR,y
      001EEB 90 85            [ 2]  298 	popw y  
      001EED 81               [ 4]  299 1$: ret 
                                    300 
                                    301 ;------------------------------
                                    302 ; add u to FPTR 
                                    303 ; PTR+ ( u -- )
                                    304 ;------------------------------
      001EEE 1E D4                  305 	.word LINK 
                           001EF0   306 	LINK=.
      001EF0 04                     307 	.byte 4 
      001EF1 50 54 52 2B            308 	.ascii "PTR+"
      001EF5                        309 PTRPLUS:
      001EF5 90 93            [ 1]  310 	ldw y,x 
      001EF7 1C 00 02         [ 2]  311 	addw x,#CELLL 
      001EFA 72 B9 00 35      [ 2]  312 	addw y,PTR16 
      001EFE 90 BF 35         [ 2]  313 	ldw PTR16,y  
      001F01 24 02            [ 1]  314 	jrnc 1$
      001F03 3C 34            [ 1]  315 	inc FPTR 
      001F05 81               [ 4]  316 1$: ret 
                                    317 
                                    318 ;---------------------------------
                                    319 ; read word at address pointed FPTR
                                    320 ; increment FPTR 
                                    321 ; EE-READ ( -- w )
                                    322 ;------------------------------------
      001F06 1E F0                  323 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



                           001F08   324 	LINK=.
      001F08 07                     325 	.byte 7 
      001F09 45 45 2D 52 45 41 44   326 	.ascii "EE-READ"
      001F10                        327 EE_READ:
      001F10 1D 00 02         [ 2]  328 	subw x,#CELLL 
      001F13 92 BC 00 34      [ 5]  329 	ldf a,[FPTR]
      001F17 90 95            [ 1]  330 	ld yh,a 
      001F19 CD 1E DD         [ 4]  331 	call INC_FPTR 
      001F1C 92 BC 00 34      [ 5]  332 	ldf a,[FPTR]
      001F20 CD 1E DD         [ 4]  333 	call INC_FPTR 
      001F23 90 97            [ 1]  334 	ld yl,a 
      001F25 FF               [ 2]  335 	ldw (x),y 
      001F26 81               [ 4]  336 	ret 
                                    337 
                                    338 ;---------------------------------------
                                    339 ; Read byte at address pointed by FPTR 
                                    340 ; EE-CREAD ( -- c )
                                    341 ;---------------------------------------
      001F27 1F 08                  342 	.word LINK 
                           001F29   343 	LINK=.
      001F29 08                     344 	.byte 8
      001F2A 45 45 2D 43 52 45 41   345 	.ascii "EE-CREAD" 
             44
      001F32                        346 EE_CREAD:
      001F32 1D 00 02         [ 2]  347 	subw x,#CELLL 
      001F35 92 BC 00 34      [ 5]  348 	ldf a,[FPTR]	
      001F39 CD 1E DD         [ 4]  349 	call INC_FPTR
      001F3C 90 5F            [ 1]  350 	clrw y 
      001F3E 90 97            [ 1]  351 	ld yl,a 
      001F40 FF               [ 2]  352 	ldw (x),y 
      001F41 81               [ 4]  353 	ret 
                                    354 
                                    355 ;----------------------------
                                    356 ; write a byte at address pointed 
                                    357 ; by FPTR and increment FPTR.
                                    358 ; Expect pointer already initialized 
                                    359 ; and memory unlocked 
                                    360 ; WR-BYTE ( c -- )
                                    361 ;----------------------------
      001F42 1F 29                  362 	.word LINK 
                           001F44   363 	LINK=. 
      001F44 07                     364 	.byte 7 
      001F45 57 52 2D 42 59 54 45   365 	.ascii "WR-BYTE" 
                                    366 
      001F4C                        367 WR_BYTE:
      001F4C CD 04 64         [ 4]  368 	call FC_XOFF
      001F4F 90 93            [ 1]  369 	ldw y,x 
      001F51 90 FE            [ 2]  370 	ldw y,(y)
      001F53 1C 00 02         [ 2]  371 	addw x,#CELLL 
      001F56 90 9F            [ 1]  372 	ld a,yl
      001F58 92 BD 00 34      [ 4]  373 	ldf [FPTR],a
      001F5C 72 05 50 5F FB   [ 2]  374 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001F61 CD 04 4E         [ 4]  375 	call FC_XON
      001F64 CC 1E DD         [ 2]  376 	jp INC_FPTR 
                                    377 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



                                    378 ;---------------------------------------
                                    379 ; write a word at address pointed 
                                    380 ; by FPTR and increment FPTR 
                                    381 ; Expect pointer already initialzed 
                                    382 ; and memory unlocked 
                                    383 ; WR-WORD ( w -- )
                                    384 ;---------------------------------------
      001F67 1F 44                  385 	.word LINK 
                           001F69   386 	LINK=.
      001F69 07                     387 	.byte 7 
      001F6A 57 52 2D 57 4F 52 44   388 	.ascii "WR-WORD" 
      001F71                        389 WR_WORD:
      001F71 CD 04 64         [ 4]  390 	call FC_XOFF
      001F74 90 93            [ 1]  391 	ldw y,x
      001F76 90 FE            [ 2]  392 	ldw y,(y)
      001F78 1C 00 02         [ 2]  393 	addw x,#CELLL 
      001F7B 90 9E            [ 1]  394 	ld a,yh 
      001F7D 92 BD 00 34      [ 4]  395 	ldf [FPTR],a
      001F81 72 05 50 5F FB   [ 2]  396 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001F86 CD 1E DD         [ 4]  397 	call INC_FPTR 
      001F89 90 9F            [ 1]  398 	ld a,yl 
      001F8B 92 BD 00 34      [ 4]  399 	ldf [FPTR],a
      001F8F 72 05 50 5F FB   [ 2]  400 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001F94 CD 04 4E         [ 4]  401 	call FC_XON
      001F97 CC 1E DD         [ 2]  402 	jp INC_FPTR 
                                    403 
                                    404 
                                    405 ;---------------------------------------
                                    406 ; write a byte to FLASH or EEPROM/OPTION  
                                    407 ; EEC!  (c ud -- )
                                    408 ;---------------------------------------
      001F9A 1F 69                  409     .word LINK 
                           001F9C   410 	LINK=.
      001F9C 04                     411     .byte 4 
      001F9D 45 45 43 21            412     .ascii "EEC!"
                                    413 	; local variables 
                           000001   414 	BTW = 1   ; byte to write offset on stack
                           000002   415     OPT = 2 
                           000002   416 	VSIZE = 2
      001FA1                        417 EECSTORE:
      001FA1 52 02            [ 2]  418 	sub sp,#VSIZE
      001FA3 CD 1D 63         [ 4]  419     call FPSTOR
      001FA6 E6 01            [ 1]  420 	ld a,(1,x)
      001FA8 43               [ 1]  421 	cpl a 
      001FA9 6B 01            [ 1]  422 	ld (BTW,sp),a ; byte to write 
      001FAB 0F 02            [ 1]  423 	clr (OPT,sp)  ; OPTION flag
      001FAD CD 1E A1         [ 4]  424 	call UNLOCK 
                                    425 	; check if option
      001FB0 3D 34            [ 1]  426 	tnz FPTR 
      001FB2 26 19            [ 1]  427 	jrne 2$
      001FB4 90 BE 35         [ 2]  428 	ldw y,PTR16 
      001FB7 90 A3 48 00      [ 2]  429 	cpw y,#OPTION_BASE
      001FBB 2B 10            [ 1]  430 	jrmi 2$
      001FBD 90 A3 48 80      [ 2]  431 	cpw y,#OPTION_END+1
      001FC1 2A 0A            [ 1]  432 	jrpl 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      001FC3 03 02            [ 1]  433 	cpl (OPT,sp)
                                    434 	; OPTION WRITE require this UNLOCK 
      001FC5 72 1E 50 5B      [ 1]  435     bset FLASH_CR2,#FLASH_CR2_OPT
      001FC9 72 1F 50 5C      [ 1]  436     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001FCD                        437 2$: 
      001FCD CD 1F 4C         [ 4]  438 	call WR_BYTE 	
      001FD0 0D 02            [ 1]  439 	tnz (OPT,sp)
      001FD2 27 0D            [ 1]  440 	jreq 3$ 
      001FD4 7B 01            [ 1]  441     ld a,(BTW,sp)
      001FD6 90 5F            [ 1]  442     clrw y
      001FD8 90 97            [ 1]  443 	ld yl,a 
      001FDA 1D 00 02         [ 2]  444 	subw x,#CELLL 
      001FDD FF               [ 2]  445 	ldw (x),y 
      001FDE CD 1F 4C         [ 4]  446 	call WR_BYTE
      001FE1                        447 3$: 
      001FE1 CD 1E C9         [ 4]  448 	call LOCK 
      001FE4 5B 02            [ 2]  449 	addw sp,#VSIZE 
      001FE6 81               [ 4]  450     ret
                                    451 
                                    452 ;------------------------------
                                    453 ; write integer in FLASH|EEPROM
                                    454 ; EE! ( n ud -- )
                                    455 ;------------------------------
      001FE7 1F 9C                  456 	.word LINK 
                           001FE9   457 	LINK=.
      001FE9 03                     458 	.byte 3 
      001FEA 45 45 21               459 	.ascii "EE!"
      001FED                        460 EESTORE:
      001FED CD 1D 63         [ 4]  461 	call FPSTOR 
      001FF0 CD 1E A1         [ 4]  462 	call UNLOCK 
      001FF3 90 93            [ 1]  463 	ldw y,x 
      001FF5 90 FE            [ 2]  464 	ldw y,(y)
      001FF7 90 89            [ 2]  465 	pushw y 
      001FF9 90 5E            [ 1]  466 	swapw y 
      001FFB FF               [ 2]  467 	ldw (x),y 
      001FFC CD 1F 4C         [ 4]  468 	call WR_BYTE 
      001FFF 90 85            [ 2]  469 	popw y 
      002001 1D 00 02         [ 2]  470 	subw x,#CELLL
      002004 FF               [ 2]  471 	ldw (x),y 
      002005 CD 1F 4C         [ 4]  472 	call WR_BYTE
      002008 CC 1E C9         [ 2]  473 	jp LOCK 
                                    474 
                                    475 
                                    476 ;----------------------------
                                    477 ; Erase flash memory row 
                                    478 ; stm8s208 as 128 bytes rows
                                    479 ; ROW-ERASE ( ud -- )
                                    480 ;----------------------------
      00200B 1F E9                  481 	.word LINK 
                           00200D   482 	LINK=. 
      00200D 09                     483 	.byte 9 
      00200E 52 4F 57 2D 45 52 41   484 	.ascii "ROW-ERASE" 
             53 45
      002017                        485 row_erase:
      002017 CD 04 64         [ 4]  486 	call FC_XOFF
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      00201A CD 1D 63         [ 4]  487 	call FPSTOR
                                    488 ;code must be execute from RAM 
                                    489 ;copy routine to PAD 
      00201D 1D 00 02         [ 2]  490 	subw x,#CELLL 
      002020 90 AE 20 70      [ 2]  491 	ldw y,#row_erase_proc
      002024 FF               [ 2]  492 	ldw (x),y 
      002025 CD 0C FA         [ 4]  493 	call PAD 
      002028 90 AE 20 97      [ 2]  494 	ldw y,#row_erase_proc_end 
      00202C 72 A2 20 70      [ 2]  495 	subw y,#row_erase_proc
      002030 1D 00 02         [ 2]  496 	subw x,#CELLL 
      002033 FF               [ 2]  497 	ldw (x),y 
      002034 CD 0D 36         [ 4]  498 	call CMOVE 
      002037                        499 block_erase:
      002037 90 BE 35         [ 2]  500 	ldw y,FPTR+1
      00203A 90 A3 30 00      [ 2]  501 	cpw y,#app_space 
      00203E 2A 19            [ 1]  502 	jrpl erase_flash 
                                    503 ; erase EEPROM block
      002040 90 A3 40 00      [ 2]  504 	cpw y,#EEPROM_BASE 
      002044 24 04            [ 1]  505 	jruge 1$
      002046 CD 04 4E         [ 4]  506 	call FC_XON
      002049 81               [ 4]  507 	ret ; bad address 
      00204A 90 A3 47 FF      [ 2]  508 1$: cpw y,#EEPROM_END 
      00204E 23 04            [ 2]  509 	jrule 2$ 
      002050 CD 04 4E         [ 4]  510 	call FC_XON
      002053 81               [ 4]  511 	ret ; bad address 
      002054                        512 2$:	
      002054 CD 1E 63         [ 4]  513 	call UNLKEE 
      002057 20 03            [ 2]  514 	jra proceed_erase
                                    515 ; erase flash block:
      002059                        516 erase_flash:
      002059 CD 1E 82         [ 4]  517 	call UNLKFL 
      00205C                        518 proceed_erase:
      00205C CD 0C FA         [ 4]  519 	call PAD 
      00205F 90 93            [ 1]  520 	ldw y,x
      002061 90 FE            [ 2]  521 	ldw y,(y)
      002063 1C 00 02         [ 2]  522 	addw x,#CELLL  
      002066 90 FD            [ 4]  523 	call (y) 
      002068 72 17 50 5F      [ 1]  524 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      00206C CD 04 4E         [ 4]  525 	call FC_XON
      00206F 81               [ 4]  526 	ret 
                                    527 
                                    528 ; this routine is to be copied to PAD 
      002070                        529 row_erase_proc:
      002070 35 20 50 5B      [ 1]  530 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      002074 35 DF 50 5C      [ 1]  531 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      002078 4F               [ 1]  532 	clr a 
      002079 90 5F            [ 1]  533 	clrw y 
      00207B 91 A7 00 34      [ 1]  534 	ldf ([FPTR],y),a
      00207F 90 5C            [ 1]  535     incw y
      002081 91 A7 00 34      [ 1]  536 	ldf ([FPTR],y),a
      002085 90 5C            [ 1]  537     incw y
      002087 91 A7 00 34      [ 1]  538 	ldf ([FPTR],y),a
      00208B 90 5C            [ 1]  539     incw y
      00208D 91 A7 00 34      [ 1]  540 	ldf ([FPTR],y),a
      002091 72 05 50 5F FB   [ 2]  541 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



      002096 81               [ 4]  542 	ret
      002097                        543 row_erase_proc_end:
                                    544 
                                    545 
                                    546 ;-----------------------------------
                                    547 ; block programming must be 
                                    548 ; executed from RAM 
                                    549 ; initial contidions: 
                                    550 ; 		memory unlocked
                                    551 ;       FPTR initialized 
                                    552 ; input: 
                                    553 ;    x   buffer address 
                                    554 ;-----------------------------------
                           000001   555 	BCNT=1 
      002097                        556 copy_buffer:
      002097 4B 80            [ 1]  557 	push #BLOCK_SIZE  
                                    558 ;enable block programming 
      002099 72 10 50 5B      [ 1]  559 	bset FLASH_CR2,#FLASH_CR2_PRG 
      00209D 72 11 50 5C      [ 1]  560 	bres FLASH_NCR2,#FLASH_CR2_PRG
      0020A1 90 5F            [ 1]  561 	clrw y
      0020A3 F6               [ 1]  562 1$:	ld a,(x)
      0020A4 91 A7 00 34      [ 1]  563 	ldf ([FPTR],y),a
      0020A8 5C               [ 1]  564 	incw x 
      0020A9 90 5C            [ 1]  565 	incw y 
      0020AB 0A 01            [ 1]  566 	dec (BCNT,sp)
      0020AD 26 F4            [ 1]  567 	jrne 1$
                                    568 ; wait EOP bit 
      0020AF 72 05 50 5F FB   [ 2]  569 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      0020B4 84               [ 1]  570 	pop a ; remove BCNT from stack 
      0020B5 81               [ 4]  571 	ret 
      0020B6                        572 copy_buffer_end:
                                    573 
                                    574 ;-------------------------
                                    575 ; move program_row to RAM 
                                    576 ; in TIB 
                                    577 ;------------------------
      0020B6                        578 copy_prog_to_ram:
      0020B6 1D 00 06         [ 2]  579 	subw x,#6
      0020B9 90 AE 20 97      [ 2]  580 	ldw y,#copy_buffer 
      0020BD EF 04            [ 2]  581 	ldw (4,x),y 
      0020BF 90 AE 17 00      [ 2]  582 	ldw y,#TIBBASE
      0020C3 EF 02            [ 2]  583 	ldw (2,x),y 
      0020C5 90 AE 20 B6      [ 2]  584 	ldw y,#copy_buffer_end 
      0020C9 72 A2 20 97      [ 2]  585 	subw y,#copy_buffer  
      0020CD FF               [ 2]  586 	ldw (x),y 
      0020CE CD 0D 36         [ 4]  587 	call CMOVE 
      0020D1 81               [ 4]  588 	ret 
                                    589 
                                    590 
                                    591 ;-----------------------------
                                    592 ; write a row in FLASH/EEPROM 
                                    593 ; WR-ROW ( a ud -- )
                                    594 ; a -> address 128 byte buffer to write 
                                    595 ; ud ->  row address in FLASH|EEPROM 
                                    596 ;-----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



      0020D2 20 0D                  597 	.word LINK 
                           0020D4   598 	LINK=.
      0020D4 06                     599 	.byte 6 
      0020D5 57 52 2D 52 4F 57      600 	.ascii "WR-ROW"
      0020DB                        601 write_row:
      0020DB CD 04 64         [ 4]  602 	call FC_XOFF
      0020DE CD 1D 63         [ 4]  603 	call FPSTOR
                                    604 ; align to FLASH block 
      0020E1 A6 80            [ 1]  605 	ld a,#0x80 
      0020E3 B4 36            [ 1]  606 	and a,PTR8 
      0020E5 B7 36            [ 1]  607 	ld PTR8,a  
      0020E7 CD 20 B6         [ 4]  608 	call copy_prog_to_ram
      0020EA CD 1E A1         [ 4]  609 	call UNLOCK
      0020ED 90 93            [ 1]  610 	ldw y,x 
      0020EF 90 FE            [ 2]  611 	ldw y,(y)
      0020F1 1C 00 02         [ 2]  612 	addw x,#CELLL 
      0020F4 89               [ 2]  613 	pushw x 
      0020F5 93               [ 1]  614 	ldw x,y ; buffer address in x 
      0020F6 CD 17 00         [ 4]  615 	call TIBBASE
      0020F9 CD 1E C9         [ 4]  616 	call LOCK
      0020FC 85               [ 2]  617 	popw x 
      0020FD CD 04 4E         [ 4]  618 	call FC_XON 
      002100 81               [ 4]  619 	ret 
                                    620 
                                    621 ;-------------------------------------
                                    622 ; change value of OPTION register 
                                    623 ; SET-OPT (c n -- ) 
                                    624 ; c new value.
                                    625 ; n OPT  number {1..7}
                                    626 ;--------------------------------------
      002101 20 D4                  627 		.word LINK 
                           002103   628 		LINK=.
      002103 07                     629 		.byte 7 
      002104 53 45 54 2D 4F 50 54   630 		.ascii "SET-OPT" 
      00210B                        631 set_option: 
      00210B 90 93            [ 1]  632 		ldw y,x 
      00210D 90 FE            [ 2]  633 		ldw y,(y)
      00210F 27 06            [ 1]  634 		jreq 1$
      002111 90 A3 00 07      [ 2]  635 		cpw y,#7 
      002115 23 04            [ 2]  636 		jrule 2$ 
                                    637 ; invalid OPTION number 		
      002117 1C 00 04         [ 2]  638 1$:		addw x,#2*CELLL
      00211A 81               [ 4]  639 		ret
      00211B 90 58            [ 2]  640 2$:		sllw y 
      00211D 72 A9 47 FF      [ 2]  641 		addw y,#OPTION_BASE-1
      002121 FF               [ 2]  642 		ldw (x),y 
      002122 1D 00 02         [ 2]  643 		subw x,#CELLL 
      002125 90 5F            [ 1]  644 		clrw y 
      002127 FF               [ 2]  645 		ldw (x),y 
      002128 CD 1F A1         [ 4]  646 		call EECSTORE
      00212B 81               [ 4]  647 		ret 
                                    648 
                                    649 
                                    650 
                                    651 ;--------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



                                    652 ; reset system to its original state 
                                    653 ; before any user modification
                                    654 ; PRISTINE ( -- )
                                    655 ;-------------------------------------
      00212C 21 03                  656 	.word LINK  
                           00212E   657 	LINK=.
      00212E 08                     658 	.byte 8 
      00212F 50 52 49 53 54 49 4E   659 	.ascii "PRISTINE"
             45
      002137                        660 pristine:
                                    661 ;;; erase EEPROM
      002137 CD 1D 82         [ 4]  662 	call EEPROM 
      00213A CD 08 28         [ 4]  663 1$:	call DDUP 
      00213D CD 20 17         [ 4]  664 	call row_erase
      002140 90 93            [ 1]  665 	ldw y,x 
      002142 90 EE 02         [ 2]  666 	ldw y,(2,y)
      002145 72 A9 00 80      [ 2]  667 	addw y,#BLOCK_SIZE
      002149 EF 02            [ 2]  668 	ldw (2,x),y
      00214B 90 A3 48 00      [ 2]  669 	cpw y,#OPTION_BASE 
      00214F 25 E9            [ 1]  670 	jrult 1$
                                    671 ;;; reset OPTION to default values
      002151 90 AE 00 01      [ 2]  672 	ldw y,#1 ; OPT1 
      002155 FF               [ 2]  673 2$:	ldw (x),y   
      002156 90 5F            [ 1]  674 	clrw y 
      002158 EF 02            [ 2]  675 	ldw (2,x),y  ; ( 0 1 -- ) 
      00215A CD 08 28         [ 4]  676 	call DDUP    ; ( 0 1 0 1 -- )  
      00215D CD 21 0B         [ 4]  677 	call set_option
      002160 90 93            [ 1]  678 	ldw y,x 
      002162 90 FE            [ 2]  679 	ldw y,(y)
      002164 90 5C            [ 1]  680 	incw y  ; next OPTION 
      002166 90 A3 00 08      [ 2]  681 	cpw y,#8 
      00216A 25 E9            [ 1]  682 	jrult 2$
                                    683 ;;; erase first row of app_space 	
      00216C 90 AE 30 00      [ 2]  684 	ldw y,#app_space
      002170 EF 02            [ 2]  685 	ldw (2,x),y  
      002172 90 5F            [ 1]  686 	clrw y 
      002174 FF               [ 2]  687 	ldw (x),y ; ( app_space 0 -- )
      002175 CD 20 17         [ 4]  688 	call row_erase 
                                    689 ; reset interrupt vectors 
      002178 1D 00 02         [ 2]  690 	subw x,#CELLL 
      00217B 90 5F            [ 1]  691 	clrw y  
      00217D FF               [ 2]  692 4$:	ldw (x),y  ; ( n -- ) int# 
      00217E CD 06 1A         [ 4]  693 	call DUPP  
      002181 CD 21 9E         [ 4]  694 	call reset_vector
      002184 90 93            [ 1]  695 	ldw y,x 
      002186 90 FE            [ 2]  696 	ldw y,(y)
      002188 90 5C            [ 1]  697 	incw y   ; next vector 
      00218A 90 A3 00 19      [ 2]  698 	cpw y,#25 
      00218E 25 ED            [ 1]  699 	jrult 4$
      002190 CC 00 00         [ 2]  700 	jp NonHandledInterrupt ; reset MCU
                                    701 
                                    702 ;------------------------------
                                    703 ; reset an interrupt vector 
                                    704 ; to its initial value 
                                    705 ; i.e. NonHandledInterrupt
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



                                    706 ; RST-IVEC ( n -- )
                                    707 ;-----------------------------
      002193 21 2E                  708 	.word LINK 
                           002195   709 	LINK=. 
      002195 08                     710 	.byte 8 
      002196 52 53 54 2D 49 56 45   711 	.ascii "RST-IVEC"
             43
      00219E                        712 reset_vector:
      00219E 90 93            [ 1]  713 	ldw y,x
      0021A0 1C 00 02         [ 2]  714 	addw x,#CELLL 
      0021A3 90 FE            [ 2]  715 	ldw y,(y)
      0021A5 90 A3 00 17      [ 2]  716 	cpw y,#23 
      0021A9 27 3A            [ 1]  717 	jreq 9$
      0021AB 90 A3 00 1D      [ 2]  718 	cpw y,#29 ; last vector
      0021AF 22 34            [ 1]  719 	jrugt 9$  
      0021B1 90 58            [ 2]  720 	sllw y 
      0021B3 90 58            [ 2]  721 	sllw y 
      0021B5 72 A9 80 08      [ 2]  722 	addw y,#0x8008 ; irq0 address 
      0021B9 90 BF 26         [ 2]  723 	ldw YTEMP,y
      0021BC 1D 00 06         [ 2]  724 	subw x,#3*CELLL 
      0021BF EF 02            [ 2]  725 	ldw (2,x),y 
      0021C1 90 5F            [ 1]  726 	clrw y
      0021C3 FF               [ 2]  727 	ldw (x),y 
      0021C4 A6 82            [ 1]  728 	ld a,#0x82 
      0021C6 90 95            [ 1]  729 	ld yh,a
      0021C8 EF 04            [ 2]  730 	ldw (4,x),y
      0021CA CD 1F ED         [ 4]  731 	call EESTORE
      0021CD 1D 00 06         [ 2]  732 	subw x,#3*CELLL
      0021D0 90 5F            [ 1]  733 	clrw y 
      0021D2 FF               [ 2]  734 	ldw (x),y 
      0021D3 90 AE 00 00      [ 2]  735 	ldw y,#NonHandledInterrupt
      0021D7 EF 04            [ 2]  736 	ldw (4,x),y 
      0021D9 90 BE 26         [ 2]  737 	ldw y,YTEMP  
      0021DC 72 A9 00 02      [ 2]  738 	addw y,#2
      0021E0 EF 02            [ 2]  739 	ldw (2,x),y 
      0021E2 CD 1F ED         [ 4]  740 	call EESTORE
      0021E5 81               [ 4]  741 9$:	ret 
                                    742 
                                    743 
                                    744 ;------------------------------
                                    745 ; all interrupt vector with 
                                    746 ; an address >= a are resetted 
                                    747 ; to default
                                    748 ; CHKIVEC ( a -- )
                                    749 ;------------------------------
      0021E6 21 95                  750 	.word LINK 
                           0021E8   751 	LINK=.
      0021E8 07                     752 	.byte 7
      0021E9 43 48 4B 49 56 45 43   753 	.ascii "CHKIVEC"
                                    754 ;local variables 
                           000001   755 	SSP=1
                           000003   756 	CADR=3
                           000005   757 	OFS=5
                           000006   758 	VSIZE=6  
      0021F0                        759 CHKIVEC:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



      0021F0 52 06            [ 2]  760 	sub sp,#VSIZE ;alloc local variables 
      0021F2 90 93            [ 1]  761 	ldw y,x 
      0021F4 90 FE            [ 2]  762 	ldw y,(y)
      0021F6 17 03            [ 2]  763 	ldw (CADR,sp),y ; ca 
      0021F8 1F 01            [ 2]  764 	ldw (SSP,sp),x 
      0021FA AE 80 0A         [ 2]  765 	ldw x,#0x800a ; irq0 address 
      0021FD BF 35            [ 2]  766 	ldw PTR16,X
      0021FF AE FF FC         [ 2]  767 	ldw x,#-4 
      002202 1C 00 04         [ 2]  768 1$:	addw x,#4
      002205 A3 00 78         [ 2]  769 	cpw x,#30*4 ; irq0-29 
      002208 27 22            [ 1]  770 	jreq 9$
      00220A 90 93            [ 1]  771 	ldw y,x  
      00220C 91 D6 35         [ 4]  772 	ld a,([PTR16],y)
      00220F 11 03            [ 1]  773 	cp a,(CADR,sp)
      002211 25 EF            [ 1]  774 	jrult 1$
      002213 90 5C            [ 1]  775 	incw y 
      002215 91 D6 35         [ 4]  776 	ld a,([PTR16],y)
      002218 11 04            [ 1]  777 	cp a,(CADR+1,sp) 
      00221A 25 E6            [ 1]  778 	jrult 1$ 
      00221C 1F 05            [ 2]  779 	ldw (OFS,sp),x 
      00221E 54               [ 2]  780 	srlw x
      00221F 54               [ 2]  781 	srlw x 
      002220 90 93            [ 1]  782 	ldw y,x 
      002222 1E 01            [ 2]  783 	ldw x,(SSP,sp)
      002224 FF               [ 2]  784 	ldw (x),y
      002225 CD 21 9E         [ 4]  785 	call reset_vector
      002228 1E 05            [ 2]  786 	ldw x,(OFS,sp) 
      00222A 20 D6            [ 2]  787 	jra 1$
      00222C 1E 01            [ 2]  788 9$:	ldw x,(SSP,sp) 
      00222E 1C 00 02         [ 2]  789 	addw x,#CELLL 
      002231 5B 06            [ 2]  790 	addw sp,#VSIZE ; drop local variables  
      002233 81               [ 4]  791 	ret 
                                    792 
                                    793 ;------------------------------
                                    794 ; set interrupt vector 
                                    795 ; SET-IVEC ( ud n -- )
                                    796 ;  ud Handler address
                                    797 ;  n  vector # 0 .. 29 
                                    798 ;-----------------------------
      002234 21 E8                  799 	.word LINK
                           002236   800 	LINK=.
      002236 08                     801 	.byte 8 
      002237 53 45 54 2D 49 56 45   802 	.ascii "SET-IVEC" 
             43
      00223F                        803 set_vector:
      00223F 90 93            [ 1]  804     ldw y,x 
      002241 1C 00 02         [ 2]  805 	addw x,#CELLL 
      002244 90 FE            [ 2]  806 	ldw y,(y) ; vector #
      002246 90 A3 00 1D      [ 2]  807 	cpw y,#29 ; last vector
      00224A 23 04            [ 2]  808 	jrule 2$
      00224C 1C 00 04         [ 2]  809 	addw x,#2*CELLL 
      00224F 81               [ 4]  810 	ret
      002250 90 58            [ 2]  811 2$:	sllw y 
      002252 90 58            [ 2]  812 	sllw y 
      002254 72 A9 80 08      [ 2]  813 	addw y,#0X8008 ; IRQ0 vector address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      002258 90 BF 26         [ 2]  814 	ldw YTEMP,y ; vector address 
      00225B A6 82            [ 1]  815 	ld a,#0x82 
      00225D 90 95            [ 1]  816 	ld yh,a 
      00225F E6 01            [ 1]  817 	ld a,(1,x) ; isr address bits 23..16 
      002261 90 97            [ 1]  818 	ld yl,a 
                                    819 ;  write 0x82 + most significant byte of int address	
      002263 1D 00 06         [ 2]  820 	subw x,#3*CELLL 
      002266 EF 04            [ 2]  821 	ldw (4,x),y 
      002268 90 BE 26         [ 2]  822 	ldw y,YTEMP
      00226B EF 02            [ 2]  823 	ldw (2,x),y ; vector address 
      00226D 90 5F            [ 1]  824 	clrw y 
      00226F FF               [ 2]  825 	ldw (x),y   ; as a double 
      002270 CD 1F ED         [ 4]  826 	call EESTORE 
      002273 90 93            [ 1]  827 	ldw y,x 
      002275 90 EE 02         [ 2]  828 	ldw y,(2,y) ; bits 15..0 int vector 
      002278 1D 00 06         [ 2]  829 	subw x,#3*CELLL 
      00227B EF 04            [ 2]  830 	ldw (4,x),y 
      00227D 90 BE 26         [ 2]  831 	ldw y,YTEMP 
      002280 72 A9 00 02      [ 2]  832 	addw y,#2 
      002284 EF 02            [ 2]  833 	ldw (2,x),y 
      002286 90 5F            [ 1]  834 	clrw y 
      002288 FF               [ 2]  835 	ldw (x),y 
      002289 CD 1F ED         [ 4]  836 	call EESTORE
      00228C 1C 00 04         [ 2]  837 	addw x,#2*CELLL  
      00228F 81               [ 4]  838 9$: ret 
                                    839 
                                    840 
                                    841 ;------------------------
                                    842 ; Compile word to flash
                                    843 ; EE, (w -- )
                                    844 ;-----------------------
      002290 22 36                  845 	.word LINK
                           002292   846 	LINK=.
      002292 03                     847 	.byte 3
      002293 45 45 2C               848 	.ascii "EE,"
      002296                        849 EE_COMMA:
      002296 1D 00 04         [ 2]  850 	subw x,#2*CELLL 
      002299 90 BE 1A         [ 2]  851 	ldw y,UCP
      00229C 90 89            [ 2]  852 	pushw y 
      00229E EF 02            [ 2]  853 	ldw (2,x),y 
      0022A0 90 5F            [ 1]  854 	clrw y 
      0022A2 FF               [ 2]  855 	ldw (x),y
      0022A3 CD 1F ED         [ 4]  856 	call EESTORE
      0022A6 90 85            [ 2]  857 	popw y 
      0022A8 72 A9 00 02      [ 2]  858 	addw y,#2
      0022AC 90 BF 1A         [ 2]  859 	ldw UCP,y
      0022AF 81               [ 4]  860 	ret 
                                    861 
                                    862 
                                    863 ;-------------------------
                                    864 ; Compile byte to flash 
                                    865 ; EEC, ( c -- )	
                                    866 ;-------------------------
      0022B0 22 92                  867 	.word LINK 
                           0022B2   868 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      0022B2 04                     869 	.byte 4 
      0022B3 45 45 43 2C            870 	.ascii "EEC,"
      0022B7                        871 EE_CCOMMA:
      0022B7 1D 00 04         [ 2]  872 	subw x,#2*CELLL 
      0022BA 90 BE 1A         [ 2]  873 	ldw y,UCP
      0022BD 90 89            [ 2]  874 	pushw y 
      0022BF EF 02            [ 2]  875 	ldw (2,x),y 
      0022C1 90 5F            [ 1]  876 	clrw y 
      0022C3 FF               [ 2]  877 	ldw (x),y
      0022C4 CD 1F A1         [ 4]  878 	call EECSTORE
      0022C7 90 85            [ 2]  879 	popw y 
      0022C9 90 5C            [ 1]  880 	incw y 
      0022CB 90 BF 1A         [ 2]  881 	ldw UCP,y
      0022CE 81               [ 4]  882 	ret 
                                    883 
                                    884 
                                    885 ;--------------------------
                                    886 ; copy FLASH block to ROWBUF
                                    887 ; ROW>BUF ( ud -- )
                                    888 ;--------------------------
      0022CF 22 B2                  889 	.word LINK 
                           0022D1   890 	LINK=.
      0022D1 07                     891 	.byte 7 
      0022D2 52 4F 57 3E 42 55 46   892 	.ascii "ROW>BUF"
      0022D9                        893 ROW2BUF: 
      0022D9 CD 1D 63         [ 4]  894 	call FPSTOR 
      0022DC A6 80            [ 1]  895 	ld a,#BLOCK_SIZE
      0022DE 88               [ 1]  896 	push a 
      0022DF B4 36            [ 1]  897 	and a,PTR8 ; block align 
      0022E1 B7 36            [ 1]  898 	ld PTR8,a
      0022E3 90 AE 16 80      [ 2]  899 	ldw y,#ROWBUFF 
      0022E7 92 BC 00 34      [ 5]  900 1$: ldf a,[FPTR]
      0022EB 90 F7            [ 1]  901 	ld (y),a
      0022ED CD 1E DD         [ 4]  902 	call INC_FPTR
      0022F0 90 5C            [ 1]  903 	incw y 
      0022F2 0A 01            [ 1]  904 	dec (1,sp)
      0022F4 26 F1            [ 1]  905 	jrne 1$ 
      0022F6 84               [ 1]  906 	pop a 
      0022F7 81               [ 4]  907 	ret 
                                    908 
                                    909 
                                    910 ;---------------------------
                                    911 ; copy ROWBUFF to flash 
                                    912 ; BUF>ROW ( ud -- )
                                    913 ; ud is row address as double 
                                    914 ;---------------------------
      0022F8 22 D1                  915 	.word LINK 
                           0022FA   916 	LINK=.
      0022FA 07                     917 	.byte 7 
      0022FB 42 55 46 3E 52 4F 57   918 	.ascii "BUF>ROW" 
      002302                        919 BUF2ROW:
      002302 CD 07 1E         [ 4]  920 	call TBUF ; ( ud rb -- )
      002305 CD 07 DE         [ 4]  921 	call ROT 
      002308 CD 07 DE         [ 4]  922 	call ROT  ; ( rb ud -- )
      00230B CD 20 DB         [ 4]  923 	call write_row 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      00230E 81               [ 4]  924 	ret 
                                    925 
                                    926 ;---------------------------------
                                    927 ; how many byte free in that row 
                                    928 ; RFREE ( a -- n )
                                    929 ; a is least byte of target address
                                    930 ;----------------------------------
      00230F 22 FA                  931 	.word LINK 
                           002311   932 	LINK=.
      002311 05                     933 	.byte 5 
      002312 52 46 52 45 45         934 	.ascii "RFREE"
      002317                        935 RFREE:
      002317 E6 01            [ 1]  936 	ld a,(1,x)
      002319 A4 7F            [ 1]  937 	and a,#BLOCK_SIZE-1 
      00231B B7 26            [ 1]  938 	ld YTEMP,a 
      00231D A6 80            [ 1]  939 	ld a,#BLOCK_SIZE 
      00231F B0 26            [ 1]  940 	sub a,YTEMP 
      002321 90 5F            [ 1]  941 	clrw y 
      002323 90 97            [ 1]  942 	ld yl,a
      002325 FF               [ 2]  943 	ldw (x),y 
      002326 81               [ 4]  944 	ret 
                                    945 
                                    946 ;---------------------------------
                                    947 ; write u bytes to flash/EEPROM 
                                    948 ; constraint to row limit 
                                    949 ; RAM>EE ( ud a u -- u2 )
                                    950 ; ud flash address 
                                    951 ; a ram address 
                                    952 ; u bytes count
                                    953 ; return u2 bytes written  
                                    954 ;-------------------------------
      002327 23 11                  955 	.word LINK 
                           002329   956 	LINK=. 
      002329 06                     957 	.byte 6
      00232A 52 41 4D 3E 45 45      958 	.ascii "RAM>EE"
                                    959 	
      002330                        960 RAM2EE:
                                    961 ; copy ud on top 
      002330 90 93            [ 1]  962 	ldw y,x 
      002332 90 EE 06         [ 2]  963 	ldw y,(6,y) ; LSW of ud  
      002335 90 BF 26         [ 2]  964 	ldw YTEMP,y 
      002338 90 93            [ 1]  965 	ldw y,x 
      00233A 90 EE 04         [ 2]  966 	ldw y,(4,y)  ; MSW of ud 
      00233D 1D 00 04         [ 2]  967 	subw x,#2*CELLL 
      002340 FF               [ 2]  968 	ldw (x),y 
      002341 90 BE 26         [ 2]  969 	ldw y,YTEMP 
      002344 EF 02            [ 2]  970 	ldw (2,x),y 
      002346 CD 22 D9         [ 4]  971 	call ROW2BUF 
      002349 90 93            [ 1]  972 	ldw y,x 
      00234B 90 EE 06         [ 2]  973 	ldw y,(6,y)
      00234E 90 89            [ 2]  974 	pushw y ; udl 
      002350 90 9F            [ 1]  975 	ld a,yl
      002352 A4 7F            [ 1]  976 	and a,#BLOCK_SIZE-1 
      002354 90 5F            [ 1]  977 	clrw y 
      002356 90 97            [ 1]  978 	ld yl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      002358 72 A9 16 80      [ 2]  979 	addw y,#ROWBUFF 
      00235C 1D 00 02         [ 2]  980 	subw x,#CELLL 
      00235F FF               [ 2]  981 	ldw (x),y  
      002360 CD 06 2A         [ 4]  982 	call SWAPP ;  ( ud a ra u -- )
      002363 CD 05 35         [ 4]  983 	call RFROM  
      002366 CD 23 17         [ 4]  984 	call RFREE 
      002369 CD 09 80         [ 4]  985 	call MIN
      00236C CD 06 1A         [ 4]  986 	call DUPP 
      00236F CD 05 E3         [ 4]  987 	call TOR  
      002372 CD 0D 36         [ 4]  988 	call CMOVE
      002375 CD 23 02         [ 4]  989 	call BUF2ROW 
      002378 CD 05 35         [ 4]  990 	call RFROM 
      00237B 81               [ 4]  991 	ret 
                                    992 
                                    993 
                                    994 ;--------------------------
                                    995 ; expand 16 bit address 
                                    996 ; to 32 bit address 
                                    997 ; FADDR ( a -- ud )
                                    998 ;--------------------------
      00237C 23 29                  999 	.word LINK 
                           00237E  1000 	LINK=. 
      00237E 05                    1001 	.byte 5 
      00237F 46 41 44 44 52        1002 	.ascii "FADDR"
      002384                       1003 FADDR:
      002384 CC 0C 0F         [ 2] 1004 	jp ZERO 
                                   1005 
                                   1006 
                                   1007 ;--------------------------
                                   1008 ; move new colon definition to FLASH 
                                   1009 ; using WR-ROW for efficiency 
                                   1010 ; preserving bytes already used 
                                   1011 ; in the current block. 
                                   1012 ; At this point the compiler as completed
                                   1013 ; in RAM and pointers CP and CNTXT updated.
                                   1014 ; CNTXT point to nfa of new word and  
                                   1015 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                   1016 ; 
                                   1017 ; FMOVE ( -- cp+ )
                                   1018 ; 
                                   1019 ;--------------------------
      002387 23 7E                 1020 	.word LINK 
                           002389  1021 	LINK=.
      002389 05                    1022 	.byte 5 
      00238A 46 4D 4F 56 45        1023 	.ascii "FMOVE" 
      00238F                       1024 FMOVE:
      00238F CD 07 30         [ 4] 1025 	call TFLASH 
      002392 CD 04 E4         [ 4] 1026 	CALL AT 
      002395 CD 04 99         [ 4] 1027 	CALL QBRAN 
      002398 24 13                 1028 	.word no_move  
      00239A CD 07 7F         [ 4] 1029 	call CPP
      00239D CD 04 E4         [ 4] 1030 	call AT  
      0023A0 CD 06 1A         [ 4] 1031 	call DUPP ; ( udl udl -- )
      0023A3 CD 07 63         [ 4] 1032 	call CNTXT 
      0023A6 CD 04 E4         [ 4] 1033 	call AT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      0023A9 CD 04 70         [ 4] 1034 	call DOLIT 
      0023AC 00 02                 1035 	.word 2 
      0023AE CD 08 D3         [ 4] 1036 	call SUBB ; ( udl udl a -- )
      0023B1 CD 06 2A         [ 4] 1037 	call SWAPP 
      0023B4 CD 23 84         [ 4] 1038 	call FADDR 
      0023B7 CD 07 DE         [ 4] 1039 	call ROT  ; ( udl ud a -- )
      0023BA CD 06 1A         [ 4] 1040 	call DUPP 
      0023BD CD 05 E3         [ 4] 1041 	call TOR    ; R: a 
      0023C0                       1042 FMOVE2: 
      0023C0 CD 0C E9         [ 4] 1043 	call HERE 
      0023C3 CD 05 46         [ 4] 1044 	call RAT 
      0023C6 CD 08 D3         [ 4] 1045 	call SUBB ; (udl ud a wl -- )
      0023C9                       1046 next_row:
      0023C9 CD 06 1A         [ 4] 1047 	call DUPP 
      0023CC CD 05 E3         [ 4] 1048 	call TOR  ; ( udl ud a wl -- ) R: a wl
      0023CF CD 23 30         [ 4] 1049 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      0023D2 CD 06 1A         [ 4] 1050 	call DUPP 
      0023D5 CD 05 E3         [ 4] 1051 	call TOR
      0023D8 CD 08 3D         [ 4] 1052 	call PLUS  ; ( udl+ ) 
      0023DB CD 06 1A         [ 4] 1053 	call DUPP 
      0023DE CD 0C 0F         [ 4] 1054 	call ZERO   ; ( udl+ ud -- )
      0023E1 CD 05 35         [ 4] 1055 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      0023E4 CD 05 35         [ 4] 1056 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      0023E7 CD 06 42         [ 4] 1057 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      0023EA CD 08 D3         [ 4] 1058 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      0023ED CD 06 1A         [ 4] 1059 	call DUPP 
      0023F0 CD 04 99         [ 4] 1060 	call QBRAN
      0023F3 24 0C                 1061 	.word fmove_done 
      0023F5 CD 06 2A         [ 4] 1062 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      0023F8 CD 05 35         [ 4] 1063 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      0023FB CD 08 3D         [ 4] 1064 	call PLUS  ; ( udl+2 ud wl- a+ )
      0023FE CD 06 1A         [ 4] 1065 	call DUPP 
      002401 CD 05 E3         [ 4] 1066 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      002404 CD 06 2A         [ 4] 1067 	call SWAPP 
      002407 CD 04 B5         [ 4] 1068 	call BRAN
      00240A 23 C9                 1069 	.word next_row  
      00240C                       1070 fmove_done:	
      00240C CD 05 35         [ 4] 1071 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      00240F 1C 00 0A         [ 2] 1072 	addw x,#5*CELLL ; (  -- cp+ ) new CP 
      002412 81               [ 4] 1073  	ret  
      002413                       1074 no_move:
      002413 CD 0C 0F         [ 4] 1075 	call ZERO
      002416 81               [ 4] 1076 	ret 
                                   1077 
                                   1078 ;------------------------------------------
                                   1079 ; adjust pointers after **FMOVE** operetion.
                                   1080 ; UPDAT-PTR ( cp+ -- )
                                   1081 ; cp+ is new CP position after FMOVE 
                                   1082 ;-------------------------------------------
      002417 23 89                 1083 	.word LINK 
                           002419  1084 	LINK=.
      002419 09                    1085 	.byte 9
      00241A 55 50 44 41 54 2D 50  1086 	.ascii "UPDAT-PTR" 
             54 52
      002423                       1087 UPDATPTR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



                                   1088 ;reset VP to previous position  
      002423 CD 1D DD         [ 4] 1089 	call EEPVP 
      002426                       1090 	_DROP 
      002426 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002429 CD 04 E4         [ 4] 1091 	call AT
      00242C CD 07 71         [ 4] 1092 	call VPP 
      00242F CD 04 D2         [ 4] 1093 	call STORE
                                   1094 ;update CONTEXT and LAST 
      002432 CD 1D C7         [ 4] 1095 	call EEPCP 
      002435                       1096 	_DROP
      002435 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002438 CD 04 E4         [ 4] 1097 	call AT
      00243B CD 04 70         [ 4] 1098 	call DOLIT 
      00243E 00 02                 1099 	.word 2 
      002440 CD 08 3D         [ 4] 1100 	call PLUS 
      002443 CD 06 1A         [ 4] 1101 	call DUPP 
      002446 CD 07 63         [ 4] 1102 	call CNTXT 
      002449 CD 04 D2         [ 4] 1103 	call STORE
      00244C CD 07 8F         [ 4] 1104 	call LAST
      00244F CD 04 D2         [ 4] 1105 	call STORE 
      002452 CD 1D F7         [ 4] 1106 	call UPDATLAST 
                                   1107 ;update CP 
      002455 CD 07 7F         [ 4] 1108 	call CPP 
      002458 CD 04 D2         [ 4] 1109 	call STORE
      00245B CD 1E 20         [ 4] 1110 	call UPDATCP 
      00245E 81               [ 4] 1111 	ret 
                                   1112 
                                   1113 ;-----------------------------
                                   1114 ; move interrupt sub-routine
                                   1115 ; in flash memory
                                   1116 ;----------------------------- 
      00245F 24 19                 1117 	.word LINK 
                           002461  1118 	LINK=. 
      002461 06                    1119 	.byte 6
      002462 49 46 4D 4F 56 45     1120 	.ascii "IFMOVE" 
      002468                       1121 IFMOVE:
      002468 CD 07 30         [ 4] 1122 	call TFLASH 
      00246B CD 04 E4         [ 4] 1123 	CALL AT 
      00246E CD 04 99         [ 4] 1124 	CALL QBRAN 
      002471 24 13                 1125 	.word no_move 
      002473 CD 07 7F         [ 4] 1126 	call CPP 
      002476 CD 04 E4         [ 4] 1127 	call AT 
      002479 CD 06 1A         [ 4] 1128 	call DUPP ; ( udl udl -- )
      00247C CD 1D DD         [ 4] 1129 	call EEPVP 
      00247F                       1130 	_DROP
      00247F 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002482 CD 04 E4         [ 4] 1131 	call AT  ; ( udl udl a )
      002485 CD 05 E3         [ 4] 1132 	call TOR 
      002488 CD 23 84         [ 4] 1133 	call FADDR
      00248B CD 05 46         [ 4] 1134 	call RAT ; ( udl ud a -- ) R: a 
      00248E CC 23 C0         [ 2] 1135 	jp FMOVE2 
                                   1136 
                                   1137 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



                           000000  4695 .if WANT_SCALING_CONST 
                                   4696         .include "const_ratio.asm"
                                   4697 .endif
                           000001  4698 .if WANT_CONST_TABLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



                                   4699         .include "ctable.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;------------------------------
                                     22 ; words to create and read 
                                     23 ; constants tables in FLASH 
                                     24 ; and EEPROM
                                     25 ;------------------------------
                                     26 
                                     27 ;-----------------------------
                                     28 ; allocate space in CODE area 
                                     29 ; for constant table.
                                     30 ; CALLOT ( u -- ad )
                                     31 ; u  bytes to allocates 
                                     32 ; ad data address as double.
                                     33 ;-----------------------------
      002491 24 61                   34     .word LINK 
                           002493    35     LINK=.
      002493 06                      36     .byte 6
      002494 43 41 4C 4C 4F 54       37     .ascii "CALLOT"
      00249A                         38 CALLOT:
      00249A CD 07 7F         [ 4]   39     CALL CPP
      00249D CD 06 1A         [ 4]   40     CALL DUPP 
      0024A0 CD 04 E4         [ 4]   41     CALL AT 
      0024A3 CD 05 E3         [ 4]   42     CALL TOR 
      0024A6 CD 0C 7F         [ 4]   43     CALL PSTOR 
      0024A9 CD 1E 20         [ 4]   44     CALL UPDATCP 
      0024AC CD 05 35         [ 4]   45     CALL RFROM
      0024AF CC 0C 0F         [ 2]   46     JP ZERO 
                                     47 
                                     48 ;------------------------------
                                     49 ; create constants bytes table 
                                     50 ; in persistant memory
                                     51 ;  CTABLE ( n+ -- ad ; <string> )
                                     52 ; n+ bytes reserved 
                                     53 ;-----------------------------
      0024B2 24 93                   54     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



                           0024B4    55     LINK=.
      0024B4 06                      56     .byte 6
      0024B5 43 54 41 42 4C 45       57     .ascii "CTABLE"
      0024BB                         58 CTABLE:
      0024BB CD 24 9A         [ 4]   59     CALL CALLOT     
      0024BE CC 1A B4         [ 2]   60     JP DCONST 
                                     61      
                                     62 
                                     63 ;--------------------------------
                                     64 ; create constants words table 
                                     65 ; in persistant memory 
                                     66 ; WTABLE ( n+ -- ad ; <string> )
                                     67 ; n+  words reserved  
                                     68 ;--------------------------------
      0024C1 24 B4                   69     .word LINK 
                           0024C3    70     LINK=.
      0024C3 06                      71     .byte 6
      0024C4 57 54 41 42 4C 45       72     .ascii "WTABLE"
      0024CA                         73 WTABLE:
      0024CA CD 0B 96         [ 4]   74     CALL CELLS  
      0024CD CD 24 9A         [ 4]   75     CALL CALLOT 
      0024D0 CC 1A B4         [ 2]   76     JP DCONST 
                                     77 
                                     78 ;---------------------------------
                                     79 ; stack an element of CTABLE 
                                     80 ; CTABL@ ( u ad -- c )
                                     81 ; u element order {0..size-1}
                                     82 ; a|ad table address 
                                     83 ;--------------------------------
      0024D3 24 C3                   84     .word LINK 
                           0024D5    85     LINK=.
      0024D5 06                      86     .byte 6
      0024D6 43 54 41 42 4C 40       87     .ascii "CTABL@" 
      0024DC                         88 CTAT:
      0024DC CD 1D 63         [ 4]   89     call FPSTOR 
      0024DF CD 1E F5         [ 4]   90     call PTRPLUS 
      0024E2 CC 1F 32         [ 2]   91     jp EE_CREAD 
                                     92 
                                     93 ;---------------------------------
                                     94 ; stack an element of WTABLE 
                                     95 ; WTABL@ ( u ud -- w )
                                     96 ; u is element order {0..size-1}
                                     97 ; a|ud table address 
                                     98 ;----------------------------------
      0024E5 24 D5                   99     .word LINK 
                           0024E7   100     LINK=.
      0024E7 06                     101     .byte 6
      0024E8 57 54 41 42 4C 40      102     .ascii "WTABL@" 
      0024EE                        103 WTAT:
      0024EE CD 1D 63         [ 4]  104     call FPSTOR 
      0024F1 CD 0B 96         [ 4]  105     call CELLS 
      0024F4 CD 1E F5         [ 4]  106     call PTRPLUS 
      0024F7 CD 1F 10         [ 4]  107     call EE_READ 
      0024FA 81               [ 4]  108     ret 
                                    109 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



                                    110 ;--------------------------
                                    111 ; tool to initialize character table 
                                    112 ; CTINIT ( ad -- )
                                    113 ; ad is table address 
                                    114 ;--------------------------
      0024FB 24 E7                  115     .word LINK 
                           0024FD   116     LINK=.
      0024FD 06                     117     .byte 6 
      0024FE 43 54 49 4E 49 54      118     .ascii "CTINIT"
      002504                        119 CTINIT:
      002504 CD 1D 63         [ 4]  120     CALL FPSTOR
      002507 CD 1E A1         [ 4]  121     CALL UNLOCK
      00250A CD 0C 0F         [ 4]  122     CALL ZERO 
      00250D CD 0B A3         [ 4]  123 1$: CALL ONEP 
      002510 CD 06 1A         [ 4]  124     CALL DUPP 
      002513 CD 25 60         [ 4]  125     CALL INTQ 
      002516 CD 04 99         [ 4]  126     CALL QBRAN 
      002519 25 23                  127     .word 2$
      00251B CD 1F 4C         [ 4]  128     call WR_BYTE 
      00251E CD 04 B5         [ 4]  129     CALL BRAN 
      002521 25 0D                  130     .word 1$ 
      002523                        131 2$: _DDROP 
      002523 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002526 CD 1E C9         [ 4]  132     CALL LOCK 
      002529 81               [ 4]  133     ret 
                                    134 
                                    135 ;--------------------------
                                    136 ; tool to initialize word table 
                                    137 ; WTINIT ( ad -- )
                                    138 ; ad is table address 
                                    139 ;--------------------------
      00252A 24 FD                  140     .word LINK 
                           00252C   141     LINK=.
      00252C 06                     142     .byte 6 
      00252D 57 54 49 4E 49 54      143     .ascii "WTINIT"
      002533                        144 WTINIT:
      002533 CD 1D 63         [ 4]  145     CALL FPSTOR
      002536 CD 1E A1         [ 4]  146     CALL UNLOCK
      002539 CD 0C 0F         [ 4]  147     CALL ZERO 
      00253C CD 0B A3         [ 4]  148 1$: CALL ONEP 
      00253F CD 06 1A         [ 4]  149     CALL DUPP
      002542 CD 25 60         [ 4]  150     CALL INTQ
      002545 CD 04 99         [ 4]  151     CALL QBRAN 
      002548 25 52                  152     .word 2$
      00254A CD 1F 71         [ 4]  153     call WR_WORD 
      00254D CD 04 B5         [ 4]  154     CALL BRAN 
      002550 25 3C                  155     .word 1$ 
      002552                        156 2$: _DDROP 
      002552 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002555 CD 1E C9         [ 4]  157     CALL LOCK 
      002558 81               [ 4]  158     ret 
                                    159 
                                    160 ;------------------------
                                    161 ; Prompted input for integer 
                                    162 ; display n+ in bracket and
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



                                    163 ; '?' 
                                    164 ; [N]? ( n+ -- a )
                                    165 ;------------------------
      002559 25 2C                  166     .word LINK 
                           00255B   167     LINK=.
      00255B 04                     168     .byte 4
      00255C 5B 4E 5D 3F            169     .ascii "[N]?" 
      002560                        170 INTQ:
      002560 CD 10 7C         [ 4]  171     CALL CR 
      002563 CD 04 70         [ 4]  172     call DOLIT 
      002566 00 5B                  173     .word '[
      002568 CD 04 37         [ 4]  174     CALL EMIT 
      00256B CD 11 22         [ 4]  175     CALL DOT 
      00256E CD 10 A9         [ 4]  176     CALL  DOTQP
      002571 03                     177     .byte 3
      002572 5D 3F 20               178     .ascii "]? " 
      002575 CD 14 B0         [ 4]  179     CALL QUERY 
      002578 CD 12 DB         [ 4]  180     call TOKEN 
      00257B CC 0F 62         [ 2]  181     jp NUMBQ
                                    182 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



                                   4700 .endif
                           000000  4701 .if WANT_DOUBLE 
                                   4702         .include "double.asm"
                                   4703 .endif 
                           000000  4704 .if WANT_FLOAT 
                                   4705         .include "float.asm"
                                   4706 .endif 
                           000001  4707 .if WANT_FLOAT24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



                                   4708         .include "float24.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21 ;  implement 24 float pointing point format  
                                     22 ;  the mantissa is 16 bits signed 
                                     23 ;  exponent is 8 bits signed  
                                     24 ;  format: seeeeee smmmmmmmmmmmmmmm 
                                     25 ;
                                     26 ;  This library is not dependant on double.asm 
                                     27 ;  The code is smaller and faster than float.asm at 
                                     28 ;  the cost of less precision on mantissa. 
                                     29 ;  Exponent range is the same. 
                                     30 ;
                                     31 ;  This format is store on the stack as a double, i.e. 32 bits 
                                     32 ;  but as 24 bits in memory. 
                                     33 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     34 
                                     35 
                           007FFF    36     MAX_MANTISSA = 0x7FFF ; absolute value maximum mantissa  
                                     37 
                           000001    38     F24_MAJOR=1 
                           000000    39     F24_MINOR=0 
                                     40 
                                     41 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     42 ;   FLOAT-VER ( -- )
                                     43 ;   print library version 
                                     44 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00257E                         45     _HEADER FVER,9,"FLOAT-VER"
      00257E 25 5B                    1         .word LINK 
                           002580     2         LINK=.
      002580 09                       3         .byte 9  
      002581 46 4C 4F 41 54 2D 56     4         .ascii "FLOAT-VER"
             45 52
      00258A                          5         FVER:
      00258A CD 10 7C         [ 4]   46     CALL CR 
      00258D CD 10 A9         [ 4]   47     CALL DOTQP 
      002590 11                      48     .byte  17 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



      002591 66 6C 6F 61 74 32 34    49     .ascii "float24 library, "
             20 6C 69 62 72 61 72
             79 2C 20
      0025A2 CD 1C 63         [ 4]   50     CALL PRT_LICENCE 
      0025A5 CD 1C 3B         [ 4]   51     CALL COPYRIGHT 
      0025A8                         52     _DOLIT F24_MAJOR     
      0025A8 CD 04 70         [ 4]    1     CALL DOLIT 
      0025AB 00 01                    2     .word F24_MAJOR 
      0025AD                         53     _DOLIT F24_MINOR 
      0025AD CD 04 70         [ 4]    1     CALL DOLIT 
      0025B0 00 00                    2     .word F24_MINOR 
      0025B2 CC 1C 77         [ 2]   54     JP PRINT_VERSION 
                                     55 
                                     56 
                                     57 ;-------------------------
                                     58 ;    FPSW ( -- a )
                                     59 ;    floating state variable
                                     60 ;    bit 0 zero flag 
                                     61 ;    bit 1 negative flag 
                                     62 ;    bit 2 overflow/error flag 
                                     63 ;---------------------------
      0025B5                         64     _HEADER FPSW,4,"FPSW"
      0025B5 25 80                    1         .word LINK 
                           0025B7     2         LINK=.
      0025B7 04                       3         .byte 4  
      0025B8 46 50 53 57              4         .ascii "FPSW"
      0025BC                          5         FPSW:
      0025BC 90 AE 00 08      [ 2]   65 	LDW Y,#UFPSW  
      0025C0 1D 00 02         [ 2]   66 	SUBW X,#2
      0025C3 FF               [ 2]   67     LDW (X),Y
      0025C4 81               [ 4]   68     RET
                                     69 
                                     70 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     71 ;   FRESET ( -- )
                                     72 ;   reset FPSW variable 
                                     73 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
      0025C5                         74     _HEADER FRESET,6,"FRESET"
      0025C5 25 B7                    1         .word LINK 
                           0025C7     2         LINK=.
      0025C7 06                       3         .byte 6  
      0025C8 46 52 45 53 45 54        4         .ascii "FRESET"
      0025CE                          5         FRESET:
      0025CE CD 0C 0F         [ 4]   75     CALL ZERO  
      0025D1 CD 25 BC         [ 4]   76     CALL FPSW 
      0025D4 CD 04 D2         [ 4]   77     CALL STORE 
      0025D7 81               [ 4]   78     RET 
                                     79 
                                     80 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     81 ;   FINIT ( -- )
                                     82 ;   initialize floating point 
                                     83 ;   library 
                                     84 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0025D8                         85     _HEADER FINIT,5,"FINIT"
      0025D8 25 C7                    1         .word LINK 
                           0025DA     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



      0025DA 05                       3         .byte 5  
      0025DB 46 49 4E 49 54           4         .ascii "FINIT"
      0025E0                          5         FINIT:
      0025E0 CD 25 CE         [ 4]   86     CALL FRESET 
      0025E3 81               [ 4]   87     RET 
                                     88 
                                     89 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     90 ;    FER ( -- u )
                                     91 ;    return FPSW value 
                                     92 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0025E4                         93     _HEADER FER,3,"FER"
      0025E4 25 DA                    1         .word LINK 
                           0025E6     2         LINK=.
      0025E6 03                       3         .byte 3  
      0025E7 46 45 52                 4         .ascii "FER"
      0025EA                          5         FER:
      0025EA CD 25 BC         [ 4]   94     CALL FPSW 
      0025ED CD 04 E4         [ 4]   95     CALL AT 
      0025F0 81               [ 4]   96     RET 
                                     97 
                                     98 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     99 ;    FZE  ( -- 0|-1 )
                                    100 ;    return FPSW zero flag 
                                    101 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0025F1                        102     _HEADER FZE,3,"FZE"
      0025F1 25 E6                    1         .word LINK 
                           0025F3     2         LINK=.
      0025F3 03                       3         .byte 3  
      0025F4 46 5A 45                 4         .ascii "FZE"
      0025F7                          5         FZE:
      0025F7 CD 25 BC         [ 4]  103     CALL FPSW
      0025FA CD 04 E4         [ 4]  104     CALL AT  
      0025FD CD 0C 1A         [ 4]  105     CALL ONE 
      002600 CD 06 77         [ 4]  106     CALL ANDD
      002603 CD 08 87         [ 4]  107     CALL NEGAT  
      002606 81               [ 4]  108     RET 
                                    109 
                                    110 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    111 ;    FNE ( -- 0|-1 )
                                    112 ;    return FPSW negative flag 
                                    113 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002607                        114     _HEADER FNE,3,"FNE"
      002607 25 F3                    1         .word LINK 
                           002609     2         LINK=.
      002609 03                       3         .byte 3  
      00260A 46 4E 45                 4         .ascii "FNE"
      00260D                          5         FNE:
      00260D CD 25 BC         [ 4]  115     CALL FPSW 
      002610 CD 04 E4         [ 4]  116     CALL AT 
      002613                        117     _DOLIT 2 
      002613 CD 04 70         [ 4]    1     CALL DOLIT 
      002616 00 02                    2     .word 2 
      002618 CD 06 77         [ 4]  118     CALL ANDD
      00261B CD 0B F5         [ 4]  119     CALL TWOSL
      00261E CD 08 87         [ 4]  120     CALL NEGAT   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



      002621 81               [ 4]  121     RET 
                                    122 
                                    123 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    124 ;   FOV (  -- 0|-1 )
                                    125 ;   return FPSW overflow flag 
                                    126 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002622                        127     _HEADER FOV,3,"FOV"
      002622 26 09                    1         .word LINK 
                           002624     2         LINK=.
      002624 03                       3         .byte 3  
      002625 46 4F 56                 4         .ascii "FOV"
      002628                          5         FOV:
      002628 CD 25 BC         [ 4]  128     CALL FPSW
      00262B CD 04 E4         [ 4]  129     CALL AT  
      00262E                        130     _DOLIT 4 
      00262E CD 04 70         [ 4]    1     CALL DOLIT 
      002631 00 04                    2     .word 4 
      002633 CD 06 77         [ 4]  131     CALL ANDD
      002636                        132     _DOLIT 2 
      002636 CD 04 70         [ 4]    1     CALL DOLIT 
      002639 00 02                    2     .word 2 
      00263B CD 0B DD         [ 4]  133     CALL RSHIFT 
      00263E CD 08 87         [ 4]  134     CALL NEGAT  
      002641 81               [ 4]  135     RET 
                                    136 
                                    137 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    138 ;  SET-FPSW ( f24 -- f24 )
                                    139 ;  set float status word 
                                    140 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002642                        141     _HEADER SET_FPSW,8,"SET-FPSW"
      002642 26 24                    1         .word LINK 
                           002644     2         LINK=.
      002644 08                       3         .byte 8  
      002645 53 45 54 2D 46 50 53     4         .ascii "SET-FPSW"
             57
      00264D                          5         SET_FPSW:
      00264D 3F 09            [ 1]  142     CLR UFPSW+1 
      00264F 90 93            [ 1]  143     LDW Y,X 
      002651 90 EE 02         [ 2]  144     LDW Y,(2,Y) ; m 
      002654 26 06            [ 1]  145     JRNE 1$
      002656 72 10 00 09      [ 1]  146     BSET UFPSW+1,#0  ; null mantissa 
      00265A 20 1A            [ 2]  147     JRA 4$ 
      00265C 2A 04            [ 1]  148 1$: JRPL 2$    
      00265E 72 12 00 09      [ 1]  149     BSET UFPSW+1,#1  ; negative mantissa 
      002662 90 93            [ 1]  150 2$: LDW Y,X 
      002664 90 FE            [ 2]  151     LDW Y,(Y) ; e 
      002666 90 A3 FF 81      [ 2]  152     CPW Y,#-127  
      00266A 2B 06            [ 1]  153     JRMI 3$
      00266C 90 A3 00 80      [ 2]  154     CPW Y,#128 
      002670 2B 04            [ 1]  155     JRMI 4$ 
      002672                        156 3$:
      002672 72 14 00 09      [ 1]  157     BSET UFPSW+1,#2  ; overflow         
      002676 81               [ 4]  158 4$: RET 
                                    159 
                                    160 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



                                    161 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    162 ;    SFZ ( f# -- f# )
                                    163 ;    set FPSW zero flag 
                                    164 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002677                        165     _HEADER SFZ,3,"SFZ"
      002677 26 44                    1         .word LINK 
                           002679     2         LINK=.
      002679 03                       3         .byte 3  
      00267A 53 46 5A                 4         .ascii "SFZ"
      00267D                          5         SFZ:
      00267D CD 25 EA         [ 4]  166     CALL FER 
      002680                        167     _DOLIT 0xfffe 
      002680 CD 04 70         [ 4]    1     CALL DOLIT 
      002683 FF FE                    2     .word 0xfffe 
      002685 CD 06 77         [ 4]  168     CALL ANDD 
      002688 CD 05 E3         [ 4]  169     CALL TOR    
      00268B CD 06 42         [ 4]  170     CALL OVER  
      00268E CD 06 63         [ 4]  171     CALL ZEQUAL 
      002691                        172     _DOLIT 1 
      002691 CD 04 70         [ 4]    1     CALL DOLIT 
      002694 00 01                    2     .word 1 
      002696 CD 06 77         [ 4]  173     CALL ANDD 
      002699 CD 05 35         [ 4]  174     CALL RFROM 
      00269C CD 06 8B         [ 4]  175     CALL ORR 
      00269F CD 25 BC         [ 4]  176     CALL FPSW 
      0026A2 CD 04 D2         [ 4]  177     CALL STORE 
      0026A5 81               [ 4]  178     RET 
                                    179 
                                    180 
                                    181 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    182 ;   SFN ( f# -- f# )
                                    183 ;   set FPSW negative flag 
                                    184 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026A6                        185     _HEADER SFN,3,"SFN"
      0026A6 26 79                    1         .word LINK 
                           0026A8     2         LINK=.
      0026A8 03                       3         .byte 3  
      0026A9 53 46 4E                 4         .ascii "SFN"
      0026AC                          5         SFN:
      0026AC CD 25 EA         [ 4]  186     CALL FER 
      0026AF                        187     _DOLIT 0xFFFD 
      0026AF CD 04 70         [ 4]    1     CALL DOLIT 
      0026B2 FF FD                    2     .word 0xFFFD 
      0026B4 CD 06 77         [ 4]  188     CALL ANDD  
      0026B7 CD 05 E3         [ 4]  189     CALL TOR 
      0026BA CD 06 42         [ 4]  190     CALL OVER 
      0026BD                        191     _DOLIT 15 
      0026BD CD 04 70         [ 4]    1     CALL DOLIT 
      0026C0 00 0F                    2     .word 15 
      0026C2 CD 0B DD         [ 4]  192     CALL RSHIFT 
      0026C5 CD 05 35         [ 4]  193     CALL RFROM 
      0026C8 CD 06 8B         [ 4]  194     CALL ORR 
      0026CB CD 25 BC         [ 4]  195     CALL FPSW 
      0026CE CD 04 D2         [ 4]  196     CALL STORE 
      0026D1 81               [ 4]  197     RET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



                                    198 
                                    199 
                                    200 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    201 ;   SFV ( -- )
                                    202 ;   set overflow flag 
                                    203 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026D2                        204     _HEADER SFV,3,"SFV"
      0026D2 26 A8                    1         .word LINK 
                           0026D4     2         LINK=.
      0026D4 03                       3         .byte 3  
      0026D5 53 46 56                 4         .ascii "SFV"
      0026D8                          5         SFV:
      0026D8 CD 25 EA         [ 4]  205     CALL FER 
      0026DB                        206     _DOLIT 4 
      0026DB CD 04 70         [ 4]    1     CALL DOLIT 
      0026DE 00 04                    2     .word 4 
      0026E0 CD 06 8B         [ 4]  207     CALL ORR 
      0026E3 CD 25 BC         [ 4]  208     CALL FPSW 
      0026E6 CD 04 D2         [ 4]  209     CALL STORE 
      0026E9 81               [ 4]  210     RET 
                                    211 
                                    212 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    213 ;   MSIGN  (m -- m -1|0 )
                                    214 ;   get mantissa sign 
                                    215 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026EA                        216      _HEADER MSIGN,5,"MSIGN"
      0026EA 26 D4                    1         .word LINK 
                           0026EC     2         LINK=.
      0026EC 05                       3         .byte 5  
      0026ED 4D 53 49 47 4E           4         .ascii "MSIGN"
      0026F2                          5         MSIGN:
      0026F2 90 5F            [ 1]  217     CLRW Y 
      0026F4 F6               [ 1]  218     LD A,(X)
      0026F5 2A 02            [ 1]  219     JRPL 1$
      0026F7 90 53            [ 2]  220     CPLW Y 
      0026F9 1D 00 02         [ 2]  221 1$: SUBW X,#CELLL 
      0026FC FF               [ 2]  222     LDW (X),Y 
      0026FD 81               [ 4]  223     RET 
                                    224 
                                    225 
                                    226 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    227 ;   E. ( f# -- )
                                    228 ;   print float24 in scientific 
                                    229 ;   format 
                                    230 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026FE                        231     _HEADER EDOT,2,"E."
      0026FE 26 EC                    1         .word LINK 
                           002700     2         LINK=.
      002700 02                       3         .byte 2  
      002701 45 2E                    4         .ascii "E."
      002703                          5         EDOT:
      002703 CD 06 E0         [ 4]  232     CALL BASE 
      002706 CD 04 E4         [ 4]  233     CALL AT 
      002709 CD 05 E3         [ 4]  234     CALL TOR 
      00270C CD 0E C7         [ 4]  235     CALL DECIM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



      00270F CD 26 4D         [ 4]  236     CALL SET_FPSW
      002712                        237 EDOT0: 
      002712 CD 05 E3         [ 4]  238     CALL TOR   ; R: e 
      002715 CD 08 ED         [ 4]  239     CALL ABSS 
      002718 CD 10 39         [ 4]  240     CALL SPACE 
      00271B CD 0E 17         [ 4]  241     CALL BDIGS     
      00271E                        242 EDOT2: 
      00271E CD 06 1A         [ 4]  243     CALL DUPP 
      002721                        244     _DOLIT 10 
      002721 CD 04 70         [ 4]    1     CALL DOLIT 
      002724 00 0A                    2     .word 10 
      002726 CD 09 27         [ 4]  245     CALL LESS 
      002729                        246     _TBRAN EDOT3 
      002729 CD 04 A7         [ 4]    1     CALL TBRAN 
      00272C 27 3C                    2     .word EDOT3 
      00272E CD 0E 40         [ 4]  247     CALL DIG
      002731 CD 05 35         [ 4]  248     CALL RFROM 
      002734 CD 0B A3         [ 4]  249     CALL ONEP 
      002737 CD 05 E3         [ 4]  250     CALL TOR 
      00273A                        251     _BRAN EDOT2 
      00273A 20 E2            [ 2]    1     JRA EDOT2  
      00273C                        252 EDOT3: 
      00273C                        253     _DOLIT '.'
      00273C CD 04 70         [ 4]    1     CALL DOLIT 
      00273F 00 2E                    2     .word '.' 
      002741 CD 0E 27         [ 4]  254     CALL HOLD  
      002744 CD 0E 40         [ 4]  255     CALL DIG
      002747 CD 26 0D         [ 4]  256     CALL FNE 
      00274A                        257     _QBRAN EDOT4 
      00274A CD 04 99         [ 4]    1     CALL QBRAN
      00274D 27 57                    2     .word EDOT4
      00274F                        258     _DOLIT '-'
      00274F CD 04 70         [ 4]    1     CALL DOLIT 
      002752 00 2D                    2     .word '-' 
      002754 CD 0E 27         [ 4]  259     CALL HOLD 
      002757                        260 EDOT4:       
      002757 CD 0E 7C         [ 4]  261     CALL EDIGS 
      00275A CD 10 63         [ 4]  262     CALL TYPES
      00275D CD 05 35         [ 4]  263     CALL RFROM 
      002760 CD 07 CD         [ 4]  264     CALL QDUP 
      002763                        265     _QBRAN EDOT5     
      002763 CD 04 99         [ 4]    1     CALL QBRAN
      002766 27 78                    2     .word EDOT5
      002768                        266     _DOLIT 'E'
      002768 CD 04 70         [ 4]    1     CALL DOLIT 
      00276B 00 45                    2     .word 'E' 
      00276D CD 04 37         [ 4]  267     CALL EMIT
      002770                        268     _DOLIT 1  
      002770 CD 04 70         [ 4]    1     CALL DOLIT 
      002773 00 01                    2     .word 1 
      002775 CD 10 B7         [ 4]  269     CALL DOTR
      002778                        270 EDOT5: 
      002778 CD 05 35         [ 4]  271     CALL RFROM 
      00277B CD 06 E0         [ 4]  272     CALL BASE 
      00277E CD 04 D2         [ 4]  273     CALL STORE  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      002781 81               [ 4]  274     RET 
                                    275 
                                    276 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                    277 ;   F. (f# -- )
                                    278 ;   print float in fixed
                                    279 ;   point format. 
                                    280 ;;;;;;;;;;;;;;;;;;;;;;;;;
      002782                        281     _HEADER FDOT,2,"F."
      002782 27 00                    1         .word LINK 
                           002784     2         LINK=.
      002784 02                       3         .byte 2  
      002785 46 2E                    4         .ascii "F."
      002787                          5         FDOT:
      002787 CD 06 E0         [ 4]  282     CALL BASE 
      00278A CD 04 E4         [ 4]  283     CALL AT 
      00278D CD 05 E3         [ 4]  284     CALL TOR 
      002790 CD 0E C7         [ 4]  285     CALL DECIM 
      002793 CD 26 4D         [ 4]  286     CALL    SET_FPSW 
      002796 CD 06 1A         [ 4]  287     CALL    DUPP  
      002799 CD 08 ED         [ 4]  288     CALL    ABSS 
      00279C                        289     _DOLIT  8
      00279C CD 04 70         [ 4]    1     CALL DOLIT 
      00279F 00 08                    2     .word 8 
      0027A1 CD 09 54         [ 4]  290     CALL    GREAT 
      0027A4                        291     _QBRAN  FDOT1 
      0027A4 CD 04 99         [ 4]    1     CALL QBRAN
      0027A7 27 AC                    2     .word FDOT1
      0027A9 CC 27 12         [ 2]  292     JP      EDOT0 
      0027AC                        293 FDOT1:
      0027AC CD 10 39         [ 4]  294     CALL    SPACE 
      0027AF CD 05 E3         [ 4]  295     CALL    TOR 
      0027B2 CD 26 0D         [ 4]  296     CALL    FNE 
      0027B5                        297     _QBRAN  FDOT0 
      0027B5 CD 04 99         [ 4]    1     CALL QBRAN
      0027B8 27 BD                    2     .word FDOT0
      0027BA CD 08 87         [ 4]  298     CALL    NEGAT 
      0027BD                        299 FDOT0: 
      0027BD CD 0E 17         [ 4]  300     CALL    BDIGS
      0027C0 CD 05 46         [ 4]  301     CALL    RAT  
      0027C3 CD 06 51         [ 4]  302     CALL    ZLESS 
      0027C6                        303     _QBRAN  FDOT6 
      0027C6 CD 04 99         [ 4]    1     CALL QBRAN
      0027C9 27 EE                    2     .word FDOT6
      0027CB                        304 FDOT2: ; e<0 
      0027CB CD 0E 40         [ 4]  305     CALL    DIG 
      0027CE CD 05 35         [ 4]  306     CALL    RFROM
      0027D1 CD 0B A3         [ 4]  307     CALL    ONEP 
      0027D4 CD 07 CD         [ 4]  308     CALL    QDUP  
      0027D7                        309     _QBRAN  FDOT3 
      0027D7 CD 04 99         [ 4]    1     CALL QBRAN
      0027DA 27 E1                    2     .word FDOT3
      0027DC CD 05 E3         [ 4]  310     CALL    TOR 
      0027DF 20 EA            [ 2]  311     JRA   FDOT2 
      0027E1                        312 FDOT3:
      0027E1                        313     _DOLIT  '.' 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



      0027E1 CD 04 70         [ 4]    1     CALL DOLIT 
      0027E4 00 2E                    2     .word '.' 
      0027E6 CD 0E 27         [ 4]  314     CALL    HOLD 
      0027E9 CD 0E 51         [ 4]  315     CALL    DIGS
      0027EC 20 1A            [ 2]  316     JRA   FDOT9  
      0027EE                        317 FDOT6: ; e>=0 
      0027EE                        318     _DOLIT '.' 
      0027EE CD 04 70         [ 4]    1     CALL DOLIT 
      0027F1 00 2E                    2     .word '.' 
      0027F3 CD 0E 27         [ 4]  319     CALL HOLD  
      0027F6 20 08            [ 2]  320     JRA   FDOT8
      0027F8                        321 FDOT7:     
      0027F8                        322     _DOLIT  '0'
      0027F8 CD 04 70         [ 4]    1     CALL DOLIT 
      0027FB 00 30                    2     .word '0' 
      0027FD CD 0E 27         [ 4]  323     CALL    HOLD 
      002800                        324 FDOT8:
      002800                        325     _DONXT FDOT7 
      002800 CD 04 84         [ 4]    1     CALL DONXT 
      002803 27 F8                    2     .word FDOT7 
      002805 CD 0E 51         [ 4]  326     CALL    DIGS
      002808                        327 FDOT9:
      002808 CD 26 0D         [ 4]  328     CALL    FNE 
      00280B                        329     _QBRAN  FDOT10 
      00280B CD 04 99         [ 4]    1     CALL QBRAN
      00280E 28 18                    2     .word FDOT10
      002810                        330     _DOLIT '-' 
      002810 CD 04 70         [ 4]    1     CALL DOLIT 
      002813 00 2D                    2     .word '-' 
      002815 CD 0E 27         [ 4]  331     CALL   HOLD 
      002818                        332 FDOT10:
      002818 CD 0E 7C         [ 4]  333     CALL    EDIGS 
      00281B CD 10 63         [ 4]  334     CALL    TYPES 
      00281E CD 05 35         [ 4]  335     CALL    RFROM 
      002821 CD 06 E0         [ 4]  336     CALL    BASE 
      002824 CD 04 D2         [ 4]  337     CALL    STORE 
      002827 81               [ 4]  338     RET 
                                    339 
                                    340 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    341 ;    number parser 
                                    342 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    343 
                                    344 ; check for negative sign 
                                    345 ; ajust pointer and cntr 
      002828                        346 nsign: ; ( addr cntr -- addr cntr f ) 
      002828 1D 00 02         [ 2]  347     SUBW X,#CELLL ; a cntr f 
      00282B 90 93            [ 1]  348     LDW Y,X 
      00282D 90 EE 04         [ 2]  349     LDW Y,(4,Y) ; addr 
      002830 90 F6            [ 1]  350     LD A,(Y) ; char=*addr  
      002832 A1 2D            [ 1]  351     CP A,#'-' 
      002834 27 03            [ 1]  352     JREQ NEG_SIGN 
      002836 4F               [ 1]  353     CLR A  
      002837 20 18            [ 2]  354     JRA STO_SIGN 
      002839                        355 NEG_SIGN:
                                    356 ; increment addr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



      002839 90 93            [ 1]  357     LDW Y,X 
      00283B 90 EE 04         [ 2]  358     LDW Y,(4,Y)
      00283E 72 A9 00 01      [ 2]  359     ADDW Y,#1   ;addr+1 
      002842 EF 04            [ 2]  360     LDW (4,X),Y 
                                    361 ; decrement cntr 
      002844 90 93            [ 1]  362     LDW Y,X
      002846 90 EE 02         [ 2]  363     LDW Y,(2,Y)
      002849 72 A2 00 01      [ 2]  364     SUBW Y,#1   ;cntr-1 
      00284D EF 02            [ 2]  365     LDW (2,X),Y 
      00284F A6 FF            [ 1]  366     LD A,#0XFF
      002851                        367 STO_SIGN:   
      002851 F7               [ 1]  368     LD (X),A 
      002852 E7 01            [ 1]  369     LD (1,X),A 
      002854 81               [ 4]  370     RET 
                                    371 
                                    372 
                                    373 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    374 ; return parsed exponent or 
                                    375 ; 0 if failed
                                    376 ; at entry exprect *a=='E'    
                                    377 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002855                        378 parse_exponent: ; a cntr -- e -1 | 0 
      002855 CD 05 E3         [ 4]  379     CALL TOR   ; R: cntr 
      002858 CD 06 1A         [ 4]  380     CALL DUPP 
      00285B CD 05 02         [ 4]  381     CALL CAT 
      00285E                        382     _DOLIT 'E' 
      00285E CD 04 70         [ 4]    1     CALL DOLIT 
      002861 00 45                    2     .word 'E' 
      002863 CD 08 FB         [ 4]  383     CALL EQUAL 
      002866                        384     _QBRAN 1$
      002866 CD 04 99         [ 4]    1     CALL QBRAN
      002869 28 93                    2     .word 1$
      00286B CD 0B A3         [ 4]  385     CALL ONEP 
      00286E CD 05 35         [ 4]  386     CALL RFROM  ; a cntr 
      002871 CD 0B B0         [ 4]  387     CALL ONEM
      002874 CD 06 1A         [ 4]  388     CALL DUPP 
      002877                        389     _QBRAN 2$ ; a cntr 
      002877 CD 04 99         [ 4]    1     CALL QBRAN
      00287A 28 96                    2     .word 2$
      00287C CD 0C 0F         [ 4]  390     CALL ZERO
      00287F CD 07 FD         [ 4]  391     CALL NROT ;  0 a cntr  
      002882 CD 28 28         [ 4]  392     CALL nsign 
      002885 CD 05 E3         [ 4]  393     CALL TOR   ; R: esign  
      002888 CD 0F 15         [ 4]  394     CALL parse_digits
      00288B                        395     _QBRAN PARSEXP_SUCCESS ; parsed to end of string 
      00288B CD 04 99         [ 4]    1     CALL QBRAN
      00288E 28 9D                    2     .word PARSEXP_SUCCESS
                                    396 ; failed invalid character
      002890                        397     _DDROP ; 0 a 
      002890 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002893                        398 1$: 
      002893 CD 05 35         [ 4]  399     CALL RFROM ; sign||cntr  
      002896                        400 2$:
      002896                        401     _DDROP  ; a cntr || a sign || 0 cntr   
      002896 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



      002899 CD 0C 0F         [ 4]  402     CALL ZERO   ; return only 0 
      00289C 81               [ 4]  403     RET 
      00289D                        404 PARSEXP_SUCCESS: ; n a  
      00289D                        405     _DROP ; n  
      00289D 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0028A0 CD 05 35         [ 4]  406     CALL RFROM ; esign  
      0028A3                        407     _QBRAN 1$
      0028A3 CD 04 99         [ 4]    1     CALL QBRAN
      0028A6 28 AB                    2     .word 1$
      0028A8 CD 08 87         [ 4]  408     CALL NEGAT
      0028AB                        409 1$:
      0028AB                        410     _DOLIT -1 ; -- e -1 
      0028AB CD 04 70         [ 4]    1     CALL DOLIT 
      0028AE FF FF                    2     .word -1 
      0028B0 81               [ 4]  411     RET 
                                    412 
                                    413 
                                    414 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    415 ;   FLOAT?  ( a n a+ cnt sign  -- f24 -3 | a 0 )
                                    416 ;   called by NUMBER? 
                                    417 ;   convert string to float 
                                    418 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028B1                        419     _HEADER FLOATQ,5,"FLOAT?"
      0028B1 27 84                    1         .word LINK 
                           0028B3     2         LINK=.
      0028B3 05                       3         .byte 5  
      0028B4 46 4C 4F 41 54 3F        4         .ascii "FLOAT?"
      0028BA                          5         FLOATQ:
                                    420 ; BASE must be 10 
      0028BA CD 06 E0         [ 4]  421     CALL BASE 
      0028BD CD 04 E4         [ 4]  422     CALL AT 
      0028C0                        423     _DOLIT 10 
      0028C0 CD 04 70         [ 4]    1     CALL DOLIT 
      0028C3 00 0A                    2     .word 10 
      0028C5 CD 08 FB         [ 4]  424     CALL EQUAL 
      0028C8                        425     _QBRAN FLOAT_ERROR 
      0028C8 CD 04 99         [ 4]    1     CALL QBRAN
      0028CB 29 85                    2     .word FLOAT_ERROR
                                    426 ; if float next char is '.' or 'E' 
      0028CD CD 05 E3         [ 4]  427     CALL TOR ; R: sign  
      0028D0 CD 05 E3         [ 4]  428     CALL TOR ; R: sign cntr 
      0028D3 CD 06 1A         [ 4]  429     CALL DUPP
      0028D6 CD 05 02         [ 4]  430     CALL CAT 
      0028D9                        431     _DOLIT '.' 
      0028D9 CD 04 70         [ 4]    1     CALL DOLIT 
      0028DC 00 2E                    2     .word '.' 
      0028DE CD 08 FB         [ 4]  432     CALL EQUAL 
      0028E1                        433     _QBRAN FLOATQ1 ; not a dot 
      0028E1 CD 04 99         [ 4]    1     CALL QBRAN
      0028E4 29 19                    2     .word FLOATQ1
      0028E6 CD 0B A3         [ 4]  434     CALL ONEP 
      0028E9 CD 05 35         [ 4]  435     CALL RFROM  ; a  n a+ cntr R: sign  
      0028EC CD 0B B0         [ 4]  436     CALL ONEM 
      0028EF CD 06 1A         [ 4]  437     CALL DUPP 
      0028F2 CD 05 E3         [ 4]  438     CALL TOR  ; R: sign cntr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



                                    439 ; parse fractional part
      0028F5 CD 0F 15         [ 4]  440     CALL parse_digits ; a n a+ cntr -- n a cntr 
      0028F8 CD 06 1A         [ 4]  441     CALL DUPP 
      0028FB CD 05 35         [ 4]  442     CALL RFROM 
      0028FE CD 06 2A         [ 4]  443     CALL SWAPP 
      002901 CD 08 D3         [ 4]  444     CALL SUBB ; fd -> fraction digits count 
      002904 CD 05 E3         [ 4]  445     CALL TOR  ; n a cntr R: sign fd 
      002907 CD 06 1A         [ 4]  446     CALL DUPP ; cntr cntr  
      00290A                        447     _QBRAN 1$ ; end of string, no exponent
      00290A CD 04 99         [ 4]    1     CALL QBRAN
      00290D 29 11                    2     .word 1$
      00290F 20 11            [ 2]  448     JRA FLOATQ2
      002911 CD 06 2A         [ 4]  449 1$: CALL SWAPP 
      002914                        450     _DROP ; a
      002914 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002917 20 11            [ 2]  451     JRA FLOATQ3        
      002919                        452 FLOATQ1: ; must push fd==0 on RSTACK 
      002919 CD 05 35         [ 4]  453     CALL RFROM ; cntr 
      00291C CD 0C 0F         [ 4]  454     CALL ZERO  ; fd 
      00291F CD 05 E3         [ 4]  455     CALL TOR   ; m a cntr R: sign fd 
      002922                        456 FLOATQ2: 
      002922 CD 28 55         [ 4]  457     CALL parse_exponent 
      002925                        458     _QBRAN FLOAT_ERROR0 ; exponent expected 
      002925 CD 04 99         [ 4]    1     CALL QBRAN
      002928 29 7F                    2     .word FLOAT_ERROR0
      00292A                        459 FLOATQ3: ; m 0 || m e  
      00292A CD 05 35         [ 4]  460     CALL RFROM ;  fd  
      00292D CD 08 D3         [ 4]  461     CALL SUBB  ; exp=e-fd 
      002930 CD 06 2A         [ 4]  462     CALL SWAPP  
                                    463 ; if m>MAX_MANTISSA then m/10 e++ 
      002933 CD 06 1A         [ 4]  464     CALL  DUPP 
      002936 CD 06 51         [ 4]  465     CALL ZLESS 
      002939                        466     _QBRAN FLOATQ34
      002939 CD 04 99         [ 4]    1     CALL QBRAN
      00293C 29 62                    2     .word FLOATQ34
      00293E                        467     _DOLIT 10 
      00293E CD 04 70         [ 4]    1     CALL DOLIT 
      002941 00 0A                    2     .word 10 
      002943 CD 0A 01         [ 4]  468     CALL USLMOD 
                                    469 ; round to nearest integer 
      002946 CD 06 2A         [ 4]  470     CALL SWAPP 
      002949                        471     _DOLIT 5 
      002949 CD 04 70         [ 4]    1     CALL DOLIT 
      00294C 00 05                    2     .word 5 
      00294E CD 09 54         [ 4]  472     CALL GREAT 
      002951                        473     _QBRAN FLOATQ31
      002951 CD 04 99         [ 4]    1     CALL QBRAN
      002954 29 59                    2     .word FLOATQ31
      002956 CD 0B A3         [ 4]  474     CALL ONEP 
      002959                        475 FLOATQ31: 
      002959 CD 06 2A         [ 4]  476     CALL SWAPP
      00295C CD 0B A3         [ 4]  477     CALL ONEP 
      00295F CD 06 2A         [ 4]  478     CALL SWAPP      
      002962                        479 FLOATQ34:     
      002962 CD 05 35         [ 4]  480     CALL RFROM  ; sign 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



      002965                        481     _QBRAN FLOATQ4 
      002965 CD 04 99         [ 4]    1     CALL QBRAN
      002968 29 6D                    2     .word FLOATQ4
      00296A CD 08 87         [ 4]  482     CALL NEGAT 
      00296D                        483 FLOATQ4:
      00296D CD 07 DE         [ 4]  484     CALL ROT   ; e m a 
      002970                        485     _DROP      ; drop a 
      002970 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002973 CD 06 2A         [ 4]  486     CALL SWAPP ; m e 
      002976 CD 26 4D         [ 4]  487     CALL SET_FPSW 
      002979                        488     _DOLIT -3 
      002979 CD 04 70         [ 4]    1     CALL DOLIT 
      00297C FF FD                    2     .word -3 
      00297E 81               [ 4]  489     RET       
      00297F                        490 FLOAT_ERROR0: 
      00297F CD 05 35         [ 4]  491     CALL RFROM ; df 
      002982 CD 05 35         [ 4]  492     CALL RFROM ; df sign 
      002985                        493 FLOAT_ERROR: 
      002985 CD 0C 51         [ 4]  494     CALL DEPTH 
      002988 CD 0B 96         [ 4]  495     CALL CELLS 
      00298B CD 05 FA         [ 4]  496     CALL SPAT 
      00298E CD 06 2A         [ 4]  497     CALL SWAPP 
      002991 CD 08 3D         [ 4]  498     CALL PLUS  
      002994 CD 06 07         [ 4]  499     CALL SPSTO 
      002997 CD 0C 0F         [ 4]  500     CALL ZERO 
      00299A 81               [ 4]  501     RET 
                                    502 
                                    503 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    504 ;  LSCALE ( f24 -- f24 )
                                    505 ;  m *=10 , e -= 1
                                    506 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00299B                        507     _HEADER LSCALE,6,"LSCALE"
      00299B 28 B3                    1         .word LINK 
                           00299D     2         LINK=.
      00299D 06                       3         .byte 6  
      00299E 4C 53 43 41 4C 45        4         .ascii "LSCALE"
      0029A4                          5         LSCALE:
      0029A4 CD 0C 1A         [ 4]  508     CALL ONE 
      0029A7 CD 08 D3         [ 4]  509     CALL SUBB 
      0029AA CD 05 E3         [ 4]  510     CALL TOR
      0029AD                        511     _DOLIT 10 
      0029AD CD 04 70         [ 4]    1     CALL DOLIT 
      0029B0 00 0A                    2     .word 10 
      0029B2 CD 0B 22         [ 4]  512     CALL STAR
      0029B5 CD 05 35         [ 4]  513     CALL RFROM 
      0029B8 81               [ 4]  514     RET  
                                    515 
                                    516 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    517 ;  RSCALE ( f# -- f# )
                                    518 ;  m /=10 , e+=1 
                                    519 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0029B9                        520     _HEADER RSCALE,6,"RSCALE"
      0029B9 29 9D                    1         .word LINK 
                           0029BB     2         LINK=.
      0029BB 06                       3         .byte 6  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



      0029BC 52 53 43 41 4C 45        4         .ascii "RSCALE"
      0029C2                          5         RSCALE:
      0029C2 CD 0C 1A         [ 4]  521     CALL ONE 
      0029C5 CD 08 3D         [ 4]  522     CALL PLUS 
      0029C8 CD 05 E3         [ 4]  523     CALL TOR 
      0029CB                        524     _DOLIT 10 
      0029CB CD 04 70         [ 4]    1     CALL DOLIT 
      0029CE 00 0A                    2     .word 10 
      0029D0 CD 0A C9         [ 4]  525     CALL SLASH  
      0029D3 CD 05 35         [ 4]  526     CALL RFROM 
      0029D6 81               [ 4]  527     RET 
                                    528 
                                    529 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    530 ;  F24LITERAL ( f24 -- )
                                    531 ;  compile 24 bits literal 
                                    532 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0029D7                        533     _HEADER FLITER,COMPO+IMEDD+10,"F24LITERAL"
      0029D7 29 BB                    1         .word LINK 
                           0029D9     2         LINK=.
      0029D9 CA                       3         .byte COMPO+IMEDD+10  
      0029DA 46 32 34 4C 49 54 45     4         .ascii "F24LITERAL"
             52 41 4C
      0029E4                          5         FLITER:
      0029E4 CD 1B 90         [ 4]  534 CALL DOTS 
      0029E7 CD 16 64         [ 4]  535     CALL COMPI 
      0029EA 29 F2                  536     .word dof24lit 
      0029EC CD 16 36         [ 4]  537     CALL CCOMMA 
      0029EF CC 16 1F         [ 2]  538     JP   COMMA 
                                    539 
                                    540 
                                    541 ; runtime for F24LITERAL
                                    542 ; 24 bits literal 
      0029F2                        543 dof24lit:
      0029F2 1D 00 04         [ 2]  544     SUBW X,#4 
      0029F5 16 01            [ 2]  545     LDW Y,(1,SP)
      0029F7 90 F6            [ 1]  546     LD A,(Y)
      0029F9 90 5F            [ 1]  547     CLRW Y 
      0029FB 90 97            [ 1]  548     LD YL,A 
      0029FD 4D               [ 1]  549     TNZ A 
      0029FE 2A 04            [ 1]  550     JRPL 1$
      002A00 A6 FF            [ 1]  551     LD A,#255 
      002A02 90 95            [ 1]  552     LD YH,A   
      002A04 FF               [ 2]  553 1$: LDW (X),Y 
      002A05 16 01            [ 2]  554     LDW Y,(1,SP)
      002A07 90 EE 01         [ 2]  555     LDW Y,(1,Y)
      002A0A EF 02            [ 2]  556     LDW (2,X),Y 
      002A0C 90 85            [ 2]  557     POPW Y 
      002A0E 90 EC 03         [ 2]  558     JP (3,Y)
                                    559 
                                    560 
                                    561 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    562 ;   F24CONST ( f24 -- )
                                    563 ;   create a float24 constant 
                                    564 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002A11                        565     _HEADER F24CONST,8,"F24CONST" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



      002A11 29 D9                    1         .word LINK 
                           002A13     2         LINK=.
      002A13 08                       3         .byte 8  
      002A14 46 32 34 43 4F 4E 53     4         .ascii "F24CONST"
             54
      002A1C                          5         F24CONST:
      002A1C CD 12 DB         [ 4]  566         CALL TOKEN
      002A1F CD 18 1D         [ 4]  567         CALL SNAME 
      002A22 CD 18 B4         [ 4]  568         CALL OVERT 
      002A25 CD 16 64         [ 4]  569         CALL COMPI 
      002A28 2A 3F                  570         .word DOF24CONST 
      002A2A CD 16 36         [ 4]  571         CALL CCOMMA
      002A2D CD 16 1F         [ 4]  572         CALL COMMA  
      002A30 CD 23 8F         [ 4]  573         CALL FMOVE
      002A33 CD 07 CD         [ 4]  574         CALL QDUP 
      002A36 CD 04 99         [ 4]  575         CALL QBRAN 
      002A39 1A 68                  576         .word SET_RAMLAST  
      002A3B CD 24 23         [ 4]  577         CALL UPDATPTR  
      002A3E 81               [ 4]  578         RET          
                                    579 
      002A3F                        580 DOF24CONST:
      002A3F 16 01            [ 2]  581     LDW Y,(1,SP) 
      002A41 1D 00 04         [ 2]  582     SUBW x,#2*CELLL 
      002A44 90 F6            [ 1]  583     LD A,(Y)
      002A46 90 5F            [ 1]  584     CLRW Y 
      002A48 90 97            [ 1]  585     LD YL,A
      002A4A 4D               [ 1]  586     TNZ A 
      002A4B 2A 04            [ 1]  587     JRPL 1$
      002A4D A6 FF            [ 1]  588     LD A,#255
      002A4F 90 95            [ 1]  589     LD YH,A 
      002A51                        590 1$:      
      002A51 FF               [ 2]  591     LDW (X),Y 
      002A52 90 85            [ 2]  592     POPW Y 
      002A54 90 EE 01         [ 2]  593     LDW Y,(1,Y)
      002A57 EF 02            [ 2]  594     LDW (2,X),Y 
      002A59 81               [ 4]  595     RET 
                                    596 
                                    597 
                                    598 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    599 ;   F24VAR "name" ( -- )
                                    600 ;   create a float24 variable 
                                    601 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002A5A                        602     _HEADER F24VAR,6,"F24VAR"
      002A5A 2A 13                    1         .word LINK 
                           002A5C     2         LINK=.
      002A5C 06                       3         .byte 6  
      002A5D 46 32 34 56 41 52        4         .ascii "F24VAR"
      002A63                          5         F24VAR:
      002A63 CD 0C E9         [ 4]  603     CALL HERE
      002A66 CD 06 1A         [ 4]  604     CALL DUPP
      002A69                        605     _DOLIT 3  
      002A69 CD 04 70         [ 4]    1     CALL DOLIT 
      002A6C 00 03                    2     .word 3 
      002A6E CD 08 3D         [ 4]  606     CALL PLUS 
      002A71 CD 07 71         [ 4]  607     CALL VPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



      002A74 CD 04 D2         [ 4]  608     CALL STORE
      002A77 CD 1A 1B         [ 4]  609     CALL CREAT
      002A7A CD 06 1A         [ 4]  610     CALL DUPP
      002A7D CD 16 1F         [ 4]  611     CALL COMMA
      002A80 CD 0C 0F         [ 4]  612     CALL ZERO
      002A83 CD 06 42         [ 4]  613     CALL OVER 
      002A86 CD 04 F1         [ 4]  614     CALL CSTOR 
      002A89 CD 0C 0F         [ 4]  615     CALL ZERO 
      002A8C CD 06 2A         [ 4]  616     CALL SWAPP 
      002A8F CD 0B A3         [ 4]  617     CALL ONEP  
      002A92 CD 04 D2         [ 4]  618     CALL STORE 
      002A95 CD 23 8F         [ 4]  619     CALL FMOVE ; move definition to FLASH
      002A98 CD 07 CD         [ 4]  620     CALL QDUP 
      002A9B CD 04 99         [ 4]  621     CALL QBRAN 
      002A9E 1A 68                  622     .word SET_RAMLAST   
      002AA0 CD 1E 37         [ 4]  623     CALL UPDATVP  ; don't update if variable kept in RAM.
      002AA3 CC 24 23         [ 2]  624     JP UPDATPTR
                                    625 
                                    626 
                                    627 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    628 ;   F24! ( f24 a -- )
                                    629 ;   store float24 
                                    630 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002AA6                        631     _HEADER F24STO,4,"F24!"
      002AA6 2A 5C                    1         .word LINK 
                           002AA8     2         LINK=.
      002AA8 04                       3         .byte 4  
      002AA9 46 32 34 21              4         .ascii "F24!"
      002AAD                          5         F24STO:
      002AAD 90 93            [ 1]  632     LDW Y,X 
      002AAF 90 FE            [ 2]  633     LDW Y,(Y) ; a 
      002AB1 E6 03            [ 1]  634     LD A,(3,X) ; e low  
      002AB3 90 F7            [ 1]  635     LD (Y),A
      002AB5 72 A9 00 01      [ 2]  636     ADDW Y,#1  
      002AB9 90 BF 26         [ 2]  637     LDW YTEMP,Y 
      002ABC 90 93            [ 1]  638     LDW Y,X 
      002ABE 90 EE 04         [ 2]  639     LDW Y,(4,Y) ; m 
      002AC1 91 CF 26         [ 5]  640     LDW [YTEMP],Y 
      002AC4 1C 00 06         [ 2]  641     ADDW X,#3*CELLL 
      002AC7 81               [ 4]  642     RET 
                                    643 
                                    644 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    645 ;   F24@ ( a -- f24 )
                                    646 ;   stack float24 variable 
                                    647 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002AC8                        648     _HEADER F24AT,4,"F24@"
      002AC8 2A A8                    1         .word LINK 
                           002ACA     2         LINK=.
      002ACA 04                       3         .byte 4  
      002ACB 46 32 34 40              4         .ascii "F24@"
      002ACF                          5         F24AT:
      002ACF 90 93            [ 1]  649     LDW Y,X 
      002AD1 90 FE            [ 2]  650     LDW Y,(Y) ; a 
      002AD3 90 89            [ 2]  651     PUSHW Y 
      002AD5 1D 00 02         [ 2]  652     SUBW X,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



      002AD8 90 EE 01         [ 2]  653     LDW Y,(1,Y) ; m 
      002ADB EF 02            [ 2]  654     LDW (2,X),Y 
      002ADD 90 85            [ 2]  655     POPW Y   ; a 
      002ADF 90 F6            [ 1]  656     LD A,(Y) ; e 
      002AE1 90 5F            [ 1]  657     CLRW Y 
      002AE3 90 97            [ 1]  658     LD YL,A 
      002AE5 4D               [ 1]  659     TNZ A 
      002AE6 2A 04            [ 1]  660     JRPL 1$
      002AE8 A6 FF            [ 1]  661     LD A,#255 
      002AEA 90 95            [ 1]  662     LD YH,A 
      002AEC FF               [ 2]  663 1$: LDW (X),Y ; m e -- 
      002AED CC 26 4D         [ 2]  664     JP SET_FPSW 
                                    665 
                                    666 
                                    667 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    668 ;  SCALEUP ( um u1 u2 -- um* u1 u2* )
                                    669 ;  while (um<=0xccc && u1<u2 ){
                                    670 ;        um*10;
                                    671 ;        u2--;
                                    672 ;  }  
                                    673 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002AF0                        674 SCALEUP:
      002AF0 CD 08 28         [ 4]  675     CALL DDUP
      002AF3 CD 09 27         [ 4]  676     CALL LESS  
      002AF6                        677     _QBRAN SCALEUP3
      002AF6 CD 04 99         [ 4]    1     CALL QBRAN
      002AF9 2B 21                    2     .word SCALEUP3
      002AFB CD 07 DE         [ 4]  678     CALL ROT 
      002AFE CD 06 1A         [ 4]  679     CALL DUPP 
      002B01                        680     _DOLIT 0XCCC 
      002B01 CD 04 70         [ 4]    1     CALL DOLIT 
      002B04 0C CC                    2     .word 0XCCC 
      002B06 CD 09 54         [ 4]  681     CALL GREAT  
      002B09                        682     _TBRAN SCALEUP2 
      002B09 CD 04 A7         [ 4]    1     CALL TBRAN 
      002B0C 2B 1E                    2     .word SCALEUP2 
      002B0E                        683     _DOLIT 10 
      002B0E CD 04 70         [ 4]    1     CALL DOLIT 
      002B11 00 0A                    2     .word 10 
      002B13 CD 0B 22         [ 4]  684     CALL STAR 
      002B16 CD 07 FD         [ 4]  685     CALL NROT 
      002B19 CD 0B B0         [ 4]  686     CALL ONEM
      002B1C 20 D2            [ 2]  687     JRA SCALEUP
      002B1E                        688 SCALEUP2:
      002B1E CD 07 FD         [ 4]  689     CALL NROT 
      002B21                        690 SCALEUP3: 
      002B21 81               [ 4]  691     RET 
                                    692 
                                    693 
                                    694 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    695 ; SCALEDOWN ( um u1 u2 -- um* u1 u2* )
                                    696 ;  whhile (um && u1>u2 ){ 
                                    697 ;     um/10;
                                    698 ;     u2++;
                                    699 ;  } 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



                                    700 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B22                        701 SCALEDOWN: 
      002B22 CD 08 28         [ 4]  702     CALL DDUP 
      002B25 CD 09 54         [ 4]  703     CALL GREAT 
      002B28                        704     _QBRAN SCALDN3 
      002B28 CD 04 99         [ 4]    1     CALL QBRAN
      002B2B 2B 4E                    2     .word SCALDN3
      002B2D CD 07 DE         [ 4]  705     CALL ROT  
      002B30 CD 06 1A         [ 4]  706     CALL DUPP 
      002B33 CD 06 63         [ 4]  707     CALL ZEQUAL 
      002B36                        708     _TBRAN SCALDN2  
      002B36 CD 04 A7         [ 4]    1     CALL TBRAN 
      002B39 2B 4B                    2     .word SCALDN2 
      002B3B                        709     _DOLIT 10
      002B3B CD 04 70         [ 4]    1     CALL DOLIT 
      002B3E 00 0A                    2     .word 10 
      002B40 CD 0A C9         [ 4]  710     CALL SLASH 
      002B43 CD 07 FD         [ 4]  711     CALL NROT  
      002B46 CD 0B A3         [ 4]  712     CALL ONEP  
      002B49 20 D7            [ 2]  713     JRA SCALEDOWN 
      002B4B                        714 SCALDN2:
      002B4B CD 07 FD         [ 4]  715     CALL NROT  
      002B4E                        716 SCALDN3:
      002B4E 81               [ 4]  717     RET 
                                    718 
                                    719 
                                    720 
                                    721 
                                    722 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    723 ;  F-ALIGN ( f#1 f#2 -- m1 m2 e )
                                    724 ;  align to same exponent 
                                    725 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B4F                        726     _HEADER FALIGN,7,"F-ALIGN"
      002B4F 2A CA                    1         .word LINK 
                           002B51     2         LINK=.
      002B51 07                       3         .byte 7  
      002B52 46 2D 41 4C 49 47 4E     4         .ascii "F-ALIGN"
      002B59                          5         FALIGN:
      002B59 CD 05 E3         [ 4]  727     CALL TOR  
      002B5C CD 06 2A         [ 4]  728     CALL SWAPP  ; m1 m2 e1 R: e2 
      002B5F CD 05 35         [ 4]  729     CALL RFROM ; m1 m2 e1 e2 
      002B62 CD 08 28         [ 4]  730     CALL DDUP  
      002B65 CD 08 FB         [ 4]  731     CALL EQUAL 
      002B68                        732     _QBRAN FALGN1 
      002B68 CD 04 99         [ 4]    1     CALL QBRAN
      002B6B 2B 71                    2     .word FALGN1
      002B6D                        733     _DROP 
      002B6D 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002B70 81               [ 4]  734     RET 
      002B71                        735 FALGN1:     
                                    736 ; scale mantissa absolute values 
      002B71 CD 05 E3         [ 4]  737     CALL TOR 
      002B74 CD 05 E3         [ 4]  738     CALL TOR   ; m1 m2 R: e2 e1 
      002B77 CD 26 F2         [ 4]  739     CALL MSIGN 
      002B7A CD 07 FD         [ 4]  740     CALL NROT  ; m2s m1 m2  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



      002B7D CD 08 ED         [ 4]  741     CALL ABSS  ; m2s m1 um2 
      002B80 CD 06 2A         [ 4]  742     CALL SWAPP  ; m2s um2 m1 
      002B83 CD 26 F2         [ 4]  743     CALL MSIGN ; m2s um2 m1 m1s 
      002B86 CD 07 FD         [ 4]  744     CALL NROT  ; m2s m1s um2 m1     
      002B89 CD 08 ED         [ 4]  745     CALL ABSS  ; m2s m1s um2 um1 
      002B8C CD 06 2A         [ 4]  746     CALL SWAPP ; m2s m1s um1 um2       
                                    747 ; scaleup the largest float 
                                    748 ; but limit mantissa <=0xCCC 
                                    749 ; to avoid mantissa overflow     
      002B8F CD 05 35         [ 4]  750     CALL RFROM 
      002B92 CD 05 35         [ 4]  751     CALL RFROM ; m2s m1s um1 um2 e1 e2 
      002B95 CD 08 28         [ 4]  752     CALL DDUP 
      002B98 CD 09 27         [ 4]  753     CALL LESS  
      002B9B                        754     _QBRAN FALGN4 ; e2<e1 
      002B9B CD 04 99         [ 4]    1     CALL QBRAN
      002B9E 2B A5                    2     .word FALGN4
                                    755 ; e2>e1 then scale up m2   
      002BA0 CD 2A F0         [ 4]  756     CALL SCALEUP  ; ... um1 um2* e1 e2* 
      002BA3 20 2A            [ 2]  757     JRA FALGN6
      002BA5                        758 FALGN4: ; e2<e1 then scaleup m1 
      002BA5 CD 05 E3         [ 4]  759     CALL TOR   ; ... um1 um2 e1 R: e2
      002BA8 CD 05 E3         [ 4]  760     CALL TOR   ; ... um1 um2 R: e2 e1 
      002BAB CD 06 2A         [ 4]  761     CALL SWAPP 
      002BAE CD 05 35         [ 4]  762     CALL RFROM  
      002BB1 CD 05 35         [ 4]  763     CALL RFROM 
      002BB4 CD 06 2A         [ 4]  764     CALL SWAPP ; .. um2 um1 e2 e1 
      002BB7 CD 2A F0         [ 4]  765     CALL SCALEUP ; um2 um1* e2 e1* 
      002BBA CD 06 2A         [ 4]  766     CALL SWAPP 
      002BBD CD 05 E3         [ 4]  767     CALL TOR
      002BC0 CD 05 E3         [ 4]  768     CALL TOR     
      002BC3 CD 06 2A         [ 4]  769     CALL SWAPP  ; um1 um2 R: e2 e1
      002BC6 CD 05 35         [ 4]  770     CALL RFROM 
      002BC9 CD 05 35         [ 4]  771     CALL RFROM
      002BCC CD 06 2A         [ 4]  772     CALL SWAPP  ; ... um1 um2 e1 e2  
                                    773 ; check again for e2==e1 
                                    774 ; if scaleup was not enough 
                                    775 ; to equalize exponent then
                                    776 ; scaledown smallest float     
      002BCF                        777 FALGN6: 
      002BCF CD 08 28         [ 4]  778     CALL DDUP 
      002BD2 CD 08 FB         [ 4]  779     CALL EQUAL 
      002BD5                        780     _TBRAN FALGN8 
      002BD5 CD 04 A7         [ 4]    1     CALL TBRAN 
      002BD8 2C 2A                    2     .word FALGN8 
                                    781 ; e2!=e1 need to scale down smallest 
      002BDA CD 08 28         [ 4]  782     CALL DDUP
      002BDD CD 09 27         [ 4]  783     CALL LESS  
      002BE0                        784     _QBRAN FALGN7 ; e2<e1 
      002BE0 CD 04 99         [ 4]    1     CALL QBRAN
      002BE3 2C 0E                    2     .word FALGN7
                                    785 ; e2>e1 scaledown m1 
      002BE5 CD 05 E3         [ 4]  786     CALL TOR 
      002BE8 CD 05 E3         [ 4]  787     CALL TOR 
      002BEB CD 06 2A         [ 4]  788     CALL SWAPP   ; ... um2 um1 
      002BEE CD 05 35         [ 4]  789     CALL RFROM  ; ... um2 um1 e1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



      002BF1 CD 05 35         [ 4]  790     CALL RFROM  ; ... um2 um1 e1 e2 
      002BF4 CD 06 2A         [ 4]  791     CALL SWAPP  ; ... um2 um1 e2 e1 
      002BF7 CD 2B 22         [ 4]  792     CALL SCALEDOWN
      002BFA CD 06 2A         [ 4]  793     CALL SWAPP 
      002BFD CD 05 E3         [ 4]  794     CALL TOR
      002C00 CD 05 E3         [ 4]  795     CALL TOR 
      002C03 CD 06 2A         [ 4]  796     CALL SWAPP   ; m1 m2 R: e2 e1  
      002C06 CD 05 35         [ 4]  797     CALL RFROM 
      002C09 CD 05 35         [ 4]  798     CALL RFROM   ; ... um1 um2 e1 e2 
      002C0C 20 03            [ 2]  799     JRA FALGN71  
      002C0E                        800 FALGN7: ; e2<e1 scaledown m2 
      002C0E CD 2B 22         [ 4]  801     CALL SCALEDOWN 
                                    802 ; after scaledown if e2!=e1 
                                    803 ; this imply that one of mantissa 
                                    804 ; as been nullified by scalling 
                                    805 ; hence keep largest exponent 
      002C11                        806 FALGN71:
      002C11 CD 08 28         [ 4]  807     CALL DDUP 
      002C14 CD 08 FB         [ 4]  808     CALL EQUAL
      002C17                        809     _TBRAN FALGN8 
      002C17 CD 04 A7         [ 4]    1     CALL TBRAN 
      002C1A 2C 2A                    2     .word FALGN8 
      002C1C CD 08 28         [ 4]  810     CALL DDUP  
      002C1F CD 09 54         [ 4]  811     CALL GREAT ; e1>e2 ? 
      002C22                        812     _TBRAN FALGN8
      002C22 CD 04 A7         [ 4]    1     CALL TBRAN 
      002C25 2C 2A                    2     .word FALGN8 
      002C27 CD 06 2A         [ 4]  813     CALL SWAPP     
      002C2A                        814 FALGN8: ; m2s m1s um1 um2 e2 e1  
      002C2A                        815     _DROP  ; m2s m1s um1 um2 e 
      002C2A 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002C2D CD 05 E3         [ 4]  816     CALL TOR 
      002C30 CD 05 E3         [ 4]  817     CALL TOR 
      002C33 CD 06 2A         [ 4]  818     CALL SWAPP ; m2s um1 m1s 
      002C36                        819     _QBRAN FALGN9 
      002C36 CD 04 99         [ 4]    1     CALL QBRAN
      002C39 2C 3E                    2     .word FALGN9
      002C3B CD 08 87         [ 4]  820     CALL NEGAT 
      002C3E                        821 FALGN9:  
      002C3E CD 06 2A         [ 4]  822     CALL SWAPP 
      002C41 CD 05 35         [ 4]  823     CALL RFROM 
      002C44 CD 06 2A         [ 4]  824     CALL SWAPP 
      002C47                        825     _QBRAN FALGN10 
      002C47 CD 04 99         [ 4]    1     CALL QBRAN
      002C4A 2C 4F                    2     .word FALGN10
      002C4C CD 08 87         [ 4]  826     CALL NEGAT 
      002C4F                        827 FALGN10: ; m1 m2 
      002C4F CD 05 35         [ 4]  828     CALL RFROM ; m1 m2 e 
      002C52 81               [ 4]  829     RET 
                                    830 
                                    831 
                                    832 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    833 ;  add 2 mantissa and ajust 
                                    834 ;  for overflow 
                                    835 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



      002C53                        836 MPLUS: ; m1 m2 e -- m* e* )  
      002C53 CD 05 E3         [ 4]  837     CALL TOR 
      002C56 90 93            [ 1]  838     LDW Y,X 
      002C58 90 FE            [ 2]  839     LDW Y,(Y)
      002C5A 90 89            [ 2]  840     PUSHW Y 
      002C5C 90 93            [ 1]  841     LDW Y,X 
      002C5E 90 EE 02         [ 2]  842     LDW Y,(2,Y)
      002C61 72 F9 01         [ 2]  843     ADDW Y,(1,SP)
      002C64 EF 02            [ 2]  844     LDW (2,X),Y ; sum 
      002C66 90 85            [ 2]  845     POPW Y ; drop local variable m2 
      002C68 28 40            [ 1]  846     JRNV 3$  ; no overflow, done 
                                    847 ; increment e 
      002C6A 16 01            [ 2]  848     LDW Y,(1,SP) ; e
      002C6C 72 A9 00 01      [ 2]  849     ADDW Y,#1    ; increment e 
      002C70 17 01            [ 2]  850     LDW (1,SP),Y
                                    851 ; divide mantissa by 10
      002C72 E6 02            [ 1]  852     LD A,(2,X) 
      002C74 88               [ 1]  853     PUSH A 
      002C75 2B 09            [ 1]  854     JRMI 0$ 
      002C77 90 93            [ 1]  855     LDW Y,X 
      002C79 90 EE 02         [ 2]  856     LDW Y,(2,Y)
      002C7C 90 50            [ 2]  857     NEGW Y 
      002C7E EF 02            [ 2]  858     LDW (2,X),Y 
      002C80 90 AE 00 0A      [ 2]  859 0$: LDW Y,#10 
      002C84 FF               [ 2]  860     LDW (X),Y 
      002C85 CD 0A 01         [ 4]  861     CALL USLMOD ; remainder  sum/10 
      002C88 CD 06 2A         [ 4]  862     CALL SWAPP
      002C8B                        863     _DOLIT 5 
      002C8B CD 04 70         [ 4]    1     CALL DOLIT 
      002C8E 00 05                    2     .word 5 
      002C90 CD 09 27         [ 4]  864     CALL LESS
      002C93 84               [ 1]  865     POP A 
      002C94                        866     _TBRAN 2$
      002C94 CD 04 A7         [ 4]    1     CALL TBRAN 
      002C97 2C A7                    2     .word 2$ 
      002C99 90 93            [ 1]  867     LDW Y,X
      002C9B 90 FE            [ 2]  868     LDW Y,(Y) 
      002C9D 72 A9 00 01      [ 2]  869     ADDW Y,#1
      002CA1 4D               [ 1]  870     TNZ A 
      002CA2 2B 02            [ 1]  871     JRMI 1$
      002CA4 90 50            [ 2]  872     NEGW Y 
      002CA6 FF               [ 2]  873 1$: LDW (X),Y  
      002CA7 1D 00 02         [ 2]  874 2$: SUBW X,#CELLL  
      002CAA                        875 3$: 
      002CAA 90 85            [ 2]  876     POPW Y  ; e 
      002CAC FF               [ 2]  877     LDW (X),Y  ; e  
      002CAD 81               [ 4]  878     RET 
                                    879 
                                    880 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    881 ;   F+ ( f#1 f#2 -- f#1+f#2 )
                                    882 ;   float addition 
                                    883 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002CAE                        884     _HEADER FPLUS,2,"F+"
      002CAE 2B 51                    1         .word LINK 
                           002CB0     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



      002CB0 02                       3         .byte 2  
      002CB1 46 2B                    4         .ascii "F+"
      002CB3                          5         FPLUS:
      002CB3 CD 2B 59         [ 4]  885     CALL FALIGN 
      002CB6 CD 2C 53         [ 4]  886     CALL MPLUS
      002CB9 CD 26 4D         [ 4]  887     CALL SET_FPSW
      002CBC 81               [ 4]  888     RET 
                                    889 
                                    890 
                                    891 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    892 ;  F- ( f#1 f#2 -- f#1-f#2 )
                                    893 ;  substraction 
                                    894 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002CBD                        895     _HEADER FSUB,2,"F-"
      002CBD 2C B0                    1         .word LINK 
                           002CBF     2         LINK=.
      002CBF 02                       3         .byte 2  
      002CC0 46 2D                    4         .ascii "F-"
      002CC2                          5         FSUB:
      002CC2 90 93            [ 1]  896     LDW Y,x
      002CC4 90 EE 02         [ 2]  897     LDW Y,(2,Y)
      002CC7 90 50            [ 2]  898     NEGW Y 
      002CC9 EF 02            [ 2]  899     LDW (2,X),Y 
      002CCB 20 E6            [ 2]  900     JRA FPLUS  
                                    901 
                                    902 
                                    903 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    904 ;   DS/MOD ( ud us - ur qud )
                                    905 ;   unsigned divide double by single 
                                    906 ;   return double quotient 
                                    907 ;   and single remainder 
                                    908 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002CCD                        909     _HEADER DSLMOD,6,"DS/MOD"
      002CCD 2C BF                    1         .word LINK 
                           002CCF     2         LINK=.
      002CCF 06                       3         .byte 6  
      002CD0 44 53 2F 4D 4F 44        4         .ascii "DS/MOD"
      002CD6                          5         DSLMOD:
      002CD6 90 93            [ 1]  910         LDW     Y,X             ; stack pointer to Y
      002CD8 FE               [ 2]  911         LDW     X,(X)           ; us
      002CD9 BF 26            [ 2]  912         LDW     YTEMP,X         ; save us
      002CDB 93               [ 1]  913         LDW     X,Y
      002CDC 89               [ 2]  914         PUSHW   X               ; save stack pointer
      002CDD 90 89            [ 2]  915         PUSHW   Y 
      002CDF EE 02            [ 2]  916         LDW     X,(2,X)           ; X=udh
      002CE1 90 BE 26         [ 2]  917         LDW     Y,YTEMP         ; divisor 
      002CE4 65               [ 2]  918         DIVW    X,Y 
      002CE5 BF 24            [ 2]  919         LDW     XTEMP,X         ; QUOTIENT hi 
      002CE7 93               [ 1]  920         LDW     X,Y             ; remainder in X 
      002CE8 90 85            [ 2]  921         POPW    Y 
      002CEA 90 EE 04         [ 2]  922         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      002CED A6 10            [ 1]  923         LD      A,#16           ; loop count
      002CEF 90 58            [ 2]  924         SLLW    Y               ; udl shift udl into udh
      002CF1                        925 DSLMOD3:
      002CF1 59               [ 2]  926         RLCW    X               ; rotate udl bit into uhdh (= remainder)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



      002CF2 25 04            [ 1]  927         JRC     DSLMODa         ; if carry out of rotate
      002CF4 B3 26            [ 2]  928         CPW     X,YTEMP         ; compare udh to un
      002CF6 25 05            [ 1]  929         JRULT   DSLMOD4         ; can't subtract
      002CF8                        930 DSLMODa:
      002CF8 72 B0 00 26      [ 2]  931         SUBW    X,YTEMP         ; can subtract
      002CFC 98               [ 1]  932         RCF
      002CFD                        933 DSLMOD4:
      002CFD 8C               [ 1]  934         CCF                     ; quotient bit
      002CFE 90 59            [ 2]  935         RLCW    Y               ; rotate into quotient, rotate out udl
      002D00 4A               [ 1]  936         DEC     A               ; repeat
      002D01 26 EE            [ 1]  937         JRNE    DSLMOD3           ; if A == 0
      002D03                        938 DSLMODb:
      002D03 BF 26            [ 2]  939         LDW     YTEMP,X         ; done, save remainder
      002D05 85               [ 2]  940         POPW    X               ; restore stack pointer
      002D06 EF 02            [ 2]  941         LDW     (2,X),Y           ; save quotient low 
      002D08 90 BE 24         [ 2]  942         LDW     Y,XTEMP         ; quotient hi 
      002D0B FF               [ 2]  943         LDW     (X),Y           ; save quotient hi 
      002D0C 90 BE 26         [ 2]  944         LDW     Y,YTEMP         ; remainder onto stack
      002D0F EF 04            [ 2]  945         LDW     (4,X),Y
      002D11 81               [ 4]  946         RET 
                                    947 
                                    948 
                                    949 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    950 ;   SCALE>M ( ud1 -- e u )
                                    951 ;   scale down a double  
                                    952 ;   by repeated ud1/10
                                    953 ;   until ud<=MAX_MANTISSA   
                                    954 ;   e is log10 exponent of scaled down
                                    955 ;   u is scaled down ud1 
                                    956 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002D12                        957     _HEADER SCALETOM,7,"SCALE>M"
      002D12 2C CF                    1         .word LINK 
                           002D14     2         LINK=.
      002D14 07                       3         .byte 7  
      002D15 53 43 41 4C 45 3E 4D     4         .ascii "SCALE>M"
      002D1C                          5         SCALETOM:
      002D1C 90 5F            [ 1]  958     CLRW Y 
      002D1E 90 89            [ 2]  959     PUSHW Y  ; local variable to save last remainder 
      002D20 CD 0C 0F         [ 4]  960     CALL ZERO 
      002D23 CD 07 FD         [ 4]  961     CALL NROT ;  e ud 
      002D26                        962 SCAL1:
      002D26 CD 06 1A         [ 4]  963     CALL DUPP 
      002D29 CD 06 63         [ 4]  964     CALL ZEQUAL  
      002D2C                        965     _QBRAN SCAL2  
      002D2C CD 04 99         [ 4]    1     CALL QBRAN
      002D2F 2D 41                    2     .word SCAL2
      002D31 CD 06 42         [ 4]  966     CALL OVER 
      002D34                        967     _DOLIT MAX_MANTISSA
      002D34 CD 04 70         [ 4]    1     CALL DOLIT 
      002D37 7F FF                    2     .word MAX_MANTISSA 
      002D39 CD 09 3E         [ 4]  968     CALL UGREAT 
      002D3C                        969     _QBRAN SCAL3
      002D3C CD 04 99         [ 4]    1     CALL QBRAN
      002D3F 2D 60                    2     .word SCAL3
      002D41                        970 SCAL2:     
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



      002D41                        971     _DOLIT 10 
      002D41 CD 04 70         [ 4]    1     CALL DOLIT 
      002D44 00 0A                    2     .word 10 
      002D46 CD 2C D6         [ 4]  972     CALL DSLMOD
      002D49 CD 07 DE         [ 4]  973     CALL ROT  
                                    974 ; save remainder on rstack     
      002D4C 90 93            [ 1]  975     LDW Y,X 
      002D4E 90 FE            [ 2]  976     LDW Y,(Y)
      002D50 17 01            [ 2]  977     LDW (1,SP),Y 
      002D52 1C 00 02         [ 2]  978     ADDW X,#CELLL ; drop it from dstack 
      002D55 CD 07 DE         [ 4]  979     CALL ROT 
      002D58 CD 0B A3         [ 4]  980     CALL ONEP 
      002D5B CD 07 FD         [ 4]  981     CALL NROT  
      002D5E 20 C6            [ 2]  982     JRA SCAL1 
      002D60                        983 SCAL3: 
      002D60                        984     _DROP ; drop ud high
      002D60 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002D63 CD 05 35         [ 4]  985     CALL RFROM ; last remainder  
      002D66                        986     _DOLIT 5 
      002D66 CD 04 70         [ 4]    1     CALL DOLIT 
      002D69 00 05                    2     .word 5 
      002D6B CD 09 27         [ 4]  987     CALL LESS 
      002D6E                        988     _TBRAN SCAL4
      002D6E CD 04 A7         [ 4]    1     CALL TBRAN 
      002D71 2D 76                    2     .word SCAL4 
      002D73 CD 0B A3         [ 4]  989     CALL ONEP 
      002D76                        990 SCAL4:      
      002D76 81               [ 4]  991     RET 
                                    992 
                                    993 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    994 ;    F* ( f#1 f#2 -- f#3 )
                                    995 ;    float24 product 
                                    996 ;    f#3=f#1 * f#2 
                                    997 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002D77                        998     _HEADER FSTAR,2,"F*"
      002D77 2D 14                    1         .word LINK 
                           002D79     2         LINK=.
      002D79 02                       3         .byte 2  
      002D7A 46 2A                    4         .ascii "F*"
      002D7C                          5         FSTAR:
      002D7C CD 05 E3         [ 4]  999     CALL TOR   ; m1 e1 m2 R: e2 
      002D7F CD 06 2A         [ 4] 1000     CALL SWAPP ; m1 m2 e1  R: e2 
      002D82 CD 05 35         [ 4] 1001     CALL RFROM 
      002D85 CD 08 3D         [ 4] 1002     CALL PLUS  ; m1 m2 e 
      002D88 CD 05 E3         [ 4] 1003     CALL TOR   ; m1 m2 R: e  
      002D8B CD 26 F2         [ 4] 1004     CALL MSIGN
      002D8E CD 05 E3         [ 4] 1005     CALL TOR   ; m1 m2 R: e m2sign 
      002D91 CD 08 ED         [ 4] 1006     CALL ABSS  
      002D94 CD 06 2A         [ 4] 1007     CALL SWAPP ; um2 m1  R: e m2sign 
      002D97 CD 26 F2         [ 4] 1008     CALL MSIGN ; um2 m1 m1sign R: e m2sign 
      002D9A CD 05 35         [ 4] 1009     CALL RFROM   
      002D9D CD 06 A0         [ 4] 1010     CALL XORR 
      002DA0 CD 07 FD         [ 4] 1011     CALL NROT   ; *sign um2 m1 R: e 
      002DA3 CD 08 ED         [ 4] 1012     CALL ABSS  ; *sign um2 um1 R: e 
      002DA6 CD 0A D8         [ 4] 1013     CALL UMSTA 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



      002DA9 CD 2D 1C         [ 4] 1014     CALL SCALETOM
      002DAC CD 06 2A         [ 4] 1015     CALL SWAPP 
      002DAF CD 05 35         [ 4] 1016     CALL RFROM 
      002DB2 CD 08 3D         [ 4] 1017     CALL PLUS 
      002DB5 CD 05 E3         [ 4] 1018     CALL TOR 
      002DB8 CD 06 2A         [ 4] 1019     CALL SWAPP 
      002DBB                       1020     _QBRAN 1$
      002DBB CD 04 99         [ 4]    1     CALL QBRAN
      002DBE 2D C3                    2     .word 1$
      002DC0 CD 08 87         [ 4] 1021     CALL NEGAT 
      002DC3 CD 05 35         [ 4] 1022 1$: CALL RFROM  
      002DC6 CC 26 4D         [ 2] 1023     JP SET_FPSW 
                                   1024 
                                   1025 
                                   1026 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1027 ;  F/ ( f#1 f#2 -- f#3 )
                                   1028 ;  float division
                                   1029 ;  f#3 = f#1/f#2
                                   1030 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002DC9                       1031     _HEADER FSLASH,2,"F/"
      002DC9 2D 79                    1         .word LINK 
                           002DCB     2         LINK=.
      002DCB 02                       3         .byte 2  
      002DCC 46 2F                    4         .ascii "F/"
      002DCE                          5         FSLASH:
      002DCE CD 05 E3         [ 4] 1032     CALL TOR    ; m1 e1 m2   R: e2 
      002DD1 CD 06 2A         [ 4] 1033     CALL SWAPP
      002DD4 CD 05 35         [ 4] 1034     CALL RFROM 
      002DD7 CD 08 D3         [ 4] 1035     CALL SUBB 
      002DDA CD 05 E3         [ 4] 1036     CALL TOR   ; m1 m2 R: e   
      002DDD CD 26 F2         [ 4] 1037     CALL MSIGN 
      002DE0 CD 05 E3         [ 4] 1038     CALL TOR   ; m1 m2 R: e m2s 
      002DE3 CD 08 ED         [ 4] 1039     CALL ABSS   ; m1 um2 R: e m2s 
      002DE6 CD 06 2A         [ 4] 1040     CALL SWAPP  ;um2 m1 R: e m2s 
      002DE9 CD 26 F2         [ 4] 1041     CALL MSIGN  ; um2 m1 m1s R: e m2s 
      002DEC CD 05 35         [ 4] 1042     CALL RFROM  ; um2 m1 m1s m2s R: e
      002DEF CD 06 A0         [ 4] 1043     CALL XORR   
      002DF2 CD 07 FD         [ 4] 1044     CALL NROT  ; qsign um2 m1 
      002DF5 CD 08 ED         [ 4] 1045     CALL ABSS  ; qsign um2 um1 R: e 
      002DF8 CD 06 2A         [ 4] 1046     CALL SWAPP ; qsign um1 um2 R: e  
      002DFB CD 06 1A         [ 4] 1047     CALL DUPP 
      002DFE CD 05 E3         [ 4] 1048     CALL TOR   ; qsign um1 um2 R: e um2 
      002E01 CD 0A 01         [ 4] 1049     CALL USLMOD ; qsign ur uq R: e um2 
      002E04                       1050 FSLASH1: ; fraction loop 
                                   1051 ; check for null remainder 
      002E04 E6 02            [ 1] 1052     LD A,(2,X)
      002E06 EA 03            [ 1] 1053     OR A,(3,X)
      002E08 27 40            [ 1] 1054     JREQ FSLASH8 
                                   1055 ; get fractional digits from remainder until mantissa saturate
                                   1056 ; qsign remainder mantissa R: e divisor 
                                   1057 ; check for mantissa saturation 
      002E0A CD 06 1A         [ 4] 1058     CALL DUPP 
      002E0D                       1059     _DOLIT 0xCCC 
      002E0D CD 04 70         [ 4]    1     CALL DOLIT 
      002E10 0C CC                    2     .word 0xCCC 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



      002E12 CD 09 3E         [ 4] 1060     CALL UGREAT
      002E15                       1061     _TBRAN FSLASH8 ; another loop would result in mantissa overflow 
      002E15 CD 04 A7         [ 4]    1     CALL TBRAN 
      002E18 2E 4A                    2     .word FSLASH8 
                                   1062 ; multiply mantissa by 10 
      002E1A                       1063     _DOLIT 10 
      002E1A CD 04 70         [ 4]    1     CALL DOLIT 
      002E1D 00 0A                    2     .word 10 
      002E1F CD 0B 22         [ 4] 1064     CALL STAR 
                                   1065 ; mutliply remainder by 10     
      002E22 CD 06 2A         [ 4] 1066     CALL SWAPP
      002E25                       1067     _DOLIT 10  
      002E25 CD 04 70         [ 4]    1     CALL DOLIT 
      002E28 00 0A                    2     .word 10 
      002E2A CD 0B 22         [ 4] 1068     CALL STAR 
                                   1069 ; divide remainder by um2     
      002E2D CD 05 46         [ 4] 1070     CALL RAT  ; mantissa remainder divisor R: e divisor 
      002E30 CD 0A 01         [ 4] 1071     CALL USLMOD ; mantissa dr dq R: e divisor 
      002E33 CD 06 2A         [ 4] 1072     CALL SWAPP ; mantissa frac_digit remainder R:  e divisor  
      002E36 CD 05 E3         [ 4] 1073     CALL TOR  ; mantissa frac_digit R: e divisor remainder 
      002E39 CD 08 3D         [ 4] 1074     CALL PLUS ; mantissa+frac_digit 
      002E3C CD 05 35         [ 4] 1075     CALL RFROM ; mantissa remainder R: e divisor  
      002E3F CD 06 2A         [ 4] 1076     CALL SWAPP  ; remainder mantissa  
                                   1077 ; decrement e 
      002E42 16 03            [ 2] 1078     LDW Y,(3,SP) ; e 
      002E44 90 5A            [ 2] 1079     DECW Y 
      002E46 17 03            [ 2] 1080     LDW (3,SP),Y 
      002E48 20 BA            [ 2] 1081     JRA FSLASH1
      002E4A                       1082 FSLASH8: ; qsign remainder mantissa R: qs e divisor 
                                   1083 ; round to nearest digit, i.e r>=divisor/2
      002E4A CD 06 2A         [ 4] 1084     CALL SWAPP  
      002E4D CD 05 35         [ 4] 1085     CALL RFROM 
      002E50 CD 0B F5         [ 4] 1086     CALL TWOSL 
      002E53 CD 09 11         [ 4] 1087     CALL ULESS  
      002E56                       1088     _TBRAN FSLASH85 
      002E56 CD 04 A7         [ 4]    1     CALL TBRAN 
      002E59 2E 5E                    2     .word FSLASH85 
      002E5B CD 0B A3         [ 4] 1089     CALL ONEP 
      002E5E                       1090 FSLASH85: 
      002E5E CD 06 2A         [ 4] 1091     CALL SWAPP ; quotient qsign
      002E61                       1092     _QBRAN FSLASH9 
      002E61 CD 04 99         [ 4]    1     CALL QBRAN
      002E64 2E 69                    2     .word FSLASH9
      002E66 CD 08 87         [ 4] 1093     CALL NEGAT  
      002E69                       1094 FSLASH9:
      002E69 CD 05 35         [ 4] 1095     CALL RFROM  ; exponent 
      002E6C CC 26 4D         [ 2] 1096     JP SET_FPSW
                                   1097     
                                   1098 
                                   1099 
                                   1100 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1101 ;   S>F  ( # -- f# )
                                   1102 ;   convert double to float 
                                   1103 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002E6F                       1104     _HEADER STOF,3,"S>F"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



      002E6F 2D CB                    1         .word LINK 
                           002E71     2         LINK=.
      002E71 03                       3         .byte 3  
      002E72 53 3E 46                 4         .ascii "S>F"
      002E75                          5         STOF:
      002E75 CD 0C 0F         [ 4] 1105     CALL ZERO 
      002E78 CC 26 4D         [ 2] 1106     JP SET_FPSW
                                   1107 
                                   1108 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1109 ;   F>S  ( f# -- n )
                                   1110 ;  convert float24 to single  
                                   1111 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002E7B                       1112     _HEADER FTOS,3,"F>S"
      002E7B 2E 71                    1         .word LINK 
                           002E7D     2         LINK=.
      002E7D 03                       3         .byte 3  
      002E7E 46 3E 53                 4         .ascii "F>S"
      002E81                          5         FTOS:
      002E81 CD 07 CD         [ 4] 1113     CALL QDUP
      002E84                       1114     _QBRAN FTOD9
      002E84 CD 04 99         [ 4]    1     CALL QBRAN
      002E87 2F 06                    2     .word FTOD9
      002E89 CD 05 E3         [ 4] 1115     CALL TOR 
      002E8C CD 26 F2         [ 4] 1116     CALL MSIGN 
      002E8F CD 06 2A         [ 4] 1117     CALL SWAPP 
      002E92 CD 08 ED         [ 4] 1118     CALL ABSS
      002E95 CD 05 35         [ 4] 1119     CALL RFROM  
      002E98 CD 06 1A         [ 4] 1120     CALL DUPP   
      002E9B CD 06 51         [ 4] 1121     CALL ZLESS 
      002E9E                       1122     _QBRAN FTOD4 
      002E9E CD 04 99         [ 4]    1     CALL QBRAN
      002EA1 2E E0                    2     .word FTOD4
                                   1123 ; negative exponent 
      002EA3 CD 08 ED         [ 4] 1124     CALL ABSS 
      002EA6 CD 05 E3         [ 4] 1125     CALL TOR
      002EA9 20 26            [ 2] 1126     JRA FTOD2  
      002EAB                       1127 FTOD1:
      002EAB CD 08 28         [ 4] 1128     CALL DDUP 
      002EAE CD 06 63         [ 4] 1129     CALL ZEQUAL 
      002EB1                       1130     _TBRAN FTOD3 
      002EB1 CD 04 A7         [ 4]    1     CALL TBRAN 
      002EB4 2E D8                    2     .word FTOD3 
      002EB6                       1131     _DOLIT 10 
      002EB6 CD 04 70         [ 4]    1     CALL DOLIT 
      002EB9 00 0A                    2     .word 10 
      002EBB CD 0A 01         [ 4] 1132     CALL USLMOD 
      002EBE CD 06 2A         [ 4] 1133     CALL SWAPP  
      002EC1                       1134     _DOLIT 5 
      002EC1 CD 04 70         [ 4]    1     CALL DOLIT 
      002EC4 00 05                    2     .word 5 
      002EC6 CD 09 27         [ 4] 1135     CALL LESS 
      002EC9                       1136     _TBRAN FTOD2  
      002EC9 CD 04 A7         [ 4]    1     CALL TBRAN 
      002ECC 2E D1                    2     .word FTOD2 
      002ECE CD 0B A3         [ 4] 1137     CALL ONEP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



      002ED1                       1138 FTOD2:      
      002ED1                       1139     _DONXT FTOD1
      002ED1 CD 04 84         [ 4]    1     CALL DONXT 
      002ED4 2E AB                    2     .word FTOD1 
      002ED6 20 23            [ 2] 1140     JRA FTOD8   
      002ED8                       1141 FTOD3: 
      002ED8 CD 05 35         [ 4] 1142     CALL RFROM 
      002EDB                       1143     _DROP 
      002EDB 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002EDE 20 1B            [ 2] 1144     JRA FTOD8  
                                   1145 ; positive exponent 
      002EE0                       1146 FTOD4:
      002EE0 CD 05 E3         [ 4] 1147     CALL TOR 
      002EE3 20 11            [ 2] 1148     JRA FTOD6
      002EE5                       1149 FTOD5:
      002EE5                       1150     _DOLIT 10 
      002EE5 CD 04 70         [ 4]    1     CALL DOLIT 
      002EE8 00 0A                    2     .word 10 
      002EEA CD 0A D8         [ 4] 1151     CALL UMSTA
      002EED                       1152     _QBRAN FTOD6 
      002EED CD 04 99         [ 4]    1     CALL QBRAN
      002EF0 2E F6                    2     .word FTOD6
      002EF2 5B 02            [ 2] 1153     ADDW SP,#CELLL 
      002EF4 20 05            [ 2] 1154     JRA FTOD8  
      002EF6                       1155 FTOD6: 
      002EF6                       1156     _DONXT FTOD5 
      002EF6 CD 04 84         [ 4]    1     CALL DONXT 
      002EF9 2E E5                    2     .word FTOD5 
      002EFB                       1157 FTOD8:
      002EFB CD 07 DE         [ 4] 1158     CALL ROT 
      002EFE                       1159     _QBRAN FTOD9 
      002EFE CD 04 99         [ 4]    1     CALL QBRAN
      002F01 2F 06                    2     .word FTOD9
      002F03 CD 08 87         [ 4] 1160     CALL NEGAT
      002F06                       1161 FTOD9:          
      002F06 81               [ 4] 1162     RET 
                                   1163 
                                   1164 
                                   1165 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1166 ; DSWAP ( f#1 f#2 -- f#2 f#1 )
                                   1167 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002F07                       1168     _HEADER DSWAP,5,"DSWAP"
      002F07 2E 7D                    1         .word LINK 
                           002F09     2         LINK=.
      002F09 05                       3         .byte 5  
      002F0A 44 53 57 41 50           4         .ascii "DSWAP"
      002F0F                          5         DSWAP:
      002F0F 90 93            [ 1] 1169     LDW Y,X 
      002F11 90 FE            [ 2] 1170     LDW Y,(Y)
      002F13 90 89            [ 2] 1171     PUSHW Y 
      002F15 90 93            [ 1] 1172     LDW Y,X 
      002F17 90 EE 02         [ 2] 1173     LDW Y,(2,Y)
      002F1A 90 89            [ 2] 1174     PUSHW Y 
      002F1C 90 93            [ 1] 1175     LDW Y,X 
      002F1E 90 EE 04         [ 2] 1176     LDW Y,(4,Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



      002F21 FF               [ 2] 1177     LDW (X),Y 
      002F22 90 93            [ 1] 1178     LDW Y,X 
      002F24 90 EE 06         [ 2] 1179     LDW Y,(6,Y)
      002F27 EF 02            [ 2] 1180     LDW (2,X),Y 
      002F29 90 85            [ 2] 1181     POPW Y 
      002F2B EF 06            [ 2] 1182     LDW (6,X),Y 
      002F2D 90 85            [ 2] 1183     POPW Y 
      002F2F EF 04            [ 2] 1184     LDW (4,X),Y 
      002F31 CC 26 4D         [ 2] 1185     JP SET_FPSW  ; reflect state of top float 
                                   1186 
                                   1187 
                                   1188 ;;;;;;;;;;;;;;;;;;;;;;;;
                                   1189 ;   F0< ( f# -- f )
                                   1190 ;   true if f#<0
                                   1191 ;;;;;;;;;;;;;;;;;;;;;;;;
      002F34                       1192     _HEADER FZLESS,3,"F0<"
      002F34 2F 09                    1         .word LINK 
                           002F36     2         LINK=.
      002F36 03                       3         .byte 3  
      002F37 46 30 3C                 4         .ascii "F0<"
      002F3A                          5         FZLESS:
      002F3A                       1193     _DROP 
      002F3A 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002F3D CC 06 51         [ 2] 1194     JP ZLESS 
                                   1195 
                                   1196 
                                   1197 ;;;;;;;;;;;;;;;;;;;;;;;;
                                   1198 ;   F< ( f#1 f#2 -- f )
                                   1199 ;;;;;;;;;;;;;;;;;;;;;;;
      002F40                       1200     _HEADER FLESS,2,"F<"
      002F40 2F 36                    1         .word LINK 
                           002F42     2         LINK=.
      002F42 02                       3         .byte 2  
      002F43 46 3C                    4         .ascii "F<"
      002F45                          5         FLESS:
      002F45 CD 2C C2         [ 4] 1201     CALL FSUB 
      002F48 20 F0            [ 2] 1202     JRA FZLESS 
                                   1203 
                                   1204 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1205 ;   F> ( f#1 f#2 -- f )
                                   1206 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002F4A                       1207     _HEADER FGREAT,2,"F>"
      002F4A 2F 42                    1         .word LINK 
                           002F4C     2         LINK=.
      002F4C 02                       3         .byte 2  
      002F4D 46 3E                    4         .ascii "F>"
      002F4F                          5         FGREAT:
      002F4F CD 2F 0F         [ 4] 1208     CALL DSWAP 
      002F52 20 F1            [ 2] 1209     JRA FLESS 
                                   1210 
                                   1211 
                                   1212 
                                   1213 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1214 ;   F= ( f#1 f#2 -- f ) 
                                   1215 ;   true if f#1==f#2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



                                   1216 ;;;;;;;;;;;;;;;;;;;;;;;;;
      002F54                       1217     _HEADER FEQUAL,2,"F="
      002F54 2F 4C                    1         .word LINK 
                           002F56     2         LINK=.
      002F56 02                       3         .byte 2  
      002F57 46 3D                    4         .ascii "F="
      002F59                          5         FEQUAL:
      002F59 4F               [ 1] 1218     CLR A 
      002F5A 90 93            [ 1] 1219     LDW Y,X 
      002F5C 90 FE            [ 2] 1220     LDW Y,(Y)
      002F5E 90 BF 26         [ 2] 1221     LDW YTEMP,Y  
      002F61 90 93            [ 1] 1222     LDW Y,X 
      002F63 90 EE 04         [ 2] 1223     LDW Y,(4,Y)
      002F66 90 B3 26         [ 2] 1224     CPW Y,YTEMP
      002F69 26 14            [ 1] 1225     JRNE 1$
      002F6B 90 93            [ 1] 1226     LDW Y,X 
      002F6D 90 EE 02         [ 2] 1227     LDW Y,(2,Y)
      002F70 90 BF 26         [ 2] 1228     LDW YTEMP,Y 
      002F73 90 93            [ 1] 1229     LDW Y,X 
      002F75 90 EE 06         [ 2] 1230     LDW Y,(6,Y)
      002F78 90 B3 26         [ 2] 1231     CPW Y,YTEMP 
      002F7B 26 02            [ 1] 1232     JRNE 1$ 
      002F7D A6 FF            [ 1] 1233     LD A,#255
      002F7F                       1234 1$: 
      002F7F 1C 00 02         [ 2] 1235     ADDW X,#CELLL 
      002F82 F7               [ 1] 1236     LD (X),A 
      002F83 E7 01            [ 1] 1237     LD (1,X),A 
      002F85 81               [ 4] 1238     RET 
                                   1239 
                                   1240 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1241 ;   F0= ( f# -- f )
                                   1242 ;   true if f# is 0.0 
                                   1243 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      002F86                       1244     _HEADER FZEQUAL,3,"F0="
      002F86 2F 56                    1         .word LINK 
                           002F88     2         LINK=.
      002F88 03                       3         .byte 3  
      002F89 46 30 3D                 4         .ascii "F0="
      002F8C                          5         FZEQUAL:
      002F8C                       1245     _DROP  
      002F8C 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002F8F CC 06 63         [ 2] 1246     JP ZEQUAL  
                                   1247 
                                   1248 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1249 ;  FNEGATE ( f#1 -- f#2 )
                                   1250 ;  f#2 is negation of f#1 
                                   1251 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      002F92                       1252     _HEADER FNEGA,7,"FNEGATE"
      002F92 2F 88                    1         .word LINK 
                           002F94     2         LINK=.
      002F94 07                       3         .byte 7  
      002F95 46 4E 45 47 41 54 45     4         .ascii "FNEGATE"
      002F9C                          5         FNEGA:
      002F9C CD 05 E3         [ 4] 1253     CALL TOR 
      002F9F CD 08 87         [ 4] 1254     CALL NEGAT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



      002FA2 CD 05 35         [ 4] 1255     CALL RFROM 
      002FA5 CC 26 4D         [ 2] 1256     JP SET_FPSW
                                   1257      
                                   1258 
                                   1259 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1260 ;  FABS ( f#1 -- abs(f#1) )
                                   1261 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002FA8                       1262     _HEADER FABS,4,"FABS"
      002FA8 2F 94                    1         .word LINK 
                           002FAA     2         LINK=.
      002FAA 04                       3         .byte 4  
      002FAB 46 41 42 53              4         .ascii "FABS"
      002FAF                          5         FABS:
      002FAF CD 05 E3         [ 4] 1263     CALL TOR 
      002FB2 CD 08 ED         [ 4] 1264     CALL ABSS 
      002FB5 CD 05 35         [ 4] 1265     CALL RFROM 
      002FB8 CC 26 4D         [ 2] 1266     JP SET_FPSW
                                   1267      
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



                                   4709 .endif 
                                   4710 
                                   4711 ;===============================================================
                                   4712 
                           002FAA  4713 LASTN =	LINK   ;last name defined
                                   4714 
                                   4715 ; application code begin here
      003000                       4716 	.bndry 128 ; align on flash block  
      003000                       4717 app_space: 
                                   4718 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        0008F6 R   |   6 ABOR1      0014EC R
  6 ABOR2      001503 R   |   6 ABORQ      0014E4 R   |   6 ABORT      0014D5 R
  6 ABRTQ      0017CF R   |   6 ABSS       0008ED R   |   6 ACCEP      00146B R
  6 ACCP1      001474 R   |   6 ACCP2      00149A R   |   6 ACCP3      00149D R
  6 ACCP4      00149F R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |     ADDWX   =  00001C 
  6 ADRADJ     0007BD R   |     AFR     =  004803     |     AFR0_ADC=  000000 
    AFR1_TIM=  000001     |     AFR2_CCO=  000002     |     AFR3_TIM=  000003 
    AFR4_TIM=  000004     |     AFR5_TIM=  000005     |     AFR6_I2C=  000006 
    AFR7_BEE=  000007     |   6 AFT        0017BA R   |   6 AGAIN      001704 R
  6 AHEAD      001767 R   |   6 ALLOT      001611 R   |   6 ANDD       000677 R
    APP_CP  =  004004     |     APP_LAST=  004000     |     APP_RUN =  004002 
    APP_VP  =  004006     |   6 AT         0004E4 R   |   6 ATEXE      000D1F R
  6 AUTORUN    000129 R   |     AWU_APR =  0050F1     |     AWU_CSR =  0050F0 
    AWU_TBR =  0050F2     |     B0_MASK =  000001     |     B115200 =  000006 
  6 B115K2     0003E1 R   |     B19200  =  000003     |   6 B19K2      0003BE R
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
  6 B2K4       00038F R   |     B2_MASK =  000004     |     B38400  =  000004 
    B3_MASK =  000008     |     B460800 =  000008     |     B4800   =  000001 
  6 B4K8       00039D R   |     B4_MASK =  000010     |     B57600  =  000005 
  6 B57K6      0003CF R   |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
  6 B9K6       0003AD R   |   6 BACK1      001413 R   |   6 BASE       0006E0 R
    BASEE   =  00000A     |   6 BAUD       0003F1 R   |     BCNT    =  000001 
  6 BCOMP      001654 R   |   6 BDIGS      000E17 R   |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
  6 BEGIN      0016E6 R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
  6 BKSLA      001268 R   |   6 BKSP       0013E3 R   |     BKSPP   =  000008 
  6 BLANK      000C02 R   |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |   6 BRAN       0004B5 R   |     BTW     =  000001 
  6 BUF2ROW    002302 R   |   6 BYE        0000B6 R   |     CADR    =  000003 
    CALLL   =  0000CD     |   6 CALLOT     00249A R   |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CARRY   =  00002A 
    CASE_SEN=  000000     |   6 CAT        000502 R   |   6 CCOMMA     001636 R
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CELLL   =  000002     |   6 CELLM      000B87 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]

Symbol Table

  6 CELLP      000B78 R   |   6 CELLS      000B96 R   |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   6 CHAR1      001053 R
  6 CHAR2      001056 R   |   6 CHKIVEC    0021F0 R   |     CLKOPT  =  004807 
    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |   6 CMOV1      000D52 R
  6 CMOV2      000D66 R   |   6 CMOV3      000D7A R   |   6 CMOVE      000D36 R
    CNT     =  000001     |     CNTDWN  =  000032     |   6 CNTXT      000763 R
  6 COLD       001CF1 R   |   6 COLD1      001CF1 R   |   6 COLON      0019BE R
  6 COMMA      00161F R   |   6 COMPI      001664 R   |     COMPO   =  000040 
  6 COMPONLY   001A0A R   |   6 CONSTANT   001A7F R   |   6 COPYRIGH   001C3B R
  6 COUNT      000CD2 R   |   6 CPP        00077F R   |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |   6 CR         00107C R   |   6 CREAT      001A1B R
    CRR     =  00000D     |   6 CSTOR      0004F1 R   |   6 CTABLE     0024BB R
  6 CTAT       0024DC R   |   6 CTINIT     002504 R   |   6 DAT        000CB6 R
    DATSTK  =  001680     |   6 DCONST     001AB4 R   |   6 DDROP      00081D R
  6 DDUP       000828 R   |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
  6 DECIM      000EC7 R   |   6 DEPTH      000C51 R   |     DEVID_BA=  0048CD 
    DEVID_EN=  0048D8     |     DEVID_LO=  0048D2     |     DEVID_LO=  0048D3 
    DEVID_LO=  0048D4     |     DEVID_LO=  0048D5     |     DEVID_LO=  0048D6 
    DEVID_LO=  0048D7     |     DEVID_LO=  0048D8     |     DEVID_WA=  0048D1 
    DEVID_XH=  0048CE     |     DEVID_XL=  0048CD     |     DEVID_YH=  0048D0 
    DEVID_YL=  0048CF     |   6 DGTQ1      000F0C R   |   6 DI         0000C4 R
  6 DIG        000E40 R   |   6 DIGIT      000DDB R   |   6 DIGS       000E51 R
  6 DIGS1      000E51 R   |   6 DIGS2      000E5E R   |   6 DIGTQ      000EDB R
    DISCOVER=  000000     |     DM_BK1RE=  007F90     |     DM_BK1RH=  007F91 
    DM_BK1RL=  007F92     |     DM_BK2RE=  007F93     |     DM_BK2RH=  007F94 
    DM_BK2RL=  007F95     |     DM_CR1  =  007F96     |     DM_CR2  =  007F97 
    DM_CSR1 =  007F98     |     DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A 
  6 DN1        0008B4 R   |   6 DNEGA      000899 R   |   6 DOCONST    001A9F R
  6 DOF24CON   002A3F R   |   6 DOLIT      000470 R   |   6 DONXT      000484 R
    DOORBELL=  000000     |   6 DOSTR      00108C R   |   6 DOT        001122 R
  6 DOT1       001137 R   |   6 DOTI1      001C04 R   |   6 DOTID      001BEE R
  6 DOTO1      001578 R   |   6 DOTOK      00155E R   |   6 DOTPR      001249 R
  6 DOTQ       0017E9 R   |   6 DOTQP      0010A9 R   |   6 DOTR       0010B7 R
  6 DOTS       001B90 R   |   6 DOTS1      001B9B R   |   6 DOTS2      001BA4 R
  6 DOVAR      0006D0 R   |   6 DO_DCONS   001AD7 R   |     DP      =  000005 
  6 DROP       000610 R   |   6 DSLMOD     002CD6 R   |   6 DSLMOD3    002CF1 R
  6 DSLMOD4    002CFD R   |   6 DSLMODa    002CF8 R   |   6 DSLMODb    002D03 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]

Symbol Table

  6 DSTOR      000C9D R   |   6 DSWAP      002F0F R   |   6 DUMP       001B46 R
  6 DUMP1      001B5D R   |   6 DUMP3      001B7F R   |   6 DUMPP      001B15 R
  6 DUPP       00061A R   |   6 EDIGS      000E7C R   |   6 EDOT       002703 R
  6 EDOT0      002712 R   |   6 EDOT2      00271E R   |   6 EDOT3      00273C R
  6 EDOT4      002757 R   |   6 EDOT5      002778 R   |   6 EECSTORE   001FA1 R
  6 EEPCP      001DC7 R   |   6 EEPLAST    001D9A R   |   6 EEPROM     001D82 R
    EEPROM_B=  004000     |     EEPROM_E=  0047FF     |     EEPROM_R=  000010 
    EEPROM_S=  000800     |   6 EEPRUN     001DB1 R   |   6 EEPVP      001DDD R
  6 EESTORE    001FED R   |   6 EE_CCOMM   0022B7 R   |   6 EE_COMMA   002296 R
  6 EE_CREAD   001F32 R   |   6 EE_READ    001F10 R   |   6 EI         0000BD R
  6 ELSEE      00173F R   |   6 EMIT       000437 R   |     EOL_CR  =  000001 
    EOL_LF  =  000000     |   6 EQ1        000908 R   |   6 EQUAL      0008FB R
  6 ERASE      000DA9 R   |     ERR     =  00001B     |   6 EVAL       0015A1 R
  6 EVAL1      0015A1 R   |   6 EVAL2      0015BA R   |   6 EXE1       000D2D R
  6 EXECU      0004C5 R   |     EXT     =  000000     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |   6 EXTRC      000E03 R   |   6 F24AT      002ACF R
  6 F24CONST   002A1C R   |   6 F24STO     002AAD R   |   6 F24VAR     002A63 R
    F24_MAJO=  000001     |     F24_MINO=  000000     |   6 FABS       002FAF R
  6 FADDR      002384 R   |   6 FALGN1     002B71 R   |   6 FALGN10    002C4F R
  6 FALGN4     002BA5 R   |   6 FALGN6     002BCF R   |   6 FALGN7     002C0E R
  6 FALGN71    002C11 R   |   6 FALGN8     002C2A R   |   6 FALGN9     002C3E R
  6 FALIGN     002B59 R   |   6 FALSE      000869 R   |   6 FARAT      001E48 R
  6 FARCAT     001E54 R   |   6 FC_XOFF    000464 R   |   6 FC_XON     00044E R
  6 FDOT       002787 R   |   6 FDOT0      0027BD R   |   6 FDOT1      0027AC R
  6 FDOT10     002818 R   |   6 FDOT2      0027CB R   |   6 FDOT3      0027E1 R
  6 FDOT6      0027EE R   |   6 FDOT7      0027F8 R   |   6 FDOT8      002800 R
  6 FDOT9      002808 R   |   6 FEQUAL     002F59 R   |   6 FER        0025EA R
  6 FGREAT     002F4F R   |     FHSE    =  7A1200     |     FHSI    =  F42400 
  6 FILL       000D89 R   |   6 FILL0      000D97 R   |   6 FILL1      000D9F R
  6 FIND       00133F R   |   6 FIND1      00135D R   |   6 FIND2      00138B R
  6 FIND3      001397 R   |   6 FIND4      0013AB R   |   6 FIND5      0013B8 R
  6 FIND6      00139C R   |   6 FINIT      0025E0 R   |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
    FLASH_IA=  000000     |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |   6 FLESS      002F45 R
  6 FLITER     0029E4 R   |   6 FLOATQ     0028BA R   |   6 FLOATQ1    002919 R
  6 FLOATQ2    002922 R   |   6 FLOATQ3    00292A R   |   6 FLOATQ31   002959 R
  6 FLOATQ34   002962 R   |   6 FLOATQ4    00296D R   |   6 FLOAT_ER   002985 R
  6 FLOAT_ER   00297F R   |     FLSI    =  01F400     |   6 FMOVE      00238F R
  6 FMOVE2     0023C0 R   |   6 FNE        00260D R   |   6 FNEGA      002F9C R
  6 FOR        0016AE R   |   6 FORGET     00015A R   |   6 FORGET1    000189 R
  6 FORGET2    00020F R   |   6 FORGET4    000218 R   |   6 FORGET6    0001D1 R
  6 FOV        002628 R   |   6 FPLUS      002CB3 R   |   6 FPSTOR     001D63 R
  6 FPSW       0025BC R   |     FPTR    =  000034     |   6 FREEVAR    000225 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]

Symbol Table

  6 FREEVAR4   00025B R   |   6 FRESET     0025CE R   |   6 FSLASH     002DCE R
  6 FSLASH1    002E04 R   |   6 FSLASH8    002E4A R   |   6 FSLASH85   002E5E R
  6 FSLASH9    002E69 R   |   6 FSTAR      002D7C R   |   6 FSUB       002CC2 R
  6 FTOD1      002EAB R   |   6 FTOD2      002ED1 R   |   6 FTOD3      002ED8 R
  6 FTOD4      002EE0 R   |   6 FTOD5      002EE5 R   |   6 FTOD6      002EF6 R
  6 FTOD8      002EFB R   |   6 FTOD9      002F06 R   |   6 FTOS       002E81 R
  6 FVER       00258A R   |   6 FZE        0025F7 R   |   6 FZEQUAL    002F8C R
  6 FZLESS     002F3A R   |     GPIO_BAS=  005000     |     GPIO_CR1=  000003 
    GPIO_CR2=  000004     |     GPIO_DDR=  000002     |     GPIO_IDR=  000001 
    GPIO_ODR=  000000     |     GPIO_SIZ=  000005     |   6 GREAT      000954 R
  6 GREAT1     00095F R   |   6 HDOT       001106 R   |   6 HERE       000CE9 R
  6 HEX        000EB2 R   |   6 HI         001CA6 R   |   6 HLD        000750 R
  6 HOLD       000E27 R   |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |   6 ICOLON     0019CF R
  6 IFETCH     0016CC R   |   6 IFF        001717 R   |   6 IFMOVE     002468 R
    IMEDD   =  000080     |   6 IMM01      0019E6 R   |   6 IMMED      0019E1 R
  6 INCH       00042B R   |   6 INC_FPTR   001EDD R   |   6 INITOFS    001997 R
  6 INN        0006FE R   |     INPUT_DI=  000000     |     INPUT_EI=  000001 
    INPUT_FL=  000000     |     INPUT_PU=  000001     |   6 INTE1      001540 R
  6 INTER      001516 R   |   6 INTQ       002560 R   |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]

Symbol Table

    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
  6 INVER      000876 R   |     IPR0    =  000002     |     IPR1    =  000001 
    IPR2    =  000000     |     IPR3    =  000003     |     IPR_MASK=  000003 
    IRET_COD=  000080     |   6 ISEMI      0018E6 R   |     ITC_SPR1=  007F70 
    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |   6 JFETCH     0016D7 R   |     JPIMM   =  0000CC 
  6 JSRC       00193B R   |   6 JSRC1      00195E R   |   6 JSRC2      001981 R
  6 KEY        001001 R   |   6 KTAP       001430 R   |   6 KTAP1      001453 R
  6 KTAP2      001456 R   |   6 LAST       00078F R   |   6 LASTN   =  002FAA R
  6 LBRAC      00154D R   |     LED2_BIT=  000005     |     LED2_MAS=  000020 
    LED2_POR=  00500A     |   6 LESS       000927 R   |     LF      =  00000A 
  6 LINK    =  002FAA R   |   6 LITER      001686 R   |   6 LOCAL      000555 R
  6 LOCK       001EC9 R   |   6 LSCALE     0029A4 R   |   6 LSHIFT     000BC1 R
  6 LSHIFT1    000BCA R   |   6 LSHIFT4    000BD2 R   |   6 LT1        000932 R
    MASKK   =  001F7F     |   6 MAX        00096C R   |   6 MAX1       000976 R
    MAX_MANT=  007FFF     |   6 MIN        000980 R   |   6 MIN1       00098A R
  6 MMOD1      000A39 R   |   6 MMOD2      000A4D R   |   6 MMOD3      000A64 R
  6 MMSM0      0009C9 R   |   6 MMSM1      0009D9 R   |   6 MMSM3      0009DD R
  6 MMSM4      0009E9 R   |   6 MMSMa      0009E4 R   |   6 MMSMb      0009EF R
  6 MODD       000ABF R   |   6 MONE       000C28 R   |   6 MPLUS      002C53 R
    MS      =  000030     |   6 MSEC       0002D1 R   |   6 MSIGN      0026F2 R
  6 MSMOD      000A1C R   |   6 MSTA1      000B50 R   |   6 MSTAR      000B2D R
    NAFR    =  004804     |   6 NAMEQ      0013D8 R   |   6 NAMET      0012E9 R
    NCLKOPT =  004808     |   6 NEGAT      000887 R   |   6 NEG_SIGN   002839 R
  6 NEX1       000491 R   |   6 NEXT       0016BD R   |     NFLASH_W=  00480E 
    NHSECNT =  00480A     |     NOPT1   =  004802     |     NOPT2   =  004804 
    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPT6   =  00480C     |     NOPT7   =  00480E     |     NOPTBL  =  00487F 
  6 NRAT       0005A0 R   |   6 NRDROP     00057C R   |   6 NROT       0007FD R
  6 NRSTO      0005BF R   |   6 NTIB       00070E R   |     NUBC    =  004802 
    NUCLEO  =  000001     |   6 NUFQ       001017 R   |   6 NUFQ1      001030 R
  6 NUMBQ      000F62 R   |   6 NUMQ1      000F96 R   |   6 NUMQ3      000FDA R
  6 NUMQ4      000FE4 R   |   6 NUMQ6      000FEC R   |   6 NUMQ9      000FF2 R
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   6 NonHandl   000000 R
  6 OFFSET     0007B4 R   |     OFS     =  000005     |   6 ONE        000C1A R
  6 ONEM       000BB0 R   |   6 ONEP       000BA3 R   |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTIMIZE=  000001     |     OPTION_B=  004800     |     OPTION_E=  00487F 
    OPTION_S=  000080     |   6 ORIG       000049 R   |   6 ORR        00068B R
  6 OUTPUT     00043C R   |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |   6 OVER       000642 R
  6 OVERT      0018B4 R   |     PA      =  000000     |   6 PACKS      000DBA R
  6 PAD        000CFA R   |   6 PAREN      001258 R   |   6 PARS       001151 R
  6 PARS1      00117C R   |   6 PARS2      0011A7 R   |   6 PARS3      0011AA R
  6 PARS4      0011B3 R   |   6 PARS5      0011D6 R   |   6 PARS6      0011EB R
  6 PARS7      0011FA R   |   6 PARS8      001209 R   |   6 PARSE      00121A R
  6 PARSEXP_   00289D R   |   6 PAUSE      0002E1 R   |     PA_BASE =  005000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]

Symbol Table

    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_BASE =  005005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_BASE =  00500A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |   6 PDUM1      001B28 R
  6 PDUM2      001B39 R   |     PD_BASE =  00500F     |     PD_CR1  =  005012 
    PD_CR2  =  005013     |     PD_DDR  =  005011     |     PD_IDR  =  005010 
    PD_ODR  =  00500F     |     PE      =  000014     |     PE_BASE =  005014 
    PE_CR1  =  005017     |     PE_CR2  =  005018     |     PE_DDR  =  005016 
    PE_IDR  =  005015     |     PE_ODR  =  005014     |     PF      =  000019 
    PF_BASE =  005019     |     PF_CR1  =  00501C     |     PF_CR2  =  00501D 
    PF_DDR  =  00501B     |     PF_IDR  =  00501A     |     PF_ODR  =  005019 
    PG      =  00001E     |     PG_BASE =  00501E     |     PG_CR1  =  005021 
    PG_CR2  =  005022     |     PG_DDR  =  005020     |     PG_IDR  =  00501F 
    PG_ODR  =  00501E     |     PH      =  000023     |     PH_BASE =  005023 
    PH_CR1  =  005026     |     PH_CR2  =  005027     |     PH_DDR  =  005025 
    PH_IDR  =  005024     |     PH_ODR  =  005023     |     PI      =  000028 
  6 PICK       000C68 R   |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   6 PLUS       00083D R   |   6 PNAM1      001853 R
  6 PRESE      0015C9 R   |   6 PRINT_VE   001C77 R   |     PROD1   =  000024 
    PROD2   =  000026     |     PROD3   =  000028     |   6 PROTECTE   000201 R
  6 PRT_LICE   001C63 R   |   6 PSTOR      000C7F R   |     PTR16   =  000035 
    PTR8    =  000036     |   6 PTRPLUS    001EF5 R   |   6 QBRAN      000499 R
  6 QDUP       0007CD R   |   6 QDUP1      0007D7 R   |   6 QKEY       000419 R
  6 QSTAC      001584 R   |   6 QUERY      0014B0 R   |   6 QUEST      001144 R
  6 QUIT       0015E6 R   |   6 QUIT1      0015EE R   |   6 QUIT2      0015F1 R
  6 RAM2EE     002330 R   |     RAMBASE =  000000     |   6 RAMLAST    0007A2 R
    RAM_BASE=  000000     |     RAM_END =  0017FF     |     RAM_SIZE=  001800 
  6 RANDOM     00027F R   |   6 RAT        000546 R   |   6 RBRAC      001928 R
  6 REPEA      00179A R   |   6 RFREE      002317 R   |   6 RFROM      000535 R
    ROP     =  004800     |   6 ROT        0007DE R   |   6 ROW2BUF    0022D9 R
    ROWBUFF =  001680     |     RP0     =  00002E     |   6 RPAT       000512 R
    RPP     =  0017FF     |   6 RPSTO      00051F R   |   6 RSCALE     0029C2 R
  6 RSHIFT     000BDD R   |   6 RSHIFT1    000BE6 R   |   6 RSHIFT4    000BEE R
    RST_SR  =  0050B3     |   6 SAME1      001307 R   |   6 SAME2      001330 R
  6 SAMEQ      0012FF R   |   6 SCAL1      002D26 R   |   6 SCAL2      002D41 R
  6 SCAL3      002D60 R   |   6 SCAL4      002D76 R   |   6 SCALDN2    002B4B R
  6 SCALDN3    002B4E R   |   6 SCALEDOW   002B22 R   |   6 SCALETOM   002D1C R
  6 SCALEUP    002AF0 R   |   6 SCALEUP2   002B1E R   |   6 SCALEUP3   002B21 R
  6 SCOM1      001888 R   |   6 SCOM2      00188B R   |   6 SCOMP      00186A R
  6 SEED       000266 R   |     SEEDX   =  000038     |     SEEDY   =  00003A 
  6 SEMIS      0018C4 R   |   6 SETISP     0000D0 R   |   6 SET_FPSW   00264D R
  6 SET_RAML   001A68 R   |   6 SFN        0026AC R   |     SFR_BASE=  005000 
    SFR_END =  0057FF     |   6 SFV        0026D8 R   |   6 SFZ        00267D R
  6 SIGN       000E66 R   |   6 SIGN1      000E76 R   |   6 SLASH      000AC9 R
  6 SLMOD      000A6C R   |   6 SLMOD1     000AA9 R   |   6 SLMOD8     000AB6 R
  6 SNAME      00181D R   |     SP0     =  00002C     |   6 SPACE      001039 R
  6 SPACS      001048 R   |   6 SPAT       0005FA R   |     SPI_CR1 =  005200 
    SPI_CR2 =  005201     |     SPI_CRCP=  005205     |     SPI_DR  =  005204 
    SPI_ICR =  005202     |     SPI_RXCR=  005206     |     SPI_SR  =  005203 
    SPI_TXCR=  005207     |     SPP     =  001680     |     SPSAVE  =  000001 
  6 SPSTO      000607 R   |   6 SSMOD      000B59 R   |     SSP     =  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]

Symbol Table

    STACK   =  0017FF     |   6 STAR       000B22 R   |   6 STASL      000B6A R
  6 STOD       0008BC R   |   6 STOF       002E75 R   |   6 STORE      0004D2 R
  6 STO_SIGN   002851 R   |   6 STR        000E94 R   |   6 STRCQ      00168E R
  6 STRQ       0017DC R   |   6 STRQP      0010A5 R   |   6 SUBB       0008D3 R
  6 SWAPP      00062A R   |     SWIM_CSR=  007F80     |   6 TAP        00141A R
  6 TBOOT      001CE5 R   |   6 TBRAN      0004A7 R   |   6 TBUF       00071E R
    TBUFFBAS=  001680     |   6 TCHAR      000C39 R   |   6 TEMP       0006EF R
  6 TEVAL      000741 R   |   6 TFLASH     000730 R   |   6 THENN      00172C R
  6 TIB        000D0B R   |     TIBB    =  001700     |     TIBBASE =  001700 
    TIC     =  000027     |   6 TICK       0015FD R   |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]

Symbol Table

    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  000000     |     TIM2_CCE=  000001     |     TIM2_CCE=  000004 
    TIM2_CCE=  000005     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCM=  000000 
    TIM2_CCM=  000004     |     TIM2_CCM=  000003     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_CR1=  000007 
    TIM2_CR1=  000000     |     TIM2_CR1=  000003     |     TIM2_CR1=  000001 
    TIM2_CR1=  000002     |     TIM2_EGR=  005304     |     TIM2_EGR=  000001 
    TIM2_EGR=  000002     |     TIM2_EGR=  000003     |     TIM2_EGR=  000006 
    TIM2_EGR=  000000     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
    TIM4_SR =  005342     |     TIM4_SR_=  000000     |   6 TIMEOUTQ   000311 R
  6 TIMER      0002FB R   |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
  6 TNAM2      001BBE R   |   6 TNAM3      001BDC R   |   6 TNAM4      001BE2 R
  6 TNAME      001BBB R   |   6 TOFLASH    000336 R   |   6 TOKEN      0012DB R
  6 TOR        0005E3 R   |   6 TORAM      000376 R   |   6 TRUE       000858 R
    TRUEE   =  00FFFF     |   6 TWOSL      000BF5 R   |   6 TYPE1      001068 R
  6 TYPE2      00106E R   |   6 TYPES      001063 R   |   6 Timer4Ha   000005 R
    UART1   =  000000     |     UART1_BA=  005230     |     UART1_BR=  005232 
    UART1_BR=  005233     |     UART1_CR=  005234     |     UART1_CR=  005235 
    UART1_CR=  005236     |     UART1_CR=  005237     |     UART1_CR=  005238 
    UART1_DR=  005231     |     UART1_GT=  005239     |     UART1_PO=  000000 
    UART1_PS=  00523A     |     UART1_RX=  000004     |     UART1_SR=  005230 
    UART1_TX=  000005     |     UART3   =  000001     |     UART3_BA=  005240 
    UART3_BR=  005242     |     UART3_BR=  005243     |     UART3_CR=  005244 
    UART3_CR=  005245     |     UART3_CR=  005246     |     UART3_CR=  005247 
    UART3_CR=  004249     |     UART3_DR=  005241     |     UART3_PO=  00000F 
    UART3_RX=  000006     |     UART3_SR=  005240     |     UART3_TX=  000005 
    UART_BRR=  005232     |     UART_BRR=  005233     |     UART_CR1=  005234 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  005235 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]

Symbol Table

    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000006 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000007     |     UART_CR4=  000000 
    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000008     |     UART_CR5=  000003     |     UART_CR5=  000001 
    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_CR6=  000009     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DR =  005231     |     UART_GTR=  000009 
    UART_PSC=  00000A     |     UART_SR =  005230     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBASE   =  000006     |     UBC     =  004801 
    UCNTXT  =  000016     |     UCP     =  00001A     |     UCTIB   =  00000E 
    UD1     =  000001     |     UD2     =  000002     |     UD3     =  000003 
    UD4     =  000004     |   6 UDOT       0010F2 R   |   6 UDOTR      0010D2 R
  6 UEND       000047 R   |     UFPSW   =  000008     |   6 UGREAT     00093E R
  6 UGREAT1    000949 R   |     UHLD    =  000014     |     UINN    =  00000C 
    UINTER  =  000012     |     ULAST   =  00001C     |   6 ULES1      00091C R
  6 ULESS      000911 R   |   6 UMMOD      0009B2 R   |   6 UMSTA      000AD8 R
  6 UNIQ1      00181A R   |   6 UNIQU      0017FB R   |   6 UNLKEE     001E63 R
  6 UNLKFL     001E82 R   |   6 UNLOCK     001EA1 R   |   6 UNTIL      0016F1 R
    UOFFSET =  00001E     |   6 UPDATCP    001E20 R   |   6 UPDATLAS   001DF7 R
  6 UPDATPTR   002423 R   |   6 UPDATRUN   001E0F R   |   6 UPDATVP    001E37 R
  6 UPL1       0006CC R   |   6 UPLUS      0006B5 R   |     UPP     =  000006 
  6 UPPER      00129E R   |   6 UPPER1     0012C1 R   |   6 UPPER2     0012CA R
    URLAST  =  000022     |   6 USLMOD     000A01 R   |     USR_BTN_=  000004 
    USR_BTN_=  000010     |     USR_BTN_=  005015     |     UTFLASH =  000020 
    UTIB    =  000010     |     UTMP    =  00000A     |   6 UTYP1      001AF8 R
  6 UTYP2      001B07 R   |   6 UTYPE      001AF3 R   |     UVP     =  000018 
  6 UZERO      00002B R   |   6 VARIA      001A35 R   |     VAR_BASE=  000080 
    VAR_TOP =  0017BF     |     VER     =  000004     |   6 VPP        000771 R
    VSIZE   =  000006     |     WANT_CON=  000001     |     WANT_DEB=  000000 
    WANT_DOU=  000000     |     WANT_FLO=  000000     |     WANT_FLO=  000001 
    WANT_SCA=  000000     |     WANT_SEE=  000000     |     WDGOPT  =  004805 
    WDGOPT_I=  000002     |     WDGOPT_L=  000003     |     WDGOPT_W=  000000 
    WDGOPT_W=  000001     |   6 WHILE      001780 R   |   6 WITHI      000997 R
  6 WORDD      001284 R   |   6 WORDS      001C18 R   |   6 WORS1      001C1E R
  6 WORS2      001C3A R   |   6 WR_BYTE    001F4C R   |   6 WR_WORD    001F71 R
  6 WTABLE     0024CA R   |   6 WTAT       0024EE R   |   6 WTINIT     002533 R
    WWDG_CR =  0050D1     |     WWDG_WR =  0050D2     |     XMEM_SIZ=  017830 
    XOFF    =  000013     |     XON     =  000011     |   6 XORR       0006A0 R
    XTEMP   =  000024     |     YTEMP   =  000026     |     YTMP    =  000003 
  6 ZEQU1      00066D R   |   6 ZEQUAL     000663 R   |   6 ZERO       000C0F R
  6 ZL1        00065A R   |   6 ZLESS      000651 R   |   6 app_spac   003000 R
  6 baudrate   00037C R   |   6 block_er   002037 R   |   6 clear_ra   000019 R
  6 clock_in   000064 R   |   6 copy_buf   002097 R   |   6 copy_buf   0020B6 R
  6 copy_pro   0020B6 R   |     da      =  000002     |     db      =  000003 
    dc      =  000000     |     dd      =  000001     |   6 dof24lit   0029F2 R
  6 erase_fl   002059 R   |   6 fmove_do   00240C R   |   6 main       000016 R
  6 next_row   0023C9 R   |   6 no_move    002413 R   |   6 nsign      002828 R
  6 parse_di   000F15 R   |   6 parse_ex   002855 R   |   6 pristine   002137 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]

Symbol Table

  6 proceed_   00205C R   |   6 reboot     000328 R   |   6 reset_ve   00219E R
  6 row_eras   002017 R   |   6 row_eras   002070 R   |   6 row_eras   002097 R
  6 set_opti   00210B R   |   6 set_vect   00223F R   |   6 uart_ini   000076 R
  6 write_ro   0020DB R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   3000   flags    0

