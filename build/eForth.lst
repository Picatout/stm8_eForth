ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;-------------------------------------------------------------
                                     21 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                     22 ;  assemble using sdasstm8
                                     23 ;  implemented on NUCLEO-8S208RB board
                                     24 ;  Adapted by picatout 2019/10/27
                                     25 ;  https://github.com/picatout/stm8_nucleo/eForth
                                     26 ;--------------------------------------------------------------
                                     27 	.module EFORTH
                                     28          .optsdcc -mstm8
                                                .include "inc/macros.inc" 
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        
                                            ; macro to create dictionary header record
                                            .macro _HEADER label,len,name 
                                        
                                            ; runtime literal 
                                            .macro _DOLIT value 
                                        
                                            ; branch if TOS<>0
                                            ; TBRANCH 
                                            .macro _TBRAN target 
                                            
                                            ; branch if TOS==0 
                                            ; 0BRANCH 
                                            .macro _QBRAN target 
                                        
                                            ; uncondittionnal BRANCH 
                                            .macro _BRAN target 
                                        
                                            ; run time NEXT 
                                            .macro _DONXT target 
                                        
                                            ; drop TOS 
                                            .macro _DROP 
                                          
                                           ; drop a double 
                                           .macro _DDROP 
                                        
                                                .include "inc/config.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        
                                        ; constants to select board
                                        ; to assemble for a specific 
                                        ; board or MCU set it to 1 and the other
                                        ; to 0. 
                                 
                                 
                                 
                                        
                                        ; select end of line character
                                 
                                 
                                        
                                        ; set to 1 to include 
                                        ; scaling constants vocabulary
                                        ; see: const_ratio.asm 
                                 
                                        
                                        ; set to 1 to include 
                                        ; constants tables vocabulary 
                                        ; see: ctable.asm 
                                 
                                        
                                        ; include double library 
                                 
                                        
                                        ; to include floating point 
                                        ; library
                                        ; require double library  
                                 
                                        
                                        ; set to 1 to make vocabulary 
                                        ; case sensitive 
                                 
                                        
                                        ; how many bytes are reserved 
                                        ; by system at EEPROM base.
                                 
                                        
                                 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        .endif
                                        
                                 
                                        	.include "inc/stm8s105.inc"
                                        .if DISCOVERY
                                        	.include "inc/stm8s_disco.inc"
                                        .endif 
                                        XMEM_SIZE=0 ; size in bytes of EXTENDED MEMORY 
                                        UART_SR=UART2_SR
                                        UART_DR=UART2_DR
                                        UART_BRR1=UART2_BRR1
                                        UART_BRR2=UART2_BRR2
                                        UART_CR1=UART2_CR1
                                        UART_CR2=UART2_CR2
                                        .endif 
                                        
                                        	
                                         
                                        
                                        
                                        
                                     32 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     34 
                                     35 ;===============================================================
                                     36 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     37 ;  Date: 2020-06-07 
                                     38 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     39 ;  Date: 2019-10-26
                                     40 ;  Changes to memory map:
                                     41 ;       0x16f0  Data Stack, growing downward
                                     42 ;       0x1700  Terminal input buffer TIB
                                     43 ;       0x17ff  Return Stack, growing downard
                                     44 ;================================================================
                                     45 ;       STM8EF, Version 2.1, 13 July
                                     46 ;               Implemented on STM8S-Discovery Board.
                                     47 ;               Assembled by ST VisualDevelop STVD 
                                     48 ;               Bootup on internal 2 MHz clock
                                     49 ;               Switch to external 16 MHz crystal clock
                                     50 ;
                                     51 ; FORTH Virtual Machine:
                                     52 ; Subroutine threaded model
                                     53 ; SP Return stack pointer
                                     54 ; X Data stack pointer
                                     55 ; A,Y Scratch pad registers
                                     56 ;
                                     57 ; Memory Map:
                                     58 ; 0x0 RAM memory, system variables
                                     59 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     60 ; 0x780 Data stack, growing downward
                                     61 ; 0x790 Terminal input buffer TIB
                                     62 ; 0x7FF Return stack, growing downward
                                     63 ; 0x8000 Interrupt vector table
                                     64 ; 0x8080 FORTH startup code
                                     65 ; 0x80E7 Start of FORTH dictionary in ROM
                                     66 ; 0x9584 End of FORTH dictionary
                                     67 ;
                                     68 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     69 ;                  use UART1 instead of UART2 for communication with user.
                                     70 ;                  UART1 is available as ttyACM* device via USB connection.
                                     71 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     72 ;                  and MSEC word that return MS value.
                                     73 ;
                                     74 ;       EF12, Version 2.1, 18apr00cht
                                     75 ;               move to 8000H replacing WHYP.
                                     76 ;               copy interrupt vectors from WHYPFLSH.S19
                                     77 ;               to EF12.S19 before flashing
                                     78 ;               add TICKS1 and DELAY1 for motor stepping
                                     79 ;
                                     80 ;       EF12, 02/18/00, C. H. Ting
                                     81 ;       Adapt 86eForth v2.02 to 68HC12.
                                     82 ;               Use WHYP to seed EF12.ASM
                                     83 ;               Use AS12 native 68HC12 assembler:
                                     84 ;               as12 ef12.asm >ef12.lst
                                     85 ;       EF12A, add ADC code, 02mar00cht
                                     86 ;       EF12B, 01mar00cht
                                     87 ;               stack to 0x78, return stack to 0xf8.
                                     88 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     89 ;               add PWM registers
                                     90 ;               add SPI registers and code
                                     91 ;       EF12C, 12mar00cht
                                     92 ;               add MAX5250 D/A converter
                                     93 ;       EF12D, 15mar00cht
                                     94 ;               add all the Lexel interface words
                                     95 ;       EF12E, 18apr00cht, save for reference
                                     96 ;
                                     97 ;       Copyright (c) 2000
                                     98 ;       Dr. C. H. Ting
                                     99 ;       156 14th Avenue
                                    100 ;       San Mateo, CA 94402
                                    101 ;       (650) 571-7639
                                    102 ;
                                    103 
                                    104       
                                    105 ;*********************************************************
                                    106 ;	Assembler constants
                                    107 ;*********************************************************
                           000000   108 RAMBASE =	0x0000	   ;ram base
                           000001   109 .if NUCLEO 
                           0017FF   110 STACK   =	0x17FF 	;system (return) stack empty 
                           001680   111 DATSTK  =	0x1680	;data stack  empty
                           001680   112 TBUFFBASE =     0x1680  ; flash read/write transaction buffer address  
                           001700   113 TIBBASE =       0X1700  ; transaction input buffer addr.
                           000000   114 .else ; DISCOVERY
                                    115 STACK   =	0x7FF 	;system (return) stack empty 
                                    116 DATSTK  =	0x680	;data stack  empty
                                    117 TBUFFBASE =     0x680  ; flash read/write transaction buffer address  
                                    118 TIBBASE =       0X700  ; transaction input buffer addr.
                                    119 .endif
                                    120 
                                    121 ;; Memory allocation
                           000006   122 UPP     =     RAMBASE+6          ; systeme variables base address 
                           001680   123 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0017FF   124 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           001680   125 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           001700   126 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   127 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0017BF   128 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    129 
                                    130 ; user variables constants 
                           000006   131 UBASE = UPP       ; numeric base 
                           000008   132 UFPSW = UBASE+2  ; floating point state word 
                           00000A   133 UTMP = UFPSW+2    ; temporary storage
                           00000C   134 UINN = UTMP+2     ; >IN tib pointer 
                           00000E   135 UCTIB = UINN+2    ; tib count 
                           000010   136 UTIB = UCTIB+2    ; tib address 
                           000012   137 UINTER = UTIB+2   ; interpreter vector 
                           000014   138 UHLD = UINTER+2   ; hold 
                           000016   139 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000018   140 UVP = UCNTXT+2    ; variable pointer 
                           00001A   141 UCP = UVP+2      ; code pointer
                           00001C   142 ULAST = UCP+2    ; last dictionary pointer 
                           00001E   143 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000020   144 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
                           000022   145 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    146 
                                    147 ;******  System Variables  ******
                           000024   148 XTEMP	=	URLAST +2;address called by CREATE
                           000026   149 YTEMP	=	XTEMP+2	;address called by CREATE
                           000024   150 PROD1 = XTEMP	;space for UM*
                           000026   151 PROD2 = PROD1+2
                           000028   152 PROD3 = PROD2+2
                           00002A   153 CARRY = PROD3+2
                           00002C   154 SP0	= CARRY+2	;initial data stack pointer
                           00002E   155 RP0	= SP0+2		;initial return stack pointer
                           000030   156 MS    =   RP0+2         ; millisecond counter 
                           000032   157 CNTDWN =  MS+2          ; count down timer 
                           000034   158 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000035   159 PTR16 = FPTR+1          ; middle byte of farptr 
                           000036   160 PTR8 = FPTR+2           ; least byte of farptr 
                           000038   161 SEEDX = PTR8+2          ; PRNG seed X 
                           00003A   162 SEEDY = SEEDX+2         ; PRNG seed Y 
                                    163 
                                    164 ; EEPROM persistant data  
                           004000   165 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   166 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   167 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   168 APP_VP = APP_CP+2  ; free data space pointer 
                                    169 
                                    170 
                                    171 ;***********************************************
                                    172 ;; Version control
                                    173 
                           000004   174 VER     =     4         ;major release version
                           000000   175 EXT     =     0         ;minor extension
                                    176 
                                    177 ;; Constants
                                    178 
                           00FFFF   179 TRUEE   =     0xFFFF      ;true flag
                                    180 
                           000040   181 COMPO   =     0x40     ;lexicon compile only bit
                           000080   182 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   183 MASKK   =     0x1F7F  ;lexicon bit mask
                                    184 
                           000002   185 CELLL   =     2       ;size of a cell
                           00000A   186 BASEE   =     10      ;default radix
                           000008   187 BKSPP   =     8       ;back space
                           00000A   188 LF      =     10      ;line feed
                           00000D   189 CRR     =     13      ;carriage return
                           000011   190 XON     =     17
                           000013   191 XOFF    =     19
                           00001B   192 ERR     =     27      ;error escape
                           000027   193 TIC     =     39      ;tick
                           0000CD   194 CALLL   =     0xCD     ;CALL opcodes
                           000080   195 IRET_CODE =   0x80    ; IRET opcode 
                           00001C   196 ADDWX   =     0x1C    ; opcode for ADDW X,#word  
                                    197         .macro _ledon
                                    198         .if NUCLEO
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    199         bset PC_ODR,#LED2_BIT
                                    200         .else ;DISCOVERY 
                                    201         .if DISCOVERY
                                    202         bres PD_ODR,#LD1_BIT 
                                    203         .endif
                                    204         .endif
                                    205         .endm
                                    206 
                                    207         .macro _ledoff
                                    208         .if NUCLEO 
                                    209         bres PC_ODR,#LED2_BIT
                                    210         .else ;DISCOVERY 
                                    211         .if DISCOVERY
                                    212         bset PD_ODR,#LD1_BIT 
                                    213         .endif 
                                    214         .endif
                                    215         .endm
                                    216 
                                    217 ;**********************************************************
                                    218         .area DATA (ABS)
      000000                        219         .org RAMBASE 
                                    220 ;**********************************************************
                                    221 
                                    222 ;**********************************************************
                                    223         .area SSEG (ABS) ; STACK
      001700                        224         .org 0x1700
      001700                        225         .ds 256 
                                    226 ; space for DATSTK,TIB and STACK         
                                    227 ;**********************************************************
                                    228 
                                    229 ;**********************************************************
                                    230         .area HOME ; vectors table
                                    231 ;**********************************************************
      000000 82 00 00 16            232 	int main	        ; reset
      000004 82 00 00 00            233 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            234 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            235 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            236 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            237 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            238 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            239 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            240 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            241 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            242 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            243 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            244 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            245 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            246 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            247 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            248 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            249 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            250 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            251 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            252 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            253 	int NonHandledInterrupt	; irq19
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      000058 82 00 00 00            254 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            255 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            256 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            257 	int Timer4Handler	; irq23
      000068 82 00 00 00            258 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            259 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            260 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            261 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            262 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            263 	int NonHandledInterrupt	; irq29
                                    264 
                                    265 ;**********************************************************
                                    266         .area CODE
                                    267 ;**********************************************************
                                    268 
                                    269 ; non handled interrupt reset MCU
      000000                        270 NonHandledInterrupt:
      000000 A6 80            [ 1]  271         ld a, #0x80
      000002 C7 50 D1         [ 1]  272         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    273 	;iret
                                    274 
                                    275 ; used for milliseconds counter 
                                    276 ; MS is 16 bits counter 
      000005                        277 Timer4Handler:
      000005 72 5F 53 42      [ 1]  278 	clr TIM4_SR 
      000009 BE 30            [ 2]  279         ldw x,MS 
      00000B 5C               [ 1]  280         incw x 
      00000C BF 30            [ 2]  281         ldw MS,x
      00000E BE 32            [ 2]  282         ldw x,CNTDWN 
      000010 27 03            [ 1]  283         jreq 1$
      000012 5A               [ 2]  284         decw x 
      000013 BF 32            [ 2]  285         ldw CNTDWN,x 
      000015                        286 1$:         
      000015 80               [11]  287         iret 
                                    288 
                                    289 
                                    290 ;; Main entry points and COLD start data
      000016                        291 main:
                                    292 ; clear all RAM
      000016 AE 00 00         [ 2]  293 	ldw X,#RAMBASE
      000019                        294 clear_ram0:
      000019 7F               [ 1]  295 	clr (X)
      00001A 5C               [ 1]  296 	incw X
      00001B A3 17 FF         [ 2]  297 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  298 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  299         ldw x,#RPP
      000023 94               [ 1]  300         ldw sp,x
                                    301 ; set SEEDX and SEEDY to 1 
      000024 3C 39            [ 1]  302         inc SEEDX+1 
      000026 3C 3B            [ 1]  303         inc SEEDY+1          
      000028 CC 00 49         [ 2]  304 	jp ORIG
                                    305 
                                    306 ; COLD initialize these variables.
      00002B                        307 UZERO:
      00002B 00 0A                  308         .word      BASEE   ;BASE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      00002D 00 00                  309         .word      0       ; floating point state 
      00002F 00 00                  310         .word      0       ;tmp
      000031 00 00                  311         .word      0       ;>IN
      000033 00 00                  312         .word      0       ;#TIB
      000035 17 00                  313         .word      TIBB    ;TIB
      000037 14 26                  314         .word      INTER   ;'EVAL
      000039 00 00                  315         .word      0       ;HLD
      00003B 35 80                  316         .word      LASTN  ;CNTXT pointer
      00003D 00 80                  317         .word      VAR_BASE   ;variables free space pointer 
      00003F 36 00                  318         .word      app_space ; FLASH free space pointer 
      000041 35 80                  319         .word      LASTN   ;LAST
      000043 00 00                  320         .word      0        ; OFFSET 
      000045 00 00                  321         .word      0       ; TFLASH
                                    322 ;       .word      0       ; URLAST   
      000047 00 00                  323 UEND:   .word      0
                                    324 
      000049                        325 ORIG:   
                                    326 ; initialize SP
      000049 AE 17 FF         [ 2]  327         LDW     X,#STACK  ;initialize return stack
      00004C 94               [ 1]  328         LDW     SP,X
      00004D BF 2E            [ 2]  329         LDW     RP0,X
      00004F AE 16 80         [ 2]  330         LDW     X,#DATSTK ;initialize data stack
      000052 BF 2C            [ 2]  331         LDW     SP0,X
                           000001   332 .if NUCLEO        
                                    333 ; initialize PC_5 as output to control LED2
                                    334 ; added by Picatout 
      000054 72 1A 50 0D      [ 1]  335         bset PC_CR1,#LED2_BIT
      000058 72 1A 50 0E      [ 1]  336         bset PC_CR2,#LED2_BIT
      00005C 72 1A 50 0C      [ 1]  337         bset PC_DDR,#LED2_BIT
                                    338 .endif 
                           000000   339 .if DISCOVERY
                                    340         bset PD_CR1,#LD1_BIT
                                    341         bset PD_CR2,#LD1_BIT
                                    342         bset PD_DDR,#LD1_BIT 
                                    343 .endif
      000060                        344         _ledoff
                           000001     1         .if NUCLEO 
      000060 72 1B 50 0A      [ 1]    2         bres PC_ODR,#LED2_BIT
                           000000     3         .else ;DISCOVERY 
                                      4         .if DISCOVERY
                                      5         bset PD_ODR,#LD1_BIT 
                                      6         .endif 
                                      7         .endif
                                    345 ; initialize clock to HSI
                                    346 ; no divisor 16Mhz 
                                    347 ; Added by Picatout 
      000064                        348 clock_init:
      000064 72 5F 50 C6      [ 1]  349         clr CLK_CKDIVR
      000068 72 12 50 C5      [ 1]  350 	bset CLK_SWCR,#CLK_SWCR_SWEN
                           000001   351 .if NUCLEO|DOORBELL
      00006C A6 E1            [ 1]  352 	ld a,#CLK_SWR_HSI
                           000000   353 .else ; DISCOVERY as 16Mhz crystal
                                    354 	ld a,#CLK_SWR_HSE
                                    355 .endif 
      00006E C7 50 C4         [ 1]  356 	ld CLK_SWR,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      000071 C1 50 C3         [ 1]  357 1$:	cp a,CLK_CMSR
      000074 26 FB            [ 1]  358 	jrne 1$
                                    359         
                                    360 ; initialize UART, 115200 8N1
      000076                        361 uart_init:
                           000001   362 .if NUCLEO 
      000076 72 14 50 C7      [ 1]  363 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    364 	; configure tx pin
      00007A 72 1A 50 02      [ 1]  365 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      00007E 72 1A 50 03      [ 1]  366 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      000082 72 1A 50 04      [ 1]  367 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    368 	; baud rate 115200 Fmaster=16Mhz  16000000/115200=139=0x8b
                           000000   369 .else ; DISCOVERY use UART2 
                                    370 	bset CLK_PCKENR1,#CLK_PCKENR1_UART2
                                    371 	; configure tx pin
                                    372 	bset PD_DDR,#UART2_TX_PIN ; tx pin
                                    373 	bset PD_CR1,#UART2_TX_PIN ; push-pull output
                                    374 	bset PD_CR2,#UART2_TX_PIN ; fast output
                                    375 .endif
                                    376 ; baud rate 115200 Fmaster=8Mhz  
      000086 35 0B 52 33      [ 1]  377 	mov UART_BRR2,#0x0b ; must be loaded first
      00008A 35 08 52 32      [ 1]  378 	mov UART_BRR1,#0x8
      00008E 35 0C 52 35      [ 1]  379 	mov UART_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    380 ; initialize timer4, used for millisecond interrupt  
      000092 35 07 53 45      [ 1]  381 	mov TIM4_PSCR,#7 ; prescale 128  
      000096 35 7D 53 46      [ 1]  382 	mov TIM4_ARR,#125 ; set for 1msec.
      00009A 35 05 53 40      [ 1]  383 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      00009E 72 10 53 41      [ 1]  384 	bset TIM4_IER,#TIM4_IER_UIE 
                                    385 ; set TIM4 interrupt priority to highest
      0000A2 A6 3F            [ 1]  386         ld a,#~(IPR_MASK<<6)
      0000A4 C4 7F 75         [ 1]  387         and a,ITC_SPR6
      0000A7 AA C0            [ 1]  388         or a,#(IPR3<<6)
      0000A9 C7 7F 75         [ 1]  389         ld ITC_SPR6,a 
      0000AC 9A               [ 1]  390         rim
      0000AD CC 1B DC         [ 2]  391         jp  COLD   ;default=MN1
                                    392 
                           000000   393         LINK=0 
                                    394 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;        
                                    395 ;; place MCU in sleep mode with
                                    396 ;; halt opcode 
                                    397 ;; BYE ( -- )
                                    398 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000B0                        399         _HEADER BYE,3,"BYE"
      0000B0 00 00                    1         .word LINK 
                           0000B2     2         LINK=.
      0000B2 03                       3         .byte 3  
      0000B3 42 59 45                 4         .ascii "BYE"
      0000B6                          5         BYE:
      0000B6 8E               [10]  400         halt 
      0000B7 81               [ 4]  401         ret 
                                    402 
                                    403 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    404 ; Enable interrupts 
                                    405 ; EI ( -- )
                                    406 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      0000B8                        407         _HEADER EI,2,"EI"
      0000B8 00 B2                    1         .word LINK 
                           0000BA     2         LINK=.
      0000BA 02                       3         .byte 2  
      0000BB 45 49                    4         .ascii "EI"
      0000BD                          5         EI:
      0000BD 9A               [ 1]  408         rim 
      0000BE 81               [ 4]  409         ret 
                                    410 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    411 ; Disable interrupts
                                    412 ; DI ( -- )
                                    413 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000BF                        414         _HEADER DI,2,"DI"
      0000BF 00 BA                    1         .word LINK 
                           0000C1     2         LINK=.
      0000C1 02                       3         .byte 2  
      0000C2 44 49                    4         .ascii "DI"
      0000C4                          5         DI:
      0000C4 9B               [ 1]  415         sim 
      0000C5 81               [ 4]  416         ret 
                                    417 
                                    418 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    419 ; set interrupt priority level 
                                    420 ; SET-ISP ( n1 n2 -- )
                                    421 ; n1 level {1..3}
                                    422 ; n2 vector {0..29}
                                    423 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000C6                        424         _HEADER SETISP,7,"SET-ISP"
      0000C6 00 C1                    1         .word LINK 
                           0000C8     2         LINK=.
      0000C8 07                       3         .byte 7  
      0000C9 53 45 54 2D 49 53 50     4         .ascii "SET-ISP"
      0000D0                          5         SETISP:
      0000D0 90 93            [ 1]  425         ldw y,x 
      0000D2 90 FE            [ 2]  426         ldw y,(y)
      0000D4 A6 04            [ 1]  427         ld a,#4 ; 4 slot per register 
                                    428 ;  quotient select register, remainder select slot in register.        
      0000D6 90 62            [ 2]  429         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000D8 A4 03            [ 1]  430         and a,#3 
      0000DA 48               [ 1]  431         sll a ; 2*SLOT  lshift 
      0000DB 72 A9 7F 70      [ 2]  432         addw y,#ITC_SPR1 
      0000DF FF               [ 2]  433         ldw (x),y  ; ( level reg -- )
      0000E0 90 5F            [ 1]  434         clrw y 
      0000E2 90 97            [ 1]  435         ld yl,a 
      0000E4 1D 00 02         [ 2]  436         subw x,#CELLL 
      0000E7 FF               [ 2]  437         ldw (x),y  ; ( level reg lshift -- )
      0000E8 90 93            [ 1]  438         ldw y,x 
      0000EA 90 EE 02         [ 2]  439         ldw y,(2,y) 
      0000ED 90 F6            [ 1]  440         ld a,(y)   ; reg_value
      0000EF 1D 00 02         [ 2]  441         subw x,#CELLL 
      0000F2 FF               [ 2]  442         ldw (x),y ; ( level reg lshift rval -- )
      0000F3 CD 06 41         [ 4]  443         call OVER ; ( level reg lshift rval lshift -- )
      0000F6 CD 04 6F         [ 4]  444         call DOLIT 
      0000F9 00 03                  445         .word 3
      0000FB CD 06 29         [ 4]  446         call SWAPP  ; ( level reg lshift rval 3 lshift )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      0000FE CD 0B B5         [ 4]  447         call LSHIFT ; creat slot mask 
      000101 CD 08 75         [ 4]  448         call INVER  ; ( level reg lshift rval mask )
      000104 CD 06 76         [ 4]  449         call ANDD ; ( level reg lshift slot_masked )
      000107 CD 05 E2         [ 4]  450         call TOR  ; ( level reg lshift -- R: slot_masked )
      00010A CD 07 DD         [ 4]  451         call ROT  ; ( reg lshift level )
      00010D CD 06 29         [ 4]  452         call SWAPP ; ( reg level lshift )
      000110 CD 0B B5         [ 4]  453         call LSHIFT  ; ( reg slot_level -- )
      000113 CD 05 34         [ 4]  454         call RFROM ; ( reg slot_level masked_val )
      000116 CD 06 8A         [ 4]  455         call ORR   ; ( reg updated_rval )
      000119 CD 06 29         [ 4]  456         call SWAPP 
      00011C CD 04 F0         [ 4]  457         call CSTOR
                                    458 
                                    459 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    460 ; sélectionne l'application 
                                    461 ; qui démarre automatique lors 
                                    462 ; d'un COLD start 
                                    463 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00011F                        464         _HEADER AUTORUN,7,"AUTORUN"
      00011F 00 C8                    1         .word LINK 
                           000121     2         LINK=.
      000121 07                       3         .byte 7  
      000122 41 55 54 4F 52 55 4E     4         .ascii "AUTORUN"
      000129                          5         AUTORUN:
      000129 CD 11 EB         [ 4]  465         call TOKEN 
      00012C CD 06 19         [ 4]  466         call DUPP 
      00012F CD 04 98         [ 4]  467         call QBRAN 
      000132 02 0F                  468         .word FORGET2
      000134 CD 12 E8         [ 4]  469         call NAMEQ
      000137 CD 07 CC         [ 4]  470         call QDUP 
      00013A CD 04 98         [ 4]  471         call QBRAN 
      00013D 02 0F                  472         .word FORGET2
      00013F                        473         _DROP 
      00013F 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      000142 1D 00 04         [ 2]  474         subw x,#2*CELLL 
      000145 90 5F            [ 1]  475         clrw y 
      000147 FF               [ 2]  476         ldw (x),y 
      000148 90 AE 40 02      [ 2]  477         ldw y,#APP_RUN 
      00014C EF 02            [ 2]  478         ldw (2,x),y 
      00014E CC 1E D8         [ 2]  479         jp EESTORE 
                                    480 
                                    481 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    482 ;; Reset dictionary pointer before 
                                    483 ;; forgotten word. RAM space and 
                                    484 ;; interrupt vector defined after 
                                    485 ;; must be resetted also.
                                    486 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000151                        487         _HEADER FORGET,6,"FORGET"
      000151 01 21                    1         .word LINK 
                           000153     2         LINK=.
      000153 06                       3         .byte 6  
      000154 46 4F 52 47 45 54        4         .ascii "FORGET"
      00015A                          5         FORGET:
      00015A CD 11 EB         [ 4]  488         call TOKEN
      00015D CD 06 19         [ 4]  489         call DUPP 
      000160 CD 04 98         [ 4]  490         call QBRAN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      000163 02 0F                  491         .word FORGET2
      000165 CD 12 E8         [ 4]  492         call NAMEQ ; ( a -- ca na | a F )
      000168 CD 07 CC         [ 4]  493         call QDUP 
      00016B CD 04 98         [ 4]  494         call QBRAN 
      00016E 02 0F                  495         .word FORGET2
                                    496 ; only forget users words 
      000170 CD 06 19         [ 4]  497         call DUPP ; ( ca na na )
      000173 CD 04 6F         [ 4]  498         call DOLIT 
      000176 36 00                  499         .word app_space 
      000178 CD 06 29         [ 4]  500         call SWAPP 
      00017B CD 09 10         [ 4]  501         call  ULESS 
      00017E CD 04 98         [ 4]  502         call QBRAN 
      000181 01 D1                  503         .word FORGET6 
                                    504 ; ( ca na -- )        
                                    505 ;reset ivec with address >= ca
      000183 CD 06 29         [ 4]  506         call SWAPP ; ( na ca -- ) 
      000186 CD 20 DB         [ 4]  507         call CHKIVEC ; ( na -- ) 
                                    508 ; start at LAST and link back to na 
                                    509 ; if variable found reset VP at that point.
      000189                        510 FORGET1:
      000189 CD 07 8E         [ 4]  511         call LAST 
      00018C CD 04 E3         [ 4]  512         call AT 
      00018F CD 06 19         [ 4]  513         call DUPP  ; ( -- na last last )
      000192 CD 02 25         [ 4]  514         call FREEVAR ; ( -- na last )
      000195 CD 06 19         [ 4]  515         call DUPP 
      000198 CD 04 6F         [ 4]  516         call DOLIT 
      00019B 00 02                  517         .word 2 
      00019D CD 08 D2         [ 4]  518         call SUBB ; ( na last -- na last lfa ) link address 
      0001A0 CD 04 E3         [ 4]  519         call AT 
      0001A3 CD 06 19         [ 4]  520         call DUPP ; ( -- na last a a )
      0001A6 CD 07 62         [ 4]  521         call CNTXT 
      0001A9 CD 04 D1         [ 4]  522         call STORE
      0001AC CD 07 8E         [ 4]  523         call LAST  
      0001AF CD 04 D1         [ 4]  524         call STORE ; ( --  na last )
      0001B2 CD 06 41         [ 4]  525         call OVER 
      0001B5 CD 08 FA         [ 4]  526         call EQUAL ; ( na last na -- na T|F ) 
      0001B8 CD 04 98         [ 4]  527         call QBRAN 
      0001BB 01 89                  528         .word FORGET1 
                                    529 ; ( na -- )
      0001BD CD 04 6F         [ 4]  530         call DOLIT 
      0001C0 00 02                  531         .word 2 
      0001C2 CD 08 D2         [ 4]  532         call SUBB 
      0001C5 CD 07 7E         [ 4]  533         call CPP 
      0001C8 CD 04 D1         [ 4]  534         call STORE  
      0001CB CD 1D 0B         [ 4]  535         call UPDATCP 
      0001CE CC 1C E2         [ 2]  536         jp UPDATLAST 
      0001D1                        537 FORGET6: ; tried to forget a RAM or system word 
                                    538 ; ( ca na -- )
      0001D1 1D 00 02         [ 2]  539         subw x,#CELLL 
      0001D4 90 BE 2C         [ 2]  540         ldw y,SP0 
      0001D7 FF               [ 2]  541         ldw (x),y  
      0001D8 CD 09 10         [ 4]  542         call ULESS
      0001DB CD 04 98         [ 4]  543         call QBRAN 
      0001DE 02 01                  544         .word PROTECTED 
      0001E0 CD 13 F4         [ 4]  545         call ABORQ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      0001E3 1D                     546         .byte 29
      0001E4 20 46 6F 72 20 52 41   547         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      000201                        548 PROTECTED:
      000201 CD 13 F4         [ 4]  549         call ABORQ
      000204 0A                     550         .byte 10
      000205 20 50 72 6F 74 65 63   551         .ascii " Protected"
             74 65 64
      00020F                        552 FORGET2: ; no name or not found in dictionary 
      00020F CD 13 F4         [ 4]  553         call ABORQ
      000212 05                     554         .byte 5
      000213 20 77 68 61 74         555         .ascii " what"
      000218                        556 FORGET4:
      000218 CC 06 0F         [ 2]  557         jp DROP 
                                    558 
                                    559 
                                    560 ;;;;;;;;;;;;;;;;;;;;;
                                    561 ; if na is variable 
                                    562 ; free variable data  
                                    563 ; FREEVAR ( na -- )
                                    564 ;;;;;;;;;;;;;;;;;;;;;;
      00021B                        565         _HEADER FREEVAR,7,"FREEVAR"
      00021B 01 53                    1         .word LINK 
                           00021D     2         LINK=.
      00021D 07                       3         .byte 7  
      00021E 46 52 45 45 56 41 52     4         .ascii "FREEVAR"
      000225                          5         FREEVAR:
      000225 CD 06 19         [ 4]  566         call DUPP ; ( na na -- )
      000228 CD 05 01         [ 4]  567         CALL CAT  ; ( na c -- )
      00022B CD 0B 97         [ 4]  568         call ONEP ;
      00022E CD 08 3C         [ 4]  569         CALL PLUS ; ( na c+1 -- ca ) 
      000231 CD 0B 97         [ 4]  570         call ONEP ; ( ca+ -- ) to get routne address 
      000234 CD 06 19         [ 4]  571         call DUPP ; ( ca+ ca+ -- )
      000237 CD 04 E3         [ 4]  572         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      00023A CD 04 6F         [ 4]  573         call DOLIT 
      00023D 06 CF                  574         .word DOVAR ; if routine address is DOVAR then variable 
      00023F CD 08 FA         [ 4]  575         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      000242 CD 04 98         [ 4]  576         call QBRAN 
      000245 02 5B                  577         .word FREEVAR4 
      000247 CD 04 6F         [ 4]  578         call DOLIT 
      00024A 00 02                  579         .word 2 
      00024C CD 08 3C         [ 4]  580         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      00024F CD 04 E3         [ 4]  581         call AT 
      000252 CD 07 70         [ 4]  582         call VPP   
      000255 CD 04 D1         [ 4]  583         call STORE 
      000258 CC 1D 22         [ 2]  584         jp UPDATVP 
      00025B                        585 FREEVAR4: ; not variable
      00025B CC 06 0F         [ 2]  586         jp  DROP 
                                    587 
                                    588 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    589 ;    SEED ( n -- )
                                    590 ; Initialize PRNG seed with n 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    591 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00025E                        592         _HEADER SEED,4,"SEED"
      00025E 02 1D                    1         .word LINK 
                           000260     2         LINK=.
      000260 04                       3         .byte 4  
      000261 53 45 45 44              4         .ascii "SEED"
      000265                          5         SEED:
      000265 90 93            [ 1]  593         ldw y,x 
      000267 1C 00 02         [ 2]  594         addw x,#CELLL
      00026A 90 FE            [ 2]  595         ldw y,(y)
      00026C 90 9E            [ 1]  596         ld a,yh 
      00026E B7 38            [ 1]  597         ld SEEDX,a 
      000270 90 9F            [ 1]  598         ld a,yl 
      000272 B7 3A            [ 1]  599         ld SEEDY,a 
      000274 81               [ 4]  600         ret 
                                    601 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    602 ;    RANDOM ( u1 -- u2 )
                                    603 ; Pseudo random number betwen 0 and u1-1
                                    604 ;  XOR32 algorithm 
                                    605 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000275                        606         _HEADER RANDOM,6,"RANDOM"
      000275 02 60                    1         .word LINK 
                           000277     2         LINK=.
      000277 06                       3         .byte 6  
      000278 52 41 4E 44 4F 4D        4         .ascii "RANDOM"
      00027E                          5         RANDOM:
                                    607 ;local variable 
                           000001   608         SPSAVE=1
                           000002   609         VSIZE=2 
      00027E 52 02            [ 2]  610         sub sp,#VSIZE
      000280 1F 01            [ 2]  611         ldw (SPSAVE,sp),x  
                                    612 ; XTEMP=(SEEDX<<5)^SEEDX 
      000282 90 93            [ 1]  613         ldw y,x 
      000284 90 FE            [ 2]  614         ldw y,(y)
      000286 90 BF 26         [ 2]  615         ldw YTEMP,y 
      000289 BE 38            [ 2]  616 	ldw x,SEEDX 
      00028B 58               [ 2]  617 	sllw x 
      00028C 58               [ 2]  618 	sllw x 
      00028D 58               [ 2]  619 	sllw x 
      00028E 58               [ 2]  620 	sllw x 
      00028F 58               [ 2]  621 	sllw x 
      000290 9E               [ 1]  622 	ld a,xh 
      000291 B8 38            [ 1]  623 	xor a,SEEDX 
      000293 B7 24            [ 1]  624 	ld XTEMP,a 
      000295 9F               [ 1]  625 	ld a,xl 
      000296 B8 39            [ 1]  626 	xor a,SEEDX+1 
      000298 B7 25            [ 1]  627 	ld XTEMP+1,a 
                                    628 ; SEEDX=SEEDY 
      00029A BE 3A            [ 2]  629 	ldw x,SEEDY 
      00029C BF 38            [ 2]  630 	ldw SEEDX,x  
                                    631 ; SEEDY=SEEDY^(SEEDY>>1)
      00029E 54               [ 2]  632 	srlw x 
      00029F 9E               [ 1]  633 	ld a,xh 
      0002A0 B8 3A            [ 1]  634 	xor a,SEEDY 
      0002A2 B7 3A            [ 1]  635 	ld SEEDY,a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      0002A4 9F               [ 1]  636 	ld a,xl 
      0002A5 B8 3B            [ 1]  637 	xor a,SEEDY+1 
      0002A7 B7 3B            [ 1]  638 	ld SEEDY+1,a 
                                    639 ; XTEMP>>3 
      0002A9 BE 24            [ 2]  640 	ldw x,XTEMP 
      0002AB 54               [ 2]  641 	srlw x 
      0002AC 54               [ 2]  642 	srlw x 
      0002AD 54               [ 2]  643 	srlw x 
                                    644 ; x=XTEMP^x 
      0002AE 9E               [ 1]  645 	ld a,xh 
      0002AF B8 24            [ 1]  646 	xor a,XTEMP 
      0002B1 95               [ 1]  647 	ld xh,a 
      0002B2 9F               [ 1]  648 	ld a,xl 
      0002B3 B8 25            [ 1]  649 	xor a,XTEMP+1  
      0002B5 97               [ 1]  650 	ld xl,a 
                                    651 ; SEEDY=x^SEEDY 
      0002B6 B8 3B            [ 1]  652 	xor a,SEEDY+1
      0002B8 97               [ 1]  653 	ld xl,a 
      0002B9 9E               [ 1]  654 	ld a,xh 
      0002BA B8 3A            [ 1]  655 	xor a,SEEDY
      0002BC 95               [ 1]  656 	ld xh,a 
      0002BD BF 3A            [ 2]  657 	ldw SEEDY,x 
                                    658 ; return SEEDY modulo YTEMP  
      0002BF 90 BE 26         [ 2]  659 	ldw y,YTEMP  
      0002C2 65               [ 2]  660 	divw x,y 
      0002C3 1E 01            [ 2]  661 	ldw x,(SPSAVE,sp)
      0002C5 FF               [ 2]  662         ldw (x),y 
      0002C6 5B 02            [ 2]  663         addw sp,#VSIZE 
      0002C8 81               [ 4]  664 	ret 
                                    665 
                                    666 
                                    667 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    668 ;; get millisecond counter 
                                    669 ;; msec ( -- u )
                                    670 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002C9                        671         _HEADER MSEC,4,"MSEC"
      0002C9 02 77                    1         .word LINK 
                           0002CB     2         LINK=.
      0002CB 04                       3         .byte 4  
      0002CC 4D 53 45 43              4         .ascii "MSEC"
      0002D0                          5         MSEC:
      0002D0 1D 00 02         [ 2]  672         subw x,#CELLL 
      0002D3 90 BE 30         [ 2]  673         ldw y,MS 
      0002D6 FF               [ 2]  674         ldw (x),y 
      0002D7 81               [ 4]  675         ret 
                                    676 
                                    677 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    678 ; suspend execution for u msec 
                                    679 ;  pause ( u -- )
                                    680 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002D8                        681         _HEADER PAUSE,5,"PAUSE"
      0002D8 02 CB                    1         .word LINK 
                           0002DA     2         LINK=.
      0002DA 05                       3         .byte 5  
      0002DB 50 41 55 53 45           4         .ascii "PAUSE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      0002E0                          5         PAUSE:
      0002E0 90 93            [ 1]  682         ldw y,x
      0002E2 90 FE            [ 2]  683         ldw y,(y)
      0002E4 72 B9 00 30      [ 2]  684         addw y,MS 
      0002E8 8F               [10]  685 1$:     wfi  
      0002E9 90 B3 30         [ 2]  686         cpw y,MS  
      0002EC 26 FA            [ 1]  687         jrne 1$        
      0002EE 1C 00 02         [ 2]  688         addw x,#CELLL 
      0002F1 81               [ 4]  689         ret 
                                    690 
                                    691 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    692 ; initialize count down timer 
                                    693 ;  TIMER ( u -- )  milliseconds
                                    694 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002F2                        695         _HEADER TIMER,5,"TIMER"
      0002F2 02 DA                    1         .word LINK 
                           0002F4     2         LINK=.
      0002F4 05                       3         .byte 5  
      0002F5 54 49 4D 45 52           4         .ascii "TIMER"
      0002FA                          5         TIMER:
      0002FA 90 93            [ 1]  696         ldw y,x
      0002FC 90 FE            [ 2]  697         ldw y,(y) 
      0002FE 90 BF 32         [ 2]  698         ldw CNTDWN,y
      000301 1C 00 02         [ 2]  699         addw x,#CELLL 
      000304 81               [ 4]  700         ret 
                                    701 
                                    702 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    703 ; check for TIMER exiparition 
                                    704 ;  TIMEOUT? ( -- 0|-1 )
                                    705 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000305                        706         _HEADER TIMEOUTQ,8,"TIMEOUT?"
      000305 02 F4                    1         .word LINK 
                           000307     2         LINK=.
      000307 08                       3         .byte 8  
      000308 54 49 4D 45 4F 55 54     4         .ascii "TIMEOUT?"
             3F
      000310                          5         TIMEOUTQ:
      000310 4F               [ 1]  707         clr a
      000311 1D 00 02         [ 2]  708         subw x,#CELLL 
      000314 90 BE 32         [ 2]  709         ldw y,CNTDWN 
      000317 26 01            [ 1]  710         jrne 1$ 
      000319 43               [ 1]  711         cpl a 
      00031A E7 01            [ 1]  712 1$:     ld (1,x),a 
      00031C F7               [ 1]  713         ld (x),a 
      00031D 81               [ 4]  714         ret         
                                    715 
                                    716 ;;;;;;;;;;;;;;;;;;;;;
                                    717 ; reboot MCU 
                                    718 ; REBOOT ( -- )
                                    719 ;;;;;;;;;;;;;;;;;;;;;
      00031E                        720         _HEADER reboot,6,"REBOOT"
      00031E 03 07                    1         .word LINK 
                           000320     2         LINK=.
      000320 06                       3         .byte 6  
      000321 52 45 42 4F 4F 54        4         .ascii "REBOOT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      000327                          5         reboot:
      000327 CC 00 00         [ 2]  721         jp NonHandledInterrupt
                                    722 
                                    723 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    724 ; compile to flash memory 
                                    725 ; TO-FLASH ( -- )
                                    726 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      00032A                        727         _HEADER TOFLASH,8,"TO-FLASH"
      00032A 03 20                    1         .word LINK 
                           00032C     2         LINK=.
      00032C 08                       3         .byte 8  
      00032D 54 4F 2D 46 4C 41 53     4         .ascii "TO-FLASH"
             48
      000335                          5         TOFLASH:
      000335 CD 07 A1         [ 4]  728         call RAMLAST 
      000338 CD 04 E3         [ 4]  729         call AT 
      00033B CD 07 CC         [ 4]  730         call QDUP 
      00033E CD 04 98         [ 4]  731         call QBRAN
      000341 03 64                  732         .word 1$
      000343 CD 13 F4         [ 4]  733         call ABORQ 
      000346 1D                     734         .byte 29
      000347 20 4E 6F 74 20 77 68   735         .ascii " Not while definitions in RAM"   
             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      000364 90 AE FF FF      [ 2]  736 1$:     ldw y,#-1 
      000368 90 BF 20         [ 2]  737         ldw UTFLASH,y
      00036B 81               [ 4]  738         ret 
                                    739 
                                    740 ;;;;;;;;;;;;;;;;;;;;;;
                                    741 ; compile to RAM 
                                    742 ; TO-RAM ( -- )
                                    743 ;;;;;;;;;;;;;;;;;;;;;;
      00036C                        744         _HEADER TORAM,6,"TO-RAM"
      00036C 03 2C                    1         .word LINK 
                           00036E     2         LINK=.
      00036E 06                       3         .byte 6  
      00036F 54 4F 2D 52 41 4D        4         .ascii "TO-RAM"
      000375                          5         TORAM:
      000375 90 5F            [ 1]  745         clrw y 
      000377 90 BF 20         [ 2]  746         ldw UTFLASH,y 
      00037A 81               [ 4]  747         ret 
                                    748 
                                    749 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    750 ;; BAUD RATE constants table
                                    751 ; values to put in BRR1 & BRR2 
                                    752 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00037B                        753 baudrate: 
      00037B A0 1B                  754 	.byte 0xa0,0x1b ; 2400
      00037D D0 05                  755 	.byte 0xd0,0x5  ; 4800 
      00037F 68 03                  756 	.byte 0x68,0x3  ; 9600
      000381 34 01                  757 	.byte 0x34,0x1  ; 19200
      000383 11 06                  758 	.byte 0x11,0x6  ; 57600
      000385 08 0B                  759 	.byte 0x8,0xb   ; 115200
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                                    760 
                                    761 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    762 ; BAUD RATE CONSTANTS names 
                                    763 ; 2400 baud  ( -- n )
                                    764 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000387                        765         _HEADER B2K4,4,"B2K4"
      000387 03 6E                    1         .word LINK 
                           000389     2         LINK=.
      000389 04                       3         .byte 4  
      00038A 42 32 4B 34              4         .ascii "B2K4"
      00038E                          5         B2K4:
      00038E 1D 00 02         [ 2]  766 	subw x,#CELLL 
      000391 90 5F            [ 1]  767         clrw y
      000393 FF               [ 2]  768         ldw (x),y
      000394 81               [ 4]  769 	ret
                                    770 
                                    771 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    772 ; 4800 baud	
                                    773 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000395                        774         _HEADER B4K8,4,"B4K8"
      000395 03 89                    1         .word LINK 
                           000397     2         LINK=.
      000397 04                       3         .byte 4  
      000398 42 34 4B 38              4         .ascii "B4K8"
      00039C                          5         B4K8:
      00039C 1D 00 02         [ 2]  775         subw x,#CELLL 
      00039F 90 AE 00 02      [ 2]  776         ldw y,#2 
      0003A3 FF               [ 2]  777         ldw (x),y
      0003A4 81               [ 4]  778         ret 
                                    779 
                                    780 ;;;;;;;;;;;;;;;;;;;;
                                    781 ; 9600 baud
                                    782 ;;;;;;;;;;;;;;;;;;;;
      0003A5                        783         _HEADER B9K6,4,"B9K6"
      0003A5 03 97                    1         .word LINK 
                           0003A7     2         LINK=.
      0003A7 04                       3         .byte 4  
      0003A8 42 39 4B 36              4         .ascii "B9K6"
      0003AC                          5         B9K6:
      0003AC 1D 00 02         [ 2]  784         subw x,#CELLL 
      0003AF 90 AE 00 04      [ 2]  785         ldw y,#4 
      0003B3 FF               [ 2]  786         ldw (x),y 
      0003B4 81               [ 4]  787         ret 
                                    788 ;;;;;;;;;;;;;;
                                    789 ; 19200 baud
                                    790 ;;;;;;;;;;;;;;
      0003B5                        791         _HEADER B19K2,5,"B19K2"
      0003B5 03 A7                    1         .word LINK 
                           0003B7     2         LINK=.
      0003B7 05                       3         .byte 5  
      0003B8 42 31 39 4B 32           4         .ascii "B19K2"
      0003BD                          5         B19K2:
      0003BD 1D 00 02         [ 2]  792         subw x,#CELLL
      0003C0 90 AE 00 06      [ 2]  793         ldw y,#6 
      0003C4 FF               [ 2]  794         ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      0003C5 81               [ 4]  795         ret 
                                    796 ;;;;;;;;;;;;;;
                                    797 ; 57600 baud  
                                    798 ;;;;;;;;;;;;;;
      0003C6                        799         _HEADER B57K6,5,"B57K6"
      0003C6 03 B7                    1         .word LINK 
                           0003C8     2         LINK=.
      0003C8 05                       3         .byte 5  
      0003C9 42 35 37 4B 36           4         .ascii "B57K6"
      0003CE                          5         B57K6:
      0003CE 1D 00 02         [ 2]  800         subw x,#CELLL 
      0003D1 90 AE 00 08      [ 2]  801         ldw y,#8 
      0003D5 FF               [ 2]  802         ldw (x),y 
      0003D6 81               [ 4]  803         ret 
                                    804 ;;;;;;;;;;;;;;
                                    805 ; 115200 baud 
                                    806 ;;;;;;;;;;;;;;
      0003D7                        807         _HEADER B115K2,6,"B115K2"
      0003D7 03 C8                    1         .word LINK 
                           0003D9     2         LINK=.
      0003D9 06                       3         .byte 6  
      0003DA 42 31 31 35 4B 32        4         .ascii "B115K2"
      0003E0                          5         B115K2:
      0003E0 1D 00 02         [ 2]  808 	subw x,#CELLL 
      0003E3 90 AE 00 0A      [ 2]  809         ldw y,#10 
      0003E7 FF               [ 2]  810         ldw (x),y 
      0003E8 81               [ 4]  811         ret 
                                    812 
                                    813 ;;;;;;;;;;;;;;;;;;;;;;;	
                                    814 ;; set UART2 BAUD rate
                                    815 ;	BAUD ( u -- )
                                    816 ;;;;;;;;;;;;;;;;;;;;;;;
      0003E9                        817         _HEADER BAUD,4,"BAUD"
      0003E9 03 D9                    1         .word LINK 
                           0003EB     2         LINK=.
      0003EB 04                       3         .byte 4  
      0003EC 42 41 55 44              4         .ascii "BAUD"
      0003F0                          5         BAUD:
      0003F0 1D 00 02         [ 2]  818 	subw x,#CELLL
      0003F3 90 AE 03 7B      [ 2]  819         ldw y,#baudrate 
      0003F7 FF               [ 2]  820         ldw (x),y 
      0003F8 CD 08 3C         [ 4]  821         call PLUS
      0003FB 90 93            [ 1]  822         ldw y,x  
      0003FD 90 FE            [ 2]  823         ldw y,(y)
      0003FF 90 F6            [ 1]  824         ld a,(y)
      000401 88               [ 1]  825         push a 
      000402 90 5C            [ 1]  826         incw y 
      000404 90 F6            [ 1]  827         ld a,(y)
      000406 C7 52 33         [ 1]  828         ld UART_BRR2,a 
      000409 84               [ 1]  829         pop a
      00040A C7 52 32         [ 1]  830         ld UART_BRR1,a 
      00040D 1C 00 02         [ 2]  831         addw x,#CELLL 
      000410 81               [ 4]  832         ret 
                                    833 
                                    834 ;; Device dependent I/O
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                                    835 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    836 ;       ?RX     ( -- c T | F )
                                    837 ;         Return input byte and true, or false.
                                    838 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000411                        839         _HEADER QKEY,4,"?KEY"
      000411 03 EB                    1         .word LINK 
                           000413     2         LINK=.
      000413 04                       3         .byte 4  
      000414 3F 4B 45 59              4         .ascii "?KEY"
      000418                          5         QKEY:
      000418 90 5F            [ 1]  840         CLRW Y 
      00041A 72 0B 52 30 0B   [ 2]  841         BTJF UART_SR,#UART_SR_RXNE,INCH   ;check status
      00041F C6 52 31         [ 1]  842         LD    A,UART_DR   ;get char in A
      000422 1D 00 02         [ 2]  843 	SUBW	X,#2
      000425 E7 01            [ 1]  844         LD     (1,X),A
      000427 7F               [ 1]  845 	CLR	(X)
      000428 90 53            [ 2]  846         CPLW     Y
      00042A                        847 INCH:
      00042A 1D 00 02         [ 2]  848 		SUBW	X,#2
      00042D FF               [ 2]  849         LDW     (X),Y
      00042E 81               [ 4]  850         RET
                                    851 
                                    852 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    853 ;       TX!     ( c -- )
                                    854 ;       Send character c to  output device.
                                    855 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00042F                        856         _HEADER EMIT,4,"EMIT"
      00042F 04 13                    1         .word LINK 
                           000431     2         LINK=.
      000431 04                       3         .byte 4  
      000432 45 4D 49 54              4         .ascii "EMIT"
      000436                          5         EMIT:
      000436 E6 01            [ 1]  857         LD     A,(1,X)
      000438 1C 00 02         [ 2]  858 	ADDW	X,#2
      00043B 72 0F 52 30 FB   [ 2]  859 OUTPUT: BTJF UART_SR,#UART_SR_TXE,OUTPUT  ;loop until tx empty 
      000440 C7 52 31         [ 1]  860         LD    UART_DR,A   ;send A
      000443 81               [ 4]  861         RET
                                    862 
                                    863 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    864 ;       FC-XON  ( -- )
                                    865 ;       send XON character 
                                    866 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000444                        867         _HEADER FC_XON,6,"FC-XON"
      000444 04 31                    1         .word LINK 
                           000446     2         LINK=.
      000446 06                       3         .byte 6  
      000447 46 43 2D 58 4F 4E        4         .ascii "FC-XON"
      00044D                          5         FC_XON:
      00044D 1D 00 02         [ 2]  868         subw x,#CELLL 
      000450 7F               [ 1]  869         clr (x)
      000451 A6 11            [ 1]  870         ld a,#XON 
      000453 E7 01            [ 1]  871         ld (1,x),a 
      000455 CD 04 36         [ 4]  872         call EMIT 
      000458 81               [ 4]  873         ret 
                                    874 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                                    875 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    876 ;       FC-XOFF ( -- )
                                    877 ;       Send XOFF character 
                                    878 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000459                        879         _HEADER FC_XOFF,7,"FC-XOFF"
      000459 04 46                    1         .word LINK 
                           00045B     2         LINK=.
      00045B 07                       3         .byte 7  
      00045C 46 43 2D 58 4F 46 46     4         .ascii "FC-XOFF"
      000463                          5         FC_XOFF:
      000463 1D 00 02         [ 2]  880         subw x,#CELLL 
      000466 7F               [ 1]  881         clr (x)
      000467 A6 13            [ 1]  882         ld a,#XOFF 
      000469 E7 01            [ 1]  883         ld (1,x),a 
      00046B CD 04 36         [ 4]  884         call EMIT 
      00046E 81               [ 4]  885         ret
                                    886 
                                    887 ;; The kernel
                                    888 
                                    889 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    890 ;       doLIT   ( -- w )
                                    891 ;       Push an inline literal.
                                    892 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00046F                        893 DOLIT:
      00046F 1D 00 02         [ 2]  894 	SUBW X,#2
      000472 16 01            [ 2]  895         ldw y,(1,sp)
      000474 90 FE            [ 2]  896         ldw y,(y)
      000476 FF               [ 2]  897         ldw (x),y
      000477 90 85            [ 2]  898         popw y 
      000479 90 EC 02         [ 2]  899         jp (2,y)
                                    900 
                                    901 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    902 ;       NEXT    ( -- )
                                    903 ;       Code for  single index loop.
                                    904 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00047C                        905         _HEADER DONXT,COMPO+4,"NEXT"
      00047C 04 5B                    1         .word LINK 
                           00047E     2         LINK=.
      00047E 44                       3         .byte COMPO+4  
      00047F 4E 45 58 54              4         .ascii "NEXT"
      000483                          5         DONXT:
      000483 16 03            [ 2]  906 	LDW Y,(3,SP)
      000485 90 5A            [ 2]  907 	DECW Y
      000487 2A 07            [ 1]  908 	JRPL NEX1 ; jump if N=0
      000489 90 85            [ 2]  909 	POPW Y
      00048B 5B 02            [ 2]  910         addw sp,#2
      00048D 90 EC 02         [ 2]  911         JP (2,Y)
      000490                        912 NEX1:
      000490 17 03            [ 2]  913         LDW (3,SP),Y
      000492 90 85            [ 2]  914         POPW Y
      000494 90 FE            [ 2]  915 	LDW Y,(Y)
      000496 90 FC            [ 2]  916 	JP (Y)
                                    917 
                                    918 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    919 ;       ?branch ( f -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                    920 ;       Branch if flag is zero.
                                    921 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    922 ;       _HEADER QBRAN,COMPO+7,"?BRANCH"        
      000498                        923 QBRAN:	
      000498 90 93            [ 1]  924         LDW Y,X
      00049A 1C 00 02         [ 2]  925 	ADDW X,#2
      00049D 90 FE            [ 2]  926 	LDW Y,(Y)
      00049F 27 13            [ 1]  927         JREQ     BRAN
      0004A1 90 85            [ 2]  928 	POPW Y
      0004A3 90 EC 02         [ 2]  929 	JP (2,Y)
                                    930 
                                    931 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    932 ;  TBRANCH ( f -- )
                                    933 ;  branch if f==TRUE 
                                    934 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    935 ;        _HEADER TBRAN,COMPO+7,"TBRANCH"
      0004A6                        936 TBRAN: 
      0004A6 90 93            [ 1]  937         LDW Y,X 
      0004A8 1C 00 02         [ 2]  938         ADDW X,#2 
      0004AB 90 FE            [ 2]  939         LDW Y,(Y)
      0004AD 26 05            [ 1]  940         JRNE BRAN 
      0004AF 90 85            [ 2]  941         POPW Y 
      0004B1 90 EC 02         [ 2]  942         JP (2,Y)
                                    943 
                                    944 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    945 ;       branch  ( -- )
                                    946 ;       Branch to an inline address.
                                    947 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    948 ;       _HEADER BRAN,COMPO+6,"BRANCH"
      0004B4                        949 BRAN:
      0004B4 90 85            [ 2]  950         POPW Y
      0004B6 90 FE            [ 2]  951 	LDW Y,(Y)
      0004B8 90 FC            [ 2]  952         JP  (Y)
                                    953 
                                    954 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    955 ;       EXECUTE ( ca -- )
                                    956 ;       Execute  word at ca.
                                    957 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004BA                        958         _HEADER EXECU,7,"EXECUTE"
      0004BA 04 7E                    1         .word LINK 
                           0004BC     2         LINK=.
      0004BC 07                       3         .byte 7  
      0004BD 45 58 45 43 55 54 45     4         .ascii "EXECUTE"
      0004C4                          5         EXECU:
      0004C4 90 93            [ 1]  959         LDW Y,X
      0004C6 1C 00 02         [ 2]  960 	ADDW X,#CELLL 
      0004C9 90 FE            [ 2]  961 	LDW  Y,(Y)
      0004CB 90 FC            [ 2]  962         JP   (Y)
                                    963 
                           000001   964 OPTIMIZE = 1
                           000001   965 .if OPTIMIZE 
                                    966 ; remplacement de CALL EXIT par 
                                    967 ; le opcode de RET.
                                    968 ; Voir modification au code de ";"
                           000000   969 .else 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                    970 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    971 ;       EXIT    ( -- )
                                    972 ;       Terminate a colon definition.
                                    973 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    974 ;       _HEADER EXIT,4,"EXIT"
                                    975 EXIT:
                                    976         POPW Y
                                    977         RET
                                    978 .endif 
                                    979 
                                    980 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    981 ;       !       ( w a -- )
                                    982 ;       Pop  data stack to memory.
                                    983 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004CD                        984         _HEADER STORE,1,"!"
      0004CD 04 BC                    1         .word LINK 
                           0004CF     2         LINK=.
      0004CF 01                       3         .byte 1  
      0004D0 21                       4         .ascii "!"
      0004D1                          5         STORE:
      0004D1 90 93            [ 1]  985         LDW Y,X
      0004D3 90 FE            [ 2]  986         LDW Y,(Y)    ;Y=a
      0004D5 89               [ 2]  987         PUSHW X
      0004D6 EE 02            [ 2]  988         LDW X,(2,X) ; x=w 
      0004D8 90 FF            [ 2]  989         LDW (Y),X 
      0004DA 85               [ 2]  990         POPW X  
      0004DB 1C 00 04         [ 2]  991         ADDW X,#4 ; DDROP 
      0004DE 81               [ 4]  992         RET     
                                    993 
                                    994 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    995 ;       @       ( a -- w )
                                    996 ;       Push memory location to stack.
                                    997 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004DF                        998         _HEADER AT,1,"@"
      0004DF 04 CF                    1         .word LINK 
                           0004E1     2         LINK=.
      0004E1 01                       3         .byte 1  
      0004E2 40                       4         .ascii "@"
      0004E3                          5         AT:
      0004E3 90 93            [ 1]  999         LDW Y,X     ;Y = a
      0004E5 90 FE            [ 2] 1000         LDW Y,(Y)   ; address 
      0004E7 90 FE            [ 2] 1001         LDW Y,(Y)   ; value 
      0004E9 FF               [ 2] 1002         LDW (X),Y ;w = @Y
      0004EA 81               [ 4] 1003         RET     
                                   1004 
                                   1005 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1006 ;       C!      ( c b -- )
                                   1007 ;       Pop  data stack to byte memory.
                                   1008 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004EB                       1009         _HEADER CSTOR,2,"C!"
      0004EB 04 E1                    1         .word LINK 
                           0004ED     2         LINK=.
      0004ED 02                       3         .byte 2  
      0004EE 43 21                    4         .ascii "C!"
      0004F0                          5         CSTOR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      0004F0 90 93            [ 1] 1010         LDW Y,X
      0004F2 90 FE            [ 2] 1011 	LDW Y,(Y)    ;Y=b
      0004F4 E6 03            [ 1] 1012         LD A,(3,X)    ;D = c
      0004F6 90 F7            [ 1] 1013         LD  (Y),A     ;store c at b
      0004F8 1C 00 04         [ 2] 1014 	ADDW X,#4 ; DDROP 
      0004FB 81               [ 4] 1015         RET     
                                   1016 
                                   1017 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1018 ;       C@      ( b -- c )
                                   1019 ;       Push byte in memory to  stack.
                                   1020 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004FC                       1021         _HEADER CAT,2,"C@"
      0004FC 04 ED                    1         .word LINK 
                           0004FE     2         LINK=.
      0004FE 02                       3         .byte 2  
      0004FF 43 40                    4         .ascii "C@"
      000501                          5         CAT:
      000501 90 93            [ 1] 1022         LDW Y,X     ;Y=b
      000503 90 FE            [ 2] 1023         LDW Y,(Y)
      000505 90 F6            [ 1] 1024         LD A,(Y)
      000507 E7 01            [ 1] 1025         LD (1,X),A
      000509 7F               [ 1] 1026         CLR (X)
      00050A 81               [ 4] 1027         RET     
                                   1028 
                                   1029 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1030 ;       RP@     ( -- a )
                                   1031 ;       Push current RP to data stack.
                                   1032 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00050B                       1033         _HEADER RPAT,3,"RP@"
      00050B 04 FE                    1         .word LINK 
                           00050D     2         LINK=.
      00050D 03                       3         .byte 3  
      00050E 52 50 40                 4         .ascii "RP@"
      000511                          5         RPAT:
      000511 90 96            [ 1] 1034         LDW Y,SP    ;save return addr
      000513 1D 00 02         [ 2] 1035         SUBW X,#2
      000516 FF               [ 2] 1036         LDW (X),Y
      000517 81               [ 4] 1037         RET     
                                   1038 
                                   1039 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1040 ;       RP!     ( a -- )
                                   1041 ;       Set  return stack pointer.
                                   1042 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000518                       1043         _HEADER RPSTO,COMPO+3,"RP!"
      000518 05 0D                    1         .word LINK 
                           00051A     2         LINK=.
      00051A 43                       3         .byte COMPO+3  
      00051B 52 50 21                 4         .ascii "RP!"
      00051E                          5         RPSTO:
      00051E 90 85            [ 2] 1044         POPW Y
      000520 90 BF 26         [ 2] 1045         LDW YTEMP,Y
      000523 90 93            [ 1] 1046         LDW Y,X
      000525 90 FE            [ 2] 1047         LDW Y,(Y)
      000527 90 94            [ 1] 1048         LDW SP,Y
      000529 1C 00 02         [ 2] 1049         ADDW X,#CELLL ; a was not dropped, Picatout 2020-05-24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      00052C 92 CC 26         [ 5] 1050         JP [YTEMP]
                                   1051 
                                   1052 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1053 ;       R>      ( -- w )
                                   1054 ;       Pop return stack to data stack.
                                   1055 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00052F                       1056         _HEADER RFROM,2,"R>"
      00052F 05 1A                    1         .word LINK 
                           000531     2         LINK=.
      000531 02                       3         .byte 2  
      000532 52 3E                    4         .ascii "R>"
      000534                          5         RFROM:
      000534 1D 00 02         [ 2] 1057         SUBW X,#CELLL 
      000537 16 03            [ 2] 1058         LDW Y,(3,SP)
      000539 FF               [ 2] 1059         LDW (X),Y 
      00053A 90 85            [ 2] 1060         POPW Y 
      00053C 5B 02            [ 2] 1061         ADDW SP,#2 
      00053E 90 FC            [ 2] 1062         JP (Y)
                                   1063 
                                   1064 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1065 ;       R@      ( -- w )
                                   1066 ;       Copy top of return stack to stack.
                                   1067 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000540                       1068         _HEADER RAT,2,"R@"
      000540 05 31                    1         .word LINK 
                           000542     2         LINK=.
      000542 02                       3         .byte 2  
      000543 52 40                    4         .ascii "R@"
      000545                          5         RAT:
      000545 16 03            [ 2] 1069         ldw y,(3,sp)
      000547 1D 00 02         [ 2] 1070         subw x,#CELLL 
      00054A FF               [ 2] 1071         ldw (x),y 
      00054B 81               [ 4] 1072         ret 
                                   1073 
                                   1074 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1075 ;       LOCAL ( n -- )
                                   1076 ;       reserve n slots on return stack
                                   1077 ;       for local variables 
                                   1078 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00054C                       1079         _HEADER LOCAL,5,"LOCAL"
      00054C 05 42                    1         .word LINK 
                           00054E     2         LINK=.
      00054E 05                       3         .byte 5  
      00054F 4C 4F 43 41 4C           4         .ascii "LOCAL"
      000554                          5         LOCAL:
      000554 90 85            [ 2] 1080         POPW Y  
      000556 90 BF 26         [ 2] 1081         LDW YTEMP,Y ; RETURN ADDRESS 
      000559 E6 01            [ 1] 1082         LD A,(1,X)
      00055B 90 97            [ 1] 1083         LD YL,A 
      00055D A6 02            [ 1] 1084         LD A,#CELLL 
      00055F 90 42            [ 4] 1085         MUL Y,A 
      000561 90 BF 24         [ 2] 1086         LDw XTEMP,Y
      000564 90 96            [ 1] 1087         LDW Y,SP 
      000566 72 B2 00 24      [ 2] 1088         SUBW Y,XTEMP
      00056A 90 94            [ 1] 1089         LDW SP,Y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      00056C 1C 00 02         [ 2] 1090         ADDW X,#CELLL 
      00056F 92 CC 26         [ 5] 1091         JP [YTEMP]
                                   1092 
                                   1093 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1094 ;       NRDROP ( n -- )
                                   1095 ;       drop n elements from rstack
                                   1096 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000572                       1097         _HEADER NRDROP,6,"NRDROP" 
      000572 05 4E                    1         .word LINK 
                           000574     2         LINK=.
      000574 06                       3         .byte 6  
      000575 4E 52 44 52 4F 50        4         .ascii "NRDROP"
      00057B                          5         NRDROP:
      00057B 90 85            [ 2] 1098         POPW Y 
      00057D 90 BF 26         [ 2] 1099         LDW YTEMP,Y ; RETURN ADDRESS 
      000580 E6 01            [ 1] 1100         LD A,(1,X)
      000582 90 97            [ 1] 1101         LD YL,A  
      000584 A6 02            [ 1] 1102         LD A,#CELLL 
      000586 90 42            [ 4] 1103         MUL Y,A 
      000588 90 BF 24         [ 2] 1104         LDW XTEMP,Y 
      00058B 90 96            [ 1] 1105         LDW Y,SP 
      00058D 72 B9 00 24      [ 2] 1106         ADDW Y,XTEMP 
      000591 90 94            [ 1] 1107         LDW SP,Y  
      000593 1C 00 02         [ 2] 1108         ADDW X,#CELLL 
      000596 92 CC 26         [ 5] 1109         JP [YTEMP]
                                   1110 
                                   1111 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1112 ;        ( n -- w)
                                   1113 ;      fetch nth element ofr return stack 
                                   1114 ;      n==0 is same as R@ 
                                   1115 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000599                       1116         _HEADER NRAT,3,"NR@"
      000599 05 74                    1         .word LINK 
                           00059B     2         LINK=.
      00059B 03                       3         .byte 3  
      00059C 4E 52 40                 4         .ascii "NR@"
      00059F                          5         NRAT:
      00059F E6 01            [ 1] 1117         LD A,(1,X)
      0005A1 90 97            [ 1] 1118         LD YL,A 
      0005A3 A6 02            [ 1] 1119         LD A,#CELLL 
      0005A5 90 42            [ 4] 1120         MUL Y,A 
      0005A7 90 BF 26         [ 2] 1121         LDW YTEMP,Y 
      0005AA 90 96            [ 1] 1122         LDW Y,SP 
      0005AC 72 A9 00 03      [ 2] 1123         ADDW Y,#3 
      0005B0 72 B9 00 26      [ 2] 1124         ADDW Y,YTEMP 
      0005B4 90 FE            [ 2] 1125         LDW Y,(Y)
      0005B6 FF               [ 2] 1126         LDW (X),Y 
      0005B7 81               [ 4] 1127         RET 
                                   1128 
                                   1129 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1130 ;       NR! ( w n --  )
                                   1131 ;       store w on nth position of 
                                   1132 ;       return stack 
                                   1133 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005B8                       1134         _HEADER NRSTO,3,"NR!"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      0005B8 05 9B                    1         .word LINK 
                           0005BA     2         LINK=.
      0005BA 03                       3         .byte 3  
      0005BB 4E 52 21                 4         .ascii "NR!"
      0005BE                          5         NRSTO:
      0005BE 90 96            [ 1] 1135         LDW Y,SP
      0005C0 72 A9 00 03      [ 2] 1136         ADDW Y,#3 
      0005C4 90 BF 26         [ 2] 1137         LDW YTEMP,Y 
      0005C7 E6 01            [ 1] 1138         LD A,(1,X)
      0005C9 90 97            [ 1] 1139         LD YL,A 
      0005CB A6 02            [ 1] 1140         LD A,#CELLL 
      0005CD 90 42            [ 4] 1141         MUL Y,A 
      0005CF 72 B9 00 26      [ 2] 1142         ADDW Y,YTEMP
      0005D3 89               [ 2] 1143         PUSHW X 
      0005D4 EE 02            [ 2] 1144         LDW X,(2,X)
      0005D6 90 FF            [ 2] 1145         LDW (Y),X
      0005D8 85               [ 2] 1146         POPW X 
      0005D9 1C 00 04         [ 2] 1147         ADDW X,#2*CELLL 
      0005DC 81               [ 4] 1148         RET 
                                   1149 
                                   1150 
                                   1151 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1152 ;       >R      ( w -- )
                                   1153 ;       Push data stack to return stack.
                                   1154 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005DD                       1155         _HEADER TOR,COMPO+2,">R"
      0005DD 05 BA                    1         .word LINK 
                           0005DF     2         LINK=.
      0005DF 42                       3         .byte COMPO+2  
      0005E0 3E 52                    4         .ascii ">R"
      0005E2                          5         TOR:
      0005E2 90 85            [ 2] 1156         POPW Y    ;save return addr
      0005E4 90 BF 26         [ 2] 1157         LDW YTEMP,Y
      0005E7 90 93            [ 1] 1158         LDW Y,X
      0005E9 90 FE            [ 2] 1159         LDW Y,(Y)  ; W
      0005EB 90 89            [ 2] 1160         PUSHW Y    ;W >R 
      0005ED 1C 00 02         [ 2] 1161         ADDW X,#2
      0005F0 92 CC 26         [ 5] 1162         JP [YTEMP]
                                   1163 
                                   1164 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1165 ;       SP@     ( -- a )
                                   1166 ;       Push current stack pointer.
                                   1167 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005F3                       1168         _HEADER SPAT,3,"SP@"
      0005F3 05 DF                    1         .word LINK 
                           0005F5     2         LINK=.
      0005F5 03                       3         .byte 3  
      0005F6 53 50 40                 4         .ascii "SP@"
      0005F9                          5         SPAT:
      0005F9 90 93            [ 1] 1169 	LDW Y,X
      0005FB 1D 00 02         [ 2] 1170         SUBW X,#2
      0005FE FF               [ 2] 1171 	LDW (X),Y
      0005FF 81               [ 4] 1172         RET     
                                   1173 
                                   1174 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                   1175 ;       SP!     ( a -- )
                                   1176 ;       Set  data stack pointer.
                                   1177 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000600                       1178         _HEADER SPSTO,3,"SP!"
      000600 05 F5                    1         .word LINK 
                           000602     2         LINK=.
      000602 03                       3         .byte 3  
      000603 53 50 21                 4         .ascii "SP!"
      000606                          5         SPSTO:
      000606 FE               [ 2] 1179         LDW     X,(X)     ;X = a
      000607 81               [ 4] 1180         RET     
                                   1181 
                                   1182 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1183 ;       DROP    ( w -- )
                                   1184 ;       Discard top stack item.
                                   1185 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000608                       1186         _HEADER DROP,4,"DROP"
      000608 06 02                    1         .word LINK 
                           00060A     2         LINK=.
      00060A 04                       3         .byte 4  
      00060B 44 52 4F 50              4         .ascii "DROP"
      00060F                          5         DROP:
      00060F 1C 00 02         [ 2] 1187         ADDW X,#2     
      000612 81               [ 4] 1188         RET     
                                   1189 
                                   1190 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1191 ;       DUP     ( w -- w w )
                                   1192 ;       Duplicate  top stack item.
                                   1193 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000613                       1194         _HEADER DUPP,3,"DUP"
      000613 06 0A                    1         .word LINK 
                           000615     2         LINK=.
      000615 03                       3         .byte 3  
      000616 44 55 50                 4         .ascii "DUP"
      000619                          5         DUPP:
      000619 90 93            [ 1] 1195 	LDW Y,X
      00061B 1D 00 02         [ 2] 1196         SUBW X,#2
      00061E 90 FE            [ 2] 1197 	LDW Y,(Y)
      000620 FF               [ 2] 1198 	LDW (X),Y
      000621 81               [ 4] 1199         RET     
                                   1200 
                                   1201 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1202 ;       SWAP    ( w1 w2 -- w2 w1 )
                                   1203 ;       Exchange top two stack items.
                                   1204 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000622                       1205         _HEADER SWAPP,4,"SWAP"
      000622 06 15                    1         .word LINK 
                           000624     2         LINK=.
      000624 04                       3         .byte 4  
      000625 53 57 41 50              4         .ascii "SWAP"
      000629                          5         SWAPP:
      000629 90 93            [ 1] 1206         LDW Y,X
      00062B 90 FE            [ 2] 1207         LDW Y,(Y)
      00062D 90 89            [ 2] 1208         PUSHW Y  
      00062F 90 93            [ 1] 1209         LDW Y,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      000631 90 EE 02         [ 2] 1210         LDW Y,(2,Y)
      000634 FF               [ 2] 1211         LDW (X),Y
      000635 90 85            [ 2] 1212         POPW Y 
      000637 EF 02            [ 2] 1213         LDW (2,X),Y
      000639 81               [ 4] 1214         RET     
                                   1215 
                                   1216 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1217 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                   1218 ;       Copy second stack item to top.
                                   1219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00063A                       1220         _HEADER OVER,4,"OVER"
      00063A 06 24                    1         .word LINK 
                           00063C     2         LINK=.
      00063C 04                       3         .byte 4  
      00063D 4F 56 45 52              4         .ascii "OVER"
      000641                          5         OVER:
      000641 1D 00 02         [ 2] 1221         SUBW X,#2
      000644 90 93            [ 1] 1222         LDW Y,X
      000646 90 EE 04         [ 2] 1223         LDW Y,(4,Y)
      000649 FF               [ 2] 1224         LDW (X),Y
      00064A 81               [ 4] 1225         RET     
                                   1226 
                                   1227 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1228 ;       0<      ( n -- t )
                                   1229 ;       Return true if n is negative.
                                   1230 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00064B                       1231         _HEADER ZLESS,2,"0<"
      00064B 06 3C                    1         .word LINK 
                           00064D     2         LINK=.
      00064D 02                       3         .byte 2  
      00064E 30 3C                    4         .ascii "0<"
      000650                          5         ZLESS:
      000650 A6 FF            [ 1] 1232         LD A,#0xFF
      000652 90 93            [ 1] 1233         LDW Y,X
      000654 90 FE            [ 2] 1234         LDW Y,(Y)
      000656 2B 01            [ 1] 1235         JRMI     ZL1
      000658 4F               [ 1] 1236         CLR A   ;false
      000659 F7               [ 1] 1237 ZL1:    LD     (X),A
      00065A E7 01            [ 1] 1238         LD (1,X),A
      00065C 81               [ 4] 1239 	RET     
                                   1240 
                                   1241 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1242 ;       0= ( n -- f )
                                   1243 ;   n==0?
                                   1244 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00065D                       1245         _HEADER ZEQUAL,2,"0="
      00065D 06 4D                    1         .word LINK 
                           00065F     2         LINK=.
      00065F 02                       3         .byte 2  
      000660 30 3D                    4         .ascii "0="
      000662                          5         ZEQUAL:
      000662 A6 FF            [ 1] 1246         LD A,#0XFF 
      000664 90 93            [ 1] 1247         LDW Y,X 
      000666 90 FE            [ 2] 1248         LDW Y,(Y)
      000668 27 02            [ 1] 1249         JREQ ZEQU1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      00066A A6 00            [ 1] 1250         LD A,#0 
      00066C                       1251 ZEQU1:  
      00066C F7               [ 1] 1252         LD (X),A 
      00066D E7 01            [ 1] 1253         LD (1,X),A         
      00066F 81               [ 4] 1254         RET 
                                   1255 
                                   1256 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1257 ;       AND     ( w w -- w )
                                   1258 ;       Bitwise AND.
                                   1259 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000670                       1260         _HEADER ANDD,3,"AND"
      000670 06 5F                    1         .word LINK 
                           000672     2         LINK=.
      000672 03                       3         .byte 3  
      000673 41 4E 44                 4         .ascii "AND"
      000676                          5         ANDD:
      000676 F6               [ 1] 1261         LD  A,(X)    ;D=w
      000677 E4 02            [ 1] 1262         AND A,(2,X)
      000679 E7 02            [ 1] 1263         LD (2,X),A
      00067B E6 01            [ 1] 1264         LD A,(1,X)
      00067D E4 03            [ 1] 1265         AND A,(3,X)
      00067F E7 03            [ 1] 1266         LD (3,X),A
      000681 1C 00 02         [ 2] 1267         ADDW X,#2
      000684 81               [ 4] 1268         RET
                                   1269 
                                   1270 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1271 ;       OR      ( w w -- w )
                                   1272 ;       Bitwise inclusive OR.
                                   1273 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000685                       1274         _HEADER ORR,2,"OR"
      000685 06 72                    1         .word LINK 
                           000687     2         LINK=.
      000687 02                       3         .byte 2  
      000688 4F 52                    4         .ascii "OR"
      00068A                          5         ORR:
      00068A F6               [ 1] 1275         LD A,(X)    ;D=w
      00068B EA 02            [ 1] 1276         OR A,(2,X)
      00068D E7 02            [ 1] 1277         LD (2,X),A
      00068F E6 01            [ 1] 1278         LD A,(1,X)
      000691 EA 03            [ 1] 1279         OR A,(3,X)
      000693 E7 03            [ 1] 1280         LD (3,X),A
      000695 1C 00 02         [ 2] 1281         ADDW X,#2
      000698 81               [ 4] 1282         RET
                                   1283 
                                   1284 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1285 ;       XOR     ( w w -- w )
                                   1286 ;       Bitwise exclusive OR.
                                   1287 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000699                       1288         _HEADER XORR,3,"XOR"
      000699 06 87                    1         .word LINK 
                           00069B     2         LINK=.
      00069B 03                       3         .byte 3  
      00069C 58 4F 52                 4         .ascii "XOR"
      00069F                          5         XORR:
      00069F F6               [ 1] 1289         LD A,(X)    ;D=w
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      0006A0 E8 02            [ 1] 1290         XOR A,(2,X)
      0006A2 E7 02            [ 1] 1291         LD (2,X),A
      0006A4 E6 01            [ 1] 1292         LD A,(1,X)
      0006A6 E8 03            [ 1] 1293         XOR A,(3,X)
      0006A8 E7 03            [ 1] 1294         LD (3,X),A
      0006AA 1C 00 02         [ 2] 1295         ADDW X,#2
      0006AD 81               [ 4] 1296         RET
                                   1297 
                                   1298 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1299 ;       UM+     ( u u -- udsum )
                                   1300 ;       Add two unsigned single
                                   1301 ;       and return a double sum.
                                   1302 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006AE                       1303         _HEADER UPLUS,3,"UM+"
      0006AE 06 9B                    1         .word LINK 
                           0006B0     2         LINK=.
      0006B0 03                       3         .byte 3  
      0006B1 55 4D 2B                 4         .ascii "UM+"
      0006B4                          5         UPLUS:
      0006B4 A6 01            [ 1] 1304         LD A,#1
      0006B6 90 93            [ 1] 1305         LDW Y,X
      0006B8 90 EE 02         [ 2] 1306         LDW Y,(2,Y)
      0006BB 90 BF 26         [ 2] 1307         LDW YTEMP,Y
      0006BE 90 93            [ 1] 1308         LDW Y,X
      0006C0 90 FE            [ 2] 1309         LDW Y,(Y)
      0006C2 72 B9 00 26      [ 2] 1310         ADDW Y,YTEMP
      0006C6 EF 02            [ 2] 1311         LDW (2,X),Y
      0006C8 25 01            [ 1] 1312         JRC     UPL1
      0006CA 4F               [ 1] 1313         CLR A
      0006CB E7 01            [ 1] 1314 UPL1:   LD     (1,X),A
      0006CD 7F               [ 1] 1315         CLR (X)
      0006CE 81               [ 4] 1316         RET
                                   1317 
                                   1318 ;; System and user variables
                                   1319 
                                   1320 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1321 ;       doVAR   ( -- a )
                                   1322 ;       run time code 
                                   1323 ;       for VARIABLE and CREATE.
                                   1324 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1325 ;       HEADER DOVAR,COMPO+5,"DOVAR"
      0006CF                       1326 DOVAR:
      0006CF 1D 00 02         [ 2] 1327 	SUBW X,#2
      0006D2 90 85            [ 2] 1328         POPW Y    ;get return addr (pfa)
      0006D4 90 FE            [ 2] 1329         LDW Y,(Y) ; indirect address 
      0006D6 FF               [ 2] 1330         LDW (X),Y    ;push on stack
      0006D7 81               [ 4] 1331         RET     ;go to RET of EXEC
                                   1332 
                                   1333 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1334 ;       BASE    ( -- a )
                                   1335 ;       Radix base for numeric I/O.
                                   1336 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006D8                       1337         _HEADER BASE,4,"BASE"
      0006D8 06 B0                    1         .word LINK 
                           0006DA     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      0006DA 04                       3         .byte 4  
      0006DB 42 41 53 45              4         .ascii "BASE"
      0006DF                          5         BASE:
      0006DF 90 AE 00 06      [ 2] 1338 	LDW Y,#UBASE 
      0006E3 1D 00 02         [ 2] 1339 	SUBW X,#2
      0006E6 FF               [ 2] 1340         LDW (X),Y
      0006E7 81               [ 4] 1341         RET
                                   1342 
                                   1343 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1344 ;       tmp     ( -- a )
                                   1345 ;       A temporary storage.
                                   1346 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006E8                       1347         _HEADER TEMP,3,"TMP"
      0006E8 06 DA                    1         .word LINK 
                           0006EA     2         LINK=.
      0006EA 03                       3         .byte 3  
      0006EB 54 4D 50                 4         .ascii "TMP"
      0006EE                          5         TEMP:
      0006EE 90 AE 00 0A      [ 2] 1348 	LDW Y,#UTMP
      0006F2 1D 00 02         [ 2] 1349 	SUBW X,#2
      0006F5 FF               [ 2] 1350         LDW (X),Y
      0006F6 81               [ 4] 1351         RET
                                   1352 
                                   1353 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1354 ;       >IN     ( -- a )
                                   1355 ;        Hold parsing pointer.
                                   1356 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006F7                       1357         _HEADER INN,3,">IN"
      0006F7 06 EA                    1         .word LINK 
                           0006F9     2         LINK=.
      0006F9 03                       3         .byte 3  
      0006FA 3E 49 4E                 4         .ascii ">IN"
      0006FD                          5         INN:
      0006FD 90 AE 00 0C      [ 2] 1358 	LDW Y,#UINN 
      000701 1D 00 02         [ 2] 1359 	SUBW X,#2
      000704 FF               [ 2] 1360         LDW (X),Y
      000705 81               [ 4] 1361         RET
                                   1362 
                                   1363 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1364 ;       #TIB    ( -- a )
                                   1365 ;       Count in terminal input 
                                   1366 ;       buffer.
                                   1367 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000706                       1368         _HEADER NTIB,4,"#TIB"
      000706 06 F9                    1         .word LINK 
                           000708     2         LINK=.
      000708 04                       3         .byte 4  
      000709 23 54 49 42              4         .ascii "#TIB"
      00070D                          5         NTIB:
      00070D 90 AE 00 0E      [ 2] 1369 	LDW Y,#UCTIB 
      000711 1D 00 02         [ 2] 1370 	SUBW X,#2
      000714 FF               [ 2] 1371         LDW (X),Y
      000715 81               [ 4] 1372         RET
                                   1373 
                                   1374 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                   1375 ;       TBUF ( -- a )
                                   1376 ;       address of 128 bytes 
                                   1377 ;       transaction buffer
                                   1378 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000716                       1379         _HEADER TBUF,4,"TBUF"
      000716 07 08                    1         .word LINK 
                           000718     2         LINK=.
      000718 04                       3         .byte 4  
      000719 54 42 55 46              4         .ascii "TBUF"
      00071D                          5         TBUF:
      00071D 90 AE 16 80      [ 2] 1380         ldw y,#ROWBUFF
      000721 1D 00 02         [ 2] 1381         subw x,#CELLL
      000724 FF               [ 2] 1382         ldw (x),y 
      000725 81               [ 4] 1383         ret 
                                   1384 
                                   1385 ; systeme variable 
                                   1386 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1387 ; compilation destination 
                                   1388 ; TFLASH ( -- A )
                                   1389 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000726                       1390         _HEADER TFLASH,6,"TFLASH"
      000726 07 18                    1         .word LINK 
                           000728     2         LINK=.
      000728 06                       3         .byte 6  
      000729 54 46 4C 41 53 48        4         .ascii "TFLASH"
      00072F                          5         TFLASH:
      00072F 1D 00 02         [ 2] 1391         subw x,#CELLL 
      000732 90 AE 00 20      [ 2] 1392         ldw y,#UTFLASH
      000736 FF               [ 2] 1393         ldw (x),y 
      000737 81               [ 4] 1394         ret 
                                   1395 
                                   1396 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1397 ;       "EVAL   ( -- a )
                                   1398 ;       Execution vector of EVAL.
                                   1399 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000738                       1400         _HEADER TEVAL,5,"'EVAL"
      000738 07 28                    1         .word LINK 
                           00073A     2         LINK=.
      00073A 05                       3         .byte 5  
      00073B 27 45 56 41 4C           4         .ascii "'EVAL"
      000740                          5         TEVAL:
      000740 90 AE 00 12      [ 2] 1401 	LDW Y,#UINTER 
      000744 1D 00 02         [ 2] 1402 	SUBW X,#2
      000747 FF               [ 2] 1403         LDW (X),Y
      000748 81               [ 4] 1404         RET
                                   1405 
                                   1406 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1407 ;       HLD     ( -- a )
                                   1408 ;       Hold a pointer of output
                                   1409 ;        string.
                                   1410 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000749                       1411         _HEADER HLD,3,"HLD"
      000749 07 3A                    1         .word LINK 
                           00074B     2         LINK=.
      00074B 03                       3         .byte 3  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      00074C 48 4C 44                 4         .ascii "HLD"
      00074F                          5         HLD:
      00074F 90 AE 00 14      [ 2] 1412 	LDW Y,#UHLD 
      000753 1D 00 02         [ 2] 1413 	SUBW X,#2
      000756 FF               [ 2] 1414         LDW (X),Y
      000757 81               [ 4] 1415         RET
                                   1416 
                                   1417 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1418 ;       CONTEXT ( -- a )
                                   1419 ;       Start vocabulary search.
                                   1420 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000758                       1421         _HEADER CNTXT,7,"CONTEXT"
      000758 07 4B                    1         .word LINK 
                           00075A     2         LINK=.
      00075A 07                       3         .byte 7  
      00075B 43 4F 4E 54 45 58 54     4         .ascii "CONTEXT"
      000762                          5         CNTXT:
      000762 90 AE 00 16      [ 2] 1422 	LDW Y,#UCNTXT
      000766 1D 00 02         [ 2] 1423 	SUBW X,#2
      000769 FF               [ 2] 1424         LDW (X),Y
      00076A 81               [ 4] 1425         RET
                                   1426 
                                   1427 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1428 ;       VP      ( -- a )
                                   1429 ;       Point to top of variables
                                   1430 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00076B                       1431         _HEADER VPP,2,"VP"
      00076B 07 5A                    1         .word LINK 
                           00076D     2         LINK=.
      00076D 02                       3         .byte 2  
      00076E 56 50                    4         .ascii "VP"
      000770                          5         VPP:
      000770 90 AE 00 18      [ 2] 1432 	LDW Y,#UVP 
      000774 1D 00 02         [ 2] 1433 	SUBW X,#2
      000777 FF               [ 2] 1434         LDW (X),Y
      000778 81               [ 4] 1435         RET
                                   1436 
                                   1437 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1438 ;       CP    ( -- a )
                                   1439 ;       Pointer to top of FLASH 
                                   1440 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000779                       1441         _HEADER CPP,2,"CP"
      000779 07 6D                    1         .word LINK 
                           00077B     2         LINK=.
      00077B 02                       3         .byte 2  
      00077C 43 50                    4         .ascii "CP"
      00077E                          5         CPP:
      00077E 90 AE 00 1A      [ 2] 1442         ldw y,#UCP 
      000782 1D 00 02         [ 2] 1443         subw x,#CELLL 
      000785 FF               [ 2] 1444         ldw (x),y 
      000786 81               [ 4] 1445         ret                
                                   1446 
                                   1447 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1448 ;       LAST    ( -- a )
                                   1449 ;       Point to last name in 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                                   1450 ;       dictionary.
                                   1451 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000787                       1452         _HEADER LAST,4,"LAST"
      000787 07 7B                    1         .word LINK 
                           000789     2         LINK=.
      000789 04                       3         .byte 4  
      00078A 4C 41 53 54              4         .ascii "LAST"
      00078E                          5         LAST:
      00078E 90 AE 00 1C      [ 2] 1453 	LDW Y,#ULAST 
      000792 1D 00 02         [ 2] 1454 	SUBW X,#2
      000795 FF               [ 2] 1455         LDW (X),Y
      000796 81               [ 4] 1456         RET
                                   1457 
                                   1458 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1459 ; address of system variable URLAST 
                                   1460 ;       RAMLAST ( -- a )
                                   1461 ; RAM dictionary context 
                                   1462 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000797                       1463         _HEADER RAMLAST,7,"RAMLAST"
      000797 07 89                    1         .word LINK 
                           000799     2         LINK=.
      000799 07                       3         .byte 7  
      00079A 52 41 4D 4C 41 53 54     4         .ascii "RAMLAST"
      0007A1                          5         RAMLAST:
      0007A1 90 AE 00 22      [ 2] 1464         ldw y,#URLAST 
      0007A5 1D 00 02         [ 2] 1465         subw x,#CELLL 
      0007A8 FF               [ 2] 1466         ldw (x),y 
      0007A9 81               [ 4] 1467         ret 
                                   1468 
                                   1469 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1470 ;       OFFSET ( -- a )
                                   1471 ;       address of system 
                                   1472 ;       variable OFFSET 
                                   1473 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007AA                       1474         _HEADER OFFSET,6,"OFFSET"
      0007AA 07 99                    1         .word LINK 
                           0007AC     2         LINK=.
      0007AC 06                       3         .byte 6  
      0007AD 4F 46 46 53 45 54        4         .ascii "OFFSET"
      0007B3                          5         OFFSET:
      0007B3 1D 00 02         [ 2] 1475         subw x,#CELLL
      0007B6 90 AE 00 1E      [ 2] 1476         ldw y,#UOFFSET 
      0007BA FF               [ 2] 1477         ldw (x),y 
      0007BB 81               [ 4] 1478         ret 
                                   1479 
                                   1480 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1481 ; adjust jump address 
                                   1482 ;  adding OFFSET
                                   1483 ; ADR-ADJ ( a -- a+offset )
                                   1484 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007BC                       1485 ADRADJ: 
      0007BC CD 07 B3         [ 4] 1486         call OFFSET 
      0007BF CD 04 E3         [ 4] 1487         call AT 
      0007C2 CC 08 3C         [ 2] 1488         jp PLUS 
                                   1489 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                   1490 
                                   1491 ;; Common functions
                                   1492 
                                   1493 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1494 ;       ?DUP    ( w -- w w | 0 )
                                   1495 ;       Dup tos if its is not zero.
                                   1496 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007C5                       1497         _HEADER QDUP,4,"?DUP"
      0007C5 07 AC                    1         .word LINK 
                           0007C7     2         LINK=.
      0007C7 04                       3         .byte 4  
      0007C8 3F 44 55 50              4         .ascii "?DUP"
      0007CC                          5         QDUP:
      0007CC 90 93            [ 1] 1498         LDW Y,X
      0007CE 90 FE            [ 2] 1499 	LDW Y,(Y)
      0007D0 27 04            [ 1] 1500         JREQ     QDUP1
      0007D2 1D 00 02         [ 2] 1501 	SUBW X,#CELLL 
      0007D5 FF               [ 2] 1502         LDW (X),Y
      0007D6 81               [ 4] 1503 QDUP1:  RET
                                   1504 
                                   1505 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1506 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1507 ;       Rot 3rd item to top.
                                   1508 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007D7                       1509         _HEADER ROT,3,"ROT"
      0007D7 07 C7                    1         .word LINK 
                           0007D9     2         LINK=.
      0007D9 03                       3         .byte 3  
      0007DA 52 4F 54                 4         .ascii "ROT"
      0007DD                          5         ROT:
      0007DD 90 93            [ 1] 1510         ldw y,x 
      0007DF 90 FE            [ 2] 1511         ldw y,(y)
      0007E1 90 89            [ 2] 1512         pushw y 
      0007E3 90 93            [ 1] 1513         ldw y,x 
      0007E5 90 EE 04         [ 2] 1514         ldw y,(4,y)
      0007E8 FF               [ 2] 1515         ldw (x),y 
      0007E9 90 93            [ 1] 1516         ldw y,x 
      0007EB 90 EE 02         [ 2] 1517         ldw y,(2,y)
      0007EE EF 04            [ 2] 1518         ldw (4,x),y 
      0007F0 90 85            [ 2] 1519         popw y 
      0007F2 EF 02            [ 2] 1520         ldw (2,x),y
      0007F4 81               [ 4] 1521         ret 
                                   1522 
                                   1523 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1524 ;    <ROT ( n1 n2 n3 -- n3 n1 n2 )
                                   1525 ;    rotate left 3 top elements 
                                   1526 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007F5                       1527     _HEADER NROT,4,"<ROT"
      0007F5 07 D9                    1         .word LINK 
                           0007F7     2         LINK=.
      0007F7 04                       3         .byte 4  
      0007F8 3C 52 4F 54              4         .ascii "<ROT"
      0007FC                          5         NROT:
      0007FC 90 93            [ 1] 1528     LDW Y,X 
      0007FE 90 FE            [ 2] 1529     LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000800 90 89            [ 2] 1530     PUSHW Y ; n3 >R 
      000802 90 93            [ 1] 1531     LDW Y,X 
      000804 90 EE 02         [ 2] 1532     LDW Y,(2,Y) ; Y = n2 
      000807 FF               [ 2] 1533     LDW (X),Y   ; TOS = n2 
      000808 90 93            [ 1] 1534     LDW Y,X    
      00080A 90 EE 04         [ 2] 1535     LDW Y,(4,Y) ; Y = n1 
      00080D EF 02            [ 2] 1536     LDW (2,X),Y ;   = n1 
      00080F 90 85            [ 2] 1537     POPW Y  ; R> Y 
      000811 EF 04            [ 2] 1538     LDW (4,X),Y ; = n3 
      000813 81               [ 4] 1539     RET 
                                   1540 
                                   1541 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1542 ;       2DROP   ( w w -- )
                                   1543 ;       Discard two items on stack.
                                   1544 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000814                       1545         _HEADER DDROP,5,"2DROP"
      000814 07 F7                    1         .word LINK 
                           000816     2         LINK=.
      000816 05                       3         .byte 5  
      000817 32 44 52 4F 50           4         .ascii "2DROP"
      00081C                          5         DDROP:
      00081C 1C 00 04         [ 2] 1546         ADDW X,#4
      00081F 81               [ 4] 1547         RET
                                   1548 
                                   1549 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1550 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1551 ;       Duplicate top two items.
                                   1552 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000820                       1553         _HEADER DDUP,4,"2DUP"
      000820 08 16                    1         .word LINK 
                           000822     2         LINK=.
      000822 04                       3         .byte 4  
      000823 32 44 55 50              4         .ascii "2DUP"
      000827                          5         DDUP:
      000827 1D 00 04         [ 2] 1554         SUBW X,#4
      00082A 90 93            [ 1] 1555         LDW Y,X
      00082C 90 EE 06         [ 2] 1556         LDW Y,(6,Y)
      00082F EF 02            [ 2] 1557         LDW (2,X),Y
      000831 90 93            [ 1] 1558         LDW Y,X
      000833 90 EE 04         [ 2] 1559         LDW Y,(4,Y)
      000836 FF               [ 2] 1560         LDW (X),Y
      000837 81               [ 4] 1561         RET
                                   1562 
                                   1563 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1564 ;       +       ( w w -- sum )
                                   1565 ;       Add top two items.
                                   1566 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000838                       1567         _HEADER PLUS,1,"+"
      000838 08 22                    1         .word LINK 
                           00083A     2         LINK=.
      00083A 01                       3         .byte 1  
      00083B 2B                       4         .ascii "+"
      00083C                          5         PLUS:
      00083C 90 93            [ 1] 1568         LDW Y,X
      00083E 90 FE            [ 2] 1569         LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000840 90 BF 26         [ 2] 1570         LDW YTEMP,Y
      000843 1C 00 02         [ 2] 1571         ADDW X,#2
      000846 90 93            [ 1] 1572         LDW Y,X
      000848 90 FE            [ 2] 1573         LDW Y,(Y)
      00084A 72 B9 00 26      [ 2] 1574         ADDW Y,YTEMP
      00084E FF               [ 2] 1575         LDW (X),Y
      00084F 81               [ 4] 1576         RET
                                   1577 
                                   1578 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1579 ;       TRUE ( -- -1 )
                                   1580 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000850                       1581         _HEADER TRUE,4,"TRUE"
      000850 08 3A                    1         .word LINK 
                           000852     2         LINK=.
      000852 04                       3         .byte 4  
      000853 54 52 55 45              4         .ascii "TRUE"
      000857                          5         TRUE:
      000857 A6 FF            [ 1] 1582         LD A,#255 
      000859 1D 00 02         [ 2] 1583         SUBW X,#CELLL
      00085C F7               [ 1] 1584         LD (X),A 
      00085D E7 01            [ 1] 1585         LD (1,X),A 
      00085F 81               [ 4] 1586         RET 
                                   1587 
                                   1588 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1589 ;       FALSE ( -- 0 )
                                   1590 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000860                       1591         _HEADER FALSE,5,"FALSE"
      000860 08 52                    1         .word LINK 
                           000862     2         LINK=.
      000862 05                       3         .byte 5  
      000863 46 41 4C 53 45           4         .ascii "FALSE"
      000868                          5         FALSE:
      000868 1D 00 02         [ 2] 1592         SUBW X,#CELLL 
      00086B 7F               [ 1] 1593         CLR (X) 
      00086C 6F 01            [ 1] 1594         CLR (1,X)
      00086E 81               [ 4] 1595         RET 
                                   1596 
                                   1597 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1598 ;       NOT     ( w -- w )
                                   1599 ;       One's complement of tos.
                                   1600 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00086F                       1601         _HEADER INVER,3,"NOT"
      00086F 08 62                    1         .word LINK 
                           000871     2         LINK=.
      000871 03                       3         .byte 3  
      000872 4E 4F 54                 4         .ascii "NOT"
      000875                          5         INVER:
      000875 90 93            [ 1] 1602         LDW Y,X
      000877 90 FE            [ 2] 1603         LDW Y,(Y)
      000879 90 53            [ 2] 1604         CPLW Y
      00087B FF               [ 2] 1605         LDW (X),Y
      00087C 81               [ 4] 1606         RET
                                   1607 
                                   1608 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1609 ;       NEGATE  ( n -- -n )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                                   1610 ;       Two's complement of tos.
                                   1611 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00087D                       1612         _HEADER NEGAT,6,"NEGATE"
      00087D 08 71                    1         .word LINK 
                           00087F     2         LINK=.
      00087F 06                       3         .byte 6  
      000880 4E 45 47 41 54 45        4         .ascii "NEGATE"
      000886                          5         NEGAT:
      000886 90 93            [ 1] 1613         LDW Y,X
      000888 90 FE            [ 2] 1614         LDW Y,(Y)
      00088A 90 50            [ 2] 1615         NEGW Y
      00088C FF               [ 2] 1616         LDW (X),Y
      00088D 81               [ 4] 1617         RET
                                   1618 
                                   1619 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1620 ;       DNEGATE ( d -- -d )
                                   1621 ;       Two's complement of double.
                                   1622 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00088E                       1623         _HEADER DNEGA,7,"DNEGATE"
      00088E 08 7F                    1         .word LINK 
                           000890     2         LINK=.
      000890 07                       3         .byte 7  
      000891 44 4E 45 47 41 54 45     4         .ascii "DNEGATE"
      000898                          5         DNEGA:
      000898 90 93            [ 1] 1624         LDW Y,X
      00089A 90 FE            [ 2] 1625 	LDW Y,(Y)
      00089C 90 53            [ 2] 1626         CPLW Y
      00089E 90 89            [ 2] 1627         PUSHW Y      ; Y >R 
      0008A0 90 93            [ 1] 1628         LDW Y,X
      0008A2 90 EE 02         [ 2] 1629         LDW Y,(2,Y)
      0008A5 90 53            [ 2] 1630         CPLW Y
      0008A7 72 A9 00 01      [ 2] 1631         ADDW Y,#1
      0008AB EF 02            [ 2] 1632         LDW (2,X),Y
      0008AD 90 85            [ 2] 1633         POPW Y       ; R> Y  
      0008AF 24 02            [ 1] 1634         JRNC DN1 
      0008B1 90 5C            [ 1] 1635         INCW Y
      0008B3 FF               [ 2] 1636 DN1:    LDW (X),Y
      0008B4 81               [ 4] 1637         RET
                                   1638 
                                   1639 
                                   1640 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1641 ;       S>D ( n -- d )
                                   1642 ; convert single integer to double 
                                   1643 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008B5                       1644         _HEADER STOD,3,"S>D"
      0008B5 08 90                    1         .word LINK 
                           0008B7     2         LINK=.
      0008B7 03                       3         .byte 3  
      0008B8 53 3E 44                 4         .ascii "S>D"
      0008BB                          5         STOD:
      0008BB 1D 00 02         [ 2] 1645         SUBW X,#CELLL 
      0008BE 7F               [ 1] 1646         CLR (X) 
      0008BF 6F 01            [ 1] 1647         CLR (1,X) 
      0008C1 90 93            [ 1] 1648         LDW Y,X 
      0008C3 90 EE 02         [ 2] 1649         LDW Y,(2,Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      0008C6 2A 05            [ 1] 1650         JRPL 1$
      0008C8 90 AE FF FF      [ 2] 1651         LDW Y,#-1 
      0008CC FF               [ 2] 1652         LDW (X),Y 
      0008CD 81               [ 4] 1653 1$:     RET 
                                   1654 
                                   1655 
                                   1656 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1657 ;       -       ( n1 n2 -- n1-n2 )
                                   1658 ;       Subtraction.
                                   1659 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008CE                       1660         _HEADER SUBB,1,"-"
      0008CE 08 B7                    1         .word LINK 
                           0008D0     2         LINK=.
      0008D0 01                       3         .byte 1  
      0008D1 2D                       4         .ascii "-"
      0008D2                          5         SUBB:
      0008D2 90 93            [ 1] 1661         LDW Y,X
      0008D4 90 FE            [ 2] 1662         LDW Y,(Y) ; n2 
      0008D6 90 BF 26         [ 2] 1663         LDW YTEMP,Y 
      0008D9 1C 00 02         [ 2] 1664         ADDW X,#CELLL 
      0008DC 90 93            [ 1] 1665         LDW Y,X
      0008DE 90 FE            [ 2] 1666         LDW Y,(Y) ; n1 
      0008E0 72 B2 00 26      [ 2] 1667         SUBW Y,YTEMP ; n1-n2 
      0008E4 FF               [ 2] 1668         LDW (X),Y
      0008E5 81               [ 4] 1669         RET
                                   1670 
                                   1671 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1672 ;       ABS     ( n -- n )
                                   1673 ;       Return  absolute value of n.
                                   1674 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008E6                       1675         _HEADER ABSS,3,"ABS"
      0008E6 08 D0                    1         .word LINK 
                           0008E8     2         LINK=.
      0008E8 03                       3         .byte 3  
      0008E9 41 42 53                 4         .ascii "ABS"
      0008EC                          5         ABSS:
      0008EC 90 93            [ 1] 1676         LDW Y,X
      0008EE 90 FE            [ 2] 1677 	LDW Y,(Y)
      0008F0 2A 03            [ 1] 1678         JRPL     AB1     ;negate:
      0008F2 90 50            [ 2] 1679         NEGW     Y     ;else negate hi byte
      0008F4 FF               [ 2] 1680         LDW (X),Y
      0008F5 81               [ 4] 1681 AB1:    RET
                                   1682 
                                   1683 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1684 ;       =       ( w w -- t )
                                   1685 ;       Return true if top two are equal.
                                   1686 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008F6                       1687         _HEADER EQUAL,1,"="
      0008F6 08 E8                    1         .word LINK 
                           0008F8     2         LINK=.
      0008F8 01                       3         .byte 1  
      0008F9 3D                       4         .ascii "="
      0008FA                          5         EQUAL:
      0008FA A6 FF            [ 1] 1688         LD A,#0xFF  ;true
      0008FC 90 93            [ 1] 1689         LDW Y,X    
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      0008FE 90 FE            [ 2] 1690         LDW Y,(Y)   ; n2 
      000900 1C 00 02         [ 2] 1691         ADDW X,#CELLL 
      000903 F3               [ 2] 1692         CPW Y,(X)   ; n1==n2
      000904 27 01            [ 1] 1693         JREQ EQ1 
      000906 4F               [ 1] 1694         CLR A 
      000907 F7               [ 1] 1695 EQ1:    LD (X),A
      000908 E7 01            [ 1] 1696         LD (1,X),A
      00090A 81               [ 4] 1697 	RET     
                                   1698 
                                   1699 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1700 ;       U<      ( u1 u2 -- f )
                                   1701 ;       Unsigned compare of top two items.
                                   1702 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00090B                       1703         _HEADER ULESS,2,"U<"
      00090B 08 F8                    1         .word LINK 
                           00090D     2         LINK=.
      00090D 02                       3         .byte 2  
      00090E 55 3C                    4         .ascii "U<"
      000910                          5         ULESS:
      000910 A6 FF            [ 1] 1704         LD A,#0xFF  ;true
      000912 90 93            [ 1] 1705         LDW Y,X    
      000914 90 EE 02         [ 2] 1706         LDW Y,(2,Y) ; u1 
      000917 F3               [ 2] 1707         CPW Y,(X)   ; cpw u1  u2 
      000918 25 01            [ 1] 1708         JRULT     ULES1
      00091A 4F               [ 1] 1709         CLR A
      00091B 1C 00 02         [ 2] 1710 ULES1:  ADDW X,#CELLL 
      00091E F7               [ 1] 1711         LD (X),A
      00091F E7 01            [ 1] 1712         LD (1,X),A
      000921 81               [ 4] 1713 	RET     
                                   1714 
                                   1715 
                                   1716 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1717 ;       <       ( n1 n2 -- t )
                                   1718 ;       Signed compare of top two items.
                                   1719 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000922                       1720         _HEADER LESS,1,"<"
      000922 09 0D                    1         .word LINK 
                           000924     2         LINK=.
      000924 01                       3         .byte 1  
      000925 3C                       4         .ascii "<"
      000926                          5         LESS:
      000926 A6 FF            [ 1] 1721         LD A,#0xFF  ;true
      000928 90 93            [ 1] 1722         LDW Y,X    
      00092A 90 EE 02         [ 2] 1723         LDW Y,(2,Y)  ; n1 
      00092D F3               [ 2] 1724         CPW Y,(X)  ; n1 < n2 ? 
      00092E 2F 01            [ 1] 1725         JRSLT     LT1
      000930 4F               [ 1] 1726         CLR A
      000931 1C 00 02         [ 2] 1727 LT1:    ADDW X,#CELLL 
      000934 F7               [ 1] 1728         LD (X),A
      000935 E7 01            [ 1] 1729         LD (1,X),A
      000937 81               [ 4] 1730 	RET     
                                   1731 
                                   1732 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1733 ;   U> ( u1 u2 -- f )
                                   1734 ;   f = true if u1>u2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                   1735 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000938                       1736         _HEADER UGREAT,2,"U>"
      000938 09 24                    1         .word LINK 
                           00093A     2         LINK=.
      00093A 02                       3         .byte 2  
      00093B 55 3E                    4         .ascii "U>"
      00093D                          5         UGREAT:
      00093D A6 FF            [ 1] 1737         LD A,#255  
      00093F 90 93            [ 1] 1738         LDW Y,X 
      000941 90 EE 02         [ 2] 1739         LDW Y,(2,Y)  ; u1 
      000944 F3               [ 2] 1740         CPW Y,(X)  ; u1 > u2 
      000945 22 01            [ 1] 1741         JRUGT UGREAT1 
      000947 4F               [ 1] 1742         CLR A   
      000948                       1743 UGREAT1:
      000948 1C 00 02         [ 2] 1744         ADDW X,#CELLL 
      00094B F7               [ 1] 1745         LD (X),A 
      00094C E7 01            [ 1] 1746         LD (1,X),A 
      00094E 81               [ 4] 1747         RET 
                                   1748 
                                   1749 
                                   1750 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1751 ;       >   (n1 n2 -- f )
                                   1752 ;  signed compare n1 n2 
                                   1753 ;  true if n1 > n2 
                                   1754 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00094F                       1755         _HEADER GREAT,1,">"
      00094F 09 3A                    1         .word LINK 
                           000951     2         LINK=.
      000951 01                       3         .byte 1  
      000952 3E                       4         .ascii ">"
      000953                          5         GREAT:
      000953 A6 FF            [ 1] 1756         LD A,#0xFF ;
      000955 90 93            [ 1] 1757         LDW Y,X 
      000957 90 EE 02         [ 2] 1758         LDW Y,(2,Y)  ; n1 
      00095A F3               [ 2] 1759         CPW Y,(X) ; n1 > n2 ?  
      00095B 2C 01            [ 1] 1760         JRSGT GREAT1 
      00095D 4F               [ 1] 1761         CLR  A
      00095E                       1762 GREAT1:
      00095E 1C 00 02         [ 2] 1763         ADDW X,#CELLL 
      000961 F7               [ 1] 1764         LD (X),A 
      000962 E7 01            [ 1] 1765         LD (1,X),A 
      000964 81               [ 4] 1766         RET 
                                   1767 
                                   1768 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1769 ;       MAX     ( n n -- n )
                                   1770 ;       Return greater of two top items.
                                   1771 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000965                       1772         _HEADER MAX,3,"MAX"
      000965 09 51                    1         .word LINK 
                           000967     2         LINK=.
      000967 03                       3         .byte 3  
      000968 4D 41 58                 4         .ascii "MAX"
      00096B                          5         MAX:
      00096B 90 93            [ 1] 1773         LDW Y,X    
      00096D 90 FE            [ 2] 1774         LDW Y,(Y) ; n2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      00096F E3 02            [ 2] 1775         CPW Y,(2,X)   
      000971 2F 02            [ 1] 1776         JRSLT  MAX1
      000973 EF 02            [ 2] 1777         LDW (2,X),Y
      000975 1C 00 02         [ 2] 1778 MAX1:   ADDW X,#2
      000978 81               [ 4] 1779 	RET     
                                   1780 
                                   1781 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1782 ;       MIN     ( n n -- n )
                                   1783 ;       Return smaller of top two items.
                                   1784 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000979                       1785         _HEADER MIN,3,"MIN"
      000979 09 67                    1         .word LINK 
                           00097B     2         LINK=.
      00097B 03                       3         .byte 3  
      00097C 4D 49 4E                 4         .ascii "MIN"
      00097F                          5         MIN:
      00097F 90 93            [ 1] 1786         LDW Y,X    
      000981 90 FE            [ 2] 1787         LDW Y,(Y)  ; n2 
      000983 E3 02            [ 2] 1788         CPW Y,(2,X) 
      000985 2C 02            [ 1] 1789         JRSGT MIN1
      000987 EF 02            [ 2] 1790         LDW (2,X),Y
      000989 1C 00 02         [ 2] 1791 MIN1:	ADDW X,#2
      00098C 81               [ 4] 1792 	RET     
                                   1793 
                                   1794 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1795 ;       WITHIN  ( u ul uh -- t )
                                   1796 ;       Return true if u is within
                                   1797 ;       range of ul and uh. ( ul <= u < uh )
                                   1798 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00098D                       1799         _HEADER WITHI,6,"WITHIN"
      00098D 09 7B                    1         .word LINK 
                           00098F     2         LINK=.
      00098F 06                       3         .byte 6  
      000990 57 49 54 48 49 4E        4         .ascii "WITHIN"
      000996                          5         WITHI:
      000996 CD 06 41         [ 4] 1800         CALL     OVER
      000999 CD 08 D2         [ 4] 1801         CALL     SUBB
      00099C CD 05 E2         [ 4] 1802         CALL     TOR
      00099F CD 08 D2         [ 4] 1803         CALL     SUBB
      0009A2 CD 05 34         [ 4] 1804         CALL     RFROM
      0009A5 CC 09 10         [ 2] 1805         JP     ULESS
                                   1806 
                                   1807 ;; Divide
                                   1808 
                                   1809 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1810 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1811 ;       Unsigned divide of a double by a
                                   1812 ;       single. Return mod and quotient.
                                   1813 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1814 ; 2021-02-22
                                   1815 ; changed algorithm for Jeeek one 
                                   1816 ; ref: https://github.com/TG9541/stm8ef/pull/406        
      0009A8                       1817         _HEADER UMMOD,6,"UM/MOD"
      0009A8 09 8F                    1         .word LINK 
                           0009AA     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      0009AA 06                       3         .byte 6  
      0009AB 55 4D 2F 4D 4F 44        4         .ascii "UM/MOD"
      0009B1                          5         UMMOD:
      0009B1 90 93            [ 1] 1818         LDW     Y,X             ; stack pointer to Y
      0009B3 FE               [ 2] 1819         LDW     X,(X)           ; un
      0009B4 BF 26            [ 2] 1820         LDW     YTEMP,X         ; save un
      0009B6 93               [ 1] 1821         LDW     X,Y
      0009B7 5C               [ 1] 1822         INCW    X               ; drop un
      0009B8 5C               [ 1] 1823         INCW    X
      0009B9 89               [ 2] 1824         PUSHW   X               ; save stack pointer
      0009BA FE               [ 2] 1825         LDW     X,(X)           ; X=udh
      0009BB 26 0B            [ 1] 1826         JRNE    MMSM0
      0009BD 1E 01            [ 2] 1827         LDW    X,(1,SP)
      0009BF EE 02            [ 2] 1828         LDW    X,(2,X)          ; udl 
      0009C1 90 BE 26         [ 2] 1829         LDW     Y,YTEMP         ;divisor 
      0009C4 65               [ 2] 1830         DIVW    X,Y             ; udl/un 
      0009C5 51               [ 1] 1831         EXGW    X,Y 
      0009C6 20 26            [ 2] 1832         JRA     MMSMb 
      0009C8                       1833 MMSM0:    
      0009C8 90 EE 04         [ 2] 1834         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      0009CB B3 26            [ 2] 1835         CPW     X,YTEMP
      0009CD 25 09            [ 1] 1836         JRULT   MMSM1           ; X is still on the R-stack
      0009CF 85               [ 2] 1837         POPW    X               ; restore stack pointer
      0009D0 90 5F            [ 1] 1838         CLRW    Y
      0009D2 EF 02            [ 2] 1839         LDW     (2,X),Y         ; remainder 0
      0009D4 90 5A            [ 2] 1840         DECW    Y
      0009D6 FF               [ 2] 1841         LDW     (X),Y           ; quotient max. 16 bit value
      0009D7 81               [ 4] 1842         RET
      0009D8                       1843 MMSM1:
      0009D8 A6 10            [ 1] 1844         LD      A,#16           ; loop count
      0009DA 90 58            [ 2] 1845         SLLW    Y               ; udl shift udl into udh
      0009DC                       1846 MMSM3:
      0009DC 59               [ 2] 1847         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      0009DD 25 04            [ 1] 1848         JRC     MMSMa           ; if carry out of rotate
      0009DF B3 26            [ 2] 1849         CPW     X,YTEMP         ; compare udh to un
      0009E1 25 05            [ 1] 1850         JRULT   MMSM4           ; can't subtract
      0009E3                       1851 MMSMa:
      0009E3 72 B0 00 26      [ 2] 1852         SUBW    X,YTEMP         ; can subtract
      0009E7 98               [ 1] 1853         RCF
      0009E8                       1854 MMSM4:
      0009E8 8C               [ 1] 1855         CCF                     ; quotient bit
      0009E9 90 59            [ 2] 1856         RLCW    Y               ; rotate into quotient, rotate out udl
      0009EB 4A               [ 1] 1857         DEC     A               ; repeat
      0009EC 26 EE            [ 1] 1858         JRNE    MMSM3           ; if A == 0
      0009EE                       1859 MMSMb:
      0009EE BF 26            [ 2] 1860         LDW     YTEMP,X         ; done, save remainder
      0009F0 85               [ 2] 1861         POPW    X               ; restore stack pointer
      0009F1 FF               [ 2] 1862         LDW     (X),Y           ; save quotient
      0009F2 90 BE 26         [ 2] 1863         LDW     Y,YTEMP         ; remainder onto stack
      0009F5 EF 02            [ 2] 1864         LDW     (2,X),Y
      0009F7 81               [ 4] 1865         RET
                                   1866 
                                   1867 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1868 ;   U/MOD ( u1 u2 -- ur uq )
                                   1869 ;   unsigned divide u1/u2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



                                   1870 ;   return remainder and quotient 
                                   1871 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0009F8                       1872         _HEADER USLMOD,5,"U/MOD"
      0009F8 09 AA                    1         .word LINK 
                           0009FA     2         LINK=.
      0009FA 05                       3         .byte 5  
      0009FB 55 2F 4D 4F 44           4         .ascii "U/MOD"
      000A00                          5         USLMOD:
      000A00 90 93            [ 1] 1873         LDW Y,X 
      000A02 90 FE            [ 2] 1874         LDW Y,(Y)  ; dividend 
      000A04 89               [ 2] 1875         PUSHW X    ; DP >R 
      000A05 EE 02            [ 2] 1876         LDW X,(2,X) ; divisor 
      000A07 65               [ 2] 1877         DIVW X,Y 
      000A08 89               [ 2] 1878         PUSHW X     ; quotient 
      000A09 1E 03            [ 2] 1879         LDW X,(3,SP) ; DP 
      000A0B EF 02            [ 2] 1880         LDW (2,X),Y ; remainder 
      000A0D 16 01            [ 2] 1881         LDW Y,(1,SP) ; quotient 
      000A0F FF               [ 2] 1882         LDW (X),Y 
      000A10 5B 04            [ 2] 1883         ADDW SP,#2*CELLL ; drop quotient and DP from rstack 
      000A12 81               [ 4] 1884         RET 
                                   1885 
                                   1886 
                                   1887 
                                   1888 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                   1889 ;       M/MOD   ( d n -- r q )
                                   1890 ;       Signed floored divide of double by
                                   1891 ;       single. Return mod and quotient.
                                   1892 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A13                       1893         _HEADER MSMOD,5,"M/MOD"
      000A13 09 FA                    1         .word LINK 
                           000A15     2         LINK=.
      000A15 05                       3         .byte 5  
      000A16 4D 2F 4D 4F 44           4         .ascii "M/MOD"
      000A1B                          5         MSMOD:
      000A1B CD 06 19         [ 4] 1894         CALL	DUPP
      000A1E CD 06 50         [ 4] 1895         CALL	ZLESS
      000A21 CD 06 19         [ 4] 1896         CALL	DUPP
      000A24 CD 05 E2         [ 4] 1897         CALL	TOR
      000A27 CD 04 98         [ 4] 1898         CALL	QBRAN
      000A2A 0A 38                 1899         .word	MMOD1
      000A2C CD 08 86         [ 4] 1900         CALL	NEGAT
      000A2F CD 05 E2         [ 4] 1901         CALL	TOR
      000A32 CD 08 98         [ 4] 1902         CALL	DNEGA
      000A35 CD 05 34         [ 4] 1903         CALL	RFROM
      000A38 CD 05 E2         [ 4] 1904 MMOD1:	CALL	TOR
      000A3B CD 06 19         [ 4] 1905         CALL	DUPP
      000A3E CD 06 50         [ 4] 1906         CALL	ZLESS
      000A41 CD 04 98         [ 4] 1907         CALL	QBRAN
      000A44 0A 4C                 1908         .word	MMOD2
      000A46 CD 05 45         [ 4] 1909         CALL	RAT
      000A49 CD 08 3C         [ 4] 1910         CALL	PLUS
      000A4C CD 05 34         [ 4] 1911 MMOD2:	CALL	RFROM
      000A4F CD 09 B1         [ 4] 1912         CALL	UMMOD
      000A52 CD 05 34         [ 4] 1913         CALL	RFROM
      000A55 CD 04 98         [ 4] 1914         CALL	QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000A58 0A 63                 1915         .word	MMOD3
      000A5A CD 06 29         [ 4] 1916         CALL	SWAPP
      000A5D CD 08 86         [ 4] 1917         CALL	NEGAT
      000A60 CD 06 29         [ 4] 1918         CALL	SWAPP
      000A63 81               [ 4] 1919 MMOD3:	RET
                                   1920 
                                   1921 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1922 ;       /MOD    ( n1 n2 -- r q )
                                   1923 ;       Signed divide n1/n2. 
                                   1924 ;       Return mod and quotient.
                                   1925 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A64                       1926         _HEADER SLMOD,4,"/MOD"
      000A64 0A 15                    1         .word LINK 
                           000A66     2         LINK=.
      000A66 04                       3         .byte 4  
      000A67 2F 4D 4F 44              4         .ascii "/MOD"
      000A6B                          5         SLMOD:
      000A6B F6               [ 1] 1927         LD A,(X)
      000A6C 88               [ 1] 1928         PUSH A   ; n2 sign 
      000A6D E6 02            [ 1] 1929         LD A,(2,X)
      000A6F 88               [ 1] 1930         PUSH A    ; n1 sign 
      000A70 CD 08 EC         [ 4] 1931         CALL ABSS 
      000A73 CD 05 E2         [ 4] 1932         CALL TOR  ; 
      000A76 CD 08 EC         [ 4] 1933         CALL ABSS 
      000A79 CD 05 45         [ 4] 1934         CALL RAT   
      000A7C CD 0A 00         [ 4] 1935         CALL USLMOD 
      000A7F 7B 03            [ 1] 1936         LD A,(3,SP)
      000A81 1A 04            [ 1] 1937         OR A,(4,SP)
      000A83 2A 25            [ 1] 1938         JRPL SLMOD8 ; both positive nothing to change 
      000A85 7B 03            [ 1] 1939         LD A,(3,SP)
      000A87 18 04            [ 1] 1940         XOR A,(4,SP)
      000A89 2A 12            [ 1] 1941         JRPL SLMOD1
                                   1942 ; dividend and divisor are opposite sign          
      000A8B CD 0B 97         [ 4] 1943         CALL ONEP   ; add one to quotient 
      000A8E CD 08 86         [ 4] 1944         CALL NEGAT ; negative quotient
      000A91 CD 05 45         [ 4] 1945         CALL RAT 
      000A94 CD 07 DD         [ 4] 1946         CALL ROT 
      000A97 CD 08 D2         [ 4] 1947         CALL SUBB  ; corrected_remainder=divisor-remainder 
      000A9A CD 06 29         [ 4] 1948         CALL SWAPP
      000A9D                       1949 SLMOD1:
      000A9D 7B 04            [ 1] 1950         LD A,(4,SP) ; divisor sign 
      000A9F 2A 09            [ 1] 1951         JRPL SLMOD8 
      000AA1 CD 05 E2         [ 4] 1952         CALL TOR 
      000AA4 CD 08 86         [ 4] 1953         CALL NEGAT ; if divisor negative negate remainder 
      000AA7 CD 05 34         [ 4] 1954         CALL RFROM 
      000AAA                       1955 SLMOD8: 
      000AAA 5B 04            [ 2] 1956         ADDW SP,#4 
      000AAC 81               [ 4] 1957         RET 
                                   1958 
                                   1959 ;        CALL	OVER
                                   1960 ;        CALL	ZLESS
                                   1961 ;        CALL	SWAPP
                                   1962 ;        JP	MSMOD
                                   1963 
                                   1964 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



                                   1965 ;       MOD     ( n n -- r )
                                   1966 ;       Signed divide. Return mod only.
                                   1967 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AAD                       1968         _HEADER MODD,3,"MOD"
      000AAD 0A 66                    1         .word LINK 
                           000AAF     2         LINK=.
      000AAF 03                       3         .byte 3  
      000AB0 4D 4F 44                 4         .ascii "MOD"
      000AB3                          5         MODD:
      000AB3 CD 0A 6B         [ 4] 1969 	CALL	SLMOD
      000AB6 CC 06 0F         [ 2] 1970 	JP	DROP
                                   1971 
                                   1972 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1973 ;       /       ( n n -- q )
                                   1974 ;       Signed divide. Return quotient only.
                                   1975 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AB9                       1976         _HEADER SLASH,1,"/"
      000AB9 0A AF                    1         .word LINK 
                           000ABB     2         LINK=.
      000ABB 01                       3         .byte 1  
      000ABC 2F                       4         .ascii "/"
      000ABD                          5         SLASH:
      000ABD CD 0A 6B         [ 4] 1977         CALL	SLMOD
      000AC0 CD 06 29         [ 4] 1978         CALL	SWAPP
      000AC3 CC 06 0F         [ 2] 1979         JP	DROP
                                   1980 
                                   1981 ;; Multiply
                                   1982 
                                   1983 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1984 ;       UM*     ( u1 u2 -- ud )
                                   1985 ;       Unsigned multiply. Return 
                                   1986 ;       double product.
                                   1987 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AC6                       1988         _HEADER UMSTA,3,"UM*"
      000AC6 0A BB                    1         .word LINK 
                           000AC8     2         LINK=.
      000AC8 03                       3         .byte 3  
      000AC9 55 4D 2A                 4         .ascii "UM*"
      000ACC                          5         UMSTA:
                                   1989 ; stack have 4 bytes u1=a:b u2=c:d
                                   1990         ;; bytes offset on data stack 
                           000002  1991         da=2 
                           000003  1992         db=3 
                           000000  1993         dc=0 
                           000001  1994         dd=1 
                                   1995         ;;;;;; local variables ;;;;;;;;;
                                   1996         ;; product bytes offset on return stack 
                           000001  1997         UD1=1  ; ud bits 31..24
                           000002  1998         UD2=2  ; ud bits 23..16
                           000003  1999         UD3=3  ; ud bits 15..8 
                           000004  2000         UD4=4  ; ud bits 7..0 
                                   2001         ;; local variable for product set to zero   
      000ACC 90 5F            [ 1] 2002         clrw y 
      000ACE 90 89            [ 2] 2003         pushw y  ; bits 15..0
      000AD0 90 89            [ 2] 2004         pushw y  ; bits 31..16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000AD2 E6 03            [ 1] 2005         ld a,(db,x) ; b 
      000AD4 90 97            [ 1] 2006         ld yl,a 
      000AD6 E6 01            [ 1] 2007         ld a,(dd,x)   ; d
      000AD8 90 42            [ 4] 2008         mul y,a    ; b*d  
      000ADA 17 03            [ 2] 2009         ldw (UD3,sp),y ; lowest weight product 
      000ADC E6 03            [ 1] 2010         ld a,(db,x)
      000ADE 90 97            [ 1] 2011         ld yl,a 
      000AE0 E6 00            [ 1] 2012         ld a,(dc,x)
      000AE2 90 42            [ 4] 2013         mul y,a  ; b*c 
                                   2014         ;;; do the partial sum 
      000AE4 72 F9 02         [ 2] 2015         addw y,(UD2,sp)
      000AE7 4F               [ 1] 2016         clr a 
      000AE8 49               [ 1] 2017         rlc a
      000AE9 6B 01            [ 1] 2018         ld (UD1,sp),a 
      000AEB 17 02            [ 2] 2019         ldw (UD2,sp),y 
      000AED E6 02            [ 1] 2020         ld a,(da,x)
      000AEF 90 97            [ 1] 2021         ld yl,a 
      000AF1 E6 01            [ 1] 2022         ld a,(dd,x)
      000AF3 90 42            [ 4] 2023         mul y,a   ; a*d 
                                   2024         ;; do partial sum 
      000AF5 72 F9 02         [ 2] 2025         addw y,(UD2,sp)
      000AF8 4F               [ 1] 2026         clr a 
      000AF9 19 01            [ 1] 2027         adc a,(UD1,sp)
      000AFB 6B 01            [ 1] 2028         ld (UD1,sp),a  
      000AFD 17 02            [ 2] 2029         ldw (UD2,sp),y 
      000AFF E6 02            [ 1] 2030         ld a,(da,x)
      000B01 90 97            [ 1] 2031         ld yl,a 
      000B03 E6 00            [ 1] 2032         ld a,(dc,x)
      000B05 90 42            [ 4] 2033         mul y,a  ;  a*c highest weight product 
                                   2034         ;;; do partial sum 
      000B07 72 F9 01         [ 2] 2035         addw y,(UD1,sp)
      000B0A FF               [ 2] 2036         ldw (x),y  ; udh 
      000B0B 16 03            [ 2] 2037         ldw y,(UD3,sp)
      000B0D EF 02            [ 2] 2038         ldw (2,x),y  ; udl  
      000B0F 5B 04            [ 2] 2039         addw sp,#4 ; drop local variable 
      000B11 81               [ 4] 2040         ret  
                                   2041 
                                   2042 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2043 ;       *       ( n n -- n )
                                   2044 ;       Signed multiply. Return 
                                   2045 ;       single product.
                                   2046 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B12                       2047         _HEADER STAR,1,"*"
      000B12 0A C8                    1         .word LINK 
                           000B14     2         LINK=.
      000B14 01                       3         .byte 1  
      000B15 2A                       4         .ascii "*"
      000B16                          5         STAR:
      000B16 CD 0A CC         [ 4] 2048 	CALL	UMSTA
      000B19 CC 06 0F         [ 2] 2049 	JP	DROP
                                   2050 
                                   2051 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2052 ;       M*      ( n n -- d )
                                   2053 ;       Signed multiply. Return 
                                   2054 ;       double product.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



                                   2055 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B1C                       2056         _HEADER MSTAR,2,"M*"
      000B1C 0B 14                    1         .word LINK 
                           000B1E     2         LINK=.
      000B1E 02                       3         .byte 2  
      000B1F 4D 2A                    4         .ascii "M*"
      000B21                          5         MSTAR:
      000B21 CD 08 27         [ 4] 2057         CALL	DDUP
      000B24 CD 06 9F         [ 4] 2058         CALL	XORR
      000B27 CD 06 50         [ 4] 2059         CALL	ZLESS
      000B2A CD 05 E2         [ 4] 2060         CALL	TOR
      000B2D CD 08 EC         [ 4] 2061         CALL	ABSS
      000B30 CD 06 29         [ 4] 2062         CALL	SWAPP
      000B33 CD 08 EC         [ 4] 2063         CALL	ABSS
      000B36 CD 0A CC         [ 4] 2064         CALL	UMSTA
      000B39 CD 05 34         [ 4] 2065         CALL	RFROM
      000B3C CD 04 98         [ 4] 2066         CALL	QBRAN
      000B3F 0B 44                 2067         .word	MSTA1
      000B41 CD 08 98         [ 4] 2068         CALL	DNEGA
      000B44 81               [ 4] 2069 MSTA1:	RET
                                   2070 
                                   2071 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2072 ;       */MOD   ( n1 n2 n3 -- r q )
                                   2073 ;       Multiply n1 and n2, then divide
                                   2074 ;       by n3. Return mod and quotient.
                                   2075 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B45                       2076         _HEADER SSMOD,5,"*/MOD"
      000B45 0B 1E                    1         .word LINK 
                           000B47     2         LINK=.
      000B47 05                       3         .byte 5  
      000B48 2A 2F 4D 4F 44           4         .ascii "*/MOD"
      000B4D                          5         SSMOD:
      000B4D CD 05 E2         [ 4] 2077         CALL     TOR
      000B50 CD 0B 21         [ 4] 2078         CALL     MSTAR
      000B53 CD 05 34         [ 4] 2079         CALL     RFROM
      000B56 CC 0A 1B         [ 2] 2080         JP     MSMOD
                                   2081 
                                   2082 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2083 ;       */      ( n1 n2 n3 -- q )
                                   2084 ;       Multiply n1 by n2, then divide
                                   2085 ;       by n3. Return quotient only.
                                   2086 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B59                       2087         _HEADER STASL,2,"*/"
      000B59 0B 47                    1         .word LINK 
                           000B5B     2         LINK=.
      000B5B 02                       3         .byte 2  
      000B5C 2A 2F                    4         .ascii "*/"
      000B5E                          5         STASL:
      000B5E CD 0B 4D         [ 4] 2088         CALL	SSMOD
      000B61 CD 06 29         [ 4] 2089         CALL	SWAPP
      000B64 CC 06 0F         [ 2] 2090         JP	DROP
                                   2091 
                                   2092 ;; Miscellaneous
                                   2093 
                                   2094 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



                                   2095 ;       2+   ( a -- a )
                                   2096 ;       Add cell size in byte to address.
                                   2097 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B67                       2098         _HEADER CELLP,2,"2+"
      000B67 0B 5B                    1         .word LINK 
                           000B69     2         LINK=.
      000B69 02                       3         .byte 2  
      000B6A 32 2B                    4         .ascii "2+"
      000B6C                          5         CELLP:
      000B6C 90 93            [ 1] 2099         LDW Y,X
      000B6E 90 FE            [ 2] 2100 	LDW Y,(Y)
      000B70 72 A9 00 02      [ 2] 2101         ADDW Y,#CELLL 
      000B74 FF               [ 2] 2102         LDW (X),Y
      000B75 81               [ 4] 2103         RET
                                   2104 
                                   2105 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2106 ;       2-   ( a -- a )
                                   2107 ;       Subtract 2 from address.
                                   2108 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B76                       2109         _HEADER CELLM,2,"2-"
      000B76 0B 69                    1         .word LINK 
                           000B78     2         LINK=.
      000B78 02                       3         .byte 2  
      000B79 32 2D                    4         .ascii "2-"
      000B7B                          5         CELLM:
      000B7B 90 93            [ 1] 2110         LDW Y,X
      000B7D 90 FE            [ 2] 2111 	LDW Y,(Y)
      000B7F 72 A2 00 02      [ 2] 2112         SUBW Y,#CELLL
      000B83 FF               [ 2] 2113         LDW (X),Y
      000B84 81               [ 4] 2114         RET
                                   2115 
                                   2116 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2117 ;       2*   ( n -- n )
                                   2118 ;       Multiply tos by 2.
                                   2119 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B85                       2120         _HEADER CELLS,2,"2*"
      000B85 0B 78                    1         .word LINK 
                           000B87     2         LINK=.
      000B87 02                       3         .byte 2  
      000B88 32 2A                    4         .ascii "2*"
      000B8A                          5         CELLS:
      000B8A 90 93            [ 1] 2121         LDW Y,X
      000B8C 90 FE            [ 2] 2122 	LDW Y,(Y)
      000B8E 90 58            [ 2] 2123         SLAW Y
      000B90 FF               [ 2] 2124         LDW (X),Y
      000B91 81               [ 4] 2125         RET
                                   2126 
                                   2127 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2128 ;       1+      ( a -- a )
                                   2129 ;       Add cell size in byte 
                                   2130 ;       to address.
                                   2131 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B92                       2132         _HEADER ONEP,2,"1+"
      000B92 0B 87                    1         .word LINK 
                           000B94     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000B94 02                       3         .byte 2  
      000B95 31 2B                    4         .ascii "1+"
      000B97                          5         ONEP:
      000B97 90 93            [ 1] 2133         LDW Y,X
      000B99 90 FE            [ 2] 2134 	LDW Y,(Y)
      000B9B 90 5C            [ 1] 2135         INCW Y
      000B9D FF               [ 2] 2136         LDW (X),Y
      000B9E 81               [ 4] 2137         RET
                                   2138 
                                   2139 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2140 ;       1-      ( a -- a )
                                   2141 ;       Subtract 2 from address.
                                   2142 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B9F                       2143         _HEADER ONEM,2,"1-"
      000B9F 0B 94                    1         .word LINK 
                           000BA1     2         LINK=.
      000BA1 02                       3         .byte 2  
      000BA2 31 2D                    4         .ascii "1-"
      000BA4                          5         ONEM:
      000BA4 90 93            [ 1] 2144         LDW Y,X
      000BA6 90 FE            [ 2] 2145 	LDW Y,(Y)
      000BA8 90 5A            [ 2] 2146         DECW Y
      000BAA FF               [ 2] 2147         LDW (X),Y
      000BAB 81               [ 4] 2148         RET
                                   2149 
                                   2150 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2151 ;  shift left n times 
                                   2152 ; LSHIFT ( n1 n2 -- n1<<n2 )
                                   2153 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BAC                       2154         _HEADER LSHIFT,6,"LSHIFT"
      000BAC 0B A1                    1         .word LINK 
                           000BAE     2         LINK=.
      000BAE 06                       3         .byte 6  
      000BAF 4C 53 48 49 46 54        4         .ascii "LSHIFT"
      000BB5                          5         LSHIFT:
      000BB5 E6 01            [ 1] 2155         ld a,(1,x)
      000BB7 1C 00 02         [ 2] 2156         addw x,#CELLL 
      000BBA 90 93            [ 1] 2157         ldw y,x 
      000BBC 90 FE            [ 2] 2158         ldw y,(y)
      000BBE                       2159 LSHIFT1:
      000BBE 4D               [ 1] 2160         tnz a 
      000BBF 27 05            [ 1] 2161         jreq LSHIFT4 
      000BC1 90 58            [ 2] 2162         sllw y 
      000BC3 4A               [ 1] 2163         dec a 
      000BC4 20 F8            [ 2] 2164         jra LSHIFT1 
      000BC6                       2165 LSHIFT4:
      000BC6 FF               [ 2] 2166         ldw (x),y 
      000BC7 81               [ 4] 2167         ret 
                                   2168 
                                   2169 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2170 ; shift right n times                 
                                   2171 ; RSHIFT (n1 n2 -- n1>>n2 )
                                   2172 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BC8                       2173         _HEADER RSHIFT,6,"RSHIFT"
      000BC8 0B AE                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



                           000BCA     2         LINK=.
      000BCA 06                       3         .byte 6  
      000BCB 52 53 48 49 46 54        4         .ascii "RSHIFT"
      000BD1                          5         RSHIFT:
      000BD1 E6 01            [ 1] 2174         ld a,(1,x)
      000BD3 1C 00 02         [ 2] 2175         addw x,#CELLL 
      000BD6 90 93            [ 1] 2176         ldw y,x 
      000BD8 90 FE            [ 2] 2177         ldw y,(y)
      000BDA                       2178 RSHIFT1:
      000BDA 4D               [ 1] 2179         tnz a 
      000BDB 27 05            [ 1] 2180         jreq RSHIFT4 
      000BDD 90 54            [ 2] 2181         srlw y 
      000BDF 4A               [ 1] 2182         dec a 
      000BE0 20 F8            [ 2] 2183         jra RSHIFT1 
      000BE2                       2184 RSHIFT4:
      000BE2 FF               [ 2] 2185         ldw (x),y 
      000BE3 81               [ 4] 2186         ret 
                                   2187 
                                   2188 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2189 ;       2/      ( n -- n )
                                   2190 ;       divide  tos by 2.
                                   2191 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BE4                       2192         _HEADER TWOSL,2,"2/"
      000BE4 0B CA                    1         .word LINK 
                           000BE6     2         LINK=.
      000BE6 02                       3         .byte 2  
      000BE7 32 2F                    4         .ascii "2/"
      000BE9                          5         TWOSL:
      000BE9 90 93            [ 1] 2193         LDW Y,X
      000BEB 90 FE            [ 2] 2194 	LDW Y,(Y)
      000BED 90 57            [ 2] 2195         SRAW Y
      000BEF FF               [ 2] 2196         LDW (X),Y
      000BF0 81               [ 4] 2197         RET
                                   2198 
                                   2199 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2200 ;       BL      ( -- 32 )
                                   2201 ;       Return 32,  blank character.
                                   2202 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BF1                       2203         _HEADER BLANK,2,"BL"
      000BF1 0B E6                    1         .word LINK 
                           000BF3     2         LINK=.
      000BF3 02                       3         .byte 2  
      000BF4 42 4C                    4         .ascii "BL"
      000BF6                          5         BLANK:
      000BF6 1D 00 02         [ 2] 2204         SUBW X,#2
      000BF9 90 AE 00 20      [ 2] 2205 	LDW Y,#32
      000BFD FF               [ 2] 2206         LDW (X),Y
      000BFE 81               [ 4] 2207         RET
                                   2208 
                                   2209 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2210 ;         0     ( -- 0)
                                   2211 ;         Return 0.
                                   2212 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BFF                       2213         _HEADER ZERO,1,"0"
      000BFF 0B F3                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



                           000C01     2         LINK=.
      000C01 01                       3         .byte 1  
      000C02 30                       4         .ascii "0"
      000C03                          5         ZERO:
      000C03 1D 00 02         [ 2] 2214         SUBW X,#2
      000C06 90 5F            [ 1] 2215 	CLRW Y
      000C08 FF               [ 2] 2216         LDW (X),Y
      000C09 81               [ 4] 2217         RET
                                   2218 
                                   2219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2220 ;         1     ( -- 1)
                                   2221 ;         Return 1.
                                   2222 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C0A                       2223         _HEADER ONE,1,"1"
      000C0A 0C 01                    1         .word LINK 
                           000C0C     2         LINK=.
      000C0C 01                       3         .byte 1  
      000C0D 31                       4         .ascii "1"
      000C0E                          5         ONE:
      000C0E 1D 00 02         [ 2] 2224         SUBW X,#2
      000C11 90 AE 00 01      [ 2] 2225 	LDW Y,#1
      000C15 FF               [ 2] 2226         LDW (X),Y
      000C16 81               [ 4] 2227         RET
                                   2228 
                                   2229 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2230 ;         -1    ( -- -1)
                                   2231 ;   Return -1
                                   2232 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C17                       2233         _HEADER MONE,2,"-1"
      000C17 0C 0C                    1         .word LINK 
                           000C19     2         LINK=.
      000C19 02                       3         .byte 2  
      000C1A 2D 31                    4         .ascii "-1"
      000C1C                          5         MONE:
      000C1C 1D 00 02         [ 2] 2234         SUBW X,#2
      000C1F 90 AE FF FF      [ 2] 2235 	LDW Y,#0xFFFF
      000C23 FF               [ 2] 2236         LDW (X),Y
      000C24 81               [ 4] 2237         RET
                                   2238 
                                   2239 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2240 ;       >CHAR   ( c -- c )
                                   2241 ;       Filter non-printing characters.
                                   2242 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C25                       2243         _HEADER TCHAR,5,">CHAR"
      000C25 0C 19                    1         .word LINK 
                           000C27     2         LINK=.
      000C27 05                       3         .byte 5  
      000C28 3E 43 48 41 52           4         .ascii ">CHAR"
      000C2D                          5         TCHAR:
      000C2D E6 01            [ 1] 2244         ld a,(1,x)
      000C2F A1 20            [ 1] 2245         cp a,#32  
      000C31 2B 05            [ 1] 2246         jrmi 1$ 
      000C33 A1 7F            [ 1] 2247         cp a,#127 
      000C35 2A 01            [ 1] 2248         jrpl 1$ 
      000C37 81               [ 4] 2249         ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000C38 A6 5F            [ 1] 2250 1$:     ld a,#'_ 
      000C3A E7 01            [ 1] 2251         ld (1,x),a 
      000C3C 81               [ 4] 2252         ret 
                                   2253 
                                   2254 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2255 ;       DEPTH   ( -- n )
                                   2256 ;       Return  depth of  data stack.
                                   2257 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C3D                       2258         _HEADER DEPTH,5,"DEPTH"
      000C3D 0C 27                    1         .word LINK 
                           000C3F     2         LINK=.
      000C3F 05                       3         .byte 5  
      000C40 44 45 50 54 48           4         .ascii "DEPTH"
      000C45                          5         DEPTH:
      000C45 90 BE 2C         [ 2] 2259         LDW Y,SP0    ;save data stack ptr
      000C48 BF 24            [ 2] 2260 	LDW XTEMP,X
      000C4A 72 B2 00 24      [ 2] 2261         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000C4E 90 57            [ 2] 2262         SRAW Y    ;Y = #stack items
      000C50 1D 00 02         [ 2] 2263 	SUBW X,#2
      000C53 FF               [ 2] 2264         LDW (X),Y     ; if neg, underflow
      000C54 81               [ 4] 2265         RET
                                   2266 
                                   2267 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2268 ;       PICK    ( ... +n -- ... w )
                                   2269 ;       Copy  nth stack item to tos.
                                   2270 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C55                       2271         _HEADER PICK,4,"PICK"
      000C55 0C 3F                    1         .word LINK 
                           000C57     2         LINK=.
      000C57 04                       3         .byte 4  
      000C58 50 49 43 4B              4         .ascii "PICK"
      000C5C                          5         PICK:
      000C5C 90 93            [ 1] 2272         LDW Y,X   ;D = n1
      000C5E 90 FE            [ 2] 2273         LDW Y,(Y)
                                   2274 ; modified for standard compliance          
                                   2275 ; 0 PICK must be equivalent to DUP 
      000C60 90 5C            [ 1] 2276         INCW Y 
      000C62 90 58            [ 2] 2277         SLAW Y
      000C64 BF 24            [ 2] 2278         LDW XTEMP,X
      000C66 72 B9 00 24      [ 2] 2279         ADDW Y,XTEMP
      000C6A 90 FE            [ 2] 2280         LDW Y,(Y)
      000C6C FF               [ 2] 2281         LDW (X),Y
      000C6D 81               [ 4] 2282         RET
                                   2283 
                                   2284 ;; Memory access
                                   2285 
                                   2286 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2287 ;       +!      ( n a -- )
                                   2288 ;       Add n to  contents at 
                                   2289 ;       address a.
                                   2290 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C6E                       2291         _HEADER PSTOR,2,"+!"
      000C6E 0C 57                    1         .word LINK 
                           000C70     2         LINK=.
      000C70 02                       3         .byte 2  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000C71 2B 21                    4         .ascii "+!"
      000C73                          5         PSTOR:
      000C73 89               [ 2] 2292         PUSHW X   ; R: DP 
      000C74 90 93            [ 1] 2293         LDW Y,X 
      000C76 FE               [ 2] 2294         LDW X,(X) ; a 
      000C77 90 EE 02         [ 2] 2295         LDW Y,(2,Y)  ; n 
      000C7A 90 89            [ 2] 2296         PUSHW Y      ; R: DP n 
      000C7C 90 93            [ 1] 2297         LDW Y,X 
      000C7E 90 FE            [ 2] 2298         LDW Y,(Y)
      000C80 72 F9 01         [ 2] 2299         ADDW Y,(1,SP) ; *a + n 
      000C83 FF               [ 2] 2300         LDW (X),Y 
      000C84 1E 03            [ 2] 2301         LDW X,(3,SP) ; DP
      000C86 1C 00 04         [ 2] 2302         ADDW X,#2*CELLL  ; ( n a -- )  
      000C89 5B 04            [ 2] 2303         ADDW SP,#2*CELLL ; R: DP n -- 
      000C8B 81               [ 4] 2304         RET 
                                   2305                 
                                   2306 
                                   2307 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2308 ;       2!      ( d a -- )
                                   2309 ;       Store  double integer 
                                   2310 ;       to address a.
                                   2311 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C8C                       2312         _HEADER DSTOR,2,"2!"
      000C8C 0C 70                    1         .word LINK 
                           000C8E     2         LINK=.
      000C8E 02                       3         .byte 2  
      000C8F 32 21                    4         .ascii "2!"
      000C91                          5         DSTOR:
      000C91 90 93            [ 1] 2313         LDW Y,X 
      000C93 89               [ 2] 2314         PUSHW X 
      000C94 FE               [ 2] 2315         LDW X,(X) ; a 
      000C95 90 EE 02         [ 2] 2316         LDW Y,(2,Y) ; dhi 
      000C98 FF               [ 2] 2317         LDW (X),Y 
      000C99 16 01            [ 2] 2318         LDW Y,(1,SP)  
      000C9B 90 EE 04         [ 2] 2319         LDW Y,(4,Y) ; dlo 
      000C9E EF 02            [ 2] 2320         LDW (2,X),Y  
      000CA0 85               [ 2] 2321         POPW X 
      000CA1 1C 00 06         [ 2] 2322         ADDW X,#3*CELLL 
      000CA4 81               [ 4] 2323         RET 
                                   2324 
                                   2325 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2326 ;       2@      ( a -- d )
                                   2327 ;       Fetch double integer 
                                   2328 ;       from address a.
                                   2329 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CA5                       2330         _HEADER DAT,2,"2@"
      000CA5 0C 8E                    1         .word LINK 
                           000CA7     2         LINK=.
      000CA7 02                       3         .byte 2  
      000CA8 32 40                    4         .ascii "2@"
      000CAA                          5         DAT:
      000CAA 90 93            [ 1] 2331         ldw y,x 
      000CAC 1D 00 02         [ 2] 2332         subw x,#CELLL 
      000CAF 90 FE            [ 2] 2333         ldw y,(y) ;address 
      000CB1 90 89            [ 2] 2334         pushw y  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000CB3 90 FE            [ 2] 2335         ldw y,(y) ; dhi 
      000CB5 FF               [ 2] 2336         ldw (x),y 
      000CB6 90 85            [ 2] 2337         popw y 
      000CB8 90 EE 02         [ 2] 2338         ldw y,(2,y) ; dlo 
      000CBB EF 02            [ 2] 2339         ldw (2,x),y 
      000CBD 81               [ 4] 2340         ret 
                                   2341 
                                   2342 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2343 ;       COUNT   ( b -- b +n )
                                   2344 ;       Return count byte of a string
                                   2345 ;       and add 1 to byte address.
                                   2346 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CBE                       2347         _HEADER COUNT,5,"COUNT"
      000CBE 0C A7                    1         .word LINK 
                           000CC0     2         LINK=.
      000CC0 05                       3         .byte 5  
      000CC1 43 4F 55 4E 54           4         .ascii "COUNT"
      000CC6                          5         COUNT:
      000CC6 90 93            [ 1] 2348         ldw y,x 
      000CC8 90 FE            [ 2] 2349         ldw y,(y) ; address 
      000CCA 90 F6            [ 1] 2350         ld a,(y)  ; count 
      000CCC 90 5C            [ 1] 2351         incw y 
      000CCE FF               [ 2] 2352         ldw (x),y 
      000CCF 1D 00 02         [ 2] 2353         subw x,#CELLL 
      000CD2 E7 01            [ 1] 2354         ld (1,x),a 
      000CD4 7F               [ 1] 2355         clr (x)
      000CD5 81               [ 4] 2356         ret 
                                   2357 
                                   2358 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2359 ;       HERE    ( -- a )
                                   2360 ;       Return  top of  variables
                                   2361 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CD6                       2362         _HEADER HERE,4,"HERE"
      000CD6 0C C0                    1         .word LINK 
                           000CD8     2         LINK=.
      000CD8 04                       3         .byte 4  
      000CD9 48 45 52 45              4         .ascii "HERE"
      000CDD                          5         HERE:
      000CDD 90 AE 00 18      [ 2] 2363       	ldw y,#UVP 
      000CE1 90 FE            [ 2] 2364         ldw y,(y)
      000CE3 1D 00 02         [ 2] 2365         subw x,#CELLL 
      000CE6 FF               [ 2] 2366         ldw (x),y 
      000CE7 81               [ 4] 2367         ret 
                                   2368 
                                   2369 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2370 ;       PAD     ( -- a )
                                   2371 ;       Return address of text buffer
                                   2372 ;       above  code dictionary.
                                   2373 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CE8                       2374         _HEADER PAD,3,"PAD"
      000CE8 0C D8                    1         .word LINK 
                           000CEA     2         LINK=.
      000CEA 03                       3         .byte 3  
      000CEB 50 41 44                 4         .ascii "PAD"
      000CEE                          5         PAD:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      000CEE CD 0C DD         [ 4] 2375         CALL     HERE
      000CF1                       2376         _DOLIT   80
      000CF1 CD 04 6F         [ 4]    1     CALL DOLIT 
      000CF4 00 50                    2     .word 80 
      000CF6 CC 08 3C         [ 2] 2377         JP     PLUS
                                   2378 
                                   2379 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2380 ;       TIB     ( -- a )
                                   2381 ;       Return address of 
                                   2382 ;       terminal input buffer.
                                   2383 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CF9                       2384         _HEADER TIB,3,"TIB"
      000CF9 0C EA                    1         .word LINK 
                           000CFB     2         LINK=.
      000CFB 03                       3         .byte 3  
      000CFC 54 49 42                 4         .ascii "TIB"
      000CFF                          5         TIB:
      000CFF CD 07 0D         [ 4] 2385         CALL     NTIB
      000D02 CD 0B 6C         [ 4] 2386         CALL     CELLP
      000D05 CC 04 E3         [ 2] 2387         JP     AT
                                   2388 
                                   2389 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2390 ;       @EXECUTE        ( a -- )
                                   2391 ;       Execute vector stored in 
                                   2392 ;       address a.
                                   2393 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D08                       2394         _HEADER ATEXE,8,"@EXECUTE"
      000D08 0C FB                    1         .word LINK 
                           000D0A     2         LINK=.
      000D0A 08                       3         .byte 8  
      000D0B 40 45 58 45 43 55 54     4         .ascii "@EXECUTE"
             45
      000D13                          5         ATEXE:
      000D13 CD 04 E3         [ 4] 2395         CALL     AT
      000D16 CD 07 CC         [ 4] 2396         CALL     QDUP    ;?address or zero
      000D19 CD 04 98         [ 4] 2397         CALL     QBRAN
      000D1C 0D 21                 2398         .word      EXE1
      000D1E CD 04 C4         [ 4] 2399         CALL     EXECU   ;execute if non-zero
      000D21 81               [ 4] 2400 EXE1:   RET     ;do nothing if zero
                                   2401 
                                   2402 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2403 ;       CMOVE   ( b1 b2 u -- )
                                   2404 ;       Copy u bytes from b1 to b2.
                                   2405 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D22                       2406         _HEADER CMOVE,5,"CMOVE"
      000D22 0D 0A                    1         .word LINK 
                           000D24     2         LINK=.
      000D24 05                       3         .byte 5  
      000D25 43 4D 4F 56 45           4         .ascii "CMOVE"
      000D2A                          5         CMOVE:
                                   2407         ;;;;  local variables ;;;;;;;
                           000005  2408         DP = 5
                           000003  2409         YTMP = 3 
                           000001  2410         CNT  = 1 
                                   2411         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      000D2A 89               [ 2] 2412         PUSHW X  ; R: DP  
      000D2B 52 02            [ 2] 2413         SUB SP,#2 ; R: DP YTMP 
      000D2D 90 93            [ 1] 2414         LDW Y,X 
      000D2F 90 FE            [ 2] 2415         LDW Y,(Y) ; CNT 
      000D31 90 89            [ 2] 2416         PUSHW Y  ; R: DP YTMP CNT
      000D33 90 93            [ 1] 2417         LDW Y,X 
      000D35 90 EE 02         [ 2] 2418         LDW Y,(2,Y) ; b2, dest 
      000D38 EE 04            [ 2] 2419         LDW X,(4,X) ; b1, src 
      000D3A 17 03            [ 2] 2420         LDW (YTMP,SP),Y 
      000D3C 13 03            [ 2] 2421         CPW X,(YTMP,SP) 
      000D3E 22 1A            [ 1] 2422         JRUGT CMOV2  ; src>dest 
                                   2423 ; src<dest copy from top to bottom
      000D40 72 FB 01         [ 2] 2424         ADDW X,(CNT,SP)
      000D43 72 F9 01         [ 2] 2425         ADDW Y,(CNT,SP)
      000D46                       2426 CMOV1:  
      000D46 17 03            [ 2] 2427         LDW (YTMP,SP),Y 
      000D48 16 01            [ 2] 2428         LDW Y,(CNT,SP)
      000D4A 27 22            [ 1] 2429         JREQ CMOV3 
      000D4C 90 5A            [ 2] 2430         DECW Y 
      000D4E 17 01            [ 2] 2431         LDW (CNT,SP),Y 
      000D50 16 03            [ 2] 2432         LDW Y,(YTMP,SP)
      000D52 5A               [ 2] 2433         DECW X
      000D53 F6               [ 1] 2434         LD A,(X)
      000D54 90 5A            [ 2] 2435         DECW Y 
      000D56 90 F7            [ 1] 2436         LD (Y),A 
      000D58 20 EC            [ 2] 2437         JRA CMOV1
                                   2438 ; src>dest copy from bottom to top   
      000D5A                       2439 CMOV2: 
      000D5A 17 03            [ 2] 2440         LDW (YTMP,SP),Y 
      000D5C 16 01            [ 2] 2441         LDW Y,(CNT,SP)
      000D5E 27 0E            [ 1] 2442         JREQ CMOV3
      000D60 90 5A            [ 2] 2443         DECW Y 
      000D62 17 01            [ 2] 2444         LDW (CNT,SP),Y 
      000D64 16 03            [ 2] 2445         LDW Y,(YTMP,SP)
      000D66 F6               [ 1] 2446         LD A,(X)
      000D67 5C               [ 1] 2447         INCW X 
      000D68 90 F7            [ 1] 2448         LD (Y),A 
      000D6A 90 5C            [ 1] 2449         INCW Y 
      000D6C 20 EC            [ 2] 2450         JRA CMOV2 
      000D6E                       2451 CMOV3:
      000D6E 1E 05            [ 2] 2452         LDW X,(DP,SP)
      000D70 1C 00 06         [ 2] 2453         ADDW X,#3*CELLL 
      000D73 5B 06            [ 2] 2454         ADDW SP,#3*CELLL 
      000D75 81               [ 4] 2455         RET 
                                   2456         
                                   2457 
                                   2458 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2459 ;       FILL    ( b u c -- )
                                   2460 ;       Fill u bytes of character c
                                   2461 ;       to area beginning at b.
                                   2462 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D76                       2463         _HEADER FILL,4,"FILL"
      000D76 0D 24                    1         .word LINK 
                           000D78     2         LINK=.
      000D78 04                       3         .byte 4  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      000D79 46 49 4C 4C              4         .ascii "FILL"
      000D7D                          5         FILL:
      000D7D E6 01            [ 1] 2464         LD A,(1,X)
      000D7F 90 93            [ 1] 2465         LDW Y,X 
      000D81 1C 00 06         [ 2] 2466         ADDW X,#3*CELLL 
      000D84 89               [ 2] 2467         PUSHW X ; R: DP 
      000D85 93               [ 1] 2468         LDW X,Y 
      000D86 EE 04            [ 2] 2469         LDW X,(4,X) ; b
      000D88 90 EE 02         [ 2] 2470         LDW Y,(2,Y) ; u
      000D8B                       2471 FILL0:
      000D8B 27 06            [ 1] 2472         JREQ FILL1
      000D8D F7               [ 1] 2473         LD (X),A 
      000D8E 5C               [ 1] 2474         INCW X 
      000D8F 90 5A            [ 2] 2475         DECW Y 
      000D91 20 F8            [ 2] 2476         JRA FILL0         
      000D93 85               [ 2] 2477 FILL1: POPW X 
      000D94 81               [ 4] 2478         RET         
                                   2479         
                                   2480 
                                   2481 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2482 ;       ERASE   ( b u -- )
                                   2483 ;       Erase u bytes beginning at b.
                                   2484 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D95                       2485         _HEADER ERASE,5,"ERASE"
      000D95 0D 78                    1         .word LINK 
                           000D97     2         LINK=.
      000D97 05                       3         .byte 5  
      000D98 45 52 41 53 45           4         .ascii "ERASE"
      000D9D                          5         ERASE:
      000D9D 90 5F            [ 1] 2486         clrw y 
      000D9F 1D 00 02         [ 2] 2487         subw x,#CELLL 
      000DA2 FF               [ 2] 2488         ldw (x),y 
      000DA3 CC 0D 7D         [ 2] 2489         jp FILL 
                                   2490 
                                   2491 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2492 ;       PACK0   ( b u a -- a )
                                   2493 ;       Build a counted string with
                                   2494 ;       u characters from b. Null fill.
                                   2495 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DA6                       2496         _HEADER PACKS,5,"PACK0"
      000DA6 0D 97                    1         .word LINK 
                           000DA8     2         LINK=.
      000DA8 05                       3         .byte 5  
      000DA9 50 41 43 4B 30           4         .ascii "PACK0"
      000DAE                          5         PACKS:
      000DAE CD 06 19         [ 4] 2497         CALL     DUPP
      000DB1 CD 05 E2         [ 4] 2498         CALL     TOR     ;strings only on cell boundary
      000DB4 CD 08 27         [ 4] 2499         CALL     DDUP
      000DB7 CD 04 F0         [ 4] 2500         CALL     CSTOR
      000DBA CD 0B 97         [ 4] 2501         CALL     ONEP ;save count
      000DBD CD 06 29         [ 4] 2502         CALL     SWAPP
      000DC0 CD 0D 2A         [ 4] 2503         CALL     CMOVE
      000DC3 CD 05 34         [ 4] 2504         CALL     RFROM
      000DC6 81               [ 4] 2505         RET
                                   2506 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                   2507 ;; Numeric output, single precision
                                   2508 
                                   2509 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2510 ;       DIGIT   ( u -- c )
                                   2511 ;       Convert digit u to a character.
                                   2512 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DC7                       2513         _HEADER DIGIT,5,"DIGIT"
      000DC7 0D A8                    1         .word LINK 
                           000DC9     2         LINK=.
      000DC9 05                       3         .byte 5  
      000DCA 44 49 47 49 54           4         .ascii "DIGIT"
      000DCF                          5         DIGIT:
      000DCF CD 04 6F         [ 4] 2514         CALL	DOLIT
      000DD2 00 09                 2515         .word	9
      000DD4 CD 06 41         [ 4] 2516         CALL	OVER
      000DD7 CD 09 26         [ 4] 2517         CALL	LESS
      000DDA CD 04 6F         [ 4] 2518         CALL	DOLIT
      000DDD 00 07                 2519         .word	7
      000DDF CD 06 76         [ 4] 2520         CALL	ANDD
      000DE2 CD 08 3C         [ 4] 2521         CALL	PLUS
      000DE5 CD 04 6F         [ 4] 2522         CALL	DOLIT
      000DE8 00 30                 2523         .word	48	;'0'
      000DEA CC 08 3C         [ 2] 2524         JP	PLUS
                                   2525 
                                   2526 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2527 ;       EXTRACT ( n base -- n c )
                                   2528 ;       Extract least significant 
                                   2529 ;       digit from n.
                                   2530 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DED                       2531         _HEADER EXTRC,7,"EXTRACT"
      000DED 0D C9                    1         .word LINK 
                           000DEF     2         LINK=.
      000DEF 07                       3         .byte 7  
      000DF0 45 58 54 52 41 43 54     4         .ascii "EXTRACT"
      000DF7                          5         EXTRC:
      000DF7 CD 0C 03         [ 4] 2532         CALL     ZERO
      000DFA CD 06 29         [ 4] 2533         CALL     SWAPP
      000DFD CD 09 B1         [ 4] 2534         CALL     UMMOD
      000E00 CD 06 29         [ 4] 2535         CALL     SWAPP
      000E03 CC 0D CF         [ 2] 2536         JP     DIGIT
                                   2537 
                                   2538 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2539 ;       <#      ( -- )
                                   2540 ;       Initiate  numeric 
                                   2541 ;       output process.
                                   2542 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E06                       2543         _HEADER BDIGS,2,"#<"
      000E06 0D EF                    1         .word LINK 
                           000E08     2         LINK=.
      000E08 02                       3         .byte 2  
      000E09 23 3C                    4         .ascii "#<"
      000E0B                          5         BDIGS:
      000E0B CD 0C EE         [ 4] 2544         CALL     PAD
      000E0E CD 07 4F         [ 4] 2545         CALL     HLD
      000E11 CC 04 D1         [ 2] 2546         JP     STORE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                                   2547 
                                   2548 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2549 ;       HOLD    ( c -- )
                                   2550 ;       Insert a character 
                                   2551 ;       into output string.
                                   2552 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E14                       2553         _HEADER HOLD,4,"HOLD"
      000E14 0E 08                    1         .word LINK 
                           000E16     2         LINK=.
      000E16 04                       3         .byte 4  
      000E17 48 4F 4C 44              4         .ascii "HOLD"
      000E1B                          5         HOLD:
      000E1B CD 07 4F         [ 4] 2554         CALL     HLD
      000E1E CD 04 E3         [ 4] 2555         CALL     AT
      000E21 CD 0B A4         [ 4] 2556         CALL     ONEM
      000E24 CD 06 19         [ 4] 2557         CALL     DUPP
      000E27 CD 07 4F         [ 4] 2558         CALL     HLD
      000E2A CD 04 D1         [ 4] 2559         CALL     STORE
      000E2D CC 04 F0         [ 2] 2560         JP     CSTOR
                                   2561 
                                   2562 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2563 ;       #       ( u -- u )
                                   2564 ;       Extract one digit from u and
                                   2565 ;       append digit to output string.
                                   2566 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E30                       2567         _HEADER DIG,1,"#"
      000E30 0E 16                    1         .word LINK 
                           000E32     2         LINK=.
      000E32 01                       3         .byte 1  
      000E33 23                       4         .ascii "#"
      000E34                          5         DIG:
      000E34 CD 06 DF         [ 4] 2568         CALL     BASE
      000E37 CD 04 E3         [ 4] 2569         CALL     AT
      000E3A CD 0D F7         [ 4] 2570         CALL     EXTRC
      000E3D CC 0E 1B         [ 2] 2571         JP     HOLD
                                   2572 
                                   2573 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2574 ;       #S      ( u -- 0 )
                                   2575 ;       Convert u until all digits
                                   2576 ;       are added to output string.
                                   2577 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E40                       2578         _HEADER DIGS,2,"#S"
      000E40 0E 32                    1         .word LINK 
                           000E42     2         LINK=.
      000E42 02                       3         .byte 2  
      000E43 23 53                    4         .ascii "#S"
      000E45                          5         DIGS:
      000E45 CD 0E 34         [ 4] 2579 DIGS1:  CALL     DIG
      000E48 CD 06 19         [ 4] 2580         CALL     DUPP
      000E4B CD 04 98         [ 4] 2581         CALL     QBRAN
      000E4E 0E 52                 2582         .word      DIGS2
      000E50 20 F3            [ 2] 2583         JRA     DIGS1
      000E52 81               [ 4] 2584 DIGS2:  RET
                                   2585 
                                   2586 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                   2587 ;       SIGN    ( n -- )
                                   2588 ;       Add a minus sign to
                                   2589 ;       numeric output string.
                                   2590 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E53                       2591         _HEADER SIGN,4,"SIGN"
      000E53 0E 42                    1         .word LINK 
                           000E55     2         LINK=.
      000E55 04                       3         .byte 4  
      000E56 53 49 47 4E              4         .ascii "SIGN"
      000E5A                          5         SIGN:
      000E5A CD 06 50         [ 4] 2592         CALL     ZLESS
      000E5D CD 04 98         [ 4] 2593         CALL     QBRAN
      000E60 0E 6A                 2594         .word      SIGN1
      000E62 CD 04 6F         [ 4] 2595         CALL     DOLIT
      000E65 00 2D                 2596         .word      45	;"-"
      000E67 CC 0E 1B         [ 2] 2597         JP     HOLD
      000E6A 81               [ 4] 2598 SIGN1:  RET
                                   2599 
                                   2600 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2601 ;       #>      ( w -- b u )
                                   2602 ;       Prepare output string.
                                   2603 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E6B                       2604         _HEADER EDIGS,2,"#>"
      000E6B 0E 55                    1         .word LINK 
                           000E6D     2         LINK=.
      000E6D 02                       3         .byte 2  
      000E6E 23 3E                    4         .ascii "#>"
      000E70                          5         EDIGS:
      000E70 CD 06 0F         [ 4] 2605         CALL     DROP
      000E73 CD 07 4F         [ 4] 2606         CALL     HLD
      000E76 CD 04 E3         [ 4] 2607         CALL     AT
      000E79 CD 0C EE         [ 4] 2608         CALL     PAD
      000E7C CD 06 41         [ 4] 2609         CALL     OVER
      000E7F CC 08 D2         [ 2] 2610         JP     SUBB
                                   2611 
                                   2612 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2613 ;       str     ( w -- b u )
                                   2614 ;       Convert a signed integer
                                   2615 ;       to a numeric string.
                                   2616 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E82                       2617         _HEADER STR,3,"STR"
      000E82 0E 6D                    1         .word LINK 
                           000E84     2         LINK=.
      000E84 03                       3         .byte 3  
      000E85 53 54 52                 4         .ascii "STR"
      000E88                          5         STR:
      000E88 CD 06 19         [ 4] 2618         CALL     DUPP
      000E8B CD 05 E2         [ 4] 2619         CALL     TOR
      000E8E CD 08 EC         [ 4] 2620         CALL     ABSS
      000E91 CD 0E 0B         [ 4] 2621         CALL     BDIGS
      000E94 CD 0E 45         [ 4] 2622         CALL     DIGS
      000E97 CD 05 34         [ 4] 2623         CALL     RFROM
      000E9A CD 0E 5A         [ 4] 2624         CALL     SIGN
      000E9D CC 0E 70         [ 2] 2625         JP     EDIGS
                                   2626 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



                                   2627 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2628 ;       HEX     ( -- )
                                   2629 ;       Use radix 16 as base for
                                   2630 ;       numeric conversions.
                                   2631 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000EA0                       2632         _HEADER HEX,3,"HEX"
      000EA0 0E 84                    1         .word LINK 
                           000EA2     2         LINK=.
      000EA2 03                       3         .byte 3  
      000EA3 48 45 58                 4         .ascii "HEX"
      000EA6                          5         HEX:
      000EA6 CD 04 6F         [ 4] 2633         CALL     DOLIT
      000EA9 00 10                 2634         .word      16
      000EAB CD 06 DF         [ 4] 2635         CALL     BASE
      000EAE CC 04 D1         [ 2] 2636         JP     STORE
                                   2637 
                                   2638 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2639 ;       DECIMAL ( -- )
                                   2640 ;       Use radix 10 as base
                                   2641 ;       for numeric conversions.
                                   2642 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000EB1                       2643         _HEADER DECIM,7,"DECIMAL"
      000EB1 0E A2                    1         .word LINK 
                           000EB3     2         LINK=.
      000EB3 07                       3         .byte 7  
      000EB4 44 45 43 49 4D 41 4C     4         .ascii "DECIMAL"
      000EBB                          5         DECIM:
      000EBB CD 04 6F         [ 4] 2644         CALL     DOLIT
      000EBE 00 0A                 2645         .word      10
      000EC0 CD 06 DF         [ 4] 2646         CALL     BASE
      000EC3 CC 04 D1         [ 2] 2647         JP     STORE
                                   2648 
                                   2649 ;; Numeric input, single precision
                                   2650 
                                   2651 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2652 ;       DIGIT?  ( c base -- u t )
                                   2653 ;       Convert a character to its numeric
                                   2654 ;       value. A flag indicates success.
                                   2655 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000EC6                       2656         _HEADER DIGTQ,6,"DIGIT?"
      000EC6 0E B3                    1         .word LINK 
                           000EC8     2         LINK=.
      000EC8 06                       3         .byte 6  
      000EC9 44 49 47 49 54 3F        4         .ascii "DIGIT?"
      000ECF                          5         DIGTQ:
      000ECF CD 05 E2         [ 4] 2657         CALL     TOR
      000ED2 CD 04 6F         [ 4] 2658         CALL     DOLIT
      000ED5 00 30                 2659         .word     48	; "0"
      000ED7 CD 08 D2         [ 4] 2660         CALL     SUBB
      000EDA CD 04 6F         [ 4] 2661         CALL     DOLIT
      000EDD 00 09                 2662         .word      9
      000EDF CD 06 41         [ 4] 2663         CALL     OVER
      000EE2 CD 09 26         [ 4] 2664         CALL     LESS
      000EE5 CD 04 98         [ 4] 2665         CALL     QBRAN
      000EE8 0F 00                 2666         .word      DGTQ1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      000EEA CD 04 6F         [ 4] 2667         CALL     DOLIT
      000EED 00 07                 2668         .word      7
      000EEF CD 08 D2         [ 4] 2669         CALL     SUBB
      000EF2 CD 06 19         [ 4] 2670         CALL     DUPP
      000EF5 CD 04 6F         [ 4] 2671         CALL     DOLIT
      000EF8 00 0A                 2672         .word      10
      000EFA CD 09 26         [ 4] 2673         CALL     LESS
      000EFD CD 06 8A         [ 4] 2674         CALL     ORR
      000F00 CD 06 19         [ 4] 2675 DGTQ1:  CALL     DUPP
      000F03 CD 05 34         [ 4] 2676         CALL     RFROM
      000F06 CC 09 10         [ 2] 2677         JP     ULESS
                                   2678 
                           000001  2679 .if  WANT_DOUBLE
                           000000  2680 .else 
                                   2681 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2682 ;       NUMBER? ( a -- n T | a F )
                                   2683 ;       Convert a number string to
                                   2684 ;       integer. Push a flag on tos.
                                   2685 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2686         _HEADER NUMBQ,7,"NUMBER?"
                                   2687         CALL     BASE
                                   2688         CALL     AT
                                   2689         CALL     TOR
                                   2690         CALL     ZERO
                                   2691         CALL     OVER
                                   2692         CALL     COUNT
                                   2693         CALL     OVER
                                   2694         CALL     CAT
                                   2695         CALL     DOLIT
                                   2696         .word     36	; "0x"
                                   2697         CALL     EQUAL
                                   2698         CALL     QBRAN
                                   2699         .word      NUMQ1
                                   2700         CALL     HEX
                                   2701         CALL     SWAPP
                                   2702         CALL     ONEP
                                   2703         CALL     SWAPP
                                   2704         CALL     ONEM
                                   2705 NUMQ1:  CALL     OVER
                                   2706         CALL     CAT
                                   2707         CALL     DOLIT
                                   2708         .word     45	; "-"
                                   2709         CALL     EQUAL
                                   2710         CALL     TOR
                                   2711         CALL     SWAPP
                                   2712         CALL     RAT
                                   2713         CALL     SUBB
                                   2714         CALL     SWAPP
                                   2715         CALL     RAT
                                   2716         CALL     PLUS
                                   2717         CALL     QDUP
                                   2718         CALL     QBRAN
                                   2719         .word      NUMQ6
                                   2720         CALL     ONEM
                                   2721         CALL     TOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                   2722 NUMQ2:  CALL     DUPP
                                   2723         CALL     TOR
                                   2724         CALL     CAT
                                   2725         CALL     BASE
                                   2726         CALL     AT
                                   2727         CALL     DIGTQ
                                   2728         CALL     QBRAN
                                   2729         .word      NUMQ4
                                   2730         CALL     SWAPP
                                   2731         CALL     BASE
                                   2732         CALL     AT
                                   2733         CALL     STAR
                                   2734         CALL     PLUS
                                   2735         CALL     RFROM
                                   2736         CALL     ONEP
                                   2737         CALL     DONXT
                                   2738         .word      NUMQ2
                                   2739         CALL     RAT
                                   2740         CALL     SWAPP
                                   2741         CALL     DROP
                                   2742         CALL     QBRAN
                                   2743         .word      NUMQ3
                                   2744         CALL     NEGAT
                                   2745 NUMQ3:  CALL     SWAPP
                                   2746         JRA     NUMQ5
                                   2747 NUMQ4:  CALL     RFROM
                                   2748         CALL     RFROM
                                   2749         CALL     DDROP
                                   2750         CALL     DDROP
                                   2751         CALL     ZERO
                                   2752 NUMQ5:  CALL     DUPP
                                   2753 NUMQ6:  CALL     RFROM
                                   2754         CALL     DDROP
                                   2755         CALL     RFROM
                                   2756         CALL     BASE
                                   2757         JP     STORE
                                   2758 .endif ; WANT_DOUBLE  
                                   2759 
                                   2760 ;; Basic I/O
                                   2761 
                                   2762 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2763 ;       KEY     ( -- c )
                                   2764 ;       Wait for and return an
                                   2765 ;       input character.
                                   2766 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F09                       2767         _HEADER KEY,3,"KEY"
      000F09 0E C8                    1         .word LINK 
                           000F0B     2         LINK=.
      000F0B 03                       3         .byte 3  
      000F0C 4B 45 59                 4         .ascii "KEY"
      000F0F                          5         KEY:
      000F0F 72 0B 52 30 FB   [ 2] 2768         btjf UART_SR,#UART_SR_RXNE,. 
      000F14 C6 52 31         [ 1] 2769         ld a,UART_DR 
      000F17 1D 00 02         [ 2] 2770         subw x,#CELLL 
      000F1A E7 01            [ 1] 2771         ld (1,x),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      000F1C 7F               [ 1] 2772         clr (x)
      000F1D 81               [ 4] 2773         ret 
                                   2774 
                                   2775 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2776 ;       NUF?    ( -- t )
                                   2777 ;       Return false if no input,
                                   2778 ;       else pause and if CR return true.
                                   2779 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F1E                       2780         _HEADER NUFQ,4,"NUF?"
      000F1E 0F 0B                    1         .word LINK 
                           000F20     2         LINK=.
      000F20 04                       3         .byte 4  
      000F21 4E 55 46 3F              4         .ascii "NUF?"
      000F25                          5         NUFQ:
      000F25 CD 04 18         [ 4] 2781         CALL     QKEY
      000F28 CD 06 19         [ 4] 2782         CALL     DUPP
      000F2B CD 04 98         [ 4] 2783         CALL     QBRAN
      000F2E 0F 3E                 2784         .word    NUFQ1
      000F30 CD 08 1C         [ 4] 2785         CALL     DDROP
      000F33 CD 0F 0F         [ 4] 2786         CALL     KEY
      000F36 CD 04 6F         [ 4] 2787         CALL     DOLIT
      000F39 00 0D                 2788         .word      CRR
      000F3B CC 08 FA         [ 2] 2789         JP     EQUAL
      000F3E 81               [ 4] 2790 NUFQ1:  RET
                                   2791 
                                   2792 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2793 ;       SPACE   ( -- )
                                   2794 ;       Send  blank character to
                                   2795 ;       output device.
                                   2796 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F3F                       2797         _HEADER SPACE,5,"SPACE"
      000F3F 0F 20                    1         .word LINK 
                           000F41     2         LINK=.
      000F41 05                       3         .byte 5  
      000F42 53 50 41 43 45           4         .ascii "SPACE"
      000F47                          5         SPACE:
      000F47 CD 0B F6         [ 4] 2798         CALL     BLANK
      000F4A CC 04 36         [ 2] 2799         JP     EMIT
                                   2800 
                                   2801 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2802 ;       SPACES  ( +n -- )
                                   2803 ;       Send n spaces to output device.
                                   2804 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F4D                       2805         _HEADER SPACS,6,"SPACES"
      000F4D 0F 41                    1         .word LINK 
                           000F4F     2         LINK=.
      000F4F 06                       3         .byte 6  
      000F50 53 50 41 43 45 53        4         .ascii "SPACES"
      000F56                          5         SPACS:
      000F56 CD 0C 03         [ 4] 2806         CALL     ZERO
      000F59 CD 09 6B         [ 4] 2807         CALL     MAX
      000F5C CD 05 E2         [ 4] 2808         CALL     TOR
      000F5F 20 03            [ 2] 2809         JRA      CHAR2
      000F61 CD 0F 47         [ 4] 2810 CHAR1:  CALL     SPACE
      000F64 CD 04 83         [ 4] 2811 CHAR2:  CALL     DONXT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      000F67 0F 61                 2812         .word    CHAR1
      000F69 81               [ 4] 2813         RET
                                   2814 
                                   2815 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2816 ;       TYPE    ( b u -- )
                                   2817 ;       Output u characters from b.
                                   2818 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F6A                       2819         _HEADER TYPES,4,"TYPE"
      000F6A 0F 4F                    1         .word LINK 
                           000F6C     2         LINK=.
      000F6C 04                       3         .byte 4  
      000F6D 54 59 50 45              4         .ascii "TYPE"
      000F71                          5         TYPES:
      000F71 CD 05 E2         [ 4] 2820         CALL     TOR
      000F74 20 06            [ 2] 2821         JRA     TYPE2
      000F76 CD 0C C6         [ 4] 2822 TYPE1:  CALL     COUNT 
      000F79 CD 04 36         [ 4] 2823         CALL     EMIT
      000F7C                       2824 TYPE2:  _DONXT  TYPE1
      000F7C CD 04 83         [ 4]    1     CALL DONXT 
      000F7F 0F 76                    2     .word TYPE1 
      000F81 CC 06 0F         [ 2] 2825         JP     DROP
                                   2826 
                                   2827 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2828 ;       CR      ( -- )
                                   2829 ;       Output a carriage return
                                   2830 ;       and a line feed.
                                   2831 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F84                       2832         _HEADER CR,2,"CR"
      000F84 0F 6C                    1         .word LINK 
                           000F86     2         LINK=.
      000F86 02                       3         .byte 2  
      000F87 43 52                    4         .ascii "CR"
      000F89                          5         CR:
      000F89                       2833         _DOLIT  CRR 
      000F89 CD 04 6F         [ 4]    1     CALL DOLIT 
      000F8C 00 0D                    2     .word CRR 
      000F8E CD 04 36         [ 4] 2834         CALL    EMIT
      000F91                       2835         _DOLIT  LF
      000F91 CD 04 6F         [ 4]    1     CALL DOLIT 
      000F94 00 0A                    2     .word LF 
      000F96 CC 04 36         [ 2] 2836         JP      EMIT
                                   2837 
                                   2838 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2839 ;       do$     ( -- a )
                                   2840 ;       Return  address of a compiled
                                   2841 ;       string.
                                   2842 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2843 ;       _HEADER DOSTR,COMPO+3,"DO$"
      000F99                       2844 DOSTR:
      000F99 CD 05 34         [ 4] 2845         CALL     RFROM
      000F9C CD 05 45         [ 4] 2846         CALL     RAT
      000F9F CD 05 34         [ 4] 2847         CALL     RFROM
      000FA2 CD 0C C6         [ 4] 2848         CALL     COUNT
      000FA5 CD 08 3C         [ 4] 2849         CALL     PLUS
      000FA8 CD 05 E2         [ 4] 2850         CALL     TOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      000FAB CD 06 29         [ 4] 2851         CALL     SWAPP
      000FAE CD 05 E2         [ 4] 2852         CALL     TOR
      000FB1 81               [ 4] 2853         RET
                                   2854 
                                   2855 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2856 ;       $"|     ( -- a )
                                   2857 ;       Run time routine compiled by $".
                                   2858 ;       Return address of a compiled string.
                                   2859 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2860 ;       _HEADER STRQP,COMPO+3,"$\"|"
      000FB2                       2861 STRQP:
      000FB2 CD 0F 99         [ 4] 2862         CALL     DOSTR
      000FB5 81               [ 4] 2863         RET
                                   2864 
                                   2865 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2866 ;       ."|     ( -- )
                                   2867 ;       Run time routine of ." .
                                   2868 ;       Output a compiled string.
                                   2869 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2870 ;       _HEADER DOTQP,COMPO+3,".\"|"
      000FB6                       2871 DOTQP:
      000FB6 CD 0F 99         [ 4] 2872         CALL     DOSTR
      000FB9 CD 0C C6         [ 4] 2873         CALL     COUNT
      000FBC CC 0F 71         [ 2] 2874         JP     TYPES
                                   2875 
                                   2876 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2877 ;       .R      ( n +n -- )
                                   2878 ;       Display an integer in a field
                                   2879 ;       of n columns, right justified.
                                   2880 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000FBF                       2881         _HEADER DOTR,2,".R"
      000FBF 0F 86                    1         .word LINK 
                           000FC1     2         LINK=.
      000FC1 02                       3         .byte 2  
      000FC2 2E 52                    4         .ascii ".R"
      000FC4                          5         DOTR:
      000FC4 CD 05 E2         [ 4] 2882         CALL     TOR
      000FC7 CD 0E 88         [ 4] 2883         CALL     STR
      000FCA CD 05 34         [ 4] 2884         CALL     RFROM
      000FCD CD 06 41         [ 4] 2885         CALL     OVER
      000FD0 CD 08 D2         [ 4] 2886         CALL     SUBB
      000FD3 CD 0F 56         [ 4] 2887         CALL     SPACS
      000FD6 CC 0F 71         [ 2] 2888         JP     TYPES
                                   2889 
                                   2890 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2891 ;       U.R     ( u +n -- )
                                   2892 ;       Display an unsigned integer
                                   2893 ;       in n column, right justified.
                                   2894 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000FD9                       2895         _HEADER UDOTR,3,"U.R"
      000FD9 0F C1                    1         .word LINK 
                           000FDB     2         LINK=.
      000FDB 03                       3         .byte 3  
      000FDC 55 2E 52                 4         .ascii "U.R"
      000FDF                          5         UDOTR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      000FDF CD 05 E2         [ 4] 2896         CALL     TOR
      000FE2 CD 0E 0B         [ 4] 2897         CALL     BDIGS
      000FE5 CD 0E 45         [ 4] 2898         CALL     DIGS
      000FE8 CD 0E 70         [ 4] 2899         CALL     EDIGS
      000FEB CD 05 34         [ 4] 2900         CALL     RFROM
      000FEE CD 06 41         [ 4] 2901         CALL     OVER
      000FF1 CD 08 D2         [ 4] 2902         CALL     SUBB
      000FF4 CD 0F 56         [ 4] 2903         CALL     SPACS
      000FF7 CC 0F 71         [ 2] 2904         JP     TYPES
                                   2905 
                                   2906 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2907 ;       U.      ( u -- )
                                   2908 ;       Display an unsigned integer
                                   2909 ;       in free format.
                                   2910 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000FFA                       2911         _HEADER UDOT,2,"U."
      000FFA 0F DB                    1         .word LINK 
                           000FFC     2         LINK=.
      000FFC 02                       3         .byte 2  
      000FFD 55 2E                    4         .ascii "U."
      000FFF                          5         UDOT:
      000FFF CD 0E 0B         [ 4] 2912         CALL     BDIGS
      001002 CD 0E 45         [ 4] 2913         CALL     DIGS
      001005 CD 0E 70         [ 4] 2914         CALL     EDIGS
      001008 CD 0F 47         [ 4] 2915         CALL     SPACE
      00100B CC 0F 71         [ 2] 2916         JP     TYPES
                                   2917 
                                   2918 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2919 ;   H. ( n -- )
                                   2920 ;   display n in hexadecimal 
                                   2921 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00100E                       2922         _HEADER HDOT,2,"H."
      00100E 0F FC                    1         .word LINK 
                           001010     2         LINK=.
      001010 02                       3         .byte 2  
      001011 48 2E                    4         .ascii "H."
      001013                          5         HDOT:
      001013 CD 06 DF         [ 4] 2923         CALL BASE 
      001016 CD 04 E3         [ 4] 2924         CALL AT 
      001019 CD 05 E2         [ 4] 2925         CALL TOR 
      00101C CD 0E A6         [ 4] 2926         CALL HEX 
      00101F CD 0F FF         [ 4] 2927         CALL UDOT 
      001022 CD 05 34         [ 4] 2928         CALL RFROM 
      001025 CD 06 DF         [ 4] 2929         CALL BASE 
      001028 CD 04 D1         [ 4] 2930         CALL STORE 
      00102B 81               [ 4] 2931         RET 
                                   2932 
                                   2933 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2934 ;       .       ( w -- )
                                   2935 ;       Display an integer in free
                                   2936 ;       format, preceeded by a space.
                                   2937 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00102C                       2938         _HEADER DOT,1,"."
      00102C 10 10                    1         .word LINK 
                           00102E     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      00102E 01                       3         .byte 1  
      00102F 2E                       4         .ascii "."
      001030                          5         DOT:
      001030 CD 06 DF         [ 4] 2939         CALL     BASE
      001033 CD 04 E3         [ 4] 2940         CALL     AT
      001036 CD 04 6F         [ 4] 2941         CALL     DOLIT
      001039 00 0A                 2942         .word      10
      00103B CD 06 9F         [ 4] 2943         CALL     XORR    ;?decimal
      00103E CD 04 98         [ 4] 2944         CALL     QBRAN
      001041 10 46                 2945         .word      DOT1
      001043 CC 0F FF         [ 2] 2946         JP     UDOT
      001046 CD 0E 88         [ 4] 2947 DOT1:   CALL     STR
      001049 CD 0F 47         [ 4] 2948         CALL     SPACE
      00104C CC 0F 71         [ 2] 2949         JP     TYPES
                                   2950 
                                   2951 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2952 ;       ?       ( a -- )
                                   2953 ;       Display contents in memory cell.
                                   2954 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00104F                       2955         _HEADER QUEST,1,"?"
      00104F 10 2E                    1         .word LINK 
                           001051     2         LINK=.
      001051 01                       3         .byte 1  
      001052 3F                       4         .ascii "?"
      001053                          5         QUEST:
      001053 CD 04 E3         [ 4] 2956         CALL     AT
      001056 CC 10 30         [ 2] 2957         JP     DOT
                                   2958 
                                   2959 ;; Parsing
                                   2960 
                                   2961 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2962 ;       parse   ( b u c -- b u delta ; <string> )
                                   2963 ;       Scan string delimited by c.
                                   2964 ;       Return found string and its offset.
                                   2965 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001059                       2966         _HEADER PARS,5,"PARS$"
      001059 10 51                    1         .word LINK 
                           00105B     2         LINK=.
      00105B 05                       3         .byte 5  
      00105C 50 41 52 53 24           4         .ascii "PARS$"
      001061                          5         PARS:
      001061 CD 06 EE         [ 4] 2967         CALL     TEMP
      001064 CD 04 D1         [ 4] 2968         CALL     STORE
      001067 CD 06 41         [ 4] 2969         CALL     OVER
      00106A CD 05 E2         [ 4] 2970         CALL     TOR
      00106D CD 06 19         [ 4] 2971         CALL     DUPP
      001070 CD 04 98         [ 4] 2972         CALL     QBRAN
      001073 11 19                 2973         .word    PARS8
      001075 CD 0B A4         [ 4] 2974         CALL     ONEM
      001078 CD 06 EE         [ 4] 2975         CALL     TEMP
      00107B CD 04 E3         [ 4] 2976         CALL     AT
      00107E CD 0B F6         [ 4] 2977         CALL     BLANK
      001081 CD 08 FA         [ 4] 2978         CALL     EQUAL
      001084 CD 04 98         [ 4] 2979         CALL     QBRAN
      001087 10 BA                 2980         .word      PARS3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      001089 CD 05 E2         [ 4] 2981         CALL     TOR
      00108C CD 0B F6         [ 4] 2982 PARS1:  CALL     BLANK
      00108F CD 06 41         [ 4] 2983         CALL     OVER
      001092 CD 05 01         [ 4] 2984         CALL     CAT     ;skip leading blanks ONLY
      001095 CD 08 D2         [ 4] 2985         CALL     SUBB
      001098 CD 06 50         [ 4] 2986         CALL     ZLESS
      00109B CD 08 75         [ 4] 2987         CALL     INVER
      00109E CD 04 98         [ 4] 2988         CALL     QBRAN
      0010A1 10 B7                 2989         .word      PARS2
      0010A3 CD 0B 97         [ 4] 2990         CALL     ONEP
      0010A6 CD 04 83         [ 4] 2991         CALL     DONXT
      0010A9 10 8C                 2992         .word      PARS1
      0010AB CD 05 34         [ 4] 2993         CALL     RFROM
      0010AE CD 06 0F         [ 4] 2994         CALL     DROP
      0010B1 CD 0C 03         [ 4] 2995         CALL     ZERO
      0010B4 CC 06 19         [ 2] 2996         JP     DUPP
      0010B7 CD 05 34         [ 4] 2997 PARS2:  CALL     RFROM
      0010BA CD 06 41         [ 4] 2998 PARS3:  CALL     OVER
      0010BD CD 06 29         [ 4] 2999         CALL     SWAPP
      0010C0 CD 05 E2         [ 4] 3000         CALL     TOR
      0010C3 CD 06 EE         [ 4] 3001 PARS4:  CALL     TEMP
      0010C6 CD 04 E3         [ 4] 3002         CALL     AT
      0010C9 CD 06 41         [ 4] 3003         CALL     OVER
      0010CC CD 05 01         [ 4] 3004         CALL     CAT
      0010CF CD 08 D2         [ 4] 3005         CALL     SUBB    ;scan for delimiter
      0010D2 CD 06 EE         [ 4] 3006         CALL     TEMP
      0010D5 CD 04 E3         [ 4] 3007         CALL     AT
      0010D8 CD 0B F6         [ 4] 3008         CALL     BLANK
      0010DB CD 08 FA         [ 4] 3009         CALL     EQUAL
      0010DE CD 04 98         [ 4] 3010         CALL     QBRAN
      0010E1 10 E6                 3011         .word      PARS5
      0010E3 CD 06 50         [ 4] 3012         CALL     ZLESS
      0010E6 CD 04 98         [ 4] 3013 PARS5:  CALL     QBRAN
      0010E9 10 FB                 3014         .word      PARS6
      0010EB CD 0B 97         [ 4] 3015         CALL     ONEP
      0010EE CD 04 83         [ 4] 3016         CALL     DONXT
      0010F1 10 C3                 3017         .word      PARS4
      0010F3 CD 06 19         [ 4] 3018         CALL     DUPP
      0010F6 CD 05 E2         [ 4] 3019         CALL     TOR
      0010F9 20 0F            [ 2] 3020         JRA     PARS7
      0010FB CD 05 34         [ 4] 3021 PARS6:  CALL     RFROM
      0010FE CD 06 0F         [ 4] 3022         CALL     DROP
      001101 CD 06 19         [ 4] 3023         CALL     DUPP
      001104 CD 0B 97         [ 4] 3024         CALL     ONEP
      001107 CD 05 E2         [ 4] 3025         CALL     TOR
      00110A CD 06 41         [ 4] 3026 PARS7:  CALL     OVER
      00110D CD 08 D2         [ 4] 3027         CALL     SUBB
      001110 CD 05 34         [ 4] 3028         CALL     RFROM
      001113 CD 05 34         [ 4] 3029         CALL     RFROM
      001116 CC 08 D2         [ 2] 3030         JP     SUBB
      001119 CD 06 41         [ 4] 3031 PARS8:  CALL     OVER
      00111C CD 05 34         [ 4] 3032         CALL     RFROM
      00111F CC 08 D2         [ 2] 3033         JP     SUBB
                                   3034 
                                   3035 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



                                   3036 ;       PARSE   ( c -- b u ; <string> )
                                   3037 ;       Scan input stream and return
                                   3038 ;       counted string delimited by c.
                                   3039 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001122                       3040         _HEADER PARSE,5,"PARSE"
      001122 10 5B                    1         .word LINK 
                           001124     2         LINK=.
      001124 05                       3         .byte 5  
      001125 50 41 52 53 45           4         .ascii "PARSE"
      00112A                          5         PARSE:
      00112A CD 05 E2         [ 4] 3041         CALL     TOR
      00112D CD 0C FF         [ 4] 3042         CALL     TIB
      001130 CD 06 FD         [ 4] 3043         CALL     INN
      001133 CD 04 E3         [ 4] 3044         CALL     AT
      001136 CD 08 3C         [ 4] 3045         CALL     PLUS    ;current input buffer pointer
      001139 CD 07 0D         [ 4] 3046         CALL     NTIB
      00113C CD 04 E3         [ 4] 3047         CALL     AT
      00113F CD 06 FD         [ 4] 3048         CALL     INN
      001142 CD 04 E3         [ 4] 3049         CALL     AT
      001145 CD 08 D2         [ 4] 3050         CALL     SUBB    ;remaining count
      001148 CD 05 34         [ 4] 3051         CALL     RFROM
      00114B CD 10 61         [ 4] 3052         CALL     PARS
      00114E CD 06 FD         [ 4] 3053         CALL     INN
      001151 CC 0C 73         [ 2] 3054         JP     PSTOR
                                   3055 
                                   3056 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3057 ;       .(      ( -- )
                                   3058 ;       Output following string up to next ) .
                                   3059 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001154                       3060         _HEADER DOTPR,IMEDD+2,".("
      001154 11 24                    1         .word LINK 
                           001156     2         LINK=.
      001156 82                       3         .byte IMEDD+2  
      001157 2E 28                    4         .ascii ".("
      001159                          5         DOTPR:
      001159 CD 04 6F         [ 4] 3061         CALL     DOLIT
      00115C 00 29                 3062         .word     41	; ")"
      00115E CD 11 2A         [ 4] 3063         CALL     PARSE
      001161 CC 0F 71         [ 2] 3064         JP     TYPES
                                   3065 
                                   3066 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3067 ;       (       ( -- )
                                   3068 ;       Ignore following string up to next ).
                                   3069 ;       A comment.
                                   3070 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001164                       3071         _HEADER PAREN,IMEDD+1,"("
      001164 11 56                    1         .word LINK 
                           001166     2         LINK=.
      001166 81                       3         .byte IMEDD+1  
      001167 28                       4         .ascii "("
      001168                          5         PAREN:
      001168 CD 04 6F         [ 4] 3072         CALL     DOLIT
      00116B 00 29                 3073         .word     41	; ")"
      00116D CD 11 2A         [ 4] 3074         CALL     PARSE
      001170 CC 08 1C         [ 2] 3075         JP     DDROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                   3076 
                                   3077 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3078 ;       \       ( -- )
                                   3079 ;       Ignore following text till
                                   3080 ;       end of line.
                                   3081 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001173                       3082         _HEADER BKSLA,IMEDD+1,"\\"
      001173 11 66                    1         .word LINK 
                           001175     2         LINK=.
      001175 81                       3         .byte IMEDD+1  
      001176 5C 5C                    4         .ascii "\\"
      001178                          5         BKSLA:
      001178 90 AE 00 0E      [ 2] 3083         ldw y,#UCTIB ; #TIB  
      00117C 90 FE            [ 2] 3084         ldw y,(y)
      00117E 90 89            [ 2] 3085         pushw y ; count in TIB 
      001180 90 AE 00 0C      [ 2] 3086         ldw y,#UINN ; >IN 
      001184 90 BF 26         [ 2] 3087         ldw YTEMP,y
      001187 90 85            [ 2] 3088         popw y 
      001189 91 CF 26         [ 5] 3089         ldw [YTEMP],y
      00118C 81               [ 4] 3090         ret 
                                   3091 
                                   3092 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3093 ;       WORD    ( c -- a ; <string> )
                                   3094 ;       Parse a word from input stream
                                   3095 ;       and copy it to code dictionary.
                                   3096 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00118D                       3097         _HEADER WORDD,4,"WORD"
      00118D 11 75                    1         .word LINK 
                           00118F     2         LINK=.
      00118F 04                       3         .byte 4  
      001190 57 4F 52 44              4         .ascii "WORD"
      001194                          5         WORDD:
      001194 CD 11 2A         [ 4] 3098         CALL     PARSE
      001197 CD 0C DD         [ 4] 3099         CALL     HERE
      00119A CD 0B 6C         [ 4] 3100         CALL     CELLP
                           000000  3101 .IF CASE_SENSE 
                                   3102         JP      PACKS 
                           000001  3103 .ELSE                 
      00119D CD 0D AE         [ 4] 3104         CALL     PACKS
                                   3105 ; uppercase TOKEN 
      0011A0 CD 06 19         [ 4] 3106         CALL    DUPP 
      0011A3 CD 0C C6         [ 4] 3107         CALL    COUNT 
      0011A6 CD 05 E2         [ 4] 3108         CALL    TOR 
      0011A9 CD 04 B4         [ 4] 3109         CALL    BRAN 
      0011AC 11 DA                 3110         .word   UPPER2  
      0011AE                       3111 UPPER:
      0011AE CD 06 19         [ 4] 3112         CALL    DUPP 
      0011B1 CD 05 01         [ 4] 3113         CALL    CAT
      0011B4 CD 06 19         [ 4] 3114         CALL    DUPP 
      0011B7 CD 04 6F         [ 4] 3115         CALL   DOLIT
      0011BA 00 61                 3116         .word   'a' 
      0011BC CD 04 6F         [ 4] 3117         CALL    DOLIT
      0011BF 00 7B                 3118         .word   'z'+1 
      0011C1 CD 09 96         [ 4] 3119         CALL   WITHI 
      0011C4 CD 04 98         [ 4] 3120         CALL   QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      0011C7 11 D1                 3121         .word  UPPER1  
      0011C9 CD 04 6F         [ 4] 3122         CALL    DOLIT 
      0011CC 00 DF                 3123         .word   0xDF 
      0011CE CD 06 76         [ 4] 3124         CALL    ANDD 
      0011D1                       3125 UPPER1:
      0011D1 CD 06 41         [ 4] 3126         CALL    OVER 
      0011D4 CD 04 F0         [ 4] 3127         CALL    CSTOR          
      0011D7 CD 0B 97         [ 4] 3128         CALL    ONEP 
      0011DA                       3129 UPPER2: 
      0011DA CD 04 83         [ 4] 3130         CALL    DONXT
      0011DD 11 AE                 3131         .word   UPPER  
      0011DF CD 06 0F         [ 4] 3132         CALL    DROP  
      0011E2 81               [ 4] 3133         RET 
                                   3134 .ENDIF 
                                   3135 
                                   3136 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3137 ;       TOKEN   ( -- a ; <string> )
                                   3138 ;       Parse a word from input stream
                                   3139 ;       and copy it to name dictionary.
                                   3140 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0011E3                       3141         _HEADER TOKEN,5,"TOKEN"
      0011E3 11 8F                    1         .word LINK 
                           0011E5     2         LINK=.
      0011E5 05                       3         .byte 5  
      0011E6 54 4F 4B 45 4E           4         .ascii "TOKEN"
      0011EB                          5         TOKEN:
      0011EB CD 0B F6         [ 4] 3142         CALL     BLANK
      0011EE CC 11 94         [ 2] 3143         JP     WORDD
                                   3144 
                                   3145 ;; Dictionary search
                                   3146 
                                   3147 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3148 ;       NAME>   ( na -- ca )
                                   3149 ;       Return a code address given
                                   3150 ;       a name address.
                                   3151 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0011F1                       3152         _HEADER NAMET,5,"NAME>"
      0011F1 11 E5                    1         .word LINK 
                           0011F3     2         LINK=.
      0011F3 05                       3         .byte 5  
      0011F4 4E 41 4D 45 3E           4         .ascii "NAME>"
      0011F9                          5         NAMET:
      0011F9 CD 0C C6         [ 4] 3153         CALL     COUNT
      0011FC CD 04 6F         [ 4] 3154         CALL     DOLIT
      0011FF 00 1F                 3155         .word      31
      001201 CD 06 76         [ 4] 3156         CALL     ANDD
      001204 CC 08 3C         [ 2] 3157         JP     PLUS
                                   3158 
                                   3159 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3160 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   3161 ;       Compare u cells in two
                                   3162 ;       strings. Return 0 if identical.
                                   3163 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001207                       3164         _HEADER SAMEQ,5,"SAME?"
      001207 11 F3                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                           001209     2         LINK=.
      001209 05                       3         .byte 5  
      00120A 53 41 4D 45 3F           4         .ascii "SAME?"
      00120F                          5         SAMEQ:
      00120F CD 0B A4         [ 4] 3165         CALL     ONEM
      001212 CD 05 E2         [ 4] 3166         CALL     TOR
      001215 20 29            [ 2] 3167         JRA     SAME2
      001217 CD 06 41         [ 4] 3168 SAME1:  CALL     OVER
      00121A CD 05 45         [ 4] 3169         CALL     RAT
      00121D CD 08 3C         [ 4] 3170         CALL     PLUS
      001220 CD 05 01         [ 4] 3171         CALL     CAT
      001223 CD 06 41         [ 4] 3172         CALL     OVER
      001226 CD 05 45         [ 4] 3173         CALL     RAT
      001229 CD 08 3C         [ 4] 3174         CALL     PLUS
      00122C CD 05 01         [ 4] 3175         CALL     CAT
      00122F CD 08 D2         [ 4] 3176         CALL     SUBB
      001232 CD 07 CC         [ 4] 3177         CALL     QDUP
      001235 CD 04 98         [ 4] 3178         CALL     QBRAN
      001238 12 40                 3179         .word      SAME2
      00123A CD 05 34         [ 4] 3180         CALL     RFROM
      00123D CC 06 0F         [ 2] 3181         JP     DROP
      001240 CD 04 83         [ 4] 3182 SAME2:  CALL     DONXT
      001243 12 17                 3183         .word      SAME1
      001245 CC 0C 03         [ 2] 3184         JP     ZERO
                                   3185 
                                   3186 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3187 ;       find    ( a va -- ca na | a F )
                                   3188 ;       Search vocabulary for string.
                                   3189 ;       Return ca and na if succeeded.
                                   3190 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001248                       3191         _HEADER FIND,4,"FIND"
      001248 12 09                    1         .word LINK 
                           00124A     2         LINK=.
      00124A 04                       3         .byte 4  
      00124B 46 49 4E 44              4         .ascii "FIND"
      00124F                          5         FIND:
      00124F CD 06 29         [ 4] 3192         CALL     SWAPP
      001252 CD 06 19         [ 4] 3193         CALL     DUPP
      001255 CD 05 01         [ 4] 3194         CALL     CAT
      001258 CD 06 EE         [ 4] 3195         CALL     TEMP
      00125B CD 04 D1         [ 4] 3196         CALL     STORE
      00125E CD 06 19         [ 4] 3197         CALL     DUPP
      001261 CD 04 E3         [ 4] 3198         CALL     AT
      001264 CD 05 E2         [ 4] 3199         CALL     TOR
      001267 CD 0B 6C         [ 4] 3200         CALL     CELLP
      00126A CD 06 29         [ 4] 3201         CALL     SWAPP
      00126D CD 04 E3         [ 4] 3202 FIND1:  CALL     AT
      001270 CD 06 19         [ 4] 3203         CALL     DUPP
      001273 CD 04 98         [ 4] 3204         CALL     QBRAN
      001276 12 AC                 3205         .word      FIND6
      001278 CD 06 19         [ 4] 3206         CALL     DUPP
      00127B CD 04 E3         [ 4] 3207         CALL     AT
      00127E CD 04 6F         [ 4] 3208         CALL     DOLIT
      001281 1F 7F                 3209         .word      MASKK
      001283 CD 06 76         [ 4] 3210         CALL     ANDD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      001286 CD 05 45         [ 4] 3211         CALL     RAT
      001289 CD 06 9F         [ 4] 3212         CALL     XORR
      00128C CD 04 98         [ 4] 3213         CALL     QBRAN
      00128F 12 9B                 3214         .word      FIND2
      001291 CD 0B 6C         [ 4] 3215         CALL     CELLP
      001294 CD 04 6F         [ 4] 3216         CALL     DOLIT
      001297 FF FF                 3217         .word     0xFFFF
      001299 20 0C            [ 2] 3218         JRA     FIND3
      00129B CD 0B 6C         [ 4] 3219 FIND2:  CALL     CELLP
      00129E CD 06 EE         [ 4] 3220         CALL     TEMP
      0012A1 CD 04 E3         [ 4] 3221         CALL     AT
      0012A4 CD 12 0F         [ 4] 3222         CALL     SAMEQ
      0012A7 CD 04 B4         [ 4] 3223 FIND3:  CALL     BRAN
      0012AA 12 BB                 3224         .word      FIND4
      0012AC CD 05 34         [ 4] 3225 FIND6:  CALL     RFROM
      0012AF CD 06 0F         [ 4] 3226         CALL     DROP
      0012B2 CD 06 29         [ 4] 3227         CALL     SWAPP
      0012B5 CD 0B 7B         [ 4] 3228         CALL     CELLM
      0012B8 CC 06 29         [ 2] 3229         JP     SWAPP
      0012BB CD 04 98         [ 4] 3230 FIND4:  CALL     QBRAN
      0012BE 12 C8                 3231         .word      FIND5
      0012C0 CD 0B 7B         [ 4] 3232         CALL     CELLM
      0012C3 CD 0B 7B         [ 4] 3233         CALL     CELLM
      0012C6 20 A5            [ 2] 3234         JRA     FIND1
      0012C8 CD 05 34         [ 4] 3235 FIND5:  CALL     RFROM
      0012CB CD 06 0F         [ 4] 3236         CALL     DROP
      0012CE CD 06 29         [ 4] 3237         CALL     SWAPP
      0012D1 CD 06 0F         [ 4] 3238         CALL     DROP
      0012D4 CD 0B 7B         [ 4] 3239         CALL     CELLM
      0012D7 CD 06 19         [ 4] 3240         CALL     DUPP
      0012DA CD 11 F9         [ 4] 3241         CALL     NAMET
      0012DD CC 06 29         [ 2] 3242         JP     SWAPP
                                   3243 
                                   3244 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3245 ;       NAME?   ( a -- ca na | a F )
                                   3246 ;       Search vocabularies for a string.
                                   3247 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0012E0                       3248         _HEADER NAMEQ,5,"NAME?"
      0012E0 12 4A                    1         .word LINK 
                           0012E2     2         LINK=.
      0012E2 05                       3         .byte 5  
      0012E3 4E 41 4D 45 3F           4         .ascii "NAME?"
      0012E8                          5         NAMEQ:
      0012E8 CD 07 62         [ 4] 3249         CALL   CNTXT
      0012EB CC 12 4F         [ 2] 3250         JP     FIND
                                   3251 
                                   3252 ;; Terminal response
                                   3253 
                                   3254 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3255 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3256 ;       Backup cursor by one character.
                                   3257 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0012EE                       3258         _HEADER BKSP,2,"^H"
      0012EE 12 E2                    1         .word LINK 
                           0012F0     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      0012F0 02                       3         .byte 2  
      0012F1 5E 48                    4         .ascii "^H"
      0012F3                          5         BKSP:
      0012F3 CD 05 E2         [ 4] 3259         CALL     TOR
      0012F6 CD 06 41         [ 4] 3260         CALL     OVER
      0012F9 CD 05 34         [ 4] 3261         CALL     RFROM
      0012FC CD 06 29         [ 4] 3262         CALL     SWAPP
      0012FF CD 06 41         [ 4] 3263         CALL     OVER
      001302 CD 06 9F         [ 4] 3264         CALL     XORR
      001305 CD 04 98         [ 4] 3265         CALL     QBRAN
      001308 13 23                 3266         .word      BACK1
      00130A CD 04 6F         [ 4] 3267         CALL     DOLIT
      00130D 00 08                 3268         .word      BKSPP
      00130F CD 04 36         [ 4] 3269         CALL     EMIT
      001312 CD 0B A4         [ 4] 3270         CALL     ONEM
      001315 CD 0B F6         [ 4] 3271         CALL     BLANK
      001318 CD 04 36         [ 4] 3272         CALL     EMIT
      00131B CD 04 6F         [ 4] 3273         CALL     DOLIT
      00131E 00 08                 3274         .word      BKSPP
      001320 CC 04 36         [ 2] 3275         JP     EMIT
      001323 81               [ 4] 3276 BACK1:  RET
                                   3277 
                                   3278 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3279 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3280 ;       Accept and echo key stroke
                                   3281 ;       and bump cursor.
                                   3282 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001324                       3283         _HEADER TAP,3,"TAP"
      001324 12 F0                    1         .word LINK 
                           001326     2         LINK=.
      001326 03                       3         .byte 3  
      001327 54 41 50                 4         .ascii "TAP"
      00132A                          5         TAP:
      00132A CD 06 19         [ 4] 3284         CALL     DUPP
      00132D CD 04 36         [ 4] 3285         CALL     EMIT
      001330 CD 06 41         [ 4] 3286         CALL     OVER
      001333 CD 04 F0         [ 4] 3287         CALL     CSTOR
      001336 CC 0B 97         [ 2] 3288         JP     ONEP
                                   3289 
                                   3290 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3291 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3292 ;       Process a key stroke,
                                   3293 ;       CR,LF or backspace.
                                   3294 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001339                       3295         _HEADER KTAP,4,"KTAP"
      001339 13 26                    1         .word LINK 
                           00133B     2         LINK=.
      00133B 04                       3         .byte 4  
      00133C 4B 54 41 50              4         .ascii "KTAP"
      001340                          5         KTAP:
      001340 CD 06 19         [ 4] 3296         CALL     DUPP
      001343 CD 04 6F         [ 4] 3297         CALL     DOLIT
                           000001  3298 .if EOL_CR
      001346 00 0D                 3299         .word   CRR
                           000000  3300 .else ; EOL_LF 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                                   3301         .word   LF
                                   3302 .endif 
      001348 CD 06 9F         [ 4] 3303         CALL     XORR
      00134B CD 04 98         [ 4] 3304         CALL     QBRAN
      00134E 13 66                 3305         .word      KTAP2
      001350 CD 04 6F         [ 4] 3306         CALL     DOLIT
      001353 00 08                 3307         .word      BKSPP
      001355 CD 06 9F         [ 4] 3308         CALL     XORR
      001358 CD 04 98         [ 4] 3309         CALL     QBRAN
      00135B 13 63                 3310         .word      KTAP1
      00135D CD 0B F6         [ 4] 3311         CALL     BLANK
      001360 CC 13 2A         [ 2] 3312         JP     TAP
      001363 CC 12 F3         [ 2] 3313 KTAP1:  JP     BKSP
      001366 CD 06 0F         [ 4] 3314 KTAP2:  CALL     DROP
      001369 CD 06 29         [ 4] 3315         CALL     SWAPP
      00136C CD 06 0F         [ 4] 3316         CALL     DROP
      00136F CC 06 19         [ 2] 3317         JP     DUPP
                                   3318 
                                   3319 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3320 ;       accept  ( b u -- b u )
                                   3321 ;       Accept characters to input
                                   3322 ;       buffer. Return with actual count.
                                   3323 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001372                       3324         _HEADER ACCEP,6,"ACCEPT"
      001372 13 3B                    1         .word LINK 
                           001374     2         LINK=.
      001374 06                       3         .byte 6  
      001375 41 43 43 45 50 54        4         .ascii "ACCEPT"
      00137B                          5         ACCEP:
      00137B CD 06 41         [ 4] 3325         CALL     OVER
      00137E CD 08 3C         [ 4] 3326         CALL     PLUS
      001381 CD 06 41         [ 4] 3327         CALL     OVER
      001384 CD 08 27         [ 4] 3328 ACCP1:  CALL     DDUP
      001387 CD 06 9F         [ 4] 3329         CALL     XORR
      00138A CD 04 98         [ 4] 3330         CALL     QBRAN
      00138D 13 AF                 3331         .word      ACCP4
      00138F CD 0F 0F         [ 4] 3332         CALL     KEY
      001392 CD 06 19         [ 4] 3333         CALL     DUPP
      001395 CD 0B F6         [ 4] 3334         CALL     BLANK
      001398 CD 04 6F         [ 4] 3335         CALL     DOLIT
      00139B 00 7F                 3336         .word      127
      00139D CD 09 96         [ 4] 3337         CALL     WITHI
      0013A0 CD 04 98         [ 4] 3338         CALL     QBRAN
      0013A3 13 AA                 3339         .word      ACCP2
      0013A5 CD 13 2A         [ 4] 3340         CALL     TAP
      0013A8 20 03            [ 2] 3341         JRA     ACCP3
      0013AA CD 13 40         [ 4] 3342 ACCP2:  CALL     KTAP
      0013AD 20 D5            [ 2] 3343 ACCP3:  JRA     ACCP1
      0013AF CD 06 0F         [ 4] 3344 ACCP4:  CALL     DROP
      0013B2 CD 06 41         [ 4] 3345         CALL     OVER
      0013B5 CC 08 D2         [ 2] 3346         JP     SUBB
                                   3347 
                                   3348 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3349 ;       QUERY   ( -- )
                                   3350 ;       Accept input stream to
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                   3351 ;       terminal input buffer.
                                   3352 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0013B8                       3353         _HEADER QUERY,5,"QUERY"
      0013B8 13 74                    1         .word LINK 
                           0013BA     2         LINK=.
      0013BA 05                       3         .byte 5  
      0013BB 51 55 45 52 59           4         .ascii "QUERY"
      0013C0                          5         QUERY:
      0013C0 CD 0C FF         [ 4] 3354         CALL     TIB
      0013C3 CD 04 6F         [ 4] 3355         CALL     DOLIT
      0013C6 00 50                 3356         .word      80
      0013C8 CD 13 7B         [ 4] 3357         CALL     ACCEP
      0013CB CD 07 0D         [ 4] 3358         CALL     NTIB
      0013CE CD 04 D1         [ 4] 3359         CALL     STORE
      0013D1 CD 06 0F         [ 4] 3360         CALL     DROP
      0013D4 CD 0C 03         [ 4] 3361         CALL     ZERO
      0013D7 CD 06 FD         [ 4] 3362         CALL     INN
      0013DA CC 04 D1         [ 2] 3363         JP     STORE
                                   3364 
                                   3365 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3366 ;       ABORT   ( -- )
                                   3367 ;       Reset data stack and
                                   3368 ;       jump to QUIT.
                                   3369 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0013DD                       3370         _HEADER ABORT,5,"ABORT"
      0013DD 13 BA                    1         .word LINK 
                           0013DF     2         LINK=.
      0013DF 05                       3         .byte 5  
      0013E0 41 42 4F 52 54           4         .ascii "ABORT"
      0013E5                          5         ABORT:
      0013E5 CD 14 DC         [ 4] 3371         CALL     PRESE
      0013E8 CC 14 F9         [ 2] 3372         JP     QUIT
                                   3373 
                                   3374 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3375 ;       abort"  ( f -- )
                                   3376 ;       Run time routine of ABORT".
                                   3377 ;       Abort with a message.
                                   3378 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0013EB                       3379         _HEADER ABORQ,COMPO+6,'ABORT"'
      0013EB 13 DF                    1         .word LINK 
                           0013ED     2         LINK=.
      0013ED 46                       3         .byte COMPO+6  
      0013EE 41 42 4F 52 54 22        4         .ascii 'ABORT"'
      0013F4                          5         ABORQ:
      0013F4 CD 04 98         [ 4] 3380         CALL     QBRAN
      0013F7 14 13                 3381         .word      ABOR2   ;text flag
      0013F9 CD 0F 99         [ 4] 3382         CALL     DOSTR
      0013FC CD 0F 47         [ 4] 3383 ABOR1:  CALL     SPACE
      0013FF CD 0C C6         [ 4] 3384         CALL     COUNT
      001402 CD 0F 71         [ 4] 3385         CALL     TYPES
      001405 CD 04 6F         [ 4] 3386         CALL     DOLIT
      001408 00 3F                 3387         .word     63 ; "?"
      00140A CD 04 36         [ 4] 3388         CALL     EMIT
      00140D CD 0F 89         [ 4] 3389         CALL     CR
      001410 CC 13 E5         [ 2] 3390         JP     ABORT   ;pass error string
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      001413 CD 0F 99         [ 4] 3391 ABOR2:  CALL     DOSTR
      001416 CC 06 0F         [ 2] 3392         JP     DROP
                                   3393 
                                   3394 ;; The text interpreter
                                   3395 
                                   3396 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3397 ;       $INTERPRET      ( a -- )
                                   3398 ;       Interpret a word. If failed,
                                   3399 ;       try to convert it to an integer.
                                   3400 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001419                       3401         _HEADER INTER,10,"$INTERPRET"
      001419 13 ED                    1         .word LINK 
                           00141B     2         LINK=.
      00141B 0A                       3         .byte 10  
      00141C 24 49 4E 54 45 52 50     4         .ascii "$INTERPRET"
             52 45 54
      001426                          5         INTER:
      001426 CD 12 E8         [ 4] 3402         CALL     NAMEQ
      001429 CD 07 CC         [ 4] 3403         CALL     QDUP    ;?defined
      00142C CD 04 98         [ 4] 3404         CALL     QBRAN
      00142F 14 50                 3405         .word      INTE1
      001431 CD 04 E3         [ 4] 3406         CALL     AT
      001434 CD 04 6F         [ 4] 3407         CALL     DOLIT
      001437 40 00                 3408 	.word       0x4000	; COMPO*256
      001439 CD 06 76         [ 4] 3409         CALL     ANDD    ;?compile only lexicon bits
      00143C CD 13 F4         [ 4] 3410         CALL     ABORQ
      00143F 0D                    3411         .byte      13
      001440 20 63 6F 6D 70 69 6C  3412         .ascii     " compile only"
             65 20 6F 6E 6C 79
      00144D CC 04 C4         [ 2] 3413         JP     EXECU
      001450 CD 25 D3         [ 4] 3414 INTE1:  CALL     NUMBQ   ;convert a number
      001453 CD 04 98         [ 4] 3415         CALL     QBRAN
      001456 13 FC                 3416         .word    ABOR1
      001458 81               [ 4] 3417         RET
                                   3418 
                                   3419 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3420 ;       [       ( -- )
                                   3421 ;       Start  text interpreter.
                                   3422 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001459                       3423         _HEADER LBRAC,IMEDD+1,"["
      001459 14 1B                    1         .word LINK 
                           00145B     2         LINK=.
      00145B 81                       3         .byte IMEDD+1  
      00145C 5B                       4         .ascii "["
      00145D                          5         LBRAC:
      00145D CD 04 6F         [ 4] 3424         CALL   DOLIT
      001460 14 26                 3425         .word  INTER
      001462 CD 07 40         [ 4] 3426         CALL   TEVAL
      001465 CC 04 D1         [ 2] 3427         JP     STORE
                                   3428 
                                   3429 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3430 ;       .OK     ( -- )
                                   3431 ;       Display 'ok' while interpreting.
                                   3432 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001468                       3433         _HEADER DOTOK,3,".OK"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      001468 14 5B                    1         .word LINK 
                           00146A     2         LINK=.
      00146A 03                       3         .byte 3  
      00146B 2E 4F 4B                 4         .ascii ".OK"
      00146E                          5         DOTOK:
      00146E CD 04 6F         [ 4] 3434         CALL     DOLIT
      001471 14 26                 3435         .word      INTER
      001473 CD 07 40         [ 4] 3436         CALL     TEVAL
      001476 CD 04 E3         [ 4] 3437         CALL     AT
      001479 CD 08 FA         [ 4] 3438         CALL     EQUAL
      00147C CD 04 98         [ 4] 3439         CALL     QBRAN
      00147F 14 88                 3440         .word      DOTO1
      001481 CD 0F B6         [ 4] 3441         CALL     DOTQP
      001484 03                    3442         .byte      3
      001485 20 6F 6B              3443         .ascii     " ok"
      001488 CC 0F 89         [ 2] 3444 DOTO1:  JP     CR
                                   3445 
                                   3446 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3447 ;       ?STACK  ( -- )
                                   3448 ;       Abort if stack underflows.
                                   3449 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00148B                       3450         _HEADER QSTAC,6,"?STACK"
      00148B 14 6A                    1         .word LINK 
                           00148D     2         LINK=.
      00148D 06                       3         .byte 6  
      00148E 3F 53 54 41 43 4B        4         .ascii "?STACK"
      001494                          5         QSTAC:
      001494 CD 0C 45         [ 4] 3451         CALL     DEPTH
      001497 CD 06 50         [ 4] 3452         CALL     ZLESS   ;check only for underflow
      00149A CD 13 F4         [ 4] 3453         CALL     ABORQ
      00149D 0B                    3454         .byte      11
      00149E 20 75 6E 64 65 72 66  3455         .ascii     " underflow "
             6C 6F 77 20
      0014A9 81               [ 4] 3456         RET
                                   3457 
                                   3458 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3459 ;       EVAL    ( -- )
                                   3460 ;       Interpret  input stream.
                                   3461 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014AA                       3462         _HEADER EVAL,4,"EVAL"
      0014AA 14 8D                    1         .word LINK 
                           0014AC     2         LINK=.
      0014AC 04                       3         .byte 4  
      0014AD 45 56 41 4C              4         .ascii "EVAL"
      0014B1                          5         EVAL:
      0014B1 CD 11 EB         [ 4] 3463 EVAL1:  CALL     TOKEN
      0014B4 CD 06 19         [ 4] 3464         CALL     DUPP
      0014B7 CD 05 01         [ 4] 3465         CALL     CAT     ;?input stream empty
      0014BA CD 04 98         [ 4] 3466         CALL     QBRAN
      0014BD 14 CD                 3467         .word    EVAL2
      0014BF CD 07 40         [ 4] 3468         CALL     TEVAL
      0014C2 CD 0D 13         [ 4] 3469         CALL     ATEXE
      0014C5 CD 14 94         [ 4] 3470         CALL     QSTAC   ;evaluate input, check stack
      0014C8 CD 04 B4         [ 4] 3471         CALL     BRAN
      0014CB 14 B1                 3472         .word    EVAL1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      0014CD CD 06 0F         [ 4] 3473 EVAL2:  CALL     DROP
      0014D0 CC 14 6E         [ 2] 3474         JP       DOTOK
                                   3475 
                                   3476 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3477 ;       PRESET  ( -- )
                                   3478 ;       Reset data stack pointer and
                                   3479 ;       terminal input buffer.
                                   3480 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014D3                       3481         _HEADER PRESE,6,"PRESET"
      0014D3 14 AC                    1         .word LINK 
                           0014D5     2         LINK=.
      0014D5 06                       3         .byte 6  
      0014D6 50 52 45 53 45 54        4         .ascii "PRESET"
      0014DC                          5         PRESE:
      0014DC CD 04 6F         [ 4] 3482         CALL     DOLIT
      0014DF 16 80                 3483         .word      SPP
      0014E1 CD 06 06         [ 4] 3484         CALL     SPSTO
      0014E4 CD 04 6F         [ 4] 3485         CALL     DOLIT
      0014E7 17 00                 3486         .word      TIBB
      0014E9 CD 07 0D         [ 4] 3487         CALL     NTIB
      0014EC CD 0B 6C         [ 4] 3488         CALL     CELLP
      0014EF CC 04 D1         [ 2] 3489         JP     STORE
                                   3490 
                                   3491 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3492 ;       QUIT    ( -- )
                                   3493 ;       Reset return stack pointer
                                   3494 ;       and start text interpreter.
                                   3495 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014F2                       3496         _HEADER QUIT,4,"QUIT"
      0014F2 14 D5                    1         .word LINK 
                           0014F4     2         LINK=.
      0014F4 04                       3         .byte 4  
      0014F5 51 55 49 54              4         .ascii "QUIT"
      0014F9                          5         QUIT:
      0014F9 CD 04 6F         [ 4] 3497         CALL     DOLIT
      0014FC 17 FF                 3498         .word      RPP
      0014FE CD 05 1E         [ 4] 3499         CALL     RPSTO   ;reset return stack pointer
      001501 CD 14 5D         [ 4] 3500 QUIT1:  CALL     LBRAC   ;start interpretation
      001504 CD 13 C0         [ 4] 3501 QUIT2:  CALL     QUERY   ;get input
      001507 CD 14 B1         [ 4] 3502         CALL     EVAL
      00150A 20 F8            [ 2] 3503         JRA     QUIT2   ;continue till error
                                   3504 
                                   3505 ;; The compiler
                                   3506 
                                   3507 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3508 ;       '       ( -- ca )
                                   3509 ;       Search vocabularies for
                                   3510 ;       next word in input stream.
                                   3511 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00150C                       3512         _HEADER TICK,1,"'"
      00150C 14 F4                    1         .word LINK 
                           00150E     2         LINK=.
      00150E 01                       3         .byte 1  
      00150F 27                       4         .ascii "'"
      001510                          5         TICK:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      001510 CD 11 EB         [ 4] 3513         CALL     TOKEN
      001513 CD 12 E8         [ 4] 3514         CALL     NAMEQ   ;?defined
      001516 CD 04 98         [ 4] 3515         CALL     QBRAN
      001519 13 FC                 3516         .word      ABOR1
      00151B 81               [ 4] 3517         RET     ;yes, push code address
                                   3518 
                                   3519 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3520 ;       ALLOT   ( n -- )
                                   3521 ;       Allocate n bytes to RAM 
                                   3522 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00151C                       3523         _HEADER ALLOT,5,"ALLOT"
      00151C 15 0E                    1         .word LINK 
                           00151E     2         LINK=.
      00151E 05                       3         .byte 5  
      00151F 41 4C 4C 4F 54           4         .ascii "ALLOT"
      001524                          5         ALLOT:
      001524 CD 07 70         [ 4] 3524         CALL     VPP
                                   3525 ; must update APP_VP each time VP is modidied
      001527 CD 0C 73         [ 4] 3526         call PSTOR 
      00152A CC 1D 22         [ 2] 3527         jp UPDATVP 
                                   3528 
                                   3529 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3530 ;       ,       ( w -- )
                                   3531 ;         Compile an integer into
                                   3532 ;         variable space.
                                   3533 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00152D                       3534         _HEADER COMMA,1,^/"\,"/
      00152D 15 1E                    1         .word LINK 
                           00152F     2         LINK=.
      00152F 01                       3         .byte 1  
      001530 5C 2C                    4         .ascii "\,"
      001532                          5         COMMA:
      001532 CD 0C DD         [ 4] 3535         CALL     HERE
      001535 CD 06 19         [ 4] 3536         CALL     DUPP
      001538 CD 0B 6C         [ 4] 3537         CALL     CELLP   ;cell boundary
      00153B CD 07 70         [ 4] 3538         CALL     VPP
      00153E CD 04 D1         [ 4] 3539         CALL     STORE
      001541 CC 04 D1         [ 2] 3540         JP     STORE
                                   3541 
                                   3542 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3543 ;       C,      ( c -- )
                                   3544 ;       Compile a byte into
                                   3545 ;       variables space.
                                   3546 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001544                       3547         _HEADER CCOMMA,2,^/"C,"/
      001544 15 2F                    1         .word LINK 
                           001546     2         LINK=.
      001546 02                       3         .byte 2  
      001547 43 2C                    4         .ascii "C,"
      001549                          5         CCOMMA:
      001549 CD 0C DD         [ 4] 3548         CALL     HERE
      00154C CD 06 19         [ 4] 3549         CALL     DUPP
      00154F CD 0B 97         [ 4] 3550         CALL     ONEP
      001552 CD 07 70         [ 4] 3551         CALL     VPP
      001555 CD 04 D1         [ 4] 3552         CALL     STORE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      001558 CC 04 F0         [ 2] 3553         JP     CSTOR
                                   3554 
                                   3555 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3556 ;       [COMPILE]       ( -- ; <string> )
                                   3557 ;       Compile next immediate
                                   3558 ;       word into code dictionary.
                                   3559 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00155B                       3560         _HEADER BCOMP,IMEDD+9,"[COMPILE]"
      00155B 15 46                    1         .word LINK 
                           00155D     2         LINK=.
      00155D 89                       3         .byte IMEDD+9  
      00155E 5B 43 4F 4D 50 49 4C     4         .ascii "[COMPILE]"
             45 5D
      001567                          5         BCOMP:
      001567 CD 15 10         [ 4] 3561         CALL     TICK
      00156A CC 18 3C         [ 2] 3562         JP     JSRC
                                   3563 
                                   3564 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3565 ;       COMPILE ( -- )
                                   3566 ;       Compile next jsr in
                                   3567 ;       colon list to code dictionary.
                                   3568 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00156D                       3569         _HEADER COMPI,COMPO+7,"COMPILE"
      00156D 15 5D                    1         .word LINK 
                           00156F     2         LINK=.
      00156F 47                       3         .byte COMPO+7  
      001570 43 4F 4D 50 49 4C 45     4         .ascii "COMPILE"
      001577                          5         COMPI:
      001577 CD 05 34         [ 4] 3570         CALL     RFROM
      00157A CD 06 19         [ 4] 3571         CALL     DUPP
      00157D CD 04 E3         [ 4] 3572         CALL     AT
      001580 CD 18 3C         [ 4] 3573         CALL     JSRC    ;compile subroutine
      001583 CD 0B 6C         [ 4] 3574         CALL     CELLP
      001586 90 93            [ 1] 3575         ldw y,x 
      001588 90 FE            [ 2] 3576         ldw y,(y)
      00158A 1C 00 02         [ 2] 3577         addw x,#CELLL 
      00158D 90 FC            [ 2] 3578         jp (y)
                                   3579 
                                   3580 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3581 ;       LITERAL ( w -- )
                                   3582 ;       Compile tos to dictionary
                                   3583 ;       as an integer literal.
                                   3584 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00158F                       3585         _HEADER LITER,COMPO+IMEDD+7,"LITERAL"
      00158F 15 6F                    1         .word LINK 
                           001591     2         LINK=.
      001591 C7                       3         .byte COMPO+IMEDD+7  
      001592 4C 49 54 45 52 41 4C     4         .ascii "LITERAL"
      001599                          5         LITER:
      001599 CD 15 77         [ 4] 3586         CALL     COMPI
      00159C 04 6F                 3587         .word DOLIT 
      00159E CC 15 32         [ 2] 3588         JP     COMMA
                                   3589 
                                   3590 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3591 ;       $,"     ( -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                   3592 ;       Compile a literal string
                                   3593 ;       up to next " .
                                   3594 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3595 ;        _HEADER STRCQ,3,^/'$,"'/
      0015A1                       3596 STRCQ:
      0015A1 CD 04 6F         [ 4] 3597         CALL     DOLIT
      0015A4 00 22                 3598         .word     34	; "
      0015A6 CD 11 2A         [ 4] 3599         CALL     PARSE
      0015A9 CD 0C DD         [ 4] 3600         CALL     HERE
      0015AC CD 0D AE         [ 4] 3601         CALL     PACKS   ;string to code dictionary
      0015AF CD 0C C6         [ 4] 3602         CALL     COUNT
      0015B2 CD 08 3C         [ 4] 3603         CALL     PLUS    ;calculate aligned end of string
      0015B5 CD 07 70         [ 4] 3604         CALL     VPP
      0015B8 CC 04 D1         [ 2] 3605         JP     STORE
                                   3606 
                                   3607 ;; Structures
                                   3608 
                                   3609 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3610 ;       FOR     ( -- a )
                                   3611 ;       Start a FOR-NEXT loop
                                   3612 ;       structure in a colon definition.
                                   3613 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015BB                       3614         _HEADER FOR,IMEDD+3,"FOR"
      0015BB 15 91                    1         .word LINK 
                           0015BD     2         LINK=.
      0015BD 83                       3         .byte IMEDD+3  
      0015BE 46 4F 52                 4         .ascii "FOR"
      0015C1                          5         FOR:
      0015C1 CD 15 77         [ 4] 3615         CALL     COMPI
      0015C4 05 E2                 3616         .word TOR 
      0015C6 CC 0C DD         [ 2] 3617         JP     HERE
                                   3618 
                                   3619 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3620 ;       NEXT    ( a -- )
                                   3621 ;       Terminate a FOR-NEXT loop.
                                   3622 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015C9                       3623         _HEADER NEXT,IMEDD+4,"NEXT"
      0015C9 15 BD                    1         .word LINK 
                           0015CB     2         LINK=.
      0015CB 84                       3         .byte IMEDD+4  
      0015CC 4E 45 58 54              4         .ascii "NEXT"
      0015D0                          5         NEXT:
      0015D0 CD 15 77         [ 4] 3624         CALL     COMPI
      0015D3 04 83                 3625         .word DONXT 
      0015D5 CD 07 BC         [ 4] 3626         call ADRADJ
      0015D8 CC 15 32         [ 2] 3627         JP     COMMA
                                   3628 
                                   3629 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3630 ;       I ( -- n )
                                   3631 ;       stack COUNTER
                                   3632 ;       of innermost FOR-NEXT  
                                   3633 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015DB                       3634         _HEADER IFETCH,1,"I"
      0015DB 15 CB                    1         .word LINK 
                           0015DD     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      0015DD 01                       3         .byte 1  
      0015DE 49                       4         .ascii "I"
      0015DF                          5         IFETCH:
      0015DF 1D 00 02         [ 2] 3635         subw x,#CELLL 
      0015E2 16 03            [ 2] 3636         ldw y,(3,sp)
      0015E4 FF               [ 2] 3637         ldw (x),y 
      0015E5 81               [ 4] 3638         ret 
                                   3639 
                                   3640 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3641 ;       J ( -- n )
                                   3642 ;   stack COUNTER
                                   3643 ;   of outer FOR-NEXT  
                                   3644 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015E6                       3645         _HEADER JFETCH,1,"J"
      0015E6 15 DD                    1         .word LINK 
                           0015E8     2         LINK=.
      0015E8 01                       3         .byte 1  
      0015E9 4A                       4         .ascii "J"
      0015EA                          5         JFETCH:
      0015EA 1D 00 02         [ 2] 3646         SUBW X,#CELLL 
      0015ED 16 05            [ 2] 3647         LDW Y,(5,SP)
      0015EF FF               [ 2] 3648         LDW (X),Y 
      0015F0 81               [ 4] 3649         RET 
                                   3650 
                                   3651 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3652 ;       BEGIN   ( -- a )
                                   3653 ;       Start an infinite or
                                   3654 ;       indefinite loop structure.
                                   3655 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015F1                       3656         _HEADER BEGIN,IMEDD+5,"BEGIN"
      0015F1 15 E8                    1         .word LINK 
                           0015F3     2         LINK=.
      0015F3 85                       3         .byte IMEDD+5  
      0015F4 42 45 47 49 4E           4         .ascii "BEGIN"
      0015F9                          5         BEGIN:
      0015F9 CC 0C DD         [ 2] 3657         JP     HERE
                                   3658 
                                   3659 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3660 ;       UNTIL   ( a -- )
                                   3661 ;       Terminate a BEGIN-UNTIL
                                   3662 ;       indefinite loop structure.
                                   3663 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015FC                       3664         _HEADER UNTIL,IMEDD+5,"UNTIL"
      0015FC 15 F3                    1         .word LINK 
                           0015FE     2         LINK=.
      0015FE 85                       3         .byte IMEDD+5  
      0015FF 55 4E 54 49 4C           4         .ascii "UNTIL"
      001604                          5         UNTIL:
      001604 CD 15 77         [ 4] 3665         CALL     COMPI
      001607 04 98                 3666         .word    QBRAN 
      001609 CD 07 BC         [ 4] 3667         call ADRADJ
      00160C CC 15 32         [ 2] 3668         JP     COMMA
                                   3669 
                                   3670 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3671 ;       AGAIN   ( a -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                                   3672 ;       Terminate a BEGIN-AGAIN
                                   3673 ;       infinite loop structure.
                                   3674 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00160F                       3675         _HEADER AGAIN,IMEDD+5,"AGAIN"
      00160F 15 FE                    1         .word LINK 
                           001611     2         LINK=.
      001611 85                       3         .byte IMEDD+5  
      001612 41 47 41 49 4E           4         .ascii "AGAIN"
      001617                          5         AGAIN:
      001617 CD 15 77         [ 4] 3676         CALL     COMPI
      00161A 04 B4                 3677         .word BRAN
      00161C CD 07 BC         [ 4] 3678         call ADRADJ 
      00161F CC 15 32         [ 2] 3679         JP     COMMA
                                   3680 
                                   3681 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3682 ;       IF      ( -- A )
                                   3683 ;       Begin a conditional branch.
                                   3684 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001622                       3685         _HEADER IFF,IMEDD+2,"IF"
      001622 16 11                    1         .word LINK 
                           001624     2         LINK=.
      001624 82                       3         .byte IMEDD+2  
      001625 49 46                    4         .ascii "IF"
      001627                          5         IFF:
      001627 CD 15 77         [ 4] 3686         CALL     COMPI
      00162A 04 98                 3687         .word QBRAN
      00162C CD 0C DD         [ 4] 3688         CALL     HERE
      00162F CD 0C 03         [ 4] 3689         CALL     ZERO
      001632 CC 15 32         [ 2] 3690         JP     COMMA
                                   3691 
                                   3692 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3693 ;       THEN        ( A -- )
                                   3694 ;       Terminate a conditional 
                                   3695 ;       branch structure.
                                   3696 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001635                       3697         _HEADER THENN,IMEDD+4,"THEN"
      001635 16 24                    1         .word LINK 
                           001637     2         LINK=.
      001637 84                       3         .byte IMEDD+4  
      001638 54 48 45 4E              4         .ascii "THEN"
      00163C                          5         THENN:
      00163C CD 0C DD         [ 4] 3698         CALL     HERE
      00163F CD 07 BC         [ 4] 3699         call ADRADJ 
      001642 CD 06 29         [ 4] 3700         CALL     SWAPP
      001645 CC 04 D1         [ 2] 3701         JP     STORE
                                   3702 
                                   3703 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3704 ;       ELSE        ( A -- A )
                                   3705 ;       Start the false clause in 
                                   3706 ;       an IF-ELSE-THEN structure.
                                   3707 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001648                       3708         _HEADER ELSEE,IMEDD+4,"ELSE"
      001648 16 37                    1         .word LINK 
                           00164A     2         LINK=.
      00164A 84                       3         .byte IMEDD+4  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      00164B 45 4C 53 45              4         .ascii "ELSE"
      00164F                          5         ELSEE:
      00164F CD 15 77         [ 4] 3709         CALL     COMPI
      001652 04 B4                 3710         .word BRAN
      001654 CD 0C DD         [ 4] 3711         CALL     HERE
      001657 CD 0C 03         [ 4] 3712         CALL     ZERO
      00165A CD 15 32         [ 4] 3713         CALL     COMMA
      00165D CD 06 29         [ 4] 3714         CALL     SWAPP
      001660 CD 0C DD         [ 4] 3715         CALL     HERE
      001663 CD 07 BC         [ 4] 3716         call ADRADJ 
      001666 CD 06 29         [ 4] 3717         CALL     SWAPP
      001669 CC 04 D1         [ 2] 3718         JP     STORE
                                   3719 
                                   3720 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3721 ;       AHEAD       ( -- A )
                                   3722 ;       Compile a forward branch
                                   3723 ;       instruction.
                                   3724 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00166C                       3725         _HEADER AHEAD,IMEDD+5,"AHEAD"
      00166C 16 4A                    1         .word LINK 
                           00166E     2         LINK=.
      00166E 85                       3         .byte IMEDD+5  
      00166F 41 48 45 41 44           4         .ascii "AHEAD"
      001674                          5         AHEAD:
      001674 CD 15 77         [ 4] 3726         CALL     COMPI
      001677 04 B4                 3727         .word BRAN
      001679 CD 0C DD         [ 4] 3728         CALL     HERE
      00167C CD 0C 03         [ 4] 3729         CALL     ZERO
      00167F CC 15 32         [ 2] 3730         JP     COMMA
                                   3731 
                                   3732 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3733 ;       WHILE       ( a -- A a )
                                   3734 ;       Conditional branch out of a 
                                   3735 ;       BEGIN-WHILE-REPEAT loop.
                                   3736 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001682                       3737         _HEADER WHILE,IMEDD+5,"WHILE"
      001682 16 6E                    1         .word LINK 
                           001684     2         LINK=.
      001684 85                       3         .byte IMEDD+5  
      001685 57 48 49 4C 45           4         .ascii "WHILE"
      00168A                          5         WHILE:
      00168A CD 15 77         [ 4] 3738         CALL     COMPI
      00168D 04 98                 3739         .word QBRAN
      00168F CD 0C DD         [ 4] 3740         CALL     HERE
      001692 CD 0C 03         [ 4] 3741         CALL     ZERO
      001695 CD 15 32         [ 4] 3742         CALL     COMMA
      001698 CC 06 29         [ 2] 3743         JP     SWAPP
                                   3744 
                                   3745 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3746 ;       REPEAT      ( A a -- )
                                   3747 ;       Terminate a BEGIN-WHILE-REPEAT 
                                   3748 ;       indefinite loop.
                                   3749 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00169B                       3750         _HEADER REPEA,IMEDD+6,"REPEAT"
      00169B 16 84                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



                           00169D     2         LINK=.
      00169D 86                       3         .byte IMEDD+6  
      00169E 52 45 50 45 41 54        4         .ascii "REPEAT"
      0016A4                          5         REPEA:
      0016A4 CD 15 77         [ 4] 3751         CALL     COMPI
      0016A7 04 B4                 3752         .word BRAN
      0016A9 CD 07 BC         [ 4] 3753         call ADRADJ 
      0016AC CD 15 32         [ 4] 3754         CALL     COMMA
      0016AF CD 0C DD         [ 4] 3755         CALL     HERE
      0016B2 CD 07 BC         [ 4] 3756         call ADRADJ 
      0016B5 CD 06 29         [ 4] 3757         CALL     SWAPP
      0016B8 CC 04 D1         [ 2] 3758         JP     STORE
                                   3759 
                                   3760 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3761 ;       AFT         ( a -- a A )
                                   3762 ;       Jump to THEN in a FOR-AFT-THEN-NEXT 
                                   3763 ;       loop the first time through.
                                   3764 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016BB                       3765         _HEADER AFT,IMEDD+3,"AFT"
      0016BB 16 9D                    1         .word LINK 
                           0016BD     2         LINK=.
      0016BD 83                       3         .byte IMEDD+3  
      0016BE 41 46 54                 4         .ascii "AFT"
      0016C1                          5         AFT:
      0016C1 CD 06 0F         [ 4] 3766         CALL     DROP
      0016C4 CD 16 74         [ 4] 3767         CALL     AHEAD
      0016C7 CD 0C DD         [ 4] 3768         CALL     HERE
      0016CA CC 06 29         [ 2] 3769         JP     SWAPP
                                   3770 
                                   3771 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3772 ;       ABORT"      ( -- ; <string> )
                                   3773 ;       Conditional abort with an error message.
                                   3774 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016CD                       3775         _HEADER ABRTQ,IMEDD+6,'ABORT"'
      0016CD 16 BD                    1         .word LINK 
                           0016CF     2         LINK=.
      0016CF 86                       3         .byte IMEDD+6  
      0016D0 41 42 4F 52 54 22        4         .ascii 'ABORT"'
      0016D6                          5         ABRTQ:
      0016D6 CD 15 77         [ 4] 3776         CALL     COMPI
      0016D9 13 F4                 3777         .word ABORQ
      0016DB CC 15 A1         [ 2] 3778         JP     STRCQ
                                   3779 
                                   3780 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3781 ;       $"     ( -- ; <string> )
                                   3782 ;       Compile an inline string literal.
                                   3783 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016DE                       3784         _HEADER STRQ,IMEDD+2,'$"'
      0016DE 16 CF                    1         .word LINK 
                           0016E0     2         LINK=.
      0016E0 82                       3         .byte IMEDD+2  
      0016E1 24 22                    4         .ascii '$"'
      0016E3                          5         STRQ:
      0016E3 CD 15 77         [ 4] 3785         CALL     COMPI
      0016E6 0F B2                 3786         .word STRQP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      0016E8 CC 15 A1         [ 2] 3787         JP     STRCQ
                                   3788 
                                   3789 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3790 ;       ."          ( -- ; <string> )
                                   3791 ;       Compile an inline string literal 
                                   3792 ;       to be typed out at run time.
                                   3793 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016EB                       3794         _HEADER DOTQ,IMEDD+2,'."'
      0016EB 16 E0                    1         .word LINK 
                           0016ED     2         LINK=.
      0016ED 82                       3         .byte IMEDD+2  
      0016EE 2E 22                    4         .ascii '."'
      0016F0                          5         DOTQ:
      0016F0 CD 15 77         [ 4] 3795         CALL     COMPI
      0016F3 0F B6                 3796         .word DOTQP 
      0016F5 CC 15 A1         [ 2] 3797         JP     STRCQ
                                   3798 
                                   3799 ;; Name compiler
                                   3800 
                                   3801 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3802 ;       ?UNIQUE ( a -- a )
                                   3803 ;       Display a warning message
                                   3804 ;       if word already exists.
                                   3805 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016F8                       3806         _HEADER UNIQU,7,"?UNIQUE"
      0016F8 16 ED                    1         .word LINK 
                           0016FA     2         LINK=.
      0016FA 07                       3         .byte 7  
      0016FB 3F 55 4E 49 51 55 45     4         .ascii "?UNIQUE"
      001702                          5         UNIQU:
      001702 CD 06 19         [ 4] 3807         CALL     DUPP
      001705 CD 12 E8         [ 4] 3808         CALL     NAMEQ   ;?name exists
      001708 CD 04 98         [ 4] 3809         CALL     QBRAN
      00170B 17 21                 3810         .word      UNIQ1
      00170D CD 0F B6         [ 4] 3811         CALL     DOTQP   ;redef are OK
      001710 07                    3812         .byte       7
      001711 20 72 65 44 65 66 20  3813         .ascii     " reDef "       
      001718 CD 06 41         [ 4] 3814         CALL     OVER
      00171B CD 0C C6         [ 4] 3815         CALL     COUNT
      00171E CD 0F 71         [ 4] 3816         CALL     TYPES   ;just in case
      001721 CC 06 0F         [ 2] 3817 UNIQ1:  JP     DROP
                                   3818 
                                   3819 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3820 ;       $,n     ( na -- )
                                   3821 ;       Build a new dictionary name
                                   3822 ;       using string at na.
                                   3823 ; compile dans l'espace des variables 
                                   3824 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3825 ;        _HEADER SNAME,3,^/"$,n"/
      001724                       3826 SNAME: 
      001724 CD 06 19         [ 4] 3827         CALL     DUPP
      001727 CD 05 01         [ 4] 3828         CALL     CAT     ;?null input
      00172A CD 04 98         [ 4] 3829         CALL     QBRAN
      00172D 17 5A                 3830         .word      PNAM1
      00172F CD 17 02         [ 4] 3831         CALL     UNIQU   ;?redefinition
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001732 CD 06 19         [ 4] 3832         CALL     DUPP
      001735 CD 0C C6         [ 4] 3833         CALL     COUNT
      001738 CD 08 3C         [ 4] 3834         CALL     PLUS
      00173B CD 07 70         [ 4] 3835         CALL     VPP
      00173E CD 04 D1         [ 4] 3836         CALL     STORE
      001741 CD 06 19         [ 4] 3837         CALL     DUPP
      001744 CD 07 8E         [ 4] 3838         CALL     LAST
      001747 CD 04 D1         [ 4] 3839         CALL     STORE   ;save na for vocabulary link
      00174A CD 0B 7B         [ 4] 3840         CALL     CELLM   ;link address
      00174D CD 07 62         [ 4] 3841         CALL     CNTXT
      001750 CD 04 E3         [ 4] 3842         CALL     AT
      001753 CD 06 29         [ 4] 3843         CALL     SWAPP
      001756 CD 04 D1         [ 4] 3844         CALL     STORE
      001759 81               [ 4] 3845         RET     ;save code pointer
      00175A CD 0F B2         [ 4] 3846 PNAM1:  CALL     STRQP
      00175D 05                    3847         .byte      5
      00175E 20 6E 61 6D 65        3848         .ascii     " name" ;null input
      001763 CC 13 FC         [ 2] 3849         JP     ABOR1
                                   3850 
                                   3851 ;; FORTH compiler
                                   3852 
                                   3853 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3854 ;       $COMPILE        ( a -- )
                                   3855 ;       Compile next word to
                                   3856 ;       dictionary as a token or literal.
                                   3857 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001766                       3858         _HEADER SCOMP,8,"$COMPILE"
      001766 16 FA                    1         .word LINK 
                           001768     2         LINK=.
      001768 08                       3         .byte 8  
      001769 24 43 4F 4D 50 49 4C     4         .ascii "$COMPILE"
             45
      001771                          5         SCOMP:
      001771 CD 12 E8         [ 4] 3859         CALL     NAMEQ
      001774 CD 07 CC         [ 4] 3860         CALL     QDUP    ;?defined
      001777 CD 04 98         [ 4] 3861         CALL     QBRAN
      00177A 17 92                 3862         .word      SCOM2
      00177C CD 04 E3         [ 4] 3863         CALL     AT
      00177F CD 04 6F         [ 4] 3864         CALL     DOLIT
      001782 80 00                 3865         .word     0x8000	;  IMEDD*256
      001784 CD 06 76         [ 4] 3866         CALL     ANDD    ;?immediate
      001787 CD 04 98         [ 4] 3867         CALL     QBRAN
      00178A 17 8F                 3868         .word      SCOM1
      00178C CC 04 C4         [ 2] 3869         JP     EXECU
      00178F CC 18 3C         [ 2] 3870 SCOM1:  JP     JSRC
      001792 CD 25 D3         [ 4] 3871 SCOM2:  CALL     NUMBQ   ;try to convert to number
      001795 CD 07 CC         [ 4] 3872         CALL    QDUP  
      001798 CD 04 98         [ 4] 3873         CALL     QBRAN
      00179B 13 FC                 3874         .word      ABOR1
      00179D                       3875         _DOLIT  -1
      00179D CD 04 6F         [ 4]    1     CALL DOLIT 
      0017A0 FF FF                    2     .word -1 
      0017A2 CD 08 FA         [ 4] 3876         CALL    EQUAL
      0017A5                       3877         _QBRAN DLITER  
      0017A5 CD 04 98         [ 4]    1     CALL QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      0017A8 29 A3                    2     .word DLITER
      0017AA CC 15 99         [ 2] 3878         JP     LITER
                                   3879 
                                   3880 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3881 ;       OVERT   ( -- )
                                   3882 ;       Link a new word into vocabulary.
                                   3883 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017AD                       3884         _HEADER OVERT,5,"OVERT"
      0017AD 17 68                    1         .word LINK 
                           0017AF     2         LINK=.
      0017AF 05                       3         .byte 5  
      0017B0 4F 56 45 52 54           4         .ascii "OVERT"
      0017B5                          5         OVERT:
      0017B5 CD 07 8E         [ 4] 3885         CALL     LAST
      0017B8 CD 04 E3         [ 4] 3886         CALL     AT
      0017BB CD 07 62         [ 4] 3887         CALL     CNTXT
      0017BE CC 04 D1         [ 2] 3888         JP     STORE
                                   3889 
                                   3890 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3891 ;       ;       ( -- )
                                   3892 ;       Terminate a colon definition.
                                   3893 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017C1                       3894         _HEADER SEMIS,IMEDD+COMPO+1,^/";"/
      0017C1 17 AF                    1         .word LINK 
                           0017C3     2         LINK=.
      0017C3 C1                       3         .byte IMEDD+COMPO+1  
      0017C4 3B                       4         .ascii ";"
      0017C5                          5         SEMIS:
                           000001  3895 .if OPTIMIZE ; more compact and faster
      0017C5 CD 04 6F         [ 4] 3896         call DOLIT 
      0017C8 00 81                 3897         .word 0x81   ; opcode for RET 
      0017CA CD 15 49         [ 4] 3898         call CCOMMA 
                           000000  3899 .else
                                   3900         CALL     COMPI
                                   3901         .word EXIT 
                                   3902 .endif 
      0017CD CD 14 5D         [ 4] 3903         CALL     LBRAC
      0017D0 CD 17 B5         [ 4] 3904         call OVERT 
      0017D3 CD 22 7A         [ 4] 3905         CALL FMOVE
      0017D6 CD 07 CC         [ 4] 3906         call QDUP 
      0017D9 CD 04 98         [ 4] 3907         call QBRAN 
      0017DC 19 52                 3908         .word SET_RAMLAST 
      0017DE CD 23 0E         [ 4] 3909         CALL UPDATPTR
      0017E1 81               [ 4] 3910         RET 
                                   3911 
                                   3912 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3913 ;       Terminate an ISR definition 
                                   3914 ;       retourn ca of ISR as double
                                   3915 ;       I; ( -- ud )
                                   3916 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017E2                       3917        _HEADER ISEMI,2+IMEDD+COMPO,^/"I;"/
      0017E2 17 C3                    1         .word LINK 
                           0017E4     2         LINK=.
      0017E4 C2                       3         .byte 2+IMEDD+COMPO  
      0017E5 49 3B                    4         .ascii "I;"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      0017E7                          5         ISEMI:
      0017E7 1D 00 02         [ 2] 3918         subw x,#CELLL  
      0017EA 90 AE 00 80      [ 2] 3919         ldw y,#IRET_CODE 
      0017EE FF               [ 2] 3920         ldw (x),y 
      0017EF CD 15 49         [ 4] 3921         call CCOMMA
      0017F2 CD 14 5D         [ 4] 3922         call LBRAC 
      0017F5 CD 23 53         [ 4] 3923         call IFMOVE
      0017F8 CD 07 CC         [ 4] 3924         call QDUP 
      0017FB CD 04 98         [ 4] 3925         CALL QBRAN 
      0017FE 19 52                 3926         .word SET_RAMLAST
      001800 CD 07 7E         [ 4] 3927         CALL CPP
      001803 CD 04 E3         [ 4] 3928         call AT 
      001806 CD 06 29         [ 4] 3929         call SWAPP 
      001809 CD 07 7E         [ 4] 3930         CALL CPP 
      00180C CD 04 D1         [ 4] 3931         call STORE 
      00180F CD 1D 0B         [ 4] 3932         call UPDATCP 
      001812 CD 1C C8         [ 4] 3933         call EEPVP 
      001815                       3934         _DROP 
      001815 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      001818 CD 04 E3         [ 4] 3935         call AT 
      00181B CD 07 70         [ 4] 3936         call VPP 
      00181E CD 04 D1         [ 4] 3937         call STORE 
      001821 CC 0C 03         [ 2] 3938         jp ZERO
      001824 81               [ 4] 3939         ret           
                                   3940         
                                   3941 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3942 ;       ]       ( -- )
                                   3943 ;       Start compiling words in
                                   3944 ;       input stream.
                                   3945 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001825                       3946         _HEADER RBRAC,1,"]"
      001825 17 E4                    1         .word LINK 
                           001827     2         LINK=.
      001827 01                       3         .byte 1  
      001828 5D                       4         .ascii "]"
      001829                          5         RBRAC:
      001829 CD 04 6F         [ 4] 3947         CALL   DOLIT
      00182C 17 71                 3948         .word  SCOMP
      00182E CD 07 40         [ 4] 3949         CALL   TEVAL
      001831 CC 04 D1         [ 2] 3950         JP     STORE
                                   3951 
                                   3952 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3953 ;       CALL,    ( ca -- )
                                   3954 ;       Compile a subroutine call.
                                   3955 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001834                       3956         _HEADER JSRC,5,^/"CALL,"/
      001834 18 27                    1         .word LINK 
                           001836     2         LINK=.
      001836 05                       3         .byte 5  
      001837 43 41 4C 4C 2C           4         .ascii "CALL,"
      00183C                          5         JSRC:
                                   3957 ;;;;; optimization code ;;;;;;;;;;;;;;;
      00183C 90 AE 06 0F      [ 2] 3958         LDW Y,#DROP 
      001840 90 BF 26         [ 2] 3959         LDW YTEMP,Y 
      001843 90 93            [ 1] 3960         LDW Y,X 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001845 90 FE            [ 2] 3961         LDW Y,(Y)
      001847 90 B3 26         [ 2] 3962         CPW Y,YTEMP 
      00184A 26 13            [ 1] 3963         JRNE JSRC1 
                                   3964 ; replace CALL DROP BY  ADDW X,#CELLL 
      00184C 1C 00 02         [ 2] 3965         ADDW X,#CELLL 
      00184F                       3966         _DOLIT ADDWX ; opcode 
      00184F CD 04 6F         [ 4]    1     CALL DOLIT 
      001852 00 1C                    2     .word ADDWX 
      001854 CD 15 49         [ 4] 3967         CALL   CCOMMA 
      001857                       3968         _DOLIT CELLL 
      001857 CD 04 6F         [ 4]    1     CALL DOLIT 
      00185A 00 02                    2     .word CELLL 
      00185C CC 15 32         [ 2] 3969         JP      COMMA 
      00185F                       3970 JSRC1: ; check for DDROP 
      00185F 90 AE 08 1C      [ 2] 3971         LDW Y,#DDROP 
      001863 90 BF 26         [ 2] 3972         LDW YTEMP,Y 
      001866 90 93            [ 1] 3973         LDW Y,X 
      001868 90 FE            [ 2] 3974         LDW Y,(Y)
      00186A 90 B3 26         [ 2] 3975         CPW Y,YTEMP 
      00186D 26 13            [ 1] 3976         JRNE JSRC2 
                                   3977 ; replace CALL DDROP BY ADDW X,#2*CELLL 
      00186F 1C 00 02         [ 2] 3978         ADDW X,#CELLL 
      001872                       3979         _DOLIT ADDWX 
      001872 CD 04 6F         [ 4]    1     CALL DOLIT 
      001875 00 1C                    2     .word ADDWX 
      001877 CD 15 49         [ 4] 3980         CALL  CCOMMA 
      00187A                       3981         _DOLIT 2*CELLL 
      00187A CD 04 6F         [ 4]    1     CALL DOLIT 
      00187D 00 04                    2     .word 2*CELLL 
      00187F CC 15 32         [ 2] 3982         JP  COMMA 
                                   3983 ;;;;;;;; end optimization code ;;;;;;;;;;        
      001882                       3984 JSRC2:        
      001882 CD 04 6F         [ 4] 3985         CALL     DOLIT
      001885 00 CD                 3986         .word     CALLL     ;CALL
      001887 CD 15 49         [ 4] 3987         CALL     CCOMMA
      00188A CC 15 32         [ 2] 3988         JP     COMMA
                                   3989 
                                   3990 ;       INIT-OFS ( -- )
                                   3991 ;       compute offset to adjust jump address 
                                   3992 ;       set variable OFFSET 
      00188D 18 36                 3993         .word LINK 
                           00188F  3994         LINK=.
      00188F 08                    3995         .byte 8 
      001890 49 4E 49 54 2D 4F 46  3996         .ascii "INIT-OFS" 
             53
      001898                       3997 INITOFS:
      001898 CD 07 2F         [ 4] 3998         call TFLASH 
      00189B CD 04 E3         [ 4] 3999         CALL AT 
      00189E CD 06 19         [ 4] 4000         CALL DUPP 
      0018A1 CD 04 98         [ 4] 4001         call QBRAN
      0018A4 18 B5                 4002         .word 1$
      0018A6                       4003         _DROP  
      0018A6 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0018A9 CD 07 7E         [ 4] 4004         call CPP 
      0018AC CD 04 E3         [ 4] 4005         call AT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      0018AF CD 0C DD         [ 4] 4006         call HERE
      0018B2 CD 08 D2         [ 4] 4007         call SUBB 
      0018B5 CD 07 B3         [ 4] 4008 1$:     call OFFSET 
      0018B8 CC 04 D1         [ 2] 4009         jp STORE  
                                   4010 
                                   4011 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4012 ;       :       ( -- ; <string> )
                                   4013 ;       Start a new colon definition
                                   4014 ;       using next word as its name.
                                   4015 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0018BB                       4016         _HEADER COLON,1,":"
      0018BB 18 8F                    1         .word LINK 
                           0018BD     2         LINK=.
      0018BD 01                       3         .byte 1  
      0018BE 3A                       4         .ascii ":"
      0018BF                          5         COLON:
      0018BF CD 18 98         [ 4] 4017         call INITOFS       
      0018C2 CD 11 EB         [ 4] 4018         CALL   TOKEN
      0018C5 CD 17 24         [ 4] 4019         CALL   SNAME
      0018C8 CC 18 29         [ 2] 4020         JP     RBRAC
                                   4021 
                                   4022 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4023 ;       I:  ( -- )
                                   4024 ;       Start interrupt service 
                                   4025 ;       routine definition
                                   4026 ;       those definition have 
                                   4027 ;       no name.
                                   4028 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0018CB                       4029         _HEADER ICOLON,2,"I:"
      0018CB 18 BD                    1         .word LINK 
                           0018CD     2         LINK=.
      0018CD 02                       3         .byte 2  
      0018CE 49 3A                    4         .ascii "I:"
      0018D0                          5         ICOLON:
      0018D0 CD 18 98         [ 4] 4030         call INITOFS 
      0018D3 CC 18 29         [ 2] 4031         jp RBRAC  
                                   4032 
                                   4033 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4034 ;       IMMEDIATE       ( -- )
                                   4035 ;       Make last compiled word
                                   4036 ;       an immediate word.
                                   4037 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0018D6                       4038         _HEADER IMMED,9,"IMMEDIATE"
      0018D6 18 CD                    1         .word LINK 
                           0018D8     2         LINK=.
      0018D8 09                       3         .byte 9  
      0018D9 49 4D 4D 45 44 49 41     4         .ascii "IMMEDIATE"
             54 45
      0018E2                          5         IMMED:
      0018E2 CD 04 6F         [ 4] 4039         CALL     DOLIT
      0018E5 80 00                 4040         .word     0x8000	;  IMEDD*256
      0018E7 CD 07 8E         [ 4] 4041         CALL     LAST
      0018EA CD 04 E3         [ 4] 4042         CALL     AT
      0018ED CD 04 E3         [ 4] 4043         CALL     AT
      0018F0 CD 06 8A         [ 4] 4044         CALL     ORR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      0018F3 CD 07 8E         [ 4] 4045         CALL     LAST
      0018F6 CD 04 E3         [ 4] 4046         CALL     AT
      0018F9 CC 04 D1         [ 2] 4047         JP     STORE
                                   4048 
                                   4049 ;; Defining words
                                   4050 
                                   4051 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4052 ;       CREATE  ( -- ; <string> )
                                   4053 ;       Compile a new array
                                   4054 ;       without allocating space.
                                   4055 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0018FC                       4056         _HEADER CREAT,6,"CREATE"
      0018FC 18 D8                    1         .word LINK 
                           0018FE     2         LINK=.
      0018FE 06                       3         .byte 6  
      0018FF 43 52 45 41 54 45        4         .ascii "CREATE"
      001905                          5         CREAT:
      001905 CD 11 EB         [ 4] 4057         CALL     TOKEN
      001908 CD 17 24         [ 4] 4058         CALL     SNAME
      00190B CD 17 B5         [ 4] 4059         CALL     OVERT        
      00190E CD 15 77         [ 4] 4060         CALL     COMPI 
      001911 06 CF                 4061         .word DOVAR 
      001913 81               [ 4] 4062         RET
                                   4063 
                                   4064 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4065 ;       VARIABLE  ( -- ; <string> )
                                   4066 ;       Compile a new variable
                                   4067 ;       initialized to 0.
                                   4068 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001914                       4069         _HEADER VARIA,8,"VARIABLE"
      001914 18 FE                    1         .word LINK 
                           001916     2         LINK=.
      001916 08                       3         .byte 8  
      001917 56 41 52 49 41 42 4C     4         .ascii "VARIABLE"
             45
      00191F                          5         VARIA:
                                   4070 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      00191F CD 0C DD         [ 4] 4071         CALL HERE
      001922 CD 06 19         [ 4] 4072         CALL DUPP 
      001925 CD 0B 6C         [ 4] 4073         CALL CELLP
      001928 CD 07 70         [ 4] 4074         CALL VPP 
      00192B CD 04 D1         [ 4] 4075         CALL STORE
      00192E CD 19 05         [ 4] 4076         CALL CREAT
      001931 CD 06 19         [ 4] 4077         CALL DUPP
      001934 CD 15 32         [ 4] 4078         CALL COMMA
      001937 CD 0C 03         [ 4] 4079         CALL ZERO
      00193A CD 06 29         [ 4] 4080         call SWAPP 
      00193D CD 04 D1         [ 4] 4081         CALL STORE
      001940 CD 22 7A         [ 4] 4082         CALL FMOVE ; move definition to FLASH
      001943 CD 07 CC         [ 4] 4083         CALL QDUP 
      001946 CD 04 98         [ 4] 4084         CALL QBRAN 
      001949 19 52                 4085         .word SET_RAMLAST   
      00194B CD 1D 22         [ 4] 4086         call UPDATVP  ; don't update if variable kept in RAM.
      00194E CD 23 0E         [ 4] 4087         CALL UPDATPTR
      001951 81               [ 4] 4088         RET         
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001952                       4089 SET_RAMLAST: 
      001952 CD 07 8E         [ 4] 4090         CALL LAST 
      001955 CD 04 E3         [ 4] 4091         CALL AT 
      001958 CD 07 A1         [ 4] 4092         CALL RAMLAST 
      00195B CC 04 D1         [ 2] 4093         jp STORE  
                                   4094 
                                   4095 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4096 ;       CONSTANT  ( n -- ; <string> )
                                   4097 ;       Compile a new constant 
                                   4098 ;       n CONSTANT name 
                                   4099 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00195E                       4100         _HEADER CONSTANT,8,"CONSTANT"
      00195E 19 16                    1         .word LINK 
                           001960     2         LINK=.
      001960 08                       3         .byte 8  
      001961 43 4F 4E 53 54 41 4E     4         .ascii "CONSTANT"
             54
      001969                          5         CONSTANT:
      001969 CD 11 EB         [ 4] 4101         CALL TOKEN
      00196C CD 17 24         [ 4] 4102         CALL SNAME 
      00196F CD 17 B5         [ 4] 4103         CALL OVERT 
      001972 CD 15 77         [ 4] 4104         CALL COMPI 
      001975 19 89                 4105         .word DOCONST
      001977 CD 15 32         [ 4] 4106         CALL COMMA 
      00197A CD 22 7A         [ 4] 4107         CALL FMOVE
      00197D CD 07 CC         [ 4] 4108         CALL QDUP 
      001980 CD 04 98         [ 4] 4109         CALL QBRAN 
      001983 19 52                 4110         .word SET_RAMLAST  
      001985 CD 23 0E         [ 4] 4111         CALL UPDATPTR  
      001988 81               [ 4] 4112 1$:     RET          
                                   4113 
                                   4114 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4115 ; CONSTANT runtime semantic 
                                   4116 ; doCONST  ( -- n )
                                   4117 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4118 ;       _HEADER DOCONST,7,"DOCONST"
      001989                       4119 DOCONST:
      001989 1D 00 02         [ 2] 4120         subw x,#CELLL
      00198C 90 85            [ 2] 4121         popw y 
      00198E 90 FE            [ 2] 4122         ldw y,(y) 
      001990 FF               [ 2] 4123         ldw (x),y 
      001991 81               [ 4] 4124         ret 
                                   4125 
                                   4126 ;----------------------------------
                                   4127 ; create double constant 
                                   4128 ; 2CONSTANT ( d -- ; <string> )
                                   4129 ;----------------------------------
      001992                       4130         _HEADER DCONST,9,"2CONSTANT"
      001992 19 60                    1         .word LINK 
                           001994     2         LINK=.
      001994 09                       3         .byte 9  
      001995 32 43 4F 4E 53 54 41     4         .ascii "2CONSTANT"
             4E 54
      00199E                          5         DCONST:
      00199E CD 11 EB         [ 4] 4131         CALL TOKEN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      0019A1 CD 17 24         [ 4] 4132         CALL SNAME 
      0019A4 CD 17 B5         [ 4] 4133         CALL OVERT 
      0019A7 CD 15 77         [ 4] 4134         CALL COMPI 
      0019AA 19 C1                 4135         .word DO_DCONST
      0019AC CD 15 32         [ 4] 4136         CALL COMMA
      0019AF CD 15 32         [ 4] 4137         CALL COMMA  
      0019B2 CD 22 7A         [ 4] 4138         CALL FMOVE
      0019B5 CD 07 CC         [ 4] 4139         CALL QDUP 
      0019B8 CD 04 98         [ 4] 4140         CALL QBRAN 
      0019BB 19 52                 4141         .word SET_RAMLAST  
      0019BD CD 23 0E         [ 4] 4142         CALL UPDATPTR  
      0019C0 81               [ 4] 4143 1$:     RET          
                                   4144     
                                   4145 ;----------------------------------
                                   4146 ; runtime for DCONST 
                                   4147 ; stack double constant 
                                   4148 ; DO-DCONST ( -- d )
                                   4149 ;-----------------------------------
                                   4150 ;       _HEADER DO_DCONST,9,"DO-DCONST"
      0019C1                       4151 DO_DCONST:
      0019C1 90 85            [ 2] 4152     popw y 
      0019C3 90 BF 26         [ 2] 4153     ldw YTEMP,y 
      0019C6 1D 00 04         [ 2] 4154     subw x,#2*CELLL 
      0019C9 90 FE            [ 2] 4155     ldw y,(y)
      0019CB FF               [ 2] 4156     ldw (x),y 
      0019CC 90 BE 26         [ 2] 4157     ldw y,YTEMP 
      0019CF 90 EE 02         [ 2] 4158     ldw y,(2,y)
      0019D2 EF 02            [ 2] 4159     ldw (2,x),y 
      0019D4 81               [ 4] 4160     ret 
                                   4161 
                                   4162 ;; Tools
                                   4163 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4164 ;       _TYPE   ( b u -- )
                                   4165 ;       Display a string. Filter
                                   4166 ;       non-printing characters.
                                   4167 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0019D5                       4168         _HEADER UTYPE,5,"_TYPE"
      0019D5 19 94                    1         .word LINK 
                           0019D7     2         LINK=.
      0019D7 05                       3         .byte 5  
      0019D8 5F 54 59 50 45           4         .ascii "_TYPE"
      0019DD                          5         UTYPE:
      0019DD CD 05 E2         [ 4] 4169         CALL     TOR     ;start count down loop
      0019E0 20 0F            [ 2] 4170         JRA     UTYP2   ;skip first pass
      0019E2 CD 06 19         [ 4] 4171 UTYP1:  CALL     DUPP
      0019E5 CD 05 01         [ 4] 4172         CALL     CAT
      0019E8 CD 0C 2D         [ 4] 4173         CALL     TCHAR
      0019EB CD 04 36         [ 4] 4174         CALL     EMIT    ;display only printable
      0019EE CD 0B 97         [ 4] 4175         CALL     ONEP    ;increment address
      0019F1 CD 04 83         [ 4] 4176 UTYP2:  CALL     DONXT
      0019F4 19 E2                 4177         .word      UTYP1   ;loop till done
      0019F6 CC 06 0F         [ 2] 4178         JP     DROP
                                   4179 
                                   4180 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4181 ;       dm+     ( a u -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                   4182 ;       Dump u bytes from ,
                                   4183 ;       leaving a+u on  stack.
                                   4184 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0019F9                       4185         _HEADER DUMPP,3,"DM+"
      0019F9 19 D7                    1         .word LINK 
                           0019FB     2         LINK=.
      0019FB 03                       3         .byte 3  
      0019FC 44 4D 2B                 4         .ascii "DM+"
      0019FF                          5         DUMPP:
      0019FF CD 06 41         [ 4] 4186         CALL     OVER
      001A02 CD 04 6F         [ 4] 4187         CALL     DOLIT
      001A05 00 04                 4188         .word      4
      001A07 CD 0F DF         [ 4] 4189         CALL     UDOTR   ;display address
      001A0A CD 0F 47         [ 4] 4190         CALL     SPACE
      001A0D CD 05 E2         [ 4] 4191         CALL     TOR     ;start count down loop
      001A10 20 11            [ 2] 4192         JRA     PDUM2   ;skip first pass
      001A12 CD 06 19         [ 4] 4193 PDUM1:  CALL     DUPP
      001A15 CD 05 01         [ 4] 4194         CALL     CAT
      001A18 CD 04 6F         [ 4] 4195         CALL     DOLIT
      001A1B 00 03                 4196         .word      3
      001A1D CD 0F DF         [ 4] 4197         CALL     UDOTR   ;display numeric data
      001A20 CD 0B 97         [ 4] 4198         CALL     ONEP    ;increment address
      001A23 CD 04 83         [ 4] 4199 PDUM2:  CALL     DONXT
      001A26 1A 12                 4200         .word      PDUM1   ;loop till done
      001A28 81               [ 4] 4201         RET
                                   4202 
                                   4203 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4204 ;       DUMP    ( a u -- )
                                   4205 ;       Dump u bytes from a,
                                   4206 ;       in a formatted manner.
                                   4207 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A29                       4208         _HEADER DUMP,4,"DUMP"
      001A29 19 FB                    1         .word LINK 
                           001A2B     2         LINK=.
      001A2B 04                       3         .byte 4  
      001A2C 44 55 4D 50              4         .ascii "DUMP"
      001A30                          5         DUMP:
      001A30 CD 06 DF         [ 4] 4209         CALL     BASE
      001A33 CD 04 E3         [ 4] 4210         CALL     AT
      001A36 CD 05 E2         [ 4] 4211         CALL     TOR
      001A39 CD 0E A6         [ 4] 4212         CALL     HEX     ;save radix, set hex
      001A3C CD 04 6F         [ 4] 4213         CALL     DOLIT
      001A3F 00 10                 4214         .word      16
      001A41 CD 0A BD         [ 4] 4215         CALL     SLASH   ;change count to lines
      001A44 CD 05 E2         [ 4] 4216         CALL     TOR     ;start count down loop
      001A47 CD 0F 89         [ 4] 4217 DUMP1:  CALL     CR
      001A4A CD 04 6F         [ 4] 4218         CALL     DOLIT
      001A4D 00 10                 4219         .word      16
      001A4F CD 08 27         [ 4] 4220         CALL     DDUP
      001A52 CD 19 FF         [ 4] 4221         CALL     DUMPP   ;display numeric
      001A55 CD 07 DD         [ 4] 4222         CALL     ROT
      001A58 CD 07 DD         [ 4] 4223         CALL     ROT
      001A5B CD 0F 47         [ 4] 4224         CALL     SPACE
      001A5E CD 0F 47         [ 4] 4225         CALL     SPACE
      001A61 CD 19 DD         [ 4] 4226         CALL     UTYPE   ;display printable characters
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001A64 CD 04 83         [ 4] 4227         CALL     DONXT
      001A67 1A 47                 4228         .word      DUMP1   ;loop till done
      001A69 CD 06 0F         [ 4] 4229 DUMP3:  CALL     DROP
      001A6C CD 05 34         [ 4] 4230         CALL     RFROM
      001A6F CD 06 DF         [ 4] 4231         CALL     BASE
      001A72 CC 04 D1         [ 2] 4232         JP     STORE   ;restore radix
                                   4233 
                                   4234 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4235 ;       .S      ( ... -- ... )
                                   4236 ;        Display  contents of stack.
                                   4237 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A75                       4238         _HEADER DOTS,2,".S"
      001A75 1A 2B                    1         .word LINK 
                           001A77     2         LINK=.
      001A77 02                       3         .byte 2  
      001A78 2E 53                    4         .ascii ".S"
      001A7A                          5         DOTS:
      001A7A CD 0F 89         [ 4] 4239         CALL     CR
      001A7D CD 0C 45         [ 4] 4240         CALL     DEPTH   ;stack depth
      001A80 CD 05 E2         [ 4] 4241         CALL     TOR     ;start count down loop
      001A83 20 09            [ 2] 4242         JRA     DOTS2   ;skip first pass
      001A85 CD 05 45         [ 4] 4243 DOTS1:  CALL     RAT
      001A88 CD 0C 5C         [ 4] 4244 	CALL     PICK
      001A8B CD 10 30         [ 4] 4245         CALL     DOT     ;index stack, display contents
      001A8E CD 04 83         [ 4] 4246 DOTS2:  CALL     DONXT
      001A91 1A 85                 4247         .word      DOTS1   ;loop till done
      001A93 CD 0F B6         [ 4] 4248         CALL     DOTQP
      001A96 05                    4249         .byte      5
      001A97 20 3C 73 70 20        4250         .ascii     " <sp "
      001A9C 81               [ 4] 4251         RET
                                   4252 
                                   4253 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4254 ;       >NAME   ( ca -- na | F )
                                   4255 ;       Convert code address
                                   4256 ;       to a name address.
                                   4257 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A9D                       4258         _HEADER TNAME,5,">NAME"
      001A9D 1A 77                    1         .word LINK 
                           001A9F     2         LINK=.
      001A9F 05                       3         .byte 5  
      001AA0 3E 4E 41 4D 45           4         .ascii ">NAME"
      001AA5                          5         TNAME:
      001AA5 CD 07 62         [ 4] 4259         CALL     CNTXT   ;vocabulary link
      001AA8 CD 04 E3         [ 4] 4260 TNAM2:  CALL     AT
      001AAB CD 06 19         [ 4] 4261         CALL     DUPP    ;?last word in a vocabulary
      001AAE CD 04 98         [ 4] 4262         CALL     QBRAN
      001AB1 1A CC                 4263         .word      TNAM4
      001AB3 CD 08 27         [ 4] 4264         CALL     DDUP
      001AB6 CD 11 F9         [ 4] 4265         CALL     NAMET
      001AB9 CD 06 9F         [ 4] 4266         CALL     XORR    ;compare
      001ABC CD 04 98         [ 4] 4267         CALL     QBRAN
      001ABF 1A C6                 4268         .word      TNAM3
      001AC1 CD 0B 7B         [ 4] 4269         CALL     CELLM   ;continue with next word
      001AC4 20 E2            [ 2] 4270         JRA     TNAM2
      001AC6 CD 06 29         [ 4] 4271 TNAM3:  CALL     SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001AC9 CC 06 0F         [ 2] 4272         JP     DROP
      001ACC CD 08 1C         [ 4] 4273 TNAM4:  CALL     DDROP
      001ACF CC 0C 03         [ 2] 4274         JP     ZERO
                                   4275 
                                   4276 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4277 ;       .ID     ( na -- )
                                   4278 ;        Display  name at address.
                                   4279 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001AD2                       4280         _HEADER DOTID,3,".ID"
      001AD2 1A 9F                    1         .word LINK 
                           001AD4     2         LINK=.
      001AD4 03                       3         .byte 3  
      001AD5 2E 49 44                 4         .ascii ".ID"
      001AD8                          5         DOTID:
      001AD8 CD 07 CC         [ 4] 4281         CALL     QDUP    ;if zero no name
      001ADB CD 04 98         [ 4] 4282         CALL     QBRAN
      001ADE 1A EE                 4283         .word      DOTI1
      001AE0 CD 0C C6         [ 4] 4284         CALL     COUNT
      001AE3 CD 04 6F         [ 4] 4285         CALL     DOLIT
      001AE6 00 1F                 4286         .word      0x1F
      001AE8 CD 06 76         [ 4] 4287         CALL     ANDD    ;mask lexicon bits
      001AEB CC 19 DD         [ 2] 4288         JP     UTYPE
      001AEE CD 0F B6         [ 4] 4289 DOTI1:  CALL     DOTQP
      001AF1 09                    4290         .byte      9
      001AF2 20 6E 6F 4E 61 6D 65  4291         .ascii     " noName"
      001AF9 81               [ 4] 4292         RET
                                   4293 
                           000000  4294 WANT_SEE=0
                           000000  4295 .if WANT_SEE 
                                   4296 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4297 ;       SEE     ( -- ; <string> )
                                   4298 ;       A simple decompiler.
                                   4299 ;       Updated for byte machines.
                                   4300 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4301         _HEADER SEE,3,"SEE"
                                   4302         CALL     TICK    ;starting address
                                   4303         CALL     CR
                                   4304         CALL     ONEM
                                   4305 SEE1:   CALL     ONEP
                                   4306         CALL     DUPP
                                   4307         CALL     AT
                                   4308         CALL     DUPP
                                   4309         CALL     QBRAN
                                   4310         .word    SEE2
                                   4311         CALL     TNAME   ;?is it a name
                                   4312 SEE2:   CALL     QDUP    ;name address or zero
                                   4313         CALL     QBRAN
                                   4314         .word    SEE3
                                   4315         CALL     SPACE
                                   4316         CALL     DOTID   ;display name
                                   4317         CALL     ONEP
                                   4318         JRA      SEE4
                                   4319 SEE3:   CALL     DUPP
                                   4320         CALL     CAT
                                   4321         CALL     UDOT    ;display number
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



                                   4322 SEE4:   CALL     NUFQ    ;user control
                                   4323         CALL     QBRAN
                                   4324         .word    SEE1
                                   4325         JP     DROP
                                   4326 .endif ; WANT_SEE 
                                   4327 
                                   4328 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4329 ;       WORDS   ( -- )
                                   4330 ;       Display names in vocabulary.
                                   4331 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001AFA                       4332         _HEADER WORDS,5,"WORDS"
      001AFA 1A D4                    1         .word LINK 
                           001AFC     2         LINK=.
      001AFC 05                       3         .byte 5  
      001AFD 57 4F 52 44 53           4         .ascii "WORDS"
      001B02                          5         WORDS:
      001B02 CD 0F 89         [ 4] 4333         CALL     CR
      001B05 CD 07 62         [ 4] 4334         CALL     CNTXT   ;only in context
      001B08 CD 04 E3         [ 4] 4335 WORS1:  CALL     AT
      001B0B CD 07 CC         [ 4] 4336         CALL     QDUP    ;?at end of list
      001B0E CD 04 98         [ 4] 4337         CALL     QBRAN
      001B11 1B 24                 4338         .word      WORS2
      001B13 CD 06 19         [ 4] 4339         CALL     DUPP
      001B16 CD 0F 47         [ 4] 4340         CALL     SPACE
      001B19 CD 1A D8         [ 4] 4341         CALL     DOTID   ;display a name
      001B1C CD 0B 7B         [ 4] 4342         CALL     CELLM
      001B1F CD 04 B4         [ 4] 4343         CALL     BRAN
      001B22 1B 08                 4344         .word      WORS1
      001B24 81               [ 4] 4345 WORS2:  RET
                                   4346 
                                   4347         
                                   4348 ;; Hardware reset
                                   4349 
                                   4350 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4351 ;  COPYRIGTH
                                   4352 ; print copyright notice 
                                   4353 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B25                       4354 COPYRIGHT:
      001B25 CD 0F B6         [ 4] 4355     CALL DOTQP 
      001B28 21                    4356     .byte 33 
      001B29 4A 61 63 71 75 65 73  4357     .ascii "Jacques Deschenes, Copyright 2021"
             20 44 65 73 63 68 65
             6E 65 73 2C 20 43 6F
             70 79 72 69 67 68 74
             20 32 30 32 31
      001B4A CC 0F 89         [ 2] 4358     JP CR 
                                   4359 
                                   4360 
                                   4361 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4362 ;  PRT_LICENCE 
                                   4363 ;  print GPLV2 licence 
                                   4364 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B4D                       4365 PRT_LICENCE:
      001B4D CD 0F B6         [ 4] 4366         CALL DOTQP 
      001B50 0F                    4367         .byte  15 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001B51 4C 49 43 45 4E 43 45  4368         .ascii "LICENCE GPLV3\r\n"
             20 47 50 4C 56 33 0D
             0A
      001B60 81               [ 4] 4369         RET 
                                   4370 
                                   4371 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4372 ;    PRINT_VERSION ( c1 c2 -- )
                                   4373 ;    c2 minor 
                                   4374 ;    c1 major 
                                   4375 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B61                       4376 PRINT_VERSION:
      001B61 CD 0F B6         [ 4] 4377      CALL DOTQP 
      001B64 09                    4378      .byte 9
      001B65 20 76 65 72 73 69 6F  4379      .ascii " version "
             6E 20
      001B6E CD 0E 0B         [ 4] 4380      CALL BDIGS 
      001B71 CD 0E 45         [ 4] 4381      CALL DIGS 
      001B74 CD 0E 45         [ 4] 4382      CALL DIGS 
      001B77                       4383      _DOLIT '.' 
      001B77 CD 04 6F         [ 4]    1     CALL DOLIT 
      001B7A 00 2E                    2     .word '.' 
      001B7C CD 0E 1B         [ 4] 4384      CALL HOLD 
      001B7F                       4385      _DROP 
      001B7F 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      001B82 CD 0E 45         [ 4] 4386      CALL DIGS 
      001B85 CD 0E 70         [ 4] 4387      CALL EDIGS 
      001B88 CD 0F 71         [ 4] 4388      CALL TYPES 
      001B8B 81               [ 4] 4389      RET 
                                   4390 
                                   4391 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4392 ;       hi      ( -- )
                                   4393 ;       Display sign-on message.
                                   4394 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B8C                       4395         _HEADER HI,2,"HI"
      001B8C 1A FC                    1         .word LINK 
                           001B8E     2         LINK=.
      001B8E 02                       3         .byte 2  
      001B8F 48 49                    4         .ascii "HI"
      001B91                          5         HI:
      001B91 CD 0F 89         [ 4] 4396         CALL     CR
      001B94 CD 0F B6         [ 4] 4397         CALL     DOTQP   
      001B97 0A                    4398         .byte      10
      001B98 73 74 6D 38 65 46 6F  4399         .ascii     "stm8eForth"
             72 74 68
      001BA2                       4400 	_DOLIT VER 
      001BA2 CD 04 6F         [ 4]    1     CALL DOLIT 
      001BA5 00 04                    2     .word VER 
      001BA7                       4401         _DOLIT EXT 
      001BA7 CD 04 6F         [ 4]    1     CALL DOLIT 
      001BAA 00 00                    2     .word EXT 
      001BAC CD 1B 61         [ 4] 4402         CALL PRINT_VERSION 
      001BAF CD 0F B6         [ 4] 4403         CALL    DOTQP
                           000001  4404 .if NUCLEO          
      001BB2 12                    4405         .byte 18
      001BB3 20 6F 6E 20 4E 55 43  4406         .ascii  " on NUCLEO-8S208RB"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



             4C 45 4F 2D 38 53 32
             30 38 52 42
                                   4407 .endif
                           000000  4408 .if DISCOVERY
                                   4409         .byte 19
                                   4410         .ascii  " on STM8S-DISCOVERY"
                                   4411 .endif
                           000000  4412 .if DOORBELL
                                   4413         .byte 16
                                   4414         .ascii " on stm8s105k6b6"
                                   4415 .endif
      001BC5 CC 0F 89         [ 2] 4416         JP     CR
                                   4417 
                           000000  4418 WANT_DEBUG=0
                           000000  4419 .if WANT_DEBUG 
                                   4420 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4421 ;       DEBUG      ( -- )
                                   4422 ;       Display sign-on message.
                                   4423 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4424         _HEADER DEBUG,5,"DEBUG"
                                   4425 	CALL DOLIT
                                   4426 	.word 0x65
                                   4427 	CALL EMIT
                                   4428 	CALL ZERO
                                   4429  	CALL ZLESS 
                                   4430 	CALL DOLIT
                                   4431 	.word 0xFFFE
                                   4432 	CALL ZLESS 
                                   4433 	CALL UPLUS 
                                   4434  	_DROP 
                                   4435 	CALL DOLIT
                                   4436 	.word 3
                                   4437 	CALL UPLUS 
                                   4438 	CALL UPLUS 
                                   4439  	_DROP
                                   4440 	CALL DOLIT
                                   4441 	.word 0x43
                                   4442 	CALL UPLUS 
                                   4443  	_DROP
                                   4444 	CALL EMIT
                                   4445 	CALL DOLIT
                                   4446 	.word 0x4F
                                   4447 	CALL DOLIT
                                   4448 	.word 0x6F
                                   4449  	CALL XORR
                                   4450 	CALL DOLIT
                                   4451 	.word 0xF0
                                   4452  	CALL ANDD
                                   4453 	CALL DOLIT
                                   4454 	.word 0x4F
                                   4455  	CALL ORR
                                   4456 	CALL EMIT
                                   4457 	CALL DOLIT
                                   4458 	.word 8
                                   4459 	CALL DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                                   4460 	.word 6
                                   4461  	CALL SWAPP
                                   4462 	CALL OVER
                                   4463 	CALL XORR
                                   4464 	CALL DOLIT
                                   4465 	.word 3
                                   4466 	CALL ANDD 
                                   4467 	CALL ANDD
                                   4468 	CALL DOLIT
                                   4469 	.word 0x70
                                   4470 	CALL UPLUS 
                                   4471 	_DROP
                                   4472 	CALL EMIT
                                   4473 	CALL ZERO
                                   4474 	CALL QBRAN
                                   4475 	.word DEBUG1
                                   4476 	CALL DOLIT
                                   4477 	.word 0x3F
                                   4478 DEBUG1:
                                   4479 	CALL DOLIT
                                   4480 	.word 0xFFFF
                                   4481 	CALL QBRAN
                                   4482 	.word DEBUG2
                                   4483 	CALL DOLIT
                                   4484 	.word 0x74
                                   4485 	CALL BRAN
                                   4486 	.word DEBUG3
                                   4487 DEBUG2:
                                   4488 	CALL DOLIT
                                   4489 	.word 0x21
                                   4490 DEBUG3:
                                   4491 	CALL EMIT
                                   4492 	CALL DOLIT
                                   4493 	.word 0x68
                                   4494 	CALL DOLIT
                                   4495 	.word 0x80
                                   4496 	CALL STORE
                                   4497 	CALL DOLIT
                                   4498 	.word 0x80
                                   4499 	CALL AT
                                   4500 	CALL EMIT
                                   4501 	CALL DOLIT
                                   4502 	.word 0x4D
                                   4503 	CALL TOR
                                   4504 	CALL RAT
                                   4505 	CALL RFROM
                                   4506 	CALL ANDD
                                   4507 	CALL EMIT
                                   4508 	CALL DOLIT
                                   4509 	.word 0x61
                                   4510 	CALL DOLIT
                                   4511 	.word 0xA
                                   4512 	CALL TOR
                                   4513 DEBUG4:
                                   4514 	CALL ONE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



                                   4515 	CALL UPLUS 
                                   4516 	_DROP
                                   4517 	CALL DONXT
                                   4518 	.word DEBUG4
                                   4519 	CALL EMIT
                                   4520 	CALL DOLIT
                                   4521 	.word 0x656D
                                   4522 	CALL DOLIT
                                   4523 	.word 0x100
                                   4524 	CALL UMSTA
                                   4525 	CALL SWAPP
                                   4526 	CALL DOLIT
                                   4527 	.word 0x100
                                   4528 	CALL UMSTA
                                   4529 	CALL SWAPP 
                                   4530 	_DROP
                                   4531 	CALL EMIT
                                   4532 	CALL EMIT
                                   4533 	CALL DOLIT
                                   4534 	.word 0x2043
                                   4535 	CALL ZERO
                                   4536 	CALL DOLIT
                                   4537 	.word 0x100
                                   4538 	CALL UMMOD
                                   4539 	CALL EMIT
                                   4540 	CALL EMIT
                                   4541 	;JP ORIG
                                   4542 	RET
                                   4543 .endif ; WANT_DEBUG 
                                   4544 
                                   4545 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4546 ;       'BOOT   ( -- a )
                                   4547 ;       The application startup vector.
                                   4548 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001BC8                       4549         _HEADER TBOOT,5,"'BOOT"
      001BC8 1B 8E                    1         .word LINK 
                           001BCA     2         LINK=.
      001BCA 05                       3         .byte 5  
      001BCB 27 42 4F 4F 54           4         .ascii "'BOOT"
      001BD0                          5         TBOOT:
      001BD0 CD 06 CF         [ 4] 4550         CALL     DOVAR
      001BD3 40 02                 4551         .word    APP_RUN      ;application to boot
                                   4552 
                                   4553 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4554 ;       COLD    ( -- )
                                   4555 ;       The hilevel cold start s=ence.
                                   4556 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001BD5                       4557         _HEADER COLD,4,"COLD"
      001BD5 1B CA                    1         .word LINK 
                           001BD7     2         LINK=.
      001BD7 04                       3         .byte 4  
      001BD8 43 4F 4C 44              4         .ascii "COLD"
      001BDC                          5         COLD:
                           000000  4558 .if WANT_DEBUG
                                   4559         CALL DEBUG
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



                                   4560 .endif ; WANT_DEBUG
      001BDC CD 04 6F         [ 4] 4561 COLD1:  CALL     DOLIT
      001BDF 00 2B                 4562         .word      UZERO
      001BE1 CD 04 6F         [ 4] 4563 	CALL     DOLIT
      001BE4 00 06                 4564         .word      UPP
      001BE6 CD 04 6F         [ 4] 4565         CALL     DOLIT
      001BE9 00 1C                 4566 	.word      UEND-UZERO
      001BEB CD 0D 2A         [ 4] 4567         CALL     CMOVE   ;initialize user area
                           000001  4568 .if WANT_FLOAT 
      001BEE CD 2C 87         [ 4] 4569         CALL    FINIT 
                                   4570 .endif 
                                   4571 ; if APP_RUN==0 initialize with ca de 'hi'  
      001BF1 90 CE 40 02      [ 2] 4572         ldw y,APP_RUN 
      001BF5 26 0B            [ 1] 4573         jrne 0$
      001BF7 1D 00 02         [ 2] 4574         subw x,#CELLL 
      001BFA 90 AE 1B 91      [ 2] 4575         ldw y,#HI  
      001BFE FF               [ 2] 4576         ldw (x),y
      001BFF CD 1C FA         [ 4] 4577         call UPDATRUN 
      001C02                       4578 0$:        
                                   4579 ; update LAST with APP_LAST 
                                   4580 ; if APP_LAST > LAST else do the opposite
      001C02 90 CE 40 00      [ 2] 4581         ldw y,APP_LAST 
      001C06 90 B3 1C         [ 2] 4582         cpw y,ULAST 
      001C09 22 05            [ 1] 4583         jrugt 1$ 
                                   4584 ; save LAST at APP_LAST  
      001C0B CD 1C E2         [ 4] 4585         call UPDATLAST 
      001C0E 20 06            [ 2] 4586         jra 2$
      001C10                       4587 1$: ; update LAST with APP_LAST 
      001C10 90 BF 1C         [ 2] 4588         ldw ULAST,y
      001C13 90 BF 16         [ 2] 4589         ldw UCNTXT,y
      001C16                       4590 2$:  
                                   4591 ; update APP_CP if < app_space 
      001C16 90 CE 40 04      [ 2] 4592         ldw y,APP_CP  
      001C1A 90 B3 1A         [ 2] 4593         cpw y,UCP   
      001C1D 24 06            [ 1] 4594         jruge 3$ 
      001C1F CD 1D 0B         [ 4] 4595         call UPDATCP
      001C22 90 BE 1A         [ 2] 4596         ldw y,UCP   
      001C25                       4597 3$:
      001C25 90 BF 1A         [ 2] 4598         ldw UCP,y                 
                                   4599 ; update UVP with APP_VP  
                                   4600 ; if APP_VP>UVP else do the opposite 
      001C28 90 CE 40 06      [ 2] 4601         ldw y,APP_VP 
      001C2C 90 B3 18         [ 2] 4602         cpw y,UVP 
      001C2F 22 05            [ 1] 4603         jrugt 4$
      001C31 CD 1D 22         [ 4] 4604         call UPDATVP 
      001C34 20 03            [ 2] 4605         jra 6$
      001C36                       4606 4$: ; update UVP with APP_VP 
      001C36 90 BF 18         [ 2] 4607         ldw UVP,y 
      001C39                       4608 6$:      
      001C39 CD 14 DC         [ 4] 4609         CALL     PRESE   ;initialize data stack and TIB
      001C3C CD 1B D0         [ 4] 4610         CALL     TBOOT
      001C3F CD 0D 13         [ 4] 4611         CALL     ATEXE   ;application boot
      001C42 CD 17 B5         [ 4] 4612         CALL     OVERT
      001C45 CC 14 F9         [ 2] 4613         JP     QUIT    ;start interpretation
                                   4614 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



                                   4615 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



                                   4616         .include "flash.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;  routines to write to FLASH, EEPROM 
                                     23 ;  and OPTION 
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27 ;--------------------------------
                                     28 ; initialize FPTR 
                                     29 ; FP!  ( ud -- )
                                     30 ;---------------------------------
      001C48 1B D7                   31     .word LINK 
                           001C4A    32     LINK=.
      001C4A 03                      33     .byte 3 
      001C4B 46 50 21                34     .ascii "FP!"
      001C4E                         35 FPSTOR:
      001C4E 90 93            [ 1]   36     ldw y,x
      001C50 90 FE            [ 2]   37     ldw y,(y)
      001C52 90 9F            [ 1]   38     ld a,yl 
      001C54 B7 34            [ 1]   39     ld FPTR,a 
      001C56 1C 00 02         [ 2]   40     addw x,#CELLL 
      001C59 90 93            [ 1]   41     ldw y,x 
      001C5B 90 FE            [ 2]   42     ldw y,(y)
      001C5D 90 BF 35         [ 2]   43     ldw PTR16,y
      001C60 1C 00 02         [ 2]   44     addw x,#CELLL 
      001C63 81               [ 4]   45     ret 
                                     46 
                                     47 ;-----------------------------------
                                     48 ; return EEPROM base address 
                                     49 ; as a double 
                                     50 ;  EEPROM  ( -- ud )
                                     51 ;-----------------------------------
      001C64 1C 4A                   52     .word LINK 
                           001C66    53 LINK=.
      001C66 06                      54     .byte 6 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      001C67 45 45 50 52 4F 4D       55     .ascii "EEPROM"
      001C6D                         56 EEPROM: 
      001C6D 90 AE 40 00      [ 2]   57     ldw y,#EEPROM_BASE
      001C71 1D 00 04         [ 2]   58     subw x,#2*CELLL 
      001C74 EF 02            [ 2]   59     ldw (2,x),y 
      001C76 90 5F            [ 1]   60     clrw y 
      001C78 FF               [ 2]   61     ldw (x),y 
      001C79 81               [ 4]   62     ret
                                     63 
                                     64 ;---------------------------------
                                     65 ; return APP_LAST pointer as double
                                     66 ; EEP-LAST ( -- ud )
                                     67 ;---------------------------------
      001C7A 1C 66                   68 	.word LINK 
                           001C7C    69 	LINK=.
      001C7C 08                      70 	.byte 8 
      001C7D 45 45 50 2D 4C 41 53    71 	.ascii "EEP-LAST"
             54
      001C85                         72 EEPLAST:
      001C85 1D 00 04         [ 2]   73 	subw x,#2*CELLL 
      001C88 90 AE 40 00      [ 2]   74 	ldw y,#APP_LAST 
      001C8C EF 02            [ 2]   75 	ldw (2,x),y 
      001C8E 90 5F            [ 1]   76 	clrw y 
      001C90 FF               [ 2]   77 	ldw (x),y 
      001C91 81               [ 4]   78 	ret 
                                     79 
                                     80 ;----------------------------------
                                     81 ; return APP_RUN pointer as double	
                                     82 ; EEP-RUN ( -- ud )
                                     83 ;-----------------------------------
      001C92 1C 7C                   84 	.word LINK 
                           001C94    85 	LINK=.
      001C94 07                      86 	.byte 7
      001C95 45 45 50 2D 52 55 4E    87 	.ascii "EEP-RUN"
      001C9C                         88 EEPRUN:
      001C9C 1D 00 04         [ 2]   89 	subw x,#2*CELLL 
      001C9F 90 AE 40 02      [ 2]   90 	ldw y,#APP_RUN 
      001CA3 EF 02            [ 2]   91 	ldw (2,x),y 
      001CA5 90 5F            [ 1]   92 	clrw y 
      001CA7 FF               [ 2]   93 	ldw (x),y 
      001CA8 81               [ 4]   94 	ret 
                                     95 
                                     96 ;------------------------------------
                                     97 ; return APP_CP pointer as double 
                                     98 ; EEP-CP ( -- ud )
                                     99 ;------------------------------------
      001CA9 1C 94                  100 	.word LINK
                           001CAB   101 	LINK=.
      001CAB 06                     102 	.byte 6 
      001CAC 45 45 50 2D 43 50      103 	.ascii "EEP-CP"
      001CB2                        104 EEPCP:
      001CB2 1D 00 04         [ 2]  105 	subw x,#2*CELLL 
      001CB5 90 AE 40 04      [ 2]  106 	ldw y,#APP_CP  
      001CB9 EF 02            [ 2]  107 	ldw (2,x),y 
      001CBB 90 5F            [ 1]  108 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      001CBD FF               [ 2]  109 	ldw (x),y 
      001CBE 81               [ 4]  110 	ret 
                                    111 
                                    112 ;------------------------------------
                                    113 ; return APP_VP pointer as double 
                                    114 ; EEP-VP ( -- ud )
                                    115 ;-------------------------------------
      001CBF 1C AB                  116 	.word LINK
                           001CC1   117 	LINK=.
      001CC1 06                     118 	.byte 6
      001CC2 45 45 50 2D 56 50      119 	.ascii "EEP-VP"
      001CC8                        120 EEPVP:
      001CC8 1D 00 04         [ 2]  121 	subw x,#2*CELLL 
      001CCB 90 AE 40 06      [ 2]  122 	ldw y,#APP_VP  
      001CCF EF 02            [ 2]  123 	ldw (2,x),y 
      001CD1 90 5F            [ 1]  124 	clrw y 
      001CD3 FF               [ 2]  125 	ldw (x),y 
      001CD4 81               [ 4]  126 	ret 
                                    127 
                                    128 ;----------------------------------
                                    129 ; update APP_LAST with LAST 
                                    130 ; UPDAT-LAST ( -- )
                                    131 ;----------------------------------
      001CD5 1C C1                  132 	.word LINK 
                           001CD7   133 	LINK=.
      001CD7 0A                     134 	.byte 10
      001CD8 55 50 44 41 54 2D 4C   135 	.ascii "UPDAT-LAST"
             41 53 54
      001CE2                        136 UPDATLAST:
      001CE2 CD 07 8E         [ 4]  137 	call LAST
      001CE5 CD 04 E3         [ 4]  138 	call AT  
      001CE8 CD 1C 85         [ 4]  139 	call EEPLAST
      001CEB CC 1E D8         [ 2]  140 	jp EESTORE 
                                    141 
                                    142 ;---------------------------------
                                    143 ; update APP_RUN 
                                    144 ; UPDAT-RUN ( a -- )
                                    145 ;---------------------------------
      001CEE 1C D7                  146 	.word LINK
                           001CF0   147 	LINK=.
      001CF0 09                     148 	.byte 9
      001CF1 55 50 44 41 54 2D 52   149 	.ascii "UPDAT-RUN"
             55 4E
      001CFA                        150 UPDATRUN:
      001CFA CD 1C 9C         [ 4]  151 	call EEPRUN
      001CFD CC 1E D8         [ 2]  152 	jp EESTORE 
                                    153 	
                                    154 ;---------------------------------
                                    155 ; update APP_CP with CP 
                                    156 ; UPDAT-CP ( -- )
                                    157 ;---------------------------------
      001D00 1C F0                  158 	.word LINK 
                           001D02   159 	LINK=.
      001D02 08                     160 	.byte 8 
      001D03 55 50 44 41 54 2D 43   161 	.ascii "UPDAT-CP"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



             50
      001D0B                        162 UPDATCP:
      001D0B CD 07 7E         [ 4]  163 	call CPP 
      001D0E CD 04 E3         [ 4]  164 	call AT 
      001D11 CD 1C B2         [ 4]  165 	call EEPCP 
      001D14 CC 1E D8         [ 2]  166 	jp EESTORE 
                                    167 
                                    168 ;----------------------------------
                                    169 ; update APP_VP with VP 
                                    170 ; UPDAT-VP ( -- )
                                    171 ;----------------------------------
      001D17 1D 02                  172 	.word LINK
                           001D19   173 	LINK=.
      001D19 08                     174 	.byte 8 
      001D1A 55 50 44 41 54 2D 56   175 	.ascii "UPDAT-VP" 
             50
      001D22                        176 UPDATVP:
      001D22 CD 07 70         [ 4]  177 	call VPP 
      001D25 CD 04 E3         [ 4]  178 	call AT
      001D28 CD 1C C8         [ 4]  179 	call EEPVP 
      001D2B CC 1E D8         [ 2]  180 	jp EESTORE
                                    181 	
                           000001   182 .if NUCLEO
                                    183 ;----------------------------------
                                    184 ; fetch integer at address over 65535
                                    185 ;  F@   ( ud -- n )
                                    186 ;----------------------------------
      001D2E 1D 19                  187     .word LINK 
                           001D30   188 LINK=.
      001D30 02                     189     .byte 2
      001D31 46 40                  190     .ascii "F@"
      001D33                        191 FARAT:
      001D33 CD 1C 4E         [ 4]  192     call FPSTOR
      001D36 CC 1D FB         [ 2]  193 	jp EE_READ 
                                    194 
                                    195 
                                    196 ;-------------------------------------
                                    197 ; fetch C at address over 65535 
                                    198 ; FC@ ( ud -- c)
                                    199 ;-------------------------------------
      001D39 1D 30                  200     .word LINK
                           001D3B   201     LINK=.
      001D3B 03                     202     .byte 3 
      001D3C 46 43 40               203     .ascii "FC@" 
      001D3F                        204 FARCAT:
      001D3F CD 1C 4E         [ 4]  205     call FPSTOR
      001D42 CC 1E 1D         [ 2]  206 	jp EE_CREAD  
                                    207 .endif ; NUCLEO 
                                    208 
                                    209 ;----------------------------------
                                    210 ; UNLOCK EEPROM/OPT for writing/erasing
                                    211 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    212 ;  UNLKEE   ( -- )
                                    213 ;----------------------------------
      001D45 1D 3B                  214     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



                           001D47   215 LINK=.
      001D47 06                     216     .byte 6 
      001D48 55 4E 4C 4B 45 45      217     .ascii "UNLKEE"
      001D4E                        218 UNLKEE:
      001D4E 35 00 50 5B      [ 1]  219 	mov FLASH_CR2,#0 
      001D52 35 FF 50 5C      [ 1]  220 	mov FLASH_NCR2,#0xFF 
      001D56 35 AE 50 64      [ 1]  221 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001D5A 35 56 50 64      [ 1]  222     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001D5E 72 07 50 5F FB   [ 2]  223 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001D63 81               [ 4]  224 	ret
                                    225 
                                    226 ;----------------------------------
                                    227 ; UNLOCK FLASH for writing/erasing
                                    228 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    229 ; UNLKFL  ( -- )
                                    230 ;----------------------------------
      001D64 1D 47                  231     .word LINK 
                           001D66   232 LINK=. 
      001D66 06                     233     .byte 6 
      001D67 55 4E 4C 4B 46 4C      234     .ascii "UNLKFL"    
      001D6D                        235 UNLKFL:
      001D6D 35 00 50 5B      [ 1]  236 	mov FLASH_CR2,#0 
      001D71 35 FF 50 5C      [ 1]  237 	mov FLASH_NCR2,#0xFF 
      001D75 35 56 50 62      [ 1]  238 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001D79 35 AE 50 62      [ 1]  239 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001D7D 72 03 50 5F FB   [ 2]  240 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001D82 81               [ 4]  241 	ret
                                    242 
                                    243 ;-----------------------------
                                    244 ; UNLOCK FLASH or EEPROM 
                                    245 ; according to FPTR address 
                                    246 ;  UNLOCK ( -- )
                                    247 ;-----------------------------
      001D83 1D 66                  248 	.word LINK 
                           001D85   249 	LINK=.
      001D85 06                     250 	.byte 6
      001D86 55 4E 4C 4F 43 4B      251 	.ascii "UNLOCK"
      001D8C                        252 UNLOCK:
                                    253 ; put addr[15:0] in Y, for bounds check.
      001D8C 90 BE 35         [ 2]  254 	ldw y,PTR16   ; Y=addr15:0
                                    255 ; check addr[23:16], if <> 0 then it is extened flash memory
      001D8F 3D 34            [ 1]  256 	tnz FPTR 
      001D91 26 16            [ 1]  257 	jrne 4$
      001D93 90 A3 80 00      [ 2]  258     cpw y,#FLASH_BASE
      001D97 24 10            [ 1]  259     jruge 4$
      001D99 90 A3 40 00      [ 2]  260 	cpw y,#EEPROM_BASE  
      001D9D 25 0D            [ 1]  261     jrult 9$
      001D9F 90 A3 48 7F      [ 2]  262 	cpw y,#OPTION_END 
      001DA3 22 07            [ 1]  263 	jrugt 9$
      001DA5 CD 1D 4E         [ 4]  264 	call UNLKEE
      001DA8 81               [ 4]  265 	ret 
      001DA9 CD 1D 6D         [ 4]  266 4$: call UNLKFL
      001DAC 81               [ 4]  267 9$: ret 
                                    268 
                                    269 ;-------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                                    270 ; LOCK write access to 
                                    271 ; FLASH and EEPROM 
                                    272 ; LOCK ( -- )
                                    273 ;-------------------------
      001DAD 1D 85                  274 	.word LINK 
                           001DAF   275 	LINK=.
      001DAF 04                     276 	.byte 4 
      001DB0 4C 4F 43 4B            277 	.ascii "LOCK" 
      001DB4                        278 LOCK: 
      001DB4 72 13 50 5F      [ 1]  279 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001DB8 72 17 50 5F      [ 1]  280 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001DBC 81               [ 4]  281 	ret 
                                    282 
                                    283 ;-------------------------
                                    284 ; increment FPTR 
                                    285 ; INC-FPTR ( -- )
                                    286 ;-------------------------
      001DBD 1D AF                  287 	.word LINK 
                           001DBF   288 	LINK=. 
      001DBF 08                     289 	.byte 8 
      001DC0 49 4E 43 2D 46 50 54   290 	.ascii "INC-FPTR" 
             52
      001DC8                        291 INC_FPTR:
      001DC8 3C 36            [ 1]  292 	inc PTR8 
      001DCA 26 0C            [ 1]  293 	jrne 1$
      001DCC 90 89            [ 2]  294 	pushw y 
      001DCE 90 BE 34         [ 2]  295 	ldw y,FPTR 
      001DD1 90 5C            [ 1]  296 	incw y 
      001DD3 90 BF 34         [ 2]  297 	ldw FPTR,y
      001DD6 90 85            [ 2]  298 	popw y  
      001DD8 81               [ 4]  299 1$: ret 
                                    300 
                                    301 ;------------------------------
                                    302 ; add u to FPTR 
                                    303 ; PTR+ ( u -- )
                                    304 ;------------------------------
      001DD9 1D BF                  305 	.word LINK 
                           001DDB   306 	LINK=.
      001DDB 04                     307 	.byte 4 
      001DDC 50 54 52 2B            308 	.ascii "PTR+"
      001DE0                        309 PTRPLUS:
      001DE0 90 93            [ 1]  310 	ldw y,x 
      001DE2 1C 00 02         [ 2]  311 	addw x,#CELLL 
      001DE5 72 B9 00 35      [ 2]  312 	addw y,PTR16 
      001DE9 90 BF 35         [ 2]  313 	ldw PTR16,y  
      001DEC 24 02            [ 1]  314 	jrnc 1$
      001DEE 3C 34            [ 1]  315 	inc FPTR 
      001DF0 81               [ 4]  316 1$: ret 
                                    317 
                                    318 ;---------------------------------
                                    319 ; read word at address pointed FPTR
                                    320 ; increment FPTR 
                                    321 ; EE-READ ( -- w )
                                    322 ;------------------------------------
      001DF1 1D DB                  323 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                           001DF3   324 	LINK=.
      001DF3 07                     325 	.byte 7 
      001DF4 45 45 2D 52 45 41 44   326 	.ascii "EE-READ"
      001DFB                        327 EE_READ:
      001DFB 1D 00 02         [ 2]  328 	subw x,#CELLL 
      001DFE 92 BC 00 34      [ 5]  329 	ldf a,[FPTR]
      001E02 90 95            [ 1]  330 	ld yh,a 
      001E04 CD 1D C8         [ 4]  331 	call INC_FPTR 
      001E07 92 BC 00 34      [ 5]  332 	ldf a,[FPTR]
      001E0B CD 1D C8         [ 4]  333 	call INC_FPTR 
      001E0E 90 97            [ 1]  334 	ld yl,a 
      001E10 FF               [ 2]  335 	ldw (x),y 
      001E11 81               [ 4]  336 	ret 
                                    337 
                                    338 ;---------------------------------------
                                    339 ; Read byte at address pointed by FPTR 
                                    340 ; EE-CREAD ( -- c )
                                    341 ;---------------------------------------
      001E12 1D F3                  342 	.word LINK 
                           001E14   343 	LINK=.
      001E14 08                     344 	.byte 8
      001E15 45 45 2D 43 52 45 41   345 	.ascii "EE-CREAD" 
             44
      001E1D                        346 EE_CREAD:
      001E1D 1D 00 02         [ 2]  347 	subw x,#CELLL 
      001E20 92 BC 00 34      [ 5]  348 	ldf a,[FPTR]	
      001E24 CD 1D C8         [ 4]  349 	call INC_FPTR
      001E27 90 5F            [ 1]  350 	clrw y 
      001E29 90 97            [ 1]  351 	ld yl,a 
      001E2B FF               [ 2]  352 	ldw (x),y 
      001E2C 81               [ 4]  353 	ret 
                                    354 
                                    355 ;----------------------------
                                    356 ; write a byte at address pointed 
                                    357 ; by FPTR and increment FPTR.
                                    358 ; Expect pointer already initialized 
                                    359 ; and memory unlocked 
                                    360 ; WR-BYTE ( c -- )
                                    361 ;----------------------------
      001E2D 1E 14                  362 	.word LINK 
                           001E2F   363 	LINK=. 
      001E2F 07                     364 	.byte 7 
      001E30 57 52 2D 42 59 54 45   365 	.ascii "WR-BYTE" 
                                    366 
      001E37                        367 WR_BYTE:
      001E37 CD 04 63         [ 4]  368 	call FC_XOFF
      001E3A 90 93            [ 1]  369 	ldw y,x 
      001E3C 90 FE            [ 2]  370 	ldw y,(y)
      001E3E 1C 00 02         [ 2]  371 	addw x,#CELLL 
      001E41 90 9F            [ 1]  372 	ld a,yl
      001E43 92 BD 00 34      [ 4]  373 	ldf [FPTR],a
      001E47 72 05 50 5F FB   [ 2]  374 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001E4C CD 04 4D         [ 4]  375 	call FC_XON
      001E4F CC 1D C8         [ 2]  376 	jp INC_FPTR 
                                    377 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                                    378 ;---------------------------------------
                                    379 ; write a word at address pointed 
                                    380 ; by FPTR and increment FPTR 
                                    381 ; Expect pointer already initialzed 
                                    382 ; and memory unlocked 
                                    383 ; WR-WORD ( w -- )
                                    384 ;---------------------------------------
      001E52 1E 2F                  385 	.word LINK 
                           001E54   386 	LINK=.
      001E54 07                     387 	.byte 7 
      001E55 57 52 2D 57 4F 52 44   388 	.ascii "WR-WORD" 
      001E5C                        389 WR_WORD:
      001E5C CD 04 63         [ 4]  390 	call FC_XOFF
      001E5F 90 93            [ 1]  391 	ldw y,x
      001E61 90 FE            [ 2]  392 	ldw y,(y)
      001E63 1C 00 02         [ 2]  393 	addw x,#CELLL 
      001E66 90 9E            [ 1]  394 	ld a,yh 
      001E68 92 BD 00 34      [ 4]  395 	ldf [FPTR],a
      001E6C 72 05 50 5F FB   [ 2]  396 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001E71 CD 1D C8         [ 4]  397 	call INC_FPTR 
      001E74 90 9F            [ 1]  398 	ld a,yl 
      001E76 92 BD 00 34      [ 4]  399 	ldf [FPTR],a
      001E7A 72 05 50 5F FB   [ 2]  400 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001E7F CD 04 4D         [ 4]  401 	call FC_XON
      001E82 CC 1D C8         [ 2]  402 	jp INC_FPTR 
                                    403 
                                    404 
                                    405 ;---------------------------------------
                                    406 ; write a byte to FLASH or EEPROM/OPTION  
                                    407 ; EEC!  (c ud -- )
                                    408 ;---------------------------------------
      001E85 1E 54                  409     .word LINK 
                           001E87   410 	LINK=.
      001E87 04                     411     .byte 4 
      001E88 45 45 43 21            412     .ascii "EEC!"
                                    413 	; local variables 
                           000001   414 	BTW = 1   ; byte to write offset on stack
                           000002   415     OPT = 2 
                           000002   416 	VSIZE = 2
      001E8C                        417 EECSTORE:
      001E8C 52 02            [ 2]  418 	sub sp,#VSIZE
      001E8E CD 1C 4E         [ 4]  419     call FPSTOR
      001E91 E6 01            [ 1]  420 	ld a,(1,x)
      001E93 43               [ 1]  421 	cpl a 
      001E94 6B 01            [ 1]  422 	ld (BTW,sp),a ; byte to write 
      001E96 0F 02            [ 1]  423 	clr (OPT,sp)  ; OPTION flag
      001E98 CD 1D 8C         [ 4]  424 	call UNLOCK 
                                    425 	; check if option
      001E9B 3D 34            [ 1]  426 	tnz FPTR 
      001E9D 26 19            [ 1]  427 	jrne 2$
      001E9F 90 BE 35         [ 2]  428 	ldw y,PTR16 
      001EA2 90 A3 48 00      [ 2]  429 	cpw y,#OPTION_BASE
      001EA6 2B 10            [ 1]  430 	jrmi 2$
      001EA8 90 A3 48 80      [ 2]  431 	cpw y,#OPTION_END+1
      001EAC 2A 0A            [ 1]  432 	jrpl 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      001EAE 03 02            [ 1]  433 	cpl (OPT,sp)
                                    434 	; OPTION WRITE require this UNLOCK 
      001EB0 72 1E 50 5B      [ 1]  435     bset FLASH_CR2,#FLASH_CR2_OPT
      001EB4 72 1F 50 5C      [ 1]  436     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001EB8                        437 2$: 
      001EB8 CD 1E 37         [ 4]  438 	call WR_BYTE 	
      001EBB 0D 02            [ 1]  439 	tnz (OPT,sp)
      001EBD 27 0D            [ 1]  440 	jreq 3$ 
      001EBF 7B 01            [ 1]  441     ld a,(BTW,sp)
      001EC1 90 5F            [ 1]  442     clrw y
      001EC3 90 97            [ 1]  443 	ld yl,a 
      001EC5 1D 00 02         [ 2]  444 	subw x,#CELLL 
      001EC8 FF               [ 2]  445 	ldw (x),y 
      001EC9 CD 1E 37         [ 4]  446 	call WR_BYTE
      001ECC                        447 3$: 
      001ECC CD 1D B4         [ 4]  448 	call LOCK 
      001ECF 5B 02            [ 2]  449 	addw sp,#VSIZE 
      001ED1 81               [ 4]  450     ret
                                    451 
                                    452 ;------------------------------
                                    453 ; write integer in FLASH|EEPROM
                                    454 ; EE! ( n ud -- )
                                    455 ;------------------------------
      001ED2 1E 87                  456 	.word LINK 
                           001ED4   457 	LINK=.
      001ED4 03                     458 	.byte 3 
      001ED5 45 45 21               459 	.ascii "EE!"
      001ED8                        460 EESTORE:
      001ED8 CD 1C 4E         [ 4]  461 	call FPSTOR 
      001EDB CD 1D 8C         [ 4]  462 	call UNLOCK 
      001EDE 90 93            [ 1]  463 	ldw y,x 
      001EE0 90 FE            [ 2]  464 	ldw y,(y)
      001EE2 90 89            [ 2]  465 	pushw y 
      001EE4 90 5E            [ 1]  466 	swapw y 
      001EE6 FF               [ 2]  467 	ldw (x),y 
      001EE7 CD 1E 37         [ 4]  468 	call WR_BYTE 
      001EEA 90 85            [ 2]  469 	popw y 
      001EEC 1D 00 02         [ 2]  470 	subw x,#CELLL
      001EEF FF               [ 2]  471 	ldw (x),y 
      001EF0 CD 1E 37         [ 4]  472 	call WR_BYTE
      001EF3 CC 1D B4         [ 2]  473 	jp LOCK 
                                    474 
                                    475 
                                    476 ;----------------------------
                                    477 ; Erase flash memory row 
                                    478 ; stm8s208 as 128 bytes rows
                                    479 ; ROW-ERASE ( ud -- )
                                    480 ;----------------------------
      001EF6 1E D4                  481 	.word LINK 
                           001EF8   482 	LINK=. 
      001EF8 09                     483 	.byte 9 
      001EF9 52 4F 57 2D 45 52 41   484 	.ascii "ROW-ERASE" 
             53 45
      001F02                        485 row_erase:
      001F02 CD 04 63         [ 4]  486 	call FC_XOFF
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      001F05 CD 1C 4E         [ 4]  487 	call FPSTOR
                                    488 ;code must be execute from RAM 
                                    489 ;copy routine to PAD 
      001F08 1D 00 02         [ 2]  490 	subw x,#CELLL 
      001F0B 90 AE 1F 5B      [ 2]  491 	ldw y,#row_erase_proc
      001F0F FF               [ 2]  492 	ldw (x),y 
      001F10 CD 0C EE         [ 4]  493 	call PAD 
      001F13 90 AE 1F 82      [ 2]  494 	ldw y,#row_erase_proc_end 
      001F17 72 A2 1F 5B      [ 2]  495 	subw y,#row_erase_proc
      001F1B 1D 00 02         [ 2]  496 	subw x,#CELLL 
      001F1E FF               [ 2]  497 	ldw (x),y 
      001F1F CD 0D 2A         [ 4]  498 	call CMOVE 
      001F22                        499 block_erase:
      001F22 90 BE 35         [ 2]  500 	ldw y,FPTR+1
      001F25 90 A3 36 00      [ 2]  501 	cpw y,#app_space 
      001F29 2A 19            [ 1]  502 	jrpl erase_flash 
                                    503 ; erase EEPROM block
      001F2B 90 A3 40 00      [ 2]  504 	cpw y,#EEPROM_BASE 
      001F2F 24 04            [ 1]  505 	jruge 1$
      001F31 CD 04 4D         [ 4]  506 	call FC_XON
      001F34 81               [ 4]  507 	ret ; bad address 
      001F35 90 A3 47 FF      [ 2]  508 1$: cpw y,#EEPROM_END 
      001F39 23 04            [ 2]  509 	jrule 2$ 
      001F3B CD 04 4D         [ 4]  510 	call FC_XON
      001F3E 81               [ 4]  511 	ret ; bad address 
      001F3F                        512 2$:	
      001F3F CD 1D 4E         [ 4]  513 	call UNLKEE 
      001F42 20 03            [ 2]  514 	jra proceed_erase
                                    515 ; erase flash block:
      001F44                        516 erase_flash:
      001F44 CD 1D 6D         [ 4]  517 	call UNLKFL 
      001F47                        518 proceed_erase:
      001F47 CD 0C EE         [ 4]  519 	call PAD 
      001F4A 90 93            [ 1]  520 	ldw y,x
      001F4C 90 FE            [ 2]  521 	ldw y,(y)
      001F4E 1C 00 02         [ 2]  522 	addw x,#CELLL  
      001F51 90 FD            [ 4]  523 	call (y) 
      001F53 72 17 50 5F      [ 1]  524 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001F57 CD 04 4D         [ 4]  525 	call FC_XON
      001F5A 81               [ 4]  526 	ret 
                                    527 
                                    528 ; this routine is to be copied to PAD 
      001F5B                        529 row_erase_proc:
      001F5B 35 20 50 5B      [ 1]  530 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001F5F 35 DF 50 5C      [ 1]  531 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001F63 4F               [ 1]  532 	clr a 
      001F64 90 5F            [ 1]  533 	clrw y 
      001F66 91 A7 00 34      [ 1]  534 	ldf ([FPTR],y),a
      001F6A 90 5C            [ 1]  535     incw y
      001F6C 91 A7 00 34      [ 1]  536 	ldf ([FPTR],y),a
      001F70 90 5C            [ 1]  537     incw y
      001F72 91 A7 00 34      [ 1]  538 	ldf ([FPTR],y),a
      001F76 90 5C            [ 1]  539     incw y
      001F78 91 A7 00 34      [ 1]  540 	ldf ([FPTR],y),a
      001F7C 72 05 50 5F FB   [ 2]  541 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      001F81 81               [ 4]  542 	ret
      001F82                        543 row_erase_proc_end:
                                    544 
                                    545 
                                    546 ;-----------------------------------
                                    547 ; block programming must be 
                                    548 ; executed from RAM 
                                    549 ; initial contidions: 
                                    550 ; 		memory unlocked
                                    551 ;       FPTR initialized 
                                    552 ; input: 
                                    553 ;    x   buffer address 
                                    554 ;-----------------------------------
                           000001   555 	BCNT=1 
      001F82                        556 copy_buffer:
      001F82 4B 80            [ 1]  557 	push #BLOCK_SIZE  
                                    558 ;enable block programming 
      001F84 72 10 50 5B      [ 1]  559 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001F88 72 11 50 5C      [ 1]  560 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001F8C 90 5F            [ 1]  561 	clrw y
      001F8E F6               [ 1]  562 1$:	ld a,(x)
      001F8F 91 A7 00 34      [ 1]  563 	ldf ([FPTR],y),a
      001F93 5C               [ 1]  564 	incw x 
      001F94 90 5C            [ 1]  565 	incw y 
      001F96 0A 01            [ 1]  566 	dec (BCNT,sp)
      001F98 26 F4            [ 1]  567 	jrne 1$
                                    568 ; wait EOP bit 
      001F9A 72 05 50 5F FB   [ 2]  569 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001F9F 84               [ 1]  570 	pop a ; remove BCNT from stack 
      001FA0 81               [ 4]  571 	ret 
      001FA1                        572 copy_buffer_end:
                                    573 
                                    574 ;-------------------------
                                    575 ; move program_row to RAM 
                                    576 ; in TIB 
                                    577 ;------------------------
      001FA1                        578 copy_prog_to_ram:
      001FA1 1D 00 06         [ 2]  579 	subw x,#6
      001FA4 90 AE 1F 82      [ 2]  580 	ldw y,#copy_buffer 
      001FA8 EF 04            [ 2]  581 	ldw (4,x),y 
      001FAA 90 AE 17 00      [ 2]  582 	ldw y,#TIBBASE
      001FAE EF 02            [ 2]  583 	ldw (2,x),y 
      001FB0 90 AE 1F A1      [ 2]  584 	ldw y,#copy_buffer_end 
      001FB4 72 A2 1F 82      [ 2]  585 	subw y,#copy_buffer  
      001FB8 FF               [ 2]  586 	ldw (x),y 
      001FB9 CD 0D 2A         [ 4]  587 	call CMOVE 
      001FBC 81               [ 4]  588 	ret 
                                    589 
                                    590 
                                    591 ;-----------------------------
                                    592 ; write a row in FLASH/EEPROM 
                                    593 ; WR-ROW ( a ud -- )
                                    594 ; a -> address 128 byte buffer to write 
                                    595 ; ud ->  row address in FLASH|EEPROM 
                                    596 ;-----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      001FBD 1E F8                  597 	.word LINK 
                           001FBF   598 	LINK=.
      001FBF 06                     599 	.byte 6 
      001FC0 57 52 2D 52 4F 57      600 	.ascii "WR-ROW"
      001FC6                        601 write_row:
      001FC6 CD 04 63         [ 4]  602 	call FC_XOFF
      001FC9 CD 1C 4E         [ 4]  603 	call FPSTOR
                                    604 ; align to FLASH block 
      001FCC A6 80            [ 1]  605 	ld a,#0x80 
      001FCE B4 36            [ 1]  606 	and a,PTR8 
      001FD0 B7 36            [ 1]  607 	ld PTR8,a  
      001FD2 CD 1F A1         [ 4]  608 	call copy_prog_to_ram
      001FD5 CD 1D 8C         [ 4]  609 	call UNLOCK
      001FD8 90 93            [ 1]  610 	ldw y,x 
      001FDA 90 FE            [ 2]  611 	ldw y,(y)
      001FDC 1C 00 02         [ 2]  612 	addw x,#CELLL 
      001FDF 89               [ 2]  613 	pushw x 
      001FE0 93               [ 1]  614 	ldw x,y ; buffer address in x 
      001FE1 CD 17 00         [ 4]  615 	call TIBBASE
      001FE4 CD 1D B4         [ 4]  616 	call LOCK
      001FE7 85               [ 2]  617 	popw x 
      001FE8 CD 04 4D         [ 4]  618 	call FC_XON 
      001FEB 81               [ 4]  619 	ret 
                                    620 
                                    621 ;-------------------------------------
                                    622 ; change value of OPTION register 
                                    623 ; SET-OPT (c n -- ) 
                                    624 ; c new value.
                                    625 ; n OPT  number {1..7}
                                    626 ;--------------------------------------
      001FEC 1F BF                  627 		.word LINK 
                           001FEE   628 		LINK=.
      001FEE 07                     629 		.byte 7 
      001FEF 53 45 54 2D 4F 50 54   630 		.ascii "SET-OPT" 
      001FF6                        631 set_option: 
      001FF6 90 93            [ 1]  632 		ldw y,x 
      001FF8 90 FE            [ 2]  633 		ldw y,(y)
      001FFA 27 06            [ 1]  634 		jreq 1$
      001FFC 90 A3 00 07      [ 2]  635 		cpw y,#7 
      002000 23 04            [ 2]  636 		jrule 2$ 
                                    637 ; invalid OPTION number 		
      002002 1C 00 04         [ 2]  638 1$:		addw x,#2*CELLL
      002005 81               [ 4]  639 		ret
      002006 90 58            [ 2]  640 2$:		sllw y 
      002008 72 A9 47 FF      [ 2]  641 		addw y,#OPTION_BASE-1
      00200C FF               [ 2]  642 		ldw (x),y 
      00200D 1D 00 02         [ 2]  643 		subw x,#CELLL 
      002010 90 5F            [ 1]  644 		clrw y 
      002012 FF               [ 2]  645 		ldw (x),y 
      002013 CD 1E 8C         [ 4]  646 		call EECSTORE
      002016 81               [ 4]  647 		ret 
                                    648 
                                    649 
                                    650 
                                    651 ;--------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



                                    652 ; reset system to its original state 
                                    653 ; before any user modification
                                    654 ; PRISTINE ( -- )
                                    655 ;-------------------------------------
      002017 1F EE                  656 	.word LINK  
                           002019   657 	LINK=.
      002019 08                     658 	.byte 8 
      00201A 50 52 49 53 54 49 4E   659 	.ascii "PRISTINE"
             45
      002022                        660 pristine:
                                    661 ;;; erase EEPROM
      002022 CD 1C 6D         [ 4]  662 	call EEPROM 
      002025 CD 08 27         [ 4]  663 1$:	call DDUP 
      002028 CD 1F 02         [ 4]  664 	call row_erase
      00202B 90 93            [ 1]  665 	ldw y,x 
      00202D 90 EE 02         [ 2]  666 	ldw y,(2,y)
      002030 72 A9 00 80      [ 2]  667 	addw y,#BLOCK_SIZE
      002034 EF 02            [ 2]  668 	ldw (2,x),y
      002036 90 A3 48 00      [ 2]  669 	cpw y,#OPTION_BASE 
      00203A 25 E9            [ 1]  670 	jrult 1$
                                    671 ;;; reset OPTION to default values
      00203C 90 AE 00 01      [ 2]  672 	ldw y,#1 ; OPT1 
      002040 FF               [ 2]  673 2$:	ldw (x),y   
      002041 90 5F            [ 1]  674 	clrw y 
      002043 EF 02            [ 2]  675 	ldw (2,x),y  ; ( 0 1 -- ) 
      002045 CD 08 27         [ 4]  676 	call DDUP    ; ( 0 1 0 1 -- )  
      002048 CD 1F F6         [ 4]  677 	call set_option
      00204B 90 93            [ 1]  678 	ldw y,x 
      00204D 90 FE            [ 2]  679 	ldw y,(y)
      00204F 90 5C            [ 1]  680 	incw y  ; next OPTION 
      002051 90 A3 00 08      [ 2]  681 	cpw y,#8 
      002055 25 E9            [ 1]  682 	jrult 2$
                                    683 ;;; erase first row of app_space 	
      002057 90 AE 36 00      [ 2]  684 	ldw y,#app_space
      00205B EF 02            [ 2]  685 	ldw (2,x),y  
      00205D 90 5F            [ 1]  686 	clrw y 
      00205F FF               [ 2]  687 	ldw (x),y ; ( app_space 0 -- )
      002060 CD 1F 02         [ 4]  688 	call row_erase 
                                    689 ; reset interrupt vectors 
      002063 1D 00 02         [ 2]  690 	subw x,#CELLL 
      002066 90 5F            [ 1]  691 	clrw y  
      002068 FF               [ 2]  692 4$:	ldw (x),y  ; ( n -- ) int# 
      002069 CD 06 19         [ 4]  693 	call DUPP  
      00206C CD 20 89         [ 4]  694 	call reset_vector
      00206F 90 93            [ 1]  695 	ldw y,x 
      002071 90 FE            [ 2]  696 	ldw y,(y)
      002073 90 5C            [ 1]  697 	incw y   ; next vector 
      002075 90 A3 00 19      [ 2]  698 	cpw y,#25 
      002079 25 ED            [ 1]  699 	jrult 4$
      00207B CC 00 00         [ 2]  700 	jp NonHandledInterrupt ; reset MCU
                                    701 
                                    702 ;------------------------------
                                    703 ; reset an interrupt vector 
                                    704 ; to its initial value 
                                    705 ; i.e. NonHandledInterrupt
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



                                    706 ; RST-IVEC ( n -- )
                                    707 ;-----------------------------
      00207E 20 19                  708 	.word LINK 
                           002080   709 	LINK=. 
      002080 08                     710 	.byte 8 
      002081 52 53 54 2D 49 56 45   711 	.ascii "RST-IVEC"
             43
      002089                        712 reset_vector:
      002089 90 93            [ 1]  713 	ldw y,x
      00208B 1C 00 02         [ 2]  714 	addw x,#CELLL 
      00208E 90 FE            [ 2]  715 	ldw y,(y)
      002090 90 A3 00 17      [ 2]  716 	cpw y,#23 
      002094 27 3A            [ 1]  717 	jreq 9$
      002096 90 A3 00 1D      [ 2]  718 	cpw y,#29 ; last vector
      00209A 22 34            [ 1]  719 	jrugt 9$  
      00209C 90 58            [ 2]  720 	sllw y 
      00209E 90 58            [ 2]  721 	sllw y 
      0020A0 72 A9 80 08      [ 2]  722 	addw y,#0x8008 ; irq0 address 
      0020A4 90 BF 26         [ 2]  723 	ldw YTEMP,y
      0020A7 1D 00 06         [ 2]  724 	subw x,#3*CELLL 
      0020AA EF 02            [ 2]  725 	ldw (2,x),y 
      0020AC 90 5F            [ 1]  726 	clrw y
      0020AE FF               [ 2]  727 	ldw (x),y 
      0020AF A6 82            [ 1]  728 	ld a,#0x82 
      0020B1 90 95            [ 1]  729 	ld yh,a
      0020B3 EF 04            [ 2]  730 	ldw (4,x),y
      0020B5 CD 1E D8         [ 4]  731 	call EESTORE
      0020B8 1D 00 06         [ 2]  732 	subw x,#3*CELLL
      0020BB 90 5F            [ 1]  733 	clrw y 
      0020BD FF               [ 2]  734 	ldw (x),y 
      0020BE 90 AE 00 00      [ 2]  735 	ldw y,#NonHandledInterrupt
      0020C2 EF 04            [ 2]  736 	ldw (4,x),y 
      0020C4 90 BE 26         [ 2]  737 	ldw y,YTEMP  
      0020C7 72 A9 00 02      [ 2]  738 	addw y,#2
      0020CB EF 02            [ 2]  739 	ldw (2,x),y 
      0020CD CD 1E D8         [ 4]  740 	call EESTORE
      0020D0 81               [ 4]  741 9$:	ret 
                                    742 
                                    743 
                                    744 ;------------------------------
                                    745 ; all interrupt vector with 
                                    746 ; an address >= a are resetted 
                                    747 ; to default
                                    748 ; CHKIVEC ( a -- )
                                    749 ;------------------------------
      0020D1 20 80                  750 	.word LINK 
                           0020D3   751 	LINK=.
      0020D3 07                     752 	.byte 7
      0020D4 43 48 4B 49 56 45 43   753 	.ascii "CHKIVEC"
                                    754 ;local variables 
                           000001   755 	SSP=1
                           000003   756 	CADR=3
                           000005   757 	OFS=5
                           000006   758 	VSIZE=6  
      0020DB                        759 CHKIVEC:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      0020DB 52 06            [ 2]  760 	sub sp,#VSIZE ;alloc local variables 
      0020DD 90 93            [ 1]  761 	ldw y,x 
      0020DF 90 FE            [ 2]  762 	ldw y,(y)
      0020E1 17 03            [ 2]  763 	ldw (CADR,sp),y ; ca 
      0020E3 1F 01            [ 2]  764 	ldw (SSP,sp),x 
      0020E5 AE 80 0A         [ 2]  765 	ldw x,#0x800a ; irq0 address 
      0020E8 BF 35            [ 2]  766 	ldw PTR16,X
      0020EA AE FF FC         [ 2]  767 	ldw x,#-4 
      0020ED 1C 00 04         [ 2]  768 1$:	addw x,#4
      0020F0 A3 00 78         [ 2]  769 	cpw x,#30*4 ; irq0-29 
      0020F3 27 22            [ 1]  770 	jreq 9$
      0020F5 90 93            [ 1]  771 	ldw y,x  
      0020F7 91 D6 35         [ 4]  772 	ld a,([PTR16],y)
      0020FA 11 03            [ 1]  773 	cp a,(CADR,sp)
      0020FC 25 EF            [ 1]  774 	jrult 1$
      0020FE 90 5C            [ 1]  775 	incw y 
      002100 91 D6 35         [ 4]  776 	ld a,([PTR16],y)
      002103 11 04            [ 1]  777 	cp a,(CADR+1,sp) 
      002105 25 E6            [ 1]  778 	jrult 1$ 
      002107 1F 05            [ 2]  779 	ldw (OFS,sp),x 
      002109 54               [ 2]  780 	srlw x
      00210A 54               [ 2]  781 	srlw x 
      00210B 90 93            [ 1]  782 	ldw y,x 
      00210D 1E 01            [ 2]  783 	ldw x,(SSP,sp)
      00210F FF               [ 2]  784 	ldw (x),y
      002110 CD 20 89         [ 4]  785 	call reset_vector
      002113 1E 05            [ 2]  786 	ldw x,(OFS,sp) 
      002115 20 D6            [ 2]  787 	jra 1$
      002117 1E 01            [ 2]  788 9$:	ldw x,(SSP,sp) 
      002119 1C 00 02         [ 2]  789 	addw x,#CELLL 
      00211C 5B 06            [ 2]  790 	addw sp,#VSIZE ; drop local variables  
      00211E 81               [ 4]  791 	ret 
                                    792 
                                    793 ;------------------------------
                                    794 ; set interrupt vector 
                                    795 ; SET-IVEC ( ud n -- )
                                    796 ;  ud Handler address
                                    797 ;  n  vector # 0 .. 29 
                                    798 ;-----------------------------
      00211F 20 D3                  799 	.word LINK
                           002121   800 	LINK=.
      002121 08                     801 	.byte 8 
      002122 53 45 54 2D 49 56 45   802 	.ascii "SET-IVEC" 
             43
      00212A                        803 set_vector:
      00212A 90 93            [ 1]  804     ldw y,x 
      00212C 1C 00 02         [ 2]  805 	addw x,#CELLL 
      00212F 90 FE            [ 2]  806 	ldw y,(y) ; vector #
      002131 90 A3 00 1D      [ 2]  807 	cpw y,#29 ; last vector
      002135 23 04            [ 2]  808 	jrule 2$
      002137 1C 00 04         [ 2]  809 	addw x,#2*CELLL 
      00213A 81               [ 4]  810 	ret
      00213B 90 58            [ 2]  811 2$:	sllw y 
      00213D 90 58            [ 2]  812 	sllw y 
      00213F 72 A9 80 08      [ 2]  813 	addw y,#0X8008 ; IRQ0 vector address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      002143 90 BF 26         [ 2]  814 	ldw YTEMP,y ; vector address 
      002146 A6 82            [ 1]  815 	ld a,#0x82 
      002148 90 95            [ 1]  816 	ld yh,a 
      00214A E6 01            [ 1]  817 	ld a,(1,x) ; isr address bits 23..16 
      00214C 90 97            [ 1]  818 	ld yl,a 
                                    819 ;  write 0x82 + most significant byte of int address	
      00214E 1D 00 06         [ 2]  820 	subw x,#3*CELLL 
      002151 EF 04            [ 2]  821 	ldw (4,x),y 
      002153 90 BE 26         [ 2]  822 	ldw y,YTEMP
      002156 EF 02            [ 2]  823 	ldw (2,x),y ; vector address 
      002158 90 5F            [ 1]  824 	clrw y 
      00215A FF               [ 2]  825 	ldw (x),y   ; as a double 
      00215B CD 1E D8         [ 4]  826 	call EESTORE 
      00215E 90 93            [ 1]  827 	ldw y,x 
      002160 90 EE 02         [ 2]  828 	ldw y,(2,y) ; bits 15..0 int vector 
      002163 1D 00 06         [ 2]  829 	subw x,#3*CELLL 
      002166 EF 04            [ 2]  830 	ldw (4,x),y 
      002168 90 BE 26         [ 2]  831 	ldw y,YTEMP 
      00216B 72 A9 00 02      [ 2]  832 	addw y,#2 
      00216F EF 02            [ 2]  833 	ldw (2,x),y 
      002171 90 5F            [ 1]  834 	clrw y 
      002173 FF               [ 2]  835 	ldw (x),y 
      002174 CD 1E D8         [ 4]  836 	call EESTORE
      002177 1C 00 04         [ 2]  837 	addw x,#2*CELLL  
      00217A 81               [ 4]  838 9$: ret 
                                    839 
                                    840 
                                    841 ;------------------------
                                    842 ; Compile word to flash
                                    843 ; EE, (w -- )
                                    844 ;-----------------------
      00217B 21 21                  845 	.word LINK
                           00217D   846 	LINK=.
      00217D 03                     847 	.byte 3
      00217E 45 45 2C               848 	.ascii "EE,"
      002181                        849 EE_COMMA:
      002181 1D 00 04         [ 2]  850 	subw x,#2*CELLL 
      002184 90 BE 1A         [ 2]  851 	ldw y,UCP
      002187 90 89            [ 2]  852 	pushw y 
      002189 EF 02            [ 2]  853 	ldw (2,x),y 
      00218B 90 5F            [ 1]  854 	clrw y 
      00218D FF               [ 2]  855 	ldw (x),y
      00218E CD 1E D8         [ 4]  856 	call EESTORE
      002191 90 85            [ 2]  857 	popw y 
      002193 72 A9 00 02      [ 2]  858 	addw y,#2
      002197 90 BF 1A         [ 2]  859 	ldw UCP,y
      00219A 81               [ 4]  860 	ret 
                                    861 
                                    862 
                                    863 ;-------------------------
                                    864 ; Compile byte to flash 
                                    865 ; EEC, ( c -- )	
                                    866 ;-------------------------
      00219B 21 7D                  867 	.word LINK 
                           00219D   868 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



      00219D 04                     869 	.byte 4 
      00219E 45 45 43 2C            870 	.ascii "EEC,"
      0021A2                        871 EE_CCOMMA:
      0021A2 1D 00 04         [ 2]  872 	subw x,#2*CELLL 
      0021A5 90 BE 1A         [ 2]  873 	ldw y,UCP
      0021A8 90 89            [ 2]  874 	pushw y 
      0021AA EF 02            [ 2]  875 	ldw (2,x),y 
      0021AC 90 5F            [ 1]  876 	clrw y 
      0021AE FF               [ 2]  877 	ldw (x),y
      0021AF CD 1E 8C         [ 4]  878 	call EECSTORE
      0021B2 90 85            [ 2]  879 	popw y 
      0021B4 90 5C            [ 1]  880 	incw y 
      0021B6 90 BF 1A         [ 2]  881 	ldw UCP,y
      0021B9 81               [ 4]  882 	ret 
                                    883 
                                    884 
                                    885 ;--------------------------
                                    886 ; copy FLASH block to ROWBUF
                                    887 ; ROW>BUF ( ud -- )
                                    888 ;--------------------------
      0021BA 21 9D                  889 	.word LINK 
                           0021BC   890 	LINK=.
      0021BC 07                     891 	.byte 7 
      0021BD 52 4F 57 3E 42 55 46   892 	.ascii "ROW>BUF"
      0021C4                        893 ROW2BUF: 
      0021C4 CD 1C 4E         [ 4]  894 	call FPSTOR 
      0021C7 A6 80            [ 1]  895 	ld a,#BLOCK_SIZE
      0021C9 88               [ 1]  896 	push a 
      0021CA B4 36            [ 1]  897 	and a,PTR8 ; block align 
      0021CC B7 36            [ 1]  898 	ld PTR8,a
      0021CE 90 AE 16 80      [ 2]  899 	ldw y,#ROWBUFF 
      0021D2 92 BC 00 34      [ 5]  900 1$: ldf a,[FPTR]
      0021D6 90 F7            [ 1]  901 	ld (y),a
      0021D8 CD 1D C8         [ 4]  902 	call INC_FPTR
      0021DB 90 5C            [ 1]  903 	incw y 
      0021DD 0A 01            [ 1]  904 	dec (1,sp)
      0021DF 26 F1            [ 1]  905 	jrne 1$ 
      0021E1 84               [ 1]  906 	pop a 
      0021E2 81               [ 4]  907 	ret 
                                    908 
                                    909 
                                    910 ;---------------------------
                                    911 ; copy ROWBUFF to flash 
                                    912 ; BUF>ROW ( ud -- )
                                    913 ; ud is row address as double 
                                    914 ;---------------------------
      0021E3 21 BC                  915 	.word LINK 
                           0021E5   916 	LINK=.
      0021E5 07                     917 	.byte 7 
      0021E6 42 55 46 3E 52 4F 57   918 	.ascii "BUF>ROW" 
      0021ED                        919 BUF2ROW:
      0021ED CD 07 1D         [ 4]  920 	call TBUF ; ( ud rb -- )
      0021F0 CD 07 DD         [ 4]  921 	call ROT 
      0021F3 CD 07 DD         [ 4]  922 	call ROT  ; ( rb ud -- )
      0021F6 CD 1F C6         [ 4]  923 	call write_row 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      0021F9 81               [ 4]  924 	ret 
                                    925 
                                    926 ;---------------------------------
                                    927 ; how many byte free in that row 
                                    928 ; RFREE ( a -- n )
                                    929 ; a is least byte of target address
                                    930 ;----------------------------------
      0021FA 21 E5                  931 	.word LINK 
                           0021FC   932 	LINK=.
      0021FC 05                     933 	.byte 5 
      0021FD 52 46 52 45 45         934 	.ascii "RFREE"
      002202                        935 RFREE:
      002202 E6 01            [ 1]  936 	ld a,(1,x)
      002204 A4 7F            [ 1]  937 	and a,#BLOCK_SIZE-1 
      002206 B7 26            [ 1]  938 	ld YTEMP,a 
      002208 A6 80            [ 1]  939 	ld a,#BLOCK_SIZE 
      00220A B0 26            [ 1]  940 	sub a,YTEMP 
      00220C 90 5F            [ 1]  941 	clrw y 
      00220E 90 97            [ 1]  942 	ld yl,a
      002210 FF               [ 2]  943 	ldw (x),y 
      002211 81               [ 4]  944 	ret 
                                    945 
                                    946 ;---------------------------------
                                    947 ; write u bytes to flash/EEPROM 
                                    948 ; constraint to row limit 
                                    949 ; RAM>EE ( ud a u -- u2 )
                                    950 ; ud flash address 
                                    951 ; a ram address 
                                    952 ; u bytes count
                                    953 ; return u2 bytes written  
                                    954 ;-------------------------------
      002212 21 FC                  955 	.word LINK 
                           002214   956 	LINK=. 
      002214 06                     957 	.byte 6
      002215 52 41 4D 3E 45 45      958 	.ascii "RAM>EE"
                                    959 	
      00221B                        960 RAM2EE:
                                    961 ; copy ud on top 
      00221B 90 93            [ 1]  962 	ldw y,x 
      00221D 90 EE 06         [ 2]  963 	ldw y,(6,y) ; LSW of ud  
      002220 90 BF 26         [ 2]  964 	ldw YTEMP,y 
      002223 90 93            [ 1]  965 	ldw y,x 
      002225 90 EE 04         [ 2]  966 	ldw y,(4,y)  ; MSW of ud 
      002228 1D 00 04         [ 2]  967 	subw x,#2*CELLL 
      00222B FF               [ 2]  968 	ldw (x),y 
      00222C 90 BE 26         [ 2]  969 	ldw y,YTEMP 
      00222F EF 02            [ 2]  970 	ldw (2,x),y 
      002231 CD 21 C4         [ 4]  971 	call ROW2BUF 
      002234 90 93            [ 1]  972 	ldw y,x 
      002236 90 EE 06         [ 2]  973 	ldw y,(6,y)
      002239 90 89            [ 2]  974 	pushw y ; udl 
      00223B 90 9F            [ 1]  975 	ld a,yl
      00223D A4 7F            [ 1]  976 	and a,#BLOCK_SIZE-1 
      00223F 90 5F            [ 1]  977 	clrw y 
      002241 90 97            [ 1]  978 	ld yl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      002243 72 A9 16 80      [ 2]  979 	addw y,#ROWBUFF 
      002247 1D 00 02         [ 2]  980 	subw x,#CELLL 
      00224A FF               [ 2]  981 	ldw (x),y  
      00224B CD 06 29         [ 4]  982 	call SWAPP ;  ( ud a ra u -- )
      00224E CD 05 34         [ 4]  983 	call RFROM  
      002251 CD 22 02         [ 4]  984 	call RFREE 
      002254 CD 09 7F         [ 4]  985 	call MIN
      002257 CD 06 19         [ 4]  986 	call DUPP 
      00225A CD 05 E2         [ 4]  987 	call TOR  
      00225D CD 0D 2A         [ 4]  988 	call CMOVE
      002260 CD 21 ED         [ 4]  989 	call BUF2ROW 
      002263 CD 05 34         [ 4]  990 	call RFROM 
      002266 81               [ 4]  991 	ret 
                                    992 
                                    993 
                                    994 ;--------------------------
                                    995 ; expand 16 bit address 
                                    996 ; to 32 bit address 
                                    997 ; FADDR ( a -- ud )
                                    998 ;--------------------------
      002267 22 14                  999 	.word LINK 
                           002269  1000 	LINK=. 
      002269 05                    1001 	.byte 5 
      00226A 46 41 44 44 52        1002 	.ascii "FADDR"
      00226F                       1003 FADDR:
      00226F CC 0C 03         [ 2] 1004 	jp ZERO 
                                   1005 
                                   1006 
                                   1007 ;--------------------------
                                   1008 ; move new colon definition to FLASH 
                                   1009 ; using WR-ROW for efficiency 
                                   1010 ; preserving bytes already used 
                                   1011 ; in the current block. 
                                   1012 ; At this point the compiler as completed
                                   1013 ; in RAM and pointers CP and CNTXT updated.
                                   1014 ; CNTXT point to nfa of new word and  
                                   1015 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                   1016 ; 
                                   1017 ; FMOVE ( -- cp+ )
                                   1018 ; 
                                   1019 ;--------------------------
      002272 22 69                 1020 	.word LINK 
                           002274  1021 	LINK=.
      002274 05                    1022 	.byte 5 
      002275 46 4D 4F 56 45        1023 	.ascii "FMOVE" 
      00227A                       1024 FMOVE:
      00227A CD 07 2F         [ 4] 1025 	call TFLASH 
      00227D CD 04 E3         [ 4] 1026 	CALL AT 
      002280 CD 04 98         [ 4] 1027 	CALL QBRAN 
      002283 22 FE                 1028 	.word no_move  
      002285 CD 07 7E         [ 4] 1029 	call CPP
      002288 CD 04 E3         [ 4] 1030 	call AT  
      00228B CD 06 19         [ 4] 1031 	call DUPP ; ( udl udl -- )
      00228E CD 07 62         [ 4] 1032 	call CNTXT 
      002291 CD 04 E3         [ 4] 1033 	call AT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      002294 CD 04 6F         [ 4] 1034 	call DOLIT 
      002297 00 02                 1035 	.word 2 
      002299 CD 08 D2         [ 4] 1036 	call SUBB ; ( udl udl a -- )
      00229C CD 06 29         [ 4] 1037 	call SWAPP 
      00229F CD 22 6F         [ 4] 1038 	call FADDR 
      0022A2 CD 07 DD         [ 4] 1039 	call ROT  ; ( udl ud a -- )
      0022A5 CD 06 19         [ 4] 1040 	call DUPP 
      0022A8 CD 05 E2         [ 4] 1041 	call TOR    ; R: a 
      0022AB                       1042 FMOVE2: 
      0022AB CD 0C DD         [ 4] 1043 	call HERE 
      0022AE CD 05 45         [ 4] 1044 	call RAT 
      0022B1 CD 08 D2         [ 4] 1045 	call SUBB ; (udl ud a wl -- )
      0022B4                       1046 next_row:
      0022B4 CD 06 19         [ 4] 1047 	call DUPP 
      0022B7 CD 05 E2         [ 4] 1048 	call TOR  ; ( udl ud a wl -- ) R: a wl
      0022BA CD 22 1B         [ 4] 1049 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      0022BD CD 06 19         [ 4] 1050 	call DUPP 
      0022C0 CD 05 E2         [ 4] 1051 	call TOR
      0022C3 CD 08 3C         [ 4] 1052 	call PLUS  ; ( udl+ ) 
      0022C6 CD 06 19         [ 4] 1053 	call DUPP 
      0022C9 CD 0C 03         [ 4] 1054 	call ZERO   ; ( udl+ ud -- )
      0022CC CD 05 34         [ 4] 1055 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      0022CF CD 05 34         [ 4] 1056 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      0022D2 CD 06 41         [ 4] 1057 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      0022D5 CD 08 D2         [ 4] 1058 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      0022D8 CD 06 19         [ 4] 1059 	call DUPP 
      0022DB CD 04 98         [ 4] 1060 	call QBRAN
      0022DE 22 F7                 1061 	.word fmove_done 
      0022E0 CD 06 29         [ 4] 1062 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      0022E3 CD 05 34         [ 4] 1063 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      0022E6 CD 08 3C         [ 4] 1064 	call PLUS  ; ( udl+2 ud wl- a+ )
      0022E9 CD 06 19         [ 4] 1065 	call DUPP 
      0022EC CD 05 E2         [ 4] 1066 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      0022EF CD 06 29         [ 4] 1067 	call SWAPP 
      0022F2 CD 04 B4         [ 4] 1068 	call BRAN
      0022F5 22 B4                 1069 	.word next_row  
      0022F7                       1070 fmove_done:	
      0022F7 CD 05 34         [ 4] 1071 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      0022FA 1C 00 0A         [ 2] 1072 	addw x,#5*CELLL ; (  -- cp+ ) new CP 
      0022FD 81               [ 4] 1073  	ret  
      0022FE                       1074 no_move:
      0022FE CD 0C 03         [ 4] 1075 	call ZERO
      002301 81               [ 4] 1076 	ret 
                                   1077 
                                   1078 ;------------------------------------------
                                   1079 ; adjust pointers after **FMOVE** operetion.
                                   1080 ; UPDAT-PTR ( cp+ -- )
                                   1081 ; cp+ is new CP position after FMOVE 
                                   1082 ;-------------------------------------------
      002302 22 74                 1083 	.word LINK 
                           002304  1084 	LINK=.
      002304 09                    1085 	.byte 9
      002305 55 50 44 41 54 2D 50  1086 	.ascii "UPDAT-PTR" 
             54 52
      00230E                       1087 UPDATPTR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



                                   1088 ;reset VP to previous position  
      00230E CD 1C C8         [ 4] 1089 	call EEPVP 
      002311                       1090 	_DROP 
      002311 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002314 CD 04 E3         [ 4] 1091 	call AT
      002317 CD 07 70         [ 4] 1092 	call VPP 
      00231A CD 04 D1         [ 4] 1093 	call STORE
                                   1094 ;update CONTEXT and LAST 
      00231D CD 1C B2         [ 4] 1095 	call EEPCP 
      002320                       1096 	_DROP
      002320 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002323 CD 04 E3         [ 4] 1097 	call AT
      002326 CD 04 6F         [ 4] 1098 	call DOLIT 
      002329 00 02                 1099 	.word 2 
      00232B CD 08 3C         [ 4] 1100 	call PLUS 
      00232E CD 06 19         [ 4] 1101 	call DUPP 
      002331 CD 07 62         [ 4] 1102 	call CNTXT 
      002334 CD 04 D1         [ 4] 1103 	call STORE
      002337 CD 07 8E         [ 4] 1104 	call LAST
      00233A CD 04 D1         [ 4] 1105 	call STORE 
      00233D CD 1C E2         [ 4] 1106 	call UPDATLAST 
                                   1107 ;update CP 
      002340 CD 07 7E         [ 4] 1108 	call CPP 
      002343 CD 04 D1         [ 4] 1109 	call STORE
      002346 CD 1D 0B         [ 4] 1110 	call UPDATCP 
      002349 81               [ 4] 1111 	ret 
                                   1112 
                                   1113 ;-----------------------------
                                   1114 ; move interrupt sub-routine
                                   1115 ; in flash memory
                                   1116 ;----------------------------- 
      00234A 23 04                 1117 	.word LINK 
                           00234C  1118 	LINK=. 
      00234C 06                    1119 	.byte 6
      00234D 49 46 4D 4F 56 45     1120 	.ascii "IFMOVE" 
      002353                       1121 IFMOVE:
      002353 CD 07 2F         [ 4] 1122 	call TFLASH 
      002356 CD 04 E3         [ 4] 1123 	CALL AT 
      002359 CD 04 98         [ 4] 1124 	CALL QBRAN 
      00235C 22 FE                 1125 	.word no_move 
      00235E CD 07 7E         [ 4] 1126 	call CPP 
      002361 CD 04 E3         [ 4] 1127 	call AT 
      002364 CD 06 19         [ 4] 1128 	call DUPP ; ( udl udl -- )
      002367 CD 1C C8         [ 4] 1129 	call EEPVP 
      00236A                       1130 	_DROP
      00236A 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00236D CD 04 E3         [ 4] 1131 	call AT  ; ( udl udl a )
      002370 CD 05 E2         [ 4] 1132 	call TOR 
      002373 CD 22 6F         [ 4] 1133 	call FADDR
      002376 CD 05 45         [ 4] 1134 	call RAT ; ( udl ud a -- ) R: a 
      002379 CC 22 AB         [ 2] 1135 	jp FMOVE2 
                                   1136 
                                   1137 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



                           000001  4617 .if WANT_SCALING_CONST 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



                                   4618         .include "const_ratio.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;--------------------------------------------------------------------
                                     22 ; Irrationals constants 
                                     23 ; expressed as 2 integers ratio
                                     24 ; aproximation. These are to be used with scaling operators */ and */MOD 
                                     25 ; REF: https://www.forth.com/starting-forth/5-fixed-point-arithmetic/
                                     26 ;---------------------------------------------------------------------
                                     27 
                                     28 ;       PI ( --  355 113 )
                                     29 ; precision 8.5e-8 
                                     30 ; usage example to compute circle area
                                     31 ; : CAREA DUP * PI */ ;
                                     32 ; 
                                     33 
      00237C 23 4C                   34         .word LINK 
                           00237E    35         LINK=.
      00237E 02                      36         .byte 2
      00237F 50 49                   37         .ascii "PI" 
      002381                         38 PII:
      002381 1D 00 04         [ 2]   39         subw x,#2*CELLL 
      002384 90 AE 01 63      [ 2]   40         ldw y,#355 
      002388 EF 02            [ 2]   41         ldw (2,x),y 
      00238A 90 AE 00 71      [ 2]   42         ldw y,#113 
      00238E FF               [ 2]   43         ldw (x),y 
      00238F 81               [ 4]   44         ret 
                                     45 
                                     46 ;      SQRT2 ( -- 19601  13860 )
                                     47 ; precision: 1.5e-9 
                                     48 ; usage example to compute Voltage peek to peek from Vrms 
                                     49 ; : VPP SQRT2 */ 2 * ;
                                     50 ;
      002390 23 7E                   51         .word LINK 
                           002392    52         LINK=.
      002392 05                      53         .byte 5 
      002393 53 51 52 54 32          54         .ascii "SQRT2" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      002398                         55 SQRT2:
      002398 1D 00 04         [ 2]   56         subw x,#2*CELLL 
      00239B 90 AE 4C 91      [ 2]   57         ldw y,#19601 
      00239F EF 02            [ 2]   58         ldw (2,x),y 
      0023A1 90 AE 36 24      [ 2]   59         ldw y,#13860 
      0023A5 FF               [ 2]   60         ldw (x),y 
      0023A6 81               [ 4]   61         ret 
                                     62 
                                     63 ;   SQRT3 ( -- 18817 10864 )
                                     64 ; precision: 1.1e-9
                                     65 ;
      0023A7 23 92                   66         .word LINK 
                           0023A9    67         LINK=.
      0023A9 05                      68         .byte 5
      0023AA 53 51 52 54 33          69         .ascii "SQRT3" 
      0023AF                         70 SQRT3: 
      0023AF 1D 00 04         [ 2]   71     subw x,#2*CELLL 
      0023B2 90 AE 49 81      [ 2]   72     ldw y,#18817 
      0023B6 EF 02            [ 2]   73     ldw (2,x),y 
      0023B8 90 AE 2A 70      [ 2]   74     ldw y,#10864 
      0023BC FF               [ 2]   75     ldw (x),y 
      0023BD 81               [ 4]   76     ret 
                                     77 
                                     78 ;   E ( -- 28667 10546 )
                                     79 ; precision: 5.5e-9 
                                     80 ; natural log base 
      0023BE 23 A9                   81         .word LINK 
                           0023C0    82         LINK=.
      0023C0 01                      83         .byte 1
      0023C1 45                      84         .ascii "E" 
      0023C2                         85 ENEPER:
      0023C2 1D 00 04         [ 2]   86     subw x,#2*CELLL 
      0023C5 90 AE 6F FB      [ 2]   87     ldw y,#28667 
      0023C9 EF 02            [ 2]   88     ldw (2,x),y 
      0023CB 90 AE 29 32      [ 2]   89     ldw y,#10546 
      0023CF FF               [ 2]   90     ldw (x),y 
      0023D0 81               [ 4]   91     ret 
                                     92 
                                     93 ;   SQRT10 ( -- 22936 7253 )
                                     94 ; precision: 5.7e-9 
      0023D1 23 C0                   95         .word LINK 
                           0023D3    96         LINK=.
      0023D3 06                      97         .byte 6 
      0023D4 53 51 52 54 31 30       98         .ascii "SQRT10" 
      0023DA                         99 SQRT10:
      0023DA 1D 00 04         [ 2]  100     subw x,#2*CELLL
      0023DD 90 AE 59 98      [ 2]  101     ldw y,#22936 
      0023E1 EF 02            [ 2]  102     ldw (2,x),y 
      0023E3 90 AE 1C 55      [ 2]  103     ldw y,#7253
      0023E7 FF               [ 2]  104     ldw (x),y 
      0023E8 81               [ 4]  105     ret 
                                    106 
                                    107 ;   12RT2 ( -- 26797 25293 )
                                    108 ; precision: 1.0e-9 
                                    109 ; used in music to compute well tempered scale
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      0023E9 23 D3                  110         .word LINK 
                           0023EB   111         LINK=. 
      0023EB 05                     112         .byte 5 
      0023EC 31 32 52 54 32         113         .ascii "12RT2"
      0023F1                        114 RT12_2:
      0023F1 1D 00 04         [ 2]  115     subw x,#2*CELLL 
      0023F4 90 AE 68 AD      [ 2]  116     ldw y,#26797
      0023F8 EF 02            [ 2]  117     ldw (2,x),y 
      0023FA 90 AE 62 CD      [ 2]  118     ldw y,#25293
      0023FE FF               [ 2]  119     ldw (x),y 
      0023FF 81               [ 4]  120     ret 
                                    121 
                                    122 ;   LOG2s ( -- 2040 11103 )
                                    123 ; log(2)/1.6384
                                    124 ; precision: 1.1e-8
      002400 23 EB                  125         .word LINK 
                           002402   126         LINK=.
      002402 05                     127         .byte 5 
      002403 4C 4F 47 32 53         128         .ascii "LOG2S" 
      002408                        129 LOG2S:
      002408 1D 00 04         [ 2]  130     subw x,#2*CELLL
      00240B 90 AE 07 F8      [ 2]  131     ldw y,#2040 
      00240F EF 02            [ 2]  132     ldw (2,x),y 
      002411 90 AE 2B 5F      [ 2]  133     ldw y,#11103 
      002415 FF               [ 2]  134     ldw (x),y 
      002416 81               [ 4]  135     ret 
                                    136 
                                    137 ;   LN2 ( -- 485 11464 )
                                    138 ; ln(2)/16.384 
                                    139 ; precision: 1.0e-7 
      002417 24 02                  140         .word LINK 
                           002419   141         LINK=.
      002419 04                     142         .byte 4 
      00241A 4C 4E 32 53            143         .ascii "LN2S" 
      00241E                        144 LN2S: 
      00241E 1D 00 04         [ 2]  145     subw x,#2*CELLL
      002421 90 AE 01 E5      [ 2]  146     ldw y,#485
      002425 EF 02            [ 2]  147     ldw (2,x),y 
      002427 90 AE 2C C8      [ 2]  148     ldw y,#11464 
      00242B FF               [ 2]  149     ldw (x),y 
      00242C 81               [ 4]  150     ret 
                                    151 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



                                   4619 .endif
                           000001  4620 .if WANT_CONST_TABLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



                                   4621         .include "ctable.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;------------------------------
                                     22 ; words to create and read 
                                     23 ; constants tables in FLASH 
                                     24 ; and EEPROM
                                     25 ;------------------------------
                                     26 
                                     27 ;-----------------------------
                                     28 ; allocate space in CODE area 
                                     29 ; for constant table.
                                     30 ; CALLOT ( u -- ad )
                                     31 ; u  bytes to allocates 
                                     32 ; ad data address as double.
                                     33 ;-----------------------------
      00242D 24 19                   34     .word LINK 
                           00242F    35     LINK=.
      00242F 06                      36     .byte 6
      002430 43 41 4C 4C 4F 54       37     .ascii "CALLOT"
      002436                         38 CALLOT:
      002436 CD 07 7E         [ 4]   39     CALL CPP
      002439 CD 06 19         [ 4]   40     CALL DUPP 
      00243C CD 04 E3         [ 4]   41     CALL AT 
      00243F CD 05 E2         [ 4]   42     CALL TOR 
      002442 CD 0C 73         [ 4]   43     CALL PSTOR 
      002445 CD 1D 0B         [ 4]   44     CALL UPDATCP 
      002448 CD 05 34         [ 4]   45     CALL RFROM
      00244B CC 0C 03         [ 2]   46     JP ZERO 
                                     47 
                                     48 ;------------------------------
                                     49 ; create constants bytes table 
                                     50 ; in persistant memory
                                     51 ;  CTABLE ( n+ -- ad ; <string> )
                                     52 ; n+ bytes reserved 
                                     53 ;-----------------------------
      00244E 24 2F                   54     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



                           002450    55     LINK=.
      002450 06                      56     .byte 6
      002451 43 54 41 42 4C 45       57     .ascii "CTABLE"
      002457                         58 CTABLE:
      002457 CD 24 36         [ 4]   59     CALL CALLOT     
      00245A CC 19 9E         [ 2]   60     JP DCONST 
                                     61      
                                     62 
                                     63 ;--------------------------------
                                     64 ; create constants words table 
                                     65 ; in persistant memory 
                                     66 ; WTABLE ( n+ -- ad ; <string> )
                                     67 ; n+  words reserved  
                                     68 ;--------------------------------
      00245D 24 50                   69     .word LINK 
                           00245F    70     LINK=.
      00245F 06                      71     .byte 6
      002460 57 54 41 42 4C 45       72     .ascii "WTABLE"
      002466                         73 WTABLE:
      002466 CD 0B 8A         [ 4]   74     CALL CELLS  
      002469 CD 24 36         [ 4]   75     CALL CALLOT 
      00246C CC 19 9E         [ 2]   76     JP DCONST 
                                     77 
                                     78 ;---------------------------------
                                     79 ; stack an element of CTABLE 
                                     80 ; CTABL@ ( u ad -- c )
                                     81 ; u element order {0..size-1}
                                     82 ; a|ad table address 
                                     83 ;--------------------------------
      00246F 24 5F                   84     .word LINK 
                           002471    85     LINK=.
      002471 06                      86     .byte 6
      002472 43 54 41 42 4C 40       87     .ascii "CTABL@" 
      002478                         88 CTAT:
      002478 CD 1C 4E         [ 4]   89     call FPSTOR 
      00247B CD 1D E0         [ 4]   90     call PTRPLUS 
      00247E CC 1E 1D         [ 2]   91     jp EE_CREAD 
                                     92 
                                     93 ;---------------------------------
                                     94 ; stack an element of WTABLE 
                                     95 ; WTABL@ ( u ud -- w )
                                     96 ; u is element order {0..size-1}
                                     97 ; a|ud table address 
                                     98 ;----------------------------------
      002481 24 71                   99     .word LINK 
                           002483   100     LINK=.
      002483 06                     101     .byte 6
      002484 57 54 41 42 4C 40      102     .ascii "WTABL@" 
      00248A                        103 WTAT:
      00248A CD 1C 4E         [ 4]  104     call FPSTOR 
      00248D CD 0B 8A         [ 4]  105     call CELLS 
      002490 CD 1D E0         [ 4]  106     call PTRPLUS 
      002493 CD 1D FB         [ 4]  107     call EE_READ 
      002496 81               [ 4]  108     ret 
                                    109 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



                                    110 ;--------------------------
                                    111 ; tool to initialize character table 
                                    112 ; CTINIT ( ad -- )
                                    113 ; ad is table address 
                                    114 ;--------------------------
      002497 24 83                  115     .word LINK 
                           002499   116     LINK=.
      002499 06                     117     .byte 6 
      00249A 43 54 49 4E 49 54      118     .ascii "CTINIT"
      0024A0                        119 CTINIT:
      0024A0 CD 1C 4E         [ 4]  120     CALL FPSTOR
      0024A3 CD 1D 8C         [ 4]  121     CALL UNLOCK
      0024A6 CD 0C 03         [ 4]  122     CALL ZERO 
      0024A9 CD 0B 97         [ 4]  123 1$: CALL ONEP 
      0024AC CD 06 19         [ 4]  124     CALL DUPP 
      0024AF CD 24 FC         [ 4]  125     CALL INTQ 
      0024B2 CD 04 98         [ 4]  126     CALL QBRAN 
      0024B5 24 BF                  127     .word 2$
      0024B7 CD 1E 37         [ 4]  128     call WR_BYTE 
      0024BA CD 04 B4         [ 4]  129     CALL BRAN 
      0024BD 24 A9                  130     .word 1$ 
      0024BF                        131 2$: _DDROP 
      0024BF 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      0024C2 CD 1D B4         [ 4]  132     CALL LOCK 
      0024C5 81               [ 4]  133     ret 
                                    134 
                                    135 ;--------------------------
                                    136 ; tool to initialize word table 
                                    137 ; WTINIT ( ad -- )
                                    138 ; ad is table address 
                                    139 ;--------------------------
      0024C6 24 99                  140     .word LINK 
                           0024C8   141     LINK=.
      0024C8 06                     142     .byte 6 
      0024C9 57 54 49 4E 49 54      143     .ascii "WTINIT"
      0024CF                        144 WTINIT:
      0024CF CD 1C 4E         [ 4]  145     CALL FPSTOR
      0024D2 CD 1D 8C         [ 4]  146     CALL UNLOCK
      0024D5 CD 0C 03         [ 4]  147     CALL ZERO 
      0024D8 CD 0B 97         [ 4]  148 1$: CALL ONEP 
      0024DB CD 06 19         [ 4]  149     CALL DUPP
      0024DE CD 24 FC         [ 4]  150     CALL INTQ
      0024E1 CD 04 98         [ 4]  151     CALL QBRAN 
      0024E4 24 EE                  152     .word 2$
      0024E6 CD 1E 5C         [ 4]  153     call WR_WORD 
      0024E9 CD 04 B4         [ 4]  154     CALL BRAN 
      0024EC 24 D8                  155     .word 1$ 
      0024EE                        156 2$: _DDROP 
      0024EE 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      0024F1 CD 1D B4         [ 4]  157     CALL LOCK 
      0024F4 81               [ 4]  158     ret 
                                    159 
                                    160 ;------------------------
                                    161 ; Prompted input for integer 
                                    162 ; display n+ in bracket and
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



                                    163 ; '?' 
                                    164 ; [N]? ( n+ -- a )
                                    165 ;------------------------
      0024F5 24 C8                  166     .word LINK 
                           0024F7   167     LINK=.
      0024F7 04                     168     .byte 4
      0024F8 5B 4E 5D 3F            169     .ascii "[N]?" 
      0024FC                        170 INTQ:
      0024FC CD 0F 89         [ 4]  171     CALL CR 
      0024FF CD 04 6F         [ 4]  172     call DOLIT 
      002502 00 5B                  173     .word '[
      002504 CD 04 36         [ 4]  174     CALL EMIT 
      002507 CD 10 30         [ 4]  175     CALL DOT 
      00250A CD 0F B6         [ 4]  176     CALL  DOTQP
      00250D 03                     177     .byte 3
      00250E 5D 3F 20               178     .ascii "]? " 
      002511 CD 13 C0         [ 4]  179     CALL QUERY 
      002514 CD 11 EB         [ 4]  180     call TOKEN 
      002517 CC 25 D3         [ 2]  181     jp NUMBQ
                                    182 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



                                   4622 .endif
                           000001  4623 .if WANT_DOUBLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



                                   4624         .include "double.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;************************************
                                     21 ;    doubles integers library 
                                     22 ;    doubles are signed 32 bits 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26     .module DOUBLE 
                                     27 
                           000001    28     DVER_MAJOR=1 
                           000000    29     DVER_MINOR=0 
                                     30 
                                     31 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     32 ;  DBL-VER ( -- )
                                     33 ;  print library version 
                                     34 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00251A                         35     _HEADER DBLVER,7,"DBL-VER"
      00251A 24 F7                    1         .word LINK 
                           00251C     2         LINK=.
      00251C 07                       3         .byte 7  
      00251D 44 42 4C 2D 56 45 52     4         .ascii "DBL-VER"
      002524                          5         DBLVER:
      002524 CD 0F 89         [ 4]   36     CALL CR 
      002527 CD 0F B6         [ 4]   37     CALL DOTQP 
      00252A 18                      38     .byte  24 
      00252B 64 6F 75 62 6C 65 20    39     .ascii "double integer library, "
             69 6E 74 65 67 65 72
             20 6C 69 62 72 61 72
             79 2C 20
      002543 CD 1B 4D         [ 4]   40     CALL PRT_LICENCE
      002546 CD 1B 25         [ 4]   41     CALL COPYRIGHT  
      002549                         42     _DOLIT DVER_MAJOR 
      002549 CD 04 6F         [ 4]    1     CALL DOLIT 
      00254C 00 01                    2     .word DVER_MAJOR 
      00254E                         43     _DOLIT DVER_MINOR  
      00254E CD 04 6F         [ 4]    1     CALL DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



      002551 00 00                    2     .word DVER_MINOR 
      002553 CC 1B 61         [ 2]   44     JP PRINT_VERSION  
                                     45 
                                     46 
                                     47 ; check for negative sign 
                                     48 ; ajust pointer and cntr 
      002556                         49 nsign: ; addr cntr -- addr cntr f 
      002556 1D 00 02         [ 2]   50     SUBW X,#CELLL ; a cntr f 
      002559 90 93            [ 1]   51     LDW Y,X 
      00255B 90 EE 04         [ 2]   52     LDW Y,(4,Y) ; addr 
      00255E 90 F6            [ 1]   53     LD A,(Y) ; char=*addr  
      002560 A1 2D            [ 1]   54     CP A,#'-' 
      002562 27 03            [ 1]   55     JREQ NEG_SIGN 
      002564 4F               [ 1]   56     CLR A  
      002565 20 18            [ 2]   57     JRA STO_SIGN 
      002567                         58 NEG_SIGN:
                                     59 ; increment addr 
      002567 90 93            [ 1]   60     LDW Y,X 
      002569 90 EE 04         [ 2]   61     LDW Y,(4,Y)
      00256C 72 A9 00 01      [ 2]   62     ADDW Y,#1   ;addr+1 
      002570 EF 04            [ 2]   63     LDW (4,X),Y 
                                     64 ; decrement cntr 
      002572 90 93            [ 1]   65     LDW Y,X
      002574 90 EE 02         [ 2]   66     LDW Y,(2,Y)
      002577 72 A2 00 01      [ 2]   67     SUBW Y,#1   ;cntr-1 
      00257B EF 02            [ 2]   68     LDW (2,X),Y 
      00257D A6 FF            [ 1]   69     LD A,#0XFF
      00257F                         70 STO_SIGN:   
      00257F F7               [ 1]   71     LD (X),A 
      002580 E7 01            [ 1]   72     LD (1,X),A 
      002582 81               [ 4]   73     RET 
                                     74 
                                     75 
                                     76 ; get all digits in row 
                                     77 ; stop at first non-digit or end of string 
                                     78 ; ( dlo dhi a cntr -- dlo dhi [ a+ cntr- | a+ 0 ] )
      002583                         79 parse_digits:
      002583                         80 1$:
      002583 CD 06 19         [ 4]   81     CALL DUPP 
      002586                         82     _QBRAN 5$ 
      002586 CD 04 98         [ 4]    1     CALL QBRAN
      002589 25 C8                    2     .word 5$
      00258B CD 05 E2         [ 4]   83     CALL TOR   ; dlo dhi a R: cntr 
      00258E CD 0C C6         [ 4]   84     CALL COUNT ; dlo dhi a+ char 
      002591 CD 06 DF         [ 4]   85     CALL BASE 
      002594 CD 04 E3         [ 4]   86     CALL AT 
      002597 CD 0E CF         [ 4]   87     CALL DIGTQ 
      00259A                         88     _QBRAN 4$ ; not a digit
      00259A CD 04 98         [ 4]    1     CALL QBRAN
      00259D 25 BF                    2     .word 4$
      00259F CD 29 03         [ 4]   89     CALL DTOR  ; dlo dhi R: cntr a+ c  
      0025A2 CD 06 DF         [ 4]   90     CALL BASE 
      0025A5 CD 04 E3         [ 4]   91     CALL AT 
      0025A8 CD 27 8E         [ 4]   92     CALL DSSTAR
      0025AB CD 05 34         [ 4]   93     CALL RFROM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      0025AE CD 0C 03         [ 4]   94     CALL ZERO 
      0025B1 CD 2B C6         [ 4]   95     CALL DPLUS 
      0025B4 CD 05 34         [ 4]   96     CALL RFROM  ; dlo dhi a+ 
      0025B7 CD 05 34         [ 4]   97     CALL RFROM ; dlo dhi a+ cntr 
      0025BA CD 0B A4         [ 4]   98     CALL ONEM 
      0025BD 20 C4            [ 2]   99     JRA 1$ ; dlo dhi a+ R: 
      0025BF                        100 4$: _DROP  ; dlo dhi a+ 
      0025BF 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0025C2 CD 0B A4         [ 4]  101     CALL ONEM  ; unget char 
      0025C5 CD 05 34         [ 4]  102     CALL RFROM ; dlo dhi a+ cntr-
      0025C8                        103 5$:
      0025C8 81               [ 4]  104     RET 
                                    105 
                                    106 
                                    107 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    108 ;   NUMBER? (a -- s -1 |d -2 | a F )
                                    109 ;   convert string to integer 
                                    110 ;   double begin with '#' 
                                    111 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0025C9                        112     _HEADER NUMBQ,7,"NUMBER?"
      0025C9 25 1C                    1         .word LINK 
                           0025CB     2         LINK=.
      0025CB 07                       3         .byte 7  
      0025CC 4E 55 4D 42 45 52 3F     4         .ascii "NUMBER?"
      0025D3                          5         NUMBQ:
                                    113 ; save current base value 
      0025D3 CD 06 DF         [ 4]  114     CALL BASE 
      0025D6 CD 04 E3         [ 4]  115     CALL AT 
      0025D9 CD 05 E2         [ 4]  116     CALL TOR 
                                    117 ; initialize integer to 0     
      0025DC 1D 00 04         [ 2]  118     SUBW X,#4 
      0025DF 90 5F            [ 1]  119     CLRW Y 
      0025E1 FF               [ 2]  120     LDW (X),Y 
      0025E2 EF 02            [ 2]  121     LDW (2,X),Y ; a 0 0 R: base  
      0025E4                        122     _DOLIT 2 
      0025E4 CD 04 6F         [ 4]    1     CALL DOLIT 
      0025E7 00 02                    2     .word 2 
      0025E9 CD 0C 5C         [ 4]  123     CALL PICK  ; a 0 0 a R: base    
      0025EC CD 0C C6         [ 4]  124     CALL COUNT ; a 0 0 a+ n 
                                    125 ; check for '#' double integer 
      0025EF CD 06 41         [ 4]  126     CALL OVER  ; a 0 0 a+ n a+
      0025F2 CD 05 01         [ 4]  127     CALL CAT   ; a 0 0 a+ n c 
      0025F5                        128     _DOLIT '#' ; a 0 0 a+ n c '#' 
      0025F5 CD 04 6F         [ 4]    1     CALL DOLIT 
      0025F8 00 23                    2     .word '#' 
      0025FA CD 08 FA         [ 4]  129     CALL EQUAL 
      0025FD CD 05 E2         [ 4]  130     CALL TOR   ; a 0 0 a+ n R: base d? 
      002600 CD 05 45         [ 4]  131     CALL RAT   ; a 0 0 a+ n d? R: base d?
      002603                        132     _QBRAN NUMQ0
      002603 CD 04 98         [ 4]    1     CALL QBRAN
      002606 26 14                    2     .word NUMQ0
                                    133 ; update a and count
      002608 CD 06 29         [ 4]  134     CALL SWAPP 
      00260B CD 0B 97         [ 4]  135     CALL ONEP 
      00260E CD 06 29         [ 4]  136     CALL SWAPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



      002611 CD 0B A4         [ 4]  137     CALL ONEM  ; a 0 0 a+ n- R: base d?
                                    138 ; check for '$' hexadecimal  
      002614                        139 NUMQ0: 
      002614 CD 06 41         [ 4]  140     CALL OVER   
      002617 CD 05 01         [ 4]  141     CALL CAT   
      00261A                        142     _DOLIT '$'
      00261A CD 04 6F         [ 4]    1     CALL DOLIT 
      00261D 00 24                    2     .word '$' 
      00261F CD 08 FA         [ 4]  143     CALL EQUAL ; a 0 0 a+ n- f  
      002622                        144     _QBRAN NUMQ1 
      002622 CD 04 98         [ 4]    1     CALL QBRAN
      002625 26 36                    2     .word NUMQ1
      002627 CD 0E A6         [ 4]  145     CALL HEX   ; switch to hexadecimal base 
                                    146 ; update a and count 
      00262A CD 06 29         [ 4]  147     CALL SWAPP 
      00262D CD 0B 97         [ 4]  148     CALL ONEP 
      002630 CD 06 29         [ 4]  149     CALL SWAPP
      002633 CD 0B A4         [ 4]  150     CALL ONEM ; a 0 0 a+ n-  R: base d?
                                    151 ; check for minus sign 
      002636                        152 NUMQ1: 
      002636 CD 25 56         [ 4]  153     CALL nsign 
      002639 CD 05 E2         [ 4]  154     CALL TOR ; R: base d? sign  
                                    155 ; check for end of string     
      00263C CD 07 CC         [ 4]  156     CALL QDUP    ; a dlo dhi a+ cntr R: base d? sign 
      00263F                        157     _QBRAN NUMQ4 ; yes , not a number 
      00263F CD 04 98         [ 4]    1     CALL QBRAN
      002642 26 7E                    2     .word NUMQ4
      002644 CD 25 83         [ 4]  158     CALL parse_digits
      002647 CD 07 CC         [ 4]  159     CALL QDUP 
      00264A CD 06 62         [ 4]  160     CALL ZEQUAL  
      00264D                        161     _QBRAN NUMQ4 ; error not end of string  ( a dlo dhi a+ R: base d? sign )
      00264D CD 04 98         [ 4]    1     CALL QBRAN
      002650 26 7E                    2     .word NUMQ4
      002652                        162     _DROP  ; a dlo dhi 
      002652 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002655 CD 05 34         [ 4]  163     CALL RFROM  ; a dlo dhi sign 
      002658                        164     _QBRAN NUMQ3
      002658 CD 04 98         [ 4]    1     CALL QBRAN
      00265B 26 60                    2     .word NUMQ3
      00265D CD 08 98         [ 4]  165     CALL DNEGA
      002660                        166 NUMQ3: 
      002660 CD 07 DD         [ 4]  167     CALL ROT ; dlo dhi a  R: base d?
      002663                        168     _DROP
      002663 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002666                        169     _DOLIT -2  ; double return -2 flag 
      002666 CD 04 6F         [ 4]    1     CALL DOLIT 
      002669 FF FE                    2     .word -2 
      00266B CD 05 34         [ 4]  170     CALL RFROM ; dlo dhi d? R: base 
      00266E                        171     _TBRAN NUMQ8 
      00266E CD 04 A6         [ 4]    1     CALL TBRAN 
      002671 26 87                    2     .word NUMQ8 
      002673 CD 06 29         [ 4]  172     CALL SWAPP 
      002676                        173     _DROP
      002676 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002679 CD 0B 97         [ 4]  174     CALL ONEP   ; single return -1 flag   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



      00267C 20 09            [ 2]  175     JRA NUMQ8
      00267E                        176 NUMQ4: ; not end of string error , ( a dlo dhi a+ cntr R: base d? sign )
                           000001   177 .if WANT_FLOAT
      00267E CD 05 34         [ 4]  178     CALL RFROM ; sign 
      002681 CD 05 34         [ 4]  179     CALL RFROM ; d? 
      002684 CD 2F 95         [ 4]  180     CALL FLOATQ ; ( a dlo dhi a+ cntr sign d? )    
                           000000   181 .else 
                                    182     ADDW X,#4 ; drop dhi a+  , ( a dlo R: base d? sign ) 
                                    183     ADDW SP,#4 ; drop d? sign  R: base 
                                    184     CLRW Y 
                                    185     LDW (X),Y ; dlo replaced by 0 ( -- a 0 R: base ) 
                                    186 .endif 
                                    187 ; restore original base value     
      002687                        188 NUMQ8: 
      002687 CD 05 34         [ 4]  189     CALL RFROM 
      00268A CD 06 DF         [ 4]  190     CALL BASE 
      00268D CD 04 D1         [ 4]  191     CALL STORE 
      002690 81               [ 4]  192     RET 
                                    193 
                                    194 
                                    195 
                                    196 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    197 ;   DABS ( d -- d )
                                    198 ;   absolute value of double
                                    199 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002691                        200     _HEADER DABS,4,"DABS"
      002691 25 CB                    1         .word LINK 
                           002693     2         LINK=.
      002693 04                       3         .byte 4  
      002694 44 41 42 53              4         .ascii "DABS"
      002698                          5         DABS:
      002698 F6               [ 1]  201     LD A,(X) 
      002699 A4 80            [ 1]  202     AND A,#0X80 
      00269B 27 03            [ 1]  203     JREQ DABS1 
      00269D CD 08 98         [ 4]  204     CALL DNEGA 
      0026A0                        205 DABS1:
      0026A0 81               [ 4]  206     RET 
                                    207 
                                    208 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    209 ;  DSIGN ( d -- d f )
                                    210 ;  sign of double 
                                    211 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026A1                        212     _HEADER DSIGN,5,"DSIGN"
      0026A1 26 93                    1         .word LINK 
                           0026A3     2         LINK=.
      0026A3 05                       3         .byte 5  
      0026A4 44 53 49 47 4E           4         .ascii "DSIGN"
      0026A9                          5         DSIGN:
      0026A9 A6 00            [ 1]  213     LD A,#0 
      0026AB 90 93            [ 1]  214     LDW Y,X 
      0026AD 90 FE            [ 2]  215     LDW Y,(Y)
      0026AF 2A 02            [ 1]  216     JRPL DSIGN1
      0026B1 A6 FF            [ 1]  217     LD A,#0XFF 
      0026B3                        218 DSIGN1:
      0026B3 1D 00 02         [ 2]  219     SUBW X,#2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      0026B6 F7               [ 1]  220     LD (X),A 
      0026B7 E7 01            [ 1]  221     LD (1,X),A 
      0026B9 81               [ 4]  222     RET 
                                    223 
                                    224 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    225 ;   DS/MOD ( ud us - ur qud )
                                    226 ;   unsigned divide double by single 
                                    227 ;   return double quotient 
                                    228 ;   and single remainder 
                                    229 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026BA                        230     _HEADER DSLMOD,6,"DS/MOD"
      0026BA 26 A3                    1         .word LINK 
                           0026BC     2         LINK=.
      0026BC 06                       3         .byte 6  
      0026BD 44 53 2F 4D 4F 44        4         .ascii "DS/MOD"
      0026C3                          5         DSLMOD:
      0026C3 90 93            [ 1]  231         LDW     Y,X             ; stack pointer to Y
      0026C5 FE               [ 2]  232         LDW     X,(X)           ; un
      0026C6 BF 26            [ 2]  233         LDW     YTEMP,X         ; save un
      0026C8 93               [ 1]  234         LDW     X,Y
      0026C9 89               [ 2]  235         PUSHW   X               ; save stack pointer
      0026CA 90 89            [ 2]  236         PUSHW   Y 
      0026CC EE 02            [ 2]  237         LDW     X,(2,X)           ; X=udh
      0026CE 90 BE 26         [ 2]  238         LDW     Y,YTEMP         ; divisor 
      0026D1 65               [ 2]  239         DIVW    X,Y 
      0026D2 BF 24            [ 2]  240         LDW     XTEMP,X         ; QUOTIENT hi 
      0026D4 93               [ 1]  241         LDW     X,Y             ; remainder in X 
      0026D5 90 85            [ 2]  242         POPW    Y 
      0026D7 90 EE 04         [ 2]  243         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      0026DA A6 10            [ 1]  244         LD      A,#16           ; loop count
      0026DC 90 58            [ 2]  245         SLLW    Y               ; udl shift udl into udh
      0026DE                        246 DSLMOD3:
      0026DE 59               [ 2]  247         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      0026DF 25 04            [ 1]  248         JRC     DSLMODa         ; if carry out of rotate
      0026E1 B3 26            [ 2]  249         CPW     X,YTEMP         ; compare udh to un
      0026E3 25 05            [ 1]  250         JRULT   DSLMOD4         ; can't subtract
      0026E5                        251 DSLMODa:
      0026E5 72 B0 00 26      [ 2]  252         SUBW    X,YTEMP         ; can subtract
      0026E9 98               [ 1]  253         RCF
      0026EA                        254 DSLMOD4:
      0026EA 8C               [ 1]  255         CCF                     ; quotient bit
      0026EB 90 59            [ 2]  256         RLCW    Y               ; rotate into quotient, rotate out udl
      0026ED 4A               [ 1]  257         DEC     A               ; repeat
      0026EE 26 EE            [ 1]  258         JRNE    DSLMOD3           ; if A == 0
      0026F0                        259 DSLMODb:
      0026F0 BF 26            [ 2]  260         LDW     YTEMP,X         ; done, save remainder
      0026F2 85               [ 2]  261         POPW    X               ; restore stack pointer
      0026F3 EF 02            [ 2]  262         LDW     (2,X),Y           ; save quotient low 
      0026F5 90 BE 24         [ 2]  263         LDW     Y,XTEMP         ; quotient hi 
      0026F8 FF               [ 2]  264         LDW     (X),Y           ; save quotient hi 
      0026F9 90 BE 26         [ 2]  265         LDW     Y,YTEMP         ; remainder onto stack
      0026FC EF 04            [ 2]  266         LDW     (4,X),Y
      0026FE 81               [ 4]  267         RET 
                                    268 
                                    269 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



                                    270 ;   D# ( d -- d )
                                    271 ;   extract least digit 
                                    272 ;   from double integer 
                                    273 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026FF                        274     _HEADER DDIG,2,"D#"
      0026FF 26 BC                    1         .word LINK 
                           002701     2         LINK=.
      002701 02                       3         .byte 2  
      002702 44 23                    4         .ascii "D#"
      002704                          5         DDIG:
      002704 CD 06 DF         [ 4]  275     CALL BASE 
      002707 CD 04 E3         [ 4]  276     CALL AT 
      00270A CD 26 C3         [ 4]  277     CALL DSLMOD
      00270D CD 07 DD         [ 4]  278     CALL ROT   
      002710 CD 0D CF         [ 4]  279     CALL DIGIT 
      002713 CD 0E 1B         [ 4]  280     CALL HOLD 
      002716 81               [ 4]  281     RET 
                                    282 
                                    283 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    284 ;    D#S ( d -- s )
                                    285 ;   extract digit from double 
                                    286 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002717                        287     _HEADER DDIGS,3,"D#S"
      002717 27 01                    1         .word LINK 
                           002719     2         LINK=.
      002719 03                       3         .byte 3  
      00271A 44 23 53                 4         .ascii "D#S"
      00271D                          5         DDIGS:
      00271D CD 27 04         [ 4]  288     CALL    DDIG 
      002720 CD 08 27         [ 4]  289     CALL    DDUP 
      002723 CD 28 89         [ 4]  290     CALL    DZEQUAL
      002726                        291     _QBRAN  DDIGS 
      002726 CD 04 98         [ 4]    1     CALL QBRAN
      002729 27 1D                    2     .word DDIGS
      00272B CD 06 0F         [ 4]  292     CALL    DROP 
      00272E 81               [ 4]  293     RET 
                                    294 
                                    295 
                                    296 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    297 ;   D. ( d -- )
                                    298 ;   display double integer 
                                    299 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00272F                        300     _HEADER DDOT,2,"D."
      00272F 27 19                    1         .word LINK 
                           002731     2         LINK=.
      002731 02                       3         .byte 2  
      002732 44 2E                    4         .ascii "D."
      002734                          5         DDOT:
      002734 CD 0F 47         [ 4]  301     CALL SPACE 
      002737 CD 26 A9         [ 4]  302     CALL DSIGN 
      00273A CD 05 E2         [ 4]  303     CALL TOR
      00273D CD 05 45         [ 4]  304     CALL RAT 
      002740                        305     _QBRAN DDOT0
      002740 CD 04 98         [ 4]    1     CALL QBRAN
      002743 27 48                    2     .word DDOT0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



      002745 CD 08 98         [ 4]  306     CALL DNEGA 
      002748                        307 DDOT0:     
      002748 CD 0E 0B         [ 4]  308     CALL BDIGS 
      00274B CD 27 1D         [ 4]  309     CALL DDIGS 
      00274E CD 05 34         [ 4]  310     CALL RFROM 
      002751                        311     _QBRAN DDOT1 
      002751 CD 04 98         [ 4]    1     CALL QBRAN
      002754 27 5E                    2     .word DDOT1
      002756                        312     _DOLIT '-' 
      002756 CD 04 6F         [ 4]    1     CALL DOLIT 
      002759 00 2D                    2     .word '-' 
      00275B CD 0E 1B         [ 4]  313     CALL HOLD 
      00275E                        314 DDOT1: 
      00275E CD 0E 70         [ 4]  315     CALL EDIGS 
      002761 CD 0F 71         [ 4]  316     CALL TYPES     
      002764 81               [ 4]  317     RET 
                                    318 
                                    319 
                                    320 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    321 ;  UDS* ( ud u -- ud*u )
                                    322 ;  uint32*uint16 
                                    323 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002765                        324     _HEADER UDSSTAR,4,"UDS*"
      002765 27 31                    1         .word LINK 
                           002767     2         LINK=.
      002767 04                       3         .byte 4  
      002768 55 44 53 2A              4         .ascii "UDS*"
      00276C                          5         UDSSTAR:
      00276C CD 05 E2         [ 4]  325     CALL TOR 
      00276F CD 06 29         [ 4]  326     CALL SWAPP 
      002772 CD 05 45         [ 4]  327     CALL RAT 
      002775 CD 0A CC         [ 4]  328     CALL UMSTA ; udlo*u 
      002778 CD 07 DD         [ 4]  329     CALL ROT 
      00277B CD 05 34         [ 4]  330     CALL RFROM 
      00277E CD 0A CC         [ 4]  331     CALL UMSTA ; udhi*u 
      002781                        332     _DROP  ; drop overflow 
      002781 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002784 CD 08 3C         [ 4]  333     CALL PLUS  ; udlo*u+(uhi*u<<16)
      002787 81               [ 4]  334     RET 
                                    335 
                                    336 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    337 ; multiply double by unsigned single 
                                    338 ; return double 
                                    339 ;  ( d u -- d )
                                    340 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002788                        341     _HEADER DSSTAR,3,"DS*"
      002788 27 67                    1         .word LINK 
                           00278A     2         LINK=.
      00278A 03                       3         .byte 3  
      00278B 44 53 2A                 4         .ascii "DS*"
      00278E                          5         DSSTAR:
                                    342 ;DSSTAR:
      00278E CD 05 E2         [ 4]  343     CALL TOR
      002791 CD 26 A9         [ 4]  344     CALL DSIGN 
      002794 CD 07 FC         [ 4]  345     CALL NROT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



      002797 CD 26 98         [ 4]  346     CALL DABS
      00279A CD 05 34         [ 4]  347     CALL RFROM 
      00279D CD 27 6C         [ 4]  348     CALL UDSSTAR  
      0027A0 CD 07 DD         [ 4]  349     CALL ROT 
      0027A3                        350     _QBRAN DSSTAR3 
      0027A3 CD 04 98         [ 4]    1     CALL QBRAN
      0027A6 27 AB                    2     .word DSSTAR3
      0027A8 CD 08 98         [ 4]  351     CALL DNEGA 
      0027AB                        352 DSSTAR3:
      0027AB 81               [ 4]  353     RET 
                                    354 
                                    355 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    356 ;  2SWAP ( d1 d2 -- d2 d1 )
                                    357 ;  swap double 
                                    358 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027AC                        359     _HEADER DSWAP,5,"2SWAP"
      0027AC 27 8A                    1         .word LINK 
                           0027AE     2         LINK=.
      0027AE 05                       3         .byte 5  
      0027AF 32 53 57 41 50           4         .ascii "2SWAP"
      0027B4                          5         DSWAP:
      0027B4 90 93            [ 1]  360     LDW Y,X 
      0027B6 90 FE            [ 2]  361     LDW Y,(Y)
      0027B8 90 BF 26         [ 2]  362     LDW YTEMP,Y ; d2 hi 
      0027BB 90 93            [ 1]  363     LDW Y,X 
      0027BD 90 EE 02         [ 2]  364     LDW Y,(2,Y)
      0027C0 90 BF 24         [ 2]  365     LDW XTEMP,Y  ; d2 lo 
      0027C3 90 93            [ 1]  366     LDW Y,X 
      0027C5 90 EE 04         [ 2]  367     LDW Y,(4,Y)  ; d1 hi 
      0027C8 FF               [ 2]  368     LDW (X),Y 
      0027C9 90 93            [ 1]  369     LDW Y,X
      0027CB 90 EE 06         [ 2]  370     LDW Y,(6,Y)  ; d1 lo 
      0027CE EF 02            [ 2]  371     LDW (2,X),Y
      0027D0 90 BE 26         [ 2]  372     LDW Y,YTEMP  
      0027D3 EF 04            [ 2]  373     LDW (4,X),Y 
      0027D5 90 BE 24         [ 2]  374     LDW Y,XTEMP 
      0027D8 EF 06            [ 2]  375     LDW (6,X),Y 
      0027DA 81               [ 4]  376     RET 
                                    377 
                                    378 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    379 ;    DCLZ ( d -- u )
                                    380 ;    double count leading zeros
                                    381 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027DB                        382     _HEADER DCLZ,4,"DCLZ"
      0027DB 27 AE                    1         .word LINK 
                           0027DD     2         LINK=.
      0027DD 04                       3         .byte 4  
      0027DE 44 43 4C 5A              4         .ascii "DCLZ"
      0027E2                          5         DCLZ:
      0027E2 4F               [ 1]  383     CLR A 
      0027E3 90 93            [ 1]  384     LDW Y,X 
      0027E5 90 FE            [ 2]  385     LDW Y,(Y)
      0027E7 2B 18            [ 1]  386     JRMI DCLZ8 ; no leading zero 
      0027E9 27 09            [ 1]  387     JREQ DCLZ4 ; >=16 
      0027EB                        388 DCLZ1: ; <16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



      0027EB 90 58            [ 2]  389     SLLW Y
      0027ED 4C               [ 1]  390     INC A 
      0027EE 90 5D            [ 2]  391     TNZW Y 
      0027F0 2B 0F            [ 1]  392     JRMI DCLZ8
      0027F2 20 F7            [ 2]  393     JRA DCLZ1 
      0027F4                        394 DCLZ4: ; >=16 
      0027F4 A6 10            [ 1]  395     LD A,#16 
      0027F6 90 93            [ 1]  396     LDW Y,X 
      0027F8 90 EE 02         [ 2]  397     LDW Y,(2,Y)
      0027FB 2B 04            [ 1]  398     JRMI DCLZ8 
      0027FD 26 EC            [ 1]  399     JRNE DCLZ1 
      0027FF AB 10            [ 1]  400     ADD A,#16
      002801                        401 DCLZ8: 
      002801 1C 00 02         [ 2]  402     ADDW X,#2 
      002804 90 5F            [ 1]  403     CLRW Y 
      002806 90 97            [ 1]  404     LD YL,A 
      002808 FF               [ 2]  405     LDW (X),Y 
      002809 81               [ 4]  406     RET 
                                    407 
                                    408 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    409 ;   <2ROT ( d1 d2 d3 -- d3 d1 d2 )
                                    410 ;   rotate left doubles 
                                    411 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00280A                        412     _HEADER NDROT,5,"<2ROT"
      00280A 27 DD                    1         .word LINK 
                           00280C     2         LINK=.
      00280C 05                       3         .byte 5  
      00280D 3C 32 52 4F 54           4         .ascii "<2ROT"
      002812                          5         NDROT:
                                    413 ; save d3 in temp 
      002812 90 93            [ 1]  414     LDW Y,X 
      002814 90 FE            [ 2]  415     LDW Y,(Y)
      002816 90 BF 26         [ 2]  416     LDW YTEMP,Y  ; d3 hi 
      002819 90 93            [ 1]  417     LDW Y,X 
      00281B 90 EE 02         [ 2]  418     LDW Y,(2,Y)
      00281E 90 BF 24         [ 2]  419     LDW XTEMP,Y  ; d3 lo 
                                    420 ; put d2 in d1 slot 
      002821 90 93            [ 1]  421     LDW Y,X 
      002823 90 EE 04         [ 2]  422     LDW Y,(4,Y) 
      002826 FF               [ 2]  423     LDW (X),Y   ; d2 hi 
      002827 90 93            [ 1]  424     LDW Y,X 
      002829 90 EE 06         [ 2]  425     LDW Y,(6,Y)
      00282C EF 02            [ 2]  426     LDW (2,X),Y ; d2 lo
                                    427 ; put d1 in d2 slot 
      00282E 90 93            [ 1]  428     LDW Y,X 
      002830 90 EE 08         [ 2]  429     LDW Y,(8,Y) 
      002833 EF 04            [ 2]  430     LDW (4,X),Y ; d1 hi 
      002835 90 93            [ 1]  431     LDW Y,X 
      002837 90 EE 0A         [ 2]  432     LDW Y,(10,Y)
      00283A EF 06            [ 2]  433     LDW (6,X),Y  ; d1 lo 
                                    434 ; put d3 in d1 slot 
      00283C 90 BE 26         [ 2]  435     LDW Y,YTEMP 
      00283F EF 08            [ 2]  436     LDW (8,X),Y  ; d3 hi 
      002841 90 BE 24         [ 2]  437     LDW Y,XTEMP 
      002844 EF 0A            [ 2]  438     LDW (10,X),Y  ; d3 lo 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



      002846 81               [ 4]  439     RET 
                                    440 
                                    441 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    442 ;   2ROT ( d1 d2 d3 -- d2 d3 d1 )
                                    443 ;   rotate right doubles 
                                    444 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002847                        445     _HEADER DROT,4,"2ROT"
      002847 28 0C                    1         .word LINK 
                           002849     2         LINK=.
      002849 04                       3         .byte 4  
      00284A 32 52 4F 54              4         .ascii "2ROT"
      00284E                          5         DROT:
                                    446 ; save d3 in temp 
      00284E 90 93            [ 1]  447     LDW Y,X 
      002850 90 FE            [ 2]  448     LDW Y,(Y)
      002852 90 BF 26         [ 2]  449     LDW YTEMP,Y ; d3 hi 
      002855 90 93            [ 1]  450     LDW Y,X 
      002857 90 EE 02         [ 2]  451     LDW Y,(2,Y)
      00285A 90 BF 24         [ 2]  452     LDW XTEMP,Y ; d3 lo 
                                    453 ; put d1 in d3 slot 
      00285D 90 93            [ 1]  454     LDW Y,X 
      00285F 90 EE 08         [ 2]  455     LDW Y,(8,Y)
      002862 FF               [ 2]  456     LDW (X),Y  ; d1 hi 
      002863 90 93            [ 1]  457     LDW Y,X 
      002865 90 EE 0A         [ 2]  458     LDW Y,(10,Y) 
      002868 EF 02            [ 2]  459     LDW (2,X),Y ; d1 lo 
                                    460 ; put d2 in d1 slot 
      00286A 90 93            [ 1]  461     LDW Y,X 
      00286C 90 EE 04         [ 2]  462     LDW Y,(4,Y) ; d2 hi 
      00286F EF 08            [ 2]  463     LDW (8,X),Y 
      002871 90 93            [ 1]  464     LDW Y,X 
      002873 90 EE 06         [ 2]  465     LDW Y,(6,Y) ; d2 lo 
      002876 EF 0A            [ 2]  466     LDW (10,X),Y 
                                    467 ; put d3 in d2 slot 
      002878 90 BE 26         [ 2]  468     LDW Y,YTEMP 
      00287B EF 04            [ 2]  469     LDW (4,X),Y 
      00287D 90 BE 24         [ 2]  470     LDW Y,XTEMP 
      002880 EF 06            [ 2]  471     LDW (6,X),Y 
      002882 81               [ 4]  472     RET 
                                    473 
                                    474 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    475 ;    D0= ( d -- 0|-1 )
                                    476 ;    check if double is 0 
                                    477 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002883                        478     _HEADER DZEQUAL,3,"D0="
      002883 28 49                    1         .word LINK 
                           002885     2         LINK=.
      002885 03                       3         .byte 3  
      002886 44 30 3D                 4         .ascii "D0="
      002889                          5         DZEQUAL:
      002889 4F               [ 1]  479     CLR A  
      00288A 90 93            [ 1]  480     LDW Y,X 
      00288C 90 FE            [ 2]  481     LDW Y,(Y)
      00288E 26 09            [ 1]  482     JRNE ZEQ1 
      002890 90 93            [ 1]  483     LDW Y,X 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



      002892 90 EE 02         [ 2]  484     LDW Y,(2,Y)
      002895 26 02            [ 1]  485     JRNE ZEQ1 
      002897 A6 FF            [ 1]  486     LD A,#0xFF
      002899                        487 ZEQ1:
      002899 1C 00 02         [ 2]  488     ADDW X,#CELLL 
      00289C F7               [ 1]  489     LD (X),A
      00289D E7 01            [ 1]  490     LD (1,X),A
      00289F 81               [ 4]  491 	RET     
                                    492 
                                    493 
                                    494 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    495 ;   D= ( d1 d2 -- f )
                                    496 ;   d1==d2?
                                    497 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028A0                        498     _HEADER DEQUAL,2,"D="
      0028A0 28 85                    1         .word LINK 
                           0028A2     2         LINK=.
      0028A2 02                       3         .byte 2  
      0028A3 44 3D                    4         .ascii "D="
      0028A5                          5         DEQUAL:
      0028A5 A6 00            [ 1]  499     LD A,#0 
      0028A7 90 93            [ 1]  500     LDW Y,X 
      0028A9 90 FE            [ 2]  501     LDW Y,(Y)
      0028AB E3 04            [ 2]  502     CPW Y,(4,X)
      0028AD 26 0B            [ 1]  503     JRNE DEQU4 
      0028AF 90 93            [ 1]  504     LDW Y,X 
      0028B1 90 EE 02         [ 2]  505     LDW Y,(2,Y)
      0028B4 E3 06            [ 2]  506     CPW Y,(6,X)
      0028B6 26 02            [ 1]  507     JRNE DEQU4 
      0028B8 A6 FF            [ 1]  508     LD A,#0XFF
      0028BA                        509 DEQU4:
      0028BA 1C 00 06         [ 2]  510     ADDW X,#6
      0028BD F7               [ 1]  511     LD (X),A 
      0028BE E7 01            [ 1]  512     LD (1,X),A 
      0028C0 81               [ 4]  513     RET 
                                    514 
                                    515 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    516 ;   D> ( d1 d2 -- f )
                                    517 ;   d1>d2?
                                    518 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028C1                        519     _HEADER DGREAT,2,"D>"
      0028C1 28 A2                    1         .word LINK 
                           0028C3     2         LINK=.
      0028C3 02                       3         .byte 2  
      0028C4 44 3E                    4         .ascii "D>"
      0028C6                          5         DGREAT:
      0028C6 CD 27 B4         [ 4]  520     CALL DSWAP 
      0028C9 CC 28 D1         [ 2]  521     JP DLESS 
                                    522 
                                    523 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    524 ;   D< ( d1 d2 -- f )
                                    525 ;   d1<d2? 
                                    526 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028CC                        527     _HEADER DLESS,2,"D<"
      0028CC 28 C3                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



                           0028CE     2         LINK=.
      0028CE 02                       3         .byte 2  
      0028CF 44 3C                    4         .ascii "D<"
      0028D1                          5         DLESS:
      0028D1 CD 2B F8         [ 4]  528     CALL DSUB
      0028D4 CD 0C 03         [ 4]  529     CALL ZERO
      0028D7 CD 07 FC         [ 4]  530     CALL NROT  
      0028DA CD 28 EC         [ 4]  531     CALL DZLESS 
      0028DD                        532     _QBRAN DLESS4
      0028DD CD 04 98         [ 4]    1     CALL QBRAN
      0028E0 28 E5                    2     .word DLESS4
      0028E2 CD 08 75         [ 4]  533     CALL INVER  
      0028E5                        534 DLESS4:
      0028E5 81               [ 4]  535     RET
                                    536 
                                    537 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    538 ;  D0< ( d -- f )
                                    539 ;  d<0? 
                                    540 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028E6                        541     _HEADER DZLESS,3,"D0<"
      0028E6 28 CE                    1         .word LINK 
                           0028E8     2         LINK=.
      0028E8 03                       3         .byte 3  
      0028E9 44 30 3C                 4         .ascii "D0<"
      0028EC                          5         DZLESS:
      0028EC A6 00            [ 1]  542     LD A,#0 
      0028EE 90 93            [ 1]  543     LDW Y,X 
      0028F0 90 FE            [ 2]  544     LDW Y,(Y)
      0028F2 2A 02            [ 1]  545     JRPL DZLESS1 
      0028F4 A6 FF            [ 1]  546     LD A,#0XFF 
      0028F6                        547 DZLESS1:
      0028F6 1C 00 02         [ 2]  548     ADDW X,#CELLL 
      0028F9 F7               [ 1]  549     LD (X),A 
      0028FA E7 01            [ 1]  550     LD (1,X),A    
      0028FC 81               [ 4]  551     RET 
                                    552 
                                    553 
                                    554 
                                    555 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    556 ;   2>R ( d -- R: d )
                                    557 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028FD                        558     _HEADER DTOR,3,"2>R"
      0028FD 28 E8                    1         .word LINK 
                           0028FF     2         LINK=.
      0028FF 03                       3         .byte 3  
      002900 32 3E 52                 4         .ascii "2>R"
      002903                          5         DTOR:
      002903 90 85            [ 2]  559     POPW Y 
      002905 90 BF 26         [ 2]  560     LDW YTEMP,Y 
      002908 90 93            [ 1]  561     LDW Y,X 
      00290A 90 EE 02         [ 2]  562     LDW Y,(2,Y)
      00290D 90 89            [ 2]  563     PUSHW Y   ; d low 
      00290F 90 93            [ 1]  564     LDW Y,X 
      002911 90 FE            [ 2]  565     LDW Y,(Y)
      002913 90 89            [ 2]  566     PUSHW Y   ; d hi 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



      002915 1C 00 04         [ 2]  567     ADDW X,#4  
      002918 92 CC 26         [ 5]  568     JP [YTEMP]
                                    569 
                                    570 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    571 ;  2R> ( -- d ) R: d --      
                                    572 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00291B                        573     _HEADER DRFROM,3,"2R>"
      00291B 28 FF                    1         .word LINK 
                           00291D     2         LINK=.
      00291D 03                       3         .byte 3  
      00291E 32 52 3E                 4         .ascii "2R>"
      002921                          5         DRFROM:
      002921 90 85            [ 2]  574     POPW Y      ; d hi 
      002923 90 BF 26         [ 2]  575     LDW YTEMP,Y 
      002926 1D 00 04         [ 2]  576     SUBW X,#4
      002929 90 85            [ 2]  577     POPW Y       ; d hi 
      00292B FF               [ 2]  578     LDW (X),Y 
      00292C 90 85            [ 2]  579     POPW Y       ; d low  
      00292E EF 02            [ 2]  580     LDW (2,X),Y 
      002930 92 CC 26         [ 5]  581     JP [YTEMP]
                                    582     
                                    583 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    584 ;   2R@ ( -- d )
                                    585 ;   fecth a double from RSTACK
                                    586 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002933                        587     _HEADER DRAT,3,"2R@"
      002933 29 1D                    1         .word LINK 
                           002935     2         LINK=.
      002935 03                       3         .byte 3  
      002936 32 52 40                 4         .ascii "2R@"
      002939                          5         DRAT:
      002939 90 85            [ 2]  588     POPW Y 
      00293B 90 BF 26         [ 2]  589     LDW YTEMP,Y 
      00293E 1D 00 04         [ 2]  590     SUBW X,#4 
      002941 16 01            [ 2]  591     LDW Y,(1,SP)
      002943 FF               [ 2]  592     LDW (X),Y 
      002944 16 03            [ 2]  593     LDW Y,(3,SP)
      002946 EF 02            [ 2]  594     LDW (2,X),Y 
      002948 92 CC 26         [ 5]  595     JP [YTEMP]
                                    596 
                                    597 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    598 ;  2VARIABLE <name> 
                                    599 ;  create a double variable 
                                    600 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00294B                        601     _HEADER DVARIA,9,"2VARIABLE"
      00294B 29 35                    1         .word LINK 
                           00294D     2         LINK=.
      00294D 09                       3         .byte 9  
      00294E 32 56 41 52 49 41 42     4         .ascii "2VARIABLE"
             4C 45
      002957                          5         DVARIA:
      002957 CD 0C DD         [ 4]  602         CALL HERE
      00295A CD 06 19         [ 4]  603         CALL DUPP
      00295D                        604         _DOLIT 4  
      00295D CD 04 6F         [ 4]    1     CALL DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



      002960 00 04                    2     .word 4 
      002962 CD 08 3C         [ 4]  605         CALL PLUS 
      002965 CD 07 70         [ 4]  606         CALL VPP 
      002968 CD 04 D1         [ 4]  607         CALL STORE
      00296B CD 19 05         [ 4]  608         CALL CREAT
      00296E CD 06 19         [ 4]  609         CALL DUPP
      002971 CD 15 32         [ 4]  610         CALL COMMA
      002974 CD 0C 03         [ 4]  611         CALL ZERO
      002977 CD 06 41         [ 4]  612         CALL OVER 
      00297A CD 04 D1         [ 4]  613         CALL STORE 
      00297D CD 0C 03         [ 4]  614         CALL ZERO 
      002980 CD 06 29         [ 4]  615         CALL SWAPP 
      002983 CD 04 D1         [ 4]  616         CALL STORE
      002986 CD 22 7A         [ 4]  617         CALL FMOVE ; move definition to FLASH
      002989 CD 07 CC         [ 4]  618         CALL QDUP 
      00298C CD 04 98         [ 4]  619         CALL QBRAN 
      00298F 19 52                  620         .word SET_RAMLAST   
      002991 CD 1D 22         [ 4]  621         call UPDATVP  ; don't update if variable kept in RAM.
      002994 CD 23 0E         [ 4]  622         CALL UPDATPTR
      002997 81               [ 4]  623         RET         
                                    624 
                                    625 
                                    626 
                                    627 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    628 ;  2LITERAL ( d -- )
                                    629 ;  compile double literal 
                                    630 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002998                        631     _HEADER DLITER,IMEDD+8,"2LITERAL"
      002998 29 4D                    1         .word LINK 
                           00299A     2         LINK=.
      00299A 88                       3         .byte IMEDD+8  
      00299B 32 4C 49 54 45 52 41     4         .ascii "2LITERAL"
             4C
      0029A3                          5         DLITER:
      0029A3 CD 15 77         [ 4]  632     CALL COMPI 
      0029A6 29 AE                  633     .word do2lit 
      0029A8 CD 15 32         [ 4]  634     CALL COMMA 
      0029AB CC 15 32         [ 2]  635     JP   COMMA 
                                    636 
                                    637 
                                    638 ; runtime for 2LITERAL 
      0029AE                        639 do2lit:
      0029AE 1D 00 04         [ 2]  640     SUBW X,#4 
      0029B1 16 01            [ 2]  641     LDW Y,(1,SP)
      0029B3 90 FE            [ 2]  642     LDW Y,(Y)
      0029B5 FF               [ 2]  643     LDW (X),Y 
      0029B6 16 01            [ 2]  644     LDW Y,(1,SP)
      0029B8 90 EE 02         [ 2]  645     LDW Y,(2,Y)
      0029BB EF 02            [ 2]  646     LDW (2,X),Y 
      0029BD 90 85            [ 2]  647     POPW Y 
      0029BF 90 EC 04         [ 2]  648     JP (4,Y)
                                    649 
                                    650 
                                    651 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    652 ;   2OVER ( d1 d2 -- d1 d2 d1 )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



                                    653 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0029C2                        654     _HEADER DOVER,5,"2OVER"
      0029C2 29 9A                    1         .word LINK 
                           0029C4     2         LINK=.
      0029C4 05                       3         .byte 5  
      0029C5 32 4F 56 45 52           4         .ascii "2OVER"
      0029CA                          5         DOVER:
      0029CA 90 93            [ 1]  655     LDW Y,X 
      0029CC 1D 00 04         [ 2]  656     SUBW X,#4 
      0029CF 90 89            [ 2]  657     PUSHW Y 
      0029D1 90 EE 04         [ 2]  658     LDW Y,(4,Y)  ; d1 hi 
      0029D4 FF               [ 2]  659     LDW (X),Y 
      0029D5 90 85            [ 2]  660     POPW Y 
      0029D7 90 EE 06         [ 2]  661     LDW Y,(6,Y)  ;d1 lo 
      0029DA EF 02            [ 2]  662     LDW (2,X),Y 
      0029DC 81               [ 4]  663     RET 
                                    664 
                                    665 
                                    666 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    667 ;   D2/ ( d -- d/2 )
                                    668 ;   divide double by 2 
                                    669 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0029DD                        670     _HEADER D2SLASH,3,"D2/"
      0029DD 29 C4                    1         .word LINK 
                           0029DF     2         LINK=.
      0029DF 03                       3         .byte 3  
      0029E0 44 32 2F                 4         .ascii "D2/"
      0029E3                          5         D2SLASH:
      0029E3 90 93            [ 1]  671     LDW Y,X 
      0029E5 90 FE            [ 2]  672     LDW Y,(Y)
      0029E7 90 57            [ 2]  673     SRAW Y 
      0029E9 FF               [ 2]  674     LDW (X),Y 
      0029EA 90 93            [ 1]  675     LDW Y,X 
      0029EC 90 EE 02         [ 2]  676     LDW Y,(2,Y)
      0029EF 90 56            [ 2]  677     RRCW Y 
      0029F1 EF 02            [ 2]  678     LDW (2,X),Y 
      0029F3 81               [ 4]  679     RET
                                    680 
                                    681 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    682 ;  D2* ( d -- d*2 )
                                    683 ;  multiply double by 2 
                                    684 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0029F4                        685     _HEADER D2STAR,3,"D2*"
      0029F4 29 DF                    1         .word LINK 
                           0029F6     2         LINK=.
      0029F6 03                       3         .byte 3  
      0029F7 44 32 2A                 4         .ascii "D2*"
      0029FA                          5         D2STAR:
      0029FA 90 93            [ 1]  686     LDW Y,X 
      0029FC 90 EE 02         [ 2]  687     LDW Y,(2,Y)
      0029FF 98               [ 1]  688     RCF 
      002A00 90 59            [ 2]  689     RLCW Y 
      002A02 EF 02            [ 2]  690     LDW (2,X),Y 
      002A04 90 93            [ 1]  691     LDW Y,X 
      002A06 90 FE            [ 2]  692     LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



      002A08 90 59            [ 2]  693     RLCW Y 
      002A0A FF               [ 2]  694     LDW (X),Y 
      002A0B 81               [ 4]  695     RET 
                                    696 
                                    697 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    698 ;   DLSHIFT ( d n -- d )
                                    699 ;   left shift double 
                                    700 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002A0C                        701     _HEADER DLSHIFT,7,"DLSHIFT"
      002A0C 29 F6                    1         .word LINK 
                           002A0E     2         LINK=.
      002A0E 07                       3         .byte 7  
      002A0F 44 4C 53 48 49 46 54     4         .ascii "DLSHIFT"
      002A16                          5         DLSHIFT:
      002A16 E6 01            [ 1]  702     LD A,(1,X) ; shift count 
      002A18 A4 1F            [ 1]  703     AND A,#31
      002A1A 1C 00 02         [ 2]  704     ADDW X,#CELLL 
      002A1D 90 93            [ 1]  705     LDW Y,X 
      002A1F 90 FE            [ 2]  706     LDW Y,(Y)
      002A21 90 BF 26         [ 2]  707     LDW YTEMP,Y  ; d hi 
      002A24 90 93            [ 1]  708     LDW Y,X 
      002A26 90 EE 02         [ 2]  709     LDW Y,(2,Y)  ; d low 
      002A29                        710 DLSHIFT1:
      002A29 4D               [ 1]  711     TNZ A 
      002A2A 27 12            [ 1]  712     JREQ DLSHIFT2 
      002A2C 98               [ 1]  713     RCF 
      002A2D 90 59            [ 2]  714     RLCW Y 
      002A2F 90 89            [ 2]  715     PUSHW Y 
      002A31 90 BE 26         [ 2]  716     LDW Y,YTEMP 
      002A34 90 59            [ 2]  717     RLCW Y 
      002A36 90 BF 26         [ 2]  718     LDW YTEMP,Y 
      002A39 90 85            [ 2]  719     POPW Y 
      002A3B 4A               [ 1]  720     DEC A 
      002A3C 20 EB            [ 2]  721     JRA DLSHIFT1 
      002A3E                        722 DLSHIFT2:
      002A3E EF 02            [ 2]  723     LDW (2,X),Y 
      002A40 90 BE 26         [ 2]  724     LDW Y,YTEMP 
      002A43 FF               [ 2]  725     LDW (X),Y 
      002A44 81               [ 4]  726     RET 
                                    727 
                                    728 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    729 ;  DRSHIFT ( d n -- d )
                                    730 ;  shift right n bits 
                                    731 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002A45                        732     _HEADER DRSHIFT,7,"DRSHIFT"
      002A45 2A 0E                    1         .word LINK 
                           002A47     2         LINK=.
      002A47 07                       3         .byte 7  
      002A48 44 52 53 48 49 46 54     4         .ascii "DRSHIFT"
      002A4F                          5         DRSHIFT:
      002A4F E6 01            [ 1]  733     LD A,(1,X)
      002A51 A4 1F            [ 1]  734     AND A,#31
      002A53 1C 00 02         [ 2]  735     ADDW X,#2 
      002A56                        736 DRSHIFT1:
      002A56 4D               [ 1]  737     TNZ A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



      002A57 27 13            [ 1]  738     JREQ DRSHIFT2 
      002A59 90 93            [ 1]  739     LDW Y,X 
      002A5B 90 FE            [ 2]  740     LDW Y,(Y)
      002A5D 90 54            [ 2]  741     SRLW Y 
      002A5F FF               [ 2]  742     LDW (X),Y 
      002A60 90 93            [ 1]  743     LDW Y,X 
      002A62 90 EE 02         [ 2]  744     LDW Y,(2,Y)
      002A65 90 56            [ 2]  745     RRCW Y 
      002A67 EF 02            [ 2]  746     LDW (2,X),Y 
      002A69 4A               [ 1]  747     DEC A
      002A6A 20 EA            [ 2]  748     JRA DRSHIFT1  
      002A6C                        749 DRSHIFT2:
      002A6C 81               [ 4]  750     RET 
                                    751 
                                    752 
                                    753 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    754 ;   D* ( d1 d2 -- d3 )
                                    755 ;   double product 
                                    756 ;   d3 = d1 * d2
                                    757 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002A6D                        758     _HEADER DSTAR,2,"D*"
      002A6D 2A 47                    1         .word LINK 
                           002A6F     2         LINK=.
      002A6F 02                       3         .byte 2  
      002A70 44 2A                    4         .ascii "D*"
      002A72                          5         DSTAR:
      002A72 CD 06 19         [ 4]  759     CALL DUPP 
      002A75 CD 06 50         [ 4]  760     CALL ZLESS  
      002A78 CD 05 E2         [ 4]  761     CALL TOR    ; R: d2sign 
      002A7B CD 26 98         [ 4]  762     CALL DABS   
      002A7E CD 05 34         [ 4]  763     CALL RFROM 
      002A81 CD 07 FC         [ 4]  764     CALL NROT  ; d1 d2s ud2
      002A84 CD 29 03         [ 4]  765     CALL DTOR  ; d1 d2s R: ud2  
      002A87 CD 05 E2         [ 4]  766     CALL TOR   ; d1 R: ud2 d2s   
      002A8A CD 06 19         [ 4]  767     CALL DUPP 
      002A8D CD 06 50         [ 4]  768     CALL ZLESS 
      002A90 CD 05 34         [ 4]  769     CALL RFROM 
      002A93 CD 06 9F         [ 4]  770     CALL XORR   
      002A96 CD 05 E2         [ 4]  771     CALL TOR   ; d1 R: ud2 prod_sign  
      002A99 CD 26 98         [ 4]  772     CALL DABS ; ud1 R: ud2 ps  
      002A9C CD 05 34         [ 4]  773     CALL RFROM  
      002A9F CD 07 FC         [ 4]  774     CALL NROT   ; ps ud1 
      002AA2 CD 08 27         [ 4]  775     CALL DDUP   ; ps ud1 ud1  
      002AA5 CD 05 34         [ 4]  776     CALL RFROM  ; ps ud1 ud1 ud2hi 
      002AA8 CD 27 8E         [ 4]  777     CALL DSSTAR ; ps ud1 dprodhi 
                                    778 ; shift partial product 16 bits left 
      002AAB                        779     _DROP   ; drop overflow 
      002AAB 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002AAE CD 0C 03         [ 4]  780     CALL ZERO   ; ps ud1 prodhi 
      002AB1 CD 06 29         [ 4]  781     CALL SWAPP  
      002AB4 CD 27 B4         [ 4]  782     CALL DSWAP  ; ps dprodhi ud1 
      002AB7 CD 05 34         [ 4]  783     CALL RFROM  ; ps dprodhi ud1 ud2lo
      002ABA CD 27 8E         [ 4]  784     CALL DSSTAR ; ps  dprodhi dprodlo 
      002ABD CD 2B C6         [ 4]  785     CALL DPLUS
      002AC0 CD 07 DD         [ 4]  786     CALL ROT    ; dprod ps 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



      002AC3                        787     _QBRAN DDSTAR3 
      002AC3 CD 04 98         [ 4]    1     CALL QBRAN
      002AC6 2A CB                    2     .word DDSTAR3
      002AC8 CD 08 98         [ 4]  788     CALL DNEGA 
      002ACB                        789 DDSTAR3:  
      002ACB 81               [ 4]  790     RET 
                                    791 
                                    792 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    793 ;  UD/MOD ( ud1 ud2 -- dr udq )
                                    794 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002ACC                        795     _HEADER UDSLMOD,6,"UD/MOD"
      002ACC 2A 6F                    1         .word LINK 
                           002ACE     2         LINK=.
      002ACE 06                       3         .byte 6  
      002ACF 55 44 2F 4D 4F 44        4         .ascii "UD/MOD"
      002AD5                          5         UDSLMOD:
                                    796 ; unsigned double division 
      002AD5 CD 0C 03         [ 4]  797     CALL ZERO 
      002AD8 CD 0C 03         [ 4]  798     CALL ZERO
      002ADB CD 29 03         [ 4]  799     CALL DTOR ; quotient  R: qlo qhi 
      002ADE CD 29 CA         [ 4]  800     CALL DOVER 
      002AE1 CD 27 E2         [ 4]  801     CALL DCLZ ; n2, dividend leading zeros  
      002AE4 CD 05 E2         [ 4]  802     CALL TOR 
      002AE7 CD 08 27         [ 4]  803     CALL DDUP    
      002AEA CD 27 E2         [ 4]  804     CALL DCLZ  ; n1, divisor leading zeros
      002AED CD 05 34         [ 4]  805     CALL RFROM ; n1 n2 
      002AF0 CD 08 D2         [ 4]  806     CALL SUBB  ; loop count 
      002AF3 CD 06 19         [ 4]  807     CALL DUPP
      002AF6 CD 29 03         [ 4]  808     CALL DTOR  ; ud1 ud2 R: qlo qhi cntr cntr 
      002AF9 CD 05 45         [ 4]  809     CALL RAT    
      002AFC CD 06 50         [ 4]  810     CALL ZLESS 
      002AFF                        811     _TBRAN UDSLA7 ; quotient is null 
      002AFF CD 04 A6         [ 4]    1     CALL TBRAN 
      002B02 2B 61                    2     .word UDSLA7 
      002B04 CD 05 45         [ 4]  812     CALL RAT 
      002B07 CD 2A 16         [ 4]  813     CALL DLSHIFT ; align divisor with dividend 
      002B0A                        814 UDSLA3: ; division loop -- dividend divisor  
      002B0A 90 5F            [ 1]  815     CLRW Y 
      002B0C 90 89            [ 2]  816     PUSHW Y  
      002B0E CD 29 CA         [ 4]  817     CALL DOVER 
      002B11 CD 29 CA         [ 4]  818     CALL DOVER 
      002B14 CD 28 D1         [ 4]  819     CALL DLESS 
      002B17                        820     _TBRAN UDSLA4 
      002B17 CD 04 A6         [ 4]    1     CALL TBRAN 
      002B1A 2B 30                    2     .word UDSLA4 
      002B1C 90 85            [ 2]  821     POPW Y 
      002B1E 72 A9 00 01      [ 2]  822     ADDW Y,#1 
      002B22 90 89            [ 2]  823     PUSHW Y    ; quotiend least bit 
      002B24 CD 08 27         [ 4]  824     CALL DDUP  ; dividend divisor divisor 
      002B27 CD 29 03         [ 4]  825     CALL DTOR  
      002B2A CD 2B F8         [ 4]  826     CALL DSUB  ; dividend-divisor 
      002B2D CD 29 21         [ 4]  827     CALL DRFROM  ; dividend- divisor  
      002B30                        828 UDSLA4: ; shift quotient and add 1 bit 
      002B30 90 85            [ 2]  829     POPW Y 
      002B32 90 BF 26         [ 2]  830     LDW YTEMP,Y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



      002B35 16 07            [ 2]  831     LDW Y,(7,SP) ; quotient low 
      002B37 98               [ 1]  832     RCF 
      002B38 90 59            [ 2]  833     RLCW Y
      002B3A 17 07            [ 2]  834     LDW (7,SP),Y 
      002B3C 16 05            [ 2]  835     LDW Y,(5,SP) ; quotient hi 
      002B3E 90 59            [ 2]  836     RLCW Y 
      002B40 17 05            [ 2]  837     LDW (5,SP),Y 
      002B42 16 07            [ 2]  838     LDW Y,(7,SP) 
      002B44 72 B9 00 26      [ 2]  839     ADDW Y,YTEMP
      002B48 17 07            [ 2]  840     LDW (7,SP),Y 
      002B4A 16 01            [ 2]  841     LDW Y,(1,SP) ; loop counter 
      002B4C 90 5D            [ 2]  842     TNZW Y 
      002B4E 27 1C            [ 1]  843     JREQ UDSLA8
      002B50 72 A2 00 01      [ 2]  844     SUBW Y,#1  
      002B54 17 01            [ 2]  845     LDW (1,SP),Y  
                                    846 ; shift dividend left 1 bit      
      002B56 CD 27 B4         [ 4]  847     CALL DSWAP 
      002B59 CD 29 FA         [ 4]  848     CALL D2STAR 
      002B5C CD 27 B4         [ 4]  849     CALL DSWAP 
      002B5F 20 A9            [ 2]  850     JRA UDSLA3 
      002B61                        851 UDSLA7:
      002B61 CD 0C 03         [ 4]  852     CALL ZERO 
      002B64                        853     _DOLIT 1 
      002B64 CD 04 6F         [ 4]    1     CALL DOLIT 
      002B67 00 01                    2     .word 1 
      002B69 CD 05 BE         [ 4]  854     CALL NRSTO ; R: 0 0 0 cntr    
      002B6C                        855 UDSLA8:
      002B6C 1C 00 04         [ 2]  856     ADDW X,#4 ; drop divisor
      002B6F CD 05 34         [ 4]  857     CALL RFROM  
      002B72                        858     _DROP ; drop cntr 
      002B72 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002B75 CD 05 34         [ 4]  859     CALL RFROM   ; shift count
      002B78 CD 2A 4F         [ 4]  860     CALL DRSHIFT 
                                    861     ; quotient replace dividend 
      002B7B CD 29 21         [ 4]  862     CALL DRFROM  ; quotient 
      002B7E 81               [ 4]  863     RET 
                                    864 
                                    865 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    866 ;   D/MOD  ( d1 d2 -- dr dq )
                                    867 ;   double division dq=d1/d2
                                    868 ;   dr remainder double 
                                    869 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B7F                        870     _HEADER DDSLMOD,5,"D/MOD"  
      002B7F 2A CE                    1         .word LINK 
                           002B81     2         LINK=.
      002B81 05                       3         .byte 5  
      002B82 44 2F 4D 4F 44           4         .ascii "D/MOD"
      002B87                          5         DDSLMOD:
      002B87 CD 26 A9         [ 4]  871     CALL DSIGN 
      002B8A CD 05 E2         [ 4]  872     CALL TOR   ; R: divisor sign 
      002B8D CD 26 98         [ 4]  873     CALL DABS 
      002B90 CD 27 B4         [ 4]  874     CALL DSWAP 
      002B93 CD 26 A9         [ 4]  875     CALL DSIGN ; dividend sign 
      002B96 CD 05 34         [ 4]  876     CALL RFROM 
      002B99 CD 06 9F         [ 4]  877     CALL XORR  ; quotient sign
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



      002B9C CD 05 E2         [ 4]  878     CALL TOR   ; 
      002B9F CD 26 98         [ 4]  879     CALL DABS  ; d2 ud1 R: sign 
      002BA2 CD 27 B4         [ 4]  880     CALL DSWAP  ; ud1 ud2 
      002BA5 CD 2A D5         [ 4]  881     CALL UDSLMOD ; ud1/ud2 -- dr dq  
      002BA8 90 85            [ 2]  882     POPW Y ; sign 
      002BAA 90 5D            [ 2]  883     TNZW Y 
      002BAC 2A 03            [ 1]  884     JRPL DSLA9 
      002BAE CD 08 98         [ 4]  885     CALL DNEGA ; remainder quotient 
      002BB1                        886 DSLA9: 
      002BB1 81               [ 4]  887     RET 
                                    888 
                                    889 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    890 ;   D/  ( d1 d2 -- dq )
                                    891 ;   division double by double 
                                    892 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BB2                        893     _HEADER DSLASH,2,"D/"
      002BB2 2B 81                    1         .word LINK 
                           002BB4     2         LINK=.
      002BB4 02                       3         .byte 2  
      002BB5 44 2F                    4         .ascii "D/"
      002BB7                          5         DSLASH:
      002BB7 CD 2B 87         [ 4]  894     CALL DDSLMOD
      002BBA CD 27 B4         [ 4]  895     CALL DSWAP
      002BBD                        896     _DDROP 
      002BBD 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002BC0 81               [ 4]  897     RET 
                                    898 
                                    899 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    900 ;   D+ ( d1 d2 -- d3 )
                                    901 ;   add 2 doubles 
                                    902 ;   d3=d1+d2 
                                    903 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BC1                        904     _HEADER DPLUS,2,"D+"
      002BC1 2B B4                    1         .word LINK 
                           002BC3     2         LINK=.
      002BC3 02                       3         .byte 2  
      002BC4 44 2B                    4         .ascii "D+"
      002BC6                          5         DPLUS:
      002BC6 90 93            [ 1]  905     LDW Y,X 
      002BC8 90 FE            [ 2]  906     LDW Y,(Y)
      002BCA 90 BF 26         [ 2]  907     LDW YTEMP,Y ; d2 hi 
      002BCD 90 93            [ 1]  908     LDW Y,X 
      002BCF 90 EE 02         [ 2]  909     LDW Y,(2,Y)
      002BD2 90 BF 24         [ 2]  910     LDW XTEMP,Y ; d2 lo 
      002BD5 1C 00 04         [ 2]  911     ADDW X,#4 
      002BD8 90 93            [ 1]  912     LDW Y,X 
      002BDA 90 EE 02         [ 2]  913     LDW Y,(2,Y) ; d1 lo
      002BDD 72 B9 00 24      [ 2]  914     ADDW Y,XTEMP
      002BE1 EF 02            [ 2]  915     LDW (2,X),Y 
      002BE3 90 93            [ 1]  916     LDW Y,X 
      002BE5 90 FE            [ 2]  917     LDW Y,(Y) ; d1 hi 
      002BE7 24 04            [ 1]  918     JRNC DPLUS1 
      002BE9 72 A9 00 01      [ 2]  919     ADDW Y,#1 
      002BED                        920 DPLUS1: 
      002BED 72 B9 00 26      [ 2]  921     ADDW Y,YTEMP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



      002BF1 FF               [ 2]  922     LDW (X),Y 
      002BF2 81               [ 4]  923     RET 
                                    924 
                                    925 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    926 ;   D- ( d1 d2 -- d3 )
                                    927 ;   d3=d1-d2 
                                    928 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BF3                        929     _HEADER DSUB,2,"D-"
      002BF3 2B C3                    1         .word LINK 
                           002BF5     2         LINK=.
      002BF5 02                       3         .byte 2  
      002BF6 44 2D                    4         .ascii "D-"
      002BF8                          5         DSUB:
      002BF8 90 93            [ 1]  930     LDW Y,X 
      002BFA 90 FE            [ 2]  931     LDW Y,(Y)
      002BFC 90 BF 26         [ 2]  932     LDW YTEMP,Y ; d2 hi 
      002BFF 90 93            [ 1]  933     LDW Y,X 
      002C01 90 EE 02         [ 2]  934     LDW Y,(2,Y)
      002C04 90 BF 24         [ 2]  935     LDW XTEMP,Y ; d2 lo 
      002C07 1C 00 04         [ 2]  936     ADDW X,#4 
      002C0A 90 93            [ 1]  937     LDW Y,X 
      002C0C 90 EE 02         [ 2]  938     LDW Y,(2,Y) ; d1 lo
      002C0F 72 B2 00 24      [ 2]  939     SUBW Y,XTEMP
      002C13 EF 02            [ 2]  940     LDW (2,X),Y 
      002C15 90 93            [ 1]  941     LDW Y,X 
      002C17 90 FE            [ 2]  942     LDW Y,(Y) ; d1 hi 
      002C19 24 04            [ 1]  943     JRNC DSUB1 
      002C1B 72 A2 00 01      [ 2]  944     SUBW Y,#1 
      002C1F                        945 DSUB1: 
      002C1F 72 B2 00 26      [ 2]  946     SUBW Y,YTEMP 
      002C23 FF               [ 2]  947     LDW (X),Y 
      002C24 81               [ 4]  948     RET 
                                    949 
                                    950 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



                                   4625 .endif 
                           000001  4626 .if WANT_FLOAT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



                                   4627         .include "float.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;*********************************
                                     21 ;    floating point library
                                     22 ;    adapted from 
                                     23 ;    Forth dimensions Vol. IV #1 
                                     24 ;    published in  may/june 1982
                                     25 ;
                                     26 ; Creation date: 2021-06-15 
                                     27 ;
                                     28 ;  This file is part of stm8_eforth 
                                     29 ;  project and same licence apply.
                                     30 ;************************************
                                     31 
                                     32 ;*************************************************
                                     33 ;  FLOAT format double for storage 
                                     34 ;  bits 23:0  signed mantissa
                                     35 ;  bits  31:24  signed exponent
                                     36 ;***********************************************  
                                     37 
                                     38     .module FLOAT 
                                     39 
                           000001    40 .if WANT_DOUBLE 
                                     41 ; already included 
                           000000    42 .else
                                     43 ;  must be included  
                                     44     .include "double.asm"
                                     45 .endif  
                                     46 
                           7FFFFF    47     MAX_MANTISSA = 0x7FFFFF 
                                     48 
                           000001    49     FLOAT_MAJOR=1 
                           000000    50     FLOAT_MINOR=0 
                                     51 
                                     52 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     53 ;   FLOAT-VER ( -- )
                                     54 ;   print library version 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



                                     55 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C25                         56     _HEADER FVER,9,"FLOAT-VER"
      002C25 2B F5                    1         .word LINK 
                           002C27     2         LINK=.
      002C27 09                       3         .byte 9  
      002C28 46 4C 4F 41 54 2D 56     4         .ascii "FLOAT-VER"
             45 52
      002C31                          5         FVER:
      002C31 CD 0F 89         [ 4]   57     CALL CR 
      002C34 CD 0F B6         [ 4]   58     CALL DOTQP 
      002C37 11                      59     .byte  17 
      002C38 66 6C 6F 61 74 33 32    60     .ascii "float32 library, "
             20 6C 69 62 72 61 72
             79 2C 20
      002C49 CD 1B 4D         [ 4]   61     CALL PRT_LICENCE 
      002C4C CD 1B 25         [ 4]   62     CALL COPYRIGHT 
      002C4F                         63     _DOLIT FLOAT_MAJOR     
      002C4F CD 04 6F         [ 4]    1     CALL DOLIT 
      002C52 00 01                    2     .word FLOAT_MAJOR 
      002C54                         64     _DOLIT FLOAT_MINOR 
      002C54 CD 04 6F         [ 4]    1     CALL DOLIT 
      002C57 00 00                    2     .word FLOAT_MINOR 
      002C59 CC 1B 61         [ 2]   65     JP PRINT_VERSION 
                                     66 
                                     67 
                                     68 ;-------------------------
                                     69 ;    FPSW ( -- a )
                                     70 ;    floating state variable
                                     71 ;    bit 0 zero flag 
                                     72 ;    bit 1 negative flag 
                                     73 ;    bit 2 overflow/error flag 
                                     74 ;---------------------------
      002C5C                         75     _HEADER FPSW,4,"FPSW"
      002C5C 2C 27                    1         .word LINK 
                           002C5E     2         LINK=.
      002C5E 04                       3         .byte 4  
      002C5F 46 50 53 57              4         .ascii "FPSW"
      002C63                          5         FPSW:
      002C63 90 AE 00 08      [ 2]   76 	LDW Y,#UFPSW  
      002C67 1D 00 02         [ 2]   77 	SUBW X,#2
      002C6A FF               [ 2]   78     LDW (X),Y
      002C6B 81               [ 4]   79     RET
                                     80 
                                     81 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     82 ;   FRESET ( -- )
                                     83 ;   reset FPSW variable 
                                     84 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
      002C6C                         85     _HEADER FRESET,6,"FRESET"
      002C6C 2C 5E                    1         .word LINK 
                           002C6E     2         LINK=.
      002C6E 06                       3         .byte 6  
      002C6F 46 52 45 53 45 54        4         .ascii "FRESET"
      002C75                          5         FRESET:
      002C75 CD 0C 03         [ 4]   86     CALL ZERO  
      002C78 CD 2C 63         [ 4]   87     CALL FPSW 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



      002C7B CD 04 D1         [ 4]   88     CALL STORE 
      002C7E 81               [ 4]   89     RET 
                                     90 
                                     91 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     92 ;   FINIT ( -- )
                                     93 ;   initialize floating point 
                                     94 ;   library 
                                     95 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C7F                         96     _HEADER FINIT,5,"FINIT"
      002C7F 2C 6E                    1         .word LINK 
                           002C81     2         LINK=.
      002C81 05                       3         .byte 5  
      002C82 46 49 4E 49 54           4         .ascii "FINIT"
      002C87                          5         FINIT:
      002C87 CD 2C 75         [ 4]   97     CALL FRESET 
      002C8A 81               [ 4]   98     RET 
                                     99 
                                    100 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    101 ;    FER ( -- u )
                                    102 ;    return FPSW value 
                                    103 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C8B                        104     _HEADER FER,3,"FER"
      002C8B 2C 81                    1         .word LINK 
                           002C8D     2         LINK=.
      002C8D 03                       3         .byte 3  
      002C8E 46 45 52                 4         .ascii "FER"
      002C91                          5         FER:
      002C91 CD 2C 63         [ 4]  105     CALL FPSW 
      002C94 CD 04 E3         [ 4]  106     CALL AT 
      002C97 81               [ 4]  107     RET 
                                    108 
                                    109 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    110 ;    FZE  ( -- 0|-1 )
                                    111 ;    return FPSW zero flag 
                                    112 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C98                        113     _HEADER FZE,3,"FZE"
      002C98 2C 8D                    1         .word LINK 
                           002C9A     2         LINK=.
      002C9A 03                       3         .byte 3  
      002C9B 46 5A 45                 4         .ascii "FZE"
      002C9E                          5         FZE:
      002C9E CD 2C 63         [ 4]  114     CALL FPSW
      002CA1 CD 04 E3         [ 4]  115     CALL AT  
      002CA4 CD 0C 0E         [ 4]  116     CALL ONE 
      002CA7 CD 06 76         [ 4]  117     CALL ANDD
      002CAA CD 08 86         [ 4]  118     CALL NEGAT  
      002CAD 81               [ 4]  119     RET 
                                    120 
                                    121 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    122 ;    FNE ( -- 0|-1 )
                                    123 ;    return FPSW negative flag 
                                    124 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002CAE                        125     _HEADER FNE,3,"FNE"
      002CAE 2C 9A                    1         .word LINK 
                           002CB0     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



      002CB0 03                       3         .byte 3  
      002CB1 46 4E 45                 4         .ascii "FNE"
      002CB4                          5         FNE:
      002CB4 CD 2C 63         [ 4]  126     CALL FPSW 
      002CB7 CD 04 E3         [ 4]  127     CALL AT 
      002CBA                        128     _DOLIT 2 
      002CBA CD 04 6F         [ 4]    1     CALL DOLIT 
      002CBD 00 02                    2     .word 2 
      002CBF CD 06 76         [ 4]  129     CALL ANDD
      002CC2 CD 0B E9         [ 4]  130     CALL TWOSL
      002CC5 CD 08 86         [ 4]  131     CALL NEGAT   
      002CC8 81               [ 4]  132     RET 
                                    133 
                                    134 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    135 ;   FOV (  -- 0|-1 )
                                    136 ;   return FPSW overflow flag 
                                    137 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002CC9                        138     _HEADER FOV,3,"FOV"
      002CC9 2C B0                    1         .word LINK 
                           002CCB     2         LINK=.
      002CCB 03                       3         .byte 3  
      002CCC 46 4F 56                 4         .ascii "FOV"
      002CCF                          5         FOV:
      002CCF CD 2C 63         [ 4]  139     CALL FPSW
      002CD2 CD 04 E3         [ 4]  140     CALL AT  
      002CD5                        141     _DOLIT 4 
      002CD5 CD 04 6F         [ 4]    1     CALL DOLIT 
      002CD8 00 04                    2     .word 4 
      002CDA CD 06 76         [ 4]  142     CALL ANDD
      002CDD                        143     _DOLIT 2 
      002CDD CD 04 6F         [ 4]    1     CALL DOLIT 
      002CE0 00 02                    2     .word 2 
      002CE2 CD 0B D1         [ 4]  144     CALL RSHIFT 
      002CE5 CD 08 86         [ 4]  145     CALL NEGAT  
      002CE8 81               [ 4]  146     RET 
                                    147 
                                    148 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    149 ;    SFZ ( f# -- f# )
                                    150 ;    set FPSW zero flag 
                                    151 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002CE9                        152     _HEADER SFZ,3,"SFZ"
      002CE9 2C CB                    1         .word LINK 
                           002CEB     2         LINK=.
      002CEB 03                       3         .byte 3  
      002CEC 53 46 5A                 4         .ascii "SFZ"
      002CEF                          5         SFZ:
      002CEF CD 2C 91         [ 4]  153     CALL FER 
      002CF2                        154     _DOLIT 0xfffe 
      002CF2 CD 04 6F         [ 4]    1     CALL DOLIT 
      002CF5 FF FE                    2     .word 0xfffe 
      002CF7 CD 06 76         [ 4]  155     CALL ANDD 
      002CFA CD 05 E2         [ 4]  156     CALL TOR    
      002CFD CD 08 27         [ 4]  157     CALL DDUP 
      002D00                        158     _DOLIT 0xFF  
      002D00 CD 04 6F         [ 4]    1     CALL DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



      002D03 00 FF                    2     .word 0xFF 
      002D05 CD 06 76         [ 4]  159     CALL ANDD
      002D08 CD 28 89         [ 4]  160     CALL DZEQUAL 
      002D0B                        161     _DOLIT 1 
      002D0B CD 04 6F         [ 4]    1     CALL DOLIT 
      002D0E 00 01                    2     .word 1 
      002D10 CD 06 76         [ 4]  162     CALL ANDD 
      002D13 CD 05 34         [ 4]  163     CALL RFROM 
      002D16 CD 06 8A         [ 4]  164     CALL ORR 
      002D19 CD 2C 63         [ 4]  165     CALL FPSW 
      002D1C CD 04 D1         [ 4]  166     CALL STORE 
      002D1F 81               [ 4]  167     RET 
                                    168 
                                    169 
                                    170 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    171 ;   SFN ( f# -- f# )
                                    172 ;   set FPSW negative flag 
                                    173 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002D20                        174     _HEADER SFN,3,"SFN"
      002D20 2C EB                    1         .word LINK 
                           002D22     2         LINK=.
      002D22 03                       3         .byte 3  
      002D23 53 46 4E                 4         .ascii "SFN"
      002D26                          5         SFN:
      002D26 CD 2C 91         [ 4]  175     CALL FER 
      002D29                        176     _DOLIT 0xFFFD 
      002D29 CD 04 6F         [ 4]    1     CALL DOLIT 
      002D2C FF FD                    2     .word 0xFFFD 
      002D2E CD 06 76         [ 4]  177     CALL ANDD  
      002D31 CD 05 E2         [ 4]  178     CALL TOR 
      002D34 CD 06 19         [ 4]  179     CALL DUPP 
      002D37                        180     _DOLIT 0X80 
      002D37 CD 04 6F         [ 4]    1     CALL DOLIT 
      002D3A 00 80                    2     .word 0X80 
      002D3C CD 06 76         [ 4]  181     CALL ANDD 
      002D3F                        182     _DOLIT 6 
      002D3F CD 04 6F         [ 4]    1     CALL DOLIT 
      002D42 00 06                    2     .word 6 
      002D44 CD 0B D1         [ 4]  183     CALL RSHIFT 
      002D47 CD 05 34         [ 4]  184     CALL RFROM 
      002D4A CD 06 8A         [ 4]  185     CALL ORR 
      002D4D CD 2C 63         [ 4]  186     CALL FPSW 
      002D50 CD 04 D1         [ 4]  187     CALL STORE 
      002D53 81               [ 4]  188     RET 
                                    189 
                                    190 
                                    191 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    192 ;   SFV ( -- )
                                    193 ;   set overflow flag 
                                    194 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002D54                        195     _HEADER SFV,3,"SFV"
      002D54 2D 22                    1         .word LINK 
                           002D56     2         LINK=.
      002D56 03                       3         .byte 3  
      002D57 53 46 56                 4         .ascii "SFV"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



      002D5A                          5         SFV:
      002D5A CD 2C 91         [ 4]  196     CALL FER 
      002D5D                        197     _DOLIT 4 
      002D5D CD 04 6F         [ 4]    1     CALL DOLIT 
      002D60 00 04                    2     .word 4 
      002D62 CD 06 8A         [ 4]  198     CALL ORR 
      002D65 CD 2C 63         [ 4]  199     CALL FPSW 
      002D68 CD 04 D1         [ 4]  200     CALL STORE 
      002D6B 81               [ 4]  201     RET 
                                    202 
                                    203 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    204 ;  F>ME ( f# -- m e )
                                    205 ;  split float in mantissa/exponent 
                                    206 ;  m mantissa as a double 
                                    207 ;  e exponent as a single 
                                    208 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002D6C                        209     _HEADER ATEXP,4,"F>ME"             
      002D6C 2D 56                    1         .word LINK 
                           002D6E     2         LINK=.
      002D6E 04                       3         .byte 4  
      002D6F 46 3E 4D 45              4         .ascii "F>ME"
      002D73                          5         ATEXP:
      002D73 CD 2C 75         [ 4]  210     CALL FRESET
      002D76 CD 2D 26         [ 4]  211     CALL SFN
      002D79 CD 2C EF         [ 4]  212     CALL SFZ 
      002D7C 90 93            [ 1]  213     LDW Y,X 
      002D7E 90 FE            [ 2]  214     LDW Y,(Y)
      002D80 90 89            [ 2]  215     PUSHW Y 
      002D82 4F               [ 1]  216     CLR A  
      002D83 90 5E            [ 1]  217     SWAPW Y 
      002D85 2A 01            [ 1]  218     JRPL ATEXP1 
      002D87 43               [ 1]  219     CPL A 
      002D88                        220 ATEXP1: ; sign extend mantissa 
      002D88 90 5E            [ 1]  221     SWAPW Y 
      002D8A 90 95            [ 1]  222     LD YH,A 
      002D8C FF               [ 2]  223     LDW (X),Y 
      002D8D 1D 00 02         [ 2]  224     SUBW X,#CELLL 
      002D90 90 85            [ 2]  225     POPW Y 
      002D92 4F               [ 1]  226     CLR A 
      002D93 90 5D            [ 2]  227     TNZW Y 
      002D95 2A 01            [ 1]  228     JRPL ATEXP2 
      002D97 43               [ 1]  229     CPL A 
      002D98                        230 ATEXP2:
      002D98 90 5E            [ 1]  231     SWAPW Y 
      002D9A 90 95            [ 1]  232     LD YH,A 
      002D9C FF               [ 2]  233     LDW (X),Y 
      002D9D 81               [ 4]  234     RET 
                                    235 
                                    236 
                                    237 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    238 ;    ME>F ( m e -- f# )
                                    239 ;    built float from mantissa/exponent 
                                    240 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002D9E                        241     _HEADER STEXP,4,"ME>F"
      002D9E 2D 6E                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



                           002DA0     2         LINK=.
      002DA0 04                       3         .byte 4  
      002DA1 4D 45 3E 46              4         .ascii "ME>F"
      002DA5                          5         STEXP:
      002DA5 CD 06 19         [ 4]  242     CALL DUPP 
      002DA8 CD 08 EC         [ 4]  243     CALL ABSS 
      002DAB                        244     _DOLIT 127 
      002DAB CD 04 6F         [ 4]    1     CALL DOLIT 
      002DAE 00 7F                    2     .word 127 
      002DB0 CD 09 53         [ 4]  245     CALL GREAT
      002DB3                        246     _QBRAN STEXP1
      002DB3 CD 04 98         [ 4]    1     CALL QBRAN
      002DB6 2D BB                    2     .word STEXP1
      002DB8 CD 2D 5A         [ 4]  247     CALL SFV
      002DBB                        248 STEXP1:
      002DBB 90 93            [ 1]  249     LDW Y,X 
      002DBD 90 FE            [ 2]  250     LDW Y,(Y)
      002DBF 4F               [ 1]  251     CLR A 
      002DC0 90 95            [ 1]  252     LD YH,A
      002DC2 90 5E            [ 1]  253     SWAPW Y 
      002DC4 90 89            [ 2]  254     PUSHW Y  ; e >r 
      002DC6 1C 00 02         [ 2]  255     ADDW X,#CELLL 
      002DC9 CD 08 27         [ 4]  256     CALL DDUP 
      002DCC CD 26 98         [ 4]  257     CALL DABS
      002DCF CD 06 29         [ 4]  258     CALL SWAPP 
      002DD2                        259     _DROP  
      002DD2 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002DD5                        260     _DOLIT 127 
      002DD5 CD 04 6F         [ 4]    1     CALL DOLIT 
      002DD8 00 7F                    2     .word 127 
      002DDA CD 09 53         [ 4]  261     CALL GREAT 
      002DDD                        262     _QBRAN STEXP2 
      002DDD CD 04 98         [ 4]    1     CALL QBRAN
      002DE0 2D E5                    2     .word STEXP2
      002DE2 CD 2D 5A         [ 4]  263     CALL SFV 
      002DE5                        264 STEXP2: 
      002DE5 4F               [ 1]  265     CLR A 
      002DE6 F7               [ 1]  266     LD (X),A     
      002DE7 CD 05 34         [ 4]  267     CALL RFROM 
      002DEA CD 06 8A         [ 4]  268     CALL ORR
      002DED CD 2C EF         [ 4]  269     CALL SFZ 
      002DF0 CD 2D 26         [ 4]  270     CALL SFN 
      002DF3 81               [ 4]  271     RET 
                                    272 
                                    273 
                                    274 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    275 ;   E. ( f# -- )
                                    276 ;   print float in scientific 
                                    277 ;   format 
                                    278 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002DF4                        279     _HEADER EDOT,2,"E."
      002DF4 2D A0                    1         .word LINK 
                           002DF6     2         LINK=.
      002DF6 02                       3         .byte 2  
      002DF7 45 2E                    4         .ascii "E."
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]



      002DF9                          5         EDOT:
      002DF9 CD 06 DF         [ 4]  280     CALL BASE 
      002DFC CD 04 E3         [ 4]  281     CALL AT 
      002DFF CD 05 E2         [ 4]  282     CALL TOR 
      002E02                        283     _DOLIT 10 
      002E02 CD 04 6F         [ 4]    1     CALL DOLIT 
      002E05 00 0A                    2     .word 10 
      002E07 CD 06 DF         [ 4]  284     CALL BASE 
      002E0A CD 04 D1         [ 4]  285     CALL STORE 
      002E0D CD 2D 73         [ 4]  286     CALL ATEXP ; m e 
      002E10                        287 EDOT0:
      002E10 CD 05 E2         [ 4]  288     CALL TOR   
      002E13 CD 26 98         [ 4]  289     CALL DABS 
      002E16 CD 0F 47         [ 4]  290     CALL SPACE 
      002E19 CD 0E 0B         [ 4]  291     CALL BDIGS     
      002E1C                        292 EDOT2: 
      002E1C CD 27 04         [ 4]  293     CALL DDIG
      002E1F CD 05 34         [ 4]  294     CALL RFROM 
      002E22 CD 0B 97         [ 4]  295     CALL ONEP 
      002E25 CD 05 E2         [ 4]  296     CALL TOR 
      002E28 CD 06 19         [ 4]  297     CALL DUPP
      002E2B                        298     _QBRAN EDOT3 
      002E2B CD 04 98         [ 4]    1     CALL QBRAN
      002E2E 2E 32                    2     .word EDOT3
      002E30 20 EA            [ 2]  299     JRA EDOT2  
      002E32                        300 EDOT3:
      002E32 CD 06 41         [ 4]  301     CALL OVER 
      002E35 CD 06 DF         [ 4]  302     CALL BASE 
      002E38 CD 04 E3         [ 4]  303     CALL AT 
      002E3B CD 09 10         [ 4]  304     CALL ULESS 
      002E3E                        305     _QBRAN EDOT2 
      002E3E CD 04 98         [ 4]    1     CALL QBRAN
      002E41 2E 1C                    2     .word EDOT2
      002E43                        306     _DOLIT '.'
      002E43 CD 04 6F         [ 4]    1     CALL DOLIT 
      002E46 00 2E                    2     .word '.' 
      002E48 CD 0E 1B         [ 4]  307     CALL HOLD  
      002E4B CD 27 04         [ 4]  308     CALL DDIG
      002E4E CD 2C B4         [ 4]  309     CALL FNE 
      002E51                        310     _QBRAN EDOT4 
      002E51 CD 04 98         [ 4]    1     CALL QBRAN
      002E54 2E 5E                    2     .word EDOT4
      002E56                        311     _DOLIT '-'
      002E56 CD 04 6F         [ 4]    1     CALL DOLIT 
      002E59 00 2D                    2     .word '-' 
      002E5B CD 0E 1B         [ 4]  312     CALL HOLD 
      002E5E                        313 EDOT4:       
      002E5E                        314     _DROP 
      002E5E 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002E61 CD 0E 70         [ 4]  315     CALL EDIGS 
      002E64 CD 0F 71         [ 4]  316     CALL TYPES
      002E67 CD 05 34         [ 4]  317     CALL RFROM 
      002E6A CD 07 CC         [ 4]  318     CALL QDUP 
      002E6D                        319     _QBRAN EDOT5     
      002E6D CD 04 98         [ 4]    1     CALL QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]



      002E70 2E 7D                    2     .word EDOT5
      002E72                        320     _DOLIT 'E'
      002E72 CD 04 6F         [ 4]    1     CALL DOLIT 
      002E75 00 45                    2     .word 'E' 
      002E77 CD 04 36         [ 4]  321     CALL EMIT 
      002E7A CD 10 30         [ 4]  322     CALL DOT
      002E7D                        323 EDOT5: 
      002E7D CD 05 34         [ 4]  324     CALL RFROM 
      002E80 CD 06 DF         [ 4]  325     CALL BASE 
      002E83 CD 04 D1         [ 4]  326     CALL STORE  
      002E86 81               [ 4]  327     RET 
                                    328 
                                    329 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                    330 ;   F. (f# -- )
                                    331 ;   print float in fixed
                                    332 ;   point format. 
                                    333 ;;;;;;;;;;;;;;;;;;;;;;;;;
      002E87                        334     _HEADER FDOT,2,"F."
      002E87 2D F6                    1         .word LINK 
                           002E89     2         LINK=.
      002E89 02                       3         .byte 2  
      002E8A 46 2E                    4         .ascii "F."
      002E8C                          5         FDOT:
      002E8C CD 06 DF         [ 4]  335     CALL BASE 
      002E8F CD 04 E3         [ 4]  336     CALL AT 
      002E92 CD 05 E2         [ 4]  337     CALL TOR 
      002E95                        338     _DOLIT 10 
      002E95 CD 04 6F         [ 4]    1     CALL DOLIT 
      002E98 00 0A                    2     .word 10 
      002E9A CD 06 DF         [ 4]  339     CALL BASE 
      002E9D CD 04 D1         [ 4]  340     CALL STORE 
      002EA0 CD 2D 73         [ 4]  341     CALL    ATEXP
      002EA3 CD 06 19         [ 4]  342     CALL    DUPP  
      002EA6 CD 08 EC         [ 4]  343     CALL    ABSS 
      002EA9                        344     _DOLIT  8
      002EA9 CD 04 6F         [ 4]    1     CALL DOLIT 
      002EAC 00 08                    2     .word 8 
      002EAE CD 09 53         [ 4]  345     CALL    GREAT 
      002EB1                        346     _QBRAN  FDOT1 
      002EB1 CD 04 98         [ 4]    1     CALL QBRAN
      002EB4 2E B9                    2     .word FDOT1
      002EB6 CC 2E 10         [ 2]  347     JP      EDOT0 
      002EB9                        348 FDOT1:
      002EB9 CD 0F 47         [ 4]  349     CALL    SPACE 
      002EBC CD 05 E2         [ 4]  350     CALL    TOR 
      002EBF CD 2C B4         [ 4]  351     CALL    FNE 
      002EC2                        352     _QBRAN  FDOT0 
      002EC2 CD 04 98         [ 4]    1     CALL QBRAN
      002EC5 2E CA                    2     .word FDOT0
      002EC7 CD 08 98         [ 4]  353     CALL    DNEGA 
      002ECA                        354 FDOT0: 
      002ECA CD 0E 0B         [ 4]  355     CALL    BDIGS
      002ECD CD 05 45         [ 4]  356     CALL    RAT  
      002ED0 CD 06 50         [ 4]  357     CALL    ZLESS 
      002ED3                        358     _QBRAN  FDOT6 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]



      002ED3 CD 04 98         [ 4]    1     CALL QBRAN
      002ED6 2E FB                    2     .word FDOT6
      002ED8                        359 FDOT2: ; e<0 
      002ED8 CD 27 04         [ 4]  360     CALL    DDIG 
      002EDB CD 05 34         [ 4]  361     CALL    RFROM
      002EDE CD 0B 97         [ 4]  362     CALL    ONEP 
      002EE1 CD 07 CC         [ 4]  363     CALL    QDUP 
      002EE4                        364     _QBRAN  FDOT3 
      002EE4 CD 04 98         [ 4]    1     CALL QBRAN
      002EE7 2E EE                    2     .word FDOT3
      002EE9 CD 05 E2         [ 4]  365     CALL    TOR 
      002EEC 20 EA            [ 2]  366     JRA   FDOT2 
      002EEE                        367 FDOT3:
      002EEE                        368     _DOLIT  '.' 
      002EEE CD 04 6F         [ 4]    1     CALL DOLIT 
      002EF1 00 2E                    2     .word '.' 
      002EF3 CD 0E 1B         [ 4]  369     CALL    HOLD 
      002EF6 CD 27 1D         [ 4]  370     CALL    DDIGS
      002EF9 20 12            [ 2]  371     JRA   FDOT9  
      002EFB                        372 FDOT6: ; e>=0 
      002EFB 20 08            [ 2]  373     JRA   FDOT8
      002EFD                        374 FDOT7:     
      002EFD                        375     _DOLIT  '0'
      002EFD CD 04 6F         [ 4]    1     CALL DOLIT 
      002F00 00 30                    2     .word '0' 
      002F02 CD 0E 1B         [ 4]  376     CALL    HOLD 
      002F05                        377 FDOT8:
      002F05 CD 04 83         [ 4]  378     CALL    DONXT 
      002F08 2E FD                  379     .word   FDOT7
      002F0A CD 27 1D         [ 4]  380     CALL    DDIGS 
      002F0D                        381 FDOT9:
      002F0D CD 2C B4         [ 4]  382     CALL    FNE 
      002F10                        383     _QBRAN  FDOT10 
      002F10 CD 04 98         [ 4]    1     CALL QBRAN
      002F13 2F 1D                    2     .word FDOT10
      002F15                        384     _DOLIT '-' 
      002F15 CD 04 6F         [ 4]    1     CALL DOLIT 
      002F18 00 2D                    2     .word '-' 
      002F1A CD 0E 1B         [ 4]  385     CALL   HOLD 
      002F1D                        386 FDOT10:
      002F1D CD 0E 70         [ 4]  387     CALL    EDIGS 
      002F20 CD 0F 71         [ 4]  388     CALL    TYPES 
      002F23 CD 05 34         [ 4]  389     CALL    RFROM 
      002F26 CD 06 DF         [ 4]  390     CALL    BASE 
      002F29 CD 04 D1         [ 4]  391     CALL    STORE 
      002F2C 81               [ 4]  392     RET 
                                    393 
                                    394 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    395 ; return parsed exponent or 
                                    396 ; 0 if failed
                                    397 ; at entry exprect *a=='E'    
                                    398 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002F2D                        399 parse_exponent: ; a cntr -- e -1 | 0 
      002F2D CD 05 E2         [ 4]  400     CALL TOR   ; R: cntr 
      002F30 CD 06 19         [ 4]  401     CALL DUPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]



      002F33 CD 05 01         [ 4]  402     CALL CAT 
      002F36                        403     _DOLIT 'E' 
      002F36 CD 04 6F         [ 4]    1     CALL DOLIT 
      002F39 00 45                    2     .word 'E' 
      002F3B CD 08 FA         [ 4]  404     CALL EQUAL 
      002F3E                        405     _QBRAN 1$
      002F3E CD 04 98         [ 4]    1     CALL QBRAN
      002F41 2F 6E                    2     .word 1$
      002F43 CD 0B 97         [ 4]  406     CALL ONEP 
      002F46 CD 05 34         [ 4]  407     CALL RFROM  ; a cntr 
      002F49 CD 0B A4         [ 4]  408     CALL ONEM
      002F4C CD 06 19         [ 4]  409     CALL DUPP 
      002F4F                        410     _QBRAN 2$ ; a cntr 
      002F4F CD 04 98         [ 4]    1     CALL QBRAN
      002F52 2F 71                    2     .word 2$
      002F54 CD 0C 03         [ 4]  411     CALL ZERO
      002F57 CD 06 19         [ 4]  412     CALL DUPP 
      002F5A CD 27 B4         [ 4]  413     CALL DSWAP ; 0 0 a cntr  
      002F5D CD 25 56         [ 4]  414     CALL nsign 
      002F60 CD 05 E2         [ 4]  415     CALL TOR   ; R: esign  
      002F63 CD 25 83         [ 4]  416     CALL parse_digits
      002F66                        417     _QBRAN PARSEXP_SUCCESS ; parsed to end of string 
      002F66 CD 04 98         [ 4]    1     CALL QBRAN
      002F69 2F 78                    2     .word PARSEXP_SUCCESS
                                    418 ; failed invalid character
      002F6B                        419     _DDROP ; 0 a 
      002F6B 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002F6E                        420 1$: 
      002F6E CD 05 34         [ 4]  421     CALL RFROM ; sign||cntr  
      002F71                        422 2$:
      002F71                        423     _DDROP  ; a cntr || a sign || 0 cntr   
      002F71 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002F74 CD 0C 03         [ 4]  424     CALL ZERO   ; return only 0 
      002F77 81               [ 4]  425     RET 
      002F78                        426 PARSEXP_SUCCESS: 
      002F78                        427     _DDROP ; drop dhi a 
      002F78 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002F7B CD 05 34         [ 4]  428     CALL RFROM ; es 
      002F7E                        429     _QBRAN 1$
      002F7E CD 04 98         [ 4]    1     CALL QBRAN
      002F81 2F 86                    2     .word 1$
      002F83 CD 08 86         [ 4]  430     CALL NEGAT
      002F86                        431 1$:
      002F86                        432     _DOLIT -1 ; -- e -1 
      002F86 CD 04 6F         [ 4]    1     CALL DOLIT 
      002F89 FF FF                    2     .word -1 
      002F8B 81               [ 4]  433     RET 
                                    434 
                                    435 
                                    436 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    437 ;   FLOAT?  ( a dlo dhi a+ cntr sign d? -- f -3 | a 0 )
                                    438 ;   called by NUMBER? 
                                    439 ;   convert string to float 
                                    440 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002F8C                        441     _HEADER FLOATQ,5,"FLOAT?"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]



      002F8C 2E 89                    1         .word LINK 
                           002F8E     2         LINK=.
      002F8E 05                       3         .byte 5  
      002F8F 46 4C 4F 41 54 3F        4         .ascii "FLOAT?"
      002F95                          5         FLOATQ:
      002F95                        442     _QBRAN FLOATQ0 
      002F95 CD 04 98         [ 4]    1     CALL QBRAN
      002F98 2F 9D                    2     .word FLOATQ0
      002F9A CC 30 3C         [ 2]  443     JP FLOAT_ERROR  ; not a float, string start with '#'
      002F9D                        444 FLOATQ0:
                                    445 ; BASE must be 10 
      002F9D CD 06 DF         [ 4]  446     CALL BASE 
      002FA0 CD 04 E3         [ 4]  447     CALL AT 
      002FA3                        448     _DOLIT 10 
      002FA3 CD 04 6F         [ 4]    1     CALL DOLIT 
      002FA6 00 0A                    2     .word 10 
      002FA8 CD 08 FA         [ 4]  449     CALL EQUAL 
      002FAB                        450     _QBRAN FLOAT_ERROR 
      002FAB CD 04 98         [ 4]    1     CALL QBRAN
      002FAE 30 3C                    2     .word FLOAT_ERROR
                                    451 ; if float next char is '.' or 'E' 
      002FB0 CD 05 E2         [ 4]  452     CALL TOR ; R: sign  
      002FB3 CD 05 E2         [ 4]  453     CALL TOR ; R: sign cntr 
      002FB6 CD 06 19         [ 4]  454     CALL DUPP
      002FB9 CD 05 01         [ 4]  455     CALL CAT 
      002FBC                        456     _DOLIT '.' 
      002FBC CD 04 6F         [ 4]    1     CALL DOLIT 
      002FBF 00 2E                    2     .word '.' 
      002FC1 CD 08 FA         [ 4]  457     CALL EQUAL 
      002FC4                        458     _QBRAN FLOATQ1 ; not a dot 
      002FC4 CD 04 98         [ 4]    1     CALL QBRAN
      002FC7 2F FC                    2     .word FLOATQ1
      002FC9 CD 0B 97         [ 4]  459     CALL ONEP 
      002FCC CD 05 34         [ 4]  460     CALL RFROM  ; dlo dhi a cntr R: sign  
      002FCF CD 0B A4         [ 4]  461     CALL ONEM 
      002FD2 CD 06 19         [ 4]  462     CALL DUPP 
      002FD5 CD 05 E2         [ 4]  463     CALL TOR  ; R: sign cntr 
                                    464 ; parse fractional part
      002FD8 CD 25 83         [ 4]  465     CALL parse_digits ; dlo dhi a cntr -- dm a cntr 
      002FDB CD 06 19         [ 4]  466     CALL DUPP 
      002FDE CD 05 34         [ 4]  467     CALL RFROM 
      002FE1 CD 06 29         [ 4]  468     CALL SWAPP 
      002FE4 CD 08 D2         [ 4]  469     CALL SUBB ; fd -> fraction digits count 
      002FE7 CD 05 E2         [ 4]  470     CALL TOR  ; dlo dhi a cntr R: sign fd 
      002FEA CD 06 19         [ 4]  471     CALL DUPP ; cntr cntr  
      002FED                        472     _QBRAN 1$ ; end of string, no exponent
      002FED CD 04 98         [ 4]    1     CALL QBRAN
      002FF0 2F F4                    2     .word 1$
      002FF2 20 11            [ 2]  473     JRA FLOATQ2
      002FF4 CD 06 29         [ 4]  474 1$: CALL SWAPP 
      002FF7                        475     _DROP ; a
      002FF7 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002FFA 20 11            [ 2]  476     JRA FLOATQ3        
      002FFC                        477 FLOATQ1: ; must push fd==0 on RSTACK 
      002FFC CD 05 34         [ 4]  478     CALL RFROM ; cntr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]



      002FFF CD 0C 03         [ 4]  479     CALL ZERO  ; fd 
      003002 CD 05 E2         [ 4]  480     CALL TOR   ; dm a cntr R: sign fd 
      003005                        481 FLOATQ2: 
      003005 CD 2F 2D         [ 4]  482     CALL parse_exponent 
      003008                        483     _QBRAN FLOAT_ERROR0 ; exponent expected 
      003008 CD 04 98         [ 4]    1     CALL QBRAN
      00300B 30 39                    2     .word FLOAT_ERROR0
      00300D                        484 FLOATQ3: ; dm 0 || dm e  
      00300D CD 05 34         [ 4]  485     CALL RFROM ;  fd  
      003010 CD 08 D2         [ 4]  486     CALL SUBB  ; exp=e-fd 
      003013 CD 07 FC         [ 4]  487     CALL NROT 
      003016 CD 05 34         [ 4]  488     CALL RFROM  ; sign 
      003019                        489     _QBRAN FLOATQ4 
      003019 CD 04 98         [ 4]    1     CALL QBRAN
      00301C 30 21                    2     .word FLOATQ4
      00301E CD 08 98         [ 4]  490     CALL DNEGA 
      003021                        491 FLOATQ4:
      003021 CD 07 DD         [ 4]  492     CALL ROT 
      003024 CD 2D A5         [ 4]  493     CALL STEXP 
      003027 CD 07 DD         [ 4]  494     CALL ROT 
      00302A                        495     _DROP 
      00302A 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00302D CD 2D 26         [ 4]  496     CALL SFN 
      003030 CD 2C EF         [ 4]  497     CALL SFZ 
      003033                        498     _DOLIT -3 
      003033 CD 04 6F         [ 4]    1     CALL DOLIT 
      003036 FF FD                    2     .word -3 
      003038 81               [ 4]  499     RET       
      003039                        500 FLOAT_ERROR0: 
      003039 CD 29 21         [ 4]  501     CALL DRFROM ; sign df      
      00303C                        502 FLOAT_ERROR: 
      00303C CD 0C 45         [ 4]  503     CALL DEPTH 
      00303F CD 0B 8A         [ 4]  504     CALL CELLS 
      003042 CD 05 F9         [ 4]  505     CALL SPAT 
      003045 CD 06 29         [ 4]  506     CALL SWAPP 
      003048 CD 08 3C         [ 4]  507     CALL PLUS  
      00304B CD 06 06         [ 4]  508     CALL SPSTO 
      00304E CD 0C 03         [ 4]  509     CALL ZERO 
      003051 81               [ 4]  510     RET 
                                    511 
                                    512 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    513 ;  LSCALE ( f# -- f# )
                                    514 ;  m *=10 , e -= 1
                                    515 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003052                        516     _HEADER LSCALE,6,"LSCALE"
      003052 2F 8E                    1         .word LINK 
                           003054     2         LINK=.
      003054 06                       3         .byte 6  
      003055 4C 53 43 41 4C 45        4         .ascii "LSCALE"
      00305B                          5         LSCALE:
      00305B CD 2D 73         [ 4]  517     CALL ATEXP 
      00305E CD 0C 0E         [ 4]  518     CALL ONE 
      003061 CD 08 D2         [ 4]  519     CALL SUBB 
      003064 CD 05 E2         [ 4]  520     CALL TOR
      003067                        521     _DOLIT 10 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]



      003067 CD 04 6F         [ 4]    1     CALL DOLIT 
      00306A 00 0A                    2     .word 10 
      00306C CD 27 8E         [ 4]  522     CALL DSSTAR
      00306F CD 05 34         [ 4]  523     CALL RFROM 
      003072 CD 2D A5         [ 4]  524     CALL STEXP 
      003075 81               [ 4]  525     RET  
                                    526 
                                    527 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    528 ;  RSCALE ( f# -- f# )
                                    529 ;  m /=10 , e+=1 
                                    530 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003076                        531     _HEADER RSCALE,6,"RSCALE"
      003076 30 54                    1         .word LINK 
                           003078     2         LINK=.
      003078 06                       3         .byte 6  
      003079 52 53 43 41 4C 45        4         .ascii "RSCALE"
      00307F                          5         RSCALE:
      00307F CD 2D 73         [ 4]  532     CALL ATEXP 
      003082 CD 0C 0E         [ 4]  533     CALL ONE 
      003085 CD 08 3C         [ 4]  534     CALL PLUS 
      003088 CD 05 E2         [ 4]  535     CALL TOR 
      00308B                        536     _DOLIT 10 
      00308B CD 04 6F         [ 4]    1     CALL DOLIT 
      00308E 00 0A                    2     .word 10 
      003090 CD 26 C3         [ 4]  537     CALL DSLMOD 
      003093 CD 07 DD         [ 4]  538     CALL ROT 
      003096                        539     _DROP 
      003096 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      003099 CD 05 34         [ 4]  540     CALL RFROM 
      00309C CD 2D A5         [ 4]  541     CALL STEXP 
      00309F 81               [ 4]  542     RET 
                                    543 
                                    544 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    545 ;  SCALEUP ( ud u1 u2 -- ud*10 u1 u2 )
                                    546 ;  while (ud<=0xcccccccc && u1<u2 ){
                                    547 ;        ud*10;
                                    548 ;        u2--;
                                    549 ;  }  
                                    550 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0030A0                        551 SCALEUP:
      0030A0 CD 08 27         [ 4]  552     CALL DDUP
      0030A3 CD 09 26         [ 4]  553     CALL LESS  
      0030A6                        554     _QBRAN SCALEUP3
      0030A6 CD 04 98         [ 4]    1     CALL QBRAN
      0030A9 30 D6                    2     .word SCALEUP3
      0030AB CD 29 03         [ 4]  555     CALL DTOR   ; R: u1 u2  
      0030AE CD 08 27         [ 4]  556     CALL DDUP 
      0030B1                        557     _DOLIT 0XCCCC 
      0030B1 CD 04 6F         [ 4]    1     CALL DOLIT 
      0030B4 CC CC                    2     .word 0XCCCC 
      0030B6                        558     _DOLIT 0XCCC 
      0030B6 CD 04 6F         [ 4]    1     CALL DOLIT 
      0030B9 0C CC                    2     .word 0XCCC 
      0030BB CD 28 C6         [ 4]  559     CALL DGREAT  
      0030BE                        560     _TBRAN SCALEUP2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]



      0030BE CD 04 A6         [ 4]    1     CALL TBRAN 
      0030C1 30 D3                    2     .word SCALEUP2 
      0030C3                        561     _DOLIT 10 
      0030C3 CD 04 6F         [ 4]    1     CALL DOLIT 
      0030C6 00 0A                    2     .word 10 
      0030C8 CD 27 6C         [ 4]  562     CALL UDSSTAR 
      0030CB CD 29 21         [ 4]  563     CALL DRFROM 
      0030CE CD 0B A4         [ 4]  564     CALL ONEM
      0030D1 20 CD            [ 2]  565     JRA SCALEUP
      0030D3                        566 SCALEUP2:
      0030D3 CD 29 21         [ 4]  567     CALL DRFROM
      0030D6                        568 SCALEUP3: 
      0030D6 81               [ 4]  569     RET 
                                    570 
                                    571 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    572 ; SCALEDOWN ( ud u1 u2 -- ud u1 u2 )
                                    573 ;  whhile (ud && u1>u2 ){ 
                                    574 ;     ud/10;
                                    575 ;     u2++;
                                    576 ;  } 
                                    577 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0030D7                        578 SCALEDOWN: 
      0030D7 CD 08 27         [ 4]  579     CALL DDUP 
      0030DA CD 09 53         [ 4]  580     CALL GREAT 
      0030DD                        581     _QBRAN SCALDN3 
      0030DD CD 04 98         [ 4]    1     CALL QBRAN
      0030E0 31 06                    2     .word SCALDN3
      0030E2 CD 29 03         [ 4]  582     CALL DTOR 
      0030E5 CD 08 27         [ 4]  583     CALL DDUP 
      0030E8 CD 28 89         [ 4]  584     CALL DZEQUAL 
      0030EB                        585     _TBRAN SCALDN2  
      0030EB CD 04 A6         [ 4]    1     CALL TBRAN 
      0030EE 31 03                    2     .word SCALDN2 
      0030F0                        586     _DOLIT 10
      0030F0 CD 04 6F         [ 4]    1     CALL DOLIT 
      0030F3 00 0A                    2     .word 10 
      0030F5 CD 0C 03         [ 4]  587     CALL ZERO  
      0030F8 CD 2B B7         [ 4]  588     CALL DSLASH 
      0030FB CD 29 21         [ 4]  589     CALL DRFROM 
      0030FE CD 0B 97         [ 4]  590     CALL ONEP  
      003101 20 D4            [ 2]  591     JRA SCALEDOWN 
      003103                        592 SCALDN2:
      003103 CD 29 21         [ 4]  593     CALL DRFROM 
      003106                        594 SCALDN3:
      003106 81               [ 4]  595     RET 
                                    596 
                                    597 
                                    598 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    599 ;  F-ALIGN ( f#1 f#2 -- m1 m2 e )
                                    600 ;  align to same exponent 
                                    601 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003107                        602     _HEADER FALIGN,7,"F-ALIGN"
      003107 30 78                    1         .word LINK 
                           003109     2         LINK=.
      003109 07                       3         .byte 7  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]



      00310A 46 2D 41 4C 49 47 4E     4         .ascii "F-ALIGN"
      003111                          5         FALIGN:
      003111 CD 2D 73         [ 4]  603     CALL ATEXP 
      003114 CD 05 E2         [ 4]  604     CALL TOR 
      003117 CD 27 B4         [ 4]  605     CALL DSWAP 
      00311A CD 2D 73         [ 4]  606     CALL ATEXP 
      00311D CD 05 E2         [ 4]  607     CALL TOR    ; m2 m1 R: e2 e1 
      003120 CD 27 B4         [ 4]  608     CALL DSWAP 
      003123 CD 29 39         [ 4]  609     CALL DRAT 
      003126 CD 08 FA         [ 4]  610     CALL EQUAL 
      003129                        611     _TBRAN FALGN8
      003129 CD 04 A6         [ 4]    1     CALL TBRAN 
      00312C 31 AE                    2     .word FALGN8 
                                    612 ; scaleup the largest float 
                                    613 ; but limit mantissa <=0xccccccc
                                    614 ; to avoid mantissa overflow     
      00312E CD 29 39         [ 4]  615     CALL DRAT ; m1 m2 e2 e1 
      003131 CD 09 53         [ 4]  616     CALL GREAT 
      003134                        617     _QBRAN FALGN4 ; e2<e1 
      003134 CD 04 98         [ 4]    1     CALL QBRAN
      003137 31 4A                    2     .word FALGN4
                                    618 ; e2>e1 then scale up m2   
      003139 CD 29 21         [ 4]  619     CALL DRFROM 
      00313C CD 06 29         [ 4]  620     CALL SWAPP 
      00313F CD 30 A0         [ 4]  621     CALL SCALEUP 
      003142 CD 06 29         [ 4]  622     CALL SWAPP 
      003145 CD 29 03         [ 4]  623     CALL DTOR 
      003148 20 0F            [ 2]  624     JRA FALGN6
      00314A                        625 FALGN4: ; e2<e1 then scaleup m1 
      00314A CD 27 B4         [ 4]  626     CALL DSWAP 
      00314D CD 29 21         [ 4]  627     CALL DRFROM 
      003150 CD 30 A0         [ 4]  628     CALL SCALEUP 
      003153 CD 29 03         [ 4]  629     CALL DTOR
      003156 CD 27 B4         [ 4]  630     CALL DSWAP 
                                    631 ; check again for e2==e1 
                                    632 ; if scaleup was not enough 
                                    633 ; to equalize exponent then
                                    634 ; scaledown smallest float     
      003159                        635 FALGN6: 
      003159 CD 29 39         [ 4]  636     CALL DRAT 
      00315C CD 08 FA         [ 4]  637     CALL EQUAL 
      00315F                        638     _TBRAN FALGN8 
      00315F CD 04 A6         [ 4]    1     CALL TBRAN 
      003162 31 AE                    2     .word FALGN8 
                                    639 ; e2!=e1 need to scale down smallest 
      003164 CD 29 39         [ 4]  640     CALL DRAT 
      003167 CD 09 53         [ 4]  641     CALL GREAT 
      00316A                        642     _QBRAN FALGN7 ; e2<e1 
      00316A CD 04 98         [ 4]    1     CALL QBRAN
      00316D 31 80                    2     .word FALGN7
                                    643 ; e2>e1 scaledown m1 
      00316F CD 27 B4         [ 4]  644     CALL DSWAP 
      003172 CD 29 21         [ 4]  645     CALL DRFROM 
      003175 CD 30 D7         [ 4]  646     CALL SCALEDOWN
      003178 CD 06 29         [ 4]  647     CALL SWAPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]



      00317B CD 29 03         [ 4]  648     CALL DTOR 
      00317E 20 0F            [ 2]  649     JRA FALGN71  
      003180                        650 FALGN7: ; e2<e1 scaledown m2 
      003180 CD 29 21         [ 4]  651     CALL DRFROM 
      003183 CD 06 29         [ 4]  652     CALL SWAPP 
      003186 CD 30 D7         [ 4]  653     CALL SCALEDOWN 
      003189 CD 06 29         [ 4]  654     CALL SWAPP 
      00318C CD 29 03         [ 4]  655     CALL DTOR 
                                    656 ; after scaledown if e2!=e1 
                                    657 ; this imply that one of mantissa 
                                    658 ; as been nullified by scalling 
                                    659 ; hence keep largest exponent 
      00318F                        660 FALGN71:
      00318F CD 29 39         [ 4]  661     CALL DRAT 
      003192 CD 08 FA         [ 4]  662     CALL EQUAL
      003195                        663     _TBRAN FALGN8 
      003195 CD 04 A6         [ 4]    1     CALL TBRAN 
      003198 31 AE                    2     .word FALGN8 
      00319A CD 29 21         [ 4]  664     CALL DRFROM 
      00319D CD 08 27         [ 4]  665     CALL DDUP 
      0031A0 CD 09 53         [ 4]  666     CALL GREAT 
      0031A3                        667     _TBRAN FALGN72
      0031A3 CD 04 A6         [ 4]    1     CALL TBRAN 
      0031A6 31 AB                    2     .word FALGN72 
      0031A8 CD 06 29         [ 4]  668     CALL SWAPP     
      0031AB                        669 FALGN72:
      0031AB CD 29 03         [ 4]  670     CALL DTOR  ; now smallest e is at rtop.
      0031AE                        671 FALGN8:
      0031AE CD 29 21         [ 4]  672     CALL DRFROM 
      0031B1                        673     _DROP 
      0031B1 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0031B4 81               [ 4]  674     RET 
                                    675 
                                    676 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    677 ;   F+ ( f#1 f#2 -- f#1+f#2 )
                                    678 ;   float addition 
                                    679 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0031B5                        680     _HEADER FPLUS,2,"F+"
      0031B5 31 09                    1         .word LINK 
                           0031B7     2         LINK=.
      0031B7 02                       3         .byte 2  
      0031B8 46 2B                    4         .ascii "F+"
      0031BA                          5         FPLUS:
      0031BA CD 31 11         [ 4]  681     CALL FALIGN 
      0031BD CD 05 E2         [ 4]  682     CALL TOR 
      0031C0 CD 2B C6         [ 4]  683     CALL DPLUS
      0031C3 CD 26 A9         [ 4]  684     CALL DSIGN 
      0031C6 CD 05 E2         [ 4]  685     CALL TOR 
      0031C9 CD 26 98         [ 4]  686     CALL DABS 
      0031CC CD 32 2F         [ 4]  687     CALL SCALETOM
      0031CF CD 05 34         [ 4]  688     CALL RFROM 
      0031D2                        689     _QBRAN FPLUS1 
      0031D2 CD 04 98         [ 4]    1     CALL QBRAN
      0031D5 31 DA                    2     .word FPLUS1
      0031D7 CD 08 98         [ 4]  690     CALL DNEGA  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]



      0031DA                        691 FPLUS1: 
      0031DA CD 07 DD         [ 4]  692     CALL ROT   
      0031DD CD 05 34         [ 4]  693     CALL RFROM
      0031E0 CD 08 3C         [ 4]  694     CALL PLUS  
      0031E3 CD 2D A5         [ 4]  695     CALL STEXP 
      0031E6 81               [ 4]  696     RET 
                                    697 
                                    698 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    699 ;  F- ( f#1 f#2 -- f#1-f#2 )
                                    700 ;  substraction 
                                    701 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0031E7                        702     _HEADER FSUB,2,"F-"
      0031E7 31 B7                    1         .word LINK 
                           0031E9     2         LINK=.
      0031E9 02                       3         .byte 2  
      0031EA 46 2D                    4         .ascii "F-"
      0031EC                          5         FSUB:
      0031EC CD 31 11         [ 4]  703     CALL FALIGN 
      0031EF CD 05 E2         [ 4]  704     CALL TOR 
      0031F2 CD 2B F8         [ 4]  705     CALL DSUB
      0031F5 CD 26 A9         [ 4]  706     CALL DSIGN 
      0031F8 CD 05 E2         [ 4]  707     CALL TOR 
      0031FB CD 26 98         [ 4]  708     CALL DABS 
      0031FE CD 32 2F         [ 4]  709     CALL SCALETOM 
      003201 CD 05 34         [ 4]  710     CALL RFROM 
      003204                        711     _QBRAN FSUB1 
      003204 CD 04 98         [ 4]    1     CALL QBRAN
      003207 32 0C                    2     .word FSUB1
      003209 CD 08 98         [ 4]  712     CALL DNEGA 
      00320C                        713 FSUB1:
      00320C CD 07 DD         [ 4]  714     CALL ROT 
      00320F CD 05 34         [ 4]  715     CALL RFROM
      003212 CD 08 3C         [ 4]  716     CALL PLUS  
      003215 CD 2D A5         [ 4]  717     CALL STEXP 
      003218 81               [ 4]  718     RET 
                                    719 
                                    720 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    721 ; /mod10  ( m -- m/10 r )
                                    722 ; divide mantissa by 10 
                                    723 ; return quotient and remainder 
                                    724 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003219                        725 UMOD10:
      003219                        726     _DOLIT 10 
      003219 CD 04 6F         [ 4]    1     CALL DOLIT 
      00321C 00 0A                    2     .word 10 
      00321E CD 26 C3         [ 4]  727     CALL DSLMOD
      003221 CD 07 DD         [ 4]  728     CALL ROT  
      003224 81               [ 4]  729     RET 
                                    730 
                                    731 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    732 ;   SCALE>M ( ud1 -- e ud2 )
                                    733 ;   scale down a double  
                                    734 ;   by repeated d/10
                                    735 ;   until ud<=MAX_MANTISSA   
                                    736 ;   e is log10 exponent of scaled down
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 180.
Hexadecimal [24-Bits]



                                    737 ;   ud2 is scaled down ud1 
                                    738 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003225                        739     _HEADER SCALETOM,7,"SCALE>M"
      003225 31 E9                    1         .word LINK 
                           003227     2         LINK=.
      003227 07                       3         .byte 7  
      003228 53 43 41 4C 45 3E 4D     4         .ascii "SCALE>M"
      00322F                          5         SCALETOM:
      00322F CD 0C 03         [ 4]  740     CALL ZERO 
      003232 CD 07 FC         [ 4]  741     CALL NROT 
      003235                        742 SCAL1:
      003235 CD 06 19         [ 4]  743     CALL DUPP 
      003238                        744     _DOLIT 0X7F 
      003238 CD 04 6F         [ 4]    1     CALL DOLIT 
      00323B 00 7F                    2     .word 0X7F 
      00323D CD 09 3D         [ 4]  745     CALL UGREAT 
      003240                        746     _QBRAN SCAL2  
      003240 CD 04 98         [ 4]    1     CALL QBRAN
      003243 32 56                    2     .word SCAL2
      003245 CD 32 19         [ 4]  747     CALL UMOD10 
      003248                        748     _DROP 
      003248 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00324B CD 07 DD         [ 4]  749     CALL ROT 
      00324E CD 0B 97         [ 4]  750     CALL ONEP 
      003251 CD 07 FC         [ 4]  751     CALL NROT  
      003254 20 DF            [ 2]  752     JRA SCAL1 
      003256                        753 SCAL2: 
      003256 81               [ 4]  754     RET 
                                    755 
                                    756 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    757 ;  UDIV10 ( ut -- ut )
                                    758 ;  divide a 48 bits uint by 10 
                                    759 ;  used to scale down MM* 
                                    760 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003257                        761 UDIV10:
      003257 90 93            [ 1]  762     LDW Y,X 
      003259 90 FE            [ 2]  763     LDW Y,(Y)
      00325B A6 0A            [ 1]  764     LD A,#10 
      00325D 90 62            [ 2]  765     DIV Y,A 
      00325F FF               [ 2]  766     LDW (X),Y 
      003260 90 95            [ 1]  767     LD YH,A 
      003262 E6 02            [ 1]  768     LD A,(2,X)
      003264 90 97            [ 1]  769     LD YL,A 
      003266 A6 0A            [ 1]  770     LD A,#10 
      003268 90 62            [ 2]  771     DIV Y,A 
      00326A 90 95            [ 1]  772     LD YH,A 
      00326C 90 9F            [ 1]  773     LD A,YL 
      00326E E7 02            [ 1]  774     LD (2,X),A 
      003270 E6 03            [ 1]  775     LD A,(3,X)
      003272 90 97            [ 1]  776     LD YL,A 
      003274 A6 0A            [ 1]  777     LD A,#10 
      003276 90 62            [ 2]  778     DIV Y,A 
      003278 90 95            [ 1]  779     LD YH,A 
      00327A 90 9F            [ 1]  780     LD A,YL 
      00327C E7 03            [ 1]  781     LD (3,X),A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 181.
Hexadecimal [24-Bits]



      00327E E6 04            [ 1]  782     LD A,(4,X)
      003280 90 97            [ 1]  783     LD YL,A 
      003282 A6 0A            [ 1]  784     LD A,#10 
      003284 90 62            [ 2]  785     DIV Y,A 
      003286 90 95            [ 1]  786     LD YH,A 
      003288 90 9F            [ 1]  787     LD A,YL 
      00328A E7 04            [ 1]  788     LD (4,X),A 
      00328C E6 05            [ 1]  789     LD A,(5,X)
      00328E 90 97            [ 1]  790     LD YL,A 
      003290 A6 0A            [ 1]  791     LD A,#10 
      003292 90 62            [ 2]  792     DIV Y,A 
      003294 90 9F            [ 1]  793     LD A,YL 
      003296 E7 05            [ 1]  794     LD (5,X),A 
      003298 81               [ 4]  795     RET 
                                    796 
                                    797 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    798 ;   MM* ( m1 m2 -- m3 e )
                                    799 ;   mantissa product 
                                    800 ;  scale down to 23 bits 
                                    801 ;   e  is log10 scaling factor.
                                    802 ;   The maximum product size 
                                    803 ;   before scaling is 46 bits .
                                    804 ;   UDIV10 is used to scale down.  
                                    805 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003299                        806     _HEADER MMSTAR,3,"MM*"
      003299 32 27                    1         .word LINK 
                           00329B     2         LINK=.
      00329B 03                       3         .byte 3  
      00329C 4D 4D 2A                 4         .ascii "MM*"
      00329F                          5         MMSTAR:
      00329F CD 08 27         [ 4]  807     CALL DDUP
      0032A2 CD 28 89         [ 4]  808     CALL DZEQUAL
      0032A5                        809     _TBRAN MMSTA2
      0032A5 CD 04 A6         [ 4]    1     CALL TBRAN 
      0032A8 32 B5                    2     .word MMSTA2 
      0032AA                        810 MMSTA1:
      0032AA CD 29 CA         [ 4]  811     CALL DOVER 
      0032AD CD 28 89         [ 4]  812     CALL DZEQUAL 
      0032B0                        813     _QBRAN MMSTA3 
      0032B0 CD 04 98         [ 4]    1     CALL QBRAN
      0032B3 32 C0                    2     .word MMSTA3
      0032B5                        814 MMSTA2: ; ( -- 0 0 0 )
      0032B5 1C 00 02         [ 2]  815     ADDW X,#2 
      0032B8 90 5F            [ 1]  816     CLRW Y 
      0032BA FF               [ 2]  817     LDW (X),Y 
      0032BB EF 02            [ 2]  818     LDW (2,X),Y
      0032BD EF 04            [ 2]  819     LDW (4,X),Y 
      0032BF 81               [ 4]  820     RET 
      0032C0                        821 MMSTA3:
      0032C0 CD 26 A9         [ 4]  822     CALL DSIGN 
      0032C3 CD 05 E2         [ 4]  823     CALL TOR    ; R: m2sign 
      0032C6 CD 26 98         [ 4]  824     CALL DABS   ; m1 um2 
      0032C9 CD 27 B4         [ 4]  825     CALL DSWAP  ; um2 m1 
      0032CC CD 26 A9         [ 4]  826     CALL DSIGN  ; um2 m1 m1sign 
      0032CF CD 05 34         [ 4]  827     CALL RFROM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 182.
Hexadecimal [24-Bits]



      0032D2 CD 06 9F         [ 4]  828     CALL XORR 
      0032D5 CD 05 E2         [ 4]  829     CALL TOR   ; R: product_sign 
      0032D8 CD 26 98         [ 4]  830     CALL DABS  ; um2 um1  
      0032DB CD 29 03         [ 4]  831     CALL DTOR  ; um2 
      0032DE CD 06 19         [ 4]  832     CALL DUPP  ; um2 um2hi 
      0032E1 CD 05 45         [ 4]  833     CALL RAT   ; um2 um2hi um1hi
                                    834 ; first partial product  
                                    835 ; pd1=um2hi*um1hi 
      0032E4 CD 0B 16         [ 4]  836     CALL STAR 
      0032E7 CD 0C 03         [ 4]  837     CALL ZERO 
      0032EA CD 06 29         [ 4]  838     CALL SWAPP ; pd1<<16  
      0032ED CD 27 B4         [ 4]  839     CALL DSWAP ; pd1 um2 
      0032F0 CD 06 41         [ 4]  840     CALL OVER  ; pd1 um2 um2lo 
      0032F3 CD 05 34         [ 4]  841     CALL RFROM ; pd1 um2 um2lo um1hi 
                                    842 ; pd2=um2lo*um1hi 
      0032F6 CD 0A CC         [ 4]  843     CALL UMSTA ; pd1 um2 pd2 
      0032F9 CD 27 B4         [ 4]  844     CALL DSWAP ; pd1 pd2 um2 
      0032FC CD 05 45         [ 4]  845     CALL RAT   ; pd1 pd2 um2 um1lo 
                                    846 ; pd3= um2hi*um1lo 
      0032FF CD 0A CC         [ 4]  847     CALL UMSTA ; pd1 pd2 um2lo pd3 
      003302 CD 07 DD         [ 4]  848     CALL ROT ; pd1 pd2 pd3 um2lo 
      003305 CD 05 E2         [ 4]  849     CALL TOR ; pd1 pd2 pd3 R: psign um1lo um2lo 
                                    850 ; pd1+pd2+pd3  pd1
      003308 CD 2B C6         [ 4]  851     CALL DPLUS 
      00330B CD 2B C6         [ 4]  852     CALL DPLUS  
      00330E CD 29 21         [ 4]  853     CALL DRFROM ; triple um2lo um1lo 
                                    854 ; last partial product um2lo*um1lo 
      003311 CD 0A CC         [ 4]  855     CALL UMSTA ; prod pd4 
                                    856 ; mm*=prod<<16+pd4  
      003314 CD 29 03         [ 4]  857     CALL DTOR ;   R: psign pd4lo pd4hi  
                                    858  ; add pd4hi to prodlo and propagate carry 
      003317 90 93            [ 1]  859     LDW Y,X 
      003319 90 EE 02         [ 2]  860     LDW Y,(2,Y)  ; prodlo 
      00331C 72 F9 01         [ 2]  861     ADDW Y,(1,SP)  ; prodlo+pd4hi 
      00331F 17 01            [ 2]  862     LDW (1,SP),Y    ; plo phi  
      003321 90 93            [ 1]  863     LDW Y,X
      003323 90 FE            [ 2]  864     LDW Y,(Y) ; prodhi  
      003325 24 04            [ 1]  865     JRNC MMSTA4
      003327 72 A9 00 01      [ 2]  866     ADDW Y,#1 ; add carry 
      00332B                        867 MMSTA4:     
      00332B 1D 00 02         [ 2]  868     SUBW X,#2 
      00332E FF               [ 2]  869     LDW (X),Y 
      00332F 90 85            [ 2]  870     POPW Y 
      003331 EF 02            [ 2]  871     LDW (2,X),Y 
      003333 90 85            [ 2]  872     POPW Y 
      003335 EF 04            [ 2]  873     LDW (4,X),Y
      003337 CD 0C 03         [ 4]  874     CALL ZERO 
      00333A CD 05 E2         [ 4]  875     CALL TOR 
      00333D                        876 MMSTA5:
      00333D CD 07 CC         [ 4]  877     CALL QDUP 
      003340                        878     _QBRAN MMSTA6 
      003340 CD 04 98         [ 4]    1     CALL QBRAN
      003343 33 53                    2     .word MMSTA6
      003345 CD 32 57         [ 4]  879     CALL UDIV10 
      003348 CD 05 34         [ 4]  880     CALL RFROM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 183.
Hexadecimal [24-Bits]



      00334B CD 0B 97         [ 4]  881     CALL ONEP 
      00334E CD 05 E2         [ 4]  882     CALL TOR 
      003351 20 EA            [ 2]  883     JRA MMSTA5 
                                    884 ; now scale to double 
                                    885 ; scale further <= MAX_MANTISSA 
      003353                        886 MMSTA6: 
      003353 CD 05 34         [ 4]  887     CALL RFROM 
      003356 CD 07 FC         [ 4]  888     CALL NROT 
      003359 CD 32 2F         [ 4]  889     CALL SCALETOM
      00335C CD 29 03         [ 4]  890     CALL DTOR 
      00335F CD 08 3C         [ 4]  891     CALL PLUS 
      003362 CD 29 21         [ 4]  892     CALL DRFROM 
      003365 CD 05 34         [ 4]  893     CALL RFROM
      003368                        894     _QBRAN MMSTA7
      003368 CD 04 98         [ 4]    1     CALL QBRAN
      00336B 33 70                    2     .word MMSTA7
      00336D CD 08 98         [ 4]  895     CALL DNEGA
      003370                        896 MMSTA7:
      003370 CD 07 DD         [ 4]  897     CALL ROT ; m e 
      003373 81               [ 4]  898     RET 
                                    899 
                                    900 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    901 ;    F* ( f#1 f#2 -- f#3 )
                                    902 ;    float product 
                                    903 ;    f#3=f#1 * f#2 
                                    904 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003374                        905     _HEADER FSTAR,2,"F*"
      003374 32 9B                    1         .word LINK 
                           003376     2         LINK=.
      003376 02                       3         .byte 2  
      003377 46 2A                    4         .ascii "F*"
      003379                          5         FSTAR:
      003379 CD 2D 73         [ 4]  906     CALL ATEXP ; f#1 m2 e2 
      00337C CD 05 E2         [ 4]  907     CALL TOR   
      00337F CD 27 B4         [ 4]  908     CALL DSWAP ; m2 f#1
      003382 CD 2D 73         [ 4]  909     CALL ATEXP ; m2 m1 e1 
      003385 CD 05 34         [ 4]  910     CALL RFROM ; m2 m1 e1 e2 
      003388 CD 08 3C         [ 4]  911     CALL PLUS  ; m2 m1 e 
      00338B CD 05 E2         [ 4]  912     CALL TOR   ; m2 m1 R: e 
      00338E CD 32 9F         [ 4]  913     CALL MMSTAR ; m2*m1 e   
      003391 CD 05 34         [ 4]  914     CALL RFROM 
      003394 CD 08 3C         [ 4]  915     CALL PLUS 
      003397 CD 2D A5         [ 4]  916     CALL STEXP ; f#3 
      00339A 81               [ 4]  917     RET 
                                    918 
                                    919 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    920 ;  F/ ( f#1 f#2 -- f#3 )
                                    921 ;  float division
                                    922 ;  f#3 = f#1/f#2
                                    923 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00339B                        924     _HEADER FSLASH,2,"F/"
      00339B 33 76                    1         .word LINK 
                           00339D     2         LINK=.
      00339D 02                       3         .byte 2  
      00339E 46 2F                    4         .ascii "F/"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 184.
Hexadecimal [24-Bits]



      0033A0                          5         FSLASH:
      0033A0 CD 2D 73         [ 4]  925     CALL ATEXP  ; f#1 m2 e2 
      0033A3 CD 05 E2         [ 4]  926     CALL TOR    ; f#1 m2   R: e2 
      0033A6 CD 26 A9         [ 4]  927     CALL DSIGN  ; f#1 m2 m2sign 
      0033A9 CD 05 E2         [ 4]  928     CALL TOR    ; F#1 m2 R: e2 m2s 
      0033AC CD 26 98         [ 4]  929     CALL DABS   ; F#1 um2 
      0033AF CD 27 B4         [ 4]  930     CALL DSWAP  ; m2 f#1 
      0033B2 CD 2D 73         [ 4]  931     CALL ATEXP  ; m2 m1 e1 
      0033B5 CD 0C 0E         [ 4]  932     CALL ONE    ; e2 slot on rstack  
      0033B8 CD 05 9F         [ 4]  933     CALL NRAT   ; m2 m1 e1 e2 
      0033BB CD 08 D2         [ 4]  934     CALL SUBB   ; m2 m1 e 
      0033BE CD 0C 0E         [ 4]  935     CALL ONE    ; e slot on rstack 
      0033C1 CD 05 BE         [ 4]  936     CALL NRSTO  ; m2 m1 R: e m2s 
      0033C4 CD 26 A9         [ 4]  937     CALL DSIGN  ; m2 m1 m1sign 
      0033C7 CD 05 34         [ 4]  938     CALL RFROM  ; m2 m1 m1s m2s  
      0033CA CD 06 9F         [ 4]  939     CALL XORR   ; m2 m1 quot_sign R: e 
      0033CD CD 05 34         [ 4]  940     CALL RFROM   
      0033D0 CD 29 03         [ 4]  941     CALL DTOR   ; m2 m1 R: qs e  
      0033D3 CD 26 98         [ 4]  942     CALL DABS   ; um2 um1 R: qs e  
      0033D6 CD 27 B4         [ 4]  943     CALL DSWAP  ; m1 m2 R: qs e
      0033D9 CD 08 27         [ 4]  944     CALL DDUP  ; m1 m2 m2 R: qs e
      0033DC CD 29 03         [ 4]  945     CALL DTOR  ; m1 m2 R: qs e m2 ( keep divisor need later ) 
      0033DF CD 2A D5         [ 4]  946     CALL UDSLMOD ; remainder m1/m2 R: e m2 
      0033E2                        947 FSLASH1: 
      0033E2 CD 29 CA         [ 4]  948     CALL DOVER ; if remainder null done 
      0033E5 CD 28 89         [ 4]  949     CALL DZEQUAL 
      0033E8                        950     _TBRAN FSLASH8 
      0033E8 CD 04 A6         [ 4]    1     CALL TBRAN 
      0033EB 34 45                    2     .word FSLASH8 
                                    951 ; get fractional digits from remainder until mantissa saturate
                                    952 ; remainder mantissa R: e divisor 
                                    953 ; check for mantissa saturation 
      0033ED CD 08 27         [ 4]  954     CALL DDUP 
      0033F0                        955     _DOLIT 0XCCCC 
      0033F0 CD 04 6F         [ 4]    1     CALL DOLIT 
      0033F3 CC CC                    2     .word 0XCCCC 
      0033F5                        956     _DOLIT 0xC
      0033F5 CD 04 6F         [ 4]    1     CALL DOLIT 
      0033F8 00 0C                    2     .word 0xC 
      0033FA CD 28 C6         [ 4]  957     CALL DGREAT 
      0033FD                        958     _TBRAN FSLASH8 ; another loop would result in mantissa overflow 
      0033FD CD 04 A6         [ 4]    1     CALL TBRAN 
      003400 34 45                    2     .word FSLASH8 
                                    959 ; multiply mantissa by 10 
      003402                        960     _DOLIT 10 
      003402 CD 04 6F         [ 4]    1     CALL DOLIT 
      003405 00 0A                    2     .word 10 
      003407 CD 0C 03         [ 4]  961     CALL ZERO 
      00340A CD 2A 72         [ 4]  962     CALL DSTAR 
                                    963 ; mutliply remainder by 10     
      00340D CD 27 B4         [ 4]  964     CALL DSWAP 
      003410                        965     _DOLIT 10 
      003410 CD 04 6F         [ 4]    1     CALL DOLIT 
      003413 00 0A                    2     .word 10 
      003415 CD 0C 03         [ 4]  966     CALL ZERO 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 185.
Hexadecimal [24-Bits]



      003418 CD 2A 72         [ 4]  967     CALL DSTAR 
                                    968 ; divide remainder by m2     
      00341B CD 29 39         [ 4]  969     CALL DRAT  ; mantissa remainder divisor R: e divisor 
      00341E CD 2A D5         [ 4]  970     CALL UDSLMOD ; mantissa dr dq R: qs e divisor 
      003421 CD 27 B4         [ 4]  971     CALL DSWAP ; mantissa frac_digit remainder R: qs e divisor  
      003424 CD 29 03         [ 4]  972     CALL DTOR  ; mantissa frac_digit R: qs e divisor remainder 
      003427 CD 2B C6         [ 4]  973     CALL DPLUS ; mantissa+frac_digit 
      00342A CD 29 21         [ 4]  974     CALL DRFROM ; mantissa remainder R: qs e divisor  
      00342D CD 27 B4         [ 4]  975     CALL DSWAP  ; remainder mantissa  
                                    976 ; increment e 
      003430                        977     _DOLIT 2    ; e slot on rstack 
      003430 CD 04 6F         [ 4]    1     CALL DOLIT 
      003433 00 02                    2     .word 2 
      003435 CD 05 9F         [ 4]  978     CALL NRAT   ;  2 NR@ -- e 
      003438 CD 0B 97         [ 4]  979     CALL ONEP   ; increment exponent 
      00343B                        980     _DOLIT 2 
      00343B CD 04 6F         [ 4]    1     CALL DOLIT 
      00343E 00 02                    2     .word 2 
      003440 CD 05 BE         [ 4]  981     CALL NRSTO  ; e 2 NR! , update e on rstack     
      003443 20 9D            [ 2]  982     JRA FSLASH1
      003445                        983 FSLASH8: ; remainder mantissa R: qs e divisor 
      003445 CD 27 B4         [ 4]  984     CALL DSWAP  
      003448                        985     _DDROP  ; drop remainder     
      003448 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      00344B CD 29 21         [ 4]  986     CALL DRFROM
      00344E                        987     _DDROP  ; drop divisor 
      00344E 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      003451 CD 15 EA         [ 4]  988     CALL JFETCH    ; quotient sign 
      003454                        989     _QBRAN FSLASH9 
      003454 CD 04 98         [ 4]    1     CALL QBRAN
      003457 34 5C                    2     .word FSLASH9
      003459 CD 08 98         [ 4]  990     CALL DNEGA  
      00345C                        991 FSLASH9:
      00345C CD 05 34         [ 4]  992     CALL RFROM  ; exponent 
      00345F CD 2D A5         [ 4]  993     CALL STEXP 
      003462 CD 05 34         [ 4]  994     CALL RFROM 
      003465                        995     _DROP ; drop qs 
      003465 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      003468 81               [ 4]  996     RET 
                                    997 
                                    998 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    999 ;   D>F  ( # -- f# )
                                   1000 ;   convert double to float 
                                   1001 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003469                       1002     _HEADER DTOF,3,"D>F"
      003469 33 9D                    1         .word LINK 
                           00346B     2         LINK=.
      00346B 03                       3         .byte 3  
      00346C 44 3E 46                 4         .ascii "D>F"
      00346F                          5         DTOF:
      00346F CD 26 A9         [ 4] 1003     CALL DSIGN 
      003472 CD 05 E2         [ 4] 1004     CALL TOR
      003475 CD 26 98         [ 4] 1005     CALL DABS  
      003478                       1006 DTOF1:      
      003478 CD 32 2F         [ 4] 1007     CALL SCALETOM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 186.
Hexadecimal [24-Bits]



      00347B CD 05 34         [ 4] 1008     CALL RFROM
      00347E                       1009     _QBRAN DTOF2 
      00347E CD 04 98         [ 4]    1     CALL QBRAN
      003481 34 86                    2     .word DTOF2
      003483 CD 08 98         [ 4] 1010     CALL DNEGA 
      003486                       1011 DTOF2: 
      003486 CD 07 DD         [ 4] 1012     CALL ROT 
      003489 CD 2D A5         [ 4] 1013     CALL STEXP 
      00348C 81               [ 4] 1014     RET 
                                   1015 
                                   1016 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1017 ;   F>D  ( f# -- # )
                                   1018 ;  convert float to double 
                                   1019 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00348D                       1020     _HEADER FTOD,3,"F>D"
      00348D 34 6B                    1         .word LINK 
                           00348F     2         LINK=.
      00348F 03                       3         .byte 3  
      003490 46 3E 44                 4         .ascii "F>D"
      003493                          5         FTOD:
      003493 CD 2D 73         [ 4] 1021     CALL ATEXP ; m e 
      003496 CD 07 CC         [ 4] 1022     CALL QDUP
      003499                       1023     _QBRAN FTOD9
      003499 CD 04 98         [ 4]    1     CALL QBRAN
      00349C 35 1D                    2     .word FTOD9
      00349E CD 05 E2         [ 4] 1024     CALL TOR 
      0034A1 CD 26 A9         [ 4] 1025     CALL DSIGN 
      0034A4 CD 07 FC         [ 4] 1026     CALL NROT 
      0034A7 CD 26 98         [ 4] 1027     CALL DABS
      0034AA CD 05 34         [ 4] 1028     CALL RFROM  
      0034AD CD 06 19         [ 4] 1029     CALL DUPP   
      0034B0 CD 06 50         [ 4] 1030     CALL ZLESS 
      0034B3                       1031     _QBRAN FTOD4 
      0034B3 CD 04 98         [ 4]    1     CALL QBRAN
      0034B6 34 E8                    2     .word FTOD4
                                   1032 ; negative exponent 
      0034B8 CD 08 EC         [ 4] 1033     CALL ABSS 
      0034BB CD 05 E2         [ 4] 1034     CALL TOR
      0034BE 20 19            [ 2] 1035     JRA FTOD2  
      0034C0                       1036 FTOD1:
      0034C0 CD 08 27         [ 4] 1037     CALL DDUP 
      0034C3 CD 28 89         [ 4] 1038     CALL DZEQUAL 
      0034C6                       1039     _TBRAN FTOD3 
      0034C6 CD 04 A6         [ 4]    1     CALL TBRAN 
      0034C9 34 E0                    2     .word FTOD3 
      0034CB                       1040     _DOLIT 10 
      0034CB CD 04 6F         [ 4]    1     CALL DOLIT 
      0034CE 00 0A                    2     .word 10 
      0034D0 CD 26 C3         [ 4] 1041     CALL DSLMOD 
      0034D3 CD 07 DD         [ 4] 1042     CALL ROT 
      0034D6                       1043     _DROP
      0034D6 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0034D9                       1044 FTOD2:      
      0034D9                       1045     _DONXT FTOD1
      0034D9 CD 04 83         [ 4]    1     CALL DONXT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 187.
Hexadecimal [24-Bits]



      0034DC 34 C0                    2     .word FTOD1 
      0034DE 20 32            [ 2] 1046     JRA FTOD8   
      0034E0                       1047 FTOD3: 
      0034E0 CD 05 34         [ 4] 1048     CALL RFROM 
      0034E3                       1049     _DROP 
      0034E3 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0034E6 20 2A            [ 2] 1050     JRA FTOD8  
                                   1051 ; positive exponent 
      0034E8                       1052 FTOD4:
      0034E8 CD 05 E2         [ 4] 1053     CALL TOR 
      0034EB 20 20            [ 2] 1054     JRA FTOD6
      0034ED                       1055 FTOD5:
      0034ED CD 08 27         [ 4] 1056     CALL DDUP 
      0034F0                       1057     _DOLIT 0XCCCC
      0034F0 CD 04 6F         [ 4]    1     CALL DOLIT 
      0034F3 CC CC                    2     .word 0XCCCC 
      0034F5                       1058     _DOLIT 0XCCC  
      0034F5 CD 04 6F         [ 4]    1     CALL DOLIT 
      0034F8 0C CC                    2     .word 0XCCC 
      0034FA CD 28 C6         [ 4] 1059     CALL DGREAT 
      0034FD                       1060     _TBRAN FTOD3 
      0034FD CD 04 A6         [ 4]    1     CALL TBRAN 
      003500 34 E0                    2     .word FTOD3 
      003502                       1061     _DOLIT 10 
      003502 CD 04 6F         [ 4]    1     CALL DOLIT 
      003505 00 0A                    2     .word 10 
      003507 CD 0C 03         [ 4] 1062     CALL ZERO 
      00350A CD 2A 72         [ 4] 1063     CALL DSTAR 
      00350D                       1064 FTOD6: 
      00350D                       1065     _DONXT FTOD5 
      00350D CD 04 83         [ 4]    1     CALL DONXT 
      003510 34 ED                    2     .word FTOD5 
      003512                       1066 FTOD8:
      003512 CD 07 DD         [ 4] 1067     CALL ROT 
      003515                       1068     _QBRAN FTOD9 
      003515 CD 04 98         [ 4]    1     CALL QBRAN
      003518 35 1D                    2     .word FTOD9
      00351A CD 08 98         [ 4] 1069     CALL DNEGA
      00351D                       1070 FTOD9:          
      00351D 81               [ 4] 1071     RET 
                                   1072 
                                   1073 
                                   1074 ;;;;;;;;;;;;;;;;;;;;;;;;
                                   1075 ;   F0< ( f# -- f )
                                   1076 ;   true if f#<0
                                   1077 ;;;;;;;;;;;;;;;;;;;;;;;;
      00351E                       1078     _HEADER FZLESS,3,"F0<"
      00351E 34 8F                    1         .word LINK 
                           003520     2         LINK=.
      003520 03                       3         .byte 3  
      003521 46 30 3C                 4         .ascii "F0<"
      003524                          5         FZLESS:
      003524 CD 2D 73         [ 4] 1079     CALL ATEXP 
      003527                       1080     _DROP 
      003527 1C 00 02         [ 2]    1     ADDW X,#CELLL  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 188.
Hexadecimal [24-Bits]



      00352A CD 06 29         [ 4] 1081     CALL SWAPP 
      00352D                       1082     _DROP 
      00352D 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      003530 CD 06 50         [ 4] 1083     CALL ZLESS 
      003533 81               [ 4] 1084     RET
                                   1085 
                                   1086 ;;;;;;;;;;;;;;;;;;;;;;;;
                                   1087 ;   F< ( f#1 f#2 -- f )
                                   1088 ; true if f#1 < f#1 
                                   1089 ;;;;;;;;;;;;;;;;;;;;;;;
      003534                       1090     _HEADER FLESS,2,"F<"
      003534 35 20                    1         .word LINK 
                           003536     2         LINK=.
      003536 02                       3         .byte 2  
      003537 46 3C                    4         .ascii "F<"
      003539                          5         FLESS:
      003539 CD 31 EC         [ 4] 1091     CALL FSUB  
      00353C CC 35 24         [ 2] 1092     JP FZLESS
                                   1093 
                                   1094 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1095 ;   F> ( f#1 f#2 -- f )
                                   1096 ;   true fi f#1>f#2
                                   1097 ;;;;;;;;;;;;;;;;;;;;;;;;;
      00353F                       1098     _HEADER FGREAT,2,"F>"
      00353F 35 36                    1         .word LINK 
                           003541     2         LINK=.
      003541 02                       3         .byte 2  
      003542 46 3E                    4         .ascii "F>"
      003544                          5         FGREAT:
      003544 CD 27 B4         [ 4] 1099     CALL DSWAP 
      003547 CC 35 39         [ 2] 1100     JP FLESS 
                                   1101 
                                   1102 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1103 ;   F= ( f#1 f#2 -- f ) 
                                   1104 ;   true fi f#1==f#2 
                                   1105 ;;;;;;;;;;;;;;;;;;;;;;;;;
      00354A                       1106     _HEADER FEQUAL,2,"F="
      00354A 35 41                    1         .word LINK 
                           00354C     2         LINK=.
      00354C 02                       3         .byte 2  
      00354D 46 3D                    4         .ascii "F="
      00354F                          5         FEQUAL:
      00354F CC 28 A5         [ 2] 1107     JP DEQUAL 
                                   1108 
                                   1109 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1110 ;   F0= ( f# -- f )
                                   1111 ;   true if f# is 0.0 
                                   1112 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      003552                       1113     _HEADER FZEQUAL,3,"F0="
      003552 35 4C                    1         .word LINK 
                           003554     2         LINK=.
      003554 03                       3         .byte 3  
      003555 46 30 3D                 4         .ascii "F0="
      003558                          5         FZEQUAL:
      003558 CD 2D 73         [ 4] 1114     CALL ATEXP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 189.
Hexadecimal [24-Bits]



      00355B                       1115     _DROP 
      00355B 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00355E CC 28 89         [ 2] 1116     JP DZEQUAL  
                                   1117 
                                   1118 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1119 ;  FNEGATE ( f#1 -- f#2 )
                                   1120 ;  f#2 is negation of f#1 
                                   1121 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      003561                       1122     _HEADER FNEGA,7,"FNEGATE"
      003561 35 54                    1         .word LINK 
                           003563     2         LINK=.
      003563 07                       3         .byte 7  
      003564 46 4E 45 47 41 54 45     4         .ascii "FNEGATE"
      00356B                          5         FNEGA:
      00356B CD 2D 73         [ 4] 1123     CALL ATEXP 
      00356E CD 05 E2         [ 4] 1124     CALL TOR 
      003571 CD 08 98         [ 4] 1125     CALL DNEGA
      003574 CD 05 34         [ 4] 1126     CALL RFROM 
      003577 CD 2D A5         [ 4] 1127     CALL STEXP 
      00357A CD 2D 26         [ 4] 1128     CALL SFN 
      00357D 81               [ 4] 1129     RET 
                                   1130 
                                   1131 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1132 ;  FABS ( f#1 -- abs(f#1) )
                                   1133 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00357E                       1134     _HEADER FABS,4,"FABS"
      00357E 35 63                    1         .word LINK 
                           003580     2         LINK=.
      003580 04                       3         .byte 4  
      003581 46 41 42 53              4         .ascii "FABS"
      003585                          5         FABS:
      003585 CD 2D 73         [ 4] 1135     CALL ATEXP 
      003588 CD 05 E2         [ 4] 1136     CALL TOR 
      00358B CD 06 19         [ 4] 1137     CALL DUPP 
      00358E                       1138     _DOLIT 0X80 
      00358E CD 04 6F         [ 4]    1     CALL DOLIT 
      003591 00 80                    2     .word 0X80 
      003593 CD 06 76         [ 4] 1139     CALL ANDD 
      003596                       1140     _QBRAN FABS1
      003596 CD 04 98         [ 4]    1     CALL QBRAN
      003599 35 9E                    2     .word FABS1
      00359B CD 08 98         [ 4] 1141     CALL DNEGA 
      00359E                       1142 FABS1: 
      00359E CD 05 34         [ 4] 1143     CALL RFROM 
      0035A1 CD 2D A5         [ 4] 1144     CALL STEXP 
      0035A4 CD 2D 26         [ 4] 1145     CALL SFN 
      0035A7 81               [ 4] 1146     RET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 190.
Hexadecimal [24-Bits]



                                   4628 .endif 
                                   4629 
                                   4630 ;===============================================================
                                   4631 
                           003580  4632 LASTN =	LINK   ;last name defined
                                   4633 
                                   4634 ; application code begin here
      003600                       4635 	.bndry 128 ; align on flash block  
      003600                       4636 app_space: 
                                   4637 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 191.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        0008F5 R   |   6 ABOR1      0013FC R
  6 ABOR2      001413 R   |   6 ABORQ      0013F4 R   |   6 ABORT      0013E5 R
  6 ABRTQ      0016D6 R   |   6 ABSS       0008EC R   |   6 ACCEP      00137B R
  6 ACCP1      001384 R   |   6 ACCP2      0013AA R   |   6 ACCP3      0013AD R
  6 ACCP4      0013AF R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |     ADDWX   =  00001C 
  6 ADRADJ     0007BC R   |     AFR     =  004803     |     AFR0_ADC=  000000 
    AFR1_TIM=  000001     |     AFR2_CCO=  000002     |     AFR3_TIM=  000003 
    AFR4_TIM=  000004     |     AFR5_TIM=  000005     |     AFR6_I2C=  000006 
    AFR7_BEE=  000007     |   6 AFT        0016C1 R   |   6 AGAIN      001617 R
  6 AHEAD      001674 R   |   6 ALLOT      001524 R   |   6 ANDD       000676 R
    APP_CP  =  004004     |     APP_LAST=  004000     |     APP_RUN =  004002 
    APP_VP  =  004006     |   6 AT         0004E3 R   |   6 ATEXE      000D13 R
  6 ATEXP      002D73 R   |   6 ATEXP1     002D88 R   |   6 ATEXP2     002D98 R
  6 AUTORUN    000129 R   |     AWU_APR =  0050F1     |     AWU_CSR =  0050F0 
    AWU_TBR =  0050F2     |     B0_MASK =  000001     |     B115200 =  000006 
  6 B115K2     0003E0 R   |     B19200  =  000003     |   6 B19K2      0003BD R
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
  6 B2K4       00038E R   |     B2_MASK =  000004     |     B38400  =  000004 
    B3_MASK =  000008     |     B460800 =  000008     |     B4800   =  000001 
  6 B4K8       00039C R   |     B4_MASK =  000010     |     B57600  =  000005 
  6 B57K6      0003CE R   |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
  6 B9K6       0003AC R   |   6 BACK1      001323 R   |   6 BASE       0006DF R
    BASEE   =  00000A     |   6 BAUD       0003F0 R   |     BCNT    =  000001 
  6 BCOMP      001567 R   |   6 BDIGS      000E0B R   |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
  6 BEGIN      0015F9 R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
  6 BKSLA      001178 R   |   6 BKSP       0012F3 R   |     BKSPP   =  000008 
  6 BLANK      000BF6 R   |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |   6 BRAN       0004B4 R   |     BTW     =  000001 
  6 BUF2ROW    0021ED R   |   6 BYE        0000B6 R   |     CADR    =  000003 
    CALLL   =  0000CD     |   6 CALLOT     002436 R   |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CARRY   =  00002A 
    CASE_SEN=  000000     |   6 CAT        000501 R   |   6 CCOMMA     001549 R
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 192.
Hexadecimal [24-Bits]

Symbol Table

    CC_Z    =  000001     |     CELLL   =  000002     |   6 CELLM      000B7B R
  6 CELLP      000B6C R   |   6 CELLS      000B8A R   |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   6 CHAR1      000F61 R
  6 CHAR2      000F64 R   |   6 CHKIVEC    0020DB R   |     CLKOPT  =  004807 
    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |   6 CMOV1      000D46 R
  6 CMOV2      000D5A R   |   6 CMOV3      000D6E R   |   6 CMOVE      000D2A R
    CNT     =  000001     |     CNTDWN  =  000032     |   6 CNTXT      000762 R
  6 COLD       001BDC R   |   6 COLD1      001BDC R   |   6 COLON      0018BF R
  6 COMMA      001532 R   |   6 COMPI      001577 R   |     COMPO   =  000040 
  6 CONSTANT   001969 R   |   6 COPYRIGH   001B25 R   |   6 COUNT      000CC6 R
  6 CPP        00077E R   |     CPU_A   =  007F00     |     CPU_CCR =  007F0A 
    CPU_PCE =  007F01     |     CPU_PCH =  007F02     |     CPU_PCL =  007F03 
    CPU_SPH =  007F08     |     CPU_SPL =  007F09     |     CPU_XH  =  007F04 
    CPU_XL  =  007F05     |     CPU_YH  =  007F06     |     CPU_YL  =  007F07 
  6 CR         000F89 R   |   6 CREAT      001905 R   |     CRR     =  00000D 
  6 CSTOR      0004F0 R   |   6 CTABLE     002457 R   |   6 CTAT       002478 R
  6 CTINIT     0024A0 R   |   6 D2SLASH    0029E3 R   |   6 D2STAR     0029FA R
  6 DABS       002698 R   |   6 DABS1      0026A0 R   |   6 DAT        000CAA R
    DATSTK  =  001680     |   6 DBLVER     002524 R   |   6 DCLZ       0027E2 R
  6 DCLZ1      0027EB R   |   6 DCLZ4      0027F4 R   |   6 DCLZ8      002801 R
  6 DCONST     00199E R   |   6 DDIG       002704 R   |   6 DDIGS      00271D R
  6 DDOT       002734 R   |   6 DDOT0      002748 R   |   6 DDOT1      00275E R
  6 DDROP      00081C R   |   6 DDSLMOD    002B87 R   |   6 DDSTAR3    002ACB R
  6 DDUP       000827 R   |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
  6 DECIM      000EBB R   |   6 DEPTH      000C45 R   |   6 DEQU4      0028BA R
  6 DEQUAL     0028A5 R   |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
  6 DGREAT     0028C6 R   |   6 DGTQ1      000F00 R   |   6 DI         0000C4 R
  6 DIG        000E34 R   |   6 DIGIT      000DCF R   |   6 DIGS       000E45 R
  6 DIGS1      000E45 R   |   6 DIGS2      000E52 R   |   6 DIGTQ      000ECF R
    DISCOVER=  000000     |   6 DLESS      0028D1 R   |   6 DLESS4     0028E5 R
  6 DLITER     0029A3 R   |   6 DLSHIFT    002A16 R   |   6 DLSHIFT1   002A29 R
  6 DLSHIFT2   002A3E R   |     DM_BK1RE=  007F90     |     DM_BK1RH=  007F91 
    DM_BK1RL=  007F92     |     DM_BK2RE=  007F93     |     DM_BK2RH=  007F94 
    DM_BK2RL=  007F95     |     DM_CR1  =  007F96     |     DM_CR2  =  007F97 
    DM_CSR1 =  007F98     |     DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A 
  6 DN1        0008B3 R   |   6 DNEGA      000898 R   |   6 DOCONST    001989 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 193.
Hexadecimal [24-Bits]

Symbol Table

  6 DOLIT      00046F R   |   6 DONXT      000483 R   |     DOORBELL=  000000 
  6 DOSTR      000F99 R   |   6 DOT        001030 R   |   6 DOT1       001046 R
  6 DOTI1      001AEE R   |   6 DOTID      001AD8 R   |   6 DOTO1      001488 R
  6 DOTOK      00146E R   |   6 DOTPR      001159 R   |   6 DOTQ       0016F0 R
  6 DOTQP      000FB6 R   |   6 DOTR       000FC4 R   |   6 DOTS       001A7A R
  6 DOTS1      001A85 R   |   6 DOTS2      001A8E R   |   6 DOVAR      0006CF R
  6 DOVER      0029CA R   |   6 DO_DCONS   0019C1 R   |     DP      =  000005 
  6 DPLUS      002BC6 R   |   6 DPLUS1     002BED R   |   6 DRAT       002939 R
  6 DRFROM     002921 R   |   6 DROP       00060F R   |   6 DROT       00284E R
  6 DRSHIFT    002A4F R   |   6 DRSHIFT1   002A56 R   |   6 DRSHIFT2   002A6C R
  6 DSIGN      0026A9 R   |   6 DSIGN1     0026B3 R   |   6 DSLA9      002BB1 R
  6 DSLASH     002BB7 R   |   6 DSLMOD     0026C3 R   |   6 DSLMOD3    0026DE R
  6 DSLMOD4    0026EA R   |   6 DSLMODa    0026E5 R   |   6 DSLMODb    0026F0 R
  6 DSSTAR     00278E R   |   6 DSSTAR3    0027AB R   |   6 DSTAR      002A72 R
  6 DSTOR      000C91 R   |   6 DSUB       002BF8 R   |   6 DSUB1      002C1F R
  6 DSWAP      0027B4 R   |   6 DTOF       00346F R   |   6 DTOF1      003478 R
  6 DTOF2      003486 R   |   6 DTOR       002903 R   |   6 DUMP       001A30 R
  6 DUMP1      001A47 R   |   6 DUMP3      001A69 R   |   6 DUMPP      0019FF R
  6 DUPP       000619 R   |   6 DVARIA     002957 R   |     DVER_MAJ=  000001 
    DVER_MIN=  000000     |   6 DZEQUAL    002889 R   |   6 DZLESS     0028EC R
  6 DZLESS1    0028F6 R   |   6 EDIGS      000E70 R   |   6 EDOT       002DF9 R
  6 EDOT0      002E10 R   |   6 EDOT2      002E1C R   |   6 EDOT3      002E32 R
  6 EDOT4      002E5E R   |   6 EDOT5      002E7D R   |   6 EECSTORE   001E8C R
  6 EEPCP      001CB2 R   |   6 EEPLAST    001C85 R   |   6 EEPROM     001C6D R
    EEPROM_B=  004000     |     EEPROM_E=  0047FF     |     EEPROM_R=  000010 
    EEPROM_S=  000800     |   6 EEPRUN     001C9C R   |   6 EEPVP      001CC8 R
  6 EESTORE    001ED8 R   |   6 EE_CCOMM   0021A2 R   |   6 EE_COMMA   002181 R
  6 EE_CREAD   001E1D R   |   6 EE_READ    001DFB R   |   6 EI         0000BD R
  6 ELSEE      00164F R   |   6 EMIT       000436 R   |   6 ENEPER     0023C2 R
    EOL_CR  =  000001     |     EOL_LF  =  000000     |   6 EQ1        000907 R
  6 EQUAL      0008FA R   |   6 ERASE      000D9D R   |     ERR     =  00001B 
  6 EVAL       0014B1 R   |   6 EVAL1      0014B1 R   |   6 EVAL2      0014CD R
  6 EXE1       000D21 R   |   6 EXECU      0004C4 R   |     EXT     =  000000 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |   6 EXTRC      000DF7 R
  6 FABS       003585 R   |   6 FABS1      00359E R   |   6 FADDR      00226F R
  6 FALGN4     00314A R   |   6 FALGN6     003159 R   |   6 FALGN7     003180 R
  6 FALGN71    00318F R   |   6 FALGN72    0031AB R   |   6 FALGN8     0031AE R
  6 FALIGN     003111 R   |   6 FALSE      000868 R   |   6 FARAT      001D33 R
  6 FARCAT     001D3F R   |   6 FC_XOFF    000463 R   |   6 FC_XON     00044D R
  6 FDOT       002E8C R   |   6 FDOT0      002ECA R   |   6 FDOT1      002EB9 R
  6 FDOT10     002F1D R   |   6 FDOT2      002ED8 R   |   6 FDOT3      002EEE R
  6 FDOT6      002EFB R   |   6 FDOT7      002EFD R   |   6 FDOT8      002F05 R
  6 FDOT9      002F0D R   |   6 FEQUAL     00354F R   |   6 FER        002C91 R
  6 FGREAT     003544 R   |     FHSE    =  7A1200     |     FHSI    =  F42400 
  6 FILL       000D7D R   |   6 FILL0      000D8B R   |   6 FILL1      000D93 R
  6 FIND       00124F R   |   6 FIND1      00126D R   |   6 FIND2      00129B R
  6 FIND3      0012A7 R   |   6 FIND4      0012BB R   |   6 FIND5      0012C8 R
  6 FIND6      0012AC R   |   6 FINIT      002C87 R   |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 194.
Hexadecimal [24-Bits]

Symbol Table

    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
    FLASH_IA=  000000     |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |   6 FLESS      003539 R
  6 FLOATQ     002F95 R   |   6 FLOATQ0    002F9D R   |   6 FLOATQ1    002FFC R
  6 FLOATQ2    003005 R   |   6 FLOATQ3    00300D R   |   6 FLOATQ4    003021 R
  6 FLOAT_ER   00303C R   |   6 FLOAT_ER   003039 R   |     FLOAT_MA=  000001 
    FLOAT_MI=  000000     |     FLSI    =  01F400     |   6 FMOVE      00227A R
  6 FMOVE2     0022AB R   |   6 FNE        002CB4 R   |   6 FNEGA      00356B R
  6 FOR        0015C1 R   |   6 FORGET     00015A R   |   6 FORGET1    000189 R
  6 FORGET2    00020F R   |   6 FORGET4    000218 R   |   6 FORGET6    0001D1 R
  6 FOV        002CCF R   |   6 FPLUS      0031BA R   |   6 FPLUS1     0031DA R
  6 FPSTOR     001C4E R   |   6 FPSW       002C63 R   |     FPTR    =  000034 
  6 FREEVAR    000225 R   |   6 FREEVAR4   00025B R   |   6 FRESET     002C75 R
  6 FSLASH     0033A0 R   |   6 FSLASH1    0033E2 R   |   6 FSLASH8    003445 R
  6 FSLASH9    00345C R   |   6 FSTAR      003379 R   |   6 FSUB       0031EC R
  6 FSUB1      00320C R   |   6 FTOD       003493 R   |   6 FTOD1      0034C0 R
  6 FTOD2      0034D9 R   |   6 FTOD3      0034E0 R   |   6 FTOD4      0034E8 R
  6 FTOD5      0034ED R   |   6 FTOD6      00350D R   |   6 FTOD8      003512 R
  6 FTOD9      00351D R   |   6 FVER       002C31 R   |   6 FZE        002C9E R
  6 FZEQUAL    003558 R   |   6 FZLESS     003524 R   |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
  6 GREAT      000953 R   |   6 GREAT1     00095E R   |   6 HDOT       001013 R
  6 HERE       000CDD R   |   6 HEX        000EA6 R   |   6 HI         001B91 R
  6 HLD        00074F R   |   6 HOLD       000E1B R   |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  6 ICOLON     0018D0 R   |   6 IFETCH     0015DF R   |   6 IFF        001627 R
  6 IFMOVE     002353 R   |     IMEDD   =  000080     |   6 IMMED      0018E2 R
  6 INCH       00042A R   |   6 INC_FPTR   001DC8 R   |   6 INITOFS    001898 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 195.
Hexadecimal [24-Bits]

Symbol Table

  6 INN        0006FD R   |     INPUT_DI=  000000     |     INPUT_EI=  000001 
    INPUT_FL=  000000     |     INPUT_PU=  000001     |   6 INTE1      001450 R
  6 INTER      001426 R   |   6 INTQ       0024FC R   |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
  6 INVER      000875 R   |     IPR0    =  000002     |     IPR1    =  000001 
    IPR2    =  000000     |     IPR3    =  000003     |     IPR_MASK=  000003 
    IRET_COD=  000080     |   6 ISEMI      0017E7 R   |     ITC_SPR1=  007F70 
    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |   6 JFETCH     0015EA R   |   6 JSRC       00183C R
  6 JSRC1      00185F R   |   6 JSRC2      001882 R   |   6 KEY        000F0F R
  6 KTAP       001340 R   |   6 KTAP1      001363 R   |   6 KTAP2      001366 R
  6 LAST       00078E R   |   6 LASTN   =  003580 R   |   6 LBRAC      00145D R
    LED2_BIT=  000005     |     LED2_MAS=  000020     |     LED2_POR=  00500A 
  6 LESS       000926 R   |     LF      =  00000A     |   6 LINK    =  003580 R
  6 LITER      001599 R   |   6 LN2S       00241E R   |   6 LOCAL      000554 R
  6 LOCK       001DB4 R   |   6 LOG2S      002408 R   |   6 LSCALE     00305B R
  6 LSHIFT     000BB5 R   |   6 LSHIFT1    000BBE R   |   6 LSHIFT4    000BC6 R
  6 LT1        000931 R   |     MASKK   =  001F7F     |   6 MAX        00096B R
  6 MAX1       000975 R   |     MAX_MANT=  7FFFFF     |   6 MIN        00097F R
  6 MIN1       000989 R   |   6 MMOD1      000A38 R   |   6 MMOD2      000A4C R
  6 MMOD3      000A63 R   |   6 MMSM0      0009C8 R   |   6 MMSM1      0009D8 R
  6 MMSM3      0009DC R   |   6 MMSM4      0009E8 R   |   6 MMSMa      0009E3 R
  6 MMSMb      0009EE R   |   6 MMSTA1     0032AA R   |   6 MMSTA2     0032B5 R
  6 MMSTA3     0032C0 R   |   6 MMSTA4     00332B R   |   6 MMSTA5     00333D R
  6 MMSTA6     003353 R   |   6 MMSTA7     003370 R   |   6 MMSTAR     00329F R
  6 MODD       000AB3 R   |   6 MONE       000C1C R   |     MS      =  000030 
  6 MSEC       0002D0 R   |   6 MSMOD      000A1B R   |   6 MSTA1      000B44 R
  6 MSTAR      000B21 R   |     NAFR    =  004804     |   6 NAMEQ      0012E8 R
  6 NAMET      0011F9 R   |     NCLKOPT =  004808     |   6 NDROT      002812 R
  6 NEGAT      000886 R   |   6 NEG_SIGN   002567 R   |   6 NEX1       000490 R
  6 NEXT       0015D0 R   |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPT6   =  00480C 
    NOPT7   =  00480E     |     NOPTBL  =  00487F     |   6 NRAT       00059F R
  6 NRDROP     00057B R   |   6 NROT       0007FC R   |   6 NRSTO      0005BE R
  6 NTIB       00070D R   |     NUBC    =  004802     |     NUCLEO  =  000001 
  6 NUFQ       000F25 R   |   6 NUFQ1      000F3E R   |   6 NUMBQ      0025D3 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 196.
Hexadecimal [24-Bits]

Symbol Table

  6 NUMQ0      002614 R   |   6 NUMQ1      002636 R   |   6 NUMQ3      002660 R
  6 NUMQ4      00267E R   |   6 NUMQ8      002687 R   |     NWDGOPT =  004806 
    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   6 NonHandl   000000 R   |   6 OFFSET     0007B3 R
    OFS     =  000005     |   6 ONE        000C0E R   |   6 ONEM       000BA4 R
  6 ONEP       000B97 R   |     OPT     =  000002     |     OPT0    =  004800 
    OPT1    =  004801     |     OPT2    =  004803     |     OPT3    =  004805 
    OPT4    =  004807     |     OPT5    =  004809     |     OPT6    =  00480B 
    OPT7    =  00480D     |     OPTBL   =  00487E     |     OPTIMIZE=  000001 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  6 ORIG       000049 R   |   6 ORR        00068A R   |   6 OUTPUT     00043B R
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |   6 OVER       000641 R   |   6 OVERT      0017B5 R
    PA      =  000000     |   6 PACKS      000DAE R   |   6 PAD        000CEE R
  6 PAREN      001168 R   |   6 PARS       001061 R   |   6 PARS1      00108C R
  6 PARS2      0010B7 R   |   6 PARS3      0010BA R   |   6 PARS4      0010C3 R
  6 PARS5      0010E6 R   |   6 PARS6      0010FB R   |   6 PARS7      00110A R
  6 PARS8      001119 R   |   6 PARSE      00112A R   |   6 PARSEXP_   002F78 R
  6 PAUSE      0002E0 R   |     PA_BASE =  005000     |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_BASE =  005005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_BASE =  00500A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |   6 PDUM1      001A12 R   |   6 PDUM2      001A23 R
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |   6 PICK       000C5C R
  6 PII        002381 R   |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   6 PLUS       00083C R   |   6 PNAM1      00175A R
  6 PRESE      0014DC R   |   6 PRINT_VE   001B61 R   |     PROD1   =  000024 
    PROD2   =  000026     |     PROD3   =  000028     |   6 PROTECTE   000201 R
  6 PRT_LICE   001B4D R   |   6 PSTOR      000C73 R   |     PTR16   =  000035 
    PTR8    =  000036     |   6 PTRPLUS    001DE0 R   |   6 QBRAN      000498 R
  6 QDUP       0007CC R   |   6 QDUP1      0007D6 R   |   6 QKEY       000418 R
  6 QSTAC      001494 R   |   6 QUERY      0013C0 R   |   6 QUEST      001053 R
  6 QUIT       0014F9 R   |   6 QUIT1      001501 R   |   6 QUIT2      001504 R
  6 RAM2EE     00221B R   |     RAMBASE =  000000     |   6 RAMLAST    0007A1 R
    RAM_BASE=  000000     |     RAM_END =  0017FF     |     RAM_SIZE=  001800 
  6 RANDOM     00027E R   |   6 RAT        000545 R   |   6 RBRAC      001829 R
  6 REPEA      0016A4 R   |   6 RFREE      002202 R   |   6 RFROM      000534 R
    ROP     =  004800     |   6 ROT        0007DD R   |   6 ROW2BUF    0021C4 R
    ROWBUFF =  001680     |     RP0     =  00002E     |   6 RPAT       000511 R
    RPP     =  0017FF     |   6 RPSTO      00051E R   |   6 RSCALE     00307F R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 197.
Hexadecimal [24-Bits]

Symbol Table

  6 RSHIFT     000BD1 R   |   6 RSHIFT1    000BDA R   |   6 RSHIFT4    000BE2 R
    RST_SR  =  0050B3     |   6 RT12_2     0023F1 R   |   6 SAME1      001217 R
  6 SAME2      001240 R   |   6 SAMEQ      00120F R   |   6 SCAL1      003235 R
  6 SCAL2      003256 R   |   6 SCALDN2    003103 R   |   6 SCALDN3    003106 R
  6 SCALEDOW   0030D7 R   |   6 SCALETOM   00322F R   |   6 SCALEUP    0030A0 R
  6 SCALEUP2   0030D3 R   |   6 SCALEUP3   0030D6 R   |   6 SCOM1      00178F R
  6 SCOM2      001792 R   |   6 SCOMP      001771 R   |   6 SEED       000265 R
    SEEDX   =  000038     |     SEEDY   =  00003A     |   6 SEMIS      0017C5 R
  6 SETISP     0000D0 R   |   6 SET_RAML   001952 R   |   6 SFN        002D26 R
    SFR_BASE=  005000     |     SFR_END =  0057FF     |   6 SFV        002D5A R
  6 SFZ        002CEF R   |   6 SIGN       000E5A R   |   6 SIGN1      000E6A R
  6 SLASH      000ABD R   |   6 SLMOD      000A6B R   |   6 SLMOD1     000A9D R
  6 SLMOD8     000AAA R   |   6 SNAME      001724 R   |     SP0     =  00002C 
  6 SPACE      000F47 R   |   6 SPACS      000F56 R   |   6 SPAT       0005F9 R
    SPI_CR1 =  005200     |     SPI_CR2 =  005201     |     SPI_CRCP=  005205 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_TXCR=  005207     |     SPP     =  001680 
    SPSAVE  =  000001     |   6 SPSTO      000606 R   |   6 SQRT10     0023DA R
  6 SQRT2      002398 R   |   6 SQRT3      0023AF R   |   6 SSMOD      000B4D R
    SSP     =  000001     |     STACK   =  0017FF     |   6 STAR       000B16 R
  6 STASL      000B5E R   |   6 STEXP      002DA5 R   |   6 STEXP1     002DBB R
  6 STEXP2     002DE5 R   |   6 STOD       0008BB R   |   6 STORE      0004D1 R
  6 STO_SIGN   00257F R   |   6 STR        000E88 R   |   6 STRCQ      0015A1 R
  6 STRQ       0016E3 R   |   6 STRQP      000FB2 R   |   6 SUBB       0008D2 R
  6 SWAPP      000629 R   |     SWIM_CSR=  007F80     |   6 TAP        00132A R
  6 TBOOT      001BD0 R   |   6 TBRAN      0004A6 R   |   6 TBUF       00071D R
    TBUFFBAS=  001680     |   6 TCHAR      000C2D R   |   6 TEMP       0006EE R
  6 TEVAL      000740 R   |   6 TFLASH     00072F R   |   6 THENN      00163C R
  6 TIB        000CFF R   |     TIBB    =  001700     |     TIBBASE =  001700 
    TIC     =  000027     |   6 TICK       001510 R   |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 198.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  000000     |     TIM2_CCE=  000001     |     TIM2_CCE=  000004 
    TIM2_CCE=  000005     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCM=  000000 
    TIM2_CCM=  000004     |     TIM2_CCM=  000003     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_CR1=  000007 
    TIM2_CR1=  000000     |     TIM2_CR1=  000003     |     TIM2_CR1=  000001 
    TIM2_CR1=  000002     |     TIM2_EGR=  005304     |     TIM2_EGR=  000001 
    TIM2_EGR=  000002     |     TIM2_EGR=  000003     |     TIM2_EGR=  000006 
    TIM2_EGR=  000000     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
    TIM4_SR =  005342     |     TIM4_SR_=  000000     |   6 TIMEOUTQ   000310 R
  6 TIMER      0002FA R   |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 199.
Hexadecimal [24-Bits]

Symbol Table

  6 TNAM2      001AA8 R   |   6 TNAM3      001AC6 R   |   6 TNAM4      001ACC R
  6 TNAME      001AA5 R   |   6 TOFLASH    000335 R   |   6 TOKEN      0011EB R
  6 TOR        0005E2 R   |   6 TORAM      000375 R   |   6 TRUE       000857 R
    TRUEE   =  00FFFF     |   6 TWOSL      000BE9 R   |   6 TYPE1      000F76 R
  6 TYPE2      000F7C R   |   6 TYPES      000F71 R   |   6 Timer4Ha   000005 R
    UART1   =  000000     |     UART1_BA=  005230     |     UART1_BR=  005232 
    UART1_BR=  005233     |     UART1_CR=  005234     |     UART1_CR=  005235 
    UART1_CR=  005236     |     UART1_CR=  005237     |     UART1_CR=  005238 
    UART1_DR=  005231     |     UART1_GT=  005239     |     UART1_PO=  000000 
    UART1_PS=  00523A     |     UART1_RX=  000004     |     UART1_SR=  005230 
    UART1_TX=  000005     |     UART3   =  000001     |     UART3_BA=  005240 
    UART3_BR=  005242     |     UART3_BR=  005243     |     UART3_CR=  005244 
    UART3_CR=  005245     |     UART3_CR=  005246     |     UART3_CR=  005247 
    UART3_CR=  004249     |     UART3_DR=  005241     |     UART3_PO=  00000F 
    UART3_RX=  000006     |     UART3_SR=  005240     |     UART3_TX=  000005 
    UART_BRR=  005232     |     UART_BRR=  005233     |     UART_CR1=  005234 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  005235 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000006 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000007     |     UART_CR4=  000000 
    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000008     |     UART_CR5=  000003     |     UART_CR5=  000001 
    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_CR6=  000009     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DR =  005231     |     UART_GTR=  000009 
    UART_PSC=  00000A     |     UART_SR =  005230     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBASE   =  000006     |     UBC     =  004801 
    UCNTXT  =  000016     |     UCP     =  00001A     |     UCTIB   =  00000E 
    UD1     =  000001     |     UD2     =  000002     |     UD3     =  000003 
    UD4     =  000004     |   6 UDIV10     003257 R   |   6 UDOT       000FFF R
  6 UDOTR      000FDF R   |   6 UDSLA3     002B0A R   |   6 UDSLA4     002B30 R
  6 UDSLA7     002B61 R   |   6 UDSLA8     002B6C R   |   6 UDSLMOD    002AD5 R
  6 UDSSTAR    00276C R   |   6 UEND       000047 R   |     UFPSW   =  000008 
  6 UGREAT     00093D R   |   6 UGREAT1    000948 R   |     UHLD    =  000014 
    UINN    =  00000C     |     UINTER  =  000012     |     ULAST   =  00001C 
  6 ULES1      00091B R   |   6 ULESS      000910 R   |   6 UMMOD      0009B1 R
  6 UMOD10     003219 R   |   6 UMSTA      000ACC R   |   6 UNIQ1      001721 R
  6 UNIQU      001702 R   |   6 UNLKEE     001D4E R   |   6 UNLKFL     001D6D R
  6 UNLOCK     001D8C R   |   6 UNTIL      001604 R   |     UOFFSET =  00001E 
  6 UPDATCP    001D0B R   |   6 UPDATLAS   001CE2 R   |   6 UPDATPTR   00230E R
  6 UPDATRUN   001CFA R   |   6 UPDATVP    001D22 R   |   6 UPL1       0006CB R
  6 UPLUS      0006B4 R   |     UPP     =  000006     |   6 UPPER      0011AE R
  6 UPPER1     0011D1 R   |   6 UPPER2     0011DA R   |     URLAST  =  000022 
  6 USLMOD     000A00 R   |     USR_BTN_=  000004     |     USR_BTN_=  000010 
    USR_BTN_=  005015     |     UTFLASH =  000020     |     UTIB    =  000010 
    UTMP    =  00000A     |   6 UTYP1      0019E2 R   |   6 UTYP2      0019F1 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 200.
Hexadecimal [24-Bits]

Symbol Table

  6 UTYPE      0019DD R   |     UVP     =  000018     |   6 UZERO      00002B R
  6 VARIA      00191F R   |     VAR_BASE=  000080     |     VAR_TOP =  0017BF 
    VER     =  000004     |   6 VPP        000770 R   |     VSIZE   =  000006 
    WANT_CON=  000001     |     WANT_DEB=  000000     |     WANT_DOU=  000001 
    WANT_FLO=  000001     |     WANT_SCA=  000001     |     WANT_SEE=  000000 
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |   6 WHILE      00168A R
  6 WITHI      000996 R   |   6 WORDD      001194 R   |   6 WORDS      001B02 R
  6 WORS1      001B08 R   |   6 WORS2      001B24 R   |   6 WR_BYTE    001E37 R
  6 WR_WORD    001E5C R   |   6 WTABLE     002466 R   |   6 WTAT       00248A R
  6 WTINIT     0024CF R   |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
    XMEM_SIZ=  017830     |     XOFF    =  000013     |     XON     =  000011 
  6 XORR       00069F R   |     XTEMP   =  000024     |     YTEMP   =  000026 
    YTMP    =  000003     |   6 ZEQ1       002899 R   |   6 ZEQU1      00066C R
  6 ZEQUAL     000662 R   |   6 ZERO       000C03 R   |   6 ZL1        000659 R
  6 ZLESS      000650 R   |   6 app_spac   003600 R   |   6 baudrate   00037B R
  6 block_er   001F22 R   |   6 clear_ra   000019 R   |   6 clock_in   000064 R
  6 copy_buf   001F82 R   |   6 copy_buf   001FA1 R   |   6 copy_pro   001FA1 R
    da      =  000002     |     db      =  000003     |     dc      =  000000 
    dd      =  000001     |   6 do2lit     0029AE R   |   6 erase_fl   001F44 R
  6 fmove_do   0022F7 R   |   6 main       000016 R   |   6 next_row   0022B4 R
  6 no_move    0022FE R   |   6 nsign      002556 R   |   6 parse_di   002583 R
  6 parse_ex   002F2D R   |   6 pristine   002022 R   |   6 proceed_   001F47 R
  6 reboot     000327 R   |   6 reset_ve   002089 R   |   6 row_eras   001F02 R
  6 row_eras   001F5B R   |   6 row_eras   001F82 R   |   6 set_opti   001FF6 R
  6 set_vect   00212A R   |   6 uart_ini   000076 R   |   6 write_ro   001FC6 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 201.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   3600   flags    0

