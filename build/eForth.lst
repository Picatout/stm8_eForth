ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                                .include "inc/config.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019,2020 
                                        ; This file is part of stm8_eForth  
                                        ;
                                        ;     stm8_eForth is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     stm8_eForth is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        
                                        ; constants to select board
                                        ; to assemble for a specific 
                                        ; board or MCU set it to 1 and the other
                                        ; to 0. 
                                 
                                 
                                 
                                        
                                        ; select end of line character
                                 
                                 
                                        
                                        ; set to 1 to include 
                                        ; scaling constants vocabulary
                                        ; see: const_ratio.asm 
                                 
                                        
                                        ; set to 1 to include 
                                        ; constants tables vocabulary 
                                        ; see: ctable.asm 
                                 
                                        
                                        ; how many bytes are reserved 
                                        ; by system at EEPROM base.
                                 
                                        
                                        
                                 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        .endif
                                        
                                 
                                        	.include "inc/stm8s105.inc"
                                        .if DISCOVERY
                                        	.include "inc/stm8s_disco.inc"
                                        .endif 
                                        XMEM_SIZE=0 ; size in bytes of EXTENDED MEMORY 
                                        UART_SR=UART2_SR
                                        UART_DR=UART2_DR
                                        UART_BRR1=UART2_BRR1
                                        UART_BRR2=UART2_BRR2
                                        UART_CR1=UART2_CR1
                                        UART_CR2=UART2_CR2
                                        .endif 
                                        
                                        	
                                         
                                        
                                        
                                        
                                     12 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     14 
                                     15 ;===============================================================
                                     16 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     17 ;  Date: 2020-06-07 
                                     18 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     19 ;  Date: 2019-10-26
                                     20 ;  Changes to memory map:
                                     21 ;       0x16f0  Data Stack, growing downward
                                     22 ;       0x1700  Terminal input buffer TIB
                                     23 ;       0x17ff  Return Stack, growing downard
                                     24 ;================================================================
                                     25 ;       STM8EF, Version 2.1, 13 July
                                     26 ;               Implemented on STM8S-Discovery Board.
                                     27 ;               Assembled by ST VisualDevelop STVD 
                                     28 ;               Bootup on internal 2 MHz clock
                                     29 ;               Switch to external 16 MHz crystal clock
                                     30 ;
                                     31 ; FORTH Virtual Machine:
                                     32 ; Subroutine threaded model
                                     33 ; SP Return stack pointer
                                     34 ; X Data stack pointer
                                     35 ; A,Y Scratch pad registers
                                     36 ;
                                     37 ; Memory Map:
                                     38 ; 0x0 RAM memory, system variables
                                     39 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     40 ; 0x780 Data stack, growing downward
                                     41 ; 0x790 Terminal input buffer TIB
                                     42 ; 0x7FF Return stack, growing downward
                                     43 ; 0x8000 Interrupt vector table
                                     44 ; 0x8080 FORTH startup code
                                     45 ; 0x80E7 Start of FORTH dictionary in ROM
                                     46 ; 0x9584 End of FORTH dictionary
                                     47 ;
                                     48 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     49 ;                  use UART1 instead of UART2 for communication with user.
                                     50 ;                  UART1 is available as ttyACM* device via USB connection.
                                     51 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     52 ;                  and MSEC word that return MS value.
                                     53 ;
                                     54 ;       EF12, Version 2.1, 18apr00cht
                                     55 ;               move to 8000H replacing WHYP.
                                     56 ;               copy interrupt vectors from WHYPFLSH.S19
                                     57 ;               to EF12.S19 before flashing
                                     58 ;               add TICKS1 and DELAY1 for motor stepping
                                     59 ;
                                     60 ;       EF12, 02/18/00, C. H. Ting
                                     61 ;       Adapt 86eForth v2.02 to 68HC12.
                                     62 ;               Use WHYP to seed EF12.ASM
                                     63 ;               Use AS12 native 68HC12 assembler:
                                     64 ;               as12 ef12.asm >ef12.lst
                                     65 ;       EF12A, add ADC code, 02mar00cht
                                     66 ;       EF12B, 01mar00cht
                                     67 ;               stack to 0x78, return stack to 0xf8.
                                     68 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     69 ;               add PWM registers
                                     70 ;               add SPI registers and code
                                     71 ;       EF12C, 12mar00cht
                                     72 ;               add MAX5250 D/A converter
                                     73 ;       EF12D, 15mar00cht
                                     74 ;               add all the Lexel interface words
                                     75 ;       EF12E, 18apr00cht, save for reference
                                     76 ;
                                     77 ;       Copyright (c) 2000
                                     78 ;       Dr. C. H. Ting
                                     79 ;       156 14th Avenue
                                     80 ;       San Mateo, CA 94402
                                     81 ;       (650) 571-7639
                                     82 ;
                                     83 
                                     84       
                                     85 ;*********************************************************
                                     86 ;	Assembler constants
                                     87 ;*********************************************************
                           000000    88 RAMBASE =	0x0000	   ;ram base
                           000001    89 .if NUCLEO 
                           0017FF    90 STACK   =	0x17FF 	;system (return) stack empty 
                           001680    91 DATSTK  =	0x1680	;data stack  empty
                           001680    92 TBUFFBASE =     0x1680  ; flash read/write transaction buffer address  
                           001700    93 TIBBASE =       0X1700  ; transaction input buffer addr.
                           000000    94 .else ; DISCOVERY
                                     95 STACK   =	0x7FF 	;system (return) stack empty 
                                     96 DATSTK  =	0x680	;data stack  empty
                                     97 TBUFFBASE =     0x680  ; flash read/write transaction buffer address  
                                     98 TIBBASE =       0X700  ; transaction input buffer addr.
                                     99 .endif
                                    100 
                                    101 ;; Memory allocation
                           000006   102 UPP     =     RAMBASE+6          ; systeme variables base address 
                           001680   103 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0017FF   104 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           001680   105 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           001700   106 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   107 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0017BF   108 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    109 
                                    110 ; user variables constants 
                           000006   111 UBASE = UPP       ; numeric base 
                           000008   112 UTMP = UBASE+2    ; temporary storage
                           00000A   113 UINN = UTMP+2     ; >IN tib pointer 
                           00000C   114 UCTIB = UINN+2    ; tib count 
                           00000E   115 UTIB = UCTIB+2    ; tib address 
                           000010   116 UINTER = UTIB+2   ; interpreter vector 
                           000012   117 UHLD = UINTER+2   ; hold 
                           000014   118 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000016   119 UVP = UCNTXT+2    ; variable pointer 
                           000018   120 UCP = UVP+2      ; code pointer
                           00001A   121 ULAST = UCP+2    ; last dictionary pointer 
                           00001C   122 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
                           00001E   123 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000020   124 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    125 
                                    126 ;******  System Variables  ******
                           000022   127 XTEMP	=	URLAST +2;address called by CREATE
                           000024   128 YTEMP	=	XTEMP+2	;address called by CREATE
                           000022   129 PROD1 = XTEMP	;space for UM*
                           000024   130 PROD2 = PROD1+2
                           000026   131 PROD3 = PROD2+2
                           000028   132 CARRY = PROD3+2
                           00002A   133 SP0	= CARRY+2	;initial data stack pointer
                           00002C   134 RP0	= SP0+2		;initial return stack pointer
                           00002E   135 MS    =   RP0+2         ; millisecond counter 
                           000030   136 CNTDWN =  MS+2          ; count down timer 
                           000032   137 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000033   138 PTR16 = FPTR+1          ; middle byte of farptr 
                           000034   139 PTR8 = FPTR+2           ; least byte of farptr 
                           000036   140 SEEDX = PTR8+2          ; PRNG seed X 
                           000038   141 SEEDY = SEEDX+2         ; PRNG seed Y 
                                    142 
                                    143 ; EEPROM persistant data  
                           004000   144 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   145 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   146 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   147 APP_VP = APP_CP+2  ; free data space pointer 
                                    148 
                                    149 
                                    150 ;***********************************************
                                    151 ;; Version control
                                    152 
                           000003   153 VER     =     3         ;major release version
                           000000   154 EXT     =     0         ;minor extension
                                    155 
                                    156 ;; Constants
                                    157 
                           00FFFF   158 TRUEE   =     0xFFFF      ;true flag
                                    159 
                           000040   160 COMPO   =     0x40     ;lexicon compile only bit
                           000080   161 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   162 MASKK   =     0x1F7F  ;lexicon bit mask
                                    163 
                           000002   164 CELLL   =     2       ;size of a cell
                           00000A   165 BASEE   =     10      ;default radix
                           000008   166 BKSPP   =     8       ;back space
                           00000A   167 LF      =     10      ;line feed
                           00000D   168 CRR     =     13      ;carriage return
                           000011   169 XON     =     17
                           000013   170 XOFF    =     19
                           00001B   171 ERR     =     27      ;error escape
                           000027   172 TIC     =     39      ;tick
                           0000CD   173 CALLL   =     0xCD     ;CALL opcodes
                           000080   174 IRET_CODE =   0x80    ; IRET opcode 
                                    175 
                                    176         .macro _ledon
                                    177         .if NUCLEO
                                    178         bset PC_ODR,#LED2_BIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    179         .else ;DISCOVERY 
                                    180         .if DISCOVERY
                                    181         bres PD_ODR,#LD1_BIT 
                                    182         .endif
                                    183         .endif
                                    184         .endm
                                    185 
                                    186         .macro _ledoff
                                    187         .if NUCLEO 
                                    188         bres PC_ODR,#LED2_BIT
                                    189         .else ;DISCOVERY 
                                    190         .if DISCOVERY
                                    191         bset PD_ODR,#LD1_BIT 
                                    192         .endif 
                                    193         .endif
                                    194         .endm
                                    195 
                                    196 ;**********************************************************
                                    197         .area DATA (ABS)
      000000                        198         .org RAMBASE 
                                    199 ;**********************************************************
                                    200 
                                    201 ;**********************************************************
                                    202         .area SSEG (ABS) ; STACK
      001700                        203         .org 0x1700
      001700                        204         .ds 256 
                                    205 ; space for DATSTK,TIB and STACK         
                                    206 ;**********************************************************
                                    207 
                                    208 ;**********************************************************
                                    209         .area HOME ; vectors table
                                    210 ;**********************************************************
      000000 82 00 00 16            211 	int main	        ; reset
      000004 82 00 00 00            212 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            213 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            214 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            215 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            216 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            217 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            218 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            219 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            220 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            221 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            222 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            223 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            224 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            225 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            226 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            227 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            228 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            229 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            230 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            231 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            232 	int NonHandledInterrupt	; irq19
      000058 82 00 00 00            233 	int NonHandledInterrupt	; irq20
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      00005C 82 00 00 00            234 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            235 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            236 	int Timer4Handler	; irq23
      000068 82 00 00 00            237 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            238 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            239 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            240 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            241 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            242 	int NonHandledInterrupt	; irq29
                                    243 
                                    244 ;**********************************************************
                                    245         .area CODE
                                    246 ;**********************************************************
                                    247 
                                    248 ; non handled interrupt reset MCU
      000000                        249 NonHandledInterrupt:
      000000 A6 80            [ 1]  250         ld a, #0x80
      000002 C7 50 D1         [ 1]  251         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    252 	;iret
                                    253 
                                    254 ; used for milliseconds counter 
                                    255 ; MS is 16 bits counter 
      000005                        256 Timer4Handler:
      000005 72 5F 53 42      [ 1]  257 	clr TIM4_SR 
      000009 BE 2E            [ 2]  258         ldw x,MS 
      00000B 5C               [ 1]  259         incw x 
      00000C BF 2E            [ 2]  260         ldw MS,x
      00000E BE 30            [ 2]  261         ldw x,CNTDWN 
      000010 27 03            [ 1]  262         jreq 1$
      000012 5A               [ 2]  263         decw x 
      000013 BF 30            [ 2]  264         ldw CNTDWN,x 
      000015                        265 1$:         
      000015 80               [11]  266         iret 
                                    267 
                                    268 
                                    269 ;; Main entry points and COLD start data
      000016                        270 main:
                                    271 ; clear all RAM
      000016 AE 00 00         [ 2]  272 	ldw X,#RAMBASE
      000019                        273 clear_ram0:
      000019 7F               [ 1]  274 	clr (X)
      00001A 5C               [ 1]  275 	incw X
      00001B A3 17 FF         [ 2]  276 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  277 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  278         ldw x,#RPP
      000023 94               [ 1]  279         ldw sp,x
                                    280 ; set SEEDX and SEEDY to 1 
      000024 3C 37            [ 1]  281         inc SEEDX+1 
      000026 3C 39            [ 1]  282         inc SEEDY+1          
      000028 CC 00 47         [ 2]  283 	jp ORIG
                                    284 
                                    285 ; COLD initialize these variables.
      00002B                        286 UZERO:
      00002B 00 0A                  287         .word      BASEE   ;BASE
      00002D 00 00                  288         .word      0       ;tmp
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      00002F 00 00                  289         .word      0       ;>IN
      000031 00 00                  290         .word      0       ;#TIB
      000033 17 00                  291         .word      TIBB    ;TIB
      000035 13 99                  292         .word      INTER   ;'EVAL
      000037 00 00                  293         .word      0       ;HLD
      000039 23 B5                  294         .word      LASTN  ;CNTXT pointer
      00003B 00 80                  295         .word      VAR_BASE   ;variables free space pointer 
      00003D 24 00                  296         .word      app_space ; FLASH free space pointer 
      00003F 23 B5                  297         .word      LASTN   ;LAST
      000041 00 00                  298         .word      0        ; OFFSET 
      000043 00 00                  299         .word      0       ; TFLASH
                                    300 ;       .word      0       ; URLAST   
      000045 00 00                  301 UEND:   .word      0
                                    302 
      000047                        303 ORIG:   
                                    304 ; initialize SP
      000047 AE 17 FF         [ 2]  305         LDW     X,#STACK  ;initialize return stack
      00004A 94               [ 1]  306         LDW     SP,X
      00004B BF 2C            [ 2]  307         LDW     RP0,X
      00004D AE 16 80         [ 2]  308         LDW     X,#DATSTK ;initialize data stack
      000050 BF 2A            [ 2]  309         LDW     SP0,X
                           000001   310 .if NUCLEO        
                                    311 ; initialize PC_5 as output to control LED2
                                    312 ; added by Picatout 
      000052 72 1A 50 0D      [ 1]  313         bset PC_CR1,#LED2_BIT
      000056 72 1A 50 0E      [ 1]  314         bset PC_CR2,#LED2_BIT
      00005A 72 1A 50 0C      [ 1]  315         bset PC_DDR,#LED2_BIT
                                    316 .endif 
                           000000   317 .if DISCOVERY
                                    318         bset PD_CR1,#LD1_BIT
                                    319         bset PD_CR2,#LD1_BIT
                                    320         bset PD_DDR,#LD1_BIT 
                                    321 .endif
      00005E                        322         _ledoff
                           000001     1         .if NUCLEO 
      00005E 72 1B 50 0A      [ 1]    2         bres PC_ODR,#LED2_BIT
                           000000     3         .else ;DISCOVERY 
                                      4         .if DISCOVERY
                                      5         bset PD_ODR,#LD1_BIT 
                                      6         .endif 
                                      7         .endif
                                    323 ; initialize clock to HSI
                                    324 ; no divisor 16Mhz 
                                    325 ; Added by Picatout 
      000062                        326 clock_init:
      000062 72 5F 50 C6      [ 1]  327         clr CLK_CKDIVR
      000066 72 12 50 C5      [ 1]  328 	bset CLK_SWCR,#CLK_SWCR_SWEN
                           000001   329 .if NUCLEO|DOORBELL
      00006A A6 E1            [ 1]  330 	ld a,#CLK_SWR_HSI
                           000000   331 .else ; DISCOVERY as 16Mhz crystal
                                    332 	ld a,#CLK_SWR_HSE
                                    333 .endif 
      00006C C7 50 C4         [ 1]  334 	ld CLK_SWR,a
      00006F C1 50 C3         [ 1]  335 1$:	cp a,CLK_CMSR
      000072 26 FB            [ 1]  336 	jrne 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                                    337         
                                    338 ; initialize UART, 115200 8N1
      000074                        339 uart_init:
                           000001   340 .if NUCLEO 
      000074 72 14 50 C7      [ 1]  341 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    342 	; configure tx pin
      000078 72 1A 50 02      [ 1]  343 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      00007C 72 1A 50 03      [ 1]  344 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      000080 72 1A 50 04      [ 1]  345 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    346 	; baud rate 115200 Fmaster=16Mhz  16000000/115200=139=0x8b
                           000000   347 .else ; DISCOVERY use UART2 
                                    348 	bset CLK_PCKENR1,#CLK_PCKENR1_UART2
                                    349 	; configure tx pin
                                    350 	bset PD_DDR,#UART2_TX_PIN ; tx pin
                                    351 	bset PD_CR1,#UART2_TX_PIN ; push-pull output
                                    352 	bset PD_CR2,#UART2_TX_PIN ; fast output
                                    353 .endif
                                    354 ; baud rate 115200 Fmaster=8Mhz  
      000084 35 0B 52 33      [ 1]  355 	mov UART_BRR2,#0x0b ; must be loaded first
      000088 35 08 52 32      [ 1]  356 	mov UART_BRR1,#0x8
      00008C 35 0C 52 35      [ 1]  357 	mov UART_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    358 ; initialize timer4, used for millisecond interrupt  
      000090 35 07 53 45      [ 1]  359 	mov TIM4_PSCR,#7 ; prescale 128  
      000094 35 7D 53 46      [ 1]  360 	mov TIM4_ARR,#125 ; set for 1msec.
      000098 35 05 53 40      [ 1]  361 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      00009C 72 10 53 41      [ 1]  362 	bset TIM4_IER,#TIM4_IER_UIE 
                                    363 ; set TIM4 interrupt priority to highest
      0000A0 A6 3F            [ 1]  364         ld a,#~(IPR_MASK<<6)
      0000A2 C4 7F 75         [ 1]  365         and a,ITC_SPR6
      0000A5 AA C0            [ 1]  366         or a,#(IPR3<<6)
      0000A7 C7 7F 75         [ 1]  367         ld ITC_SPR6,a 
      0000AA 9A               [ 1]  368         rim
      0000AB CC 1A 9D         [ 2]  369         jp  COLD   ;default=MN1
                                    370 
                                    371 
                                    372 ;; place MCU in sleep mode with
                                    373 ;; halt opcode 
                                    374 ;; BYE ( -- )
      0000AE 00 00                  375         .word 0
                           0000B0   376         LINK=.
      0000B0 03                     377         .byte 3 
      0000B1 42 59 45               378         .ascii "BYE"
      0000B4                        379 BYE: 
      0000B4 8E               [10]  380         halt 
      0000B5 81               [ 4]  381         ret 
                                    382 
                                    383 ; Enable interrupts 
                                    384 ; EI ( -- )
      0000B6 00 B0                  385         .word LINK 
                           0000B8   386         LINK=.
      0000B8 02                     387         .byte 2
      0000B9 45 49                  388         .ascii "EI"
      0000BB                        389 EI:
      0000BB 9A               [ 1]  390         rim 
      0000BC 81               [ 4]  391         ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    392 
                                    393 ; Disable interrupts
                                    394 ; DI ( -- )
      0000BD 00 B8                  395         .word LINK 
                           0000BF   396         LINK=.
      0000BF 02                     397         .byte 2 
      0000C0 44 49                  398         .ascii "DI"
      0000C2                        399 DI:
      0000C2 9B               [ 1]  400         sim 
      0000C3 81               [ 4]  401         ret 
                                    402 
                                    403 ; set interrupt priority level 
                                    404 ; SET-ISP ( n1 n2 -- )
                                    405 ; n1 level {1..3}
                                    406 ; n2 vector {0..29}
      0000C4 00 BF                  407         .word LINK 
                           0000C6   408         LINK=.
      0000C6 07                     409         .byte 7 
      0000C7 53 45 54 2D 49 53 50   410         .ascii "SET-ISP"
      0000CE                        411 SETISP:
      0000CE 90 93            [ 1]  412         ldw y,x 
      0000D0 90 FE            [ 2]  413         ldw y,(y)
      0000D2 A6 04            [ 1]  414         ld a,#4 ; 4 slot per register 
                                    415 ;  quotient select register, remainder select slot in register.        
      0000D4 90 62            [ 2]  416         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000D6 A4 03            [ 1]  417         and a,#3 
      0000D8 48               [ 1]  418         sll a ; 2*SLOT  lshift 
      0000D9 72 A9 7F 70      [ 2]  419         addw y,#ITC_SPR1 
      0000DD FF               [ 2]  420         ldw (x),y  ; ( level reg -- )
      0000DE 90 5F            [ 1]  421         clrw y 
      0000E0 90 97            [ 1]  422         ld yl,a 
      0000E2 1D 00 02         [ 2]  423         subw x,#CELLL 
      0000E5 FF               [ 2]  424         ldw (x),y  ; ( level reg lshift -- )
      0000E6 90 93            [ 1]  425         ldw y,x 
      0000E8 90 EE 02         [ 2]  426         ldw y,(2,y) 
      0000EB 90 F6            [ 1]  427         ld a,(y)   ; reg_value
      0000ED 1D 00 02         [ 2]  428         subw x,#CELLL 
      0000F0 FF               [ 2]  429         ldw (x),y ; ( level reg lshift rval -- )
      0000F1 CD 05 C4         [ 4]  430         call OVER ; ( level reg lshift rval lshift -- )
      0000F4 CD 04 75         [ 4]  431         call DOLIT 
      0000F7 00 03                  432         .word 3
      0000F9 CD 05 AA         [ 4]  433         call SWAPP  ; ( level reg lshift rval 3 lshift )
      0000FC CD 0A 98         [ 4]  434         call LSHIFT ; creat slot mask 
      0000FF CD 07 AF         [ 4]  435         call INVER  ; ( level reg lshift rval mask )
      000102 CD 05 E6         [ 4]  436         call ANDD ; ( level reg lshift slot_masked )
      000105 CD 05 63         [ 4]  437         call TOR  ; ( level reg lshift -- R: slot_masked )
      000108 CD 07 55         [ 4]  438         call ROT  ; ( reg lshift level )
      00010B CD 05 AA         [ 4]  439         call SWAPP ; ( reg level lshift )
      00010E CD 0A 98         [ 4]  440         call LSHIFT  ; ( reg slot_level -- )
      000111 CD 05 44         [ 4]  441         call RFROM ; ( reg slot_level masked_val )
      000114 CD 05 FA         [ 4]  442         call ORR   ; ( reg updated_rval )
      000117 CD 05 AA         [ 4]  443         call SWAPP 
      00011A CD 05 00         [ 4]  444         call CSTOR
                                    445 
                                    446 ; sélectionne l'application 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                                    447 ; qui démarre automatique lors 
                                    448 ; d'un COLD start 
      00011D 00 C6                  449         .word LINK 
                           00011F   450         LINK=.
      00011F 07                     451         .byte 7
      000120 41 55 54 4F 52 55 4E   452         .ascii "AUTORUN"
      000127                        453 AUTORUN:
      000127 CD 11 5E         [ 4]  454         call TOKEN 
      00012A CD 05 9A         [ 4]  455         call DUPP 
      00012D CD 04 A8         [ 4]  456         call QBRAN 
      000130 02 0D                  457         .word FORGET2
      000132 CD 12 5B         [ 4]  458         call NAMEQ
      000135 CD 07 44         [ 4]  459         call QDUP 
      000138 CD 04 A8         [ 4]  460         call QBRAN 
      00013B 02 0D                  461         .word FORGET2
      00013D CD 05 90         [ 4]  462         call DROP 
      000140 1D 00 04         [ 2]  463         subw x,#2*CELLL 
      000143 90 5F            [ 1]  464         clrw y 
      000145 FF               [ 2]  465         ldw (x),y 
      000146 90 AE 40 02      [ 2]  466         ldw y,#APP_RUN 
      00014A EF 02            [ 2]  467         ldw (2,x),y 
      00014C CC 1D 96         [ 2]  468         jp EESTORE 
                                    469 
                                    470 ;; Reset dictionary pointer before 
                                    471 ;; forgotten word. RAM space and 
                                    472 ;; interrupt vector defined after 
                                    473 ;; must be resetted also.
      00014F 01 1F                  474         .word LINK 
                           000151   475         LINK=.
      000151 06                     476         .byte 6
      000152 46 4F 52 47 45 54      477         .ascii "FORGET" 
      000158                        478 FORGET: 
      000158 CD 11 5E         [ 4]  479         call TOKEN
      00015B CD 05 9A         [ 4]  480         call DUPP 
      00015E CD 04 A8         [ 4]  481         call QBRAN 
      000161 02 0D                  482         .word FORGET2
      000163 CD 12 5B         [ 4]  483         call NAMEQ ; ( a -- ca na | a F )
      000166 CD 07 44         [ 4]  484         call QDUP 
      000169 CD 04 A8         [ 4]  485         call QBRAN 
      00016C 02 0D                  486         .word FORGET2
                                    487 ; only forget users words 
      00016E CD 05 9A         [ 4]  488         call DUPP ; ( ca na na )
      000171 CD 04 75         [ 4]  489         call DOLIT 
      000174 24 00                  490         .word app_space 
      000176 CD 05 AA         [ 4]  491         call SWAPP 
      000179 CD 08 55         [ 4]  492         call  ULESS 
      00017C CD 04 A8         [ 4]  493         call QBRAN 
      00017F 01 CF                  494         .word FORGET6 
                                    495 ; ( ca na -- )        
                                    496 ;reset ivec with address >= ca
      000181 CD 05 AA         [ 4]  497         call SWAPP ; ( na ca -- ) 
      000184 CD 1F 99         [ 4]  498         call CHKIVEC ; ( na -- ) 
                                    499 ; start at LAST and link back to na 
                                    500 ; if variable found reset VP at that point.
      000187                        501 FORGET1:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      000187 CD 07 06         [ 4]  502         call LAST 
      00018A CD 04 F3         [ 4]  503         call AT 
      00018D CD 05 9A         [ 4]  504         call DUPP  ; ( -- na last last )
      000190 CD 02 23         [ 4]  505         call FREEVAR ; ( -- na last )
      000193 CD 05 9A         [ 4]  506         call DUPP 
      000196 CD 04 75         [ 4]  507         call DOLIT 
      000199 00 02                  508         .word 2 
      00019B CD 08 0E         [ 4]  509         call SUBB ; ( na last -- na last lfa ) link address 
      00019E CD 04 F3         [ 4]  510         call AT 
      0001A1 CD 05 9A         [ 4]  511         call DUPP ; ( -- na last a a )
      0001A4 CD 06 DA         [ 4]  512         call CNTXT 
      0001A7 CD 04 DC         [ 4]  513         call STORE
      0001AA CD 07 06         [ 4]  514         call LAST  
      0001AD CD 04 DC         [ 4]  515         call STORE ; ( --  na last )
      0001B0 CD 05 C4         [ 4]  516         call OVER 
      0001B3 CD 08 36         [ 4]  517         call EQUAL ; ( na last na -- na T|F ) 
      0001B6 CD 04 A8         [ 4]  518         call QBRAN 
      0001B9 01 87                  519         .word FORGET1 
                                    520 ; ( na -- )
      0001BB CD 04 75         [ 4]  521         call DOLIT 
      0001BE 00 02                  522         .word 2 
      0001C0 CD 08 0E         [ 4]  523         call SUBB 
      0001C3 CD 06 F6         [ 4]  524         call CPP 
      0001C6 CD 04 DC         [ 4]  525         call STORE  
      0001C9 CD 1B C9         [ 4]  526         call UPDATCP 
      0001CC CC 1B A0         [ 2]  527         jp UPDATLAST 
      0001CF                        528 FORGET6: ; tried to forget a RAM or system word 
                                    529 ; ( ca na -- )
      0001CF 1D 00 02         [ 2]  530         subw x,#CELLL 
      0001D2 90 BE 2A         [ 2]  531         ldw y,SP0 
      0001D5 FF               [ 2]  532         ldw (x),y  
      0001D6 CD 08 55         [ 4]  533         call ULESS
      0001D9 CD 04 A8         [ 4]  534         call QBRAN 
      0001DC 01 FF                  535         .word PROTECTED 
      0001DE CD 13 67         [ 4]  536         call ABORQ 
      0001E1 1D                     537         .byte 29
      0001E2 20 46 6F 72 20 52 41   538         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      0001FF                        539 PROTECTED:
      0001FF CD 13 67         [ 4]  540         call ABORQ
      000202 0A                     541         .byte 10
      000203 20 50 72 6F 74 65 63   542         .ascii " Protected"
             74 65 64
      00020D                        543 FORGET2: ; no name or not found in dictionary 
      00020D CD 13 67         [ 4]  544         call ABORQ
      000210 05                     545         .byte 5
      000211 20 77 68 61 74         546         .ascii " what"
      000216                        547 FORGET4:
      000216 CC 05 90         [ 2]  548         jp DROP 
                                    549 
                                    550 
                                    551 ;---------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                                    552 ; if na is variable 
                                    553 ; free variable data  
                                    554 ; FREEVAR ( na -- )
                                    555 ;---------------------------------
      000219 01 51                  556         .word LINK 
                           00021B   557         LINK=.
      00021B 07                     558         .byte 7 
      00021C 46 52 45 45 56 41 52   559         .ascii "FREEVAR"
      000223                        560 FREEVAR:
      000223 CD 05 9A         [ 4]  561         call DUPP ; ( na na -- )
      000226 CD 05 11         [ 4]  562         CALL CAT  ; ( na c -- )
      000229 CD 0A 7A         [ 4]  563         call ONEP ;
      00022C CD 07 95         [ 4]  564         CALL PLUS ; ( na c+1 -- ca ) 
      00022F CD 0A 7A         [ 4]  565         call ONEP ; ( ca+ -- ) to get routne address 
      000232 CD 05 9A         [ 4]  566         call DUPP ; ( ca+ ca+ -- )
      000235 CD 04 F3         [ 4]  567         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      000238 CD 04 75         [ 4]  568         call DOLIT 
      00023B 06 47                  569         .word DOVAR ; if routine address is DOVAR then variable 
      00023D CD 08 36         [ 4]  570         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      000240 CD 04 A8         [ 4]  571         call QBRAN 
      000243 02 59                  572         .word FREEVAR4 
      000245 CD 04 75         [ 4]  573         call DOLIT 
      000248 00 02                  574         .word 2 
      00024A CD 07 95         [ 4]  575         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      00024D CD 04 F3         [ 4]  576         call AT 
      000250 CD 06 E8         [ 4]  577         call VPP   
      000253 CD 04 DC         [ 4]  578         call STORE 
      000256 CC 1B E0         [ 2]  579         jp UPDATVP 
      000259                        580 FREEVAR4: ; not variable
      000259 CC 05 90         [ 2]  581         jp  DROP 
                                    582 
                                    583 ;    SEED ( n -- )
                                    584 ; Initialize PRNG seed with n 
      00025C 02 1B                  585         .word LINK 
                           00025E   586         LINK=. 
      00025E 04                     587         .byte 4 
      00025F 53 45 45 44            588         .ascii "SEED" 
      000263                        589 SEED:
      000263 90 93            [ 1]  590         ldw y,x 
      000265 1C 00 02         [ 2]  591         addw x,#CELLL
      000268 90 FE            [ 2]  592         ldw y,(y)
      00026A 90 9E            [ 1]  593         ld a,yh 
      00026C B7 36            [ 1]  594         ld SEEDX,a 
      00026E 90 9F            [ 1]  595         ld a,yl 
      000270 B7 38            [ 1]  596         ld SEEDY,a 
      000272 81               [ 4]  597         ret 
                                    598 
                                    599 ;    RANDOM ( u1 -- u2 )
                                    600 ; Pseudo random number betwen 0 and u1-1
      000273 02 5E                  601         .word LINK 
                           000275   602         LINK=.
      000275 06                     603         .byte 6
      000276 52 41 4E 44 4F 4D      604         .ascii "RANDOM" 
      00027C                        605 RANDOM:
                                    606 ;local variable 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                           000001   607         SPSAVE=1
                           000002   608         VSIZE=2 
      00027C 52 02            [ 2]  609         sub sp,#VSIZE
      00027E 1F 01            [ 2]  610         ldw (SPSAVE,sp),x  
                                    611 ; XTEMP=(SEEDX<<5)^SEEDX 
      000280 90 93            [ 1]  612         ldw y,x 
      000282 90 FE            [ 2]  613         ldw y,(y)
      000284 90 BF 24         [ 2]  614         ldw YTEMP,y 
      000287 BE 36            [ 2]  615 	ldw x,SEEDX 
      000289 58               [ 2]  616 	sllw x 
      00028A 58               [ 2]  617 	sllw x 
      00028B 58               [ 2]  618 	sllw x 
      00028C 58               [ 2]  619 	sllw x 
      00028D 58               [ 2]  620 	sllw x 
      00028E 9E               [ 1]  621 	ld a,xh 
      00028F B8 36            [ 1]  622 	xor a,SEEDX 
      000291 B7 22            [ 1]  623 	ld XTEMP,a 
      000293 9F               [ 1]  624 	ld a,xl 
      000294 B8 37            [ 1]  625 	xor a,SEEDX+1 
      000296 B7 23            [ 1]  626 	ld XTEMP+1,a 
                                    627 ; SEEDX=SEEDY 
      000298 BE 38            [ 2]  628 	ldw x,SEEDY 
      00029A BF 36            [ 2]  629 	ldw SEEDX,x  
                                    630 ; SEEDY=SEEDY^(SEEDY>>1)
      00029C 54               [ 2]  631 	srlw x 
      00029D 9E               [ 1]  632 	ld a,xh 
      00029E B8 38            [ 1]  633 	xor a,SEEDY 
      0002A0 B7 38            [ 1]  634 	ld SEEDY,a  
      0002A2 9F               [ 1]  635 	ld a,xl 
      0002A3 B8 39            [ 1]  636 	xor a,SEEDY+1 
      0002A5 B7 39            [ 1]  637 	ld SEEDY+1,a 
                                    638 ; XTEMP>>3 
      0002A7 BE 22            [ 2]  639 	ldw x,XTEMP 
      0002A9 54               [ 2]  640 	srlw x 
      0002AA 54               [ 2]  641 	srlw x 
      0002AB 54               [ 2]  642 	srlw x 
                                    643 ; x=XTEMP^x 
      0002AC 9E               [ 1]  644 	ld a,xh 
      0002AD B8 22            [ 1]  645 	xor a,XTEMP 
      0002AF 95               [ 1]  646 	ld xh,a 
      0002B0 9F               [ 1]  647 	ld a,xl 
      0002B1 B8 23            [ 1]  648 	xor a,XTEMP+1  
      0002B3 97               [ 1]  649 	ld xl,a 
                                    650 ; SEEDY=x^SEEDY 
      0002B4 B8 39            [ 1]  651 	xor a,SEEDY+1
      0002B6 97               [ 1]  652 	ld xl,a 
      0002B7 9E               [ 1]  653 	ld a,xh 
      0002B8 B8 38            [ 1]  654 	xor a,SEEDY
      0002BA 95               [ 1]  655 	ld xh,a 
      0002BB BF 38            [ 2]  656 	ldw SEEDY,x 
                                    657 ; return SEEDY modulo YTEMP  
      0002BD 90 BE 24         [ 2]  658 	ldw y,YTEMP  
      0002C0 65               [ 2]  659 	divw x,y 
      0002C1 1E 01            [ 2]  660 	ldw x,(SPSAVE,sp)
      0002C3 FF               [ 2]  661         ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      0002C4 5B 02            [ 2]  662         addw sp,#VSIZE 
      0002C6 81               [ 4]  663 	ret 
                                    664 
                                    665 
                                    666 ;;
                                    667 ;; get millisecond counter 
                                    668 ;; msec ( -- u )
                                    669 ;; Added by Picatout 2020-04-26
      0002C7 02 75                  670         .word LINK  
                           0002C9   671         LINK = . 
      0002C9 04                     672         .byte 4
      0002CA 4D 53 45 43            673         .ascii "MSEC"
      0002CE                        674 MSEC: 
      0002CE 1D 00 02         [ 2]  675         subw x,#CELLL 
      0002D1 90 BE 2E         [ 2]  676         ldw y,MS 
      0002D4 FF               [ 2]  677         ldw (x),y 
      0002D5 81               [ 4]  678         ret 
                                    679 
                                    680 ; suspend execution for u msec 
                                    681 ;  pause ( u -- )
      0002D6 02 C9                  682         .word LINK 
                           0002D8   683         LINK=.
      0002D8 05                     684         .byte 5 
      0002D9 50 41 55 53 45         685         .ascii "PAUSE"
      0002DE                        686 PAUSE:
      0002DE 90 93            [ 1]  687         ldw y,x
      0002E0 90 FE            [ 2]  688         ldw y,(y)
      0002E2 72 B9 00 2E      [ 2]  689         addw y,MS 
      0002E6 8F               [10]  690 1$:     wfi  
      0002E7 90 B3 2E         [ 2]  691         cpw y,MS  
      0002EA 26 FA            [ 1]  692         jrne 1$        
      0002EC 1C 00 02         [ 2]  693         addw x,#CELLL 
      0002EF 81               [ 4]  694         ret 
                                    695 
                                    696 ; initialize count down timer 
                                    697 ;  TIMER ( u -- )  milliseconds 
      0002F0 02 D8                  698         .word LINK 
                           0002F2   699         LINK=.
      0002F2 05                     700         .byte 5 
      0002F3 54 49 4D 45 52         701         .ascii "TIMER" 
      0002F8                        702 TIMER:
      0002F8 90 93            [ 1]  703         ldw y,x
      0002FA 90 FE            [ 2]  704         ldw y,(y) 
      0002FC 90 BF 30         [ 2]  705         ldw CNTDWN,y
      0002FF 1C 00 02         [ 2]  706         addw x,#CELLL 
      000302 81               [ 4]  707         ret 
                                    708 
                                    709 ; check for TIMER exiparition 
                                    710 ;  TIMEOUT? ( -- 0|-1 )
      000303 02 F2                  711         .word LINK 
                           000305   712         LINK=. 
      000305 08                     713         .byte 8 
      000306 54 49 4D 45 4F 55 54   714         .ascii "TIMEOUT?"
             3F
      00030E                        715 TIMEOUTQ: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      00030E 4F               [ 1]  716         clr a
      00030F 1D 00 02         [ 2]  717         subw x,#CELLL 
      000312 90 BE 30         [ 2]  718         ldw y,CNTDWN 
      000315 26 01            [ 1]  719         jrne 1$ 
      000317 43               [ 1]  720         cpl a 
      000318 E7 01            [ 1]  721 1$:     ld (1,x),a 
      00031A F7               [ 1]  722         ld (x),a 
      00031B 81               [ 4]  723         ret         
                                    724 
                                    725 ; reboot MCU 
                                    726 ; REBOOT ( -- )
      00031C 03 05                  727         .word LINK 
                           00031E   728         LINK=. 
      00031E 06                     729         .byte 6 
      00031F 52 45 42 4F 4F 54      730         .ascii "REBOOT"
      000325                        731 reboot:
      000325 CC 00 00         [ 2]  732         jp NonHandledInterrupt
                                    733 
                                    734 ; compile to flash memory 
                                    735 ; TO-FLASH ( -- )
      000328 03 1E                  736         .word LINK 
                           00032A   737         LINK=.
      00032A 08                     738         .byte 8
      00032B 54 4F 2D 46 4C 41 53   739         .ascii "TO-FLASH"
             48
      000333                        740 TOFLASH:
      000333 CD 07 19         [ 4]  741         call RAMLAST 
      000336 CD 04 F3         [ 4]  742         call AT 
      000339 CD 07 44         [ 4]  743         call QDUP 
      00033C CD 04 A8         [ 4]  744         call QBRAN
      00033F 03 62                  745         .word 1$
      000341 CD 13 67         [ 4]  746         call ABORQ 
      000344 1D                     747         .byte 29
      000345 20 4E 6F 74 20 77 68   748         .ascii " Not while definitions in RAM"   
             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      000362 90 AE FF FF      [ 2]  749 1$:     ldw y,#-1 
      000366 90 BF 1E         [ 2]  750         ldw UTFLASH,y
      000369 81               [ 4]  751         ret 
                                    752 
                                    753 ; compile to RAM 
                                    754 ; TO-RAM ( -- )
      00036A 03 2A                  755         .word LINK 
                           00036C   756         LINK=.
      00036C 06                     757         .byte 6 
      00036D 54 4F 2D 52 41 4D      758         .ascii "TO-RAM"
      000373                        759 TORAM:
      000373 90 5F            [ 1]  760         clrw y 
      000375 90 BF 1E         [ 2]  761         ldw UTFLASH,y 
      000378 81               [ 4]  762         ret 
                                    763 
                                    764 ;; BAUD RATE constants table
                                    765 ; values to put in BRR1 & BRR2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      000379                        766 baudrate: 
      000379 A0 1B                  767 	.byte 0xa0,0x1b ; 2400
      00037B D0 05                  768 	.byte 0xd0,0x5  ; 4800 
      00037D 68 03                  769 	.byte 0x68,0x3  ; 9600
      00037F 34 01                  770 	.byte 0x34,0x1  ; 19200
      000381 11 06                  771 	.byte 0x11,0x6  ; 57600
      000383 08 0B                  772 	.byte 0x8,0xb   ; 115200
                                    773 
                                    774 ; BAUD RATE CONSTANTS names 
                                    775 ; 2400 baud
      000385 03 6C                  776 	.word LINK
                           000387   777 LINK	= .
      000387 04                     778 	.byte 4
      000388 42 32 4B 34            779 	.ascii "B2K4" 
      00038C                        780 B2K4:
      00038C 1D 00 02         [ 2]  781 	subw x,#CELLL 
      00038F 90 5F            [ 1]  782         clrw y
      000391 FF               [ 2]  783         ldw (x),y
      000392 81               [ 4]  784 	ret
                                    785 ; 4800 baud	
      000393 03 87                  786 	.word LINK
                           000395   787 LINK	= .
      000395 04                     788 	.byte 4
      000396 42 34 4B 38            789 	.ascii "B4K8" 
      00039A                        790 B4K8:
      00039A 1D 00 02         [ 2]  791         subw x,#CELLL 
      00039D 90 AE 00 02      [ 2]  792         ldw y,#2 
      0003A1 FF               [ 2]  793         ldw (x),y
      0003A2 81               [ 4]  794         ret 
                                    795 ; 9600 baud
      0003A3 03 95                  796 	.word LINK
                           0003A5   797 LINK	= .
      0003A5 04                     798 	.byte 4
      0003A6 42 39 4B 36            799 	.ascii "B9K6" 
      0003AA                        800 B9K6:
      0003AA 1D 00 02         [ 2]  801         subw x,#CELLL 
      0003AD 90 AE 00 04      [ 2]  802         ldw y,#4 
      0003B1 FF               [ 2]  803         ldw (x),y 
      0003B2 81               [ 4]  804         ret 
                                    805 ; 19200 baud
      0003B3 03 A5                  806 	.word LINK
                           0003B5   807 LINK	= .
      0003B5 05                     808 	.byte 5
      0003B6 42 31 39 4B 32         809 	.ascii "B19K2" 
      0003BB                        810 B19K2:
      0003BB 1D 00 02         [ 2]  811         subw x,#CELLL
      0003BE 90 AE 00 06      [ 2]  812         ldw y,#6 
      0003C2 FF               [ 2]  813         ldw (x),y 
      0003C3 81               [ 4]  814         ret 
                                    815 ; 57600 baud        
      0003C4 03 B5                  816 	.word LINK
                           0003C6   817 LINK	= .
      0003C6 05                     818 	.byte 5
      0003C7 42 35 37 4B 36         819 	.ascii "B57K6" 
      0003CC                        820 B57K6:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      0003CC 1D 00 02         [ 2]  821         subw x,#CELLL 
      0003CF 90 AE 00 08      [ 2]  822         ldw y,#8 
      0003D3 FF               [ 2]  823         ldw (x),y 
      0003D4 81               [ 4]  824         ret 
                                    825 ; 115200 baud 
      0003D5 03 C6                  826 	.word LINK
                           0003D7   827 LINK	= .
      0003D7 06                     828 	.byte 6
      0003D8 42 31 31 35 4B 32      829 	.ascii "B115K2" 
      0003DE                        830 B115K2:
      0003DE 1D 00 02         [ 2]  831 	subw x,#CELLL 
      0003E1 90 AE 00 0A      [ 2]  832         ldw y,#10 
      0003E5 FF               [ 2]  833         ldw (x),y 
      0003E6 81               [ 4]  834         ret 
                                    835 	
                                    836 ;; set UART2 BAUD rate
                                    837 ;	BAUD ( u -- )
      0003E7 03 D7                  838 	.word LINK 
                           0003E9   839 LINK	= .
      0003E9 04                     840 	.byte 4
      0003EA 42 41 55 44            841 	.ascii "BAUD" 
      0003EE                        842 BAUD:
      0003EE 1D 00 02         [ 2]  843 	subw x,#CELLL
      0003F1 90 AE 03 79      [ 2]  844         ldw y,#baudrate 
      0003F5 FF               [ 2]  845         ldw (x),y 
      0003F6 CD 07 95         [ 4]  846         call PLUS
      0003F9 90 93            [ 1]  847         ldw y,x  
      0003FB 90 FE            [ 2]  848         ldw y,(y)
      0003FD 90 F6            [ 1]  849         ld a,(y)
      0003FF 88               [ 1]  850         push a 
      000400 90 5C            [ 1]  851         incw y 
      000402 90 F6            [ 1]  852         ld a,(y)
      000404 C7 52 33         [ 1]  853         ld UART_BRR2,a 
      000407 84               [ 1]  854         pop a
      000408 C7 52 32         [ 1]  855         ld UART_BRR1,a 
      00040B 1C 00 02         [ 2]  856         addw x,#CELLL 
      00040E 81               [ 4]  857         ret 
                                    858 
                                    859 ;; Device dependent I/O
                                    860 ;       ?RX     ( -- c T | F )
                                    861 ;         Return input byte and true, or false.
      00040F 03 E9                  862         .word      LINK 
                           000411   863 LINK	= .
      000411 04                     864         .byte      4
      000412 3F 4B 45 59            865         .ascii     "?KEY"
      000416                        866 QKEY:
      000416 90 5F            [ 1]  867         CLRW Y 
      000418 72 0B 52 30 0B   [ 2]  868         BTJF UART_SR,#UART_SR_RXNE,INCH   ;check status
      00041D C6 52 31         [ 1]  869         LD    A,UART_DR   ;get char in A
      000420 1D 00 02         [ 2]  870 	SUBW	X,#2
      000423 E7 01            [ 1]  871         LD     (1,X),A
      000425 7F               [ 1]  872 	CLR	(X)
      000426 90 53            [ 2]  873         CPLW     Y
      000428                        874 INCH:
      000428 1D 00 02         [ 2]  875 		SUBW	X,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      00042B FF               [ 2]  876         LDW     (X),Y
      00042C 81               [ 4]  877         RET
                                    878 
                                    879 ;       TX!     ( c -- )
                                    880 ;       Send character c to  output device.
      00042D 04 11                  881         .word      LINK
                           00042F   882 LINK	= .
      00042F 04                     883         .byte      4
      000430 45 4D 49 54            884         .ascii     "EMIT"
      000434                        885 EMIT:
      000434 E6 01            [ 1]  886         LD     A,(1,X)
      000436 1C 00 02         [ 2]  887 	ADDW	X,#2
      000439 72 0F 52 30 FB   [ 2]  888 OUTPUT: BTJF UART_SR,#UART_SR_TXE,OUTPUT  ;loop until tx empty 
      00043E C7 52 31         [ 1]  889         LD    UART_DR,A   ;send A
      000441 81               [ 4]  890         RET
                                    891 
                                    892 ;       FC-XON  ( -- )
                                    893 ;       send XON character 
      000442 04 2F                  894         .word LINK
                           000444   895 LINK    = .
      000444 06                     896         .byte 6 
      000445 46 43 2D 58 4F 4E      897         .ascii "FC-XON"
      00044B                        898 FC_XON:
      00044B 1D 00 02         [ 2]  899         subw x,#CELLL 
      00044E 7F               [ 1]  900         clr (x)
      00044F A6 11            [ 1]  901         ld a,#XON 
      000451 E7 01            [ 1]  902         ld (1,x),a 
      000453 CD 04 34         [ 4]  903         call EMIT 
      000456 81               [ 4]  904         ret 
                                    905 
                                    906 ;       FC-XOFF ( -- )
                                    907 ;       Send XOFF character 
      000457 04 44                  908         .word LINK
                           000459   909 LINK    = .
      000459 07                     910         .byte 7
      00045A 46 43 2D 58 4F 46 46   911         .ascii "FC-XOFF"
      000461                        912 FC_XOFF:
      000461 1D 00 02         [ 2]  913         subw x,#CELLL 
      000464 7F               [ 1]  914         clr (x)
      000465 A6 13            [ 1]  915         ld a,#XOFF 
      000467 E7 01            [ 1]  916         ld (1,x),a 
      000469 CD 04 34         [ 4]  917         call EMIT 
      00046C 81               [ 4]  918         ret
                                    919 
                                    920 ;; The kernel
                                    921 
                                    922 ;       doLIT   ( -- w )
                                    923 ;       Push an inline literal.
      00046D 04 59                  924         .word      LINK
                           00046F   925 LINK	= 	.
      00046F 45                     926 	.byte      COMPO+5
      000470 44 4F 4C 49 54         927         .ascii     "DOLIT"
      000475                        928 DOLIT:
      000475 1D 00 02         [ 2]  929 	SUBW X,#2
      000478 16 01            [ 2]  930         ldw y,(1,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      00047A 90 FE            [ 2]  931         ldw y,(y)
      00047C FF               [ 2]  932         ldw (x),y
      00047D 90 85            [ 2]  933         popw y 
      00047F 90 EC 02         [ 2]  934         jp (2,y)
                                    935 
                                    936 ;       next    ( -- )
                                    937 ;       Code for  single index loop.
      000482 04 6F                  938         .word      LINK
                           000484   939 LINK	= 	.
      000484 44                     940 	.byte      COMPO+4
      000485 6E 65 78 74            941         .ascii     "next"
      000489                        942 DONXT:
      000489 16 03            [ 2]  943 	LDW Y,(3,SP)
      00048B 90 5A            [ 2]  944 	DECW Y
      00048D 2A 07            [ 1]  945 	JRPL NEX1 ; jump if N=0
      00048F 90 85            [ 2]  946 	POPW Y
      000491 5B 02            [ 2]  947         addw sp,#2
      000493 90 EC 02         [ 2]  948         JP (2,Y)
      000496                        949 NEX1:
      000496 17 03            [ 2]  950         LDW (3,SP),Y
      000498 90 85            [ 2]  951         POPW Y
      00049A 90 FE            [ 2]  952 	LDW Y,(Y)
      00049C 90 FC            [ 2]  953 	JP (Y)
                                    954 
                                    955 ;       ?branch ( f -- )
                                    956 ;       Branch if flag is zero.
      00049E 04 84                  957         .word      LINK
                           0004A0   958 LINK	= 	.
      0004A0 47                     959 	.byte      COMPO+7
      0004A1 3F 42 52 41 4E 43 48   960         .ascii     "?BRANCH"
      0004A8                        961 QBRAN:	
      0004A8 90 93            [ 1]  962         LDW Y,X
      0004AA 1C 00 02         [ 2]  963 	ADDW X,#2
      0004AD 90 FE            [ 2]  964 	LDW Y,(Y)
      0004AF 27 0E            [ 1]  965         JREQ     BRAN
      0004B1 90 85            [ 2]  966 	POPW Y
      0004B3 90 EC 02         [ 2]  967 	JP (2,Y)
                                    968         
                                    969 ;       branch  ( -- )
                                    970 ;       Branch to an inline address.
      0004B6 04 A0                  971         .word      LINK
                           0004B8   972 LINK	= 	.
      0004B8 46                     973 	.byte      COMPO+6
      0004B9 42 52 41 4E 43 48      974         .ascii     "BRANCH"
      0004BF                        975 BRAN:
      0004BF 90 85            [ 2]  976         POPW Y
      0004C1 90 FE            [ 2]  977 	LDW Y,(Y)
      0004C3 90 FC            [ 2]  978         JP     (Y)
                                    979 
                                    980 ;       EXECUTE ( ca -- )
                                    981 ;       Execute  word at ca.
      0004C5 04 B8                  982         .word      LINK
                           0004C7   983 LINK	= 	.
      0004C7 07                     984         .byte       7
      0004C8 45 58 45 43 55 54 45   985         .ascii     "EXECUTE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      0004CF                        986 EXECU:
      0004CF 90 93            [ 1]  987         LDW Y,X
      0004D1 1C 00 02         [ 2]  988 	ADDW X,#2
      0004D4 90 FE            [ 2]  989 	LDW  Y,(Y)
      0004D6 90 FC            [ 2]  990         JP   (Y)
                                    991 
                           000001   992 OPTIMIZE = 1
                           000001   993 .if OPTIMIZE 
                                    994 ; remplacement de CALL EXIT par 
                                    995 ; le opcode de RET.
                                    996 ; Voir modification au code de ";"
                           000000   997 .else 
                                    998 ;       EXIT    ( -- )
                                    999 ;       Terminate a colon definition.
                                   1000         .word      LINK
                                   1001 LINK = .
                                   1002         .byte      4
                                   1003         .ascii     "EXIT"
                                   1004 EXIT:
                                   1005         POPW Y
                                   1006         RET
                                   1007 .endif 
                                   1008 
                                   1009 ;       !       ( w a -- )
                                   1010 ;       Pop  data stack to memory.
      0004D8 04 C7                 1011         .word      LINK
                           0004DA  1012 LINK = .
      0004DA 01                    1013         .byte      1
      0004DB 21                    1014         .ascii     "!"
      0004DC                       1015 STORE:
      0004DC 90 93            [ 1] 1016         LDW Y,X
      0004DE 90 FE            [ 2] 1017         LDW Y,(Y)    ;Y=a
      0004E0 90 BF 24         [ 2] 1018         LDW YTEMP,Y
      0004E3 90 93            [ 1] 1019         LDW Y,X
      0004E5 90 EE 02         [ 2] 1020         LDW Y,(2,Y)
      0004E8 91 CF 24         [ 5] 1021         LDW [YTEMP],Y ;store w at a
      0004EB 1C 00 04         [ 2] 1022         ADDW X,#4 ; DDROP 
      0004EE 81               [ 4] 1023         RET     
                                   1024 
                                   1025 ;       @       ( a -- w )
                                   1026 ;       Push memory location to stack.
      0004EF 04 DA                 1027         .word      LINK
                           0004F1  1028 LINK	= 	.
      0004F1 01                    1029         .byte    1
      0004F2 40                    1030         .ascii	"@"
      0004F3                       1031 AT:
      0004F3 90 93            [ 1] 1032         LDW Y,X     ;Y = a
      0004F5 90 FE            [ 2] 1033         LDW Y,(Y)   ; address 
      0004F7 90 FE            [ 2] 1034         LDW Y,(Y)   ; value 
      0004F9 FF               [ 2] 1035         LDW (X),Y ;w = @Y
      0004FA 81               [ 4] 1036         RET     
                                   1037 
                                   1038 ;       C!      ( c b -- )
                                   1039 ;       Pop  data stack to byte memory.
      0004FB 04 F1                 1040         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                           0004FD  1041 LINK	= .
      0004FD 02                    1042         .byte      2
      0004FE 43 21                 1043         .ascii     "C!"
      000500                       1044 CSTOR:
      000500 90 93            [ 1] 1045         LDW Y,X
      000502 90 FE            [ 2] 1046 	LDW Y,(Y)    ;Y=b
      000504 E6 03            [ 1] 1047         LD A,(3,X)    ;D = c
      000506 90 F7            [ 1] 1048         LD  (Y),A     ;store c at b
      000508 1C 00 04         [ 2] 1049 	ADDW X,#4 ; DDROP 
      00050B 81               [ 4] 1050         RET     
                                   1051 
                                   1052 ;       C@      ( b -- c )
                                   1053 ;       Push byte in memory to  stack.
      00050C 04 FD                 1054         .word      LINK
                           00050E  1055 LINK	= 	.
      00050E 02                    1056         .byte      2
      00050F 43 40                 1057         .ascii     "C@"
      000511                       1058 CAT:
      000511 90 93            [ 1] 1059         LDW Y,X     ;Y=b
      000513 90 FE            [ 2] 1060         LDW Y,(Y)
      000515 90 F6            [ 1] 1061         LD A,(Y)
      000517 E7 01            [ 1] 1062         LD (1,X),A
      000519 7F               [ 1] 1063         CLR (X)
      00051A 81               [ 4] 1064         RET     
                                   1065 
                                   1066 ;       RP@     ( -- a )
                                   1067 ;       Push current RP to data stack.
      00051B 05 0E                 1068         .word      LINK
                           00051D  1069 LINK	= .
      00051D 03                    1070         .byte      3
      00051E 52 50 40              1071         .ascii     "RP@"
      000521                       1072 RPAT:
      000521 90 96            [ 1] 1073         LDW Y,SP    ;save return addr
      000523 1D 00 02         [ 2] 1074         SUBW X,#2
      000526 FF               [ 2] 1075         LDW (X),Y
      000527 81               [ 4] 1076         RET     
                                   1077 
                                   1078 ;       RP!     ( a -- )
                                   1079 ;       Set  return stack pointer.
      000528 05 1D                 1080         .word      LINK
                           00052A  1081 LINK	= 	. 
      00052A 43                    1082 	.byte      COMPO+3
      00052B 52 50 21              1083         .ascii     "RP!"
      00052E                       1084 RPSTO:
      00052E 90 85            [ 2] 1085         POPW Y
      000530 90 BF 24         [ 2] 1086         LDW YTEMP,Y
      000533 90 93            [ 1] 1087         LDW Y,X
      000535 90 FE            [ 2] 1088         LDW Y,(Y)
      000537 90 94            [ 1] 1089         LDW SP,Y
      000539 1C 00 02         [ 2] 1090         ADDW x,#CELLL ; a was not dropped, Picatout 2020-05-24
      00053C 92 CC 24         [ 5] 1091         JP [YTEMP]
                                   1092 
                                   1093 ;       R>      ( -- w )
                                   1094 ;       Pop return stack to data stack.
      00053F 05 2A                 1095         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                           000541  1096 LINK	= 	. 
      000541 42                    1097 	.byte      COMPO+2
      000542 52 3E                 1098         .ascii     "R>"
      000544                       1099 RFROM:
      000544 90 85            [ 2] 1100         POPW Y    ;save return addr
      000546 90 BF 24         [ 2] 1101         LDW YTEMP,Y
      000549 90 85            [ 2] 1102         POPW Y
      00054B 1D 00 02         [ 2] 1103         SUBW X,#2
      00054E FF               [ 2] 1104         LDW (X),Y
      00054F 92 CC 24         [ 5] 1105         JP [YTEMP]
                                   1106 
                                   1107 ;       R@      ( -- w )
                                   1108 ;       Copy top of return stack to stack.
      000552 05 41                 1109         .word      LINK
                           000554  1110 LINK	= 	. 
      000554 02                    1111         .byte      2
      000555 52 40                 1112         .ascii     "R@"
      000557                       1113 RAT:
      000557 16 03            [ 2] 1114         ldw y,(3,sp)
      000559 1D 00 02         [ 2] 1115         subw x,#CELLL 
      00055C FF               [ 2] 1116         ldw (x),y 
      00055D 81               [ 4] 1117         ret 
                                   1118 
                                   1119 ;       >R      ( w -- )
                                   1120 ;       Push data stack to return stack.
      00055E 05 54                 1121         .word      LINK
                           000560  1122 LINK	= 	. 
      000560 42                    1123 	.byte      COMPO+2
      000561 3E 52                 1124         .ascii     ">R"
      000563                       1125 TOR:
      000563 90 85            [ 2] 1126         POPW Y    ;save return addr
      000565 90 BF 24         [ 2] 1127         LDW YTEMP,Y
      000568 90 93            [ 1] 1128         LDW Y,X
      00056A 90 FE            [ 2] 1129         LDW Y,(Y)
      00056C 90 89            [ 2] 1130         PUSHW Y    ;restore return addr
      00056E 1C 00 02         [ 2] 1131         ADDW X,#2
      000571 92 CC 24         [ 5] 1132         JP [YTEMP]
                                   1133 
                                   1134 ;       SP@     ( -- a )
                                   1135 ;       Push current stack pointer.
      000574 05 60                 1136         .word      LINK
                           000576  1137 LINK	= 	. 
      000576 03                    1138         .byte      3
      000577 53 50 40              1139         .ascii     "SP@"
      00057A                       1140 SPAT:
      00057A 90 93            [ 1] 1141 	LDW Y,X
      00057C 1D 00 02         [ 2] 1142         SUBW X,#2
      00057F FF               [ 2] 1143 	LDW (X),Y
      000580 81               [ 4] 1144         RET     
                                   1145 
                                   1146 ;       SP!     ( a -- )
                                   1147 ;       Set  data stack pointer.
      000581 05 76                 1148         .word      LINK
                           000583  1149 LINK	= 	. 
      000583 03                    1150         .byte      3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      000584 53 50 21              1151         .ascii     "SP!"
      000587                       1152 SPSTO:
      000587 FE               [ 2] 1153         LDW     X,(X)     ;X = a
      000588 81               [ 4] 1154         RET     
                                   1155 
                                   1156 ;       DROP    ( w -- )
                                   1157 ;       Discard top stack item.
      000589 05 83                 1158         .word      LINK
                           00058B  1159 LINK	= 	. 
      00058B 04                    1160         .byte      4
      00058C 44 52 4F 50           1161         .ascii     "DROP"
      000590                       1162 DROP:
      000590 1C 00 02         [ 2] 1163         ADDW X,#2     
      000593 81               [ 4] 1164         RET     
                                   1165 
                                   1166 ;       DUP     ( w -- w w )
                                   1167 ;       Duplicate  top stack item.
      000594 05 8B                 1168         .word      LINK
                           000596  1169 LINK	= 	. 
      000596 03                    1170         .byte      3
      000597 44 55 50              1171         .ascii     "DUP"
      00059A                       1172 DUPP:
      00059A 90 93            [ 1] 1173 	LDW Y,X
      00059C 1D 00 02         [ 2] 1174         SUBW X,#2
      00059F 90 FE            [ 2] 1175 	LDW Y,(Y)
      0005A1 FF               [ 2] 1176 	LDW (X),Y
      0005A2 81               [ 4] 1177         RET     
                                   1178 
                                   1179 ;       SWAP    ( w1 w2 -- w2 w1 )
                                   1180 ;       Exchange top two stack items.
      0005A3 05 96                 1181         .word      LINK
                           0005A5  1182 LINK	= 	. 
      0005A5 04                    1183         .byte      4
      0005A6 53 57 41 50           1184         .ascii     "SWAP"
      0005AA                       1185 SWAPP:
      0005AA 90 93            [ 1] 1186         LDW Y,X
      0005AC 90 FE            [ 2] 1187         LDW Y,(Y)
      0005AE 90 BF 24         [ 2] 1188         LDW YTEMP,Y
      0005B1 90 93            [ 1] 1189         LDW Y,X
      0005B3 90 EE 02         [ 2] 1190         LDW Y,(2,Y)
      0005B6 FF               [ 2] 1191         LDW (X),Y
      0005B7 90 BE 24         [ 2] 1192         LDW Y,YTEMP
      0005BA EF 02            [ 2] 1193         LDW (2,X),Y
      0005BC 81               [ 4] 1194         RET     
                                   1195 
                                   1196 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                   1197 ;       Copy second stack item to top.
      0005BD 05 A5                 1198         .word      LINK
                           0005BF  1199 LINK	= . 
      0005BF 04                    1200         .byte      4
      0005C0 4F 56 45 52           1201         .ascii     "OVER"
      0005C4                       1202 OVER:
      0005C4 1D 00 02         [ 2] 1203         SUBW X,#2
      0005C7 90 93            [ 1] 1204         LDW Y,X
      0005C9 90 EE 04         [ 2] 1205         LDW Y,(4,Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      0005CC FF               [ 2] 1206         LDW (X),Y
      0005CD 81               [ 4] 1207         RET     
                                   1208 
                                   1209 ;       0<      ( n -- t )
                                   1210 ;       Return true if n is negative.
      0005CE 05 BF                 1211         .word      LINK
                           0005D0  1212 LINK	= . 
      0005D0 02                    1213         .byte      2
      0005D1 30 3C                 1214         .ascii     "0<"
      0005D3                       1215 ZLESS:
      0005D3 A6 FF            [ 1] 1216         LD A,#0xFF
      0005D5 90 93            [ 1] 1217         LDW Y,X
      0005D7 90 FE            [ 2] 1218         LDW Y,(Y)
      0005D9 2B 01            [ 1] 1219         JRMI     ZL1
      0005DB 4F               [ 1] 1220         CLR A   ;false
      0005DC F7               [ 1] 1221 ZL1:    LD     (X),A
      0005DD E7 01            [ 1] 1222         LD (1,X),A
      0005DF 81               [ 4] 1223 	RET     
                                   1224 
                                   1225 ;       AND     ( w w -- w )
                                   1226 ;       Bitwise AND.
      0005E0 05 D0                 1227         .word      LINK
                           0005E2  1228 LINK	= . 
      0005E2 03                    1229         .byte      3
      0005E3 41 4E 44              1230         .ascii     "AND"
      0005E6                       1231 ANDD:
      0005E6 F6               [ 1] 1232         LD  A,(X)    ;D=w
      0005E7 E4 02            [ 1] 1233         AND A,(2,X)
      0005E9 E7 02            [ 1] 1234         LD (2,X),A
      0005EB E6 01            [ 1] 1235         LD A,(1,X)
      0005ED E4 03            [ 1] 1236         AND A,(3,X)
      0005EF E7 03            [ 1] 1237         LD (3,X),A
      0005F1 1C 00 02         [ 2] 1238         ADDW X,#2
      0005F4 81               [ 4] 1239         RET
                                   1240 
                                   1241 ;       OR      ( w w -- w )
                                   1242 ;       Bitwise inclusive OR.
      0005F5 05 E2                 1243         .word      LINK
                           0005F7  1244 LINK = . 
      0005F7 02                    1245         .byte      2
      0005F8 4F 52                 1246         .ascii     "OR"
      0005FA                       1247 ORR:
      0005FA F6               [ 1] 1248         LD A,(X)    ;D=w
      0005FB EA 02            [ 1] 1249         OR A,(2,X)
      0005FD E7 02            [ 1] 1250         LD (2,X),A
      0005FF E6 01            [ 1] 1251         LD A,(1,X)
      000601 EA 03            [ 1] 1252         OR A,(3,X)
      000603 E7 03            [ 1] 1253         LD (3,X),A
      000605 1C 00 02         [ 2] 1254         ADDW X,#2
      000608 81               [ 4] 1255         RET
                                   1256 
                                   1257 ;       XOR     ( w w -- w )
                                   1258 ;       Bitwise exclusive OR.
      000609 05 F7                 1259         .word      LINK
                           00060B  1260 LINK	= . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      00060B 03                    1261         .byte      3
      00060C 58 4F 52              1262         .ascii     "XOR"
      00060F                       1263 XORR:
      00060F F6               [ 1] 1264         LD A,(X)    ;D=w
      000610 E8 02            [ 1] 1265         XOR A,(2,X)
      000612 E7 02            [ 1] 1266         LD (2,X),A
      000614 E6 01            [ 1] 1267         LD A,(1,X)
      000616 E8 03            [ 1] 1268         XOR A,(3,X)
      000618 E7 03            [ 1] 1269         LD (3,X),A
      00061A 1C 00 02         [ 2] 1270         ADDW X,#2
      00061D 81               [ 4] 1271         RET
                                   1272 
                                   1273 ;       UM+     ( u u -- udsum )
                                   1274 ;       Add two unsigned single
                                   1275 ;       and return a double sum.
      00061E 06 0B                 1276         .word      LINK
                           000620  1277 LINK	= . 
      000620 03                    1278         .byte      3
      000621 55 4D 2B              1279         .ascii     "UM+"
      000624                       1280 UPLUS:
      000624 A6 01            [ 1] 1281         LD A,#1
      000626 90 93            [ 1] 1282         LDW Y,X
      000628 90 EE 02         [ 2] 1283         LDW Y,(2,Y)
      00062B 90 BF 24         [ 2] 1284         LDW YTEMP,Y
      00062E 90 93            [ 1] 1285         LDW Y,X
      000630 90 FE            [ 2] 1286         LDW Y,(Y)
      000632 72 B9 00 24      [ 2] 1287         ADDW Y,YTEMP
      000636 EF 02            [ 2] 1288         LDW (2,X),Y
      000638 25 01            [ 1] 1289         JRC     UPL1
      00063A 4F               [ 1] 1290         CLR A
      00063B E7 01            [ 1] 1291 UPL1:   LD     (1,X),A
      00063D 7F               [ 1] 1292         CLR (X)
      00063E 81               [ 4] 1293         RET
                                   1294 
                                   1295 ;; System and user variables
                                   1296 
                                   1297 ;       doVAR   ( -- a )
                                   1298 ;       Code for VARIABLE and CREATE.
      00063F 06 20                 1299         .word      LINK
                           000641  1300 LINK	= . 
      000641 45                    1301 	.byte      COMPO+5
      000642 44 4F 56 41 52        1302         .ascii     "DOVAR"
      000647                       1303 DOVAR:
      000647 1D 00 02         [ 2] 1304 	SUBW X,#2
      00064A 90 85            [ 2] 1305         POPW Y    ;get return addr (pfa)
      00064C 90 FE            [ 2] 1306         LDW Y,(Y) ; indirect address 
      00064E FF               [ 2] 1307         LDW (X),Y    ;push on stack
      00064F 81               [ 4] 1308         RET     ;go to RET of EXEC
                                   1309 
                                   1310 ;       BASE    ( -- a )
                                   1311 ;       Radix base for numeric I/O.
      000650 06 41                 1312         .word      LINK        
                           000652  1313 LINK = . 
      000652 04                    1314         .byte      4
      000653 42 41 53 45           1315         .ascii     "BASE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      000657                       1316 BASE:
      000657 90 AE 00 06      [ 2] 1317 	LDW Y,#UBASE 
      00065B 1D 00 02         [ 2] 1318 	SUBW X,#2
      00065E FF               [ 2] 1319         LDW (X),Y
      00065F 81               [ 4] 1320         RET
                                   1321 
                                   1322 ;       tmp     ( -- a )
                                   1323 ;       A temporary storage.
      000660 06 52                 1324         .word      LINK
                                   1325         
                           000662  1326 LINK = . 
      000662 03                    1327 	.byte      3
      000663 54 4D 50              1328         .ascii     "TMP"
      000666                       1329 TEMP:
      000666 90 AE 00 08      [ 2] 1330 	LDW Y,#UTMP
      00066A 1D 00 02         [ 2] 1331 	SUBW X,#2
      00066D FF               [ 2] 1332         LDW (X),Y
      00066E 81               [ 4] 1333         RET
                                   1334 
                                   1335 ;       >IN     ( -- a )
                                   1336 ;        Hold parsing pointer.
      00066F 06 62                 1337         .word      LINK
                           000671  1338 LINK = . 
      000671 03                    1339         .byte      3
      000672 3E 49 4E              1340         .ascii    ">IN"
      000675                       1341 INN:
      000675 90 AE 00 0A      [ 2] 1342 	LDW Y,#UINN 
      000679 1D 00 02         [ 2] 1343 	SUBW X,#2
      00067C FF               [ 2] 1344         LDW (X),Y
      00067D 81               [ 4] 1345         RET
                                   1346 
                                   1347 ;       #TIB    ( -- a )
                                   1348 ;       Count in terminal input buffer.
      00067E 06 71                 1349         .word      LINK
                           000680  1350 LINK = . 
      000680 04                    1351         .byte      4
      000681 23 54 49 42           1352         .ascii     "#TIB"
      000685                       1353 NTIB:
      000685 90 AE 00 0C      [ 2] 1354 	LDW Y,#UCTIB 
      000689 1D 00 02         [ 2] 1355 	SUBW X,#2
      00068C FF               [ 2] 1356         LDW (X),Y
      00068D 81               [ 4] 1357         RET
                                   1358 
                                   1359 ;       TBUF ( -- a )
                                   1360 ;       address of 128 bytes transaction buffer 
      00068E 06 80                 1361         .word LINK 
                           000690  1362         LINK=.
      000690 04                    1363         .byte 4 
      000691 54 42 55 46           1364         .ascii "TBUF"
      000695                       1365 TBUF:
      000695 90 AE 16 80      [ 2] 1366         ldw y,#ROWBUFF
      000699 1D 00 02         [ 2] 1367         subw x,#CELLL
      00069C FF               [ 2] 1368         ldw (x),y 
      00069D 81               [ 4] 1369         ret 
                                   1370 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                   1371 ; systeme variable 
                                   1372 ; compilation destination 
                                   1373 ; TFLASH ( -- A )
      00069E 06 90                 1374         .word LINK 
                           0006A0  1375         LINK=.
      0006A0 06                    1376         .byte 6 
      0006A1 54 46 4C 41 53 48     1377         .ascii "TFLASH"         
      0006A7                       1378 TFLASH:
      0006A7 1D 00 02         [ 2] 1379         subw x,#CELLL 
      0006AA 90 AE 00 1E      [ 2] 1380         ldw y,#UTFLASH
      0006AE FF               [ 2] 1381         ldw (x),y 
      0006AF 81               [ 4] 1382         ret 
                                   1383 
                                   1384 ;       "EVAL   ( -- a )
                                   1385 ;       Execution vector of EVAL.
      0006B0 06 A0                 1386         .word      LINK
                           0006B2  1387 LINK = . 
      0006B2 05                    1388         .byte      5
      0006B3 27 45 56 41 4C        1389         .ascii     "'EVAL"
      0006B8                       1390 TEVAL:
      0006B8 90 AE 00 10      [ 2] 1391 	LDW Y,#UINTER 
      0006BC 1D 00 02         [ 2] 1392 	SUBW X,#2
      0006BF FF               [ 2] 1393         LDW (X),Y
      0006C0 81               [ 4] 1394         RET
                                   1395 
                                   1396 ;       HLD     ( -- a )
                                   1397 ;       Hold a pointer of output string.
      0006C1 06 B2                 1398         .word      LINK
                           0006C3  1399 LINK = . 
      0006C3 03                    1400         .byte      3
      0006C4 48 4C 44              1401         .ascii     "HLD"
      0006C7                       1402 HLD:
      0006C7 90 AE 00 12      [ 2] 1403 	LDW Y,#UHLD 
      0006CB 1D 00 02         [ 2] 1404 	SUBW X,#2
      0006CE FF               [ 2] 1405         LDW (X),Y
      0006CF 81               [ 4] 1406         RET
                                   1407 
                                   1408 ;       CONTEXT ( -- a )
                                   1409 ;       Start vocabulary search.
      0006D0 06 C3                 1410         .word      LINK
                           0006D2  1411 LINK = . 
      0006D2 07                    1412         .byte      7
      0006D3 43 4F 4E 54 45 58 54  1413         .ascii     "CONTEXT"
      0006DA                       1414 CNTXT:
      0006DA 90 AE 00 14      [ 2] 1415 	LDW Y,#UCNTXT
      0006DE 1D 00 02         [ 2] 1416 	SUBW X,#2
      0006E1 FF               [ 2] 1417         LDW (X),Y
      0006E2 81               [ 4] 1418         RET
                                   1419 
                                   1420 ;       VP      ( -- a )
                                   1421 ;       Point to top of variables
      0006E3 06 D2                 1422         .word      LINK
                           0006E5  1423 LINK = . 
      0006E5 02                    1424         .byte      2
      0006E6 56 50                 1425         .ascii     "VP"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      0006E8                       1426 VPP:
      0006E8 90 AE 00 16      [ 2] 1427 	LDW Y,#UVP 
      0006EC 1D 00 02         [ 2] 1428 	SUBW X,#2
      0006EF FF               [ 2] 1429         LDW (X),Y
      0006F0 81               [ 4] 1430         RET
                                   1431 
                                   1432 ;       CP    ( -- a )
                                   1433 ;       Pointer to top of FLASH 
      0006F1 06 E5                 1434         .word LINK 
                           0006F3  1435         LINK=.
      0006F3 02                    1436         .byte 2 
      0006F4 43 50                 1437         .ascii "CP"
      0006F6                       1438 CPP: 
      0006F6 90 AE 00 18      [ 2] 1439         ldw y,#UCP 
      0006FA 1D 00 02         [ 2] 1440         subw x,#CELLL 
      0006FD FF               [ 2] 1441         ldw (x),y 
      0006FE 81               [ 4] 1442         ret                
                                   1443 
                                   1444 ;       LAST    ( -- a )
                                   1445 ;       Point to last name in dictionary.
      0006FF 06 F3                 1446         .word      LINK
                           000701  1447 LINK = . 
      000701 04                    1448         .byte      4
      000702 4C 41 53 54           1449         .ascii     "LAST"
      000706                       1450 LAST:
      000706 90 AE 00 1A      [ 2] 1451 	LDW Y,#ULAST 
      00070A 1D 00 02         [ 2] 1452 	SUBW X,#2
      00070D FF               [ 2] 1453         LDW (X),Y
      00070E 81               [ 4] 1454         RET
                                   1455 
                                   1456 ; address of system variable URLAST 
                                   1457 ;       RAMLAST ( -- a )
                                   1458 ; RAM dictionary context 
      00070F 07 01                 1459         .word LINK 
                           000711  1460         LINK=. 
      000711 07                    1461         .byte 7  
      000712 52 41 4D 4C 41 53 54  1462         .ascii "RAMLAST" 
      000719                       1463 RAMLAST: 
      000719 90 AE 00 20      [ 2] 1464         ldw y,#URLAST 
      00071D 1D 00 02         [ 2] 1465         subw x,#CELLL 
      000720 FF               [ 2] 1466         ldw (x),y 
      000721 81               [ 4] 1467         ret 
                                   1468 
                                   1469 ; OFFSET ( -- a )
                                   1470 ; address of system variable OFFSET 
      000722 07 11                 1471         .word LINK 
                           000724  1472         LINK=.
      000724 06                    1473         .byte 6
      000725 4F 46 46 53 45 54     1474         .ascii "OFFSET" 
      00072B                       1475 OFFSET: 
      00072B 1D 00 02         [ 2] 1476         subw x,#CELLL
      00072E 90 AE 00 1C      [ 2] 1477         ldw y,#UOFFSET 
      000732 FF               [ 2] 1478         ldw (x),y 
      000733 81               [ 4] 1479         ret 
                                   1480 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                   1481 ; adjust jump address adding OFFSET
                                   1482 ; ADR-ADJ ( a -- a+offset )
      000734                       1483 ADRADJ: 
      000734 CD 07 2B         [ 4] 1484         call OFFSET 
      000737 CD 04 F3         [ 4] 1485         call AT 
      00073A CC 07 95         [ 2] 1486         jp PLUS 
                                   1487 
                                   1488 
                                   1489 ;; Common functions
                                   1490 
                                   1491 ;       ?DUP    ( w -- w w | 0 )
                                   1492 ;       Dup tos if its is not zero.
      00073D 07 24                 1493         .word      LINK
                           00073F  1494 LINK = . 
      00073F 04                    1495         .byte      4
      000740 3F 44 55 50           1496         .ascii     "?DUP"
      000744                       1497 QDUP:
      000744 90 93            [ 1] 1498         LDW Y,X
      000746 90 FE            [ 2] 1499 	LDW Y,(Y)
      000748 27 04            [ 1] 1500         JREQ     QDUP1
      00074A 1D 00 02         [ 2] 1501 	SUBW X,#2
      00074D FF               [ 2] 1502         LDW (X),Y
      00074E 81               [ 4] 1503 QDUP1:  RET
                                   1504 
                                   1505 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1506 ;       Rot 3rd item to top.
      00074F 07 3F                 1507         .word      LINK
                           000751  1508 LINK = . 
      000751 03                    1509         .byte      3
      000752 52 4F 54              1510         .ascii     "ROT"
      000755                       1511 ROT:
      000755 90 93            [ 1] 1512         ldw y,x 
      000757 90 FE            [ 2] 1513         ldw y,(y)
      000759 90 89            [ 2] 1514         pushw y 
      00075B 90 93            [ 1] 1515         ldw y,x 
      00075D 90 EE 04         [ 2] 1516         ldw y,(4,y)
      000760 FF               [ 2] 1517         ldw (x),y 
      000761 90 93            [ 1] 1518         ldw y,x 
      000763 90 EE 02         [ 2] 1519         ldw y,(2,y)
      000766 EF 04            [ 2] 1520         ldw (4,x),y 
      000768 90 85            [ 2] 1521         popw y 
      00076A EF 02            [ 2] 1522         ldw (2,x),y
      00076C 81               [ 4] 1523         ret 
                                   1524 
                                   1525 ;       2DROP   ( w w -- )
                                   1526 ;       Discard two items on stack.
      00076D 07 51                 1527         .word      LINK
                           00076F  1528 LINK = . 
      00076F 05                    1529         .byte      5
      000770 32 44 52 4F 50        1530         .ascii     "2DROP"
      000775                       1531 DDROP:
      000775 1C 00 04         [ 2] 1532         ADDW X,#4
      000778 81               [ 4] 1533         RET
                                   1534 
                                   1535 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                   1536 ;       Duplicate top two items.
      000779 07 6F                 1537         .word      LINK
                           00077B  1538 LINK = . 
      00077B 04                    1539         .byte      4
      00077C 32 44 55 50           1540         .ascii     "2DUP"
      000780                       1541 DDUP:
      000780 1D 00 04         [ 2] 1542         SUBW X,#4
      000783 90 93            [ 1] 1543         LDW Y,X
      000785 90 EE 06         [ 2] 1544         LDW Y,(6,Y)
      000788 EF 02            [ 2] 1545         LDW (2,X),Y
      00078A 90 93            [ 1] 1546         LDW Y,X
      00078C 90 EE 04         [ 2] 1547         LDW Y,(4,Y)
      00078F FF               [ 2] 1548         LDW (X),Y
      000790 81               [ 4] 1549         RET
                                   1550 
                                   1551 ;       +       ( w w -- sum )
                                   1552 ;       Add top two items.
      000791 07 7B                 1553         .word      LINK
                           000793  1554 LINK = . 
      000793 01                    1555         .byte      1
      000794 2B                    1556         .ascii     "+"
      000795                       1557 PLUS:
      000795 90 93            [ 1] 1558         LDW Y,X
      000797 90 FE            [ 2] 1559         LDW Y,(Y)
      000799 90 BF 24         [ 2] 1560         LDW YTEMP,Y
      00079C 1C 00 02         [ 2] 1561         ADDW X,#2
      00079F 90 93            [ 1] 1562         LDW Y,X
      0007A1 90 FE            [ 2] 1563         LDW Y,(Y)
      0007A3 72 B9 00 24      [ 2] 1564         ADDW Y,YTEMP
      0007A7 FF               [ 2] 1565         LDW (X),Y
      0007A8 81               [ 4] 1566         RET
                                   1567 
                                   1568 ;       NOT     ( w -- w )
                                   1569 ;       One's complement of tos.
      0007A9 07 93                 1570         .word      LINK
                           0007AB  1571 LINK = . 
      0007AB 03                    1572         .byte      3
      0007AC 4E 4F 54              1573         .ascii     "NOT"
      0007AF                       1574 INVER:
      0007AF 90 93            [ 1] 1575         LDW Y,X
      0007B1 90 FE            [ 2] 1576         LDW Y,(Y)
      0007B3 90 53            [ 2] 1577         CPLW Y
      0007B5 FF               [ 2] 1578         LDW (X),Y
      0007B6 81               [ 4] 1579         RET
                                   1580 
                                   1581 ;       NEGATE  ( n -- -n )
                                   1582 ;       Two's complement of tos.
      0007B7 07 AB                 1583         .word      LINK
                           0007B9  1584 LINK = . 
      0007B9 06                    1585         .byte      6
      0007BA 4E 45 47 41 54 45     1586         .ascii     "NEGATE"
      0007C0                       1587 NEGAT:
      0007C0 90 93            [ 1] 1588         LDW Y,X
      0007C2 90 FE            [ 2] 1589         LDW Y,(Y)
      0007C4 90 50            [ 2] 1590         NEGW Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      0007C6 FF               [ 2] 1591         LDW (X),Y
      0007C7 81               [ 4] 1592         RET
                                   1593 
                                   1594 ;       DNEGATE ( d -- -d )
                                   1595 ;       Two's complement of top double.
      0007C8 07 B9                 1596         .word      LINK
                           0007CA  1597 LINK = . 
      0007CA 07                    1598         .byte      7
      0007CB 44 4E 45 47 41 54 45  1599         .ascii     "DNEGATE"
      0007D2                       1600 DNEGA:
      0007D2 90 93            [ 1] 1601         LDW Y,X
      0007D4 90 FE            [ 2] 1602 	LDW Y,(Y)
      0007D6 90 53            [ 2] 1603         CPLW Y     
      0007D8 90 BF 24         [ 2] 1604 	LDW YTEMP,Y
      0007DB 90 93            [ 1] 1605         LDW Y,X
      0007DD 90 EE 02         [ 2] 1606         LDW Y,(2,Y)
      0007E0 90 53            [ 2] 1607         CPLW Y
      0007E2 72 A9 00 01      [ 2] 1608         addw y,#1
      0007E6 EF 02            [ 2] 1609         LDW (2,X),Y
      0007E8 90 BE 24         [ 2] 1610         LDW Y,YTEMP
      0007EB 24 02            [ 1] 1611         JRNC DN1 
      0007ED 90 5C            [ 1] 1612         INCW Y
      0007EF FF               [ 2] 1613 DN1:    LDW (X),Y
      0007F0 81               [ 4] 1614         RET
                                   1615 
                                   1616 
                                   1617 ;       S>D ( n -- d )
                                   1618 ; convert single integer to double 
      0007F1 07 CA                 1619         .word LINK 
                           0007F3  1620         LINK=. 
      0007F3 03                    1621         .byte 3 
      0007F4 53 3E 44              1622         .ascii "S>D"
      0007F7                       1623 STOD: 
      0007F7 1D 00 02         [ 2] 1624         subw x,#CELLL 
      0007FA 90 5F            [ 1] 1625         clrw y 
      0007FC FF               [ 2] 1626         ldw (x),y 
      0007FD 90 93            [ 1] 1627         ldw y,x 
      0007FF 90 EE 02         [ 2] 1628         ldw y,(2,y)
      000802 2A 05            [ 1] 1629         jrpl 1$ 
      000804 90 AE FF FF      [ 2] 1630         ldw y,#-1
      000808 FF               [ 2] 1631         ldw (x),y 
      000809 81               [ 4] 1632 1$:     ret 
                                   1633 
                                   1634 
                                   1635 
                                   1636 
                                   1637 ;       -       ( n1 n2 -- n1-n2 )
                                   1638 ;       Subtraction.
      00080A 07 F3                 1639         .word      LINK
                           00080C  1640 LINK = . 
      00080C 01                    1641         .byte      1
      00080D 2D                    1642         .ascii     "-"
      00080E                       1643 SUBB:
      00080E 90 93            [ 1] 1644         LDW Y,X
      000810 90 FE            [ 2] 1645         LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      000812 90 BF 24         [ 2] 1646         LDW YTEMP,Y
      000815 1C 00 02         [ 2] 1647         ADDW X,#2
      000818 90 93            [ 1] 1648         LDW Y,X
      00081A 90 FE            [ 2] 1649         LDW Y,(Y)
      00081C 72 B2 00 24      [ 2] 1650         SUBW Y,YTEMP
      000820 FF               [ 2] 1651         LDW (X),Y
      000821 81               [ 4] 1652         RET
                                   1653 
                                   1654 ;       ABS     ( n -- n )
                                   1655 ;       Return  absolute value of n.
      000822 08 0C                 1656         .word      LINK
                           000824  1657 LINK = . 
      000824 03                    1658         .byte      3
      000825 41 42 53              1659         .ascii     "ABS"
      000828                       1660 ABSS:
      000828 90 93            [ 1] 1661         LDW Y,X
      00082A 90 FE            [ 2] 1662 	LDW Y,(Y)
      00082C 2A 03            [ 1] 1663         JRPL     AB1     ;negate:
      00082E 90 50            [ 2] 1664         NEGW     Y     ;else negate hi byte
      000830 FF               [ 2] 1665         LDW (X),Y
      000831 81               [ 4] 1666 AB1:    RET
                                   1667 
                                   1668 ;       =       ( w w -- t )
                                   1669 ;       Return true if top two are =al.
      000832 08 24                 1670         .word      LINK
                           000834  1671 LINK = . 
      000834 01                    1672         .byte      1
      000835 3D                    1673         .ascii     "="
      000836                       1674 EQUAL:
      000836 A6 FF            [ 1] 1675         LD A,#0xFF  ;true
      000838 90 93            [ 1] 1676         LDW Y,X    ;D = n2
      00083A 90 FE            [ 2] 1677         LDW Y,(Y)
      00083C 90 BF 24         [ 2] 1678         LDW YTEMP,Y
      00083F 1C 00 02         [ 2] 1679         ADDW X,#2
      000842 90 93            [ 1] 1680         LDW Y,X
      000844 90 FE            [ 2] 1681         LDW Y,(Y)
      000846 90 B3 24         [ 2] 1682         CPW Y,YTEMP     ;if n2 <> n1
      000849 27 01            [ 1] 1683         JREQ     EQ1
      00084B 4F               [ 1] 1684         CLR A
      00084C F7               [ 1] 1685 EQ1:    LD (X),A
      00084D E7 01            [ 1] 1686         LD (1,X),A
      00084F 81               [ 4] 1687 	RET     
                                   1688 
                                   1689 ;       U<      ( u u -- t )
                                   1690 ;       Unsigned compare of top two items.
      000850 08 34                 1691         .word      LINK
                           000852  1692 LINK = . 
      000852 02                    1693         .byte      2
      000853 55 3C                 1694         .ascii     "U<"
      000855                       1695 ULESS:
      000855 A6 FF            [ 1] 1696         LD A,#0xFF  ;true
      000857 90 93            [ 1] 1697         LDW Y,X    ;D = n2
      000859 90 FE            [ 2] 1698         LDW Y,(Y)
      00085B 90 BF 24         [ 2] 1699         LDW YTEMP,Y
      00085E 1C 00 02         [ 2] 1700         ADDW X,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      000861 90 93            [ 1] 1701         LDW Y,X
      000863 90 FE            [ 2] 1702         LDW Y,(Y)
      000865 90 B3 24         [ 2] 1703         CPW Y,YTEMP     ;if n2 <> n1
      000868 25 01            [ 1] 1704         JRULT     ULES1
      00086A 4F               [ 1] 1705         CLR A
      00086B F7               [ 1] 1706 ULES1:  LD (X),A
      00086C E7 01            [ 1] 1707         LD (1,X),A
      00086E 81               [ 4] 1708 	RET     
                                   1709 
                                   1710 ;       <       ( n1 n2 -- t )
                                   1711 ;       Signed compare of top two items.
      00086F 08 52                 1712         .word      LINK
                           000871  1713 LINK = . 
      000871 01                    1714         .byte      1
      000872 3C                    1715         .ascii     "<"
      000873                       1716 LESS:
      000873 A6 FF            [ 1] 1717         LD A,#0xFF  ;true
      000875 90 93            [ 1] 1718         LDW Y,X    ;D = n2
      000877 90 FE            [ 2] 1719         LDW Y,(Y)
      000879 90 BF 24         [ 2] 1720         LDW YTEMP,Y
      00087C 1C 00 02         [ 2] 1721         ADDW X,#2
      00087F 90 93            [ 1] 1722         LDW Y,X
      000881 90 FE            [ 2] 1723         LDW Y,(Y)
      000883 90 B3 24         [ 2] 1724         CPW Y,YTEMP     ;if n2 <> n1
      000886 2F 01            [ 1] 1725         JRSLT     LT1
      000888 4F               [ 1] 1726         CLR A
      000889 F7               [ 1] 1727 LT1:    LD (X),A
      00088A E7 01            [ 1] 1728         LD (1,X),A
      00088C 81               [ 4] 1729 	RET     
                                   1730 
                                   1731 ;       MAX     ( n n -- n )
                                   1732 ;       Return greater of two top items.
      00088D 08 71                 1733         .word      LINK
                           00088F  1734 LINK = . 
      00088F 03                    1735         .byte      3
      000890 4D 41 58              1736         .ascii     "MAX"
      000893                       1737 MAX:
      000893 90 93            [ 1] 1738         LDW Y,X    ;D = n2
      000895 90 EE 02         [ 2] 1739         LDW Y,(2,Y)
      000898 90 BF 24         [ 2] 1740         LDW YTEMP,Y
      00089B 90 93            [ 1] 1741         LDW Y,X
      00089D 90 FE            [ 2] 1742         LDW Y,(Y)
      00089F 90 B3 24         [ 2] 1743         CPW Y,YTEMP     ;if n2 <> n1
      0008A2 2F 02            [ 1] 1744         JRSLT     MAX1
      0008A4 EF 02            [ 2] 1745         LDW (2,X),Y
      0008A6 1C 00 02         [ 2] 1746 MAX1:   ADDW X,#2
      0008A9 81               [ 4] 1747 	RET     
                                   1748 
                                   1749 ;       MIN     ( n n -- n )
                                   1750 ;       Return smaller of top two items.
      0008AA 08 8F                 1751         .word      LINK
                           0008AC  1752 LINK = . 
      0008AC 03                    1753         .byte      3
      0008AD 4D 49 4E              1754         .ascii     "MIN"
      0008B0                       1755 MIN:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      0008B0 90 93            [ 1] 1756         LDW Y,X    ;D = n2
      0008B2 90 EE 02         [ 2] 1757         LDW Y,(2,Y)
      0008B5 90 BF 24         [ 2] 1758         LDW YTEMP,Y
      0008B8 90 93            [ 1] 1759         LDW Y,X
      0008BA 90 FE            [ 2] 1760         LDW Y,(Y)
      0008BC 90 B3 24         [ 2] 1761         CPW Y,YTEMP     ;if n2 <> n1
      0008BF 2C 02            [ 1] 1762         JRSGT     MIN1
      0008C1 EF 02            [ 2] 1763         LDW (2,X),Y
      0008C3 1C 00 02         [ 2] 1764 MIN1:	ADDW X,#2
      0008C6 81               [ 4] 1765 	RET     
                                   1766 
                                   1767 ;       WITHIN  ( u ul uh -- t )
                                   1768 ;       Return true if u is within
                                   1769 ;       range of ul and uh. ( ul <= u < uh )
      0008C7 08 AC                 1770         .word      LINK
                           0008C9  1771 LINK = . 
      0008C9 06                    1772         .byte      6
      0008CA 57 49 54 48 49 4E     1773         .ascii     "WITHIN"
      0008D0                       1774 WITHI:
      0008D0 CD 05 C4         [ 4] 1775         CALL     OVER
      0008D3 CD 08 0E         [ 4] 1776         CALL     SUBB
      0008D6 CD 05 63         [ 4] 1777         CALL     TOR
      0008D9 CD 08 0E         [ 4] 1778         CALL     SUBB
      0008DC CD 05 44         [ 4] 1779         CALL     RFROM
      0008DF CC 08 55         [ 2] 1780         JP     ULESS
                                   1781 
                                   1782 ;; Divide
                                   1783 
                                   1784 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1785 ;       Unsigned divide of a double by a
                                   1786 ;       single. Return mod and quotient.
      0008E2 08 C9                 1787         .word      LINK
                           0008E4  1788 LINK = . 
      0008E4 06                    1789         .byte      6
      0008E5 55 4D 2F 4D 4F 44     1790         .ascii     "UM/MOD"
      0008EB                       1791 UMMOD:
      0008EB 89               [ 2] 1792         PUSHW   X               ; save stack pointer
      0008EC FE               [ 2] 1793         LDW     X,(X)           ; un
      0008ED BF 24            [ 2] 1794         LDW     YTEMP,X         ; save un
      0008EF 16 01            [ 2] 1795         LDW     Y,(1,SP)        ; X stack pointer
      0008F1 90 EE 04         [ 2] 1796         LDW     Y,(4,Y)         ; Y=udl
      0008F4 1E 01            [ 2] 1797         LDW     X,(1,SP)        ; X
      0008F6 EE 02            [ 2] 1798         LDW     X,(2,X)         ; X=udh
      0008F8 B3 24            [ 2] 1799         CPW     X,YTEMP
      0008FA 25 0D            [ 1] 1800         JRULT   MMSM1           ; X is still on the R-stack
                                   1801 ; division overflow  return q=0,r=-1 
      0008FC 85               [ 2] 1802         POPW    X
      0008FD 5C               [ 1] 1803         INCW    X               ; pop off 1 level
      0008FE 5C               [ 1] 1804         INCW    X               ; ADDW   X,#2
      0008FF 90 AE FF FF      [ 2] 1805         LDW     Y,#0xFFFF
      000903 FF               [ 2] 1806         LDW     (X),Y
      000904 90 5F            [ 1] 1807         CLRW    Y
      000906 EF 02            [ 2] 1808         LDW     (2,X),Y
      000908 81               [ 4] 1809         RET
      000909                       1810 MMSM1:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      000909 A6 11            [ 1] 1811         LD      A,#17           ; loop count
      00090B                       1812 MMSM3:
      00090B B3 24            [ 2] 1813         CPW     X,YTEMP         ; compare udh to un
      00090D 25 05            [ 1] 1814         JRULT   MMSM4           ; can't subtract
      00090F                       1815 MMSMa:
      00090F 72 B0 00 24      [ 2] 1816         SUBW    X,YTEMP         ; can subtract
      000913 98               [ 1] 1817         RCF 
      000914                       1818 MMSM4:
      000914 8C               [ 1] 1819         CCF                     ; quotient bit
      000915 90 59            [ 2] 1820         RLCW    Y               ; rotate into quotient
      000917 59               [ 2] 1821         RLCW    X               ; rotate into remainder
      000918 4A               [ 1] 1822         DEC     A               ; repeat
      000919 27 04            [ 1] 1823         JREQ    MMSMb           ; if A == 0
      00091B 25 F2            [ 1] 1824         JRC     MMSMa           ; if carry out of rotate
      00091D 20 EC            [ 2] 1825         JRA     MMSM3           ;
      00091F                       1826 MMSMb:
      00091F 56               [ 2] 1827         RRCW    X
      000920 BF 24            [ 2] 1828         LDW     YTEMP,X         ; done, save remainder
      000922 85               [ 2] 1829         POPW    X
      000923 5C               [ 1] 1830         INCW    X               ; drop
      000924 5C               [ 1] 1831         INCW    X               ; ADDW   X,#2
      000925 FF               [ 2] 1832         LDW     (X),Y
      000926 90 BE 24         [ 2] 1833         LDW     Y,YTEMP         ; save quotient
      000929 EF 02            [ 2] 1834         LDW     (2,X),Y
      00092B 81               [ 4] 1835         RET
                                   1836 
                                   1837 ;----------------------------------------------	
                                   1838 ;       M/MOD   ( d n -- r q )
                                   1839 ;       Signed floored divide of double by
                                   1840 ;       single. Return mod and quotient.
                                   1841 ;----------------------------------------------	
      00092C 08 E4                 1842         .word      LINK
                           00092E  1843 LINK = . 
      00092E 05                    1844         .byte      5
      00092F 4D 2F 4D 4F 44        1845         .ascii     "M/MOD"
      000934                       1846 MSMOD:  
      000934 CD 05 9A         [ 4] 1847         CALL	DUPP
      000937 CD 05 D3         [ 4] 1848         CALL	ZLESS
      00093A CD 05 9A         [ 4] 1849         CALL	DUPP
      00093D CD 05 63         [ 4] 1850         CALL	TOR
      000940 CD 04 A8         [ 4] 1851         CALL	QBRAN
      000943 09 51                 1852         .word	MMOD1
      000945 CD 07 C0         [ 4] 1853         CALL	NEGAT
      000948 CD 05 63         [ 4] 1854         CALL	TOR
      00094B CD 07 D2         [ 4] 1855         CALL	DNEGA
      00094E CD 05 44         [ 4] 1856         CALL	RFROM
      000951 CD 05 63         [ 4] 1857 MMOD1:	CALL	TOR
      000954 CD 05 9A         [ 4] 1858         CALL	DUPP
      000957 CD 05 D3         [ 4] 1859         CALL	ZLESS
      00095A CD 04 A8         [ 4] 1860         CALL	QBRAN
      00095D 09 65                 1861         .word	MMOD2
      00095F CD 05 57         [ 4] 1862         CALL	RAT
      000962 CD 07 95         [ 4] 1863         CALL	PLUS
      000965 CD 05 44         [ 4] 1864 MMOD2:	CALL	RFROM
      000968 CD 08 EB         [ 4] 1865         CALL	UMMOD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      00096B CD 05 44         [ 4] 1866         CALL	RFROM
      00096E CD 04 A8         [ 4] 1867         CALL	QBRAN
      000971 09 7C                 1868         .word	MMOD3
      000973 CD 05 AA         [ 4] 1869         CALL	SWAPP
      000976 CD 07 C0         [ 4] 1870         CALL	NEGAT
      000979 CD 05 AA         [ 4] 1871         CALL	SWAPP
      00097C 81               [ 4] 1872 MMOD3:	RET
                                   1873 
                                   1874 ;       /MOD    ( n n -- r q )
                                   1875 ;       Signed divide. Return mod and quotient.
      00097D 09 2E                 1876         .word      LINK
                           00097F  1877 LINK = . 
      00097F 04                    1878         .byte      4
      000980 2F 4D 4F 44           1879         .ascii     "/MOD"
      000984                       1880 SLMOD:
      000984 CD 05 C4         [ 4] 1881         CALL	OVER
      000987 CD 05 D3         [ 4] 1882         CALL	ZLESS
      00098A CD 05 AA         [ 4] 1883         CALL	SWAPP
      00098D CC 09 34         [ 2] 1884         JP	MSMOD
                                   1885 
                                   1886 ;       MOD     ( n n -- r )
                                   1887 ;       Signed divide. Return mod only.
      000990 09 7F                 1888         .word      LINK
                           000992  1889 LINK = . 
      000992 03                    1890         .byte      3
      000993 4D 4F 44              1891         .ascii     "MOD"
      000996                       1892 MODD:
      000996 CD 09 84         [ 4] 1893 	CALL	SLMOD
      000999 CC 05 90         [ 2] 1894 	JP	DROP
                                   1895 
                                   1896 ;       /       ( n n -- q )
                                   1897 ;       Signed divide. Return quotient only.
      00099C 09 92                 1898         .word      LINK
                           00099E  1899 LINK = . 
      00099E 01                    1900         .byte      1
      00099F 2F                    1901         .ascii     "/"
      0009A0                       1902 SLASH:
      0009A0 CD 09 84         [ 4] 1903         CALL	SLMOD
      0009A3 CD 05 AA         [ 4] 1904         CALL	SWAPP
      0009A6 CC 05 90         [ 2] 1905         JP	DROP
                                   1906 
                                   1907 ;; Multiply
                                   1908 
                                   1909 ;       UM*     ( u u -- ud )
                                   1910 ;       Unsigned multiply. Return double product.
      0009A9 09 9E                 1911         .word      LINK
                           0009AB  1912 LINK = . 
      0009AB 03                    1913         .byte      3
      0009AC 55 4D 2A              1914         .ascii     "UM*"
      0009AF                       1915 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
                                   1916 ; take advantage of SP addressing modes
                                   1917 ; these PRODx in RAM are not required
                                   1918 ; the product is kept on stack as local variable 
                                   1919         ;; bytes offset on data stack 
                           000002  1920         da=2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                           000003  1921         db=3 
                           000000  1922         dc=0 
                           000001  1923         dd=1 
                                   1924         ;; product bytes offset on return stack 
                           000001  1925         UD1=1  ; ud bits 31..24
                           000002  1926         UD2=2  ; ud bits 23..16
                           000003  1927         UD3=3  ; ud bits 15..8 
                           000004  1928         UD4=4  ; ud bits 7..0 
                                   1929         ;; local variable for product set to zero   
      0009AF 90 5F            [ 1] 1930         clrw y 
      0009B1 90 89            [ 2] 1931         pushw y  ; bits 15..0
      0009B3 90 89            [ 2] 1932         pushw y  ; bits 31..16 
      0009B5 E6 03            [ 1] 1933         ld a,(db,x) ; b 
      0009B7 90 97            [ 1] 1934         ld yl,a 
      0009B9 E6 01            [ 1] 1935         ld a,(dd,x)   ; d
      0009BB 90 42            [ 4] 1936         mul y,a    ; b*d  
      0009BD 17 03            [ 2] 1937         ldw (UD3,sp),y ; lowest weight product 
      0009BF E6 03            [ 1] 1938         ld a,(db,x)
      0009C1 90 97            [ 1] 1939         ld yl,a 
      0009C3 E6 00            [ 1] 1940         ld a,(dc,x)
      0009C5 90 42            [ 4] 1941         mul y,a  ; b*c 
                                   1942         ;;; do the partial sum 
      0009C7 72 F9 02         [ 2] 1943         addw y,(UD2,sp)
      0009CA 4F               [ 1] 1944         clr a 
      0009CB 49               [ 1] 1945         rlc a
      0009CC 6B 01            [ 1] 1946         ld (UD1,sp),a 
      0009CE 17 02            [ 2] 1947         ldw (UD2,sp),y 
      0009D0 E6 02            [ 1] 1948         ld a,(da,x)
      0009D2 90 97            [ 1] 1949         ld yl,a 
      0009D4 E6 01            [ 1] 1950         ld a,(dd,x)
      0009D6 90 42            [ 4] 1951         mul y,a   ; a*d 
                                   1952         ;; do partial sum 
      0009D8 72 F9 02         [ 2] 1953         addw y,(UD2,sp)
      0009DB 4F               [ 1] 1954         clr a 
      0009DC 19 01            [ 1] 1955         adc a,(UD1,sp)
      0009DE 6B 01            [ 1] 1956         ld (UD1,sp),a  
      0009E0 17 02            [ 2] 1957         ldw (UD2,sp),y 
      0009E2 E6 02            [ 1] 1958         ld a,(da,x)
      0009E4 90 97            [ 1] 1959         ld yl,a 
      0009E6 E6 00            [ 1] 1960         ld a,(dc,x)
      0009E8 90 42            [ 4] 1961         mul y,a  ;  a*c highest weight product 
                                   1962         ;;; do partial sum 
      0009EA 72 F9 01         [ 2] 1963         addw y,(UD1,sp)
      0009ED FF               [ 2] 1964         ldw (x),y  ; udh 
      0009EE 16 03            [ 2] 1965         ldw y,(UD3,sp)
      0009F0 EF 02            [ 2] 1966         ldw (2,x),y  ; udl  
      0009F2 5B 04            [ 2] 1967         addw sp,#4 ; drop local variable 
      0009F4 81               [ 4] 1968         ret  
                                   1969 
                                   1970 
                                   1971 ;       *       ( n n -- n )
                                   1972 ;       Signed multiply. Return single product.
      0009F5 09 AB                 1973         .word      LINK
                           0009F7  1974 LINK = . 
      0009F7 01                    1975         .byte      1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      0009F8 2A                    1976         .ascii     "*"
      0009F9                       1977 STAR:
      0009F9 CD 09 AF         [ 4] 1978 	CALL	UMSTA
      0009FC CC 05 90         [ 2] 1979 	JP	DROP
                                   1980 
                                   1981 ;       M*      ( n n -- d )
                                   1982 ;       Signed multiply. Return double product.
      0009FF 09 F7                 1983         .word      LINK
                           000A01  1984 LINK = . 
      000A01 02                    1985         .byte      2
      000A02 4D 2A                 1986         .ascii     "M*"
      000A04                       1987 MSTAR:      
      000A04 CD 07 80         [ 4] 1988         CALL	DDUP
      000A07 CD 06 0F         [ 4] 1989         CALL	XORR
      000A0A CD 05 D3         [ 4] 1990         CALL	ZLESS
      000A0D CD 05 63         [ 4] 1991         CALL	TOR
      000A10 CD 08 28         [ 4] 1992         CALL	ABSS
      000A13 CD 05 AA         [ 4] 1993         CALL	SWAPP
      000A16 CD 08 28         [ 4] 1994         CALL	ABSS
      000A19 CD 09 AF         [ 4] 1995         CALL	UMSTA
      000A1C CD 05 44         [ 4] 1996         CALL	RFROM
      000A1F CD 04 A8         [ 4] 1997         CALL	QBRAN
      000A22 0A 27                 1998         .word	MSTA1
      000A24 CD 07 D2         [ 4] 1999         CALL	DNEGA
      000A27 81               [ 4] 2000 MSTA1:	RET
                                   2001 
                                   2002 ;       */MOD   ( n1 n2 n3 -- r q )
                                   2003 ;       Multiply n1 and n2, then divide
                                   2004 ;       by n3. Return mod and quotient.
      000A28 0A 01                 2005         .word      LINK
                           000A2A  2006 LINK = . 
      000A2A 05                    2007         .byte      5
      000A2B 2A 2F 4D 4F 44        2008         .ascii     "*/MOD"
      000A30                       2009 SSMOD:
      000A30 CD 05 63         [ 4] 2010         CALL     TOR
      000A33 CD 0A 04         [ 4] 2011         CALL     MSTAR
      000A36 CD 05 44         [ 4] 2012         CALL     RFROM
      000A39 CC 09 34         [ 2] 2013         JP     MSMOD
                                   2014 
                                   2015 ;       */      ( n1 n2 n3 -- q )
                                   2016 ;       Multiply n1 by n2, then divide
                                   2017 ;       by n3. Return quotient only.
      000A3C 0A 2A                 2018         .word      LINK
                           000A3E  2019 LINK = . 
      000A3E 02                    2020         .byte      2
      000A3F 2A 2F                 2021         .ascii     "*/"
      000A41                       2022 STASL:
      000A41 CD 0A 30         [ 4] 2023         CALL	SSMOD
      000A44 CD 05 AA         [ 4] 2024         CALL	SWAPP
      000A47 CC 05 90         [ 2] 2025         JP	DROP
                                   2026 
                                   2027 ;; Miscellaneous
                                   2028 
                                   2029 ;       CELL+   ( a -- a )
                                   2030 ;       Add cell size in byte to address.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000A4A 0A 3E                 2031         .word      LINK
                           000A4C  2032 LINK = . 
      000A4C 02                    2033         .byte       2
      000A4D 32 2B                 2034         .ascii     "2+"
      000A4F                       2035 CELLP:
      000A4F 90 93            [ 1] 2036         LDW Y,X
      000A51 90 FE            [ 2] 2037 	LDW Y,(Y)
      000A53 72 A9 00 02      [ 2] 2038         ADDW Y,#CELLL 
      000A57 FF               [ 2] 2039         LDW (X),Y
      000A58 81               [ 4] 2040         RET
                                   2041 
                                   2042 ;       CELL-   ( a -- a )
                                   2043 ;       Subtract 2 from address.
      000A59 0A 4C                 2044         .word      LINK
                           000A5B  2045 LINK = . 
      000A5B 02                    2046         .byte       2
      000A5C 32 2D                 2047         .ascii     "2-"
      000A5E                       2048 CELLM:
      000A5E 90 93            [ 1] 2049         LDW Y,X
      000A60 90 FE            [ 2] 2050 	LDW Y,(Y)
      000A62 72 A2 00 02      [ 2] 2051         SUBW Y,#CELLL
      000A66 FF               [ 2] 2052         LDW (X),Y
      000A67 81               [ 4] 2053         RET
                                   2054 
                                   2055 ;       CELLS   ( n -- n )
                                   2056 ;       Multiply tos by 2.
      000A68 0A 5B                 2057         .word      LINK
                           000A6A  2058 LINK = . 
      000A6A 02                    2059         .byte       2
      000A6B 32 2A                 2060         .ascii     "2*"
      000A6D                       2061 CELLS:
      000A6D 90 93            [ 1] 2062         LDW Y,X
      000A6F 90 FE            [ 2] 2063 	LDW Y,(Y)
      000A71 90 58            [ 2] 2064         SLAW Y
      000A73 FF               [ 2] 2065         LDW (X),Y
      000A74 81               [ 4] 2066         RET
                                   2067 
                                   2068 ;       1+      ( a -- a )
                                   2069 ;       Add cell size in byte to address.
      000A75 0A 6A                 2070         .word      LINK
                           000A77  2071 LINK = . 
      000A77 02                    2072         .byte      2
      000A78 31 2B                 2073         .ascii     "1+"
      000A7A                       2074 ONEP:
      000A7A 90 93            [ 1] 2075         LDW Y,X
      000A7C 90 FE            [ 2] 2076 	LDW Y,(Y)
      000A7E 90 5C            [ 1] 2077         INCW Y
      000A80 FF               [ 2] 2078         LDW (X),Y
      000A81 81               [ 4] 2079         RET
                                   2080 
                                   2081 ;       1-      ( a -- a )
                                   2082 ;       Subtract 2 from address.
      000A82 0A 77                 2083         .word      LINK
                           000A84  2084 LINK = . 
      000A84 02                    2085         .byte      2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000A85 31 2D                 2086         .ascii     "1-"
      000A87                       2087 ONEM:
      000A87 90 93            [ 1] 2088         LDW Y,X
      000A89 90 FE            [ 2] 2089 	LDW Y,(Y)
      000A8B 90 5A            [ 2] 2090         DECW Y
      000A8D FF               [ 2] 2091         LDW (X),Y
      000A8E 81               [ 4] 2092         RET
                                   2093 
                                   2094 ;  shift left n times 
                                   2095 ; LSHIFT ( n1 n2 -- n1<<n2 )
      000A8F 0A 84                 2096         .word LINK 
                           000A91  2097         LINK=.
      000A91 06                    2098         .byte 6 
      000A92 4C 53 48 49 46 54     2099         .ascii "LSHIFT"
      000A98                       2100 LSHIFT:
      000A98 E6 01            [ 1] 2101         ld a,(1,x)
      000A9A 1C 00 02         [ 2] 2102         addw x,#CELLL 
      000A9D 90 93            [ 1] 2103         ldw y,x 
      000A9F 90 FE            [ 2] 2104         ldw y,(y)
      000AA1                       2105 LSHIFT1:
      000AA1 4D               [ 1] 2106         tnz a 
      000AA2 27 05            [ 1] 2107         jreq LSHIFT4 
      000AA4 90 58            [ 2] 2108         sllw y 
      000AA6 4A               [ 1] 2109         dec a 
      000AA7 20 F8            [ 2] 2110         jra LSHIFT1 
      000AA9                       2111 LSHIFT4:
      000AA9 FF               [ 2] 2112         ldw (x),y 
      000AAA 81               [ 4] 2113         ret 
                                   2114 
                                   2115 ; shift right n times                 
                                   2116 ; RSHIFT (n1 n2 -- n1>>n2 )
      000AAB 0A 91                 2117         .word LINK 
                           000AAD  2118         LINK=.
      000AAD 06                    2119         .byte 6
      000AAE 52 53 48 49 46 54     2120         .ascii "RSHIFT"
      000AB4                       2121 RSHIFT:
      000AB4 E6 01            [ 1] 2122         ld a,(1,x)
      000AB6 1C 00 02         [ 2] 2123         addw x,#CELLL 
      000AB9 90 93            [ 1] 2124         ldw y,x 
      000ABB 90 FE            [ 2] 2125         ldw y,(y)
      000ABD                       2126 RSHIFT1:
      000ABD 4D               [ 1] 2127         tnz a 
      000ABE 27 05            [ 1] 2128         jreq RSHIFT4 
      000AC0 90 54            [ 2] 2129         srlw y 
      000AC2 4A               [ 1] 2130         dec a 
      000AC3 20 F8            [ 2] 2131         jra RSHIFT1 
      000AC5                       2132 RSHIFT4:
      000AC5 FF               [ 2] 2133         ldw (x),y 
      000AC6 81               [ 4] 2134         ret 
                                   2135 
                                   2136 
                                   2137 ;       2/      ( n -- n )
                                   2138 ;       divide  tos by 2.
      000AC7 0A AD                 2139         .word      LINK
                           000AC9  2140 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000AC9 02                    2141         .byte      2
      000ACA 32 2F                 2142         .ascii     "2/"
      000ACC                       2143 TWOSL:
      000ACC 90 93            [ 1] 2144         LDW Y,X
      000ACE 90 FE            [ 2] 2145 	LDW Y,(Y)
      000AD0 90 57            [ 2] 2146         SRAW Y
      000AD2 FF               [ 2] 2147         LDW (X),Y
      000AD3 81               [ 4] 2148         RET
                                   2149 
                                   2150 ;       BL      ( -- 32 )
                                   2151 ;       Return 32,  blank character.
      000AD4 0A C9                 2152         .word      LINK
                           000AD6  2153 LINK = . 
      000AD6 02                    2154         .byte      2
      000AD7 42 4C                 2155         .ascii     "BL"
      000AD9                       2156 BLANK:
      000AD9 1D 00 02         [ 2] 2157         SUBW X,#2
      000ADC 90 AE 00 20      [ 2] 2158 	LDW Y,#32
      000AE0 FF               [ 2] 2159         LDW (X),Y
      000AE1 81               [ 4] 2160         RET
                                   2161 
                                   2162 ;         0     ( -- 0)
                                   2163 ;         Return 0.
      000AE2 0A D6                 2164         .word      LINK
                           000AE4  2165 LINK = . 
      000AE4 01                    2166         .byte       1
      000AE5 30                    2167         .ascii     "0"
      000AE6                       2168 ZERO:
      000AE6 1D 00 02         [ 2] 2169         SUBW X,#2
      000AE9 90 5F            [ 1] 2170 	CLRW Y
      000AEB FF               [ 2] 2171         LDW (X),Y
      000AEC 81               [ 4] 2172         RET
                                   2173 
                                   2174 ;         1     ( -- 1)
                                   2175 ;         Return 1.
      000AED 0A E4                 2176         .word      LINK
                           000AEF  2177 LINK = . 
      000AEF 01                    2178         .byte       1
      000AF0 31                    2179         .ascii     "1"
      000AF1                       2180 ONE:
      000AF1 1D 00 02         [ 2] 2181         SUBW X,#2
      000AF4 90 AE 00 01      [ 2] 2182 	LDW Y,#1
      000AF8 FF               [ 2] 2183         LDW (X),Y
      000AF9 81               [ 4] 2184         RET
                                   2185 
                                   2186 ;         -1    ( -- -1)
                                   2187 ;         Return 32,  blank character.
      000AFA 0A EF                 2188         .word      LINK
                           000AFC  2189 LINK = . 
      000AFC 02                    2190         .byte       2
      000AFD 2D 31                 2191         .ascii     "-1"
      000AFF                       2192 MONE:
      000AFF 1D 00 02         [ 2] 2193         SUBW X,#2
      000B02 90 AE FF FF      [ 2] 2194 	LDW Y,#0xFFFF
      000B06 FF               [ 2] 2195         LDW (X),Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000B07 81               [ 4] 2196         RET
                                   2197 
                                   2198 ;       >CHAR   ( c -- c )
                                   2199 ;       Filter non-printing characters.
      000B08 0A FC                 2200         .word      LINK
                           000B0A  2201 LINK = . 
      000B0A 05                    2202         .byte      5
      000B0B 3E 43 48 41 52        2203         .ascii     ">CHAR"
      000B10                       2204 TCHAR:
      000B10 E6 01            [ 1] 2205         ld a,(1,x)
      000B12 A1 20            [ 1] 2206         cp a,#32  
      000B14 2B 05            [ 1] 2207         jrmi 1$ 
      000B16 A1 7F            [ 1] 2208         cp a,#127 
      000B18 2A 01            [ 1] 2209         jrpl 1$ 
      000B1A 81               [ 4] 2210         ret 
      000B1B A6 5F            [ 1] 2211 1$:     ld a,#'_ 
      000B1D E7 01            [ 1] 2212         ld (1,x),a 
      000B1F 81               [ 4] 2213         ret 
                                   2214 
                                   2215 ;       DEPTH   ( -- n )
                                   2216 ;       Return  depth of  data stack.
      000B20 0B 0A                 2217         .word      LINK
                           000B22  2218 LINK = . 
      000B22 05                    2219         .byte      5
      000B23 44 45 50 54 48        2220         .ascii     "DEPTH"
      000B28                       2221 DEPTH: 
      000B28 90 BE 2A         [ 2] 2222         LDW Y,SP0    ;save data stack ptr
      000B2B BF 22            [ 2] 2223 	LDW XTEMP,X
      000B2D 72 B2 00 22      [ 2] 2224         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000B31 90 57            [ 2] 2225         SRAW Y    ;Y = #stack items
      000B33 1D 00 02         [ 2] 2226 	SUBW X,#2
      000B36 FF               [ 2] 2227         LDW (X),Y     ; if neg, underflow
      000B37 81               [ 4] 2228         RET
                                   2229 
                                   2230 ;       PICK    ( ... +n -- ... w )
                                   2231 ;       Copy  nth stack item to tos.
      000B38 0B 22                 2232         .word      LINK
                           000B3A  2233 LINK = . 
      000B3A 04                    2234         .byte      4
      000B3B 50 49 43 4B           2235         .ascii     "PICK"
      000B3F                       2236 PICK:
      000B3F 90 93            [ 1] 2237         LDW Y,X   ;D = n1
      000B41 90 FE            [ 2] 2238         LDW Y,(Y)
                                   2239 ; modified for standard compliance          
                                   2240 ; 0 PICK must be equivalent to DUP 
      000B43 90 5C            [ 1] 2241         INCW Y 
      000B45 90 58            [ 2] 2242         SLAW Y
      000B47 BF 22            [ 2] 2243         LDW XTEMP,X
      000B49 72 B9 00 22      [ 2] 2244         ADDW Y,XTEMP
      000B4D 90 FE            [ 2] 2245         LDW Y,(Y)
      000B4F FF               [ 2] 2246         LDW (X),Y
      000B50 81               [ 4] 2247         RET
                                   2248 
                                   2249 ;; Memory access
                                   2250 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                   2251 ;       +!      ( n a -- )
                                   2252 ;       Add n to  contents at address a.
      000B51 0B 3A                 2253         .word      LINK
                           000B53  2254 LINK = . 
      000B53 02                    2255         .byte      2
      000B54 2B 21                 2256         .ascii     "+!"
      000B56                       2257 PSTOR:
      000B56 90 93            [ 1] 2258         ldw y,x 
      000B58 90 FE            [ 2] 2259         ldw y,(y)
      000B5A 90 BF 24         [ 2] 2260         ldw YTEMP,y  ; address
      000B5D 90 FE            [ 2] 2261         ldw y,(y)  
      000B5F 90 89            [ 2] 2262         pushw y  ; value at address 
      000B61 90 93            [ 1] 2263         ldw y,x 
      000B63 90 EE 02         [ 2] 2264         ldw y,(2,y) ; n 
      000B66 72 F9 01         [ 2] 2265         addw y,(1,sp) ; n+value
      000B69 91 CF 24         [ 5] 2266         ldw [YTEMP],y ;  a!
      000B6C 90 85            [ 2] 2267         popw y    ;drop local var
      000B6E 1C 00 04         [ 2] 2268         addw x,#4 ; DDROP 
      000B71 81               [ 4] 2269         ret 
                                   2270 
                                   2271 ;       2!      ( d a -- )
                                   2272 ;       Store  double integer to address a.
      000B72 0B 53                 2273         .word      LINK
                           000B74  2274 LINK = . 
      000B74 02                    2275         .byte      2
      000B75 32 21                 2276         .ascii     "2!"
      000B77                       2277 DSTOR:
      000B77 90 93            [ 1] 2278         ldw y,x 
      000B79 90 FE            [ 2] 2279         ldw y,(y)
      000B7B 90 BF 24         [ 2] 2280         ldw YTEMP,y ; address 
      000B7E 1C 00 02         [ 2] 2281         addw x,#CELLL ; drop a 
      000B81 90 93            [ 1] 2282         ldw y,x 
      000B83 90 FE            [ 2] 2283         ldw y,(y) ; hi word 
      000B85 89               [ 2] 2284         pushw x 
      000B86 EE 02            [ 2] 2285         ldw x,(2,x) ; lo word 
      000B88 91 CF 24         [ 5] 2286         ldw [YTEMP],y
      000B8B 90 93            [ 1] 2287         ldw y,x 
      000B8D AE 00 02         [ 2] 2288         ldw x,#2 
      000B90 92 DF 24         [ 5] 2289         ldw ([YTEMP],x),y 
      000B93 85               [ 2] 2290         popw x 
      000B94 1C 00 04         [ 2] 2291         addw x,#4 ; DDROP 
      000B97 81               [ 4] 2292         ret 
                                   2293 
                                   2294 ;       2@      ( a -- d )
                                   2295 ;       Fetch double integer from address a.
      000B98 0B 74                 2296         .word      LINK
                           000B9A  2297 LINK = . 
      000B9A 02                    2298         .byte      2
      000B9B 32 40                 2299         .ascii     "2@"
      000B9D                       2300 DAT:
      000B9D 90 93            [ 1] 2301         ldw y,x 
      000B9F 90 FE            [ 2] 2302         ldw y,(y) ;address 
      000BA1 90 BF 24         [ 2] 2303         ldw YTEMP,y 
      000BA4 1D 00 02         [ 2] 2304         subw x,#CELLL ; space for udh 
      000BA7 91 CE 24         [ 5] 2305         ldw y,[YTEMP] ; udh 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000BAA FF               [ 2] 2306         ldw (x),y 
      000BAB 90 AE 00 02      [ 2] 2307         ldw y,#2
      000BAF 91 DE 24         [ 5] 2308         ldw y,([YTEMP],y) ; udl 
      000BB2 EF 02            [ 2] 2309         ldw (2,x),y
      000BB4 81               [ 4] 2310         ret 
                                   2311 
                                   2312 ;       COUNT   ( b -- b +n )
                                   2313 ;       Return count byte of a string
                                   2314 ;       and add 1 to byte address.
      000BB5 0B 9A                 2315         .word      LINK
                           000BB7  2316 LINK = . 
      000BB7 05                    2317         .byte      5
      000BB8 43 4F 55 4E 54        2318         .ascii     "COUNT"
      000BBD                       2319 COUNT:
      000BBD 90 93            [ 1] 2320         ldw y,x 
      000BBF 90 FE            [ 2] 2321         ldw y,(y) ; address 
      000BC1 90 F6            [ 1] 2322         ld a,(y)  ; count 
      000BC3 90 5C            [ 1] 2323         incw y 
      000BC5 FF               [ 2] 2324         ldw (x),y 
      000BC6 1D 00 02         [ 2] 2325         subw x,#CELLL 
      000BC9 E7 01            [ 1] 2326         ld (1,x),a 
      000BCB 7F               [ 1] 2327         clr (x)
      000BCC 81               [ 4] 2328         ret 
                                   2329 
                                   2330 ;       HERE    ( -- a )
                                   2331 ;       Return  top of  variables
      000BCD 0B B7                 2332         .word      LINK
                           000BCF  2333 LINK = . 
      000BCF 04                    2334         .byte      4
      000BD0 48 45 52 45           2335         .ascii     "HERE"
      000BD4                       2336 HERE:
      000BD4 90 AE 00 16      [ 2] 2337       	ldw y,#UVP 
      000BD8 90 FE            [ 2] 2338         ldw y,(y)
      000BDA 1D 00 02         [ 2] 2339         subw x,#CELLL 
      000BDD FF               [ 2] 2340         ldw (x),y 
      000BDE 81               [ 4] 2341         ret 
                                   2342 
                                   2343 ;       PAD     ( -- a )
                                   2344 ;       Return address of text buffer
                                   2345 ;       above  code dictionary.
      000BDF 0B CF                 2346         .word      LINK
                           000BE1  2347 LINK = . 
      000BE1 03                    2348         .byte      3
      000BE2 50 41 44              2349         .ascii     "PAD"
      000BE5                       2350 PAD:
      000BE5 CD 0B D4         [ 4] 2351         CALL     HERE
      000BE8 CD 04 75         [ 4] 2352         CALL     DOLIT
      000BEB 00 50                 2353         .word      80
      000BED CC 07 95         [ 2] 2354         JP     PLUS
                                   2355 
                                   2356 ;       TIB     ( -- a )
                                   2357 ;       Return address of terminal input buffer.
      000BF0 0B E1                 2358         .word      LINK
                           000BF2  2359 LINK = . 
      000BF2 03                    2360         .byte      3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000BF3 54 49 42              2361         .ascii     "TIB"
      000BF6                       2362 TIB:
      000BF6 CD 06 85         [ 4] 2363         CALL     NTIB
      000BF9 CD 0A 4F         [ 4] 2364         CALL     CELLP
      000BFC CC 04 F3         [ 2] 2365         JP     AT
                                   2366 
                                   2367 ;       @EXECUTE        ( a -- )
                                   2368 ;       Execute vector stored in address a.
      000BFF 0B F2                 2369         .word      LINK
                           000C01  2370 LINK = . 
      000C01 08                    2371         .byte      8
      000C02 40 45 58 45 43 55 54  2372         .ascii     "@EXECUTE"
             45
      000C0A                       2373 ATEXE:
      000C0A CD 04 F3         [ 4] 2374         CALL     AT
      000C0D CD 07 44         [ 4] 2375         CALL     QDUP    ;?address or zero
      000C10 CD 04 A8         [ 4] 2376         CALL     QBRAN
      000C13 0C 18                 2377         .word      EXE1
      000C15 CD 04 CF         [ 4] 2378         CALL     EXECU   ;execute if non-zero
      000C18 81               [ 4] 2379 EXE1:   RET     ;do nothing if zero
                                   2380 
                                   2381 ;       CMOVE   ( b1 b2 u -- )
                                   2382 ;       Copy u bytes from b1 to b2.
      000C19 0C 01                 2383         .word      LINK
                           000C1B  2384 LINK = . 
      000C1B 05                    2385         .byte      5
      000C1C 43 4D 4F 56 45        2386         .ascii     "CMOVE"
      000C21                       2387 CMOVE:
      000C21 CD 05 63         [ 4] 2388         CALL	TOR
      000C24 CD 04 BF         [ 4] 2389         CALL	BRAN
      000C27 0C 41                 2390         .word	CMOV2
      000C29 CD 05 63         [ 4] 2391 CMOV1:	CALL	TOR
      000C2C CD 05 9A         [ 4] 2392         CALL	DUPP
      000C2F CD 05 11         [ 4] 2393         CALL	CAT
      000C32 CD 05 57         [ 4] 2394         CALL	RAT
      000C35 CD 05 00         [ 4] 2395         CALL	CSTOR
      000C38 CD 0A 7A         [ 4] 2396         CALL	ONEP
      000C3B CD 05 44         [ 4] 2397         CALL	RFROM
      000C3E CD 0A 7A         [ 4] 2398         CALL	ONEP
      000C41 CD 04 89         [ 4] 2399 CMOV2:	CALL	DONXT
      000C44 0C 29                 2400         .word	CMOV1
      000C46 CC 07 75         [ 2] 2401         JP	DDROP
                                   2402 
                                   2403 ;       FILL    ( b u c -- )
                                   2404 ;       Fill u bytes of character c
                                   2405 ;       to area beginning at b.
      000C49 0C 1B                 2406         .word       LINK
                           000C4B  2407 LINK = . 
      000C4B 04                    2408         .byte       4
      000C4C 46 49 4C 4C           2409         .ascii     "FILL"
      000C50                       2410 FILL:
      000C50 90 93            [ 1] 2411         ldw y,x 
      000C52 90 E6 01         [ 1] 2412         ld a,(1,y) ; c 
      000C55 1C 00 02         [ 2] 2413         addw x,#CELLL ; drop c 
      000C58 90 93            [ 1] 2414         ldw y,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000C5A 90 FE            [ 2] 2415         ldw y,(y) ; count
      000C5C 90 89            [ 2] 2416         pushw y 
      000C5E 1C 00 02         [ 2] 2417         addw x,#CELLL ; drop u 
      000C61 90 93            [ 1] 2418         ldw y,x 
      000C63 1C 00 02         [ 2] 2419         addw x,#CELLL ; drop b 
      000C66 90 FE            [ 2] 2420         ldw y,(y) ; address
      000C68 90 BF 24         [ 2] 2421         ldw YTEMP,y
      000C6B 90 85            [ 2] 2422         popw y ; count 
      000C6D                       2423 FILL1:  
      000C6D 92 C7 24         [ 4] 2424         ld [YTEMP],a 
      000C70 3C 25            [ 1] 2425         inc YTEMP+1
      000C72 24 02            [ 1] 2426         jrnc FILL2 
      000C74 3C 24            [ 1] 2427         inc YTEMP
      000C76                       2428 FILL2: 
      000C76 90 5A            [ 2] 2429         decw y ; count 
      000C78 26 F3            [ 1] 2430         jrne FILL1  
      000C7A 81               [ 4] 2431         ret 
                                   2432 
                                   2433 ;       ERASE   ( b u -- )
                                   2434 ;       Erase u bytes beginning at b.
      000C7B 0C 4B                 2435         .word      LINK
                           000C7D  2436 LINK = . 
      000C7D 05                    2437         .byte      5
      000C7E 45 52 41 53 45        2438         .ascii     "ERASE"
      000C83                       2439 ERASE:
      000C83 90 5F            [ 1] 2440         clrw y 
      000C85 1D 00 02         [ 2] 2441         subw x,#CELLL 
      000C88 FF               [ 2] 2442         ldw (x),y 
      000C89 CC 0C 50         [ 2] 2443         jp FILL 
                                   2444 
                                   2445 
                                   2446 ;       PACK0   ( b u a -- a )
                                   2447 ;       Build a counted string with
                                   2448 ;       u characters from b. Null fill.
      000C8C 0C 7D                 2449         .word      LINK
                           000C8E  2450 LINK = . 
      000C8E 05                    2451         .byte      5
      000C8F 50 41 43 4B 30        2452         .ascii     "PACK0"
      000C94                       2453 PACKS:
      000C94 CD 05 9A         [ 4] 2454         CALL     DUPP
      000C97 CD 05 63         [ 4] 2455         CALL     TOR     ;strings only on cell boundary
      000C9A CD 07 80         [ 4] 2456         CALL     DDUP
      000C9D CD 05 00         [ 4] 2457         CALL     CSTOR
      000CA0 CD 0A 7A         [ 4] 2458         CALL     ONEP ;save count
      000CA3 CD 05 AA         [ 4] 2459         CALL     SWAPP
      000CA6 CD 0C 21         [ 4] 2460         CALL     CMOVE
      000CA9 CD 05 44         [ 4] 2461         CALL     RFROM
      000CAC 81               [ 4] 2462         RET
                                   2463 
                                   2464 ;; Numeric output, single precision
                                   2465 
                                   2466 ;       DIGIT   ( u -- c )
                                   2467 ;       Convert digit u to a character.
      000CAD 0C 8E                 2468         .word      LINK
                           000CAF  2469 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000CAF 05                    2470         .byte      5
      000CB0 44 49 47 49 54        2471         .ascii     "DIGIT"
      000CB5                       2472 DIGIT:
      000CB5 CD 04 75         [ 4] 2473         CALL	DOLIT
      000CB8 00 09                 2474         .word	9
      000CBA CD 05 C4         [ 4] 2475         CALL	OVER
      000CBD CD 08 73         [ 4] 2476         CALL	LESS
      000CC0 CD 04 75         [ 4] 2477         CALL	DOLIT
      000CC3 00 07                 2478         .word	7
      000CC5 CD 05 E6         [ 4] 2479         CALL	ANDD
      000CC8 CD 07 95         [ 4] 2480         CALL	PLUS
      000CCB CD 04 75         [ 4] 2481         CALL	DOLIT
      000CCE 00 30                 2482         .word	48	;'0'
      000CD0 CC 07 95         [ 2] 2483         JP	PLUS
                                   2484 
                                   2485 ;       EXTRACT ( n base -- n c )
                                   2486 ;       Extract least significant digit from n.
      000CD3 0C AF                 2487         .word      LINK
                           000CD5  2488 LINK = . 
      000CD5 07                    2489         .byte      7
      000CD6 45 58 54 52 41 43 54  2490         .ascii     "EXTRACT"
      000CDD                       2491 EXTRC:
      000CDD CD 0A E6         [ 4] 2492         CALL     ZERO
      000CE0 CD 05 AA         [ 4] 2493         CALL     SWAPP
      000CE3 CD 08 EB         [ 4] 2494         CALL     UMMOD
      000CE6 CD 05 AA         [ 4] 2495         CALL     SWAPP
      000CE9 CC 0C B5         [ 2] 2496         JP     DIGIT
                                   2497 
                                   2498 ;       <#      ( -- )
                                   2499 ;       Initiate  numeric output process.
      000CEC 0C D5                 2500         .word      LINK
                           000CEE  2501 LINK = . 
      000CEE 02                    2502         .byte      2
      000CEF 3C 23                 2503         .ascii     "<#"
      000CF1                       2504 BDIGS:
      000CF1 CD 0B E5         [ 4] 2505         CALL     PAD
      000CF4 CD 06 C7         [ 4] 2506         CALL     HLD
      000CF7 CC 04 DC         [ 2] 2507         JP     STORE
                                   2508 
                                   2509 ;       HOLD    ( c -- )
                                   2510 ;       Insert a character into output string.
      000CFA 0C EE                 2511         .word      LINK
                           000CFC  2512 LINK = . 
      000CFC 04                    2513         .byte      4
      000CFD 48 4F 4C 44           2514         .ascii     "HOLD"
      000D01                       2515 HOLD:
      000D01 CD 06 C7         [ 4] 2516         CALL     HLD
      000D04 CD 04 F3         [ 4] 2517         CALL     AT
      000D07 CD 0A 87         [ 4] 2518         CALL     ONEM
      000D0A CD 05 9A         [ 4] 2519         CALL     DUPP
      000D0D CD 06 C7         [ 4] 2520         CALL     HLD
      000D10 CD 04 DC         [ 4] 2521         CALL     STORE
      000D13 CC 05 00         [ 2] 2522         JP     CSTOR
                                   2523 
                                   2524 ;       #       ( u -- u )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



                                   2525 ;       Extract one digit from u and
                                   2526 ;       append digit to output string.
      000D16 0C FC                 2527         .word      LINK
                           000D18  2528 LINK = . 
      000D18 01                    2529         .byte      1
      000D19 23                    2530         .ascii     "#"
      000D1A                       2531 DIG:
      000D1A CD 06 57         [ 4] 2532         CALL     BASE
      000D1D CD 04 F3         [ 4] 2533         CALL     AT
      000D20 CD 0C DD         [ 4] 2534         CALL     EXTRC
      000D23 CC 0D 01         [ 2] 2535         JP     HOLD
                                   2536 
                                   2537 ;       #S      ( u -- 0 )
                                   2538 ;       Convert u until all digits
                                   2539 ;       are added to output string.
      000D26 0D 18                 2540         .word      LINK
                           000D28  2541 LINK = . 
      000D28 02                    2542         .byte      2
      000D29 23 53                 2543         .ascii     "#S"
      000D2B                       2544 DIGS:
      000D2B CD 0D 1A         [ 4] 2545 DIGS1:  CALL     DIG
      000D2E CD 05 9A         [ 4] 2546         CALL     DUPP
      000D31 CD 04 A8         [ 4] 2547         CALL     QBRAN
      000D34 0D 38                 2548         .word      DIGS2
      000D36 20 F3            [ 2] 2549         JRA     DIGS1
      000D38 81               [ 4] 2550 DIGS2:  RET
                                   2551 
                                   2552 ;       SIGN    ( n -- )
                                   2553 ;       Add a minus sign to
                                   2554 ;       numeric output string.
      000D39 0D 28                 2555         .word      LINK
                           000D3B  2556 LINK = . 
      000D3B 04                    2557         .byte      4
      000D3C 53 49 47 4E           2558         .ascii     "SIGN"
      000D40                       2559 SIGN:
      000D40 CD 05 D3         [ 4] 2560         CALL     ZLESS
      000D43 CD 04 A8         [ 4] 2561         CALL     QBRAN
      000D46 0D 50                 2562         .word      SIGN1
      000D48 CD 04 75         [ 4] 2563         CALL     DOLIT
      000D4B 00 2D                 2564         .word      45	;"-"
      000D4D CC 0D 01         [ 2] 2565         JP     HOLD
      000D50 81               [ 4] 2566 SIGN1:  RET
                                   2567 
                                   2568 ;       #>      ( w -- b u )
                                   2569 ;       Prepare output string.
      000D51 0D 3B                 2570         .word      LINK
                           000D53  2571 LINK = . 
      000D53 02                    2572         .byte      2
      000D54 23 3E                 2573         .ascii     "#>"
      000D56                       2574 EDIGS:
      000D56 CD 05 90         [ 4] 2575         CALL     DROP
      000D59 CD 06 C7         [ 4] 2576         CALL     HLD
      000D5C CD 04 F3         [ 4] 2577         CALL     AT
      000D5F CD 0B E5         [ 4] 2578         CALL     PAD
      000D62 CD 05 C4         [ 4] 2579         CALL     OVER
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000D65 CC 08 0E         [ 2] 2580         JP     SUBB
                                   2581 
                                   2582 ;       str     ( w -- b u )
                                   2583 ;       Convert a signed integer
                                   2584 ;       to a numeric string.
      000D68 0D 53                 2585         .word      LINK
                           000D6A  2586 LINK = . 
      000D6A 03                    2587         .byte      3
      000D6B 53 54 52              2588         .ascii     "STR"
      000D6E                       2589 STR:
      000D6E CD 05 9A         [ 4] 2590         CALL     DUPP
      000D71 CD 05 63         [ 4] 2591         CALL     TOR
      000D74 CD 08 28         [ 4] 2592         CALL     ABSS
      000D77 CD 0C F1         [ 4] 2593         CALL     BDIGS
      000D7A CD 0D 2B         [ 4] 2594         CALL     DIGS
      000D7D CD 05 44         [ 4] 2595         CALL     RFROM
      000D80 CD 0D 40         [ 4] 2596         CALL     SIGN
      000D83 CC 0D 56         [ 2] 2597         JP     EDIGS
                                   2598 
                                   2599 ;       HEX     ( -- )
                                   2600 ;       Use radix 16 as base for
                                   2601 ;       numeric conversions.
      000D86 0D 6A                 2602         .word      LINK
                           000D88  2603 LINK = . 
      000D88 03                    2604         .byte      3
      000D89 48 45 58              2605         .ascii     "HEX"
      000D8C                       2606 HEX:
      000D8C CD 04 75         [ 4] 2607         CALL     DOLIT
      000D8F 00 10                 2608         .word      16
      000D91 CD 06 57         [ 4] 2609         CALL     BASE
      000D94 CC 04 DC         [ 2] 2610         JP     STORE
                                   2611 
                                   2612 ;       DECIMAL ( -- )
                                   2613 ;       Use radix 10 as base
                                   2614 ;       for numeric conversions.
      000D97 0D 88                 2615         .word      LINK
                           000D99  2616 LINK = . 
      000D99 07                    2617         .byte      7
      000D9A 44 45 43 49 4D 41 4C  2618         .ascii     "DECIMAL"
      000DA1                       2619 DECIM:
      000DA1 CD 04 75         [ 4] 2620         CALL     DOLIT
      000DA4 00 0A                 2621         .word      10
      000DA6 CD 06 57         [ 4] 2622         CALL     BASE
      000DA9 CC 04 DC         [ 2] 2623         JP     STORE
                                   2624 
                                   2625 ;; Numeric input, single precision
                                   2626 
                                   2627 ;       DIGIT?  ( c base -- u t )
                                   2628 ;       Convert a character to its numeric
                                   2629 ;       value. A flag indicates success.
      000DAC 0D 99                 2630         .word      LINK
                           000DAE  2631 LINK = . 
      000DAE 06                    2632         .byte       6
      000DAF 44 49 47 49 54 3F     2633         .ascii     "DIGIT?"
      000DB5                       2634 DIGTQ:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000DB5 CD 05 63         [ 4] 2635         CALL     TOR
      000DB8 CD 04 75         [ 4] 2636         CALL     DOLIT
      000DBB 00 30                 2637         .word     48	; "0"
      000DBD CD 08 0E         [ 4] 2638         CALL     SUBB
      000DC0 CD 04 75         [ 4] 2639         CALL     DOLIT
      000DC3 00 09                 2640         .word      9
      000DC5 CD 05 C4         [ 4] 2641         CALL     OVER
      000DC8 CD 08 73         [ 4] 2642         CALL     LESS
      000DCB CD 04 A8         [ 4] 2643         CALL     QBRAN
      000DCE 0D E6                 2644         .word      DGTQ1
      000DD0 CD 04 75         [ 4] 2645         CALL     DOLIT
      000DD3 00 07                 2646         .word      7
      000DD5 CD 08 0E         [ 4] 2647         CALL     SUBB
      000DD8 CD 05 9A         [ 4] 2648         CALL     DUPP
      000DDB CD 04 75         [ 4] 2649         CALL     DOLIT
      000DDE 00 0A                 2650         .word      10
      000DE0 CD 08 73         [ 4] 2651         CALL     LESS
      000DE3 CD 05 FA         [ 4] 2652         CALL     ORR
      000DE6 CD 05 9A         [ 4] 2653 DGTQ1:  CALL     DUPP
      000DE9 CD 05 44         [ 4] 2654         CALL     RFROM
      000DEC CC 08 55         [ 2] 2655         JP     ULESS
                                   2656 
                                   2657 ;       NUMBER? ( a -- n T | a F )
                                   2658 ;       Convert a number string to
                                   2659 ;       integer. Push a flag on tos.
      000DEF 0D AE                 2660         .word      LINK
                           000DF1  2661 LINK = . 
      000DF1 07                    2662         .byte      7
      000DF2 4E 55 4D 42 45 52 3F  2663         .ascii     "NUMBER?"
      000DF9                       2664 NUMBQ:
      000DF9 CD 06 57         [ 4] 2665         CALL     BASE
      000DFC CD 04 F3         [ 4] 2666         CALL     AT
      000DFF CD 05 63         [ 4] 2667         CALL     TOR
      000E02 CD 0A E6         [ 4] 2668         CALL     ZERO
      000E05 CD 05 C4         [ 4] 2669         CALL     OVER
      000E08 CD 0B BD         [ 4] 2670         CALL     COUNT
      000E0B CD 05 C4         [ 4] 2671         CALL     OVER
      000E0E CD 05 11         [ 4] 2672         CALL     CAT
      000E11 CD 04 75         [ 4] 2673         CALL     DOLIT
      000E14 00 24                 2674         .word     36	; "0x"
      000E16 CD 08 36         [ 4] 2675         CALL     EQUAL
      000E19 CD 04 A8         [ 4] 2676         CALL     QBRAN
      000E1C 0E 2D                 2677         .word      NUMQ1
      000E1E CD 0D 8C         [ 4] 2678         CALL     HEX
      000E21 CD 05 AA         [ 4] 2679         CALL     SWAPP
      000E24 CD 0A 7A         [ 4] 2680         CALL     ONEP
      000E27 CD 05 AA         [ 4] 2681         CALL     SWAPP
      000E2A CD 0A 87         [ 4] 2682         CALL     ONEM
      000E2D CD 05 C4         [ 4] 2683 NUMQ1:  CALL     OVER
      000E30 CD 05 11         [ 4] 2684         CALL     CAT
      000E33 CD 04 75         [ 4] 2685         CALL     DOLIT
      000E36 00 2D                 2686         .word     45	; "-"
      000E38 CD 08 36         [ 4] 2687         CALL     EQUAL
      000E3B CD 05 63         [ 4] 2688         CALL     TOR
      000E3E CD 05 AA         [ 4] 2689         CALL     SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000E41 CD 05 57         [ 4] 2690         CALL     RAT
      000E44 CD 08 0E         [ 4] 2691         CALL     SUBB
      000E47 CD 05 AA         [ 4] 2692         CALL     SWAPP
      000E4A CD 05 57         [ 4] 2693         CALL     RAT
      000E4D CD 07 95         [ 4] 2694         CALL     PLUS
      000E50 CD 07 44         [ 4] 2695         CALL     QDUP
      000E53 CD 04 A8         [ 4] 2696         CALL     QBRAN
      000E56 0E B7                 2697         .word      NUMQ6
      000E58 CD 0A 87         [ 4] 2698         CALL     ONEM
      000E5B CD 05 63         [ 4] 2699         CALL     TOR
      000E5E CD 05 9A         [ 4] 2700 NUMQ2:  CALL     DUPP
      000E61 CD 05 63         [ 4] 2701         CALL     TOR
      000E64 CD 05 11         [ 4] 2702         CALL     CAT
      000E67 CD 06 57         [ 4] 2703         CALL     BASE
      000E6A CD 04 F3         [ 4] 2704         CALL     AT
      000E6D CD 0D B5         [ 4] 2705         CALL     DIGTQ
      000E70 CD 04 A8         [ 4] 2706         CALL     QBRAN
      000E73 0E A5                 2707         .word      NUMQ4
      000E75 CD 05 AA         [ 4] 2708         CALL     SWAPP
      000E78 CD 06 57         [ 4] 2709         CALL     BASE
      000E7B CD 04 F3         [ 4] 2710         CALL     AT
      000E7E CD 09 F9         [ 4] 2711         CALL     STAR
      000E81 CD 07 95         [ 4] 2712         CALL     PLUS
      000E84 CD 05 44         [ 4] 2713         CALL     RFROM
      000E87 CD 0A 7A         [ 4] 2714         CALL     ONEP
      000E8A CD 04 89         [ 4] 2715         CALL     DONXT
      000E8D 0E 5E                 2716         .word      NUMQ2
      000E8F CD 05 57         [ 4] 2717         CALL     RAT
      000E92 CD 05 AA         [ 4] 2718         CALL     SWAPP
      000E95 CD 05 90         [ 4] 2719         CALL     DROP
      000E98 CD 04 A8         [ 4] 2720         CALL     QBRAN
      000E9B 0E A0                 2721         .word      NUMQ3
      000E9D CD 07 C0         [ 4] 2722         CALL     NEGAT
      000EA0 CD 05 AA         [ 4] 2723 NUMQ3:  CALL     SWAPP
      000EA3 20 0F            [ 2] 2724         JRA     NUMQ5
      000EA5 CD 05 44         [ 4] 2725 NUMQ4:  CALL     RFROM
      000EA8 CD 05 44         [ 4] 2726         CALL     RFROM
      000EAB CD 07 75         [ 4] 2727         CALL     DDROP
      000EAE CD 07 75         [ 4] 2728         CALL     DDROP
      000EB1 CD 0A E6         [ 4] 2729         CALL     ZERO
      000EB4 CD 05 9A         [ 4] 2730 NUMQ5:  CALL     DUPP
      000EB7 CD 05 44         [ 4] 2731 NUMQ6:  CALL     RFROM
      000EBA CD 07 75         [ 4] 2732         CALL     DDROP
      000EBD CD 05 44         [ 4] 2733         CALL     RFROM
      000EC0 CD 06 57         [ 4] 2734         CALL     BASE
      000EC3 CC 04 DC         [ 2] 2735         JP     STORE
                                   2736 
                                   2737 ;; Basic I/O
                                   2738 
                                   2739 ;       KEY     ( -- c )
                                   2740 ;       Wait for and return an
                                   2741 ;       input character.
      000EC6 0D F1                 2742         .word      LINK
                           000EC8  2743 LINK = . 
      000EC8 03                    2744         .byte      3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000EC9 4B 45 59              2745         .ascii     "KEY"
      000ECC                       2746 KEY:
      000ECC 72 0B 52 30 FB   [ 2] 2747         btjf UART_SR,#UART_SR_RXNE,. 
      000ED1 C6 52 31         [ 1] 2748         ld a,UART_DR 
      000ED4 1D 00 02         [ 2] 2749         subw x,#CELLL 
      000ED7 E7 01            [ 1] 2750         ld (1,x),a 
      000ED9 7F               [ 1] 2751         clr (x)
      000EDA 81               [ 4] 2752         ret 
                                   2753 
                                   2754 ;       NUF?    ( -- t )
                                   2755 ;       Return false if no input,
                                   2756 ;       else pause and if CR return true.
      000EDB 0E C8                 2757         .word      LINK
                           000EDD  2758 LINK = . 
      000EDD 04                    2759         .byte      4
      000EDE 4E 55 46 3F           2760         .ascii     "NUF?"
      000EE2                       2761 NUFQ:
      000EE2 CD 04 16         [ 4] 2762         CALL     QKEY
      000EE5 CD 05 9A         [ 4] 2763         CALL     DUPP
      000EE8 CD 04 A8         [ 4] 2764         CALL     QBRAN
      000EEB 0E FB                 2765         .word    NUFQ1
      000EED CD 07 75         [ 4] 2766         CALL     DDROP
      000EF0 CD 0E CC         [ 4] 2767         CALL     KEY
      000EF3 CD 04 75         [ 4] 2768         CALL     DOLIT
      000EF6 00 0D                 2769         .word      CRR
      000EF8 CC 08 36         [ 2] 2770         JP     EQUAL
      000EFB 81               [ 4] 2771 NUFQ1:  RET
                                   2772 
                                   2773 ;       SPACE   ( -- )
                                   2774 ;       Send  blank character to
                                   2775 ;       output device.
      000EFC 0E DD                 2776         .word      LINK
                           000EFE  2777 LINK = . 
      000EFE 05                    2778         .byte      5
      000EFF 53 50 41 43 45        2779         .ascii     "SPACE"
      000F04                       2780 SPACE:
      000F04 CD 0A D9         [ 4] 2781         CALL     BLANK
      000F07 CC 04 34         [ 2] 2782         JP     EMIT
                                   2783 
                                   2784 ;       SPACES  ( +n -- )
                                   2785 ;       Send n spaces to output device.
      000F0A 0E FE                 2786         .word      LINK
                           000F0C  2787 LINK = . 
      000F0C 06                    2788         .byte      6
      000F0D 53 50 41 43 45 53     2789         .ascii     "SPACES"
      000F13                       2790 SPACS:
      000F13 CD 0A E6         [ 4] 2791         CALL     ZERO
      000F16 CD 08 93         [ 4] 2792         CALL     MAX
      000F19 CD 05 63         [ 4] 2793         CALL     TOR
      000F1C 20 03            [ 2] 2794         JRA      CHAR2
      000F1E CD 0F 04         [ 4] 2795 CHAR1:  CALL     SPACE
      000F21 CD 04 89         [ 4] 2796 CHAR2:  CALL     DONXT
      000F24 0F 1E                 2797         .word    CHAR1
      000F26 81               [ 4] 2798         RET
                                   2799 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                   2800 ;       TYPE    ( b u -- )
                                   2801 ;       Output u characters from b.
      000F27 0F 0C                 2802         .word      LINK
                           000F29  2803 LINK = . 
      000F29 04                    2804         .byte      4
      000F2A 54 59 50 45           2805         .ascii     "TYPE"
      000F2E                       2806 TYPES:
      000F2E CD 05 63         [ 4] 2807         CALL     TOR
      000F31 20 0C            [ 2] 2808         JRA     TYPE2
      000F33 CD 05 9A         [ 4] 2809 TYPE1:  CALL     DUPP
      000F36 CD 05 11         [ 4] 2810         CALL     CAT
      000F39 CD 04 34         [ 4] 2811         CALL     EMIT
      000F3C CD 0A 7A         [ 4] 2812         CALL     ONEP
      000F3F CD 04 89         [ 4] 2813 TYPE2:  CALL     DONXT
      000F42 0F 33                 2814         .word      TYPE1
      000F44 CC 05 90         [ 2] 2815         JP     DROP
                                   2816 
                                   2817 ;       CR      ( -- )
                                   2818 ;       Output a carriage return
                                   2819 ;       and a line feed.
      000F47 0F 29                 2820         .word      LINK
                           000F49  2821 LINK = . 
      000F49 02                    2822         .byte      2
      000F4A 43 52                 2823         .ascii     "CR"
      000F4C                       2824 CR:
      000F4C CD 04 75         [ 4] 2825         CALL     DOLIT
      000F4F 00 0D                 2826         .word      CRR
      000F51 CD 04 34         [ 4] 2827         CALL     EMIT
      000F54 CD 04 75         [ 4] 2828         CALL     DOLIT
      000F57 00 0A                 2829         .word      LF
      000F59 CC 04 34         [ 2] 2830         JP     EMIT
                                   2831 
                                   2832 ;       do$     ( -- a )
                                   2833 ;       Return  address of a compiled
                                   2834 ;       string.
      000F5C 0F 49                 2835         .word      LINK
                           000F5E  2836 LINK = . 
      000F5E 43                    2837 	.byte      COMPO+3
      000F5F 44 4F 24              2838         .ascii     "DO$"
      000F62                       2839 DOSTR:
      000F62 CD 05 44         [ 4] 2840         CALL     RFROM
      000F65 CD 05 57         [ 4] 2841         CALL     RAT
      000F68 CD 05 44         [ 4] 2842         CALL     RFROM
      000F6B CD 0B BD         [ 4] 2843         CALL     COUNT
      000F6E CD 07 95         [ 4] 2844         CALL     PLUS
      000F71 CD 05 63         [ 4] 2845         CALL     TOR
      000F74 CD 05 AA         [ 4] 2846         CALL     SWAPP
      000F77 CD 05 63         [ 4] 2847         CALL     TOR
      000F7A 81               [ 4] 2848         RET
                                   2849 
                                   2850 ;       $"|     ( -- a )
                                   2851 ;       Run time routine compiled by $".
                                   2852 ;       Return address of a compiled string.
      000F7B 0F 5E                 2853         .word      LINK
                           000F7D  2854 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000F7D 43                    2855 	.byte      COMPO+3
      000F7E 24 22 7C              2856         .byte     '$','"','|'
      000F81                       2857 STRQP:
      000F81 CD 0F 62         [ 4] 2858         CALL     DOSTR
      000F84 81               [ 4] 2859         RET
                                   2860 
                                   2861 ;       ."|     ( -- )
                                   2862 ;       Run time routine of ." .
                                   2863 ;       Output a compiled string.
      000F85 0F 7D                 2864         .word      LINK
                           000F87  2865 LINK = . 
      000F87 43                    2866 	.byte      COMPO+3
      000F88 2E 22 7C              2867         .byte     '.','"','|'
      000F8B                       2868 DOTQP:
      000F8B CD 0F 62         [ 4] 2869         CALL     DOSTR
      000F8E CD 0B BD         [ 4] 2870         CALL     COUNT
      000F91 CC 0F 2E         [ 2] 2871         JP     TYPES
                                   2872 
                                   2873 ;       .R      ( n +n -- )
                                   2874 ;       Display an integer in a field
                                   2875 ;       of n columns, right justified.
      000F94 0F 87                 2876         .word      LINK
                           000F96  2877 LINK = . 
      000F96 02                    2878         .byte      2
      000F97 2E 52                 2879         .ascii     ".R"
      000F99                       2880 DOTR:
      000F99 CD 05 63         [ 4] 2881         CALL     TOR
      000F9C CD 0D 6E         [ 4] 2882         CALL     STR
      000F9F CD 05 44         [ 4] 2883         CALL     RFROM
      000FA2 CD 05 C4         [ 4] 2884         CALL     OVER
      000FA5 CD 08 0E         [ 4] 2885         CALL     SUBB
      000FA8 CD 0F 13         [ 4] 2886         CALL     SPACS
      000FAB CC 0F 2E         [ 2] 2887         JP     TYPES
                                   2888 
                                   2889 ;       U.R     ( u +n -- )
                                   2890 ;       Display an unsigned integer
                                   2891 ;       in n column, right justified.
      000FAE 0F 96                 2892         .word      LINK
                           000FB0  2893 LINK = . 
      000FB0 03                    2894         .byte      3
      000FB1 55 2E 52              2895         .ascii     "U.R"
      000FB4                       2896 UDOTR:
      000FB4 CD 05 63         [ 4] 2897         CALL     TOR
      000FB7 CD 0C F1         [ 4] 2898         CALL     BDIGS
      000FBA CD 0D 2B         [ 4] 2899         CALL     DIGS
      000FBD CD 0D 56         [ 4] 2900         CALL     EDIGS
      000FC0 CD 05 44         [ 4] 2901         CALL     RFROM
      000FC3 CD 05 C4         [ 4] 2902         CALL     OVER
      000FC6 CD 08 0E         [ 4] 2903         CALL     SUBB
      000FC9 CD 0F 13         [ 4] 2904         CALL     SPACS
      000FCC CC 0F 2E         [ 2] 2905         JP     TYPES
                                   2906 
                                   2907 ;       U.      ( u -- )
                                   2908 ;       Display an unsigned integer
                                   2909 ;       in free format.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000FCF 0F B0                 2910         .word      LINK
                           000FD1  2911 LINK = . 
      000FD1 02                    2912         .byte      2
      000FD2 55 2E                 2913         .ascii     "U."
      000FD4                       2914 UDOT:
      000FD4 CD 0C F1         [ 4] 2915         CALL     BDIGS
      000FD7 CD 0D 2B         [ 4] 2916         CALL     DIGS
      000FDA CD 0D 56         [ 4] 2917         CALL     EDIGS
      000FDD CD 0F 04         [ 4] 2918         CALL     SPACE
      000FE0 CC 0F 2E         [ 2] 2919         JP     TYPES
                                   2920 
                                   2921 ;       .       ( w -- )
                                   2922 ;       Display an integer in free
                                   2923 ;       format, preceeded by a space.
      000FE3 0F D1                 2924         .word      LINK
                           000FE5  2925 LINK = . 
      000FE5 01                    2926         .byte      1
      000FE6 2E                    2927         .ascii     "."
      000FE7                       2928 DOT:
      000FE7 CD 06 57         [ 4] 2929         CALL     BASE
      000FEA CD 04 F3         [ 4] 2930         CALL     AT
      000FED CD 04 75         [ 4] 2931         CALL     DOLIT
      000FF0 00 0A                 2932         .word      10
      000FF2 CD 06 0F         [ 4] 2933         CALL     XORR    ;?decimal
      000FF5 CD 04 A8         [ 4] 2934         CALL     QBRAN
      000FF8 0F FD                 2935         .word      DOT1
      000FFA CC 0F D4         [ 2] 2936         JP     UDOT
      000FFD CD 0D 6E         [ 4] 2937 DOT1:   CALL     STR
      001000 CD 0F 04         [ 4] 2938         CALL     SPACE
      001003 CC 0F 2E         [ 2] 2939         JP     TYPES
                                   2940 
                                   2941 ;       ?       ( a -- )
                                   2942 ;       Display contents in memory cell.
      001006 0F E5                 2943         .word      LINK
                                   2944         
                           001008  2945 LINK = . 
      001008 01                    2946         .byte      1
      001009 3F                    2947         .ascii     "?"
      00100A                       2948 QUEST:
      00100A CD 04 F3         [ 4] 2949         CALL     AT
      00100D CC 0F E7         [ 2] 2950         JP     DOT
                                   2951 
                                   2952 ;; Parsing
                                   2953 
                                   2954 ;       parse   ( b u c -- b u delta ; <string> )
                                   2955 ;       Scan string delimited by c.
                                   2956 ;       Return found string and its offset.
      001010 10 08                 2957         .word      LINK
                           001012  2958 LINK = . 
      001012 05                    2959         .byte      5
      001013 70 61 72 73 65        2960         .ascii     "parse"
      001018                       2961 PARS:
      001018 CD 06 66         [ 4] 2962         CALL     TEMP
      00101B CD 04 DC         [ 4] 2963         CALL     STORE
      00101E CD 05 C4         [ 4] 2964         CALL     OVER
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      001021 CD 05 63         [ 4] 2965         CALL     TOR
      001024 CD 05 9A         [ 4] 2966         CALL     DUPP
      001027 CD 04 A8         [ 4] 2967         CALL     QBRAN
      00102A 10 D0                 2968         .word    PARS8
      00102C CD 0A 87         [ 4] 2969         CALL     ONEM
      00102F CD 06 66         [ 4] 2970         CALL     TEMP
      001032 CD 04 F3         [ 4] 2971         CALL     AT
      001035 CD 0A D9         [ 4] 2972         CALL     BLANK
      001038 CD 08 36         [ 4] 2973         CALL     EQUAL
      00103B CD 04 A8         [ 4] 2974         CALL     QBRAN
      00103E 10 71                 2975         .word      PARS3
      001040 CD 05 63         [ 4] 2976         CALL     TOR
      001043 CD 0A D9         [ 4] 2977 PARS1:  CALL     BLANK
      001046 CD 05 C4         [ 4] 2978         CALL     OVER
      001049 CD 05 11         [ 4] 2979         CALL     CAT     ;skip leading blanks ONLY
      00104C CD 08 0E         [ 4] 2980         CALL     SUBB
      00104F CD 05 D3         [ 4] 2981         CALL     ZLESS
      001052 CD 07 AF         [ 4] 2982         CALL     INVER
      001055 CD 04 A8         [ 4] 2983         CALL     QBRAN
      001058 10 6E                 2984         .word      PARS2
      00105A CD 0A 7A         [ 4] 2985         CALL     ONEP
      00105D CD 04 89         [ 4] 2986         CALL     DONXT
      001060 10 43                 2987         .word      PARS1
      001062 CD 05 44         [ 4] 2988         CALL     RFROM
      001065 CD 05 90         [ 4] 2989         CALL     DROP
      001068 CD 0A E6         [ 4] 2990         CALL     ZERO
      00106B CC 05 9A         [ 2] 2991         JP     DUPP
      00106E CD 05 44         [ 4] 2992 PARS2:  CALL     RFROM
      001071 CD 05 C4         [ 4] 2993 PARS3:  CALL     OVER
      001074 CD 05 AA         [ 4] 2994         CALL     SWAPP
      001077 CD 05 63         [ 4] 2995         CALL     TOR
      00107A CD 06 66         [ 4] 2996 PARS4:  CALL     TEMP
      00107D CD 04 F3         [ 4] 2997         CALL     AT
      001080 CD 05 C4         [ 4] 2998         CALL     OVER
      001083 CD 05 11         [ 4] 2999         CALL     CAT
      001086 CD 08 0E         [ 4] 3000         CALL     SUBB    ;scan for delimiter
      001089 CD 06 66         [ 4] 3001         CALL     TEMP
      00108C CD 04 F3         [ 4] 3002         CALL     AT
      00108F CD 0A D9         [ 4] 3003         CALL     BLANK
      001092 CD 08 36         [ 4] 3004         CALL     EQUAL
      001095 CD 04 A8         [ 4] 3005         CALL     QBRAN
      001098 10 9D                 3006         .word      PARS5
      00109A CD 05 D3         [ 4] 3007         CALL     ZLESS
      00109D CD 04 A8         [ 4] 3008 PARS5:  CALL     QBRAN
      0010A0 10 B2                 3009         .word      PARS6
      0010A2 CD 0A 7A         [ 4] 3010         CALL     ONEP
      0010A5 CD 04 89         [ 4] 3011         CALL     DONXT
      0010A8 10 7A                 3012         .word      PARS4
      0010AA CD 05 9A         [ 4] 3013         CALL     DUPP
      0010AD CD 05 63         [ 4] 3014         CALL     TOR
      0010B0 20 0F            [ 2] 3015         JRA     PARS7
      0010B2 CD 05 44         [ 4] 3016 PARS6:  CALL     RFROM
      0010B5 CD 05 90         [ 4] 3017         CALL     DROP
      0010B8 CD 05 9A         [ 4] 3018         CALL     DUPP
      0010BB CD 0A 7A         [ 4] 3019         CALL     ONEP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      0010BE CD 05 63         [ 4] 3020         CALL     TOR
      0010C1 CD 05 C4         [ 4] 3021 PARS7:  CALL     OVER
      0010C4 CD 08 0E         [ 4] 3022         CALL     SUBB
      0010C7 CD 05 44         [ 4] 3023         CALL     RFROM
      0010CA CD 05 44         [ 4] 3024         CALL     RFROM
      0010CD CC 08 0E         [ 2] 3025         JP     SUBB
      0010D0 CD 05 C4         [ 4] 3026 PARS8:  CALL     OVER
      0010D3 CD 05 44         [ 4] 3027         CALL     RFROM
      0010D6 CC 08 0E         [ 2] 3028         JP     SUBB
                                   3029 
                                   3030 ;       PARSE   ( c -- b u ; <string> )
                                   3031 ;       Scan input stream and return
                                   3032 ;       counted string delimited by c.
      0010D9 10 12                 3033         .word      LINK
                           0010DB  3034 LINK = . 
      0010DB 05                    3035         .byte      5
      0010DC 50 41 52 53 45        3036         .ascii     "PARSE"
      0010E1                       3037 PARSE:
      0010E1 CD 05 63         [ 4] 3038         CALL     TOR
      0010E4 CD 0B F6         [ 4] 3039         CALL     TIB
      0010E7 CD 06 75         [ 4] 3040         CALL     INN
      0010EA CD 04 F3         [ 4] 3041         CALL     AT
      0010ED CD 07 95         [ 4] 3042         CALL     PLUS    ;current input buffer pointer
      0010F0 CD 06 85         [ 4] 3043         CALL     NTIB
      0010F3 CD 04 F3         [ 4] 3044         CALL     AT
      0010F6 CD 06 75         [ 4] 3045         CALL     INN
      0010F9 CD 04 F3         [ 4] 3046         CALL     AT
      0010FC CD 08 0E         [ 4] 3047         CALL     SUBB    ;remaining count
      0010FF CD 05 44         [ 4] 3048         CALL     RFROM
      001102 CD 10 18         [ 4] 3049         CALL     PARS
      001105 CD 06 75         [ 4] 3050         CALL     INN
      001108 CC 0B 56         [ 2] 3051         JP     PSTOR
                                   3052 
                                   3053 ;       .(      ( -- )
                                   3054 ;       Output following string up to next ) .
      00110B 10 DB                 3055         .word      LINK
                           00110D  3056 LINK = . 
      00110D 82                    3057 	.byte      IMEDD+2
      00110E 2E 28                 3058         .ascii     ".("
      001110                       3059 DOTPR:
      001110 CD 04 75         [ 4] 3060         CALL     DOLIT
      001113 00 29                 3061         .word     41	; ")"
      001115 CD 10 E1         [ 4] 3062         CALL     PARSE
      001118 CC 0F 2E         [ 2] 3063         JP     TYPES
                                   3064 
                                   3065 ;       (       ( -- )
                                   3066 ;       Ignore following string up to next ).
                                   3067 ;       A comment.
      00111B 11 0D                 3068         .word      LINK
                           00111D  3069 LINK = . 
      00111D 81                    3070 	.byte      IMEDD+1
      00111E 28                    3071         .ascii     "("
      00111F                       3072 PAREN:
      00111F CD 04 75         [ 4] 3073         CALL     DOLIT
      001122 00 29                 3074         .word     41	; ")"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      001124 CD 10 E1         [ 4] 3075         CALL     PARSE
      001127 CC 07 75         [ 2] 3076         JP     DDROP
                                   3077 
                                   3078 ;       \       ( -- )
                                   3079 ;       Ignore following text till
                                   3080 ;       end of line.
      00112A 11 1D                 3081         .word      LINK
                           00112C  3082 LINK = . 
      00112C 81                    3083 	.byte      IMEDD+1
      00112D 5C                    3084         .ascii     "\"
      00112E                       3085 BKSLA:
      00112E 90 AE 00 0C      [ 2] 3086         ldw y,#UCTIB ; #TIB  
      001132 90 FE            [ 2] 3087         ldw y,(y)
      001134 90 89            [ 2] 3088         pushw y ; count in TIB 
      001136 90 AE 00 0A      [ 2] 3089         ldw y,#UINN ; >IN 
      00113A 90 BF 24         [ 2] 3090         ldw YTEMP,y
      00113D 90 85            [ 2] 3091         popw y 
      00113F 91 CF 24         [ 5] 3092         ldw [YTEMP],y
      001142 81               [ 4] 3093         ret 
                                   3094 
                                   3095 ;       WORD    ( c -- a ; <string> )
                                   3096 ;       Parse a word from input stream
                                   3097 ;       and copy it to code dictionary.
      001143 11 2C                 3098         .word      LINK
                           001145  3099 LINK = . 
      001145 04                    3100         .byte      4
      001146 57 4F 52 44           3101         .ascii     "WORD"
      00114A                       3102 WORDD:
      00114A CD 10 E1         [ 4] 3103         CALL     PARSE
      00114D CD 0B D4         [ 4] 3104         CALL     HERE
      001150 CD 0A 4F         [ 4] 3105         CALL     CELLP
      001153 CC 0C 94         [ 2] 3106         JP     PACKS
                                   3107 
                                   3108 ;       TOKEN   ( -- a ; <string> )
                                   3109 ;       Parse a word from input stream
                                   3110 ;       and copy it to name dictionary.
      001156 11 45                 3111         .word      LINK
                           001158  3112 LINK = . 
      001158 05                    3113         .byte      5
      001159 54 4F 4B 45 4E        3114         .ascii     "TOKEN"
      00115E                       3115 TOKEN:
      00115E CD 0A D9         [ 4] 3116         CALL     BLANK
      001161 CC 11 4A         [ 2] 3117         JP     WORDD
                                   3118 
                                   3119 ;; Dictionary search
                                   3120 
                                   3121 ;       NAME>   ( na -- ca )
                                   3122 ;       Return a code address given
                                   3123 ;       a name address.
      001164 11 58                 3124         .word      LINK
                           001166  3125 LINK = . 
      001166 05                    3126         .byte      5
      001167 4E 41 4D 45 3E        3127         .ascii     "NAME>"
      00116C                       3128 NAMET:
      00116C CD 0B BD         [ 4] 3129         CALL     COUNT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      00116F CD 04 75         [ 4] 3130         CALL     DOLIT
      001172 00 1F                 3131         .word      31
      001174 CD 05 E6         [ 4] 3132         CALL     ANDD
      001177 CC 07 95         [ 2] 3133         JP     PLUS
                                   3134 
                                   3135 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   3136 ;       Compare u cells in two
                                   3137 ;       strings. Return 0 if identical.
      00117A 11 66                 3138         .word      LINK
                           00117C  3139 LINK = . 
      00117C 05                    3140         .byte       5
      00117D 53 41 4D 45 3F        3141         .ascii     "SAME?"
      001182                       3142 SAMEQ:
      001182 CD 0A 87         [ 4] 3143         CALL     ONEM
      001185 CD 05 63         [ 4] 3144         CALL     TOR
      001188 20 29            [ 2] 3145         JRA     SAME2
      00118A CD 05 C4         [ 4] 3146 SAME1:  CALL     OVER
      00118D CD 05 57         [ 4] 3147         CALL     RAT
      001190 CD 07 95         [ 4] 3148         CALL     PLUS
      001193 CD 05 11         [ 4] 3149         CALL     CAT
      001196 CD 05 C4         [ 4] 3150         CALL     OVER
      001199 CD 05 57         [ 4] 3151         CALL     RAT
      00119C CD 07 95         [ 4] 3152         CALL     PLUS
      00119F CD 05 11         [ 4] 3153         CALL     CAT
      0011A2 CD 08 0E         [ 4] 3154         CALL     SUBB
      0011A5 CD 07 44         [ 4] 3155         CALL     QDUP
      0011A8 CD 04 A8         [ 4] 3156         CALL     QBRAN
      0011AB 11 B3                 3157         .word      SAME2
      0011AD CD 05 44         [ 4] 3158         CALL     RFROM
      0011B0 CC 05 90         [ 2] 3159         JP     DROP
      0011B3 CD 04 89         [ 4] 3160 SAME2:  CALL     DONXT
      0011B6 11 8A                 3161         .word      SAME1
      0011B8 CC 0A E6         [ 2] 3162         JP     ZERO
                                   3163 
                                   3164 ;       find    ( a va -- ca na | a F )
                                   3165 ;       Search vocabulary for string.
                                   3166 ;       Return ca and na if succeeded.
      0011BB 11 7C                 3167         .word      LINK
                           0011BD  3168 LINK = . 
      0011BD 04                    3169         .byte      4
      0011BE 46 49 4E 44           3170         .ascii     "FIND"
      0011C2                       3171 FIND:
      0011C2 CD 05 AA         [ 4] 3172         CALL     SWAPP
      0011C5 CD 05 9A         [ 4] 3173         CALL     DUPP
      0011C8 CD 05 11         [ 4] 3174         CALL     CAT
      0011CB CD 06 66         [ 4] 3175         CALL     TEMP
      0011CE CD 04 DC         [ 4] 3176         CALL     STORE
      0011D1 CD 05 9A         [ 4] 3177         CALL     DUPP
      0011D4 CD 04 F3         [ 4] 3178         CALL     AT
      0011D7 CD 05 63         [ 4] 3179         CALL     TOR
      0011DA CD 0A 4F         [ 4] 3180         CALL     CELLP
      0011DD CD 05 AA         [ 4] 3181         CALL     SWAPP
      0011E0 CD 04 F3         [ 4] 3182 FIND1:  CALL     AT
      0011E3 CD 05 9A         [ 4] 3183         CALL     DUPP
      0011E6 CD 04 A8         [ 4] 3184         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      0011E9 12 1F                 3185         .word      FIND6
      0011EB CD 05 9A         [ 4] 3186         CALL     DUPP
      0011EE CD 04 F3         [ 4] 3187         CALL     AT
      0011F1 CD 04 75         [ 4] 3188         CALL     DOLIT
      0011F4 1F 7F                 3189         .word      MASKK
      0011F6 CD 05 E6         [ 4] 3190         CALL     ANDD
      0011F9 CD 05 57         [ 4] 3191         CALL     RAT
      0011FC CD 06 0F         [ 4] 3192         CALL     XORR
      0011FF CD 04 A8         [ 4] 3193         CALL     QBRAN
      001202 12 0E                 3194         .word      FIND2
      001204 CD 0A 4F         [ 4] 3195         CALL     CELLP
      001207 CD 04 75         [ 4] 3196         CALL     DOLIT
      00120A FF FF                 3197         .word     0xFFFF
      00120C 20 0C            [ 2] 3198         JRA     FIND3
      00120E CD 0A 4F         [ 4] 3199 FIND2:  CALL     CELLP
      001211 CD 06 66         [ 4] 3200         CALL     TEMP
      001214 CD 04 F3         [ 4] 3201         CALL     AT
      001217 CD 11 82         [ 4] 3202         CALL     SAMEQ
      00121A CD 04 BF         [ 4] 3203 FIND3:  CALL     BRAN
      00121D 12 2E                 3204         .word      FIND4
      00121F CD 05 44         [ 4] 3205 FIND6:  CALL     RFROM
      001222 CD 05 90         [ 4] 3206         CALL     DROP
      001225 CD 05 AA         [ 4] 3207         CALL     SWAPP
      001228 CD 0A 5E         [ 4] 3208         CALL     CELLM
      00122B CC 05 AA         [ 2] 3209         JP     SWAPP
      00122E CD 04 A8         [ 4] 3210 FIND4:  CALL     QBRAN
      001231 12 3B                 3211         .word      FIND5
      001233 CD 0A 5E         [ 4] 3212         CALL     CELLM
      001236 CD 0A 5E         [ 4] 3213         CALL     CELLM
      001239 20 A5            [ 2] 3214         JRA     FIND1
      00123B CD 05 44         [ 4] 3215 FIND5:  CALL     RFROM
      00123E CD 05 90         [ 4] 3216         CALL     DROP
      001241 CD 05 AA         [ 4] 3217         CALL     SWAPP
      001244 CD 05 90         [ 4] 3218         CALL     DROP
      001247 CD 0A 5E         [ 4] 3219         CALL     CELLM
      00124A CD 05 9A         [ 4] 3220         CALL     DUPP
      00124D CD 11 6C         [ 4] 3221         CALL     NAMET
      001250 CC 05 AA         [ 2] 3222         JP     SWAPP
                                   3223 
                                   3224 ;       NAME?   ( a -- ca na | a F )
                                   3225 ;       Search vocabularies for a string.
      001253 11 BD                 3226         .word      LINK
                           001255  3227 LINK = . 
      001255 05                    3228         .byte      5
      001256 4E 41 4D 45 3F        3229         .ascii     "NAME?"
      00125B                       3230 NAMEQ:
      00125B CD 06 DA         [ 4] 3231         CALL   CNTXT
      00125E CC 11 C2         [ 2] 3232         JP     FIND
                                   3233 
                                   3234 ;; Terminal response
                                   3235 
                                   3236 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3237 ;       Backup cursor by one character.
      001261 12 55                 3238         .word      LINK
                           001263  3239 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      001263 02                    3240         .byte      2
      001264 5E 48                 3241         .ascii     "^H"
      001266                       3242 BKSP:
      001266 CD 05 63         [ 4] 3243         CALL     TOR
      001269 CD 05 C4         [ 4] 3244         CALL     OVER
      00126C CD 05 44         [ 4] 3245         CALL     RFROM
      00126F CD 05 AA         [ 4] 3246         CALL     SWAPP
      001272 CD 05 C4         [ 4] 3247         CALL     OVER
      001275 CD 06 0F         [ 4] 3248         CALL     XORR
      001278 CD 04 A8         [ 4] 3249         CALL     QBRAN
      00127B 12 96                 3250         .word      BACK1
      00127D CD 04 75         [ 4] 3251         CALL     DOLIT
      001280 00 08                 3252         .word      BKSPP
      001282 CD 04 34         [ 4] 3253         CALL     EMIT
      001285 CD 0A 87         [ 4] 3254         CALL     ONEM
      001288 CD 0A D9         [ 4] 3255         CALL     BLANK
      00128B CD 04 34         [ 4] 3256         CALL     EMIT
      00128E CD 04 75         [ 4] 3257         CALL     DOLIT
      001291 00 08                 3258         .word      BKSPP
      001293 CC 04 34         [ 2] 3259         JP     EMIT
      001296 81               [ 4] 3260 BACK1:  RET
                                   3261 
                                   3262 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3263 ;       Accept and echo key stroke
                                   3264 ;       and bump cursor.
      001297 12 63                 3265         .word      LINK
                           001299  3266 LINK = . 
      001299 03                    3267         .byte      3
      00129A 54 41 50              3268         .ascii     "TAP"
      00129D                       3269 TAP:
      00129D CD 05 9A         [ 4] 3270         CALL     DUPP
      0012A0 CD 04 34         [ 4] 3271         CALL     EMIT
      0012A3 CD 05 C4         [ 4] 3272         CALL     OVER
      0012A6 CD 05 00         [ 4] 3273         CALL     CSTOR
      0012A9 CC 0A 7A         [ 2] 3274         JP     ONEP
                                   3275 
                                   3276 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3277 ;       Process a key stroke,
                                   3278 ;       CR,LF or backspace.
      0012AC 12 99                 3279         .word      LINK
                           0012AE  3280 LINK = . 
      0012AE 04                    3281         .byte      4
      0012AF 4B 54 41 50           3282         .ascii     "KTAP"
      0012B3                       3283 KTAP:
      0012B3 CD 05 9A         [ 4] 3284         CALL     DUPP
      0012B6 CD 04 75         [ 4] 3285         CALL     DOLIT
                           000001  3286 .if EOL_CR
      0012B9 00 0D                 3287         .word   CRR
                           000000  3288 .else ; EOL_LF 
                                   3289         .word   LF
                                   3290 .endif 
      0012BB CD 06 0F         [ 4] 3291         CALL     XORR
      0012BE CD 04 A8         [ 4] 3292         CALL     QBRAN
      0012C1 12 D9                 3293         .word      KTAP2
      0012C3 CD 04 75         [ 4] 3294         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      0012C6 00 08                 3295         .word      BKSPP
      0012C8 CD 06 0F         [ 4] 3296         CALL     XORR
      0012CB CD 04 A8         [ 4] 3297         CALL     QBRAN
      0012CE 12 D6                 3298         .word      KTAP1
      0012D0 CD 0A D9         [ 4] 3299         CALL     BLANK
      0012D3 CC 12 9D         [ 2] 3300         JP     TAP
      0012D6 CC 12 66         [ 2] 3301 KTAP1:  JP     BKSP
      0012D9 CD 05 90         [ 4] 3302 KTAP2:  CALL     DROP
      0012DC CD 05 AA         [ 4] 3303         CALL     SWAPP
      0012DF CD 05 90         [ 4] 3304         CALL     DROP
      0012E2 CC 05 9A         [ 2] 3305         JP     DUPP
                                   3306 
                                   3307 ;       accept  ( b u -- b u )
                                   3308 ;       Accept characters to input
                                   3309 ;       buffer. Return with actual count.
      0012E5 12 AE                 3310         .word      LINK
                           0012E7  3311 LINK = . 
      0012E7 06                    3312         .byte      6
      0012E8 41 43 43 45 50 54     3313         .ascii     "ACCEPT"
      0012EE                       3314 ACCEP:
      0012EE CD 05 C4         [ 4] 3315         CALL     OVER
      0012F1 CD 07 95         [ 4] 3316         CALL     PLUS
      0012F4 CD 05 C4         [ 4] 3317         CALL     OVER
      0012F7 CD 07 80         [ 4] 3318 ACCP1:  CALL     DDUP
      0012FA CD 06 0F         [ 4] 3319         CALL     XORR
      0012FD CD 04 A8         [ 4] 3320         CALL     QBRAN
      001300 13 22                 3321         .word      ACCP4
      001302 CD 0E CC         [ 4] 3322         CALL     KEY
      001305 CD 05 9A         [ 4] 3323         CALL     DUPP
      001308 CD 0A D9         [ 4] 3324         CALL     BLANK
      00130B CD 04 75         [ 4] 3325         CALL     DOLIT
      00130E 00 7F                 3326         .word      127
      001310 CD 08 D0         [ 4] 3327         CALL     WITHI
      001313 CD 04 A8         [ 4] 3328         CALL     QBRAN
      001316 13 1D                 3329         .word      ACCP2
      001318 CD 12 9D         [ 4] 3330         CALL     TAP
      00131B 20 03            [ 2] 3331         JRA     ACCP3
      00131D CD 12 B3         [ 4] 3332 ACCP2:  CALL     KTAP
      001320 20 D5            [ 2] 3333 ACCP3:  JRA     ACCP1
      001322 CD 05 90         [ 4] 3334 ACCP4:  CALL     DROP
      001325 CD 05 C4         [ 4] 3335         CALL     OVER
      001328 CC 08 0E         [ 2] 3336         JP     SUBB
                                   3337 
                                   3338 ;       QUERY   ( -- )
                                   3339 ;       Accept input stream to
                                   3340 ;       terminal input buffer.
      00132B 12 E7                 3341         .word      LINK
                                   3342         
                           00132D  3343 LINK = . 
      00132D 05                    3344         .byte      5
      00132E 51 55 45 52 59        3345         .ascii     "QUERY"
      001333                       3346 QUERY:
      001333 CD 0B F6         [ 4] 3347         CALL     TIB
      001336 CD 04 75         [ 4] 3348         CALL     DOLIT
      001339 00 50                 3349         .word      80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      00133B CD 12 EE         [ 4] 3350         CALL     ACCEP
      00133E CD 06 85         [ 4] 3351         CALL     NTIB
      001341 CD 04 DC         [ 4] 3352         CALL     STORE
      001344 CD 05 90         [ 4] 3353         CALL     DROP
      001347 CD 0A E6         [ 4] 3354         CALL     ZERO
      00134A CD 06 75         [ 4] 3355         CALL     INN
      00134D CC 04 DC         [ 2] 3356         JP     STORE
                                   3357 
                                   3358 ;       ABORT   ( -- )
                                   3359 ;       Reset data stack and
                                   3360 ;       jump to QUIT.
      001350 13 2D                 3361         .word      LINK
                           001352  3362 LINK = . 
      001352 05                    3363         .byte      5
      001353 41 42 4F 52 54        3364         .ascii     "ABORT"
      001358                       3365 ABORT:
      001358 CD 14 4F         [ 4] 3366         CALL     PRESE
      00135B CC 14 6C         [ 2] 3367         JP     QUIT
                                   3368 
                                   3369 ;       abort"  ( f -- )
                                   3370 ;       Run time routine of ABORT".
                                   3371 ;       Abort with a message.
      00135E 13 52                 3372         .word      LINK
                           001360  3373 LINK = . 
      001360 46                    3374 	.byte      COMPO+6
      001361 41 42 4F 52 54        3375         .ascii     "ABORT"
      001366 22                    3376         .byte      '"'
      001367                       3377 ABORQ:
      001367 CD 04 A8         [ 4] 3378         CALL     QBRAN
      00136A 13 86                 3379         .word      ABOR2   ;text flag
      00136C CD 0F 62         [ 4] 3380         CALL     DOSTR
      00136F CD 0F 04         [ 4] 3381 ABOR1:  CALL     SPACE
      001372 CD 0B BD         [ 4] 3382         CALL     COUNT
      001375 CD 0F 2E         [ 4] 3383         CALL     TYPES
      001378 CD 04 75         [ 4] 3384         CALL     DOLIT
      00137B 00 3F                 3385         .word     63 ; "?"
      00137D CD 04 34         [ 4] 3386         CALL     EMIT
      001380 CD 0F 4C         [ 4] 3387         CALL     CR
      001383 CC 13 58         [ 2] 3388         JP     ABORT   ;pass error string
      001386 CD 0F 62         [ 4] 3389 ABOR2:  CALL     DOSTR
      001389 CC 05 90         [ 2] 3390         JP     DROP
                                   3391 
                                   3392 ;; The text interpreter
                                   3393 
                                   3394 ;       $INTERPRET      ( a -- )
                                   3395 ;       Interpret a word. If failed,
                                   3396 ;       try to convert it to an integer.
      00138C 13 60                 3397         .word      LINK
                           00138E  3398 LINK = . 
      00138E 0A                    3399         .byte      10
      00138F 24 49 4E 54 45 52 50  3400         .ascii     "$INTERPRET"
             52 45 54
      001399                       3401 INTER:
      001399 CD 12 5B         [ 4] 3402         CALL     NAMEQ
      00139C CD 07 44         [ 4] 3403         CALL     QDUP    ;?defined
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      00139F CD 04 A8         [ 4] 3404         CALL     QBRAN
      0013A2 13 C3                 3405         .word      INTE1
      0013A4 CD 04 F3         [ 4] 3406         CALL     AT
      0013A7 CD 04 75         [ 4] 3407         CALL     DOLIT
      0013AA 40 00                 3408 	.word       0x4000	; COMPO*256
      0013AC CD 05 E6         [ 4] 3409         CALL     ANDD    ;?compile only lexicon bits
      0013AF CD 13 67         [ 4] 3410         CALL     ABORQ
      0013B2 0D                    3411         .byte      13
      0013B3 20 63 6F 6D 70 69 6C  3412         .ascii     " compile only"
             65 20 6F 6E 6C 79
      0013C0 CC 04 CF         [ 2] 3413         JP     EXECU
      0013C3 CD 0D F9         [ 4] 3414 INTE1:  CALL     NUMBQ   ;convert a number
      0013C6 CD 04 A8         [ 4] 3415         CALL     QBRAN
      0013C9 13 6F                 3416         .word    ABOR1
      0013CB 81               [ 4] 3417         RET
                                   3418 
                                   3419 ;       [       ( -- )
                                   3420 ;       Start  text interpreter.
      0013CC 13 8E                 3421         .word      LINK
                           0013CE  3422 LINK = . 
      0013CE 81                    3423 	.byte      IMEDD+1
      0013CF 5B                    3424         .ascii     "["
      0013D0                       3425 LBRAC:
      0013D0 CD 04 75         [ 4] 3426         CALL   DOLIT
      0013D3 13 99                 3427         .word  INTER
      0013D5 CD 06 B8         [ 4] 3428         CALL   TEVAL
      0013D8 CC 04 DC         [ 2] 3429         JP     STORE
                                   3430 
                                   3431 ;       .OK     ( -- )
                                   3432 ;       Display 'ok' while interpreting.
      0013DB 13 CE                 3433         .word      LINK
                           0013DD  3434 LINK = . 
      0013DD 03                    3435         .byte      3
      0013DE 2E 4F 4B              3436         .ascii     ".OK"
      0013E1                       3437 DOTOK:
      0013E1 CD 04 75         [ 4] 3438         CALL     DOLIT
      0013E4 13 99                 3439         .word      INTER
      0013E6 CD 06 B8         [ 4] 3440         CALL     TEVAL
      0013E9 CD 04 F3         [ 4] 3441         CALL     AT
      0013EC CD 08 36         [ 4] 3442         CALL     EQUAL
      0013EF CD 04 A8         [ 4] 3443         CALL     QBRAN
      0013F2 13 FB                 3444         .word      DOTO1
      0013F4 CD 0F 8B         [ 4] 3445         CALL     DOTQP
      0013F7 03                    3446         .byte      3
      0013F8 20 6F 6B              3447         .ascii     " ok"
      0013FB CC 0F 4C         [ 2] 3448 DOTO1:  JP     CR
                                   3449 
                                   3450 ;       ?STACK  ( -- )
                                   3451 ;       Abort if stack underflows.
      0013FE 13 DD                 3452         .word      LINK
                           001400  3453 LINK = . 
      001400 06                    3454         .byte      6
      001401 3F 53 54 41 43 4B     3455         .ascii     "?STACK"
      001407                       3456 QSTAC: 
      001407 CD 0B 28         [ 4] 3457         CALL     DEPTH
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      00140A CD 05 D3         [ 4] 3458         CALL     ZLESS   ;check only for underflow
      00140D CD 13 67         [ 4] 3459         CALL     ABORQ
      001410 0B                    3460         .byte      11
      001411 20 75 6E 64 65 72 66  3461         .ascii     " underflow "
             6C 6F 77 20
      00141C 81               [ 4] 3462         RET
                                   3463 
                                   3464 ;       EVAL    ( -- )
                                   3465 ;       Interpret  input stream.
      00141D 14 00                 3466         .word      LINK
                           00141F  3467 LINK = . 
      00141F 04                    3468         .byte      4
      001420 45 56 41 4C           3469         .ascii     "EVAL"
      001424                       3470 EVAL:
      001424 CD 11 5E         [ 4] 3471 EVAL1:  CALL     TOKEN
      001427 CD 05 9A         [ 4] 3472         CALL     DUPP
      00142A CD 05 11         [ 4] 3473         CALL     CAT     ;?input stream empty
      00142D CD 04 A8         [ 4] 3474         CALL     QBRAN
      001430 14 40                 3475         .word    EVAL2
      001432 CD 06 B8         [ 4] 3476         CALL     TEVAL
      001435 CD 0C 0A         [ 4] 3477         CALL     ATEXE
      001438 CD 14 07         [ 4] 3478         CALL     QSTAC   ;evaluate input, check stack
      00143B CD 04 BF         [ 4] 3479         CALL     BRAN
      00143E 14 24                 3480         .word    EVAL1
      001440 CD 05 90         [ 4] 3481 EVAL2:  CALL     DROP
      001443 CC 13 E1         [ 2] 3482         JP       DOTOK
                                   3483 
                                   3484 ;       PRESET  ( -- )
                                   3485 ;       Reset data stack pointer and
                                   3486 ;       terminal input buffer.
      001446 14 1F                 3487         .word      LINK
                           001448  3488 LINK = . 
      001448 06                    3489         .byte      6
      001449 50 52 45 53 45 54     3490         .ascii     "PRESET"
      00144F                       3491 PRESE:
      00144F CD 04 75         [ 4] 3492         CALL     DOLIT
      001452 16 80                 3493         .word      SPP
      001454 CD 05 87         [ 4] 3494         CALL     SPSTO
      001457 CD 04 75         [ 4] 3495         CALL     DOLIT
      00145A 17 00                 3496         .word      TIBB
      00145C CD 06 85         [ 4] 3497         CALL     NTIB
      00145F CD 0A 4F         [ 4] 3498         CALL     CELLP
      001462 CC 04 DC         [ 2] 3499         JP     STORE
                                   3500 
                                   3501 ;       QUIT    ( -- )
                                   3502 ;       Reset return stack pointer
                                   3503 ;       and start text interpreter.
      001465 14 48                 3504         .word      LINK
                           001467  3505 LINK = . 
      001467 04                    3506         .byte      4
      001468 51 55 49 54           3507         .ascii     "QUIT"
      00146C                       3508 QUIT:
      00146C CD 04 75         [ 4] 3509         CALL     DOLIT
      00146F 17 FF                 3510         .word      RPP
      001471 CD 05 2E         [ 4] 3511         CALL     RPSTO   ;reset return stack pointer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      001474 CD 13 D0         [ 4] 3512 QUIT1:  CALL     LBRAC   ;start interpretation
      001477 CD 13 33         [ 4] 3513 QUIT2:  CALL     QUERY   ;get input
      00147A CD 14 24         [ 4] 3514         CALL     EVAL
      00147D 20 F8            [ 2] 3515         JRA     QUIT2   ;continue till error
                                   3516 
                                   3517 ;; The compiler
                                   3518 
                                   3519 ;       '       ( -- ca )
                                   3520 ;       Search vocabularies for
                                   3521 ;       next word in input stream.
      00147F 14 67                 3522         .word      LINK
                           001481  3523 LINK = . 
      001481 01                    3524         .byte      1
      001482 27                    3525         .ascii     "'"
      001483                       3526 TICK:
      001483 CD 11 5E         [ 4] 3527         CALL     TOKEN
      001486 CD 12 5B         [ 4] 3528         CALL     NAMEQ   ;?defined
      001489 CD 04 A8         [ 4] 3529         CALL     QBRAN
      00148C 13 6F                 3530         .word      ABOR1
      00148E 81               [ 4] 3531         RET     ;yes, push code address
                                   3532 
                                   3533 ;       ALLOT   ( n -- )
                                   3534 ;       Allocate n bytes to RAM 
      00148F 14 81                 3535         .word      LINK
                           001491  3536         LINK = . 
      001491 05                    3537         .byte      5
      001492 41 4C 4C 4F 54        3538         .ascii     "ALLOT"
      001497                       3539 ALLOT:
      001497 CD 06 E8         [ 4] 3540         CALL     VPP
                                   3541 ; must update APP_VP each time VP is modidied
      00149A CD 0B 56         [ 4] 3542         call PSTOR 
      00149D CC 1B E0         [ 2] 3543         jp UPDATVP 
                                   3544 
                                   3545 ;       ,       ( w -- )
                                   3546 ;         Compile an integer into
                                   3547 ;         variable space.
      0014A0 14 91                 3548         .word      LINK
                           0014A2  3549 LINK = . 
      0014A2 01                    3550         .byte      1
      0014A3 2C                    3551         .ascii     ","
      0014A4                       3552 COMMA:
      0014A4 CD 0B D4         [ 4] 3553         CALL     HERE
      0014A7 CD 05 9A         [ 4] 3554         CALL     DUPP
      0014AA CD 0A 4F         [ 4] 3555         CALL     CELLP   ;cell boundary
      0014AD CD 06 E8         [ 4] 3556         CALL     VPP
      0014B0 CD 04 DC         [ 4] 3557         CALL     STORE
      0014B3 CC 04 DC         [ 2] 3558         JP     STORE
                                   3559 
                                   3560 ;       C,      ( c -- )
                                   3561 ;       Compile a byte into
                                   3562 ;       variables space.
      0014B6 14 A2                 3563        .word      LINK
                           0014B8  3564 LINK = . 
      0014B8 02                    3565         .byte      2
      0014B9 43 2C                 3566         .ascii     "C,"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      0014BB                       3567 CCOMMA:
      0014BB CD 0B D4         [ 4] 3568         CALL     HERE
      0014BE CD 05 9A         [ 4] 3569         CALL     DUPP
      0014C1 CD 0A 7A         [ 4] 3570         CALL     ONEP
      0014C4 CD 06 E8         [ 4] 3571         CALL     VPP
      0014C7 CD 04 DC         [ 4] 3572         CALL     STORE
      0014CA CC 05 00         [ 2] 3573         JP     CSTOR
                                   3574 
                                   3575 ;       [COMPILE]       ( -- ; <string> )
                                   3576 ;       Compile next immediate
                                   3577 ;       word into code dictionary.
      0014CD 14 B8                 3578         .word      LINK
                           0014CF  3579 LINK = . 
      0014CF 89                    3580 	.byte      IMEDD+9
      0014D0 5B 43 4F 4D 50 49 4C  3581         .ascii     "[COMPILE]"
             45 5D
      0014D9                       3582 BCOMP:
      0014D9 CD 14 83         [ 4] 3583         CALL     TICK
      0014DC CC 17 9F         [ 2] 3584         JP     JSRC
                                   3585 
                                   3586 ;       COMPILE ( -- )
                                   3587 ;       Compile next jsr in
                                   3588 ;       colon list to code dictionary.
      0014DF 14 CF                 3589         .word      LINK
                           0014E1  3590 LINK = . 
      0014E1 47                    3591 	.byte      COMPO+7
      0014E2 43 4F 4D 50 49 4C 45  3592         .ascii     "COMPILE"
      0014E9                       3593 COMPI:
      0014E9 CD 05 44         [ 4] 3594         CALL     RFROM
      0014EC CD 05 9A         [ 4] 3595         CALL     DUPP
      0014EF CD 04 F3         [ 4] 3596         CALL     AT
      0014F2 CD 17 9F         [ 4] 3597         CALL     JSRC    ;compile subroutine
      0014F5 CD 0A 4F         [ 4] 3598         CALL     CELLP
      0014F8 90 93            [ 1] 3599         ldw y,x 
      0014FA 90 FE            [ 2] 3600         ldw y,(y)
      0014FC 1C 00 02         [ 2] 3601         addw x,#CELLL 
      0014FF 90 FC            [ 2] 3602         jp (y)
                                   3603 
                                   3604 ;       LITERAL ( w -- )
                                   3605 ;       Compile tos to dictionary
                                   3606 ;       as an integer literal.
      001501 14 E1                 3607         .word      LINK
                           001503  3608 LINK = . 
      001503 87                    3609 	.byte      IMEDD+7
      001504 4C 49 54 45 52 41 4C  3610         .ascii     "LITERAL"
      00150B                       3611 LITER:
      00150B CD 14 E9         [ 4] 3612         CALL     COMPI
      00150E 04 75                 3613         .word DOLIT 
      001510 CC 14 A4         [ 2] 3614         JP     COMMA
                                   3615 
                                   3616 ;       $,"     ( -- )
                                   3617 ;       Compile a literal string
                                   3618 ;       up to next " .
      001513 15 03                 3619         .word      LINK
                           001515  3620 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      001515 03                    3621         .byte      3
      001516 24 2C 22              3622         .byte     '$',',','"'
      001519                       3623 STRCQ:
      001519 CD 04 75         [ 4] 3624         CALL     DOLIT
      00151C 00 22                 3625         .word     34	; "
      00151E CD 10 E1         [ 4] 3626         CALL     PARSE
      001521 CD 0B D4         [ 4] 3627         CALL     HERE
      001524 CD 0C 94         [ 4] 3628         CALL     PACKS   ;string to code dictionary
      001527 CD 0B BD         [ 4] 3629         CALL     COUNT
      00152A CD 07 95         [ 4] 3630         CALL     PLUS    ;calculate aligned end of string
      00152D CD 06 E8         [ 4] 3631         CALL     VPP
      001530 CC 04 DC         [ 2] 3632         JP     STORE
                                   3633 
                                   3634 ;; Structures
                                   3635 
                                   3636 ;       FOR     ( -- a )
                                   3637 ;       Start a FOR-NEXT loop
                                   3638 ;       structure in a colon definition.
      001533 15 15                 3639         .word      LINK
                           001535  3640 LINK = . 
      001535 83                    3641 	.byte      IMEDD+3
      001536 46 4F 52              3642         .ascii     "FOR"
      001539                       3643 FOR:
      001539 CD 14 E9         [ 4] 3644         CALL     COMPI
      00153C 05 63                 3645         .word TOR 
      00153E CC 0B D4         [ 2] 3646         JP     HERE
                                   3647 
                                   3648 ;       NEXT    ( a -- )
                                   3649 ;       Terminate a FOR-NEXT loop.
      001541 15 35                 3650         .word      LINK
                           001543  3651 LINK = . 
      001543 84                    3652 	.byte      IMEDD+4
      001544 4E 45 58 54           3653         .ascii     "NEXT"
      001548                       3654 NEXT:
      001548 CD 14 E9         [ 4] 3655         CALL     COMPI
      00154B 04 89                 3656         .word DONXT 
      00154D CD 07 34         [ 4] 3657         call ADRADJ
      001550 CC 14 A4         [ 2] 3658         JP     COMMA
                                   3659 
                                   3660 ;       I ( -- n )
                                   3661 ;       stack FOR-NEXT COUNTER 
      001553 15 43                 3662         .word LINK 
                           001555  3663         LINK=.
      001555 01                    3664         .byte 1 
      001556 49                    3665         .ascii "I"
      001557                       3666 IFETCH: 
      001557 1D 00 02         [ 2] 3667         subw x,#CELLL 
      00155A 16 03            [ 2] 3668         ldw y,(3,sp)
      00155C FF               [ 2] 3669         ldw (x),y 
      00155D 81               [ 4] 3670         ret 
                                   3671 
                                   3672 ;       BEGIN   ( -- a )
                                   3673 ;       Start an infinite or
                                   3674 ;       indefinite loop structure.
      00155E 15 55                 3675         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                           001560  3676 LINK = . 
      001560 85                    3677 	.byte      IMEDD+5
      001561 42 45 47 49 4E        3678         .ascii     "BEGIN"
      001566                       3679 BEGIN:
      001566 CC 0B D4         [ 2] 3680         JP     HERE
                                   3681 
                                   3682 ;       UNTIL   ( a -- )
                                   3683 ;       Terminate a BEGIN-UNTIL
                                   3684 ;       indefinite loop structure.
      001569 15 60                 3685         .word      LINK
                           00156B  3686 LINK = . 
      00156B 85                    3687 	.byte      IMEDD+5
      00156C 55 4E 54 49 4C        3688         .ascii     "UNTIL"
      001571                       3689 UNTIL:
      001571 CD 14 E9         [ 4] 3690         CALL     COMPI
      001574 04 A8                 3691         .word    QBRAN 
      001576 CD 07 34         [ 4] 3692         call ADRADJ
      001579 CC 14 A4         [ 2] 3693         JP     COMMA
                                   3694 
                                   3695 ;       AGAIN   ( a -- )
                                   3696 ;       Terminate a BEGIN-AGAIN
                                   3697 ;       infinite loop structure.
      00157C 15 6B                 3698         .word      LINK
                           00157E  3699 LINK = . 
      00157E 85                    3700 	.byte      IMEDD+5
      00157F 41 47 41 49 4E        3701         .ascii     "AGAIN"
      001584                       3702 AGAIN:
      001584 CD 14 E9         [ 4] 3703         CALL     COMPI
      001587 04 BF                 3704         .word BRAN
      001589 CD 07 34         [ 4] 3705         call ADRADJ 
      00158C CC 14 A4         [ 2] 3706         JP     COMMA
                                   3707 
                                   3708 ;       IF      ( -- A )
                                   3709 ;       Begin a conditional branch.
      00158F 15 7E                 3710         .word      LINK
                           001591  3711 LINK = . 
      001591 82                    3712 	.byte      IMEDD+2
      001592 49 46                 3713         .ascii     "IF"
      001594                       3714 IFF:
      001594 CD 14 E9         [ 4] 3715         CALL     COMPI
      001597 04 A8                 3716         .word QBRAN
      001599 CD 0B D4         [ 4] 3717         CALL     HERE
      00159C CD 0A E6         [ 4] 3718         CALL     ZERO
      00159F CC 14 A4         [ 2] 3719         JP     COMMA
                                   3720 
                                   3721 ;       THEN        ( A -- )
                                   3722 ;       Terminate a conditional branch structure.
      0015A2 15 91                 3723         .word      LINK
                           0015A4  3724 LINK = . 
      0015A4 84                    3725 	.byte      IMEDD+4
      0015A5 54 48 45 4E           3726         .ascii     "THEN"
      0015A9                       3727 THENN:
      0015A9 CD 0B D4         [ 4] 3728         CALL     HERE
      0015AC CD 07 34         [ 4] 3729         call ADRADJ 
      0015AF CD 05 AA         [ 4] 3730         CALL     SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      0015B2 CC 04 DC         [ 2] 3731         JP     STORE
                                   3732 
                                   3733 ;       ELSE        ( A -- A )
                                   3734 ;       Start the false clause in an IF-ELSE-THEN structure.
      0015B5 15 A4                 3735         .word      LINK
                           0015B7  3736 LINK = . 
      0015B7 84                    3737 	.byte      IMEDD+4
      0015B8 45 4C 53 45           3738         .ascii     "ELSE"
      0015BC                       3739 ELSEE:
      0015BC CD 14 E9         [ 4] 3740         CALL     COMPI
      0015BF 04 BF                 3741         .word BRAN
      0015C1 CD 0B D4         [ 4] 3742         CALL     HERE
      0015C4 CD 0A E6         [ 4] 3743         CALL     ZERO
      0015C7 CD 14 A4         [ 4] 3744         CALL     COMMA
      0015CA CD 05 AA         [ 4] 3745         CALL     SWAPP
      0015CD CD 0B D4         [ 4] 3746         CALL     HERE
      0015D0 CD 07 34         [ 4] 3747         call ADRADJ 
      0015D3 CD 05 AA         [ 4] 3748         CALL     SWAPP
      0015D6 CC 04 DC         [ 2] 3749         JP     STORE
                                   3750 
                                   3751 ;       AHEAD       ( -- A )
                                   3752 ;       Compile a forward branch instruction.
      0015D9 15 B7                 3753         .word      LINK
                           0015DB  3754 LINK = . 
      0015DB 85                    3755 	.byte      IMEDD+5
      0015DC 41 48 45 41 44        3756         .ascii     "AHEAD"
      0015E1                       3757 AHEAD:
      0015E1 CD 14 E9         [ 4] 3758         CALL     COMPI
      0015E4 04 BF                 3759         .word BRAN
      0015E6 CD 0B D4         [ 4] 3760         CALL     HERE
      0015E9 CD 0A E6         [ 4] 3761         CALL     ZERO
      0015EC CC 14 A4         [ 2] 3762         JP     COMMA
                                   3763 
                                   3764 ;       WHILE       ( a -- A a )
                                   3765 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      0015EF 15 DB                 3766         .word      LINK
                           0015F1  3767 LINK = . 
      0015F1 85                    3768 	.byte      IMEDD+5
      0015F2 57 48 49 4C 45        3769         .ascii     "WHILE"
      0015F7                       3770 WHILE:
      0015F7 CD 14 E9         [ 4] 3771         CALL     COMPI
      0015FA 04 A8                 3772         .word QBRAN
      0015FC CD 0B D4         [ 4] 3773         CALL     HERE
      0015FF CD 0A E6         [ 4] 3774         CALL     ZERO
      001602 CD 14 A4         [ 4] 3775         CALL     COMMA
      001605 CC 05 AA         [ 2] 3776         JP     SWAPP
                                   3777 
                                   3778 ;       REPEAT      ( A a -- )
                                   3779 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      001608 15 F1                 3780         .word      LINK
                           00160A  3781 LINK = . 
      00160A 86                    3782         .byte      IMEDD+6
      00160B 52 45 50 45 41 54     3783         .ascii     "REPEAT"
      001611                       3784 REPEA:
      001611 CD 14 E9         [ 4] 3785         CALL     COMPI
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      001614 04 BF                 3786         .word BRAN
      001616 CD 07 34         [ 4] 3787         call ADRADJ 
      001619 CD 14 A4         [ 4] 3788         CALL     COMMA
      00161C CD 0B D4         [ 4] 3789         CALL     HERE
      00161F CD 07 34         [ 4] 3790         call ADRADJ 
      001622 CD 05 AA         [ 4] 3791         CALL     SWAPP
      001625 CC 04 DC         [ 2] 3792         JP     STORE
                                   3793 
                                   3794 ;       AFT         ( a -- a A )
                                   3795 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      001628 16 0A                 3796         .word      LINK
                           00162A  3797 LINK = . 
      00162A 83                    3798 	.byte      IMEDD+3
      00162B 41 46 54              3799         .ascii     "AFT"
      00162E                       3800 AFT:
      00162E CD 05 90         [ 4] 3801         CALL     DROP
      001631 CD 15 E1         [ 4] 3802         CALL     AHEAD
      001634 CD 0B D4         [ 4] 3803         CALL     HERE
      001637 CC 05 AA         [ 2] 3804         JP     SWAPP
                                   3805 
                                   3806 ;       ABORT"      ( -- ; <string> )
                                   3807 ;       Conditional abort with an error message.
      00163A 16 2A                 3808         .word      LINK
                           00163C  3809 LINK = . 
      00163C 86                    3810 	.byte      IMEDD+6
      00163D 41 42 4F 52 54        3811         .ascii     "ABORT"
      001642 22                    3812         .byte      '"'
      001643                       3813 ABRTQ:
      001643 CD 14 E9         [ 4] 3814         CALL     COMPI
      001646 13 67                 3815         .word ABORQ
      001648 CC 15 19         [ 2] 3816         JP     STRCQ
                                   3817 
                                   3818 ;       $"     ( -- ; <string> )
                                   3819 ;       Compile an inline string literal.
      00164B 16 3C                 3820         .word      LINK
                           00164D  3821 LINK = . 
      00164D 82                    3822 	.byte      IMEDD+2
      00164E 24 22                 3823         .byte     '$','"'
      001650                       3824 STRQ:
      001650 CD 14 E9         [ 4] 3825         CALL     COMPI
      001653 0F 81                 3826         .word STRQP 
      001655 CC 15 19         [ 2] 3827         JP     STRCQ
                                   3828 
                                   3829 ;       ."          ( -- ; <string> )
                                   3830 ;       Compile an inline string literal to be typed out at run time.
      001658 16 4D                 3831         .word      LINK
                           00165A  3832 LINK = . 
      00165A 82                    3833 	.byte      IMEDD+2
      00165B 2E 22                 3834         .byte     '.','"'
      00165D                       3835 DOTQ:
      00165D CD 14 E9         [ 4] 3836         CALL     COMPI
      001660 0F 8B                 3837         .word DOTQP 
      001662 CC 15 19         [ 2] 3838         JP     STRCQ
                                   3839 
                                   3840 ;; Name compiler
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                   3841 
                                   3842 ;       ?UNIQUE ( a -- a )
                                   3843 ;       Display a warning message
                                   3844 ;       if word already exists.
      001665 16 5A                 3845         .word      LINK
                           001667  3846 LINK = . 
      001667 07                    3847         .byte      7
      001668 3F 55 4E 49 51 55 45  3848         .ascii     "?UNIQUE"
      00166F                       3849 UNIQU:
      00166F CD 05 9A         [ 4] 3850         CALL     DUPP
      001672 CD 12 5B         [ 4] 3851         CALL     NAMEQ   ;?name exists
      001675 CD 04 A8         [ 4] 3852         CALL     QBRAN
      001678 16 8E                 3853         .word      UNIQ1
      00167A CD 0F 8B         [ 4] 3854         CALL     DOTQP   ;redef are OK
      00167D 07                    3855         .byte       7
      00167E 20 72 65 44 65 66 20  3856         .ascii     " reDef "       
      001685 CD 05 C4         [ 4] 3857         CALL     OVER
      001688 CD 0B BD         [ 4] 3858         CALL     COUNT
      00168B CD 0F 2E         [ 4] 3859         CALL     TYPES   ;just in case
      00168E CC 05 90         [ 2] 3860 UNIQ1:  JP     DROP
                                   3861 
                                   3862 ;       $,n     ( na -- )
                                   3863 ;       Build a new dictionary name
                                   3864 ;       using string at na.
                                   3865 ; compile dans l'espace des variables 
      001691 16 67                 3866         .word      LINK
                           001693  3867 LINK = . 
      001693 03                    3868         .byte      3
      001694 24 2C 6E              3869         .ascii     "$,n"
      001697                       3870 SNAME:
      001697 CD 05 9A         [ 4] 3871         CALL     DUPP
      00169A CD 05 11         [ 4] 3872         CALL     CAT     ;?null input
      00169D CD 04 A8         [ 4] 3873         CALL     QBRAN
      0016A0 16 CD                 3874         .word      PNAM1
      0016A2 CD 16 6F         [ 4] 3875         CALL     UNIQU   ;?redefinition
      0016A5 CD 05 9A         [ 4] 3876         CALL     DUPP
      0016A8 CD 0B BD         [ 4] 3877         CALL     COUNT
      0016AB CD 07 95         [ 4] 3878         CALL     PLUS
      0016AE CD 06 E8         [ 4] 3879         CALL     VPP
      0016B1 CD 04 DC         [ 4] 3880         CALL     STORE
      0016B4 CD 05 9A         [ 4] 3881         CALL     DUPP
      0016B7 CD 07 06         [ 4] 3882         CALL     LAST
      0016BA CD 04 DC         [ 4] 3883         CALL     STORE   ;save na for vocabulary link
      0016BD CD 0A 5E         [ 4] 3884         CALL     CELLM   ;link address
      0016C0 CD 06 DA         [ 4] 3885         CALL     CNTXT
      0016C3 CD 04 F3         [ 4] 3886         CALL     AT
      0016C6 CD 05 AA         [ 4] 3887         CALL     SWAPP
      0016C9 CD 04 DC         [ 4] 3888         CALL     STORE
      0016CC 81               [ 4] 3889         RET     ;save code pointer
      0016CD CD 0F 81         [ 4] 3890 PNAM1:  CALL     STRQP
      0016D0 05                    3891         .byte      5
      0016D1 20 6E 61 6D 65        3892         .ascii     " name" ;null input
      0016D6 CC 13 6F         [ 2] 3893         JP     ABOR1
                                   3894 
                                   3895 ;; FORTH compiler
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                   3896 
                                   3897 ;       $COMPILE        ( a -- )
                                   3898 ;       Compile next word to
                                   3899 ;       dictionary as a token or literal.
      0016D9 16 93                 3900         .word      LINK
                           0016DB  3901 LINK = . 
      0016DB 08                    3902         .byte      8
      0016DC 24 43 4F 4D 50 49 4C  3903         .ascii     "$COMPILE"
             45
      0016E4                       3904 SCOMP:
      0016E4 CD 12 5B         [ 4] 3905         CALL     NAMEQ
      0016E7 CD 07 44         [ 4] 3906         CALL     QDUP    ;?defined
      0016EA CD 04 A8         [ 4] 3907         CALL     QBRAN
      0016ED 17 05                 3908         .word      SCOM2
      0016EF CD 04 F3         [ 4] 3909         CALL     AT
      0016F2 CD 04 75         [ 4] 3910         CALL     DOLIT
      0016F5 80 00                 3911         .word     0x8000	;  IMEDD*256
      0016F7 CD 05 E6         [ 4] 3912         CALL     ANDD    ;?immediate
      0016FA CD 04 A8         [ 4] 3913         CALL     QBRAN
      0016FD 17 02                 3914         .word      SCOM1
      0016FF CC 04 CF         [ 2] 3915         JP     EXECU
      001702 CC 17 9F         [ 2] 3916 SCOM1:  JP     JSRC
      001705 CD 0D F9         [ 4] 3917 SCOM2:  CALL     NUMBQ   ;try to convert to number
      001708 CD 04 A8         [ 4] 3918         CALL     QBRAN
      00170B 13 6F                 3919         .word      ABOR1
      00170D CC 15 0B         [ 2] 3920         JP     LITER
                                   3921 
                                   3922 ;       OVERT   ( -- )
                                   3923 ;       Link a new word into vocabulary.
      001710 16 DB                 3924         .word      LINK
                           001712  3925 LINK = . 
      001712 05                    3926         .byte      5
      001713 4F 56 45 52 54        3927         .ascii     "OVERT"
      001718                       3928 OVERT:
      001718 CD 07 06         [ 4] 3929         CALL     LAST
      00171B CD 04 F3         [ 4] 3930         CALL     AT
      00171E CD 06 DA         [ 4] 3931         CALL     CNTXT
      001721 CC 04 DC         [ 2] 3932         JP     STORE
                                   3933 
                                   3934 ;       ;       ( -- )
                                   3935 ;       Terminate a colon definition.
      001724 17 12                 3936         .word      LINK
                           001726  3937 LINK = . 
      001726 C1                    3938 	.byte      IMEDD+COMPO+1
      001727 3B                    3939         .ascii     ";"
      001728                       3940 SEMIS:
                           000001  3941 .if OPTIMIZE ; more compact and faster
      001728 CD 04 75         [ 4] 3942         call DOLIT 
      00172B 00 81                 3943         .word 0x81   ; opcode for RET 
      00172D CD 14 BB         [ 4] 3944         call CCOMMA 
                           000000  3945 .else
                                   3946         CALL     COMPI
                                   3947         .word EXIT 
                                   3948 .endif 
      001730 CD 13 D0         [ 4] 3949         CALL     LBRAC
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      001733 CD 17 18         [ 4] 3950         call OVERT 
      001736 CD 21 38         [ 4] 3951         CALL FMOVE
      001739 CD 07 44         [ 4] 3952         call QDUP 
      00173C CD 04 A8         [ 4] 3953         call QBRAN 
      00173F 18 6F                 3954         .word SET_RAMLAST 
      001741 CD 21 CC         [ 4] 3955         CALL UPDATPTR
      001744 81               [ 4] 3956         RET 
                                   3957 
                                   3958 
                                   3959 ;       Terminate an ISR definition 
                                   3960 ;       retourn ca of ISR as double
                                   3961 ;       I; ( -- ud )
      001745 17 26                 3962         .word LINK 
                           001747  3963         LINK=.
      001747 C2                    3964         .byte 2+IMEDD+COMPO 
      001748 49 3B                 3965         .ascii "I;" 
      00174A                       3966 ISEMI:
      00174A 1D 00 02         [ 2] 3967         subw x,#CELLL  
      00174D 90 AE 00 80      [ 2] 3968         ldw y,#IRET_CODE 
      001751 FF               [ 2] 3969         ldw (x),y 
      001752 CD 14 BB         [ 4] 3970         call CCOMMA
      001755 CD 13 D0         [ 4] 3971         call LBRAC 
      001758 CD 22 11         [ 4] 3972         call IFMOVE
      00175B CD 07 44         [ 4] 3973         call QDUP 
      00175E CD 04 A8         [ 4] 3974         CALL QBRAN 
      001761 18 6F                 3975         .word SET_RAMLAST
      001763 CD 06 F6         [ 4] 3976         CALL CPP
      001766 CD 04 F3         [ 4] 3977         call AT 
      001769 CD 05 AA         [ 4] 3978         call SWAPP 
      00176C CD 06 F6         [ 4] 3979         CALL CPP 
      00176F CD 04 DC         [ 4] 3980         call STORE 
      001772 CD 1B C9         [ 4] 3981         call UPDATCP 
      001775 CD 1B 86         [ 4] 3982         call EEPVP 
      001778 CD 05 90         [ 4] 3983         call DROP 
      00177B CD 04 F3         [ 4] 3984         call AT 
      00177E CD 06 E8         [ 4] 3985         call VPP 
      001781 CD 04 DC         [ 4] 3986         call STORE 
      001784 CC 0A E6         [ 2] 3987         jp ZERO
      001787 81               [ 4] 3988         ret           
                                   3989         
                                   3990 
                                   3991 ;       ]       ( -- )
                                   3992 ;       Start compiling words in
                                   3993 ;       input stream.
      001788 17 47                 3994         .word      LINK
                           00178A  3995 LINK = . 
      00178A 01                    3996         .byte      1
      00178B 5D                    3997         .ascii     "]"
      00178C                       3998 RBRAC:
      00178C CD 04 75         [ 4] 3999         CALL   DOLIT
      00178F 16 E4                 4000         .word  SCOMP
      001791 CD 06 B8         [ 4] 4001         CALL   TEVAL
      001794 CC 04 DC         [ 2] 4002         JP     STORE
                                   4003 
                                   4004 ;       CALL,    ( ca -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                                   4005 ;       Compile a subroutine call.
      001797 17 8A                 4006         .word      LINK
                           001799  4007 LINK = . 
      001799 05                    4008         .byte      5
      00179A 43 41 4C 4C 2C        4009         .ascii     "CALL,"
      00179F                       4010 JSRC:
      00179F CD 04 75         [ 4] 4011         CALL     DOLIT
      0017A2 00 CD                 4012         .word     CALLL     ;CALL
      0017A4 CD 14 BB         [ 4] 4013         CALL     CCOMMA
      0017A7 CC 14 A4         [ 2] 4014         JP     COMMA
                                   4015 
                                   4016 ;       INIT-OFS ( -- )
                                   4017 ;       compute offset to adjust jump address 
                                   4018 ;       set variable OFFSET 
      0017AA 17 99                 4019         .word LINK 
                           0017AC  4020         LINK=.
      0017AC 08                    4021         .byte 8 
      0017AD 49 4E 49 54 2D 4F 46  4022         .ascii "INIT-OFS" 
             53
      0017B5                       4023 INITOFS:
      0017B5 CD 06 A7         [ 4] 4024         call TFLASH 
      0017B8 CD 04 F3         [ 4] 4025         CALL AT 
      0017BB CD 05 9A         [ 4] 4026         CALL DUPP 
      0017BE CD 04 A8         [ 4] 4027         call QBRAN
      0017C1 17 D2                 4028         .word 1$
      0017C3 CD 05 90         [ 4] 4029         call DROP  
      0017C6 CD 06 F6         [ 4] 4030         call CPP 
      0017C9 CD 04 F3         [ 4] 4031         call AT 
      0017CC CD 0B D4         [ 4] 4032         call HERE
      0017CF CD 08 0E         [ 4] 4033         call SUBB 
      0017D2 CD 07 2B         [ 4] 4034 1$:     call OFFSET 
      0017D5 CC 04 DC         [ 2] 4035         jp STORE  
                                   4036 
                                   4037 ;       :       ( -- ; <string> )
                                   4038 ;       Start a new colon definition
                                   4039 ;       using next word as its name.
      0017D8 17 AC                 4040         .word      LINK
                           0017DA  4041 LINK = . 
      0017DA 01                    4042         .byte      1
      0017DB 3A                    4043         .ascii     ":"
      0017DC                       4044 COLON:
      0017DC CD 17 B5         [ 4] 4045         call INITOFS       
      0017DF CD 11 5E         [ 4] 4046         CALL   TOKEN
      0017E2 CD 16 97         [ 4] 4047         CALL   SNAME
      0017E5 CC 17 8C         [ 2] 4048         JP     RBRAC
                                   4049 
                                   4050 ;       I:  ( -- )
                                   4051 ;       Start interrupt service routine definition
                                   4052 ;       those definition have no name.
      0017E8 17 DA                 4053         .word LINK
                           0017EA  4054         LINK=.
      0017EA 02                    4055         .byte 2 
      0017EB 49 3A                 4056         .ascii "I:" 
      0017ED                       4057 ICOLON:
      0017ED CD 17 B5         [ 4] 4058         call INITOFS 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      0017F0 CC 17 8C         [ 2] 4059         jp RBRAC  
                                   4060 
                                   4061 ;       IMMEDIATE       ( -- )
                                   4062 ;       Make last compiled word
                                   4063 ;       an immediate word.
      0017F3 17 EA                 4064         .word      LINK
                           0017F5  4065 LINK = . 
      0017F5 09                    4066         .byte      9
      0017F6 49 4D 4D 45 44 49 41  4067         .ascii     "IMMEDIATE"
             54 45
      0017FF                       4068 IMMED:
      0017FF CD 04 75         [ 4] 4069         CALL     DOLIT
      001802 80 00                 4070         .word     0x8000	;  IMEDD*256
      001804 CD 07 06         [ 4] 4071         CALL     LAST
      001807 CD 04 F3         [ 4] 4072         CALL     AT
      00180A CD 04 F3         [ 4] 4073         CALL     AT
      00180D CD 05 FA         [ 4] 4074         CALL     ORR
      001810 CD 07 06         [ 4] 4075         CALL     LAST
      001813 CD 04 F3         [ 4] 4076         CALL     AT
      001816 CC 04 DC         [ 2] 4077         JP     STORE
                                   4078 
                                   4079 ;; Defining words
                                   4080 
                                   4081 ;       CREATE  ( -- ; <string> )
                                   4082 ;       Compile a new array
                                   4083 ;       without allocating space.
      001819 17 F5                 4084         .word      LINK
                           00181B  4085 LINK = . 
      00181B 06                    4086         .byte      6
      00181C 43 52 45 41 54 45     4087         .ascii     "CREATE"
      001822                       4088 CREAT:
      001822 CD 11 5E         [ 4] 4089         CALL     TOKEN
      001825 CD 16 97         [ 4] 4090         CALL     SNAME
      001828 CD 17 18         [ 4] 4091         CALL     OVERT        
      00182B CD 14 E9         [ 4] 4092         CALL     COMPI 
      00182E 06 47                 4093         .word DOVAR 
      001830 81               [ 4] 4094         RET
                                   4095 
                                   4096 ;       VARIABLE        ( -- ; <string> )
                                   4097 ;       Compile a new variable
                                   4098 ;       initialized to 0.
      001831 18 1B                 4099         .word      LINK
                           001833  4100 LINK = . 
      001833 08                    4101         .byte      8
      001834 56 41 52 49 41 42 4C  4102         .ascii     "VARIABLE"
             45
      00183C                       4103 VARIA:
                                   4104 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      00183C CD 0B D4         [ 4] 4105         CALL HERE
      00183F CD 05 9A         [ 4] 4106         CALL DUPP 
      001842 CD 0A 4F         [ 4] 4107         CALL CELLP
      001845 CD 06 E8         [ 4] 4108         CALL VPP 
      001848 CD 04 DC         [ 4] 4109         CALL STORE
      00184B CD 18 22         [ 4] 4110         CALL CREAT
      00184E CD 05 9A         [ 4] 4111         CALL DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      001851 CD 14 A4         [ 4] 4112         CALL COMMA
      001854 CD 0A E6         [ 4] 4113         CALL ZERO
      001857 CD 05 AA         [ 4] 4114         call SWAPP 
      00185A CD 04 DC         [ 4] 4115         CALL STORE
      00185D CD 21 38         [ 4] 4116         CALL FMOVE ; move definition to FLASH
      001860 CD 07 44         [ 4] 4117         CALL QDUP 
      001863 CD 04 A8         [ 4] 4118         CALL QBRAN 
      001866 18 6F                 4119         .word SET_RAMLAST   
      001868 CD 1B E0         [ 4] 4120         call UPDATVP  ; don't update if variable kept in RAM.
      00186B CD 21 CC         [ 4] 4121         CALL UPDATPTR
      00186E 81               [ 4] 4122         RET         
      00186F                       4123 SET_RAMLAST: 
      00186F CD 07 06         [ 4] 4124         CALL LAST 
      001872 CD 04 F3         [ 4] 4125         CALL AT 
      001875 CD 07 19         [ 4] 4126         CALL RAMLAST 
      001878 CC 04 DC         [ 2] 4127         jp STORE  
                                   4128 
                                   4129 
                                   4130 ;       CONSTANT  ( n -- ; <string> )
                                   4131 ;       Compile a new constant 
                                   4132 ;       n CONSTANT name 
      00187B 18 33                 4133         .word LINK 
                           00187D  4134         LINK=. 
      00187D 08                    4135         .byte 8 
      00187E 43 4F 4E 53 54 41 4E  4136         .ascii "CONSTANT" 
             54
      001886                       4137 CONSTANT:          
      001886 CD 11 5E         [ 4] 4138         CALL TOKEN
      001889 CD 16 97         [ 4] 4139         CALL SNAME 
      00188C CD 17 18         [ 4] 4140         CALL OVERT 
      00188F CD 14 E9         [ 4] 4141         CALL COMPI 
      001892 18 B0                 4142         .word DOCONST
      001894 CD 14 A4         [ 4] 4143         CALL COMMA 
      001897 CD 21 38         [ 4] 4144         CALL FMOVE
      00189A CD 07 44         [ 4] 4145         CALL QDUP 
      00189D CD 04 A8         [ 4] 4146         CALL QBRAN 
      0018A0 18 6F                 4147         .word SET_RAMLAST  
      0018A2 CD 21 CC         [ 4] 4148         CALL UPDATPTR  
      0018A5 81               [ 4] 4149 1$:     RET          
                                   4150 
                                   4151 ; CONSTANT runtime semantic 
                                   4152 ; doCONST  ( -- n )
      0018A6 18 7D                 4153         .word LINK 
                           0018A8  4154         LINK=.
      0018A8 07                    4155         .byte 7
      0018A9 44 4F 43 4F 4E 53 54  4156         .ascii "DOCONST"
      0018B0                       4157 DOCONST:
      0018B0 1D 00 02         [ 2] 4158         subw x,#CELLL
      0018B3 90 85            [ 2] 4159         popw y 
      0018B5 90 FE            [ 2] 4160         ldw y,(y) 
      0018B7 FF               [ 2] 4161         ldw (x),y 
      0018B8 81               [ 4] 4162         ret 
                                   4163 
                                   4164 ;----------------------------------
                                   4165 ; create double constant 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                   4166 ; DCONST ( d -- ; <string> )
                                   4167 ;----------------------------------
      0018B9 18 A8                 4168     .word LINK 
                           0018BB  4169     LINK=.
      0018BB 06                    4170     .byte 6 
      0018BC 44 43 4F 4E 53 54     4171     .ascii "DCONST"
      0018C2                       4172 DCONST:
      0018C2 CD 11 5E         [ 4] 4173         CALL TOKEN
      0018C5 CD 16 97         [ 4] 4174         CALL SNAME 
      0018C8 CD 17 18         [ 4] 4175         CALL OVERT 
      0018CB CD 14 E9         [ 4] 4176         CALL COMPI 
      0018CE 18 F1                 4177         .word DO_DCONST
      0018D0 CD 14 A4         [ 4] 4178         CALL COMMA
      0018D3 CD 14 A4         [ 4] 4179         CALL COMMA  
      0018D6 CD 21 38         [ 4] 4180         CALL FMOVE
      0018D9 CD 07 44         [ 4] 4181         CALL QDUP 
      0018DC CD 04 A8         [ 4] 4182         CALL QBRAN 
      0018DF 18 6F                 4183         .word SET_RAMLAST  
      0018E1 CD 21 CC         [ 4] 4184         CALL UPDATPTR  
      0018E4 81               [ 4] 4185 1$:     RET          
                                   4186     
                                   4187 ;----------------------------------
                                   4188 ; runtime for DCONST 
                                   4189 ; stack double constant 
                                   4190 ; DO-DCONST ( -- d )
                                   4191 ;-----------------------------------
      0018E5 18 BB                 4192         .word LINK 
                           0018E7  4193         LINK=.
      0018E7 09                    4194         .byte 9 
      0018E8 44 4F 2D 44 43 4F 4E  4195         .ascii "DO-DCONST"
             53 54
      0018F1                       4196 DO_DCONST:
      0018F1 90 85            [ 2] 4197     popw y 
      0018F3 90 BF 24         [ 2] 4198     ldw YTEMP,y 
      0018F6 1D 00 04         [ 2] 4199     subw x,#2*CELLL 
      0018F9 90 FE            [ 2] 4200     ldw y,(y)
      0018FB FF               [ 2] 4201     ldw (x),y 
      0018FC 90 BE 24         [ 2] 4202     ldw y,YTEMP 
      0018FF 90 EE 02         [ 2] 4203     ldw y,(2,y)
      001902 EF 02            [ 2] 4204     ldw (2,x),y 
      001904 81               [ 4] 4205     ret 
                                   4206 
                                   4207 ;; Tools
                                   4208 
                                   4209 ;       _TYPE   ( b u -- )
                                   4210 ;       Display a string. Filter
                                   4211 ;       non-printing characters.
      001905 18 E7                 4212         .word      LINK
                           001907  4213 LINK = . 
      001907 05                    4214         .byte      5
      001908 5F 54 59 50 45        4215         .ascii     "_TYPE"
      00190D                       4216 UTYPE:
      00190D CD 05 63         [ 4] 4217         CALL     TOR     ;start count down loop
      001910 20 0F            [ 2] 4218         JRA     UTYP2   ;skip first pass
      001912 CD 05 9A         [ 4] 4219 UTYP1:  CALL     DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      001915 CD 05 11         [ 4] 4220         CALL     CAT
      001918 CD 0B 10         [ 4] 4221         CALL     TCHAR
      00191B CD 04 34         [ 4] 4222         CALL     EMIT    ;display only printable
      00191E CD 0A 7A         [ 4] 4223         CALL     ONEP    ;increment address
      001921 CD 04 89         [ 4] 4224 UTYP2:  CALL     DONXT
      001924 19 12                 4225         .word      UTYP1   ;loop till done
      001926 CC 05 90         [ 2] 4226         JP     DROP
                                   4227 
                                   4228 ;       dm+     ( a u -- a )
                                   4229 ;       Dump u bytes from ,
                                   4230 ;       leaving a+u on  stack.
      001929 19 07                 4231         .word      LINK
                           00192B  4232 LINK = . 
      00192B 03                    4233         .byte      3
      00192C 64 6D 2B              4234         .ascii     "dm+"
      00192F                       4235 DUMPP:
      00192F CD 05 C4         [ 4] 4236         CALL     OVER
      001932 CD 04 75         [ 4] 4237         CALL     DOLIT
      001935 00 04                 4238         .word      4
      001937 CD 0F B4         [ 4] 4239         CALL     UDOTR   ;display address
      00193A CD 0F 04         [ 4] 4240         CALL     SPACE
      00193D CD 05 63         [ 4] 4241         CALL     TOR     ;start count down loop
      001940 20 11            [ 2] 4242         JRA     PDUM2   ;skip first pass
      001942 CD 05 9A         [ 4] 4243 PDUM1:  CALL     DUPP
      001945 CD 05 11         [ 4] 4244         CALL     CAT
      001948 CD 04 75         [ 4] 4245         CALL     DOLIT
      00194B 00 03                 4246         .word      3
      00194D CD 0F B4         [ 4] 4247         CALL     UDOTR   ;display numeric data
      001950 CD 0A 7A         [ 4] 4248         CALL     ONEP    ;increment address
      001953 CD 04 89         [ 4] 4249 PDUM2:  CALL     DONXT
      001956 19 42                 4250         .word      PDUM1   ;loop till done
      001958 81               [ 4] 4251         RET
                                   4252 
                                   4253 ;       DUMP    ( a u -- )
                                   4254 ;       Dump u bytes from a,
                                   4255 ;       in a formatted manner.
      001959 19 2B                 4256         .word      LINK
                           00195B  4257 LINK = . 
      00195B 04                    4258         .byte      4
      00195C 44 55 4D 50           4259         .ascii     "DUMP"
      001960                       4260 DUMP:
      001960 CD 06 57         [ 4] 4261         CALL     BASE
      001963 CD 04 F3         [ 4] 4262         CALL     AT
      001966 CD 05 63         [ 4] 4263         CALL     TOR
      001969 CD 0D 8C         [ 4] 4264         CALL     HEX     ;save radix, set hex
      00196C CD 04 75         [ 4] 4265         CALL     DOLIT
      00196F 00 10                 4266         .word      16
      001971 CD 09 A0         [ 4] 4267         CALL     SLASH   ;change count to lines
      001974 CD 05 63         [ 4] 4268         CALL     TOR     ;start count down loop
      001977 CD 0F 4C         [ 4] 4269 DUMP1:  CALL     CR
      00197A CD 04 75         [ 4] 4270         CALL     DOLIT
      00197D 00 10                 4271         .word      16
      00197F CD 07 80         [ 4] 4272         CALL     DDUP
      001982 CD 19 2F         [ 4] 4273         CALL     DUMPP   ;display numeric
      001985 CD 07 55         [ 4] 4274         CALL     ROT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      001988 CD 07 55         [ 4] 4275         CALL     ROT
      00198B CD 0F 04         [ 4] 4276         CALL     SPACE
      00198E CD 0F 04         [ 4] 4277         CALL     SPACE
      001991 CD 19 0D         [ 4] 4278         CALL     UTYPE   ;display printable characters
      001994 CD 04 89         [ 4] 4279         CALL     DONXT
      001997 19 77                 4280         .word      DUMP1   ;loop till done
      001999 CD 05 90         [ 4] 4281 DUMP3:  CALL     DROP
      00199C CD 05 44         [ 4] 4282         CALL     RFROM
      00199F CD 06 57         [ 4] 4283         CALL     BASE
      0019A2 CC 04 DC         [ 2] 4284         JP     STORE   ;restore radix
                                   4285 
                                   4286 ;       .S      ( ... -- ... )
                                   4287 ;        Display  contents of stack.
      0019A5 19 5B                 4288         .word      LINK
                           0019A7  4289 LINK = . 
      0019A7 02                    4290         .byte      2
      0019A8 2E 53                 4291         .ascii     ".S"
      0019AA                       4292 DOTS:
      0019AA CD 0F 4C         [ 4] 4293         CALL     CR
      0019AD CD 0B 28         [ 4] 4294         CALL     DEPTH   ;stack depth
      0019B0 CD 05 63         [ 4] 4295         CALL     TOR     ;start count down loop
      0019B3 20 09            [ 2] 4296         JRA     DOTS2   ;skip first pass
      0019B5 CD 05 57         [ 4] 4297 DOTS1:  CALL     RAT
      0019B8 CD 0B 3F         [ 4] 4298 	CALL     PICK
      0019BB CD 0F E7         [ 4] 4299         CALL     DOT     ;index stack, display contents
      0019BE CD 04 89         [ 4] 4300 DOTS2:  CALL     DONXT
      0019C1 19 B5                 4301         .word      DOTS1   ;loop till done
      0019C3 CD 0F 8B         [ 4] 4302         CALL     DOTQP
      0019C6 05                    4303         .byte      5
      0019C7 20 3C 73 70 20        4304         .ascii     " <sp "
      0019CC 81               [ 4] 4305         RET
                                   4306 
                                   4307 ;       >NAME   ( ca -- na | F )
                                   4308 ;       Convert code address
                                   4309 ;       to a name address.
      0019CD 19 A7                 4310         .word      LINK
                           0019CF  4311 LINK = . 
      0019CF 05                    4312         .byte      5
      0019D0 3E 4E 41 4D 45        4313         .ascii     ">NAME"
      0019D5                       4314 TNAME:
      0019D5 CD 06 DA         [ 4] 4315         CALL     CNTXT   ;vocabulary link
      0019D8 CD 04 F3         [ 4] 4316 TNAM2:  CALL     AT
      0019DB CD 05 9A         [ 4] 4317         CALL     DUPP    ;?last word in a vocabulary
      0019DE CD 04 A8         [ 4] 4318         CALL     QBRAN
      0019E1 19 FC                 4319         .word      TNAM4
      0019E3 CD 07 80         [ 4] 4320         CALL     DDUP
      0019E6 CD 11 6C         [ 4] 4321         CALL     NAMET
      0019E9 CD 06 0F         [ 4] 4322         CALL     XORR    ;compare
      0019EC CD 04 A8         [ 4] 4323         CALL     QBRAN
      0019EF 19 F6                 4324         .word      TNAM3
      0019F1 CD 0A 5E         [ 4] 4325         CALL     CELLM   ;continue with next word
      0019F4 20 E2            [ 2] 4326         JRA     TNAM2
      0019F6 CD 05 AA         [ 4] 4327 TNAM3:  CALL     SWAPP
      0019F9 CC 05 90         [ 2] 4328         JP     DROP
      0019FC CD 07 75         [ 4] 4329 TNAM4:  CALL     DDROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      0019FF CC 0A E6         [ 2] 4330         JP     ZERO
                                   4331 
                                   4332 ;       .ID     ( na -- )
                                   4333 ;        Display  name at address.
      001A02 19 CF                 4334         .word      LINK
                           001A04  4335 LINK = . 
      001A04 03                    4336         .byte      3
      001A05 2E 49 44              4337         .ascii     ".ID"
      001A08                       4338 DOTID:
      001A08 CD 07 44         [ 4] 4339         CALL     QDUP    ;if zero no name
      001A0B CD 04 A8         [ 4] 4340         CALL     QBRAN
      001A0E 1A 1E                 4341         .word      DOTI1
      001A10 CD 0B BD         [ 4] 4342         CALL     COUNT
      001A13 CD 04 75         [ 4] 4343         CALL     DOLIT
      001A16 00 1F                 4344         .word      0x1F
      001A18 CD 05 E6         [ 4] 4345         CALL     ANDD    ;mask lexicon bits
      001A1B CC 19 0D         [ 2] 4346         JP     UTYPE
      001A1E CD 0F 8B         [ 4] 4347 DOTI1:  CALL     DOTQP
      001A21 09                    4348         .byte      9
      001A22 20 6E 6F 4E 61 6D 65  4349         .ascii     " noName"
      001A29 81               [ 4] 4350         RET
                                   4351 
                           000000  4352 WANT_SEE=0
                           000000  4353 .if WANT_SEE 
                                   4354 ;       SEE     ( -- ; <string> )
                                   4355 ;       A simple decompiler.
                                   4356 ;       Updated for byte machines.
                                   4357         .word      LINK
                                   4358 LINK = . 
                                   4359         .byte      3
                                   4360         .ascii     "SEE"
                                   4361 SEE:
                                   4362         CALL     TICK    ;starting address
                                   4363         CALL     CR
                                   4364         CALL     ONEM
                                   4365 SEE1:   CALL     ONEP
                                   4366         CALL     DUPP
                                   4367         CALL     AT
                                   4368         CALL     DUPP
                                   4369         CALL     QBRAN
                                   4370         .word    SEE2
                                   4371         CALL     TNAME   ;?is it a name
                                   4372 SEE2:   CALL     QDUP    ;name address or zero
                                   4373         CALL     QBRAN
                                   4374         .word    SEE3
                                   4375         CALL     SPACE
                                   4376         CALL     DOTID   ;display name
                                   4377         CALL     ONEP
                                   4378         JRA      SEE4
                                   4379 SEE3:   CALL     DUPP
                                   4380         CALL     CAT
                                   4381         CALL     UDOT    ;display number
                                   4382 SEE4:   CALL     NUFQ    ;user control
                                   4383         CALL     QBRAN
                                   4384         .word    SEE1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                   4385         JP     DROP
                                   4386 .endif ; WANT_SEE 
                                   4387 
                                   4388 ;       WORDS   ( -- )
                                   4389 ;       Display names in vocabulary.
      001A2A 1A 04                 4390         .word      LINK
                           001A2C  4391 LINK = . 
      001A2C 05                    4392         .byte      5
      001A2D 57 4F 52 44 53        4393         .ascii     "WORDS"
      001A32                       4394 WORDS:
      001A32 CD 0F 4C         [ 4] 4395         CALL     CR
      001A35 CD 06 DA         [ 4] 4396         CALL     CNTXT   ;only in context
      001A38 CD 04 F3         [ 4] 4397 WORS1:  CALL     AT
      001A3B CD 07 44         [ 4] 4398         CALL     QDUP    ;?at end of list
      001A3E CD 04 A8         [ 4] 4399         CALL     QBRAN
      001A41 1A 54                 4400         .word      WORS2
      001A43 CD 05 9A         [ 4] 4401         CALL     DUPP
      001A46 CD 0F 04         [ 4] 4402         CALL     SPACE
      001A49 CD 1A 08         [ 4] 4403         CALL     DOTID   ;display a name
      001A4C CD 0A 5E         [ 4] 4404         CALL     CELLM
      001A4F CD 04 BF         [ 4] 4405         CALL     BRAN
      001A52 1A 38                 4406         .word      WORS1
      001A54 81               [ 4] 4407 WORS2:  RET
                                   4408 
                                   4409         
                                   4410 ;; Hardware reset
                                   4411 
                                   4412 ;       hi      ( -- )
                                   4413 ;       Display sign-on message.
      001A55 1A 2C                 4414         .word      LINK
                           001A57  4415 LINK = . 
      001A57 02                    4416         .byte      2
      001A58 68 69                 4417         .ascii     "hi"
      001A5A                       4418 HI:
      001A5A CD 0F 4C         [ 4] 4419         CALL     CR
      001A5D CD 0F 8B         [ 4] 4420         CALL     DOTQP   ;initialize I/O
      001A60 0F                    4421         .byte      15
      001A61 73 74 6D 38 65 46 6F  4422         .ascii     "stm8eForth v"
             72 74 68 20 76
      001A6D 33                    4423 	.byte      VER+'0'
      001A6E 2E                    4424         .byte      '.' 
      001A6F 30                    4425 	.byte      EXT+'0' ;version
      001A70 CD 0F 8B         [ 4] 4426         CALL    DOTQP
                           000001  4427 .if NUCLEO          
      001A73 12                    4428         .byte 18
      001A74 20 6F 6E 20 4E 55 43  4429         .ascii  " on NUCLEO-8S208RB"
             4C 45 4F 2D 38 53 32
             30 38 52 42
                                   4430 .endif
                           000000  4431 .if DISCOVERY
                                   4432         .byte 19
                                   4433         .ascii  " on STM8S-DISCOVERY"
                                   4434 .endif
                           000000  4435 .if DOORBELL
                                   4436         .byte 16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                   4437         .ascii " on stm8s105k6b6"
                                   4438 .endif
      001A86 CC 0F 4C         [ 2] 4439         JP     CR
                                   4440 
                           000000  4441 WANT_DEBUG=0
                           000000  4442 .if WANT_DEBUG 
                                   4443 ;       DEBUG      ( -- )
                                   4444 ;       Display sign-on message.
                                   4445 ;        .word      LINK
                                   4446 LINK = . 
                                   4447         .byte      5
                                   4448         .ascii     "DEBUG"
                                   4449 DEBUG:
                                   4450 	CALL DOLIT
                                   4451 	.word 0x65
                                   4452 	CALL EMIT
                                   4453 	CALL DOLIT
                                   4454 	.word 0
                                   4455  	CALL ZLESS 
                                   4456 	CALL DOLIT
                                   4457 	.word 0xFFFE
                                   4458 	CALL ZLESS 
                                   4459 	CALL UPLUS 
                                   4460  	CALL DROP 
                                   4461 	CALL DOLIT
                                   4462 	.word 3
                                   4463 	CALL UPLUS 
                                   4464 	CALL UPLUS 
                                   4465  	CALL DROP
                                   4466 	CALL DOLIT
                                   4467 	.word 0x43
                                   4468 	CALL UPLUS 
                                   4469  	CALL DROP
                                   4470 	CALL EMIT
                                   4471 	CALL DOLIT
                                   4472 	.word 0x4F
                                   4473 	CALL DOLIT
                                   4474 	.word 0x6F
                                   4475  	CALL XORR
                                   4476 	CALL DOLIT
                                   4477 	.word 0xF0
                                   4478  	CALL ANDD
                                   4479 	CALL DOLIT
                                   4480 	.word 0x4F
                                   4481  	CALL ORR
                                   4482 	CALL EMIT
                                   4483 	CALL DOLIT
                                   4484 	.word 8
                                   4485 	CALL DOLIT
                                   4486 	.word 6
                                   4487  	CALL SWAPP
                                   4488 	CALL OVER
                                   4489 	CALL XORR
                                   4490 	CALL DOLIT
                                   4491 	.word 3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                   4492 	CALL ANDD 
                                   4493 	CALL ANDD
                                   4494 	CALL DOLIT
                                   4495 	.word 0x70
                                   4496 	CALL UPLUS 
                                   4497 	CALL DROP
                                   4498 	CALL EMIT
                                   4499 	CALL DOLIT
                                   4500 	.word 0
                                   4501 	CALL QBRAN
                                   4502 	.word DEBUG1
                                   4503 	CALL DOLIT
                                   4504 	.word 0x3F
                                   4505 DEBUG1:
                                   4506 	CALL DOLIT
                                   4507 	.word 0xFFFF
                                   4508 	CALL QBRAN
                                   4509 	.word DEBUG2
                                   4510 	CALL DOLIT
                                   4511 	.word 0x74
                                   4512 	CALL BRAN
                                   4513 	.word DEBUG3
                                   4514 DEBUG2:
                                   4515 	CALL DOLIT
                                   4516 	.word 0x21
                                   4517 DEBUG3:
                                   4518 	CALL EMIT
                                   4519 	CALL DOLIT
                                   4520 	.word 0x68
                                   4521 	CALL DOLIT
                                   4522 	.word 0x80
                                   4523 	CALL STORE
                                   4524 	CALL DOLIT
                                   4525 	.word 0x80
                                   4526 	CALL AT
                                   4527 	CALL EMIT
                                   4528 	CALL DOLIT
                                   4529 	.word 0x4D
                                   4530 	CALL TOR
                                   4531 	CALL RAT
                                   4532 	CALL RFROM
                                   4533 	CALL ANDD
                                   4534 	CALL EMIT
                                   4535 	CALL DOLIT
                                   4536 	.word 0x61
                                   4537 	CALL DOLIT
                                   4538 	.word 0xA
                                   4539 	CALL TOR
                                   4540 DEBUG4:
                                   4541 	CALL DOLIT
                                   4542 	.word 1
                                   4543 	CALL UPLUS 
                                   4544 	CALL DROP
                                   4545 	CALL DONXT
                                   4546 	.word DEBUG4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                   4547 	CALL EMIT
                                   4548 	CALL DOLIT
                                   4549 	.word 0x656D
                                   4550 	CALL DOLIT
                                   4551 	.word 0x100
                                   4552 	CALL UMSTA
                                   4553 	CALL SWAPP
                                   4554 	CALL DOLIT
                                   4555 	.word 0x100
                                   4556 	CALL UMSTA
                                   4557 	CALL SWAPP 
                                   4558 	CALL DROP
                                   4559 	CALL EMIT
                                   4560 	CALL EMIT
                                   4561 	CALL DOLIT
                                   4562 	.word 0x2043
                                   4563 	CALL DOLIT
                                   4564 	.word 0
                                   4565 	CALL DOLIT
                                   4566 	.word 0x100
                                   4567 	CALL UMMOD
                                   4568 	CALL EMIT
                                   4569 	CALL EMIT
                                   4570 	;JP ORIG
                                   4571 	RET
                                   4572 .endif ; WANT_DEBUG 
                                   4573 
                                   4574 
                                   4575 ;       'BOOT   ( -- a )
                                   4576 ;       The application startup vector.
      001A89 1A 57                 4577         .word      LINK
                           001A8B  4578 LINK = . 
      001A8B 05                    4579         .byte      5
      001A8C 27 42 4F 4F 54        4580         .ascii     "'BOOT"
      001A91                       4581 TBOOT:
      001A91 CD 06 47         [ 4] 4582         CALL     DOVAR
      001A94 40 02                 4583         .word    APP_RUN      ;application to boot
                                   4584 
                                   4585 ;       COLD    ( -- )
                                   4586 ;       The hilevel cold start s=ence.
      001A96 1A 8B                 4587         .word      LINK
                           001A98  4588         LINK = . 
      001A98 04                    4589         .byte      4
      001A99 43 4F 4C 44           4590         .ascii     "COLD"
      001A9D                       4591 COLD:
                           000000  4592 .if WANT_DEBUG
                                   4593         CALL DEBUG
                                   4594 .endif ; WANT_DEBUG
      001A9D CD 04 75         [ 4] 4595 COLD1:  CALL     DOLIT
      001AA0 00 2B                 4596         .word      UZERO
      001AA2 CD 04 75         [ 4] 4597 	CALL     DOLIT
      001AA5 00 06                 4598         .word      UPP
      001AA7 CD 04 75         [ 4] 4599         CALL     DOLIT
      001AAA 00 1A                 4600 	.word      UEND-UZERO
      001AAC CD 0C 21         [ 4] 4601         CALL     CMOVE   ;initialize user area
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                                   4602 
                                   4603 ; if APP_RUN==0 initialize with ca de 'hi'  
      001AAF 90 CE 40 02      [ 2] 4604         ldw y,APP_RUN 
      001AB3 26 0B            [ 1] 4605         jrne 0$
      001AB5 1D 00 02         [ 2] 4606         subw x,#CELLL 
      001AB8 90 AE 1A 5A      [ 2] 4607         ldw y,#HI  
      001ABC FF               [ 2] 4608         ldw (x),y
      001ABD CD 1B B8         [ 4] 4609         call UPDATRUN 
      001AC0                       4610 0$:        
                                   4611 ; update LAST with APP_LAST 
                                   4612 ; if APP_LAST > LAST else do the opposite
      001AC0 90 CE 40 00      [ 2] 4613         ldw y,APP_LAST 
      001AC4 90 B3 1A         [ 2] 4614         cpw y,ULAST 
      001AC7 22 05            [ 1] 4615         jrugt 1$ 
                                   4616 ; save LAST at APP_LAST  
      001AC9 CD 1B A0         [ 4] 4617         call UPDATLAST 
      001ACC 20 06            [ 2] 4618         jra 2$
      001ACE                       4619 1$: ; update LAST with APP_LAST 
      001ACE 90 BF 1A         [ 2] 4620         ldw ULAST,y
      001AD1 90 BF 14         [ 2] 4621         ldw UCNTXT,y
      001AD4                       4622 2$:  
                                   4623 ; update APP_CP if < app_space 
      001AD4 90 CE 40 04      [ 2] 4624         ldw y,APP_CP  
      001AD8 90 B3 18         [ 2] 4625         cpw y,UCP   
      001ADB 24 06            [ 1] 4626         jruge 3$ 
      001ADD CD 1B C9         [ 4] 4627         call UPDATCP
      001AE0 90 BE 18         [ 2] 4628         ldw y,UCP   
      001AE3                       4629 3$:
      001AE3 90 BF 18         [ 2] 4630         ldw UCP,y                 
                                   4631 ; update UVP with APP_VP  
                                   4632 ; if APP_VP>UVP else do the opposite 
      001AE6 90 CE 40 06      [ 2] 4633         ldw y,APP_VP 
      001AEA 90 B3 16         [ 2] 4634         cpw y,UVP 
      001AED 22 05            [ 1] 4635         jrugt 4$
      001AEF CD 1B E0         [ 4] 4636         call UPDATVP 
      001AF2 20 03            [ 2] 4637         jra 6$
      001AF4                       4638 4$: ; update UVP with APP_VP 
      001AF4 90 BF 16         [ 2] 4639         ldw UVP,y 
      001AF7                       4640 6$:      
      001AF7 CD 14 4F         [ 4] 4641         CALL     PRESE   ;initialize data stack and TIB
      001AFA CD 1A 91         [ 4] 4642         CALL     TBOOT
      001AFD CD 0C 0A         [ 4] 4643         CALL     ATEXE   ;application boot
      001B00 CD 17 18         [ 4] 4644         CALL     OVERT
      001B03 CC 14 6C         [ 2] 4645         JP     QUIT    ;start interpretation
                                   4646 
                                   4647 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                   4648         .include "flash.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21 ;  routines to write to FLASH, EEPROM 
                                     22 ;  and OPTION 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26 ;--------------------------------
                                     27 ; initialize FPTR 
                                     28 ; FP!  ( ud -- )
                                     29 ;---------------------------------
      001B06 1A 98                   30     .word LINK 
                           001B08    31     LINK=.
      001B08 03                      32     .byte 3 
      001B09 46 50 21                33     .ascii "FP!"
      001B0C                         34 FPSTOR:
      001B0C 90 93            [ 1]   35     ldw y,x
      001B0E 90 FE            [ 2]   36     ldw y,(y)
      001B10 90 9F            [ 1]   37     ld a,yl 
      001B12 B7 32            [ 1]   38     ld FPTR,a 
      001B14 1C 00 02         [ 2]   39     addw x,#CELLL 
      001B17 90 93            [ 1]   40     ldw y,x 
      001B19 90 FE            [ 2]   41     ldw y,(y)
      001B1B 90 BF 33         [ 2]   42     ldw PTR16,y
      001B1E 1C 00 02         [ 2]   43     addw x,#CELLL 
      001B21 81               [ 4]   44     ret 
                                     45 
                                     46 ;-----------------------------------
                                     47 ; return EEPROM base address 
                                     48 ; as a double 
                                     49 ;  EEPROM  ( -- ud )
                                     50 ;-----------------------------------
      001B22 1B 08                   51     .word LINK 
                           001B24    52 LINK=.
      001B24 06                      53     .byte 6 
      001B25 45 45 50 52 4F 4D       54     .ascii "EEPROM"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      001B2B                         55 EEPROM: 
      001B2B 90 AE 40 00      [ 2]   56     ldw y,#EEPROM_BASE
      001B2F 1D 00 04         [ 2]   57     subw x,#2*CELLL 
      001B32 EF 02            [ 2]   58     ldw (2,x),y 
      001B34 90 5F            [ 1]   59     clrw y 
      001B36 FF               [ 2]   60     ldw (x),y 
      001B37 81               [ 4]   61     ret
                                     62 
                                     63 ;---------------------------------
                                     64 ; return APP_LAST pointer as double
                                     65 ; EEP-LAST ( -- ud )
                                     66 ;---------------------------------
      001B38 1B 24                   67 	.word LINK 
                           001B3A    68 	LINK=.
      001B3A 08                      69 	.byte 8 
      001B3B 45 45 50 2D 4C 41 53    70 	.ascii "EEP-LAST"
             54
      001B43                         71 EEPLAST:
      001B43 1D 00 04         [ 2]   72 	subw x,#2*CELLL 
      001B46 90 AE 40 00      [ 2]   73 	ldw y,#APP_LAST 
      001B4A EF 02            [ 2]   74 	ldw (2,x),y 
      001B4C 90 5F            [ 1]   75 	clrw y 
      001B4E FF               [ 2]   76 	ldw (x),y 
      001B4F 81               [ 4]   77 	ret 
                                     78 
                                     79 ;----------------------------------
                                     80 ; return APP_RUN pointer as double	
                                     81 ; EEP-RUN ( -- ud )
                                     82 ;-----------------------------------
      001B50 1B 3A                   83 	.word LINK 
                           001B52    84 	LINK=.
      001B52 07                      85 	.byte 7
      001B53 45 45 50 2D 52 55 4E    86 	.ascii "EEP-RUN"
      001B5A                         87 EEPRUN:
      001B5A 1D 00 04         [ 2]   88 	subw x,#2*CELLL 
      001B5D 90 AE 40 02      [ 2]   89 	ldw y,#APP_RUN 
      001B61 EF 02            [ 2]   90 	ldw (2,x),y 
      001B63 90 5F            [ 1]   91 	clrw y 
      001B65 FF               [ 2]   92 	ldw (x),y 
      001B66 81               [ 4]   93 	ret 
                                     94 
                                     95 ;------------------------------------
                                     96 ; return APP_CP pointer as double 
                                     97 ; EEP-CP ( -- ud )
                                     98 ;------------------------------------
      001B67 1B 52                   99 	.word LINK
                           001B69   100 	LINK=.
      001B69 06                     101 	.byte 6 
      001B6A 45 45 50 2D 43 50      102 	.ascii "EEP-CP"
      001B70                        103 EEPCP:
      001B70 1D 00 04         [ 2]  104 	subw x,#2*CELLL 
      001B73 90 AE 40 04      [ 2]  105 	ldw y,#APP_CP  
      001B77 EF 02            [ 2]  106 	ldw (2,x),y 
      001B79 90 5F            [ 1]  107 	clrw y 
      001B7B FF               [ 2]  108 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      001B7C 81               [ 4]  109 	ret 
                                    110 
                                    111 ;------------------------------------
                                    112 ; return APP_VP pointer as double 
                                    113 ; EEP-VP ( -- ud )
                                    114 ;-------------------------------------
      001B7D 1B 69                  115 	.word LINK
                           001B7F   116 	LINK=.
      001B7F 06                     117 	.byte 6
      001B80 45 45 50 2D 56 50      118 	.ascii "EEP-VP"
      001B86                        119 EEPVP:
      001B86 1D 00 04         [ 2]  120 	subw x,#2*CELLL 
      001B89 90 AE 40 06      [ 2]  121 	ldw y,#APP_VP  
      001B8D EF 02            [ 2]  122 	ldw (2,x),y 
      001B8F 90 5F            [ 1]  123 	clrw y 
      001B91 FF               [ 2]  124 	ldw (x),y 
      001B92 81               [ 4]  125 	ret 
                                    126 
                                    127 ;----------------------------------
                                    128 ; update APP_LAST with LAST 
                                    129 ; UPDAT-LAST ( -- )
                                    130 ;----------------------------------
      001B93 1B 7F                  131 	.word LINK 
                           001B95   132 	LINK=.
      001B95 0A                     133 	.byte 10
      001B96 55 50 44 41 54 2D 4C   134 	.ascii "UPDAT-LAST"
             41 53 54
      001BA0                        135 UPDATLAST:
      001BA0 CD 07 06         [ 4]  136 	call LAST
      001BA3 CD 04 F3         [ 4]  137 	call AT  
      001BA6 CD 1B 43         [ 4]  138 	call EEPLAST
      001BA9 CC 1D 96         [ 2]  139 	jp EESTORE 
                                    140 
                                    141 ;---------------------------------
                                    142 ; update APP_RUN 
                                    143 ; UPDAT-RUN ( a -- )
                                    144 ;---------------------------------
      001BAC 1B 95                  145 	.word LINK
                           001BAE   146 	LINK=.
      001BAE 09                     147 	.byte 9
      001BAF 55 50 44 41 54 2D 52   148 	.ascii "UPDAT-RUN"
             55 4E
      001BB8                        149 UPDATRUN:
      001BB8 CD 1B 5A         [ 4]  150 	call EEPRUN
      001BBB CC 1D 96         [ 2]  151 	jp EESTORE 
                                    152 	
                                    153 ;---------------------------------
                                    154 ; update APP_CP with CP 
                                    155 ; UPDAT-CP ( -- )
                                    156 ;---------------------------------
      001BBE 1B AE                  157 	.word LINK 
                           001BC0   158 	LINK=.
      001BC0 08                     159 	.byte 8 
      001BC1 55 50 44 41 54 2D 43   160 	.ascii "UPDAT-CP"
             50
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001BC9                        161 UPDATCP:
      001BC9 CD 06 F6         [ 4]  162 	call CPP 
      001BCC CD 04 F3         [ 4]  163 	call AT 
      001BCF CD 1B 70         [ 4]  164 	call EEPCP 
      001BD2 CC 1D 96         [ 2]  165 	jp EESTORE 
                                    166 
                                    167 ;----------------------------------
                                    168 ; update APP_VP with VP 
                                    169 ; UPDAT-VP ( -- )
                                    170 ;----------------------------------
      001BD5 1B C0                  171 	.word LINK
                           001BD7   172 	LINK=.
      001BD7 08                     173 	.byte 8 
      001BD8 55 50 44 41 54 2D 56   174 	.ascii "UPDAT-VP" 
             50
      001BE0                        175 UPDATVP:
      001BE0 CD 06 E8         [ 4]  176 	call VPP 
      001BE3 CD 04 F3         [ 4]  177 	call AT
      001BE6 CD 1B 86         [ 4]  178 	call EEPVP 
      001BE9 CC 1D 96         [ 2]  179 	jp EESTORE
                                    180 	
                           000001   181 .if NUCLEO
                                    182 ;----------------------------------
                                    183 ; fetch integer at address over 65535
                                    184 ;  F@   ( ud -- n )
                                    185 ;----------------------------------
      001BEC 1B D7                  186     .word LINK 
                           001BEE   187 LINK=.
      001BEE 02                     188     .byte 2
      001BEF 46 40                  189     .ascii "F@"
      001BF1                        190 FARAT:
      001BF1 CD 1B 0C         [ 4]  191     call FPSTOR
      001BF4 CC 1C B9         [ 2]  192 	jp EE_READ 
                                    193 
                                    194 
                                    195 ;-------------------------------------
                                    196 ; fetch C at address over 65535 
                                    197 ; FC@ ( ud -- c)
                                    198 ;-------------------------------------
      001BF7 1B EE                  199     .word LINK
                           001BF9   200     LINK=.
      001BF9 03                     201     .byte 3 
      001BFA 46 43 40               202     .ascii "FC@" 
      001BFD                        203 FARCAT:
      001BFD CD 1B 0C         [ 4]  204     call FPSTOR
      001C00 CC 1C DB         [ 2]  205 	jp EE_CREAD  
                                    206 .endif ; NUCLEO 
                                    207 
                                    208 ;----------------------------------
                                    209 ; UNLOCK EEPROM/OPT for writing/erasing
                                    210 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    211 ;  UNLKEE   ( -- )
                                    212 ;----------------------------------
      001C03 1B F9                  213     .word LINK 
                           001C05   214 LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001C05 06                     215     .byte 6 
      001C06 55 4E 4C 4B 45 45      216     .ascii "UNLKEE"
      001C0C                        217 UNLKEE:
      001C0C 35 00 50 5B      [ 1]  218 	mov FLASH_CR2,#0 
      001C10 35 FF 50 5C      [ 1]  219 	mov FLASH_NCR2,#0xFF 
      001C14 35 AE 50 64      [ 1]  220 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001C18 35 56 50 64      [ 1]  221     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001C1C 72 07 50 5F FB   [ 2]  222 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001C21 81               [ 4]  223 	ret
                                    224 
                                    225 ;----------------------------------
                                    226 ; UNLOCK FLASH for writing/erasing
                                    227 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    228 ; UNLKFL  ( -- )
                                    229 ;----------------------------------
      001C22 1C 05                  230     .word LINK 
                           001C24   231 LINK=. 
      001C24 06                     232     .byte 6 
      001C25 55 4E 4C 4B 46 4C      233     .ascii "UNLKFL"    
      001C2B                        234 UNLKFL:
      001C2B 35 00 50 5B      [ 1]  235 	mov FLASH_CR2,#0 
      001C2F 35 FF 50 5C      [ 1]  236 	mov FLASH_NCR2,#0xFF 
      001C33 35 56 50 62      [ 1]  237 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001C37 35 AE 50 62      [ 1]  238 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001C3B 72 03 50 5F FB   [ 2]  239 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001C40 81               [ 4]  240 	ret
                                    241 
                                    242 ;-----------------------------
                                    243 ; UNLOCK FLASH or EEPROM 
                                    244 ; according to FPTR address 
                                    245 ;  UNLOCK ( -- )
                                    246 ;-----------------------------
      001C41 1C 24                  247 	.word LINK 
                           001C43   248 	LINK=.
      001C43 06                     249 	.byte 6
      001C44 55 4E 4C 4F 43 4B      250 	.ascii "UNLOCK"
      001C4A                        251 UNLOCK:
                                    252 ; put addr[15:0] in Y, for bounds check.
      001C4A 90 BE 33         [ 2]  253 	ldw y,PTR16   ; Y=addr15:0
                                    254 ; check addr[23:16], if <> 0 then it is extened flash memory
      001C4D 3D 32            [ 1]  255 	tnz FPTR 
      001C4F 26 16            [ 1]  256 	jrne 4$
      001C51 90 A3 80 00      [ 2]  257     cpw y,#FLASH_BASE
      001C55 24 10            [ 1]  258     jruge 4$
      001C57 90 A3 40 00      [ 2]  259 	cpw y,#EEPROM_BASE  
      001C5B 25 0D            [ 1]  260     jrult 9$
      001C5D 90 A3 48 7F      [ 2]  261 	cpw y,#OPTION_END 
      001C61 22 07            [ 1]  262 	jrugt 9$
      001C63 CD 1C 0C         [ 4]  263 	call UNLKEE
      001C66 81               [ 4]  264 	ret 
      001C67 CD 1C 2B         [ 4]  265 4$: call UNLKFL
      001C6A 81               [ 4]  266 9$: ret 
                                    267 
                                    268 ;-------------------------
                                    269 ; LOCK write access to 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                                    270 ; FLASH and EEPROM 
                                    271 ; LOCK ( -- )
                                    272 ;-------------------------
      001C6B 1C 43                  273 	.word LINK 
                           001C6D   274 	LINK=.
      001C6D 04                     275 	.byte 4 
      001C6E 4C 4F 43 4B            276 	.ascii "LOCK" 
      001C72                        277 LOCK: 
      001C72 72 13 50 5F      [ 1]  278 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001C76 72 17 50 5F      [ 1]  279 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001C7A 81               [ 4]  280 	ret 
                                    281 
                                    282 ;-------------------------
                                    283 ; increment FPTR 
                                    284 ; INC-FPTR ( -- )
                                    285 ;-------------------------
      001C7B 1C 6D                  286 	.word LINK 
                           001C7D   287 	LINK=. 
      001C7D 08                     288 	.byte 8 
      001C7E 49 4E 43 2D 46 50 54   289 	.ascii "INC-FPTR" 
             52
      001C86                        290 INC_FPTR:
      001C86 3C 34            [ 1]  291 	inc PTR8 
      001C88 26 0C            [ 1]  292 	jrne 1$
      001C8A 90 89            [ 2]  293 	pushw y 
      001C8C 90 BE 32         [ 2]  294 	ldw y,FPTR 
      001C8F 90 5C            [ 1]  295 	incw y 
      001C91 90 BF 32         [ 2]  296 	ldw FPTR,y
      001C94 90 85            [ 2]  297 	popw y  
      001C96 81               [ 4]  298 1$: ret 
                                    299 
                                    300 ;------------------------------
                                    301 ; add u to FPTR 
                                    302 ; PTR+ ( u -- )
                                    303 ;------------------------------
      001C97 1C 7D                  304 	.word LINK 
                           001C99   305 	LINK=.
      001C99 04                     306 	.byte 4 
      001C9A 50 54 52 2B            307 	.ascii "PTR+"
      001C9E                        308 PTRPLUS:
      001C9E 90 93            [ 1]  309 	ldw y,x 
      001CA0 1C 00 02         [ 2]  310 	addw x,#CELLL 
      001CA3 72 B9 00 33      [ 2]  311 	addw y,PTR16 
      001CA7 90 BF 33         [ 2]  312 	ldw PTR16,y  
      001CAA 24 02            [ 1]  313 	jrnc 1$
      001CAC 3C 32            [ 1]  314 	inc FPTR 
      001CAE 81               [ 4]  315 1$: ret 
                                    316 
                                    317 ;---------------------------------
                                    318 ; read word at address pointed FPTR
                                    319 ; increment FPTR 
                                    320 ; EE-READ ( -- w )
                                    321 ;------------------------------------
      001CAF 1C 99                  322 	.word LINK 
                           001CB1   323 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001CB1 07                     324 	.byte 7 
      001CB2 45 45 2D 52 45 41 44   325 	.ascii "EE-READ"
      001CB9                        326 EE_READ:
      001CB9 1D 00 02         [ 2]  327 	subw x,#CELLL 
      001CBC 92 BC 00 32      [ 5]  328 	ldf a,[FPTR]
      001CC0 90 95            [ 1]  329 	ld yh,a 
      001CC2 CD 1C 86         [ 4]  330 	call INC_FPTR 
      001CC5 92 BC 00 32      [ 5]  331 	ldf a,[FPTR]
      001CC9 CD 1C 86         [ 4]  332 	call INC_FPTR 
      001CCC 90 97            [ 1]  333 	ld yl,a 
      001CCE FF               [ 2]  334 	ldw (x),y 
      001CCF 81               [ 4]  335 	ret 
                                    336 
                                    337 ;---------------------------------------
                                    338 ; Read byte at address pointed by FPTR 
                                    339 ; EE-CREAD ( -- c )
                                    340 ;---------------------------------------
      001CD0 1C B1                  341 	.word LINK 
                           001CD2   342 	LINK=.
      001CD2 08                     343 	.byte 8
      001CD3 45 45 2D 43 52 45 41   344 	.ascii "EE-CREAD" 
             44
      001CDB                        345 EE_CREAD:
      001CDB 1D 00 02         [ 2]  346 	subw x,#CELLL 
      001CDE 92 BC 00 32      [ 5]  347 	ldf a,[FPTR]	
      001CE2 CD 1C 86         [ 4]  348 	call INC_FPTR
      001CE5 90 5F            [ 1]  349 	clrw y 
      001CE7 90 97            [ 1]  350 	ld yl,a 
      001CE9 FF               [ 2]  351 	ldw (x),y 
      001CEA 81               [ 4]  352 	ret 
                                    353 
                                    354 ;----------------------------
                                    355 ; write a byte at address pointed 
                                    356 ; by FPTR and increment FPTR.
                                    357 ; Expect pointer already initialized 
                                    358 ; and memory unlocked 
                                    359 ; WR-BYTE ( c -- )
                                    360 ;----------------------------
      001CEB 1C D2                  361 	.word LINK 
                           001CED   362 	LINK=. 
      001CED 07                     363 	.byte 7 
      001CEE 57 52 2D 42 59 54 45   364 	.ascii "WR-BYTE" 
                                    365 
      001CF5                        366 WR_BYTE:
      001CF5 CD 04 61         [ 4]  367 	call FC_XOFF
      001CF8 90 93            [ 1]  368 	ldw y,x 
      001CFA 90 FE            [ 2]  369 	ldw y,(y)
      001CFC 1C 00 02         [ 2]  370 	addw x,#CELLL 
      001CFF 90 9F            [ 1]  371 	ld a,yl
      001D01 92 BD 00 32      [ 4]  372 	ldf [FPTR],a
      001D05 72 05 50 5F FB   [ 2]  373 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001D0A CD 04 4B         [ 4]  374 	call FC_XON
      001D0D CC 1C 86         [ 2]  375 	jp INC_FPTR 
                                    376 
                                    377 ;---------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                                    378 ; write a word at address pointed 
                                    379 ; by FPTR and increment FPTR 
                                    380 ; Expect pointer already initialzed 
                                    381 ; and memory unlocked 
                                    382 ; WR-WORD ( w -- )
                                    383 ;---------------------------------------
      001D10 1C ED                  384 	.word LINK 
                           001D12   385 	LINK=.
      001D12 07                     386 	.byte 7 
      001D13 57 52 2D 57 4F 52 44   387 	.ascii "WR-WORD" 
      001D1A                        388 WR_WORD:
      001D1A CD 04 61         [ 4]  389 	call FC_XOFF
      001D1D 90 93            [ 1]  390 	ldw y,x
      001D1F 90 FE            [ 2]  391 	ldw y,(y)
      001D21 1C 00 02         [ 2]  392 	addw x,#CELLL 
      001D24 90 9E            [ 1]  393 	ld a,yh 
      001D26 92 BD 00 32      [ 4]  394 	ldf [FPTR],a
      001D2A 72 05 50 5F FB   [ 2]  395 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001D2F CD 1C 86         [ 4]  396 	call INC_FPTR 
      001D32 90 9F            [ 1]  397 	ld a,yl 
      001D34 92 BD 00 32      [ 4]  398 	ldf [FPTR],a
      001D38 72 05 50 5F FB   [ 2]  399 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001D3D CD 04 4B         [ 4]  400 	call FC_XON
      001D40 CC 1C 86         [ 2]  401 	jp INC_FPTR 
                                    402 
                                    403 
                                    404 ;---------------------------------------
                                    405 ; write a byte to FLASH or EEPROM/OPTION  
                                    406 ; EEC!  (c ud -- )
                                    407 ;---------------------------------------
      001D43 1D 12                  408     .word LINK 
                           001D45   409 	LINK=.
      001D45 04                     410     .byte 4 
      001D46 45 45 43 21            411     .ascii "EEC!"
                                    412 	; local variables 
                           000001   413 	BTW = 1   ; byte to write offset on stack
                           000002   414     OPT = 2 
                           000002   415 	VSIZE = 2
      001D4A                        416 EECSTORE:
      001D4A 52 02            [ 2]  417 	sub sp,#VSIZE
      001D4C CD 1B 0C         [ 4]  418     call FPSTOR
      001D4F E6 01            [ 1]  419 	ld a,(1,x)
      001D51 43               [ 1]  420 	cpl a 
      001D52 6B 01            [ 1]  421 	ld (BTW,sp),a ; byte to write 
      001D54 0F 02            [ 1]  422 	clr (OPT,sp)  ; OPTION flag
      001D56 CD 1C 4A         [ 4]  423 	call UNLOCK 
                                    424 	; check if option
      001D59 3D 32            [ 1]  425 	tnz FPTR 
      001D5B 26 19            [ 1]  426 	jrne 2$
      001D5D 90 BE 33         [ 2]  427 	ldw y,PTR16 
      001D60 90 A3 48 00      [ 2]  428 	cpw y,#OPTION_BASE
      001D64 2B 10            [ 1]  429 	jrmi 2$
      001D66 90 A3 48 80      [ 2]  430 	cpw y,#OPTION_END+1
      001D6A 2A 0A            [ 1]  431 	jrpl 2$
      001D6C 03 02            [ 1]  432 	cpl (OPT,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                    433 	; OPTION WRITE require this UNLOCK 
      001D6E 72 1E 50 5B      [ 1]  434     bset FLASH_CR2,#FLASH_CR2_OPT
      001D72 72 1F 50 5C      [ 1]  435     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001D76                        436 2$: 
      001D76 CD 1C F5         [ 4]  437 	call WR_BYTE 	
      001D79 0D 02            [ 1]  438 	tnz (OPT,sp)
      001D7B 27 0D            [ 1]  439 	jreq 3$ 
      001D7D 7B 01            [ 1]  440     ld a,(BTW,sp)
      001D7F 90 5F            [ 1]  441     clrw y
      001D81 90 97            [ 1]  442 	ld yl,a 
      001D83 1D 00 02         [ 2]  443 	subw x,#CELLL 
      001D86 FF               [ 2]  444 	ldw (x),y 
      001D87 CD 1C F5         [ 4]  445 	call WR_BYTE
      001D8A                        446 3$: 
      001D8A CD 1C 72         [ 4]  447 	call LOCK 
      001D8D 5B 02            [ 2]  448 	addw sp,#VSIZE 
      001D8F 81               [ 4]  449     ret
                                    450 
                                    451 ;------------------------------
                                    452 ; write integer in FLASH|EEPROM
                                    453 ; EE! ( n ud -- )
                                    454 ;------------------------------
      001D90 1D 45                  455 	.word LINK 
                           001D92   456 	LINK=.
      001D92 03                     457 	.byte 3 
      001D93 45 45 21               458 	.ascii "EE!"
      001D96                        459 EESTORE:
      001D96 CD 1B 0C         [ 4]  460 	call FPSTOR 
      001D99 CD 1C 4A         [ 4]  461 	call UNLOCK 
      001D9C 90 93            [ 1]  462 	ldw y,x 
      001D9E 90 FE            [ 2]  463 	ldw y,(y)
      001DA0 90 89            [ 2]  464 	pushw y 
      001DA2 90 5E            [ 1]  465 	swapw y 
      001DA4 FF               [ 2]  466 	ldw (x),y 
      001DA5 CD 1C F5         [ 4]  467 	call WR_BYTE 
      001DA8 90 85            [ 2]  468 	popw y 
      001DAA 1D 00 02         [ 2]  469 	subw x,#CELLL
      001DAD FF               [ 2]  470 	ldw (x),y 
      001DAE CD 1C F5         [ 4]  471 	call WR_BYTE
      001DB1 CC 1C 72         [ 2]  472 	jp LOCK 
                                    473 
                                    474 
                                    475 ;----------------------------
                                    476 ; Erase flash memory row 
                                    477 ; stm8s208 as 128 bytes rows
                                    478 ; ROW-ERASE ( ud -- )
                                    479 ;----------------------------
      001DB4 1D 92                  480 	.word LINK 
                           001DB6   481 	LINK=. 
      001DB6 09                     482 	.byte 9 
      001DB7 52 4F 57 2D 45 52 41   483 	.ascii "ROW-ERASE" 
             53 45
      001DC0                        484 row_erase:
      001DC0 CD 04 61         [ 4]  485 	call FC_XOFF
      001DC3 CD 1B 0C         [ 4]  486 	call FPSTOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                                    487 ;code must be execute from RAM 
                                    488 ;copy routine to PAD 
      001DC6 1D 00 02         [ 2]  489 	subw x,#CELLL 
      001DC9 90 AE 1E 19      [ 2]  490 	ldw y,#row_erase_proc
      001DCD FF               [ 2]  491 	ldw (x),y 
      001DCE CD 0B E5         [ 4]  492 	call PAD 
      001DD1 90 AE 1E 40      [ 2]  493 	ldw y,#row_erase_proc_end 
      001DD5 72 A2 1E 19      [ 2]  494 	subw y,#row_erase_proc
      001DD9 1D 00 02         [ 2]  495 	subw x,#CELLL 
      001DDC FF               [ 2]  496 	ldw (x),y 
      001DDD CD 0C 21         [ 4]  497 	call CMOVE 
      001DE0                        498 block_erase:
      001DE0 90 BE 33         [ 2]  499 	ldw y,FPTR+1
      001DE3 90 A3 24 00      [ 2]  500 	cpw y,#app_space 
      001DE7 2A 19            [ 1]  501 	jrpl erase_flash 
                                    502 ; erase EEPROM block
      001DE9 90 A3 40 00      [ 2]  503 	cpw y,#EEPROM_BASE 
      001DED 24 04            [ 1]  504 	jruge 1$
      001DEF CD 04 4B         [ 4]  505 	call FC_XON
      001DF2 81               [ 4]  506 	ret ; bad address 
      001DF3 90 A3 47 FF      [ 2]  507 1$: cpw y,#EEPROM_END 
      001DF7 23 04            [ 2]  508 	jrule 2$ 
      001DF9 CD 04 4B         [ 4]  509 	call FC_XON
      001DFC 81               [ 4]  510 	ret ; bad address 
      001DFD                        511 2$:	
      001DFD CD 1C 0C         [ 4]  512 	call UNLKEE 
      001E00 20 03            [ 2]  513 	jra proceed_erase
                                    514 ; erase flash block:
      001E02                        515 erase_flash:
      001E02 CD 1C 2B         [ 4]  516 	call UNLKFL 
      001E05                        517 proceed_erase:
      001E05 CD 0B E5         [ 4]  518 	call PAD 
      001E08 90 93            [ 1]  519 	ldw y,x
      001E0A 90 FE            [ 2]  520 	ldw y,(y)
      001E0C 1C 00 02         [ 2]  521 	addw x,#CELLL  
      001E0F 90 FD            [ 4]  522 	call (y) 
      001E11 72 17 50 5F      [ 1]  523 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001E15 CD 04 4B         [ 4]  524 	call FC_XON
      001E18 81               [ 4]  525 	ret 
                                    526 
                                    527 ; this routine is to be copied to PAD 
      001E19                        528 row_erase_proc:
      001E19 35 20 50 5B      [ 1]  529 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001E1D 35 DF 50 5C      [ 1]  530 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001E21 4F               [ 1]  531 	clr a 
      001E22 90 5F            [ 1]  532 	clrw y 
      001E24 91 A7 00 32      [ 1]  533 	ldf ([FPTR],y),a
      001E28 90 5C            [ 1]  534     incw y
      001E2A 91 A7 00 32      [ 1]  535 	ldf ([FPTR],y),a
      001E2E 90 5C            [ 1]  536     incw y
      001E30 91 A7 00 32      [ 1]  537 	ldf ([FPTR],y),a
      001E34 90 5C            [ 1]  538     incw y
      001E36 91 A7 00 32      [ 1]  539 	ldf ([FPTR],y),a
      001E3A 72 05 50 5F FB   [ 2]  540 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001E3F 81               [ 4]  541 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001E40                        542 row_erase_proc_end:
                                    543 
                                    544 
                                    545 ;-----------------------------------
                                    546 ; block programming must be 
                                    547 ; executed from RAM 
                                    548 ; initial contidions: 
                                    549 ; 		memory unlocked
                                    550 ;       FPTR initialized 
                                    551 ; input: 
                                    552 ;    x   buffer address 
                                    553 ;-----------------------------------
                           000001   554 	BCNT=1 
      001E40                        555 copy_buffer:
      001E40 4B 80            [ 1]  556 	push #BLOCK_SIZE  
                                    557 ;enable block programming 
      001E42 72 10 50 5B      [ 1]  558 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001E46 72 11 50 5C      [ 1]  559 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001E4A 90 5F            [ 1]  560 	clrw y
      001E4C F6               [ 1]  561 1$:	ld a,(x)
      001E4D 91 A7 00 32      [ 1]  562 	ldf ([FPTR],y),a
      001E51 5C               [ 1]  563 	incw x 
      001E52 90 5C            [ 1]  564 	incw y 
      001E54 0A 01            [ 1]  565 	dec (BCNT,sp)
      001E56 26 F4            [ 1]  566 	jrne 1$
                                    567 ; wait EOP bit 
      001E58 72 05 50 5F FB   [ 2]  568 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001E5D 84               [ 1]  569 	pop a ; remove BCNT from stack 
      001E5E 81               [ 4]  570 	ret 
      001E5F                        571 copy_buffer_end:
                                    572 
                                    573 ;-------------------------
                                    574 ; move program_row to RAM 
                                    575 ; in TIB 
                                    576 ;------------------------
      001E5F                        577 copy_prog_to_ram:
      001E5F 1D 00 06         [ 2]  578 	subw x,#6
      001E62 90 AE 1E 40      [ 2]  579 	ldw y,#copy_buffer 
      001E66 EF 04            [ 2]  580 	ldw (4,x),y 
      001E68 90 AE 17 00      [ 2]  581 	ldw y,#TIBBASE
      001E6C EF 02            [ 2]  582 	ldw (2,x),y 
      001E6E 90 AE 1E 5F      [ 2]  583 	ldw y,#copy_buffer_end 
      001E72 72 A2 1E 40      [ 2]  584 	subw y,#copy_buffer  
      001E76 FF               [ 2]  585 	ldw (x),y 
      001E77 CD 0C 21         [ 4]  586 	call CMOVE 
      001E7A 81               [ 4]  587 	ret 
                                    588 
                                    589 
                                    590 ;-----------------------------
                                    591 ; write a row in FLASH/EEPROM 
                                    592 ; WR-ROW ( a ud -- )
                                    593 ; a -> address 128 byte buffer to write 
                                    594 ; ud ->  row address in FLASH|EEPROM 
                                    595 ;-----------------------------
      001E7B 1D B6                  596 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                           001E7D   597 	LINK=.
      001E7D 06                     598 	.byte 6 
      001E7E 57 52 2D 52 4F 57      599 	.ascii "WR-ROW"
      001E84                        600 write_row:
      001E84 CD 04 61         [ 4]  601 	call FC_XOFF
      001E87 CD 1B 0C         [ 4]  602 	call FPSTOR
                                    603 ; align to FLASH block 
      001E8A A6 80            [ 1]  604 	ld a,#0x80 
      001E8C B4 34            [ 1]  605 	and a,PTR8 
      001E8E B7 34            [ 1]  606 	ld PTR8,a  
      001E90 CD 1E 5F         [ 4]  607 	call copy_prog_to_ram
      001E93 CD 1C 4A         [ 4]  608 	call UNLOCK
      001E96 90 93            [ 1]  609 	ldw y,x 
      001E98 90 FE            [ 2]  610 	ldw y,(y)
      001E9A 1C 00 02         [ 2]  611 	addw x,#CELLL 
      001E9D 89               [ 2]  612 	pushw x 
      001E9E 93               [ 1]  613 	ldw x,y ; buffer address in x 
      001E9F CD 17 00         [ 4]  614 	call TIBBASE
      001EA2 CD 1C 72         [ 4]  615 	call LOCK
      001EA5 85               [ 2]  616 	popw x 
      001EA6 CD 04 4B         [ 4]  617 	call FC_XON 
      001EA9 81               [ 4]  618 	ret 
                                    619 
                                    620 ;-------------------------------------
                                    621 ; change value of OPTION register 
                                    622 ; SET-OPT (c n -- ) 
                                    623 ; c new value.
                                    624 ; n OPT  number {1..7}
                                    625 ;--------------------------------------
      001EAA 1E 7D                  626 		.word LINK 
                           001EAC   627 		LINK=.
      001EAC 07                     628 		.byte 7 
      001EAD 53 45 54 2D 4F 50 54   629 		.ascii "SET-OPT" 
      001EB4                        630 set_option: 
      001EB4 90 93            [ 1]  631 		ldw y,x 
      001EB6 90 FE            [ 2]  632 		ldw y,(y)
      001EB8 27 06            [ 1]  633 		jreq 1$
      001EBA 90 A3 00 07      [ 2]  634 		cpw y,#7 
      001EBE 23 04            [ 2]  635 		jrule 2$ 
                                    636 ; invalid OPTION number 		
      001EC0 1C 00 04         [ 2]  637 1$:		addw x,#2*CELLL
      001EC3 81               [ 4]  638 		ret
      001EC4 90 58            [ 2]  639 2$:		sllw y 
      001EC6 72 A9 47 FF      [ 2]  640 		addw y,#OPTION_BASE-1
      001ECA FF               [ 2]  641 		ldw (x),y 
      001ECB 1D 00 02         [ 2]  642 		subw x,#CELLL 
      001ECE 90 5F            [ 1]  643 		clrw y 
      001ED0 FF               [ 2]  644 		ldw (x),y 
      001ED1 CD 1D 4A         [ 4]  645 		call EECSTORE
      001ED4 81               [ 4]  646 		ret 
                                    647 
                                    648 
                                    649 
                                    650 ;--------------------------------------
                                    651 ; reset system to its original state 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                                    652 ; before any user modification
                                    653 ; PRISTINE ( -- )
                                    654 ;-------------------------------------
      001ED5 1E AC                  655 	.word LINK  
                           001ED7   656 	LINK=.
      001ED7 08                     657 	.byte 8 
      001ED8 50 52 49 53 54 49 4E   658 	.ascii "PRISTINE"
             45
      001EE0                        659 pristine:
                                    660 ;;; erase EEPROM
      001EE0 CD 1B 2B         [ 4]  661 	call EEPROM 
      001EE3 CD 07 80         [ 4]  662 1$:	call DDUP 
      001EE6 CD 1D C0         [ 4]  663 	call row_erase
      001EE9 90 93            [ 1]  664 	ldw y,x 
      001EEB 90 EE 02         [ 2]  665 	ldw y,(2,y)
      001EEE 72 A9 00 80      [ 2]  666 	addw y,#BLOCK_SIZE
      001EF2 EF 02            [ 2]  667 	ldw (2,x),y
      001EF4 90 A3 48 00      [ 2]  668 	cpw y,#OPTION_BASE 
      001EF8 25 E9            [ 1]  669 	jrult 1$
                                    670 ;;; reset OPTION to default values
      001EFA 90 AE 00 01      [ 2]  671 	ldw y,#1 ; OPT1 
      001EFE FF               [ 2]  672 2$:	ldw (x),y   
      001EFF 90 5F            [ 1]  673 	clrw y 
      001F01 EF 02            [ 2]  674 	ldw (2,x),y  ; ( 0 1 -- ) 
      001F03 CD 07 80         [ 4]  675 	call DDUP    ; ( 0 1 0 1 -- )  
      001F06 CD 1E B4         [ 4]  676 	call set_option
      001F09 90 93            [ 1]  677 	ldw y,x 
      001F0B 90 FE            [ 2]  678 	ldw y,(y)
      001F0D 90 5C            [ 1]  679 	incw y  ; next OPTION 
      001F0F 90 A3 00 08      [ 2]  680 	cpw y,#8 
      001F13 25 E9            [ 1]  681 	jrult 2$
                                    682 ;;; erase first row of app_space 	
      001F15 90 AE 24 00      [ 2]  683 	ldw y,#app_space
      001F19 EF 02            [ 2]  684 	ldw (2,x),y  
      001F1B 90 5F            [ 1]  685 	clrw y 
      001F1D FF               [ 2]  686 	ldw (x),y ; ( app_space 0 -- )
      001F1E CD 1D C0         [ 4]  687 	call row_erase 
                                    688 ; reset interrupt vectors 
      001F21 1D 00 02         [ 2]  689 	subw x,#CELLL 
      001F24 90 5F            [ 1]  690 	clrw y  
      001F26 FF               [ 2]  691 4$:	ldw (x),y  ; ( n -- ) int# 
      001F27 CD 05 9A         [ 4]  692 	call DUPP  
      001F2A CD 1F 47         [ 4]  693 	call reset_vector
      001F2D 90 93            [ 1]  694 	ldw y,x 
      001F2F 90 FE            [ 2]  695 	ldw y,(y)
      001F31 90 5C            [ 1]  696 	incw y   ; next vector 
      001F33 90 A3 00 19      [ 2]  697 	cpw y,#25 
      001F37 25 ED            [ 1]  698 	jrult 4$
      001F39 CC 00 00         [ 2]  699 	jp NonHandledInterrupt ; reset MCU
                                    700 
                                    701 ;------------------------------
                                    702 ; reset an interrupt vector 
                                    703 ; to its initial value 
                                    704 ; i.e. NonHandledInterrupt
                                    705 ; RST-IVEC ( n -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                                    706 ;-----------------------------
      001F3C 1E D7                  707 	.word LINK 
                           001F3E   708 	LINK=. 
      001F3E 08                     709 	.byte 8 
      001F3F 52 53 54 2D 49 56 45   710 	.ascii "RST-IVEC"
             43
      001F47                        711 reset_vector:
      001F47 90 93            [ 1]  712 	ldw y,x
      001F49 1C 00 02         [ 2]  713 	addw x,#CELLL 
      001F4C 90 FE            [ 2]  714 	ldw y,(y)
      001F4E 90 A3 00 17      [ 2]  715 	cpw y,#23 
      001F52 27 3A            [ 1]  716 	jreq 9$
      001F54 90 A3 00 1D      [ 2]  717 	cpw y,#29 ; last vector
      001F58 22 34            [ 1]  718 	jrugt 9$  
      001F5A 90 58            [ 2]  719 	sllw y 
      001F5C 90 58            [ 2]  720 	sllw y 
      001F5E 72 A9 80 08      [ 2]  721 	addw y,#0x8008 ; irq0 address 
      001F62 90 BF 24         [ 2]  722 	ldw YTEMP,y
      001F65 1D 00 06         [ 2]  723 	subw x,#3*CELLL 
      001F68 EF 02            [ 2]  724 	ldw (2,x),y 
      001F6A 90 5F            [ 1]  725 	clrw y
      001F6C FF               [ 2]  726 	ldw (x),y 
      001F6D A6 82            [ 1]  727 	ld a,#0x82 
      001F6F 90 95            [ 1]  728 	ld yh,a
      001F71 EF 04            [ 2]  729 	ldw (4,x),y
      001F73 CD 1D 96         [ 4]  730 	call EESTORE
      001F76 1D 00 06         [ 2]  731 	subw x,#3*CELLL
      001F79 90 5F            [ 1]  732 	clrw y 
      001F7B FF               [ 2]  733 	ldw (x),y 
      001F7C 90 AE 00 00      [ 2]  734 	ldw y,#NonHandledInterrupt
      001F80 EF 04            [ 2]  735 	ldw (4,x),y 
      001F82 90 BE 24         [ 2]  736 	ldw y,YTEMP  
      001F85 72 A9 00 02      [ 2]  737 	addw y,#2
      001F89 EF 02            [ 2]  738 	ldw (2,x),y 
      001F8B CD 1D 96         [ 4]  739 	call EESTORE
      001F8E 81               [ 4]  740 9$:	ret 
                                    741 
                                    742 
                                    743 ;------------------------------
                                    744 ; all interrupt vector with 
                                    745 ; an address >= a are resetted 
                                    746 ; to default
                                    747 ; CHKIVEC ( a -- )
                                    748 ;------------------------------
      001F8F 1F 3E                  749 	.word LINK 
                           001F91   750 	LINK=.
      001F91 07                     751 	.byte 7
      001F92 43 48 4B 49 56 45 43   752 	.ascii "CHKIVEC"
                                    753 ;local variables 
                           000001   754 	SSP=1
                           000003   755 	CADR=3
                           000005   756 	OFS=5
                           000006   757 	VSIZE=6  
      001F99                        758 CHKIVEC:
      001F99 52 06            [ 2]  759 	sub sp,#VSIZE ;alloc local variables 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001F9B 90 93            [ 1]  760 	ldw y,x 
      001F9D 90 FE            [ 2]  761 	ldw y,(y)
      001F9F 17 03            [ 2]  762 	ldw (CADR,sp),y ; ca 
      001FA1 1F 01            [ 2]  763 	ldw (SSP,sp),x 
      001FA3 AE 80 0A         [ 2]  764 	ldw x,#0x800a ; irq0 address 
      001FA6 BF 33            [ 2]  765 	ldw PTR16,X
      001FA8 AE FF FC         [ 2]  766 	ldw x,#-4 
      001FAB 1C 00 04         [ 2]  767 1$:	addw x,#4
      001FAE A3 00 78         [ 2]  768 	cpw x,#30*4 ; irq0-29 
      001FB1 27 22            [ 1]  769 	jreq 9$
      001FB3 90 93            [ 1]  770 	ldw y,x  
      001FB5 91 D6 33         [ 4]  771 	ld a,([PTR16],y)
      001FB8 11 03            [ 1]  772 	cp a,(CADR,sp)
      001FBA 25 EF            [ 1]  773 	jrult 1$
      001FBC 90 5C            [ 1]  774 	incw y 
      001FBE 91 D6 33         [ 4]  775 	ld a,([PTR16],y)
      001FC1 11 04            [ 1]  776 	cp a,(CADR+1,sp) 
      001FC3 25 E6            [ 1]  777 	jrult 1$ 
      001FC5 1F 05            [ 2]  778 	ldw (OFS,sp),x 
      001FC7 54               [ 2]  779 	srlw x
      001FC8 54               [ 2]  780 	srlw x 
      001FC9 90 93            [ 1]  781 	ldw y,x 
      001FCB 1E 01            [ 2]  782 	ldw x,(SSP,sp)
      001FCD FF               [ 2]  783 	ldw (x),y
      001FCE CD 1F 47         [ 4]  784 	call reset_vector
      001FD1 1E 05            [ 2]  785 	ldw x,(OFS,sp) 
      001FD3 20 D6            [ 2]  786 	jra 1$
      001FD5 1E 01            [ 2]  787 9$:	ldw x,(SSP,sp) 
      001FD7 1C 00 02         [ 2]  788 	addw x,#CELLL 
      001FDA 5B 06            [ 2]  789 	addw sp,#VSIZE ; drop local variables  
      001FDC 81               [ 4]  790 	ret 
                                    791 
                                    792 ;------------------------------
                                    793 ; set interrupt vector 
                                    794 ; SET-IVEC ( ud n -- )
                                    795 ;  ud Handler address
                                    796 ;  n  vector # 0 .. 29 
                                    797 ;-----------------------------
      001FDD 1F 91                  798 	.word LINK
                           001FDF   799 	LINK=.
      001FDF 08                     800 	.byte 8 
      001FE0 53 45 54 2D 49 56 45   801 	.ascii "SET-IVEC" 
             43
      001FE8                        802 set_vector:
      001FE8 90 93            [ 1]  803     ldw y,x 
      001FEA 1C 00 02         [ 2]  804 	addw x,#CELLL 
      001FED 90 FE            [ 2]  805 	ldw y,(y) ; vector #
      001FEF 90 A3 00 1D      [ 2]  806 	cpw y,#29 ; last vector
      001FF3 23 04            [ 2]  807 	jrule 2$
      001FF5 1C 00 04         [ 2]  808 	addw x,#2*CELLL 
      001FF8 81               [ 4]  809 	ret
      001FF9 90 58            [ 2]  810 2$:	sllw y 
      001FFB 90 58            [ 2]  811 	sllw y 
      001FFD 72 A9 80 08      [ 2]  812 	addw y,#0X8008 ; IRQ0 vector address 
      002001 90 BF 24         [ 2]  813 	ldw YTEMP,y ; vector address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      002004 A6 82            [ 1]  814 	ld a,#0x82 
      002006 90 95            [ 1]  815 	ld yh,a 
      002008 E6 01            [ 1]  816 	ld a,(1,x) ; isr address bits 23..16 
      00200A 90 97            [ 1]  817 	ld yl,a 
                                    818 ;  write 0x82 + most significant byte of int address	
      00200C 1D 00 06         [ 2]  819 	subw x,#3*CELLL 
      00200F EF 04            [ 2]  820 	ldw (4,x),y 
      002011 90 BE 24         [ 2]  821 	ldw y,YTEMP
      002014 EF 02            [ 2]  822 	ldw (2,x),y ; vector address 
      002016 90 5F            [ 1]  823 	clrw y 
      002018 FF               [ 2]  824 	ldw (x),y   ; as a double 
      002019 CD 1D 96         [ 4]  825 	call EESTORE 
      00201C 90 93            [ 1]  826 	ldw y,x 
      00201E 90 EE 02         [ 2]  827 	ldw y,(2,y) ; bits 15..0 int vector 
      002021 1D 00 06         [ 2]  828 	subw x,#3*CELLL 
      002024 EF 04            [ 2]  829 	ldw (4,x),y 
      002026 90 BE 24         [ 2]  830 	ldw y,YTEMP 
      002029 72 A9 00 02      [ 2]  831 	addw y,#2 
      00202D EF 02            [ 2]  832 	ldw (2,x),y 
      00202F 90 5F            [ 1]  833 	clrw y 
      002031 FF               [ 2]  834 	ldw (x),y 
      002032 CD 1D 96         [ 4]  835 	call EESTORE
      002035 1C 00 04         [ 2]  836 	addw x,#2*CELLL  
      002038 81               [ 4]  837 9$: ret 
                                    838 
                                    839 
                                    840 ;------------------------
                                    841 ; Compile word to flash
                                    842 ; EE, (w -- )
                                    843 ;-----------------------
      002039 1F DF                  844 	.word LINK
                           00203B   845 	LINK=.
      00203B 03                     846 	.byte 3
      00203C 45 45 2C               847 	.ascii "EE,"
      00203F                        848 EE_COMMA:
      00203F 1D 00 04         [ 2]  849 	subw x,#2*CELLL 
      002042 90 BE 18         [ 2]  850 	ldw y,UCP
      002045 90 89            [ 2]  851 	pushw y 
      002047 EF 02            [ 2]  852 	ldw (2,x),y 
      002049 90 5F            [ 1]  853 	clrw y 
      00204B FF               [ 2]  854 	ldw (x),y
      00204C CD 1D 96         [ 4]  855 	call EESTORE
      00204F 90 85            [ 2]  856 	popw y 
      002051 72 A9 00 02      [ 2]  857 	addw y,#2
      002055 90 BF 18         [ 2]  858 	ldw UCP,y
      002058 81               [ 4]  859 	ret 
                                    860 
                                    861 
                                    862 ;-------------------------
                                    863 ; Compile byte to flash 
                                    864 ; EEC, ( c -- )	
                                    865 ;-------------------------
      002059 20 3B                  866 	.word LINK 
                           00205B   867 	LINK=.
      00205B 04                     868 	.byte 4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      00205C 45 45 43 2C            869 	.ascii "EEC,"
      002060                        870 EE_CCOMMA:
      002060 1D 00 04         [ 2]  871 	subw x,#2*CELLL 
      002063 90 BE 18         [ 2]  872 	ldw y,UCP
      002066 90 89            [ 2]  873 	pushw y 
      002068 EF 02            [ 2]  874 	ldw (2,x),y 
      00206A 90 5F            [ 1]  875 	clrw y 
      00206C FF               [ 2]  876 	ldw (x),y
      00206D CD 1D 4A         [ 4]  877 	call EECSTORE
      002070 90 85            [ 2]  878 	popw y 
      002072 90 5C            [ 1]  879 	incw y 
      002074 90 BF 18         [ 2]  880 	ldw UCP,y
      002077 81               [ 4]  881 	ret 
                                    882 
                                    883 
                                    884 ;--------------------------
                                    885 ; copy FLASH block to ROWBUF
                                    886 ; ROW>BUF ( ud -- )
                                    887 ;--------------------------
      002078 20 5B                  888 	.word LINK 
                           00207A   889 	LINK=.
      00207A 07                     890 	.byte 7 
      00207B 52 4F 57 3E 42 55 46   891 	.ascii "ROW>BUF"
      002082                        892 ROW2BUF: 
      002082 CD 1B 0C         [ 4]  893 	call FPSTOR 
      002085 A6 80            [ 1]  894 	ld a,#BLOCK_SIZE
      002087 88               [ 1]  895 	push a 
      002088 B4 34            [ 1]  896 	and a,PTR8 ; block align 
      00208A B7 34            [ 1]  897 	ld PTR8,a
      00208C 90 AE 16 80      [ 2]  898 	ldw y,#ROWBUFF 
      002090 92 BC 00 32      [ 5]  899 1$: ldf a,[FPTR]
      002094 90 F7            [ 1]  900 	ld (y),a
      002096 CD 1C 86         [ 4]  901 	call INC_FPTR
      002099 90 5C            [ 1]  902 	incw y 
      00209B 0A 01            [ 1]  903 	dec (1,sp)
      00209D 26 F1            [ 1]  904 	jrne 1$ 
      00209F 84               [ 1]  905 	pop a 
      0020A0 81               [ 4]  906 	ret 
                                    907 
                                    908 
                                    909 ;---------------------------
                                    910 ; copy ROWBUFF to flash 
                                    911 ; BUF>ROW ( ud -- )
                                    912 ; ud is row address as double 
                                    913 ;---------------------------
      0020A1 20 7A                  914 	.word LINK 
                           0020A3   915 	LINK=.
      0020A3 07                     916 	.byte 7 
      0020A4 42 55 46 3E 52 4F 57   917 	.ascii "BUF>ROW" 
      0020AB                        918 BUF2ROW:
      0020AB CD 06 95         [ 4]  919 	call TBUF ; ( ud rb -- )
      0020AE CD 07 55         [ 4]  920 	call ROT 
      0020B1 CD 07 55         [ 4]  921 	call ROT  ; ( rb ud -- )
      0020B4 CD 1E 84         [ 4]  922 	call write_row 
      0020B7 81               [ 4]  923 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                                    924 
                                    925 ;---------------------------------
                                    926 ; how many byte free in that row 
                                    927 ; RFREE ( a -- n )
                                    928 ; a is least byte of target address
                                    929 ;----------------------------------
      0020B8 20 A3                  930 	.word LINK 
                           0020BA   931 	LINK=.
      0020BA 05                     932 	.byte 5 
      0020BB 52 46 52 45 45         933 	.ascii "RFREE"
      0020C0                        934 RFREE:
      0020C0 E6 01            [ 1]  935 	ld a,(1,x)
      0020C2 A4 7F            [ 1]  936 	and a,#BLOCK_SIZE-1 
      0020C4 B7 24            [ 1]  937 	ld YTEMP,a 
      0020C6 A6 80            [ 1]  938 	ld a,#BLOCK_SIZE 
      0020C8 B0 24            [ 1]  939 	sub a,YTEMP 
      0020CA 90 5F            [ 1]  940 	clrw y 
      0020CC 90 97            [ 1]  941 	ld yl,a
      0020CE FF               [ 2]  942 	ldw (x),y 
      0020CF 81               [ 4]  943 	ret 
                                    944 
                                    945 ;---------------------------------
                                    946 ; write u bytes to flash/EEPROM 
                                    947 ; constraint to row limit 
                                    948 ; RAM>EE ( ud a u -- u2 )
                                    949 ; ud flash address 
                                    950 ; a ram address 
                                    951 ; u bytes count
                                    952 ; return u2 bytes written  
                                    953 ;-------------------------------
      0020D0 20 BA                  954 	.word LINK 
                           0020D2   955 	LINK=. 
      0020D2 06                     956 	.byte 6
      0020D3 52 41 4D 3E 45 45      957 	.ascii "RAM>EE"
                                    958 	
      0020D9                        959 RAM2EE:
                                    960 ; copy ud on top 
      0020D9 90 93            [ 1]  961 	ldw y,x 
      0020DB 90 EE 06         [ 2]  962 	ldw y,(6,y) ; LSW of ud  
      0020DE 90 BF 24         [ 2]  963 	ldw YTEMP,y 
      0020E1 90 93            [ 1]  964 	ldw y,x 
      0020E3 90 EE 04         [ 2]  965 	ldw y,(4,y)  ; MSW of ud 
      0020E6 1D 00 04         [ 2]  966 	subw x,#2*CELLL 
      0020E9 FF               [ 2]  967 	ldw (x),y 
      0020EA 90 BE 24         [ 2]  968 	ldw y,YTEMP 
      0020ED EF 02            [ 2]  969 	ldw (2,x),y 
      0020EF CD 20 82         [ 4]  970 	call ROW2BUF 
      0020F2 90 93            [ 1]  971 	ldw y,x 
      0020F4 90 EE 06         [ 2]  972 	ldw y,(6,y)
      0020F7 90 89            [ 2]  973 	pushw y ; udl 
      0020F9 90 9F            [ 1]  974 	ld a,yl
      0020FB A4 7F            [ 1]  975 	and a,#BLOCK_SIZE-1 
      0020FD 90 5F            [ 1]  976 	clrw y 
      0020FF 90 97            [ 1]  977 	ld yl,a 
      002101 72 A9 16 80      [ 2]  978 	addw y,#ROWBUFF 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      002105 1D 00 02         [ 2]  979 	subw x,#CELLL 
      002108 FF               [ 2]  980 	ldw (x),y  
      002109 CD 05 AA         [ 4]  981 	call SWAPP ;  ( ud a ra u -- )
      00210C CD 05 44         [ 4]  982 	call RFROM  
      00210F CD 20 C0         [ 4]  983 	call RFREE 
      002112 CD 08 B0         [ 4]  984 	call MIN
      002115 CD 05 9A         [ 4]  985 	call DUPP 
      002118 CD 05 63         [ 4]  986 	call TOR  
      00211B CD 0C 21         [ 4]  987 	call CMOVE
      00211E CD 20 AB         [ 4]  988 	call BUF2ROW 
      002121 CD 05 44         [ 4]  989 	call RFROM 
      002124 81               [ 4]  990 	ret 
                                    991 
                                    992 
                                    993 ;--------------------------
                                    994 ; expand 16 bit address 
                                    995 ; to 32 bit address 
                                    996 ; FADDR ( a -- ud )
                                    997 ;--------------------------
      002125 20 D2                  998 	.word LINK 
                           002127   999 	LINK=. 
      002127 05                    1000 	.byte 5 
      002128 46 41 44 44 52        1001 	.ascii "FADDR"
      00212D                       1002 FADDR:
      00212D CC 0A E6         [ 2] 1003 	jp ZERO 
                                   1004 
                                   1005 
                                   1006 ;--------------------------
                                   1007 ; move new colon definition to FLASH 
                                   1008 ; using WR-ROW for efficiency 
                                   1009 ; preserving bytes already used 
                                   1010 ; in the current block. 
                                   1011 ; At this point the compiler as completed
                                   1012 ; in RAM and pointers CP and CNTXT updated.
                                   1013 ; CNTXT point to nfa of new word and  
                                   1014 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                   1015 ; 
                                   1016 ; FMOVE ( -- cp+ )
                                   1017 ; 
                                   1018 ;--------------------------
      002130 21 27                 1019 	.word LINK 
                           002132  1020 	LINK=.
      002132 05                    1021 	.byte 5 
      002133 46 4D 4F 56 45        1022 	.ascii "FMOVE" 
      002138                       1023 FMOVE:
      002138 CD 06 A7         [ 4] 1024 	call TFLASH 
      00213B CD 04 F3         [ 4] 1025 	CALL AT 
      00213E CD 04 A8         [ 4] 1026 	CALL QBRAN 
      002141 21 BC                 1027 	.word no_move  
      002143 CD 06 F6         [ 4] 1028 	call CPP
      002146 CD 04 F3         [ 4] 1029 	call AT  
      002149 CD 05 9A         [ 4] 1030 	call DUPP ; ( udl udl -- )
      00214C CD 06 DA         [ 4] 1031 	call CNTXT 
      00214F CD 04 F3         [ 4] 1032 	call AT 
      002152 CD 04 75         [ 4] 1033 	call DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      002155 00 02                 1034 	.word 2 
      002157 CD 08 0E         [ 4] 1035 	call SUBB ; ( udl udl a -- )
      00215A CD 05 AA         [ 4] 1036 	call SWAPP 
      00215D CD 21 2D         [ 4] 1037 	call FADDR 
      002160 CD 07 55         [ 4] 1038 	call ROT  ; ( udl ud a -- )
      002163 CD 05 9A         [ 4] 1039 	call DUPP 
      002166 CD 05 63         [ 4] 1040 	call TOR    ; R: a 
      002169                       1041 FMOVE2: 
      002169 CD 0B D4         [ 4] 1042 	call HERE 
      00216C CD 05 57         [ 4] 1043 	call RAT 
      00216F CD 08 0E         [ 4] 1044 	call SUBB ; (udl ud a wl -- )
      002172                       1045 next_row:
      002172 CD 05 9A         [ 4] 1046 	call DUPP 
      002175 CD 05 63         [ 4] 1047 	call TOR  ; ( udl ud a wl -- ) R: a wl
      002178 CD 20 D9         [ 4] 1048 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      00217B CD 05 9A         [ 4] 1049 	call DUPP 
      00217E CD 05 63         [ 4] 1050 	call TOR
      002181 CD 07 95         [ 4] 1051 	call PLUS  ; ( udl+ ) 
      002184 CD 05 9A         [ 4] 1052 	call DUPP 
      002187 CD 0A E6         [ 4] 1053 	call ZERO   ; ( udl+ ud -- )
      00218A CD 05 44         [ 4] 1054 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      00218D CD 05 44         [ 4] 1055 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      002190 CD 05 C4         [ 4] 1056 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      002193 CD 08 0E         [ 4] 1057 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      002196 CD 05 9A         [ 4] 1058 	call DUPP 
      002199 CD 04 A8         [ 4] 1059 	call QBRAN
      00219C 21 B5                 1060 	.word fmove_done 
      00219E CD 05 AA         [ 4] 1061 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      0021A1 CD 05 44         [ 4] 1062 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      0021A4 CD 07 95         [ 4] 1063 	call PLUS  ; ( udl+2 ud wl- a+ )
      0021A7 CD 05 9A         [ 4] 1064 	call DUPP 
      0021AA CD 05 63         [ 4] 1065 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      0021AD CD 05 AA         [ 4] 1066 	call SWAPP 
      0021B0 CD 04 BF         [ 4] 1067 	call BRAN
      0021B3 21 72                 1068 	.word next_row  
      0021B5                       1069 fmove_done:	
      0021B5 CD 05 44         [ 4] 1070 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      0021B8 1C 00 0A         [ 2] 1071 	addw x,#5*CELLL ; (  -- cp+ ) new CP 
      0021BB 81               [ 4] 1072  	ret  
      0021BC                       1073 no_move:
      0021BC CD 0A E6         [ 4] 1074 	call ZERO
      0021BF 81               [ 4] 1075 	ret 
                                   1076 
                                   1077 ;------------------------------------------
                                   1078 ; adjust pointers after **FMOVE** operetion.
                                   1079 ; UPDAT-PTR ( cp+ -- )
                                   1080 ; cp+ is new CP position after FMOVE 
                                   1081 ;-------------------------------------------
      0021C0 21 32                 1082 	.word LINK 
                           0021C2  1083 	LINK=.
      0021C2 09                    1084 	.byte 9
      0021C3 55 50 44 41 54 2D 50  1085 	.ascii "UPDAT-PTR" 
             54 52
      0021CC                       1086 UPDATPTR:
                                   1087 ;reset VP to previous position  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      0021CC CD 1B 86         [ 4] 1088 	call EEPVP 
      0021CF CD 05 90         [ 4] 1089 	call DROP 
      0021D2 CD 04 F3         [ 4] 1090 	call AT
      0021D5 CD 06 E8         [ 4] 1091 	call VPP 
      0021D8 CD 04 DC         [ 4] 1092 	call STORE
                                   1093 ;update CONTEXT and LAST 
      0021DB CD 1B 70         [ 4] 1094 	call EEPCP 
      0021DE CD 05 90         [ 4] 1095 	call DROP
      0021E1 CD 04 F3         [ 4] 1096 	call AT
      0021E4 CD 04 75         [ 4] 1097 	call DOLIT 
      0021E7 00 02                 1098 	.word 2 
      0021E9 CD 07 95         [ 4] 1099 	call PLUS 
      0021EC CD 05 9A         [ 4] 1100 	call DUPP 
      0021EF CD 06 DA         [ 4] 1101 	call CNTXT 
      0021F2 CD 04 DC         [ 4] 1102 	call STORE
      0021F5 CD 07 06         [ 4] 1103 	call LAST
      0021F8 CD 04 DC         [ 4] 1104 	call STORE 
      0021FB CD 1B A0         [ 4] 1105 	call UPDATLAST 
                                   1106 ;update CP 
      0021FE CD 06 F6         [ 4] 1107 	call CPP 
      002201 CD 04 DC         [ 4] 1108 	call STORE
      002204 CD 1B C9         [ 4] 1109 	call UPDATCP 
      002207 81               [ 4] 1110 	ret 
                                   1111 
                                   1112 ;-----------------------------
                                   1113 ; move interrupt sub-routine
                                   1114 ; in flash memory
                                   1115 ;----------------------------- 
      002208 21 C2                 1116 	.word LINK 
                           00220A  1117 	LINK=. 
      00220A 06                    1118 	.byte 6
      00220B 49 46 4D 4F 56 45     1119 	.ascii "IFMOVE" 
      002211                       1120 IFMOVE:
      002211 CD 06 A7         [ 4] 1121 	call TFLASH 
      002214 CD 04 F3         [ 4] 1122 	CALL AT 
      002217 CD 04 A8         [ 4] 1123 	CALL QBRAN 
      00221A 21 BC                 1124 	.word no_move 
      00221C CD 06 F6         [ 4] 1125 	call CPP 
      00221F CD 04 F3         [ 4] 1126 	call AT 
      002222 CD 05 9A         [ 4] 1127 	call DUPP ; ( udl udl -- )
      002225 CD 1B 86         [ 4] 1128 	call EEPVP 
      002228 CD 05 90         [ 4] 1129 	call DROP
      00222B CD 04 F3         [ 4] 1130 	call AT  ; ( udl udl a )
      00222E CD 05 63         [ 4] 1131 	call TOR 
      002231 CD 21 2D         [ 4] 1132 	call FADDR
      002234 CD 05 57         [ 4] 1133 	call RAT ; ( udl ud a -- ) R: a 
      002237 CC 21 69         [ 2] 1134 	jp FMOVE2 
                                   1135 
                                   1136 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



                           000001  4649 .if WANT_SCALING_CONST 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



                                   4650         .include "const_ratio.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------------------------------------
                                     20 ; Irrationals constants 
                                     21 ; expressed as 2 integers ratio
                                     22 ; aproximation. These are to be used with scaling operators */ and */MOD 
                                     23 ; REF: https://www.forth.com/starting-forth/5-fixed-point-arithmetic/
                                     24 ;---------------------------------------------------------------------
                                     25 
                                     26 ;       PI ( --  355 113 )
                                     27 ; precision 8.5e-8 
                                     28 ; usage example to compute circle area
                                     29 ; : CAREA DUP * PI */ ;
                                     30 ; 
      00223A 22 0A                   31         .word LINK 
                           00223C    32         LINK=.
      00223C 02                      33         .byte 2
      00223D 50 49                   34         .ascii "PI" 
      00223F                         35 PII:
      00223F 1D 00 04         [ 2]   36         subw x,#2*CELLL 
      002242 90 AE 01 63      [ 2]   37         ldw y,#355 
      002246 EF 02            [ 2]   38         ldw (2,x),y 
      002248 90 AE 00 71      [ 2]   39         ldw y,#113 
      00224C FF               [ 2]   40         ldw (x),y 
      00224D 81               [ 4]   41         ret 
                                     42 
                                     43 ;      SQRT2 ( -- 19601  13860 )
                                     44 ; precision: 1.5e-9 
                                     45 ; usage example to compute Voltage peek to peek from Vrms 
                                     46 ; : VPP SQRT2 */ 2 * ;
                                     47 ;
      00224E 22 3C                   48         .word LINK 
                           002250    49         LINK=.
      002250 05                      50         .byte 5 
      002251 53 51 52 54 32          51         .ascii "SQRT2" 
      002256                         52 SQRT2:
      002256 1D 00 04         [ 2]   53         subw x,#2*CELLL 
      002259 90 AE 4C 91      [ 2]   54         ldw y,#19601 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      00225D EF 02            [ 2]   55         ldw (2,x),y 
      00225F 90 AE 36 24      [ 2]   56         ldw y,#13860 
      002263 FF               [ 2]   57         ldw (x),y 
      002264 81               [ 4]   58         ret 
                                     59 
                                     60 ;   SQRT3 ( -- 18817 10864 )
                                     61 ; precision: 1.1e-9
                                     62 ;
      002265 22 50                   63         .word LINK 
                           002267    64         LINK=.
      002267 05                      65         .byte 5
      002268 53 51 52 54 33          66         .ascii "SQRT3" 
      00226D                         67 SQRT3: 
      00226D 1D 00 04         [ 2]   68     subw x,#2*CELLL 
      002270 90 AE 49 81      [ 2]   69     ldw y,#18817 
      002274 EF 02            [ 2]   70     ldw (2,x),y 
      002276 90 AE 2A 70      [ 2]   71     ldw y,#10864 
      00227A FF               [ 2]   72     ldw (x),y 
      00227B 81               [ 4]   73     ret 
                                     74 
                                     75 ;   E ( -- 28667 10546 )
                                     76 ; precision: 5.5e-9 
                                     77 ; natural log base 
      00227C 22 67                   78         .word LINK 
                           00227E    79         LINK=.
      00227E 01                      80         .byte 1
      00227F 45                      81         .ascii "E" 
      002280                         82 ENEPER:
      002280 1D 00 04         [ 2]   83     subw x,#2*CELLL 
      002283 90 AE 6F FB      [ 2]   84     ldw y,#28667 
      002287 EF 02            [ 2]   85     ldw (2,x),y 
      002289 90 AE 29 32      [ 2]   86     ldw y,#10546 
      00228D FF               [ 2]   87     ldw (x),y 
      00228E 81               [ 4]   88     ret 
                                     89 
                                     90 ;   SQRT10 ( -- 22936 7253 )
                                     91 ; precision: 5.7e-9 
      00228F 22 7E                   92         .word LINK 
                           002291    93         LINK=.
      002291 06                      94         .byte 6 
      002292 53 51 52 54 31 30       95         .ascii "SQRT10" 
      002298                         96 SQRT10:
      002298 1D 00 04         [ 2]   97     subw x,#2*CELLL
      00229B 90 AE 59 98      [ 2]   98     ldw y,#22936 
      00229F EF 02            [ 2]   99     ldw (2,x),y 
      0022A1 90 AE 1C 55      [ 2]  100     ldw y,#7253
      0022A5 FF               [ 2]  101     ldw (x),y 
      0022A6 81               [ 4]  102     ret 
                                    103 
                                    104 ;   12RT2 ( -- 26797 25293 )
                                    105 ; precision: 1.0e-9 
                                    106 ; used in music to compute well tempered scale
      0022A7 22 91                  107         .word LINK 
                           0022A9   108         LINK=. 
      0022A9 05                     109         .byte 5 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      0022AA 31 32 52 54 32         110         .ascii "12RT2"
      0022AF                        111 RT12_2:
      0022AF 1D 00 04         [ 2]  112     subw x,#2*CELLL 
      0022B2 90 AE 68 AD      [ 2]  113     ldw y,#26797
      0022B6 EF 02            [ 2]  114     ldw (2,x),y 
      0022B8 90 AE 62 CD      [ 2]  115     ldw y,#25293
      0022BC FF               [ 2]  116     ldw (x),y 
      0022BD 81               [ 4]  117     ret 
                                    118 
                                    119 ;   LOG2s ( -- 2040 11103 )
                                    120 ; log(2)/1.6384
                                    121 ; precision: 1.1e-8
      0022BE 22 A9                  122         .word LINK 
                           0022C0   123         LINK=.
      0022C0 05                     124         .byte 5 
      0022C1 4C 4F 47 32 53         125         .ascii "LOG2S" 
      0022C6                        126 LOG2S:
      0022C6 1D 00 04         [ 2]  127     subw x,#2*CELLL
      0022C9 90 AE 07 F8      [ 2]  128     ldw y,#2040 
      0022CD EF 02            [ 2]  129     ldw (2,x),y 
      0022CF 90 AE 2B 5F      [ 2]  130     ldw y,#11103 
      0022D3 FF               [ 2]  131     ldw (x),y 
      0022D4 81               [ 4]  132     ret 
                                    133 
                                    134 ;   LN2 ( -- 485 11464 )
                                    135 ; ln(2)/16.384 
                                    136 ; precision: 1.0e-7 
      0022D5 22 C0                  137         .word LINK 
                           0022D7   138         LINK=.
      0022D7 04                     139         .byte 4 
      0022D8 4C 4E 32 53            140         .ascii "LN2S" 
      0022DC                        141 LN2S: 
      0022DC 1D 00 04         [ 2]  142     subw x,#2*CELLL
      0022DF 90 AE 01 E5      [ 2]  143     ldw y,#485
      0022E3 EF 02            [ 2]  144     ldw (2,x),y 
      0022E5 90 AE 2C C8      [ 2]  145     ldw y,#11464 
      0022E9 FF               [ 2]  146     ldw (x),y 
      0022EA 81               [ 4]  147     ret 
                                    148 
                                    149 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



                                   4651 .endif
                           000001  4652 .if WANT_CONST_TABLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                                   4653         .include "ctable.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;------------------------------
                                     20 ; words to create and read 
                                     21 ; constants tables in FLASH 
                                     22 ; and EEPROM
                                     23 ;------------------------------
                                     24 
                                     25 ;-----------------------------
                                     26 ; allocate space in CODE area 
                                     27 ; for constant table.
                                     28 ; CALLOT ( u -- ad )
                                     29 ; u  bytes to allocates 
                                     30 ; ad data address as double.
                                     31 ;-----------------------------
      0022EB 22 D7                   32     .word LINK 
                           0022ED    33     LINK=.
      0022ED 06                      34     .byte 6
      0022EE 43 41 4C 4C 4F 54       35     .ascii "CALLOT"
      0022F4                         36 CALLOT:
      0022F4 CD 06 F6         [ 4]   37     CALL CPP
      0022F7 CD 05 9A         [ 4]   38     CALL DUPP 
      0022FA CD 04 F3         [ 4]   39     CALL AT 
      0022FD CD 05 63         [ 4]   40     CALL TOR 
      002300 CD 0B 56         [ 4]   41     CALL PSTOR 
      002303 CD 1B C9         [ 4]   42     CALL UPDATCP 
      002306 CD 05 44         [ 4]   43     CALL RFROM
      002309 CC 0A E6         [ 2]   44     JP ZERO 
                                     45 
                                     46 ;------------------------------
                                     47 ; create constants bytes table 
                                     48 ; in persistant memory
                                     49 ;  CTABLE ( n+ -- ad ; <string> )
                                     50 ; n+ bytes reserved 
                                     51 ;-----------------------------
      00230C 22 ED                   52     .word LINK 
                           00230E    53     LINK=.
      00230E 06                      54     .byte 6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      00230F 43 54 41 42 4C 45       55     .ascii "CTABLE"
      002315                         56 CTABLE:
      002315 CD 22 F4         [ 4]   57     CALL CALLOT     
      002318 CC 18 C2         [ 2]   58     JP DCONST 
                                     59      
                                     60 
                                     61 ;--------------------------------
                                     62 ; create constants words table 
                                     63 ; in persistant memory 
                                     64 ; WTABLE ( n+ -- ad ; <string> )
                                     65 ; n+  words reserved  
                                     66 ;--------------------------------
      00231B 23 0E                   67     .word LINK 
                           00231D    68     LINK=.
      00231D 06                      69     .byte 6
      00231E 57 54 41 42 4C 45       70     .ascii "WTABLE"
      002324                         71 WTABLE:
      002324 CD 0A 6D         [ 4]   72     CALL CELLS  
      002327 CD 22 F4         [ 4]   73     CALL CALLOT 
      00232A CC 18 C2         [ 2]   74     JP DCONST 
                                     75 
                                     76 ;---------------------------------
                                     77 ; stack an element of CTABLE 
                                     78 ; CTABL@ ( u ad -- c )
                                     79 ; u element order {0..size-1}
                                     80 ; a|ad table address 
                                     81 ;--------------------------------
      00232D 23 1D                   82     .word LINK 
                           00232F    83     LINK=.
      00232F 06                      84     .byte 6
      002330 43 54 41 42 4C 40       85     .ascii "CTABL@" 
      002336                         86 CTAT:
      002336 CD 1B 0C         [ 4]   87     call FPSTOR 
      002339 CD 1C 9E         [ 4]   88     call PTRPLUS 
      00233C CC 1C DB         [ 2]   89     jp EE_CREAD 
                                     90 
                                     91 ;---------------------------------
                                     92 ; stack an element of WTABLE 
                                     93 ; WTABL@ ( u ud -- w )
                                     94 ; u is element order {0..size-1}
                                     95 ; a|ud table address 
                                     96 ;----------------------------------
      00233F 23 2F                   97     .word LINK 
                           002341    98     LINK=.
      002341 06                      99     .byte 6
      002342 57 54 41 42 4C 40      100     .ascii "WTABL@" 
      002348                        101 WTAT:
      002348 CD 1B 0C         [ 4]  102     call FPSTOR 
      00234B CD 0A 6D         [ 4]  103     call CELLS 
      00234E CD 1C 9E         [ 4]  104     call PTRPLUS 
      002351 CD 1C B9         [ 4]  105     call EE_READ 
      002354 81               [ 4]  106     ret 
                                    107 
                                    108 ;--------------------------
                                    109 ; tool to initialize character table 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                                    110 ; CTINIT ( ad -- )
                                    111 ; ad is table address 
                                    112 ;--------------------------
      002355 23 41                  113     .word LINK 
                           002357   114     LINK=.
      002357 06                     115     .byte 6 
      002358 43 54 49 4E 49 54      116     .ascii "CTINIT"
      00235E                        117 CTINIT:
      00235E CD 1B 0C         [ 4]  118     CALL FPSTOR
      002361 CD 1C 4A         [ 4]  119     CALL UNLOCK
      002364 CD 0A E6         [ 4]  120     CALL ZERO 
      002367 CD 0A 7A         [ 4]  121 1$: CALL ONEP 
      00236A CD 05 9A         [ 4]  122     CALL DUPP 
      00236D CD 23 BA         [ 4]  123     CALL INTQ 
      002370 CD 04 A8         [ 4]  124     CALL QBRAN 
      002373 23 7D                  125     .word 2$
      002375 CD 1C F5         [ 4]  126     call WR_BYTE 
      002378 CD 04 BF         [ 4]  127     CALL BRAN 
      00237B 23 67                  128     .word 1$ 
      00237D CD 07 75         [ 4]  129 2$: CALL DDROP 
      002380 CD 1C 72         [ 4]  130     CALL LOCK 
      002383 81               [ 4]  131     ret 
                                    132 
                                    133 ;--------------------------
                                    134 ; tool to initialize word table 
                                    135 ; WTINIT ( ad -- )
                                    136 ; ad is table address 
                                    137 ;--------------------------
      002384 23 57                  138     .word LINK 
                           002386   139     LINK=.
      002386 06                     140     .byte 6 
      002387 57 54 49 4E 49 54      141     .ascii "WTINIT"
      00238D                        142 WTINIT:
      00238D CD 1B 0C         [ 4]  143     CALL FPSTOR
      002390 CD 1C 4A         [ 4]  144     CALL UNLOCK
      002393 CD 0A E6         [ 4]  145     CALL ZERO 
      002396 CD 0A 7A         [ 4]  146 1$: CALL ONEP 
      002399 CD 05 9A         [ 4]  147     CALL DUPP
      00239C CD 23 BA         [ 4]  148     CALL INTQ
      00239F CD 04 A8         [ 4]  149     CALL QBRAN 
      0023A2 23 AC                  150     .word 2$
      0023A4 CD 1D 1A         [ 4]  151     call WR_WORD 
      0023A7 CD 04 BF         [ 4]  152     CALL BRAN 
      0023AA 23 96                  153     .word 1$ 
      0023AC CD 07 75         [ 4]  154 2$: CALL DDROP 
      0023AF CD 1C 72         [ 4]  155     CALL LOCK 
      0023B2 81               [ 4]  156     ret 
                                    157 
                                    158 ;------------------------
                                    159 ; Prompted input for integer 
                                    160 ; display n+ in bracket and
                                    161 ; '?' 
                                    162 ; [N]? ( n+ -- a )
                                    163 ;------------------------
      0023B3 23 86                  164     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



                           0023B5   165     LINK=.
      0023B5 04                     166     .byte 4
      0023B6 5B 4E 5D 3F            167     .ascii "[N]?" 
      0023BA                        168 INTQ:
      0023BA CD 0F 4C         [ 4]  169     CALL CR 
      0023BD CD 04 75         [ 4]  170     call DOLIT 
      0023C0 00 5B                  171     .word '[
      0023C2 CD 04 34         [ 4]  172     CALL EMIT 
      0023C5 CD 0F E7         [ 4]  173     CALL DOT 
      0023C8 CD 0F 8B         [ 4]  174     CALL  DOTQP
      0023CB 03                     175     .byte 3
      0023CC 5D 3F 20               176     .ascii "]? " 
      0023CF CD 13 33         [ 4]  177     CALL QUERY 
      0023D2 CD 11 5E         [ 4]  178     call TOKEN 
      0023D5 CC 0D F9         [ 2]  179     jp NUMBQ
                                    180 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



                                   4654 .endif
                                   4655 
                                   4656 ;===============================================================
                                   4657 
                           0023B5  4658 LASTN =	LINK   ;last name defined
                                   4659 
                                   4660 ; application code begin here
      002400                       4661 	.bndry 128 ; align on flash block  
      002400                       4662 app_space: 
                                   4663 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        000831 R   |   6 ABOR1      00136F R
  6 ABOR2      001386 R   |   6 ABORQ      001367 R   |   6 ABORT      001358 R
  6 ABRTQ      001643 R   |   6 ABSS       000828 R   |   6 ACCEP      0012EE R
  6 ACCP1      0012F7 R   |   6 ACCP2      00131D R   |   6 ACCP3      001320 R
  6 ACCP4      001322 R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |   6 ADRADJ     000734 R
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  6 AFT        00162E R   |   6 AGAIN      001584 R   |   6 AHEAD      0015E1 R
  6 ALLOT      001497 R   |   6 ANDD       0005E6 R   |     APP_CP  =  004004 
    APP_LAST=  004000     |     APP_RUN =  004002     |     APP_VP  =  004006 
  6 AT         0004F3 R   |   6 ATEXE      000C0A R   |   6 AUTORUN    000127 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |   6 B115K2     0003DE R
    B19200  =  000003     |   6 B19K2      0003BB R   |     B1_MASK =  000002 
    B230400 =  000007     |     B2400   =  000000     |   6 B2K4       00038C R
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |   6 B4K8       00039A R
    B4_MASK =  000010     |     B57600  =  000005     |   6 B57K6      0003CC R
    B5_MASK =  000020     |     B6_MASK =  000040     |     B7_MASK =  000080 
    B921600 =  000009     |     B9600   =  000002     |   6 B9K6       0003AA R
  6 BACK1      001296 R   |   6 BASE       000657 R   |     BASEE   =  00000A 
  6 BAUD       0003EE R   |     BCNT    =  000001     |   6 BCOMP      0014D9 R
  6 BDIGS      000CF1 R   |     BEEP_BIT=  000004     |     BEEP_CSR=  0050F3 
    BEEP_MAS=  000010     |     BEEP_POR=  00000F     |   6 BEGIN      001566 R
    BIT0    =  000000     |     BIT1    =  000001     |     BIT2    =  000002 
    BIT3    =  000003     |     BIT4    =  000004     |     BIT5    =  000005 
    BIT6    =  000006     |     BIT7    =  000007     |   6 BKSLA      00112E R
  6 BKSP       001266 R   |     BKSPP   =  000008     |   6 BLANK      000AD9 R
    BLOCK_SI=  000080     |     BOOT_ROM=  006000     |     BOOT_ROM=  007FFF 
  6 BRAN       0004BF R   |     BTW     =  000001     |   6 BUF2ROW    0020AB R
  6 BYE        0000B4 R   |     CADR    =  000003     |     CALLL   =  0000CD 
  6 CALLOT     0022F4 R   |     CAN_DGR =  005426     |     CAN_FPSR=  005427 
    CAN_IER =  005425     |     CAN_MCR =  005420     |     CAN_MSR =  005421 
    CAN_P0  =  005428     |     CAN_P1  =  005429     |     CAN_P2  =  00542A 
    CAN_P3  =  00542B     |     CAN_P4  =  00542C     |     CAN_P5  =  00542D 
    CAN_P6  =  00542E     |     CAN_P7  =  00542F     |     CAN_P8  =  005430 
    CAN_P9  =  005431     |     CAN_PA  =  005432     |     CAN_PB  =  005433 
    CAN_PC  =  005434     |     CAN_PD  =  005435     |     CAN_PE  =  005436 
    CAN_PF  =  005437     |     CAN_RFR =  005424     |     CAN_TPR =  005423 
    CAN_TSR =  005422     |     CARRY   =  000028     |   6 CAT        000511 R
  6 CCOMMA     0014BB R   |     CC_C    =  000000     |     CC_H    =  000004 
    CC_I0   =  000003     |     CC_I1   =  000005     |     CC_N    =  000002 
    CC_V    =  000007     |     CC_Z    =  000001     |     CELLL   =  000002 
  6 CELLM      000A5E R   |   6 CELLP      000A4F R   |   6 CELLS      000A6D R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]

Symbol Table

    CFG_GCR =  007F60     |     CFG_GCR_=  000001     |     CFG_GCR_=  000000 
  6 CHAR1      000F1E R   |   6 CHAR2      000F21 R   |   6 CHKIVEC    001F99 R
    CLKOPT  =  004807     |     CLKOPT_C=  000002     |     CLKOPT_E=  000003 
    CLKOPT_P=  000000     |     CLKOPT_P=  000001     |     CLK_CCOR=  0050C9 
    CLK_CKDI=  0050C6     |     CLK_CKDI=  000000     |     CLK_CKDI=  000001 
    CLK_CKDI=  000002     |     CLK_CKDI=  000003     |     CLK_CKDI=  000004 
    CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1 
    CLK_ECKR=  000000     |     CLK_ECKR=  000001     |     CLK_HSIT=  0050CC 
    CLK_ICKR=  0050C0     |     CLK_ICKR=  000002     |     CLK_ICKR=  000000 
    CLK_ICKR=  000001     |     CLK_ICKR=  000003     |     CLK_ICKR=  000004 
    CLK_ICKR=  000005     |     CLK_PCKE=  0050C7     |     CLK_PCKE=  000000 
    CLK_PCKE=  000001     |     CLK_PCKE=  000007     |     CLK_PCKE=  000005 
    CLK_PCKE=  000006     |     CLK_PCKE=  000004     |     CLK_PCKE=  000002 
    CLK_PCKE=  000003     |     CLK_PCKE=  0050CA     |     CLK_PCKE=  000003 
    CLK_PCKE=  000002     |     CLK_PCKE=  000007     |     CLK_SWCR=  0050C5 
    CLK_SWCR=  000000     |     CLK_SWCR=  000001     |     CLK_SWCR=  000002 
    CLK_SWCR=  000003     |     CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4 
    CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2 
  6 CMOV1      000C29 R   |   6 CMOV2      000C41 R   |   6 CMOVE      000C21 R
    CNTDWN  =  000030     |   6 CNTXT      0006DA R   |   6 COLD       001A9D R
  6 COLD1      001A9D R   |   6 COLON      0017DC R   |   6 COMMA      0014A4 R
  6 COMPI      0014E9 R   |     COMPO   =  000040     |   6 CONSTANT   001886 R
  6 COUNT      000BBD R   |   6 CPP        0006F6 R   |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |   6 CR         000F4C R   |   6 CREAT      001822 R
    CRR     =  00000D     |   6 CSTOR      000500 R   |   6 CTABLE     002315 R
  6 CTAT       002336 R   |   6 CTINIT     00235E R   |   6 DAT        000B9D R
    DATSTK  =  001680     |   6 DCONST     0018C2 R   |   6 DDROP      000775 R
  6 DDUP       000780 R   |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
  6 DECIM      000DA1 R   |   6 DEPTH      000B28 R   |     DEVID_BA=  0048CD 
    DEVID_EN=  0048D8     |     DEVID_LO=  0048D2     |     DEVID_LO=  0048D3 
    DEVID_LO=  0048D4     |     DEVID_LO=  0048D5     |     DEVID_LO=  0048D6 
    DEVID_LO=  0048D7     |     DEVID_LO=  0048D8     |     DEVID_WA=  0048D1 
    DEVID_XH=  0048CE     |     DEVID_XL=  0048CD     |     DEVID_YH=  0048D0 
    DEVID_YL=  0048CF     |   6 DGTQ1      000DE6 R   |   6 DI         0000C2 R
  6 DIG        000D1A R   |   6 DIGIT      000CB5 R   |   6 DIGS       000D2B R
  6 DIGS1      000D2B R   |   6 DIGS2      000D38 R   |   6 DIGTQ      000DB5 R
    DISCOVER=  000000     |     DM_BK1RE=  007F90     |     DM_BK1RH=  007F91 
    DM_BK1RL=  007F92     |     DM_BK2RE=  007F93     |     DM_BK2RH=  007F94 
    DM_BK2RL=  007F95     |     DM_CR1  =  007F96     |     DM_CR2  =  007F97 
    DM_CSR1 =  007F98     |     DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A 
  6 DN1        0007EF R   |   6 DNEGA      0007D2 R   |   6 DOCONST    0018B0 R
  6 DOLIT      000475 R   |   6 DONXT      000489 R   |     DOORBELL=  000000 
  6 DOSTR      000F62 R   |   6 DOT        000FE7 R   |   6 DOT1       000FFD R
  6 DOTI1      001A1E R   |   6 DOTID      001A08 R   |   6 DOTO1      0013FB R
  6 DOTOK      0013E1 R   |   6 DOTPR      001110 R   |   6 DOTQ       00165D R
  6 DOTQP      000F8B R   |   6 DOTR       000F99 R   |   6 DOTS       0019AA R
  6 DOTS1      0019B5 R   |   6 DOTS2      0019BE R   |   6 DOVAR      000647 R
  6 DO_DCONS   0018F1 R   |   6 DROP       000590 R   |   6 DSTOR      000B77 R
  6 DUMP       001960 R   |   6 DUMP1      001977 R   |   6 DUMP3      001999 R
  6 DUMPP      00192F R   |   6 DUPP       00059A R   |   6 EDIGS      000D56 R
  6 EECSTORE   001D4A R   |   6 EEPCP      001B70 R   |   6 EEPLAST    001B43 R
  6 EEPROM     001B2B R   |     EEPROM_B=  004000     |     EEPROM_E=  0047FF 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]

Symbol Table

    EEPROM_R=  000010     |     EEPROM_S=  000800     |   6 EEPRUN     001B5A R
  6 EEPVP      001B86 R   |   6 EESTORE    001D96 R   |   6 EE_CCOMM   002060 R
  6 EE_COMMA   00203F R   |   6 EE_CREAD   001CDB R   |   6 EE_READ    001CB9 R
  6 EI         0000BB R   |   6 ELSEE      0015BC R   |   6 EMIT       000434 R
  6 ENEPER     002280 R   |     EOL_CR  =  000001     |     EOL_LF  =  000000 
  6 EQ1        00084C R   |   6 EQUAL      000836 R   |   6 ERASE      000C83 R
    ERR     =  00001B     |   6 EVAL       001424 R   |   6 EVAL1      001424 R
  6 EVAL2      001440 R   |   6 EXE1       000C18 R   |   6 EXECU      0004CF R
    EXT     =  000000     |     EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1 
  6 EXTRC      000CDD R   |   6 FADDR      00212D R   |   6 FARAT      001BF1 R
  6 FARCAT     001BFD R   |   6 FC_XOFF    000461 R   |   6 FC_XON     00044B R
    FHSE    =  7A1200     |     FHSI    =  F42400     |   6 FILL       000C50 R
  6 FILL1      000C6D R   |   6 FILL2      000C76 R   |   6 FIND       0011C2 R
  6 FIND1      0011E0 R   |   6 FIND2      00120E R   |   6 FIND3      00121A R
  6 FIND4      00122E R   |   6 FIND5      00123B R   |   6 FIND6      00121F R
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
    FLSI    =  01F400     |   6 FMOVE      002138 R   |   6 FMOVE2     002169 R
  6 FOR        001539 R   |   6 FORGET     000158 R   |   6 FORGET1    000187 R
  6 FORGET2    00020D R   |   6 FORGET4    000216 R   |   6 FORGET6    0001CF R
  6 FPSTOR     001B0C R   |     FPTR    =  000032     |   6 FREEVAR    000223 R
  6 FREEVAR4   000259 R   |     GPIO_BAS=  005000     |     GPIO_CR1=  000003 
    GPIO_CR2=  000004     |     GPIO_DDR=  000002     |     GPIO_IDR=  000001 
    GPIO_ODR=  000000     |     GPIO_SIZ=  000005     |   6 HERE       000BD4 R
  6 HEX        000D8C R   |   6 HI         001A5A R   |   6 HLD        0006C7 R
  6 HOLD       000D01 R   |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]

Symbol Table

    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |   6 ICOLON     0017ED R
  6 IFETCH     001557 R   |   6 IFF        001594 R   |   6 IFMOVE     002211 R
    IMEDD   =  000080     |   6 IMMED      0017FF R   |   6 INCH       000428 R
  6 INC_FPTR   001C86 R   |   6 INITOFS    0017B5 R   |   6 INN        000675 R
    INPUT_DI=  000000     |     INPUT_EI=  000001     |     INPUT_FL=  000000 
    INPUT_PU=  000001     |   6 INTE1      0013C3 R   |   6 INTER      001399 R
  6 INTQ       0023BA R   |     INT_ADC2=  000016     |     INT_AUAR=  000012 
    INT_AWU =  000001     |     INT_CAN_=  000008     |     INT_CAN_=  000009 
    INT_CLK =  000002     |     INT_EXTI=  000003     |     INT_EXTI=  000004 
    INT_EXTI=  000005     |     INT_EXTI=  000006     |     INT_EXTI=  000007 
    INT_FLAS=  000018     |     INT_I2C =  000013     |     INT_SPI =  00000A 
    INT_TIM1=  00000C     |     INT_TIM1=  00000B     |     INT_TIM2=  00000E 
    INT_TIM2=  00000D     |     INT_TIM3=  000010     |     INT_TIM3=  00000F 
    INT_TIM4=  000017     |     INT_TLI =  000000     |     INT_UART=  000011 
    INT_UART=  000015     |     INT_UART=  000014     |     INT_VECT=  008060 
    INT_VECT=  00800C     |     INT_VECT=  008028     |     INT_VECT=  00802C 
    INT_VECT=  008010     |     INT_VECT=  008014     |     INT_VECT=  008018 
    INT_VECT=  00801C     |     INT_VECT=  008020     |     INT_VECT=  008024 
    INT_VECT=  008068     |     INT_VECT=  008054     |     INT_VECT=  008000 
    INT_VECT=  008030     |     INT_VECT=  008038     |     INT_VECT=  008034 
    INT_VECT=  008040     |     INT_VECT=  00803C     |     INT_VECT=  008048 
    INT_VECT=  008044     |     INT_VECT=  008064     |     INT_VECT=  008008 
    INT_VECT=  008004     |     INT_VECT=  008050     |     INT_VECT=  00804C 
    INT_VECT=  00805C     |     INT_VECT=  008058     |   6 INVER      0007AF R
    IPR0    =  000002     |     IPR1    =  000001     |     IPR2    =  000000 
    IPR3    =  000003     |     IPR_MASK=  000003     |     IRET_COD=  000080 
  6 ISEMI      00174A R   |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
  6 JSRC       00179F R   |   6 KEY        000ECC R   |   6 KTAP       0012B3 R
  6 KTAP1      0012D6 R   |   6 KTAP2      0012D9 R   |   6 LAST       000706 R
  6 LASTN   =  0023B5 R   |   6 LBRAC      0013D0 R   |     LED2_BIT=  000005 
    LED2_MAS=  000020     |     LED2_POR=  00500A     |   6 LESS       000873 R
    LF      =  00000A     |   6 LINK    =  0023B5 R   |   6 LITER      00150B R
  6 LN2S       0022DC R   |   6 LOCK       001C72 R   |   6 LOG2S      0022C6 R
  6 LSHIFT     000A98 R   |   6 LSHIFT1    000AA1 R   |   6 LSHIFT4    000AA9 R
  6 LT1        000889 R   |     MASKK   =  001F7F     |   6 MAX        000893 R
  6 MAX1       0008A6 R   |   6 MIN        0008B0 R   |   6 MIN1       0008C3 R
  6 MMOD1      000951 R   |   6 MMOD2      000965 R   |   6 MMOD3      00097C R
  6 MMSM1      000909 R   |   6 MMSM3      00090B R   |   6 MMSM4      000914 R
  6 MMSMa      00090F R   |   6 MMSMb      00091F R   |   6 MODD       000996 R
  6 MONE       000AFF R   |     MS      =  00002E     |   6 MSEC       0002CE R
  6 MSMOD      000934 R   |   6 MSTA1      000A27 R   |   6 MSTAR      000A04 R
    NAFR    =  004804     |   6 NAMEQ      00125B R   |   6 NAMET      00116C R
    NCLKOPT =  004808     |   6 NEGAT      0007C0 R   |   6 NEX1       000496 R
  6 NEXT       001548 R   |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPT6   =  00480C 
    NOPT7   =  00480E     |     NOPTBL  =  00487F     |   6 NTIB       000685 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]

Symbol Table

    NUBC    =  004802     |     NUCLEO  =  000001     |   6 NUFQ       000EE2 R
  6 NUFQ1      000EFB R   |   6 NUMBQ      000DF9 R   |   6 NUMQ1      000E2D R
  6 NUMQ2      000E5E R   |   6 NUMQ3      000EA0 R   |   6 NUMQ4      000EA5 R
  6 NUMQ5      000EB4 R   |   6 NUMQ6      000EB7 R   |     NWDGOPT =  004806 
    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   6 NonHandl   000000 R   |   6 OFFSET     00072B R
    OFS     =  000005     |   6 ONE        000AF1 R   |   6 ONEM       000A87 R
  6 ONEP       000A7A R   |     OPT     =  000002     |     OPT0    =  004800 
    OPT1    =  004801     |     OPT2    =  004803     |     OPT3    =  004805 
    OPT4    =  004807     |     OPT5    =  004809     |     OPT6    =  00480B 
    OPT7    =  00480D     |     OPTBL   =  00487E     |     OPTIMIZE=  000001 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  6 ORIG       000047 R   |   6 ORR        0005FA R   |   6 OUTPUT     000439 R
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |   6 OVER       0005C4 R   |   6 OVERT      001718 R
    PA      =  000000     |   6 PACKS      000C94 R   |   6 PAD        000BE5 R
  6 PAREN      00111F R   |   6 PARS       001018 R   |   6 PARS1      001043 R
  6 PARS2      00106E R   |   6 PARS3      001071 R   |   6 PARS4      00107A R
  6 PARS5      00109D R   |   6 PARS6      0010B2 R   |   6 PARS7      0010C1 R
  6 PARS8      0010D0 R   |   6 PARSE      0010E1 R   |   6 PAUSE      0002DE R
    PA_BASE =  005000     |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_BASE =  005005     |     PB_CR1  =  005008 
    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
    PB_ODR  =  005005     |     PC      =  00000A     |     PC_BASE =  00500A 
    PC_CR1  =  00500D     |     PC_CR2  =  00500E     |     PC_DDR  =  00500C 
    PC_IDR  =  00500B     |     PC_ODR  =  00500A     |     PD      =  00000F 
  6 PDUM1      001942 R   |   6 PDUM2      001953 R   |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
    PE_BASE =  005014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_BASE =  005019     |     PF_CR1  =  00501C 
    PF_CR2  =  00501D     |     PF_DDR  =  00501B     |     PF_IDR  =  00501A 
    PF_ODR  =  005019     |     PG      =  00001E     |     PG_BASE =  00501E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |     PH      =  000023 
    PH_BASE =  005023     |     PH_CR1  =  005026     |     PH_CR2  =  005027 
    PH_DDR  =  005025     |     PH_IDR  =  005024     |     PH_ODR  =  005023 
    PI      =  000028     |   6 PICK       000B3F R   |   6 PII        00223F R
    PI_BASE =  005028     |     PI_CR1  =  00502B     |     PI_CR2  =  00502C 
    PI_DDR  =  00502A     |     PI_IDR  =  005029     |     PI_ODR  =  005028 
  6 PLUS       000795 R   |   6 PNAM1      0016CD R   |   6 PRESE      00144F R
    PROD1   =  000022     |     PROD2   =  000024     |     PROD3   =  000026 
  6 PROTECTE   0001FF R   |   6 PSTOR      000B56 R   |     PTR16   =  000033 
    PTR8    =  000034     |   6 PTRPLUS    001C9E R   |   6 QBRAN      0004A8 R
  6 QDUP       000744 R   |   6 QDUP1      00074E R   |   6 QKEY       000416 R
  6 QSTAC      001407 R   |   6 QUERY      001333 R   |   6 QUEST      00100A R
  6 QUIT       00146C R   |   6 QUIT1      001474 R   |   6 QUIT2      001477 R
  6 RAM2EE     0020D9 R   |     RAMBASE =  000000     |   6 RAMLAST    000719 R
    RAM_BASE=  000000     |     RAM_END =  0017FF     |     RAM_SIZE=  001800 
  6 RANDOM     00027C R   |   6 RAT        000557 R   |   6 RBRAC      00178C R
  6 REPEA      001611 R   |   6 RFREE      0020C0 R   |   6 RFROM      000544 R
    ROP     =  004800     |   6 ROT        000755 R   |   6 ROW2BUF    002082 R
    ROWBUFF =  001680     |     RP0     =  00002C     |   6 RPAT       000521 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]

Symbol Table

    RPP     =  0017FF     |   6 RPSTO      00052E R   |   6 RSHIFT     000AB4 R
  6 RSHIFT1    000ABD R   |   6 RSHIFT4    000AC5 R   |     RST_SR  =  0050B3 
  6 RT12_2     0022AF R   |   6 SAME1      00118A R   |   6 SAME2      0011B3 R
  6 SAMEQ      001182 R   |   6 SCOM1      001702 R   |   6 SCOM2      001705 R
  6 SCOMP      0016E4 R   |   6 SEED       000263 R   |     SEEDX   =  000036 
    SEEDY   =  000038     |   6 SEMIS      001728 R   |   6 SETISP     0000CE R
  6 SET_RAML   00186F R   |     SFR_BASE=  005000     |     SFR_END =  0057FF 
  6 SIGN       000D40 R   |   6 SIGN1      000D50 R   |   6 SLASH      0009A0 R
  6 SLMOD      000984 R   |   6 SNAME      001697 R   |     SP0     =  00002A 
  6 SPACE      000F04 R   |   6 SPACS      000F13 R   |   6 SPAT       00057A R
    SPI_CR1 =  005200     |     SPI_CR2 =  005201     |     SPI_CRCP=  005205 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_TXCR=  005207     |     SPP     =  001680 
    SPSAVE  =  000001     |   6 SPSTO      000587 R   |   6 SQRT10     002298 R
  6 SQRT2      002256 R   |   6 SQRT3      00226D R   |   6 SSMOD      000A30 R
    SSP     =  000001     |     STACK   =  0017FF     |   6 STAR       0009F9 R
  6 STASL      000A41 R   |   6 STOD       0007F7 R   |   6 STORE      0004DC R
  6 STR        000D6E R   |   6 STRCQ      001519 R   |   6 STRQ       001650 R
  6 STRQP      000F81 R   |   6 SUBB       00080E R   |   6 SWAPP      0005AA R
    SWIM_CSR=  007F80     |   6 TAP        00129D R   |   6 TBOOT      001A91 R
  6 TBUF       000695 R   |     TBUFFBAS=  001680     |   6 TCHAR      000B10 R
  6 TEMP       000666 R   |   6 TEVAL      0006B8 R   |   6 TFLASH     0006A7 R
  6 THENN      0015A9 R   |   6 TIB        000BF6 R   |     TIBB    =  001700 
    TIBBASE =  001700     |     TIC     =  000027     |   6 TICK       001483 R
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  000000     |     TIM2_CCE=  000001 
    TIM2_CCE=  000004     |     TIM2_CCE=  000005     |     TIM2_CCE=  005309 
    TIM2_CCM=  005305     |     TIM2_CCM=  005306     |     TIM2_CCM=  005307 
    TIM2_CCM=  000000     |     TIM2_CCM=  000004     |     TIM2_CCM=  000003 
    TIM2_CCR=  00530F     |     TIM2_CCR=  005310     |     TIM2_CCR=  005311 
    TIM2_CCR=  005312     |     TIM2_CCR=  005313     |     TIM2_CCR=  005314 
    TIM2_CNT=  00530A     |     TIM2_CNT=  00530B     |     TIM2_CR1=  005300 
    TIM2_CR1=  000007     |     TIM2_CR1=  000000     |     TIM2_CR1=  000003 
    TIM2_CR1=  000001     |     TIM2_CR1=  000002     |     TIM2_EGR=  005304 
    TIM2_EGR=  000001     |     TIM2_EGR=  000002     |     TIM2_EGR=  000003 
    TIM2_EGR=  000006     |     TIM2_EGR=  000000     |     TIM2_IER=  005301 
    TIM2_PSC=  00530C     |     TIM2_SR1=  005302     |     TIM2_SR2=  005303 
    TIM3_ARR=  00532B     |     TIM3_ARR=  00532C     |     TIM3_CCE=  005327 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCE=  000004 
    TIM3_CCE=  000005     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCM=  005325     |     TIM3_CCM=  005326     |     TIM3_CCM=  000000 
    TIM3_CCM=  000004     |     TIM3_CCM=  000003     |     TIM3_CCR=  00532D 
    TIM3_CCR=  00532E     |     TIM3_CCR=  00532F     |     TIM3_CCR=  005330 
    TIM3_CNT=  005328     |     TIM3_CNT=  005329     |     TIM3_CR1=  005320 
    TIM3_CR1=  000007     |     TIM3_CR1=  000000     |     TIM3_CR1=  000003 
    TIM3_CR1=  000001     |     TIM3_CR1=  000002     |     TIM3_EGR=  005324 
    TIM3_IER=  005321     |     TIM3_PSC=  00532A     |     TIM3_SR1=  005322 
    TIM3_SR2=  005323     |     TIM4_ARR=  005346     |     TIM4_CNT=  005344 
    TIM4_CR1=  005340     |     TIM4_CR1=  000007     |     TIM4_CR1=  000000 
    TIM4_CR1=  000003     |     TIM4_CR1=  000001     |     TIM4_CR1=  000002 
    TIM4_EGR=  005343     |     TIM4_EGR=  000000     |     TIM4_IER=  005341 
    TIM4_IER=  000000     |     TIM4_PSC=  005345     |     TIM4_PSC=  000000 
    TIM4_PSC=  000007     |     TIM4_PSC=  000004     |     TIM4_PSC=  000001 
    TIM4_PSC=  000005     |     TIM4_PSC=  000002     |     TIM4_PSC=  000006 
    TIM4_PSC=  000003     |     TIM4_PSC=  000000     |     TIM4_PSC=  000001 
    TIM4_PSC=  000002     |     TIM4_SR =  005342     |     TIM4_SR_=  000000 
  6 TIMEOUTQ   00030E R   |   6 TIMER      0002F8 R   |     TIM_CR1_=  000007 
    TIM_CR1_=  000000     |     TIM_CR1_=  000006     |     TIM_CR1_=  000005 
    TIM_CR1_=  000004     |     TIM_CR1_=  000003     |     TIM_CR1_=  000001 
    TIM_CR1_=  000002     |   6 TNAM2      0019D8 R   |   6 TNAM3      0019F6 R
  6 TNAM4      0019FC R   |   6 TNAME      0019D5 R   |   6 TOFLASH    000333 R
  6 TOKEN      00115E R   |   6 TOR        000563 R   |   6 TORAM      000373 R
    TRUEE   =  00FFFF     |   6 TWOSL      000ACC R   |   6 TYPE1      000F33 R
  6 TYPE2      000F3F R   |   6 TYPES      000F2E R   |   6 Timer4Ha   000005 R
    UART1   =  000000     |     UART1_BA=  005230     |     UART1_BR=  005232 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]

Symbol Table

    UART1_BR=  005233     |     UART1_CR=  005234     |     UART1_CR=  005235 
    UART1_CR=  005236     |     UART1_CR=  005237     |     UART1_CR=  005238 
    UART1_DR=  005231     |     UART1_GT=  005239     |     UART1_PO=  000000 
    UART1_PS=  00523A     |     UART1_RX=  000004     |     UART1_SR=  005230 
    UART1_TX=  000005     |     UART3   =  000001     |     UART3_BA=  005240 
    UART3_BR=  005242     |     UART3_BR=  005243     |     UART3_CR=  005244 
    UART3_CR=  005245     |     UART3_CR=  005246     |     UART3_CR=  005247 
    UART3_CR=  004249     |     UART3_DR=  005241     |     UART3_PO=  00000F 
    UART3_RX=  000006     |     UART3_SR=  005240     |     UART3_TX=  000005 
    UART_BRR=  005232     |     UART_BRR=  005233     |     UART_CR1=  005234 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  005235 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000006 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000007     |     UART_CR4=  000000 
    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000008     |     UART_CR5=  000003     |     UART_CR5=  000001 
    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_CR6=  000009     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DR =  005231     |     UART_GTR=  000009 
    UART_PSC=  00000A     |     UART_SR =  005230     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBASE   =  000006     |     UBC     =  004801 
    UCNTXT  =  000014     |     UCP     =  000018     |     UCTIB   =  00000C 
    UD1     =  000001     |     UD2     =  000002     |     UD3     =  000003 
    UD4     =  000004     |   6 UDOT       000FD4 R   |   6 UDOTR      000FB4 R
  6 UEND       000045 R   |     UHLD    =  000012     |     UINN    =  00000A 
    UINTER  =  000010     |     ULAST   =  00001A     |   6 ULES1      00086B R
  6 ULESS      000855 R   |   6 UMMOD      0008EB R   |   6 UMSTA      0009AF R
  6 UNIQ1      00168E R   |   6 UNIQU      00166F R   |   6 UNLKEE     001C0C R
  6 UNLKFL     001C2B R   |   6 UNLOCK     001C4A R   |   6 UNTIL      001571 R
    UOFFSET =  00001C     |   6 UPDATCP    001BC9 R   |   6 UPDATLAS   001BA0 R
  6 UPDATPTR   0021CC R   |   6 UPDATRUN   001BB8 R   |   6 UPDATVP    001BE0 R
  6 UPL1       00063B R   |   6 UPLUS      000624 R   |     UPP     =  000006 
    URLAST  =  000020     |     USR_BTN_=  000004     |     USR_BTN_=  000010 
    USR_BTN_=  005015     |     UTFLASH =  00001E     |     UTIB    =  00000E 
    UTMP    =  000008     |   6 UTYP1      001912 R   |   6 UTYP2      001921 R
  6 UTYPE      00190D R   |     UVP     =  000016     |   6 UZERO      00002B R
  6 VARIA      00183C R   |     VAR_BASE=  000080     |     VAR_TOP =  0017BF 
    VER     =  000003     |   6 VPP        0006E8 R   |     VSIZE   =  000006 
    WANT_CON=  000001     |     WANT_DEB=  000000     |     WANT_SCA=  000001 
    WANT_SEE=  000000     |     WDGOPT  =  004805     |     WDGOPT_I=  000002 
    WDGOPT_L=  000003     |     WDGOPT_W=  000000     |     WDGOPT_W=  000001 
  6 WHILE      0015F7 R   |   6 WITHI      0008D0 R   |   6 WORDD      00114A R
  6 WORDS      001A32 R   |   6 WORS1      001A38 R   |   6 WORS2      001A54 R
  6 WR_BYTE    001CF5 R   |   6 WR_WORD    001D1A R   |   6 WTABLE     002324 R
  6 WTAT       002348 R   |   6 WTINIT     00238D R   |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |     XMEM_SIZ=  017830     |     XOFF    =  000013 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]

Symbol Table

    XON     =  000011     |   6 XORR       00060F R   |     XTEMP   =  000022 
    YTEMP   =  000024     |   6 ZERO       000AE6 R   |   6 ZL1        0005DC R
  6 ZLESS      0005D3 R   |   6 app_spac   002400 R   |   6 baudrate   000379 R
  6 block_er   001DE0 R   |   6 clear_ra   000019 R   |   6 clock_in   000062 R
  6 copy_buf   001E40 R   |   6 copy_buf   001E5F R   |   6 copy_pro   001E5F R
    da      =  000002     |     db      =  000003     |     dc      =  000000 
    dd      =  000001     |   6 erase_fl   001E02 R   |   6 fmove_do   0021B5 R
  6 main       000016 R   |   6 next_row   002172 R   |   6 no_move    0021BC R
  6 pristine   001EE0 R   |   6 proceed_   001E05 R   |   6 reboot     000325 R
  6 reset_ve   001F47 R   |   6 row_eras   001DC0 R   |   6 row_eras   001E19 R
  6 row_eras   001E40 R   |   6 set_opti   001EB4 R   |   6 set_vect   001FE8 R
  6 uart_ini   000074 R   |   6 write_ro   001E84 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   2400   flags    0

