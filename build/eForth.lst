ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                                .include "inc/config.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019,2020 
                                        ; This file is part of stm8_eForth  
                                        ;
                                        ;     stm8_eForth is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     stm8_eForth is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        
                                        ; constants to select board
                                        ; to assemble for a specific 
                                        ; board or MCU set it to 1 and the other
                                        ; to 0. 
                                 
                                 
                                 
                                        
                                        ; select end of line character
                                 
                                 
                                        
                                        ; set to 1 to include 
                                        ; scaling constants vocabulary
                                        ; see: const_ratio.asm 
                                 
                                        
                                        ; set to 1 to include 
                                        ; constants tables vocabulary 
                                        ; see: ctable.asm 
                                 
                                        
                                        ; to include floating point 
                                        ; library 
                                 
                                        
                                        ; set to 1 to make vocabulary 
                                        ; case sensitive 
                                 
                                        
                                        ; how many bytes are reserved 
                                        ; by system at EEPROM base.
                                 
                                        
                                 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        .endif
                                        
                                 
                                        	.include "inc/stm8s105.inc"
                                        .if DISCOVERY
                                        	.include "inc/stm8s_disco.inc"
                                        .endif 
                                        XMEM_SIZE=0 ; size in bytes of EXTENDED MEMORY 
                                        UART_SR=UART2_SR
                                        UART_DR=UART2_DR
                                        UART_BRR1=UART2_BRR1
                                        UART_BRR2=UART2_BRR2
                                        UART_CR1=UART2_CR1
                                        UART_CR2=UART2_CR2
                                        .endif 
                                        
                                        	
                                         
                                        
                                        
                                        
                                     12 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     14 
                                     15 ;===============================================================
                                     16 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     17 ;  Date: 2020-06-07 
                                     18 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     19 ;  Date: 2019-10-26
                                     20 ;  Changes to memory map:
                                     21 ;       0x16f0  Data Stack, growing downward
                                     22 ;       0x1700  Terminal input buffer TIB
                                     23 ;       0x17ff  Return Stack, growing downard
                                     24 ;================================================================
                                     25 ;       STM8EF, Version 2.1, 13 July
                                     26 ;               Implemented on STM8S-Discovery Board.
                                     27 ;               Assembled by ST VisualDevelop STVD 
                                     28 ;               Bootup on internal 2 MHz clock
                                     29 ;               Switch to external 16 MHz crystal clock
                                     30 ;
                                     31 ; FORTH Virtual Machine:
                                     32 ; Subroutine threaded model
                                     33 ; SP Return stack pointer
                                     34 ; X Data stack pointer
                                     35 ; A,Y Scratch pad registers
                                     36 ;
                                     37 ; Memory Map:
                                     38 ; 0x0 RAM memory, system variables
                                     39 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     40 ; 0x780 Data stack, growing downward
                                     41 ; 0x790 Terminal input buffer TIB
                                     42 ; 0x7FF Return stack, growing downward
                                     43 ; 0x8000 Interrupt vector table
                                     44 ; 0x8080 FORTH startup code
                                     45 ; 0x80E7 Start of FORTH dictionary in ROM
                                     46 ; 0x9584 End of FORTH dictionary
                                     47 ;
                                     48 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     49 ;                  use UART1 instead of UART2 for communication with user.
                                     50 ;                  UART1 is available as ttyACM* device via USB connection.
                                     51 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     52 ;                  and MSEC word that return MS value.
                                     53 ;
                                     54 ;       EF12, Version 2.1, 18apr00cht
                                     55 ;               move to 8000H replacing WHYP.
                                     56 ;               copy interrupt vectors from WHYPFLSH.S19
                                     57 ;               to EF12.S19 before flashing
                                     58 ;               add TICKS1 and DELAY1 for motor stepping
                                     59 ;
                                     60 ;       EF12, 02/18/00, C. H. Ting
                                     61 ;       Adapt 86eForth v2.02 to 68HC12.
                                     62 ;               Use WHYP to seed EF12.ASM
                                     63 ;               Use AS12 native 68HC12 assembler:
                                     64 ;               as12 ef12.asm >ef12.lst
                                     65 ;       EF12A, add ADC code, 02mar00cht
                                     66 ;       EF12B, 01mar00cht
                                     67 ;               stack to 0x78, return stack to 0xf8.
                                     68 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     69 ;               add PWM registers
                                     70 ;               add SPI registers and code
                                     71 ;       EF12C, 12mar00cht
                                     72 ;               add MAX5250 D/A converter
                                     73 ;       EF12D, 15mar00cht
                                     74 ;               add all the Lexel interface words
                                     75 ;       EF12E, 18apr00cht, save for reference
                                     76 ;
                                     77 ;       Copyright (c) 2000
                                     78 ;       Dr. C. H. Ting
                                     79 ;       156 14th Avenue
                                     80 ;       San Mateo, CA 94402
                                     81 ;       (650) 571-7639
                                     82 ;
                                     83 
                                     84       
                                     85 ;*********************************************************
                                     86 ;	Assembler constants
                                     87 ;*********************************************************
                           000000    88 RAMBASE =	0x0000	   ;ram base
                           000001    89 .if NUCLEO 
                           0017FF    90 STACK   =	0x17FF 	;system (return) stack empty 
                           001680    91 DATSTK  =	0x1680	;data stack  empty
                           001680    92 TBUFFBASE =     0x1680  ; flash read/write transaction buffer address  
                           001700    93 TIBBASE =       0X1700  ; transaction input buffer addr.
                           000000    94 .else ; DISCOVERY
                                     95 STACK   =	0x7FF 	;system (return) stack empty 
                                     96 DATSTK  =	0x680	;data stack  empty
                                     97 TBUFFBASE =     0x680  ; flash read/write transaction buffer address  
                                     98 TIBBASE =       0X700  ; transaction input buffer addr.
                                     99 .endif
                                    100 
                                    101 ;; Memory allocation
                           000006   102 UPP     =     RAMBASE+6          ; systeme variables base address 
                           001680   103 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0017FF   104 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           001680   105 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           001700   106 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   107 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0017BF   108 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    109 
                                    110 ; user variables constants 
                           000006   111 UBASE = UPP       ; numeric base 
                           000008   112 UFBASE = UBASE+2  ; floating point base 
                           00000A   113 UFPSW = UFBASE+2  ; floating point state word 
                           00000C   114 UTMP = UFPSW+2    ; temporary storage
                           00000E   115 UINN = UTMP+2     ; >IN tib pointer 
                           000010   116 UCTIB = UINN+2    ; tib count 
                           000012   117 UTIB = UCTIB+2    ; tib address 
                           000014   118 UINTER = UTIB+2   ; interpreter vector 
                           000016   119 UHLD = UINTER+2   ; hold 
                           000018   120 UCNTXT = UHLD+2   ; context, dictionary first link 
                           00001A   121 UVP = UCNTXT+2    ; variable pointer 
                           00001C   122 UCP = UVP+2      ; code pointer
                           00001E   123 ULAST = UCP+2    ; last dictionary pointer 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000020   124 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
                           000022   125 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
                           000024   126 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    127 
                                    128 ;******  System Variables  ******
                           000026   129 XTEMP	=	URLAST +2;address called by CREATE
                           000028   130 YTEMP	=	XTEMP+2	;address called by CREATE
                           000026   131 PROD1 = XTEMP	;space for UM*
                           000028   132 PROD2 = PROD1+2
                           00002A   133 PROD3 = PROD2+2
                           00002C   134 CARRY = PROD3+2
                           00002E   135 SP0	= CARRY+2	;initial data stack pointer
                           000030   136 RP0	= SP0+2		;initial return stack pointer
                           000032   137 MS    =   RP0+2         ; millisecond counter 
                           000034   138 CNTDWN =  MS+2          ; count down timer 
                           000036   139 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000037   140 PTR16 = FPTR+1          ; middle byte of farptr 
                           000038   141 PTR8 = FPTR+2           ; least byte of farptr 
                           00003A   142 SEEDX = PTR8+2          ; PRNG seed X 
                           00003C   143 SEEDY = SEEDX+2         ; PRNG seed Y 
                                    144 
                                    145 ; EEPROM persistant data  
                           004000   146 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   147 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   148 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   149 APP_VP = APP_CP+2  ; free data space pointer 
                                    150 
                                    151 
                                    152 ;***********************************************
                                    153 ;; Version control
                                    154 
                           000003   155 VER     =     3         ;major release version
                           000000   156 EXT     =     0         ;minor extension
                                    157 
                                    158 ;; Constants
                                    159 
                           00FFFF   160 TRUEE   =     0xFFFF      ;true flag
                                    161 
                           000040   162 COMPO   =     0x40     ;lexicon compile only bit
                           000080   163 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   164 MASKK   =     0x1F7F  ;lexicon bit mask
                                    165 
                           000002   166 CELLL   =     2       ;size of a cell
                           00000A   167 BASEE   =     10      ;default radix
                           000008   168 BKSPP   =     8       ;back space
                           00000A   169 LF      =     10      ;line feed
                           00000D   170 CRR     =     13      ;carriage return
                           000011   171 XON     =     17
                           000013   172 XOFF    =     19
                           00001B   173 ERR     =     27      ;error escape
                           000027   174 TIC     =     39      ;tick
                           0000CD   175 CALLL   =     0xCD     ;CALL opcodes
                           000080   176 IRET_CODE =   0x80    ; IRET opcode 
                                    177 
                                    178         .macro _ledon
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    179         .if NUCLEO
                                    180         bset PC_ODR,#LED2_BIT
                                    181         .else ;DISCOVERY 
                                    182         .if DISCOVERY
                                    183         bres PD_ODR,#LD1_BIT 
                                    184         .endif
                                    185         .endif
                                    186         .endm
                                    187 
                                    188         .macro _ledoff
                                    189         .if NUCLEO 
                                    190         bres PC_ODR,#LED2_BIT
                                    191         .else ;DISCOVERY 
                                    192         .if DISCOVERY
                                    193         bset PD_ODR,#LD1_BIT 
                                    194         .endif 
                                    195         .endif
                                    196         .endm
                                    197 
                                    198 ;**********************************************************
                                    199         .area DATA (ABS)
      000000                        200         .org RAMBASE 
                                    201 ;**********************************************************
                                    202 
                                    203 ;**********************************************************
                                    204         .area SSEG (ABS) ; STACK
      001700                        205         .org 0x1700
      001700                        206         .ds 256 
                                    207 ; space for DATSTK,TIB and STACK         
                                    208 ;**********************************************************
                                    209 
                                    210 ;**********************************************************
                                    211         .area HOME ; vectors table
                                    212 ;**********************************************************
      000000 82 00 00 16            213 	int main	        ; reset
      000004 82 00 00 00            214 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            215 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            216 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            217 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            218 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            219 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            220 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            221 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            222 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            223 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            224 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            225 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            226 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            227 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            228 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            229 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            230 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            231 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            232 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            233 	int NonHandledInterrupt	; irq18
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      000054 82 00 00 00            234 	int NonHandledInterrupt	; irq19
      000058 82 00 00 00            235 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            236 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            237 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            238 	int Timer4Handler	; irq23
      000068 82 00 00 00            239 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            240 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            241 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            242 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            243 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            244 	int NonHandledInterrupt	; irq29
                                    245 
                                    246 ;**********************************************************
                                    247         .area CODE
                                    248 ;**********************************************************
                                    249 
                                    250 ; non handled interrupt reset MCU
      000000                        251 NonHandledInterrupt:
      000000 A6 80            [ 1]  252         ld a, #0x80
      000002 C7 50 D1         [ 1]  253         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    254 	;iret
                                    255 
                                    256 ; used for milliseconds counter 
                                    257 ; MS is 16 bits counter 
      000005                        258 Timer4Handler:
      000005 72 5F 53 42      [ 1]  259 	clr TIM4_SR 
      000009 BE 32            [ 2]  260         ldw x,MS 
      00000B 5C               [ 1]  261         incw x 
      00000C BF 32            [ 2]  262         ldw MS,x
      00000E BE 34            [ 2]  263         ldw x,CNTDWN 
      000010 27 03            [ 1]  264         jreq 1$
      000012 5A               [ 2]  265         decw x 
      000013 BF 34            [ 2]  266         ldw CNTDWN,x 
      000015                        267 1$:         
      000015 80               [11]  268         iret 
                                    269 
                                    270 
                                    271 ;; Main entry points and COLD start data
      000016                        272 main:
                                    273 ; clear all RAM
      000016 AE 00 00         [ 2]  274 	ldw X,#RAMBASE
      000019                        275 clear_ram0:
      000019 7F               [ 1]  276 	clr (X)
      00001A 5C               [ 1]  277 	incw X
      00001B A3 17 FF         [ 2]  278 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  279 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  280         ldw x,#RPP
      000023 94               [ 1]  281         ldw sp,x
                                    282 ; set SEEDX and SEEDY to 1 
      000024 3C 3B            [ 1]  283         inc SEEDX+1 
      000026 3C 3D            [ 1]  284         inc SEEDY+1          
      000028 CC 00 4B         [ 2]  285 	jp ORIG
                                    286 
                                    287 ; COLD initialize these variables.
      00002B                        288 UZERO:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      00002B 00 0A                  289         .word      BASEE   ;BASE
      00002D 00 0A                  290         .word      10      ; floating point base 
      00002F 00 00                  291         .word      0       ; floating point state 
      000031 00 00                  292         .word      0       ;tmp
      000033 00 00                  293         .word      0       ;>IN
      000035 00 00                  294         .word      0       ;#TIB
      000037 17 00                  295         .word      TIBB    ;TIB
      000039 13 F9                  296         .word      INTER   ;'EVAL
      00003B 00 00                  297         .word      0       ;HLD
      00003D 2A 58                  298         .word      LASTN  ;CNTXT pointer
      00003F 00 80                  299         .word      VAR_BASE   ;variables free space pointer 
      000041 2A 80                  300         .word      app_space ; FLASH free space pointer 
      000043 2A 58                  301         .word      LASTN   ;LAST
      000045 00 00                  302         .word      0        ; OFFSET 
      000047 00 00                  303         .word      0       ; TFLASH
                                    304 ;       .word      0       ; URLAST   
      000049 00 00                  305 UEND:   .word      0
                                    306 
      00004B                        307 ORIG:   
                                    308 ; initialize SP
      00004B AE 17 FF         [ 2]  309         LDW     X,#STACK  ;initialize return stack
      00004E 94               [ 1]  310         LDW     SP,X
      00004F BF 30            [ 2]  311         LDW     RP0,X
      000051 AE 16 80         [ 2]  312         LDW     X,#DATSTK ;initialize data stack
      000054 BF 2E            [ 2]  313         LDW     SP0,X
                           000001   314 .if NUCLEO        
                                    315 ; initialize PC_5 as output to control LED2
                                    316 ; added by Picatout 
      000056 72 1A 50 0D      [ 1]  317         bset PC_CR1,#LED2_BIT
      00005A 72 1A 50 0E      [ 1]  318         bset PC_CR2,#LED2_BIT
      00005E 72 1A 50 0C      [ 1]  319         bset PC_DDR,#LED2_BIT
                                    320 .endif 
                           000000   321 .if DISCOVERY
                                    322         bset PD_CR1,#LD1_BIT
                                    323         bset PD_CR2,#LD1_BIT
                                    324         bset PD_DDR,#LD1_BIT 
                                    325 .endif
      000062                        326         _ledoff
                           000001     1         .if NUCLEO 
      000062 72 1B 50 0A      [ 1]    2         bres PC_ODR,#LED2_BIT
                           000000     3         .else ;DISCOVERY 
                                      4         .if DISCOVERY
                                      5         bset PD_ODR,#LD1_BIT 
                                      6         .endif 
                                      7         .endif
                                    327 ; initialize clock to HSI
                                    328 ; no divisor 16Mhz 
                                    329 ; Added by Picatout 
      000066                        330 clock_init:
      000066 72 5F 50 C6      [ 1]  331         clr CLK_CKDIVR
      00006A 72 12 50 C5      [ 1]  332 	bset CLK_SWCR,#CLK_SWCR_SWEN
                           000001   333 .if NUCLEO|DOORBELL
      00006E A6 E1            [ 1]  334 	ld a,#CLK_SWR_HSI
                           000000   335 .else ; DISCOVERY as 16Mhz crystal
                                    336 	ld a,#CLK_SWR_HSE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                                    337 .endif 
      000070 C7 50 C4         [ 1]  338 	ld CLK_SWR,a
      000073 C1 50 C3         [ 1]  339 1$:	cp a,CLK_CMSR
      000076 26 FB            [ 1]  340 	jrne 1$
                                    341         
                                    342 ; initialize UART, 115200 8N1
      000078                        343 uart_init:
                           000001   344 .if NUCLEO 
      000078 72 14 50 C7      [ 1]  345 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    346 	; configure tx pin
      00007C 72 1A 50 02      [ 1]  347 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      000080 72 1A 50 03      [ 1]  348 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      000084 72 1A 50 04      [ 1]  349 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    350 	; baud rate 115200 Fmaster=16Mhz  16000000/115200=139=0x8b
                           000000   351 .else ; DISCOVERY use UART2 
                                    352 	bset CLK_PCKENR1,#CLK_PCKENR1_UART2
                                    353 	; configure tx pin
                                    354 	bset PD_DDR,#UART2_TX_PIN ; tx pin
                                    355 	bset PD_CR1,#UART2_TX_PIN ; push-pull output
                                    356 	bset PD_CR2,#UART2_TX_PIN ; fast output
                                    357 .endif
                                    358 ; baud rate 115200 Fmaster=8Mhz  
      000088 35 0B 52 33      [ 1]  359 	mov UART_BRR2,#0x0b ; must be loaded first
      00008C 35 08 52 32      [ 1]  360 	mov UART_BRR1,#0x8
      000090 35 0C 52 35      [ 1]  361 	mov UART_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    362 ; initialize timer4, used for millisecond interrupt  
      000094 35 07 53 45      [ 1]  363 	mov TIM4_PSCR,#7 ; prescale 128  
      000098 35 7D 53 46      [ 1]  364 	mov TIM4_ARR,#125 ; set for 1msec.
      00009C 35 05 53 40      [ 1]  365 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000A0 72 10 53 41      [ 1]  366 	bset TIM4_IER,#TIM4_IER_UIE 
                                    367 ; set TIM4 interrupt priority to highest
      0000A4 A6 3F            [ 1]  368         ld a,#~(IPR_MASK<<6)
      0000A6 C4 7F 75         [ 1]  369         and a,ITC_SPR6
      0000A9 AA C0            [ 1]  370         or a,#(IPR3<<6)
      0000AB C7 7F 75         [ 1]  371         ld ITC_SPR6,a 
      0000AE 9A               [ 1]  372         rim
      0000AF CC 1A FD         [ 2]  373         jp  COLD   ;default=MN1
                                    374 
                                    375 
                                    376 ;; place MCU in sleep mode with
                                    377 ;; halt opcode 
                                    378 ;; BYE ( -- )
      0000B2 00 00                  379         .word 0
                           0000B4   380         LINK=.
      0000B4 03                     381         .byte 3 
      0000B5 42 59 45               382         .ascii "BYE"
      0000B8                        383 BYE: 
      0000B8 8E               [10]  384         halt 
      0000B9 81               [ 4]  385         ret 
                                    386 
                                    387 ; Enable interrupts 
                                    388 ; EI ( -- )
      0000BA 00 B4                  389         .word LINK 
                           0000BC   390         LINK=.
      0000BC 02                     391         .byte 2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      0000BD 45 49                  392         .ascii "EI"
      0000BF                        393 EI:
      0000BF 9A               [ 1]  394         rim 
      0000C0 81               [ 4]  395         ret 
                                    396 
                                    397 ; Disable interrupts
                                    398 ; DI ( -- )
      0000C1 00 BC                  399         .word LINK 
                           0000C3   400         LINK=.
      0000C3 02                     401         .byte 2 
      0000C4 44 49                  402         .ascii "DI"
      0000C6                        403 DI:
      0000C6 9B               [ 1]  404         sim 
      0000C7 81               [ 4]  405         ret 
                                    406 
                                    407 ; set interrupt priority level 
                                    408 ; SET-ISP ( n1 n2 -- )
                                    409 ; n1 level {1..3}
                                    410 ; n2 vector {0..29}
      0000C8 00 C3                  411         .word LINK 
                           0000CA   412         LINK=.
      0000CA 07                     413         .byte 7 
      0000CB 53 45 54 2D 49 53 50   414         .ascii "SET-ISP"
      0000D2                        415 SETISP:
      0000D2 90 93            [ 1]  416         ldw y,x 
      0000D4 90 FE            [ 2]  417         ldw y,(y)
      0000D6 A6 04            [ 1]  418         ld a,#4 ; 4 slot per register 
                                    419 ;  quotient select register, remainder select slot in register.        
      0000D8 90 62            [ 2]  420         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000DA A4 03            [ 1]  421         and a,#3 
      0000DC 48               [ 1]  422         sll a ; 2*SLOT  lshift 
      0000DD 72 A9 7F 70      [ 2]  423         addw y,#ITC_SPR1 
      0000E1 FF               [ 2]  424         ldw (x),y  ; ( level reg -- )
      0000E2 90 5F            [ 1]  425         clrw y 
      0000E4 90 97            [ 1]  426         ld yl,a 
      0000E6 1D 00 02         [ 2]  427         subw x,#CELLL 
      0000E9 FF               [ 2]  428         ldw (x),y  ; ( level reg lshift -- )
      0000EA 90 93            [ 1]  429         ldw y,x 
      0000EC 90 EE 02         [ 2]  430         ldw y,(2,y) 
      0000EF 90 F6            [ 1]  431         ld a,(y)   ; reg_value
      0000F1 1D 00 02         [ 2]  432         subw x,#CELLL 
      0000F4 FF               [ 2]  433         ldw (x),y ; ( level reg lshift rval -- )
      0000F5 CD 05 C8         [ 4]  434         call OVER ; ( level reg lshift rval lshift -- )
      0000F8 CD 04 79         [ 4]  435         call DOLIT 
      0000FB 00 03                  436         .word 3
      0000FD CD 05 AE         [ 4]  437         call SWAPP  ; ( level reg lshift rval 3 lshift )
      000100 CD 0A B5         [ 4]  438         call LSHIFT ; creat slot mask 
      000103 CD 07 B3         [ 4]  439         call INVER  ; ( level reg lshift rval mask )
      000106 CD 05 EA         [ 4]  440         call ANDD ; ( level reg lshift slot_masked )
      000109 CD 05 67         [ 4]  441         call TOR  ; ( level reg lshift -- R: slot_masked )
      00010C CD 07 59         [ 4]  442         call ROT  ; ( reg lshift level )
      00010F CD 05 AE         [ 4]  443         call SWAPP ; ( reg level lshift )
      000112 CD 0A B5         [ 4]  444         call LSHIFT  ; ( reg slot_level -- )
      000115 CD 05 48         [ 4]  445         call RFROM ; ( reg slot_level masked_val )
      000118 CD 05 FE         [ 4]  446         call ORR   ; ( reg updated_rval )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      00011B CD 05 AE         [ 4]  447         call SWAPP 
      00011E CD 05 04         [ 4]  448         call CSTOR
                                    449 
                                    450 ; sélectionne l'application 
                                    451 ; qui démarre automatique lors 
                                    452 ; d'un COLD start 
      000121 00 CA                  453         .word LINK 
                           000123   454         LINK=.
      000123 07                     455         .byte 7
      000124 41 55 54 4F 52 55 4E   456         .ascii "AUTORUN"
      00012B                        457 AUTORUN:
      00012B CD 11 BE         [ 4]  458         call TOKEN 
      00012E CD 05 9E         [ 4]  459         call DUPP 
      000131 CD 04 AC         [ 4]  460         call QBRAN 
      000134 02 11                  461         .word FORGET2
      000136 CD 12 BB         [ 4]  462         call NAMEQ
      000139 CD 07 48         [ 4]  463         call QDUP 
      00013C CD 04 AC         [ 4]  464         call QBRAN 
      00013F 02 11                  465         .word FORGET2
      000141 CD 05 94         [ 4]  466         call DROP 
      000144 1D 00 04         [ 2]  467         subw x,#2*CELLL 
      000147 90 5F            [ 1]  468         clrw y 
      000149 FF               [ 2]  469         ldw (x),y 
      00014A 90 AE 40 02      [ 2]  470         ldw y,#APP_RUN 
      00014E EF 02            [ 2]  471         ldw (2,x),y 
      000150 CC 1D F9         [ 2]  472         jp EESTORE 
                                    473 
                                    474 ;; Reset dictionary pointer before 
                                    475 ;; forgotten word. RAM space and 
                                    476 ;; interrupt vector defined after 
                                    477 ;; must be resetted also.
      000153 01 23                  478         .word LINK 
                           000155   479         LINK=.
      000155 06                     480         .byte 6
      000156 46 4F 52 47 45 54      481         .ascii "FORGET" 
      00015C                        482 FORGET: 
      00015C CD 11 BE         [ 4]  483         call TOKEN
      00015F CD 05 9E         [ 4]  484         call DUPP 
      000162 CD 04 AC         [ 4]  485         call QBRAN 
      000165 02 11                  486         .word FORGET2
      000167 CD 12 BB         [ 4]  487         call NAMEQ ; ( a -- ca na | a F )
      00016A CD 07 48         [ 4]  488         call QDUP 
      00016D CD 04 AC         [ 4]  489         call QBRAN 
      000170 02 11                  490         .word FORGET2
                                    491 ; only forget users words 
      000172 CD 05 9E         [ 4]  492         call DUPP ; ( ca na na )
      000175 CD 04 79         [ 4]  493         call DOLIT 
      000178 2A 80                  494         .word app_space 
      00017A CD 05 AE         [ 4]  495         call SWAPP 
      00017D CD 08 59         [ 4]  496         call  ULESS 
      000180 CD 04 AC         [ 4]  497         call QBRAN 
      000183 01 D3                  498         .word FORGET6 
                                    499 ; ( ca na -- )        
                                    500 ;reset ivec with address >= ca
      000185 CD 05 AE         [ 4]  501         call SWAPP ; ( na ca -- ) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      000188 CD 1F FC         [ 4]  502         call CHKIVEC ; ( na -- ) 
                                    503 ; start at LAST and link back to na 
                                    504 ; if variable found reset VP at that point.
      00018B                        505 FORGET1:
      00018B CD 07 0A         [ 4]  506         call LAST 
      00018E CD 04 F7         [ 4]  507         call AT 
      000191 CD 05 9E         [ 4]  508         call DUPP  ; ( -- na last last )
      000194 CD 02 27         [ 4]  509         call FREEVAR ; ( -- na last )
      000197 CD 05 9E         [ 4]  510         call DUPP 
      00019A CD 04 79         [ 4]  511         call DOLIT 
      00019D 00 02                  512         .word 2 
      00019F CD 08 12         [ 4]  513         call SUBB ; ( na last -- na last lfa ) link address 
      0001A2 CD 04 F7         [ 4]  514         call AT 
      0001A5 CD 05 9E         [ 4]  515         call DUPP ; ( -- na last a a )
      0001A8 CD 06 DE         [ 4]  516         call CNTXT 
      0001AB CD 04 E0         [ 4]  517         call STORE
      0001AE CD 07 0A         [ 4]  518         call LAST  
      0001B1 CD 04 E0         [ 4]  519         call STORE ; ( --  na last )
      0001B4 CD 05 C8         [ 4]  520         call OVER 
      0001B7 CD 08 3A         [ 4]  521         call EQUAL ; ( na last na -- na T|F ) 
      0001BA CD 04 AC         [ 4]  522         call QBRAN 
      0001BD 01 8B                  523         .word FORGET1 
                                    524 ; ( na -- )
      0001BF CD 04 79         [ 4]  525         call DOLIT 
      0001C2 00 02                  526         .word 2 
      0001C4 CD 08 12         [ 4]  527         call SUBB 
      0001C7 CD 06 FA         [ 4]  528         call CPP 
      0001CA CD 04 E0         [ 4]  529         call STORE  
      0001CD CD 1C 2C         [ 4]  530         call UPDATCP 
      0001D0 CC 1C 03         [ 2]  531         jp UPDATLAST 
      0001D3                        532 FORGET6: ; tried to forget a RAM or system word 
                                    533 ; ( ca na -- )
      0001D3 1D 00 02         [ 2]  534         subw x,#CELLL 
      0001D6 90 BE 2E         [ 2]  535         ldw y,SP0 
      0001D9 FF               [ 2]  536         ldw (x),y  
      0001DA CD 08 59         [ 4]  537         call ULESS
      0001DD CD 04 AC         [ 4]  538         call QBRAN 
      0001E0 02 03                  539         .word PROTECTED 
      0001E2 CD 13 C7         [ 4]  540         call ABORQ 
      0001E5 1D                     541         .byte 29
      0001E6 20 46 6F 72 20 52 41   542         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      000203                        543 PROTECTED:
      000203 CD 13 C7         [ 4]  544         call ABORQ
      000206 0A                     545         .byte 10
      000207 20 50 72 6F 74 65 63   546         .ascii " Protected"
             74 65 64
      000211                        547 FORGET2: ; no name or not found in dictionary 
      000211 CD 13 C7         [ 4]  548         call ABORQ
      000214 05                     549         .byte 5
      000215 20 77 68 61 74         550         .ascii " what"
      00021A                        551 FORGET4:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      00021A CC 05 94         [ 2]  552         jp DROP 
                                    553 
                                    554 
                                    555 ;---------------------------------
                                    556 ; if na is variable 
                                    557 ; free variable data  
                                    558 ; FREEVAR ( na -- )
                                    559 ;---------------------------------
      00021D 01 55                  560         .word LINK 
                           00021F   561         LINK=.
      00021F 07                     562         .byte 7 
      000220 46 52 45 45 56 41 52   563         .ascii "FREEVAR"
      000227                        564 FREEVAR:
      000227 CD 05 9E         [ 4]  565         call DUPP ; ( na na -- )
      00022A CD 05 15         [ 4]  566         CALL CAT  ; ( na c -- )
      00022D CD 0A 97         [ 4]  567         call ONEP ;
      000230 CD 07 99         [ 4]  568         CALL PLUS ; ( na c+1 -- ca ) 
      000233 CD 0A 97         [ 4]  569         call ONEP ; ( ca+ -- ) to get routne address 
      000236 CD 05 9E         [ 4]  570         call DUPP ; ( ca+ ca+ -- )
      000239 CD 04 F7         [ 4]  571         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      00023C CD 04 79         [ 4]  572         call DOLIT 
      00023F 06 4B                  573         .word DOVAR ; if routine address is DOVAR then variable 
      000241 CD 08 3A         [ 4]  574         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      000244 CD 04 AC         [ 4]  575         call QBRAN 
      000247 02 5D                  576         .word FREEVAR4 
      000249 CD 04 79         [ 4]  577         call DOLIT 
      00024C 00 02                  578         .word 2 
      00024E CD 07 99         [ 4]  579         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      000251 CD 04 F7         [ 4]  580         call AT 
      000254 CD 06 EC         [ 4]  581         call VPP   
      000257 CD 04 E0         [ 4]  582         call STORE 
      00025A CC 1C 43         [ 2]  583         jp UPDATVP 
      00025D                        584 FREEVAR4: ; not variable
      00025D CC 05 94         [ 2]  585         jp  DROP 
                                    586 
                                    587 ;    SEED ( n -- )
                                    588 ; Initialize PRNG seed with n 
      000260 02 1F                  589         .word LINK 
                           000262   590         LINK=. 
      000262 04                     591         .byte 4 
      000263 53 45 45 44            592         .ascii "SEED" 
      000267                        593 SEED:
      000267 90 93            [ 1]  594         ldw y,x 
      000269 1C 00 02         [ 2]  595         addw x,#CELLL
      00026C 90 FE            [ 2]  596         ldw y,(y)
      00026E 90 9E            [ 1]  597         ld a,yh 
      000270 B7 3A            [ 1]  598         ld SEEDX,a 
      000272 90 9F            [ 1]  599         ld a,yl 
      000274 B7 3C            [ 1]  600         ld SEEDY,a 
      000276 81               [ 4]  601         ret 
                                    602 
                                    603 ;    RANDOM ( u1 -- u2 )
                                    604 ; Pseudo random number betwen 0 and u1-1
      000277 02 62                  605         .word LINK 
                           000279   606         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      000279 06                     607         .byte 6
      00027A 52 41 4E 44 4F 4D      608         .ascii "RANDOM" 
      000280                        609 RANDOM:
                                    610 ;local variable 
                           000001   611         SPSAVE=1
                           000002   612         VSIZE=2 
      000280 52 02            [ 2]  613         sub sp,#VSIZE
      000282 1F 01            [ 2]  614         ldw (SPSAVE,sp),x  
                                    615 ; XTEMP=(SEEDX<<5)^SEEDX 
      000284 90 93            [ 1]  616         ldw y,x 
      000286 90 FE            [ 2]  617         ldw y,(y)
      000288 90 BF 28         [ 2]  618         ldw YTEMP,y 
      00028B BE 3A            [ 2]  619 	ldw x,SEEDX 
      00028D 58               [ 2]  620 	sllw x 
      00028E 58               [ 2]  621 	sllw x 
      00028F 58               [ 2]  622 	sllw x 
      000290 58               [ 2]  623 	sllw x 
      000291 58               [ 2]  624 	sllw x 
      000292 9E               [ 1]  625 	ld a,xh 
      000293 B8 3A            [ 1]  626 	xor a,SEEDX 
      000295 B7 26            [ 1]  627 	ld XTEMP,a 
      000297 9F               [ 1]  628 	ld a,xl 
      000298 B8 3B            [ 1]  629 	xor a,SEEDX+1 
      00029A B7 27            [ 1]  630 	ld XTEMP+1,a 
                                    631 ; SEEDX=SEEDY 
      00029C BE 3C            [ 2]  632 	ldw x,SEEDY 
      00029E BF 3A            [ 2]  633 	ldw SEEDX,x  
                                    634 ; SEEDY=SEEDY^(SEEDY>>1)
      0002A0 54               [ 2]  635 	srlw x 
      0002A1 9E               [ 1]  636 	ld a,xh 
      0002A2 B8 3C            [ 1]  637 	xor a,SEEDY 
      0002A4 B7 3C            [ 1]  638 	ld SEEDY,a  
      0002A6 9F               [ 1]  639 	ld a,xl 
      0002A7 B8 3D            [ 1]  640 	xor a,SEEDY+1 
      0002A9 B7 3D            [ 1]  641 	ld SEEDY+1,a 
                                    642 ; XTEMP>>3 
      0002AB BE 26            [ 2]  643 	ldw x,XTEMP 
      0002AD 54               [ 2]  644 	srlw x 
      0002AE 54               [ 2]  645 	srlw x 
      0002AF 54               [ 2]  646 	srlw x 
                                    647 ; x=XTEMP^x 
      0002B0 9E               [ 1]  648 	ld a,xh 
      0002B1 B8 26            [ 1]  649 	xor a,XTEMP 
      0002B3 95               [ 1]  650 	ld xh,a 
      0002B4 9F               [ 1]  651 	ld a,xl 
      0002B5 B8 27            [ 1]  652 	xor a,XTEMP+1  
      0002B7 97               [ 1]  653 	ld xl,a 
                                    654 ; SEEDY=x^SEEDY 
      0002B8 B8 3D            [ 1]  655 	xor a,SEEDY+1
      0002BA 97               [ 1]  656 	ld xl,a 
      0002BB 9E               [ 1]  657 	ld a,xh 
      0002BC B8 3C            [ 1]  658 	xor a,SEEDY
      0002BE 95               [ 1]  659 	ld xh,a 
      0002BF BF 3C            [ 2]  660 	ldw SEEDY,x 
                                    661 ; return SEEDY modulo YTEMP  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      0002C1 90 BE 28         [ 2]  662 	ldw y,YTEMP  
      0002C4 65               [ 2]  663 	divw x,y 
      0002C5 1E 01            [ 2]  664 	ldw x,(SPSAVE,sp)
      0002C7 FF               [ 2]  665         ldw (x),y 
      0002C8 5B 02            [ 2]  666         addw sp,#VSIZE 
      0002CA 81               [ 4]  667 	ret 
                                    668 
                                    669 
                                    670 ;;
                                    671 ;; get millisecond counter 
                                    672 ;; msec ( -- u )
                                    673 ;; Added by Picatout 2020-04-26
      0002CB 02 79                  674         .word LINK  
                           0002CD   675         LINK = . 
      0002CD 04                     676         .byte 4
      0002CE 4D 53 45 43            677         .ascii "MSEC"
      0002D2                        678 MSEC: 
      0002D2 1D 00 02         [ 2]  679         subw x,#CELLL 
      0002D5 90 BE 32         [ 2]  680         ldw y,MS 
      0002D8 FF               [ 2]  681         ldw (x),y 
      0002D9 81               [ 4]  682         ret 
                                    683 
                                    684 ; suspend execution for u msec 
                                    685 ;  pause ( u -- )
      0002DA 02 CD                  686         .word LINK 
                           0002DC   687         LINK=.
      0002DC 05                     688         .byte 5 
      0002DD 50 41 55 53 45         689         .ascii "PAUSE"
      0002E2                        690 PAUSE:
      0002E2 90 93            [ 1]  691         ldw y,x
      0002E4 90 FE            [ 2]  692         ldw y,(y)
      0002E6 72 B9 00 32      [ 2]  693         addw y,MS 
      0002EA 8F               [10]  694 1$:     wfi  
      0002EB 90 B3 32         [ 2]  695         cpw y,MS  
      0002EE 26 FA            [ 1]  696         jrne 1$        
      0002F0 1C 00 02         [ 2]  697         addw x,#CELLL 
      0002F3 81               [ 4]  698         ret 
                                    699 
                                    700 ; initialize count down timer 
                                    701 ;  TIMER ( u -- )  milliseconds 
      0002F4 02 DC                  702         .word LINK 
                           0002F6   703         LINK=.
      0002F6 05                     704         .byte 5 
      0002F7 54 49 4D 45 52         705         .ascii "TIMER" 
      0002FC                        706 TIMER:
      0002FC 90 93            [ 1]  707         ldw y,x
      0002FE 90 FE            [ 2]  708         ldw y,(y) 
      000300 90 BF 34         [ 2]  709         ldw CNTDWN,y
      000303 1C 00 02         [ 2]  710         addw x,#CELLL 
      000306 81               [ 4]  711         ret 
                                    712 
                                    713 ; check for TIMER exiparition 
                                    714 ;  TIMEOUT? ( -- 0|-1 )
      000307 02 F6                  715         .word LINK 
                           000309   716         LINK=. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      000309 08                     717         .byte 8 
      00030A 54 49 4D 45 4F 55 54   718         .ascii "TIMEOUT?"
             3F
      000312                        719 TIMEOUTQ: 
      000312 4F               [ 1]  720         clr a
      000313 1D 00 02         [ 2]  721         subw x,#CELLL 
      000316 90 BE 34         [ 2]  722         ldw y,CNTDWN 
      000319 26 01            [ 1]  723         jrne 1$ 
      00031B 43               [ 1]  724         cpl a 
      00031C E7 01            [ 1]  725 1$:     ld (1,x),a 
      00031E F7               [ 1]  726         ld (x),a 
      00031F 81               [ 4]  727         ret         
                                    728 
                                    729 ; reboot MCU 
                                    730 ; REBOOT ( -- )
      000320 03 09                  731         .word LINK 
                           000322   732         LINK=. 
      000322 06                     733         .byte 6 
      000323 52 45 42 4F 4F 54      734         .ascii "REBOOT"
      000329                        735 reboot:
      000329 CC 00 00         [ 2]  736         jp NonHandledInterrupt
                                    737 
                                    738 ; compile to flash memory 
                                    739 ; TO-FLASH ( -- )
      00032C 03 22                  740         .word LINK 
                           00032E   741         LINK=.
      00032E 08                     742         .byte 8
      00032F 54 4F 2D 46 4C 41 53   743         .ascii "TO-FLASH"
             48
      000337                        744 TOFLASH:
      000337 CD 07 1D         [ 4]  745         call RAMLAST 
      00033A CD 04 F7         [ 4]  746         call AT 
      00033D CD 07 48         [ 4]  747         call QDUP 
      000340 CD 04 AC         [ 4]  748         call QBRAN
      000343 03 66                  749         .word 1$
      000345 CD 13 C7         [ 4]  750         call ABORQ 
      000348 1D                     751         .byte 29
      000349 20 4E 6F 74 20 77 68   752         .ascii " Not while definitions in RAM"   
             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      000366 90 AE FF FF      [ 2]  753 1$:     ldw y,#-1 
      00036A 90 BF 22         [ 2]  754         ldw UTFLASH,y
      00036D 81               [ 4]  755         ret 
                                    756 
                                    757 ; compile to RAM 
                                    758 ; TO-RAM ( -- )
      00036E 03 2E                  759         .word LINK 
                           000370   760         LINK=.
      000370 06                     761         .byte 6 
      000371 54 4F 2D 52 41 4D      762         .ascii "TO-RAM"
      000377                        763 TORAM:
      000377 90 5F            [ 1]  764         clrw y 
      000379 90 BF 22         [ 2]  765         ldw UTFLASH,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      00037C 81               [ 4]  766         ret 
                                    767 
                                    768 ;; BAUD RATE constants table
                                    769 ; values to put in BRR1 & BRR2 
      00037D                        770 baudrate: 
      00037D A0 1B                  771 	.byte 0xa0,0x1b ; 2400
      00037F D0 05                  772 	.byte 0xd0,0x5  ; 4800 
      000381 68 03                  773 	.byte 0x68,0x3  ; 9600
      000383 34 01                  774 	.byte 0x34,0x1  ; 19200
      000385 11 06                  775 	.byte 0x11,0x6  ; 57600
      000387 08 0B                  776 	.byte 0x8,0xb   ; 115200
                                    777 
                                    778 ; BAUD RATE CONSTANTS names 
                                    779 ; 2400 baud
      000389 03 70                  780 	.word LINK
                           00038B   781 LINK	= .
      00038B 04                     782 	.byte 4
      00038C 42 32 4B 34            783 	.ascii "B2K4" 
      000390                        784 B2K4:
      000390 1D 00 02         [ 2]  785 	subw x,#CELLL 
      000393 90 5F            [ 1]  786         clrw y
      000395 FF               [ 2]  787         ldw (x),y
      000396 81               [ 4]  788 	ret
                                    789 ; 4800 baud	
      000397 03 8B                  790 	.word LINK
                           000399   791 LINK	= .
      000399 04                     792 	.byte 4
      00039A 42 34 4B 38            793 	.ascii "B4K8" 
      00039E                        794 B4K8:
      00039E 1D 00 02         [ 2]  795         subw x,#CELLL 
      0003A1 90 AE 00 02      [ 2]  796         ldw y,#2 
      0003A5 FF               [ 2]  797         ldw (x),y
      0003A6 81               [ 4]  798         ret 
                                    799 ; 9600 baud
      0003A7 03 99                  800 	.word LINK
                           0003A9   801 LINK	= .
      0003A9 04                     802 	.byte 4
      0003AA 42 39 4B 36            803 	.ascii "B9K6" 
      0003AE                        804 B9K6:
      0003AE 1D 00 02         [ 2]  805         subw x,#CELLL 
      0003B1 90 AE 00 04      [ 2]  806         ldw y,#4 
      0003B5 FF               [ 2]  807         ldw (x),y 
      0003B6 81               [ 4]  808         ret 
                                    809 ; 19200 baud
      0003B7 03 A9                  810 	.word LINK
                           0003B9   811 LINK	= .
      0003B9 05                     812 	.byte 5
      0003BA 42 31 39 4B 32         813 	.ascii "B19K2" 
      0003BF                        814 B19K2:
      0003BF 1D 00 02         [ 2]  815         subw x,#CELLL
      0003C2 90 AE 00 06      [ 2]  816         ldw y,#6 
      0003C6 FF               [ 2]  817         ldw (x),y 
      0003C7 81               [ 4]  818         ret 
                                    819 ; 57600 baud        
      0003C8 03 B9                  820 	.word LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           0003CA   821 LINK	= .
      0003CA 05                     822 	.byte 5
      0003CB 42 35 37 4B 36         823 	.ascii "B57K6" 
      0003D0                        824 B57K6:
      0003D0 1D 00 02         [ 2]  825         subw x,#CELLL 
      0003D3 90 AE 00 08      [ 2]  826         ldw y,#8 
      0003D7 FF               [ 2]  827         ldw (x),y 
      0003D8 81               [ 4]  828         ret 
                                    829 ; 115200 baud 
      0003D9 03 CA                  830 	.word LINK
                           0003DB   831 LINK	= .
      0003DB 06                     832 	.byte 6
      0003DC 42 31 31 35 4B 32      833 	.ascii "B115K2" 
      0003E2                        834 B115K2:
      0003E2 1D 00 02         [ 2]  835 	subw x,#CELLL 
      0003E5 90 AE 00 0A      [ 2]  836         ldw y,#10 
      0003E9 FF               [ 2]  837         ldw (x),y 
      0003EA 81               [ 4]  838         ret 
                                    839 	
                                    840 ;; set UART2 BAUD rate
                                    841 ;	BAUD ( u -- )
      0003EB 03 DB                  842 	.word LINK 
                           0003ED   843 LINK	= .
      0003ED 04                     844 	.byte 4
      0003EE 42 41 55 44            845 	.ascii "BAUD" 
      0003F2                        846 BAUD:
      0003F2 1D 00 02         [ 2]  847 	subw x,#CELLL
      0003F5 90 AE 03 7D      [ 2]  848         ldw y,#baudrate 
      0003F9 FF               [ 2]  849         ldw (x),y 
      0003FA CD 07 99         [ 4]  850         call PLUS
      0003FD 90 93            [ 1]  851         ldw y,x  
      0003FF 90 FE            [ 2]  852         ldw y,(y)
      000401 90 F6            [ 1]  853         ld a,(y)
      000403 88               [ 1]  854         push a 
      000404 90 5C            [ 1]  855         incw y 
      000406 90 F6            [ 1]  856         ld a,(y)
      000408 C7 52 33         [ 1]  857         ld UART_BRR2,a 
      00040B 84               [ 1]  858         pop a
      00040C C7 52 32         [ 1]  859         ld UART_BRR1,a 
      00040F 1C 00 02         [ 2]  860         addw x,#CELLL 
      000412 81               [ 4]  861         ret 
                                    862 
                                    863 ;; Device dependent I/O
                                    864 ;       ?RX     ( -- c T | F )
                                    865 ;         Return input byte and true, or false.
      000413 03 ED                  866         .word      LINK 
                           000415   867 LINK	= .
      000415 04                     868         .byte      4
      000416 3F 4B 45 59            869         .ascii     "?KEY"
      00041A                        870 QKEY:
      00041A 90 5F            [ 1]  871         CLRW Y 
      00041C 72 0B 52 30 0B   [ 2]  872         BTJF UART_SR,#UART_SR_RXNE,INCH   ;check status
      000421 C6 52 31         [ 1]  873         LD    A,UART_DR   ;get char in A
      000424 1D 00 02         [ 2]  874 	SUBW	X,#2
      000427 E7 01            [ 1]  875         LD     (1,X),A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      000429 7F               [ 1]  876 	CLR	(X)
      00042A 90 53            [ 2]  877         CPLW     Y
      00042C                        878 INCH:
      00042C 1D 00 02         [ 2]  879 		SUBW	X,#2
      00042F FF               [ 2]  880         LDW     (X),Y
      000430 81               [ 4]  881         RET
                                    882 
                                    883 ;       TX!     ( c -- )
                                    884 ;       Send character c to  output device.
      000431 04 15                  885         .word      LINK
                           000433   886 LINK	= .
      000433 04                     887         .byte      4
      000434 45 4D 49 54            888         .ascii     "EMIT"
      000438                        889 EMIT:
      000438 E6 01            [ 1]  890         LD     A,(1,X)
      00043A 1C 00 02         [ 2]  891 	ADDW	X,#2
      00043D 72 0F 52 30 FB   [ 2]  892 OUTPUT: BTJF UART_SR,#UART_SR_TXE,OUTPUT  ;loop until tx empty 
      000442 C7 52 31         [ 1]  893         LD    UART_DR,A   ;send A
      000445 81               [ 4]  894         RET
                                    895 
                                    896 ;       FC-XON  ( -- )
                                    897 ;       send XON character 
      000446 04 33                  898         .word LINK
                           000448   899 LINK    = .
      000448 06                     900         .byte 6 
      000449 46 43 2D 58 4F 4E      901         .ascii "FC-XON"
      00044F                        902 FC_XON:
      00044F 1D 00 02         [ 2]  903         subw x,#CELLL 
      000452 7F               [ 1]  904         clr (x)
      000453 A6 11            [ 1]  905         ld a,#XON 
      000455 E7 01            [ 1]  906         ld (1,x),a 
      000457 CD 04 38         [ 4]  907         call EMIT 
      00045A 81               [ 4]  908         ret 
                                    909 
                                    910 ;       FC-XOFF ( -- )
                                    911 ;       Send XOFF character 
      00045B 04 48                  912         .word LINK
                           00045D   913 LINK    = .
      00045D 07                     914         .byte 7
      00045E 46 43 2D 58 4F 46 46   915         .ascii "FC-XOFF"
      000465                        916 FC_XOFF:
      000465 1D 00 02         [ 2]  917         subw x,#CELLL 
      000468 7F               [ 1]  918         clr (x)
      000469 A6 13            [ 1]  919         ld a,#XOFF 
      00046B E7 01            [ 1]  920         ld (1,x),a 
      00046D CD 04 38         [ 4]  921         call EMIT 
      000470 81               [ 4]  922         ret
                                    923 
                                    924 ;; The kernel
                                    925 
                                    926 ;       doLIT   ( -- w )
                                    927 ;       Push an inline literal.
      000471 04 5D                  928         .word      LINK
                           000473   929 LINK	= 	.
      000473 45                     930 	.byte      COMPO+5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      000474 44 4F 4C 49 54         931         .ascii     "DOLIT"
      000479                        932 DOLIT:
      000479 1D 00 02         [ 2]  933 	SUBW X,#2
      00047C 16 01            [ 2]  934         ldw y,(1,sp)
      00047E 90 FE            [ 2]  935         ldw y,(y)
      000480 FF               [ 2]  936         ldw (x),y
      000481 90 85            [ 2]  937         popw y 
      000483 90 EC 02         [ 2]  938         jp (2,y)
                                    939 
                                    940 ;       next    ( -- )
                                    941 ;       Code for  single index loop.
      000486 04 73                  942         .word      LINK
                           000488   943 LINK	= 	.
      000488 44                     944 	.byte      COMPO+4
      000489 6E 65 78 74            945         .ascii     "next"
      00048D                        946 DONXT:
      00048D 16 03            [ 2]  947 	LDW Y,(3,SP)
      00048F 90 5A            [ 2]  948 	DECW Y
      000491 2A 07            [ 1]  949 	JRPL NEX1 ; jump if N=0
      000493 90 85            [ 2]  950 	POPW Y
      000495 5B 02            [ 2]  951         addw sp,#2
      000497 90 EC 02         [ 2]  952         JP (2,Y)
      00049A                        953 NEX1:
      00049A 17 03            [ 2]  954         LDW (3,SP),Y
      00049C 90 85            [ 2]  955         POPW Y
      00049E 90 FE            [ 2]  956 	LDW Y,(Y)
      0004A0 90 FC            [ 2]  957 	JP (Y)
                                    958 
                                    959 ;       ?branch ( f -- )
                                    960 ;       Branch if flag is zero.
      0004A2 04 88                  961         .word      LINK
                           0004A4   962 LINK	= 	.
      0004A4 47                     963 	.byte      COMPO+7
      0004A5 3F 42 52 41 4E 43 48   964         .ascii     "?BRANCH"
      0004AC                        965 QBRAN:	
      0004AC 90 93            [ 1]  966         LDW Y,X
      0004AE 1C 00 02         [ 2]  967 	ADDW X,#2
      0004B1 90 FE            [ 2]  968 	LDW Y,(Y)
      0004B3 27 0E            [ 1]  969         JREQ     BRAN
      0004B5 90 85            [ 2]  970 	POPW Y
      0004B7 90 EC 02         [ 2]  971 	JP (2,Y)
                                    972         
                                    973 ;       branch  ( -- )
                                    974 ;       Branch to an inline address.
      0004BA 04 A4                  975         .word      LINK
                           0004BC   976 LINK	= 	.
      0004BC 46                     977 	.byte      COMPO+6
      0004BD 42 52 41 4E 43 48      978         .ascii     "BRANCH"
      0004C3                        979 BRAN:
      0004C3 90 85            [ 2]  980         POPW Y
      0004C5 90 FE            [ 2]  981 	LDW Y,(Y)
      0004C7 90 FC            [ 2]  982         JP     (Y)
                                    983 
                                    984 ;       EXECUTE ( ca -- )
                                    985 ;       Execute  word at ca.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      0004C9 04 BC                  986         .word      LINK
                           0004CB   987 LINK	= 	.
      0004CB 07                     988         .byte       7
      0004CC 45 58 45 43 55 54 45   989         .ascii     "EXECUTE"
      0004D3                        990 EXECU:
      0004D3 90 93            [ 1]  991         LDW Y,X
      0004D5 1C 00 02         [ 2]  992 	ADDW X,#2
      0004D8 90 FE            [ 2]  993 	LDW  Y,(Y)
      0004DA 90 FC            [ 2]  994         JP   (Y)
                                    995 
                           000001   996 OPTIMIZE = 1
                           000001   997 .if OPTIMIZE 
                                    998 ; remplacement de CALL EXIT par 
                                    999 ; le opcode de RET.
                                   1000 ; Voir modification au code de ";"
                           000000  1001 .else 
                                   1002 ;       EXIT    ( -- )
                                   1003 ;       Terminate a colon definition.
                                   1004         .word      LINK
                                   1005 LINK = .
                                   1006         .byte      4
                                   1007         .ascii     "EXIT"
                                   1008 EXIT:
                                   1009         POPW Y
                                   1010         RET
                                   1011 .endif 
                                   1012 
                                   1013 ;       !       ( w a -- )
                                   1014 ;       Pop  data stack to memory.
      0004DC 04 CB                 1015         .word      LINK
                           0004DE  1016 LINK = .
      0004DE 01                    1017         .byte      1
      0004DF 21                    1018         .ascii     "!"
      0004E0                       1019 STORE:
      0004E0 90 93            [ 1] 1020         LDW Y,X
      0004E2 90 FE            [ 2] 1021         LDW Y,(Y)    ;Y=a
      0004E4 90 BF 28         [ 2] 1022         LDW YTEMP,Y
      0004E7 90 93            [ 1] 1023         LDW Y,X
      0004E9 90 EE 02         [ 2] 1024         LDW Y,(2,Y)
      0004EC 91 CF 28         [ 5] 1025         LDW [YTEMP],Y ;store w at a
      0004EF 1C 00 04         [ 2] 1026         ADDW X,#4 ; DDROP 
      0004F2 81               [ 4] 1027         RET     
                                   1028 
                                   1029 ;       @       ( a -- w )
                                   1030 ;       Push memory location to stack.
      0004F3 04 DE                 1031         .word      LINK
                           0004F5  1032 LINK	= 	.
      0004F5 01                    1033         .byte    1
      0004F6 40                    1034         .ascii	"@"
      0004F7                       1035 AT:
      0004F7 90 93            [ 1] 1036         LDW Y,X     ;Y = a
      0004F9 90 FE            [ 2] 1037         LDW Y,(Y)   ; address 
      0004FB 90 FE            [ 2] 1038         LDW Y,(Y)   ; value 
      0004FD FF               [ 2] 1039         LDW (X),Y ;w = @Y
      0004FE 81               [ 4] 1040         RET     
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                   1041 
                                   1042 ;       C!      ( c b -- )
                                   1043 ;       Pop  data stack to byte memory.
      0004FF 04 F5                 1044         .word      LINK
                           000501  1045 LINK	= .
      000501 02                    1046         .byte      2
      000502 43 21                 1047         .ascii     "C!"
      000504                       1048 CSTOR:
      000504 90 93            [ 1] 1049         LDW Y,X
      000506 90 FE            [ 2] 1050 	LDW Y,(Y)    ;Y=b
      000508 E6 03            [ 1] 1051         LD A,(3,X)    ;D = c
      00050A 90 F7            [ 1] 1052         LD  (Y),A     ;store c at b
      00050C 1C 00 04         [ 2] 1053 	ADDW X,#4 ; DDROP 
      00050F 81               [ 4] 1054         RET     
                                   1055 
                                   1056 ;       C@      ( b -- c )
                                   1057 ;       Push byte in memory to  stack.
      000510 05 01                 1058         .word      LINK
                           000512  1059 LINK	= 	.
      000512 02                    1060         .byte      2
      000513 43 40                 1061         .ascii     "C@"
      000515                       1062 CAT:
      000515 90 93            [ 1] 1063         LDW Y,X     ;Y=b
      000517 90 FE            [ 2] 1064         LDW Y,(Y)
      000519 90 F6            [ 1] 1065         LD A,(Y)
      00051B E7 01            [ 1] 1066         LD (1,X),A
      00051D 7F               [ 1] 1067         CLR (X)
      00051E 81               [ 4] 1068         RET     
                                   1069 
                                   1070 ;       RP@     ( -- a )
                                   1071 ;       Push current RP to data stack.
      00051F 05 12                 1072         .word      LINK
                           000521  1073 LINK	= .
      000521 03                    1074         .byte      3
      000522 52 50 40              1075         .ascii     "RP@"
      000525                       1076 RPAT:
      000525 90 96            [ 1] 1077         LDW Y,SP    ;save return addr
      000527 1D 00 02         [ 2] 1078         SUBW X,#2
      00052A FF               [ 2] 1079         LDW (X),Y
      00052B 81               [ 4] 1080         RET     
                                   1081 
                                   1082 ;       RP!     ( a -- )
                                   1083 ;       Set  return stack pointer.
      00052C 05 21                 1084         .word      LINK
                           00052E  1085 LINK	= 	. 
      00052E 43                    1086 	.byte      COMPO+3
      00052F 52 50 21              1087         .ascii     "RP!"
      000532                       1088 RPSTO:
      000532 90 85            [ 2] 1089         POPW Y
      000534 90 BF 28         [ 2] 1090         LDW YTEMP,Y
      000537 90 93            [ 1] 1091         LDW Y,X
      000539 90 FE            [ 2] 1092         LDW Y,(Y)
      00053B 90 94            [ 1] 1093         LDW SP,Y
      00053D 1C 00 02         [ 2] 1094         ADDW x,#CELLL ; a was not dropped, Picatout 2020-05-24
      000540 92 CC 28         [ 5] 1095         JP [YTEMP]
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                   1096 
                                   1097 ;       R>      ( -- w )
                                   1098 ;       Pop return stack to data stack.
      000543 05 2E                 1099         .word      LINK
                           000545  1100 LINK	= 	. 
      000545 42                    1101 	.byte      COMPO+2
      000546 52 3E                 1102         .ascii     "R>"
      000548                       1103 RFROM:
      000548 90 85            [ 2] 1104         POPW Y    ;save return addr
      00054A 90 BF 28         [ 2] 1105         LDW YTEMP,Y
      00054D 90 85            [ 2] 1106         POPW Y
      00054F 1D 00 02         [ 2] 1107         SUBW X,#2
      000552 FF               [ 2] 1108         LDW (X),Y
      000553 92 CC 28         [ 5] 1109         JP [YTEMP]
                                   1110 
                                   1111 ;       R@      ( -- w )
                                   1112 ;       Copy top of return stack to stack.
      000556 05 45                 1113         .word      LINK
                           000558  1114 LINK	= 	. 
      000558 02                    1115         .byte      2
      000559 52 40                 1116         .ascii     "R@"
      00055B                       1117 RAT:
      00055B 16 03            [ 2] 1118         ldw y,(3,sp)
      00055D 1D 00 02         [ 2] 1119         subw x,#CELLL 
      000560 FF               [ 2] 1120         ldw (x),y 
      000561 81               [ 4] 1121         ret 
                                   1122 
                                   1123 ;       >R      ( w -- )
                                   1124 ;       Push data stack to return stack.
      000562 05 58                 1125         .word      LINK
                           000564  1126 LINK	= 	. 
      000564 42                    1127 	.byte      COMPO+2
      000565 3E 52                 1128         .ascii     ">R"
      000567                       1129 TOR:
      000567 90 85            [ 2] 1130         POPW Y    ;save return addr
      000569 90 BF 28         [ 2] 1131         LDW YTEMP,Y
      00056C 90 93            [ 1] 1132         LDW Y,X
      00056E 90 FE            [ 2] 1133         LDW Y,(Y)
      000570 90 89            [ 2] 1134         PUSHW Y    ;restore return addr
      000572 1C 00 02         [ 2] 1135         ADDW X,#2
      000575 92 CC 28         [ 5] 1136         JP [YTEMP]
                                   1137 
                                   1138 ;       SP@     ( -- a )
                                   1139 ;       Push current stack pointer.
      000578 05 64                 1140         .word      LINK
                           00057A  1141 LINK	= 	. 
      00057A 03                    1142         .byte      3
      00057B 53 50 40              1143         .ascii     "SP@"
      00057E                       1144 SPAT:
      00057E 90 93            [ 1] 1145 	LDW Y,X
      000580 1D 00 02         [ 2] 1146         SUBW X,#2
      000583 FF               [ 2] 1147 	LDW (X),Y
      000584 81               [ 4] 1148         RET     
                                   1149 
                                   1150 ;       SP!     ( a -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                                   1151 ;       Set  data stack pointer.
      000585 05 7A                 1152         .word      LINK
                           000587  1153 LINK	= 	. 
      000587 03                    1154         .byte      3
      000588 53 50 21              1155         .ascii     "SP!"
      00058B                       1156 SPSTO:
      00058B FE               [ 2] 1157         LDW     X,(X)     ;X = a
      00058C 81               [ 4] 1158         RET     
                                   1159 
                                   1160 ;       DROP    ( w -- )
                                   1161 ;       Discard top stack item.
      00058D 05 87                 1162         .word      LINK
                           00058F  1163 LINK	= 	. 
      00058F 04                    1164         .byte      4
      000590 44 52 4F 50           1165         .ascii     "DROP"
      000594                       1166 DROP:
      000594 1C 00 02         [ 2] 1167         ADDW X,#2     
      000597 81               [ 4] 1168         RET     
                                   1169 
                                   1170 ;       DUP     ( w -- w w )
                                   1171 ;       Duplicate  top stack item.
      000598 05 8F                 1172         .word      LINK
                           00059A  1173 LINK	= 	. 
      00059A 03                    1174         .byte      3
      00059B 44 55 50              1175         .ascii     "DUP"
      00059E                       1176 DUPP:
      00059E 90 93            [ 1] 1177 	LDW Y,X
      0005A0 1D 00 02         [ 2] 1178         SUBW X,#2
      0005A3 90 FE            [ 2] 1179 	LDW Y,(Y)
      0005A5 FF               [ 2] 1180 	LDW (X),Y
      0005A6 81               [ 4] 1181         RET     
                                   1182 
                                   1183 ;       SWAP    ( w1 w2 -- w2 w1 )
                                   1184 ;       Exchange top two stack items.
      0005A7 05 9A                 1185         .word      LINK
                           0005A9  1186 LINK	= 	. 
      0005A9 04                    1187         .byte      4
      0005AA 53 57 41 50           1188         .ascii     "SWAP"
      0005AE                       1189 SWAPP:
      0005AE 90 93            [ 1] 1190         LDW Y,X
      0005B0 90 FE            [ 2] 1191         LDW Y,(Y)
      0005B2 90 BF 28         [ 2] 1192         LDW YTEMP,Y
      0005B5 90 93            [ 1] 1193         LDW Y,X
      0005B7 90 EE 02         [ 2] 1194         LDW Y,(2,Y)
      0005BA FF               [ 2] 1195         LDW (X),Y
      0005BB 90 BE 28         [ 2] 1196         LDW Y,YTEMP
      0005BE EF 02            [ 2] 1197         LDW (2,X),Y
      0005C0 81               [ 4] 1198         RET     
                                   1199 
                                   1200 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                   1201 ;       Copy second stack item to top.
      0005C1 05 A9                 1202         .word      LINK
                           0005C3  1203 LINK	= . 
      0005C3 04                    1204         .byte      4
      0005C4 4F 56 45 52           1205         .ascii     "OVER"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      0005C8                       1206 OVER:
      0005C8 1D 00 02         [ 2] 1207         SUBW X,#2
      0005CB 90 93            [ 1] 1208         LDW Y,X
      0005CD 90 EE 04         [ 2] 1209         LDW Y,(4,Y)
      0005D0 FF               [ 2] 1210         LDW (X),Y
      0005D1 81               [ 4] 1211         RET     
                                   1212 
                                   1213 ;       0<      ( n -- t )
                                   1214 ;       Return true if n is negative.
      0005D2 05 C3                 1215         .word      LINK
                           0005D4  1216 LINK	= . 
      0005D4 02                    1217         .byte      2
      0005D5 30 3C                 1218         .ascii     "0<"
      0005D7                       1219 ZLESS:
      0005D7 A6 FF            [ 1] 1220         LD A,#0xFF
      0005D9 90 93            [ 1] 1221         LDW Y,X
      0005DB 90 FE            [ 2] 1222         LDW Y,(Y)
      0005DD 2B 01            [ 1] 1223         JRMI     ZL1
      0005DF 4F               [ 1] 1224         CLR A   ;false
      0005E0 F7               [ 1] 1225 ZL1:    LD     (X),A
      0005E1 E7 01            [ 1] 1226         LD (1,X),A
      0005E3 81               [ 4] 1227 	RET     
                                   1228 
                                   1229 ;       AND     ( w w -- w )
                                   1230 ;       Bitwise AND.
      0005E4 05 D4                 1231         .word      LINK
                           0005E6  1232 LINK	= . 
      0005E6 03                    1233         .byte      3
      0005E7 41 4E 44              1234         .ascii     "AND"
      0005EA                       1235 ANDD:
      0005EA F6               [ 1] 1236         LD  A,(X)    ;D=w
      0005EB E4 02            [ 1] 1237         AND A,(2,X)
      0005ED E7 02            [ 1] 1238         LD (2,X),A
      0005EF E6 01            [ 1] 1239         LD A,(1,X)
      0005F1 E4 03            [ 1] 1240         AND A,(3,X)
      0005F3 E7 03            [ 1] 1241         LD (3,X),A
      0005F5 1C 00 02         [ 2] 1242         ADDW X,#2
      0005F8 81               [ 4] 1243         RET
                                   1244 
                                   1245 ;       OR      ( w w -- w )
                                   1246 ;       Bitwise inclusive OR.
      0005F9 05 E6                 1247         .word      LINK
                           0005FB  1248 LINK = . 
      0005FB 02                    1249         .byte      2
      0005FC 4F 52                 1250         .ascii     "OR"
      0005FE                       1251 ORR:
      0005FE F6               [ 1] 1252         LD A,(X)    ;D=w
      0005FF EA 02            [ 1] 1253         OR A,(2,X)
      000601 E7 02            [ 1] 1254         LD (2,X),A
      000603 E6 01            [ 1] 1255         LD A,(1,X)
      000605 EA 03            [ 1] 1256         OR A,(3,X)
      000607 E7 03            [ 1] 1257         LD (3,X),A
      000609 1C 00 02         [ 2] 1258         ADDW X,#2
      00060C 81               [ 4] 1259         RET
                                   1260 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                                   1261 ;       XOR     ( w w -- w )
                                   1262 ;       Bitwise exclusive OR.
      00060D 05 FB                 1263         .word      LINK
                           00060F  1264 LINK	= . 
      00060F 03                    1265         .byte      3
      000610 58 4F 52              1266         .ascii     "XOR"
      000613                       1267 XORR:
      000613 F6               [ 1] 1268         LD A,(X)    ;D=w
      000614 E8 02            [ 1] 1269         XOR A,(2,X)
      000616 E7 02            [ 1] 1270         LD (2,X),A
      000618 E6 01            [ 1] 1271         LD A,(1,X)
      00061A E8 03            [ 1] 1272         XOR A,(3,X)
      00061C E7 03            [ 1] 1273         LD (3,X),A
      00061E 1C 00 02         [ 2] 1274         ADDW X,#2
      000621 81               [ 4] 1275         RET
                                   1276 
                                   1277 ;       UM+     ( u u -- udsum )
                                   1278 ;       Add two unsigned single
                                   1279 ;       and return a double sum.
      000622 06 0F                 1280         .word      LINK
                           000624  1281 LINK	= . 
      000624 03                    1282         .byte      3
      000625 55 4D 2B              1283         .ascii     "UM+"
      000628                       1284 UPLUS:
      000628 A6 01            [ 1] 1285         LD A,#1
      00062A 90 93            [ 1] 1286         LDW Y,X
      00062C 90 EE 02         [ 2] 1287         LDW Y,(2,Y)
      00062F 90 BF 28         [ 2] 1288         LDW YTEMP,Y
      000632 90 93            [ 1] 1289         LDW Y,X
      000634 90 FE            [ 2] 1290         LDW Y,(Y)
      000636 72 B9 00 28      [ 2] 1291         ADDW Y,YTEMP
      00063A EF 02            [ 2] 1292         LDW (2,X),Y
      00063C 25 01            [ 1] 1293         JRC     UPL1
      00063E 4F               [ 1] 1294         CLR A
      00063F E7 01            [ 1] 1295 UPL1:   LD     (1,X),A
      000641 7F               [ 1] 1296         CLR (X)
      000642 81               [ 4] 1297         RET
                                   1298 
                                   1299 ;; System and user variables
                                   1300 
                                   1301 ;       doVAR   ( -- a )
                                   1302 ;       Code for VARIABLE and CREATE.
      000643 06 24                 1303         .word      LINK
                           000645  1304 LINK	= . 
      000645 45                    1305 	.byte      COMPO+5
      000646 44 4F 56 41 52        1306         .ascii     "DOVAR"
      00064B                       1307 DOVAR:
      00064B 1D 00 02         [ 2] 1308 	SUBW X,#2
      00064E 90 85            [ 2] 1309         POPW Y    ;get return addr (pfa)
      000650 90 FE            [ 2] 1310         LDW Y,(Y) ; indirect address 
      000652 FF               [ 2] 1311         LDW (X),Y    ;push on stack
      000653 81               [ 4] 1312         RET     ;go to RET of EXEC
                                   1313 
                                   1314 ;       BASE    ( -- a )
                                   1315 ;       Radix base for numeric I/O.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      000654 06 45                 1316         .word      LINK        
                           000656  1317 LINK = . 
      000656 04                    1318         .byte      4
      000657 42 41 53 45           1319         .ascii     "BASE"
      00065B                       1320 BASE:
      00065B 90 AE 00 06      [ 2] 1321 	LDW Y,#UBASE 
      00065F 1D 00 02         [ 2] 1322 	SUBW X,#2
      000662 FF               [ 2] 1323         LDW (X),Y
      000663 81               [ 4] 1324         RET
                                   1325 
                                   1326 ;       tmp     ( -- a )
                                   1327 ;       A temporary storage.
      000664 06 56                 1328         .word      LINK
                                   1329         
                           000666  1330 LINK = . 
      000666 03                    1331 	.byte      3
      000667 54 4D 50              1332         .ascii     "TMP"
      00066A                       1333 TEMP:
      00066A 90 AE 00 0C      [ 2] 1334 	LDW Y,#UTMP
      00066E 1D 00 02         [ 2] 1335 	SUBW X,#2
      000671 FF               [ 2] 1336         LDW (X),Y
      000672 81               [ 4] 1337         RET
                                   1338 
                                   1339 ;       >IN     ( -- a )
                                   1340 ;        Hold parsing pointer.
      000673 06 66                 1341         .word      LINK
                           000675  1342 LINK = . 
      000675 03                    1343         .byte      3
      000676 3E 49 4E              1344         .ascii    ">IN"
      000679                       1345 INN:
      000679 90 AE 00 0E      [ 2] 1346 	LDW Y,#UINN 
      00067D 1D 00 02         [ 2] 1347 	SUBW X,#2
      000680 FF               [ 2] 1348         LDW (X),Y
      000681 81               [ 4] 1349         RET
                                   1350 
                                   1351 ;       #TIB    ( -- a )
                                   1352 ;       Count in terminal input buffer.
      000682 06 75                 1353         .word      LINK
                           000684  1354 LINK = . 
      000684 04                    1355         .byte      4
      000685 23 54 49 42           1356         .ascii     "#TIB"
      000689                       1357 NTIB:
      000689 90 AE 00 10      [ 2] 1358 	LDW Y,#UCTIB 
      00068D 1D 00 02         [ 2] 1359 	SUBW X,#2
      000690 FF               [ 2] 1360         LDW (X),Y
      000691 81               [ 4] 1361         RET
                                   1362 
                                   1363 ;       TBUF ( -- a )
                                   1364 ;       address of 128 bytes transaction buffer 
      000692 06 84                 1365         .word LINK 
                           000694  1366         LINK=.
      000694 04                    1367         .byte 4 
      000695 54 42 55 46           1368         .ascii "TBUF"
      000699                       1369 TBUF:
      000699 90 AE 16 80      [ 2] 1370         ldw y,#ROWBUFF
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      00069D 1D 00 02         [ 2] 1371         subw x,#CELLL
      0006A0 FF               [ 2] 1372         ldw (x),y 
      0006A1 81               [ 4] 1373         ret 
                                   1374 
                                   1375 ; systeme variable 
                                   1376 ; compilation destination 
                                   1377 ; TFLASH ( -- A )
      0006A2 06 94                 1378         .word LINK 
                           0006A4  1379         LINK=.
      0006A4 06                    1380         .byte 6 
      0006A5 54 46 4C 41 53 48     1381         .ascii "TFLASH"         
      0006AB                       1382 TFLASH:
      0006AB 1D 00 02         [ 2] 1383         subw x,#CELLL 
      0006AE 90 AE 00 22      [ 2] 1384         ldw y,#UTFLASH
      0006B2 FF               [ 2] 1385         ldw (x),y 
      0006B3 81               [ 4] 1386         ret 
                                   1387 
                                   1388 ;       "EVAL   ( -- a )
                                   1389 ;       Execution vector of EVAL.
      0006B4 06 A4                 1390         .word      LINK
                           0006B6  1391 LINK = . 
      0006B6 05                    1392         .byte      5
      0006B7 27 45 56 41 4C        1393         .ascii     "'EVAL"
      0006BC                       1394 TEVAL:
      0006BC 90 AE 00 14      [ 2] 1395 	LDW Y,#UINTER 
      0006C0 1D 00 02         [ 2] 1396 	SUBW X,#2
      0006C3 FF               [ 2] 1397         LDW (X),Y
      0006C4 81               [ 4] 1398         RET
                                   1399 
                                   1400 ;       HLD     ( -- a )
                                   1401 ;       Hold a pointer of output string.
      0006C5 06 B6                 1402         .word      LINK
                           0006C7  1403 LINK = . 
      0006C7 03                    1404         .byte      3
      0006C8 48 4C 44              1405         .ascii     "HLD"
      0006CB                       1406 HLD:
      0006CB 90 AE 00 16      [ 2] 1407 	LDW Y,#UHLD 
      0006CF 1D 00 02         [ 2] 1408 	SUBW X,#2
      0006D2 FF               [ 2] 1409         LDW (X),Y
      0006D3 81               [ 4] 1410         RET
                                   1411 
                                   1412 ;       CONTEXT ( -- a )
                                   1413 ;       Start vocabulary search.
      0006D4 06 C7                 1414         .word      LINK
                           0006D6  1415 LINK = . 
      0006D6 07                    1416         .byte      7
      0006D7 43 4F 4E 54 45 58 54  1417         .ascii     "CONTEXT"
      0006DE                       1418 CNTXT:
      0006DE 90 AE 00 18      [ 2] 1419 	LDW Y,#UCNTXT
      0006E2 1D 00 02         [ 2] 1420 	SUBW X,#2
      0006E5 FF               [ 2] 1421         LDW (X),Y
      0006E6 81               [ 4] 1422         RET
                                   1423 
                                   1424 ;       VP      ( -- a )
                                   1425 ;       Point to top of variables
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      0006E7 06 D6                 1426         .word      LINK
                           0006E9  1427 LINK = . 
      0006E9 02                    1428         .byte      2
      0006EA 56 50                 1429         .ascii     "VP"
      0006EC                       1430 VPP:
      0006EC 90 AE 00 1A      [ 2] 1431 	LDW Y,#UVP 
      0006F0 1D 00 02         [ 2] 1432 	SUBW X,#2
      0006F3 FF               [ 2] 1433         LDW (X),Y
      0006F4 81               [ 4] 1434         RET
                                   1435 
                                   1436 ;       CP    ( -- a )
                                   1437 ;       Pointer to top of FLASH 
      0006F5 06 E9                 1438         .word LINK 
                           0006F7  1439         LINK=.
      0006F7 02                    1440         .byte 2 
      0006F8 43 50                 1441         .ascii "CP"
      0006FA                       1442 CPP: 
      0006FA 90 AE 00 1C      [ 2] 1443         ldw y,#UCP 
      0006FE 1D 00 02         [ 2] 1444         subw x,#CELLL 
      000701 FF               [ 2] 1445         ldw (x),y 
      000702 81               [ 4] 1446         ret                
                                   1447 
                                   1448 ;       LAST    ( -- a )
                                   1449 ;       Point to last name in dictionary.
      000703 06 F7                 1450         .word      LINK
                           000705  1451 LINK = . 
      000705 04                    1452         .byte      4
      000706 4C 41 53 54           1453         .ascii     "LAST"
      00070A                       1454 LAST:
      00070A 90 AE 00 1E      [ 2] 1455 	LDW Y,#ULAST 
      00070E 1D 00 02         [ 2] 1456 	SUBW X,#2
      000711 FF               [ 2] 1457         LDW (X),Y
      000712 81               [ 4] 1458         RET
                                   1459 
                                   1460 ; address of system variable URLAST 
                                   1461 ;       RAMLAST ( -- a )
                                   1462 ; RAM dictionary context 
      000713 07 05                 1463         .word LINK 
                           000715  1464         LINK=. 
      000715 07                    1465         .byte 7  
      000716 52 41 4D 4C 41 53 54  1466         .ascii "RAMLAST" 
      00071D                       1467 RAMLAST: 
      00071D 90 AE 00 24      [ 2] 1468         ldw y,#URLAST 
      000721 1D 00 02         [ 2] 1469         subw x,#CELLL 
      000724 FF               [ 2] 1470         ldw (x),y 
      000725 81               [ 4] 1471         ret 
                                   1472 
                                   1473 ; OFFSET ( -- a )
                                   1474 ; address of system variable OFFSET 
      000726 07 15                 1475         .word LINK 
                           000728  1476         LINK=.
      000728 06                    1477         .byte 6
      000729 4F 46 46 53 45 54     1478         .ascii "OFFSET" 
      00072F                       1479 OFFSET: 
      00072F 1D 00 02         [ 2] 1480         subw x,#CELLL
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      000732 90 AE 00 20      [ 2] 1481         ldw y,#UOFFSET 
      000736 FF               [ 2] 1482         ldw (x),y 
      000737 81               [ 4] 1483         ret 
                                   1484 
                                   1485 ; adjust jump address adding OFFSET
                                   1486 ; ADR-ADJ ( a -- a+offset )
      000738                       1487 ADRADJ: 
      000738 CD 07 2F         [ 4] 1488         call OFFSET 
      00073B CD 04 F7         [ 4] 1489         call AT 
      00073E CC 07 99         [ 2] 1490         jp PLUS 
                                   1491 
                                   1492 
                                   1493 ;; Common functions
                                   1494 
                                   1495 ;       ?DUP    ( w -- w w | 0 )
                                   1496 ;       Dup tos if its is not zero.
      000741 07 28                 1497         .word      LINK
                           000743  1498 LINK = . 
      000743 04                    1499         .byte      4
      000744 3F 44 55 50           1500         .ascii     "?DUP"
      000748                       1501 QDUP:
      000748 90 93            [ 1] 1502         LDW Y,X
      00074A 90 FE            [ 2] 1503 	LDW Y,(Y)
      00074C 27 04            [ 1] 1504         JREQ     QDUP1
      00074E 1D 00 02         [ 2] 1505 	SUBW X,#2
      000751 FF               [ 2] 1506         LDW (X),Y
      000752 81               [ 4] 1507 QDUP1:  RET
                                   1508 
                                   1509 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1510 ;       Rot 3rd item to top.
      000753 07 43                 1511         .word      LINK
                           000755  1512 LINK = . 
      000755 03                    1513         .byte      3
      000756 52 4F 54              1514         .ascii     "ROT"
      000759                       1515 ROT:
      000759 90 93            [ 1] 1516         ldw y,x 
      00075B 90 FE            [ 2] 1517         ldw y,(y)
      00075D 90 89            [ 2] 1518         pushw y 
      00075F 90 93            [ 1] 1519         ldw y,x 
      000761 90 EE 04         [ 2] 1520         ldw y,(4,y)
      000764 FF               [ 2] 1521         ldw (x),y 
      000765 90 93            [ 1] 1522         ldw y,x 
      000767 90 EE 02         [ 2] 1523         ldw y,(2,y)
      00076A EF 04            [ 2] 1524         ldw (4,x),y 
      00076C 90 85            [ 2] 1525         popw y 
      00076E EF 02            [ 2] 1526         ldw (2,x),y
      000770 81               [ 4] 1527         ret 
                                   1528 
                                   1529 ;       2DROP   ( w w -- )
                                   1530 ;       Discard two items on stack.
      000771 07 55                 1531         .word      LINK
                           000773  1532 LINK = . 
      000773 05                    1533         .byte      5
      000774 32 44 52 4F 50        1534         .ascii     "2DROP"
      000779                       1535 DDROP:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      000779 1C 00 04         [ 2] 1536         ADDW X,#4
      00077C 81               [ 4] 1537         RET
                                   1538 
                                   1539 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1540 ;       Duplicate top two items.
      00077D 07 73                 1541         .word      LINK
                           00077F  1542 LINK = . 
      00077F 04                    1543         .byte      4
      000780 32 44 55 50           1544         .ascii     "2DUP"
      000784                       1545 DDUP:
      000784 1D 00 04         [ 2] 1546         SUBW X,#4
      000787 90 93            [ 1] 1547         LDW Y,X
      000789 90 EE 06         [ 2] 1548         LDW Y,(6,Y)
      00078C EF 02            [ 2] 1549         LDW (2,X),Y
      00078E 90 93            [ 1] 1550         LDW Y,X
      000790 90 EE 04         [ 2] 1551         LDW Y,(4,Y)
      000793 FF               [ 2] 1552         LDW (X),Y
      000794 81               [ 4] 1553         RET
                                   1554 
                                   1555 ;       +       ( w w -- sum )
                                   1556 ;       Add top two items.
      000795 07 7F                 1557         .word      LINK
                           000797  1558 LINK = . 
      000797 01                    1559         .byte      1
      000798 2B                    1560         .ascii     "+"
      000799                       1561 PLUS:
      000799 90 93            [ 1] 1562         LDW Y,X
      00079B 90 FE            [ 2] 1563         LDW Y,(Y)
      00079D 90 BF 28         [ 2] 1564         LDW YTEMP,Y
      0007A0 1C 00 02         [ 2] 1565         ADDW X,#2
      0007A3 90 93            [ 1] 1566         LDW Y,X
      0007A5 90 FE            [ 2] 1567         LDW Y,(Y)
      0007A7 72 B9 00 28      [ 2] 1568         ADDW Y,YTEMP
      0007AB FF               [ 2] 1569         LDW (X),Y
      0007AC 81               [ 4] 1570         RET
                                   1571 
                                   1572 ;       NOT     ( w -- w )
                                   1573 ;       One's complement of tos.
      0007AD 07 97                 1574         .word      LINK
                           0007AF  1575 LINK = . 
      0007AF 03                    1576         .byte      3
      0007B0 4E 4F 54              1577         .ascii     "NOT"
      0007B3                       1578 INVER:
      0007B3 90 93            [ 1] 1579         LDW Y,X
      0007B5 90 FE            [ 2] 1580         LDW Y,(Y)
      0007B7 90 53            [ 2] 1581         CPLW Y
      0007B9 FF               [ 2] 1582         LDW (X),Y
      0007BA 81               [ 4] 1583         RET
                                   1584 
                                   1585 ;       NEGATE  ( n -- -n )
                                   1586 ;       Two's complement of tos.
      0007BB 07 AF                 1587         .word      LINK
                           0007BD  1588 LINK = . 
      0007BD 06                    1589         .byte      6
      0007BE 4E 45 47 41 54 45     1590         .ascii     "NEGATE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      0007C4                       1591 NEGAT:
      0007C4 90 93            [ 1] 1592         LDW Y,X
      0007C6 90 FE            [ 2] 1593         LDW Y,(Y)
      0007C8 90 50            [ 2] 1594         NEGW Y
      0007CA FF               [ 2] 1595         LDW (X),Y
      0007CB 81               [ 4] 1596         RET
                                   1597 
                                   1598 ;       DNEGATE ( d -- -d )
                                   1599 ;       Two's complement of top double.
      0007CC 07 BD                 1600         .word      LINK
                           0007CE  1601 LINK = . 
      0007CE 07                    1602         .byte      7
      0007CF 44 4E 45 47 41 54 45  1603         .ascii     "DNEGATE"
      0007D6                       1604 DNEGA:
      0007D6 90 93            [ 1] 1605         LDW Y,X
      0007D8 90 FE            [ 2] 1606 	LDW Y,(Y)
      0007DA 90 53            [ 2] 1607         CPLW Y     
      0007DC 90 BF 28         [ 2] 1608 	LDW YTEMP,Y
      0007DF 90 93            [ 1] 1609         LDW Y,X
      0007E1 90 EE 02         [ 2] 1610         LDW Y,(2,Y)
      0007E4 90 53            [ 2] 1611         CPLW Y
      0007E6 72 A9 00 01      [ 2] 1612         addw y,#1
      0007EA EF 02            [ 2] 1613         LDW (2,X),Y
      0007EC 90 BE 28         [ 2] 1614         LDW Y,YTEMP
      0007EF 24 02            [ 1] 1615         JRNC DN1 
      0007F1 90 5C            [ 1] 1616         INCW Y
      0007F3 FF               [ 2] 1617 DN1:    LDW (X),Y
      0007F4 81               [ 4] 1618         RET
                                   1619 
                                   1620 
                                   1621 ;       S>D ( n -- d )
                                   1622 ; convert single integer to double 
      0007F5 07 CE                 1623         .word LINK 
                           0007F7  1624         LINK=. 
      0007F7 03                    1625         .byte 3 
      0007F8 53 3E 44              1626         .ascii "S>D"
      0007FB                       1627 STOD: 
      0007FB 1D 00 02         [ 2] 1628         subw x,#CELLL 
      0007FE 90 5F            [ 1] 1629         clrw y 
      000800 FF               [ 2] 1630         ldw (x),y 
      000801 90 93            [ 1] 1631         ldw y,x 
      000803 90 EE 02         [ 2] 1632         ldw y,(2,y)
      000806 2A 05            [ 1] 1633         jrpl 1$ 
      000808 90 AE FF FF      [ 2] 1634         ldw y,#-1
      00080C FF               [ 2] 1635         ldw (x),y 
      00080D 81               [ 4] 1636 1$:     ret 
                                   1637 
                                   1638 
                                   1639 
                                   1640 
                                   1641 ;       -       ( n1 n2 -- n1-n2 )
                                   1642 ;       Subtraction.
      00080E 07 F7                 1643         .word      LINK
                           000810  1644 LINK = . 
      000810 01                    1645         .byte      1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      000811 2D                    1646         .ascii     "-"
      000812                       1647 SUBB:
      000812 90 93            [ 1] 1648         LDW Y,X
      000814 90 FE            [ 2] 1649         LDW Y,(Y)
      000816 90 BF 28         [ 2] 1650         LDW YTEMP,Y
      000819 1C 00 02         [ 2] 1651         ADDW X,#2
      00081C 90 93            [ 1] 1652         LDW Y,X
      00081E 90 FE            [ 2] 1653         LDW Y,(Y)
      000820 72 B2 00 28      [ 2] 1654         SUBW Y,YTEMP
      000824 FF               [ 2] 1655         LDW (X),Y
      000825 81               [ 4] 1656         RET
                                   1657 
                                   1658 ;       ABS     ( n -- n )
                                   1659 ;       Return  absolute value of n.
      000826 08 10                 1660         .word      LINK
                           000828  1661 LINK = . 
      000828 03                    1662         .byte      3
      000829 41 42 53              1663         .ascii     "ABS"
      00082C                       1664 ABSS:
      00082C 90 93            [ 1] 1665         LDW Y,X
      00082E 90 FE            [ 2] 1666 	LDW Y,(Y)
      000830 2A 03            [ 1] 1667         JRPL     AB1     ;negate:
      000832 90 50            [ 2] 1668         NEGW     Y     ;else negate hi byte
      000834 FF               [ 2] 1669         LDW (X),Y
      000835 81               [ 4] 1670 AB1:    RET
                                   1671 
                                   1672 ;       =       ( w w -- t )
                                   1673 ;       Return true if top two are =al.
      000836 08 28                 1674         .word      LINK
                           000838  1675 LINK = . 
      000838 01                    1676         .byte      1
      000839 3D                    1677         .ascii     "="
      00083A                       1678 EQUAL:
      00083A A6 FF            [ 1] 1679         LD A,#0xFF  ;true
      00083C 90 93            [ 1] 1680         LDW Y,X    ;D = n2
      00083E 90 FE            [ 2] 1681         LDW Y,(Y)
      000840 90 BF 28         [ 2] 1682         LDW YTEMP,Y
      000843 1C 00 02         [ 2] 1683         ADDW X,#2
      000846 90 93            [ 1] 1684         LDW Y,X
      000848 90 FE            [ 2] 1685         LDW Y,(Y)
      00084A 90 B3 28         [ 2] 1686         CPW Y,YTEMP     ;if n2 <> n1
      00084D 27 01            [ 1] 1687         JREQ     EQ1
      00084F 4F               [ 1] 1688         CLR A
      000850 F7               [ 1] 1689 EQ1:    LD (X),A
      000851 E7 01            [ 1] 1690         LD (1,X),A
      000853 81               [ 4] 1691 	RET     
                                   1692 
                                   1693 ;       U<      ( u u -- t )
                                   1694 ;       Unsigned compare of top two items.
      000854 08 38                 1695         .word      LINK
                           000856  1696 LINK = . 
      000856 02                    1697         .byte      2
      000857 55 3C                 1698         .ascii     "U<"
      000859                       1699 ULESS:
      000859 A6 FF            [ 1] 1700         LD A,#0xFF  ;true
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      00085B 90 93            [ 1] 1701         LDW Y,X    ;D = n2
      00085D 90 FE            [ 2] 1702         LDW Y,(Y)
      00085F 90 BF 28         [ 2] 1703         LDW YTEMP,Y
      000862 1C 00 02         [ 2] 1704         ADDW X,#2
      000865 90 93            [ 1] 1705         LDW Y,X
      000867 90 FE            [ 2] 1706         LDW Y,(Y)
      000869 90 B3 28         [ 2] 1707         CPW Y,YTEMP     ;if n2 <> n1
      00086C 25 01            [ 1] 1708         JRULT     ULES1
      00086E 4F               [ 1] 1709         CLR A
      00086F F7               [ 1] 1710 ULES1:  LD (X),A
      000870 E7 01            [ 1] 1711         LD (1,X),A
      000872 81               [ 4] 1712 	RET     
                                   1713 
                                   1714 ;       <       ( n1 n2 -- t )
                                   1715 ;       Signed compare of top two items.
      000873 08 56                 1716         .word      LINK
                           000875  1717 LINK = . 
      000875 01                    1718         .byte      1
      000876 3C                    1719         .ascii     "<"
      000877                       1720 LESS:
      000877 A6 FF            [ 1] 1721         LD A,#0xFF  ;true
      000879 90 93            [ 1] 1722         LDW Y,X    ;D = n2
      00087B 90 FE            [ 2] 1723         LDW Y,(Y)
      00087D 90 BF 28         [ 2] 1724         LDW YTEMP,Y
      000880 1C 00 02         [ 2] 1725         ADDW X,#2
      000883 90 93            [ 1] 1726         LDW Y,X
      000885 90 FE            [ 2] 1727         LDW Y,(Y)
      000887 90 B3 28         [ 2] 1728         CPW Y,YTEMP     ;if n2 <> n1
      00088A 2F 01            [ 1] 1729         JRSLT     LT1
      00088C 4F               [ 1] 1730         CLR A
      00088D F7               [ 1] 1731 LT1:    LD (X),A
      00088E E7 01            [ 1] 1732         LD (1,X),A
      000890 81               [ 4] 1733 	RET     
                                   1734 
                                   1735 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1736 ;       >   (n1 n2 -- f )
                                   1737 ;  signed compare n1 n2 
                                   1738 ;  true if n1 > n2 
                                   1739 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000891 08 75                 1740         .word   LINK 
                           000893  1741         LINK = . 
      000893 01                    1742         .byte 1
      000894 3E                    1743         .ascii ">"
      000895                       1744 GREAT:
      000895 A6 FF            [ 1] 1745         LD A,#0xFF ;
      000897 90 93            [ 1] 1746         LDW Y,X 
      000899 90 FE            [ 2] 1747         LDW Y,(Y)
      00089B 90 BF 28         [ 2] 1748         LDW YTEMP,Y 
      00089E 1C 00 02         [ 2] 1749         ADDW X,#2 
      0008A1 90 93            [ 1] 1750         LDW Y,X 
      0008A3 90 FE            [ 2] 1751         LDW Y,(Y)
      0008A5 90 B3 28         [ 2] 1752         CPW  Y,YTEMP 
      0008A8 2C 01            [ 1] 1753         JRSGT GREAT1 
      0008AA 4F               [ 1] 1754         CLR  A
      0008AB                       1755 GREAT1:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      0008AB F7               [ 1] 1756         LD (X),A 
      0008AC E7 01            [ 1] 1757         LD (1,X),A 
      0008AE 81               [ 4] 1758         RET 
                                   1759 
                                   1760 
                                   1761 ;       MAX     ( n n -- n )
                                   1762 ;       Return greater of two top items.
      0008AF 08 93                 1763         .word      LINK
                           0008B1  1764 LINK = . 
      0008B1 03                    1765         .byte      3
      0008B2 4D 41 58              1766         .ascii     "MAX"
      0008B5                       1767 MAX:
      0008B5 90 93            [ 1] 1768         LDW Y,X    ;D = n2
      0008B7 90 EE 02         [ 2] 1769         LDW Y,(2,Y)
      0008BA 90 BF 28         [ 2] 1770         LDW YTEMP,Y
      0008BD 90 93            [ 1] 1771         LDW Y,X
      0008BF 90 FE            [ 2] 1772         LDW Y,(Y)
      0008C1 90 B3 28         [ 2] 1773         CPW Y,YTEMP     ;if n2 <> n1
      0008C4 2F 02            [ 1] 1774         JRSLT     MAX1
      0008C6 EF 02            [ 2] 1775         LDW (2,X),Y
      0008C8 1C 00 02         [ 2] 1776 MAX1:   ADDW X,#2
      0008CB 81               [ 4] 1777 	RET     
                                   1778 
                                   1779 ;       MIN     ( n n -- n )
                                   1780 ;       Return smaller of top two items.
      0008CC 08 B1                 1781         .word      LINK
                           0008CE  1782 LINK = . 
      0008CE 03                    1783         .byte      3
      0008CF 4D 49 4E              1784         .ascii     "MIN"
      0008D2                       1785 MIN:
      0008D2 90 93            [ 1] 1786         LDW Y,X    ;D = n2
      0008D4 90 EE 02         [ 2] 1787         LDW Y,(2,Y)
      0008D7 90 BF 28         [ 2] 1788         LDW YTEMP,Y
      0008DA 90 93            [ 1] 1789         LDW Y,X
      0008DC 90 FE            [ 2] 1790         LDW Y,(Y)
      0008DE 90 B3 28         [ 2] 1791         CPW Y,YTEMP     ;if n2 <> n1
      0008E1 2C 02            [ 1] 1792         JRSGT     MIN1
      0008E3 EF 02            [ 2] 1793         LDW (2,X),Y
      0008E5 1C 00 02         [ 2] 1794 MIN1:	ADDW X,#2
      0008E8 81               [ 4] 1795 	RET     
                                   1796 
                                   1797 ;       WITHIN  ( u ul uh -- t )
                                   1798 ;       Return true if u is within
                                   1799 ;       range of ul and uh. ( ul <= u < uh )
      0008E9 08 CE                 1800         .word      LINK
                           0008EB  1801 LINK = . 
      0008EB 06                    1802         .byte      6
      0008EC 57 49 54 48 49 4E     1803         .ascii     "WITHIN"
      0008F2                       1804 WITHI:
      0008F2 CD 05 C8         [ 4] 1805         CALL     OVER
      0008F5 CD 08 12         [ 4] 1806         CALL     SUBB
      0008F8 CD 05 67         [ 4] 1807         CALL     TOR
      0008FB CD 08 12         [ 4] 1808         CALL     SUBB
      0008FE CD 05 48         [ 4] 1809         CALL     RFROM
      000901 CC 08 59         [ 2] 1810         JP     ULESS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                   1811 
                                   1812 ;; Divide
                                   1813 
                                   1814 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1815 ;       Unsigned divide of a double by a
                                   1816 ;       single. Return mod and quotient.
      000904 08 EB                 1817         .word      LINK
                           000906  1818 LINK = . 
      000906 06                    1819         .byte      6
      000907 55 4D 2F 4D 4F 44     1820         .ascii     "UM/MOD"
                                   1821 ; 2021-02-22
                                   1822 ; changed algortihm for Jeeek one 
                                   1823 ; ref: https://github.com/TG9541/stm8ef/pull/406        
      00090D                       1824 UMMOD:
      00090D 90 93            [ 1] 1825         LDW     Y,X             ; stack pointer to Y
      00090F FE               [ 2] 1826         LDW     X,(X)           ; un
      000910 BF 28            [ 2] 1827         LDW     YTEMP,X         ; save un
      000912 93               [ 1] 1828         LDW     X,Y
      000913 5C               [ 1] 1829         INCW    X               ; drop un
      000914 5C               [ 1] 1830         INCW    X
      000915 89               [ 2] 1831         PUSHW   X               ; save stack pointer
      000916 FE               [ 2] 1832         LDW     X,(X)           ; X=udh
      000917 90 EE 04         [ 2] 1833         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      00091A B3 28            [ 2] 1834         CPW     X,YTEMP
      00091C 25 0B            [ 1] 1835         JRULT   MMSM1           ; X is still on the R-stack
      00091E 85               [ 2] 1836         POPW    X               ; restore stack pointer
      00091F 90 AE FF FF      [ 2] 1837         LDW     Y,#0xFFFF       ; overflow result:
      000923 FF               [ 2] 1838         LDW     (X),Y           ; quotient max. 16 bit value
      000924 90 5F            [ 1] 1839         CLRW    Y
      000926 EF 02            [ 2] 1840         LDW     (2,X),Y         ; remainder 0
      000928 81               [ 4] 1841         RET
      000929                       1842 MMSM1:
      000929 A6 10            [ 1] 1843         LD      A,#16           ; loop count
      00092B 90 58            [ 2] 1844         SLLW    Y               ; udl shift udl into udh
      00092D                       1845 MMSM3:
      00092D 59               [ 2] 1846         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      00092E 25 04            [ 1] 1847         JRC     MMSMa           ; if carry out of rotate
      000930 B3 28            [ 2] 1848         CPW     X,YTEMP         ; compare udh to un
      000932 25 05            [ 1] 1849         JRULT   MMSM4           ; can't subtract
      000934                       1850 MMSMa:
      000934 72 B0 00 28      [ 2] 1851         SUBW    X,YTEMP         ; can subtract
      000938 98               [ 1] 1852         RCF
      000939                       1853 MMSM4:
      000939 8C               [ 1] 1854         CCF                     ; quotient bit
      00093A 90 59            [ 2] 1855         RLCW    Y               ; rotate into quotient, rotate out udl
      00093C 4A               [ 1] 1856         DEC     A               ; repeat
      00093D 26 EE            [ 1] 1857         JRNE    MMSM3           ; if A == 0
      00093F                       1858 MMSMb:
      00093F BF 28            [ 2] 1859         LDW     YTEMP,X         ; done, save remainder
      000941 85               [ 2] 1860         POPW    X               ; restore stack pointer
      000942 FF               [ 2] 1861         LDW     (X),Y           ; save quotient
      000943 90 BE 28         [ 2] 1862         LDW     Y,YTEMP         ; remainder onto stack
      000946 EF 02            [ 2] 1863         LDW     (2,X),Y
      000948 81               [ 4] 1864         RET
                                   1865 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                   1866 
                                   1867 ;----------------------------------------------	
                                   1868 ;       M/MOD   ( d n -- r q )
                                   1869 ;       Signed floored divide of double by
                                   1870 ;       single. Return mod and quotient.
                                   1871 ;----------------------------------------------	
      000949 09 06                 1872         .word      LINK
                           00094B  1873 LINK = . 
      00094B 05                    1874         .byte      5
      00094C 4D 2F 4D 4F 44        1875         .ascii     "M/MOD"
      000951                       1876 MSMOD:  
      000951 CD 05 9E         [ 4] 1877         CALL	DUPP
      000954 CD 05 D7         [ 4] 1878         CALL	ZLESS
      000957 CD 05 9E         [ 4] 1879         CALL	DUPP
      00095A CD 05 67         [ 4] 1880         CALL	TOR
      00095D CD 04 AC         [ 4] 1881         CALL	QBRAN
      000960 09 6E                 1882         .word	MMOD1
      000962 CD 07 C4         [ 4] 1883         CALL	NEGAT
      000965 CD 05 67         [ 4] 1884         CALL	TOR
      000968 CD 07 D6         [ 4] 1885         CALL	DNEGA
      00096B CD 05 48         [ 4] 1886         CALL	RFROM
      00096E CD 05 67         [ 4] 1887 MMOD1:	CALL	TOR
      000971 CD 05 9E         [ 4] 1888         CALL	DUPP
      000974 CD 05 D7         [ 4] 1889         CALL	ZLESS
      000977 CD 04 AC         [ 4] 1890         CALL	QBRAN
      00097A 09 82                 1891         .word	MMOD2
      00097C CD 05 5B         [ 4] 1892         CALL	RAT
      00097F CD 07 99         [ 4] 1893         CALL	PLUS
      000982 CD 05 48         [ 4] 1894 MMOD2:	CALL	RFROM
      000985 CD 09 0D         [ 4] 1895         CALL	UMMOD
      000988 CD 05 48         [ 4] 1896         CALL	RFROM
      00098B CD 04 AC         [ 4] 1897         CALL	QBRAN
      00098E 09 99                 1898         .word	MMOD3
      000990 CD 05 AE         [ 4] 1899         CALL	SWAPP
      000993 CD 07 C4         [ 4] 1900         CALL	NEGAT
      000996 CD 05 AE         [ 4] 1901         CALL	SWAPP
      000999 81               [ 4] 1902 MMOD3:	RET
                                   1903 
                                   1904 ;       /MOD    ( n n -- r q )
                                   1905 ;       Signed divide. Return mod and quotient.
      00099A 09 4B                 1906         .word      LINK
                           00099C  1907 LINK = . 
      00099C 04                    1908         .byte      4
      00099D 2F 4D 4F 44           1909         .ascii     "/MOD"
      0009A1                       1910 SLMOD:
      0009A1 CD 05 C8         [ 4] 1911         CALL	OVER
      0009A4 CD 05 D7         [ 4] 1912         CALL	ZLESS
      0009A7 CD 05 AE         [ 4] 1913         CALL	SWAPP
      0009AA CC 09 51         [ 2] 1914         JP	MSMOD
                                   1915 
                                   1916 ;       MOD     ( n n -- r )
                                   1917 ;       Signed divide. Return mod only.
      0009AD 09 9C                 1918         .word      LINK
                           0009AF  1919 LINK = . 
      0009AF 03                    1920         .byte      3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      0009B0 4D 4F 44              1921         .ascii     "MOD"
      0009B3                       1922 MODD:
      0009B3 CD 09 A1         [ 4] 1923 	CALL	SLMOD
      0009B6 CC 05 94         [ 2] 1924 	JP	DROP
                                   1925 
                                   1926 ;       /       ( n n -- q )
                                   1927 ;       Signed divide. Return quotient only.
      0009B9 09 AF                 1928         .word      LINK
                           0009BB  1929 LINK = . 
      0009BB 01                    1930         .byte      1
      0009BC 2F                    1931         .ascii     "/"
      0009BD                       1932 SLASH:
      0009BD CD 09 A1         [ 4] 1933         CALL	SLMOD
      0009C0 CD 05 AE         [ 4] 1934         CALL	SWAPP
      0009C3 CC 05 94         [ 2] 1935         JP	DROP
                                   1936 
                                   1937 ;; Multiply
                                   1938 
                                   1939 ;       UM*     ( u u -- ud )
                                   1940 ;       Unsigned multiply. Return double product.
      0009C6 09 BB                 1941         .word      LINK
                           0009C8  1942 LINK = . 
      0009C8 03                    1943         .byte      3
      0009C9 55 4D 2A              1944         .ascii     "UM*"
      0009CC                       1945 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
                                   1946 ; take advantage of SP addressing modes
                                   1947 ; these PRODx in RAM are not required
                                   1948 ; the product is kept on stack as local variable 
                                   1949         ;; bytes offset on data stack 
                           000002  1950         da=2 
                           000003  1951         db=3 
                           000000  1952         dc=0 
                           000001  1953         dd=1 
                                   1954         ;; product bytes offset on return stack 
                           000001  1955         UD1=1  ; ud bits 31..24
                           000002  1956         UD2=2  ; ud bits 23..16
                           000003  1957         UD3=3  ; ud bits 15..8 
                           000004  1958         UD4=4  ; ud bits 7..0 
                                   1959         ;; local variable for product set to zero   
      0009CC 90 5F            [ 1] 1960         clrw y 
      0009CE 90 89            [ 2] 1961         pushw y  ; bits 15..0
      0009D0 90 89            [ 2] 1962         pushw y  ; bits 31..16 
      0009D2 E6 03            [ 1] 1963         ld a,(db,x) ; b 
      0009D4 90 97            [ 1] 1964         ld yl,a 
      0009D6 E6 01            [ 1] 1965         ld a,(dd,x)   ; d
      0009D8 90 42            [ 4] 1966         mul y,a    ; b*d  
      0009DA 17 03            [ 2] 1967         ldw (UD3,sp),y ; lowest weight product 
      0009DC E6 03            [ 1] 1968         ld a,(db,x)
      0009DE 90 97            [ 1] 1969         ld yl,a 
      0009E0 E6 00            [ 1] 1970         ld a,(dc,x)
      0009E2 90 42            [ 4] 1971         mul y,a  ; b*c 
                                   1972         ;;; do the partial sum 
      0009E4 72 F9 02         [ 2] 1973         addw y,(UD2,sp)
      0009E7 4F               [ 1] 1974         clr a 
      0009E8 49               [ 1] 1975         rlc a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      0009E9 6B 01            [ 1] 1976         ld (UD1,sp),a 
      0009EB 17 02            [ 2] 1977         ldw (UD2,sp),y 
      0009ED E6 02            [ 1] 1978         ld a,(da,x)
      0009EF 90 97            [ 1] 1979         ld yl,a 
      0009F1 E6 01            [ 1] 1980         ld a,(dd,x)
      0009F3 90 42            [ 4] 1981         mul y,a   ; a*d 
                                   1982         ;; do partial sum 
      0009F5 72 F9 02         [ 2] 1983         addw y,(UD2,sp)
      0009F8 4F               [ 1] 1984         clr a 
      0009F9 19 01            [ 1] 1985         adc a,(UD1,sp)
      0009FB 6B 01            [ 1] 1986         ld (UD1,sp),a  
      0009FD 17 02            [ 2] 1987         ldw (UD2,sp),y 
      0009FF E6 02            [ 1] 1988         ld a,(da,x)
      000A01 90 97            [ 1] 1989         ld yl,a 
      000A03 E6 00            [ 1] 1990         ld a,(dc,x)
      000A05 90 42            [ 4] 1991         mul y,a  ;  a*c highest weight product 
                                   1992         ;;; do partial sum 
      000A07 72 F9 01         [ 2] 1993         addw y,(UD1,sp)
      000A0A FF               [ 2] 1994         ldw (x),y  ; udh 
      000A0B 16 03            [ 2] 1995         ldw y,(UD3,sp)
      000A0D EF 02            [ 2] 1996         ldw (2,x),y  ; udl  
      000A0F 5B 04            [ 2] 1997         addw sp,#4 ; drop local variable 
      000A11 81               [ 4] 1998         ret  
                                   1999 
                                   2000 
                                   2001 ;       *       ( n n -- n )
                                   2002 ;       Signed multiply. Return single product.
      000A12 09 C8                 2003         .word      LINK
                           000A14  2004 LINK = . 
      000A14 01                    2005         .byte      1
      000A15 2A                    2006         .ascii     "*"
      000A16                       2007 STAR:
      000A16 CD 09 CC         [ 4] 2008 	CALL	UMSTA
      000A19 CC 05 94         [ 2] 2009 	JP	DROP
                                   2010 
                                   2011 ;       M*      ( n n -- d )
                                   2012 ;       Signed multiply. Return double product.
      000A1C 0A 14                 2013         .word      LINK
                           000A1E  2014 LINK = . 
      000A1E 02                    2015         .byte      2
      000A1F 4D 2A                 2016         .ascii     "M*"
      000A21                       2017 MSTAR:      
      000A21 CD 07 84         [ 4] 2018         CALL	DDUP
      000A24 CD 06 13         [ 4] 2019         CALL	XORR
      000A27 CD 05 D7         [ 4] 2020         CALL	ZLESS
      000A2A CD 05 67         [ 4] 2021         CALL	TOR
      000A2D CD 08 2C         [ 4] 2022         CALL	ABSS
      000A30 CD 05 AE         [ 4] 2023         CALL	SWAPP
      000A33 CD 08 2C         [ 4] 2024         CALL	ABSS
      000A36 CD 09 CC         [ 4] 2025         CALL	UMSTA
      000A39 CD 05 48         [ 4] 2026         CALL	RFROM
      000A3C CD 04 AC         [ 4] 2027         CALL	QBRAN
      000A3F 0A 44                 2028         .word	MSTA1
      000A41 CD 07 D6         [ 4] 2029         CALL	DNEGA
      000A44 81               [ 4] 2030 MSTA1:	RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                                   2031 
                                   2032 ;       */MOD   ( n1 n2 n3 -- r q )
                                   2033 ;       Multiply n1 and n2, then divide
                                   2034 ;       by n3. Return mod and quotient.
      000A45 0A 1E                 2035         .word      LINK
                           000A47  2036 LINK = . 
      000A47 05                    2037         .byte      5
      000A48 2A 2F 4D 4F 44        2038         .ascii     "*/MOD"
      000A4D                       2039 SSMOD:
      000A4D CD 05 67         [ 4] 2040         CALL     TOR
      000A50 CD 0A 21         [ 4] 2041         CALL     MSTAR
      000A53 CD 05 48         [ 4] 2042         CALL     RFROM
      000A56 CC 09 51         [ 2] 2043         JP     MSMOD
                                   2044 
                                   2045 ;       */      ( n1 n2 n3 -- q )
                                   2046 ;       Multiply n1 by n2, then divide
                                   2047 ;       by n3. Return quotient only.
      000A59 0A 47                 2048         .word      LINK
                           000A5B  2049 LINK = . 
      000A5B 02                    2050         .byte      2
      000A5C 2A 2F                 2051         .ascii     "*/"
      000A5E                       2052 STASL:
      000A5E CD 0A 4D         [ 4] 2053         CALL	SSMOD
      000A61 CD 05 AE         [ 4] 2054         CALL	SWAPP
      000A64 CC 05 94         [ 2] 2055         JP	DROP
                                   2056 
                                   2057 ;; Miscellaneous
                                   2058 
                                   2059 ;       CELL+   ( a -- a )
                                   2060 ;       Add cell size in byte to address.
      000A67 0A 5B                 2061         .word      LINK
                           000A69  2062 LINK = . 
      000A69 02                    2063         .byte       2
      000A6A 32 2B                 2064         .ascii     "2+"
      000A6C                       2065 CELLP:
      000A6C 90 93            [ 1] 2066         LDW Y,X
      000A6E 90 FE            [ 2] 2067 	LDW Y,(Y)
      000A70 72 A9 00 02      [ 2] 2068         ADDW Y,#CELLL 
      000A74 FF               [ 2] 2069         LDW (X),Y
      000A75 81               [ 4] 2070         RET
                                   2071 
                                   2072 ;       CELL-   ( a -- a )
                                   2073 ;       Subtract 2 from address.
      000A76 0A 69                 2074         .word      LINK
                           000A78  2075 LINK = . 
      000A78 02                    2076         .byte       2
      000A79 32 2D                 2077         .ascii     "2-"
      000A7B                       2078 CELLM:
      000A7B 90 93            [ 1] 2079         LDW Y,X
      000A7D 90 FE            [ 2] 2080 	LDW Y,(Y)
      000A7F 72 A2 00 02      [ 2] 2081         SUBW Y,#CELLL
      000A83 FF               [ 2] 2082         LDW (X),Y
      000A84 81               [ 4] 2083         RET
                                   2084 
                                   2085 ;       CELLS   ( n -- n )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                   2086 ;       Multiply tos by 2.
      000A85 0A 78                 2087         .word      LINK
                           000A87  2088 LINK = . 
      000A87 02                    2089         .byte       2
      000A88 32 2A                 2090         .ascii     "2*"
      000A8A                       2091 CELLS:
      000A8A 90 93            [ 1] 2092         LDW Y,X
      000A8C 90 FE            [ 2] 2093 	LDW Y,(Y)
      000A8E 90 58            [ 2] 2094         SLAW Y
      000A90 FF               [ 2] 2095         LDW (X),Y
      000A91 81               [ 4] 2096         RET
                                   2097 
                                   2098 ;       1+      ( a -- a )
                                   2099 ;       Add cell size in byte to address.
      000A92 0A 87                 2100         .word      LINK
                           000A94  2101 LINK = . 
      000A94 02                    2102         .byte      2
      000A95 31 2B                 2103         .ascii     "1+"
      000A97                       2104 ONEP:
      000A97 90 93            [ 1] 2105         LDW Y,X
      000A99 90 FE            [ 2] 2106 	LDW Y,(Y)
      000A9B 90 5C            [ 1] 2107         INCW Y
      000A9D FF               [ 2] 2108         LDW (X),Y
      000A9E 81               [ 4] 2109         RET
                                   2110 
                                   2111 ;       1-      ( a -- a )
                                   2112 ;       Subtract 2 from address.
      000A9F 0A 94                 2113         .word      LINK
                           000AA1  2114 LINK = . 
      000AA1 02                    2115         .byte      2
      000AA2 31 2D                 2116         .ascii     "1-"
      000AA4                       2117 ONEM:
      000AA4 90 93            [ 1] 2118         LDW Y,X
      000AA6 90 FE            [ 2] 2119 	LDW Y,(Y)
      000AA8 90 5A            [ 2] 2120         DECW Y
      000AAA FF               [ 2] 2121         LDW (X),Y
      000AAB 81               [ 4] 2122         RET
                                   2123 
                                   2124 ;  shift left n times 
                                   2125 ; LSHIFT ( n1 n2 -- n1<<n2 )
      000AAC 0A A1                 2126         .word LINK 
                           000AAE  2127         LINK=.
      000AAE 06                    2128         .byte 6 
      000AAF 4C 53 48 49 46 54     2129         .ascii "LSHIFT"
      000AB5                       2130 LSHIFT:
      000AB5 E6 01            [ 1] 2131         ld a,(1,x)
      000AB7 1C 00 02         [ 2] 2132         addw x,#CELLL 
      000ABA 90 93            [ 1] 2133         ldw y,x 
      000ABC 90 FE            [ 2] 2134         ldw y,(y)
      000ABE                       2135 LSHIFT1:
      000ABE 4D               [ 1] 2136         tnz a 
      000ABF 27 05            [ 1] 2137         jreq LSHIFT4 
      000AC1 90 58            [ 2] 2138         sllw y 
      000AC3 4A               [ 1] 2139         dec a 
      000AC4 20 F8            [ 2] 2140         jra LSHIFT1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000AC6                       2141 LSHIFT4:
      000AC6 FF               [ 2] 2142         ldw (x),y 
      000AC7 81               [ 4] 2143         ret 
                                   2144 
                                   2145 ; shift right n times                 
                                   2146 ; RSHIFT (n1 n2 -- n1>>n2 )
      000AC8 0A AE                 2147         .word LINK 
                           000ACA  2148         LINK=.
      000ACA 06                    2149         .byte 6
      000ACB 52 53 48 49 46 54     2150         .ascii "RSHIFT"
      000AD1                       2151 RSHIFT:
      000AD1 E6 01            [ 1] 2152         ld a,(1,x)
      000AD3 1C 00 02         [ 2] 2153         addw x,#CELLL 
      000AD6 90 93            [ 1] 2154         ldw y,x 
      000AD8 90 FE            [ 2] 2155         ldw y,(y)
      000ADA                       2156 RSHIFT1:
      000ADA 4D               [ 1] 2157         tnz a 
      000ADB 27 05            [ 1] 2158         jreq RSHIFT4 
      000ADD 90 54            [ 2] 2159         srlw y 
      000ADF 4A               [ 1] 2160         dec a 
      000AE0 20 F8            [ 2] 2161         jra RSHIFT1 
      000AE2                       2162 RSHIFT4:
      000AE2 FF               [ 2] 2163         ldw (x),y 
      000AE3 81               [ 4] 2164         ret 
                                   2165 
                                   2166 
                                   2167 ;       2/      ( n -- n )
                                   2168 ;       divide  tos by 2.
      000AE4 0A CA                 2169         .word      LINK
                           000AE6  2170 LINK = . 
      000AE6 02                    2171         .byte      2
      000AE7 32 2F                 2172         .ascii     "2/"
      000AE9                       2173 TWOSL:
      000AE9 90 93            [ 1] 2174         LDW Y,X
      000AEB 90 FE            [ 2] 2175 	LDW Y,(Y)
      000AED 90 57            [ 2] 2176         SRAW Y
      000AEF FF               [ 2] 2177         LDW (X),Y
      000AF0 81               [ 4] 2178         RET
                                   2179 
                                   2180 ;       BL      ( -- 32 )
                                   2181 ;       Return 32,  blank character.
      000AF1 0A E6                 2182         .word      LINK
                           000AF3  2183 LINK = . 
      000AF3 02                    2184         .byte      2
      000AF4 42 4C                 2185         .ascii     "BL"
      000AF6                       2186 BLANK:
      000AF6 1D 00 02         [ 2] 2187         SUBW X,#2
      000AF9 90 AE 00 20      [ 2] 2188 	LDW Y,#32
      000AFD FF               [ 2] 2189         LDW (X),Y
      000AFE 81               [ 4] 2190         RET
                                   2191 
                                   2192 ;         0     ( -- 0)
                                   2193 ;         Return 0.
      000AFF 0A F3                 2194         .word      LINK
                           000B01  2195 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000B01 01                    2196         .byte       1
      000B02 30                    2197         .ascii     "0"
      000B03                       2198 ZERO:
      000B03 1D 00 02         [ 2] 2199         SUBW X,#2
      000B06 90 5F            [ 1] 2200 	CLRW Y
      000B08 FF               [ 2] 2201         LDW (X),Y
      000B09 81               [ 4] 2202         RET
                                   2203 
                                   2204 ;         1     ( -- 1)
                                   2205 ;         Return 1.
      000B0A 0B 01                 2206         .word      LINK
                           000B0C  2207 LINK = . 
      000B0C 01                    2208         .byte       1
      000B0D 31                    2209         .ascii     "1"
      000B0E                       2210 ONE:
      000B0E 1D 00 02         [ 2] 2211         SUBW X,#2
      000B11 90 AE 00 01      [ 2] 2212 	LDW Y,#1
      000B15 FF               [ 2] 2213         LDW (X),Y
      000B16 81               [ 4] 2214         RET
                                   2215 
                                   2216 ;         -1    ( -- -1)
                                   2217 ;         Return 32,  blank character.
      000B17 0B 0C                 2218         .word      LINK
                           000B19  2219 LINK = . 
      000B19 02                    2220         .byte       2
      000B1A 2D 31                 2221         .ascii     "-1"
      000B1C                       2222 MONE:
      000B1C 1D 00 02         [ 2] 2223         SUBW X,#2
      000B1F 90 AE FF FF      [ 2] 2224 	LDW Y,#0xFFFF
      000B23 FF               [ 2] 2225         LDW (X),Y
      000B24 81               [ 4] 2226         RET
                                   2227 
                                   2228 ;       >CHAR   ( c -- c )
                                   2229 ;       Filter non-printing characters.
      000B25 0B 19                 2230         .word      LINK
                           000B27  2231 LINK = . 
      000B27 05                    2232         .byte      5
      000B28 3E 43 48 41 52        2233         .ascii     ">CHAR"
      000B2D                       2234 TCHAR:
      000B2D E6 01            [ 1] 2235         ld a,(1,x)
      000B2F A1 20            [ 1] 2236         cp a,#32  
      000B31 2B 05            [ 1] 2237         jrmi 1$ 
      000B33 A1 7F            [ 1] 2238         cp a,#127 
      000B35 2A 01            [ 1] 2239         jrpl 1$ 
      000B37 81               [ 4] 2240         ret 
      000B38 A6 5F            [ 1] 2241 1$:     ld a,#'_ 
      000B3A E7 01            [ 1] 2242         ld (1,x),a 
      000B3C 81               [ 4] 2243         ret 
                                   2244 
                                   2245 ;       DEPTH   ( -- n )
                                   2246 ;       Return  depth of  data stack.
      000B3D 0B 27                 2247         .word      LINK
                           000B3F  2248 LINK = . 
      000B3F 05                    2249         .byte      5
      000B40 44 45 50 54 48        2250         .ascii     "DEPTH"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000B45                       2251 DEPTH: 
      000B45 90 BE 2E         [ 2] 2252         LDW Y,SP0    ;save data stack ptr
      000B48 BF 26            [ 2] 2253 	LDW XTEMP,X
      000B4A 72 B2 00 26      [ 2] 2254         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000B4E 90 57            [ 2] 2255         SRAW Y    ;Y = #stack items
      000B50 1D 00 02         [ 2] 2256 	SUBW X,#2
      000B53 FF               [ 2] 2257         LDW (X),Y     ; if neg, underflow
      000B54 81               [ 4] 2258         RET
                                   2259 
                                   2260 ;       PICK    ( ... +n -- ... w )
                                   2261 ;       Copy  nth stack item to tos.
      000B55 0B 3F                 2262         .word      LINK
                           000B57  2263 LINK = . 
      000B57 04                    2264         .byte      4
      000B58 50 49 43 4B           2265         .ascii     "PICK"
      000B5C                       2266 PICK:
      000B5C 90 93            [ 1] 2267         LDW Y,X   ;D = n1
      000B5E 90 FE            [ 2] 2268         LDW Y,(Y)
                                   2269 ; modified for standard compliance          
                                   2270 ; 0 PICK must be equivalent to DUP 
      000B60 90 5C            [ 1] 2271         INCW Y 
      000B62 90 58            [ 2] 2272         SLAW Y
      000B64 BF 26            [ 2] 2273         LDW XTEMP,X
      000B66 72 B9 00 26      [ 2] 2274         ADDW Y,XTEMP
      000B6A 90 FE            [ 2] 2275         LDW Y,(Y)
      000B6C FF               [ 2] 2276         LDW (X),Y
      000B6D 81               [ 4] 2277         RET
                                   2278 
                                   2279 ;; Memory access
                                   2280 
                                   2281 ;       +!      ( n a -- )
                                   2282 ;       Add n to  contents at address a.
      000B6E 0B 57                 2283         .word      LINK
                           000B70  2284 LINK = . 
      000B70 02                    2285         .byte      2
      000B71 2B 21                 2286         .ascii     "+!"
      000B73                       2287 PSTOR:
      000B73 90 93            [ 1] 2288         ldw y,x 
      000B75 90 FE            [ 2] 2289         ldw y,(y)
      000B77 90 BF 28         [ 2] 2290         ldw YTEMP,y  ; address
      000B7A 90 FE            [ 2] 2291         ldw y,(y)  
      000B7C 90 89            [ 2] 2292         pushw y  ; value at address 
      000B7E 90 93            [ 1] 2293         ldw y,x 
      000B80 90 EE 02         [ 2] 2294         ldw y,(2,y) ; n 
      000B83 72 F9 01         [ 2] 2295         addw y,(1,sp) ; n+value
      000B86 91 CF 28         [ 5] 2296         ldw [YTEMP],y ;  a!
      000B89 90 85            [ 2] 2297         popw y    ;drop local var
      000B8B 1C 00 04         [ 2] 2298         addw x,#4 ; DDROP 
      000B8E 81               [ 4] 2299         ret 
                                   2300 
                                   2301 ;       2!      ( d a -- )
                                   2302 ;       Store  double integer to address a.
      000B8F 0B 70                 2303         .word      LINK
                           000B91  2304 LINK = . 
      000B91 02                    2305         .byte      2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000B92 32 21                 2306         .ascii     "2!"
      000B94                       2307 DSTOR:
      000B94 90 93            [ 1] 2308         ldw y,x 
      000B96 90 FE            [ 2] 2309         ldw y,(y)
      000B98 90 BF 28         [ 2] 2310         ldw YTEMP,y ; address 
      000B9B 1C 00 02         [ 2] 2311         addw x,#CELLL ; drop a 
      000B9E 90 93            [ 1] 2312         ldw y,x 
      000BA0 90 FE            [ 2] 2313         ldw y,(y) ; hi word 
      000BA2 89               [ 2] 2314         pushw x 
      000BA3 EE 02            [ 2] 2315         ldw x,(2,x) ; lo word 
      000BA5 91 CF 28         [ 5] 2316         ldw [YTEMP],y
      000BA8 90 93            [ 1] 2317         ldw y,x 
      000BAA AE 00 02         [ 2] 2318         ldw x,#2 
      000BAD 92 DF 28         [ 5] 2319         ldw ([YTEMP],x),y 
      000BB0 85               [ 2] 2320         popw x 
      000BB1 1C 00 04         [ 2] 2321         addw x,#4 ; DDROP 
      000BB4 81               [ 4] 2322         ret 
                                   2323 
                                   2324 ;       2@      ( a -- d )
                                   2325 ;       Fetch double integer from address a.
      000BB5 0B 91                 2326         .word      LINK
                           000BB7  2327 LINK = . 
      000BB7 02                    2328         .byte      2
      000BB8 32 40                 2329         .ascii     "2@"
      000BBA                       2330 DAT:
      000BBA 90 93            [ 1] 2331         ldw y,x 
      000BBC 90 FE            [ 2] 2332         ldw y,(y) ;address 
      000BBE 90 BF 28         [ 2] 2333         ldw YTEMP,y 
      000BC1 1D 00 02         [ 2] 2334         subw x,#CELLL ; space for udh 
      000BC4 91 CE 28         [ 5] 2335         ldw y,[YTEMP] ; udh 
      000BC7 FF               [ 2] 2336         ldw (x),y 
      000BC8 90 AE 00 02      [ 2] 2337         ldw y,#2
      000BCC 91 DE 28         [ 5] 2338         ldw y,([YTEMP],y) ; udl 
      000BCF EF 02            [ 2] 2339         ldw (2,x),y
      000BD1 81               [ 4] 2340         ret 
                                   2341 
                                   2342 ;       COUNT   ( b -- b +n )
                                   2343 ;       Return count byte of a string
                                   2344 ;       and add 1 to byte address.
      000BD2 0B B7                 2345         .word      LINK
                           000BD4  2346 LINK = . 
      000BD4 05                    2347         .byte      5
      000BD5 43 4F 55 4E 54        2348         .ascii     "COUNT"
      000BDA                       2349 COUNT:
      000BDA 90 93            [ 1] 2350         ldw y,x 
      000BDC 90 FE            [ 2] 2351         ldw y,(y) ; address 
      000BDE 90 F6            [ 1] 2352         ld a,(y)  ; count 
      000BE0 90 5C            [ 1] 2353         incw y 
      000BE2 FF               [ 2] 2354         ldw (x),y 
      000BE3 1D 00 02         [ 2] 2355         subw x,#CELLL 
      000BE6 E7 01            [ 1] 2356         ld (1,x),a 
      000BE8 7F               [ 1] 2357         clr (x)
      000BE9 81               [ 4] 2358         ret 
                                   2359 
                                   2360 ;       HERE    ( -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



                                   2361 ;       Return  top of  variables
      000BEA 0B D4                 2362         .word      LINK
                           000BEC  2363 LINK = . 
      000BEC 04                    2364         .byte      4
      000BED 48 45 52 45           2365         .ascii     "HERE"
      000BF1                       2366 HERE:
      000BF1 90 AE 00 1A      [ 2] 2367       	ldw y,#UVP 
      000BF5 90 FE            [ 2] 2368         ldw y,(y)
      000BF7 1D 00 02         [ 2] 2369         subw x,#CELLL 
      000BFA FF               [ 2] 2370         ldw (x),y 
      000BFB 81               [ 4] 2371         ret 
                                   2372 
                                   2373 ;       PAD     ( -- a )
                                   2374 ;       Return address of text buffer
                                   2375 ;       above  code dictionary.
      000BFC 0B EC                 2376         .word      LINK
                           000BFE  2377 LINK = . 
      000BFE 03                    2378         .byte      3
      000BFF 50 41 44              2379         .ascii     "PAD"
      000C02                       2380 PAD:
      000C02 CD 0B F1         [ 4] 2381         CALL     HERE
      000C05 CD 04 79         [ 4] 2382         CALL     DOLIT
      000C08 00 50                 2383         .word      80
      000C0A CC 07 99         [ 2] 2384         JP     PLUS
                                   2385 
                                   2386 ;       TIB     ( -- a )
                                   2387 ;       Return address of terminal input buffer.
      000C0D 0B FE                 2388         .word      LINK
                           000C0F  2389 LINK = . 
      000C0F 03                    2390         .byte      3
      000C10 54 49 42              2391         .ascii     "TIB"
      000C13                       2392 TIB:
      000C13 CD 06 89         [ 4] 2393         CALL     NTIB
      000C16 CD 0A 6C         [ 4] 2394         CALL     CELLP
      000C19 CC 04 F7         [ 2] 2395         JP     AT
                                   2396 
                                   2397 ;       @EXECUTE        ( a -- )
                                   2398 ;       Execute vector stored in address a.
      000C1C 0C 0F                 2399         .word      LINK
                           000C1E  2400 LINK = . 
      000C1E 08                    2401         .byte      8
      000C1F 40 45 58 45 43 55 54  2402         .ascii     "@EXECUTE"
             45
      000C27                       2403 ATEXE:
      000C27 CD 04 F7         [ 4] 2404         CALL     AT
      000C2A CD 07 48         [ 4] 2405         CALL     QDUP    ;?address or zero
      000C2D CD 04 AC         [ 4] 2406         CALL     QBRAN
      000C30 0C 35                 2407         .word      EXE1
      000C32 CD 04 D3         [ 4] 2408         CALL     EXECU   ;execute if non-zero
      000C35 81               [ 4] 2409 EXE1:   RET     ;do nothing if zero
                                   2410 
                                   2411 ;       CMOVE   ( b1 b2 u -- )
                                   2412 ;       Copy u bytes from b1 to b2.
      000C36 0C 1E                 2413         .word      LINK
                           000C38  2414 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000C38 05                    2415         .byte      5
      000C39 43 4D 4F 56 45        2416         .ascii     "CMOVE"
      000C3E                       2417 CMOVE:
      000C3E CD 05 67         [ 4] 2418         CALL	TOR
      000C41 CD 04 C3         [ 4] 2419         CALL	BRAN
      000C44 0C 5E                 2420         .word	CMOV2
      000C46 CD 05 67         [ 4] 2421 CMOV1:	CALL	TOR
      000C49 CD 05 9E         [ 4] 2422         CALL	DUPP
      000C4C CD 05 15         [ 4] 2423         CALL	CAT
      000C4F CD 05 5B         [ 4] 2424         CALL	RAT
      000C52 CD 05 04         [ 4] 2425         CALL	CSTOR
      000C55 CD 0A 97         [ 4] 2426         CALL	ONEP
      000C58 CD 05 48         [ 4] 2427         CALL	RFROM
      000C5B CD 0A 97         [ 4] 2428         CALL	ONEP
      000C5E CD 04 8D         [ 4] 2429 CMOV2:	CALL	DONXT
      000C61 0C 46                 2430         .word	CMOV1
      000C63 CC 07 79         [ 2] 2431         JP	DDROP
                                   2432 
                                   2433 ;       FILL    ( b u c -- )
                                   2434 ;       Fill u bytes of character c
                                   2435 ;       to area beginning at b.
      000C66 0C 38                 2436         .word       LINK
                           000C68  2437 LINK = . 
      000C68 04                    2438         .byte       4
      000C69 46 49 4C 4C           2439         .ascii     "FILL"
      000C6D                       2440 FILL:
      000C6D 90 93            [ 1] 2441         ldw y,x 
      000C6F 90 E6 01         [ 1] 2442         ld a,(1,y) ; c 
      000C72 1C 00 02         [ 2] 2443         addw x,#CELLL ; drop c 
      000C75 90 93            [ 1] 2444         ldw y,x 
      000C77 90 FE            [ 2] 2445         ldw y,(y) ; count
      000C79 90 89            [ 2] 2446         pushw y 
      000C7B 1C 00 02         [ 2] 2447         addw x,#CELLL ; drop u 
      000C7E 90 93            [ 1] 2448         ldw y,x 
      000C80 1C 00 02         [ 2] 2449         addw x,#CELLL ; drop b 
      000C83 90 FE            [ 2] 2450         ldw y,(y) ; address
      000C85 90 BF 28         [ 2] 2451         ldw YTEMP,y
      000C88 90 85            [ 2] 2452         popw y ; count 
      000C8A                       2453 FILL1:  
      000C8A 92 C7 28         [ 4] 2454         ld [YTEMP],a 
      000C8D 3C 29            [ 1] 2455         inc YTEMP+1
      000C8F 24 02            [ 1] 2456         jrnc FILL2 
      000C91 3C 28            [ 1] 2457         inc YTEMP
      000C93                       2458 FILL2: 
      000C93 90 5A            [ 2] 2459         decw y ; count 
      000C95 26 F3            [ 1] 2460         jrne FILL1  
      000C97 81               [ 4] 2461         ret 
                                   2462 
                                   2463 ;       ERASE   ( b u -- )
                                   2464 ;       Erase u bytes beginning at b.
      000C98 0C 68                 2465         .word      LINK
                           000C9A  2466 LINK = . 
      000C9A 05                    2467         .byte      5
      000C9B 45 52 41 53 45        2468         .ascii     "ERASE"
      000CA0                       2469 ERASE:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000CA0 90 5F            [ 1] 2470         clrw y 
      000CA2 1D 00 02         [ 2] 2471         subw x,#CELLL 
      000CA5 FF               [ 2] 2472         ldw (x),y 
      000CA6 CC 0C 6D         [ 2] 2473         jp FILL 
                                   2474 
                                   2475 
                                   2476 ;       PACK0   ( b u a -- a )
                                   2477 ;       Build a counted string with
                                   2478 ;       u characters from b. Null fill.
      000CA9 0C 9A                 2479         .word      LINK
                           000CAB  2480 LINK = . 
      000CAB 05                    2481         .byte      5
      000CAC 50 41 43 4B 30        2482         .ascii     "PACK0"
      000CB1                       2483 PACKS:
      000CB1 CD 05 9E         [ 4] 2484         CALL     DUPP
      000CB4 CD 05 67         [ 4] 2485         CALL     TOR     ;strings only on cell boundary
      000CB7 CD 07 84         [ 4] 2486         CALL     DDUP
      000CBA CD 05 04         [ 4] 2487         CALL     CSTOR
      000CBD CD 0A 97         [ 4] 2488         CALL     ONEP ;save count
      000CC0 CD 05 AE         [ 4] 2489         CALL     SWAPP
      000CC3 CD 0C 3E         [ 4] 2490         CALL     CMOVE
      000CC6 CD 05 48         [ 4] 2491         CALL     RFROM
      000CC9 81               [ 4] 2492         RET
                                   2493 
                                   2494 ;; Numeric output, single precision
                                   2495 
                                   2496 ;       DIGIT   ( u -- c )
                                   2497 ;       Convert digit u to a character.
      000CCA 0C AB                 2498         .word      LINK
                           000CCC  2499 LINK = . 
      000CCC 05                    2500         .byte      5
      000CCD 44 49 47 49 54        2501         .ascii     "DIGIT"
      000CD2                       2502 DIGIT:
      000CD2 CD 04 79         [ 4] 2503         CALL	DOLIT
      000CD5 00 09                 2504         .word	9
      000CD7 CD 05 C8         [ 4] 2505         CALL	OVER
      000CDA CD 08 77         [ 4] 2506         CALL	LESS
      000CDD CD 04 79         [ 4] 2507         CALL	DOLIT
      000CE0 00 07                 2508         .word	7
      000CE2 CD 05 EA         [ 4] 2509         CALL	ANDD
      000CE5 CD 07 99         [ 4] 2510         CALL	PLUS
      000CE8 CD 04 79         [ 4] 2511         CALL	DOLIT
      000CEB 00 30                 2512         .word	48	;'0'
      000CED CC 07 99         [ 2] 2513         JP	PLUS
                                   2514 
                                   2515 ;       EXTRACT ( n base -- n c )
                                   2516 ;       Extract least significant digit from n.
      000CF0 0C CC                 2517         .word      LINK
                           000CF2  2518 LINK = . 
      000CF2 07                    2519         .byte      7
      000CF3 45 58 54 52 41 43 54  2520         .ascii     "EXTRACT"
      000CFA                       2521 EXTRC:
      000CFA CD 0B 03         [ 4] 2522         CALL     ZERO
      000CFD CD 05 AE         [ 4] 2523         CALL     SWAPP
      000D00 CD 09 0D         [ 4] 2524         CALL     UMMOD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000D03 CD 05 AE         [ 4] 2525         CALL     SWAPP
      000D06 CC 0C D2         [ 2] 2526         JP     DIGIT
                                   2527 
                                   2528 ;       <#      ( -- )
                                   2529 ;       Initiate  numeric output process.
      000D09 0C F2                 2530         .word      LINK
                           000D0B  2531 LINK = . 
      000D0B 02                    2532         .byte      2
      000D0C 3C 23                 2533         .ascii     "<#"
      000D0E                       2534 BDIGS:
      000D0E CD 0C 02         [ 4] 2535         CALL     PAD
      000D11 CD 06 CB         [ 4] 2536         CALL     HLD
      000D14 CC 04 E0         [ 2] 2537         JP     STORE
                                   2538 
                                   2539 ;       HOLD    ( c -- )
                                   2540 ;       Insert a character into output string.
      000D17 0D 0B                 2541         .word      LINK
                           000D19  2542 LINK = . 
      000D19 04                    2543         .byte      4
      000D1A 48 4F 4C 44           2544         .ascii     "HOLD"
      000D1E                       2545 HOLD:
      000D1E CD 06 CB         [ 4] 2546         CALL     HLD
      000D21 CD 04 F7         [ 4] 2547         CALL     AT
      000D24 CD 0A A4         [ 4] 2548         CALL     ONEM
      000D27 CD 05 9E         [ 4] 2549         CALL     DUPP
      000D2A CD 06 CB         [ 4] 2550         CALL     HLD
      000D2D CD 04 E0         [ 4] 2551         CALL     STORE
      000D30 CC 05 04         [ 2] 2552         JP     CSTOR
                                   2553 
                                   2554 ;       #       ( u -- u )
                                   2555 ;       Extract one digit from u and
                                   2556 ;       append digit to output string.
      000D33 0D 19                 2557         .word      LINK
                           000D35  2558 LINK = . 
      000D35 01                    2559         .byte      1
      000D36 23                    2560         .ascii     "#"
      000D37                       2561 DIG:
      000D37 CD 06 5B         [ 4] 2562         CALL     BASE
      000D3A CD 04 F7         [ 4] 2563         CALL     AT
      000D3D CD 0C FA         [ 4] 2564         CALL     EXTRC
      000D40 CC 0D 1E         [ 2] 2565         JP     HOLD
                                   2566 
                                   2567 ;       #S      ( u -- 0 )
                                   2568 ;       Convert u until all digits
                                   2569 ;       are added to output string.
      000D43 0D 35                 2570         .word      LINK
                           000D45  2571 LINK = . 
      000D45 02                    2572         .byte      2
      000D46 23 53                 2573         .ascii     "#S"
      000D48                       2574 DIGS:
      000D48 CD 0D 37         [ 4] 2575 DIGS1:  CALL     DIG
      000D4B CD 05 9E         [ 4] 2576         CALL     DUPP
      000D4E CD 04 AC         [ 4] 2577         CALL     QBRAN
      000D51 0D 55                 2578         .word      DIGS2
      000D53 20 F3            [ 2] 2579         JRA     DIGS1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000D55 81               [ 4] 2580 DIGS2:  RET
                                   2581 
                                   2582 ;       SIGN    ( n -- )
                                   2583 ;       Add a minus sign to
                                   2584 ;       numeric output string.
      000D56 0D 45                 2585         .word      LINK
                           000D58  2586 LINK = . 
      000D58 04                    2587         .byte      4
      000D59 53 49 47 4E           2588         .ascii     "SIGN"
      000D5D                       2589 SIGN:
      000D5D CD 05 D7         [ 4] 2590         CALL     ZLESS
      000D60 CD 04 AC         [ 4] 2591         CALL     QBRAN
      000D63 0D 6D                 2592         .word      SIGN1
      000D65 CD 04 79         [ 4] 2593         CALL     DOLIT
      000D68 00 2D                 2594         .word      45	;"-"
      000D6A CC 0D 1E         [ 2] 2595         JP     HOLD
      000D6D 81               [ 4] 2596 SIGN1:  RET
                                   2597 
                                   2598 ;       #>      ( w -- b u )
                                   2599 ;       Prepare output string.
      000D6E 0D 58                 2600         .word      LINK
                           000D70  2601 LINK = . 
      000D70 02                    2602         .byte      2
      000D71 23 3E                 2603         .ascii     "#>"
      000D73                       2604 EDIGS:
      000D73 CD 05 94         [ 4] 2605         CALL     DROP
      000D76 CD 06 CB         [ 4] 2606         CALL     HLD
      000D79 CD 04 F7         [ 4] 2607         CALL     AT
      000D7C CD 0C 02         [ 4] 2608         CALL     PAD
      000D7F CD 05 C8         [ 4] 2609         CALL     OVER
      000D82 CC 08 12         [ 2] 2610         JP     SUBB
                                   2611 
                                   2612 ;       str     ( w -- b u )
                                   2613 ;       Convert a signed integer
                                   2614 ;       to a numeric string.
      000D85 0D 70                 2615         .word      LINK
                           000D87  2616 LINK = . 
      000D87 03                    2617         .byte      3
      000D88 53 54 52              2618         .ascii     "STR"
      000D8B                       2619 STR:
      000D8B CD 05 9E         [ 4] 2620         CALL     DUPP
      000D8E CD 05 67         [ 4] 2621         CALL     TOR
      000D91 CD 08 2C         [ 4] 2622         CALL     ABSS
      000D94 CD 0D 0E         [ 4] 2623         CALL     BDIGS
      000D97 CD 0D 48         [ 4] 2624         CALL     DIGS
      000D9A CD 05 48         [ 4] 2625         CALL     RFROM
      000D9D CD 0D 5D         [ 4] 2626         CALL     SIGN
      000DA0 CC 0D 73         [ 2] 2627         JP     EDIGS
                                   2628 
                                   2629 ;       HEX     ( -- )
                                   2630 ;       Use radix 16 as base for
                                   2631 ;       numeric conversions.
      000DA3 0D 87                 2632         .word      LINK
                           000DA5  2633 LINK = . 
      000DA5 03                    2634         .byte      3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000DA6 48 45 58              2635         .ascii     "HEX"
      000DA9                       2636 HEX:
      000DA9 CD 04 79         [ 4] 2637         CALL     DOLIT
      000DAC 00 10                 2638         .word      16
      000DAE CD 06 5B         [ 4] 2639         CALL     BASE
      000DB1 CC 04 E0         [ 2] 2640         JP     STORE
                                   2641 
                                   2642 ;       DECIMAL ( -- )
                                   2643 ;       Use radix 10 as base
                                   2644 ;       for numeric conversions.
      000DB4 0D A5                 2645         .word      LINK
                           000DB6  2646 LINK = . 
      000DB6 07                    2647         .byte      7
      000DB7 44 45 43 49 4D 41 4C  2648         .ascii     "DECIMAL"
      000DBE                       2649 DECIM:
      000DBE CD 04 79         [ 4] 2650         CALL     DOLIT
      000DC1 00 0A                 2651         .word      10
      000DC3 CD 06 5B         [ 4] 2652         CALL     BASE
      000DC6 CC 04 E0         [ 2] 2653         JP     STORE
                                   2654 
                                   2655 ;; Numeric input, single precision
                                   2656 
                                   2657 ;       DIGIT?  ( c base -- u t )
                                   2658 ;       Convert a character to its numeric
                                   2659 ;       value. A flag indicates success.
      000DC9 0D B6                 2660         .word      LINK
                           000DCB  2661 LINK = . 
      000DCB 06                    2662         .byte       6
      000DCC 44 49 47 49 54 3F     2663         .ascii     "DIGIT?"
      000DD2                       2664 DIGTQ:
      000DD2 CD 05 67         [ 4] 2665         CALL     TOR
      000DD5 CD 04 79         [ 4] 2666         CALL     DOLIT
      000DD8 00 30                 2667         .word     48	; "0"
      000DDA CD 08 12         [ 4] 2668         CALL     SUBB
      000DDD CD 04 79         [ 4] 2669         CALL     DOLIT
      000DE0 00 09                 2670         .word      9
      000DE2 CD 05 C8         [ 4] 2671         CALL     OVER
      000DE5 CD 08 77         [ 4] 2672         CALL     LESS
      000DE8 CD 04 AC         [ 4] 2673         CALL     QBRAN
      000DEB 0E 03                 2674         .word      DGTQ1
      000DED CD 04 79         [ 4] 2675         CALL     DOLIT
      000DF0 00 07                 2676         .word      7
      000DF2 CD 08 12         [ 4] 2677         CALL     SUBB
      000DF5 CD 05 9E         [ 4] 2678         CALL     DUPP
      000DF8 CD 04 79         [ 4] 2679         CALL     DOLIT
      000DFB 00 0A                 2680         .word      10
      000DFD CD 08 77         [ 4] 2681         CALL     LESS
      000E00 CD 05 FE         [ 4] 2682         CALL     ORR
      000E03 CD 05 9E         [ 4] 2683 DGTQ1:  CALL     DUPP
      000E06 CD 05 48         [ 4] 2684         CALL     RFROM
      000E09 CC 08 59         [ 2] 2685         JP     ULESS
                                   2686 
                                   2687 ;       NUMBER? ( a -- n T | a F )
                                   2688 ;       Convert a number string to
                                   2689 ;       integer. Push a flag on tos.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000E0C 0D CB                 2690         .word      LINK
                           000E0E  2691 LINK = . 
      000E0E 07                    2692         .byte      7
      000E0F 4E 55 4D 42 45 52 3F  2693         .ascii     "NUMBER?"
      000E16                       2694 NUMBQ:
      000E16 CD 06 5B         [ 4] 2695         CALL     BASE
      000E19 CD 04 F7         [ 4] 2696         CALL     AT
      000E1C CD 05 67         [ 4] 2697         CALL     TOR
      000E1F CD 0B 03         [ 4] 2698         CALL     ZERO
      000E22 CD 05 C8         [ 4] 2699         CALL     OVER
      000E25 CD 0B DA         [ 4] 2700         CALL     COUNT
      000E28 CD 05 C8         [ 4] 2701         CALL     OVER
      000E2B CD 05 15         [ 4] 2702         CALL     CAT
      000E2E CD 04 79         [ 4] 2703         CALL     DOLIT
      000E31 00 24                 2704         .word     36	; "0x"
      000E33 CD 08 3A         [ 4] 2705         CALL     EQUAL
      000E36 CD 04 AC         [ 4] 2706         CALL     QBRAN
      000E39 0E 4A                 2707         .word      NUMQ1
      000E3B CD 0D A9         [ 4] 2708         CALL     HEX
      000E3E CD 05 AE         [ 4] 2709         CALL     SWAPP
      000E41 CD 0A 97         [ 4] 2710         CALL     ONEP
      000E44 CD 05 AE         [ 4] 2711         CALL     SWAPP
      000E47 CD 0A A4         [ 4] 2712         CALL     ONEM
      000E4A CD 05 C8         [ 4] 2713 NUMQ1:  CALL     OVER
      000E4D CD 05 15         [ 4] 2714         CALL     CAT
      000E50 CD 04 79         [ 4] 2715         CALL     DOLIT
      000E53 00 2D                 2716         .word     45	; "-"
      000E55 CD 08 3A         [ 4] 2717         CALL     EQUAL
      000E58 CD 05 67         [ 4] 2718         CALL     TOR
      000E5B CD 05 AE         [ 4] 2719         CALL     SWAPP
      000E5E CD 05 5B         [ 4] 2720         CALL     RAT
      000E61 CD 08 12         [ 4] 2721         CALL     SUBB
      000E64 CD 05 AE         [ 4] 2722         CALL     SWAPP
      000E67 CD 05 5B         [ 4] 2723         CALL     RAT
      000E6A CD 07 99         [ 4] 2724         CALL     PLUS
      000E6D CD 07 48         [ 4] 2725         CALL     QDUP
      000E70 CD 04 AC         [ 4] 2726         CALL     QBRAN
      000E73 0E D4                 2727         .word      NUMQ6
      000E75 CD 0A A4         [ 4] 2728         CALL     ONEM
      000E78 CD 05 67         [ 4] 2729         CALL     TOR
      000E7B CD 05 9E         [ 4] 2730 NUMQ2:  CALL     DUPP
      000E7E CD 05 67         [ 4] 2731         CALL     TOR
      000E81 CD 05 15         [ 4] 2732         CALL     CAT
      000E84 CD 06 5B         [ 4] 2733         CALL     BASE
      000E87 CD 04 F7         [ 4] 2734         CALL     AT
      000E8A CD 0D D2         [ 4] 2735         CALL     DIGTQ
      000E8D CD 04 AC         [ 4] 2736         CALL     QBRAN
      000E90 0E C2                 2737         .word      NUMQ4
      000E92 CD 05 AE         [ 4] 2738         CALL     SWAPP
      000E95 CD 06 5B         [ 4] 2739         CALL     BASE
      000E98 CD 04 F7         [ 4] 2740         CALL     AT
      000E9B CD 0A 16         [ 4] 2741         CALL     STAR
      000E9E CD 07 99         [ 4] 2742         CALL     PLUS
      000EA1 CD 05 48         [ 4] 2743         CALL     RFROM
      000EA4 CD 0A 97         [ 4] 2744         CALL     ONEP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000EA7 CD 04 8D         [ 4] 2745         CALL     DONXT
      000EAA 0E 7B                 2746         .word      NUMQ2
      000EAC CD 05 5B         [ 4] 2747         CALL     RAT
      000EAF CD 05 AE         [ 4] 2748         CALL     SWAPP
      000EB2 CD 05 94         [ 4] 2749         CALL     DROP
      000EB5 CD 04 AC         [ 4] 2750         CALL     QBRAN
      000EB8 0E BD                 2751         .word      NUMQ3
      000EBA CD 07 C4         [ 4] 2752         CALL     NEGAT
      000EBD CD 05 AE         [ 4] 2753 NUMQ3:  CALL     SWAPP
      000EC0 20 0F            [ 2] 2754         JRA     NUMQ5
      000EC2 CD 05 48         [ 4] 2755 NUMQ4:  CALL     RFROM
      000EC5 CD 05 48         [ 4] 2756         CALL     RFROM
      000EC8 CD 07 79         [ 4] 2757         CALL     DDROP
      000ECB CD 07 79         [ 4] 2758         CALL     DDROP
      000ECE CD 0B 03         [ 4] 2759         CALL     ZERO
      000ED1 CD 05 9E         [ 4] 2760 NUMQ5:  CALL     DUPP
      000ED4 CD 05 48         [ 4] 2761 NUMQ6:  CALL     RFROM
      000ED7 CD 07 79         [ 4] 2762         CALL     DDROP
      000EDA CD 05 48         [ 4] 2763         CALL     RFROM
      000EDD CD 06 5B         [ 4] 2764         CALL     BASE
      000EE0 CC 04 E0         [ 2] 2765         JP     STORE
                                   2766 
                                   2767 ;; Basic I/O
                                   2768 
                                   2769 ;       KEY     ( -- c )
                                   2770 ;       Wait for and return an
                                   2771 ;       input character.
      000EE3 0E 0E                 2772         .word      LINK
                           000EE5  2773 LINK = . 
      000EE5 03                    2774         .byte      3
      000EE6 4B 45 59              2775         .ascii     "KEY"
      000EE9                       2776 KEY:
      000EE9 72 0B 52 30 FB   [ 2] 2777         btjf UART_SR,#UART_SR_RXNE,. 
      000EEE C6 52 31         [ 1] 2778         ld a,UART_DR 
      000EF1 1D 00 02         [ 2] 2779         subw x,#CELLL 
      000EF4 E7 01            [ 1] 2780         ld (1,x),a 
      000EF6 7F               [ 1] 2781         clr (x)
      000EF7 81               [ 4] 2782         ret 
                                   2783 
                                   2784 ;       NUF?    ( -- t )
                                   2785 ;       Return false if no input,
                                   2786 ;       else pause and if CR return true.
      000EF8 0E E5                 2787         .word      LINK
                           000EFA  2788 LINK = . 
      000EFA 04                    2789         .byte      4
      000EFB 4E 55 46 3F           2790         .ascii     "NUF?"
      000EFF                       2791 NUFQ:
      000EFF CD 04 1A         [ 4] 2792         CALL     QKEY
      000F02 CD 05 9E         [ 4] 2793         CALL     DUPP
      000F05 CD 04 AC         [ 4] 2794         CALL     QBRAN
      000F08 0F 18                 2795         .word    NUFQ1
      000F0A CD 07 79         [ 4] 2796         CALL     DDROP
      000F0D CD 0E E9         [ 4] 2797         CALL     KEY
      000F10 CD 04 79         [ 4] 2798         CALL     DOLIT
      000F13 00 0D                 2799         .word      CRR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000F15 CC 08 3A         [ 2] 2800         JP     EQUAL
      000F18 81               [ 4] 2801 NUFQ1:  RET
                                   2802 
                                   2803 ;       SPACE   ( -- )
                                   2804 ;       Send  blank character to
                                   2805 ;       output device.
      000F19 0E FA                 2806         .word      LINK
                           000F1B  2807 LINK = . 
      000F1B 05                    2808         .byte      5
      000F1C 53 50 41 43 45        2809         .ascii     "SPACE"
      000F21                       2810 SPACE:
      000F21 CD 0A F6         [ 4] 2811         CALL     BLANK
      000F24 CC 04 38         [ 2] 2812         JP     EMIT
                                   2813 
                                   2814 ;       SPACES  ( +n -- )
                                   2815 ;       Send n spaces to output device.
      000F27 0F 1B                 2816         .word      LINK
                           000F29  2817 LINK = . 
      000F29 06                    2818         .byte      6
      000F2A 53 50 41 43 45 53     2819         .ascii     "SPACES"
      000F30                       2820 SPACS:
      000F30 CD 0B 03         [ 4] 2821         CALL     ZERO
      000F33 CD 08 B5         [ 4] 2822         CALL     MAX
      000F36 CD 05 67         [ 4] 2823         CALL     TOR
      000F39 20 03            [ 2] 2824         JRA      CHAR2
      000F3B CD 0F 21         [ 4] 2825 CHAR1:  CALL     SPACE
      000F3E CD 04 8D         [ 4] 2826 CHAR2:  CALL     DONXT
      000F41 0F 3B                 2827         .word    CHAR1
      000F43 81               [ 4] 2828         RET
                                   2829 
                                   2830 ;       TYPE    ( b u -- )
                                   2831 ;       Output u characters from b.
      000F44 0F 29                 2832         .word      LINK
                           000F46  2833 LINK = . 
      000F46 04                    2834         .byte      4
      000F47 54 59 50 45           2835         .ascii     "TYPE"
      000F4B                       2836 TYPES:
      000F4B CD 05 67         [ 4] 2837         CALL     TOR
      000F4E 20 0C            [ 2] 2838         JRA     TYPE2
      000F50 CD 05 9E         [ 4] 2839 TYPE1:  CALL     DUPP
      000F53 CD 05 15         [ 4] 2840         CALL     CAT
      000F56 CD 04 38         [ 4] 2841         CALL     EMIT
      000F59 CD 0A 97         [ 4] 2842         CALL     ONEP
      000F5C CD 04 8D         [ 4] 2843 TYPE2:  CALL     DONXT
      000F5F 0F 50                 2844         .word      TYPE1
      000F61 CC 05 94         [ 2] 2845         JP     DROP
                                   2846 
                                   2847 ;       CR      ( -- )
                                   2848 ;       Output a carriage return
                                   2849 ;       and a line feed.
      000F64 0F 46                 2850         .word      LINK
                           000F66  2851 LINK = . 
      000F66 02                    2852         .byte      2
      000F67 43 52                 2853         .ascii     "CR"
      000F69                       2854 CR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000F69 CD 04 79         [ 4] 2855         CALL     DOLIT
      000F6C 00 0D                 2856         .word      CRR
      000F6E CD 04 38         [ 4] 2857         CALL     EMIT
      000F71 CD 04 79         [ 4] 2858         CALL     DOLIT
      000F74 00 0A                 2859         .word      LF
      000F76 CC 04 38         [ 2] 2860         JP     EMIT
                                   2861 
                                   2862 ;       do$     ( -- a )
                                   2863 ;       Return  address of a compiled
                                   2864 ;       string.
      000F79 0F 66                 2865         .word      LINK
                           000F7B  2866 LINK = . 
      000F7B 43                    2867 	.byte      COMPO+3
      000F7C 44 4F 24              2868         .ascii     "DO$"
      000F7F                       2869 DOSTR:
      000F7F CD 05 48         [ 4] 2870         CALL     RFROM
      000F82 CD 05 5B         [ 4] 2871         CALL     RAT
      000F85 CD 05 48         [ 4] 2872         CALL     RFROM
      000F88 CD 0B DA         [ 4] 2873         CALL     COUNT
      000F8B CD 07 99         [ 4] 2874         CALL     PLUS
      000F8E CD 05 67         [ 4] 2875         CALL     TOR
      000F91 CD 05 AE         [ 4] 2876         CALL     SWAPP
      000F94 CD 05 67         [ 4] 2877         CALL     TOR
      000F97 81               [ 4] 2878         RET
                                   2879 
                                   2880 ;       $"|     ( -- a )
                                   2881 ;       Run time routine compiled by $".
                                   2882 ;       Return address of a compiled string.
      000F98 0F 7B                 2883         .word      LINK
                           000F9A  2884 LINK = . 
      000F9A 43                    2885 	.byte      COMPO+3
      000F9B 24 22 7C              2886         .byte     '$','"','|'
      000F9E                       2887 STRQP:
      000F9E CD 0F 7F         [ 4] 2888         CALL     DOSTR
      000FA1 81               [ 4] 2889         RET
                                   2890 
                                   2891 ;       ."|     ( -- )
                                   2892 ;       Run time routine of ." .
                                   2893 ;       Output a compiled string.
      000FA2 0F 9A                 2894         .word      LINK
                           000FA4  2895 LINK = . 
      000FA4 43                    2896 	.byte      COMPO+3
      000FA5 2E 22 7C              2897         .byte     '.','"','|'
      000FA8                       2898 DOTQP:
      000FA8 CD 0F 7F         [ 4] 2899         CALL     DOSTR
      000FAB CD 0B DA         [ 4] 2900         CALL     COUNT
      000FAE CC 0F 4B         [ 2] 2901         JP     TYPES
                                   2902 
                                   2903 ;       .R      ( n +n -- )
                                   2904 ;       Display an integer in a field
                                   2905 ;       of n columns, right justified.
      000FB1 0F A4                 2906         .word      LINK
                           000FB3  2907 LINK = . 
      000FB3 02                    2908         .byte      2
      000FB4 2E 52                 2909         .ascii     ".R"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000FB6                       2910 DOTR:
      000FB6 CD 05 67         [ 4] 2911         CALL     TOR
      000FB9 CD 0D 8B         [ 4] 2912         CALL     STR
      000FBC CD 05 48         [ 4] 2913         CALL     RFROM
      000FBF CD 05 C8         [ 4] 2914         CALL     OVER
      000FC2 CD 08 12         [ 4] 2915         CALL     SUBB
      000FC5 CD 0F 30         [ 4] 2916         CALL     SPACS
      000FC8 CC 0F 4B         [ 2] 2917         JP     TYPES
                                   2918 
                                   2919 ;       U.R     ( u +n -- )
                                   2920 ;       Display an unsigned integer
                                   2921 ;       in n column, right justified.
      000FCB 0F B3                 2922         .word      LINK
                           000FCD  2923 LINK = . 
      000FCD 03                    2924         .byte      3
      000FCE 55 2E 52              2925         .ascii     "U.R"
      000FD1                       2926 UDOTR:
      000FD1 CD 05 67         [ 4] 2927         CALL     TOR
      000FD4 CD 0D 0E         [ 4] 2928         CALL     BDIGS
      000FD7 CD 0D 48         [ 4] 2929         CALL     DIGS
      000FDA CD 0D 73         [ 4] 2930         CALL     EDIGS
      000FDD CD 05 48         [ 4] 2931         CALL     RFROM
      000FE0 CD 05 C8         [ 4] 2932         CALL     OVER
      000FE3 CD 08 12         [ 4] 2933         CALL     SUBB
      000FE6 CD 0F 30         [ 4] 2934         CALL     SPACS
      000FE9 CC 0F 4B         [ 2] 2935         JP     TYPES
                                   2936 
                                   2937 ;       U.      ( u -- )
                                   2938 ;       Display an unsigned integer
                                   2939 ;       in free format.
      000FEC 0F CD                 2940         .word      LINK
                           000FEE  2941 LINK = . 
      000FEE 02                    2942         .byte      2
      000FEF 55 2E                 2943         .ascii     "U."
      000FF1                       2944 UDOT:
      000FF1 CD 0D 0E         [ 4] 2945         CALL     BDIGS
      000FF4 CD 0D 48         [ 4] 2946         CALL     DIGS
      000FF7 CD 0D 73         [ 4] 2947         CALL     EDIGS
      000FFA CD 0F 21         [ 4] 2948         CALL     SPACE
      000FFD CC 0F 4B         [ 2] 2949         JP     TYPES
                                   2950 
                                   2951 ;       .       ( w -- )
                                   2952 ;       Display an integer in free
                                   2953 ;       format, preceeded by a space.
      001000 0F EE                 2954         .word      LINK
                           001002  2955 LINK = . 
      001002 01                    2956         .byte      1
      001003 2E                    2957         .ascii     "."
      001004                       2958 DOT:
      001004 CD 06 5B         [ 4] 2959         CALL     BASE
      001007 CD 04 F7         [ 4] 2960         CALL     AT
      00100A CD 04 79         [ 4] 2961         CALL     DOLIT
      00100D 00 0A                 2962         .word      10
      00100F CD 06 13         [ 4] 2963         CALL     XORR    ;?decimal
      001012 CD 04 AC         [ 4] 2964         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      001015 10 1A                 2965         .word      DOT1
      001017 CC 0F F1         [ 2] 2966         JP     UDOT
      00101A CD 0D 8B         [ 4] 2967 DOT1:   CALL     STR
      00101D CD 0F 21         [ 4] 2968         CALL     SPACE
      001020 CC 0F 4B         [ 2] 2969         JP     TYPES
                                   2970 
                                   2971 ;       ?       ( a -- )
                                   2972 ;       Display contents in memory cell.
      001023 10 02                 2973         .word      LINK
                                   2974         
                           001025  2975 LINK = . 
      001025 01                    2976         .byte      1
      001026 3F                    2977         .ascii     "?"
      001027                       2978 QUEST:
      001027 CD 04 F7         [ 4] 2979         CALL     AT
      00102A CC 10 04         [ 2] 2980         JP     DOT
                                   2981 
                                   2982 ;; Parsing
                                   2983 
                                   2984 ;       parse   ( b u c -- b u delta ; <string> )
                                   2985 ;       Scan string delimited by c.
                                   2986 ;       Return found string and its offset.
      00102D 10 25                 2987         .word      LINK
                           00102F  2988 LINK = . 
      00102F 05                    2989         .byte      5
      001030 70 61 72 73 65        2990         .ascii     "parse"
      001035                       2991 PARS:
      001035 CD 06 6A         [ 4] 2992         CALL     TEMP
      001038 CD 04 E0         [ 4] 2993         CALL     STORE
      00103B CD 05 C8         [ 4] 2994         CALL     OVER
      00103E CD 05 67         [ 4] 2995         CALL     TOR
      001041 CD 05 9E         [ 4] 2996         CALL     DUPP
      001044 CD 04 AC         [ 4] 2997         CALL     QBRAN
      001047 10 ED                 2998         .word    PARS8
      001049 CD 0A A4         [ 4] 2999         CALL     ONEM
      00104C CD 06 6A         [ 4] 3000         CALL     TEMP
      00104F CD 04 F7         [ 4] 3001         CALL     AT
      001052 CD 0A F6         [ 4] 3002         CALL     BLANK
      001055 CD 08 3A         [ 4] 3003         CALL     EQUAL
      001058 CD 04 AC         [ 4] 3004         CALL     QBRAN
      00105B 10 8E                 3005         .word      PARS3
      00105D CD 05 67         [ 4] 3006         CALL     TOR
      001060 CD 0A F6         [ 4] 3007 PARS1:  CALL     BLANK
      001063 CD 05 C8         [ 4] 3008         CALL     OVER
      001066 CD 05 15         [ 4] 3009         CALL     CAT     ;skip leading blanks ONLY
      001069 CD 08 12         [ 4] 3010         CALL     SUBB
      00106C CD 05 D7         [ 4] 3011         CALL     ZLESS
      00106F CD 07 B3         [ 4] 3012         CALL     INVER
      001072 CD 04 AC         [ 4] 3013         CALL     QBRAN
      001075 10 8B                 3014         .word      PARS2
      001077 CD 0A 97         [ 4] 3015         CALL     ONEP
      00107A CD 04 8D         [ 4] 3016         CALL     DONXT
      00107D 10 60                 3017         .word      PARS1
      00107F CD 05 48         [ 4] 3018         CALL     RFROM
      001082 CD 05 94         [ 4] 3019         CALL     DROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      001085 CD 0B 03         [ 4] 3020         CALL     ZERO
      001088 CC 05 9E         [ 2] 3021         JP     DUPP
      00108B CD 05 48         [ 4] 3022 PARS2:  CALL     RFROM
      00108E CD 05 C8         [ 4] 3023 PARS3:  CALL     OVER
      001091 CD 05 AE         [ 4] 3024         CALL     SWAPP
      001094 CD 05 67         [ 4] 3025         CALL     TOR
      001097 CD 06 6A         [ 4] 3026 PARS4:  CALL     TEMP
      00109A CD 04 F7         [ 4] 3027         CALL     AT
      00109D CD 05 C8         [ 4] 3028         CALL     OVER
      0010A0 CD 05 15         [ 4] 3029         CALL     CAT
      0010A3 CD 08 12         [ 4] 3030         CALL     SUBB    ;scan for delimiter
      0010A6 CD 06 6A         [ 4] 3031         CALL     TEMP
      0010A9 CD 04 F7         [ 4] 3032         CALL     AT
      0010AC CD 0A F6         [ 4] 3033         CALL     BLANK
      0010AF CD 08 3A         [ 4] 3034         CALL     EQUAL
      0010B2 CD 04 AC         [ 4] 3035         CALL     QBRAN
      0010B5 10 BA                 3036         .word      PARS5
      0010B7 CD 05 D7         [ 4] 3037         CALL     ZLESS
      0010BA CD 04 AC         [ 4] 3038 PARS5:  CALL     QBRAN
      0010BD 10 CF                 3039         .word      PARS6
      0010BF CD 0A 97         [ 4] 3040         CALL     ONEP
      0010C2 CD 04 8D         [ 4] 3041         CALL     DONXT
      0010C5 10 97                 3042         .word      PARS4
      0010C7 CD 05 9E         [ 4] 3043         CALL     DUPP
      0010CA CD 05 67         [ 4] 3044         CALL     TOR
      0010CD 20 0F            [ 2] 3045         JRA     PARS7
      0010CF CD 05 48         [ 4] 3046 PARS6:  CALL     RFROM
      0010D2 CD 05 94         [ 4] 3047         CALL     DROP
      0010D5 CD 05 9E         [ 4] 3048         CALL     DUPP
      0010D8 CD 0A 97         [ 4] 3049         CALL     ONEP
      0010DB CD 05 67         [ 4] 3050         CALL     TOR
      0010DE CD 05 C8         [ 4] 3051 PARS7:  CALL     OVER
      0010E1 CD 08 12         [ 4] 3052         CALL     SUBB
      0010E4 CD 05 48         [ 4] 3053         CALL     RFROM
      0010E7 CD 05 48         [ 4] 3054         CALL     RFROM
      0010EA CC 08 12         [ 2] 3055         JP     SUBB
      0010ED CD 05 C8         [ 4] 3056 PARS8:  CALL     OVER
      0010F0 CD 05 48         [ 4] 3057         CALL     RFROM
      0010F3 CC 08 12         [ 2] 3058         JP     SUBB
                                   3059 
                                   3060 ;       PARSE   ( c -- b u ; <string> )
                                   3061 ;       Scan input stream and return
                                   3062 ;       counted string delimited by c.
      0010F6 10 2F                 3063         .word      LINK
                           0010F8  3064 LINK = . 
      0010F8 05                    3065         .byte      5
      0010F9 50 41 52 53 45        3066         .ascii     "PARSE"
      0010FE                       3067 PARSE:
      0010FE CD 05 67         [ 4] 3068         CALL     TOR
      001101 CD 0C 13         [ 4] 3069         CALL     TIB
      001104 CD 06 79         [ 4] 3070         CALL     INN
      001107 CD 04 F7         [ 4] 3071         CALL     AT
      00110A CD 07 99         [ 4] 3072         CALL     PLUS    ;current input buffer pointer
      00110D CD 06 89         [ 4] 3073         CALL     NTIB
      001110 CD 04 F7         [ 4] 3074         CALL     AT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      001113 CD 06 79         [ 4] 3075         CALL     INN
      001116 CD 04 F7         [ 4] 3076         CALL     AT
      001119 CD 08 12         [ 4] 3077         CALL     SUBB    ;remaining count
      00111C CD 05 48         [ 4] 3078         CALL     RFROM
      00111F CD 10 35         [ 4] 3079         CALL     PARS
      001122 CD 06 79         [ 4] 3080         CALL     INN
      001125 CC 0B 73         [ 2] 3081         JP     PSTOR
                                   3082 
                                   3083 ;       .(      ( -- )
                                   3084 ;       Output following string up to next ) .
      001128 10 F8                 3085         .word      LINK
                           00112A  3086 LINK = . 
      00112A 82                    3087 	.byte      IMEDD+2
      00112B 2E 28                 3088         .ascii     ".("
      00112D                       3089 DOTPR:
      00112D CD 04 79         [ 4] 3090         CALL     DOLIT
      001130 00 29                 3091         .word     41	; ")"
      001132 CD 10 FE         [ 4] 3092         CALL     PARSE
      001135 CC 0F 4B         [ 2] 3093         JP     TYPES
                                   3094 
                                   3095 ;       (       ( -- )
                                   3096 ;       Ignore following string up to next ).
                                   3097 ;       A comment.
      001138 11 2A                 3098         .word      LINK
                           00113A  3099 LINK = . 
      00113A 81                    3100 	.byte      IMEDD+1
      00113B 28                    3101         .ascii     "("
      00113C                       3102 PAREN:
      00113C CD 04 79         [ 4] 3103         CALL     DOLIT
      00113F 00 29                 3104         .word     41	; ")"
      001141 CD 10 FE         [ 4] 3105         CALL     PARSE
      001144 CC 07 79         [ 2] 3106         JP     DDROP
                                   3107 
                                   3108 ;       \       ( -- )
                                   3109 ;       Ignore following text till
                                   3110 ;       end of line.
      001147 11 3A                 3111         .word      LINK
                           001149  3112 LINK = . 
      001149 81                    3113 	.byte      IMEDD+1
      00114A 5C                    3114         .ascii     "\"
      00114B                       3115 BKSLA:
      00114B 90 AE 00 10      [ 2] 3116         ldw y,#UCTIB ; #TIB  
      00114F 90 FE            [ 2] 3117         ldw y,(y)
      001151 90 89            [ 2] 3118         pushw y ; count in TIB 
      001153 90 AE 00 0E      [ 2] 3119         ldw y,#UINN ; >IN 
      001157 90 BF 28         [ 2] 3120         ldw YTEMP,y
      00115A 90 85            [ 2] 3121         popw y 
      00115C 91 CF 28         [ 5] 3122         ldw [YTEMP],y
      00115F 81               [ 4] 3123         ret 
                                   3124 
                                   3125 ;       WORD    ( c -- a ; <string> )
                                   3126 ;       Parse a word from input stream
                                   3127 ;       and copy it to code dictionary.
      001160 11 49                 3128         .word      LINK
                           001162  3129 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      001162 04                    3130         .byte      4
      001163 57 4F 52 44           3131         .ascii     "WORD"
      001167                       3132 WORDD:
      001167 CD 10 FE         [ 4] 3133         CALL     PARSE
      00116A CD 0B F1         [ 4] 3134         CALL     HERE
      00116D CD 0A 6C         [ 4] 3135         CALL     CELLP
                           000000  3136 .IF CASE_SENSE 
                                   3137         JP      PACKS 
                           000001  3138 .ELSE                 
      001170 CD 0C B1         [ 4] 3139         CALL     PACKS
                                   3140 ; uppercase TOKEN 
      001173 CD 05 9E         [ 4] 3141         CALL    DUPP 
      001176 CD 0B DA         [ 4] 3142         CALL    COUNT 
      001179 CD 05 67         [ 4] 3143         CALL    TOR 
      00117C CD 04 C3         [ 4] 3144         CALL    BRAN 
      00117F 11 AD                 3145         .word   UPPER2  
      001181                       3146 UPPER:
      001181 CD 05 9E         [ 4] 3147         CALL    DUPP 
      001184 CD 05 15         [ 4] 3148         CALL    CAT
      001187 CD 05 9E         [ 4] 3149         CALL    DUPP 
      00118A CD 04 79         [ 4] 3150         CALL   DOLIT
      00118D 00 61                 3151         .word   'a' 
      00118F CD 04 79         [ 4] 3152         CALL    DOLIT
      001192 00 7B                 3153         .word   'z'+1 
      001194 CD 08 F2         [ 4] 3154         CALL   WITHI 
      001197 CD 04 AC         [ 4] 3155         CALL   QBRAN
      00119A 11 A4                 3156         .word  UPPER1  
      00119C CD 04 79         [ 4] 3157         CALL    DOLIT 
      00119F 00 DF                 3158         .word   0xDF 
      0011A1 CD 05 EA         [ 4] 3159         CALL    ANDD 
      0011A4                       3160 UPPER1:
      0011A4 CD 05 C8         [ 4] 3161         CALL    OVER 
      0011A7 CD 05 04         [ 4] 3162         CALL    CSTOR          
      0011AA CD 0A 97         [ 4] 3163         CALL    ONEP 
      0011AD                       3164 UPPER2: 
      0011AD CD 04 8D         [ 4] 3165         CALL    DONXT
      0011B0 11 81                 3166         .word   UPPER  
      0011B2 CD 05 94         [ 4] 3167         CALL    DROP  
      0011B5 81               [ 4] 3168         RET 
                                   3169 .ENDIF 
                                   3170 
                                   3171 ;       TOKEN   ( -- a ; <string> )
                                   3172 ;       Parse a word from input stream
                                   3173 ;       and copy it to name dictionary.
      0011B6 11 62                 3174         .word      LINK
                           0011B8  3175 LINK = . 
      0011B8 05                    3176         .byte      5
      0011B9 54 4F 4B 45 4E        3177         .ascii     "TOKEN"
      0011BE                       3178 TOKEN:
      0011BE CD 0A F6         [ 4] 3179         CALL     BLANK
      0011C1 CC 11 67         [ 2] 3180         JP     WORDD
                                   3181 
                                   3182 ;; Dictionary search
                                   3183 
                                   3184 ;       NAME>   ( na -- ca )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                                   3185 ;       Return a code address given
                                   3186 ;       a name address.
      0011C4 11 B8                 3187         .word      LINK
                           0011C6  3188 LINK = . 
      0011C6 05                    3189         .byte      5
      0011C7 4E 41 4D 45 3E        3190         .ascii     "NAME>"
      0011CC                       3191 NAMET:
      0011CC CD 0B DA         [ 4] 3192         CALL     COUNT
      0011CF CD 04 79         [ 4] 3193         CALL     DOLIT
      0011D2 00 1F                 3194         .word      31
      0011D4 CD 05 EA         [ 4] 3195         CALL     ANDD
      0011D7 CC 07 99         [ 2] 3196         JP     PLUS
                                   3197 
                                   3198 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   3199 ;       Compare u cells in two
                                   3200 ;       strings. Return 0 if identical.
      0011DA 11 C6                 3201         .word      LINK
                           0011DC  3202 LINK = . 
      0011DC 05                    3203         .byte       5
      0011DD 53 41 4D 45 3F        3204         .ascii     "SAME?"
      0011E2                       3205 SAMEQ:
      0011E2 CD 0A A4         [ 4] 3206         CALL     ONEM
      0011E5 CD 05 67         [ 4] 3207         CALL     TOR
      0011E8 20 29            [ 2] 3208         JRA     SAME2
      0011EA CD 05 C8         [ 4] 3209 SAME1:  CALL     OVER
      0011ED CD 05 5B         [ 4] 3210         CALL     RAT
      0011F0 CD 07 99         [ 4] 3211         CALL     PLUS
      0011F3 CD 05 15         [ 4] 3212         CALL     CAT
      0011F6 CD 05 C8         [ 4] 3213         CALL     OVER
      0011F9 CD 05 5B         [ 4] 3214         CALL     RAT
      0011FC CD 07 99         [ 4] 3215         CALL     PLUS
      0011FF CD 05 15         [ 4] 3216         CALL     CAT
      001202 CD 08 12         [ 4] 3217         CALL     SUBB
      001205 CD 07 48         [ 4] 3218         CALL     QDUP
      001208 CD 04 AC         [ 4] 3219         CALL     QBRAN
      00120B 12 13                 3220         .word      SAME2
      00120D CD 05 48         [ 4] 3221         CALL     RFROM
      001210 CC 05 94         [ 2] 3222         JP     DROP
      001213 CD 04 8D         [ 4] 3223 SAME2:  CALL     DONXT
      001216 11 EA                 3224         .word      SAME1
      001218 CC 0B 03         [ 2] 3225         JP     ZERO
                                   3226 
                                   3227 ;       find    ( a va -- ca na | a F )
                                   3228 ;       Search vocabulary for string.
                                   3229 ;       Return ca and na if succeeded.
      00121B 11 DC                 3230         .word      LINK
                           00121D  3231 LINK = . 
      00121D 04                    3232         .byte      4
      00121E 46 49 4E 44           3233         .ascii     "FIND"
      001222                       3234 FIND:
      001222 CD 05 AE         [ 4] 3235         CALL     SWAPP
      001225 CD 05 9E         [ 4] 3236         CALL     DUPP
      001228 CD 05 15         [ 4] 3237         CALL     CAT
      00122B CD 06 6A         [ 4] 3238         CALL     TEMP
      00122E CD 04 E0         [ 4] 3239         CALL     STORE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      001231 CD 05 9E         [ 4] 3240         CALL     DUPP
      001234 CD 04 F7         [ 4] 3241         CALL     AT
      001237 CD 05 67         [ 4] 3242         CALL     TOR
      00123A CD 0A 6C         [ 4] 3243         CALL     CELLP
      00123D CD 05 AE         [ 4] 3244         CALL     SWAPP
      001240 CD 04 F7         [ 4] 3245 FIND1:  CALL     AT
      001243 CD 05 9E         [ 4] 3246         CALL     DUPP
      001246 CD 04 AC         [ 4] 3247         CALL     QBRAN
      001249 12 7F                 3248         .word      FIND6
      00124B CD 05 9E         [ 4] 3249         CALL     DUPP
      00124E CD 04 F7         [ 4] 3250         CALL     AT
      001251 CD 04 79         [ 4] 3251         CALL     DOLIT
      001254 1F 7F                 3252         .word      MASKK
      001256 CD 05 EA         [ 4] 3253         CALL     ANDD
      001259 CD 05 5B         [ 4] 3254         CALL     RAT
      00125C CD 06 13         [ 4] 3255         CALL     XORR
      00125F CD 04 AC         [ 4] 3256         CALL     QBRAN
      001262 12 6E                 3257         .word      FIND2
      001264 CD 0A 6C         [ 4] 3258         CALL     CELLP
      001267 CD 04 79         [ 4] 3259         CALL     DOLIT
      00126A FF FF                 3260         .word     0xFFFF
      00126C 20 0C            [ 2] 3261         JRA     FIND3
      00126E CD 0A 6C         [ 4] 3262 FIND2:  CALL     CELLP
      001271 CD 06 6A         [ 4] 3263         CALL     TEMP
      001274 CD 04 F7         [ 4] 3264         CALL     AT
      001277 CD 11 E2         [ 4] 3265         CALL     SAMEQ
      00127A CD 04 C3         [ 4] 3266 FIND3:  CALL     BRAN
      00127D 12 8E                 3267         .word      FIND4
      00127F CD 05 48         [ 4] 3268 FIND6:  CALL     RFROM
      001282 CD 05 94         [ 4] 3269         CALL     DROP
      001285 CD 05 AE         [ 4] 3270         CALL     SWAPP
      001288 CD 0A 7B         [ 4] 3271         CALL     CELLM
      00128B CC 05 AE         [ 2] 3272         JP     SWAPP
      00128E CD 04 AC         [ 4] 3273 FIND4:  CALL     QBRAN
      001291 12 9B                 3274         .word      FIND5
      001293 CD 0A 7B         [ 4] 3275         CALL     CELLM
      001296 CD 0A 7B         [ 4] 3276         CALL     CELLM
      001299 20 A5            [ 2] 3277         JRA     FIND1
      00129B CD 05 48         [ 4] 3278 FIND5:  CALL     RFROM
      00129E CD 05 94         [ 4] 3279         CALL     DROP
      0012A1 CD 05 AE         [ 4] 3280         CALL     SWAPP
      0012A4 CD 05 94         [ 4] 3281         CALL     DROP
      0012A7 CD 0A 7B         [ 4] 3282         CALL     CELLM
      0012AA CD 05 9E         [ 4] 3283         CALL     DUPP
      0012AD CD 11 CC         [ 4] 3284         CALL     NAMET
      0012B0 CC 05 AE         [ 2] 3285         JP     SWAPP
                                   3286 
                                   3287 ;       NAME?   ( a -- ca na | a F )
                                   3288 ;       Search vocabularies for a string.
      0012B3 12 1D                 3289         .word      LINK
                           0012B5  3290 LINK = . 
      0012B5 05                    3291         .byte      5
      0012B6 4E 41 4D 45 3F        3292         .ascii     "NAME?"
      0012BB                       3293 NAMEQ:
      0012BB CD 06 DE         [ 4] 3294         CALL   CNTXT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      0012BE CC 12 22         [ 2] 3295         JP     FIND
                                   3296 
                                   3297 ;; Terminal response
                                   3298 
                                   3299 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3300 ;       Backup cursor by one character.
      0012C1 12 B5                 3301         .word      LINK
                           0012C3  3302 LINK = . 
      0012C3 02                    3303         .byte      2
      0012C4 5E 48                 3304         .ascii     "^H"
      0012C6                       3305 BKSP:
      0012C6 CD 05 67         [ 4] 3306         CALL     TOR
      0012C9 CD 05 C8         [ 4] 3307         CALL     OVER
      0012CC CD 05 48         [ 4] 3308         CALL     RFROM
      0012CF CD 05 AE         [ 4] 3309         CALL     SWAPP
      0012D2 CD 05 C8         [ 4] 3310         CALL     OVER
      0012D5 CD 06 13         [ 4] 3311         CALL     XORR
      0012D8 CD 04 AC         [ 4] 3312         CALL     QBRAN
      0012DB 12 F6                 3313         .word      BACK1
      0012DD CD 04 79         [ 4] 3314         CALL     DOLIT
      0012E0 00 08                 3315         .word      BKSPP
      0012E2 CD 04 38         [ 4] 3316         CALL     EMIT
      0012E5 CD 0A A4         [ 4] 3317         CALL     ONEM
      0012E8 CD 0A F6         [ 4] 3318         CALL     BLANK
      0012EB CD 04 38         [ 4] 3319         CALL     EMIT
      0012EE CD 04 79         [ 4] 3320         CALL     DOLIT
      0012F1 00 08                 3321         .word      BKSPP
      0012F3 CC 04 38         [ 2] 3322         JP     EMIT
      0012F6 81               [ 4] 3323 BACK1:  RET
                                   3324 
                                   3325 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3326 ;       Accept and echo key stroke
                                   3327 ;       and bump cursor.
      0012F7 12 C3                 3328         .word      LINK
                           0012F9  3329 LINK = . 
      0012F9 03                    3330         .byte      3
      0012FA 54 41 50              3331         .ascii     "TAP"
      0012FD                       3332 TAP:
      0012FD CD 05 9E         [ 4] 3333         CALL     DUPP
      001300 CD 04 38         [ 4] 3334         CALL     EMIT
      001303 CD 05 C8         [ 4] 3335         CALL     OVER
      001306 CD 05 04         [ 4] 3336         CALL     CSTOR
      001309 CC 0A 97         [ 2] 3337         JP     ONEP
                                   3338 
                                   3339 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3340 ;       Process a key stroke,
                                   3341 ;       CR,LF or backspace.
      00130C 12 F9                 3342         .word      LINK
                           00130E  3343 LINK = . 
      00130E 04                    3344         .byte      4
      00130F 4B 54 41 50           3345         .ascii     "KTAP"
      001313                       3346 KTAP:
      001313 CD 05 9E         [ 4] 3347         CALL     DUPP
      001316 CD 04 79         [ 4] 3348         CALL     DOLIT
                           000001  3349 .if EOL_CR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      001319 00 0D                 3350         .word   CRR
                           000000  3351 .else ; EOL_LF 
                                   3352         .word   LF
                                   3353 .endif 
      00131B CD 06 13         [ 4] 3354         CALL     XORR
      00131E CD 04 AC         [ 4] 3355         CALL     QBRAN
      001321 13 39                 3356         .word      KTAP2
      001323 CD 04 79         [ 4] 3357         CALL     DOLIT
      001326 00 08                 3358         .word      BKSPP
      001328 CD 06 13         [ 4] 3359         CALL     XORR
      00132B CD 04 AC         [ 4] 3360         CALL     QBRAN
      00132E 13 36                 3361         .word      KTAP1
      001330 CD 0A F6         [ 4] 3362         CALL     BLANK
      001333 CC 12 FD         [ 2] 3363         JP     TAP
      001336 CC 12 C6         [ 2] 3364 KTAP1:  JP     BKSP
      001339 CD 05 94         [ 4] 3365 KTAP2:  CALL     DROP
      00133C CD 05 AE         [ 4] 3366         CALL     SWAPP
      00133F CD 05 94         [ 4] 3367         CALL     DROP
      001342 CC 05 9E         [ 2] 3368         JP     DUPP
                                   3369 
                                   3370 ;       accept  ( b u -- b u )
                                   3371 ;       Accept characters to input
                                   3372 ;       buffer. Return with actual count.
      001345 13 0E                 3373         .word      LINK
                           001347  3374 LINK = . 
      001347 06                    3375         .byte      6
      001348 41 43 43 45 50 54     3376         .ascii     "ACCEPT"
      00134E                       3377 ACCEP:
      00134E CD 05 C8         [ 4] 3378         CALL     OVER
      001351 CD 07 99         [ 4] 3379         CALL     PLUS
      001354 CD 05 C8         [ 4] 3380         CALL     OVER
      001357 CD 07 84         [ 4] 3381 ACCP1:  CALL     DDUP
      00135A CD 06 13         [ 4] 3382         CALL     XORR
      00135D CD 04 AC         [ 4] 3383         CALL     QBRAN
      001360 13 82                 3384         .word      ACCP4
      001362 CD 0E E9         [ 4] 3385         CALL     KEY
      001365 CD 05 9E         [ 4] 3386         CALL     DUPP
      001368 CD 0A F6         [ 4] 3387         CALL     BLANK
      00136B CD 04 79         [ 4] 3388         CALL     DOLIT
      00136E 00 7F                 3389         .word      127
      001370 CD 08 F2         [ 4] 3390         CALL     WITHI
      001373 CD 04 AC         [ 4] 3391         CALL     QBRAN
      001376 13 7D                 3392         .word      ACCP2
      001378 CD 12 FD         [ 4] 3393         CALL     TAP
      00137B 20 03            [ 2] 3394         JRA     ACCP3
      00137D CD 13 13         [ 4] 3395 ACCP2:  CALL     KTAP
      001380 20 D5            [ 2] 3396 ACCP3:  JRA     ACCP1
      001382 CD 05 94         [ 4] 3397 ACCP4:  CALL     DROP
      001385 CD 05 C8         [ 4] 3398         CALL     OVER
      001388 CC 08 12         [ 2] 3399         JP     SUBB
                                   3400 
                                   3401 ;       QUERY   ( -- )
                                   3402 ;       Accept input stream to
                                   3403 ;       terminal input buffer.
      00138B 13 47                 3404         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                   3405         
                           00138D  3406 LINK = . 
      00138D 05                    3407         .byte      5
      00138E 51 55 45 52 59        3408         .ascii     "QUERY"
      001393                       3409 QUERY:
      001393 CD 0C 13         [ 4] 3410         CALL     TIB
      001396 CD 04 79         [ 4] 3411         CALL     DOLIT
      001399 00 50                 3412         .word      80
      00139B CD 13 4E         [ 4] 3413         CALL     ACCEP
      00139E CD 06 89         [ 4] 3414         CALL     NTIB
      0013A1 CD 04 E0         [ 4] 3415         CALL     STORE
      0013A4 CD 05 94         [ 4] 3416         CALL     DROP
      0013A7 CD 0B 03         [ 4] 3417         CALL     ZERO
      0013AA CD 06 79         [ 4] 3418         CALL     INN
      0013AD CC 04 E0         [ 2] 3419         JP     STORE
                                   3420 
                                   3421 ;       ABORT   ( -- )
                                   3422 ;       Reset data stack and
                                   3423 ;       jump to QUIT.
      0013B0 13 8D                 3424         .word      LINK
                           0013B2  3425 LINK = . 
      0013B2 05                    3426         .byte      5
      0013B3 41 42 4F 52 54        3427         .ascii     "ABORT"
      0013B8                       3428 ABORT:
      0013B8 CD 14 AF         [ 4] 3429         CALL     PRESE
      0013BB CC 14 CC         [ 2] 3430         JP     QUIT
                                   3431 
                                   3432 ;       abort"  ( f -- )
                                   3433 ;       Run time routine of ABORT".
                                   3434 ;       Abort with a message.
      0013BE 13 B2                 3435         .word      LINK
                           0013C0  3436 LINK = . 
      0013C0 46                    3437 	.byte      COMPO+6
      0013C1 41 42 4F 52 54        3438         .ascii     "ABORT"
      0013C6 22                    3439         .byte      '"'
      0013C7                       3440 ABORQ:
      0013C7 CD 04 AC         [ 4] 3441         CALL     QBRAN
      0013CA 13 E6                 3442         .word      ABOR2   ;text flag
      0013CC CD 0F 7F         [ 4] 3443         CALL     DOSTR
      0013CF CD 0F 21         [ 4] 3444 ABOR1:  CALL     SPACE
      0013D2 CD 0B DA         [ 4] 3445         CALL     COUNT
      0013D5 CD 0F 4B         [ 4] 3446         CALL     TYPES
      0013D8 CD 04 79         [ 4] 3447         CALL     DOLIT
      0013DB 00 3F                 3448         .word     63 ; "?"
      0013DD CD 04 38         [ 4] 3449         CALL     EMIT
      0013E0 CD 0F 69         [ 4] 3450         CALL     CR
      0013E3 CC 13 B8         [ 2] 3451         JP     ABORT   ;pass error string
      0013E6 CD 0F 7F         [ 4] 3452 ABOR2:  CALL     DOSTR
      0013E9 CC 05 94         [ 2] 3453         JP     DROP
                                   3454 
                                   3455 ;; The text interpreter
                                   3456 
                                   3457 ;       $INTERPRET      ( a -- )
                                   3458 ;       Interpret a word. If failed,
                                   3459 ;       try to convert it to an integer.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      0013EC 13 C0                 3460         .word      LINK
                           0013EE  3461 LINK = . 
      0013EE 0A                    3462         .byte      10
      0013EF 24 49 4E 54 45 52 50  3463         .ascii     "$INTERPRET"
             52 45 54
      0013F9                       3464 INTER:
      0013F9 CD 12 BB         [ 4] 3465         CALL     NAMEQ
      0013FC CD 07 48         [ 4] 3466         CALL     QDUP    ;?defined
      0013FF CD 04 AC         [ 4] 3467         CALL     QBRAN
      001402 14 23                 3468         .word      INTE1
      001404 CD 04 F7         [ 4] 3469         CALL     AT
      001407 CD 04 79         [ 4] 3470         CALL     DOLIT
      00140A 40 00                 3471 	.word       0x4000	; COMPO*256
      00140C CD 05 EA         [ 4] 3472         CALL     ANDD    ;?compile only lexicon bits
      00140F CD 13 C7         [ 4] 3473         CALL     ABORQ
      001412 0D                    3474         .byte      13
      001413 20 63 6F 6D 70 69 6C  3475         .ascii     " compile only"
             65 20 6F 6E 6C 79
      001420 CC 04 D3         [ 2] 3476         JP     EXECU
      001423 CD 0E 16         [ 4] 3477 INTE1:  CALL     NUMBQ   ;convert a number
      001426 CD 04 AC         [ 4] 3478         CALL     QBRAN
      001429 13 CF                 3479         .word    ABOR1
      00142B 81               [ 4] 3480         RET
                                   3481 
                                   3482 ;       [       ( -- )
                                   3483 ;       Start  text interpreter.
      00142C 13 EE                 3484         .word      LINK
                           00142E  3485 LINK = . 
      00142E 81                    3486 	.byte      IMEDD+1
      00142F 5B                    3487         .ascii     "["
      001430                       3488 LBRAC:
      001430 CD 04 79         [ 4] 3489         CALL   DOLIT
      001433 13 F9                 3490         .word  INTER
      001435 CD 06 BC         [ 4] 3491         CALL   TEVAL
      001438 CC 04 E0         [ 2] 3492         JP     STORE
                                   3493 
                                   3494 ;       .OK     ( -- )
                                   3495 ;       Display 'ok' while interpreting.
      00143B 14 2E                 3496         .word      LINK
                           00143D  3497 LINK = . 
      00143D 03                    3498         .byte      3
      00143E 2E 4F 4B              3499         .ascii     ".OK"
      001441                       3500 DOTOK:
      001441 CD 04 79         [ 4] 3501         CALL     DOLIT
      001444 13 F9                 3502         .word      INTER
      001446 CD 06 BC         [ 4] 3503         CALL     TEVAL
      001449 CD 04 F7         [ 4] 3504         CALL     AT
      00144C CD 08 3A         [ 4] 3505         CALL     EQUAL
      00144F CD 04 AC         [ 4] 3506         CALL     QBRAN
      001452 14 5B                 3507         .word      DOTO1
      001454 CD 0F A8         [ 4] 3508         CALL     DOTQP
      001457 03                    3509         .byte      3
      001458 20 6F 6B              3510         .ascii     " ok"
      00145B CC 0F 69         [ 2] 3511 DOTO1:  JP     CR
                                   3512 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



                                   3513 ;       ?STACK  ( -- )
                                   3514 ;       Abort if stack underflows.
      00145E 14 3D                 3515         .word      LINK
                           001460  3516 LINK = . 
      001460 06                    3517         .byte      6
      001461 3F 53 54 41 43 4B     3518         .ascii     "?STACK"
      001467                       3519 QSTAC: 
      001467 CD 0B 45         [ 4] 3520         CALL     DEPTH
      00146A CD 05 D7         [ 4] 3521         CALL     ZLESS   ;check only for underflow
      00146D CD 13 C7         [ 4] 3522         CALL     ABORQ
      001470 0B                    3523         .byte      11
      001471 20 75 6E 64 65 72 66  3524         .ascii     " underflow "
             6C 6F 77 20
      00147C 81               [ 4] 3525         RET
                                   3526 
                                   3527 ;       EVAL    ( -- )
                                   3528 ;       Interpret  input stream.
      00147D 14 60                 3529         .word      LINK
                           00147F  3530 LINK = . 
      00147F 04                    3531         .byte      4
      001480 45 56 41 4C           3532         .ascii     "EVAL"
      001484                       3533 EVAL:
      001484 CD 11 BE         [ 4] 3534 EVAL1:  CALL     TOKEN
      001487 CD 05 9E         [ 4] 3535         CALL     DUPP
      00148A CD 05 15         [ 4] 3536         CALL     CAT     ;?input stream empty
      00148D CD 04 AC         [ 4] 3537         CALL     QBRAN
      001490 14 A0                 3538         .word    EVAL2
      001492 CD 06 BC         [ 4] 3539         CALL     TEVAL
      001495 CD 0C 27         [ 4] 3540         CALL     ATEXE
      001498 CD 14 67         [ 4] 3541         CALL     QSTAC   ;evaluate input, check stack
      00149B CD 04 C3         [ 4] 3542         CALL     BRAN
      00149E 14 84                 3543         .word    EVAL1
      0014A0 CD 05 94         [ 4] 3544 EVAL2:  CALL     DROP
      0014A3 CC 14 41         [ 2] 3545         JP       DOTOK
                                   3546 
                                   3547 ;       PRESET  ( -- )
                                   3548 ;       Reset data stack pointer and
                                   3549 ;       terminal input buffer.
      0014A6 14 7F                 3550         .word      LINK
                           0014A8  3551 LINK = . 
      0014A8 06                    3552         .byte      6
      0014A9 50 52 45 53 45 54     3553         .ascii     "PRESET"
      0014AF                       3554 PRESE:
      0014AF CD 04 79         [ 4] 3555         CALL     DOLIT
      0014B2 16 80                 3556         .word      SPP
      0014B4 CD 05 8B         [ 4] 3557         CALL     SPSTO
      0014B7 CD 04 79         [ 4] 3558         CALL     DOLIT
      0014BA 17 00                 3559         .word      TIBB
      0014BC CD 06 89         [ 4] 3560         CALL     NTIB
      0014BF CD 0A 6C         [ 4] 3561         CALL     CELLP
      0014C2 CC 04 E0         [ 2] 3562         JP     STORE
                                   3563 
                                   3564 ;       QUIT    ( -- )
                                   3565 ;       Reset return stack pointer
                                   3566 ;       and start text interpreter.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      0014C5 14 A8                 3567         .word      LINK
                           0014C7  3568 LINK = . 
      0014C7 04                    3569         .byte      4
      0014C8 51 55 49 54           3570         .ascii     "QUIT"
      0014CC                       3571 QUIT:
      0014CC CD 04 79         [ 4] 3572         CALL     DOLIT
      0014CF 17 FF                 3573         .word      RPP
      0014D1 CD 05 32         [ 4] 3574         CALL     RPSTO   ;reset return stack pointer
      0014D4 CD 14 30         [ 4] 3575 QUIT1:  CALL     LBRAC   ;start interpretation
      0014D7 CD 13 93         [ 4] 3576 QUIT2:  CALL     QUERY   ;get input
      0014DA CD 14 84         [ 4] 3577         CALL     EVAL
      0014DD 20 F8            [ 2] 3578         JRA     QUIT2   ;continue till error
                                   3579 
                                   3580 ;; The compiler
                                   3581 
                                   3582 ;       '       ( -- ca )
                                   3583 ;       Search vocabularies for
                                   3584 ;       next word in input stream.
      0014DF 14 C7                 3585         .word      LINK
                           0014E1  3586 LINK = . 
      0014E1 01                    3587         .byte      1
      0014E2 27                    3588         .ascii     "'"
      0014E3                       3589 TICK:
      0014E3 CD 11 BE         [ 4] 3590         CALL     TOKEN
      0014E6 CD 12 BB         [ 4] 3591         CALL     NAMEQ   ;?defined
      0014E9 CD 04 AC         [ 4] 3592         CALL     QBRAN
      0014EC 13 CF                 3593         .word      ABOR1
      0014EE 81               [ 4] 3594         RET     ;yes, push code address
                                   3595 
                                   3596 ;       ALLOT   ( n -- )
                                   3597 ;       Allocate n bytes to RAM 
      0014EF 14 E1                 3598         .word      LINK
                           0014F1  3599         LINK = . 
      0014F1 05                    3600         .byte      5
      0014F2 41 4C 4C 4F 54        3601         .ascii     "ALLOT"
      0014F7                       3602 ALLOT:
      0014F7 CD 06 EC         [ 4] 3603         CALL     VPP
                                   3604 ; must update APP_VP each time VP is modidied
      0014FA CD 0B 73         [ 4] 3605         call PSTOR 
      0014FD CC 1C 43         [ 2] 3606         jp UPDATVP 
                                   3607 
                                   3608 ;       ,       ( w -- )
                                   3609 ;         Compile an integer into
                                   3610 ;         variable space.
      001500 14 F1                 3611         .word      LINK
                           001502  3612 LINK = . 
      001502 01                    3613         .byte      1
      001503 2C                    3614         .ascii     ","
      001504                       3615 COMMA:
      001504 CD 0B F1         [ 4] 3616         CALL     HERE
      001507 CD 05 9E         [ 4] 3617         CALL     DUPP
      00150A CD 0A 6C         [ 4] 3618         CALL     CELLP   ;cell boundary
      00150D CD 06 EC         [ 4] 3619         CALL     VPP
      001510 CD 04 E0         [ 4] 3620         CALL     STORE
      001513 CC 04 E0         [ 2] 3621         JP     STORE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                   3622 
                                   3623 ;       C,      ( c -- )
                                   3624 ;       Compile a byte into
                                   3625 ;       variables space.
      001516 15 02                 3626        .word      LINK
                           001518  3627 LINK = . 
      001518 02                    3628         .byte      2
      001519 43 2C                 3629         .ascii     "C,"
      00151B                       3630 CCOMMA:
      00151B CD 0B F1         [ 4] 3631         CALL     HERE
      00151E CD 05 9E         [ 4] 3632         CALL     DUPP
      001521 CD 0A 97         [ 4] 3633         CALL     ONEP
      001524 CD 06 EC         [ 4] 3634         CALL     VPP
      001527 CD 04 E0         [ 4] 3635         CALL     STORE
      00152A CC 05 04         [ 2] 3636         JP     CSTOR
                                   3637 
                                   3638 ;       [COMPILE]       ( -- ; <string> )
                                   3639 ;       Compile next immediate
                                   3640 ;       word into code dictionary.
      00152D 15 18                 3641         .word      LINK
                           00152F  3642 LINK = . 
      00152F 89                    3643 	.byte      IMEDD+9
      001530 5B 43 4F 4D 50 49 4C  3644         .ascii     "[COMPILE]"
             45 5D
      001539                       3645 BCOMP:
      001539 CD 14 E3         [ 4] 3646         CALL     TICK
      00153C CC 17 FF         [ 2] 3647         JP     JSRC
                                   3648 
                                   3649 ;       COMPILE ( -- )
                                   3650 ;       Compile next jsr in
                                   3651 ;       colon list to code dictionary.
      00153F 15 2F                 3652         .word      LINK
                           001541  3653 LINK = . 
      001541 47                    3654 	.byte      COMPO+7
      001542 43 4F 4D 50 49 4C 45  3655         .ascii     "COMPILE"
      001549                       3656 COMPI:
      001549 CD 05 48         [ 4] 3657         CALL     RFROM
      00154C CD 05 9E         [ 4] 3658         CALL     DUPP
      00154F CD 04 F7         [ 4] 3659         CALL     AT
      001552 CD 17 FF         [ 4] 3660         CALL     JSRC    ;compile subroutine
      001555 CD 0A 6C         [ 4] 3661         CALL     CELLP
      001558 90 93            [ 1] 3662         ldw y,x 
      00155A 90 FE            [ 2] 3663         ldw y,(y)
      00155C 1C 00 02         [ 2] 3664         addw x,#CELLL 
      00155F 90 FC            [ 2] 3665         jp (y)
                                   3666 
                                   3667 ;       LITERAL ( w -- )
                                   3668 ;       Compile tos to dictionary
                                   3669 ;       as an integer literal.
      001561 15 41                 3670         .word      LINK
                           001563  3671 LINK = . 
      001563 87                    3672 	.byte      IMEDD+7
      001564 4C 49 54 45 52 41 4C  3673         .ascii     "LITERAL"
      00156B                       3674 LITER:
      00156B CD 15 49         [ 4] 3675         CALL     COMPI
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      00156E 04 79                 3676         .word DOLIT 
      001570 CC 15 04         [ 2] 3677         JP     COMMA
                                   3678 
                                   3679 ;       $,"     ( -- )
                                   3680 ;       Compile a literal string
                                   3681 ;       up to next " .
      001573 15 63                 3682         .word      LINK
                           001575  3683 LINK = . 
      001575 03                    3684         .byte      3
      001576 24 2C 22              3685         .byte     '$',',','"'
      001579                       3686 STRCQ:
      001579 CD 04 79         [ 4] 3687         CALL     DOLIT
      00157C 00 22                 3688         .word     34	; "
      00157E CD 10 FE         [ 4] 3689         CALL     PARSE
      001581 CD 0B F1         [ 4] 3690         CALL     HERE
      001584 CD 0C B1         [ 4] 3691         CALL     PACKS   ;string to code dictionary
      001587 CD 0B DA         [ 4] 3692         CALL     COUNT
      00158A CD 07 99         [ 4] 3693         CALL     PLUS    ;calculate aligned end of string
      00158D CD 06 EC         [ 4] 3694         CALL     VPP
      001590 CC 04 E0         [ 2] 3695         JP     STORE
                                   3696 
                                   3697 ;; Structures
                                   3698 
                                   3699 ;       FOR     ( -- a )
                                   3700 ;       Start a FOR-NEXT loop
                                   3701 ;       structure in a colon definition.
      001593 15 75                 3702         .word      LINK
                           001595  3703 LINK = . 
      001595 83                    3704 	.byte      IMEDD+3
      001596 46 4F 52              3705         .ascii     "FOR"
      001599                       3706 FOR:
      001599 CD 15 49         [ 4] 3707         CALL     COMPI
      00159C 05 67                 3708         .word TOR 
      00159E CC 0B F1         [ 2] 3709         JP     HERE
                                   3710 
                                   3711 ;       NEXT    ( a -- )
                                   3712 ;       Terminate a FOR-NEXT loop.
      0015A1 15 95                 3713         .word      LINK
                           0015A3  3714 LINK = . 
      0015A3 84                    3715 	.byte      IMEDD+4
      0015A4 4E 45 58 54           3716         .ascii     "NEXT"
      0015A8                       3717 NEXT:
      0015A8 CD 15 49         [ 4] 3718         CALL     COMPI
      0015AB 04 8D                 3719         .word DONXT 
      0015AD CD 07 38         [ 4] 3720         call ADRADJ
      0015B0 CC 15 04         [ 2] 3721         JP     COMMA
                                   3722 
                                   3723 ;       I ( -- n )
                                   3724 ;       stack FOR-NEXT COUNTER 
      0015B3 15 A3                 3725         .word LINK 
                           0015B5  3726         LINK=.
      0015B5 01                    3727         .byte 1 
      0015B6 49                    3728         .ascii "I"
      0015B7                       3729 IFETCH: 
      0015B7 1D 00 02         [ 2] 3730         subw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      0015BA 16 03            [ 2] 3731         ldw y,(3,sp)
      0015BC FF               [ 2] 3732         ldw (x),y 
      0015BD 81               [ 4] 3733         ret 
                                   3734 
                                   3735 ;       BEGIN   ( -- a )
                                   3736 ;       Start an infinite or
                                   3737 ;       indefinite loop structure.
      0015BE 15 B5                 3738         .word      LINK
                           0015C0  3739 LINK = . 
      0015C0 85                    3740 	.byte      IMEDD+5
      0015C1 42 45 47 49 4E        3741         .ascii     "BEGIN"
      0015C6                       3742 BEGIN:
      0015C6 CC 0B F1         [ 2] 3743         JP     HERE
                                   3744 
                                   3745 ;       UNTIL   ( a -- )
                                   3746 ;       Terminate a BEGIN-UNTIL
                                   3747 ;       indefinite loop structure.
      0015C9 15 C0                 3748         .word      LINK
                           0015CB  3749 LINK = . 
      0015CB 85                    3750 	.byte      IMEDD+5
      0015CC 55 4E 54 49 4C        3751         .ascii     "UNTIL"
      0015D1                       3752 UNTIL:
      0015D1 CD 15 49         [ 4] 3753         CALL     COMPI
      0015D4 04 AC                 3754         .word    QBRAN 
      0015D6 CD 07 38         [ 4] 3755         call ADRADJ
      0015D9 CC 15 04         [ 2] 3756         JP     COMMA
                                   3757 
                                   3758 ;       AGAIN   ( a -- )
                                   3759 ;       Terminate a BEGIN-AGAIN
                                   3760 ;       infinite loop structure.
      0015DC 15 CB                 3761         .word      LINK
                           0015DE  3762 LINK = . 
      0015DE 85                    3763 	.byte      IMEDD+5
      0015DF 41 47 41 49 4E        3764         .ascii     "AGAIN"
      0015E4                       3765 AGAIN:
      0015E4 CD 15 49         [ 4] 3766         CALL     COMPI
      0015E7 04 C3                 3767         .word BRAN
      0015E9 CD 07 38         [ 4] 3768         call ADRADJ 
      0015EC CC 15 04         [ 2] 3769         JP     COMMA
                                   3770 
                                   3771 ;       IF      ( -- A )
                                   3772 ;       Begin a conditional branch.
      0015EF 15 DE                 3773         .word      LINK
                           0015F1  3774 LINK = . 
      0015F1 82                    3775 	.byte      IMEDD+2
      0015F2 49 46                 3776         .ascii     "IF"
      0015F4                       3777 IFF:
      0015F4 CD 15 49         [ 4] 3778         CALL     COMPI
      0015F7 04 AC                 3779         .word QBRAN
      0015F9 CD 0B F1         [ 4] 3780         CALL     HERE
      0015FC CD 0B 03         [ 4] 3781         CALL     ZERO
      0015FF CC 15 04         [ 2] 3782         JP     COMMA
                                   3783 
                                   3784 ;       THEN        ( A -- )
                                   3785 ;       Terminate a conditional branch structure.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      001602 15 F1                 3786         .word      LINK
                           001604  3787 LINK = . 
      001604 84                    3788 	.byte      IMEDD+4
      001605 54 48 45 4E           3789         .ascii     "THEN"
      001609                       3790 THENN:
      001609 CD 0B F1         [ 4] 3791         CALL     HERE
      00160C CD 07 38         [ 4] 3792         call ADRADJ 
      00160F CD 05 AE         [ 4] 3793         CALL     SWAPP
      001612 CC 04 E0         [ 2] 3794         JP     STORE
                                   3795 
                                   3796 ;       ELSE        ( A -- A )
                                   3797 ;       Start the false clause in an IF-ELSE-THEN structure.
      001615 16 04                 3798         .word      LINK
                           001617  3799 LINK = . 
      001617 84                    3800 	.byte      IMEDD+4
      001618 45 4C 53 45           3801         .ascii     "ELSE"
      00161C                       3802 ELSEE:
      00161C CD 15 49         [ 4] 3803         CALL     COMPI
      00161F 04 C3                 3804         .word BRAN
      001621 CD 0B F1         [ 4] 3805         CALL     HERE
      001624 CD 0B 03         [ 4] 3806         CALL     ZERO
      001627 CD 15 04         [ 4] 3807         CALL     COMMA
      00162A CD 05 AE         [ 4] 3808         CALL     SWAPP
      00162D CD 0B F1         [ 4] 3809         CALL     HERE
      001630 CD 07 38         [ 4] 3810         call ADRADJ 
      001633 CD 05 AE         [ 4] 3811         CALL     SWAPP
      001636 CC 04 E0         [ 2] 3812         JP     STORE
                                   3813 
                                   3814 ;       AHEAD       ( -- A )
                                   3815 ;       Compile a forward branch instruction.
      001639 16 17                 3816         .word      LINK
                           00163B  3817 LINK = . 
      00163B 85                    3818 	.byte      IMEDD+5
      00163C 41 48 45 41 44        3819         .ascii     "AHEAD"
      001641                       3820 AHEAD:
      001641 CD 15 49         [ 4] 3821         CALL     COMPI
      001644 04 C3                 3822         .word BRAN
      001646 CD 0B F1         [ 4] 3823         CALL     HERE
      001649 CD 0B 03         [ 4] 3824         CALL     ZERO
      00164C CC 15 04         [ 2] 3825         JP     COMMA
                                   3826 
                                   3827 ;       WHILE       ( a -- A a )
                                   3828 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      00164F 16 3B                 3829         .word      LINK
                           001651  3830 LINK = . 
      001651 85                    3831 	.byte      IMEDD+5
      001652 57 48 49 4C 45        3832         .ascii     "WHILE"
      001657                       3833 WHILE:
      001657 CD 15 49         [ 4] 3834         CALL     COMPI
      00165A 04 AC                 3835         .word QBRAN
      00165C CD 0B F1         [ 4] 3836         CALL     HERE
      00165F CD 0B 03         [ 4] 3837         CALL     ZERO
      001662 CD 15 04         [ 4] 3838         CALL     COMMA
      001665 CC 05 AE         [ 2] 3839         JP     SWAPP
                                   3840 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                   3841 ;       REPEAT      ( A a -- )
                                   3842 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      001668 16 51                 3843         .word      LINK
                           00166A  3844 LINK = . 
      00166A 86                    3845         .byte      IMEDD+6
      00166B 52 45 50 45 41 54     3846         .ascii     "REPEAT"
      001671                       3847 REPEA:
      001671 CD 15 49         [ 4] 3848         CALL     COMPI
      001674 04 C3                 3849         .word BRAN
      001676 CD 07 38         [ 4] 3850         call ADRADJ 
      001679 CD 15 04         [ 4] 3851         CALL     COMMA
      00167C CD 0B F1         [ 4] 3852         CALL     HERE
      00167F CD 07 38         [ 4] 3853         call ADRADJ 
      001682 CD 05 AE         [ 4] 3854         CALL     SWAPP
      001685 CC 04 E0         [ 2] 3855         JP     STORE
                                   3856 
                                   3857 ;       AFT         ( a -- a A )
                                   3858 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      001688 16 6A                 3859         .word      LINK
                           00168A  3860 LINK = . 
      00168A 83                    3861 	.byte      IMEDD+3
      00168B 41 46 54              3862         .ascii     "AFT"
      00168E                       3863 AFT:
      00168E CD 05 94         [ 4] 3864         CALL     DROP
      001691 CD 16 41         [ 4] 3865         CALL     AHEAD
      001694 CD 0B F1         [ 4] 3866         CALL     HERE
      001697 CC 05 AE         [ 2] 3867         JP     SWAPP
                                   3868 
                                   3869 ;       ABORT"      ( -- ; <string> )
                                   3870 ;       Conditional abort with an error message.
      00169A 16 8A                 3871         .word      LINK
                           00169C  3872 LINK = . 
      00169C 86                    3873 	.byte      IMEDD+6
      00169D 41 42 4F 52 54        3874         .ascii     "ABORT"
      0016A2 22                    3875         .byte      '"'
      0016A3                       3876 ABRTQ:
      0016A3 CD 15 49         [ 4] 3877         CALL     COMPI
      0016A6 13 C7                 3878         .word ABORQ
      0016A8 CC 15 79         [ 2] 3879         JP     STRCQ
                                   3880 
                                   3881 ;       $"     ( -- ; <string> )
                                   3882 ;       Compile an inline string literal.
      0016AB 16 9C                 3883         .word      LINK
                           0016AD  3884 LINK = . 
      0016AD 82                    3885 	.byte      IMEDD+2
      0016AE 24 22                 3886         .byte     '$','"'
      0016B0                       3887 STRQ:
      0016B0 CD 15 49         [ 4] 3888         CALL     COMPI
      0016B3 0F 9E                 3889         .word STRQP 
      0016B5 CC 15 79         [ 2] 3890         JP     STRCQ
                                   3891 
                                   3892 ;       ."          ( -- ; <string> )
                                   3893 ;       Compile an inline string literal to be typed out at run time.
      0016B8 16 AD                 3894         .word      LINK
                           0016BA  3895 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      0016BA 82                    3896 	.byte      IMEDD+2
      0016BB 2E 22                 3897         .byte     '.','"'
      0016BD                       3898 DOTQ:
      0016BD CD 15 49         [ 4] 3899         CALL     COMPI
      0016C0 0F A8                 3900         .word DOTQP 
      0016C2 CC 15 79         [ 2] 3901         JP     STRCQ
                                   3902 
                                   3903 ;; Name compiler
                                   3904 
                                   3905 ;       ?UNIQUE ( a -- a )
                                   3906 ;       Display a warning message
                                   3907 ;       if word already exists.
      0016C5 16 BA                 3908         .word      LINK
                           0016C7  3909 LINK = . 
      0016C7 07                    3910         .byte      7
      0016C8 3F 55 4E 49 51 55 45  3911         .ascii     "?UNIQUE"
      0016CF                       3912 UNIQU:
      0016CF CD 05 9E         [ 4] 3913         CALL     DUPP
      0016D2 CD 12 BB         [ 4] 3914         CALL     NAMEQ   ;?name exists
      0016D5 CD 04 AC         [ 4] 3915         CALL     QBRAN
      0016D8 16 EE                 3916         .word      UNIQ1
      0016DA CD 0F A8         [ 4] 3917         CALL     DOTQP   ;redef are OK
      0016DD 07                    3918         .byte       7
      0016DE 20 72 65 44 65 66 20  3919         .ascii     " reDef "       
      0016E5 CD 05 C8         [ 4] 3920         CALL     OVER
      0016E8 CD 0B DA         [ 4] 3921         CALL     COUNT
      0016EB CD 0F 4B         [ 4] 3922         CALL     TYPES   ;just in case
      0016EE CC 05 94         [ 2] 3923 UNIQ1:  JP     DROP
                                   3924 
                                   3925 ;       $,n     ( na -- )
                                   3926 ;       Build a new dictionary name
                                   3927 ;       using string at na.
                                   3928 ; compile dans l'espace des variables 
      0016F1 16 C7                 3929         .word      LINK
                           0016F3  3930 LINK = . 
      0016F3 03                    3931         .byte      3
      0016F4 24 2C 6E              3932         .ascii     "$,n"
      0016F7                       3933 SNAME:
      0016F7 CD 05 9E         [ 4] 3934         CALL     DUPP
      0016FA CD 05 15         [ 4] 3935         CALL     CAT     ;?null input
      0016FD CD 04 AC         [ 4] 3936         CALL     QBRAN
      001700 17 2D                 3937         .word      PNAM1
      001702 CD 16 CF         [ 4] 3938         CALL     UNIQU   ;?redefinition
      001705 CD 05 9E         [ 4] 3939         CALL     DUPP
      001708 CD 0B DA         [ 4] 3940         CALL     COUNT
      00170B CD 07 99         [ 4] 3941         CALL     PLUS
      00170E CD 06 EC         [ 4] 3942         CALL     VPP
      001711 CD 04 E0         [ 4] 3943         CALL     STORE
      001714 CD 05 9E         [ 4] 3944         CALL     DUPP
      001717 CD 07 0A         [ 4] 3945         CALL     LAST
      00171A CD 04 E0         [ 4] 3946         CALL     STORE   ;save na for vocabulary link
      00171D CD 0A 7B         [ 4] 3947         CALL     CELLM   ;link address
      001720 CD 06 DE         [ 4] 3948         CALL     CNTXT
      001723 CD 04 F7         [ 4] 3949         CALL     AT
      001726 CD 05 AE         [ 4] 3950         CALL     SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      001729 CD 04 E0         [ 4] 3951         CALL     STORE
      00172C 81               [ 4] 3952         RET     ;save code pointer
      00172D CD 0F 9E         [ 4] 3953 PNAM1:  CALL     STRQP
      001730 05                    3954         .byte      5
      001731 20 6E 61 6D 65        3955         .ascii     " name" ;null input
      001736 CC 13 CF         [ 2] 3956         JP     ABOR1
                                   3957 
                                   3958 ;; FORTH compiler
                                   3959 
                                   3960 ;       $COMPILE        ( a -- )
                                   3961 ;       Compile next word to
                                   3962 ;       dictionary as a token or literal.
      001739 16 F3                 3963         .word      LINK
                           00173B  3964 LINK = . 
      00173B 08                    3965         .byte      8
      00173C 24 43 4F 4D 50 49 4C  3966         .ascii     "$COMPILE"
             45
      001744                       3967 SCOMP:
      001744 CD 12 BB         [ 4] 3968         CALL     NAMEQ
      001747 CD 07 48         [ 4] 3969         CALL     QDUP    ;?defined
      00174A CD 04 AC         [ 4] 3970         CALL     QBRAN
      00174D 17 65                 3971         .word      SCOM2
      00174F CD 04 F7         [ 4] 3972         CALL     AT
      001752 CD 04 79         [ 4] 3973         CALL     DOLIT
      001755 80 00                 3974         .word     0x8000	;  IMEDD*256
      001757 CD 05 EA         [ 4] 3975         CALL     ANDD    ;?immediate
      00175A CD 04 AC         [ 4] 3976         CALL     QBRAN
      00175D 17 62                 3977         .word      SCOM1
      00175F CC 04 D3         [ 2] 3978         JP     EXECU
      001762 CC 17 FF         [ 2] 3979 SCOM1:  JP     JSRC
      001765 CD 0E 16         [ 4] 3980 SCOM2:  CALL     NUMBQ   ;try to convert to number
      001768 CD 04 AC         [ 4] 3981         CALL     QBRAN
      00176B 13 CF                 3982         .word      ABOR1
      00176D CC 15 6B         [ 2] 3983         JP     LITER
                                   3984 
                                   3985 ;       OVERT   ( -- )
                                   3986 ;       Link a new word into vocabulary.
      001770 17 3B                 3987         .word      LINK
                           001772  3988 LINK = . 
      001772 05                    3989         .byte      5
      001773 4F 56 45 52 54        3990         .ascii     "OVERT"
      001778                       3991 OVERT:
      001778 CD 07 0A         [ 4] 3992         CALL     LAST
      00177B CD 04 F7         [ 4] 3993         CALL     AT
      00177E CD 06 DE         [ 4] 3994         CALL     CNTXT
      001781 CC 04 E0         [ 2] 3995         JP     STORE
                                   3996 
                                   3997 ;       ;       ( -- )
                                   3998 ;       Terminate a colon definition.
      001784 17 72                 3999         .word      LINK
                           001786  4000 LINK = . 
      001786 C1                    4001 	.byte      IMEDD+COMPO+1
      001787 3B                    4002         .ascii     ";"
      001788                       4003 SEMIS:
                           000001  4004 .if OPTIMIZE ; more compact and faster
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      001788 CD 04 79         [ 4] 4005         call DOLIT 
      00178B 00 81                 4006         .word 0x81   ; opcode for RET 
      00178D CD 15 1B         [ 4] 4007         call CCOMMA 
                           000000  4008 .else
                                   4009         CALL     COMPI
                                   4010         .word EXIT 
                                   4011 .endif 
      001790 CD 14 30         [ 4] 4012         CALL     LBRAC
      001793 CD 17 78         [ 4] 4013         call OVERT 
      001796 CD 21 9B         [ 4] 4014         CALL FMOVE
      001799 CD 07 48         [ 4] 4015         call QDUP 
      00179C CD 04 AC         [ 4] 4016         call QBRAN 
      00179F 18 CF                 4017         .word SET_RAMLAST 
      0017A1 CD 22 2F         [ 4] 4018         CALL UPDATPTR
      0017A4 81               [ 4] 4019         RET 
                                   4020 
                                   4021 
                                   4022 ;       Terminate an ISR definition 
                                   4023 ;       retourn ca of ISR as double
                                   4024 ;       I; ( -- ud )
      0017A5 17 86                 4025         .word LINK 
                           0017A7  4026         LINK=.
      0017A7 C2                    4027         .byte 2+IMEDD+COMPO 
      0017A8 49 3B                 4028         .ascii "I;" 
      0017AA                       4029 ISEMI:
      0017AA 1D 00 02         [ 2] 4030         subw x,#CELLL  
      0017AD 90 AE 00 80      [ 2] 4031         ldw y,#IRET_CODE 
      0017B1 FF               [ 2] 4032         ldw (x),y 
      0017B2 CD 15 1B         [ 4] 4033         call CCOMMA
      0017B5 CD 14 30         [ 4] 4034         call LBRAC 
      0017B8 CD 22 74         [ 4] 4035         call IFMOVE
      0017BB CD 07 48         [ 4] 4036         call QDUP 
      0017BE CD 04 AC         [ 4] 4037         CALL QBRAN 
      0017C1 18 CF                 4038         .word SET_RAMLAST
      0017C3 CD 06 FA         [ 4] 4039         CALL CPP
      0017C6 CD 04 F7         [ 4] 4040         call AT 
      0017C9 CD 05 AE         [ 4] 4041         call SWAPP 
      0017CC CD 06 FA         [ 4] 4042         CALL CPP 
      0017CF CD 04 E0         [ 4] 4043         call STORE 
      0017D2 CD 1C 2C         [ 4] 4044         call UPDATCP 
      0017D5 CD 1B E9         [ 4] 4045         call EEPVP 
      0017D8 CD 05 94         [ 4] 4046         call DROP 
      0017DB CD 04 F7         [ 4] 4047         call AT 
      0017DE CD 06 EC         [ 4] 4048         call VPP 
      0017E1 CD 04 E0         [ 4] 4049         call STORE 
      0017E4 CC 0B 03         [ 2] 4050         jp ZERO
      0017E7 81               [ 4] 4051         ret           
                                   4052         
                                   4053 
                                   4054 ;       ]       ( -- )
                                   4055 ;       Start compiling words in
                                   4056 ;       input stream.
      0017E8 17 A7                 4057         .word      LINK
                           0017EA  4058 LINK = . 
      0017EA 01                    4059         .byte      1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      0017EB 5D                    4060         .ascii     "]"
      0017EC                       4061 RBRAC:
      0017EC CD 04 79         [ 4] 4062         CALL   DOLIT
      0017EF 17 44                 4063         .word  SCOMP
      0017F1 CD 06 BC         [ 4] 4064         CALL   TEVAL
      0017F4 CC 04 E0         [ 2] 4065         JP     STORE
                                   4066 
                                   4067 ;       CALL,    ( ca -- )
                                   4068 ;       Compile a subroutine call.
      0017F7 17 EA                 4069         .word      LINK
                           0017F9  4070 LINK = . 
      0017F9 05                    4071         .byte      5
      0017FA 43 41 4C 4C 2C        4072         .ascii     "CALL,"
      0017FF                       4073 JSRC:
      0017FF CD 04 79         [ 4] 4074         CALL     DOLIT
      001802 00 CD                 4075         .word     CALLL     ;CALL
      001804 CD 15 1B         [ 4] 4076         CALL     CCOMMA
      001807 CC 15 04         [ 2] 4077         JP     COMMA
                                   4078 
                                   4079 ;       INIT-OFS ( -- )
                                   4080 ;       compute offset to adjust jump address 
                                   4081 ;       set variable OFFSET 
      00180A 17 F9                 4082         .word LINK 
                           00180C  4083         LINK=.
      00180C 08                    4084         .byte 8 
      00180D 49 4E 49 54 2D 4F 46  4085         .ascii "INIT-OFS" 
             53
      001815                       4086 INITOFS:
      001815 CD 06 AB         [ 4] 4087         call TFLASH 
      001818 CD 04 F7         [ 4] 4088         CALL AT 
      00181B CD 05 9E         [ 4] 4089         CALL DUPP 
      00181E CD 04 AC         [ 4] 4090         call QBRAN
      001821 18 32                 4091         .word 1$
      001823 CD 05 94         [ 4] 4092         call DROP  
      001826 CD 06 FA         [ 4] 4093         call CPP 
      001829 CD 04 F7         [ 4] 4094         call AT 
      00182C CD 0B F1         [ 4] 4095         call HERE
      00182F CD 08 12         [ 4] 4096         call SUBB 
      001832 CD 07 2F         [ 4] 4097 1$:     call OFFSET 
      001835 CC 04 E0         [ 2] 4098         jp STORE  
                                   4099 
                                   4100 ;       :       ( -- ; <string> )
                                   4101 ;       Start a new colon definition
                                   4102 ;       using next word as its name.
      001838 18 0C                 4103         .word      LINK
                           00183A  4104 LINK = . 
      00183A 01                    4105         .byte      1
      00183B 3A                    4106         .ascii     ":"
      00183C                       4107 COLON:
      00183C CD 18 15         [ 4] 4108         call INITOFS       
      00183F CD 11 BE         [ 4] 4109         CALL   TOKEN
      001842 CD 16 F7         [ 4] 4110         CALL   SNAME
      001845 CC 17 EC         [ 2] 4111         JP     RBRAC
                                   4112 
                                   4113 ;       I:  ( -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                                   4114 ;       Start interrupt service routine definition
                                   4115 ;       those definition have no name.
      001848 18 3A                 4116         .word LINK
                           00184A  4117         LINK=.
      00184A 02                    4118         .byte 2 
      00184B 49 3A                 4119         .ascii "I:" 
      00184D                       4120 ICOLON:
      00184D CD 18 15         [ 4] 4121         call INITOFS 
      001850 CC 17 EC         [ 2] 4122         jp RBRAC  
                                   4123 
                                   4124 ;       IMMEDIATE       ( -- )
                                   4125 ;       Make last compiled word
                                   4126 ;       an immediate word.
      001853 18 4A                 4127         .word      LINK
                           001855  4128 LINK = . 
      001855 09                    4129         .byte      9
      001856 49 4D 4D 45 44 49 41  4130         .ascii     "IMMEDIATE"
             54 45
      00185F                       4131 IMMED:
      00185F CD 04 79         [ 4] 4132         CALL     DOLIT
      001862 80 00                 4133         .word     0x8000	;  IMEDD*256
      001864 CD 07 0A         [ 4] 4134         CALL     LAST
      001867 CD 04 F7         [ 4] 4135         CALL     AT
      00186A CD 04 F7         [ 4] 4136         CALL     AT
      00186D CD 05 FE         [ 4] 4137         CALL     ORR
      001870 CD 07 0A         [ 4] 4138         CALL     LAST
      001873 CD 04 F7         [ 4] 4139         CALL     AT
      001876 CC 04 E0         [ 2] 4140         JP     STORE
                                   4141 
                                   4142 ;; Defining words
                                   4143 
                                   4144 ;       CREATE  ( -- ; <string> )
                                   4145 ;       Compile a new array
                                   4146 ;       without allocating space.
      001879 18 55                 4147         .word      LINK
                           00187B  4148 LINK = . 
      00187B 06                    4149         .byte      6
      00187C 43 52 45 41 54 45     4150         .ascii     "CREATE"
      001882                       4151 CREAT:
      001882 CD 11 BE         [ 4] 4152         CALL     TOKEN
      001885 CD 16 F7         [ 4] 4153         CALL     SNAME
      001888 CD 17 78         [ 4] 4154         CALL     OVERT        
      00188B CD 15 49         [ 4] 4155         CALL     COMPI 
      00188E 06 4B                 4156         .word DOVAR 
      001890 81               [ 4] 4157         RET
                                   4158 
                                   4159 ;       VARIABLE        ( -- ; <string> )
                                   4160 ;       Compile a new variable
                                   4161 ;       initialized to 0.
      001891 18 7B                 4162         .word      LINK
                           001893  4163 LINK = . 
      001893 08                    4164         .byte      8
      001894 56 41 52 49 41 42 4C  4165         .ascii     "VARIABLE"
             45
      00189C                       4166 VARIA:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                   4167 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      00189C CD 0B F1         [ 4] 4168         CALL HERE
      00189F CD 05 9E         [ 4] 4169         CALL DUPP 
      0018A2 CD 0A 6C         [ 4] 4170         CALL CELLP
      0018A5 CD 06 EC         [ 4] 4171         CALL VPP 
      0018A8 CD 04 E0         [ 4] 4172         CALL STORE
      0018AB CD 18 82         [ 4] 4173         CALL CREAT
      0018AE CD 05 9E         [ 4] 4174         CALL DUPP
      0018B1 CD 15 04         [ 4] 4175         CALL COMMA
      0018B4 CD 0B 03         [ 4] 4176         CALL ZERO
      0018B7 CD 05 AE         [ 4] 4177         call SWAPP 
      0018BA CD 04 E0         [ 4] 4178         CALL STORE
      0018BD CD 21 9B         [ 4] 4179         CALL FMOVE ; move definition to FLASH
      0018C0 CD 07 48         [ 4] 4180         CALL QDUP 
      0018C3 CD 04 AC         [ 4] 4181         CALL QBRAN 
      0018C6 18 CF                 4182         .word SET_RAMLAST   
      0018C8 CD 1C 43         [ 4] 4183         call UPDATVP  ; don't update if variable kept in RAM.
      0018CB CD 22 2F         [ 4] 4184         CALL UPDATPTR
      0018CE 81               [ 4] 4185         RET         
      0018CF                       4186 SET_RAMLAST: 
      0018CF CD 07 0A         [ 4] 4187         CALL LAST 
      0018D2 CD 04 F7         [ 4] 4188         CALL AT 
      0018D5 CD 07 1D         [ 4] 4189         CALL RAMLAST 
      0018D8 CC 04 E0         [ 2] 4190         jp STORE  
                                   4191 
                                   4192 
                                   4193 ;       CONSTANT  ( n -- ; <string> )
                                   4194 ;       Compile a new constant 
                                   4195 ;       n CONSTANT name 
      0018DB 18 93                 4196         .word LINK 
                           0018DD  4197         LINK=. 
      0018DD 08                    4198         .byte 8 
      0018DE 43 4F 4E 53 54 41 4E  4199         .ascii "CONSTANT" 
             54
      0018E6                       4200 CONSTANT:          
      0018E6 CD 11 BE         [ 4] 4201         CALL TOKEN
      0018E9 CD 16 F7         [ 4] 4202         CALL SNAME 
      0018EC CD 17 78         [ 4] 4203         CALL OVERT 
      0018EF CD 15 49         [ 4] 4204         CALL COMPI 
      0018F2 19 10                 4205         .word DOCONST
      0018F4 CD 15 04         [ 4] 4206         CALL COMMA 
      0018F7 CD 21 9B         [ 4] 4207         CALL FMOVE
      0018FA CD 07 48         [ 4] 4208         CALL QDUP 
      0018FD CD 04 AC         [ 4] 4209         CALL QBRAN 
      001900 18 CF                 4210         .word SET_RAMLAST  
      001902 CD 22 2F         [ 4] 4211         CALL UPDATPTR  
      001905 81               [ 4] 4212 1$:     RET          
                                   4213 
                                   4214 ; CONSTANT runtime semantic 
                                   4215 ; doCONST  ( -- n )
      001906 18 DD                 4216         .word LINK 
                           001908  4217         LINK=.
      001908 07                    4218         .byte 7
      001909 44 4F 43 4F 4E 53 54  4219         .ascii "DOCONST"
      001910                       4220 DOCONST:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      001910 1D 00 02         [ 2] 4221         subw x,#CELLL
      001913 90 85            [ 2] 4222         popw y 
      001915 90 FE            [ 2] 4223         ldw y,(y) 
      001917 FF               [ 2] 4224         ldw (x),y 
      001918 81               [ 4] 4225         ret 
                                   4226 
                                   4227 ;----------------------------------
                                   4228 ; create double constant 
                                   4229 ; DCONST ( d -- ; <string> )
                                   4230 ;----------------------------------
      001919 19 08                 4231     .word LINK 
                           00191B  4232     LINK=.
      00191B 06                    4233     .byte 6 
      00191C 44 43 4F 4E 53 54     4234     .ascii "DCONST"
      001922                       4235 DCONST:
      001922 CD 11 BE         [ 4] 4236         CALL TOKEN
      001925 CD 16 F7         [ 4] 4237         CALL SNAME 
      001928 CD 17 78         [ 4] 4238         CALL OVERT 
      00192B CD 15 49         [ 4] 4239         CALL COMPI 
      00192E 19 51                 4240         .word DO_DCONST
      001930 CD 15 04         [ 4] 4241         CALL COMMA
      001933 CD 15 04         [ 4] 4242         CALL COMMA  
      001936 CD 21 9B         [ 4] 4243         CALL FMOVE
      001939 CD 07 48         [ 4] 4244         CALL QDUP 
      00193C CD 04 AC         [ 4] 4245         CALL QBRAN 
      00193F 18 CF                 4246         .word SET_RAMLAST  
      001941 CD 22 2F         [ 4] 4247         CALL UPDATPTR  
      001944 81               [ 4] 4248 1$:     RET          
                                   4249     
                                   4250 ;----------------------------------
                                   4251 ; runtime for DCONST 
                                   4252 ; stack double constant 
                                   4253 ; DO-DCONST ( -- d )
                                   4254 ;-----------------------------------
      001945 19 1B                 4255         .word LINK 
                           001947  4256         LINK=.
      001947 09                    4257         .byte 9 
      001948 44 4F 2D 44 43 4F 4E  4258         .ascii "DO-DCONST"
             53 54
      001951                       4259 DO_DCONST:
      001951 90 85            [ 2] 4260     popw y 
      001953 90 BF 28         [ 2] 4261     ldw YTEMP,y 
      001956 1D 00 04         [ 2] 4262     subw x,#2*CELLL 
      001959 90 FE            [ 2] 4263     ldw y,(y)
      00195B FF               [ 2] 4264     ldw (x),y 
      00195C 90 BE 28         [ 2] 4265     ldw y,YTEMP 
      00195F 90 EE 02         [ 2] 4266     ldw y,(2,y)
      001962 EF 02            [ 2] 4267     ldw (2,x),y 
      001964 81               [ 4] 4268     ret 
                                   4269 
                                   4270 ;; Tools
                                   4271 
                                   4272 ;       _TYPE   ( b u -- )
                                   4273 ;       Display a string. Filter
                                   4274 ;       non-printing characters.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      001965 19 47                 4275         .word      LINK
                           001967  4276 LINK = . 
      001967 05                    4277         .byte      5
      001968 5F 54 59 50 45        4278         .ascii     "_TYPE"
      00196D                       4279 UTYPE:
      00196D CD 05 67         [ 4] 4280         CALL     TOR     ;start count down loop
      001970 20 0F            [ 2] 4281         JRA     UTYP2   ;skip first pass
      001972 CD 05 9E         [ 4] 4282 UTYP1:  CALL     DUPP
      001975 CD 05 15         [ 4] 4283         CALL     CAT
      001978 CD 0B 2D         [ 4] 4284         CALL     TCHAR
      00197B CD 04 38         [ 4] 4285         CALL     EMIT    ;display only printable
      00197E CD 0A 97         [ 4] 4286         CALL     ONEP    ;increment address
      001981 CD 04 8D         [ 4] 4287 UTYP2:  CALL     DONXT
      001984 19 72                 4288         .word      UTYP1   ;loop till done
      001986 CC 05 94         [ 2] 4289         JP     DROP
                                   4290 
                                   4291 ;       dm+     ( a u -- a )
                                   4292 ;       Dump u bytes from ,
                                   4293 ;       leaving a+u on  stack.
      001989 19 67                 4294         .word      LINK
                           00198B  4295 LINK = . 
      00198B 03                    4296         .byte      3
      00198C 64 6D 2B              4297         .ascii     "dm+"
      00198F                       4298 DUMPP:
      00198F CD 05 C8         [ 4] 4299         CALL     OVER
      001992 CD 04 79         [ 4] 4300         CALL     DOLIT
      001995 00 04                 4301         .word      4
      001997 CD 0F D1         [ 4] 4302         CALL     UDOTR   ;display address
      00199A CD 0F 21         [ 4] 4303         CALL     SPACE
      00199D CD 05 67         [ 4] 4304         CALL     TOR     ;start count down loop
      0019A0 20 11            [ 2] 4305         JRA     PDUM2   ;skip first pass
      0019A2 CD 05 9E         [ 4] 4306 PDUM1:  CALL     DUPP
      0019A5 CD 05 15         [ 4] 4307         CALL     CAT
      0019A8 CD 04 79         [ 4] 4308         CALL     DOLIT
      0019AB 00 03                 4309         .word      3
      0019AD CD 0F D1         [ 4] 4310         CALL     UDOTR   ;display numeric data
      0019B0 CD 0A 97         [ 4] 4311         CALL     ONEP    ;increment address
      0019B3 CD 04 8D         [ 4] 4312 PDUM2:  CALL     DONXT
      0019B6 19 A2                 4313         .word      PDUM1   ;loop till done
      0019B8 81               [ 4] 4314         RET
                                   4315 
                                   4316 ;       DUMP    ( a u -- )
                                   4317 ;       Dump u bytes from a,
                                   4318 ;       in a formatted manner.
      0019B9 19 8B                 4319         .word      LINK
                           0019BB  4320 LINK = . 
      0019BB 04                    4321         .byte      4
      0019BC 44 55 4D 50           4322         .ascii     "DUMP"
      0019C0                       4323 DUMP:
      0019C0 CD 06 5B         [ 4] 4324         CALL     BASE
      0019C3 CD 04 F7         [ 4] 4325         CALL     AT
      0019C6 CD 05 67         [ 4] 4326         CALL     TOR
      0019C9 CD 0D A9         [ 4] 4327         CALL     HEX     ;save radix, set hex
      0019CC CD 04 79         [ 4] 4328         CALL     DOLIT
      0019CF 00 10                 4329         .word      16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      0019D1 CD 09 BD         [ 4] 4330         CALL     SLASH   ;change count to lines
      0019D4 CD 05 67         [ 4] 4331         CALL     TOR     ;start count down loop
      0019D7 CD 0F 69         [ 4] 4332 DUMP1:  CALL     CR
      0019DA CD 04 79         [ 4] 4333         CALL     DOLIT
      0019DD 00 10                 4334         .word      16
      0019DF CD 07 84         [ 4] 4335         CALL     DDUP
      0019E2 CD 19 8F         [ 4] 4336         CALL     DUMPP   ;display numeric
      0019E5 CD 07 59         [ 4] 4337         CALL     ROT
      0019E8 CD 07 59         [ 4] 4338         CALL     ROT
      0019EB CD 0F 21         [ 4] 4339         CALL     SPACE
      0019EE CD 0F 21         [ 4] 4340         CALL     SPACE
      0019F1 CD 19 6D         [ 4] 4341         CALL     UTYPE   ;display printable characters
      0019F4 CD 04 8D         [ 4] 4342         CALL     DONXT
      0019F7 19 D7                 4343         .word      DUMP1   ;loop till done
      0019F9 CD 05 94         [ 4] 4344 DUMP3:  CALL     DROP
      0019FC CD 05 48         [ 4] 4345         CALL     RFROM
      0019FF CD 06 5B         [ 4] 4346         CALL     BASE
      001A02 CC 04 E0         [ 2] 4347         JP     STORE   ;restore radix
                                   4348 
                                   4349 ;       .S      ( ... -- ... )
                                   4350 ;        Display  contents of stack.
      001A05 19 BB                 4351         .word      LINK
                           001A07  4352 LINK = . 
      001A07 02                    4353         .byte      2
      001A08 2E 53                 4354         .ascii     ".S"
      001A0A                       4355 DOTS:
      001A0A CD 0F 69         [ 4] 4356         CALL     CR
      001A0D CD 0B 45         [ 4] 4357         CALL     DEPTH   ;stack depth
      001A10 CD 05 67         [ 4] 4358         CALL     TOR     ;start count down loop
      001A13 20 09            [ 2] 4359         JRA     DOTS2   ;skip first pass
      001A15 CD 05 5B         [ 4] 4360 DOTS1:  CALL     RAT
      001A18 CD 0B 5C         [ 4] 4361 	CALL     PICK
      001A1B CD 10 04         [ 4] 4362         CALL     DOT     ;index stack, display contents
      001A1E CD 04 8D         [ 4] 4363 DOTS2:  CALL     DONXT
      001A21 1A 15                 4364         .word      DOTS1   ;loop till done
      001A23 CD 0F A8         [ 4] 4365         CALL     DOTQP
      001A26 05                    4366         .byte      5
      001A27 20 3C 73 70 20        4367         .ascii     " <sp "
      001A2C 81               [ 4] 4368         RET
                                   4369 
                                   4370 ;       >NAME   ( ca -- na | F )
                                   4371 ;       Convert code address
                                   4372 ;       to a name address.
      001A2D 1A 07                 4373         .word      LINK
                           001A2F  4374 LINK = . 
      001A2F 05                    4375         .byte      5
      001A30 3E 4E 41 4D 45        4376         .ascii     ">NAME"
      001A35                       4377 TNAME:
      001A35 CD 06 DE         [ 4] 4378         CALL     CNTXT   ;vocabulary link
      001A38 CD 04 F7         [ 4] 4379 TNAM2:  CALL     AT
      001A3B CD 05 9E         [ 4] 4380         CALL     DUPP    ;?last word in a vocabulary
      001A3E CD 04 AC         [ 4] 4381         CALL     QBRAN
      001A41 1A 5C                 4382         .word      TNAM4
      001A43 CD 07 84         [ 4] 4383         CALL     DDUP
      001A46 CD 11 CC         [ 4] 4384         CALL     NAMET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      001A49 CD 06 13         [ 4] 4385         CALL     XORR    ;compare
      001A4C CD 04 AC         [ 4] 4386         CALL     QBRAN
      001A4F 1A 56                 4387         .word      TNAM3
      001A51 CD 0A 7B         [ 4] 4388         CALL     CELLM   ;continue with next word
      001A54 20 E2            [ 2] 4389         JRA     TNAM2
      001A56 CD 05 AE         [ 4] 4390 TNAM3:  CALL     SWAPP
      001A59 CC 05 94         [ 2] 4391         JP     DROP
      001A5C CD 07 79         [ 4] 4392 TNAM4:  CALL     DDROP
      001A5F CC 0B 03         [ 2] 4393         JP     ZERO
                                   4394 
                                   4395 ;       .ID     ( na -- )
                                   4396 ;        Display  name at address.
      001A62 1A 2F                 4397         .word      LINK
                           001A64  4398 LINK = . 
      001A64 03                    4399         .byte      3
      001A65 2E 49 44              4400         .ascii     ".ID"
      001A68                       4401 DOTID:
      001A68 CD 07 48         [ 4] 4402         CALL     QDUP    ;if zero no name
      001A6B CD 04 AC         [ 4] 4403         CALL     QBRAN
      001A6E 1A 7E                 4404         .word      DOTI1
      001A70 CD 0B DA         [ 4] 4405         CALL     COUNT
      001A73 CD 04 79         [ 4] 4406         CALL     DOLIT
      001A76 00 1F                 4407         .word      0x1F
      001A78 CD 05 EA         [ 4] 4408         CALL     ANDD    ;mask lexicon bits
      001A7B CC 19 6D         [ 2] 4409         JP     UTYPE
      001A7E CD 0F A8         [ 4] 4410 DOTI1:  CALL     DOTQP
      001A81 09                    4411         .byte      9
      001A82 20 6E 6F 4E 61 6D 65  4412         .ascii     " noName"
      001A89 81               [ 4] 4413         RET
                                   4414 
                           000000  4415 WANT_SEE=0
                           000000  4416 .if WANT_SEE 
                                   4417 ;       SEE     ( -- ; <string> )
                                   4418 ;       A simple decompiler.
                                   4419 ;       Updated for byte machines.
                                   4420         .word      LINK
                                   4421 LINK = . 
                                   4422         .byte      3
                                   4423         .ascii     "SEE"
                                   4424 SEE:
                                   4425         CALL     TICK    ;starting address
                                   4426         CALL     CR
                                   4427         CALL     ONEM
                                   4428 SEE1:   CALL     ONEP
                                   4429         CALL     DUPP
                                   4430         CALL     AT
                                   4431         CALL     DUPP
                                   4432         CALL     QBRAN
                                   4433         .word    SEE2
                                   4434         CALL     TNAME   ;?is it a name
                                   4435 SEE2:   CALL     QDUP    ;name address or zero
                                   4436         CALL     QBRAN
                                   4437         .word    SEE3
                                   4438         CALL     SPACE
                                   4439         CALL     DOTID   ;display name
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                   4440         CALL     ONEP
                                   4441         JRA      SEE4
                                   4442 SEE3:   CALL     DUPP
                                   4443         CALL     CAT
                                   4444         CALL     UDOT    ;display number
                                   4445 SEE4:   CALL     NUFQ    ;user control
                                   4446         CALL     QBRAN
                                   4447         .word    SEE1
                                   4448         JP     DROP
                                   4449 .endif ; WANT_SEE 
                                   4450 
                                   4451 ;       WORDS   ( -- )
                                   4452 ;       Display names in vocabulary.
      001A8A 1A 64                 4453         .word      LINK
                           001A8C  4454 LINK = . 
      001A8C 05                    4455         .byte      5
      001A8D 57 4F 52 44 53        4456         .ascii     "WORDS"
      001A92                       4457 WORDS:
      001A92 CD 0F 69         [ 4] 4458         CALL     CR
      001A95 CD 06 DE         [ 4] 4459         CALL     CNTXT   ;only in context
      001A98 CD 04 F7         [ 4] 4460 WORS1:  CALL     AT
      001A9B CD 07 48         [ 4] 4461         CALL     QDUP    ;?at end of list
      001A9E CD 04 AC         [ 4] 4462         CALL     QBRAN
      001AA1 1A B4                 4463         .word      WORS2
      001AA3 CD 05 9E         [ 4] 4464         CALL     DUPP
      001AA6 CD 0F 21         [ 4] 4465         CALL     SPACE
      001AA9 CD 1A 68         [ 4] 4466         CALL     DOTID   ;display a name
      001AAC CD 0A 7B         [ 4] 4467         CALL     CELLM
      001AAF CD 04 C3         [ 4] 4468         CALL     BRAN
      001AB2 1A 98                 4469         .word      WORS1
      001AB4 81               [ 4] 4470 WORS2:  RET
                                   4471 
                                   4472         
                                   4473 ;; Hardware reset
                                   4474 
                                   4475 ;       hi      ( -- )
                                   4476 ;       Display sign-on message.
      001AB5 1A 8C                 4477         .word      LINK
                           001AB7  4478 LINK = . 
      001AB7 02                    4479         .byte      2
      001AB8 68 69                 4480         .ascii     "hi"
      001ABA                       4481 HI:
      001ABA CD 0F 69         [ 4] 4482         CALL     CR
      001ABD CD 0F A8         [ 4] 4483         CALL     DOTQP   ;initialize I/O
      001AC0 0F                    4484         .byte      15
      001AC1 73 74 6D 38 65 46 6F  4485         .ascii     "stm8eForth v"
             72 74 68 20 76
      001ACD 33                    4486 	.byte      VER+'0'
      001ACE 2E                    4487         .byte      '.' 
      001ACF 30                    4488 	.byte      EXT+'0' ;version
      001AD0 CD 0F A8         [ 4] 4489         CALL    DOTQP
                           000001  4490 .if NUCLEO          
      001AD3 12                    4491         .byte 18
      001AD4 20 6F 6E 20 4E 55 43  4492         .ascii  " on NUCLEO-8S208RB"
             4C 45 4F 2D 38 53 32
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



             30 38 52 42
                                   4493 .endif
                           000000  4494 .if DISCOVERY
                                   4495         .byte 19
                                   4496         .ascii  " on STM8S-DISCOVERY"
                                   4497 .endif
                           000000  4498 .if DOORBELL
                                   4499         .byte 16
                                   4500         .ascii " on stm8s105k6b6"
                                   4501 .endif
      001AE6 CC 0F 69         [ 2] 4502         JP     CR
                                   4503 
                           000000  4504 WANT_DEBUG=0
                           000000  4505 .if WANT_DEBUG 
                                   4506 ;       DEBUG      ( -- )
                                   4507 ;       Display sign-on message.
                                   4508 ;        .word      LINK
                                   4509 LINK = . 
                                   4510         .byte      5
                                   4511         .ascii     "DEBUG"
                                   4512 DEBUG:
                                   4513 	CALL DOLIT
                                   4514 	.word 0x65
                                   4515 	CALL EMIT
                                   4516 	CALL DOLIT
                                   4517 	.word 0
                                   4518  	CALL ZLESS 
                                   4519 	CALL DOLIT
                                   4520 	.word 0xFFFE
                                   4521 	CALL ZLESS 
                                   4522 	CALL UPLUS 
                                   4523  	CALL DROP 
                                   4524 	CALL DOLIT
                                   4525 	.word 3
                                   4526 	CALL UPLUS 
                                   4527 	CALL UPLUS 
                                   4528  	CALL DROP
                                   4529 	CALL DOLIT
                                   4530 	.word 0x43
                                   4531 	CALL UPLUS 
                                   4532  	CALL DROP
                                   4533 	CALL EMIT
                                   4534 	CALL DOLIT
                                   4535 	.word 0x4F
                                   4536 	CALL DOLIT
                                   4537 	.word 0x6F
                                   4538  	CALL XORR
                                   4539 	CALL DOLIT
                                   4540 	.word 0xF0
                                   4541  	CALL ANDD
                                   4542 	CALL DOLIT
                                   4543 	.word 0x4F
                                   4544  	CALL ORR
                                   4545 	CALL EMIT
                                   4546 	CALL DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                   4547 	.word 8
                                   4548 	CALL DOLIT
                                   4549 	.word 6
                                   4550  	CALL SWAPP
                                   4551 	CALL OVER
                                   4552 	CALL XORR
                                   4553 	CALL DOLIT
                                   4554 	.word 3
                                   4555 	CALL ANDD 
                                   4556 	CALL ANDD
                                   4557 	CALL DOLIT
                                   4558 	.word 0x70
                                   4559 	CALL UPLUS 
                                   4560 	CALL DROP
                                   4561 	CALL EMIT
                                   4562 	CALL DOLIT
                                   4563 	.word 0
                                   4564 	CALL QBRAN
                                   4565 	.word DEBUG1
                                   4566 	CALL DOLIT
                                   4567 	.word 0x3F
                                   4568 DEBUG1:
                                   4569 	CALL DOLIT
                                   4570 	.word 0xFFFF
                                   4571 	CALL QBRAN
                                   4572 	.word DEBUG2
                                   4573 	CALL DOLIT
                                   4574 	.word 0x74
                                   4575 	CALL BRAN
                                   4576 	.word DEBUG3
                                   4577 DEBUG2:
                                   4578 	CALL DOLIT
                                   4579 	.word 0x21
                                   4580 DEBUG3:
                                   4581 	CALL EMIT
                                   4582 	CALL DOLIT
                                   4583 	.word 0x68
                                   4584 	CALL DOLIT
                                   4585 	.word 0x80
                                   4586 	CALL STORE
                                   4587 	CALL DOLIT
                                   4588 	.word 0x80
                                   4589 	CALL AT
                                   4590 	CALL EMIT
                                   4591 	CALL DOLIT
                                   4592 	.word 0x4D
                                   4593 	CALL TOR
                                   4594 	CALL RAT
                                   4595 	CALL RFROM
                                   4596 	CALL ANDD
                                   4597 	CALL EMIT
                                   4598 	CALL DOLIT
                                   4599 	.word 0x61
                                   4600 	CALL DOLIT
                                   4601 	.word 0xA
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                                   4602 	CALL TOR
                                   4603 DEBUG4:
                                   4604 	CALL DOLIT
                                   4605 	.word 1
                                   4606 	CALL UPLUS 
                                   4607 	CALL DROP
                                   4608 	CALL DONXT
                                   4609 	.word DEBUG4
                                   4610 	CALL EMIT
                                   4611 	CALL DOLIT
                                   4612 	.word 0x656D
                                   4613 	CALL DOLIT
                                   4614 	.word 0x100
                                   4615 	CALL UMSTA
                                   4616 	CALL SWAPP
                                   4617 	CALL DOLIT
                                   4618 	.word 0x100
                                   4619 	CALL UMSTA
                                   4620 	CALL SWAPP 
                                   4621 	CALL DROP
                                   4622 	CALL EMIT
                                   4623 	CALL EMIT
                                   4624 	CALL DOLIT
                                   4625 	.word 0x2043
                                   4626 	CALL DOLIT
                                   4627 	.word 0
                                   4628 	CALL DOLIT
                                   4629 	.word 0x100
                                   4630 	CALL UMMOD
                                   4631 	CALL EMIT
                                   4632 	CALL EMIT
                                   4633 	;JP ORIG
                                   4634 	RET
                                   4635 .endif ; WANT_DEBUG 
                                   4636 
                                   4637 
                                   4638 ;       'BOOT   ( -- a )
                                   4639 ;       The application startup vector.
      001AE9 1A B7                 4640         .word      LINK
                           001AEB  4641 LINK = . 
      001AEB 05                    4642         .byte      5
      001AEC 27 42 4F 4F 54        4643         .ascii     "'BOOT"
      001AF1                       4644 TBOOT:
      001AF1 CD 06 4B         [ 4] 4645         CALL     DOVAR
      001AF4 40 02                 4646         .word    APP_RUN      ;application to boot
                                   4647 
                                   4648 ;       COLD    ( -- )
                                   4649 ;       The hilevel cold start s=ence.
      001AF6 1A EB                 4650         .word      LINK
                           001AF8  4651         LINK = . 
      001AF8 04                    4652         .byte      4
      001AF9 43 4F 4C 44           4653         .ascii     "COLD"
      001AFD                       4654 COLD:
                           000000  4655 .if WANT_DEBUG
                                   4656         CALL DEBUG
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                   4657 .endif ; WANT_DEBUG
      001AFD CD 04 79         [ 4] 4658 COLD1:  CALL     DOLIT
      001B00 00 2B                 4659         .word      UZERO
      001B02 CD 04 79         [ 4] 4660 	CALL     DOLIT
      001B05 00 06                 4661         .word      UPP
      001B07 CD 04 79         [ 4] 4662         CALL     DOLIT
      001B0A 00 1E                 4663 	.word      UEND-UZERO
      001B0C CD 0C 3E         [ 4] 4664         CALL     CMOVE   ;initialize user area
                           000001  4665 .if WANT_FLOAT 
      001B0F CD 24 79         [ 4] 4666         CALL    FINIT 
                                   4667 .endif 
                                   4668 ; if APP_RUN==0 initialize with ca de 'hi'  
      001B12 90 CE 40 02      [ 2] 4669         ldw y,APP_RUN 
      001B16 26 0B            [ 1] 4670         jrne 0$
      001B18 1D 00 02         [ 2] 4671         subw x,#CELLL 
      001B1B 90 AE 1A BA      [ 2] 4672         ldw y,#HI  
      001B1F FF               [ 2] 4673         ldw (x),y
      001B20 CD 1C 1B         [ 4] 4674         call UPDATRUN 
      001B23                       4675 0$:        
                                   4676 ; update LAST with APP_LAST 
                                   4677 ; if APP_LAST > LAST else do the opposite
      001B23 90 CE 40 00      [ 2] 4678         ldw y,APP_LAST 
      001B27 90 B3 1E         [ 2] 4679         cpw y,ULAST 
      001B2A 22 05            [ 1] 4680         jrugt 1$ 
                                   4681 ; save LAST at APP_LAST  
      001B2C CD 1C 03         [ 4] 4682         call UPDATLAST 
      001B2F 20 06            [ 2] 4683         jra 2$
      001B31                       4684 1$: ; update LAST with APP_LAST 
      001B31 90 BF 1E         [ 2] 4685         ldw ULAST,y
      001B34 90 BF 18         [ 2] 4686         ldw UCNTXT,y
      001B37                       4687 2$:  
                                   4688 ; update APP_CP if < app_space 
      001B37 90 CE 40 04      [ 2] 4689         ldw y,APP_CP  
      001B3B 90 B3 1C         [ 2] 4690         cpw y,UCP   
      001B3E 24 06            [ 1] 4691         jruge 3$ 
      001B40 CD 1C 2C         [ 4] 4692         call UPDATCP
      001B43 90 BE 1C         [ 2] 4693         ldw y,UCP   
      001B46                       4694 3$:
      001B46 90 BF 1C         [ 2] 4695         ldw UCP,y                 
                                   4696 ; update UVP with APP_VP  
                                   4697 ; if APP_VP>UVP else do the opposite 
      001B49 90 CE 40 06      [ 2] 4698         ldw y,APP_VP 
      001B4D 90 B3 1A         [ 2] 4699         cpw y,UVP 
      001B50 22 05            [ 1] 4700         jrugt 4$
      001B52 CD 1C 43         [ 4] 4701         call UPDATVP 
      001B55 20 03            [ 2] 4702         jra 6$
      001B57                       4703 4$: ; update UVP with APP_VP 
      001B57 90 BF 1A         [ 2] 4704         ldw UVP,y 
      001B5A                       4705 6$:      
      001B5A CD 14 AF         [ 4] 4706         CALL     PRESE   ;initialize data stack and TIB
      001B5D CD 1A F1         [ 4] 4707         CALL     TBOOT
      001B60 CD 0C 27         [ 4] 4708         CALL     ATEXE   ;application boot
      001B63 CD 17 78         [ 4] 4709         CALL     OVERT
      001B66 CC 14 CC         [ 2] 4710         JP     QUIT    ;start interpretation
                                   4711 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



                                   4712 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



                                   4713         .include "flash.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21 ;  routines to write to FLASH, EEPROM 
                                     22 ;  and OPTION 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26 ;--------------------------------
                                     27 ; initialize FPTR 
                                     28 ; FP!  ( ud -- )
                                     29 ;---------------------------------
      001B69 1A F8                   30     .word LINK 
                           001B6B    31     LINK=.
      001B6B 03                      32     .byte 3 
      001B6C 46 50 21                33     .ascii "FP!"
      001B6F                         34 FPSTOR:
      001B6F 90 93            [ 1]   35     ldw y,x
      001B71 90 FE            [ 2]   36     ldw y,(y)
      001B73 90 9F            [ 1]   37     ld a,yl 
      001B75 B7 36            [ 1]   38     ld FPTR,a 
      001B77 1C 00 02         [ 2]   39     addw x,#CELLL 
      001B7A 90 93            [ 1]   40     ldw y,x 
      001B7C 90 FE            [ 2]   41     ldw y,(y)
      001B7E 90 BF 37         [ 2]   42     ldw PTR16,y
      001B81 1C 00 02         [ 2]   43     addw x,#CELLL 
      001B84 81               [ 4]   44     ret 
                                     45 
                                     46 ;-----------------------------------
                                     47 ; return EEPROM base address 
                                     48 ; as a double 
                                     49 ;  EEPROM  ( -- ud )
                                     50 ;-----------------------------------
      001B85 1B 6B                   51     .word LINK 
                           001B87    52 LINK=.
      001B87 06                      53     .byte 6 
      001B88 45 45 50 52 4F 4D       54     .ascii "EEPROM"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001B8E                         55 EEPROM: 
      001B8E 90 AE 40 00      [ 2]   56     ldw y,#EEPROM_BASE
      001B92 1D 00 04         [ 2]   57     subw x,#2*CELLL 
      001B95 EF 02            [ 2]   58     ldw (2,x),y 
      001B97 90 5F            [ 1]   59     clrw y 
      001B99 FF               [ 2]   60     ldw (x),y 
      001B9A 81               [ 4]   61     ret
                                     62 
                                     63 ;---------------------------------
                                     64 ; return APP_LAST pointer as double
                                     65 ; EEP-LAST ( -- ud )
                                     66 ;---------------------------------
      001B9B 1B 87                   67 	.word LINK 
                           001B9D    68 	LINK=.
      001B9D 08                      69 	.byte 8 
      001B9E 45 45 50 2D 4C 41 53    70 	.ascii "EEP-LAST"
             54
      001BA6                         71 EEPLAST:
      001BA6 1D 00 04         [ 2]   72 	subw x,#2*CELLL 
      001BA9 90 AE 40 00      [ 2]   73 	ldw y,#APP_LAST 
      001BAD EF 02            [ 2]   74 	ldw (2,x),y 
      001BAF 90 5F            [ 1]   75 	clrw y 
      001BB1 FF               [ 2]   76 	ldw (x),y 
      001BB2 81               [ 4]   77 	ret 
                                     78 
                                     79 ;----------------------------------
                                     80 ; return APP_RUN pointer as double	
                                     81 ; EEP-RUN ( -- ud )
                                     82 ;-----------------------------------
      001BB3 1B 9D                   83 	.word LINK 
                           001BB5    84 	LINK=.
      001BB5 07                      85 	.byte 7
      001BB6 45 45 50 2D 52 55 4E    86 	.ascii "EEP-RUN"
      001BBD                         87 EEPRUN:
      001BBD 1D 00 04         [ 2]   88 	subw x,#2*CELLL 
      001BC0 90 AE 40 02      [ 2]   89 	ldw y,#APP_RUN 
      001BC4 EF 02            [ 2]   90 	ldw (2,x),y 
      001BC6 90 5F            [ 1]   91 	clrw y 
      001BC8 FF               [ 2]   92 	ldw (x),y 
      001BC9 81               [ 4]   93 	ret 
                                     94 
                                     95 ;------------------------------------
                                     96 ; return APP_CP pointer as double 
                                     97 ; EEP-CP ( -- ud )
                                     98 ;------------------------------------
      001BCA 1B B5                   99 	.word LINK
                           001BCC   100 	LINK=.
      001BCC 06                     101 	.byte 6 
      001BCD 45 45 50 2D 43 50      102 	.ascii "EEP-CP"
      001BD3                        103 EEPCP:
      001BD3 1D 00 04         [ 2]  104 	subw x,#2*CELLL 
      001BD6 90 AE 40 04      [ 2]  105 	ldw y,#APP_CP  
      001BDA EF 02            [ 2]  106 	ldw (2,x),y 
      001BDC 90 5F            [ 1]  107 	clrw y 
      001BDE FF               [ 2]  108 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001BDF 81               [ 4]  109 	ret 
                                    110 
                                    111 ;------------------------------------
                                    112 ; return APP_VP pointer as double 
                                    113 ; EEP-VP ( -- ud )
                                    114 ;-------------------------------------
      001BE0 1B CC                  115 	.word LINK
                           001BE2   116 	LINK=.
      001BE2 06                     117 	.byte 6
      001BE3 45 45 50 2D 56 50      118 	.ascii "EEP-VP"
      001BE9                        119 EEPVP:
      001BE9 1D 00 04         [ 2]  120 	subw x,#2*CELLL 
      001BEC 90 AE 40 06      [ 2]  121 	ldw y,#APP_VP  
      001BF0 EF 02            [ 2]  122 	ldw (2,x),y 
      001BF2 90 5F            [ 1]  123 	clrw y 
      001BF4 FF               [ 2]  124 	ldw (x),y 
      001BF5 81               [ 4]  125 	ret 
                                    126 
                                    127 ;----------------------------------
                                    128 ; update APP_LAST with LAST 
                                    129 ; UPDAT-LAST ( -- )
                                    130 ;----------------------------------
      001BF6 1B E2                  131 	.word LINK 
                           001BF8   132 	LINK=.
      001BF8 0A                     133 	.byte 10
      001BF9 55 50 44 41 54 2D 4C   134 	.ascii "UPDAT-LAST"
             41 53 54
      001C03                        135 UPDATLAST:
      001C03 CD 07 0A         [ 4]  136 	call LAST
      001C06 CD 04 F7         [ 4]  137 	call AT  
      001C09 CD 1B A6         [ 4]  138 	call EEPLAST
      001C0C CC 1D F9         [ 2]  139 	jp EESTORE 
                                    140 
                                    141 ;---------------------------------
                                    142 ; update APP_RUN 
                                    143 ; UPDAT-RUN ( a -- )
                                    144 ;---------------------------------
      001C0F 1B F8                  145 	.word LINK
                           001C11   146 	LINK=.
      001C11 09                     147 	.byte 9
      001C12 55 50 44 41 54 2D 52   148 	.ascii "UPDAT-RUN"
             55 4E
      001C1B                        149 UPDATRUN:
      001C1B CD 1B BD         [ 4]  150 	call EEPRUN
      001C1E CC 1D F9         [ 2]  151 	jp EESTORE 
                                    152 	
                                    153 ;---------------------------------
                                    154 ; update APP_CP with CP 
                                    155 ; UPDAT-CP ( -- )
                                    156 ;---------------------------------
      001C21 1C 11                  157 	.word LINK 
                           001C23   158 	LINK=.
      001C23 08                     159 	.byte 8 
      001C24 55 50 44 41 54 2D 43   160 	.ascii "UPDAT-CP"
             50
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001C2C                        161 UPDATCP:
      001C2C CD 06 FA         [ 4]  162 	call CPP 
      001C2F CD 04 F7         [ 4]  163 	call AT 
      001C32 CD 1B D3         [ 4]  164 	call EEPCP 
      001C35 CC 1D F9         [ 2]  165 	jp EESTORE 
                                    166 
                                    167 ;----------------------------------
                                    168 ; update APP_VP with VP 
                                    169 ; UPDAT-VP ( -- )
                                    170 ;----------------------------------
      001C38 1C 23                  171 	.word LINK
                           001C3A   172 	LINK=.
      001C3A 08                     173 	.byte 8 
      001C3B 55 50 44 41 54 2D 56   174 	.ascii "UPDAT-VP" 
             50
      001C43                        175 UPDATVP:
      001C43 CD 06 EC         [ 4]  176 	call VPP 
      001C46 CD 04 F7         [ 4]  177 	call AT
      001C49 CD 1B E9         [ 4]  178 	call EEPVP 
      001C4C CC 1D F9         [ 2]  179 	jp EESTORE
                                    180 	
                           000001   181 .if NUCLEO
                                    182 ;----------------------------------
                                    183 ; fetch integer at address over 65535
                                    184 ;  F@   ( ud -- n )
                                    185 ;----------------------------------
      001C4F 1C 3A                  186     .word LINK 
                           001C51   187 LINK=.
      001C51 02                     188     .byte 2
      001C52 46 40                  189     .ascii "F@"
      001C54                        190 FARAT:
      001C54 CD 1B 6F         [ 4]  191     call FPSTOR
      001C57 CC 1D 1C         [ 2]  192 	jp EE_READ 
                                    193 
                                    194 
                                    195 ;-------------------------------------
                                    196 ; fetch C at address over 65535 
                                    197 ; FC@ ( ud -- c)
                                    198 ;-------------------------------------
      001C5A 1C 51                  199     .word LINK
                           001C5C   200     LINK=.
      001C5C 03                     201     .byte 3 
      001C5D 46 43 40               202     .ascii "FC@" 
      001C60                        203 FARCAT:
      001C60 CD 1B 6F         [ 4]  204     call FPSTOR
      001C63 CC 1D 3E         [ 2]  205 	jp EE_CREAD  
                                    206 .endif ; NUCLEO 
                                    207 
                                    208 ;----------------------------------
                                    209 ; UNLOCK EEPROM/OPT for writing/erasing
                                    210 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    211 ;  UNLKEE   ( -- )
                                    212 ;----------------------------------
      001C66 1C 5C                  213     .word LINK 
                           001C68   214 LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001C68 06                     215     .byte 6 
      001C69 55 4E 4C 4B 45 45      216     .ascii "UNLKEE"
      001C6F                        217 UNLKEE:
      001C6F 35 00 50 5B      [ 1]  218 	mov FLASH_CR2,#0 
      001C73 35 FF 50 5C      [ 1]  219 	mov FLASH_NCR2,#0xFF 
      001C77 35 AE 50 64      [ 1]  220 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001C7B 35 56 50 64      [ 1]  221     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001C7F 72 07 50 5F FB   [ 2]  222 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001C84 81               [ 4]  223 	ret
                                    224 
                                    225 ;----------------------------------
                                    226 ; UNLOCK FLASH for writing/erasing
                                    227 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    228 ; UNLKFL  ( -- )
                                    229 ;----------------------------------
      001C85 1C 68                  230     .word LINK 
                           001C87   231 LINK=. 
      001C87 06                     232     .byte 6 
      001C88 55 4E 4C 4B 46 4C      233     .ascii "UNLKFL"    
      001C8E                        234 UNLKFL:
      001C8E 35 00 50 5B      [ 1]  235 	mov FLASH_CR2,#0 
      001C92 35 FF 50 5C      [ 1]  236 	mov FLASH_NCR2,#0xFF 
      001C96 35 56 50 62      [ 1]  237 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001C9A 35 AE 50 62      [ 1]  238 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001C9E 72 03 50 5F FB   [ 2]  239 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001CA3 81               [ 4]  240 	ret
                                    241 
                                    242 ;-----------------------------
                                    243 ; UNLOCK FLASH or EEPROM 
                                    244 ; according to FPTR address 
                                    245 ;  UNLOCK ( -- )
                                    246 ;-----------------------------
      001CA4 1C 87                  247 	.word LINK 
                           001CA6   248 	LINK=.
      001CA6 06                     249 	.byte 6
      001CA7 55 4E 4C 4F 43 4B      250 	.ascii "UNLOCK"
      001CAD                        251 UNLOCK:
                                    252 ; put addr[15:0] in Y, for bounds check.
      001CAD 90 BE 37         [ 2]  253 	ldw y,PTR16   ; Y=addr15:0
                                    254 ; check addr[23:16], if <> 0 then it is extened flash memory
      001CB0 3D 36            [ 1]  255 	tnz FPTR 
      001CB2 26 16            [ 1]  256 	jrne 4$
      001CB4 90 A3 80 00      [ 2]  257     cpw y,#FLASH_BASE
      001CB8 24 10            [ 1]  258     jruge 4$
      001CBA 90 A3 40 00      [ 2]  259 	cpw y,#EEPROM_BASE  
      001CBE 25 0D            [ 1]  260     jrult 9$
      001CC0 90 A3 48 7F      [ 2]  261 	cpw y,#OPTION_END 
      001CC4 22 07            [ 1]  262 	jrugt 9$
      001CC6 CD 1C 6F         [ 4]  263 	call UNLKEE
      001CC9 81               [ 4]  264 	ret 
      001CCA CD 1C 8E         [ 4]  265 4$: call UNLKFL
      001CCD 81               [ 4]  266 9$: ret 
                                    267 
                                    268 ;-------------------------
                                    269 ; LOCK write access to 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                                    270 ; FLASH and EEPROM 
                                    271 ; LOCK ( -- )
                                    272 ;-------------------------
      001CCE 1C A6                  273 	.word LINK 
                           001CD0   274 	LINK=.
      001CD0 04                     275 	.byte 4 
      001CD1 4C 4F 43 4B            276 	.ascii "LOCK" 
      001CD5                        277 LOCK: 
      001CD5 72 13 50 5F      [ 1]  278 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001CD9 72 17 50 5F      [ 1]  279 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001CDD 81               [ 4]  280 	ret 
                                    281 
                                    282 ;-------------------------
                                    283 ; increment FPTR 
                                    284 ; INC-FPTR ( -- )
                                    285 ;-------------------------
      001CDE 1C D0                  286 	.word LINK 
                           001CE0   287 	LINK=. 
      001CE0 08                     288 	.byte 8 
      001CE1 49 4E 43 2D 46 50 54   289 	.ascii "INC-FPTR" 
             52
      001CE9                        290 INC_FPTR:
      001CE9 3C 38            [ 1]  291 	inc PTR8 
      001CEB 26 0C            [ 1]  292 	jrne 1$
      001CED 90 89            [ 2]  293 	pushw y 
      001CEF 90 BE 36         [ 2]  294 	ldw y,FPTR 
      001CF2 90 5C            [ 1]  295 	incw y 
      001CF4 90 BF 36         [ 2]  296 	ldw FPTR,y
      001CF7 90 85            [ 2]  297 	popw y  
      001CF9 81               [ 4]  298 1$: ret 
                                    299 
                                    300 ;------------------------------
                                    301 ; add u to FPTR 
                                    302 ; PTR+ ( u -- )
                                    303 ;------------------------------
      001CFA 1C E0                  304 	.word LINK 
                           001CFC   305 	LINK=.
      001CFC 04                     306 	.byte 4 
      001CFD 50 54 52 2B            307 	.ascii "PTR+"
      001D01                        308 PTRPLUS:
      001D01 90 93            [ 1]  309 	ldw y,x 
      001D03 1C 00 02         [ 2]  310 	addw x,#CELLL 
      001D06 72 B9 00 37      [ 2]  311 	addw y,PTR16 
      001D0A 90 BF 37         [ 2]  312 	ldw PTR16,y  
      001D0D 24 02            [ 1]  313 	jrnc 1$
      001D0F 3C 36            [ 1]  314 	inc FPTR 
      001D11 81               [ 4]  315 1$: ret 
                                    316 
                                    317 ;---------------------------------
                                    318 ; read word at address pointed FPTR
                                    319 ; increment FPTR 
                                    320 ; EE-READ ( -- w )
                                    321 ;------------------------------------
      001D12 1C FC                  322 	.word LINK 
                           001D14   323 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001D14 07                     324 	.byte 7 
      001D15 45 45 2D 52 45 41 44   325 	.ascii "EE-READ"
      001D1C                        326 EE_READ:
      001D1C 1D 00 02         [ 2]  327 	subw x,#CELLL 
      001D1F 92 BC 00 36      [ 5]  328 	ldf a,[FPTR]
      001D23 90 95            [ 1]  329 	ld yh,a 
      001D25 CD 1C E9         [ 4]  330 	call INC_FPTR 
      001D28 92 BC 00 36      [ 5]  331 	ldf a,[FPTR]
      001D2C CD 1C E9         [ 4]  332 	call INC_FPTR 
      001D2F 90 97            [ 1]  333 	ld yl,a 
      001D31 FF               [ 2]  334 	ldw (x),y 
      001D32 81               [ 4]  335 	ret 
                                    336 
                                    337 ;---------------------------------------
                                    338 ; Read byte at address pointed by FPTR 
                                    339 ; EE-CREAD ( -- c )
                                    340 ;---------------------------------------
      001D33 1D 14                  341 	.word LINK 
                           001D35   342 	LINK=.
      001D35 08                     343 	.byte 8
      001D36 45 45 2D 43 52 45 41   344 	.ascii "EE-CREAD" 
             44
      001D3E                        345 EE_CREAD:
      001D3E 1D 00 02         [ 2]  346 	subw x,#CELLL 
      001D41 92 BC 00 36      [ 5]  347 	ldf a,[FPTR]	
      001D45 CD 1C E9         [ 4]  348 	call INC_FPTR
      001D48 90 5F            [ 1]  349 	clrw y 
      001D4A 90 97            [ 1]  350 	ld yl,a 
      001D4C FF               [ 2]  351 	ldw (x),y 
      001D4D 81               [ 4]  352 	ret 
                                    353 
                                    354 ;----------------------------
                                    355 ; write a byte at address pointed 
                                    356 ; by FPTR and increment FPTR.
                                    357 ; Expect pointer already initialized 
                                    358 ; and memory unlocked 
                                    359 ; WR-BYTE ( c -- )
                                    360 ;----------------------------
      001D4E 1D 35                  361 	.word LINK 
                           001D50   362 	LINK=. 
      001D50 07                     363 	.byte 7 
      001D51 57 52 2D 42 59 54 45   364 	.ascii "WR-BYTE" 
                                    365 
      001D58                        366 WR_BYTE:
      001D58 CD 04 65         [ 4]  367 	call FC_XOFF
      001D5B 90 93            [ 1]  368 	ldw y,x 
      001D5D 90 FE            [ 2]  369 	ldw y,(y)
      001D5F 1C 00 02         [ 2]  370 	addw x,#CELLL 
      001D62 90 9F            [ 1]  371 	ld a,yl
      001D64 92 BD 00 36      [ 4]  372 	ldf [FPTR],a
      001D68 72 05 50 5F FB   [ 2]  373 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001D6D CD 04 4F         [ 4]  374 	call FC_XON
      001D70 CC 1C E9         [ 2]  375 	jp INC_FPTR 
                                    376 
                                    377 ;---------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                                    378 ; write a word at address pointed 
                                    379 ; by FPTR and increment FPTR 
                                    380 ; Expect pointer already initialzed 
                                    381 ; and memory unlocked 
                                    382 ; WR-WORD ( w -- )
                                    383 ;---------------------------------------
      001D73 1D 50                  384 	.word LINK 
                           001D75   385 	LINK=.
      001D75 07                     386 	.byte 7 
      001D76 57 52 2D 57 4F 52 44   387 	.ascii "WR-WORD" 
      001D7D                        388 WR_WORD:
      001D7D CD 04 65         [ 4]  389 	call FC_XOFF
      001D80 90 93            [ 1]  390 	ldw y,x
      001D82 90 FE            [ 2]  391 	ldw y,(y)
      001D84 1C 00 02         [ 2]  392 	addw x,#CELLL 
      001D87 90 9E            [ 1]  393 	ld a,yh 
      001D89 92 BD 00 36      [ 4]  394 	ldf [FPTR],a
      001D8D 72 05 50 5F FB   [ 2]  395 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001D92 CD 1C E9         [ 4]  396 	call INC_FPTR 
      001D95 90 9F            [ 1]  397 	ld a,yl 
      001D97 92 BD 00 36      [ 4]  398 	ldf [FPTR],a
      001D9B 72 05 50 5F FB   [ 2]  399 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001DA0 CD 04 4F         [ 4]  400 	call FC_XON
      001DA3 CC 1C E9         [ 2]  401 	jp INC_FPTR 
                                    402 
                                    403 
                                    404 ;---------------------------------------
                                    405 ; write a byte to FLASH or EEPROM/OPTION  
                                    406 ; EEC!  (c ud -- )
                                    407 ;---------------------------------------
      001DA6 1D 75                  408     .word LINK 
                           001DA8   409 	LINK=.
      001DA8 04                     410     .byte 4 
      001DA9 45 45 43 21            411     .ascii "EEC!"
                                    412 	; local variables 
                           000001   413 	BTW = 1   ; byte to write offset on stack
                           000002   414     OPT = 2 
                           000002   415 	VSIZE = 2
      001DAD                        416 EECSTORE:
      001DAD 52 02            [ 2]  417 	sub sp,#VSIZE
      001DAF CD 1B 6F         [ 4]  418     call FPSTOR
      001DB2 E6 01            [ 1]  419 	ld a,(1,x)
      001DB4 43               [ 1]  420 	cpl a 
      001DB5 6B 01            [ 1]  421 	ld (BTW,sp),a ; byte to write 
      001DB7 0F 02            [ 1]  422 	clr (OPT,sp)  ; OPTION flag
      001DB9 CD 1C AD         [ 4]  423 	call UNLOCK 
                                    424 	; check if option
      001DBC 3D 36            [ 1]  425 	tnz FPTR 
      001DBE 26 19            [ 1]  426 	jrne 2$
      001DC0 90 BE 37         [ 2]  427 	ldw y,PTR16 
      001DC3 90 A3 48 00      [ 2]  428 	cpw y,#OPTION_BASE
      001DC7 2B 10            [ 1]  429 	jrmi 2$
      001DC9 90 A3 48 80      [ 2]  430 	cpw y,#OPTION_END+1
      001DCD 2A 0A            [ 1]  431 	jrpl 2$
      001DCF 03 02            [ 1]  432 	cpl (OPT,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                                    433 	; OPTION WRITE require this UNLOCK 
      001DD1 72 1E 50 5B      [ 1]  434     bset FLASH_CR2,#FLASH_CR2_OPT
      001DD5 72 1F 50 5C      [ 1]  435     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001DD9                        436 2$: 
      001DD9 CD 1D 58         [ 4]  437 	call WR_BYTE 	
      001DDC 0D 02            [ 1]  438 	tnz (OPT,sp)
      001DDE 27 0D            [ 1]  439 	jreq 3$ 
      001DE0 7B 01            [ 1]  440     ld a,(BTW,sp)
      001DE2 90 5F            [ 1]  441     clrw y
      001DE4 90 97            [ 1]  442 	ld yl,a 
      001DE6 1D 00 02         [ 2]  443 	subw x,#CELLL 
      001DE9 FF               [ 2]  444 	ldw (x),y 
      001DEA CD 1D 58         [ 4]  445 	call WR_BYTE
      001DED                        446 3$: 
      001DED CD 1C D5         [ 4]  447 	call LOCK 
      001DF0 5B 02            [ 2]  448 	addw sp,#VSIZE 
      001DF2 81               [ 4]  449     ret
                                    450 
                                    451 ;------------------------------
                                    452 ; write integer in FLASH|EEPROM
                                    453 ; EE! ( n ud -- )
                                    454 ;------------------------------
      001DF3 1D A8                  455 	.word LINK 
                           001DF5   456 	LINK=.
      001DF5 03                     457 	.byte 3 
      001DF6 45 45 21               458 	.ascii "EE!"
      001DF9                        459 EESTORE:
      001DF9 CD 1B 6F         [ 4]  460 	call FPSTOR 
      001DFC CD 1C AD         [ 4]  461 	call UNLOCK 
      001DFF 90 93            [ 1]  462 	ldw y,x 
      001E01 90 FE            [ 2]  463 	ldw y,(y)
      001E03 90 89            [ 2]  464 	pushw y 
      001E05 90 5E            [ 1]  465 	swapw y 
      001E07 FF               [ 2]  466 	ldw (x),y 
      001E08 CD 1D 58         [ 4]  467 	call WR_BYTE 
      001E0B 90 85            [ 2]  468 	popw y 
      001E0D 1D 00 02         [ 2]  469 	subw x,#CELLL
      001E10 FF               [ 2]  470 	ldw (x),y 
      001E11 CD 1D 58         [ 4]  471 	call WR_BYTE
      001E14 CC 1C D5         [ 2]  472 	jp LOCK 
                                    473 
                                    474 
                                    475 ;----------------------------
                                    476 ; Erase flash memory row 
                                    477 ; stm8s208 as 128 bytes rows
                                    478 ; ROW-ERASE ( ud -- )
                                    479 ;----------------------------
      001E17 1D F5                  480 	.word LINK 
                           001E19   481 	LINK=. 
      001E19 09                     482 	.byte 9 
      001E1A 52 4F 57 2D 45 52 41   483 	.ascii "ROW-ERASE" 
             53 45
      001E23                        484 row_erase:
      001E23 CD 04 65         [ 4]  485 	call FC_XOFF
      001E26 CD 1B 6F         [ 4]  486 	call FPSTOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                    487 ;code must be execute from RAM 
                                    488 ;copy routine to PAD 
      001E29 1D 00 02         [ 2]  489 	subw x,#CELLL 
      001E2C 90 AE 1E 7C      [ 2]  490 	ldw y,#row_erase_proc
      001E30 FF               [ 2]  491 	ldw (x),y 
      001E31 CD 0C 02         [ 4]  492 	call PAD 
      001E34 90 AE 1E A3      [ 2]  493 	ldw y,#row_erase_proc_end 
      001E38 72 A2 1E 7C      [ 2]  494 	subw y,#row_erase_proc
      001E3C 1D 00 02         [ 2]  495 	subw x,#CELLL 
      001E3F FF               [ 2]  496 	ldw (x),y 
      001E40 CD 0C 3E         [ 4]  497 	call CMOVE 
      001E43                        498 block_erase:
      001E43 90 BE 37         [ 2]  499 	ldw y,FPTR+1
      001E46 90 A3 2A 80      [ 2]  500 	cpw y,#app_space 
      001E4A 2A 19            [ 1]  501 	jrpl erase_flash 
                                    502 ; erase EEPROM block
      001E4C 90 A3 40 00      [ 2]  503 	cpw y,#EEPROM_BASE 
      001E50 24 04            [ 1]  504 	jruge 1$
      001E52 CD 04 4F         [ 4]  505 	call FC_XON
      001E55 81               [ 4]  506 	ret ; bad address 
      001E56 90 A3 47 FF      [ 2]  507 1$: cpw y,#EEPROM_END 
      001E5A 23 04            [ 2]  508 	jrule 2$ 
      001E5C CD 04 4F         [ 4]  509 	call FC_XON
      001E5F 81               [ 4]  510 	ret ; bad address 
      001E60                        511 2$:	
      001E60 CD 1C 6F         [ 4]  512 	call UNLKEE 
      001E63 20 03            [ 2]  513 	jra proceed_erase
                                    514 ; erase flash block:
      001E65                        515 erase_flash:
      001E65 CD 1C 8E         [ 4]  516 	call UNLKFL 
      001E68                        517 proceed_erase:
      001E68 CD 0C 02         [ 4]  518 	call PAD 
      001E6B 90 93            [ 1]  519 	ldw y,x
      001E6D 90 FE            [ 2]  520 	ldw y,(y)
      001E6F 1C 00 02         [ 2]  521 	addw x,#CELLL  
      001E72 90 FD            [ 4]  522 	call (y) 
      001E74 72 17 50 5F      [ 1]  523 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001E78 CD 04 4F         [ 4]  524 	call FC_XON
      001E7B 81               [ 4]  525 	ret 
                                    526 
                                    527 ; this routine is to be copied to PAD 
      001E7C                        528 row_erase_proc:
      001E7C 35 20 50 5B      [ 1]  529 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001E80 35 DF 50 5C      [ 1]  530 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001E84 4F               [ 1]  531 	clr a 
      001E85 90 5F            [ 1]  532 	clrw y 
      001E87 91 A7 00 36      [ 1]  533 	ldf ([FPTR],y),a
      001E8B 90 5C            [ 1]  534     incw y
      001E8D 91 A7 00 36      [ 1]  535 	ldf ([FPTR],y),a
      001E91 90 5C            [ 1]  536     incw y
      001E93 91 A7 00 36      [ 1]  537 	ldf ([FPTR],y),a
      001E97 90 5C            [ 1]  538     incw y
      001E99 91 A7 00 36      [ 1]  539 	ldf ([FPTR],y),a
      001E9D 72 05 50 5F FB   [ 2]  540 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001EA2 81               [ 4]  541 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001EA3                        542 row_erase_proc_end:
                                    543 
                                    544 
                                    545 ;-----------------------------------
                                    546 ; block programming must be 
                                    547 ; executed from RAM 
                                    548 ; initial contidions: 
                                    549 ; 		memory unlocked
                                    550 ;       FPTR initialized 
                                    551 ; input: 
                                    552 ;    x   buffer address 
                                    553 ;-----------------------------------
                           000001   554 	BCNT=1 
      001EA3                        555 copy_buffer:
      001EA3 4B 80            [ 1]  556 	push #BLOCK_SIZE  
                                    557 ;enable block programming 
      001EA5 72 10 50 5B      [ 1]  558 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001EA9 72 11 50 5C      [ 1]  559 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001EAD 90 5F            [ 1]  560 	clrw y
      001EAF F6               [ 1]  561 1$:	ld a,(x)
      001EB0 91 A7 00 36      [ 1]  562 	ldf ([FPTR],y),a
      001EB4 5C               [ 1]  563 	incw x 
      001EB5 90 5C            [ 1]  564 	incw y 
      001EB7 0A 01            [ 1]  565 	dec (BCNT,sp)
      001EB9 26 F4            [ 1]  566 	jrne 1$
                                    567 ; wait EOP bit 
      001EBB 72 05 50 5F FB   [ 2]  568 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001EC0 84               [ 1]  569 	pop a ; remove BCNT from stack 
      001EC1 81               [ 4]  570 	ret 
      001EC2                        571 copy_buffer_end:
                                    572 
                                    573 ;-------------------------
                                    574 ; move program_row to RAM 
                                    575 ; in TIB 
                                    576 ;------------------------
      001EC2                        577 copy_prog_to_ram:
      001EC2 1D 00 06         [ 2]  578 	subw x,#6
      001EC5 90 AE 1E A3      [ 2]  579 	ldw y,#copy_buffer 
      001EC9 EF 04            [ 2]  580 	ldw (4,x),y 
      001ECB 90 AE 17 00      [ 2]  581 	ldw y,#TIBBASE
      001ECF EF 02            [ 2]  582 	ldw (2,x),y 
      001ED1 90 AE 1E C2      [ 2]  583 	ldw y,#copy_buffer_end 
      001ED5 72 A2 1E A3      [ 2]  584 	subw y,#copy_buffer  
      001ED9 FF               [ 2]  585 	ldw (x),y 
      001EDA CD 0C 3E         [ 4]  586 	call CMOVE 
      001EDD 81               [ 4]  587 	ret 
                                    588 
                                    589 
                                    590 ;-----------------------------
                                    591 ; write a row in FLASH/EEPROM 
                                    592 ; WR-ROW ( a ud -- )
                                    593 ; a -> address 128 byte buffer to write 
                                    594 ; ud ->  row address in FLASH|EEPROM 
                                    595 ;-----------------------------
      001EDE 1E 19                  596 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                           001EE0   597 	LINK=.
      001EE0 06                     598 	.byte 6 
      001EE1 57 52 2D 52 4F 57      599 	.ascii "WR-ROW"
      001EE7                        600 write_row:
      001EE7 CD 04 65         [ 4]  601 	call FC_XOFF
      001EEA CD 1B 6F         [ 4]  602 	call FPSTOR
                                    603 ; align to FLASH block 
      001EED A6 80            [ 1]  604 	ld a,#0x80 
      001EEF B4 38            [ 1]  605 	and a,PTR8 
      001EF1 B7 38            [ 1]  606 	ld PTR8,a  
      001EF3 CD 1E C2         [ 4]  607 	call copy_prog_to_ram
      001EF6 CD 1C AD         [ 4]  608 	call UNLOCK
      001EF9 90 93            [ 1]  609 	ldw y,x 
      001EFB 90 FE            [ 2]  610 	ldw y,(y)
      001EFD 1C 00 02         [ 2]  611 	addw x,#CELLL 
      001F00 89               [ 2]  612 	pushw x 
      001F01 93               [ 1]  613 	ldw x,y ; buffer address in x 
      001F02 CD 17 00         [ 4]  614 	call TIBBASE
      001F05 CD 1C D5         [ 4]  615 	call LOCK
      001F08 85               [ 2]  616 	popw x 
      001F09 CD 04 4F         [ 4]  617 	call FC_XON 
      001F0C 81               [ 4]  618 	ret 
                                    619 
                                    620 ;-------------------------------------
                                    621 ; change value of OPTION register 
                                    622 ; SET-OPT (c n -- ) 
                                    623 ; c new value.
                                    624 ; n OPT  number {1..7}
                                    625 ;--------------------------------------
      001F0D 1E E0                  626 		.word LINK 
                           001F0F   627 		LINK=.
      001F0F 07                     628 		.byte 7 
      001F10 53 45 54 2D 4F 50 54   629 		.ascii "SET-OPT" 
      001F17                        630 set_option: 
      001F17 90 93            [ 1]  631 		ldw y,x 
      001F19 90 FE            [ 2]  632 		ldw y,(y)
      001F1B 27 06            [ 1]  633 		jreq 1$
      001F1D 90 A3 00 07      [ 2]  634 		cpw y,#7 
      001F21 23 04            [ 2]  635 		jrule 2$ 
                                    636 ; invalid OPTION number 		
      001F23 1C 00 04         [ 2]  637 1$:		addw x,#2*CELLL
      001F26 81               [ 4]  638 		ret
      001F27 90 58            [ 2]  639 2$:		sllw y 
      001F29 72 A9 47 FF      [ 2]  640 		addw y,#OPTION_BASE-1
      001F2D FF               [ 2]  641 		ldw (x),y 
      001F2E 1D 00 02         [ 2]  642 		subw x,#CELLL 
      001F31 90 5F            [ 1]  643 		clrw y 
      001F33 FF               [ 2]  644 		ldw (x),y 
      001F34 CD 1D AD         [ 4]  645 		call EECSTORE
      001F37 81               [ 4]  646 		ret 
                                    647 
                                    648 
                                    649 
                                    650 ;--------------------------------------
                                    651 ; reset system to its original state 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



                                    652 ; before any user modification
                                    653 ; PRISTINE ( -- )
                                    654 ;-------------------------------------
      001F38 1F 0F                  655 	.word LINK  
                           001F3A   656 	LINK=.
      001F3A 08                     657 	.byte 8 
      001F3B 50 52 49 53 54 49 4E   658 	.ascii "PRISTINE"
             45
      001F43                        659 pristine:
                                    660 ;;; erase EEPROM
      001F43 CD 1B 8E         [ 4]  661 	call EEPROM 
      001F46 CD 07 84         [ 4]  662 1$:	call DDUP 
      001F49 CD 1E 23         [ 4]  663 	call row_erase
      001F4C 90 93            [ 1]  664 	ldw y,x 
      001F4E 90 EE 02         [ 2]  665 	ldw y,(2,y)
      001F51 72 A9 00 80      [ 2]  666 	addw y,#BLOCK_SIZE
      001F55 EF 02            [ 2]  667 	ldw (2,x),y
      001F57 90 A3 48 00      [ 2]  668 	cpw y,#OPTION_BASE 
      001F5B 25 E9            [ 1]  669 	jrult 1$
                                    670 ;;; reset OPTION to default values
      001F5D 90 AE 00 01      [ 2]  671 	ldw y,#1 ; OPT1 
      001F61 FF               [ 2]  672 2$:	ldw (x),y   
      001F62 90 5F            [ 1]  673 	clrw y 
      001F64 EF 02            [ 2]  674 	ldw (2,x),y  ; ( 0 1 -- ) 
      001F66 CD 07 84         [ 4]  675 	call DDUP    ; ( 0 1 0 1 -- )  
      001F69 CD 1F 17         [ 4]  676 	call set_option
      001F6C 90 93            [ 1]  677 	ldw y,x 
      001F6E 90 FE            [ 2]  678 	ldw y,(y)
      001F70 90 5C            [ 1]  679 	incw y  ; next OPTION 
      001F72 90 A3 00 08      [ 2]  680 	cpw y,#8 
      001F76 25 E9            [ 1]  681 	jrult 2$
                                    682 ;;; erase first row of app_space 	
      001F78 90 AE 2A 80      [ 2]  683 	ldw y,#app_space
      001F7C EF 02            [ 2]  684 	ldw (2,x),y  
      001F7E 90 5F            [ 1]  685 	clrw y 
      001F80 FF               [ 2]  686 	ldw (x),y ; ( app_space 0 -- )
      001F81 CD 1E 23         [ 4]  687 	call row_erase 
                                    688 ; reset interrupt vectors 
      001F84 1D 00 02         [ 2]  689 	subw x,#CELLL 
      001F87 90 5F            [ 1]  690 	clrw y  
      001F89 FF               [ 2]  691 4$:	ldw (x),y  ; ( n -- ) int# 
      001F8A CD 05 9E         [ 4]  692 	call DUPP  
      001F8D CD 1F AA         [ 4]  693 	call reset_vector
      001F90 90 93            [ 1]  694 	ldw y,x 
      001F92 90 FE            [ 2]  695 	ldw y,(y)
      001F94 90 5C            [ 1]  696 	incw y   ; next vector 
      001F96 90 A3 00 19      [ 2]  697 	cpw y,#25 
      001F9A 25 ED            [ 1]  698 	jrult 4$
      001F9C CC 00 00         [ 2]  699 	jp NonHandledInterrupt ; reset MCU
                                    700 
                                    701 ;------------------------------
                                    702 ; reset an interrupt vector 
                                    703 ; to its initial value 
                                    704 ; i.e. NonHandledInterrupt
                                    705 ; RST-IVEC ( n -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



                                    706 ;-----------------------------
      001F9F 1F 3A                  707 	.word LINK 
                           001FA1   708 	LINK=. 
      001FA1 08                     709 	.byte 8 
      001FA2 52 53 54 2D 49 56 45   710 	.ascii "RST-IVEC"
             43
      001FAA                        711 reset_vector:
      001FAA 90 93            [ 1]  712 	ldw y,x
      001FAC 1C 00 02         [ 2]  713 	addw x,#CELLL 
      001FAF 90 FE            [ 2]  714 	ldw y,(y)
      001FB1 90 A3 00 17      [ 2]  715 	cpw y,#23 
      001FB5 27 3A            [ 1]  716 	jreq 9$
      001FB7 90 A3 00 1D      [ 2]  717 	cpw y,#29 ; last vector
      001FBB 22 34            [ 1]  718 	jrugt 9$  
      001FBD 90 58            [ 2]  719 	sllw y 
      001FBF 90 58            [ 2]  720 	sllw y 
      001FC1 72 A9 80 08      [ 2]  721 	addw y,#0x8008 ; irq0 address 
      001FC5 90 BF 28         [ 2]  722 	ldw YTEMP,y
      001FC8 1D 00 06         [ 2]  723 	subw x,#3*CELLL 
      001FCB EF 02            [ 2]  724 	ldw (2,x),y 
      001FCD 90 5F            [ 1]  725 	clrw y
      001FCF FF               [ 2]  726 	ldw (x),y 
      001FD0 A6 82            [ 1]  727 	ld a,#0x82 
      001FD2 90 95            [ 1]  728 	ld yh,a
      001FD4 EF 04            [ 2]  729 	ldw (4,x),y
      001FD6 CD 1D F9         [ 4]  730 	call EESTORE
      001FD9 1D 00 06         [ 2]  731 	subw x,#3*CELLL
      001FDC 90 5F            [ 1]  732 	clrw y 
      001FDE FF               [ 2]  733 	ldw (x),y 
      001FDF 90 AE 00 00      [ 2]  734 	ldw y,#NonHandledInterrupt
      001FE3 EF 04            [ 2]  735 	ldw (4,x),y 
      001FE5 90 BE 28         [ 2]  736 	ldw y,YTEMP  
      001FE8 72 A9 00 02      [ 2]  737 	addw y,#2
      001FEC EF 02            [ 2]  738 	ldw (2,x),y 
      001FEE CD 1D F9         [ 4]  739 	call EESTORE
      001FF1 81               [ 4]  740 9$:	ret 
                                    741 
                                    742 
                                    743 ;------------------------------
                                    744 ; all interrupt vector with 
                                    745 ; an address >= a are resetted 
                                    746 ; to default
                                    747 ; CHKIVEC ( a -- )
                                    748 ;------------------------------
      001FF2 1F A1                  749 	.word LINK 
                           001FF4   750 	LINK=.
      001FF4 07                     751 	.byte 7
      001FF5 43 48 4B 49 56 45 43   752 	.ascii "CHKIVEC"
                                    753 ;local variables 
                           000001   754 	SSP=1
                           000003   755 	CADR=3
                           000005   756 	OFS=5
                           000006   757 	VSIZE=6  
      001FFC                        758 CHKIVEC:
      001FFC 52 06            [ 2]  759 	sub sp,#VSIZE ;alloc local variables 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      001FFE 90 93            [ 1]  760 	ldw y,x 
      002000 90 FE            [ 2]  761 	ldw y,(y)
      002002 17 03            [ 2]  762 	ldw (CADR,sp),y ; ca 
      002004 1F 01            [ 2]  763 	ldw (SSP,sp),x 
      002006 AE 80 0A         [ 2]  764 	ldw x,#0x800a ; irq0 address 
      002009 BF 37            [ 2]  765 	ldw PTR16,X
      00200B AE FF FC         [ 2]  766 	ldw x,#-4 
      00200E 1C 00 04         [ 2]  767 1$:	addw x,#4
      002011 A3 00 78         [ 2]  768 	cpw x,#30*4 ; irq0-29 
      002014 27 22            [ 1]  769 	jreq 9$
      002016 90 93            [ 1]  770 	ldw y,x  
      002018 91 D6 37         [ 4]  771 	ld a,([PTR16],y)
      00201B 11 03            [ 1]  772 	cp a,(CADR,sp)
      00201D 25 EF            [ 1]  773 	jrult 1$
      00201F 90 5C            [ 1]  774 	incw y 
      002021 91 D6 37         [ 4]  775 	ld a,([PTR16],y)
      002024 11 04            [ 1]  776 	cp a,(CADR+1,sp) 
      002026 25 E6            [ 1]  777 	jrult 1$ 
      002028 1F 05            [ 2]  778 	ldw (OFS,sp),x 
      00202A 54               [ 2]  779 	srlw x
      00202B 54               [ 2]  780 	srlw x 
      00202C 90 93            [ 1]  781 	ldw y,x 
      00202E 1E 01            [ 2]  782 	ldw x,(SSP,sp)
      002030 FF               [ 2]  783 	ldw (x),y
      002031 CD 1F AA         [ 4]  784 	call reset_vector
      002034 1E 05            [ 2]  785 	ldw x,(OFS,sp) 
      002036 20 D6            [ 2]  786 	jra 1$
      002038 1E 01            [ 2]  787 9$:	ldw x,(SSP,sp) 
      00203A 1C 00 02         [ 2]  788 	addw x,#CELLL 
      00203D 5B 06            [ 2]  789 	addw sp,#VSIZE ; drop local variables  
      00203F 81               [ 4]  790 	ret 
                                    791 
                                    792 ;------------------------------
                                    793 ; set interrupt vector 
                                    794 ; SET-IVEC ( ud n -- )
                                    795 ;  ud Handler address
                                    796 ;  n  vector # 0 .. 29 
                                    797 ;-----------------------------
      002040 1F F4                  798 	.word LINK
                           002042   799 	LINK=.
      002042 08                     800 	.byte 8 
      002043 53 45 54 2D 49 56 45   801 	.ascii "SET-IVEC" 
             43
      00204B                        802 set_vector:
      00204B 90 93            [ 1]  803     ldw y,x 
      00204D 1C 00 02         [ 2]  804 	addw x,#CELLL 
      002050 90 FE            [ 2]  805 	ldw y,(y) ; vector #
      002052 90 A3 00 1D      [ 2]  806 	cpw y,#29 ; last vector
      002056 23 04            [ 2]  807 	jrule 2$
      002058 1C 00 04         [ 2]  808 	addw x,#2*CELLL 
      00205B 81               [ 4]  809 	ret
      00205C 90 58            [ 2]  810 2$:	sllw y 
      00205E 90 58            [ 2]  811 	sllw y 
      002060 72 A9 80 08      [ 2]  812 	addw y,#0X8008 ; IRQ0 vector address 
      002064 90 BF 28         [ 2]  813 	ldw YTEMP,y ; vector address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      002067 A6 82            [ 1]  814 	ld a,#0x82 
      002069 90 95            [ 1]  815 	ld yh,a 
      00206B E6 01            [ 1]  816 	ld a,(1,x) ; isr address bits 23..16 
      00206D 90 97            [ 1]  817 	ld yl,a 
                                    818 ;  write 0x82 + most significant byte of int address	
      00206F 1D 00 06         [ 2]  819 	subw x,#3*CELLL 
      002072 EF 04            [ 2]  820 	ldw (4,x),y 
      002074 90 BE 28         [ 2]  821 	ldw y,YTEMP
      002077 EF 02            [ 2]  822 	ldw (2,x),y ; vector address 
      002079 90 5F            [ 1]  823 	clrw y 
      00207B FF               [ 2]  824 	ldw (x),y   ; as a double 
      00207C CD 1D F9         [ 4]  825 	call EESTORE 
      00207F 90 93            [ 1]  826 	ldw y,x 
      002081 90 EE 02         [ 2]  827 	ldw y,(2,y) ; bits 15..0 int vector 
      002084 1D 00 06         [ 2]  828 	subw x,#3*CELLL 
      002087 EF 04            [ 2]  829 	ldw (4,x),y 
      002089 90 BE 28         [ 2]  830 	ldw y,YTEMP 
      00208C 72 A9 00 02      [ 2]  831 	addw y,#2 
      002090 EF 02            [ 2]  832 	ldw (2,x),y 
      002092 90 5F            [ 1]  833 	clrw y 
      002094 FF               [ 2]  834 	ldw (x),y 
      002095 CD 1D F9         [ 4]  835 	call EESTORE
      002098 1C 00 04         [ 2]  836 	addw x,#2*CELLL  
      00209B 81               [ 4]  837 9$: ret 
                                    838 
                                    839 
                                    840 ;------------------------
                                    841 ; Compile word to flash
                                    842 ; EE, (w -- )
                                    843 ;-----------------------
      00209C 20 42                  844 	.word LINK
                           00209E   845 	LINK=.
      00209E 03                     846 	.byte 3
      00209F 45 45 2C               847 	.ascii "EE,"
      0020A2                        848 EE_COMMA:
      0020A2 1D 00 04         [ 2]  849 	subw x,#2*CELLL 
      0020A5 90 BE 1C         [ 2]  850 	ldw y,UCP
      0020A8 90 89            [ 2]  851 	pushw y 
      0020AA EF 02            [ 2]  852 	ldw (2,x),y 
      0020AC 90 5F            [ 1]  853 	clrw y 
      0020AE FF               [ 2]  854 	ldw (x),y
      0020AF CD 1D F9         [ 4]  855 	call EESTORE
      0020B2 90 85            [ 2]  856 	popw y 
      0020B4 72 A9 00 02      [ 2]  857 	addw y,#2
      0020B8 90 BF 1C         [ 2]  858 	ldw UCP,y
      0020BB 81               [ 4]  859 	ret 
                                    860 
                                    861 
                                    862 ;-------------------------
                                    863 ; Compile byte to flash 
                                    864 ; EEC, ( c -- )	
                                    865 ;-------------------------
      0020BC 20 9E                  866 	.word LINK 
                           0020BE   867 	LINK=.
      0020BE 04                     868 	.byte 4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      0020BF 45 45 43 2C            869 	.ascii "EEC,"
      0020C3                        870 EE_CCOMMA:
      0020C3 1D 00 04         [ 2]  871 	subw x,#2*CELLL 
      0020C6 90 BE 1C         [ 2]  872 	ldw y,UCP
      0020C9 90 89            [ 2]  873 	pushw y 
      0020CB EF 02            [ 2]  874 	ldw (2,x),y 
      0020CD 90 5F            [ 1]  875 	clrw y 
      0020CF FF               [ 2]  876 	ldw (x),y
      0020D0 CD 1D AD         [ 4]  877 	call EECSTORE
      0020D3 90 85            [ 2]  878 	popw y 
      0020D5 90 5C            [ 1]  879 	incw y 
      0020D7 90 BF 1C         [ 2]  880 	ldw UCP,y
      0020DA 81               [ 4]  881 	ret 
                                    882 
                                    883 
                                    884 ;--------------------------
                                    885 ; copy FLASH block to ROWBUF
                                    886 ; ROW>BUF ( ud -- )
                                    887 ;--------------------------
      0020DB 20 BE                  888 	.word LINK 
                           0020DD   889 	LINK=.
      0020DD 07                     890 	.byte 7 
      0020DE 52 4F 57 3E 42 55 46   891 	.ascii "ROW>BUF"
      0020E5                        892 ROW2BUF: 
      0020E5 CD 1B 6F         [ 4]  893 	call FPSTOR 
      0020E8 A6 80            [ 1]  894 	ld a,#BLOCK_SIZE
      0020EA 88               [ 1]  895 	push a 
      0020EB B4 38            [ 1]  896 	and a,PTR8 ; block align 
      0020ED B7 38            [ 1]  897 	ld PTR8,a
      0020EF 90 AE 16 80      [ 2]  898 	ldw y,#ROWBUFF 
      0020F3 92 BC 00 36      [ 5]  899 1$: ldf a,[FPTR]
      0020F7 90 F7            [ 1]  900 	ld (y),a
      0020F9 CD 1C E9         [ 4]  901 	call INC_FPTR
      0020FC 90 5C            [ 1]  902 	incw y 
      0020FE 0A 01            [ 1]  903 	dec (1,sp)
      002100 26 F1            [ 1]  904 	jrne 1$ 
      002102 84               [ 1]  905 	pop a 
      002103 81               [ 4]  906 	ret 
                                    907 
                                    908 
                                    909 ;---------------------------
                                    910 ; copy ROWBUFF to flash 
                                    911 ; BUF>ROW ( ud -- )
                                    912 ; ud is row address as double 
                                    913 ;---------------------------
      002104 20 DD                  914 	.word LINK 
                           002106   915 	LINK=.
      002106 07                     916 	.byte 7 
      002107 42 55 46 3E 52 4F 57   917 	.ascii "BUF>ROW" 
      00210E                        918 BUF2ROW:
      00210E CD 06 99         [ 4]  919 	call TBUF ; ( ud rb -- )
      002111 CD 07 59         [ 4]  920 	call ROT 
      002114 CD 07 59         [ 4]  921 	call ROT  ; ( rb ud -- )
      002117 CD 1E E7         [ 4]  922 	call write_row 
      00211A 81               [ 4]  923 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



                                    924 
                                    925 ;---------------------------------
                                    926 ; how many byte free in that row 
                                    927 ; RFREE ( a -- n )
                                    928 ; a is least byte of target address
                                    929 ;----------------------------------
      00211B 21 06                  930 	.word LINK 
                           00211D   931 	LINK=.
      00211D 05                     932 	.byte 5 
      00211E 52 46 52 45 45         933 	.ascii "RFREE"
      002123                        934 RFREE:
      002123 E6 01            [ 1]  935 	ld a,(1,x)
      002125 A4 7F            [ 1]  936 	and a,#BLOCK_SIZE-1 
      002127 B7 28            [ 1]  937 	ld YTEMP,a 
      002129 A6 80            [ 1]  938 	ld a,#BLOCK_SIZE 
      00212B B0 28            [ 1]  939 	sub a,YTEMP 
      00212D 90 5F            [ 1]  940 	clrw y 
      00212F 90 97            [ 1]  941 	ld yl,a
      002131 FF               [ 2]  942 	ldw (x),y 
      002132 81               [ 4]  943 	ret 
                                    944 
                                    945 ;---------------------------------
                                    946 ; write u bytes to flash/EEPROM 
                                    947 ; constraint to row limit 
                                    948 ; RAM>EE ( ud a u -- u2 )
                                    949 ; ud flash address 
                                    950 ; a ram address 
                                    951 ; u bytes count
                                    952 ; return u2 bytes written  
                                    953 ;-------------------------------
      002133 21 1D                  954 	.word LINK 
                           002135   955 	LINK=. 
      002135 06                     956 	.byte 6
      002136 52 41 4D 3E 45 45      957 	.ascii "RAM>EE"
                                    958 	
      00213C                        959 RAM2EE:
                                    960 ; copy ud on top 
      00213C 90 93            [ 1]  961 	ldw y,x 
      00213E 90 EE 06         [ 2]  962 	ldw y,(6,y) ; LSW of ud  
      002141 90 BF 28         [ 2]  963 	ldw YTEMP,y 
      002144 90 93            [ 1]  964 	ldw y,x 
      002146 90 EE 04         [ 2]  965 	ldw y,(4,y)  ; MSW of ud 
      002149 1D 00 04         [ 2]  966 	subw x,#2*CELLL 
      00214C FF               [ 2]  967 	ldw (x),y 
      00214D 90 BE 28         [ 2]  968 	ldw y,YTEMP 
      002150 EF 02            [ 2]  969 	ldw (2,x),y 
      002152 CD 20 E5         [ 4]  970 	call ROW2BUF 
      002155 90 93            [ 1]  971 	ldw y,x 
      002157 90 EE 06         [ 2]  972 	ldw y,(6,y)
      00215A 90 89            [ 2]  973 	pushw y ; udl 
      00215C 90 9F            [ 1]  974 	ld a,yl
      00215E A4 7F            [ 1]  975 	and a,#BLOCK_SIZE-1 
      002160 90 5F            [ 1]  976 	clrw y 
      002162 90 97            [ 1]  977 	ld yl,a 
      002164 72 A9 16 80      [ 2]  978 	addw y,#ROWBUFF 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      002168 1D 00 02         [ 2]  979 	subw x,#CELLL 
      00216B FF               [ 2]  980 	ldw (x),y  
      00216C CD 05 AE         [ 4]  981 	call SWAPP ;  ( ud a ra u -- )
      00216F CD 05 48         [ 4]  982 	call RFROM  
      002172 CD 21 23         [ 4]  983 	call RFREE 
      002175 CD 08 D2         [ 4]  984 	call MIN
      002178 CD 05 9E         [ 4]  985 	call DUPP 
      00217B CD 05 67         [ 4]  986 	call TOR  
      00217E CD 0C 3E         [ 4]  987 	call CMOVE
      002181 CD 21 0E         [ 4]  988 	call BUF2ROW 
      002184 CD 05 48         [ 4]  989 	call RFROM 
      002187 81               [ 4]  990 	ret 
                                    991 
                                    992 
                                    993 ;--------------------------
                                    994 ; expand 16 bit address 
                                    995 ; to 32 bit address 
                                    996 ; FADDR ( a -- ud )
                                    997 ;--------------------------
      002188 21 35                  998 	.word LINK 
                           00218A   999 	LINK=. 
      00218A 05                    1000 	.byte 5 
      00218B 46 41 44 44 52        1001 	.ascii "FADDR"
      002190                       1002 FADDR:
      002190 CC 0B 03         [ 2] 1003 	jp ZERO 
                                   1004 
                                   1005 
                                   1006 ;--------------------------
                                   1007 ; move new colon definition to FLASH 
                                   1008 ; using WR-ROW for efficiency 
                                   1009 ; preserving bytes already used 
                                   1010 ; in the current block. 
                                   1011 ; At this point the compiler as completed
                                   1012 ; in RAM and pointers CP and CNTXT updated.
                                   1013 ; CNTXT point to nfa of new word and  
                                   1014 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                   1015 ; 
                                   1016 ; FMOVE ( -- cp+ )
                                   1017 ; 
                                   1018 ;--------------------------
      002193 21 8A                 1019 	.word LINK 
                           002195  1020 	LINK=.
      002195 05                    1021 	.byte 5 
      002196 46 4D 4F 56 45        1022 	.ascii "FMOVE" 
      00219B                       1023 FMOVE:
      00219B CD 06 AB         [ 4] 1024 	call TFLASH 
      00219E CD 04 F7         [ 4] 1025 	CALL AT 
      0021A1 CD 04 AC         [ 4] 1026 	CALL QBRAN 
      0021A4 22 1F                 1027 	.word no_move  
      0021A6 CD 06 FA         [ 4] 1028 	call CPP
      0021A9 CD 04 F7         [ 4] 1029 	call AT  
      0021AC CD 05 9E         [ 4] 1030 	call DUPP ; ( udl udl -- )
      0021AF CD 06 DE         [ 4] 1031 	call CNTXT 
      0021B2 CD 04 F7         [ 4] 1032 	call AT 
      0021B5 CD 04 79         [ 4] 1033 	call DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      0021B8 00 02                 1034 	.word 2 
      0021BA CD 08 12         [ 4] 1035 	call SUBB ; ( udl udl a -- )
      0021BD CD 05 AE         [ 4] 1036 	call SWAPP 
      0021C0 CD 21 90         [ 4] 1037 	call FADDR 
      0021C3 CD 07 59         [ 4] 1038 	call ROT  ; ( udl ud a -- )
      0021C6 CD 05 9E         [ 4] 1039 	call DUPP 
      0021C9 CD 05 67         [ 4] 1040 	call TOR    ; R: a 
      0021CC                       1041 FMOVE2: 
      0021CC CD 0B F1         [ 4] 1042 	call HERE 
      0021CF CD 05 5B         [ 4] 1043 	call RAT 
      0021D2 CD 08 12         [ 4] 1044 	call SUBB ; (udl ud a wl -- )
      0021D5                       1045 next_row:
      0021D5 CD 05 9E         [ 4] 1046 	call DUPP 
      0021D8 CD 05 67         [ 4] 1047 	call TOR  ; ( udl ud a wl -- ) R: a wl
      0021DB CD 21 3C         [ 4] 1048 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      0021DE CD 05 9E         [ 4] 1049 	call DUPP 
      0021E1 CD 05 67         [ 4] 1050 	call TOR
      0021E4 CD 07 99         [ 4] 1051 	call PLUS  ; ( udl+ ) 
      0021E7 CD 05 9E         [ 4] 1052 	call DUPP 
      0021EA CD 0B 03         [ 4] 1053 	call ZERO   ; ( udl+ ud -- )
      0021ED CD 05 48         [ 4] 1054 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      0021F0 CD 05 48         [ 4] 1055 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      0021F3 CD 05 C8         [ 4] 1056 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      0021F6 CD 08 12         [ 4] 1057 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      0021F9 CD 05 9E         [ 4] 1058 	call DUPP 
      0021FC CD 04 AC         [ 4] 1059 	call QBRAN
      0021FF 22 18                 1060 	.word fmove_done 
      002201 CD 05 AE         [ 4] 1061 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      002204 CD 05 48         [ 4] 1062 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      002207 CD 07 99         [ 4] 1063 	call PLUS  ; ( udl+2 ud wl- a+ )
      00220A CD 05 9E         [ 4] 1064 	call DUPP 
      00220D CD 05 67         [ 4] 1065 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      002210 CD 05 AE         [ 4] 1066 	call SWAPP 
      002213 CD 04 C3         [ 4] 1067 	call BRAN
      002216 21 D5                 1068 	.word next_row  
      002218                       1069 fmove_done:	
      002218 CD 05 48         [ 4] 1070 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      00221B 1C 00 0A         [ 2] 1071 	addw x,#5*CELLL ; (  -- cp+ ) new CP 
      00221E 81               [ 4] 1072  	ret  
      00221F                       1073 no_move:
      00221F CD 0B 03         [ 4] 1074 	call ZERO
      002222 81               [ 4] 1075 	ret 
                                   1076 
                                   1077 ;------------------------------------------
                                   1078 ; adjust pointers after **FMOVE** operetion.
                                   1079 ; UPDAT-PTR ( cp+ -- )
                                   1080 ; cp+ is new CP position after FMOVE 
                                   1081 ;-------------------------------------------
      002223 21 95                 1082 	.word LINK 
                           002225  1083 	LINK=.
      002225 09                    1084 	.byte 9
      002226 55 50 44 41 54 2D 50  1085 	.ascii "UPDAT-PTR" 
             54 52
      00222F                       1086 UPDATPTR:
                                   1087 ;reset VP to previous position  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      00222F CD 1B E9         [ 4] 1088 	call EEPVP 
      002232 CD 05 94         [ 4] 1089 	call DROP 
      002235 CD 04 F7         [ 4] 1090 	call AT
      002238 CD 06 EC         [ 4] 1091 	call VPP 
      00223B CD 04 E0         [ 4] 1092 	call STORE
                                   1093 ;update CONTEXT and LAST 
      00223E CD 1B D3         [ 4] 1094 	call EEPCP 
      002241 CD 05 94         [ 4] 1095 	call DROP
      002244 CD 04 F7         [ 4] 1096 	call AT
      002247 CD 04 79         [ 4] 1097 	call DOLIT 
      00224A 00 02                 1098 	.word 2 
      00224C CD 07 99         [ 4] 1099 	call PLUS 
      00224F CD 05 9E         [ 4] 1100 	call DUPP 
      002252 CD 06 DE         [ 4] 1101 	call CNTXT 
      002255 CD 04 E0         [ 4] 1102 	call STORE
      002258 CD 07 0A         [ 4] 1103 	call LAST
      00225B CD 04 E0         [ 4] 1104 	call STORE 
      00225E CD 1C 03         [ 4] 1105 	call UPDATLAST 
                                   1106 ;update CP 
      002261 CD 06 FA         [ 4] 1107 	call CPP 
      002264 CD 04 E0         [ 4] 1108 	call STORE
      002267 CD 1C 2C         [ 4] 1109 	call UPDATCP 
      00226A 81               [ 4] 1110 	ret 
                                   1111 
                                   1112 ;-----------------------------
                                   1113 ; move interrupt sub-routine
                                   1114 ; in flash memory
                                   1115 ;----------------------------- 
      00226B 22 25                 1116 	.word LINK 
                           00226D  1117 	LINK=. 
      00226D 06                    1118 	.byte 6
      00226E 49 46 4D 4F 56 45     1119 	.ascii "IFMOVE" 
      002274                       1120 IFMOVE:
      002274 CD 06 AB         [ 4] 1121 	call TFLASH 
      002277 CD 04 F7         [ 4] 1122 	CALL AT 
      00227A CD 04 AC         [ 4] 1123 	CALL QBRAN 
      00227D 22 1F                 1124 	.word no_move 
      00227F CD 06 FA         [ 4] 1125 	call CPP 
      002282 CD 04 F7         [ 4] 1126 	call AT 
      002285 CD 05 9E         [ 4] 1127 	call DUPP ; ( udl udl -- )
      002288 CD 1B E9         [ 4] 1128 	call EEPVP 
      00228B CD 05 94         [ 4] 1129 	call DROP
      00228E CD 04 F7         [ 4] 1130 	call AT  ; ( udl udl a )
      002291 CD 05 67         [ 4] 1131 	call TOR 
      002294 CD 21 90         [ 4] 1132 	call FADDR
      002297 CD 05 5B         [ 4] 1133 	call RAT ; ( udl ud a -- ) R: a 
      00229A CC 21 CC         [ 2] 1134 	jp FMOVE2 
                                   1135 
                                   1136 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



                           000001  4714 .if WANT_SCALING_CONST 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



                                   4715         .include "const_ratio.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------------------------------------
                                     20 ; Irrationals constants 
                                     21 ; expressed as 2 integers ratio
                                     22 ; aproximation. These are to be used with scaling operators */ and */MOD 
                                     23 ; REF: https://www.forth.com/starting-forth/5-fixed-point-arithmetic/
                                     24 ;---------------------------------------------------------------------
                                     25 
                                     26 ;       PI ( --  355 113 )
                                     27 ; precision 8.5e-8 
                                     28 ; usage example to compute circle area
                                     29 ; : CAREA DUP * PI */ ;
                                     30 ; 
      00229D 22 6D                   31         .word LINK 
                           00229F    32         LINK=.
      00229F 02                      33         .byte 2
      0022A0 50 49                   34         .ascii "PI" 
      0022A2                         35 PII:
      0022A2 1D 00 04         [ 2]   36         subw x,#2*CELLL 
      0022A5 90 AE 01 63      [ 2]   37         ldw y,#355 
      0022A9 EF 02            [ 2]   38         ldw (2,x),y 
      0022AB 90 AE 00 71      [ 2]   39         ldw y,#113 
      0022AF FF               [ 2]   40         ldw (x),y 
      0022B0 81               [ 4]   41         ret 
                                     42 
                                     43 ;      SQRT2 ( -- 19601  13860 )
                                     44 ; precision: 1.5e-9 
                                     45 ; usage example to compute Voltage peek to peek from Vrms 
                                     46 ; : VPP SQRT2 */ 2 * ;
                                     47 ;
      0022B1 22 9F                   48         .word LINK 
                           0022B3    49         LINK=.
      0022B3 05                      50         .byte 5 
      0022B4 53 51 52 54 32          51         .ascii "SQRT2" 
      0022B9                         52 SQRT2:
      0022B9 1D 00 04         [ 2]   53         subw x,#2*CELLL 
      0022BC 90 AE 4C 91      [ 2]   54         ldw y,#19601 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      0022C0 EF 02            [ 2]   55         ldw (2,x),y 
      0022C2 90 AE 36 24      [ 2]   56         ldw y,#13860 
      0022C6 FF               [ 2]   57         ldw (x),y 
      0022C7 81               [ 4]   58         ret 
                                     59 
                                     60 ;   SQRT3 ( -- 18817 10864 )
                                     61 ; precision: 1.1e-9
                                     62 ;
      0022C8 22 B3                   63         .word LINK 
                           0022CA    64         LINK=.
      0022CA 05                      65         .byte 5
      0022CB 53 51 52 54 33          66         .ascii "SQRT3" 
      0022D0                         67 SQRT3: 
      0022D0 1D 00 04         [ 2]   68     subw x,#2*CELLL 
      0022D3 90 AE 49 81      [ 2]   69     ldw y,#18817 
      0022D7 EF 02            [ 2]   70     ldw (2,x),y 
      0022D9 90 AE 2A 70      [ 2]   71     ldw y,#10864 
      0022DD FF               [ 2]   72     ldw (x),y 
      0022DE 81               [ 4]   73     ret 
                                     74 
                                     75 ;   E ( -- 28667 10546 )
                                     76 ; precision: 5.5e-9 
                                     77 ; natural log base 
      0022DF 22 CA                   78         .word LINK 
                           0022E1    79         LINK=.
      0022E1 01                      80         .byte 1
      0022E2 45                      81         .ascii "E" 
      0022E3                         82 ENEPER:
      0022E3 1D 00 04         [ 2]   83     subw x,#2*CELLL 
      0022E6 90 AE 6F FB      [ 2]   84     ldw y,#28667 
      0022EA EF 02            [ 2]   85     ldw (2,x),y 
      0022EC 90 AE 29 32      [ 2]   86     ldw y,#10546 
      0022F0 FF               [ 2]   87     ldw (x),y 
      0022F1 81               [ 4]   88     ret 
                                     89 
                                     90 ;   SQRT10 ( -- 22936 7253 )
                                     91 ; precision: 5.7e-9 
      0022F2 22 E1                   92         .word LINK 
                           0022F4    93         LINK=.
      0022F4 06                      94         .byte 6 
      0022F5 53 51 52 54 31 30       95         .ascii "SQRT10" 
      0022FB                         96 SQRT10:
      0022FB 1D 00 04         [ 2]   97     subw x,#2*CELLL
      0022FE 90 AE 59 98      [ 2]   98     ldw y,#22936 
      002302 EF 02            [ 2]   99     ldw (2,x),y 
      002304 90 AE 1C 55      [ 2]  100     ldw y,#7253
      002308 FF               [ 2]  101     ldw (x),y 
      002309 81               [ 4]  102     ret 
                                    103 
                                    104 ;   12RT2 ( -- 26797 25293 )
                                    105 ; precision: 1.0e-9 
                                    106 ; used in music to compute well tempered scale
      00230A 22 F4                  107         .word LINK 
                           00230C   108         LINK=. 
      00230C 05                     109         .byte 5 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



      00230D 31 32 52 54 32         110         .ascii "12RT2"
      002312                        111 RT12_2:
      002312 1D 00 04         [ 2]  112     subw x,#2*CELLL 
      002315 90 AE 68 AD      [ 2]  113     ldw y,#26797
      002319 EF 02            [ 2]  114     ldw (2,x),y 
      00231B 90 AE 62 CD      [ 2]  115     ldw y,#25293
      00231F FF               [ 2]  116     ldw (x),y 
      002320 81               [ 4]  117     ret 
                                    118 
                                    119 ;   LOG2s ( -- 2040 11103 )
                                    120 ; log(2)/1.6384
                                    121 ; precision: 1.1e-8
      002321 23 0C                  122         .word LINK 
                           002323   123         LINK=.
      002323 05                     124         .byte 5 
      002324 4C 4F 47 32 53         125         .ascii "LOG2S" 
      002329                        126 LOG2S:
      002329 1D 00 04         [ 2]  127     subw x,#2*CELLL
      00232C 90 AE 07 F8      [ 2]  128     ldw y,#2040 
      002330 EF 02            [ 2]  129     ldw (2,x),y 
      002332 90 AE 2B 5F      [ 2]  130     ldw y,#11103 
      002336 FF               [ 2]  131     ldw (x),y 
      002337 81               [ 4]  132     ret 
                                    133 
                                    134 ;   LN2 ( -- 485 11464 )
                                    135 ; ln(2)/16.384 
                                    136 ; precision: 1.0e-7 
      002338 23 23                  137         .word LINK 
                           00233A   138         LINK=.
      00233A 04                     139         .byte 4 
      00233B 4C 4E 32 53            140         .ascii "LN2S" 
      00233F                        141 LN2S: 
      00233F 1D 00 04         [ 2]  142     subw x,#2*CELLL
      002342 90 AE 01 E5      [ 2]  143     ldw y,#485
      002346 EF 02            [ 2]  144     ldw (2,x),y 
      002348 90 AE 2C C8      [ 2]  145     ldw y,#11464 
      00234C FF               [ 2]  146     ldw (x),y 
      00234D 81               [ 4]  147     ret 
                                    148 
                                    149 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                                   4716 .endif
                           000001  4717 .if WANT_CONST_TABLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                                   4718         .include "ctable.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;------------------------------
                                     20 ; words to create and read 
                                     21 ; constants tables in FLASH 
                                     22 ; and EEPROM
                                     23 ;------------------------------
                                     24 
                                     25 ;-----------------------------
                                     26 ; allocate space in CODE area 
                                     27 ; for constant table.
                                     28 ; CALLOT ( u -- ad )
                                     29 ; u  bytes to allocates 
                                     30 ; ad data address as double.
                                     31 ;-----------------------------
      00234E 23 3A                   32     .word LINK 
                           002350    33     LINK=.
      002350 06                      34     .byte 6
      002351 43 41 4C 4C 4F 54       35     .ascii "CALLOT"
      002357                         36 CALLOT:
      002357 CD 06 FA         [ 4]   37     CALL CPP
      00235A CD 05 9E         [ 4]   38     CALL DUPP 
      00235D CD 04 F7         [ 4]   39     CALL AT 
      002360 CD 05 67         [ 4]   40     CALL TOR 
      002363 CD 0B 73         [ 4]   41     CALL PSTOR 
      002366 CD 1C 2C         [ 4]   42     CALL UPDATCP 
      002369 CD 05 48         [ 4]   43     CALL RFROM
      00236C CC 0B 03         [ 2]   44     JP ZERO 
                                     45 
                                     46 ;------------------------------
                                     47 ; create constants bytes table 
                                     48 ; in persistant memory
                                     49 ;  CTABLE ( n+ -- ad ; <string> )
                                     50 ; n+ bytes reserved 
                                     51 ;-----------------------------
      00236F 23 50                   52     .word LINK 
                           002371    53     LINK=.
      002371 06                      54     .byte 6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      002372 43 54 41 42 4C 45       55     .ascii "CTABLE"
      002378                         56 CTABLE:
      002378 CD 23 57         [ 4]   57     CALL CALLOT     
      00237B CC 19 22         [ 2]   58     JP DCONST 
                                     59      
                                     60 
                                     61 ;--------------------------------
                                     62 ; create constants words table 
                                     63 ; in persistant memory 
                                     64 ; WTABLE ( n+ -- ad ; <string> )
                                     65 ; n+  words reserved  
                                     66 ;--------------------------------
      00237E 23 71                   67     .word LINK 
                           002380    68     LINK=.
      002380 06                      69     .byte 6
      002381 57 54 41 42 4C 45       70     .ascii "WTABLE"
      002387                         71 WTABLE:
      002387 CD 0A 8A         [ 4]   72     CALL CELLS  
      00238A CD 23 57         [ 4]   73     CALL CALLOT 
      00238D CC 19 22         [ 2]   74     JP DCONST 
                                     75 
                                     76 ;---------------------------------
                                     77 ; stack an element of CTABLE 
                                     78 ; CTABL@ ( u ad -- c )
                                     79 ; u element order {0..size-1}
                                     80 ; a|ad table address 
                                     81 ;--------------------------------
      002390 23 80                   82     .word LINK 
                           002392    83     LINK=.
      002392 06                      84     .byte 6
      002393 43 54 41 42 4C 40       85     .ascii "CTABL@" 
      002399                         86 CTAT:
      002399 CD 1B 6F         [ 4]   87     call FPSTOR 
      00239C CD 1D 01         [ 4]   88     call PTRPLUS 
      00239F CC 1D 3E         [ 2]   89     jp EE_CREAD 
                                     90 
                                     91 ;---------------------------------
                                     92 ; stack an element of WTABLE 
                                     93 ; WTABL@ ( u ud -- w )
                                     94 ; u is element order {0..size-1}
                                     95 ; a|ud table address 
                                     96 ;----------------------------------
      0023A2 23 92                   97     .word LINK 
                           0023A4    98     LINK=.
      0023A4 06                      99     .byte 6
      0023A5 57 54 41 42 4C 40      100     .ascii "WTABL@" 
      0023AB                        101 WTAT:
      0023AB CD 1B 6F         [ 4]  102     call FPSTOR 
      0023AE CD 0A 8A         [ 4]  103     call CELLS 
      0023B1 CD 1D 01         [ 4]  104     call PTRPLUS 
      0023B4 CD 1D 1C         [ 4]  105     call EE_READ 
      0023B7 81               [ 4]  106     ret 
                                    107 
                                    108 ;--------------------------
                                    109 ; tool to initialize character table 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



                                    110 ; CTINIT ( ad -- )
                                    111 ; ad is table address 
                                    112 ;--------------------------
      0023B8 23 A4                  113     .word LINK 
                           0023BA   114     LINK=.
      0023BA 06                     115     .byte 6 
      0023BB 43 54 49 4E 49 54      116     .ascii "CTINIT"
      0023C1                        117 CTINIT:
      0023C1 CD 1B 6F         [ 4]  118     CALL FPSTOR
      0023C4 CD 1C AD         [ 4]  119     CALL UNLOCK
      0023C7 CD 0B 03         [ 4]  120     CALL ZERO 
      0023CA CD 0A 97         [ 4]  121 1$: CALL ONEP 
      0023CD CD 05 9E         [ 4]  122     CALL DUPP 
      0023D0 CD 24 1D         [ 4]  123     CALL INTQ 
      0023D3 CD 04 AC         [ 4]  124     CALL QBRAN 
      0023D6 23 E0                  125     .word 2$
      0023D8 CD 1D 58         [ 4]  126     call WR_BYTE 
      0023DB CD 04 C3         [ 4]  127     CALL BRAN 
      0023DE 23 CA                  128     .word 1$ 
      0023E0 CD 07 79         [ 4]  129 2$: CALL DDROP 
      0023E3 CD 1C D5         [ 4]  130     CALL LOCK 
      0023E6 81               [ 4]  131     ret 
                                    132 
                                    133 ;--------------------------
                                    134 ; tool to initialize word table 
                                    135 ; WTINIT ( ad -- )
                                    136 ; ad is table address 
                                    137 ;--------------------------
      0023E7 23 BA                  138     .word LINK 
                           0023E9   139     LINK=.
      0023E9 06                     140     .byte 6 
      0023EA 57 54 49 4E 49 54      141     .ascii "WTINIT"
      0023F0                        142 WTINIT:
      0023F0 CD 1B 6F         [ 4]  143     CALL FPSTOR
      0023F3 CD 1C AD         [ 4]  144     CALL UNLOCK
      0023F6 CD 0B 03         [ 4]  145     CALL ZERO 
      0023F9 CD 0A 97         [ 4]  146 1$: CALL ONEP 
      0023FC CD 05 9E         [ 4]  147     CALL DUPP
      0023FF CD 24 1D         [ 4]  148     CALL INTQ
      002402 CD 04 AC         [ 4]  149     CALL QBRAN 
      002405 24 0F                  150     .word 2$
      002407 CD 1D 7D         [ 4]  151     call WR_WORD 
      00240A CD 04 C3         [ 4]  152     CALL BRAN 
      00240D 23 F9                  153     .word 1$ 
      00240F CD 07 79         [ 4]  154 2$: CALL DDROP 
      002412 CD 1C D5         [ 4]  155     CALL LOCK 
      002415 81               [ 4]  156     ret 
                                    157 
                                    158 ;------------------------
                                    159 ; Prompted input for integer 
                                    160 ; display n+ in bracket and
                                    161 ; '?' 
                                    162 ; [N]? ( n+ -- a )
                                    163 ;------------------------
      002416 23 E9                  164     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



                           002418   165     LINK=.
      002418 04                     166     .byte 4
      002419 5B 4E 5D 3F            167     .ascii "[N]?" 
      00241D                        168 INTQ:
      00241D CD 0F 69         [ 4]  169     CALL CR 
      002420 CD 04 79         [ 4]  170     call DOLIT 
      002423 00 5B                  171     .word '[
      002425 CD 04 38         [ 4]  172     CALL EMIT 
      002428 CD 10 04         [ 4]  173     CALL DOT 
      00242B CD 0F A8         [ 4]  174     CALL  DOTQP
      00242E 03                     175     .byte 3
      00242F 5D 3F 20               176     .ascii "]? " 
      002432 CD 13 93         [ 4]  177     CALL QUERY 
      002435 CD 11 BE         [ 4]  178     call TOKEN 
      002438 CC 0E 16         [ 2]  179     jp NUMBQ
                                    180 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



                                   4719 .endif
                           000001  4720 .if WANT_FLOAT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



                                   4721         .include "float.asm"
                                      1 ;*********************************
                                      2 ;    floating point library
                                      3 ;    adapted from 
                                      4 ;    Forth dimensions Vol. IV #1 
                                      5 ;    published in  may/june 1982
                                      6 ;
                                      7 ; Creation date: 2021-06-15 
                                      8 ;
                                      9 ; NOTE: I used a different format 
                                     10 ;       for float number. This 
                                     11 ;       enable comparison of floats 
                                     12 ;       as they were integer hence 
                                     13 ;       there no need for F>,F<,etc 
                                     14 ;************************************
                                     15 
                                     16 ;*************************************************
                                     17 ;  FLOAT format double for storage 
                                     18 ;  bits 22:0  mantissa absolute value 
                                     19 ;  bits  30:23  exponent with 127 offset added  
                                     20 ;  bit 31  mantissa sign 
                                     21 ;  float value: if bit 31 is 1 negate mantissa
                                     22 ;                else keep mantissas as bits 22:0
                                     23 ;                as is
                                     24 ;                eponent: 10^^(exp-127) 
                                     25 ;***********************************************  
                                     26     ; macro to create dictionary header record
                                     27     .macro _HEADER label,len,name 
                                     28         .word LINK 
                                     29         LINK=.
                                     30         .byte len  
                                     31         .ascii name
                                     32         label:
                                     33     .endm 
                                     34 
                                     35     ; runtime literal 
                                     36     .macro _DOLIT value 
                                     37     CALL DOLIT 
                                     38     .word value 
                                     39     .endm 
                                     40 
                                     41     ; 0BRANCH 
                                     42     .macro _QBRAN target 
                                     43     CALL QBRAN
                                     44     .word target
                                     45     .endm 
                                     46 
                                     47     ; BRANCH 
                                     48     .macro _BRAN target 
                                     49     CALL BRAN 
                                     50     .word target 
                                     51     .endm 
                                     52 
                                     53 ;-------------------------
                                     54 ;    FPSW ( -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



                                     55 ;    floating state variable
                                     56 ;    bit 0 zero flag 
                                     57 ;    bit 1 negative flag 
                                     58 ;    bit 2 overflow/error flag 
                                     59 ;---------------------------
      00243B                         60     _HEADER FPSW,4,"FPSW"
      00243B 24 18                    1         .word LINK 
                           00243D     2         LINK=.
      00243D 04                       3         .byte 4  
      00243E 46 50 53 57              4         .ascii "FPSW"
      002442                          5         FPSW:
      002442 90 AE 00 0A      [ 2]   61 	LDW Y,#UFPSW  
      002446 1D 00 02         [ 2]   62 	SUBW X,#2
      002449 FF               [ 2]   63     LDW (X),Y
      00244A 81               [ 4]   64     RET
                                     65 
                                     66 ;----------------------------
                                     67 ;    FBASE ( -- a )
                                     68 ;    floating point numerical
                                     69 ;    base variable 
                                     70 ;----------------------------
      00244B                         71     _HEADER FBASE,5,"FBASE"
      00244B 24 3D                    1         .word LINK 
                           00244D     2         LINK=.
      00244D 05                       3         .byte 5  
      00244E 46 42 41 53 45           4         .ascii "FBASE"
      002453                          5         FBASE:
      002453 90 AE 00 08      [ 2]   72 	LDW Y,#UFBASE  
      002457 1D 00 02         [ 2]   73 	SUBW X,#2
      00245A FF               [ 2]   74     LDW (X),Y
      00245B 81               [ 4]   75     RET
                                     76 
                                     77 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     78 ;   FRESET ( -- )
                                     79 ;   reset FPSW variable 
                                     80 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
      00245C                         81     _HEADER FRESET,6,"FRESET"
      00245C 24 4D                    1         .word LINK 
                           00245E     2         LINK=.
      00245E 06                       3         .byte 6  
      00245F 46 52 45 53 45 54        4         .ascii "FRESET"
      002465                          5         FRESET:
      002465                         82     _DOLIT 0 
      002465 CD 04 79         [ 4]    1     CALL DOLIT 
      002468 00 00                    2     .word 0 
      00246A CD 24 42         [ 4]   83     CALL FPSW 
      00246D CD 04 E0         [ 4]   84     CALL STORE 
      002470 81               [ 4]   85     RET 
                                     86 
                                     87 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     88 ;   FINIT ( -- )
                                     89 ;   initialize floating point 
                                     90 ;   library 
                                     91 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002471                         92     _HEADER FINIT,5,"FINIT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      002471 24 5E                    1         .word LINK 
                           002473     2         LINK=.
      002473 05                       3         .byte 5  
      002474 46 49 4E 49 54           4         .ascii "FINIT"
      002479                          5         FINIT:
      002479 CD 24 65         [ 4]   93     CALL FRESET 
      00247C CD 06 5B         [ 4]   94     CALL BASE 
      00247F CD 04 F7         [ 4]   95     CALL AT 
      002482 CD 24 53         [ 4]   96     CALL FBASE 
      002485 CD 04 E0         [ 4]   97     CALL STORE 
      002488 81               [ 4]   98     RET 
                                     99 
                                    100 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    101 ;    FER ( -- u )
                                    102 ;    return FPSW value 
                                    103 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002489                        104     _HEADER FER,3,"FER"
      002489 24 73                    1         .word LINK 
                           00248B     2         LINK=.
      00248B 03                       3         .byte 3  
      00248C 46 45 52                 4         .ascii "FER"
      00248F                          5         FER:
      00248F CD 24 42         [ 4]  105     CALL FPSW 
      002492 CD 04 F7         [ 4]  106     CALL AT 
      002495 81               [ 4]  107     RET 
                                    108 
                                    109 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    110 ;    FZE  ( -- z )
                                    111 ;    return FPSW zero flag 
                                    112 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002496                        113     _HEADER FZE,3,"FZE"
      002496 24 8B                    1         .word LINK 
                           002498     2         LINK=.
      002498 03                       3         .byte 3  
      002499 46 5A 45                 4         .ascii "FZE"
      00249C                          5         FZE:
      00249C CD 24 42         [ 4]  114     CALL FPSW
      00249F CD 04 F7         [ 4]  115     CALL AT  
      0024A2                        116     _DOLIT 1
      0024A2 CD 04 79         [ 4]    1     CALL DOLIT 
      0024A5 00 01                    2     .word 1 
      0024A7 CD 05 EA         [ 4]  117     CALL ANDD 
      0024AA 81               [ 4]  118     RET 
                                    119 
                                    120 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    121 ;    FNE ( -- n )
                                    122 ;    return FPSW negative flag 
                                    123 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0024AB                        124     _HEADER FNE,3,"FNE"
      0024AB 24 98                    1         .word LINK 
                           0024AD     2         LINK=.
      0024AD 03                       3         .byte 3  
      0024AE 46 4E 45                 4         .ascii "FNE"
      0024B1                          5         FNE:
      0024B1 CD 24 42         [ 4]  125     CALL FPSW 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      0024B4 CD 04 F7         [ 4]  126     CALL AT 
      0024B7                        127     _DOLIT 2 
      0024B7 CD 04 79         [ 4]    1     CALL DOLIT 
      0024BA 00 02                    2     .word 2 
      0024BC CD 05 EA         [ 4]  128     CALL ANDD 
      0024BF 81               [ 4]  129     RET 
                                    130 
                                    131 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    132 ;   FOV (A -- v )
                                    133 ;   return FPSW overflow flag 
                                    134 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0024C0                        135     _HEADER FOV,3,"FOV"
      0024C0 24 AD                    1         .word LINK 
                           0024C2     2         LINK=.
      0024C2 03                       3         .byte 3  
      0024C3 46 4F 56                 4         .ascii "FOV"
      0024C6                          5         FOV:
      0024C6 CD 24 42         [ 4]  136     CALL FPSW
      0024C9 CD 04 F7         [ 4]  137     CALL AT  
      0024CC                        138     _DOLIT 4 
      0024CC CD 04 79         [ 4]    1     CALL DOLIT 
      0024CF 00 04                    2     .word 4 
      0024D1 CD 05 EA         [ 4]  139     CALL ANDD 
      0024D4 81               [ 4]  140     RET 
                                    141 
                                    142 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    143 ;    D0= ( d -- 0|-1 )
                                    144 ;    check if double is 0 
                                    145 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0024D5                        146     _HEADER DZEQUAL,3,"D0="
      0024D5 24 C2                    1         .word LINK 
                           0024D7     2         LINK=.
      0024D7 03                       3         .byte 3  
      0024D8 44 30 3D                 4         .ascii "D0="
      0024DB                          5         DZEQUAL:
      0024DB CD 05 FE         [ 4]  147     CALL ORR 
      0024DE A6 FF            [ 1]  148     LD A,#0xFF
      0024E0 90 93            [ 1]  149     LDW Y,X
      0024E2 90 FE            [ 2]  150     LDW Y,(Y)
      0024E4 90 A3 00 00      [ 2]  151     CPW Y,#0 
      0024E8 27 01            [ 1]  152     JREQ  ZEQ1
      0024EA 4F               [ 1]  153     CLR A   ;false
      0024EB                        154 ZEQ1:
      0024EB F7               [ 1]  155     LD     (X),A
      0024EC E7 01            [ 1]  156     LD (1,X),A
      0024EE 81               [ 4]  157 	RET     
                                    158     
                                    159 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    160 ;  DNEGATE ( d -- d )
                                    161 ;  negate double (2's complement)
                                    162 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0024EF                        163     _HEADER DNEGAT,7,"DNEGATE"
      0024EF 24 D7                    1         .word LINK 
                           0024F1     2         LINK=.
      0024F1 07                       3         .byte 7  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



      0024F2 44 4E 45 47 41 54 45     4         .ascii "DNEGATE"
      0024F9                          5         DNEGAT:
      0024F9 CD 07 B3         [ 4]  164     CALL INVER
      0024FC CD 05 AE         [ 4]  165     CALL SWAPP 
      0024FF CD 07 B3         [ 4]  166     CALL INVER 
      002502 90 93            [ 1]  167     LDW  Y,X 
      002504 90 FE            [ 2]  168     LDW Y,(Y)
      002506 72 A9 00 01      [ 2]  169     ADDW Y,#1 
      00250A FF               [ 2]  170     LDW (X),Y 
      00250B 24 0B            [ 1]  171     JRNC DNEG1 
      00250D 90 93            [ 1]  172     LDW Y,X 
      00250F 90 EE 02         [ 2]  173     LDW Y,(2,Y)
      002512 72 A9 00 01      [ 2]  174     ADDW Y,#1
      002516 EF 02            [ 2]  175     LDW (2,X),Y 
      002518                        176 DNEG1:
      002518 CD 05 AE         [ 4]  177     CALL SWAPP 
      00251B 81               [ 4]  178     RET      
                                    179 
                                    180 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    181 ;   U> ( u1 u2 -- f )
                                    182 ;   f = true if u1>u2 
                                    183 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00251C                        184     _HEADER UGREAT,2,"U>"
      00251C 24 F1                    1         .word LINK 
                           00251E     2         LINK=.
      00251E 02                       3         .byte 2  
      00251F 55 3E                    4         .ascii "U>"
      002521                          5         UGREAT:
      002521 A6 00            [ 1]  185     LD A,#0
      002523 90 93            [ 1]  186     LDW Y,X 
      002525 90 EE 02         [ 2]  187     LDW Y,(2,Y)
      002528 90 BF 28         [ 2]  188     LDW YTEMP,Y 
      00252B 90 93            [ 1]  189     LDW Y,X
      00252D 1C 00 02         [ 2]  190     ADDW X,#2 
      002530 90 FE            [ 2]  191     LDW Y,(Y)
      002532 90 B3 28         [ 2]  192     CPW Y,YTEMP 
      002535 2B 02            [ 1]  193     JRMI UGREAT1 
      002537 A6 FF            [ 1]  194     LD A,#0XFF 
      002539                        195 UGREAT1:
      002539 F7               [ 1]  196     LD (X),A 
      00253A E7 01            [ 1]  197     LD (1,X),A 
      00253C 81               [ 4]  198     RET 
                                    199 
                                    200 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    201 ;    SFZ ( f# -- f# )
                                    202 ;    set FPSW zero flag 
                                    203 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00253D                        204     _HEADER SFZ,3,"SFZ"
      00253D 25 1E                    1         .word LINK 
                           00253F     2         LINK=.
      00253F 03                       3         .byte 3  
      002540 53 46 5A                 4         .ascii "SFZ"
      002543                          5         SFZ:
      002543 CD 07 84         [ 4]  205     CALL DDUP 
      002546 CD 24 8F         [ 4]  206     CALL FER 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      002549                        207     _DOLIT 0xfffe 
      002549 CD 04 79         [ 4]    1     CALL DOLIT 
      00254C FF FE                    2     .word 0xfffe 
      00254E CD 05 EA         [ 4]  208     CALL ANDD 
      002551 CD 05 67         [ 4]  209     CALL TOR    
      002554                        210     _DOLIT 0x807F 
      002554 CD 04 79         [ 4]    1     CALL DOLIT 
      002557 80 7F                    2     .word 0x807F 
      002559 CD 05 EA         [ 4]  211     CALL ANDD 
      00255C CD 24 DB         [ 4]  212     CALL DZEQUAL 
      00255F                        213     _DOLIT 1 
      00255F CD 04 79         [ 4]    1     CALL DOLIT 
      002562 00 01                    2     .word 1 
      002564 CD 05 EA         [ 4]  214     CALL ANDD 
      002567 CD 05 48         [ 4]  215     CALL RFROM 
      00256A CD 05 FE         [ 4]  216     CALL ORR 
      00256D CD 24 42         [ 4]  217     CALL FPSW 
      002570 CD 04 E0         [ 4]  218     CALL STORE 
      002573 81               [ 4]  219     RET 
                                    220 
                                    221 
                                    222 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    223 ;   SFN ( f# -- f# )
                                    224 ;   set FPSW negative flag 
                                    225 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002574                        226     _HEADER SFN,3,"SFN"
      002574 25 3F                    1         .word LINK 
                           002576     2         LINK=.
      002576 03                       3         .byte 3  
      002577 53 46 4E                 4         .ascii "SFN"
      00257A                          5         SFN:
      00257A CD 05 9E         [ 4]  227     CALL DUPP  
      00257D CD 24 8F         [ 4]  228     CALL FER 
      002580                        229     _DOLIT 0xFFFD 
      002580 CD 04 79         [ 4]    1     CALL DOLIT 
      002583 FF FD                    2     .word 0xFFFD 
      002585 CD 05 EA         [ 4]  230     CALL ANDD  
      002588 CD 05 67         [ 4]  231     CALL TOR 
      00258B                        232     _DOLIT 0x8000
      00258B CD 04 79         [ 4]    1     CALL DOLIT 
      00258E 80 00                    2     .word 0x8000 
      002590 CD 05 EA         [ 4]  233     CALL ANDD
      002593 90 93            [ 1]  234     LDW Y,X 
      002595 90 FE            [ 2]  235     LDW Y,(Y)
      002597 98               [ 1]  236     RCF 
      002598 90 59            [ 2]  237     RLCW Y 
      00259A 90 59            [ 2]  238     RLCW Y 
      00259C 90 59            [ 2]  239     RLCW Y 
      00259E FF               [ 2]  240     LDW (X),Y 
      00259F CD 05 48         [ 4]  241     CALL RFROM 
      0025A2 CD 05 FE         [ 4]  242     CALL ORR 
      0025A5 CD 24 42         [ 4]  243     CALL FPSW
      0025A8 CD 04 E0         [ 4]  244     CALL STORE 
      0025AB 81               [ 4]  245     RET 
                                    246 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



                                    247 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    248 ;   SFV ( -- )
                                    249 ;   set overflow flag 
                                    250 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0025AC                        251     _HEADER SFV,3,"SFV"
      0025AC 25 76                    1         .word LINK 
                           0025AE     2         LINK=.
      0025AE 03                       3         .byte 3  
      0025AF 53 46 56                 4         .ascii "SFV"
      0025B2                          5         SFV:
      0025B2 CD 24 42         [ 4]  252     CALL FPSW 
      0025B5 CD 04 F7         [ 4]  253     CALL AT 
      0025B8                        254     _DOLIT 4 
      0025B8 CD 04 79         [ 4]    1     CALL DOLIT 
      0025BB 00 04                    2     .word 4 
      0025BD CD 05 FE         [ 4]  255     CALL ORR 
      0025C0 CD 24 42         [ 4]  256     CALL FPSW 
      0025C3 CD 04 E0         [ 4]  257     CALL STORE 
      0025C6 81               [ 4]  258     RET 
                                    259 
                                    260 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    261 ;  @EXPONENT ( f# -- m e )
                                    262 ;  split float in mantissa/exponent 
                                    263 ;  m mantissa as a double 
                                    264 ;  e exponent as a single 
                                    265 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0025C7                        266     _HEADER ATEXP,9,"@EXPONENT"             
      0025C7 25 AE                    1         .word LINK 
                           0025C9     2         LINK=.
      0025C9 09                       3         .byte 9  
      0025CA 40 45 58 50 4F 4E 45     4         .ascii "@EXPONENT"
             4E 54
      0025D3                          5         ATEXP:
      0025D3 CD 24 65         [ 4]  267     CALL FRESET
      0025D6 CD 25 7A         [ 4]  268     CALL SFN
      0025D9 CD 25 43         [ 4]  269     CALL SFZ 
      0025DC CD 05 9E         [ 4]  270     CALL DUPP
      0025DF                        271     _DOLIT 0X7F80 
      0025DF CD 04 79         [ 4]    1     CALL DOLIT 
      0025E2 7F 80                    2     .word 0X7F80 
      0025E4 CD 05 EA         [ 4]  272     CALL ANDD 
      0025E7                        273     _DOLIT 7 
      0025E7 CD 04 79         [ 4]    1     CALL DOLIT 
      0025EA 00 07                    2     .word 7 
      0025EC CD 0A D1         [ 4]  274     CALL RSHIFT
      0025EF                        275     _DOLIT 127 
      0025EF CD 04 79         [ 4]    1     CALL DOLIT 
      0025F2 00 7F                    2     .word 127 
      0025F4 CD 08 12         [ 4]  276     CALL SUBB
      0025F7 CD 05 67         [ 4]  277     CALL TOR 
      0025FA                        278     _DOLIT 0x7F
      0025FA CD 04 79         [ 4]    1     CALL DOLIT 
      0025FD 00 7F                    2     .word 0x7F 
      0025FF CD 05 EA         [ 4]  279     CALL ANDD  ; mantissa as double  
      002602 CD 24 B1         [ 4]  280     CALL FNE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      002605                        281     _QBRAN POSMANT 
      002605 CD 04 AC         [ 4]    1     CALL QBRAN
      002608 26 0D                    2     .word POSMANT
      00260A CD 24 F9         [ 4]  282     CALL DNEGAT 
      00260D                        283 POSMANT:
      00260D CD 05 48         [ 4]  284     CALL RFROM 
      002610 81               [ 4]  285     RET 
                                    286 
                                    287 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    288 ;    !EXPONENT ( m e -- f# )
                                    289 ;    built float from mantissa/exponent 
                                    290 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002611                        291     _HEADER STEXP,9,"!EXPONENT"
      002611 25 C9                    1         .word LINK 
                           002613     2         LINK=.
      002613 09                       3         .byte 9  
      002614 21 45 58 50 4F 4E 45     4         .ascii "!EXPONENT"
             4E 54
      00261D                          5         STEXP:
      00261D CD 05 9E         [ 4]  292     CALL DUPP 
      002620 CD 08 2C         [ 4]  293     CALL ABSS 
      002623                        294     _DOLIT 127 
      002623 CD 04 79         [ 4]    1     CALL DOLIT 
      002626 00 7F                    2     .word 127 
      002628 CD 25 21         [ 4]  295     CALL UGREAT
      00262B                        296     _QBRAN STEXP1
      00262B CD 04 AC         [ 4]    1     CALL QBRAN
      00262E 26 33                    2     .word STEXP1
      002630 CD 25 B2         [ 4]  297     CALL SFV  
      002633                        298 STEXP1:
      002633                        299     _DOLIT 127 
      002633 CD 04 79         [ 4]    1     CALL DOLIT 
      002636 00 7F                    2     .word 127 
      002638 CD 07 99         [ 4]  300     CALL PLUS 
      00263B                        301     _DOLIT 0XFF 
      00263B CD 04 79         [ 4]    1     CALL DOLIT 
      00263E 00 FF                    2     .word 0XFF 
      002640 CD 05 EA         [ 4]  302     CALL ANDD 
      002643                        303     _DOLIT 7 
      002643 CD 04 79         [ 4]    1     CALL DOLIT 
      002646 00 07                    2     .word 7 
      002648 CD 0A B5         [ 4]  304     CALL LSHIFT 
      00264B CD 05 67         [ 4]  305     CALL TOR   ; R: e 
      00264E CD 05 9E         [ 4]  306     CALL DUPP 
      002651                        307     _DOLIT 0X8000 
      002651 CD 04 79         [ 4]    1     CALL DOLIT 
      002654 80 00                    2     .word 0X8000 
      002656 CD 05 EA         [ 4]  308     CALL ANDD 
      002659                        309     _QBRAN STEXP2 
      002659 CD 04 AC         [ 4]    1     CALL QBRAN
      00265C 26 6F                    2     .word STEXP2
      00265E                        310     _DOLIT 0X8000 
      00265E CD 04 79         [ 4]    1     CALL DOLIT 
      002661 80 00                    2     .word 0X8000 
      002663 CD 05 48         [ 4]  311     CALL RFROM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      002666 CD 05 FE         [ 4]  312     CALL ORR
      002669 CD 05 67         [ 4]  313     CALL TOR
      00266C CD 24 F9         [ 4]  314     CALL DNEGAT  
      00266F                        315 STEXP2:
      00266F CD 05 9E         [ 4]  316     CALL DUPP 
      002672                        317     _DOLIT 0X7F
      002672 CD 04 79         [ 4]    1     CALL DOLIT 
      002675 00 7F                    2     .word 0X7F 
      002677 CD 25 21         [ 4]  318     CALL UGREAT 
      00267A                        319     _QBRAN STEXP3 
      00267A CD 04 AC         [ 4]    1     CALL QBRAN
      00267D 26 82                    2     .word STEXP3
      00267F CD 25 B2         [ 4]  320     CALL SFV 
      002682                        321 STEXP3:
      002682                        322     _DOLIT 0X7F 
      002682 CD 04 79         [ 4]    1     CALL DOLIT 
      002685 00 7F                    2     .word 0X7F 
      002687 CD 05 EA         [ 4]  323     CALL ANDD 
      00268A CD 05 48         [ 4]  324     CALL RFROM 
      00268D CD 05 FE         [ 4]  325     CALL ORR 
      002690 CD 25 43         [ 4]  326     CALL SFZ 
      002693 CD 25 7A         [ 4]  327     CALL SFN 
      002696 81               [ 4]  328     RET 
                                    329 
                                    330 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    331 ;    <ROT ( n1 n2 n3 -- n3 n1 n2 )
                                    332 ;    rotate left 3 top elements 
                                    333 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002697                        334     _HEADER NROT,4,"<ROT"
      002697 26 13                    1         .word LINK 
                           002699     2         LINK=.
      002699 04                       3         .byte 4  
      00269A 3C 52 4F 54              4         .ascii "<ROT"
      00269E                          5         NROT:
      00269E 90 93            [ 1]  335     LDW Y,X 
      0026A0 90 FE            [ 2]  336     LDW Y,(Y)
      0026A2 90 BF 28         [ 2]  337     LDW YTEMP,Y ; n3  
      0026A5 90 93            [ 1]  338     LDW Y,X 
      0026A7 90 EE 02         [ 2]  339     LDW Y,(2,Y) ; Y = n2 
      0026AA FF               [ 2]  340     LDW (X),Y   ; TOS = n2 
      0026AB 90 93            [ 1]  341     LDW Y,X    
      0026AD 90 EE 04         [ 2]  342     LDW Y,(4,Y) ; Y = n1 
      0026B0 EF 02            [ 2]  343     LDW (2,X),Y ;   = n1 
      0026B2 90 BE 28         [ 2]  344     LDW Y,YTEMP 
      0026B5 EF 04            [ 2]  345     LDW (4,X),Y ; = n3 
      0026B7 81               [ 4]  346     RET 
                                    347 
                                    348 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    349 ;   D/MOD ( d s - r qd )
                                    350 ;   unsigned divide double by single 
                                    351 ;   return double quotient 
                                    352 ;   and single remainder 
                                    353 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026B8                        354     _HEADER DSLMOD,5,"D/MOD"
      0026B8 26 99                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



                           0026BA     2         LINK=.
      0026BA 05                       3         .byte 5  
      0026BB 44 2F 4D 4F 44           4         .ascii "D/MOD"
      0026C0                          5         DSLMOD:
      0026C0 90 93            [ 1]  355         LDW     Y,X             ; stack pointer to Y
      0026C2 FE               [ 2]  356         LDW     X,(X)           ; un
      0026C3 BF 28            [ 2]  357         LDW     YTEMP,X         ; save un
      0026C5 93               [ 1]  358         LDW     X,Y
      0026C6 89               [ 2]  359         PUSHW   X               ; save stack pointer
      0026C7 90 89            [ 2]  360         PUSHW   Y 
      0026C9 EE 02            [ 2]  361         LDW     X,(2,X)           ; X=udh
      0026CB 90 BE 28         [ 2]  362         LDW     Y,YTEMP         ; divisor 
      0026CE 65               [ 2]  363         DIVW    X,Y 
      0026CF BF 26            [ 2]  364         LDW     XTEMP,X         ; QUOTIENT hi 
      0026D1 93               [ 1]  365         LDW     X,Y             ; remainder in X 
      0026D2 90 85            [ 2]  366         POPW    Y 
      0026D4 90 EE 04         [ 2]  367         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      0026D7 A6 10            [ 1]  368         LD      A,#16           ; loop count
      0026D9 90 58            [ 2]  369         SLLW    Y               ; udl shift udl into udh
      0026DB                        370 DSLMOD3:
      0026DB 59               [ 2]  371         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      0026DC 25 04            [ 1]  372         JRC     DSLMODa         ; if carry out of rotate
      0026DE B3 28            [ 2]  373         CPW     X,YTEMP         ; compare udh to un
      0026E0 25 05            [ 1]  374         JRULT   DSLMOD4         ; can't subtract
      0026E2                        375 DSLMODa:
      0026E2 72 B0 00 28      [ 2]  376         SUBW    X,YTEMP         ; can subtract
      0026E6 98               [ 1]  377         RCF
      0026E7                        378 DSLMOD4:
      0026E7 8C               [ 1]  379         CCF                     ; quotient bit
      0026E8 90 59            [ 2]  380         RLCW    Y               ; rotate into quotient, rotate out udl
      0026EA 4A               [ 1]  381         DEC     A               ; repeat
      0026EB 26 EE            [ 1]  382         JRNE    DSLMOD3           ; if A == 0
      0026ED                        383 DSLMODb:
      0026ED BF 28            [ 2]  384         LDW     YTEMP,X         ; done, save remainder
      0026EF 85               [ 2]  385         POPW    X               ; restore stack pointer
      0026F0 EF 02            [ 2]  386         LDW     (2,X),Y           ; save quotient low 
      0026F2 90 BE 26         [ 2]  387         LDW     Y,XTEMP         ; quotient hi 
      0026F5 FF               [ 2]  388         LDW     (X),Y           ; save quotient hi 
      0026F6 90 BE 28         [ 2]  389         LDW     Y,YTEMP         ; remainder onto stack
      0026F9 EF 04            [ 2]  390         LDW     (4,X),Y
      0026FB 81               [ 4]  391         RET 
                                    392 
                                    393 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    394 ;   D# ( d -- d )
                                    395 ;   extract least digit 
                                    396 ;   from double integer 
                                    397 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026FC                        398     _HEADER DDIG,2,"D#"
      0026FC 26 BA                    1         .word LINK 
                           0026FE     2         LINK=.
      0026FE 02                       3         .byte 2  
      0026FF 44 23                    4         .ascii "D#"
      002701                          5         DDIG:
      002701 CD 06 5B         [ 4]  399     CALL BASE 
      002704 CD 04 F7         [ 4]  400     CALL AT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



      002707 CD 26 C0         [ 4]  401     CALL DSLMOD
      00270A CD 07 59         [ 4]  402     CALL ROT   
      00270D CD 0C D2         [ 4]  403     CALL DIGIT 
      002710 CD 0D 1E         [ 4]  404     CALL HOLD 
      002713 81               [ 4]  405     RET 
                                    406 
                                    407 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    408 ;    D#S ( d -- s )
                                    409 ;   extract digit from double 
                                    410 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002714                        411     _HEADER DDIGS,3,"D#S"
      002714 26 FE                    1         .word LINK 
                           002716     2         LINK=.
      002716 03                       3         .byte 3  
      002717 44 23 53                 4         .ascii "D#S"
      00271A                          5         DDIGS:
      00271A CD 27 01         [ 4]  412     CALL    DDIG 
      00271D CD 07 84         [ 4]  413     CALL    DDUP 
      002720 CD 24 DB         [ 4]  414     CALL    DZEQUAL
      002723                        415     _QBRAN  DDIGS 
      002723 CD 04 AC         [ 4]    1     CALL QBRAN
      002726 27 1A                    2     .word DDIGS
      002728 CD 05 94         [ 4]  416     CALL    DROP 
      00272B 81               [ 4]  417     RET 
                                    418 
                                    419 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    420 ;   E. ( f# -- )
                                    421 ;   print float in scientific 
                                    422 ;   format 
                                    423 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00272C                        424     _HEADER EDOT,2,"E."
      00272C 27 16                    1         .word LINK 
                           00272E     2         LINK=.
      00272E 02                       3         .byte 2  
      00272F 45 2E                    4         .ascii "E."
      002731                          5         EDOT:
      002731 CD 06 5B         [ 4]  425     CALL BASE 
      002734 CD 04 F7         [ 4]  426     CALL AT 
      002737 CD 05 67         [ 4]  427     CALL TOR 
      00273A CD 24 53         [ 4]  428     CALL FBASE 
      00273D CD 04 F7         [ 4]  429     CALL AT
      002740 CD 06 5B         [ 4]  430     CALL BASE 
      002743 CD 04 E0         [ 4]  431     CALL STORE 
      002746 CD 25 D3         [ 4]  432     CALL ATEXP ; m e 
      002749                        433 EDOT0:
      002749 CD 05 67         [ 4]  434     CALL TOR   
      00274C CD 24 B1         [ 4]  435     CALL FNE 
      00274F                        436     _QBRAN EDOT1
      00274F CD 04 AC         [ 4]    1     CALL QBRAN
      002752 27 57                    2     .word EDOT1
      002754 CD 24 F9         [ 4]  437     CALL DNEGAT
      002757                        438 EDOT1:
      002757 CD 0F 21         [ 4]  439     CALL SPACE 
      00275A CD 0D 0E         [ 4]  440     CALL BDIGS     
      00275D                        441 EDOT2: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      00275D CD 27 01         [ 4]  442     CALL DDIG
      002760 CD 05 48         [ 4]  443     CALL RFROM 
      002763 CD 0A 97         [ 4]  444     CALL ONEP 
      002766 CD 05 67         [ 4]  445     CALL TOR 
      002769 CD 05 9E         [ 4]  446     CALL DUPP
      00276C                        447     _QBRAN EDOT3 
      00276C CD 04 AC         [ 4]    1     CALL QBRAN
      00276F 27 76                    2     .word EDOT3
      002771                        448     _BRAN EDOT2  
      002771 CD 04 C3         [ 4]    1     CALL BRAN 
      002774 27 5D                    2     .word EDOT2 
      002776                        449 EDOT3:
      002776 CD 05 C8         [ 4]  450     CALL OVER 
      002779 CD 06 5B         [ 4]  451     CALL BASE 
      00277C CD 04 F7         [ 4]  452     CALL AT 
      00277F CD 08 59         [ 4]  453     CALL ULESS 
      002782                        454     _QBRAN EDOT2 
      002782 CD 04 AC         [ 4]    1     CALL QBRAN
      002785 27 5D                    2     .word EDOT2
      002787                        455     _DOLIT '.'
      002787 CD 04 79         [ 4]    1     CALL DOLIT 
      00278A 00 2E                    2     .word '.' 
      00278C CD 0D 1E         [ 4]  456     CALL HOLD  
      00278F CD 27 01         [ 4]  457     CALL DDIG
      002792 CD 24 B1         [ 4]  458     CALL FNE 
      002795                        459     _QBRAN EDOT4 
      002795 CD 04 AC         [ 4]    1     CALL QBRAN
      002798 27 A2                    2     .word EDOT4
      00279A                        460     _DOLIT '-'
      00279A CD 04 79         [ 4]    1     CALL DOLIT 
      00279D 00 2D                    2     .word '-' 
      00279F CD 0D 1E         [ 4]  461     CALL HOLD 
      0027A2                        462 EDOT4:       
      0027A2 CD 0D 73         [ 4]  463     CALL EDIGS 
      0027A5 CD 0F 4B         [ 4]  464     CALL TYPES
      0027A8 CD 05 48         [ 4]  465     CALL RFROM 
      0027AB CD 07 48         [ 4]  466     CALL QDUP 
      0027AE                        467     _QBRAN EDOT5     
      0027AE CD 04 AC         [ 4]    1     CALL QBRAN
      0027B1 27 BE                    2     .word EDOT5
      0027B3                        468     _DOLIT 'E'
      0027B3 CD 04 79         [ 4]    1     CALL DOLIT 
      0027B6 00 45                    2     .word 'E' 
      0027B8 CD 04 38         [ 4]  469     CALL EMIT 
      0027BB CD 10 04         [ 4]  470     CALL DOT
      0027BE                        471 EDOT5: 
      0027BE CD 05 48         [ 4]  472     CALL RFROM 
      0027C1 CD 06 5B         [ 4]  473     CALL BASE 
      0027C4 CD 04 E0         [ 4]  474     CALL STORE  
      0027C7 81               [ 4]  475     RET 
                                    476 
                                    477 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                    478 ;   F. (f# -- )
                                    479 ;   print float in fixed
                                    480 ;   point format. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



                                    481 ;;;;;;;;;;;;;;;;;;;;;;;;;
      0027C8                        482     _HEADER FDOT,2,"F."
      0027C8 27 2E                    1         .word LINK 
                           0027CA     2         LINK=.
      0027CA 02                       3         .byte 2  
      0027CB 46 2E                    4         .ascii "F."
      0027CD                          5         FDOT:
      0027CD CD 06 5B         [ 4]  483     CALL BASE 
      0027D0 CD 04 F7         [ 4]  484     CALL AT 
      0027D3 CD 05 67         [ 4]  485     CALL TOR 
      0027D6 CD 24 53         [ 4]  486     CALL FBASE 
      0027D9 CD 04 F7         [ 4]  487     CALL AT
      0027DC CD 06 5B         [ 4]  488     CALL BASE 
      0027DF CD 04 E0         [ 4]  489     CALL STORE 
      0027E2 CD 25 D3         [ 4]  490     CALL    ATEXP
      0027E5 CD 05 9E         [ 4]  491     CALL    DUPP  
      0027E8 CD 08 2C         [ 4]  492     CALL    ABSS 
      0027EB                        493     _DOLIT  8
      0027EB CD 04 79         [ 4]    1     CALL DOLIT 
      0027EE 00 08                    2     .word 8 
      0027F0 CD 08 95         [ 4]  494     CALL    GREAT 
      0027F3                        495     _QBRAN  FDOT1 
      0027F3 CD 04 AC         [ 4]    1     CALL QBRAN
      0027F6 27 FB                    2     .word FDOT1
      0027F8 CC 27 49         [ 2]  496     JP      EDOT0 
      0027FB                        497 FDOT1:
      0027FB CD 0F 21         [ 4]  498     CALL    SPACE 
      0027FE CD 05 67         [ 4]  499     CALL    TOR 
      002801 CD 24 B1         [ 4]  500     CALL    FNE 
      002804                        501     _QBRAN  FDOT0 
      002804 CD 04 AC         [ 4]    1     CALL QBRAN
      002807 28 0C                    2     .word FDOT0
      002809 CD 24 F9         [ 4]  502     CALL    DNEGAT 
      00280C                        503 FDOT0: 
      00280C CD 0D 0E         [ 4]  504     CALL    BDIGS
      00280F CD 05 5B         [ 4]  505     CALL    RAT  
      002812 CD 05 D7         [ 4]  506     CALL    ZLESS 
      002815                        507     _QBRAN  FDOT6 
      002815 CD 04 AC         [ 4]    1     CALL QBRAN
      002818 28 43                    2     .word FDOT6
      00281A                        508 FDOT2: ; e<0 
      00281A CD 27 01         [ 4]  509     CALL    DDIG 
      00281D CD 05 48         [ 4]  510     CALL    RFROM
      002820 CD 0A 97         [ 4]  511     CALL    ONEP 
      002823 CD 07 48         [ 4]  512     CALL    QDUP 
      002826                        513     _QBRAN  FDOT3 
      002826 CD 04 AC         [ 4]    1     CALL QBRAN
      002829 28 33                    2     .word FDOT3
      00282B CD 05 67         [ 4]  514     CALL    TOR 
      00282E                        515     _BRAN   FDOT2 
      00282E CD 04 C3         [ 4]    1     CALL BRAN 
      002831 28 1A                    2     .word FDOT2 
      002833                        516 FDOT3:
      002833                        517     _DOLIT  '.' 
      002833 CD 04 79         [ 4]    1     CALL DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



      002836 00 2E                    2     .word '.' 
      002838 CD 0D 1E         [ 4]  518     CALL    HOLD 
      00283B CD 27 1A         [ 4]  519     CALL    DDIGS
      00283E                        520     _BRAN   FDOT9  
      00283E CD 04 C3         [ 4]    1     CALL BRAN 
      002841 28 58                    2     .word FDOT9 
      002843                        521 FDOT6: ; e>=0 
      002843                        522     _BRAN   FDOT8
      002843 CD 04 C3         [ 4]    1     CALL BRAN 
      002846 28 50                    2     .word FDOT8 
      002848                        523 FDOT7:     
      002848                        524     _DOLIT  '0'
      002848 CD 04 79         [ 4]    1     CALL DOLIT 
      00284B 00 30                    2     .word '0' 
      00284D CD 0D 1E         [ 4]  525     CALL    HOLD 
      002850                        526 FDOT8:
      002850 CD 04 8D         [ 4]  527     CALL    DONXT 
      002853 28 48                  528     .word   FDOT7
      002855 CD 27 1A         [ 4]  529     CALL    DDIGS 
      002858                        530 FDOT9:
      002858 CD 24 B1         [ 4]  531     CALL    FNE 
      00285B                        532     _QBRAN  FDOT10 
      00285B CD 04 AC         [ 4]    1     CALL QBRAN
      00285E 28 68                    2     .word FDOT10
      002860                        533     _DOLIT '-' 
      002860 CD 04 79         [ 4]    1     CALL DOLIT 
      002863 00 2D                    2     .word '-' 
      002865 CD 0D 1E         [ 4]  534     CALL   HOLD 
      002868                        535 FDOT10:
      002868 CD 0D 73         [ 4]  536     CALL    EDIGS 
      00286B CD 0F 4B         [ 4]  537     CALL    TYPES 
      00286E CD 05 48         [ 4]  538     CALL    RFROM 
      002871 CD 06 5B         [ 4]  539     CALL    BASE 
      002874 CD 04 E0         [ 4]  540     CALL    STORE 
      002877 81               [ 4]  541     RET 
                                    542 
                                    543 ; decrement exponent 
                                    544 ; ( f# -- f# )
      002878                        545 DECEXP: 
      002878 E6 01            [ 1]  546     LD A,(1,X)
      00287A 49               [ 1]  547     RLC A 
      00287B F6               [ 1]  548     LD A,(X)
      00287C 49               [ 1]  549     RLC A 
      00287D A0 01            [ 1]  550     SUB A,#1 
      00287F 98               [ 1]  551     RCF
      002880 46               [ 1]  552     RRC A 
      002881 B7 28            [ 1]  553     LD YTEMP,A
      002883 E6 01            [ 1]  554     LD A,(1,X)
      002885 48               [ 1]  555     SLL A 
      002886 46               [ 1]  556     RRC A 
      002887 E7 01            [ 1]  557     LD (1,X),A 
      002889 F6               [ 1]  558     LD A,(X)
      00288A B4 80            [ 1]  559     AND A,0X80 
      00288C BB 28            [ 1]  560     ADD A,YTEMP 
      00288E F7               [ 1]  561     LD (X),A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      00288F 81               [ 4]  562     RET 
                                    563 
                                    564 ; increment exponent 
                                    565 ;  ( f# -- f# )
      002890                        566 INCEXP:
      002890 E6 01            [ 1]  567     LD A,(1,X)
      002892 49               [ 1]  568     RLC A 
      002893 F6               [ 1]  569     LD A,(X)
      002894 49               [ 1]  570     RLC A 
      002895 AB 01            [ 1]  571     ADD A,#1 
      002897 98               [ 1]  572     RCF
      002898 46               [ 1]  573     RRC A 
      002899 B7 28            [ 1]  574     LD YTEMP,A
      00289B E6 01            [ 1]  575     LD A,(1,X)
      00289D 48               [ 1]  576     SLL A 
      00289E 46               [ 1]  577     RRC A 
      00289F E7 01            [ 1]  578     LD (1,X),A 
      0028A1 F6               [ 1]  579     LD A,(X)
      0028A2 B4 80            [ 1]  580     AND A,0X80 
      0028A4 BB 28            [ 1]  581     ADD A,YTEMP 
      0028A6 F7               [ 1]  582     LD (X),A 
      0028A7 81               [ 4]  583     RET 
                                    584 
                                    585 
                                    586 ; multiply double by single 
                                    587 ; return double 
                                    588 ;  ( d s -- d )
      0028A8                        589     _HEADER DSSTAR,3,"DS*"
      0028A8 27 CA                    1         .word LINK 
                           0028AA     2         LINK=.
      0028AA 03                       3         .byte 3  
      0028AB 44 53 2A                 4         .ascii "DS*"
      0028AE                          5         DSSTAR:
                                    590 ;DSSTAR:
      0028AE CD 05 67         [ 4]  591     CALL TOR
      0028B1 CD 05 9E         [ 4]  592     CALL DUPP 
      0028B4 CD 05 D7         [ 4]  593     CALL ZLESS
      0028B7 CD 05 9E         [ 4]  594     CALL DUPP 
      0028BA CD 05 67         [ 4]  595     CALL TOR 
      0028BD                        596     _QBRAN DSSTAR1 
      0028BD CD 04 AC         [ 4]    1     CALL QBRAN
      0028C0 28 C5                    2     .word DSSTAR1
      0028C2 CD 07 D6         [ 4]  597     CALL DNEGA 
      0028C5                        598 DSSTAR1:
      0028C5 CD 05 48         [ 4]  599     CALL RFROM 
      0028C8 CD 26 9E         [ 4]  600     CALL NROT       
      0028CB CD 05 AE         [ 4]  601     CALL SWAPP 
      0028CE CD 05 5B         [ 4]  602     CALL RAT 
      0028D1 CD 09 CC         [ 4]  603     CALL UMSTA
      0028D4 CD 07 59         [ 4]  604     CALL ROT 
      0028D7 CD 05 48         [ 4]  605     CALL RFROM 
      0028DA CD 09 CC         [ 4]  606     CALL UMSTA 
      0028DD CD 05 94         [ 4]  607     CALL DROP ; DROP OVERFLOW 
      0028E0 CD 07 99         [ 4]  608     CALL PLUS 
      0028E3 CD 07 59         [ 4]  609     CALL ROT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



      0028E6                        610     _QBRAN DSSTAR3 
      0028E6 CD 04 AC         [ 4]    1     CALL QBRAN
      0028E9 28 EE                    2     .word DSSTAR3
      0028EB CD 07 D6         [ 4]  611     CALL DNEGA 
      0028EE                        612 DSSTAR3:
      0028EE 81               [ 4]  613     RET 
                                    614 
                                    615     
                                    616 
                                    617 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    618 ;  LSCALE ( f# -- f# )
                                    619 ;  m *=fbase , e -= 1
                                    620 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028EF                        621     _HEADER LSCALE,6,"LSCALE"
      0028EF 28 AA                    1         .word LINK 
                           0028F1     2         LINK=.
      0028F1 06                       3         .byte 6  
      0028F2 4C 53 43 41 4C 45        4         .ascii "LSCALE"
      0028F8                          5         LSCALE:
      0028F8 CD 25 D3         [ 4]  622     CALL ATEXP 
      0028FB                        623     _DOLIT 1 
      0028FB CD 04 79         [ 4]    1     CALL DOLIT 
      0028FE 00 01                    2     .word 1 
      002900 CD 08 12         [ 4]  624     CALL SUBB 
      002903 CD 05 67         [ 4]  625     CALL TOR
      002906 CD 24 53         [ 4]  626     CALL FBASE 
      002909 CD 04 F7         [ 4]  627     CALL AT 
      00290C CD 28 AE         [ 4]  628     CALL DSSTAR
      00290F CD 05 48         [ 4]  629     CALL RFROM 
      002912 CD 26 1D         [ 4]  630     CALL STEXP 
      002915 81               [ 4]  631     RET  
                                    632 
                                    633 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    634 ;  2SWAP ( d1 d2 -- d2 d1 )
                                    635 ;  swap double 
                                    636 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002916                        637     _HEADER DSWAP,5,"2SWAP"
      002916 28 F1                    1         .word LINK 
                           002918     2         LINK=.
      002918 05                       3         .byte 5  
      002919 32 53 57 41 50           4         .ascii "2SWAP"
      00291E                          5         DSWAP:
      00291E 90 93            [ 1]  638     LDW Y,X 
      002920 90 FE            [ 2]  639     LDW Y,(Y)
      002922 90 BF 28         [ 2]  640     LDW YTEMP,Y ; d2 hi 
      002925 90 93            [ 1]  641     LDW Y,X 
      002927 90 EE 02         [ 2]  642     LDW Y,(2,Y)
      00292A 90 BF 26         [ 2]  643     LDW XTEMP,Y  ; d2 lo 
      00292D 90 93            [ 1]  644     LDW Y,X 
      00292F 90 EE 04         [ 2]  645     LDW Y,(4,Y)  ; d1 hi 
      002932 FF               [ 2]  646     LDW (X),Y 
      002933 90 93            [ 1]  647     LDW Y,X
      002935 90 EE 06         [ 2]  648     LDW Y,(6,Y)  ; d1 lo 
      002938 EF 02            [ 2]  649     LDW (2,X),Y
      00293A 90 BE 28         [ 2]  650     LDW Y,YTEMP  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



      00293D EF 04            [ 2]  651     LDW (4,X),Y 
      00293F 90 BE 26         [ 2]  652     LDW Y,XTEMP 
      002942 EF 06            [ 2]  653     LDW (6,X),Y 
      002944 81               [ 4]  654     RET 
                                    655 
                                    656 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    657 ;  RSCALE ( f# -- f# )
                                    658 ;  m /=fbase , e+=1 
                                    659 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002945                        660     _HEADER RSCALE,6,"RSCALE"
      002945 29 18                    1         .word LINK 
                           002947     2         LINK=.
      002947 06                       3         .byte 6  
      002948 52 53 43 41 4C 45        4         .ascii "RSCALE"
      00294E                          5         RSCALE:
      00294E CD 25 D3         [ 4]  661     CALL ATEXP 
      002951                        662     _DOLIT 1 
      002951 CD 04 79         [ 4]    1     CALL DOLIT 
      002954 00 01                    2     .word 1 
      002956 CD 07 99         [ 4]  663     CALL PLUS 
      002959 CD 05 67         [ 4]  664     CALL TOR 
      00295C CD 24 53         [ 4]  665     CALL FBASE 
      00295F CD 04 F7         [ 4]  666     CALL AT 
      002962 CD 26 C0         [ 4]  667     CALL DSLMOD 
      002965 CD 07 59         [ 4]  668     CALL ROT 
      002968 CD 05 94         [ 4]  669     CALL DROP 
      00296B CD 05 48         [ 4]  670     CALL RFROM 
      00296E CD 26 1D         [ 4]  671     CALL STEXP 
      002971 81               [ 4]  672     RET 
                                    673 
                                    674 
                                    675 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    676 ;   DD* ( d1 d2 -- d3 )
                                    677 ;   double product 
                                    678 ;   
                                    679 ;   d3 = d1 * d2
                                    680 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002972                        681     _HEADER DDSTAR,3,"DD*"
      002972 29 47                    1         .word LINK 
                           002974     2         LINK=.
      002974 03                       3         .byte 3  
      002975 44 44 2A                 4         .ascii "DD*"
      002978                          5         DDSTAR:
      002978                        682     _DOLIT 0 
      002978 CD 04 79         [ 4]    1     CALL DOLIT 
      00297B 00 00                    2     .word 0 
      00297D CD 26 9E         [ 4]  683     CALL NROT  
      002980 CD 05 9E         [ 4]  684     CALL DUPP 
      002983 CD 05 D7         [ 4]  685     CALL ZLESS 
      002986                        686     _QBRAN DDSTAR1 
      002986 CD 04 AC         [ 4]    1     CALL QBRAN
      002989 29 97                    2     .word DDSTAR1
      00298B CD 07 D6         [ 4]  687     CALL DNEGA 
      00298E CD 07 59         [ 4]  688     CALL ROT  
      002991 CD 07 B3         [ 4]  689     CALL INVER 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



      002994 CD 26 9E         [ 4]  690     CALL NROT  
      002997                        691 DDSTAR1:
      002997 CD 05 67         [ 4]  692     CALL TOR 
      00299A CD 05 67         [ 4]  693     CALL TOR
      00299D CD 26 9E         [ 4]  694     CALL NROT  
      0029A0 CD 05 9E         [ 4]  695     CALL DUPP 
      0029A3 CD 05 D7         [ 4]  696     CALL ZLESS 
      0029A6                        697     _QBRAN DDSTAR2 
      0029A6 CD 04 AC         [ 4]    1     CALL QBRAN
      0029A9 29 B7                    2     .word DDSTAR2
      0029AB CD 07 D6         [ 4]  698     CALL DNEGA 
      0029AE CD 07 59         [ 4]  699     CALL ROT
      0029B1 CD 07 B3         [ 4]  700     CALL INVER 
      0029B4 CD 26 9E         [ 4]  701     CALL NROT 
      0029B7                        702 DDSTAR2:
      0029B7 CD 07 84         [ 4]  703     CALL DDUP 
      0029BA CD 05 48         [ 4]  704     CALL RFROM 
      0029BD CD 28 AE         [ 4]  705     CALL DSSTAR 
      0029C0 CD 29 1E         [ 4]  706     CALL DSWAP 
      0029C3 CD 05 48         [ 4]  707     CALL RFROM 
      0029C6 CD 28 AE         [ 4]  708     CALL DSSTAR 
      0029C9 CD 05 94         [ 4]  709     CALL DROP
      0029CC CD 07 99         [ 4]  710     CALL PLUS
      0029CF CD 07 59         [ 4]  711     CALL ROT 
      0029D2                        712     _QBRAN DDSTAR3 
      0029D2 CD 04 AC         [ 4]    1     CALL QBRAN
      0029D5 29 DA                    2     .word DDSTAR3
      0029D7 CD 07 D6         [ 4]  713     CALL DNEGA 
      0029DA                        714 DDSTAR3:  
      0029DA 81               [ 4]  715     RET 
                                    716 
                                    717 
                                    718 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    719 ;    F* ( f#1 f#2 -- f#3 )
                                    720 ;    float product 
                                    721 ;    f#3=f#1 * f#2 
                                    722 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0029DB                        723     _HEADER FSTAR,2,"F*"
      0029DB 29 74                    1         .word LINK 
                           0029DD     2         LINK=.
      0029DD 02                       3         .byte 2  
      0029DE 46 2A                    4         .ascii "F*"
      0029E0                          5         FSTAR:
      0029E0 CD 25 D3         [ 4]  724     CALL ATEXP 
      0029E3 CD 05 67         [ 4]  725     CALL TOR 
      0029E6 CD 29 1E         [ 4]  726     CALL DSWAP 
      0029E9 CD 25 D3         [ 4]  727     CALL ATEXP
      0029EC CD 05 48         [ 4]  728     CALL RFROM 
      0029EF CD 07 99         [ 4]  729     CALL PLUS  
      0029F2 CD 05 67         [ 4]  730     CALL TOR
      0029F5 CD 29 78         [ 4]  731     CALL DDSTAR
      0029F8                        732     _DOLIT 0 
      0029F8 CD 04 79         [ 4]    1     CALL DOLIT 
      0029FB 00 00                    2     .word 0 
      0029FD CD 26 9E         [ 4]  733     CALL NROT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



      002A00 CD 05 9E         [ 4]  734     CALL DUPP 
      002A03 CD 05 D7         [ 4]  735     CALL ZLESS 
      002A06                        736     _QBRAN FSTAR1 
      002A06 CD 04 AC         [ 4]    1     CALL QBRAN
      002A09 2A 17                    2     .word FSTAR1
      002A0B CD 07 D6         [ 4]  737     CALL DNEGA 
      002A0E CD 07 59         [ 4]  738     CALL ROT 
      002A11 CD 07 B3         [ 4]  739     CALL INVER 
      002A14 CD 26 9E         [ 4]  740     CALL NROT 
      002A17                        741 FSTAR1:
      002A17 CD 05 9E         [ 4]  742     CALL DUPP
      002A1A                        743     _DOLIT 0X7F   
      002A1A CD 04 79         [ 4]    1     CALL DOLIT 
      002A1D 00 7F                    2     .word 0X7F 
      002A1F CD 08 95         [ 4]  744     CALL GREAT 
      002A22                        745     _QBRAN FSTAR2 
      002A22 CD 04 AC         [ 4]    1     CALL QBRAN
      002A25 2A 44                    2     .word FSTAR2
      002A27 CD 24 53         [ 4]  746     CALL FBASE 
      002A2A CD 04 F7         [ 4]  747     CALL AT 
      002A2D CD 26 C0         [ 4]  748     CALL DSLMOD 
      002A30 CD 07 59         [ 4]  749     CALL ROT 
      002A33 CD 05 94         [ 4]  750     CALL DROP
      002A36 CD 05 48         [ 4]  751     CALL RFROM 
      002A39 CD 0A 97         [ 4]  752     CALL ONEP 
      002A3C CD 05 67         [ 4]  753     CALL TOR  
      002A3F                        754     _BRAN FSTAR1
      002A3F CD 04 C3         [ 4]    1     CALL BRAN 
      002A42 2A 17                    2     .word FSTAR1 
      002A44                        755 FSTAR2:
      002A44 CD 07 59         [ 4]  756     CALL ROT 
      002A47                        757     _QBRAN FSTAR3 
      002A47 CD 04 AC         [ 4]    1     CALL QBRAN
      002A4A 2A 4F                    2     .word FSTAR3
      002A4C CD 07 D6         [ 4]  758     CALL DNEGA 
      002A4F                        759 FSTAR3:     
      002A4F CD 05 48         [ 4]  760     CALL RFROM 
      002A52 CD 26 1D         [ 4]  761     CALL STEXP 
      002A55 81               [ 4]  762     RET 
                                    763 
                                    764 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    765 ;  F/ ( f#1 f#2 -- f#3 )
                                    766 ;  float division
                                    767 ;  f#3 = f#1/f#2
                                    768 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002A56                        769     _HEADER FSLASH,2,"F/"
      002A56 29 DD                    1         .word LINK 
                           002A58     2         LINK=.
      002A58 02                       3         .byte 2  
      002A59 46 2F                    4         .ascii "F/"
      002A5B                          5         FSLASH:
      002A5B CD 25 D3         [ 4]  770     CALL ATEXP 
      002A5E CD 05 67         [ 4]  771     CALL TOR 
      002A61 CD 26 9E         [ 4]  772     CALL NROT 
      002A64 CD 25 D3         [ 4]  773     CALL ATEXP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



      002A67 CD 05 67         [ 4]  774     CALL TOR 
      002A6A CD 29 1E         [ 4]  775     CALL DSWAP 
                                    776 
      002A6D 81               [ 4]  777     RET     
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



                                   4722 .endif 
                                   4723 
                                   4724 ;===============================================================
                                   4725 
                           002A58  4726 LASTN =	LINK   ;last name defined
                                   4727 
                                   4728 ; application code begin here
      002A80                       4729 	.bndry 128 ; align on flash block  
      002A80                       4730 app_space: 
                                   4731 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        000835 R   |   6 ABOR1      0013CF R
  6 ABOR2      0013E6 R   |   6 ABORQ      0013C7 R   |   6 ABORT      0013B8 R
  6 ABRTQ      0016A3 R   |   6 ABSS       00082C R   |   6 ACCEP      00134E R
  6 ACCP1      001357 R   |   6 ACCP2      00137D R   |   6 ACCP3      001380 R
  6 ACCP4      001382 R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |   6 ADRADJ     000738 R
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  6 AFT        00168E R   |   6 AGAIN      0015E4 R   |   6 AHEAD      001641 R
  6 ALLOT      0014F7 R   |   6 ANDD       0005EA R   |     APP_CP  =  004004 
    APP_LAST=  004000     |     APP_RUN =  004002     |     APP_VP  =  004006 
  6 AT         0004F7 R   |   6 ATEXE      000C27 R   |   6 ATEXP      0025D3 R
  6 AUTORUN    00012B R   |     AWU_APR =  0050F1     |     AWU_CSR =  0050F0 
    AWU_TBR =  0050F2     |     B0_MASK =  000001     |     B115200 =  000006 
  6 B115K2     0003E2 R   |     B19200  =  000003     |   6 B19K2      0003BF R
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
  6 B2K4       000390 R   |     B2_MASK =  000004     |     B38400  =  000004 
    B3_MASK =  000008     |     B460800 =  000008     |     B4800   =  000001 
  6 B4K8       00039E R   |     B4_MASK =  000010     |     B57600  =  000005 
  6 B57K6      0003D0 R   |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
  6 B9K6       0003AE R   |   6 BACK1      0012F6 R   |   6 BASE       00065B R
    BASEE   =  00000A     |   6 BAUD       0003F2 R   |     BCNT    =  000001 
  6 BCOMP      001539 R   |   6 BDIGS      000D0E R   |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
  6 BEGIN      0015C6 R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
  6 BKSLA      00114B R   |   6 BKSP       0012C6 R   |     BKSPP   =  000008 
  6 BLANK      000AF6 R   |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |   6 BRAN       0004C3 R   |     BTW     =  000001 
  6 BUF2ROW    00210E R   |   6 BYE        0000B8 R   |     CADR    =  000003 
    CALLL   =  0000CD     |   6 CALLOT     002357 R   |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CARRY   =  00002C 
    CASE_SEN=  000000     |   6 CAT        000515 R   |   6 CCOMMA     00151B R
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CELLL   =  000002     |   6 CELLM      000A7B R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]

Symbol Table

  6 CELLP      000A6C R   |   6 CELLS      000A8A R   |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   6 CHAR1      000F3B R
  6 CHAR2      000F3E R   |   6 CHKIVEC    001FFC R   |     CLKOPT  =  004807 
    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |   6 CMOV1      000C46 R
  6 CMOV2      000C5E R   |   6 CMOVE      000C3E R   |     CNTDWN  =  000034 
  6 CNTXT      0006DE R   |   6 COLD       001AFD R   |   6 COLD1      001AFD R
  6 COLON      00183C R   |   6 COMMA      001504 R   |   6 COMPI      001549 R
    COMPO   =  000040     |   6 CONSTANT   0018E6 R   |   6 COUNT      000BDA R
  6 CPP        0006FA R   |     CPU_A   =  007F00     |     CPU_CCR =  007F0A 
    CPU_PCE =  007F01     |     CPU_PCH =  007F02     |     CPU_PCL =  007F03 
    CPU_SPH =  007F08     |     CPU_SPL =  007F09     |     CPU_XH  =  007F04 
    CPU_XL  =  007F05     |     CPU_YH  =  007F06     |     CPU_YL  =  007F07 
  6 CR         000F69 R   |   6 CREAT      001882 R   |     CRR     =  00000D 
  6 CSTOR      000504 R   |   6 CTABLE     002378 R   |   6 CTAT       002399 R
  6 CTINIT     0023C1 R   |   6 DAT        000BBA R   |     DATSTK  =  001680 
  6 DCONST     001922 R   |   6 DDIG       002701 R   |   6 DDIGS      00271A R
  6 DDROP      000779 R   |   6 DDSTAR     002978 R   |   6 DDSTAR1    002997 R
  6 DDSTAR2    0029B7 R   |   6 DDSTAR3    0029DA R   |   6 DDUP       000784 R
    DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF     |   6 DECEXP     002878 R
  6 DECIM      000DBE R   |   6 DEPTH      000B45 R   |     DEVID_BA=  0048CD 
    DEVID_EN=  0048D8     |     DEVID_LO=  0048D2     |     DEVID_LO=  0048D3 
    DEVID_LO=  0048D4     |     DEVID_LO=  0048D5     |     DEVID_LO=  0048D6 
    DEVID_LO=  0048D7     |     DEVID_LO=  0048D8     |     DEVID_WA=  0048D1 
    DEVID_XH=  0048CE     |     DEVID_XL=  0048CD     |     DEVID_YH=  0048D0 
    DEVID_YL=  0048CF     |   6 DGTQ1      000E03 R   |   6 DI         0000C6 R
  6 DIG        000D37 R   |   6 DIGIT      000CD2 R   |   6 DIGS       000D48 R
  6 DIGS1      000D48 R   |   6 DIGS2      000D55 R   |   6 DIGTQ      000DD2 R
    DISCOVER=  000000     |     DM_BK1RE=  007F90     |     DM_BK1RH=  007F91 
    DM_BK1RL=  007F92     |     DM_BK2RE=  007F93     |     DM_BK2RH=  007F94 
    DM_BK2RL=  007F95     |     DM_CR1  =  007F96     |     DM_CR2  =  007F97 
    DM_CSR1 =  007F98     |     DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A 
  6 DN1        0007F3 R   |   6 DNEG1      002518 R   |   6 DNEGA      0007D6 R
  6 DNEGAT     0024F9 R   |   6 DOCONST    001910 R   |   6 DOLIT      000479 R
  6 DONXT      00048D R   |     DOORBELL=  000000     |   6 DOSTR      000F7F R
  6 DOT        001004 R   |   6 DOT1       00101A R   |   6 DOTI1      001A7E R
  6 DOTID      001A68 R   |   6 DOTO1      00145B R   |   6 DOTOK      001441 R
  6 DOTPR      00112D R   |   6 DOTQ       0016BD R   |   6 DOTQP      000FA8 R
  6 DOTR       000FB6 R   |   6 DOTS       001A0A R   |   6 DOTS1      001A15 R
  6 DOTS2      001A1E R   |   6 DOVAR      00064B R   |   6 DO_DCONS   001951 R
  6 DROP       000594 R   |   6 DSLMOD     0026C0 R   |   6 DSLMOD3    0026DB R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]

Symbol Table

  6 DSLMOD4    0026E7 R   |   6 DSLMODa    0026E2 R   |   6 DSLMODb    0026ED R
  6 DSSTAR     0028AE R   |   6 DSSTAR1    0028C5 R   |   6 DSSTAR3    0028EE R
  6 DSTOR      000B94 R   |   6 DSWAP      00291E R   |   6 DUMP       0019C0 R
  6 DUMP1      0019D7 R   |   6 DUMP3      0019F9 R   |   6 DUMPP      00198F R
  6 DUPP       00059E R   |   6 DZEQUAL    0024DB R   |   6 EDIGS      000D73 R
  6 EDOT       002731 R   |   6 EDOT0      002749 R   |   6 EDOT1      002757 R
  6 EDOT2      00275D R   |   6 EDOT3      002776 R   |   6 EDOT4      0027A2 R
  6 EDOT5      0027BE R   |   6 EECSTORE   001DAD R   |   6 EEPCP      001BD3 R
  6 EEPLAST    001BA6 R   |   6 EEPROM     001B8E R   |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |     EEPROM_R=  000010     |     EEPROM_S=  000800 
  6 EEPRUN     001BBD R   |   6 EEPVP      001BE9 R   |   6 EESTORE    001DF9 R
  6 EE_CCOMM   0020C3 R   |   6 EE_COMMA   0020A2 R   |   6 EE_CREAD   001D3E R
  6 EE_READ    001D1C R   |   6 EI         0000BF R   |   6 ELSEE      00161C R
  6 EMIT       000438 R   |   6 ENEPER     0022E3 R   |     EOL_CR  =  000001 
    EOL_LF  =  000000     |   6 EQ1        000850 R   |   6 EQUAL      00083A R
  6 ERASE      000CA0 R   |     ERR     =  00001B     |   6 EVAL       001484 R
  6 EVAL1      001484 R   |   6 EVAL2      0014A0 R   |   6 EXE1       000C35 R
  6 EXECU      0004D3 R   |     EXT     =  000000     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |   6 EXTRC      000CFA R   |   6 FADDR      002190 R
  6 FARAT      001C54 R   |   6 FARCAT     001C60 R   |   6 FBASE      002453 R
  6 FC_XOFF    000465 R   |   6 FC_XON     00044F R   |   6 FDOT       0027CD R
  6 FDOT0      00280C R   |   6 FDOT1      0027FB R   |   6 FDOT10     002868 R
  6 FDOT2      00281A R   |   6 FDOT3      002833 R   |   6 FDOT6      002843 R
  6 FDOT7      002848 R   |   6 FDOT8      002850 R   |   6 FDOT9      002858 R
  6 FER        00248F R   |     FHSE    =  7A1200     |     FHSI    =  F42400 
  6 FILL       000C6D R   |   6 FILL1      000C8A R   |   6 FILL2      000C93 R
  6 FIND       001222 R   |   6 FIND1      001240 R   |   6 FIND2      00126E R
  6 FIND3      00127A R   |   6 FIND4      00128E R   |   6 FIND5      00129B R
  6 FIND6      00127F R   |   6 FINIT      002479 R   |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
    FLASH_IA=  000000     |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |     FLSI    =  01F400 
  6 FMOVE      00219B R   |   6 FMOVE2     0021CC R   |   6 FNE        0024B1 R
  6 FOR        001599 R   |   6 FORGET     00015C R   |   6 FORGET1    00018B R
  6 FORGET2    000211 R   |   6 FORGET4    00021A R   |   6 FORGET6    0001D3 R
  6 FOV        0024C6 R   |   6 FPSTOR     001B6F R   |   6 FPSW       002442 R
    FPTR    =  000036     |   6 FREEVAR    000227 R   |   6 FREEVAR4   00025D R
  6 FRESET     002465 R   |   6 FSLASH     002A5B R   |   6 FSTAR      0029E0 R
  6 FSTAR1     002A17 R   |   6 FSTAR2     002A44 R   |   6 FSTAR3     002A4F R
  6 FZE        00249C R   |     GPIO_BAS=  005000     |     GPIO_CR1=  000003 
    GPIO_CR2=  000004     |     GPIO_DDR=  000002     |     GPIO_IDR=  000001 
    GPIO_ODR=  000000     |     GPIO_SIZ=  000005     |   6 GREAT      000895 R
  6 GREAT1     0008AB R   |   6 HERE       000BF1 R   |   6 HEX        000DA9 R
  6 HI         001ABA R   |   6 HLD        0006CB R   |   6 HOLD       000D1E R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]

Symbol Table

    HSECNT  =  004809     |     I2C_CCRH=  00521C     |     I2C_CCRH=  000080 
    I2C_CCRH=  0000C0     |     I2C_CCRH=  000080     |     I2C_CCRH=  000000 
    I2C_CCRH=  000001     |     I2C_CCRH=  000000     |     I2C_CCRL=  00521B 
    I2C_CCRL=  00001A     |     I2C_CCRL=  000002     |     I2C_CCRL=  00000D 
    I2C_CCRL=  000050     |     I2C_CCRL=  000090     |     I2C_CCRL=  0000A0 
    I2C_CR1 =  005210     |     I2C_CR1_=  000006     |     I2C_CR1_=  000007 
    I2C_CR1_=  000000     |     I2C_CR2 =  005211     |     I2C_CR2_=  000002 
    I2C_CR2_=  000003     |     I2C_CR2_=  000000     |     I2C_CR2_=  000001 
    I2C_CR2_=  000007     |     I2C_DR  =  005216     |     I2C_FREQ=  005212 
    I2C_ITR =  00521A     |     I2C_ITR_=  000002     |     I2C_ITR_=  000000 
    I2C_ITR_=  000001     |     I2C_OARH=  005214     |     I2C_OARH=  000001 
    I2C_OARH=  000002     |     I2C_OARH=  000006     |     I2C_OARH=  000007 
    I2C_OARL=  005213     |     I2C_OARL=  000000     |     I2C_OAR_=  000813 
    I2C_OAR_=  000009     |     I2C_PECR=  00521E     |     I2C_READ=  000001 
    I2C_SR1 =  005217     |     I2C_SR1_=  000003     |     I2C_SR1_=  000001 
    I2C_SR1_=  000002     |     I2C_SR1_=  000006     |     I2C_SR1_=  000000 
    I2C_SR1_=  000004     |     I2C_SR1_=  000007     |     I2C_SR2 =  005218 
    I2C_SR2_=  000002     |     I2C_SR2_=  000001     |     I2C_SR2_=  000000 
    I2C_SR2_=  000003     |     I2C_SR2_=  000005     |     I2C_SR3 =  005219 
    I2C_SR3_=  000001     |     I2C_SR3_=  000007     |     I2C_SR3_=  000004 
    I2C_SR3_=  000000     |     I2C_SR3_=  000002     |     I2C_TRIS=  00521D 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_WRIT=  000000     |   6 ICOLON     00184D R   |   6 IFETCH     0015B7 R
  6 IFF        0015F4 R   |   6 IFMOVE     002274 R   |     IMEDD   =  000080 
  6 IMMED      00185F R   |   6 INCEXP     002890 R   |   6 INCH       00042C R
  6 INC_FPTR   001CE9 R   |   6 INITOFS    001815 R   |   6 INN        000679 R
    INPUT_DI=  000000     |     INPUT_EI=  000001     |     INPUT_FL=  000000 
    INPUT_PU=  000001     |   6 INTE1      001423 R   |   6 INTER      0013F9 R
  6 INTQ       00241D R   |     INT_ADC2=  000016     |     INT_AUAR=  000012 
    INT_AWU =  000001     |     INT_CAN_=  000008     |     INT_CAN_=  000009 
    INT_CLK =  000002     |     INT_EXTI=  000003     |     INT_EXTI=  000004 
    INT_EXTI=  000005     |     INT_EXTI=  000006     |     INT_EXTI=  000007 
    INT_FLAS=  000018     |     INT_I2C =  000013     |     INT_SPI =  00000A 
    INT_TIM1=  00000C     |     INT_TIM1=  00000B     |     INT_TIM2=  00000E 
    INT_TIM2=  00000D     |     INT_TIM3=  000010     |     INT_TIM3=  00000F 
    INT_TIM4=  000017     |     INT_TLI =  000000     |     INT_UART=  000011 
    INT_UART=  000015     |     INT_UART=  000014     |     INT_VECT=  008060 
    INT_VECT=  00800C     |     INT_VECT=  008028     |     INT_VECT=  00802C 
    INT_VECT=  008010     |     INT_VECT=  008014     |     INT_VECT=  008018 
    INT_VECT=  00801C     |     INT_VECT=  008020     |     INT_VECT=  008024 
    INT_VECT=  008068     |     INT_VECT=  008054     |     INT_VECT=  008000 
    INT_VECT=  008030     |     INT_VECT=  008038     |     INT_VECT=  008034 
    INT_VECT=  008040     |     INT_VECT=  00803C     |     INT_VECT=  008048 
    INT_VECT=  008044     |     INT_VECT=  008064     |     INT_VECT=  008008 
    INT_VECT=  008004     |     INT_VECT=  008050     |     INT_VECT=  00804C 
    INT_VECT=  00805C     |     INT_VECT=  008058     |   6 INVER      0007B3 R
    IPR0    =  000002     |     IPR1    =  000001     |     IPR2    =  000000 
    IPR3    =  000003     |     IPR_MASK=  000003     |     IRET_COD=  000080 
  6 ISEMI      0017AA R   |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
  6 JSRC       0017FF R   |   6 KEY        000EE9 R   |   6 KTAP       001313 R
  6 KTAP1      001336 R   |   6 KTAP2      001339 R   |   6 LAST       00070A R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]

Symbol Table

  6 LASTN   =  002A58 R   |   6 LBRAC      001430 R   |     LED2_BIT=  000005 
    LED2_MAS=  000020     |     LED2_POR=  00500A     |   6 LESS       000877 R
    LF      =  00000A     |   6 LINK    =  002A58 R   |   6 LITER      00156B R
  6 LN2S       00233F R   |   6 LOCK       001CD5 R   |   6 LOG2S      002329 R
  6 LSCALE     0028F8 R   |   6 LSHIFT     000AB5 R   |   6 LSHIFT1    000ABE R
  6 LSHIFT4    000AC6 R   |   6 LT1        00088D R   |     MASKK   =  001F7F 
  6 MAX        0008B5 R   |   6 MAX1       0008C8 R   |   6 MIN        0008D2 R
  6 MIN1       0008E5 R   |   6 MMOD1      00096E R   |   6 MMOD2      000982 R
  6 MMOD3      000999 R   |   6 MMSM1      000929 R   |   6 MMSM3      00092D R
  6 MMSM4      000939 R   |   6 MMSMa      000934 R   |   6 MMSMb      00093F R
  6 MODD       0009B3 R   |   6 MONE       000B1C R   |     MS      =  000032 
  6 MSEC       0002D2 R   |   6 MSMOD      000951 R   |   6 MSTA1      000A44 R
  6 MSTAR      000A21 R   |     NAFR    =  004804     |   6 NAMEQ      0012BB R
  6 NAMET      0011CC R   |     NCLKOPT =  004808     |   6 NEGAT      0007C4 R
  6 NEX1       00049A R   |   6 NEXT       0015A8 R   |     NFLASH_W=  00480E 
    NHSECNT =  00480A     |     NOPT1   =  004802     |     NOPT2   =  004804 
    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPT6   =  00480C     |     NOPT7   =  00480E     |     NOPTBL  =  00487F 
  6 NROT       00269E R   |   6 NTIB       000689 R   |     NUBC    =  004802 
    NUCLEO  =  000001     |   6 NUFQ       000EFF R   |   6 NUFQ1      000F18 R
  6 NUMBQ      000E16 R   |   6 NUMQ1      000E4A R   |   6 NUMQ2      000E7B R
  6 NUMQ3      000EBD R   |   6 NUMQ4      000EC2 R   |   6 NUMQ5      000ED1 R
  6 NUMQ6      000ED4 R   |     NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD 
    NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE 
  6 NonHandl   000000 R   |   6 OFFSET     00072F R   |     OFS     =  000005 
  6 ONE        000B0E R   |   6 ONEM       000AA4 R   |   6 ONEP       000A97 R
    OPT     =  000002     |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTIMIZE=  000001     |     OPTION_B=  004800 
    OPTION_E=  00487F     |     OPTION_S=  000080     |   6 ORIG       00004B R
  6 ORR        0005FE R   |   6 OUTPUT     00043D R   |     OUTPUT_F=  000001 
    OUTPUT_O=  000000     |     OUTPUT_P=  000001     |     OUTPUT_S=  000000 
  6 OVER       0005C8 R   |   6 OVERT      001778 R   |     PA      =  000000 
  6 PACKS      000CB1 R   |   6 PAD        000C02 R   |   6 PAREN      00113C R
  6 PARS       001035 R   |   6 PARS1      001060 R   |   6 PARS2      00108B R
  6 PARS3      00108E R   |   6 PARS4      001097 R   |   6 PARS5      0010BA R
  6 PARS6      0010CF R   |   6 PARS7      0010DE R   |   6 PARS8      0010ED R
  6 PARSE      0010FE R   |   6 PAUSE      0002E2 R   |     PA_BASE =  005000 
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_BASE =  005005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_BASE =  00500A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |   6 PDUM1      0019A2 R
  6 PDUM2      0019B3 R   |     PD_BASE =  00500F     |     PD_CR1  =  005012 
    PD_CR2  =  005013     |     PD_DDR  =  005011     |     PD_IDR  =  005010 
    PD_ODR  =  00500F     |     PE      =  000014     |     PE_BASE =  005014 
    PE_CR1  =  005017     |     PE_CR2  =  005018     |     PE_DDR  =  005016 
    PE_IDR  =  005015     |     PE_ODR  =  005014     |     PF      =  000019 
    PF_BASE =  005019     |     PF_CR1  =  00501C     |     PF_CR2  =  00501D 
    PF_DDR  =  00501B     |     PF_IDR  =  00501A     |     PF_ODR  =  005019 
    PG      =  00001E     |     PG_BASE =  00501E     |     PG_CR1  =  005021 
    PG_CR2  =  005022     |     PG_DDR  =  005020     |     PG_IDR  =  00501F 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]

Symbol Table

    PG_ODR  =  00501E     |     PH      =  000023     |     PH_BASE =  005023 
    PH_CR1  =  005026     |     PH_CR2  =  005027     |     PH_DDR  =  005025 
    PH_IDR  =  005024     |     PH_ODR  =  005023     |     PI      =  000028 
  6 PICK       000B5C R   |   6 PII        0022A2 R   |     PI_BASE =  005028 
    PI_CR1  =  00502B     |     PI_CR2  =  00502C     |     PI_DDR  =  00502A 
    PI_IDR  =  005029     |     PI_ODR  =  005028     |   6 PLUS       000799 R
  6 PNAM1      00172D R   |   6 POSMANT    00260D R   |   6 PRESE      0014AF R
    PROD1   =  000026     |     PROD2   =  000028     |     PROD3   =  00002A 
  6 PROTECTE   000203 R   |   6 PSTOR      000B73 R   |     PTR16   =  000037 
    PTR8    =  000038     |   6 PTRPLUS    001D01 R   |   6 QBRAN      0004AC R
  6 QDUP       000748 R   |   6 QDUP1      000752 R   |   6 QKEY       00041A R
  6 QSTAC      001467 R   |   6 QUERY      001393 R   |   6 QUEST      001027 R
  6 QUIT       0014CC R   |   6 QUIT1      0014D4 R   |   6 QUIT2      0014D7 R
  6 RAM2EE     00213C R   |     RAMBASE =  000000     |   6 RAMLAST    00071D R
    RAM_BASE=  000000     |     RAM_END =  0017FF     |     RAM_SIZE=  001800 
  6 RANDOM     000280 R   |   6 RAT        00055B R   |   6 RBRAC      0017EC R
  6 REPEA      001671 R   |   6 RFREE      002123 R   |   6 RFROM      000548 R
    ROP     =  004800     |   6 ROT        000759 R   |   6 ROW2BUF    0020E5 R
    ROWBUFF =  001680     |     RP0     =  000030     |   6 RPAT       000525 R
    RPP     =  0017FF     |   6 RPSTO      000532 R   |   6 RSCALE     00294E R
  6 RSHIFT     000AD1 R   |   6 RSHIFT1    000ADA R   |   6 RSHIFT4    000AE2 R
    RST_SR  =  0050B3     |   6 RT12_2     002312 R   |   6 SAME1      0011EA R
  6 SAME2      001213 R   |   6 SAMEQ      0011E2 R   |   6 SCOM1      001762 R
  6 SCOM2      001765 R   |   6 SCOMP      001744 R   |   6 SEED       000267 R
    SEEDX   =  00003A     |     SEEDY   =  00003C     |   6 SEMIS      001788 R
  6 SETISP     0000D2 R   |   6 SET_RAML   0018CF R   |   6 SFN        00257A R
    SFR_BASE=  005000     |     SFR_END =  0057FF     |   6 SFV        0025B2 R
  6 SFZ        002543 R   |   6 SIGN       000D5D R   |   6 SIGN1      000D6D R
  6 SLASH      0009BD R   |   6 SLMOD      0009A1 R   |   6 SNAME      0016F7 R
    SP0     =  00002E     |   6 SPACE      000F21 R   |   6 SPACS      000F30 R
  6 SPAT       00057E R   |     SPI_CR1 =  005200     |     SPI_CR2 =  005201 
    SPI_CRCP=  005205     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_TXCR=  005207 
    SPP     =  001680     |     SPSAVE  =  000001     |   6 SPSTO      00058B R
  6 SQRT10     0022FB R   |   6 SQRT2      0022B9 R   |   6 SQRT3      0022D0 R
  6 SSMOD      000A4D R   |     SSP     =  000001     |     STACK   =  0017FF 
  6 STAR       000A16 R   |   6 STASL      000A5E R   |   6 STEXP      00261D R
  6 STEXP1     002633 R   |   6 STEXP2     00266F R   |   6 STEXP3     002682 R
  6 STOD       0007FB R   |   6 STORE      0004E0 R   |   6 STR        000D8B R
  6 STRCQ      001579 R   |   6 STRQ       0016B0 R   |   6 STRQP      000F9E R
  6 SUBB       000812 R   |   6 SWAPP      0005AE R   |     SWIM_CSR=  007F80 
  6 TAP        0012FD R   |   6 TBOOT      001AF1 R   |   6 TBUF       000699 R
    TBUFFBAS=  001680     |   6 TCHAR      000B2D R   |   6 TEMP       00066A R
  6 TEVAL      0006BC R   |   6 TFLASH     0006AB R   |   6 THENN      001609 R
  6 TIB        000C13 R   |     TIBB    =  001700     |     TIBBASE =  001700 
    TIC     =  000027     |   6 TICK       0014E3 R   |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  000000     |     TIM2_CCE=  000001     |     TIM2_CCE=  000004 
    TIM2_CCE=  000005     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCM=  000000 
    TIM2_CCM=  000004     |     TIM2_CCM=  000003     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_CR1=  000007 
    TIM2_CR1=  000000     |     TIM2_CR1=  000003     |     TIM2_CR1=  000001 
    TIM2_CR1=  000002     |     TIM2_EGR=  005304     |     TIM2_EGR=  000001 
    TIM2_EGR=  000002     |     TIM2_EGR=  000003     |     TIM2_EGR=  000006 
    TIM2_EGR=  000000     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]

Symbol Table

    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
    TIM4_SR =  005342     |     TIM4_SR_=  000000     |   6 TIMEOUTQ   000312 R
  6 TIMER      0002FC R   |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
  6 TNAM2      001A38 R   |   6 TNAM3      001A56 R   |   6 TNAM4      001A5C R
  6 TNAME      001A35 R   |   6 TOFLASH    000337 R   |   6 TOKEN      0011BE R
  6 TOR        000567 R   |   6 TORAM      000377 R   |     TRUEE   =  00FFFF 
  6 TWOSL      000AE9 R   |   6 TYPE1      000F50 R   |   6 TYPE2      000F5C R
  6 TYPES      000F4B R   |   6 Timer4Ha   000005 R   |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
    UART3   =  000001     |     UART3_BA=  005240     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  005232 
    UART_BRR=  005233     |     UART_CR1=  005234     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  005235     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  005231     |     UART_GTR=  000009     |     UART_PSC=  00000A 
    UART_SR =  005230     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBASE   =  000006     |     UBC     =  004801     |     UCNTXT  =  000018 
    UCP     =  00001C     |     UCTIB   =  000010     |     UD1     =  000001 
    UD2     =  000002     |     UD3     =  000003     |     UD4     =  000004 
  6 UDOT       000FF1 R   |   6 UDOTR      000FD1 R   |   6 UEND       000049 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]

Symbol Table

    UFBASE  =  000008     |     UFPSW   =  00000A     |   6 UGREAT     002521 R
  6 UGREAT1    002539 R   |     UHLD    =  000016     |     UINN    =  00000E 
    UINTER  =  000014     |     ULAST   =  00001E     |   6 ULES1      00086F R
  6 ULESS      000859 R   |   6 UMMOD      00090D R   |   6 UMSTA      0009CC R
  6 UNIQ1      0016EE R   |   6 UNIQU      0016CF R   |   6 UNLKEE     001C6F R
  6 UNLKFL     001C8E R   |   6 UNLOCK     001CAD R   |   6 UNTIL      0015D1 R
    UOFFSET =  000020     |   6 UPDATCP    001C2C R   |   6 UPDATLAS   001C03 R
  6 UPDATPTR   00222F R   |   6 UPDATRUN   001C1B R   |   6 UPDATVP    001C43 R
  6 UPL1       00063F R   |   6 UPLUS      000628 R   |     UPP     =  000006 
  6 UPPER      001181 R   |   6 UPPER1     0011A4 R   |   6 UPPER2     0011AD R
    URLAST  =  000024     |     USR_BTN_=  000004     |     USR_BTN_=  000010 
    USR_BTN_=  005015     |     UTFLASH =  000022     |     UTIB    =  000012 
    UTMP    =  00000C     |   6 UTYP1      001972 R   |   6 UTYP2      001981 R
  6 UTYPE      00196D R   |     UVP     =  00001A     |   6 UZERO      00002B R
  6 VARIA      00189C R   |     VAR_BASE=  000080     |     VAR_TOP =  0017BF 
    VER     =  000003     |   6 VPP        0006EC R   |     VSIZE   =  000006 
    WANT_CON=  000001     |     WANT_DEB=  000000     |     WANT_FLO=  000001 
    WANT_SCA=  000001     |     WANT_SEE=  000000     |     WDGOPT  =  004805 
    WDGOPT_I=  000002     |     WDGOPT_L=  000003     |     WDGOPT_W=  000000 
    WDGOPT_W=  000001     |   6 WHILE      001657 R   |   6 WITHI      0008F2 R
  6 WORDD      001167 R   |   6 WORDS      001A92 R   |   6 WORS1      001A98 R
  6 WORS2      001AB4 R   |   6 WR_BYTE    001D58 R   |   6 WR_WORD    001D7D R
  6 WTABLE     002387 R   |   6 WTAT       0023AB R   |   6 WTINIT     0023F0 R
    WWDG_CR =  0050D1     |     WWDG_WR =  0050D2     |     XMEM_SIZ=  017830 
    XOFF    =  000013     |     XON     =  000011     |   6 XORR       000613 R
    XTEMP   =  000026     |     YTEMP   =  000028     |   6 ZEQ1       0024EB R
  6 ZERO       000B03 R   |   6 ZL1        0005E0 R   |   6 ZLESS      0005D7 R
  6 app_spac   002A80 R   |   6 baudrate   00037D R   |   6 block_er   001E43 R
  6 clear_ra   000019 R   |   6 clock_in   000066 R   |   6 copy_buf   001EA3 R
  6 copy_buf   001EC2 R   |   6 copy_pro   001EC2 R   |     da      =  000002 
    db      =  000003     |     dc      =  000000     |     dd      =  000001 
  6 erase_fl   001E65 R   |   6 fmove_do   002218 R   |   6 main       000016 R
  6 next_row   0021D5 R   |   6 no_move    00221F R   |   6 pristine   001F43 R
  6 proceed_   001E68 R   |   6 reboot     000329 R   |   6 reset_ve   001FAA R
  6 row_eras   001E23 R   |   6 row_eras   001E7C R   |   6 row_eras   001EA3 R
  6 set_opti   001F17 R   |   6 set_vect   00204B R   |   6 uart_ini   000078 R
  6 write_ro   001EE7 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   2A80   flags    0

