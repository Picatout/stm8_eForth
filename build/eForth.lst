ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                                .include "inc/macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        
                                            ; macro to create dictionary header record
                                            .macro _HEADER label,len,name 
                                        
                                            ; runtime literal 
                                            .macro _DOLIT value 
                                        
                                            ; branch if TOS<>0
                                            ; TBRANCH 
                                            .macro _TBRAN target 
                                            
                                            ; branch if TOS==0 
                                            ; 0BRANCH 
                                            .macro _QBRAN target 
                                        
                                            ; uncondittionnal BRANCH 
                                            .macro _BRAN target 
                                        
                                            ; run time NEXT 
                                            .macro _DONXT target 
                                                .include "inc/config.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019,2020 
                                        ; This file is part of stm8_eForth  
                                        ;
                                        ;     stm8_eForth is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     stm8_eForth is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        
                                        ; constants to select board
                                        ; to assemble for a specific 
                                        ; board or MCU set it to 1 and the other
                                        ; to 0. 
                                 
                                 
                                 
                                        
                                        ; select end of line character
                                 
                                 
                                        
                                        ; set to 1 to include 
                                        ; scaling constants vocabulary
                                        ; see: const_ratio.asm 
                                 
                                        
                                        ; set to 1 to include 
                                        ; constants tables vocabulary 
                                        ; see: ctable.asm 
                                 
                                        
                                        ; include double library 
                                 
                                        
                                        ; to include floating point 
                                        ; library
                                        ; require double library  
                                 
                                        
                                        ; set to 1 to make vocabulary 
                                        ; case sensitive 
                                 
                                        
                                        ; how many bytes are reserved 
                                        ; by system at EEPROM base.
                                 
                                        
                                 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        .endif
                                        
                                 
                                        	.include "inc/stm8s105.inc"
                                        .if DISCOVERY
                                        	.include "inc/stm8s_disco.inc"
                                        .endif 
                                        XMEM_SIZE=0 ; size in bytes of EXTENDED MEMORY 
                                        UART_SR=UART2_SR
                                        UART_DR=UART2_DR
                                        UART_BRR1=UART2_BRR1
                                        UART_BRR2=UART2_BRR2
                                        UART_CR1=UART2_CR1
                                        UART_CR2=UART2_CR2
                                        .endif 
                                        
                                        	
                                         
                                        
                                        
                                        
                                     13 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     15 
                                     16 ;===============================================================
                                     17 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     18 ;  Date: 2020-06-07 
                                     19 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     20 ;  Date: 2019-10-26
                                     21 ;  Changes to memory map:
                                     22 ;       0x16f0  Data Stack, growing downward
                                     23 ;       0x1700  Terminal input buffer TIB
                                     24 ;       0x17ff  Return Stack, growing downard
                                     25 ;================================================================
                                     26 ;       STM8EF, Version 2.1, 13 July
                                     27 ;               Implemented on STM8S-Discovery Board.
                                     28 ;               Assembled by ST VisualDevelop STVD 
                                     29 ;               Bootup on internal 2 MHz clock
                                     30 ;               Switch to external 16 MHz crystal clock
                                     31 ;
                                     32 ; FORTH Virtual Machine:
                                     33 ; Subroutine threaded model
                                     34 ; SP Return stack pointer
                                     35 ; X Data stack pointer
                                     36 ; A,Y Scratch pad registers
                                     37 ;
                                     38 ; Memory Map:
                                     39 ; 0x0 RAM memory, system variables
                                     40 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     41 ; 0x780 Data stack, growing downward
                                     42 ; 0x790 Terminal input buffer TIB
                                     43 ; 0x7FF Return stack, growing downward
                                     44 ; 0x8000 Interrupt vector table
                                     45 ; 0x8080 FORTH startup code
                                     46 ; 0x80E7 Start of FORTH dictionary in ROM
                                     47 ; 0x9584 End of FORTH dictionary
                                     48 ;
                                     49 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     50 ;                  use UART1 instead of UART2 for communication with user.
                                     51 ;                  UART1 is available as ttyACM* device via USB connection.
                                     52 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     53 ;                  and MSEC word that return MS value.
                                     54 ;
                                     55 ;       EF12, Version 2.1, 18apr00cht
                                     56 ;               move to 8000H replacing WHYP.
                                     57 ;               copy interrupt vectors from WHYPFLSH.S19
                                     58 ;               to EF12.S19 before flashing
                                     59 ;               add TICKS1 and DELAY1 for motor stepping
                                     60 ;
                                     61 ;       EF12, 02/18/00, C. H. Ting
                                     62 ;       Adapt 86eForth v2.02 to 68HC12.
                                     63 ;               Use WHYP to seed EF12.ASM
                                     64 ;               Use AS12 native 68HC12 assembler:
                                     65 ;               as12 ef12.asm >ef12.lst
                                     66 ;       EF12A, add ADC code, 02mar00cht
                                     67 ;       EF12B, 01mar00cht
                                     68 ;               stack to 0x78, return stack to 0xf8.
                                     69 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     70 ;               add PWM registers
                                     71 ;               add SPI registers and code
                                     72 ;       EF12C, 12mar00cht
                                     73 ;               add MAX5250 D/A converter
                                     74 ;       EF12D, 15mar00cht
                                     75 ;               add all the Lexel interface words
                                     76 ;       EF12E, 18apr00cht, save for reference
                                     77 ;
                                     78 ;       Copyright (c) 2000
                                     79 ;       Dr. C. H. Ting
                                     80 ;       156 14th Avenue
                                     81 ;       San Mateo, CA 94402
                                     82 ;       (650) 571-7639
                                     83 ;
                                     84 
                                     85       
                                     86 ;*********************************************************
                                     87 ;	Assembler constants
                                     88 ;*********************************************************
                           000000    89 RAMBASE =	0x0000	   ;ram base
                           000001    90 .if NUCLEO 
                           0017FF    91 STACK   =	0x17FF 	;system (return) stack empty 
                           001680    92 DATSTK  =	0x1680	;data stack  empty
                           001680    93 TBUFFBASE =     0x1680  ; flash read/write transaction buffer address  
                           001700    94 TIBBASE =       0X1700  ; transaction input buffer addr.
                           000000    95 .else ; DISCOVERY
                                     96 STACK   =	0x7FF 	;system (return) stack empty 
                                     97 DATSTK  =	0x680	;data stack  empty
                                     98 TBUFFBASE =     0x680  ; flash read/write transaction buffer address  
                                     99 TIBBASE =       0X700  ; transaction input buffer addr.
                                    100 .endif
                                    101 
                                    102 ;; Memory allocation
                           000006   103 UPP     =     RAMBASE+6          ; systeme variables base address 
                           001680   104 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0017FF   105 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           001680   106 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           001700   107 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   108 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0017BF   109 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    110 
                                    111 ; user variables constants 
                           000006   112 UBASE = UPP       ; numeric base 
                           000008   113 UFPSW = UBASE+2  ; floating point state word 
                           00000A   114 UTMP = UFPSW+2    ; temporary storage
                           00000C   115 UINN = UTMP+2     ; >IN tib pointer 
                           00000E   116 UCTIB = UINN+2    ; tib count 
                           000010   117 UTIB = UCTIB+2    ; tib address 
                           000012   118 UINTER = UTIB+2   ; interpreter vector 
                           000014   119 UHLD = UINTER+2   ; hold 
                           000016   120 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000018   121 UVP = UCNTXT+2    ; variable pointer 
                           00001A   122 UCP = UVP+2      ; code pointer
                           00001C   123 ULAST = UCP+2    ; last dictionary pointer 
                           00001E   124 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000020   125 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
                           000022   126 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    127 
                                    128 ;******  System Variables  ******
                           000024   129 XTEMP	=	URLAST +2;address called by CREATE
                           000026   130 YTEMP	=	XTEMP+2	;address called by CREATE
                           000024   131 PROD1 = XTEMP	;space for UM*
                           000026   132 PROD2 = PROD1+2
                           000028   133 PROD3 = PROD2+2
                           00002A   134 CARRY = PROD3+2
                           00002C   135 SP0	= CARRY+2	;initial data stack pointer
                           00002E   136 RP0	= SP0+2		;initial return stack pointer
                           000030   137 MS    =   RP0+2         ; millisecond counter 
                           000032   138 CNTDWN =  MS+2          ; count down timer 
                           000034   139 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000035   140 PTR16 = FPTR+1          ; middle byte of farptr 
                           000036   141 PTR8 = FPTR+2           ; least byte of farptr 
                           000038   142 SEEDX = PTR8+2          ; PRNG seed X 
                           00003A   143 SEEDY = SEEDX+2         ; PRNG seed Y 
                                    144 
                                    145 ; EEPROM persistant data  
                           004000   146 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   147 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   148 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   149 APP_VP = APP_CP+2  ; free data space pointer 
                                    150 
                                    151 
                                    152 ;***********************************************
                                    153 ;; Version control
                                    154 
                           000003   155 VER     =     3         ;major release version
                           000000   156 EXT     =     0         ;minor extension
                                    157 
                                    158 ;; Constants
                                    159 
                           00FFFF   160 TRUEE   =     0xFFFF      ;true flag
                                    161 
                           000040   162 COMPO   =     0x40     ;lexicon compile only bit
                           000080   163 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   164 MASKK   =     0x1F7F  ;lexicon bit mask
                                    165 
                           000002   166 CELLL   =     2       ;size of a cell
                           00000A   167 BASEE   =     10      ;default radix
                           000008   168 BKSPP   =     8       ;back space
                           00000A   169 LF      =     10      ;line feed
                           00000D   170 CRR     =     13      ;carriage return
                           000011   171 XON     =     17
                           000013   172 XOFF    =     19
                           00001B   173 ERR     =     27      ;error escape
                           000027   174 TIC     =     39      ;tick
                           0000CD   175 CALLL   =     0xCD     ;CALL opcodes
                           000080   176 IRET_CODE =   0x80    ; IRET opcode 
                                    177 
                                    178         .macro _ledon
                                    179         .if NUCLEO
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    180         bset PC_ODR,#LED2_BIT
                                    181         .else ;DISCOVERY 
                                    182         .if DISCOVERY
                                    183         bres PD_ODR,#LD1_BIT 
                                    184         .endif
                                    185         .endif
                                    186         .endm
                                    187 
                                    188         .macro _ledoff
                                    189         .if NUCLEO 
                                    190         bres PC_ODR,#LED2_BIT
                                    191         .else ;DISCOVERY 
                                    192         .if DISCOVERY
                                    193         bset PD_ODR,#LD1_BIT 
                                    194         .endif 
                                    195         .endif
                                    196         .endm
                                    197 
                                    198 ;**********************************************************
                                    199         .area DATA (ABS)
      000000                        200         .org RAMBASE 
                                    201 ;**********************************************************
                                    202 
                                    203 ;**********************************************************
                                    204         .area SSEG (ABS) ; STACK
      001700                        205         .org 0x1700
      001700                        206         .ds 256 
                                    207 ; space for DATSTK,TIB and STACK         
                                    208 ;**********************************************************
                                    209 
                                    210 ;**********************************************************
                                    211         .area HOME ; vectors table
                                    212 ;**********************************************************
      000000 82 00 00 16            213 	int main	        ; reset
      000004 82 00 00 00            214 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            215 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            216 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            217 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            218 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            219 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            220 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            221 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            222 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            223 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            224 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            225 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            226 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            227 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            228 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            229 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            230 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            231 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            232 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            233 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            234 	int NonHandledInterrupt	; irq19
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      000058 82 00 00 00            235 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            236 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            237 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            238 	int Timer4Handler	; irq23
      000068 82 00 00 00            239 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            240 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            241 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            242 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            243 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            244 	int NonHandledInterrupt	; irq29
                                    245 
                                    246 ;**********************************************************
                                    247         .area CODE
                                    248 ;**********************************************************
                                    249 
                                    250 ; non handled interrupt reset MCU
      000000                        251 NonHandledInterrupt:
      000000 A6 80            [ 1]  252         ld a, #0x80
      000002 C7 50 D1         [ 1]  253         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    254 	;iret
                                    255 
                                    256 ; used for milliseconds counter 
                                    257 ; MS is 16 bits counter 
      000005                        258 Timer4Handler:
      000005 72 5F 53 42      [ 1]  259 	clr TIM4_SR 
      000009 BE 30            [ 2]  260         ldw x,MS 
      00000B 5C               [ 1]  261         incw x 
      00000C BF 30            [ 2]  262         ldw MS,x
      00000E BE 32            [ 2]  263         ldw x,CNTDWN 
      000010 27 03            [ 1]  264         jreq 1$
      000012 5A               [ 2]  265         decw x 
      000013 BF 32            [ 2]  266         ldw CNTDWN,x 
      000015                        267 1$:         
      000015 80               [11]  268         iret 
                                    269 
                                    270 
                                    271 ;; Main entry points and COLD start data
      000016                        272 main:
                                    273 ; clear all RAM
      000016 AE 00 00         [ 2]  274 	ldw X,#RAMBASE
      000019                        275 clear_ram0:
      000019 7F               [ 1]  276 	clr (X)
      00001A 5C               [ 1]  277 	incw X
      00001B A3 17 FF         [ 2]  278 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  279 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  280         ldw x,#RPP
      000023 94               [ 1]  281         ldw sp,x
                                    282 ; set SEEDX and SEEDY to 1 
      000024 3C 39            [ 1]  283         inc SEEDX+1 
      000026 3C 3B            [ 1]  284         inc SEEDY+1          
      000028 CC 00 49         [ 2]  285 	jp ORIG
                                    286 
                                    287 ; COLD initialize these variables.
      00002B                        288 UZERO:
      00002B 00 0A                  289         .word      BASEE   ;BASE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      00002D 00 00                  290         .word      0       ; floating point state 
      00002F 00 00                  291         .word      0       ;tmp
      000031 00 00                  292         .word      0       ;>IN
      000033 00 00                  293         .word      0       ;#TIB
      000035 17 00                  294         .word      TIBB    ;TIB
      000037 13 A4                  295         .word      INTER   ;'EVAL
      000039 00 00                  296         .word      0       ;HLD
      00003B 32 6E                  297         .word      LASTN  ;CNTXT pointer
      00003D 00 80                  298         .word      VAR_BASE   ;variables free space pointer 
      00003F 33 80                  299         .word      app_space ; FLASH free space pointer 
      000041 32 6E                  300         .word      LASTN   ;LAST
      000043 00 00                  301         .word      0        ; OFFSET 
      000045 00 00                  302         .word      0       ; TFLASH
                                    303 ;       .word      0       ; URLAST   
      000047 00 00                  304 UEND:   .word      0
                                    305 
      000049                        306 ORIG:   
                                    307 ; initialize SP
      000049 AE 17 FF         [ 2]  308         LDW     X,#STACK  ;initialize return stack
      00004C 94               [ 1]  309         LDW     SP,X
      00004D BF 2E            [ 2]  310         LDW     RP0,X
      00004F AE 16 80         [ 2]  311         LDW     X,#DATSTK ;initialize data stack
      000052 BF 2C            [ 2]  312         LDW     SP0,X
                           000001   313 .if NUCLEO        
                                    314 ; initialize PC_5 as output to control LED2
                                    315 ; added by Picatout 
      000054 72 1A 50 0D      [ 1]  316         bset PC_CR1,#LED2_BIT
      000058 72 1A 50 0E      [ 1]  317         bset PC_CR2,#LED2_BIT
      00005C 72 1A 50 0C      [ 1]  318         bset PC_DDR,#LED2_BIT
                                    319 .endif 
                           000000   320 .if DISCOVERY
                                    321         bset PD_CR1,#LD1_BIT
                                    322         bset PD_CR2,#LD1_BIT
                                    323         bset PD_DDR,#LD1_BIT 
                                    324 .endif
      000060                        325         _ledoff
                           000001     1         .if NUCLEO 
      000060 72 1B 50 0A      [ 1]    2         bres PC_ODR,#LED2_BIT
                           000000     3         .else ;DISCOVERY 
                                      4         .if DISCOVERY
                                      5         bset PD_ODR,#LD1_BIT 
                                      6         .endif 
                                      7         .endif
                                    326 ; initialize clock to HSI
                                    327 ; no divisor 16Mhz 
                                    328 ; Added by Picatout 
      000064                        329 clock_init:
      000064 72 5F 50 C6      [ 1]  330         clr CLK_CKDIVR
      000068 72 12 50 C5      [ 1]  331 	bset CLK_SWCR,#CLK_SWCR_SWEN
                           000001   332 .if NUCLEO|DOORBELL
      00006C A6 E1            [ 1]  333 	ld a,#CLK_SWR_HSI
                           000000   334 .else ; DISCOVERY as 16Mhz crystal
                                    335 	ld a,#CLK_SWR_HSE
                                    336 .endif 
      00006E C7 50 C4         [ 1]  337 	ld CLK_SWR,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      000071 C1 50 C3         [ 1]  338 1$:	cp a,CLK_CMSR
      000074 26 FB            [ 1]  339 	jrne 1$
                                    340         
                                    341 ; initialize UART, 115200 8N1
      000076                        342 uart_init:
                           000001   343 .if NUCLEO 
      000076 72 14 50 C7      [ 1]  344 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    345 	; configure tx pin
      00007A 72 1A 50 02      [ 1]  346 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      00007E 72 1A 50 03      [ 1]  347 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      000082 72 1A 50 04      [ 1]  348 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    349 	; baud rate 115200 Fmaster=16Mhz  16000000/115200=139=0x8b
                           000000   350 .else ; DISCOVERY use UART2 
                                    351 	bset CLK_PCKENR1,#CLK_PCKENR1_UART2
                                    352 	; configure tx pin
                                    353 	bset PD_DDR,#UART2_TX_PIN ; tx pin
                                    354 	bset PD_CR1,#UART2_TX_PIN ; push-pull output
                                    355 	bset PD_CR2,#UART2_TX_PIN ; fast output
                                    356 .endif
                                    357 ; baud rate 115200 Fmaster=8Mhz  
      000086 35 0B 52 33      [ 1]  358 	mov UART_BRR2,#0x0b ; must be loaded first
      00008A 35 08 52 32      [ 1]  359 	mov UART_BRR1,#0x8
      00008E 35 0C 52 35      [ 1]  360 	mov UART_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    361 ; initialize timer4, used for millisecond interrupt  
      000092 35 07 53 45      [ 1]  362 	mov TIM4_PSCR,#7 ; prescale 128  
      000096 35 7D 53 46      [ 1]  363 	mov TIM4_ARR,#125 ; set for 1msec.
      00009A 35 05 53 40      [ 1]  364 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      00009E 72 10 53 41      [ 1]  365 	bset TIM4_IER,#TIM4_IER_UIE 
                                    366 ; set TIM4 interrupt priority to highest
      0000A2 A6 3F            [ 1]  367         ld a,#~(IPR_MASK<<6)
      0000A4 C4 7F 75         [ 1]  368         and a,ITC_SPR6
      0000A7 AA C0            [ 1]  369         or a,#(IPR3<<6)
      0000A9 C7 7F 75         [ 1]  370         ld ITC_SPR6,a 
      0000AC 9A               [ 1]  371         rim
      0000AD CC 1A A5         [ 2]  372         jp  COLD   ;default=MN1
                                    373 
                                    374 
                                    375 ;; place MCU in sleep mode with
                                    376 ;; halt opcode 
                                    377 ;; BYE ( -- )
      0000B0 00 00                  378         .word 0
                           0000B2   379         LINK=.
      0000B2 03                     380         .byte 3 
      0000B3 42 59 45               381         .ascii "BYE"
      0000B6                        382 BYE: 
      0000B6 8E               [10]  383         halt 
      0000B7 81               [ 4]  384         ret 
                                    385 
                                    386 ; Enable interrupts 
                                    387 ; EI ( -- )
      0000B8 00 B2                  388         .word LINK 
                           0000BA   389         LINK=.
      0000BA 02                     390         .byte 2
      0000BB 45 49                  391         .ascii "EI"
      0000BD                        392 EI:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      0000BD 9A               [ 1]  393         rim 
      0000BE 81               [ 4]  394         ret 
                                    395 
                                    396 ; Disable interrupts
                                    397 ; DI ( -- )
      0000BF 00 BA                  398         .word LINK 
                           0000C1   399         LINK=.
      0000C1 02                     400         .byte 2 
      0000C2 44 49                  401         .ascii "DI"
      0000C4                        402 DI:
      0000C4 9B               [ 1]  403         sim 
      0000C5 81               [ 4]  404         ret 
                                    405 
                                    406 ; set interrupt priority level 
                                    407 ; SET-ISP ( n1 n2 -- )
                                    408 ; n1 level {1..3}
                                    409 ; n2 vector {0..29}
      0000C6 00 C1                  410         .word LINK 
                           0000C8   411         LINK=.
      0000C8 07                     412         .byte 7 
      0000C9 53 45 54 2D 49 53 50   413         .ascii "SET-ISP"
      0000D0                        414 SETISP:
      0000D0 90 93            [ 1]  415         ldw y,x 
      0000D2 90 FE            [ 2]  416         ldw y,(y)
      0000D4 A6 04            [ 1]  417         ld a,#4 ; 4 slot per register 
                                    418 ;  quotient select register, remainder select slot in register.        
      0000D6 90 62            [ 2]  419         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000D8 A4 03            [ 1]  420         and a,#3 
      0000DA 48               [ 1]  421         sll a ; 2*SLOT  lshift 
      0000DB 72 A9 7F 70      [ 2]  422         addw y,#ITC_SPR1 
      0000DF FF               [ 2]  423         ldw (x),y  ; ( level reg -- )
      0000E0 90 5F            [ 1]  424         clrw y 
      0000E2 90 97            [ 1]  425         ld yl,a 
      0000E4 1D 00 02         [ 2]  426         subw x,#CELLL 
      0000E7 FF               [ 2]  427         ldw (x),y  ; ( level reg lshift -- )
      0000E8 90 93            [ 1]  428         ldw y,x 
      0000EA 90 EE 02         [ 2]  429         ldw y,(2,y) 
      0000ED 90 F6            [ 1]  430         ld a,(y)   ; reg_value
      0000EF 1D 00 02         [ 2]  431         subw x,#CELLL 
      0000F2 FF               [ 2]  432         ldw (x),y ; ( level reg lshift rval -- )
      0000F3 CD 05 D8         [ 4]  433         call OVER ; ( level reg lshift rval lshift -- )
      0000F6 CD 04 71         [ 4]  434         call DOLIT 
      0000F9 00 03                  435         .word 3
      0000FB CD 05 BE         [ 4]  436         call SWAPP  ; ( level reg lshift rval 3 lshift )
      0000FE CD 0B 19         [ 4]  437         call LSHIFT ; creat slot mask 
      000101 CD 07 F7         [ 4]  438         call INVER  ; ( level reg lshift rval mask )
      000104 CD 06 0D         [ 4]  439         call ANDD ; ( level reg lshift slot_masked )
      000107 CD 05 77         [ 4]  440         call TOR  ; ( level reg lshift -- R: slot_masked )
      00010A CD 07 7C         [ 4]  441         call ROT  ; ( reg lshift level )
      00010D CD 05 BE         [ 4]  442         call SWAPP ; ( reg level lshift )
      000110 CD 0B 19         [ 4]  443         call LSHIFT  ; ( reg slot_level -- )
      000113 CD 05 58         [ 4]  444         call RFROM ; ( reg slot_level masked_val )
      000116 CD 06 21         [ 4]  445         call ORR   ; ( reg updated_rval )
      000119 CD 05 BE         [ 4]  446         call SWAPP 
      00011C CD 05 14         [ 4]  447         call CSTOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                                    448 
                                    449 ; sélectionne l'application 
                                    450 ; qui démarre automatique lors 
                                    451 ; d'un COLD start 
      00011F 00 C8                  452         .word LINK 
                           000121   453         LINK=.
      000121 07                     454         .byte 7
      000122 41 55 54 4F 52 55 4E   455         .ascii "AUTORUN"
      000129                        456 AUTORUN:
      000129 CD 11 69         [ 4]  457         call TOKEN 
      00012C CD 05 AE         [ 4]  458         call DUPP 
      00012F CD 04 A4         [ 4]  459         call QBRAN 
      000132 02 0F                  460         .word FORGET2
      000134 CD 12 66         [ 4]  461         call NAMEQ
      000137 CD 07 6B         [ 4]  462         call QDUP 
      00013A CD 04 A4         [ 4]  463         call QBRAN 
      00013D 02 0F                  464         .word FORGET2
      00013F CD 05 A4         [ 4]  465         call DROP 
      000142 1D 00 04         [ 2]  466         subw x,#2*CELLL 
      000145 90 5F            [ 1]  467         clrw y 
      000147 FF               [ 2]  468         ldw (x),y 
      000148 90 AE 40 02      [ 2]  469         ldw y,#APP_RUN 
      00014C EF 02            [ 2]  470         ldw (2,x),y 
      00014E CC 1D A1         [ 2]  471         jp EESTORE 
                                    472 
                                    473 ;; Reset dictionary pointer before 
                                    474 ;; forgotten word. RAM space and 
                                    475 ;; interrupt vector defined after 
                                    476 ;; must be resetted also.
      000151 01 21                  477         .word LINK 
                           000153   478         LINK=.
      000153 06                     479         .byte 6
      000154 46 4F 52 47 45 54      480         .ascii "FORGET" 
      00015A                        481 FORGET: 
      00015A CD 11 69         [ 4]  482         call TOKEN
      00015D CD 05 AE         [ 4]  483         call DUPP 
      000160 CD 04 A4         [ 4]  484         call QBRAN 
      000163 02 0F                  485         .word FORGET2
      000165 CD 12 66         [ 4]  486         call NAMEQ ; ( a -- ca na | a F )
      000168 CD 07 6B         [ 4]  487         call QDUP 
      00016B CD 04 A4         [ 4]  488         call QBRAN 
      00016E 02 0F                  489         .word FORGET2
                                    490 ; only forget users words 
      000170 CD 05 AE         [ 4]  491         call DUPP ; ( ca na na )
      000173 CD 04 71         [ 4]  492         call DOLIT 
      000176 33 80                  493         .word app_space 
      000178 CD 05 BE         [ 4]  494         call SWAPP 
      00017B CD 08 9D         [ 4]  495         call  ULESS 
      00017E CD 04 A4         [ 4]  496         call QBRAN 
      000181 01 D1                  497         .word FORGET6 
                                    498 ; ( ca na -- )        
                                    499 ;reset ivec with address >= ca
      000183 CD 05 BE         [ 4]  500         call SWAPP ; ( na ca -- ) 
      000186 CD 1F A4         [ 4]  501         call CHKIVEC ; ( na -- ) 
                                    502 ; start at LAST and link back to na 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                                    503 ; if variable found reset VP at that point.
      000189                        504 FORGET1:
      000189 CD 07 2D         [ 4]  505         call LAST 
      00018C CD 05 07         [ 4]  506         call AT 
      00018F CD 05 AE         [ 4]  507         call DUPP  ; ( -- na last last )
      000192 CD 02 25         [ 4]  508         call FREEVAR ; ( -- na last )
      000195 CD 05 AE         [ 4]  509         call DUPP 
      000198 CD 04 71         [ 4]  510         call DOLIT 
      00019B 00 02                  511         .word 2 
      00019D CD 08 56         [ 4]  512         call SUBB ; ( na last -- na last lfa ) link address 
      0001A0 CD 05 07         [ 4]  513         call AT 
      0001A3 CD 05 AE         [ 4]  514         call DUPP ; ( -- na last a a )
      0001A6 CD 07 01         [ 4]  515         call CNTXT 
      0001A9 CD 04 F0         [ 4]  516         call STORE
      0001AC CD 07 2D         [ 4]  517         call LAST  
      0001AF CD 04 F0         [ 4]  518         call STORE ; ( --  na last )
      0001B2 CD 05 D8         [ 4]  519         call OVER 
      0001B5 CD 08 7E         [ 4]  520         call EQUAL ; ( na last na -- na T|F ) 
      0001B8 CD 04 A4         [ 4]  521         call QBRAN 
      0001BB 01 89                  522         .word FORGET1 
                                    523 ; ( na -- )
      0001BD CD 04 71         [ 4]  524         call DOLIT 
      0001C0 00 02                  525         .word 2 
      0001C2 CD 08 56         [ 4]  526         call SUBB 
      0001C5 CD 07 1D         [ 4]  527         call CPP 
      0001C8 CD 04 F0         [ 4]  528         call STORE  
      0001CB CD 1B D4         [ 4]  529         call UPDATCP 
      0001CE CC 1B AB         [ 2]  530         jp UPDATLAST 
      0001D1                        531 FORGET6: ; tried to forget a RAM or system word 
                                    532 ; ( ca na -- )
      0001D1 1D 00 02         [ 2]  533         subw x,#CELLL 
      0001D4 90 BE 2C         [ 2]  534         ldw y,SP0 
      0001D7 FF               [ 2]  535         ldw (x),y  
      0001D8 CD 08 9D         [ 4]  536         call ULESS
      0001DB CD 04 A4         [ 4]  537         call QBRAN 
      0001DE 02 01                  538         .word PROTECTED 
      0001E0 CD 13 72         [ 4]  539         call ABORQ 
      0001E3 1D                     540         .byte 29
      0001E4 20 46 6F 72 20 52 41   541         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      000201                        542 PROTECTED:
      000201 CD 13 72         [ 4]  543         call ABORQ
      000204 0A                     544         .byte 10
      000205 20 50 72 6F 74 65 63   545         .ascii " Protected"
             74 65 64
      00020F                        546 FORGET2: ; no name or not found in dictionary 
      00020F CD 13 72         [ 4]  547         call ABORQ
      000212 05                     548         .byte 5
      000213 20 77 68 61 74         549         .ascii " what"
      000218                        550 FORGET4:
      000218 CC 05 A4         [ 2]  551         jp DROP 
                                    552 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                                    553 
                                    554 ;---------------------------------
                                    555 ; if na is variable 
                                    556 ; free variable data  
                                    557 ; FREEVAR ( na -- )
                                    558 ;---------------------------------
      00021B 01 53                  559         .word LINK 
                           00021D   560         LINK=.
      00021D 07                     561         .byte 7 
      00021E 46 52 45 45 56 41 52   562         .ascii "FREEVAR"
      000225                        563 FREEVAR:
      000225 CD 05 AE         [ 4]  564         call DUPP ; ( na na -- )
      000228 CD 05 25         [ 4]  565         CALL CAT  ; ( na c -- )
      00022B CD 0A FB         [ 4]  566         call ONEP ;
      00022E CD 07 DD         [ 4]  567         CALL PLUS ; ( na c+1 -- ca ) 
      000231 CD 0A FB         [ 4]  568         call ONEP ; ( ca+ -- ) to get routne address 
      000234 CD 05 AE         [ 4]  569         call DUPP ; ( ca+ ca+ -- )
      000237 CD 05 07         [ 4]  570         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      00023A CD 04 71         [ 4]  571         call DOLIT 
      00023D 06 6E                  572         .word DOVAR ; if routine address is DOVAR then variable 
      00023F CD 08 7E         [ 4]  573         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      000242 CD 04 A4         [ 4]  574         call QBRAN 
      000245 02 5B                  575         .word FREEVAR4 
      000247 CD 04 71         [ 4]  576         call DOLIT 
      00024A 00 02                  577         .word 2 
      00024C CD 07 DD         [ 4]  578         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      00024F CD 05 07         [ 4]  579         call AT 
      000252 CD 07 0F         [ 4]  580         call VPP   
      000255 CD 04 F0         [ 4]  581         call STORE 
      000258 CC 1B EB         [ 2]  582         jp UPDATVP 
      00025B                        583 FREEVAR4: ; not variable
      00025B CC 05 A4         [ 2]  584         jp  DROP 
                                    585 
                                    586 ;    SEED ( n -- )
                                    587 ; Initialize PRNG seed with n 
      00025E 02 1D                  588         .word LINK 
                           000260   589         LINK=. 
      000260 04                     590         .byte 4 
      000261 53 45 45 44            591         .ascii "SEED" 
      000265                        592 SEED:
      000265 90 93            [ 1]  593         ldw y,x 
      000267 1C 00 02         [ 2]  594         addw x,#CELLL
      00026A 90 FE            [ 2]  595         ldw y,(y)
      00026C 90 9E            [ 1]  596         ld a,yh 
      00026E B7 38            [ 1]  597         ld SEEDX,a 
      000270 90 9F            [ 1]  598         ld a,yl 
      000272 B7 3A            [ 1]  599         ld SEEDY,a 
      000274 81               [ 4]  600         ret 
                                    601 
                                    602 ;    RANDOM ( u1 -- u2 )
                                    603 ; Pseudo random number betwen 0 and u1-1
      000275 02 60                  604         .word LINK 
                           000277   605         LINK=.
      000277 06                     606         .byte 6
      000278 52 41 4E 44 4F 4D      607         .ascii "RANDOM" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      00027E                        608 RANDOM:
                                    609 ;local variable 
                           000001   610         SPSAVE=1
                           000002   611         VSIZE=2 
      00027E 52 02            [ 2]  612         sub sp,#VSIZE
      000280 1F 01            [ 2]  613         ldw (SPSAVE,sp),x  
                                    614 ; XTEMP=(SEEDX<<5)^SEEDX 
      000282 90 93            [ 1]  615         ldw y,x 
      000284 90 FE            [ 2]  616         ldw y,(y)
      000286 90 BF 26         [ 2]  617         ldw YTEMP,y 
      000289 BE 38            [ 2]  618 	ldw x,SEEDX 
      00028B 58               [ 2]  619 	sllw x 
      00028C 58               [ 2]  620 	sllw x 
      00028D 58               [ 2]  621 	sllw x 
      00028E 58               [ 2]  622 	sllw x 
      00028F 58               [ 2]  623 	sllw x 
      000290 9E               [ 1]  624 	ld a,xh 
      000291 B8 38            [ 1]  625 	xor a,SEEDX 
      000293 B7 24            [ 1]  626 	ld XTEMP,a 
      000295 9F               [ 1]  627 	ld a,xl 
      000296 B8 39            [ 1]  628 	xor a,SEEDX+1 
      000298 B7 25            [ 1]  629 	ld XTEMP+1,a 
                                    630 ; SEEDX=SEEDY 
      00029A BE 3A            [ 2]  631 	ldw x,SEEDY 
      00029C BF 38            [ 2]  632 	ldw SEEDX,x  
                                    633 ; SEEDY=SEEDY^(SEEDY>>1)
      00029E 54               [ 2]  634 	srlw x 
      00029F 9E               [ 1]  635 	ld a,xh 
      0002A0 B8 3A            [ 1]  636 	xor a,SEEDY 
      0002A2 B7 3A            [ 1]  637 	ld SEEDY,a  
      0002A4 9F               [ 1]  638 	ld a,xl 
      0002A5 B8 3B            [ 1]  639 	xor a,SEEDY+1 
      0002A7 B7 3B            [ 1]  640 	ld SEEDY+1,a 
                                    641 ; XTEMP>>3 
      0002A9 BE 24            [ 2]  642 	ldw x,XTEMP 
      0002AB 54               [ 2]  643 	srlw x 
      0002AC 54               [ 2]  644 	srlw x 
      0002AD 54               [ 2]  645 	srlw x 
                                    646 ; x=XTEMP^x 
      0002AE 9E               [ 1]  647 	ld a,xh 
      0002AF B8 24            [ 1]  648 	xor a,XTEMP 
      0002B1 95               [ 1]  649 	ld xh,a 
      0002B2 9F               [ 1]  650 	ld a,xl 
      0002B3 B8 25            [ 1]  651 	xor a,XTEMP+1  
      0002B5 97               [ 1]  652 	ld xl,a 
                                    653 ; SEEDY=x^SEEDY 
      0002B6 B8 3B            [ 1]  654 	xor a,SEEDY+1
      0002B8 97               [ 1]  655 	ld xl,a 
      0002B9 9E               [ 1]  656 	ld a,xh 
      0002BA B8 3A            [ 1]  657 	xor a,SEEDY
      0002BC 95               [ 1]  658 	ld xh,a 
      0002BD BF 3A            [ 2]  659 	ldw SEEDY,x 
                                    660 ; return SEEDY modulo YTEMP  
      0002BF 90 BE 26         [ 2]  661 	ldw y,YTEMP  
      0002C2 65               [ 2]  662 	divw x,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      0002C3 1E 01            [ 2]  663 	ldw x,(SPSAVE,sp)
      0002C5 FF               [ 2]  664         ldw (x),y 
      0002C6 5B 02            [ 2]  665         addw sp,#VSIZE 
      0002C8 81               [ 4]  666 	ret 
                                    667 
                                    668 
                                    669 ;;
                                    670 ;; get millisecond counter 
                                    671 ;; msec ( -- u )
                                    672 ;; Added by Picatout 2020-04-26
      0002C9 02 77                  673         .word LINK  
                           0002CB   674         LINK = . 
      0002CB 04                     675         .byte 4
      0002CC 4D 53 45 43            676         .ascii "MSEC"
      0002D0                        677 MSEC: 
      0002D0 1D 00 02         [ 2]  678         subw x,#CELLL 
      0002D3 90 BE 30         [ 2]  679         ldw y,MS 
      0002D6 FF               [ 2]  680         ldw (x),y 
      0002D7 81               [ 4]  681         ret 
                                    682 
                                    683 ; suspend execution for u msec 
                                    684 ;  pause ( u -- )
      0002D8 02 CB                  685         .word LINK 
                           0002DA   686         LINK=.
      0002DA 05                     687         .byte 5 
      0002DB 50 41 55 53 45         688         .ascii "PAUSE"
      0002E0                        689 PAUSE:
      0002E0 90 93            [ 1]  690         ldw y,x
      0002E2 90 FE            [ 2]  691         ldw y,(y)
      0002E4 72 B9 00 30      [ 2]  692         addw y,MS 
      0002E8 8F               [10]  693 1$:     wfi  
      0002E9 90 B3 30         [ 2]  694         cpw y,MS  
      0002EC 26 FA            [ 1]  695         jrne 1$        
      0002EE 1C 00 02         [ 2]  696         addw x,#CELLL 
      0002F1 81               [ 4]  697         ret 
                                    698 
                                    699 ; initialize count down timer 
                                    700 ;  TIMER ( u -- )  milliseconds 
      0002F2 02 DA                  701         .word LINK 
                           0002F4   702         LINK=.
      0002F4 05                     703         .byte 5 
      0002F5 54 49 4D 45 52         704         .ascii "TIMER" 
      0002FA                        705 TIMER:
      0002FA 90 93            [ 1]  706         ldw y,x
      0002FC 90 FE            [ 2]  707         ldw y,(y) 
      0002FE 90 BF 32         [ 2]  708         ldw CNTDWN,y
      000301 1C 00 02         [ 2]  709         addw x,#CELLL 
      000304 81               [ 4]  710         ret 
                                    711 
                                    712 ; check for TIMER exiparition 
                                    713 ;  TIMEOUT? ( -- 0|-1 )
      000305 02 F4                  714         .word LINK 
                           000307   715         LINK=. 
      000307 08                     716         .byte 8 
      000308 54 49 4D 45 4F 55 54   717         .ascii "TIMEOUT?"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



             3F
      000310                        718 TIMEOUTQ: 
      000310 4F               [ 1]  719         clr a
      000311 1D 00 02         [ 2]  720         subw x,#CELLL 
      000314 90 BE 32         [ 2]  721         ldw y,CNTDWN 
      000317 26 01            [ 1]  722         jrne 1$ 
      000319 43               [ 1]  723         cpl a 
      00031A E7 01            [ 1]  724 1$:     ld (1,x),a 
      00031C F7               [ 1]  725         ld (x),a 
      00031D 81               [ 4]  726         ret         
                                    727 
                                    728 ; reboot MCU 
                                    729 ; REBOOT ( -- )
      00031E 03 07                  730         .word LINK 
                           000320   731         LINK=. 
      000320 06                     732         .byte 6 
      000321 52 45 42 4F 4F 54      733         .ascii "REBOOT"
      000327                        734 reboot:
      000327 CC 00 00         [ 2]  735         jp NonHandledInterrupt
                                    736 
                                    737 ; compile to flash memory 
                                    738 ; TO-FLASH ( -- )
      00032A 03 20                  739         .word LINK 
                           00032C   740         LINK=.
      00032C 08                     741         .byte 8
      00032D 54 4F 2D 46 4C 41 53   742         .ascii "TO-FLASH"
             48
      000335                        743 TOFLASH:
      000335 CD 07 40         [ 4]  744         call RAMLAST 
      000338 CD 05 07         [ 4]  745         call AT 
      00033B CD 07 6B         [ 4]  746         call QDUP 
      00033E CD 04 A4         [ 4]  747         call QBRAN
      000341 03 64                  748         .word 1$
      000343 CD 13 72         [ 4]  749         call ABORQ 
      000346 1D                     750         .byte 29
      000347 20 4E 6F 74 20 77 68   751         .ascii " Not while definitions in RAM"   
             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      000364 90 AE FF FF      [ 2]  752 1$:     ldw y,#-1 
      000368 90 BF 20         [ 2]  753         ldw UTFLASH,y
      00036B 81               [ 4]  754         ret 
                                    755 
                                    756 ; compile to RAM 
                                    757 ; TO-RAM ( -- )
      00036C 03 2C                  758         .word LINK 
                           00036E   759         LINK=.
      00036E 06                     760         .byte 6 
      00036F 54 4F 2D 52 41 4D      761         .ascii "TO-RAM"
      000375                        762 TORAM:
      000375 90 5F            [ 1]  763         clrw y 
      000377 90 BF 20         [ 2]  764         ldw UTFLASH,y 
      00037A 81               [ 4]  765         ret 
                                    766 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    767 ;; BAUD RATE constants table
                                    768 ; values to put in BRR1 & BRR2 
      00037B                        769 baudrate: 
      00037B A0 1B                  770 	.byte 0xa0,0x1b ; 2400
      00037D D0 05                  771 	.byte 0xd0,0x5  ; 4800 
      00037F 68 03                  772 	.byte 0x68,0x3  ; 9600
      000381 34 01                  773 	.byte 0x34,0x1  ; 19200
      000383 11 06                  774 	.byte 0x11,0x6  ; 57600
      000385 08 0B                  775 	.byte 0x8,0xb   ; 115200
                                    776 
                                    777 ; BAUD RATE CONSTANTS names 
                                    778 ; 2400 baud
      000387 03 6E                  779 	.word LINK
                           000389   780 LINK	= .
      000389 04                     781 	.byte 4
      00038A 42 32 4B 34            782 	.ascii "B2K4" 
      00038E                        783 B2K4:
      00038E 1D 00 02         [ 2]  784 	subw x,#CELLL 
      000391 90 5F            [ 1]  785         clrw y
      000393 FF               [ 2]  786         ldw (x),y
      000394 81               [ 4]  787 	ret
                                    788 ; 4800 baud	
      000395 03 89                  789 	.word LINK
                           000397   790 LINK	= .
      000397 04                     791 	.byte 4
      000398 42 34 4B 38            792 	.ascii "B4K8" 
      00039C                        793 B4K8:
      00039C 1D 00 02         [ 2]  794         subw x,#CELLL 
      00039F 90 AE 00 02      [ 2]  795         ldw y,#2 
      0003A3 FF               [ 2]  796         ldw (x),y
      0003A4 81               [ 4]  797         ret 
                                    798 ; 9600 baud
      0003A5 03 97                  799 	.word LINK
                           0003A7   800 LINK	= .
      0003A7 04                     801 	.byte 4
      0003A8 42 39 4B 36            802 	.ascii "B9K6" 
      0003AC                        803 B9K6:
      0003AC 1D 00 02         [ 2]  804         subw x,#CELLL 
      0003AF 90 AE 00 04      [ 2]  805         ldw y,#4 
      0003B3 FF               [ 2]  806         ldw (x),y 
      0003B4 81               [ 4]  807         ret 
                                    808 ; 19200 baud
      0003B5 03 A7                  809 	.word LINK
                           0003B7   810 LINK	= .
      0003B7 05                     811 	.byte 5
      0003B8 42 31 39 4B 32         812 	.ascii "B19K2" 
      0003BD                        813 B19K2:
      0003BD 1D 00 02         [ 2]  814         subw x,#CELLL
      0003C0 90 AE 00 06      [ 2]  815         ldw y,#6 
      0003C4 FF               [ 2]  816         ldw (x),y 
      0003C5 81               [ 4]  817         ret 
                                    818 ; 57600 baud        
      0003C6 03 B7                  819 	.word LINK
                           0003C8   820 LINK	= .
      0003C8 05                     821 	.byte 5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      0003C9 42 35 37 4B 36         822 	.ascii "B57K6" 
      0003CE                        823 B57K6:
      0003CE 1D 00 02         [ 2]  824         subw x,#CELLL 
      0003D1 90 AE 00 08      [ 2]  825         ldw y,#8 
      0003D5 FF               [ 2]  826         ldw (x),y 
      0003D6 81               [ 4]  827         ret 
                                    828 ; 115200 baud 
      0003D7 03 C8                  829 	.word LINK
                           0003D9   830 LINK	= .
      0003D9 06                     831 	.byte 6
      0003DA 42 31 31 35 4B 32      832 	.ascii "B115K2" 
      0003E0                        833 B115K2:
      0003E0 1D 00 02         [ 2]  834 	subw x,#CELLL 
      0003E3 90 AE 00 0A      [ 2]  835         ldw y,#10 
      0003E7 FF               [ 2]  836         ldw (x),y 
      0003E8 81               [ 4]  837         ret 
                                    838 	
                                    839 ;; set UART2 BAUD rate
                                    840 ;	BAUD ( u -- )
      0003E9 03 D9                  841 	.word LINK 
                           0003EB   842 LINK	= .
      0003EB 04                     843 	.byte 4
      0003EC 42 41 55 44            844 	.ascii "BAUD" 
      0003F0                        845 BAUD:
      0003F0 1D 00 02         [ 2]  846 	subw x,#CELLL
      0003F3 90 AE 03 7B      [ 2]  847         ldw y,#baudrate 
      0003F7 FF               [ 2]  848         ldw (x),y 
      0003F8 CD 07 DD         [ 4]  849         call PLUS
      0003FB 90 93            [ 1]  850         ldw y,x  
      0003FD 90 FE            [ 2]  851         ldw y,(y)
      0003FF 90 F6            [ 1]  852         ld a,(y)
      000401 88               [ 1]  853         push a 
      000402 90 5C            [ 1]  854         incw y 
      000404 90 F6            [ 1]  855         ld a,(y)
      000406 C7 52 33         [ 1]  856         ld UART_BRR2,a 
      000409 84               [ 1]  857         pop a
      00040A C7 52 32         [ 1]  858         ld UART_BRR1,a 
      00040D 1C 00 02         [ 2]  859         addw x,#CELLL 
      000410 81               [ 4]  860         ret 
                                    861 
                                    862 ;; Device dependent I/O
                                    863 ;       ?RX     ( -- c T | F )
                                    864 ;         Return input byte and true, or false.
      000411 03 EB                  865         .word      LINK 
                           000413   866 LINK	= .
      000413 04                     867         .byte      4
      000414 3F 4B 45 59            868         .ascii     "?KEY"
      000418                        869 QKEY:
      000418 90 5F            [ 1]  870         CLRW Y 
      00041A 72 0B 52 30 0B   [ 2]  871         BTJF UART_SR,#UART_SR_RXNE,INCH   ;check status
      00041F C6 52 31         [ 1]  872         LD    A,UART_DR   ;get char in A
      000422 1D 00 02         [ 2]  873 	SUBW	X,#2
      000425 E7 01            [ 1]  874         LD     (1,X),A
      000427 7F               [ 1]  875 	CLR	(X)
      000428 90 53            [ 2]  876         CPLW     Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      00042A                        877 INCH:
      00042A 1D 00 02         [ 2]  878 		SUBW	X,#2
      00042D FF               [ 2]  879         LDW     (X),Y
      00042E 81               [ 4]  880         RET
                                    881 
                                    882 ;       TX!     ( c -- )
                                    883 ;       Send character c to  output device.
      00042F 04 13                  884         .word      LINK
                           000431   885 LINK	= .
      000431 04                     886         .byte      4
      000432 45 4D 49 54            887         .ascii     "EMIT"
      000436                        888 EMIT:
      000436 E6 01            [ 1]  889         LD     A,(1,X)
      000438 1C 00 02         [ 2]  890 	ADDW	X,#2
      00043B 72 0F 52 30 FB   [ 2]  891 OUTPUT: BTJF UART_SR,#UART_SR_TXE,OUTPUT  ;loop until tx empty 
      000440 C7 52 31         [ 1]  892         LD    UART_DR,A   ;send A
      000443 81               [ 4]  893         RET
                                    894 
                                    895 ;       FC-XON  ( -- )
                                    896 ;       send XON character 
      000444 04 31                  897         .word LINK
                           000446   898 LINK    = .
      000446 06                     899         .byte 6 
      000447 46 43 2D 58 4F 4E      900         .ascii "FC-XON"
      00044D                        901 FC_XON:
      00044D 1D 00 02         [ 2]  902         subw x,#CELLL 
      000450 7F               [ 1]  903         clr (x)
      000451 A6 11            [ 1]  904         ld a,#XON 
      000453 E7 01            [ 1]  905         ld (1,x),a 
      000455 CD 04 36         [ 4]  906         call EMIT 
      000458 81               [ 4]  907         ret 
                                    908 
                                    909 ;       FC-XOFF ( -- )
                                    910 ;       Send XOFF character 
      000459 04 46                  911         .word LINK
                           00045B   912 LINK    = .
      00045B 07                     913         .byte 7
      00045C 46 43 2D 58 4F 46 46   914         .ascii "FC-XOFF"
      000463                        915 FC_XOFF:
      000463 1D 00 02         [ 2]  916         subw x,#CELLL 
      000466 7F               [ 1]  917         clr (x)
      000467 A6 13            [ 1]  918         ld a,#XOFF 
      000469 E7 01            [ 1]  919         ld (1,x),a 
      00046B CD 04 36         [ 4]  920         call EMIT 
      00046E 81               [ 4]  921         ret
                                    922 
                                    923 ;; The kernel
                                    924 
                                    925 ;       doLIT   ( -- w )
                                    926 ;       Push an inline literal.
      00046F 04 5B                  927         .word      LINK
                                    928 ;LINK	= 	.
                                    929 ;	.byte      COMPO+5
                                    930 ;        .ascii     "DOLIT"
      000471                        931 DOLIT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      000471 1D 00 02         [ 2]  932 	SUBW X,#2
      000474 16 01            [ 2]  933         ldw y,(1,sp)
      000476 90 FE            [ 2]  934         ldw y,(y)
      000478 FF               [ 2]  935         ldw (x),y
      000479 90 85            [ 2]  936         popw y 
      00047B 90 EC 02         [ 2]  937         jp (2,y)
                                    938 
                                    939 ;       next    ( -- )
                                    940 ;       Code for  single index loop.
      00047E 04 5B                  941         .word      LINK
                           000480   942 LINK	= 	.
      000480 44                     943 	.byte      COMPO+4
      000481 6E 65 78 74            944         .ascii     "next"
      000485                        945 DONXT:
      000485 16 03            [ 2]  946 	LDW Y,(3,SP)
      000487 90 5A            [ 2]  947 	DECW Y
      000489 2A 07            [ 1]  948 	JRPL NEX1 ; jump if N=0
      00048B 90 85            [ 2]  949 	POPW Y
      00048D 5B 02            [ 2]  950         addw sp,#2
      00048F 90 EC 02         [ 2]  951         JP (2,Y)
      000492                        952 NEX1:
      000492 17 03            [ 2]  953         LDW (3,SP),Y
      000494 90 85            [ 2]  954         POPW Y
      000496 90 FE            [ 2]  955 	LDW Y,(Y)
      000498 90 FC            [ 2]  956 	JP (Y)
                                    957 
                                    958 ;       ?branch ( f -- )
                                    959 ;       Branch if flag is zero.
      00049A 04 80                  960         .word      LINK
                           00049C   961 LINK	= 	.
      00049C 47                     962 	.byte      COMPO+7
      00049D 3F 42 52 41 4E 43 48   963         .ascii     "?BRANCH"
      0004A4                        964 QBRAN:	
      0004A4 90 93            [ 1]  965         LDW Y,X
      0004A6 1C 00 02         [ 2]  966 	ADDW X,#2
      0004A9 90 FE            [ 2]  967 	LDW Y,(Y)
      0004AB 27 26            [ 1]  968         JREQ     BRAN
      0004AD 90 85            [ 2]  969 	POPW Y
      0004AF 90 EC 02         [ 2]  970 	JP (2,Y)
                                    971 
                                    972 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    973 ;  TBRANCH ( f -- )
                                    974 ;  branch if f==TRUE 
                                    975 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004B2                        976         _HEADER TBRAN,COMPO+7,"TBRANCH"
      0004B2 04 9C                    1         .word LINK 
                           0004B4     2         LINK=.
      0004B4 47                       3         .byte COMPO+7  
      0004B5 54 42 52 41 4E 43 48     4         .ascii "TBRANCH"
      0004BC                          5         TBRAN:
      0004BC 90 93            [ 1]  977         LDW Y,X 
      0004BE 1C 00 02         [ 2]  978         ADDW X,#2 
      0004C1 90 FE            [ 2]  979         LDW Y,(Y)
      0004C3 26 0E            [ 1]  980         JRNE BRAN 
      0004C5 90 85            [ 2]  981         POPW Y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      0004C7 90 EC 02         [ 2]  982         JP (2,Y)
                                    983 
                                    984 
                                    985 ;       branch  ( -- )
                                    986 ;       Branch to an inline address.
      0004CA 04 B4                  987         .word      LINK
                           0004CC   988 LINK	= 	.
      0004CC 46                     989 	.byte      COMPO+6
      0004CD 42 52 41 4E 43 48      990         .ascii     "BRANCH"
      0004D3                        991 BRAN:
      0004D3 90 85            [ 2]  992         POPW Y
      0004D5 90 FE            [ 2]  993 	LDW Y,(Y)
      0004D7 90 FC            [ 2]  994         JP     (Y)
                                    995 
                                    996 ;       EXECUTE ( ca -- )
                                    997 ;       Execute  word at ca.
      0004D9 04 CC                  998         .word      LINK
                           0004DB   999 LINK	= 	.
      0004DB 07                    1000         .byte       7
      0004DC 45 58 45 43 55 54 45  1001         .ascii     "EXECUTE"
      0004E3                       1002 EXECU:
      0004E3 90 93            [ 1] 1003         LDW Y,X
      0004E5 1C 00 02         [ 2] 1004 	ADDW X,#2
      0004E8 90 FE            [ 2] 1005 	LDW  Y,(Y)
      0004EA 90 FC            [ 2] 1006         JP   (Y)
                                   1007 
                           000001  1008 OPTIMIZE = 1
                           000001  1009 .if OPTIMIZE 
                                   1010 ; remplacement de CALL EXIT par 
                                   1011 ; le opcode de RET.
                                   1012 ; Voir modification au code de ";"
                           000000  1013 .else 
                                   1014 ;       EXIT    ( -- )
                                   1015 ;       Terminate a colon definition.
                                   1016         .word      LINK
                                   1017 LINK = .
                                   1018         .byte      4
                                   1019         .ascii     "EXIT"
                                   1020 EXIT:
                                   1021         POPW Y
                                   1022         RET
                                   1023 .endif 
                                   1024 
                                   1025 ;       !       ( w a -- )
                                   1026 ;       Pop  data stack to memory.
      0004EC 04 DB                 1027         .word      LINK
                           0004EE  1028 LINK = .
      0004EE 01                    1029         .byte      1
      0004EF 21                    1030         .ascii     "!"
      0004F0                       1031 STORE:
      0004F0 90 93            [ 1] 1032         LDW Y,X
      0004F2 90 FE            [ 2] 1033         LDW Y,(Y)    ;Y=a
      0004F4 90 BF 26         [ 2] 1034         LDW YTEMP,Y
      0004F7 90 93            [ 1] 1035         LDW Y,X
      0004F9 90 EE 02         [ 2] 1036         LDW Y,(2,Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      0004FC 91 CF 26         [ 5] 1037         LDW [YTEMP],Y ;store w at a
      0004FF 1C 00 04         [ 2] 1038         ADDW X,#4 ; DDROP 
      000502 81               [ 4] 1039         RET     
                                   1040 
                                   1041 ;       @       ( a -- w )
                                   1042 ;       Push memory location to stack.
      000503 04 EE                 1043         .word      LINK
                           000505  1044 LINK	= 	.
      000505 01                    1045         .byte    1
      000506 40                    1046         .ascii	"@"
      000507                       1047 AT:
      000507 90 93            [ 1] 1048         LDW Y,X     ;Y = a
      000509 90 FE            [ 2] 1049         LDW Y,(Y)   ; address 
      00050B 90 FE            [ 2] 1050         LDW Y,(Y)   ; value 
      00050D FF               [ 2] 1051         LDW (X),Y ;w = @Y
      00050E 81               [ 4] 1052         RET     
                                   1053 
                                   1054 ;       C!      ( c b -- )
                                   1055 ;       Pop  data stack to byte memory.
      00050F 05 05                 1056         .word      LINK
                           000511  1057 LINK	= .
      000511 02                    1058         .byte      2
      000512 43 21                 1059         .ascii     "C!"
      000514                       1060 CSTOR:
      000514 90 93            [ 1] 1061         LDW Y,X
      000516 90 FE            [ 2] 1062 	LDW Y,(Y)    ;Y=b
      000518 E6 03            [ 1] 1063         LD A,(3,X)    ;D = c
      00051A 90 F7            [ 1] 1064         LD  (Y),A     ;store c at b
      00051C 1C 00 04         [ 2] 1065 	ADDW X,#4 ; DDROP 
      00051F 81               [ 4] 1066         RET     
                                   1067 
                                   1068 ;       C@      ( b -- c )
                                   1069 ;       Push byte in memory to  stack.
      000520 05 11                 1070         .word      LINK
                           000522  1071 LINK	= 	.
      000522 02                    1072         .byte      2
      000523 43 40                 1073         .ascii     "C@"
      000525                       1074 CAT:
      000525 90 93            [ 1] 1075         LDW Y,X     ;Y=b
      000527 90 FE            [ 2] 1076         LDW Y,(Y)
      000529 90 F6            [ 1] 1077         LD A,(Y)
      00052B E7 01            [ 1] 1078         LD (1,X),A
      00052D 7F               [ 1] 1079         CLR (X)
      00052E 81               [ 4] 1080         RET     
                                   1081 
                                   1082 ;       RP@     ( -- a )
                                   1083 ;       Push current RP to data stack.
      00052F 05 22                 1084         .word      LINK
                           000531  1085 LINK	= .
      000531 03                    1086         .byte      3
      000532 52 50 40              1087         .ascii     "RP@"
      000535                       1088 RPAT:
      000535 90 96            [ 1] 1089         LDW Y,SP    ;save return addr
      000537 1D 00 02         [ 2] 1090         SUBW X,#2
      00053A FF               [ 2] 1091         LDW (X),Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      00053B 81               [ 4] 1092         RET     
                                   1093 
                                   1094 ;       RP!     ( a -- )
                                   1095 ;       Set  return stack pointer.
      00053C 05 31                 1096         .word      LINK
                           00053E  1097 LINK	= 	. 
      00053E 43                    1098 	.byte      COMPO+3
      00053F 52 50 21              1099         .ascii     "RP!"
      000542                       1100 RPSTO:
      000542 90 85            [ 2] 1101         POPW Y
      000544 90 BF 26         [ 2] 1102         LDW YTEMP,Y
      000547 90 93            [ 1] 1103         LDW Y,X
      000549 90 FE            [ 2] 1104         LDW Y,(Y)
      00054B 90 94            [ 1] 1105         LDW SP,Y
      00054D 1C 00 02         [ 2] 1106         ADDW x,#CELLL ; a was not dropped, Picatout 2020-05-24
      000550 92 CC 26         [ 5] 1107         JP [YTEMP]
                                   1108 
                                   1109 ;       R>      ( -- w )
                                   1110 ;       Pop return stack to data stack.
      000553 05 3E                 1111         .word      LINK
                           000555  1112 LINK	= 	. 
      000555 42                    1113 	.byte      COMPO+2
      000556 52 3E                 1114         .ascii     "R>"
      000558                       1115 RFROM:
      000558 90 85            [ 2] 1116         POPW Y    ;save return addr
      00055A 90 BF 26         [ 2] 1117         LDW YTEMP,Y
      00055D 90 85            [ 2] 1118         POPW Y
      00055F 1D 00 02         [ 2] 1119         SUBW X,#2
      000562 FF               [ 2] 1120         LDW (X),Y
      000563 92 CC 26         [ 5] 1121         JP [YTEMP]
                                   1122 
                                   1123 ;       R@      ( -- w )
                                   1124 ;       Copy top of return stack to stack.
      000566 05 55                 1125         .word      LINK
                           000568  1126 LINK	= 	. 
      000568 02                    1127         .byte      2
      000569 52 40                 1128         .ascii     "R@"
      00056B                       1129 RAT:
      00056B 16 03            [ 2] 1130         ldw y,(3,sp)
      00056D 1D 00 02         [ 2] 1131         subw x,#CELLL 
      000570 FF               [ 2] 1132         ldw (x),y 
      000571 81               [ 4] 1133         ret 
                                   1134 
                                   1135 ;       >R      ( w -- )
                                   1136 ;       Push data stack to return stack.
      000572 05 68                 1137         .word      LINK
                           000574  1138 LINK	= 	. 
      000574 42                    1139 	.byte      COMPO+2
      000575 3E 52                 1140         .ascii     ">R"
      000577                       1141 TOR:
      000577 90 85            [ 2] 1142         POPW Y    ;save return addr
      000579 90 BF 26         [ 2] 1143         LDW YTEMP,Y
      00057C 90 93            [ 1] 1144         LDW Y,X
      00057E 90 FE            [ 2] 1145         LDW Y,(Y)
      000580 90 89            [ 2] 1146         PUSHW Y    ;restore return addr
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      000582 1C 00 02         [ 2] 1147         ADDW X,#2
      000585 92 CC 26         [ 5] 1148         JP [YTEMP]
                                   1149 
                                   1150 ;       SP@     ( -- a )
                                   1151 ;       Push current stack pointer.
      000588 05 74                 1152         .word      LINK
                           00058A  1153 LINK	= 	. 
      00058A 03                    1154         .byte      3
      00058B 53 50 40              1155         .ascii     "SP@"
      00058E                       1156 SPAT:
      00058E 90 93            [ 1] 1157 	LDW Y,X
      000590 1D 00 02         [ 2] 1158         SUBW X,#2
      000593 FF               [ 2] 1159 	LDW (X),Y
      000594 81               [ 4] 1160         RET     
                                   1161 
                                   1162 ;       SP!     ( a -- )
                                   1163 ;       Set  data stack pointer.
      000595 05 8A                 1164         .word      LINK
                           000597  1165 LINK	= 	. 
      000597 03                    1166         .byte      3
      000598 53 50 21              1167         .ascii     "SP!"
      00059B                       1168 SPSTO:
      00059B FE               [ 2] 1169         LDW     X,(X)     ;X = a
      00059C 81               [ 4] 1170         RET     
                                   1171 
                                   1172 ;       DROP    ( w -- )
                                   1173 ;       Discard top stack item.
      00059D 05 97                 1174         .word      LINK
                           00059F  1175 LINK	= 	. 
      00059F 04                    1176         .byte      4
      0005A0 44 52 4F 50           1177         .ascii     "DROP"
      0005A4                       1178 DROP:
      0005A4 1C 00 02         [ 2] 1179         ADDW X,#2     
      0005A7 81               [ 4] 1180         RET     
                                   1181 
                                   1182 ;       DUP     ( w -- w w )
                                   1183 ;       Duplicate  top stack item.
      0005A8 05 9F                 1184         .word      LINK
                           0005AA  1185 LINK	= 	. 
      0005AA 03                    1186         .byte      3
      0005AB 44 55 50              1187         .ascii     "DUP"
      0005AE                       1188 DUPP:
      0005AE 90 93            [ 1] 1189 	LDW Y,X
      0005B0 1D 00 02         [ 2] 1190         SUBW X,#2
      0005B3 90 FE            [ 2] 1191 	LDW Y,(Y)
      0005B5 FF               [ 2] 1192 	LDW (X),Y
      0005B6 81               [ 4] 1193         RET     
                                   1194 
                                   1195 ;       SWAP    ( w1 w2 -- w2 w1 )
                                   1196 ;       Exchange top two stack items.
      0005B7 05 AA                 1197         .word      LINK
                           0005B9  1198 LINK	= 	. 
      0005B9 04                    1199         .byte      4
      0005BA 53 57 41 50           1200         .ascii     "SWAP"
      0005BE                       1201 SWAPP:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      0005BE 90 93            [ 1] 1202         LDW Y,X
      0005C0 90 FE            [ 2] 1203         LDW Y,(Y)
      0005C2 90 BF 26         [ 2] 1204         LDW YTEMP,Y
      0005C5 90 93            [ 1] 1205         LDW Y,X
      0005C7 90 EE 02         [ 2] 1206         LDW Y,(2,Y)
      0005CA FF               [ 2] 1207         LDW (X),Y
      0005CB 90 BE 26         [ 2] 1208         LDW Y,YTEMP
      0005CE EF 02            [ 2] 1209         LDW (2,X),Y
      0005D0 81               [ 4] 1210         RET     
                                   1211 
                                   1212 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                   1213 ;       Copy second stack item to top.
      0005D1 05 B9                 1214         .word      LINK
                           0005D3  1215 LINK	= . 
      0005D3 04                    1216         .byte      4
      0005D4 4F 56 45 52           1217         .ascii     "OVER"
      0005D8                       1218 OVER:
      0005D8 1D 00 02         [ 2] 1219         SUBW X,#2
      0005DB 90 93            [ 1] 1220         LDW Y,X
      0005DD 90 EE 04         [ 2] 1221         LDW Y,(4,Y)
      0005E0 FF               [ 2] 1222         LDW (X),Y
      0005E1 81               [ 4] 1223         RET     
                                   1224 
                                   1225 ;       0<      ( n -- t )
                                   1226 ;       Return true if n is negative.
      0005E2 05 D3                 1227         .word      LINK
                           0005E4  1228 LINK	= . 
      0005E4 02                    1229         .byte      2
      0005E5 30 3C                 1230         .ascii     "0<"
      0005E7                       1231 ZLESS:
      0005E7 A6 FF            [ 1] 1232         LD A,#0xFF
      0005E9 90 93            [ 1] 1233         LDW Y,X
      0005EB 90 FE            [ 2] 1234         LDW Y,(Y)
      0005ED 2B 01            [ 1] 1235         JRMI     ZL1
      0005EF 4F               [ 1] 1236         CLR A   ;false
      0005F0 F7               [ 1] 1237 ZL1:    LD     (X),A
      0005F1 E7 01            [ 1] 1238         LD (1,X),A
      0005F3 81               [ 4] 1239 	RET     
                                   1240 
                                   1241 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1242 ;       0= ( n -- f )
                                   1243 ;   n==0?
                                   1244 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005F4                       1245         _HEADER ZEQUAL,2,"0="
      0005F4 05 E4                    1         .word LINK 
                           0005F6     2         LINK=.
      0005F6 02                       3         .byte 2  
      0005F7 30 3D                    4         .ascii "0="
      0005F9                          5         ZEQUAL:
      0005F9 A6 FF            [ 1] 1246         LD A,#0XFF 
      0005FB 90 93            [ 1] 1247         LDW Y,X 
      0005FD 90 FE            [ 2] 1248         LDW Y,(Y)
      0005FF 27 02            [ 1] 1249         JREQ ZEQU1 
      000601 A6 00            [ 1] 1250         LD A,#0 
      000603                       1251 ZEQU1:  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      000603 F7               [ 1] 1252         LD (X),A 
      000604 E7 01            [ 1] 1253         LD (1,X),A         
      000606 81               [ 4] 1254         RET 
                                   1255 
                                   1256 
                                   1257 ;       AND     ( w w -- w )
                                   1258 ;       Bitwise AND.
      000607 05 F6                 1259         .word      LINK
                           000609  1260 LINK	= . 
      000609 03                    1261         .byte      3
      00060A 41 4E 44              1262         .ascii     "AND"
      00060D                       1263 ANDD:
      00060D F6               [ 1] 1264         LD  A,(X)    ;D=w
      00060E E4 02            [ 1] 1265         AND A,(2,X)
      000610 E7 02            [ 1] 1266         LD (2,X),A
      000612 E6 01            [ 1] 1267         LD A,(1,X)
      000614 E4 03            [ 1] 1268         AND A,(3,X)
      000616 E7 03            [ 1] 1269         LD (3,X),A
      000618 1C 00 02         [ 2] 1270         ADDW X,#2
      00061B 81               [ 4] 1271         RET
                                   1272 
                                   1273 ;       OR      ( w w -- w )
                                   1274 ;       Bitwise inclusive OR.
      00061C 06 09                 1275         .word      LINK
                           00061E  1276 LINK = . 
      00061E 02                    1277         .byte      2
      00061F 4F 52                 1278         .ascii     "OR"
      000621                       1279 ORR:
      000621 F6               [ 1] 1280         LD A,(X)    ;D=w
      000622 EA 02            [ 1] 1281         OR A,(2,X)
      000624 E7 02            [ 1] 1282         LD (2,X),A
      000626 E6 01            [ 1] 1283         LD A,(1,X)
      000628 EA 03            [ 1] 1284         OR A,(3,X)
      00062A E7 03            [ 1] 1285         LD (3,X),A
      00062C 1C 00 02         [ 2] 1286         ADDW X,#2
      00062F 81               [ 4] 1287         RET
                                   1288 
                                   1289 ;       XOR     ( w w -- w )
                                   1290 ;       Bitwise exclusive OR.
      000630 06 1E                 1291         .word      LINK
                           000632  1292 LINK	= . 
      000632 03                    1293         .byte      3
      000633 58 4F 52              1294         .ascii     "XOR"
      000636                       1295 XORR:
      000636 F6               [ 1] 1296         LD A,(X)    ;D=w
      000637 E8 02            [ 1] 1297         XOR A,(2,X)
      000639 E7 02            [ 1] 1298         LD (2,X),A
      00063B E6 01            [ 1] 1299         LD A,(1,X)
      00063D E8 03            [ 1] 1300         XOR A,(3,X)
      00063F E7 03            [ 1] 1301         LD (3,X),A
      000641 1C 00 02         [ 2] 1302         ADDW X,#2
      000644 81               [ 4] 1303         RET
                                   1304 
                                   1305 ;       UM+     ( u u -- udsum )
                                   1306 ;       Add two unsigned single
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1307 ;       and return a double sum.
      000645 06 32                 1308         .word      LINK
                           000647  1309 LINK	= . 
      000647 03                    1310         .byte      3
      000648 55 4D 2B              1311         .ascii     "UM+"
      00064B                       1312 UPLUS:
      00064B A6 01            [ 1] 1313         LD A,#1
      00064D 90 93            [ 1] 1314         LDW Y,X
      00064F 90 EE 02         [ 2] 1315         LDW Y,(2,Y)
      000652 90 BF 26         [ 2] 1316         LDW YTEMP,Y
      000655 90 93            [ 1] 1317         LDW Y,X
      000657 90 FE            [ 2] 1318         LDW Y,(Y)
      000659 72 B9 00 26      [ 2] 1319         ADDW Y,YTEMP
      00065D EF 02            [ 2] 1320         LDW (2,X),Y
      00065F 25 01            [ 1] 1321         JRC     UPL1
      000661 4F               [ 1] 1322         CLR A
      000662 E7 01            [ 1] 1323 UPL1:   LD     (1,X),A
      000664 7F               [ 1] 1324         CLR (X)
      000665 81               [ 4] 1325         RET
                                   1326 
                                   1327 ;; System and user variables
                                   1328 
                                   1329 ;       doVAR   ( -- a )
                                   1330 ;       Code for VARIABLE and CREATE.
      000666 06 47                 1331         .word      LINK
                           000668  1332 LINK	= . 
      000668 45                    1333 	.byte      COMPO+5
      000669 44 4F 56 41 52        1334         .ascii     "DOVAR"
      00066E                       1335 DOVAR:
      00066E 1D 00 02         [ 2] 1336 	SUBW X,#2
      000671 90 85            [ 2] 1337         POPW Y    ;get return addr (pfa)
      000673 90 FE            [ 2] 1338         LDW Y,(Y) ; indirect address 
      000675 FF               [ 2] 1339         LDW (X),Y    ;push on stack
      000676 81               [ 4] 1340         RET     ;go to RET of EXEC
                                   1341 
                                   1342 ;       BASE    ( -- a )
                                   1343 ;       Radix base for numeric I/O.
      000677 06 68                 1344         .word      LINK        
                           000679  1345 LINK = . 
      000679 04                    1346         .byte      4
      00067A 42 41 53 45           1347         .ascii     "BASE"
      00067E                       1348 BASE:
      00067E 90 AE 00 06      [ 2] 1349 	LDW Y,#UBASE 
      000682 1D 00 02         [ 2] 1350 	SUBW X,#2
      000685 FF               [ 2] 1351         LDW (X),Y
      000686 81               [ 4] 1352         RET
                                   1353 
                                   1354 ;       tmp     ( -- a )
                                   1355 ;       A temporary storage.
      000687 06 79                 1356         .word      LINK
                                   1357         
                           000689  1358 LINK = . 
      000689 03                    1359 	.byte      3
      00068A 54 4D 50              1360         .ascii     "TMP"
      00068D                       1361 TEMP:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      00068D 90 AE 00 0A      [ 2] 1362 	LDW Y,#UTMP
      000691 1D 00 02         [ 2] 1363 	SUBW X,#2
      000694 FF               [ 2] 1364         LDW (X),Y
      000695 81               [ 4] 1365         RET
                                   1366 
                                   1367 ;       >IN     ( -- a )
                                   1368 ;        Hold parsing pointer.
      000696 06 89                 1369         .word      LINK
                           000698  1370 LINK = . 
      000698 03                    1371         .byte      3
      000699 3E 49 4E              1372         .ascii    ">IN"
      00069C                       1373 INN:
      00069C 90 AE 00 0C      [ 2] 1374 	LDW Y,#UINN 
      0006A0 1D 00 02         [ 2] 1375 	SUBW X,#2
      0006A3 FF               [ 2] 1376         LDW (X),Y
      0006A4 81               [ 4] 1377         RET
                                   1378 
                                   1379 ;       #TIB    ( -- a )
                                   1380 ;       Count in terminal input buffer.
      0006A5 06 98                 1381         .word      LINK
                           0006A7  1382 LINK = . 
      0006A7 04                    1383         .byte      4
      0006A8 23 54 49 42           1384         .ascii     "#TIB"
      0006AC                       1385 NTIB:
      0006AC 90 AE 00 0E      [ 2] 1386 	LDW Y,#UCTIB 
      0006B0 1D 00 02         [ 2] 1387 	SUBW X,#2
      0006B3 FF               [ 2] 1388         LDW (X),Y
      0006B4 81               [ 4] 1389         RET
                                   1390 
                                   1391 ;       TBUF ( -- a )
                                   1392 ;       address of 128 bytes transaction buffer 
      0006B5 06 A7                 1393         .word LINK 
                           0006B7  1394         LINK=.
      0006B7 04                    1395         .byte 4 
      0006B8 54 42 55 46           1396         .ascii "TBUF"
      0006BC                       1397 TBUF:
      0006BC 90 AE 16 80      [ 2] 1398         ldw y,#ROWBUFF
      0006C0 1D 00 02         [ 2] 1399         subw x,#CELLL
      0006C3 FF               [ 2] 1400         ldw (x),y 
      0006C4 81               [ 4] 1401         ret 
                                   1402 
                                   1403 ; systeme variable 
                                   1404 ; compilation destination 
                                   1405 ; TFLASH ( -- A )
      0006C5 06 B7                 1406         .word LINK 
                           0006C7  1407         LINK=.
      0006C7 06                    1408         .byte 6 
      0006C8 54 46 4C 41 53 48     1409         .ascii "TFLASH"         
      0006CE                       1410 TFLASH:
      0006CE 1D 00 02         [ 2] 1411         subw x,#CELLL 
      0006D1 90 AE 00 20      [ 2] 1412         ldw y,#UTFLASH
      0006D5 FF               [ 2] 1413         ldw (x),y 
      0006D6 81               [ 4] 1414         ret 
                                   1415 
                                   1416 ;       "EVAL   ( -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                                   1417 ;       Execution vector of EVAL.
      0006D7 06 C7                 1418         .word      LINK
                           0006D9  1419 LINK = . 
      0006D9 05                    1420         .byte      5
      0006DA 27 45 56 41 4C        1421         .ascii     "'EVAL"
      0006DF                       1422 TEVAL:
      0006DF 90 AE 00 12      [ 2] 1423 	LDW Y,#UINTER 
      0006E3 1D 00 02         [ 2] 1424 	SUBW X,#2
      0006E6 FF               [ 2] 1425         LDW (X),Y
      0006E7 81               [ 4] 1426         RET
                                   1427 
                                   1428 ;       HLD     ( -- a )
                                   1429 ;       Hold a pointer of output string.
      0006E8 06 D9                 1430         .word      LINK
                           0006EA  1431 LINK = . 
      0006EA 03                    1432         .byte      3
      0006EB 48 4C 44              1433         .ascii     "HLD"
      0006EE                       1434 HLD:
      0006EE 90 AE 00 14      [ 2] 1435 	LDW Y,#UHLD 
      0006F2 1D 00 02         [ 2] 1436 	SUBW X,#2
      0006F5 FF               [ 2] 1437         LDW (X),Y
      0006F6 81               [ 4] 1438         RET
                                   1439 
                                   1440 ;       CONTEXT ( -- a )
                                   1441 ;       Start vocabulary search.
      0006F7 06 EA                 1442         .word      LINK
                           0006F9  1443 LINK = . 
      0006F9 07                    1444         .byte      7
      0006FA 43 4F 4E 54 45 58 54  1445         .ascii     "CONTEXT"
      000701                       1446 CNTXT:
      000701 90 AE 00 16      [ 2] 1447 	LDW Y,#UCNTXT
      000705 1D 00 02         [ 2] 1448 	SUBW X,#2
      000708 FF               [ 2] 1449         LDW (X),Y
      000709 81               [ 4] 1450         RET
                                   1451 
                                   1452 ;       VP      ( -- a )
                                   1453 ;       Point to top of variables
      00070A 06 F9                 1454         .word      LINK
                           00070C  1455 LINK = . 
      00070C 02                    1456         .byte      2
      00070D 56 50                 1457         .ascii     "VP"
      00070F                       1458 VPP:
      00070F 90 AE 00 18      [ 2] 1459 	LDW Y,#UVP 
      000713 1D 00 02         [ 2] 1460 	SUBW X,#2
      000716 FF               [ 2] 1461         LDW (X),Y
      000717 81               [ 4] 1462         RET
                                   1463 
                                   1464 ;       CP    ( -- a )
                                   1465 ;       Pointer to top of FLASH 
      000718 07 0C                 1466         .word LINK 
                           00071A  1467         LINK=.
      00071A 02                    1468         .byte 2 
      00071B 43 50                 1469         .ascii "CP"
      00071D                       1470 CPP: 
      00071D 90 AE 00 1A      [ 2] 1471         ldw y,#UCP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      000721 1D 00 02         [ 2] 1472         subw x,#CELLL 
      000724 FF               [ 2] 1473         ldw (x),y 
      000725 81               [ 4] 1474         ret                
                                   1475 
                                   1476 ;       LAST    ( -- a )
                                   1477 ;       Point to last name in dictionary.
      000726 07 1A                 1478         .word      LINK
                           000728  1479 LINK = . 
      000728 04                    1480         .byte      4
      000729 4C 41 53 54           1481         .ascii     "LAST"
      00072D                       1482 LAST:
      00072D 90 AE 00 1C      [ 2] 1483 	LDW Y,#ULAST 
      000731 1D 00 02         [ 2] 1484 	SUBW X,#2
      000734 FF               [ 2] 1485         LDW (X),Y
      000735 81               [ 4] 1486         RET
                                   1487 
                                   1488 ; address of system variable URLAST 
                                   1489 ;       RAMLAST ( -- a )
                                   1490 ; RAM dictionary context 
      000736 07 28                 1491         .word LINK 
                           000738  1492         LINK=. 
      000738 07                    1493         .byte 7  
      000739 52 41 4D 4C 41 53 54  1494         .ascii "RAMLAST" 
      000740                       1495 RAMLAST: 
      000740 90 AE 00 22      [ 2] 1496         ldw y,#URLAST 
      000744 1D 00 02         [ 2] 1497         subw x,#CELLL 
      000747 FF               [ 2] 1498         ldw (x),y 
      000748 81               [ 4] 1499         ret 
                                   1500 
                                   1501 ; OFFSET ( -- a )
                                   1502 ; address of system variable OFFSET 
      000749 07 38                 1503         .word LINK 
                           00074B  1504         LINK=.
      00074B 06                    1505         .byte 6
      00074C 4F 46 46 53 45 54     1506         .ascii "OFFSET" 
      000752                       1507 OFFSET: 
      000752 1D 00 02         [ 2] 1508         subw x,#CELLL
      000755 90 AE 00 1E      [ 2] 1509         ldw y,#UOFFSET 
      000759 FF               [ 2] 1510         ldw (x),y 
      00075A 81               [ 4] 1511         ret 
                                   1512 
                                   1513 ; adjust jump address adding OFFSET
                                   1514 ; ADR-ADJ ( a -- a+offset )
      00075B                       1515 ADRADJ: 
      00075B CD 07 52         [ 4] 1516         call OFFSET 
      00075E CD 05 07         [ 4] 1517         call AT 
      000761 CC 07 DD         [ 2] 1518         jp PLUS 
                                   1519 
                                   1520 
                                   1521 ;; Common functions
                                   1522 
                                   1523 ;       ?DUP    ( w -- w w | 0 )
                                   1524 ;       Dup tos if its is not zero.
      000764 07 4B                 1525         .word      LINK
                           000766  1526 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      000766 04                    1527         .byte      4
      000767 3F 44 55 50           1528         .ascii     "?DUP"
      00076B                       1529 QDUP:
      00076B 90 93            [ 1] 1530         LDW Y,X
      00076D 90 FE            [ 2] 1531 	LDW Y,(Y)
      00076F 27 04            [ 1] 1532         JREQ     QDUP1
      000771 1D 00 02         [ 2] 1533 	SUBW X,#2
      000774 FF               [ 2] 1534         LDW (X),Y
      000775 81               [ 4] 1535 QDUP1:  RET
                                   1536 
                                   1537 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1538 ;       Rot 3rd item to top.
      000776 07 66                 1539         .word      LINK
                           000778  1540 LINK = . 
      000778 03                    1541         .byte      3
      000779 52 4F 54              1542         .ascii     "ROT"
      00077C                       1543 ROT:
      00077C 90 93            [ 1] 1544         ldw y,x 
      00077E 90 FE            [ 2] 1545         ldw y,(y)
      000780 90 89            [ 2] 1546         pushw y 
      000782 90 93            [ 1] 1547         ldw y,x 
      000784 90 EE 04         [ 2] 1548         ldw y,(4,y)
      000787 FF               [ 2] 1549         ldw (x),y 
      000788 90 93            [ 1] 1550         ldw y,x 
      00078A 90 EE 02         [ 2] 1551         ldw y,(2,y)
      00078D EF 04            [ 2] 1552         ldw (4,x),y 
      00078F 90 85            [ 2] 1553         popw y 
      000791 EF 02            [ 2] 1554         ldw (2,x),y
      000793 81               [ 4] 1555         ret 
                                   1556 
                                   1557 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1558 ;    <ROT ( n1 n2 n3 -- n3 n1 n2 )
                                   1559 ;    rotate left 3 top elements 
                                   1560 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000794                       1561     _HEADER NROT,4,"<ROT"
      000794 07 78                    1         .word LINK 
                           000796     2         LINK=.
      000796 04                       3         .byte 4  
      000797 3C 52 4F 54              4         .ascii "<ROT"
      00079B                          5         NROT:
      00079B 90 93            [ 1] 1562     LDW Y,X 
      00079D 90 FE            [ 2] 1563     LDW Y,(Y)
      00079F 90 BF 26         [ 2] 1564     LDW YTEMP,Y ; n3  
      0007A2 90 93            [ 1] 1565     LDW Y,X 
      0007A4 90 EE 02         [ 2] 1566     LDW Y,(2,Y) ; Y = n2 
      0007A7 FF               [ 2] 1567     LDW (X),Y   ; TOS = n2 
      0007A8 90 93            [ 1] 1568     LDW Y,X    
      0007AA 90 EE 04         [ 2] 1569     LDW Y,(4,Y) ; Y = n1 
      0007AD EF 02            [ 2] 1570     LDW (2,X),Y ;   = n1 
      0007AF 90 BE 26         [ 2] 1571     LDW Y,YTEMP 
      0007B2 EF 04            [ 2] 1572     LDW (4,X),Y ; = n3 
      0007B4 81               [ 4] 1573     RET 
                                   1574 
                                   1575 ;       2DROP   ( w w -- )
                                   1576 ;       Discard two items on stack.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      0007B5 07 96                 1577         .word      LINK
                           0007B7  1578 LINK = . 
      0007B7 05                    1579         .byte      5
      0007B8 32 44 52 4F 50        1580         .ascii     "2DROP"
      0007BD                       1581 DDROP:
      0007BD 1C 00 04         [ 2] 1582         ADDW X,#4
      0007C0 81               [ 4] 1583         RET
                                   1584 
                                   1585 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1586 ;       Duplicate top two items.
      0007C1 07 B7                 1587         .word      LINK
                           0007C3  1588 LINK = . 
      0007C3 04                    1589         .byte      4
      0007C4 32 44 55 50           1590         .ascii     "2DUP"
      0007C8                       1591 DDUP:
      0007C8 1D 00 04         [ 2] 1592         SUBW X,#4
      0007CB 90 93            [ 1] 1593         LDW Y,X
      0007CD 90 EE 06         [ 2] 1594         LDW Y,(6,Y)
      0007D0 EF 02            [ 2] 1595         LDW (2,X),Y
      0007D2 90 93            [ 1] 1596         LDW Y,X
      0007D4 90 EE 04         [ 2] 1597         LDW Y,(4,Y)
      0007D7 FF               [ 2] 1598         LDW (X),Y
      0007D8 81               [ 4] 1599         RET
                                   1600 
                                   1601 ;       +       ( w w -- sum )
                                   1602 ;       Add top two items.
      0007D9 07 C3                 1603         .word      LINK
                           0007DB  1604 LINK = . 
      0007DB 01                    1605         .byte      1
      0007DC 2B                    1606         .ascii     "+"
      0007DD                       1607 PLUS:
      0007DD 90 93            [ 1] 1608         LDW Y,X
      0007DF 90 FE            [ 2] 1609         LDW Y,(Y)
      0007E1 90 BF 26         [ 2] 1610         LDW YTEMP,Y
      0007E4 1C 00 02         [ 2] 1611         ADDW X,#2
      0007E7 90 93            [ 1] 1612         LDW Y,X
      0007E9 90 FE            [ 2] 1613         LDW Y,(Y)
      0007EB 72 B9 00 26      [ 2] 1614         ADDW Y,YTEMP
      0007EF FF               [ 2] 1615         LDW (X),Y
      0007F0 81               [ 4] 1616         RET
                                   1617 
                                   1618 ;       NOT     ( w -- w )
                                   1619 ;       One's complement of tos.
      0007F1 07 DB                 1620         .word      LINK
                           0007F3  1621 LINK = . 
      0007F3 03                    1622         .byte      3
      0007F4 4E 4F 54              1623         .ascii     "NOT"
      0007F7                       1624 INVER:
      0007F7 90 93            [ 1] 1625         LDW Y,X
      0007F9 90 FE            [ 2] 1626         LDW Y,(Y)
      0007FB 90 53            [ 2] 1627         CPLW Y
      0007FD FF               [ 2] 1628         LDW (X),Y
      0007FE 81               [ 4] 1629         RET
                                   1630 
                                   1631 ;       NEGATE  ( n -- -n )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                   1632 ;       Two's complement of tos.
      0007FF 07 F3                 1633         .word      LINK
                           000801  1634 LINK = . 
      000801 06                    1635         .byte      6
      000802 4E 45 47 41 54 45     1636         .ascii     "NEGATE"
      000808                       1637 NEGAT:
      000808 90 93            [ 1] 1638         LDW Y,X
      00080A 90 FE            [ 2] 1639         LDW Y,(Y)
      00080C 90 50            [ 2] 1640         NEGW Y
      00080E FF               [ 2] 1641         LDW (X),Y
      00080F 81               [ 4] 1642         RET
                                   1643 
                                   1644 ;       DNEGATE ( d -- -d )
                                   1645 ;       Two's complement of top double.
      000810 08 01                 1646         .word      LINK
                           000812  1647 LINK = . 
      000812 07                    1648         .byte      7
      000813 44 4E 45 47 41 54 45  1649         .ascii     "DNEGATE"
      00081A                       1650 DNEGA:
      00081A 90 93            [ 1] 1651         LDW Y,X
      00081C 90 FE            [ 2] 1652 	LDW Y,(Y)
      00081E 90 53            [ 2] 1653         CPLW Y     
      000820 90 BF 26         [ 2] 1654 	LDW YTEMP,Y
      000823 90 93            [ 1] 1655         LDW Y,X
      000825 90 EE 02         [ 2] 1656         LDW Y,(2,Y)
      000828 90 53            [ 2] 1657         CPLW Y
      00082A 72 A9 00 01      [ 2] 1658         addw y,#1
      00082E EF 02            [ 2] 1659         LDW (2,X),Y
      000830 90 BE 26         [ 2] 1660         LDW Y,YTEMP
      000833 24 02            [ 1] 1661         JRNC DN1 
      000835 90 5C            [ 1] 1662         INCW Y
      000837 FF               [ 2] 1663 DN1:    LDW (X),Y
      000838 81               [ 4] 1664         RET
                                   1665 
                                   1666 
                                   1667 ;       S>D ( n -- d )
                                   1668 ; convert single integer to double 
      000839 08 12                 1669         .word LINK 
                           00083B  1670         LINK=. 
      00083B 03                    1671         .byte 3 
      00083C 53 3E 44              1672         .ascii "S>D"
      00083F                       1673 STOD: 
      00083F 1D 00 02         [ 2] 1674         subw x,#CELLL 
      000842 90 5F            [ 1] 1675         clrw y 
      000844 FF               [ 2] 1676         ldw (x),y 
      000845 90 93            [ 1] 1677         ldw y,x 
      000847 90 EE 02         [ 2] 1678         ldw y,(2,y)
      00084A 2A 05            [ 1] 1679         jrpl 1$ 
      00084C 90 AE FF FF      [ 2] 1680         ldw y,#-1
      000850 FF               [ 2] 1681         ldw (x),y 
      000851 81               [ 4] 1682 1$:     ret 
                                   1683 
                                   1684 
                                   1685 
                                   1686 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                                   1687 ;       -       ( n1 n2 -- n1-n2 )
                                   1688 ;       Subtraction.
      000852 08 3B                 1689         .word      LINK
                           000854  1690 LINK = . 
      000854 01                    1691         .byte      1
      000855 2D                    1692         .ascii     "-"
      000856                       1693 SUBB:
      000856 90 93            [ 1] 1694         LDW Y,X
      000858 90 FE            [ 2] 1695         LDW Y,(Y)
      00085A 90 BF 26         [ 2] 1696         LDW YTEMP,Y
      00085D 1C 00 02         [ 2] 1697         ADDW X,#2
      000860 90 93            [ 1] 1698         LDW Y,X
      000862 90 FE            [ 2] 1699         LDW Y,(Y)
      000864 72 B2 00 26      [ 2] 1700         SUBW Y,YTEMP
      000868 FF               [ 2] 1701         LDW (X),Y
      000869 81               [ 4] 1702         RET
                                   1703 
                                   1704 ;       ABS     ( n -- n )
                                   1705 ;       Return  absolute value of n.
      00086A 08 54                 1706         .word      LINK
                           00086C  1707 LINK = . 
      00086C 03                    1708         .byte      3
      00086D 41 42 53              1709         .ascii     "ABS"
      000870                       1710 ABSS:
      000870 90 93            [ 1] 1711         LDW Y,X
      000872 90 FE            [ 2] 1712 	LDW Y,(Y)
      000874 2A 03            [ 1] 1713         JRPL     AB1     ;negate:
      000876 90 50            [ 2] 1714         NEGW     Y     ;else negate hi byte
      000878 FF               [ 2] 1715         LDW (X),Y
      000879 81               [ 4] 1716 AB1:    RET
                                   1717 
                                   1718 ;       =       ( w w -- t )
                                   1719 ;       Return true if top two are =al.
      00087A 08 6C                 1720         .word      LINK
                           00087C  1721 LINK = . 
      00087C 01                    1722         .byte      1
      00087D 3D                    1723         .ascii     "="
      00087E                       1724 EQUAL:
      00087E A6 FF            [ 1] 1725         LD A,#0xFF  ;true
      000880 90 93            [ 1] 1726         LDW Y,X    ;D = n2
      000882 90 FE            [ 2] 1727         LDW Y,(Y)
      000884 90 BF 26         [ 2] 1728         LDW YTEMP,Y
      000887 1C 00 02         [ 2] 1729         ADDW X,#2
      00088A 90 93            [ 1] 1730         LDW Y,X
      00088C 90 FE            [ 2] 1731         LDW Y,(Y)
      00088E 90 B3 26         [ 2] 1732         CPW Y,YTEMP     ;if n2 <> n1
      000891 27 01            [ 1] 1733         JREQ     EQ1
      000893 4F               [ 1] 1734         CLR A
      000894 F7               [ 1] 1735 EQ1:    LD (X),A
      000895 E7 01            [ 1] 1736         LD (1,X),A
      000897 81               [ 4] 1737 	RET     
                                   1738 
                                   1739 ;       U<      ( u u -- t )
                                   1740 ;       Unsigned compare of top two items.
      000898 08 7C                 1741         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                           00089A  1742 LINK = . 
      00089A 02                    1743         .byte      2
      00089B 55 3C                 1744         .ascii     "U<"
      00089D                       1745 ULESS:
      00089D A6 FF            [ 1] 1746         LD A,#0xFF  ;true
      00089F 90 93            [ 1] 1747         LDW Y,X    ;D = n2
      0008A1 90 FE            [ 2] 1748         LDW Y,(Y)
      0008A3 90 BF 26         [ 2] 1749         LDW YTEMP,Y
      0008A6 1C 00 02         [ 2] 1750         ADDW X,#2
      0008A9 90 93            [ 1] 1751         LDW Y,X
      0008AB 90 FE            [ 2] 1752         LDW Y,(Y)
      0008AD 90 B3 26         [ 2] 1753         CPW Y,YTEMP     ;if n2 <> n1
      0008B0 25 01            [ 1] 1754         JRULT     ULES1
      0008B2 4F               [ 1] 1755         CLR A
      0008B3 F7               [ 1] 1756 ULES1:  LD (X),A
      0008B4 E7 01            [ 1] 1757         LD (1,X),A
      0008B6 81               [ 4] 1758 	RET     
                                   1759 
                                   1760 ;       <       ( n1 n2 -- t )
                                   1761 ;       Signed compare of top two items.
      0008B7 08 9A                 1762         .word      LINK
                           0008B9  1763 LINK = . 
      0008B9 01                    1764         .byte      1
      0008BA 3C                    1765         .ascii     "<"
      0008BB                       1766 LESS:
      0008BB A6 FF            [ 1] 1767         LD A,#0xFF  ;true
      0008BD 90 93            [ 1] 1768         LDW Y,X    ;D = n2
      0008BF 90 FE            [ 2] 1769         LDW Y,(Y)
      0008C1 90 BF 26         [ 2] 1770         LDW YTEMP,Y
      0008C4 1C 00 02         [ 2] 1771         ADDW X,#2
      0008C7 90 93            [ 1] 1772         LDW Y,X
      0008C9 90 FE            [ 2] 1773         LDW Y,(Y)
      0008CB 90 B3 26         [ 2] 1774         CPW Y,YTEMP     ;if n2 <> n1
      0008CE 2F 01            [ 1] 1775         JRSLT     LT1
      0008D0 4F               [ 1] 1776         CLR A
      0008D1 F7               [ 1] 1777 LT1:    LD (X),A
      0008D2 E7 01            [ 1] 1778         LD (1,X),A
      0008D4 81               [ 4] 1779 	RET     
                                   1780 
                                   1781 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1782 ;   U> ( u1 u2 -- f )
                                   1783 ;   f = true if u1>u2 
                                   1784 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008D5                       1785     _HEADER UGREAT,2,"U>"
      0008D5 08 B9                    1         .word LINK 
                           0008D7     2         LINK=.
      0008D7 02                       3         .byte 2  
      0008D8 55 3E                    4         .ascii "U>"
      0008DA                          5         UGREAT:
      0008DA A6 00            [ 1] 1786     LD A,#0 
      0008DC 90 93            [ 1] 1787     LDW Y,X 
      0008DE 90 FE            [ 2] 1788     LDW Y,(Y)
      0008E0 90 BF 26         [ 2] 1789     LDW YTEMP,Y 
      0008E3 1C 00 02         [ 2] 1790     ADDW X,#2 
      0008E6 90 93            [ 1] 1791     LDW Y,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      0008E8 90 FE            [ 2] 1792     LDW Y,(Y)
      0008EA 90 B3 26         [ 2] 1793     CPW Y,YTEMP 
      0008ED 23 02            [ 2] 1794     JRULE UGREAT1 
      0008EF A6 FF            [ 1] 1795     LD A,#0xff  
      0008F1                       1796 UGREAT1:
      0008F1 F7               [ 1] 1797     LD (X),A 
      0008F2 E7 01            [ 1] 1798     LD (1,X),A 
      0008F4 81               [ 4] 1799     RET 
                                   1800 
                                   1801 
                                   1802 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1803 ;       >   (n1 n2 -- f )
                                   1804 ;  signed compare n1 n2 
                                   1805 ;  true if n1 > n2 
                                   1806 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008F5 08 D7                 1807         .word   LINK 
                           0008F7  1808         LINK = . 
      0008F7 01                    1809         .byte 1
      0008F8 3E                    1810         .ascii ">"
      0008F9                       1811 GREAT:
      0008F9 A6 FF            [ 1] 1812         LD A,#0xFF ;
      0008FB 90 93            [ 1] 1813         LDW Y,X 
      0008FD 90 FE            [ 2] 1814         LDW Y,(Y)
      0008FF 90 BF 26         [ 2] 1815         LDW YTEMP,Y 
      000902 1C 00 02         [ 2] 1816         ADDW X,#2 
      000905 90 93            [ 1] 1817         LDW Y,X 
      000907 90 FE            [ 2] 1818         LDW Y,(Y)
      000909 90 B3 26         [ 2] 1819         CPW  Y,YTEMP 
      00090C 2C 01            [ 1] 1820         JRSGT GREAT1 
      00090E 4F               [ 1] 1821         CLR  A
      00090F                       1822 GREAT1:
      00090F F7               [ 1] 1823         LD (X),A 
      000910 E7 01            [ 1] 1824         LD (1,X),A 
      000912 81               [ 4] 1825         RET 
                                   1826 
                                   1827 
                                   1828 ;       MAX     ( n n -- n )
                                   1829 ;       Return greater of two top items.
      000913 08 F7                 1830         .word      LINK
                           000915  1831 LINK = . 
      000915 03                    1832         .byte      3
      000916 4D 41 58              1833         .ascii     "MAX"
      000919                       1834 MAX:
      000919 90 93            [ 1] 1835         LDW Y,X    ;D = n2
      00091B 90 EE 02         [ 2] 1836         LDW Y,(2,Y)
      00091E 90 BF 26         [ 2] 1837         LDW YTEMP,Y
      000921 90 93            [ 1] 1838         LDW Y,X
      000923 90 FE            [ 2] 1839         LDW Y,(Y)
      000925 90 B3 26         [ 2] 1840         CPW Y,YTEMP     ;if n2 <> n1
      000928 2F 02            [ 1] 1841         JRSLT     MAX1
      00092A EF 02            [ 2] 1842         LDW (2,X),Y
      00092C 1C 00 02         [ 2] 1843 MAX1:   ADDW X,#2
      00092F 81               [ 4] 1844 	RET     
                                   1845 
                                   1846 ;       MIN     ( n n -- n )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                   1847 ;       Return smaller of top two items.
      000930 09 15                 1848         .word      LINK
                           000932  1849 LINK = . 
      000932 03                    1850         .byte      3
      000933 4D 49 4E              1851         .ascii     "MIN"
      000936                       1852 MIN:
      000936 90 93            [ 1] 1853         LDW Y,X    ;D = n2
      000938 90 EE 02         [ 2] 1854         LDW Y,(2,Y)
      00093B 90 BF 26         [ 2] 1855         LDW YTEMP,Y
      00093E 90 93            [ 1] 1856         LDW Y,X
      000940 90 FE            [ 2] 1857         LDW Y,(Y)
      000942 90 B3 26         [ 2] 1858         CPW Y,YTEMP     ;if n2 <> n1
      000945 2C 02            [ 1] 1859         JRSGT     MIN1
      000947 EF 02            [ 2] 1860         LDW (2,X),Y
      000949 1C 00 02         [ 2] 1861 MIN1:	ADDW X,#2
      00094C 81               [ 4] 1862 	RET     
                                   1863 
                                   1864 ;       WITHIN  ( u ul uh -- t )
                                   1865 ;       Return true if u is within
                                   1866 ;       range of ul and uh. ( ul <= u < uh )
      00094D 09 32                 1867         .word      LINK
                           00094F  1868 LINK = . 
      00094F 06                    1869         .byte      6
      000950 57 49 54 48 49 4E     1870         .ascii     "WITHIN"
      000956                       1871 WITHI:
      000956 CD 05 D8         [ 4] 1872         CALL     OVER
      000959 CD 08 56         [ 4] 1873         CALL     SUBB
      00095C CD 05 77         [ 4] 1874         CALL     TOR
      00095F CD 08 56         [ 4] 1875         CALL     SUBB
      000962 CD 05 58         [ 4] 1876         CALL     RFROM
      000965 CC 08 9D         [ 2] 1877         JP     ULESS
                                   1878 
                                   1879 ;; Divide
                                   1880 
                                   1881 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1882 ;       Unsigned divide of a double by a
                                   1883 ;       single. Return mod and quotient.
      000968 09 4F                 1884         .word      LINK
                           00096A  1885 LINK = . 
      00096A 06                    1886         .byte      6
      00096B 55 4D 2F 4D 4F 44     1887         .ascii     "UM/MOD"
                                   1888 ; 2021-02-22
                                   1889 ; changed algortihm for Jeeek one 
                                   1890 ; ref: https://github.com/TG9541/stm8ef/pull/406        
      000971                       1891 UMMOD:
      000971 90 93            [ 1] 1892         LDW     Y,X             ; stack pointer to Y
      000973 FE               [ 2] 1893         LDW     X,(X)           ; un
      000974 BF 26            [ 2] 1894         LDW     YTEMP,X         ; save un
      000976 93               [ 1] 1895         LDW     X,Y
      000977 5C               [ 1] 1896         INCW    X               ; drop un
      000978 5C               [ 1] 1897         INCW    X
      000979 89               [ 2] 1898         PUSHW   X               ; save stack pointer
      00097A FE               [ 2] 1899         LDW     X,(X)           ; X=udh
      00097B 90 EE 04         [ 2] 1900         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      00097E B3 26            [ 2] 1901         CPW     X,YTEMP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000980 25 0B            [ 1] 1902         JRULT   MMSM1           ; X is still on the R-stack
      000982 85               [ 2] 1903         POPW    X               ; restore stack pointer
      000983 90 AE FF FF      [ 2] 1904         LDW     Y,#0xFFFF       ; overflow result:
      000987 FF               [ 2] 1905         LDW     (X),Y           ; quotient max. 16 bit value
      000988 90 5F            [ 1] 1906         CLRW    Y
      00098A EF 02            [ 2] 1907         LDW     (2,X),Y         ; remainder 0
      00098C 81               [ 4] 1908         RET
      00098D                       1909 MMSM1:
      00098D A6 10            [ 1] 1910         LD      A,#16           ; loop count
      00098F 90 58            [ 2] 1911         SLLW    Y               ; udl shift udl into udh
      000991                       1912 MMSM3:
      000991 59               [ 2] 1913         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      000992 25 04            [ 1] 1914         JRC     MMSMa           ; if carry out of rotate
      000994 B3 26            [ 2] 1915         CPW     X,YTEMP         ; compare udh to un
      000996 25 05            [ 1] 1916         JRULT   MMSM4           ; can't subtract
      000998                       1917 MMSMa:
      000998 72 B0 00 26      [ 2] 1918         SUBW    X,YTEMP         ; can subtract
      00099C 98               [ 1] 1919         RCF
      00099D                       1920 MMSM4:
      00099D 8C               [ 1] 1921         CCF                     ; quotient bit
      00099E 90 59            [ 2] 1922         RLCW    Y               ; rotate into quotient, rotate out udl
      0009A0 4A               [ 1] 1923         DEC     A               ; repeat
      0009A1 26 EE            [ 1] 1924         JRNE    MMSM3           ; if A == 0
      0009A3                       1925 MMSMb:
      0009A3 BF 26            [ 2] 1926         LDW     YTEMP,X         ; done, save remainder
      0009A5 85               [ 2] 1927         POPW    X               ; restore stack pointer
      0009A6 FF               [ 2] 1928         LDW     (X),Y           ; save quotient
      0009A7 90 BE 26         [ 2] 1929         LDW     Y,YTEMP         ; remainder onto stack
      0009AA EF 02            [ 2] 1930         LDW     (2,X),Y
      0009AC 81               [ 4] 1931         RET
                                   1932 
                                   1933 
                                   1934 ;----------------------------------------------	
                                   1935 ;       M/MOD   ( d n -- r q )
                                   1936 ;       Signed floored divide of double by
                                   1937 ;       single. Return mod and quotient.
                                   1938 ;----------------------------------------------	
      0009AD 09 6A                 1939         .word      LINK
                           0009AF  1940 LINK = . 
      0009AF 05                    1941         .byte      5
      0009B0 4D 2F 4D 4F 44        1942         .ascii     "M/MOD"
      0009B5                       1943 MSMOD:  
      0009B5 CD 05 AE         [ 4] 1944         CALL	DUPP
      0009B8 CD 05 E7         [ 4] 1945         CALL	ZLESS
      0009BB CD 05 AE         [ 4] 1946         CALL	DUPP
      0009BE CD 05 77         [ 4] 1947         CALL	TOR
      0009C1 CD 04 A4         [ 4] 1948         CALL	QBRAN
      0009C4 09 D2                 1949         .word	MMOD1
      0009C6 CD 08 08         [ 4] 1950         CALL	NEGAT
      0009C9 CD 05 77         [ 4] 1951         CALL	TOR
      0009CC CD 08 1A         [ 4] 1952         CALL	DNEGA
      0009CF CD 05 58         [ 4] 1953         CALL	RFROM
      0009D2 CD 05 77         [ 4] 1954 MMOD1:	CALL	TOR
      0009D5 CD 05 AE         [ 4] 1955         CALL	DUPP
      0009D8 CD 05 E7         [ 4] 1956         CALL	ZLESS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      0009DB CD 04 A4         [ 4] 1957         CALL	QBRAN
      0009DE 09 E6                 1958         .word	MMOD2
      0009E0 CD 05 6B         [ 4] 1959         CALL	RAT
      0009E3 CD 07 DD         [ 4] 1960         CALL	PLUS
      0009E6 CD 05 58         [ 4] 1961 MMOD2:	CALL	RFROM
      0009E9 CD 09 71         [ 4] 1962         CALL	UMMOD
      0009EC CD 05 58         [ 4] 1963         CALL	RFROM
      0009EF CD 04 A4         [ 4] 1964         CALL	QBRAN
      0009F2 09 FD                 1965         .word	MMOD3
      0009F4 CD 05 BE         [ 4] 1966         CALL	SWAPP
      0009F7 CD 08 08         [ 4] 1967         CALL	NEGAT
      0009FA CD 05 BE         [ 4] 1968         CALL	SWAPP
      0009FD 81               [ 4] 1969 MMOD3:	RET
                                   1970 
                                   1971 ;       /MOD    ( n n -- r q )
                                   1972 ;       Signed divide. Return mod and quotient.
      0009FE 09 AF                 1973         .word      LINK
                           000A00  1974 LINK = . 
      000A00 04                    1975         .byte      4
      000A01 2F 4D 4F 44           1976         .ascii     "/MOD"
      000A05                       1977 SLMOD:
      000A05 CD 05 D8         [ 4] 1978         CALL	OVER
      000A08 CD 05 E7         [ 4] 1979         CALL	ZLESS
      000A0B CD 05 BE         [ 4] 1980         CALL	SWAPP
      000A0E CC 09 B5         [ 2] 1981         JP	MSMOD
                                   1982 
                                   1983 ;       MOD     ( n n -- r )
                                   1984 ;       Signed divide. Return mod only.
      000A11 0A 00                 1985         .word      LINK
                           000A13  1986 LINK = . 
      000A13 03                    1987         .byte      3
      000A14 4D 4F 44              1988         .ascii     "MOD"
      000A17                       1989 MODD:
      000A17 CD 0A 05         [ 4] 1990 	CALL	SLMOD
      000A1A CC 05 A4         [ 2] 1991 	JP	DROP
                                   1992 
                                   1993 ;       /       ( n n -- q )
                                   1994 ;       Signed divide. Return quotient only.
      000A1D 0A 13                 1995         .word      LINK
                           000A1F  1996 LINK = . 
      000A1F 01                    1997         .byte      1
      000A20 2F                    1998         .ascii     "/"
      000A21                       1999 SLASH:
      000A21 CD 0A 05         [ 4] 2000         CALL	SLMOD
      000A24 CD 05 BE         [ 4] 2001         CALL	SWAPP
      000A27 CC 05 A4         [ 2] 2002         JP	DROP
                                   2003 
                                   2004 ;; Multiply
                                   2005 
                                   2006 ;       UM*     ( u u -- ud )
                                   2007 ;       Unsigned multiply. Return double product.
      000A2A 0A 1F                 2008         .word      LINK
                           000A2C  2009 LINK = . 
      000A2C 03                    2010         .byte      3
      000A2D 55 4D 2A              2011         .ascii     "UM*"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000A30                       2012 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
                                   2013 ; take advantage of SP addressing modes
                                   2014 ; these PRODx in RAM are not required
                                   2015 ; the product is kept on stack as local variable 
                                   2016         ;; bytes offset on data stack 
                           000002  2017         da=2 
                           000003  2018         db=3 
                           000000  2019         dc=0 
                           000001  2020         dd=1 
                                   2021         ;; product bytes offset on return stack 
                           000001  2022         UD1=1  ; ud bits 31..24
                           000002  2023         UD2=2  ; ud bits 23..16
                           000003  2024         UD3=3  ; ud bits 15..8 
                           000004  2025         UD4=4  ; ud bits 7..0 
                                   2026         ;; local variable for product set to zero   
      000A30 90 5F            [ 1] 2027         clrw y 
      000A32 90 89            [ 2] 2028         pushw y  ; bits 15..0
      000A34 90 89            [ 2] 2029         pushw y  ; bits 31..16 
      000A36 E6 03            [ 1] 2030         ld a,(db,x) ; b 
      000A38 90 97            [ 1] 2031         ld yl,a 
      000A3A E6 01            [ 1] 2032         ld a,(dd,x)   ; d
      000A3C 90 42            [ 4] 2033         mul y,a    ; b*d  
      000A3E 17 03            [ 2] 2034         ldw (UD3,sp),y ; lowest weight product 
      000A40 E6 03            [ 1] 2035         ld a,(db,x)
      000A42 90 97            [ 1] 2036         ld yl,a 
      000A44 E6 00            [ 1] 2037         ld a,(dc,x)
      000A46 90 42            [ 4] 2038         mul y,a  ; b*c 
                                   2039         ;;; do the partial sum 
      000A48 72 F9 02         [ 2] 2040         addw y,(UD2,sp)
      000A4B 4F               [ 1] 2041         clr a 
      000A4C 49               [ 1] 2042         rlc a
      000A4D 6B 01            [ 1] 2043         ld (UD1,sp),a 
      000A4F 17 02            [ 2] 2044         ldw (UD2,sp),y 
      000A51 E6 02            [ 1] 2045         ld a,(da,x)
      000A53 90 97            [ 1] 2046         ld yl,a 
      000A55 E6 01            [ 1] 2047         ld a,(dd,x)
      000A57 90 42            [ 4] 2048         mul y,a   ; a*d 
                                   2049         ;; do partial sum 
      000A59 72 F9 02         [ 2] 2050         addw y,(UD2,sp)
      000A5C 4F               [ 1] 2051         clr a 
      000A5D 19 01            [ 1] 2052         adc a,(UD1,sp)
      000A5F 6B 01            [ 1] 2053         ld (UD1,sp),a  
      000A61 17 02            [ 2] 2054         ldw (UD2,sp),y 
      000A63 E6 02            [ 1] 2055         ld a,(da,x)
      000A65 90 97            [ 1] 2056         ld yl,a 
      000A67 E6 00            [ 1] 2057         ld a,(dc,x)
      000A69 90 42            [ 4] 2058         mul y,a  ;  a*c highest weight product 
                                   2059         ;;; do partial sum 
      000A6B 72 F9 01         [ 2] 2060         addw y,(UD1,sp)
      000A6E FF               [ 2] 2061         ldw (x),y  ; udh 
      000A6F 16 03            [ 2] 2062         ldw y,(UD3,sp)
      000A71 EF 02            [ 2] 2063         ldw (2,x),y  ; udl  
      000A73 5B 04            [ 2] 2064         addw sp,#4 ; drop local variable 
      000A75 81               [ 4] 2065         ret  
                                   2066 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                   2067 
                                   2068 ;       *       ( n n -- n )
                                   2069 ;       Signed multiply. Return single product.
      000A76 0A 2C                 2070         .word      LINK
                           000A78  2071 LINK = . 
      000A78 01                    2072         .byte      1
      000A79 2A                    2073         .ascii     "*"
      000A7A                       2074 STAR:
      000A7A CD 0A 30         [ 4] 2075 	CALL	UMSTA
      000A7D CC 05 A4         [ 2] 2076 	JP	DROP
                                   2077 
                                   2078 ;       M*      ( n n -- d )
                                   2079 ;       Signed multiply. Return double product.
      000A80 0A 78                 2080         .word      LINK
                           000A82  2081 LINK = . 
      000A82 02                    2082         .byte      2
      000A83 4D 2A                 2083         .ascii     "M*"
      000A85                       2084 MSTAR:      
      000A85 CD 07 C8         [ 4] 2085         CALL	DDUP
      000A88 CD 06 36         [ 4] 2086         CALL	XORR
      000A8B CD 05 E7         [ 4] 2087         CALL	ZLESS
      000A8E CD 05 77         [ 4] 2088         CALL	TOR
      000A91 CD 08 70         [ 4] 2089         CALL	ABSS
      000A94 CD 05 BE         [ 4] 2090         CALL	SWAPP
      000A97 CD 08 70         [ 4] 2091         CALL	ABSS
      000A9A CD 0A 30         [ 4] 2092         CALL	UMSTA
      000A9D CD 05 58         [ 4] 2093         CALL	RFROM
      000AA0 CD 04 A4         [ 4] 2094         CALL	QBRAN
      000AA3 0A A8                 2095         .word	MSTA1
      000AA5 CD 08 1A         [ 4] 2096         CALL	DNEGA
      000AA8 81               [ 4] 2097 MSTA1:	RET
                                   2098 
                                   2099 ;       */MOD   ( n1 n2 n3 -- r q )
                                   2100 ;       Multiply n1 and n2, then divide
                                   2101 ;       by n3. Return mod and quotient.
      000AA9 0A 82                 2102         .word      LINK
                           000AAB  2103 LINK = . 
      000AAB 05                    2104         .byte      5
      000AAC 2A 2F 4D 4F 44        2105         .ascii     "*/MOD"
      000AB1                       2106 SSMOD:
      000AB1 CD 05 77         [ 4] 2107         CALL     TOR
      000AB4 CD 0A 85         [ 4] 2108         CALL     MSTAR
      000AB7 CD 05 58         [ 4] 2109         CALL     RFROM
      000ABA CC 09 B5         [ 2] 2110         JP     MSMOD
                                   2111 
                                   2112 ;       */      ( n1 n2 n3 -- q )
                                   2113 ;       Multiply n1 by n2, then divide
                                   2114 ;       by n3. Return quotient only.
      000ABD 0A AB                 2115         .word      LINK
                           000ABF  2116 LINK = . 
      000ABF 02                    2117         .byte      2
      000AC0 2A 2F                 2118         .ascii     "*/"
      000AC2                       2119 STASL:
      000AC2 CD 0A B1         [ 4] 2120         CALL	SSMOD
      000AC5 CD 05 BE         [ 4] 2121         CALL	SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000AC8 CC 05 A4         [ 2] 2122         JP	DROP
                                   2123 
                                   2124 ;; Miscellaneous
                                   2125 
                                   2126 ;       CELL+   ( a -- a )
                                   2127 ;       Add cell size in byte to address.
      000ACB 0A BF                 2128         .word      LINK
                           000ACD  2129 LINK = . 
      000ACD 02                    2130         .byte       2
      000ACE 32 2B                 2131         .ascii     "2+"
      000AD0                       2132 CELLP:
      000AD0 90 93            [ 1] 2133         LDW Y,X
      000AD2 90 FE            [ 2] 2134 	LDW Y,(Y)
      000AD4 72 A9 00 02      [ 2] 2135         ADDW Y,#CELLL 
      000AD8 FF               [ 2] 2136         LDW (X),Y
      000AD9 81               [ 4] 2137         RET
                                   2138 
                                   2139 ;       CELL-   ( a -- a )
                                   2140 ;       Subtract 2 from address.
      000ADA 0A CD                 2141         .word      LINK
                           000ADC  2142 LINK = . 
      000ADC 02                    2143         .byte       2
      000ADD 32 2D                 2144         .ascii     "2-"
      000ADF                       2145 CELLM:
      000ADF 90 93            [ 1] 2146         LDW Y,X
      000AE1 90 FE            [ 2] 2147 	LDW Y,(Y)
      000AE3 72 A2 00 02      [ 2] 2148         SUBW Y,#CELLL
      000AE7 FF               [ 2] 2149         LDW (X),Y
      000AE8 81               [ 4] 2150         RET
                                   2151 
                                   2152 ;       CELLS   ( n -- n )
                                   2153 ;       Multiply tos by 2.
      000AE9 0A DC                 2154         .word      LINK
                           000AEB  2155 LINK = . 
      000AEB 02                    2156         .byte       2
      000AEC 32 2A                 2157         .ascii     "2*"
      000AEE                       2158 CELLS:
      000AEE 90 93            [ 1] 2159         LDW Y,X
      000AF0 90 FE            [ 2] 2160 	LDW Y,(Y)
      000AF2 90 58            [ 2] 2161         SLAW Y
      000AF4 FF               [ 2] 2162         LDW (X),Y
      000AF5 81               [ 4] 2163         RET
                                   2164 
                                   2165 ;       1+      ( a -- a )
                                   2166 ;       Add cell size in byte to address.
      000AF6 0A EB                 2167         .word      LINK
                           000AF8  2168 LINK = . 
      000AF8 02                    2169         .byte      2
      000AF9 31 2B                 2170         .ascii     "1+"
      000AFB                       2171 ONEP:
      000AFB 90 93            [ 1] 2172         LDW Y,X
      000AFD 90 FE            [ 2] 2173 	LDW Y,(Y)
      000AFF 90 5C            [ 1] 2174         INCW Y
      000B01 FF               [ 2] 2175         LDW (X),Y
      000B02 81               [ 4] 2176         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                   2177 
                                   2178 ;       1-      ( a -- a )
                                   2179 ;       Subtract 2 from address.
      000B03 0A F8                 2180         .word      LINK
                           000B05  2181 LINK = . 
      000B05 02                    2182         .byte      2
      000B06 31 2D                 2183         .ascii     "1-"
      000B08                       2184 ONEM:
      000B08 90 93            [ 1] 2185         LDW Y,X
      000B0A 90 FE            [ 2] 2186 	LDW Y,(Y)
      000B0C 90 5A            [ 2] 2187         DECW Y
      000B0E FF               [ 2] 2188         LDW (X),Y
      000B0F 81               [ 4] 2189         RET
                                   2190 
                                   2191 ;  shift left n times 
                                   2192 ; LSHIFT ( n1 n2 -- n1<<n2 )
      000B10 0B 05                 2193         .word LINK 
                           000B12  2194         LINK=.
      000B12 06                    2195         .byte 6 
      000B13 4C 53 48 49 46 54     2196         .ascii "LSHIFT"
      000B19                       2197 LSHIFT:
      000B19 E6 01            [ 1] 2198         ld a,(1,x)
      000B1B 1C 00 02         [ 2] 2199         addw x,#CELLL 
      000B1E 90 93            [ 1] 2200         ldw y,x 
      000B20 90 FE            [ 2] 2201         ldw y,(y)
      000B22                       2202 LSHIFT1:
      000B22 4D               [ 1] 2203         tnz a 
      000B23 27 05            [ 1] 2204         jreq LSHIFT4 
      000B25 90 58            [ 2] 2205         sllw y 
      000B27 4A               [ 1] 2206         dec a 
      000B28 20 F8            [ 2] 2207         jra LSHIFT1 
      000B2A                       2208 LSHIFT4:
      000B2A FF               [ 2] 2209         ldw (x),y 
      000B2B 81               [ 4] 2210         ret 
                                   2211 
                                   2212 ; shift right n times                 
                                   2213 ; RSHIFT (n1 n2 -- n1>>n2 )
      000B2C 0B 12                 2214         .word LINK 
                           000B2E  2215         LINK=.
      000B2E 06                    2216         .byte 6
      000B2F 52 53 48 49 46 54     2217         .ascii "RSHIFT"
      000B35                       2218 RSHIFT:
      000B35 E6 01            [ 1] 2219         ld a,(1,x)
      000B37 1C 00 02         [ 2] 2220         addw x,#CELLL 
      000B3A 90 93            [ 1] 2221         ldw y,x 
      000B3C 90 FE            [ 2] 2222         ldw y,(y)
      000B3E                       2223 RSHIFT1:
      000B3E 4D               [ 1] 2224         tnz a 
      000B3F 27 05            [ 1] 2225         jreq RSHIFT4 
      000B41 90 54            [ 2] 2226         srlw y 
      000B43 4A               [ 1] 2227         dec a 
      000B44 20 F8            [ 2] 2228         jra RSHIFT1 
      000B46                       2229 RSHIFT4:
      000B46 FF               [ 2] 2230         ldw (x),y 
      000B47 81               [ 4] 2231         ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                   2232 
                                   2233 
                                   2234 ;       2/      ( n -- n )
                                   2235 ;       divide  tos by 2.
      000B48 0B 2E                 2236         .word      LINK
                           000B4A  2237 LINK = . 
      000B4A 02                    2238         .byte      2
      000B4B 32 2F                 2239         .ascii     "2/"
      000B4D                       2240 TWOSL:
      000B4D 90 93            [ 1] 2241         LDW Y,X
      000B4F 90 FE            [ 2] 2242 	LDW Y,(Y)
      000B51 90 57            [ 2] 2243         SRAW Y
      000B53 FF               [ 2] 2244         LDW (X),Y
      000B54 81               [ 4] 2245         RET
                                   2246 
                                   2247 ;       BL      ( -- 32 )
                                   2248 ;       Return 32,  blank character.
      000B55 0B 4A                 2249         .word      LINK
                           000B57  2250 LINK = . 
      000B57 02                    2251         .byte      2
      000B58 42 4C                 2252         .ascii     "BL"
      000B5A                       2253 BLANK:
      000B5A 1D 00 02         [ 2] 2254         SUBW X,#2
      000B5D 90 AE 00 20      [ 2] 2255 	LDW Y,#32
      000B61 FF               [ 2] 2256         LDW (X),Y
      000B62 81               [ 4] 2257         RET
                                   2258 
                                   2259 ;         0     ( -- 0)
                                   2260 ;         Return 0.
      000B63 0B 57                 2261         .word      LINK
                           000B65  2262 LINK = . 
      000B65 01                    2263         .byte       1
      000B66 30                    2264         .ascii     "0"
      000B67                       2265 ZERO:
      000B67 1D 00 02         [ 2] 2266         SUBW X,#2
      000B6A 90 5F            [ 1] 2267 	CLRW Y
      000B6C FF               [ 2] 2268         LDW (X),Y
      000B6D 81               [ 4] 2269         RET
                                   2270 
                                   2271 ;         1     ( -- 1)
                                   2272 ;         Return 1.
      000B6E 0B 65                 2273         .word      LINK
                           000B70  2274 LINK = . 
      000B70 01                    2275         .byte       1
      000B71 31                    2276         .ascii     "1"
      000B72                       2277 ONE:
      000B72 1D 00 02         [ 2] 2278         SUBW X,#2
      000B75 90 AE 00 01      [ 2] 2279 	LDW Y,#1
      000B79 FF               [ 2] 2280         LDW (X),Y
      000B7A 81               [ 4] 2281         RET
                                   2282 
                                   2283 ;         -1    ( -- -1)
                                   2284 ;         Return 32,  blank character.
      000B7B 0B 70                 2285         .word      LINK
                           000B7D  2286 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000B7D 02                    2287         .byte       2
      000B7E 2D 31                 2288         .ascii     "-1"
      000B80                       2289 MONE:
      000B80 1D 00 02         [ 2] 2290         SUBW X,#2
      000B83 90 AE FF FF      [ 2] 2291 	LDW Y,#0xFFFF
      000B87 FF               [ 2] 2292         LDW (X),Y
      000B88 81               [ 4] 2293         RET
                                   2294 
                                   2295 ;       >CHAR   ( c -- c )
                                   2296 ;       Filter non-printing characters.
      000B89 0B 7D                 2297         .word      LINK
                           000B8B  2298 LINK = . 
      000B8B 05                    2299         .byte      5
      000B8C 3E 43 48 41 52        2300         .ascii     ">CHAR"
      000B91                       2301 TCHAR:
      000B91 E6 01            [ 1] 2302         ld a,(1,x)
      000B93 A1 20            [ 1] 2303         cp a,#32  
      000B95 2B 05            [ 1] 2304         jrmi 1$ 
      000B97 A1 7F            [ 1] 2305         cp a,#127 
      000B99 2A 01            [ 1] 2306         jrpl 1$ 
      000B9B 81               [ 4] 2307         ret 
      000B9C A6 5F            [ 1] 2308 1$:     ld a,#'_ 
      000B9E E7 01            [ 1] 2309         ld (1,x),a 
      000BA0 81               [ 4] 2310         ret 
                                   2311 
                                   2312 ;       DEPTH   ( -- n )
                                   2313 ;       Return  depth of  data stack.
      000BA1 0B 8B                 2314         .word      LINK
                           000BA3  2315 LINK = . 
      000BA3 05                    2316         .byte      5
      000BA4 44 45 50 54 48        2317         .ascii     "DEPTH"
      000BA9                       2318 DEPTH: 
      000BA9 90 BE 2C         [ 2] 2319         LDW Y,SP0    ;save data stack ptr
      000BAC BF 24            [ 2] 2320 	LDW XTEMP,X
      000BAE 72 B2 00 24      [ 2] 2321         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000BB2 90 57            [ 2] 2322         SRAW Y    ;Y = #stack items
      000BB4 1D 00 02         [ 2] 2323 	SUBW X,#2
      000BB7 FF               [ 2] 2324         LDW (X),Y     ; if neg, underflow
      000BB8 81               [ 4] 2325         RET
                                   2326 
                                   2327 ;       PICK    ( ... +n -- ... w )
                                   2328 ;       Copy  nth stack item to tos.
      000BB9 0B A3                 2329         .word      LINK
                           000BBB  2330 LINK = . 
      000BBB 04                    2331         .byte      4
      000BBC 50 49 43 4B           2332         .ascii     "PICK"
      000BC0                       2333 PICK:
      000BC0 90 93            [ 1] 2334         LDW Y,X   ;D = n1
      000BC2 90 FE            [ 2] 2335         LDW Y,(Y)
                                   2336 ; modified for standard compliance          
                                   2337 ; 0 PICK must be equivalent to DUP 
      000BC4 90 5C            [ 1] 2338         INCW Y 
      000BC6 90 58            [ 2] 2339         SLAW Y
      000BC8 BF 24            [ 2] 2340         LDW XTEMP,X
      000BCA 72 B9 00 24      [ 2] 2341         ADDW Y,XTEMP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000BCE 90 FE            [ 2] 2342         LDW Y,(Y)
      000BD0 FF               [ 2] 2343         LDW (X),Y
      000BD1 81               [ 4] 2344         RET
                                   2345 
                                   2346 ;; Memory access
                                   2347 
                                   2348 ;       +!      ( n a -- )
                                   2349 ;       Add n to  contents at address a.
      000BD2 0B BB                 2350         .word      LINK
                           000BD4  2351 LINK = . 
      000BD4 02                    2352         .byte      2
      000BD5 2B 21                 2353         .ascii     "+!"
      000BD7                       2354 PSTOR:
      000BD7 90 93            [ 1] 2355         ldw y,x 
      000BD9 90 FE            [ 2] 2356         ldw y,(y)
      000BDB 90 BF 26         [ 2] 2357         ldw YTEMP,y  ; address
      000BDE 90 FE            [ 2] 2358         ldw y,(y)  
      000BE0 90 89            [ 2] 2359         pushw y  ; value at address 
      000BE2 90 93            [ 1] 2360         ldw y,x 
      000BE4 90 EE 02         [ 2] 2361         ldw y,(2,y) ; n 
      000BE7 72 F9 01         [ 2] 2362         addw y,(1,sp) ; n+value
      000BEA 91 CF 26         [ 5] 2363         ldw [YTEMP],y ;  a!
      000BED 90 85            [ 2] 2364         popw y    ;drop local var
      000BEF 1C 00 04         [ 2] 2365         addw x,#4 ; DDROP 
      000BF2 81               [ 4] 2366         ret 
                                   2367 
                                   2368 ;       2!      ( d a -- )
                                   2369 ;       Store  double integer to address a.
      000BF3 0B D4                 2370         .word      LINK
                           000BF5  2371 LINK = . 
      000BF5 02                    2372         .byte      2
      000BF6 32 21                 2373         .ascii     "2!"
      000BF8                       2374 DSTOR:
      000BF8 90 93            [ 1] 2375         ldw y,x 
      000BFA 90 FE            [ 2] 2376         ldw y,(y)
      000BFC 90 BF 26         [ 2] 2377         ldw YTEMP,y ; address 
      000BFF 1C 00 02         [ 2] 2378         addw x,#CELLL ; drop a 
      000C02 90 93            [ 1] 2379         ldw y,x 
      000C04 90 FE            [ 2] 2380         ldw y,(y) ; hi word 
      000C06 89               [ 2] 2381         pushw x 
      000C07 EE 02            [ 2] 2382         ldw x,(2,x) ; lo word 
      000C09 91 CF 26         [ 5] 2383         ldw [YTEMP],y
      000C0C 90 93            [ 1] 2384         ldw y,x 
      000C0E AE 00 02         [ 2] 2385         ldw x,#2 
      000C11 92 DF 26         [ 5] 2386         ldw ([YTEMP],x),y 
      000C14 85               [ 2] 2387         popw x 
      000C15 1C 00 04         [ 2] 2388         addw x,#4 ; DDROP 
      000C18 81               [ 4] 2389         ret 
                                   2390 
                                   2391 ;       2@      ( a -- d )
                                   2392 ;       Fetch double integer from address a.
      000C19 0B F5                 2393         .word      LINK
                           000C1B  2394 LINK = . 
      000C1B 02                    2395         .byte      2
      000C1C 32 40                 2396         .ascii     "2@"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000C1E                       2397 DAT:
      000C1E 90 93            [ 1] 2398         ldw y,x 
      000C20 90 FE            [ 2] 2399         ldw y,(y) ;address 
      000C22 90 BF 26         [ 2] 2400         ldw YTEMP,y 
      000C25 1D 00 02         [ 2] 2401         subw x,#CELLL ; space for udh 
      000C28 91 CE 26         [ 5] 2402         ldw y,[YTEMP] ; udh 
      000C2B FF               [ 2] 2403         ldw (x),y 
      000C2C 90 AE 00 02      [ 2] 2404         ldw y,#2
      000C30 91 DE 26         [ 5] 2405         ldw y,([YTEMP],y) ; udl 
      000C33 EF 02            [ 2] 2406         ldw (2,x),y
      000C35 81               [ 4] 2407         ret 
                                   2408 
                                   2409 ;       COUNT   ( b -- b +n )
                                   2410 ;       Return count byte of a string
                                   2411 ;       and add 1 to byte address.
      000C36 0C 1B                 2412         .word      LINK
                           000C38  2413 LINK = . 
      000C38 05                    2414         .byte      5
      000C39 43 4F 55 4E 54        2415         .ascii     "COUNT"
      000C3E                       2416 COUNT:
      000C3E 90 93            [ 1] 2417         ldw y,x 
      000C40 90 FE            [ 2] 2418         ldw y,(y) ; address 
      000C42 90 F6            [ 1] 2419         ld a,(y)  ; count 
      000C44 90 5C            [ 1] 2420         incw y 
      000C46 FF               [ 2] 2421         ldw (x),y 
      000C47 1D 00 02         [ 2] 2422         subw x,#CELLL 
      000C4A E7 01            [ 1] 2423         ld (1,x),a 
      000C4C 7F               [ 1] 2424         clr (x)
      000C4D 81               [ 4] 2425         ret 
                                   2426 
                                   2427 ;       HERE    ( -- a )
                                   2428 ;       Return  top of  variables
      000C4E 0C 38                 2429         .word      LINK
                           000C50  2430 LINK = . 
      000C50 04                    2431         .byte      4
      000C51 48 45 52 45           2432         .ascii     "HERE"
      000C55                       2433 HERE:
      000C55 90 AE 00 18      [ 2] 2434       	ldw y,#UVP 
      000C59 90 FE            [ 2] 2435         ldw y,(y)
      000C5B 1D 00 02         [ 2] 2436         subw x,#CELLL 
      000C5E FF               [ 2] 2437         ldw (x),y 
      000C5F 81               [ 4] 2438         ret 
                                   2439 
                                   2440 ;       PAD     ( -- a )
                                   2441 ;       Return address of text buffer
                                   2442 ;       above  code dictionary.
      000C60 0C 50                 2443         .word      LINK
                           000C62  2444 LINK = . 
      000C62 03                    2445         .byte      3
      000C63 50 41 44              2446         .ascii     "PAD"
      000C66                       2447 PAD:
      000C66 CD 0C 55         [ 4] 2448         CALL     HERE
      000C69 CD 04 71         [ 4] 2449         CALL     DOLIT
      000C6C 00 50                 2450         .word      80
      000C6E CC 07 DD         [ 2] 2451         JP     PLUS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



                                   2452 
                                   2453 ;       TIB     ( -- a )
                                   2454 ;       Return address of terminal input buffer.
      000C71 0C 62                 2455         .word      LINK
                           000C73  2456 LINK = . 
      000C73 03                    2457         .byte      3
      000C74 54 49 42              2458         .ascii     "TIB"
      000C77                       2459 TIB:
      000C77 CD 06 AC         [ 4] 2460         CALL     NTIB
      000C7A CD 0A D0         [ 4] 2461         CALL     CELLP
      000C7D CC 05 07         [ 2] 2462         JP     AT
                                   2463 
                                   2464 ;       @EXECUTE        ( a -- )
                                   2465 ;       Execute vector stored in address a.
      000C80 0C 73                 2466         .word      LINK
                           000C82  2467 LINK = . 
      000C82 08                    2468         .byte      8
      000C83 40 45 58 45 43 55 54  2469         .ascii     "@EXECUTE"
             45
      000C8B                       2470 ATEXE:
      000C8B CD 05 07         [ 4] 2471         CALL     AT
      000C8E CD 07 6B         [ 4] 2472         CALL     QDUP    ;?address or zero
      000C91 CD 04 A4         [ 4] 2473         CALL     QBRAN
      000C94 0C 99                 2474         .word      EXE1
      000C96 CD 04 E3         [ 4] 2475         CALL     EXECU   ;execute if non-zero
      000C99 81               [ 4] 2476 EXE1:   RET     ;do nothing if zero
                                   2477 
                                   2478 ;       CMOVE   ( b1 b2 u -- )
                                   2479 ;       Copy u bytes from b1 to b2.
      000C9A 0C 82                 2480         .word      LINK
                           000C9C  2481 LINK = . 
      000C9C 05                    2482         .byte      5
      000C9D 43 4D 4F 56 45        2483         .ascii     "CMOVE"
      000CA2                       2484 CMOVE:
      000CA2 CD 05 77         [ 4] 2485         CALL	TOR
      000CA5 CD 04 D3         [ 4] 2486         CALL	BRAN
      000CA8 0C C2                 2487         .word	CMOV2
      000CAA CD 05 77         [ 4] 2488 CMOV1:	CALL	TOR
      000CAD CD 05 AE         [ 4] 2489         CALL	DUPP
      000CB0 CD 05 25         [ 4] 2490         CALL	CAT
      000CB3 CD 05 6B         [ 4] 2491         CALL	RAT
      000CB6 CD 05 14         [ 4] 2492         CALL	CSTOR
      000CB9 CD 0A FB         [ 4] 2493         CALL	ONEP
      000CBC CD 05 58         [ 4] 2494         CALL	RFROM
      000CBF CD 0A FB         [ 4] 2495         CALL	ONEP
      000CC2 CD 04 85         [ 4] 2496 CMOV2:	CALL	DONXT
      000CC5 0C AA                 2497         .word	CMOV1
      000CC7 CC 07 BD         [ 2] 2498         JP	DDROP
                                   2499 
                                   2500 ;       FILL    ( b u c -- )
                                   2501 ;       Fill u bytes of character c
                                   2502 ;       to area beginning at b.
      000CCA 0C 9C                 2503         .word       LINK
                           000CCC  2504 LINK = . 
      000CCC 04                    2505         .byte       4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000CCD 46 49 4C 4C           2506         .ascii     "FILL"
      000CD1                       2507 FILL:
      000CD1 90 93            [ 1] 2508         ldw y,x 
      000CD3 90 E6 01         [ 1] 2509         ld a,(1,y) ; c 
      000CD6 1C 00 02         [ 2] 2510         addw x,#CELLL ; drop c 
      000CD9 90 93            [ 1] 2511         ldw y,x 
      000CDB 90 FE            [ 2] 2512         ldw y,(y) ; count
      000CDD 90 89            [ 2] 2513         pushw y 
      000CDF 1C 00 02         [ 2] 2514         addw x,#CELLL ; drop u 
      000CE2 90 93            [ 1] 2515         ldw y,x 
      000CE4 1C 00 02         [ 2] 2516         addw x,#CELLL ; drop b 
      000CE7 90 FE            [ 2] 2517         ldw y,(y) ; address
      000CE9 90 BF 26         [ 2] 2518         ldw YTEMP,y
      000CEC 90 85            [ 2] 2519         popw y ; count 
      000CEE                       2520 FILL1:  
      000CEE 92 C7 26         [ 4] 2521         ld [YTEMP],a 
      000CF1 3C 27            [ 1] 2522         inc YTEMP+1
      000CF3 24 02            [ 1] 2523         jrnc FILL2 
      000CF5 3C 26            [ 1] 2524         inc YTEMP
      000CF7                       2525 FILL2: 
      000CF7 90 5A            [ 2] 2526         decw y ; count 
      000CF9 26 F3            [ 1] 2527         jrne FILL1  
      000CFB 81               [ 4] 2528         ret 
                                   2529 
                                   2530 ;       ERASE   ( b u -- )
                                   2531 ;       Erase u bytes beginning at b.
      000CFC 0C CC                 2532         .word      LINK
                           000CFE  2533 LINK = . 
      000CFE 05                    2534         .byte      5
      000CFF 45 52 41 53 45        2535         .ascii     "ERASE"
      000D04                       2536 ERASE:
      000D04 90 5F            [ 1] 2537         clrw y 
      000D06 1D 00 02         [ 2] 2538         subw x,#CELLL 
      000D09 FF               [ 2] 2539         ldw (x),y 
      000D0A CC 0C D1         [ 2] 2540         jp FILL 
                                   2541 
                                   2542 
                                   2543 ;       PACK0   ( b u a -- a )
                                   2544 ;       Build a counted string with
                                   2545 ;       u characters from b. Null fill.
      000D0D 0C FE                 2546         .word      LINK
                           000D0F  2547 LINK = . 
      000D0F 05                    2548         .byte      5
      000D10 50 41 43 4B 30        2549         .ascii     "PACK0"
      000D15                       2550 PACKS:
      000D15 CD 05 AE         [ 4] 2551         CALL     DUPP
      000D18 CD 05 77         [ 4] 2552         CALL     TOR     ;strings only on cell boundary
      000D1B CD 07 C8         [ 4] 2553         CALL     DDUP
      000D1E CD 05 14         [ 4] 2554         CALL     CSTOR
      000D21 CD 0A FB         [ 4] 2555         CALL     ONEP ;save count
      000D24 CD 05 BE         [ 4] 2556         CALL     SWAPP
      000D27 CD 0C A2         [ 4] 2557         CALL     CMOVE
      000D2A CD 05 58         [ 4] 2558         CALL     RFROM
      000D2D 81               [ 4] 2559         RET
                                   2560 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



                                   2561 ;; Numeric output, single precision
                                   2562 
                                   2563 ;       DIGIT   ( u -- c )
                                   2564 ;       Convert digit u to a character.
      000D2E 0D 0F                 2565         .word      LINK
                           000D30  2566 LINK = . 
      000D30 05                    2567         .byte      5
      000D31 44 49 47 49 54        2568         .ascii     "DIGIT"
      000D36                       2569 DIGIT:
      000D36 CD 04 71         [ 4] 2570         CALL	DOLIT
      000D39 00 09                 2571         .word	9
      000D3B CD 05 D8         [ 4] 2572         CALL	OVER
      000D3E CD 08 BB         [ 4] 2573         CALL	LESS
      000D41 CD 04 71         [ 4] 2574         CALL	DOLIT
      000D44 00 07                 2575         .word	7
      000D46 CD 06 0D         [ 4] 2576         CALL	ANDD
      000D49 CD 07 DD         [ 4] 2577         CALL	PLUS
      000D4C CD 04 71         [ 4] 2578         CALL	DOLIT
      000D4F 00 30                 2579         .word	48	;'0'
      000D51 CC 07 DD         [ 2] 2580         JP	PLUS
                                   2581 
                                   2582 ;       EXTRACT ( n base -- n c )
                                   2583 ;       Extract least significant digit from n.
      000D54 0D 30                 2584         .word      LINK
                           000D56  2585 LINK = . 
      000D56 07                    2586         .byte      7
      000D57 45 58 54 52 41 43 54  2587         .ascii     "EXTRACT"
      000D5E                       2588 EXTRC:
      000D5E CD 0B 67         [ 4] 2589         CALL     ZERO
      000D61 CD 05 BE         [ 4] 2590         CALL     SWAPP
      000D64 CD 09 71         [ 4] 2591         CALL     UMMOD
      000D67 CD 05 BE         [ 4] 2592         CALL     SWAPP
      000D6A CC 0D 36         [ 2] 2593         JP     DIGIT
                                   2594 
                                   2595 ;       <#      ( -- )
                                   2596 ;       Initiate  numeric output process.
      000D6D 0D 56                 2597         .word      LINK
                           000D6F  2598 LINK = . 
      000D6F 02                    2599         .byte      2
      000D70 3C 23                 2600         .ascii     "<#"
      000D72                       2601 BDIGS:
      000D72 CD 0C 66         [ 4] 2602         CALL     PAD
      000D75 CD 06 EE         [ 4] 2603         CALL     HLD
      000D78 CC 04 F0         [ 2] 2604         JP     STORE
                                   2605 
                                   2606 ;       HOLD    ( c -- )
                                   2607 ;       Insert a character into output string.
      000D7B 0D 6F                 2608         .word      LINK
                           000D7D  2609 LINK = . 
      000D7D 04                    2610         .byte      4
      000D7E 48 4F 4C 44           2611         .ascii     "HOLD"
      000D82                       2612 HOLD:
      000D82 CD 06 EE         [ 4] 2613         CALL     HLD
      000D85 CD 05 07         [ 4] 2614         CALL     AT
      000D88 CD 0B 08         [ 4] 2615         CALL     ONEM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000D8B CD 05 AE         [ 4] 2616         CALL     DUPP
      000D8E CD 06 EE         [ 4] 2617         CALL     HLD
      000D91 CD 04 F0         [ 4] 2618         CALL     STORE
      000D94 CC 05 14         [ 2] 2619         JP     CSTOR
                                   2620 
                                   2621 ;       #       ( u -- u )
                                   2622 ;       Extract one digit from u and
                                   2623 ;       append digit to output string.
      000D97 0D 7D                 2624         .word      LINK
                           000D99  2625 LINK = . 
      000D99 01                    2626         .byte      1
      000D9A 23                    2627         .ascii     "#"
      000D9B                       2628 DIG:
      000D9B CD 06 7E         [ 4] 2629         CALL     BASE
      000D9E CD 05 07         [ 4] 2630         CALL     AT
      000DA1 CD 0D 5E         [ 4] 2631         CALL     EXTRC
      000DA4 CC 0D 82         [ 2] 2632         JP     HOLD
                                   2633 
                                   2634 ;       #S      ( u -- 0 )
                                   2635 ;       Convert u until all digits
                                   2636 ;       are added to output string.
      000DA7 0D 99                 2637         .word      LINK
                           000DA9  2638 LINK = . 
      000DA9 02                    2639         .byte      2
      000DAA 23 53                 2640         .ascii     "#S"
      000DAC                       2641 DIGS:
      000DAC CD 0D 9B         [ 4] 2642 DIGS1:  CALL     DIG
      000DAF CD 05 AE         [ 4] 2643         CALL     DUPP
      000DB2 CD 04 A4         [ 4] 2644         CALL     QBRAN
      000DB5 0D B9                 2645         .word      DIGS2
      000DB7 20 F3            [ 2] 2646         JRA     DIGS1
      000DB9 81               [ 4] 2647 DIGS2:  RET
                                   2648 
                                   2649 ;       SIGN    ( n -- )
                                   2650 ;       Add a minus sign to
                                   2651 ;       numeric output string.
      000DBA 0D A9                 2652         .word      LINK
                           000DBC  2653 LINK = . 
      000DBC 04                    2654         .byte      4
      000DBD 53 49 47 4E           2655         .ascii     "SIGN"
      000DC1                       2656 SIGN:
      000DC1 CD 05 E7         [ 4] 2657         CALL     ZLESS
      000DC4 CD 04 A4         [ 4] 2658         CALL     QBRAN
      000DC7 0D D1                 2659         .word      SIGN1
      000DC9 CD 04 71         [ 4] 2660         CALL     DOLIT
      000DCC 00 2D                 2661         .word      45	;"-"
      000DCE CC 0D 82         [ 2] 2662         JP     HOLD
      000DD1 81               [ 4] 2663 SIGN1:  RET
                                   2664 
                                   2665 ;       #>      ( w -- b u )
                                   2666 ;       Prepare output string.
      000DD2 0D BC                 2667         .word      LINK
                           000DD4  2668 LINK = . 
      000DD4 02                    2669         .byte      2
      000DD5 23 3E                 2670         .ascii     "#>"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000DD7                       2671 EDIGS:
      000DD7 CD 05 A4         [ 4] 2672         CALL     DROP
      000DDA CD 06 EE         [ 4] 2673         CALL     HLD
      000DDD CD 05 07         [ 4] 2674         CALL     AT
      000DE0 CD 0C 66         [ 4] 2675         CALL     PAD
      000DE3 CD 05 D8         [ 4] 2676         CALL     OVER
      000DE6 CC 08 56         [ 2] 2677         JP     SUBB
                                   2678 
                                   2679 ;       str     ( w -- b u )
                                   2680 ;       Convert a signed integer
                                   2681 ;       to a numeric string.
      000DE9 0D D4                 2682         .word      LINK
                           000DEB  2683 LINK = . 
      000DEB 03                    2684         .byte      3
      000DEC 53 54 52              2685         .ascii     "STR"
      000DEF                       2686 STR:
      000DEF CD 05 AE         [ 4] 2687         CALL     DUPP
      000DF2 CD 05 77         [ 4] 2688         CALL     TOR
      000DF5 CD 08 70         [ 4] 2689         CALL     ABSS
      000DF8 CD 0D 72         [ 4] 2690         CALL     BDIGS
      000DFB CD 0D AC         [ 4] 2691         CALL     DIGS
      000DFE CD 05 58         [ 4] 2692         CALL     RFROM
      000E01 CD 0D C1         [ 4] 2693         CALL     SIGN
      000E04 CC 0D D7         [ 2] 2694         JP     EDIGS
                                   2695 
                                   2696 ;       HEX     ( -- )
                                   2697 ;       Use radix 16 as base for
                                   2698 ;       numeric conversions.
      000E07 0D EB                 2699         .word      LINK
                           000E09  2700 LINK = . 
      000E09 03                    2701         .byte      3
      000E0A 48 45 58              2702         .ascii     "HEX"
      000E0D                       2703 HEX:
      000E0D CD 04 71         [ 4] 2704         CALL     DOLIT
      000E10 00 10                 2705         .word      16
      000E12 CD 06 7E         [ 4] 2706         CALL     BASE
      000E15 CC 04 F0         [ 2] 2707         JP     STORE
                                   2708 
                                   2709 ;       DECIMAL ( -- )
                                   2710 ;       Use radix 10 as base
                                   2711 ;       for numeric conversions.
      000E18 0E 09                 2712         .word      LINK
                           000E1A  2713 LINK = . 
      000E1A 07                    2714         .byte      7
      000E1B 44 45 43 49 4D 41 4C  2715         .ascii     "DECIMAL"
      000E22                       2716 DECIM:
      000E22 CD 04 71         [ 4] 2717         CALL     DOLIT
      000E25 00 0A                 2718         .word      10
      000E27 CD 06 7E         [ 4] 2719         CALL     BASE
      000E2A CC 04 F0         [ 2] 2720         JP     STORE
                                   2721 
                                   2722 ;; Numeric input, single precision
                                   2723 
                                   2724 ;       DIGIT?  ( c base -- u t )
                                   2725 ;       Convert a character to its numeric
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



                                   2726 ;       value. A flag indicates success.
      000E2D 0E 1A                 2727         .word      LINK
                           000E2F  2728 LINK = . 
      000E2F 06                    2729         .byte       6
      000E30 44 49 47 49 54 3F     2730         .ascii     "DIGIT?"
      000E36                       2731 DIGTQ:
      000E36 CD 05 77         [ 4] 2732         CALL     TOR
      000E39 CD 04 71         [ 4] 2733         CALL     DOLIT
      000E3C 00 30                 2734         .word     48	; "0"
      000E3E CD 08 56         [ 4] 2735         CALL     SUBB
      000E41 CD 04 71         [ 4] 2736         CALL     DOLIT
      000E44 00 09                 2737         .word      9
      000E46 CD 05 D8         [ 4] 2738         CALL     OVER
      000E49 CD 08 BB         [ 4] 2739         CALL     LESS
      000E4C CD 04 A4         [ 4] 2740         CALL     QBRAN
      000E4F 0E 67                 2741         .word      DGTQ1
      000E51 CD 04 71         [ 4] 2742         CALL     DOLIT
      000E54 00 07                 2743         .word      7
      000E56 CD 08 56         [ 4] 2744         CALL     SUBB
      000E59 CD 05 AE         [ 4] 2745         CALL     DUPP
      000E5C CD 04 71         [ 4] 2746         CALL     DOLIT
      000E5F 00 0A                 2747         .word      10
      000E61 CD 08 BB         [ 4] 2748         CALL     LESS
      000E64 CD 06 21         [ 4] 2749         CALL     ORR
      000E67 CD 05 AE         [ 4] 2750 DGTQ1:  CALL     DUPP
      000E6A CD 05 58         [ 4] 2751         CALL     RFROM
      000E6D CC 08 9D         [ 2] 2752         JP     ULESS
                                   2753 
                           000001  2754 .if  WANT_DOUBLE
                           000000  2755 .else 
                                   2756 ;       NUMBER? ( a -- n T | a F )
                                   2757 ;       Convert a number string to
                                   2758 ;       integer. Push a flag on tos.
                                   2759         .word      LINK
                                   2760 LINK = . 
                                   2761         .byte      7
                                   2762         .ascii     "NUMBER?"
                                   2763 NUMBQ:
                                   2764         CALL     BASE
                                   2765         CALL     AT
                                   2766         CALL     TOR
                                   2767         CALL     ZERO
                                   2768         CALL     OVER
                                   2769         CALL     COUNT
                                   2770         CALL     OVER
                                   2771         CALL     CAT
                                   2772         CALL     DOLIT
                                   2773         .word     36	; "0x"
                                   2774         CALL     EQUAL
                                   2775         CALL     QBRAN
                                   2776         .word      NUMQ1
                                   2777         CALL     HEX
                                   2778         CALL     SWAPP
                                   2779         CALL     ONEP
                                   2780         CALL     SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                   2781         CALL     ONEM
                                   2782 NUMQ1:  CALL     OVER
                                   2783         CALL     CAT
                                   2784         CALL     DOLIT
                                   2785         .word     45	; "-"
                                   2786         CALL     EQUAL
                                   2787         CALL     TOR
                                   2788         CALL     SWAPP
                                   2789         CALL     RAT
                                   2790         CALL     SUBB
                                   2791         CALL     SWAPP
                                   2792         CALL     RAT
                                   2793         CALL     PLUS
                                   2794         CALL     QDUP
                                   2795         CALL     QBRAN
                                   2796         .word      NUMQ6
                                   2797         CALL     ONEM
                                   2798         CALL     TOR
                                   2799 NUMQ2:  CALL     DUPP
                                   2800         CALL     TOR
                                   2801         CALL     CAT
                                   2802         CALL     BASE
                                   2803         CALL     AT
                                   2804         CALL     DIGTQ
                                   2805         CALL     QBRAN
                                   2806         .word      NUMQ4
                                   2807         CALL     SWAPP
                                   2808         CALL     BASE
                                   2809         CALL     AT
                                   2810         CALL     STAR
                                   2811         CALL     PLUS
                                   2812         CALL     RFROM
                                   2813         CALL     ONEP
                                   2814         CALL     DONXT
                                   2815         .word      NUMQ2
                                   2816         CALL     RAT
                                   2817         CALL     SWAPP
                                   2818         CALL     DROP
                                   2819         CALL     QBRAN
                                   2820         .word      NUMQ3
                                   2821         CALL     NEGAT
                                   2822 NUMQ3:  CALL     SWAPP
                                   2823         JRA     NUMQ5
                                   2824 NUMQ4:  CALL     RFROM
                                   2825         CALL     RFROM
                                   2826         CALL     DDROP
                                   2827         CALL     DDROP
                                   2828         CALL     ZERO
                                   2829 NUMQ5:  CALL     DUPP
                                   2830 NUMQ6:  CALL     RFROM
                                   2831         CALL     DDROP
                                   2832         CALL     RFROM
                                   2833         CALL     BASE
                                   2834         JP     STORE
                                   2835 .endif ; WANT_DOUBLE  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                                   2836 
                                   2837 ;; Basic I/O
                                   2838 
                                   2839 ;       KEY     ( -- c )
                                   2840 ;       Wait for and return an
                                   2841 ;       input character.
      000E70 0E 2F                 2842         .word      LINK
                           000E72  2843 LINK = . 
      000E72 03                    2844         .byte      3
      000E73 4B 45 59              2845         .ascii     "KEY"
      000E76                       2846 KEY:
      000E76 72 0B 52 30 FB   [ 2] 2847         btjf UART_SR,#UART_SR_RXNE,. 
      000E7B C6 52 31         [ 1] 2848         ld a,UART_DR 
      000E7E 1D 00 02         [ 2] 2849         subw x,#CELLL 
      000E81 E7 01            [ 1] 2850         ld (1,x),a 
      000E83 7F               [ 1] 2851         clr (x)
      000E84 81               [ 4] 2852         ret 
                                   2853 
                                   2854 ;       NUF?    ( -- t )
                                   2855 ;       Return false if no input,
                                   2856 ;       else pause and if CR return true.
      000E85 0E 72                 2857         .word      LINK
                           000E87  2858 LINK = . 
      000E87 04                    2859         .byte      4
      000E88 4E 55 46 3F           2860         .ascii     "NUF?"
      000E8C                       2861 NUFQ:
      000E8C CD 04 18         [ 4] 2862         CALL     QKEY
      000E8F CD 05 AE         [ 4] 2863         CALL     DUPP
      000E92 CD 04 A4         [ 4] 2864         CALL     QBRAN
      000E95 0E A5                 2865         .word    NUFQ1
      000E97 CD 07 BD         [ 4] 2866         CALL     DDROP
      000E9A CD 0E 76         [ 4] 2867         CALL     KEY
      000E9D CD 04 71         [ 4] 2868         CALL     DOLIT
      000EA0 00 0D                 2869         .word      CRR
      000EA2 CC 08 7E         [ 2] 2870         JP     EQUAL
      000EA5 81               [ 4] 2871 NUFQ1:  RET
                                   2872 
                                   2873 ;       SPACE   ( -- )
                                   2874 ;       Send  blank character to
                                   2875 ;       output device.
      000EA6 0E 87                 2876         .word      LINK
                           000EA8  2877 LINK = . 
      000EA8 05                    2878         .byte      5
      000EA9 53 50 41 43 45        2879         .ascii     "SPACE"
      000EAE                       2880 SPACE:
      000EAE CD 0B 5A         [ 4] 2881         CALL     BLANK
      000EB1 CC 04 36         [ 2] 2882         JP     EMIT
                                   2883 
                                   2884 ;       SPACES  ( +n -- )
                                   2885 ;       Send n spaces to output device.
      000EB4 0E A8                 2886         .word      LINK
                           000EB6  2887 LINK = . 
      000EB6 06                    2888         .byte      6
      000EB7 53 50 41 43 45 53     2889         .ascii     "SPACES"
      000EBD                       2890 SPACS:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000EBD CD 0B 67         [ 4] 2891         CALL     ZERO
      000EC0 CD 09 19         [ 4] 2892         CALL     MAX
      000EC3 CD 05 77         [ 4] 2893         CALL     TOR
      000EC6 20 03            [ 2] 2894         JRA      CHAR2
      000EC8 CD 0E AE         [ 4] 2895 CHAR1:  CALL     SPACE
      000ECB CD 04 85         [ 4] 2896 CHAR2:  CALL     DONXT
      000ECE 0E C8                 2897         .word    CHAR1
      000ED0 81               [ 4] 2898         RET
                                   2899 
                                   2900 ;       TYPE    ( b u -- )
                                   2901 ;       Output u characters from b.
      000ED1 0E B6                 2902         .word      LINK
                           000ED3  2903 LINK = . 
      000ED3 04                    2904         .byte      4
      000ED4 54 59 50 45           2905         .ascii     "TYPE"
      000ED8                       2906 TYPES:
      000ED8 CD 05 77         [ 4] 2907         CALL     TOR
      000EDB 20 0C            [ 2] 2908         JRA     TYPE2
      000EDD CD 05 AE         [ 4] 2909 TYPE1:  CALL     DUPP
      000EE0 CD 05 25         [ 4] 2910         CALL     CAT
      000EE3 CD 04 36         [ 4] 2911         CALL     EMIT
      000EE6 CD 0A FB         [ 4] 2912         CALL     ONEP
      000EE9 CD 04 85         [ 4] 2913 TYPE2:  CALL     DONXT
      000EEC 0E DD                 2914         .word      TYPE1
      000EEE CC 05 A4         [ 2] 2915         JP     DROP
                                   2916 
                                   2917 ;       CR      ( -- )
                                   2918 ;       Output a carriage return
                                   2919 ;       and a line feed.
      000EF1 0E D3                 2920         .word      LINK
                           000EF3  2921 LINK = . 
      000EF3 02                    2922         .byte      2
      000EF4 43 52                 2923         .ascii     "CR"
      000EF6                       2924 CR:
      000EF6 CD 04 71         [ 4] 2925         CALL     DOLIT
      000EF9 00 0D                 2926         .word      CRR
      000EFB CD 04 36         [ 4] 2927         CALL     EMIT
      000EFE CD 04 71         [ 4] 2928         CALL     DOLIT
      000F01 00 0A                 2929         .word      LF
      000F03 CC 04 36         [ 2] 2930         JP     EMIT
                                   2931 
                                   2932 ;       do$     ( -- a )
                                   2933 ;       Return  address of a compiled
                                   2934 ;       string.
      000F06 0E F3                 2935         .word      LINK
                           000F08  2936 LINK = . 
      000F08 43                    2937 	.byte      COMPO+3
      000F09 44 4F 24              2938         .ascii     "DO$"
      000F0C                       2939 DOSTR:
      000F0C CD 05 58         [ 4] 2940         CALL     RFROM
      000F0F CD 05 6B         [ 4] 2941         CALL     RAT
      000F12 CD 05 58         [ 4] 2942         CALL     RFROM
      000F15 CD 0C 3E         [ 4] 2943         CALL     COUNT
      000F18 CD 07 DD         [ 4] 2944         CALL     PLUS
      000F1B CD 05 77         [ 4] 2945         CALL     TOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      000F1E CD 05 BE         [ 4] 2946         CALL     SWAPP
      000F21 CD 05 77         [ 4] 2947         CALL     TOR
      000F24 81               [ 4] 2948         RET
                                   2949 
                                   2950 ;       $"|     ( -- a )
                                   2951 ;       Run time routine compiled by $".
                                   2952 ;       Return address of a compiled string.
      000F25 0F 08                 2953         .word      LINK
                           000F27  2954 LINK = . 
      000F27 43                    2955 	.byte      COMPO+3
      000F28 24 22 7C              2956         .byte     '$','"','|'
      000F2B                       2957 STRQP:
      000F2B CD 0F 0C         [ 4] 2958         CALL     DOSTR
      000F2E 81               [ 4] 2959         RET
                                   2960 
                                   2961 ;       ."|     ( -- )
                                   2962 ;       Run time routine of ." .
                                   2963 ;       Output a compiled string.
      000F2F 0F 27                 2964         .word      LINK
                           000F31  2965 LINK = . 
      000F31 43                    2966 	.byte      COMPO+3
      000F32 2E 22 7C              2967         .byte     '.','"','|'
      000F35                       2968 DOTQP:
      000F35 CD 0F 0C         [ 4] 2969         CALL     DOSTR
      000F38 CD 0C 3E         [ 4] 2970         CALL     COUNT
      000F3B CC 0E D8         [ 2] 2971         JP     TYPES
                                   2972 
                                   2973 ;       .R      ( n +n -- )
                                   2974 ;       Display an integer in a field
                                   2975 ;       of n columns, right justified.
      000F3E 0F 31                 2976         .word      LINK
                           000F40  2977 LINK = . 
      000F40 02                    2978         .byte      2
      000F41 2E 52                 2979         .ascii     ".R"
      000F43                       2980 DOTR:
      000F43 CD 05 77         [ 4] 2981         CALL     TOR
      000F46 CD 0D EF         [ 4] 2982         CALL     STR
      000F49 CD 05 58         [ 4] 2983         CALL     RFROM
      000F4C CD 05 D8         [ 4] 2984         CALL     OVER
      000F4F CD 08 56         [ 4] 2985         CALL     SUBB
      000F52 CD 0E BD         [ 4] 2986         CALL     SPACS
      000F55 CC 0E D8         [ 2] 2987         JP     TYPES
                                   2988 
                                   2989 ;       U.R     ( u +n -- )
                                   2990 ;       Display an unsigned integer
                                   2991 ;       in n column, right justified.
      000F58 0F 40                 2992         .word      LINK
                           000F5A  2993 LINK = . 
      000F5A 03                    2994         .byte      3
      000F5B 55 2E 52              2995         .ascii     "U.R"
      000F5E                       2996 UDOTR:
      000F5E CD 05 77         [ 4] 2997         CALL     TOR
      000F61 CD 0D 72         [ 4] 2998         CALL     BDIGS
      000F64 CD 0D AC         [ 4] 2999         CALL     DIGS
      000F67 CD 0D D7         [ 4] 3000         CALL     EDIGS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      000F6A CD 05 58         [ 4] 3001         CALL     RFROM
      000F6D CD 05 D8         [ 4] 3002         CALL     OVER
      000F70 CD 08 56         [ 4] 3003         CALL     SUBB
      000F73 CD 0E BD         [ 4] 3004         CALL     SPACS
      000F76 CC 0E D8         [ 2] 3005         JP     TYPES
                                   3006 
                                   3007 ;       U.      ( u -- )
                                   3008 ;       Display an unsigned integer
                                   3009 ;       in free format.
      000F79 0F 5A                 3010         .word      LINK
                           000F7B  3011 LINK = . 
      000F7B 02                    3012         .byte      2
      000F7C 55 2E                 3013         .ascii     "U."
      000F7E                       3014 UDOT:
      000F7E CD 0D 72         [ 4] 3015         CALL     BDIGS
      000F81 CD 0D AC         [ 4] 3016         CALL     DIGS
      000F84 CD 0D D7         [ 4] 3017         CALL     EDIGS
      000F87 CD 0E AE         [ 4] 3018         CALL     SPACE
      000F8A CC 0E D8         [ 2] 3019         JP     TYPES
                                   3020 
                                   3021 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3022 ;   H. ( n -- )
                                   3023 ;   display n in hexadecimal 
                                   3024 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F8D                       3025         _HEADER HDOT,2,"H."
      000F8D 0F 7B                    1         .word LINK 
                           000F8F     2         LINK=.
      000F8F 02                       3         .byte 2  
      000F90 48 2E                    4         .ascii "H."
      000F92                          5         HDOT:
      000F92 CD 06 7E         [ 4] 3026         CALL BASE 
      000F95 CD 05 07         [ 4] 3027         CALL AT 
      000F98 CD 05 77         [ 4] 3028         CALL TOR 
      000F9B CD 0E 0D         [ 4] 3029         CALL HEX 
      000F9E CD 0F 7E         [ 4] 3030         CALL UDOT 
      000FA1 CD 05 58         [ 4] 3031         CALL RFROM 
      000FA4 CD 06 7E         [ 4] 3032         CALL BASE 
      000FA7 CD 04 F0         [ 4] 3033         CALL STORE 
      000FAA 81               [ 4] 3034         RET 
                                   3035 
                                   3036 
                                   3037 ;       .       ( w -- )
                                   3038 ;       Display an integer in free
                                   3039 ;       format, preceeded by a space.
      000FAB 0F 8F                 3040         .word      LINK
                           000FAD  3041 LINK = . 
      000FAD 01                    3042         .byte      1
      000FAE 2E                    3043         .ascii     "."
      000FAF                       3044 DOT:
      000FAF CD 06 7E         [ 4] 3045         CALL     BASE
      000FB2 CD 05 07         [ 4] 3046         CALL     AT
      000FB5 CD 04 71         [ 4] 3047         CALL     DOLIT
      000FB8 00 0A                 3048         .word      10
      000FBA CD 06 36         [ 4] 3049         CALL     XORR    ;?decimal
      000FBD CD 04 A4         [ 4] 3050         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      000FC0 0F C5                 3051         .word      DOT1
      000FC2 CC 0F 7E         [ 2] 3052         JP     UDOT
      000FC5 CD 0D EF         [ 4] 3053 DOT1:   CALL     STR
      000FC8 CD 0E AE         [ 4] 3054         CALL     SPACE
      000FCB CC 0E D8         [ 2] 3055         JP     TYPES
                                   3056 
                                   3057 ;       ?       ( a -- )
                                   3058 ;       Display contents in memory cell.
      000FCE 0F AD                 3059         .word      LINK
                                   3060         
                           000FD0  3061 LINK = . 
      000FD0 01                    3062         .byte      1
      000FD1 3F                    3063         .ascii     "?"
      000FD2                       3064 QUEST:
      000FD2 CD 05 07         [ 4] 3065         CALL     AT
      000FD5 CC 0F AF         [ 2] 3066         JP     DOT
                                   3067 
                                   3068 ;; Parsing
                                   3069 
                                   3070 ;       parse   ( b u c -- b u delta ; <string> )
                                   3071 ;       Scan string delimited by c.
                                   3072 ;       Return found string and its offset.
      000FD8 0F D0                 3073         .word      LINK
                           000FDA  3074 LINK = . 
      000FDA 05                    3075         .byte      5
      000FDB 70 61 72 73 65        3076         .ascii     "parse"
      000FE0                       3077 PARS:
      000FE0 CD 06 8D         [ 4] 3078         CALL     TEMP
      000FE3 CD 04 F0         [ 4] 3079         CALL     STORE
      000FE6 CD 05 D8         [ 4] 3080         CALL     OVER
      000FE9 CD 05 77         [ 4] 3081         CALL     TOR
      000FEC CD 05 AE         [ 4] 3082         CALL     DUPP
      000FEF CD 04 A4         [ 4] 3083         CALL     QBRAN
      000FF2 10 98                 3084         .word    PARS8
      000FF4 CD 0B 08         [ 4] 3085         CALL     ONEM
      000FF7 CD 06 8D         [ 4] 3086         CALL     TEMP
      000FFA CD 05 07         [ 4] 3087         CALL     AT
      000FFD CD 0B 5A         [ 4] 3088         CALL     BLANK
      001000 CD 08 7E         [ 4] 3089         CALL     EQUAL
      001003 CD 04 A4         [ 4] 3090         CALL     QBRAN
      001006 10 39                 3091         .word      PARS3
      001008 CD 05 77         [ 4] 3092         CALL     TOR
      00100B CD 0B 5A         [ 4] 3093 PARS1:  CALL     BLANK
      00100E CD 05 D8         [ 4] 3094         CALL     OVER
      001011 CD 05 25         [ 4] 3095         CALL     CAT     ;skip leading blanks ONLY
      001014 CD 08 56         [ 4] 3096         CALL     SUBB
      001017 CD 05 E7         [ 4] 3097         CALL     ZLESS
      00101A CD 07 F7         [ 4] 3098         CALL     INVER
      00101D CD 04 A4         [ 4] 3099         CALL     QBRAN
      001020 10 36                 3100         .word      PARS2
      001022 CD 0A FB         [ 4] 3101         CALL     ONEP
      001025 CD 04 85         [ 4] 3102         CALL     DONXT
      001028 10 0B                 3103         .word      PARS1
      00102A CD 05 58         [ 4] 3104         CALL     RFROM
      00102D CD 05 A4         [ 4] 3105         CALL     DROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      001030 CD 0B 67         [ 4] 3106         CALL     ZERO
      001033 CC 05 AE         [ 2] 3107         JP     DUPP
      001036 CD 05 58         [ 4] 3108 PARS2:  CALL     RFROM
      001039 CD 05 D8         [ 4] 3109 PARS3:  CALL     OVER
      00103C CD 05 BE         [ 4] 3110         CALL     SWAPP
      00103F CD 05 77         [ 4] 3111         CALL     TOR
      001042 CD 06 8D         [ 4] 3112 PARS4:  CALL     TEMP
      001045 CD 05 07         [ 4] 3113         CALL     AT
      001048 CD 05 D8         [ 4] 3114         CALL     OVER
      00104B CD 05 25         [ 4] 3115         CALL     CAT
      00104E CD 08 56         [ 4] 3116         CALL     SUBB    ;scan for delimiter
      001051 CD 06 8D         [ 4] 3117         CALL     TEMP
      001054 CD 05 07         [ 4] 3118         CALL     AT
      001057 CD 0B 5A         [ 4] 3119         CALL     BLANK
      00105A CD 08 7E         [ 4] 3120         CALL     EQUAL
      00105D CD 04 A4         [ 4] 3121         CALL     QBRAN
      001060 10 65                 3122         .word      PARS5
      001062 CD 05 E7         [ 4] 3123         CALL     ZLESS
      001065 CD 04 A4         [ 4] 3124 PARS5:  CALL     QBRAN
      001068 10 7A                 3125         .word      PARS6
      00106A CD 0A FB         [ 4] 3126         CALL     ONEP
      00106D CD 04 85         [ 4] 3127         CALL     DONXT
      001070 10 42                 3128         .word      PARS4
      001072 CD 05 AE         [ 4] 3129         CALL     DUPP
      001075 CD 05 77         [ 4] 3130         CALL     TOR
      001078 20 0F            [ 2] 3131         JRA     PARS7
      00107A CD 05 58         [ 4] 3132 PARS6:  CALL     RFROM
      00107D CD 05 A4         [ 4] 3133         CALL     DROP
      001080 CD 05 AE         [ 4] 3134         CALL     DUPP
      001083 CD 0A FB         [ 4] 3135         CALL     ONEP
      001086 CD 05 77         [ 4] 3136         CALL     TOR
      001089 CD 05 D8         [ 4] 3137 PARS7:  CALL     OVER
      00108C CD 08 56         [ 4] 3138         CALL     SUBB
      00108F CD 05 58         [ 4] 3139         CALL     RFROM
      001092 CD 05 58         [ 4] 3140         CALL     RFROM
      001095 CC 08 56         [ 2] 3141         JP     SUBB
      001098 CD 05 D8         [ 4] 3142 PARS8:  CALL     OVER
      00109B CD 05 58         [ 4] 3143         CALL     RFROM
      00109E CC 08 56         [ 2] 3144         JP     SUBB
                                   3145 
                                   3146 ;       PARSE   ( c -- b u ; <string> )
                                   3147 ;       Scan input stream and return
                                   3148 ;       counted string delimited by c.
      0010A1 0F DA                 3149         .word      LINK
                           0010A3  3150 LINK = . 
      0010A3 05                    3151         .byte      5
      0010A4 50 41 52 53 45        3152         .ascii     "PARSE"
      0010A9                       3153 PARSE:
      0010A9 CD 05 77         [ 4] 3154         CALL     TOR
      0010AC CD 0C 77         [ 4] 3155         CALL     TIB
      0010AF CD 06 9C         [ 4] 3156         CALL     INN
      0010B2 CD 05 07         [ 4] 3157         CALL     AT
      0010B5 CD 07 DD         [ 4] 3158         CALL     PLUS    ;current input buffer pointer
      0010B8 CD 06 AC         [ 4] 3159         CALL     NTIB
      0010BB CD 05 07         [ 4] 3160         CALL     AT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      0010BE CD 06 9C         [ 4] 3161         CALL     INN
      0010C1 CD 05 07         [ 4] 3162         CALL     AT
      0010C4 CD 08 56         [ 4] 3163         CALL     SUBB    ;remaining count
      0010C7 CD 05 58         [ 4] 3164         CALL     RFROM
      0010CA CD 0F E0         [ 4] 3165         CALL     PARS
      0010CD CD 06 9C         [ 4] 3166         CALL     INN
      0010D0 CC 0B D7         [ 2] 3167         JP     PSTOR
                                   3168 
                                   3169 ;       .(      ( -- )
                                   3170 ;       Output following string up to next ) .
      0010D3 10 A3                 3171         .word      LINK
                           0010D5  3172 LINK = . 
      0010D5 82                    3173 	.byte      IMEDD+2
      0010D6 2E 28                 3174         .ascii     ".("
      0010D8                       3175 DOTPR:
      0010D8 CD 04 71         [ 4] 3176         CALL     DOLIT
      0010DB 00 29                 3177         .word     41	; ")"
      0010DD CD 10 A9         [ 4] 3178         CALL     PARSE
      0010E0 CC 0E D8         [ 2] 3179         JP     TYPES
                                   3180 
                                   3181 ;       (       ( -- )
                                   3182 ;       Ignore following string up to next ).
                                   3183 ;       A comment.
      0010E3 10 D5                 3184         .word      LINK
                           0010E5  3185 LINK = . 
      0010E5 81                    3186 	.byte      IMEDD+1
      0010E6 28                    3187         .ascii     "("
      0010E7                       3188 PAREN:
      0010E7 CD 04 71         [ 4] 3189         CALL     DOLIT
      0010EA 00 29                 3190         .word     41	; ")"
      0010EC CD 10 A9         [ 4] 3191         CALL     PARSE
      0010EF CC 07 BD         [ 2] 3192         JP     DDROP
                                   3193 
                                   3194 ;       \       ( -- )
                                   3195 ;       Ignore following text till
                                   3196 ;       end of line.
      0010F2 10 E5                 3197         .word      LINK
                           0010F4  3198 LINK = . 
      0010F4 81                    3199 	.byte      IMEDD+1
      0010F5 5C                    3200         .ascii     "\"
      0010F6                       3201 BKSLA:
      0010F6 90 AE 00 0E      [ 2] 3202         ldw y,#UCTIB ; #TIB  
      0010FA 90 FE            [ 2] 3203         ldw y,(y)
      0010FC 90 89            [ 2] 3204         pushw y ; count in TIB 
      0010FE 90 AE 00 0C      [ 2] 3205         ldw y,#UINN ; >IN 
      001102 90 BF 26         [ 2] 3206         ldw YTEMP,y
      001105 90 85            [ 2] 3207         popw y 
      001107 91 CF 26         [ 5] 3208         ldw [YTEMP],y
      00110A 81               [ 4] 3209         ret 
                                   3210 
                                   3211 ;       WORD    ( c -- a ; <string> )
                                   3212 ;       Parse a word from input stream
                                   3213 ;       and copy it to code dictionary.
      00110B 10 F4                 3214         .word      LINK
                           00110D  3215 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      00110D 04                    3216         .byte      4
      00110E 57 4F 52 44           3217         .ascii     "WORD"
      001112                       3218 WORDD:
      001112 CD 10 A9         [ 4] 3219         CALL     PARSE
      001115 CD 0C 55         [ 4] 3220         CALL     HERE
      001118 CD 0A D0         [ 4] 3221         CALL     CELLP
                           000000  3222 .IF CASE_SENSE 
                                   3223         JP      PACKS 
                           000001  3224 .ELSE                 
      00111B CD 0D 15         [ 4] 3225         CALL     PACKS
                                   3226 ; uppercase TOKEN 
      00111E CD 05 AE         [ 4] 3227         CALL    DUPP 
      001121 CD 0C 3E         [ 4] 3228         CALL    COUNT 
      001124 CD 05 77         [ 4] 3229         CALL    TOR 
      001127 CD 04 D3         [ 4] 3230         CALL    BRAN 
      00112A 11 58                 3231         .word   UPPER2  
      00112C                       3232 UPPER:
      00112C CD 05 AE         [ 4] 3233         CALL    DUPP 
      00112F CD 05 25         [ 4] 3234         CALL    CAT
      001132 CD 05 AE         [ 4] 3235         CALL    DUPP 
      001135 CD 04 71         [ 4] 3236         CALL   DOLIT
      001138 00 61                 3237         .word   'a' 
      00113A CD 04 71         [ 4] 3238         CALL    DOLIT
      00113D 00 7B                 3239         .word   'z'+1 
      00113F CD 09 56         [ 4] 3240         CALL   WITHI 
      001142 CD 04 A4         [ 4] 3241         CALL   QBRAN
      001145 11 4F                 3242         .word  UPPER1  
      001147 CD 04 71         [ 4] 3243         CALL    DOLIT 
      00114A 00 DF                 3244         .word   0xDF 
      00114C CD 06 0D         [ 4] 3245         CALL    ANDD 
      00114F                       3246 UPPER1:
      00114F CD 05 D8         [ 4] 3247         CALL    OVER 
      001152 CD 05 14         [ 4] 3248         CALL    CSTOR          
      001155 CD 0A FB         [ 4] 3249         CALL    ONEP 
      001158                       3250 UPPER2: 
      001158 CD 04 85         [ 4] 3251         CALL    DONXT
      00115B 11 2C                 3252         .word   UPPER  
      00115D CD 05 A4         [ 4] 3253         CALL    DROP  
      001160 81               [ 4] 3254         RET 
                                   3255 .ENDIF 
                                   3256 
                                   3257 ;       TOKEN   ( -- a ; <string> )
                                   3258 ;       Parse a word from input stream
                                   3259 ;       and copy it to name dictionary.
      001161 11 0D                 3260         .word      LINK
                           001163  3261 LINK = . 
      001163 05                    3262         .byte      5
      001164 54 4F 4B 45 4E        3263         .ascii     "TOKEN"
      001169                       3264 TOKEN:
      001169 CD 0B 5A         [ 4] 3265         CALL     BLANK
      00116C CC 11 12         [ 2] 3266         JP     WORDD
                                   3267 
                                   3268 ;; Dictionary search
                                   3269 
                                   3270 ;       NAME>   ( na -- ca )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



                                   3271 ;       Return a code address given
                                   3272 ;       a name address.
      00116F 11 63                 3273         .word      LINK
                           001171  3274 LINK = . 
      001171 05                    3275         .byte      5
      001172 4E 41 4D 45 3E        3276         .ascii     "NAME>"
      001177                       3277 NAMET:
      001177 CD 0C 3E         [ 4] 3278         CALL     COUNT
      00117A CD 04 71         [ 4] 3279         CALL     DOLIT
      00117D 00 1F                 3280         .word      31
      00117F CD 06 0D         [ 4] 3281         CALL     ANDD
      001182 CC 07 DD         [ 2] 3282         JP     PLUS
                                   3283 
                                   3284 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   3285 ;       Compare u cells in two
                                   3286 ;       strings. Return 0 if identical.
      001185 11 71                 3287         .word      LINK
                           001187  3288 LINK = . 
      001187 05                    3289         .byte       5
      001188 53 41 4D 45 3F        3290         .ascii     "SAME?"
      00118D                       3291 SAMEQ:
      00118D CD 0B 08         [ 4] 3292         CALL     ONEM
      001190 CD 05 77         [ 4] 3293         CALL     TOR
      001193 20 29            [ 2] 3294         JRA     SAME2
      001195 CD 05 D8         [ 4] 3295 SAME1:  CALL     OVER
      001198 CD 05 6B         [ 4] 3296         CALL     RAT
      00119B CD 07 DD         [ 4] 3297         CALL     PLUS
      00119E CD 05 25         [ 4] 3298         CALL     CAT
      0011A1 CD 05 D8         [ 4] 3299         CALL     OVER
      0011A4 CD 05 6B         [ 4] 3300         CALL     RAT
      0011A7 CD 07 DD         [ 4] 3301         CALL     PLUS
      0011AA CD 05 25         [ 4] 3302         CALL     CAT
      0011AD CD 08 56         [ 4] 3303         CALL     SUBB
      0011B0 CD 07 6B         [ 4] 3304         CALL     QDUP
      0011B3 CD 04 A4         [ 4] 3305         CALL     QBRAN
      0011B6 11 BE                 3306         .word      SAME2
      0011B8 CD 05 58         [ 4] 3307         CALL     RFROM
      0011BB CC 05 A4         [ 2] 3308         JP     DROP
      0011BE CD 04 85         [ 4] 3309 SAME2:  CALL     DONXT
      0011C1 11 95                 3310         .word      SAME1
      0011C3 CC 0B 67         [ 2] 3311         JP     ZERO
                                   3312 
                                   3313 ;       find    ( a va -- ca na | a F )
                                   3314 ;       Search vocabulary for string.
                                   3315 ;       Return ca and na if succeeded.
      0011C6 11 87                 3316         .word      LINK
                           0011C8  3317 LINK = . 
      0011C8 04                    3318         .byte      4
      0011C9 46 49 4E 44           3319         .ascii     "FIND"
      0011CD                       3320 FIND:
      0011CD CD 05 BE         [ 4] 3321         CALL     SWAPP
      0011D0 CD 05 AE         [ 4] 3322         CALL     DUPP
      0011D3 CD 05 25         [ 4] 3323         CALL     CAT
      0011D6 CD 06 8D         [ 4] 3324         CALL     TEMP
      0011D9 CD 04 F0         [ 4] 3325         CALL     STORE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      0011DC CD 05 AE         [ 4] 3326         CALL     DUPP
      0011DF CD 05 07         [ 4] 3327         CALL     AT
      0011E2 CD 05 77         [ 4] 3328         CALL     TOR
      0011E5 CD 0A D0         [ 4] 3329         CALL     CELLP
      0011E8 CD 05 BE         [ 4] 3330         CALL     SWAPP
      0011EB CD 05 07         [ 4] 3331 FIND1:  CALL     AT
      0011EE CD 05 AE         [ 4] 3332         CALL     DUPP
      0011F1 CD 04 A4         [ 4] 3333         CALL     QBRAN
      0011F4 12 2A                 3334         .word      FIND6
      0011F6 CD 05 AE         [ 4] 3335         CALL     DUPP
      0011F9 CD 05 07         [ 4] 3336         CALL     AT
      0011FC CD 04 71         [ 4] 3337         CALL     DOLIT
      0011FF 1F 7F                 3338         .word      MASKK
      001201 CD 06 0D         [ 4] 3339         CALL     ANDD
      001204 CD 05 6B         [ 4] 3340         CALL     RAT
      001207 CD 06 36         [ 4] 3341         CALL     XORR
      00120A CD 04 A4         [ 4] 3342         CALL     QBRAN
      00120D 12 19                 3343         .word      FIND2
      00120F CD 0A D0         [ 4] 3344         CALL     CELLP
      001212 CD 04 71         [ 4] 3345         CALL     DOLIT
      001215 FF FF                 3346         .word     0xFFFF
      001217 20 0C            [ 2] 3347         JRA     FIND3
      001219 CD 0A D0         [ 4] 3348 FIND2:  CALL     CELLP
      00121C CD 06 8D         [ 4] 3349         CALL     TEMP
      00121F CD 05 07         [ 4] 3350         CALL     AT
      001222 CD 11 8D         [ 4] 3351         CALL     SAMEQ
      001225 CD 04 D3         [ 4] 3352 FIND3:  CALL     BRAN
      001228 12 39                 3353         .word      FIND4
      00122A CD 05 58         [ 4] 3354 FIND6:  CALL     RFROM
      00122D CD 05 A4         [ 4] 3355         CALL     DROP
      001230 CD 05 BE         [ 4] 3356         CALL     SWAPP
      001233 CD 0A DF         [ 4] 3357         CALL     CELLM
      001236 CC 05 BE         [ 2] 3358         JP     SWAPP
      001239 CD 04 A4         [ 4] 3359 FIND4:  CALL     QBRAN
      00123C 12 46                 3360         .word      FIND5
      00123E CD 0A DF         [ 4] 3361         CALL     CELLM
      001241 CD 0A DF         [ 4] 3362         CALL     CELLM
      001244 20 A5            [ 2] 3363         JRA     FIND1
      001246 CD 05 58         [ 4] 3364 FIND5:  CALL     RFROM
      001249 CD 05 A4         [ 4] 3365         CALL     DROP
      00124C CD 05 BE         [ 4] 3366         CALL     SWAPP
      00124F CD 05 A4         [ 4] 3367         CALL     DROP
      001252 CD 0A DF         [ 4] 3368         CALL     CELLM
      001255 CD 05 AE         [ 4] 3369         CALL     DUPP
      001258 CD 11 77         [ 4] 3370         CALL     NAMET
      00125B CC 05 BE         [ 2] 3371         JP     SWAPP
                                   3372 
                                   3373 ;       NAME?   ( a -- ca na | a F )
                                   3374 ;       Search vocabularies for a string.
      00125E 11 C8                 3375         .word      LINK
                           001260  3376 LINK = . 
      001260 05                    3377         .byte      5
      001261 4E 41 4D 45 3F        3378         .ascii     "NAME?"
      001266                       3379 NAMEQ:
      001266 CD 07 01         [ 4] 3380         CALL   CNTXT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      001269 CC 11 CD         [ 2] 3381         JP     FIND
                                   3382 
                                   3383 ;; Terminal response
                                   3384 
                                   3385 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3386 ;       Backup cursor by one character.
      00126C 12 60                 3387         .word      LINK
                           00126E  3388 LINK = . 
      00126E 02                    3389         .byte      2
      00126F 5E 48                 3390         .ascii     "^H"
      001271                       3391 BKSP:
      001271 CD 05 77         [ 4] 3392         CALL     TOR
      001274 CD 05 D8         [ 4] 3393         CALL     OVER
      001277 CD 05 58         [ 4] 3394         CALL     RFROM
      00127A CD 05 BE         [ 4] 3395         CALL     SWAPP
      00127D CD 05 D8         [ 4] 3396         CALL     OVER
      001280 CD 06 36         [ 4] 3397         CALL     XORR
      001283 CD 04 A4         [ 4] 3398         CALL     QBRAN
      001286 12 A1                 3399         .word      BACK1
      001288 CD 04 71         [ 4] 3400         CALL     DOLIT
      00128B 00 08                 3401         .word      BKSPP
      00128D CD 04 36         [ 4] 3402         CALL     EMIT
      001290 CD 0B 08         [ 4] 3403         CALL     ONEM
      001293 CD 0B 5A         [ 4] 3404         CALL     BLANK
      001296 CD 04 36         [ 4] 3405         CALL     EMIT
      001299 CD 04 71         [ 4] 3406         CALL     DOLIT
      00129C 00 08                 3407         .word      BKSPP
      00129E CC 04 36         [ 2] 3408         JP     EMIT
      0012A1 81               [ 4] 3409 BACK1:  RET
                                   3410 
                                   3411 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3412 ;       Accept and echo key stroke
                                   3413 ;       and bump cursor.
      0012A2 12 6E                 3414         .word      LINK
                           0012A4  3415 LINK = . 
      0012A4 03                    3416         .byte      3
      0012A5 54 41 50              3417         .ascii     "TAP"
      0012A8                       3418 TAP:
      0012A8 CD 05 AE         [ 4] 3419         CALL     DUPP
      0012AB CD 04 36         [ 4] 3420         CALL     EMIT
      0012AE CD 05 D8         [ 4] 3421         CALL     OVER
      0012B1 CD 05 14         [ 4] 3422         CALL     CSTOR
      0012B4 CC 0A FB         [ 2] 3423         JP     ONEP
                                   3424 
                                   3425 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3426 ;       Process a key stroke,
                                   3427 ;       CR,LF or backspace.
      0012B7 12 A4                 3428         .word      LINK
                           0012B9  3429 LINK = . 
      0012B9 04                    3430         .byte      4
      0012BA 4B 54 41 50           3431         .ascii     "KTAP"
      0012BE                       3432 KTAP:
      0012BE CD 05 AE         [ 4] 3433         CALL     DUPP
      0012C1 CD 04 71         [ 4] 3434         CALL     DOLIT
                           000001  3435 .if EOL_CR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      0012C4 00 0D                 3436         .word   CRR
                           000000  3437 .else ; EOL_LF 
                                   3438         .word   LF
                                   3439 .endif 
      0012C6 CD 06 36         [ 4] 3440         CALL     XORR
      0012C9 CD 04 A4         [ 4] 3441         CALL     QBRAN
      0012CC 12 E4                 3442         .word      KTAP2
      0012CE CD 04 71         [ 4] 3443         CALL     DOLIT
      0012D1 00 08                 3444         .word      BKSPP
      0012D3 CD 06 36         [ 4] 3445         CALL     XORR
      0012D6 CD 04 A4         [ 4] 3446         CALL     QBRAN
      0012D9 12 E1                 3447         .word      KTAP1
      0012DB CD 0B 5A         [ 4] 3448         CALL     BLANK
      0012DE CC 12 A8         [ 2] 3449         JP     TAP
      0012E1 CC 12 71         [ 2] 3450 KTAP1:  JP     BKSP
      0012E4 CD 05 A4         [ 4] 3451 KTAP2:  CALL     DROP
      0012E7 CD 05 BE         [ 4] 3452         CALL     SWAPP
      0012EA CD 05 A4         [ 4] 3453         CALL     DROP
      0012ED CC 05 AE         [ 2] 3454         JP     DUPP
                                   3455 
                                   3456 ;       accept  ( b u -- b u )
                                   3457 ;       Accept characters to input
                                   3458 ;       buffer. Return with actual count.
      0012F0 12 B9                 3459         .word      LINK
                           0012F2  3460 LINK = . 
      0012F2 06                    3461         .byte      6
      0012F3 41 43 43 45 50 54     3462         .ascii     "ACCEPT"
      0012F9                       3463 ACCEP:
      0012F9 CD 05 D8         [ 4] 3464         CALL     OVER
      0012FC CD 07 DD         [ 4] 3465         CALL     PLUS
      0012FF CD 05 D8         [ 4] 3466         CALL     OVER
      001302 CD 07 C8         [ 4] 3467 ACCP1:  CALL     DDUP
      001305 CD 06 36         [ 4] 3468         CALL     XORR
      001308 CD 04 A4         [ 4] 3469         CALL     QBRAN
      00130B 13 2D                 3470         .word      ACCP4
      00130D CD 0E 76         [ 4] 3471         CALL     KEY
      001310 CD 05 AE         [ 4] 3472         CALL     DUPP
      001313 CD 0B 5A         [ 4] 3473         CALL     BLANK
      001316 CD 04 71         [ 4] 3474         CALL     DOLIT
      001319 00 7F                 3475         .word      127
      00131B CD 09 56         [ 4] 3476         CALL     WITHI
      00131E CD 04 A4         [ 4] 3477         CALL     QBRAN
      001321 13 28                 3478         .word      ACCP2
      001323 CD 12 A8         [ 4] 3479         CALL     TAP
      001326 20 03            [ 2] 3480         JRA     ACCP3
      001328 CD 12 BE         [ 4] 3481 ACCP2:  CALL     KTAP
      00132B 20 D5            [ 2] 3482 ACCP3:  JRA     ACCP1
      00132D CD 05 A4         [ 4] 3483 ACCP4:  CALL     DROP
      001330 CD 05 D8         [ 4] 3484         CALL     OVER
      001333 CC 08 56         [ 2] 3485         JP     SUBB
                                   3486 
                                   3487 ;       QUERY   ( -- )
                                   3488 ;       Accept input stream to
                                   3489 ;       terminal input buffer.
      001336 12 F2                 3490         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



                                   3491         
                           001338  3492 LINK = . 
      001338 05                    3493         .byte      5
      001339 51 55 45 52 59        3494         .ascii     "QUERY"
      00133E                       3495 QUERY:
      00133E CD 0C 77         [ 4] 3496         CALL     TIB
      001341 CD 04 71         [ 4] 3497         CALL     DOLIT
      001344 00 50                 3498         .word      80
      001346 CD 12 F9         [ 4] 3499         CALL     ACCEP
      001349 CD 06 AC         [ 4] 3500         CALL     NTIB
      00134C CD 04 F0         [ 4] 3501         CALL     STORE
      00134F CD 05 A4         [ 4] 3502         CALL     DROP
      001352 CD 0B 67         [ 4] 3503         CALL     ZERO
      001355 CD 06 9C         [ 4] 3504         CALL     INN
      001358 CC 04 F0         [ 2] 3505         JP     STORE
                                   3506 
                                   3507 ;       ABORT   ( -- )
                                   3508 ;       Reset data stack and
                                   3509 ;       jump to QUIT.
      00135B 13 38                 3510         .word      LINK
                           00135D  3511 LINK = . 
      00135D 05                    3512         .byte      5
      00135E 41 42 4F 52 54        3513         .ascii     "ABORT"
      001363                       3514 ABORT:
      001363 CD 14 5A         [ 4] 3515         CALL     PRESE
      001366 CC 14 77         [ 2] 3516         JP     QUIT
                                   3517 
                                   3518 ;       abort"  ( f -- )
                                   3519 ;       Run time routine of ABORT".
                                   3520 ;       Abort with a message.
      001369 13 5D                 3521         .word      LINK
                           00136B  3522 LINK = . 
      00136B 46                    3523 	.byte      COMPO+6
      00136C 41 42 4F 52 54        3524         .ascii     "ABORT"
      001371 22                    3525         .byte      '"'
      001372                       3526 ABORQ:
      001372 CD 04 A4         [ 4] 3527         CALL     QBRAN
      001375 13 91                 3528         .word      ABOR2   ;text flag
      001377 CD 0F 0C         [ 4] 3529         CALL     DOSTR
      00137A CD 0E AE         [ 4] 3530 ABOR1:  CALL     SPACE
      00137D CD 0C 3E         [ 4] 3531         CALL     COUNT
      001380 CD 0E D8         [ 4] 3532         CALL     TYPES
      001383 CD 04 71         [ 4] 3533         CALL     DOLIT
      001386 00 3F                 3534         .word     63 ; "?"
      001388 CD 04 36         [ 4] 3535         CALL     EMIT
      00138B CD 0E F6         [ 4] 3536         CALL     CR
      00138E CC 13 63         [ 2] 3537         JP     ABORT   ;pass error string
      001391 CD 0F 0C         [ 4] 3538 ABOR2:  CALL     DOSTR
      001394 CC 05 A4         [ 2] 3539         JP     DROP
                                   3540 
                                   3541 ;; The text interpreter
                                   3542 
                                   3543 ;       $INTERPRET      ( a -- )
                                   3544 ;       Interpret a word. If failed,
                                   3545 ;       try to convert it to an integer.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      001397 13 6B                 3546         .word      LINK
                           001399  3547 LINK = . 
      001399 0A                    3548         .byte      10
      00139A 24 49 4E 54 45 52 50  3549         .ascii     "$INTERPRET"
             52 45 54
      0013A4                       3550 INTER:
      0013A4 CD 12 66         [ 4] 3551         CALL     NAMEQ
      0013A7 CD 07 6B         [ 4] 3552         CALL     QDUP    ;?defined
      0013AA CD 04 A4         [ 4] 3553         CALL     QBRAN
      0013AD 13 CE                 3554         .word      INTE1
      0013AF CD 05 07         [ 4] 3555         CALL     AT
      0013B2 CD 04 71         [ 4] 3556         CALL     DOLIT
      0013B5 40 00                 3557 	.word       0x4000	; COMPO*256
      0013B7 CD 06 0D         [ 4] 3558         CALL     ANDD    ;?compile only lexicon bits
      0013BA CD 13 72         [ 4] 3559         CALL     ABORQ
      0013BD 0D                    3560         .byte      13
      0013BE 20 63 6F 6D 70 69 6C  3561         .ascii     " compile only"
             65 20 6F 6E 6C 79
      0013CB CC 04 E3         [ 2] 3562         JP     EXECU
      0013CE CD 24 6E         [ 4] 3563 INTE1:  CALL     NUMBQ   ;convert a number
      0013D1 CD 04 A4         [ 4] 3564         CALL     QBRAN
      0013D4 13 7A                 3565         .word    ABOR1
      0013D6 81               [ 4] 3566         RET
                                   3567 
                                   3568 ;       [       ( -- )
                                   3569 ;       Start  text interpreter.
      0013D7 13 99                 3570         .word      LINK
                           0013D9  3571 LINK = . 
      0013D9 81                    3572 	.byte      IMEDD+1
      0013DA 5B                    3573         .ascii     "["
      0013DB                       3574 LBRAC:
      0013DB CD 04 71         [ 4] 3575         CALL   DOLIT
      0013DE 13 A4                 3576         .word  INTER
      0013E0 CD 06 DF         [ 4] 3577         CALL   TEVAL
      0013E3 CC 04 F0         [ 2] 3578         JP     STORE
                                   3579 
                                   3580 ;       .OK     ( -- )
                                   3581 ;       Display 'ok' while interpreting.
      0013E6 13 D9                 3582         .word      LINK
                           0013E8  3583 LINK = . 
      0013E8 03                    3584         .byte      3
      0013E9 2E 4F 4B              3585         .ascii     ".OK"
      0013EC                       3586 DOTOK:
      0013EC CD 04 71         [ 4] 3587         CALL     DOLIT
      0013EF 13 A4                 3588         .word      INTER
      0013F1 CD 06 DF         [ 4] 3589         CALL     TEVAL
      0013F4 CD 05 07         [ 4] 3590         CALL     AT
      0013F7 CD 08 7E         [ 4] 3591         CALL     EQUAL
      0013FA CD 04 A4         [ 4] 3592         CALL     QBRAN
      0013FD 14 06                 3593         .word      DOTO1
      0013FF CD 0F 35         [ 4] 3594         CALL     DOTQP
      001402 03                    3595         .byte      3
      001403 20 6F 6B              3596         .ascii     " ok"
      001406 CC 0E F6         [ 2] 3597 DOTO1:  JP     CR
                                   3598 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                   3599 ;       ?STACK  ( -- )
                                   3600 ;       Abort if stack underflows.
      001409 13 E8                 3601         .word      LINK
                           00140B  3602 LINK = . 
      00140B 06                    3603         .byte      6
      00140C 3F 53 54 41 43 4B     3604         .ascii     "?STACK"
      001412                       3605 QSTAC: 
      001412 CD 0B A9         [ 4] 3606         CALL     DEPTH
      001415 CD 05 E7         [ 4] 3607         CALL     ZLESS   ;check only for underflow
      001418 CD 13 72         [ 4] 3608         CALL     ABORQ
      00141B 0B                    3609         .byte      11
      00141C 20 75 6E 64 65 72 66  3610         .ascii     " underflow "
             6C 6F 77 20
      001427 81               [ 4] 3611         RET
                                   3612 
                                   3613 ;       EVAL    ( -- )
                                   3614 ;       Interpret  input stream.
      001428 14 0B                 3615         .word      LINK
                           00142A  3616 LINK = . 
      00142A 04                    3617         .byte      4
      00142B 45 56 41 4C           3618         .ascii     "EVAL"
      00142F                       3619 EVAL:
      00142F CD 11 69         [ 4] 3620 EVAL1:  CALL     TOKEN
      001432 CD 05 AE         [ 4] 3621         CALL     DUPP
      001435 CD 05 25         [ 4] 3622         CALL     CAT     ;?input stream empty
      001438 CD 04 A4         [ 4] 3623         CALL     QBRAN
      00143B 14 4B                 3624         .word    EVAL2
      00143D CD 06 DF         [ 4] 3625         CALL     TEVAL
      001440 CD 0C 8B         [ 4] 3626         CALL     ATEXE
      001443 CD 14 12         [ 4] 3627         CALL     QSTAC   ;evaluate input, check stack
      001446 CD 04 D3         [ 4] 3628         CALL     BRAN
      001449 14 2F                 3629         .word    EVAL1
      00144B CD 05 A4         [ 4] 3630 EVAL2:  CALL     DROP
      00144E CC 13 EC         [ 2] 3631         JP       DOTOK
                                   3632 
                                   3633 ;       PRESET  ( -- )
                                   3634 ;       Reset data stack pointer and
                                   3635 ;       terminal input buffer.
      001451 14 2A                 3636         .word      LINK
                           001453  3637 LINK = . 
      001453 06                    3638         .byte      6
      001454 50 52 45 53 45 54     3639         .ascii     "PRESET"
      00145A                       3640 PRESE:
      00145A CD 04 71         [ 4] 3641         CALL     DOLIT
      00145D 16 80                 3642         .word      SPP
      00145F CD 05 9B         [ 4] 3643         CALL     SPSTO
      001462 CD 04 71         [ 4] 3644         CALL     DOLIT
      001465 17 00                 3645         .word      TIBB
      001467 CD 06 AC         [ 4] 3646         CALL     NTIB
      00146A CD 0A D0         [ 4] 3647         CALL     CELLP
      00146D CC 04 F0         [ 2] 3648         JP     STORE
                                   3649 
                                   3650 ;       QUIT    ( -- )
                                   3651 ;       Reset return stack pointer
                                   3652 ;       and start text interpreter.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      001470 14 53                 3653         .word      LINK
                           001472  3654 LINK = . 
      001472 04                    3655         .byte      4
      001473 51 55 49 54           3656         .ascii     "QUIT"
      001477                       3657 QUIT:
      001477 CD 04 71         [ 4] 3658         CALL     DOLIT
      00147A 17 FF                 3659         .word      RPP
      00147C CD 05 42         [ 4] 3660         CALL     RPSTO   ;reset return stack pointer
      00147F CD 13 DB         [ 4] 3661 QUIT1:  CALL     LBRAC   ;start interpretation
      001482 CD 13 3E         [ 4] 3662 QUIT2:  CALL     QUERY   ;get input
      001485 CD 14 2F         [ 4] 3663         CALL     EVAL
      001488 20 F8            [ 2] 3664         JRA     QUIT2   ;continue till error
                                   3665 
                                   3666 ;; The compiler
                                   3667 
                                   3668 ;       '       ( -- ca )
                                   3669 ;       Search vocabularies for
                                   3670 ;       next word in input stream.
      00148A 14 72                 3671         .word      LINK
                           00148C  3672 LINK = . 
      00148C 01                    3673         .byte      1
      00148D 27                    3674         .ascii     "'"
      00148E                       3675 TICK:
      00148E CD 11 69         [ 4] 3676         CALL     TOKEN
      001491 CD 12 66         [ 4] 3677         CALL     NAMEQ   ;?defined
      001494 CD 04 A4         [ 4] 3678         CALL     QBRAN
      001497 13 7A                 3679         .word      ABOR1
      001499 81               [ 4] 3680         RET     ;yes, push code address
                                   3681 
                                   3682 ;       ALLOT   ( n -- )
                                   3683 ;       Allocate n bytes to RAM 
      00149A 14 8C                 3684         .word      LINK
                           00149C  3685         LINK = . 
      00149C 05                    3686         .byte      5
      00149D 41 4C 4C 4F 54        3687         .ascii     "ALLOT"
      0014A2                       3688 ALLOT:
      0014A2 CD 07 0F         [ 4] 3689         CALL     VPP
                                   3690 ; must update APP_VP each time VP is modidied
      0014A5 CD 0B D7         [ 4] 3691         call PSTOR 
      0014A8 CC 1B EB         [ 2] 3692         jp UPDATVP 
                                   3693 
                                   3694 ;       ,       ( w -- )
                                   3695 ;         Compile an integer into
                                   3696 ;         variable space.
      0014AB 14 9C                 3697         .word      LINK
                           0014AD  3698 LINK = . 
      0014AD 01                    3699         .byte      1
      0014AE 2C                    3700         .ascii     ","
      0014AF                       3701 COMMA:
      0014AF CD 0C 55         [ 4] 3702         CALL     HERE
      0014B2 CD 05 AE         [ 4] 3703         CALL     DUPP
      0014B5 CD 0A D0         [ 4] 3704         CALL     CELLP   ;cell boundary
      0014B8 CD 07 0F         [ 4] 3705         CALL     VPP
      0014BB CD 04 F0         [ 4] 3706         CALL     STORE
      0014BE CC 04 F0         [ 2] 3707         JP     STORE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



                                   3708 
                                   3709 ;       C,      ( c -- )
                                   3710 ;       Compile a byte into
                                   3711 ;       variables space.
      0014C1 14 AD                 3712        .word      LINK
                           0014C3  3713 LINK = . 
      0014C3 02                    3714         .byte      2
      0014C4 43 2C                 3715         .ascii     "C,"
      0014C6                       3716 CCOMMA:
      0014C6 CD 0C 55         [ 4] 3717         CALL     HERE
      0014C9 CD 05 AE         [ 4] 3718         CALL     DUPP
      0014CC CD 0A FB         [ 4] 3719         CALL     ONEP
      0014CF CD 07 0F         [ 4] 3720         CALL     VPP
      0014D2 CD 04 F0         [ 4] 3721         CALL     STORE
      0014D5 CC 05 14         [ 2] 3722         JP     CSTOR
                                   3723 
                                   3724 ;       [COMPILE]       ( -- ; <string> )
                                   3725 ;       Compile next immediate
                                   3726 ;       word into code dictionary.
      0014D8 14 C3                 3727         .word      LINK
                           0014DA  3728 LINK = . 
      0014DA 89                    3729 	.byte      IMEDD+9
      0014DB 5B 43 4F 4D 50 49 4C  3730         .ascii     "[COMPILE]"
             45 5D
      0014E4                       3731 BCOMP:
      0014E4 CD 14 8E         [ 4] 3732         CALL     TICK
      0014E7 CC 17 BA         [ 2] 3733         JP     JSRC
                                   3734 
                                   3735 ;       COMPILE ( -- )
                                   3736 ;       Compile next jsr in
                                   3737 ;       colon list to code dictionary.
      0014EA 14 DA                 3738         .word      LINK
                           0014EC  3739 LINK = . 
      0014EC 47                    3740 	.byte      COMPO+7
      0014ED 43 4F 4D 50 49 4C 45  3741         .ascii     "COMPILE"
      0014F4                       3742 COMPI:
      0014F4 CD 05 58         [ 4] 3743         CALL     RFROM
      0014F7 CD 05 AE         [ 4] 3744         CALL     DUPP
      0014FA CD 05 07         [ 4] 3745         CALL     AT
      0014FD CD 17 BA         [ 4] 3746         CALL     JSRC    ;compile subroutine
      001500 CD 0A D0         [ 4] 3747         CALL     CELLP
      001503 90 93            [ 1] 3748         ldw y,x 
      001505 90 FE            [ 2] 3749         ldw y,(y)
      001507 1C 00 02         [ 2] 3750         addw x,#CELLL 
      00150A 90 FC            [ 2] 3751         jp (y)
                                   3752 
                                   3753 ;       LITERAL ( w -- )
                                   3754 ;       Compile tos to dictionary
                                   3755 ;       as an integer literal.
      00150C 14 EC                 3756         .word      LINK
                           00150E  3757 LINK = . 
      00150E 87                    3758 	.byte      IMEDD+7
      00150F 4C 49 54 45 52 41 4C  3759         .ascii     "LITERAL"
      001516                       3760 LITER:
      001516 CD 14 F4         [ 4] 3761         CALL     COMPI
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      001519 04 71                 3762         .word DOLIT 
      00151B CC 14 AF         [ 2] 3763         JP     COMMA
                                   3764 
                                   3765 ;       $,"     ( -- )
                                   3766 ;       Compile a literal string
                                   3767 ;       up to next " .
      00151E 15 0E                 3768         .word      LINK
                           001520  3769 LINK = . 
      001520 03                    3770         .byte      3
      001521 24 2C 22              3771         .byte     '$',',','"'
      001524                       3772 STRCQ:
      001524 CD 04 71         [ 4] 3773         CALL     DOLIT
      001527 00 22                 3774         .word     34	; "
      001529 CD 10 A9         [ 4] 3775         CALL     PARSE
      00152C CD 0C 55         [ 4] 3776         CALL     HERE
      00152F CD 0D 15         [ 4] 3777         CALL     PACKS   ;string to code dictionary
      001532 CD 0C 3E         [ 4] 3778         CALL     COUNT
      001535 CD 07 DD         [ 4] 3779         CALL     PLUS    ;calculate aligned end of string
      001538 CD 07 0F         [ 4] 3780         CALL     VPP
      00153B CC 04 F0         [ 2] 3781         JP     STORE
                                   3782 
                                   3783 ;; Structures
                                   3784 
                                   3785 ;       FOR     ( -- a )
                                   3786 ;       Start a FOR-NEXT loop
                                   3787 ;       structure in a colon definition.
      00153E 15 20                 3788         .word      LINK
                           001540  3789 LINK = . 
      001540 83                    3790 	.byte      IMEDD+3
      001541 46 4F 52              3791         .ascii     "FOR"
      001544                       3792 FOR:
      001544 CD 14 F4         [ 4] 3793         CALL     COMPI
      001547 05 77                 3794         .word TOR 
      001549 CC 0C 55         [ 2] 3795         JP     HERE
                                   3796 
                                   3797 ;       NEXT    ( a -- )
                                   3798 ;       Terminate a FOR-NEXT loop.
      00154C 15 40                 3799         .word      LINK
                           00154E  3800 LINK = . 
      00154E 84                    3801 	.byte      IMEDD+4
      00154F 4E 45 58 54           3802         .ascii     "NEXT"
      001553                       3803 NEXT:
      001553 CD 14 F4         [ 4] 3804         CALL     COMPI
      001556 04 85                 3805         .word DONXT 
      001558 CD 07 5B         [ 4] 3806         call ADRADJ
      00155B CC 14 AF         [ 2] 3807         JP     COMMA
                                   3808 
                                   3809 ;       I ( -- n )
                                   3810 ;       stack FOR-NEXT COUNTER 
      00155E 15 4E                 3811         .word LINK 
                           001560  3812         LINK=.
      001560 01                    3813         .byte 1 
      001561 49                    3814         .ascii "I"
      001562                       3815 IFETCH: 
      001562 1D 00 02         [ 2] 3816         subw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      001565 16 03            [ 2] 3817         ldw y,(3,sp)
      001567 FF               [ 2] 3818         ldw (x),y 
      001568 81               [ 4] 3819         ret 
                                   3820 
                                   3821 ;       BEGIN   ( -- a )
                                   3822 ;       Start an infinite or
                                   3823 ;       indefinite loop structure.
      001569 15 60                 3824         .word      LINK
                           00156B  3825 LINK = . 
      00156B 85                    3826 	.byte      IMEDD+5
      00156C 42 45 47 49 4E        3827         .ascii     "BEGIN"
      001571                       3828 BEGIN:
      001571 CC 0C 55         [ 2] 3829         JP     HERE
                                   3830 
                                   3831 ;       UNTIL   ( a -- )
                                   3832 ;       Terminate a BEGIN-UNTIL
                                   3833 ;       indefinite loop structure.
      001574 15 6B                 3834         .word      LINK
                           001576  3835 LINK = . 
      001576 85                    3836 	.byte      IMEDD+5
      001577 55 4E 54 49 4C        3837         .ascii     "UNTIL"
      00157C                       3838 UNTIL:
      00157C CD 14 F4         [ 4] 3839         CALL     COMPI
      00157F 04 A4                 3840         .word    QBRAN 
      001581 CD 07 5B         [ 4] 3841         call ADRADJ
      001584 CC 14 AF         [ 2] 3842         JP     COMMA
                                   3843 
                                   3844 ;       AGAIN   ( a -- )
                                   3845 ;       Terminate a BEGIN-AGAIN
                                   3846 ;       infinite loop structure.
      001587 15 76                 3847         .word      LINK
                           001589  3848 LINK = . 
      001589 85                    3849 	.byte      IMEDD+5
      00158A 41 47 41 49 4E        3850         .ascii     "AGAIN"
      00158F                       3851 AGAIN:
      00158F CD 14 F4         [ 4] 3852         CALL     COMPI
      001592 04 D3                 3853         .word BRAN
      001594 CD 07 5B         [ 4] 3854         call ADRADJ 
      001597 CC 14 AF         [ 2] 3855         JP     COMMA
                                   3856 
                                   3857 ;       IF      ( -- A )
                                   3858 ;       Begin a conditional branch.
      00159A 15 89                 3859         .word      LINK
                           00159C  3860 LINK = . 
      00159C 82                    3861 	.byte      IMEDD+2
      00159D 49 46                 3862         .ascii     "IF"
      00159F                       3863 IFF:
      00159F CD 14 F4         [ 4] 3864         CALL     COMPI
      0015A2 04 A4                 3865         .word QBRAN
      0015A4 CD 0C 55         [ 4] 3866         CALL     HERE
      0015A7 CD 0B 67         [ 4] 3867         CALL     ZERO
      0015AA CC 14 AF         [ 2] 3868         JP     COMMA
                                   3869 
                                   3870 ;       THEN        ( A -- )
                                   3871 ;       Terminate a conditional branch structure.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      0015AD 15 9C                 3872         .word      LINK
                           0015AF  3873 LINK = . 
      0015AF 84                    3874 	.byte      IMEDD+4
      0015B0 54 48 45 4E           3875         .ascii     "THEN"
      0015B4                       3876 THENN:
      0015B4 CD 0C 55         [ 4] 3877         CALL     HERE
      0015B7 CD 07 5B         [ 4] 3878         call ADRADJ 
      0015BA CD 05 BE         [ 4] 3879         CALL     SWAPP
      0015BD CC 04 F0         [ 2] 3880         JP     STORE
                                   3881 
                                   3882 ;       ELSE        ( A -- A )
                                   3883 ;       Start the false clause in an IF-ELSE-THEN structure.
      0015C0 15 AF                 3884         .word      LINK
                           0015C2  3885 LINK = . 
      0015C2 84                    3886 	.byte      IMEDD+4
      0015C3 45 4C 53 45           3887         .ascii     "ELSE"
      0015C7                       3888 ELSEE:
      0015C7 CD 14 F4         [ 4] 3889         CALL     COMPI
      0015CA 04 D3                 3890         .word BRAN
      0015CC CD 0C 55         [ 4] 3891         CALL     HERE
      0015CF CD 0B 67         [ 4] 3892         CALL     ZERO
      0015D2 CD 14 AF         [ 4] 3893         CALL     COMMA
      0015D5 CD 05 BE         [ 4] 3894         CALL     SWAPP
      0015D8 CD 0C 55         [ 4] 3895         CALL     HERE
      0015DB CD 07 5B         [ 4] 3896         call ADRADJ 
      0015DE CD 05 BE         [ 4] 3897         CALL     SWAPP
      0015E1 CC 04 F0         [ 2] 3898         JP     STORE
                                   3899 
                                   3900 ;       AHEAD       ( -- A )
                                   3901 ;       Compile a forward branch instruction.
      0015E4 15 C2                 3902         .word      LINK
                           0015E6  3903 LINK = . 
      0015E6 85                    3904 	.byte      IMEDD+5
      0015E7 41 48 45 41 44        3905         .ascii     "AHEAD"
      0015EC                       3906 AHEAD:
      0015EC CD 14 F4         [ 4] 3907         CALL     COMPI
      0015EF 04 D3                 3908         .word BRAN
      0015F1 CD 0C 55         [ 4] 3909         CALL     HERE
      0015F4 CD 0B 67         [ 4] 3910         CALL     ZERO
      0015F7 CC 14 AF         [ 2] 3911         JP     COMMA
                                   3912 
                                   3913 ;       WHILE       ( a -- A a )
                                   3914 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      0015FA 15 E6                 3915         .word      LINK
                           0015FC  3916 LINK = . 
      0015FC 85                    3917 	.byte      IMEDD+5
      0015FD 57 48 49 4C 45        3918         .ascii     "WHILE"
      001602                       3919 WHILE:
      001602 CD 14 F4         [ 4] 3920         CALL     COMPI
      001605 04 A4                 3921         .word QBRAN
      001607 CD 0C 55         [ 4] 3922         CALL     HERE
      00160A CD 0B 67         [ 4] 3923         CALL     ZERO
      00160D CD 14 AF         [ 4] 3924         CALL     COMMA
      001610 CC 05 BE         [ 2] 3925         JP     SWAPP
                                   3926 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                                   3927 ;       REPEAT      ( A a -- )
                                   3928 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      001613 15 FC                 3929         .word      LINK
                           001615  3930 LINK = . 
      001615 86                    3931         .byte      IMEDD+6
      001616 52 45 50 45 41 54     3932         .ascii     "REPEAT"
      00161C                       3933 REPEA:
      00161C CD 14 F4         [ 4] 3934         CALL     COMPI
      00161F 04 D3                 3935         .word BRAN
      001621 CD 07 5B         [ 4] 3936         call ADRADJ 
      001624 CD 14 AF         [ 4] 3937         CALL     COMMA
      001627 CD 0C 55         [ 4] 3938         CALL     HERE
      00162A CD 07 5B         [ 4] 3939         call ADRADJ 
      00162D CD 05 BE         [ 4] 3940         CALL     SWAPP
      001630 CC 04 F0         [ 2] 3941         JP     STORE
                                   3942 
                                   3943 ;       AFT         ( a -- a A )
                                   3944 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      001633 16 15                 3945         .word      LINK
                           001635  3946 LINK = . 
      001635 83                    3947 	.byte      IMEDD+3
      001636 41 46 54              3948         .ascii     "AFT"
      001639                       3949 AFT:
      001639 CD 05 A4         [ 4] 3950         CALL     DROP
      00163C CD 15 EC         [ 4] 3951         CALL     AHEAD
      00163F CD 0C 55         [ 4] 3952         CALL     HERE
      001642 CC 05 BE         [ 2] 3953         JP     SWAPP
                                   3954 
                                   3955 ;       ABORT"      ( -- ; <string> )
                                   3956 ;       Conditional abort with an error message.
      001645 16 35                 3957         .word      LINK
                           001647  3958 LINK = . 
      001647 86                    3959 	.byte      IMEDD+6
      001648 41 42 4F 52 54        3960         .ascii     "ABORT"
      00164D 22                    3961         .byte      '"'
      00164E                       3962 ABRTQ:
      00164E CD 14 F4         [ 4] 3963         CALL     COMPI
      001651 13 72                 3964         .word ABORQ
      001653 CC 15 24         [ 2] 3965         JP     STRCQ
                                   3966 
                                   3967 ;       $"     ( -- ; <string> )
                                   3968 ;       Compile an inline string literal.
      001656 16 47                 3969         .word      LINK
                           001658  3970 LINK = . 
      001658 82                    3971 	.byte      IMEDD+2
      001659 24 22                 3972         .byte     '$','"'
      00165B                       3973 STRQ:
      00165B CD 14 F4         [ 4] 3974         CALL     COMPI
      00165E 0F 2B                 3975         .word STRQP 
      001660 CC 15 24         [ 2] 3976         JP     STRCQ
                                   3977 
                                   3978 ;       ."          ( -- ; <string> )
                                   3979 ;       Compile an inline string literal to be typed out at run time.
      001663 16 58                 3980         .word      LINK
                           001665  3981 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      001665 82                    3982 	.byte      IMEDD+2
      001666 2E 22                 3983         .byte     '.','"'
      001668                       3984 DOTQ:
      001668 CD 14 F4         [ 4] 3985         CALL     COMPI
      00166B 0F 35                 3986         .word DOTQP 
      00166D CC 15 24         [ 2] 3987         JP     STRCQ
                                   3988 
                                   3989 ;; Name compiler
                                   3990 
                                   3991 ;       ?UNIQUE ( a -- a )
                                   3992 ;       Display a warning message
                                   3993 ;       if word already exists.
      001670 16 65                 3994         .word      LINK
                           001672  3995 LINK = . 
      001672 07                    3996         .byte      7
      001673 3F 55 4E 49 51 55 45  3997         .ascii     "?UNIQUE"
      00167A                       3998 UNIQU:
      00167A CD 05 AE         [ 4] 3999         CALL     DUPP
      00167D CD 12 66         [ 4] 4000         CALL     NAMEQ   ;?name exists
      001680 CD 04 A4         [ 4] 4001         CALL     QBRAN
      001683 16 99                 4002         .word      UNIQ1
      001685 CD 0F 35         [ 4] 4003         CALL     DOTQP   ;redef are OK
      001688 07                    4004         .byte       7
      001689 20 72 65 44 65 66 20  4005         .ascii     " reDef "       
      001690 CD 05 D8         [ 4] 4006         CALL     OVER
      001693 CD 0C 3E         [ 4] 4007         CALL     COUNT
      001696 CD 0E D8         [ 4] 4008         CALL     TYPES   ;just in case
      001699 CC 05 A4         [ 2] 4009 UNIQ1:  JP     DROP
                                   4010 
                                   4011 ;       $,n     ( na -- )
                                   4012 ;       Build a new dictionary name
                                   4013 ;       using string at na.
                                   4014 ; compile dans l'espace des variables 
      00169C 16 72                 4015         .word      LINK
                           00169E  4016 LINK = . 
      00169E 03                    4017         .byte      3
      00169F 24 2C 6E              4018         .ascii     "$,n"
      0016A2                       4019 SNAME:
      0016A2 CD 05 AE         [ 4] 4020         CALL     DUPP
      0016A5 CD 05 25         [ 4] 4021         CALL     CAT     ;?null input
      0016A8 CD 04 A4         [ 4] 4022         CALL     QBRAN
      0016AB 16 D8                 4023         .word      PNAM1
      0016AD CD 16 7A         [ 4] 4024         CALL     UNIQU   ;?redefinition
      0016B0 CD 05 AE         [ 4] 4025         CALL     DUPP
      0016B3 CD 0C 3E         [ 4] 4026         CALL     COUNT
      0016B6 CD 07 DD         [ 4] 4027         CALL     PLUS
      0016B9 CD 07 0F         [ 4] 4028         CALL     VPP
      0016BC CD 04 F0         [ 4] 4029         CALL     STORE
      0016BF CD 05 AE         [ 4] 4030         CALL     DUPP
      0016C2 CD 07 2D         [ 4] 4031         CALL     LAST
      0016C5 CD 04 F0         [ 4] 4032         CALL     STORE   ;save na for vocabulary link
      0016C8 CD 0A DF         [ 4] 4033         CALL     CELLM   ;link address
      0016CB CD 07 01         [ 4] 4034         CALL     CNTXT
      0016CE CD 05 07         [ 4] 4035         CALL     AT
      0016D1 CD 05 BE         [ 4] 4036         CALL     SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      0016D4 CD 04 F0         [ 4] 4037         CALL     STORE
      0016D7 81               [ 4] 4038         RET     ;save code pointer
      0016D8 CD 0F 2B         [ 4] 4039 PNAM1:  CALL     STRQP
      0016DB 05                    4040         .byte      5
      0016DC 20 6E 61 6D 65        4041         .ascii     " name" ;null input
      0016E1 CC 13 7A         [ 2] 4042         JP     ABOR1
                                   4043 
                                   4044 ;; FORTH compiler
                                   4045 
                                   4046 ;       $COMPILE        ( a -- )
                                   4047 ;       Compile next word to
                                   4048 ;       dictionary as a token or literal.
      0016E4 16 9E                 4049         .word      LINK
                           0016E6  4050 LINK = . 
      0016E6 08                    4051         .byte      8
      0016E7 24 43 4F 4D 50 49 4C  4052         .ascii     "$COMPILE"
             45
      0016EF                       4053 SCOMP:
      0016EF CD 12 66         [ 4] 4054         CALL     NAMEQ
      0016F2 CD 07 6B         [ 4] 4055         CALL     QDUP    ;?defined
      0016F5 CD 04 A4         [ 4] 4056         CALL     QBRAN
      0016F8 17 10                 4057         .word      SCOM2
      0016FA CD 05 07         [ 4] 4058         CALL     AT
      0016FD CD 04 71         [ 4] 4059         CALL     DOLIT
      001700 80 00                 4060         .word     0x8000	;  IMEDD*256
      001702 CD 06 0D         [ 4] 4061         CALL     ANDD    ;?immediate
      001705 CD 04 A4         [ 4] 4062         CALL     QBRAN
      001708 17 0D                 4063         .word      SCOM1
      00170A CC 04 E3         [ 2] 4064         JP     EXECU
      00170D CC 17 BA         [ 2] 4065 SCOM1:  JP     JSRC
      001710 CD 24 6E         [ 4] 4066 SCOM2:  CALL     NUMBQ   ;try to convert to number
      001713 CD 07 6B         [ 4] 4067         CALL    QDUP  
      001716 CD 04 A4         [ 4] 4068         CALL     QBRAN
      001719 13 7A                 4069         .word      ABOR1
      00171B                       4070         _DOLIT  -1
      00171B CD 04 71         [ 4]    1     CALL DOLIT 
      00171E FF FF                    2     .word -1 
      001720 CD 08 7E         [ 4] 4071         CALL    EQUAL
      001723                       4072         _QBRAN DLITER  
      001723 CD 04 A4         [ 4]    1     CALL QBRAN
      001726 28 BB                    2     .word DLITER
      001728 CC 15 16         [ 2] 4073         JP     LITER
                                   4074 
                                   4075 ;       OVERT   ( -- )
                                   4076 ;       Link a new word into vocabulary.
      00172B 16 E6                 4077         .word      LINK
                           00172D  4078 LINK = . 
      00172D 05                    4079         .byte      5
      00172E 4F 56 45 52 54        4080         .ascii     "OVERT"
      001733                       4081 OVERT:
      001733 CD 07 2D         [ 4] 4082         CALL     LAST
      001736 CD 05 07         [ 4] 4083         CALL     AT
      001739 CD 07 01         [ 4] 4084         CALL     CNTXT
      00173C CC 04 F0         [ 2] 4085         JP     STORE
                                   4086 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                                   4087 ;       ;       ( -- )
                                   4088 ;       Terminate a colon definition.
      00173F 17 2D                 4089         .word      LINK
                           001741  4090 LINK = . 
      001741 C1                    4091 	.byte      IMEDD+COMPO+1
      001742 3B                    4092         .ascii     ";"
      001743                       4093 SEMIS:
                           000001  4094 .if OPTIMIZE ; more compact and faster
      001743 CD 04 71         [ 4] 4095         call DOLIT 
      001746 00 81                 4096         .word 0x81   ; opcode for RET 
      001748 CD 14 C6         [ 4] 4097         call CCOMMA 
                           000000  4098 .else
                                   4099         CALL     COMPI
                                   4100         .word EXIT 
                                   4101 .endif 
      00174B CD 13 DB         [ 4] 4102         CALL     LBRAC
      00174E CD 17 33         [ 4] 4103         call OVERT 
      001751 CD 21 43         [ 4] 4104         CALL FMOVE
      001754 CD 07 6B         [ 4] 4105         call QDUP 
      001757 CD 04 A4         [ 4] 4106         call QBRAN 
      00175A 18 8A                 4107         .word SET_RAMLAST 
      00175C CD 21 D7         [ 4] 4108         CALL UPDATPTR
      00175F 81               [ 4] 4109         RET 
                                   4110 
                                   4111 
                                   4112 ;       Terminate an ISR definition 
                                   4113 ;       retourn ca of ISR as double
                                   4114 ;       I; ( -- ud )
      001760 17 41                 4115         .word LINK 
                           001762  4116         LINK=.
      001762 C2                    4117         .byte 2+IMEDD+COMPO 
      001763 49 3B                 4118         .ascii "I;" 
      001765                       4119 ISEMI:
      001765 1D 00 02         [ 2] 4120         subw x,#CELLL  
      001768 90 AE 00 80      [ 2] 4121         ldw y,#IRET_CODE 
      00176C FF               [ 2] 4122         ldw (x),y 
      00176D CD 14 C6         [ 4] 4123         call CCOMMA
      001770 CD 13 DB         [ 4] 4124         call LBRAC 
      001773 CD 22 1C         [ 4] 4125         call IFMOVE
      001776 CD 07 6B         [ 4] 4126         call QDUP 
      001779 CD 04 A4         [ 4] 4127         CALL QBRAN 
      00177C 18 8A                 4128         .word SET_RAMLAST
      00177E CD 07 1D         [ 4] 4129         CALL CPP
      001781 CD 05 07         [ 4] 4130         call AT 
      001784 CD 05 BE         [ 4] 4131         call SWAPP 
      001787 CD 07 1D         [ 4] 4132         CALL CPP 
      00178A CD 04 F0         [ 4] 4133         call STORE 
      00178D CD 1B D4         [ 4] 4134         call UPDATCP 
      001790 CD 1B 91         [ 4] 4135         call EEPVP 
      001793 CD 05 A4         [ 4] 4136         call DROP 
      001796 CD 05 07         [ 4] 4137         call AT 
      001799 CD 07 0F         [ 4] 4138         call VPP 
      00179C CD 04 F0         [ 4] 4139         call STORE 
      00179F CC 0B 67         [ 2] 4140         jp ZERO
      0017A2 81               [ 4] 4141         ret           
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                   4142         
                                   4143 
                                   4144 ;       ]       ( -- )
                                   4145 ;       Start compiling words in
                                   4146 ;       input stream.
      0017A3 17 62                 4147         .word      LINK
                           0017A5  4148 LINK = . 
      0017A5 01                    4149         .byte      1
      0017A6 5D                    4150         .ascii     "]"
      0017A7                       4151 RBRAC:
      0017A7 CD 04 71         [ 4] 4152         CALL   DOLIT
      0017AA 16 EF                 4153         .word  SCOMP
      0017AC CD 06 DF         [ 4] 4154         CALL   TEVAL
      0017AF CC 04 F0         [ 2] 4155         JP     STORE
                                   4156 
                                   4157 ;       CALL,    ( ca -- )
                                   4158 ;       Compile a subroutine call.
      0017B2 17 A5                 4159         .word      LINK
                           0017B4  4160 LINK = . 
      0017B4 05                    4161         .byte      5
      0017B5 43 41 4C 4C 2C        4162         .ascii     "CALL,"
      0017BA                       4163 JSRC:
      0017BA CD 04 71         [ 4] 4164         CALL     DOLIT
      0017BD 00 CD                 4165         .word     CALLL     ;CALL
      0017BF CD 14 C6         [ 4] 4166         CALL     CCOMMA
      0017C2 CC 14 AF         [ 2] 4167         JP     COMMA
                                   4168 
                                   4169 ;       INIT-OFS ( -- )
                                   4170 ;       compute offset to adjust jump address 
                                   4171 ;       set variable OFFSET 
      0017C5 17 B4                 4172         .word LINK 
                           0017C7  4173         LINK=.
      0017C7 08                    4174         .byte 8 
      0017C8 49 4E 49 54 2D 4F 46  4175         .ascii "INIT-OFS" 
             53
      0017D0                       4176 INITOFS:
      0017D0 CD 06 CE         [ 4] 4177         call TFLASH 
      0017D3 CD 05 07         [ 4] 4178         CALL AT 
      0017D6 CD 05 AE         [ 4] 4179         CALL DUPP 
      0017D9 CD 04 A4         [ 4] 4180         call QBRAN
      0017DC 17 ED                 4181         .word 1$
      0017DE CD 05 A4         [ 4] 4182         call DROP  
      0017E1 CD 07 1D         [ 4] 4183         call CPP 
      0017E4 CD 05 07         [ 4] 4184         call AT 
      0017E7 CD 0C 55         [ 4] 4185         call HERE
      0017EA CD 08 56         [ 4] 4186         call SUBB 
      0017ED CD 07 52         [ 4] 4187 1$:     call OFFSET 
      0017F0 CC 04 F0         [ 2] 4188         jp STORE  
                                   4189 
                                   4190 ;       :       ( -- ; <string> )
                                   4191 ;       Start a new colon definition
                                   4192 ;       using next word as its name.
      0017F3 17 C7                 4193         .word      LINK
                           0017F5  4194 LINK = . 
      0017F5 01                    4195         .byte      1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      0017F6 3A                    4196         .ascii     ":"
      0017F7                       4197 COLON:
      0017F7 CD 17 D0         [ 4] 4198         call INITOFS       
      0017FA CD 11 69         [ 4] 4199         CALL   TOKEN
      0017FD CD 16 A2         [ 4] 4200         CALL   SNAME
      001800 CC 17 A7         [ 2] 4201         JP     RBRAC
                                   4202 
                                   4203 ;       I:  ( -- )
                                   4204 ;       Start interrupt service routine definition
                                   4205 ;       those definition have no name.
      001803 17 F5                 4206         .word LINK
                           001805  4207         LINK=.
      001805 02                    4208         .byte 2 
      001806 49 3A                 4209         .ascii "I:" 
      001808                       4210 ICOLON:
      001808 CD 17 D0         [ 4] 4211         call INITOFS 
      00180B CC 17 A7         [ 2] 4212         jp RBRAC  
                                   4213 
                                   4214 ;       IMMEDIATE       ( -- )
                                   4215 ;       Make last compiled word
                                   4216 ;       an immediate word.
      00180E 18 05                 4217         .word      LINK
                           001810  4218 LINK = . 
      001810 09                    4219         .byte      9
      001811 49 4D 4D 45 44 49 41  4220         .ascii     "IMMEDIATE"
             54 45
      00181A                       4221 IMMED:
      00181A CD 04 71         [ 4] 4222         CALL     DOLIT
      00181D 80 00                 4223         .word     0x8000	;  IMEDD*256
      00181F CD 07 2D         [ 4] 4224         CALL     LAST
      001822 CD 05 07         [ 4] 4225         CALL     AT
      001825 CD 05 07         [ 4] 4226         CALL     AT
      001828 CD 06 21         [ 4] 4227         CALL     ORR
      00182B CD 07 2D         [ 4] 4228         CALL     LAST
      00182E CD 05 07         [ 4] 4229         CALL     AT
      001831 CC 04 F0         [ 2] 4230         JP     STORE
                                   4231 
                                   4232 ;; Defining words
                                   4233 
                                   4234 ;       CREATE  ( -- ; <string> )
                                   4235 ;       Compile a new array
                                   4236 ;       without allocating space.
      001834 18 10                 4237         .word      LINK
                           001836  4238 LINK = . 
      001836 06                    4239         .byte      6
      001837 43 52 45 41 54 45     4240         .ascii     "CREATE"
      00183D                       4241 CREAT:
      00183D CD 11 69         [ 4] 4242         CALL     TOKEN
      001840 CD 16 A2         [ 4] 4243         CALL     SNAME
      001843 CD 17 33         [ 4] 4244         CALL     OVERT        
      001846 CD 14 F4         [ 4] 4245         CALL     COMPI 
      001849 06 6E                 4246         .word DOVAR 
      00184B 81               [ 4] 4247         RET
                                   4248 
                                   4249 ;       VARIABLE        ( -- ; <string> )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                                   4250 ;       Compile a new variable
                                   4251 ;       initialized to 0.
      00184C 18 36                 4252         .word      LINK
                           00184E  4253 LINK = . 
      00184E 08                    4254         .byte      8
      00184F 56 41 52 49 41 42 4C  4255         .ascii     "VARIABLE"
             45
      001857                       4256 VARIA:
                                   4257 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      001857 CD 0C 55         [ 4] 4258         CALL HERE
      00185A CD 05 AE         [ 4] 4259         CALL DUPP 
      00185D CD 0A D0         [ 4] 4260         CALL CELLP
      001860 CD 07 0F         [ 4] 4261         CALL VPP 
      001863 CD 04 F0         [ 4] 4262         CALL STORE
      001866 CD 18 3D         [ 4] 4263         CALL CREAT
      001869 CD 05 AE         [ 4] 4264         CALL DUPP
      00186C CD 14 AF         [ 4] 4265         CALL COMMA
      00186F CD 0B 67         [ 4] 4266         CALL ZERO
      001872 CD 05 BE         [ 4] 4267         call SWAPP 
      001875 CD 04 F0         [ 4] 4268         CALL STORE
      001878 CD 21 43         [ 4] 4269         CALL FMOVE ; move definition to FLASH
      00187B CD 07 6B         [ 4] 4270         CALL QDUP 
      00187E CD 04 A4         [ 4] 4271         CALL QBRAN 
      001881 18 8A                 4272         .word SET_RAMLAST   
      001883 CD 1B EB         [ 4] 4273         call UPDATVP  ; don't update if variable kept in RAM.
      001886 CD 21 D7         [ 4] 4274         CALL UPDATPTR
      001889 81               [ 4] 4275         RET         
      00188A                       4276 SET_RAMLAST: 
      00188A CD 07 2D         [ 4] 4277         CALL LAST 
      00188D CD 05 07         [ 4] 4278         CALL AT 
      001890 CD 07 40         [ 4] 4279         CALL RAMLAST 
      001893 CC 04 F0         [ 2] 4280         jp STORE  
                                   4281 
                                   4282 
                                   4283 ;       CONSTANT  ( n -- ; <string> )
                                   4284 ;       Compile a new constant 
                                   4285 ;       n CONSTANT name 
      001896 18 4E                 4286         .word LINK 
                           001898  4287         LINK=. 
      001898 08                    4288         .byte 8 
      001899 43 4F 4E 53 54 41 4E  4289         .ascii "CONSTANT" 
             54
      0018A1                       4290 CONSTANT:          
      0018A1 CD 11 69         [ 4] 4291         CALL TOKEN
      0018A4 CD 16 A2         [ 4] 4292         CALL SNAME 
      0018A7 CD 17 33         [ 4] 4293         CALL OVERT 
      0018AA CD 14 F4         [ 4] 4294         CALL COMPI 
      0018AD 18 C1                 4295         .word DOCONST
      0018AF CD 14 AF         [ 4] 4296         CALL COMMA 
      0018B2 CD 21 43         [ 4] 4297         CALL FMOVE
      0018B5 CD 07 6B         [ 4] 4298         CALL QDUP 
      0018B8 CD 04 A4         [ 4] 4299         CALL QBRAN 
      0018BB 18 8A                 4300         .word SET_RAMLAST  
      0018BD CD 21 D7         [ 4] 4301         CALL UPDATPTR  
      0018C0 81               [ 4] 4302 1$:     RET          
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                   4303 
                                   4304 ; CONSTANT runtime semantic 
                                   4305 ; doCONST  ( -- n )
                                   4306 ;        .word LINK 
                                   4307 ;        LINK=.
                                   4308 ;        .byte 7
                                   4309 ;        .ascii "DOCONST"
      0018C1                       4310 DOCONST:
      0018C1 1D 00 02         [ 2] 4311         subw x,#CELLL
      0018C4 90 85            [ 2] 4312         popw y 
      0018C6 90 FE            [ 2] 4313         ldw y,(y) 
      0018C8 FF               [ 2] 4314         ldw (x),y 
      0018C9 81               [ 4] 4315         ret 
                                   4316 
                                   4317 ;----------------------------------
                                   4318 ; create double constant 
                                   4319 ; 2CONSTANT ( d -- ; <string> )
                                   4320 ;----------------------------------
      0018CA 18 98                 4321     .word LINK 
                           0018CC  4322     LINK=.
      0018CC 09                    4323     .byte 9 
      0018CD 32 43 4F 4E 53 54 41  4324     .ascii "2CONSTANT"
             4E 54
      0018D6                       4325 DCONST:
      0018D6 CD 11 69         [ 4] 4326         CALL TOKEN
      0018D9 CD 16 A2         [ 4] 4327         CALL SNAME 
      0018DC CD 17 33         [ 4] 4328         CALL OVERT 
      0018DF CD 14 F4         [ 4] 4329         CALL COMPI 
      0018E2 18 F9                 4330         .word DO_DCONST
      0018E4 CD 14 AF         [ 4] 4331         CALL COMMA
      0018E7 CD 14 AF         [ 4] 4332         CALL COMMA  
      0018EA CD 21 43         [ 4] 4333         CALL FMOVE
      0018ED CD 07 6B         [ 4] 4334         CALL QDUP 
      0018F0 CD 04 A4         [ 4] 4335         CALL QBRAN 
      0018F3 18 8A                 4336         .word SET_RAMLAST  
      0018F5 CD 21 D7         [ 4] 4337         CALL UPDATPTR  
      0018F8 81               [ 4] 4338 1$:     RET          
                                   4339     
                                   4340 ;----------------------------------
                                   4341 ; runtime for DCONST 
                                   4342 ; stack double constant 
                                   4343 ; DO-DCONST ( -- d )
                                   4344 ;-----------------------------------
                                   4345 ;        .word LINK 
                                   4346 ;        LINK=.
                                   4347 ;        .byte 9 
                                   4348 ;        .ascii "DO-DCONST"
      0018F9                       4349 DO_DCONST:
      0018F9 90 85            [ 2] 4350     popw y 
      0018FB 90 BF 26         [ 2] 4351     ldw YTEMP,y 
      0018FE 1D 00 04         [ 2] 4352     subw x,#2*CELLL 
      001901 90 FE            [ 2] 4353     ldw y,(y)
      001903 FF               [ 2] 4354     ldw (x),y 
      001904 90 BE 26         [ 2] 4355     ldw y,YTEMP 
      001907 90 EE 02         [ 2] 4356     ldw y,(2,y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      00190A EF 02            [ 2] 4357     ldw (2,x),y 
      00190C 81               [ 4] 4358     ret 
                                   4359 
                                   4360 ;; Tools
                                   4361 
                                   4362 ;       _TYPE   ( b u -- )
                                   4363 ;       Display a string. Filter
                                   4364 ;       non-printing characters.
      00190D 18 CC                 4365         .word      LINK
                           00190F  4366 LINK = . 
      00190F 05                    4367         .byte      5
      001910 5F 54 59 50 45        4368         .ascii     "_TYPE"
      001915                       4369 UTYPE:
      001915 CD 05 77         [ 4] 4370         CALL     TOR     ;start count down loop
      001918 20 0F            [ 2] 4371         JRA     UTYP2   ;skip first pass
      00191A CD 05 AE         [ 4] 4372 UTYP1:  CALL     DUPP
      00191D CD 05 25         [ 4] 4373         CALL     CAT
      001920 CD 0B 91         [ 4] 4374         CALL     TCHAR
      001923 CD 04 36         [ 4] 4375         CALL     EMIT    ;display only printable
      001926 CD 0A FB         [ 4] 4376         CALL     ONEP    ;increment address
      001929 CD 04 85         [ 4] 4377 UTYP2:  CALL     DONXT
      00192C 19 1A                 4378         .word      UTYP1   ;loop till done
      00192E CC 05 A4         [ 2] 4379         JP     DROP
                                   4380 
                                   4381 ;       dm+     ( a u -- a )
                                   4382 ;       Dump u bytes from ,
                                   4383 ;       leaving a+u on  stack.
      001931 19 0F                 4384         .word      LINK
                           001933  4385 LINK = . 
      001933 03                    4386         .byte      3
      001934 64 6D 2B              4387         .ascii     "dm+"
      001937                       4388 DUMPP:
      001937 CD 05 D8         [ 4] 4389         CALL     OVER
      00193A CD 04 71         [ 4] 4390         CALL     DOLIT
      00193D 00 04                 4391         .word      4
      00193F CD 0F 5E         [ 4] 4392         CALL     UDOTR   ;display address
      001942 CD 0E AE         [ 4] 4393         CALL     SPACE
      001945 CD 05 77         [ 4] 4394         CALL     TOR     ;start count down loop
      001948 20 11            [ 2] 4395         JRA     PDUM2   ;skip first pass
      00194A CD 05 AE         [ 4] 4396 PDUM1:  CALL     DUPP
      00194D CD 05 25         [ 4] 4397         CALL     CAT
      001950 CD 04 71         [ 4] 4398         CALL     DOLIT
      001953 00 03                 4399         .word      3
      001955 CD 0F 5E         [ 4] 4400         CALL     UDOTR   ;display numeric data
      001958 CD 0A FB         [ 4] 4401         CALL     ONEP    ;increment address
      00195B CD 04 85         [ 4] 4402 PDUM2:  CALL     DONXT
      00195E 19 4A                 4403         .word      PDUM1   ;loop till done
      001960 81               [ 4] 4404         RET
                                   4405 
                                   4406 ;       DUMP    ( a u -- )
                                   4407 ;       Dump u bytes from a,
                                   4408 ;       in a formatted manner.
      001961 19 33                 4409         .word      LINK
                           001963  4410 LINK = . 
      001963 04                    4411         .byte      4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      001964 44 55 4D 50           4412         .ascii     "DUMP"
      001968                       4413 DUMP:
      001968 CD 06 7E         [ 4] 4414         CALL     BASE
      00196B CD 05 07         [ 4] 4415         CALL     AT
      00196E CD 05 77         [ 4] 4416         CALL     TOR
      001971 CD 0E 0D         [ 4] 4417         CALL     HEX     ;save radix, set hex
      001974 CD 04 71         [ 4] 4418         CALL     DOLIT
      001977 00 10                 4419         .word      16
      001979 CD 0A 21         [ 4] 4420         CALL     SLASH   ;change count to lines
      00197C CD 05 77         [ 4] 4421         CALL     TOR     ;start count down loop
      00197F CD 0E F6         [ 4] 4422 DUMP1:  CALL     CR
      001982 CD 04 71         [ 4] 4423         CALL     DOLIT
      001985 00 10                 4424         .word      16
      001987 CD 07 C8         [ 4] 4425         CALL     DDUP
      00198A CD 19 37         [ 4] 4426         CALL     DUMPP   ;display numeric
      00198D CD 07 7C         [ 4] 4427         CALL     ROT
      001990 CD 07 7C         [ 4] 4428         CALL     ROT
      001993 CD 0E AE         [ 4] 4429         CALL     SPACE
      001996 CD 0E AE         [ 4] 4430         CALL     SPACE
      001999 CD 19 15         [ 4] 4431         CALL     UTYPE   ;display printable characters
      00199C CD 04 85         [ 4] 4432         CALL     DONXT
      00199F 19 7F                 4433         .word      DUMP1   ;loop till done
      0019A1 CD 05 A4         [ 4] 4434 DUMP3:  CALL     DROP
      0019A4 CD 05 58         [ 4] 4435         CALL     RFROM
      0019A7 CD 06 7E         [ 4] 4436         CALL     BASE
      0019AA CC 04 F0         [ 2] 4437         JP     STORE   ;restore radix
                                   4438 
                                   4439 ;       .S      ( ... -- ... )
                                   4440 ;        Display  contents of stack.
      0019AD 19 63                 4441         .word      LINK
                           0019AF  4442 LINK = . 
      0019AF 02                    4443         .byte      2
      0019B0 2E 53                 4444         .ascii     ".S"
      0019B2                       4445 DOTS:
      0019B2 CD 0E F6         [ 4] 4446         CALL     CR
      0019B5 CD 0B A9         [ 4] 4447         CALL     DEPTH   ;stack depth
      0019B8 CD 05 77         [ 4] 4448         CALL     TOR     ;start count down loop
      0019BB 20 09            [ 2] 4449         JRA     DOTS2   ;skip first pass
      0019BD CD 05 6B         [ 4] 4450 DOTS1:  CALL     RAT
      0019C0 CD 0B C0         [ 4] 4451 	CALL     PICK
      0019C3 CD 0F AF         [ 4] 4452         CALL     DOT     ;index stack, display contents
      0019C6 CD 04 85         [ 4] 4453 DOTS2:  CALL     DONXT
      0019C9 19 BD                 4454         .word      DOTS1   ;loop till done
      0019CB CD 0F 35         [ 4] 4455         CALL     DOTQP
      0019CE 05                    4456         .byte      5
      0019CF 20 3C 73 70 20        4457         .ascii     " <sp "
      0019D4 81               [ 4] 4458         RET
                                   4459 
                                   4460 ;       >NAME   ( ca -- na | F )
                                   4461 ;       Convert code address
                                   4462 ;       to a name address.
      0019D5 19 AF                 4463         .word      LINK
                           0019D7  4464 LINK = . 
      0019D7 05                    4465         .byte      5
      0019D8 3E 4E 41 4D 45        4466         .ascii     ">NAME"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      0019DD                       4467 TNAME:
      0019DD CD 07 01         [ 4] 4468         CALL     CNTXT   ;vocabulary link
      0019E0 CD 05 07         [ 4] 4469 TNAM2:  CALL     AT
      0019E3 CD 05 AE         [ 4] 4470         CALL     DUPP    ;?last word in a vocabulary
      0019E6 CD 04 A4         [ 4] 4471         CALL     QBRAN
      0019E9 1A 04                 4472         .word      TNAM4
      0019EB CD 07 C8         [ 4] 4473         CALL     DDUP
      0019EE CD 11 77         [ 4] 4474         CALL     NAMET
      0019F1 CD 06 36         [ 4] 4475         CALL     XORR    ;compare
      0019F4 CD 04 A4         [ 4] 4476         CALL     QBRAN
      0019F7 19 FE                 4477         .word      TNAM3
      0019F9 CD 0A DF         [ 4] 4478         CALL     CELLM   ;continue with next word
      0019FC 20 E2            [ 2] 4479         JRA     TNAM2
      0019FE CD 05 BE         [ 4] 4480 TNAM3:  CALL     SWAPP
      001A01 CC 05 A4         [ 2] 4481         JP     DROP
      001A04 CD 07 BD         [ 4] 4482 TNAM4:  CALL     DDROP
      001A07 CC 0B 67         [ 2] 4483         JP     ZERO
                                   4484 
                                   4485 ;       .ID     ( na -- )
                                   4486 ;        Display  name at address.
      001A0A 19 D7                 4487         .word      LINK
                           001A0C  4488 LINK = . 
      001A0C 03                    4489         .byte      3
      001A0D 2E 49 44              4490         .ascii     ".ID"
      001A10                       4491 DOTID:
      001A10 CD 07 6B         [ 4] 4492         CALL     QDUP    ;if zero no name
      001A13 CD 04 A4         [ 4] 4493         CALL     QBRAN
      001A16 1A 26                 4494         .word      DOTI1
      001A18 CD 0C 3E         [ 4] 4495         CALL     COUNT
      001A1B CD 04 71         [ 4] 4496         CALL     DOLIT
      001A1E 00 1F                 4497         .word      0x1F
      001A20 CD 06 0D         [ 4] 4498         CALL     ANDD    ;mask lexicon bits
      001A23 CC 19 15         [ 2] 4499         JP     UTYPE
      001A26 CD 0F 35         [ 4] 4500 DOTI1:  CALL     DOTQP
      001A29 09                    4501         .byte      9
      001A2A 20 6E 6F 4E 61 6D 65  4502         .ascii     " noName"
      001A31 81               [ 4] 4503         RET
                                   4504 
                           000000  4505 WANT_SEE=0
                           000000  4506 .if WANT_SEE 
                                   4507 ;       SEE     ( -- ; <string> )
                                   4508 ;       A simple decompiler.
                                   4509 ;       Updated for byte machines.
                                   4510         .word      LINK
                                   4511 LINK = . 
                                   4512         .byte      3
                                   4513         .ascii     "SEE"
                                   4514 SEE:
                                   4515         CALL     TICK    ;starting address
                                   4516         CALL     CR
                                   4517         CALL     ONEM
                                   4518 SEE1:   CALL     ONEP
                                   4519         CALL     DUPP
                                   4520         CALL     AT
                                   4521         CALL     DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                   4522         CALL     QBRAN
                                   4523         .word    SEE2
                                   4524         CALL     TNAME   ;?is it a name
                                   4525 SEE2:   CALL     QDUP    ;name address or zero
                                   4526         CALL     QBRAN
                                   4527         .word    SEE3
                                   4528         CALL     SPACE
                                   4529         CALL     DOTID   ;display name
                                   4530         CALL     ONEP
                                   4531         JRA      SEE4
                                   4532 SEE3:   CALL     DUPP
                                   4533         CALL     CAT
                                   4534         CALL     UDOT    ;display number
                                   4535 SEE4:   CALL     NUFQ    ;user control
                                   4536         CALL     QBRAN
                                   4537         .word    SEE1
                                   4538         JP     DROP
                                   4539 .endif ; WANT_SEE 
                                   4540 
                                   4541 ;       WORDS   ( -- )
                                   4542 ;       Display names in vocabulary.
      001A32 1A 0C                 4543         .word      LINK
                           001A34  4544 LINK = . 
      001A34 05                    4545         .byte      5
      001A35 57 4F 52 44 53        4546         .ascii     "WORDS"
      001A3A                       4547 WORDS:
      001A3A CD 0E F6         [ 4] 4548         CALL     CR
      001A3D CD 07 01         [ 4] 4549         CALL     CNTXT   ;only in context
      001A40 CD 05 07         [ 4] 4550 WORS1:  CALL     AT
      001A43 CD 07 6B         [ 4] 4551         CALL     QDUP    ;?at end of list
      001A46 CD 04 A4         [ 4] 4552         CALL     QBRAN
      001A49 1A 5C                 4553         .word      WORS2
      001A4B CD 05 AE         [ 4] 4554         CALL     DUPP
      001A4E CD 0E AE         [ 4] 4555         CALL     SPACE
      001A51 CD 1A 10         [ 4] 4556         CALL     DOTID   ;display a name
      001A54 CD 0A DF         [ 4] 4557         CALL     CELLM
      001A57 CD 04 D3         [ 4] 4558         CALL     BRAN
      001A5A 1A 40                 4559         .word      WORS1
      001A5C 81               [ 4] 4560 WORS2:  RET
                                   4561 
                                   4562         
                                   4563 ;; Hardware reset
                                   4564 
                                   4565 ;       hi      ( -- )
                                   4566 ;       Display sign-on message.
      001A5D 1A 34                 4567         .word      LINK
                           001A5F  4568 LINK = . 
      001A5F 02                    4569         .byte      2
      001A60 68 69                 4570         .ascii     "hi"
      001A62                       4571 HI:
      001A62 CD 0E F6         [ 4] 4572         CALL     CR
      001A65 CD 0F 35         [ 4] 4573         CALL     DOTQP   ;initialize I/O
      001A68 0F                    4574         .byte      15
      001A69 73 74 6D 38 65 46 6F  4575         .ascii     "stm8eForth v"
             72 74 68 20 76
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      001A75 33                    4576 	.byte      VER+'0'
      001A76 2E                    4577         .byte      '.' 
      001A77 30                    4578 	.byte      EXT+'0' ;version
      001A78 CD 0F 35         [ 4] 4579         CALL    DOTQP
                           000001  4580 .if NUCLEO          
      001A7B 12                    4581         .byte 18
      001A7C 20 6F 6E 20 4E 55 43  4582         .ascii  " on NUCLEO-8S208RB"
             4C 45 4F 2D 38 53 32
             30 38 52 42
                                   4583 .endif
                           000000  4584 .if DISCOVERY
                                   4585         .byte 19
                                   4586         .ascii  " on STM8S-DISCOVERY"
                                   4587 .endif
                           000000  4588 .if DOORBELL
                                   4589         .byte 16
                                   4590         .ascii " on stm8s105k6b6"
                                   4591 .endif
      001A8E CC 0E F6         [ 2] 4592         JP     CR
                                   4593 
                           000000  4594 WANT_DEBUG=0
                           000000  4595 .if WANT_DEBUG 
                                   4596 ;       DEBUG      ( -- )
                                   4597 ;       Display sign-on message.
                                   4598 ;        .word      LINK
                                   4599 LINK = . 
                                   4600         .byte      5
                                   4601         .ascii     "DEBUG"
                                   4602 DEBUG:
                                   4603 	CALL DOLIT
                                   4604 	.word 0x65
                                   4605 	CALL EMIT
                                   4606 	CALL DOLIT
                                   4607 	.word 0
                                   4608  	CALL ZLESS 
                                   4609 	CALL DOLIT
                                   4610 	.word 0xFFFE
                                   4611 	CALL ZLESS 
                                   4612 	CALL UPLUS 
                                   4613  	CALL DROP 
                                   4614 	CALL DOLIT
                                   4615 	.word 3
                                   4616 	CALL UPLUS 
                                   4617 	CALL UPLUS 
                                   4618  	CALL DROP
                                   4619 	CALL DOLIT
                                   4620 	.word 0x43
                                   4621 	CALL UPLUS 
                                   4622  	CALL DROP
                                   4623 	CALL EMIT
                                   4624 	CALL DOLIT
                                   4625 	.word 0x4F
                                   4626 	CALL DOLIT
                                   4627 	.word 0x6F
                                   4628  	CALL XORR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                   4629 	CALL DOLIT
                                   4630 	.word 0xF0
                                   4631  	CALL ANDD
                                   4632 	CALL DOLIT
                                   4633 	.word 0x4F
                                   4634  	CALL ORR
                                   4635 	CALL EMIT
                                   4636 	CALL DOLIT
                                   4637 	.word 8
                                   4638 	CALL DOLIT
                                   4639 	.word 6
                                   4640  	CALL SWAPP
                                   4641 	CALL OVER
                                   4642 	CALL XORR
                                   4643 	CALL DOLIT
                                   4644 	.word 3
                                   4645 	CALL ANDD 
                                   4646 	CALL ANDD
                                   4647 	CALL DOLIT
                                   4648 	.word 0x70
                                   4649 	CALL UPLUS 
                                   4650 	CALL DROP
                                   4651 	CALL EMIT
                                   4652 	CALL DOLIT
                                   4653 	.word 0
                                   4654 	CALL QBRAN
                                   4655 	.word DEBUG1
                                   4656 	CALL DOLIT
                                   4657 	.word 0x3F
                                   4658 DEBUG1:
                                   4659 	CALL DOLIT
                                   4660 	.word 0xFFFF
                                   4661 	CALL QBRAN
                                   4662 	.word DEBUG2
                                   4663 	CALL DOLIT
                                   4664 	.word 0x74
                                   4665 	CALL BRAN
                                   4666 	.word DEBUG3
                                   4667 DEBUG2:
                                   4668 	CALL DOLIT
                                   4669 	.word 0x21
                                   4670 DEBUG3:
                                   4671 	CALL EMIT
                                   4672 	CALL DOLIT
                                   4673 	.word 0x68
                                   4674 	CALL DOLIT
                                   4675 	.word 0x80
                                   4676 	CALL STORE
                                   4677 	CALL DOLIT
                                   4678 	.word 0x80
                                   4679 	CALL AT
                                   4680 	CALL EMIT
                                   4681 	CALL DOLIT
                                   4682 	.word 0x4D
                                   4683 	CALL TOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



                                   4684 	CALL RAT
                                   4685 	CALL RFROM
                                   4686 	CALL ANDD
                                   4687 	CALL EMIT
                                   4688 	CALL DOLIT
                                   4689 	.word 0x61
                                   4690 	CALL DOLIT
                                   4691 	.word 0xA
                                   4692 	CALL TOR
                                   4693 DEBUG4:
                                   4694 	CALL DOLIT
                                   4695 	.word 1
                                   4696 	CALL UPLUS 
                                   4697 	CALL DROP
                                   4698 	CALL DONXT
                                   4699 	.word DEBUG4
                                   4700 	CALL EMIT
                                   4701 	CALL DOLIT
                                   4702 	.word 0x656D
                                   4703 	CALL DOLIT
                                   4704 	.word 0x100
                                   4705 	CALL UMSTA
                                   4706 	CALL SWAPP
                                   4707 	CALL DOLIT
                                   4708 	.word 0x100
                                   4709 	CALL UMSTA
                                   4710 	CALL SWAPP 
                                   4711 	CALL DROP
                                   4712 	CALL EMIT
                                   4713 	CALL EMIT
                                   4714 	CALL DOLIT
                                   4715 	.word 0x2043
                                   4716 	CALL DOLIT
                                   4717 	.word 0
                                   4718 	CALL DOLIT
                                   4719 	.word 0x100
                                   4720 	CALL UMMOD
                                   4721 	CALL EMIT
                                   4722 	CALL EMIT
                                   4723 	;JP ORIG
                                   4724 	RET
                                   4725 .endif ; WANT_DEBUG 
                                   4726 
                                   4727 
                                   4728 ;       'BOOT   ( -- a )
                                   4729 ;       The application startup vector.
      001A91 1A 5F                 4730         .word      LINK
                           001A93  4731 LINK = . 
      001A93 05                    4732         .byte      5
      001A94 27 42 4F 4F 54        4733         .ascii     "'BOOT"
      001A99                       4734 TBOOT:
      001A99 CD 06 6E         [ 4] 4735         CALL     DOVAR
      001A9C 40 02                 4736         .word    APP_RUN      ;application to boot
                                   4737 
                                   4738 ;       COLD    ( -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



                                   4739 ;       The hilevel cold start s=ence.
      001A9E 1A 93                 4740         .word      LINK
                           001AA0  4741         LINK = . 
      001AA0 04                    4742         .byte      4
      001AA1 43 4F 4C 44           4743         .ascii     "COLD"
      001AA5                       4744 COLD:
                           000000  4745 .if WANT_DEBUG
                                   4746         CALL DEBUG
                                   4747 .endif ; WANT_DEBUG
      001AA5 CD 04 71         [ 4] 4748 COLD1:  CALL     DOLIT
      001AA8 00 2B                 4749         .word      UZERO
      001AAA CD 04 71         [ 4] 4750 	CALL     DOLIT
      001AAD 00 06                 4751         .word      UPP
      001AAF CD 04 71         [ 4] 4752         CALL     DOLIT
      001AB2 00 1C                 4753 	.word      UEND-UZERO
      001AB4 CD 0C A2         [ 4] 4754         CALL     CMOVE   ;initialize user area
                           000001  4755 .if WANT_FLOAT 
      001AB7 CD 2B B4         [ 4] 4756         CALL    FINIT 
                                   4757 .endif 
                                   4758 ; if APP_RUN==0 initialize with ca de 'hi'  
      001ABA 90 CE 40 02      [ 2] 4759         ldw y,APP_RUN 
      001ABE 26 0B            [ 1] 4760         jrne 0$
      001AC0 1D 00 02         [ 2] 4761         subw x,#CELLL 
      001AC3 90 AE 1A 62      [ 2] 4762         ldw y,#HI  
      001AC7 FF               [ 2] 4763         ldw (x),y
      001AC8 CD 1B C3         [ 4] 4764         call UPDATRUN 
      001ACB                       4765 0$:        
                                   4766 ; update LAST with APP_LAST 
                                   4767 ; if APP_LAST > LAST else do the opposite
      001ACB 90 CE 40 00      [ 2] 4768         ldw y,APP_LAST 
      001ACF 90 B3 1C         [ 2] 4769         cpw y,ULAST 
      001AD2 22 05            [ 1] 4770         jrugt 1$ 
                                   4771 ; save LAST at APP_LAST  
      001AD4 CD 1B AB         [ 4] 4772         call UPDATLAST 
      001AD7 20 06            [ 2] 4773         jra 2$
      001AD9                       4774 1$: ; update LAST with APP_LAST 
      001AD9 90 BF 1C         [ 2] 4775         ldw ULAST,y
      001ADC 90 BF 16         [ 2] 4776         ldw UCNTXT,y
      001ADF                       4777 2$:  
                                   4778 ; update APP_CP if < app_space 
      001ADF 90 CE 40 04      [ 2] 4779         ldw y,APP_CP  
      001AE3 90 B3 1A         [ 2] 4780         cpw y,UCP   
      001AE6 24 06            [ 1] 4781         jruge 3$ 
      001AE8 CD 1B D4         [ 4] 4782         call UPDATCP
      001AEB 90 BE 1A         [ 2] 4783         ldw y,UCP   
      001AEE                       4784 3$:
      001AEE 90 BF 1A         [ 2] 4785         ldw UCP,y                 
                                   4786 ; update UVP with APP_VP  
                                   4787 ; if APP_VP>UVP else do the opposite 
      001AF1 90 CE 40 06      [ 2] 4788         ldw y,APP_VP 
      001AF5 90 B3 18         [ 2] 4789         cpw y,UVP 
      001AF8 22 05            [ 1] 4790         jrugt 4$
      001AFA CD 1B EB         [ 4] 4791         call UPDATVP 
      001AFD 20 03            [ 2] 4792         jra 6$
      001AFF                       4793 4$: ; update UVP with APP_VP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001AFF 90 BF 18         [ 2] 4794         ldw UVP,y 
      001B02                       4795 6$:      
      001B02 CD 14 5A         [ 4] 4796         CALL     PRESE   ;initialize data stack and TIB
      001B05 CD 1A 99         [ 4] 4797         CALL     TBOOT
      001B08 CD 0C 8B         [ 4] 4798         CALL     ATEXE   ;application boot
      001B0B CD 17 33         [ 4] 4799         CALL     OVERT
      001B0E CC 14 77         [ 2] 4800         JP     QUIT    ;start interpretation
                                   4801 
                                   4802 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                                   4803         .include "flash.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21 ;  routines to write to FLASH, EEPROM 
                                     22 ;  and OPTION 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26 ;--------------------------------
                                     27 ; initialize FPTR 
                                     28 ; FP!  ( ud -- )
                                     29 ;---------------------------------
      001B11 1A A0                   30     .word LINK 
                           001B13    31     LINK=.
      001B13 03                      32     .byte 3 
      001B14 46 50 21                33     .ascii "FP!"
      001B17                         34 FPSTOR:
      001B17 90 93            [ 1]   35     ldw y,x
      001B19 90 FE            [ 2]   36     ldw y,(y)
      001B1B 90 9F            [ 1]   37     ld a,yl 
      001B1D B7 34            [ 1]   38     ld FPTR,a 
      001B1F 1C 00 02         [ 2]   39     addw x,#CELLL 
      001B22 90 93            [ 1]   40     ldw y,x 
      001B24 90 FE            [ 2]   41     ldw y,(y)
      001B26 90 BF 35         [ 2]   42     ldw PTR16,y
      001B29 1C 00 02         [ 2]   43     addw x,#CELLL 
      001B2C 81               [ 4]   44     ret 
                                     45 
                                     46 ;-----------------------------------
                                     47 ; return EEPROM base address 
                                     48 ; as a double 
                                     49 ;  EEPROM  ( -- ud )
                                     50 ;-----------------------------------
      001B2D 1B 13                   51     .word LINK 
                           001B2F    52 LINK=.
      001B2F 06                      53     .byte 6 
      001B30 45 45 50 52 4F 4D       54     .ascii "EEPROM"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001B36                         55 EEPROM: 
      001B36 90 AE 40 00      [ 2]   56     ldw y,#EEPROM_BASE
      001B3A 1D 00 04         [ 2]   57     subw x,#2*CELLL 
      001B3D EF 02            [ 2]   58     ldw (2,x),y 
      001B3F 90 5F            [ 1]   59     clrw y 
      001B41 FF               [ 2]   60     ldw (x),y 
      001B42 81               [ 4]   61     ret
                                     62 
                                     63 ;---------------------------------
                                     64 ; return APP_LAST pointer as double
                                     65 ; EEP-LAST ( -- ud )
                                     66 ;---------------------------------
      001B43 1B 2F                   67 	.word LINK 
                           001B45    68 	LINK=.
      001B45 08                      69 	.byte 8 
      001B46 45 45 50 2D 4C 41 53    70 	.ascii "EEP-LAST"
             54
      001B4E                         71 EEPLAST:
      001B4E 1D 00 04         [ 2]   72 	subw x,#2*CELLL 
      001B51 90 AE 40 00      [ 2]   73 	ldw y,#APP_LAST 
      001B55 EF 02            [ 2]   74 	ldw (2,x),y 
      001B57 90 5F            [ 1]   75 	clrw y 
      001B59 FF               [ 2]   76 	ldw (x),y 
      001B5A 81               [ 4]   77 	ret 
                                     78 
                                     79 ;----------------------------------
                                     80 ; return APP_RUN pointer as double	
                                     81 ; EEP-RUN ( -- ud )
                                     82 ;-----------------------------------
      001B5B 1B 45                   83 	.word LINK 
                           001B5D    84 	LINK=.
      001B5D 07                      85 	.byte 7
      001B5E 45 45 50 2D 52 55 4E    86 	.ascii "EEP-RUN"
      001B65                         87 EEPRUN:
      001B65 1D 00 04         [ 2]   88 	subw x,#2*CELLL 
      001B68 90 AE 40 02      [ 2]   89 	ldw y,#APP_RUN 
      001B6C EF 02            [ 2]   90 	ldw (2,x),y 
      001B6E 90 5F            [ 1]   91 	clrw y 
      001B70 FF               [ 2]   92 	ldw (x),y 
      001B71 81               [ 4]   93 	ret 
                                     94 
                                     95 ;------------------------------------
                                     96 ; return APP_CP pointer as double 
                                     97 ; EEP-CP ( -- ud )
                                     98 ;------------------------------------
      001B72 1B 5D                   99 	.word LINK
                           001B74   100 	LINK=.
      001B74 06                     101 	.byte 6 
      001B75 45 45 50 2D 43 50      102 	.ascii "EEP-CP"
      001B7B                        103 EEPCP:
      001B7B 1D 00 04         [ 2]  104 	subw x,#2*CELLL 
      001B7E 90 AE 40 04      [ 2]  105 	ldw y,#APP_CP  
      001B82 EF 02            [ 2]  106 	ldw (2,x),y 
      001B84 90 5F            [ 1]  107 	clrw y 
      001B86 FF               [ 2]  108 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001B87 81               [ 4]  109 	ret 
                                    110 
                                    111 ;------------------------------------
                                    112 ; return APP_VP pointer as double 
                                    113 ; EEP-VP ( -- ud )
                                    114 ;-------------------------------------
      001B88 1B 74                  115 	.word LINK
                           001B8A   116 	LINK=.
      001B8A 06                     117 	.byte 6
      001B8B 45 45 50 2D 56 50      118 	.ascii "EEP-VP"
      001B91                        119 EEPVP:
      001B91 1D 00 04         [ 2]  120 	subw x,#2*CELLL 
      001B94 90 AE 40 06      [ 2]  121 	ldw y,#APP_VP  
      001B98 EF 02            [ 2]  122 	ldw (2,x),y 
      001B9A 90 5F            [ 1]  123 	clrw y 
      001B9C FF               [ 2]  124 	ldw (x),y 
      001B9D 81               [ 4]  125 	ret 
                                    126 
                                    127 ;----------------------------------
                                    128 ; update APP_LAST with LAST 
                                    129 ; UPDAT-LAST ( -- )
                                    130 ;----------------------------------
      001B9E 1B 8A                  131 	.word LINK 
                           001BA0   132 	LINK=.
      001BA0 0A                     133 	.byte 10
      001BA1 55 50 44 41 54 2D 4C   134 	.ascii "UPDAT-LAST"
             41 53 54
      001BAB                        135 UPDATLAST:
      001BAB CD 07 2D         [ 4]  136 	call LAST
      001BAE CD 05 07         [ 4]  137 	call AT  
      001BB1 CD 1B 4E         [ 4]  138 	call EEPLAST
      001BB4 CC 1D A1         [ 2]  139 	jp EESTORE 
                                    140 
                                    141 ;---------------------------------
                                    142 ; update APP_RUN 
                                    143 ; UPDAT-RUN ( a -- )
                                    144 ;---------------------------------
      001BB7 1B A0                  145 	.word LINK
                           001BB9   146 	LINK=.
      001BB9 09                     147 	.byte 9
      001BBA 55 50 44 41 54 2D 52   148 	.ascii "UPDAT-RUN"
             55 4E
      001BC3                        149 UPDATRUN:
      001BC3 CD 1B 65         [ 4]  150 	call EEPRUN
      001BC6 CC 1D A1         [ 2]  151 	jp EESTORE 
                                    152 	
                                    153 ;---------------------------------
                                    154 ; update APP_CP with CP 
                                    155 ; UPDAT-CP ( -- )
                                    156 ;---------------------------------
      001BC9 1B B9                  157 	.word LINK 
                           001BCB   158 	LINK=.
      001BCB 08                     159 	.byte 8 
      001BCC 55 50 44 41 54 2D 43   160 	.ascii "UPDAT-CP"
             50
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001BD4                        161 UPDATCP:
      001BD4 CD 07 1D         [ 4]  162 	call CPP 
      001BD7 CD 05 07         [ 4]  163 	call AT 
      001BDA CD 1B 7B         [ 4]  164 	call EEPCP 
      001BDD CC 1D A1         [ 2]  165 	jp EESTORE 
                                    166 
                                    167 ;----------------------------------
                                    168 ; update APP_VP with VP 
                                    169 ; UPDAT-VP ( -- )
                                    170 ;----------------------------------
      001BE0 1B CB                  171 	.word LINK
                           001BE2   172 	LINK=.
      001BE2 08                     173 	.byte 8 
      001BE3 55 50 44 41 54 2D 56   174 	.ascii "UPDAT-VP" 
             50
      001BEB                        175 UPDATVP:
      001BEB CD 07 0F         [ 4]  176 	call VPP 
      001BEE CD 05 07         [ 4]  177 	call AT
      001BF1 CD 1B 91         [ 4]  178 	call EEPVP 
      001BF4 CC 1D A1         [ 2]  179 	jp EESTORE
                                    180 	
                           000001   181 .if NUCLEO
                                    182 ;----------------------------------
                                    183 ; fetch integer at address over 65535
                                    184 ;  F@   ( ud -- n )
                                    185 ;----------------------------------
      001BF7 1B E2                  186     .word LINK 
                           001BF9   187 LINK=.
      001BF9 02                     188     .byte 2
      001BFA 46 40                  189     .ascii "F@"
      001BFC                        190 FARAT:
      001BFC CD 1B 17         [ 4]  191     call FPSTOR
      001BFF CC 1C C4         [ 2]  192 	jp EE_READ 
                                    193 
                                    194 
                                    195 ;-------------------------------------
                                    196 ; fetch C at address over 65535 
                                    197 ; FC@ ( ud -- c)
                                    198 ;-------------------------------------
      001C02 1B F9                  199     .word LINK
                           001C04   200     LINK=.
      001C04 03                     201     .byte 3 
      001C05 46 43 40               202     .ascii "FC@" 
      001C08                        203 FARCAT:
      001C08 CD 1B 17         [ 4]  204     call FPSTOR
      001C0B CC 1C E6         [ 2]  205 	jp EE_CREAD  
                                    206 .endif ; NUCLEO 
                                    207 
                                    208 ;----------------------------------
                                    209 ; UNLOCK EEPROM/OPT for writing/erasing
                                    210 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    211 ;  UNLKEE   ( -- )
                                    212 ;----------------------------------
      001C0E 1C 04                  213     .word LINK 
                           001C10   214 LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001C10 06                     215     .byte 6 
      001C11 55 4E 4C 4B 45 45      216     .ascii "UNLKEE"
      001C17                        217 UNLKEE:
      001C17 35 00 50 5B      [ 1]  218 	mov FLASH_CR2,#0 
      001C1B 35 FF 50 5C      [ 1]  219 	mov FLASH_NCR2,#0xFF 
      001C1F 35 AE 50 64      [ 1]  220 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001C23 35 56 50 64      [ 1]  221     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001C27 72 07 50 5F FB   [ 2]  222 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001C2C 81               [ 4]  223 	ret
                                    224 
                                    225 ;----------------------------------
                                    226 ; UNLOCK FLASH for writing/erasing
                                    227 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    228 ; UNLKFL  ( -- )
                                    229 ;----------------------------------
      001C2D 1C 10                  230     .word LINK 
                           001C2F   231 LINK=. 
      001C2F 06                     232     .byte 6 
      001C30 55 4E 4C 4B 46 4C      233     .ascii "UNLKFL"    
      001C36                        234 UNLKFL:
      001C36 35 00 50 5B      [ 1]  235 	mov FLASH_CR2,#0 
      001C3A 35 FF 50 5C      [ 1]  236 	mov FLASH_NCR2,#0xFF 
      001C3E 35 56 50 62      [ 1]  237 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001C42 35 AE 50 62      [ 1]  238 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001C46 72 03 50 5F FB   [ 2]  239 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001C4B 81               [ 4]  240 	ret
                                    241 
                                    242 ;-----------------------------
                                    243 ; UNLOCK FLASH or EEPROM 
                                    244 ; according to FPTR address 
                                    245 ;  UNLOCK ( -- )
                                    246 ;-----------------------------
      001C4C 1C 2F                  247 	.word LINK 
                           001C4E   248 	LINK=.
      001C4E 06                     249 	.byte 6
      001C4F 55 4E 4C 4F 43 4B      250 	.ascii "UNLOCK"
      001C55                        251 UNLOCK:
                                    252 ; put addr[15:0] in Y, for bounds check.
      001C55 90 BE 35         [ 2]  253 	ldw y,PTR16   ; Y=addr15:0
                                    254 ; check addr[23:16], if <> 0 then it is extened flash memory
      001C58 3D 34            [ 1]  255 	tnz FPTR 
      001C5A 26 16            [ 1]  256 	jrne 4$
      001C5C 90 A3 80 00      [ 2]  257     cpw y,#FLASH_BASE
      001C60 24 10            [ 1]  258     jruge 4$
      001C62 90 A3 40 00      [ 2]  259 	cpw y,#EEPROM_BASE  
      001C66 25 0D            [ 1]  260     jrult 9$
      001C68 90 A3 48 7F      [ 2]  261 	cpw y,#OPTION_END 
      001C6C 22 07            [ 1]  262 	jrugt 9$
      001C6E CD 1C 17         [ 4]  263 	call UNLKEE
      001C71 81               [ 4]  264 	ret 
      001C72 CD 1C 36         [ 4]  265 4$: call UNLKFL
      001C75 81               [ 4]  266 9$: ret 
                                    267 
                                    268 ;-------------------------
                                    269 ; LOCK write access to 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                                    270 ; FLASH and EEPROM 
                                    271 ; LOCK ( -- )
                                    272 ;-------------------------
      001C76 1C 4E                  273 	.word LINK 
                           001C78   274 	LINK=.
      001C78 04                     275 	.byte 4 
      001C79 4C 4F 43 4B            276 	.ascii "LOCK" 
      001C7D                        277 LOCK: 
      001C7D 72 13 50 5F      [ 1]  278 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001C81 72 17 50 5F      [ 1]  279 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001C85 81               [ 4]  280 	ret 
                                    281 
                                    282 ;-------------------------
                                    283 ; increment FPTR 
                                    284 ; INC-FPTR ( -- )
                                    285 ;-------------------------
      001C86 1C 78                  286 	.word LINK 
                           001C88   287 	LINK=. 
      001C88 08                     288 	.byte 8 
      001C89 49 4E 43 2D 46 50 54   289 	.ascii "INC-FPTR" 
             52
      001C91                        290 INC_FPTR:
      001C91 3C 36            [ 1]  291 	inc PTR8 
      001C93 26 0C            [ 1]  292 	jrne 1$
      001C95 90 89            [ 2]  293 	pushw y 
      001C97 90 BE 34         [ 2]  294 	ldw y,FPTR 
      001C9A 90 5C            [ 1]  295 	incw y 
      001C9C 90 BF 34         [ 2]  296 	ldw FPTR,y
      001C9F 90 85            [ 2]  297 	popw y  
      001CA1 81               [ 4]  298 1$: ret 
                                    299 
                                    300 ;------------------------------
                                    301 ; add u to FPTR 
                                    302 ; PTR+ ( u -- )
                                    303 ;------------------------------
      001CA2 1C 88                  304 	.word LINK 
                           001CA4   305 	LINK=.
      001CA4 04                     306 	.byte 4 
      001CA5 50 54 52 2B            307 	.ascii "PTR+"
      001CA9                        308 PTRPLUS:
      001CA9 90 93            [ 1]  309 	ldw y,x 
      001CAB 1C 00 02         [ 2]  310 	addw x,#CELLL 
      001CAE 72 B9 00 35      [ 2]  311 	addw y,PTR16 
      001CB2 90 BF 35         [ 2]  312 	ldw PTR16,y  
      001CB5 24 02            [ 1]  313 	jrnc 1$
      001CB7 3C 34            [ 1]  314 	inc FPTR 
      001CB9 81               [ 4]  315 1$: ret 
                                    316 
                                    317 ;---------------------------------
                                    318 ; read word at address pointed FPTR
                                    319 ; increment FPTR 
                                    320 ; EE-READ ( -- w )
                                    321 ;------------------------------------
      001CBA 1C A4                  322 	.word LINK 
                           001CBC   323 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001CBC 07                     324 	.byte 7 
      001CBD 45 45 2D 52 45 41 44   325 	.ascii "EE-READ"
      001CC4                        326 EE_READ:
      001CC4 1D 00 02         [ 2]  327 	subw x,#CELLL 
      001CC7 92 BC 00 34      [ 5]  328 	ldf a,[FPTR]
      001CCB 90 95            [ 1]  329 	ld yh,a 
      001CCD CD 1C 91         [ 4]  330 	call INC_FPTR 
      001CD0 92 BC 00 34      [ 5]  331 	ldf a,[FPTR]
      001CD4 CD 1C 91         [ 4]  332 	call INC_FPTR 
      001CD7 90 97            [ 1]  333 	ld yl,a 
      001CD9 FF               [ 2]  334 	ldw (x),y 
      001CDA 81               [ 4]  335 	ret 
                                    336 
                                    337 ;---------------------------------------
                                    338 ; Read byte at address pointed by FPTR 
                                    339 ; EE-CREAD ( -- c )
                                    340 ;---------------------------------------
      001CDB 1C BC                  341 	.word LINK 
                           001CDD   342 	LINK=.
      001CDD 08                     343 	.byte 8
      001CDE 45 45 2D 43 52 45 41   344 	.ascii "EE-CREAD" 
             44
      001CE6                        345 EE_CREAD:
      001CE6 1D 00 02         [ 2]  346 	subw x,#CELLL 
      001CE9 92 BC 00 34      [ 5]  347 	ldf a,[FPTR]	
      001CED CD 1C 91         [ 4]  348 	call INC_FPTR
      001CF0 90 5F            [ 1]  349 	clrw y 
      001CF2 90 97            [ 1]  350 	ld yl,a 
      001CF4 FF               [ 2]  351 	ldw (x),y 
      001CF5 81               [ 4]  352 	ret 
                                    353 
                                    354 ;----------------------------
                                    355 ; write a byte at address pointed 
                                    356 ; by FPTR and increment FPTR.
                                    357 ; Expect pointer already initialized 
                                    358 ; and memory unlocked 
                                    359 ; WR-BYTE ( c -- )
                                    360 ;----------------------------
      001CF6 1C DD                  361 	.word LINK 
                           001CF8   362 	LINK=. 
      001CF8 07                     363 	.byte 7 
      001CF9 57 52 2D 42 59 54 45   364 	.ascii "WR-BYTE" 
                                    365 
      001D00                        366 WR_BYTE:
      001D00 CD 04 63         [ 4]  367 	call FC_XOFF
      001D03 90 93            [ 1]  368 	ldw y,x 
      001D05 90 FE            [ 2]  369 	ldw y,(y)
      001D07 1C 00 02         [ 2]  370 	addw x,#CELLL 
      001D0A 90 9F            [ 1]  371 	ld a,yl
      001D0C 92 BD 00 34      [ 4]  372 	ldf [FPTR],a
      001D10 72 05 50 5F FB   [ 2]  373 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001D15 CD 04 4D         [ 4]  374 	call FC_XON
      001D18 CC 1C 91         [ 2]  375 	jp INC_FPTR 
                                    376 
                                    377 ;---------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                    378 ; write a word at address pointed 
                                    379 ; by FPTR and increment FPTR 
                                    380 ; Expect pointer already initialzed 
                                    381 ; and memory unlocked 
                                    382 ; WR-WORD ( w -- )
                                    383 ;---------------------------------------
      001D1B 1C F8                  384 	.word LINK 
                           001D1D   385 	LINK=.
      001D1D 07                     386 	.byte 7 
      001D1E 57 52 2D 57 4F 52 44   387 	.ascii "WR-WORD" 
      001D25                        388 WR_WORD:
      001D25 CD 04 63         [ 4]  389 	call FC_XOFF
      001D28 90 93            [ 1]  390 	ldw y,x
      001D2A 90 FE            [ 2]  391 	ldw y,(y)
      001D2C 1C 00 02         [ 2]  392 	addw x,#CELLL 
      001D2F 90 9E            [ 1]  393 	ld a,yh 
      001D31 92 BD 00 34      [ 4]  394 	ldf [FPTR],a
      001D35 72 05 50 5F FB   [ 2]  395 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001D3A CD 1C 91         [ 4]  396 	call INC_FPTR 
      001D3D 90 9F            [ 1]  397 	ld a,yl 
      001D3F 92 BD 00 34      [ 4]  398 	ldf [FPTR],a
      001D43 72 05 50 5F FB   [ 2]  399 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001D48 CD 04 4D         [ 4]  400 	call FC_XON
      001D4B CC 1C 91         [ 2]  401 	jp INC_FPTR 
                                    402 
                                    403 
                                    404 ;---------------------------------------
                                    405 ; write a byte to FLASH or EEPROM/OPTION  
                                    406 ; EEC!  (c ud -- )
                                    407 ;---------------------------------------
      001D4E 1D 1D                  408     .word LINK 
                           001D50   409 	LINK=.
      001D50 04                     410     .byte 4 
      001D51 45 45 43 21            411     .ascii "EEC!"
                                    412 	; local variables 
                           000001   413 	BTW = 1   ; byte to write offset on stack
                           000002   414     OPT = 2 
                           000002   415 	VSIZE = 2
      001D55                        416 EECSTORE:
      001D55 52 02            [ 2]  417 	sub sp,#VSIZE
      001D57 CD 1B 17         [ 4]  418     call FPSTOR
      001D5A E6 01            [ 1]  419 	ld a,(1,x)
      001D5C 43               [ 1]  420 	cpl a 
      001D5D 6B 01            [ 1]  421 	ld (BTW,sp),a ; byte to write 
      001D5F 0F 02            [ 1]  422 	clr (OPT,sp)  ; OPTION flag
      001D61 CD 1C 55         [ 4]  423 	call UNLOCK 
                                    424 	; check if option
      001D64 3D 34            [ 1]  425 	tnz FPTR 
      001D66 26 19            [ 1]  426 	jrne 2$
      001D68 90 BE 35         [ 2]  427 	ldw y,PTR16 
      001D6B 90 A3 48 00      [ 2]  428 	cpw y,#OPTION_BASE
      001D6F 2B 10            [ 1]  429 	jrmi 2$
      001D71 90 A3 48 80      [ 2]  430 	cpw y,#OPTION_END+1
      001D75 2A 0A            [ 1]  431 	jrpl 2$
      001D77 03 02            [ 1]  432 	cpl (OPT,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                                    433 	; OPTION WRITE require this UNLOCK 
      001D79 72 1E 50 5B      [ 1]  434     bset FLASH_CR2,#FLASH_CR2_OPT
      001D7D 72 1F 50 5C      [ 1]  435     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001D81                        436 2$: 
      001D81 CD 1D 00         [ 4]  437 	call WR_BYTE 	
      001D84 0D 02            [ 1]  438 	tnz (OPT,sp)
      001D86 27 0D            [ 1]  439 	jreq 3$ 
      001D88 7B 01            [ 1]  440     ld a,(BTW,sp)
      001D8A 90 5F            [ 1]  441     clrw y
      001D8C 90 97            [ 1]  442 	ld yl,a 
      001D8E 1D 00 02         [ 2]  443 	subw x,#CELLL 
      001D91 FF               [ 2]  444 	ldw (x),y 
      001D92 CD 1D 00         [ 4]  445 	call WR_BYTE
      001D95                        446 3$: 
      001D95 CD 1C 7D         [ 4]  447 	call LOCK 
      001D98 5B 02            [ 2]  448 	addw sp,#VSIZE 
      001D9A 81               [ 4]  449     ret
                                    450 
                                    451 ;------------------------------
                                    452 ; write integer in FLASH|EEPROM
                                    453 ; EE! ( n ud -- )
                                    454 ;------------------------------
      001D9B 1D 50                  455 	.word LINK 
                           001D9D   456 	LINK=.
      001D9D 03                     457 	.byte 3 
      001D9E 45 45 21               458 	.ascii "EE!"
      001DA1                        459 EESTORE:
      001DA1 CD 1B 17         [ 4]  460 	call FPSTOR 
      001DA4 CD 1C 55         [ 4]  461 	call UNLOCK 
      001DA7 90 93            [ 1]  462 	ldw y,x 
      001DA9 90 FE            [ 2]  463 	ldw y,(y)
      001DAB 90 89            [ 2]  464 	pushw y 
      001DAD 90 5E            [ 1]  465 	swapw y 
      001DAF FF               [ 2]  466 	ldw (x),y 
      001DB0 CD 1D 00         [ 4]  467 	call WR_BYTE 
      001DB3 90 85            [ 2]  468 	popw y 
      001DB5 1D 00 02         [ 2]  469 	subw x,#CELLL
      001DB8 FF               [ 2]  470 	ldw (x),y 
      001DB9 CD 1D 00         [ 4]  471 	call WR_BYTE
      001DBC CC 1C 7D         [ 2]  472 	jp LOCK 
                                    473 
                                    474 
                                    475 ;----------------------------
                                    476 ; Erase flash memory row 
                                    477 ; stm8s208 as 128 bytes rows
                                    478 ; ROW-ERASE ( ud -- )
                                    479 ;----------------------------
      001DBF 1D 9D                  480 	.word LINK 
                           001DC1   481 	LINK=. 
      001DC1 09                     482 	.byte 9 
      001DC2 52 4F 57 2D 45 52 41   483 	.ascii "ROW-ERASE" 
             53 45
      001DCB                        484 row_erase:
      001DCB CD 04 63         [ 4]  485 	call FC_XOFF
      001DCE CD 1B 17         [ 4]  486 	call FPSTOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                                    487 ;code must be execute from RAM 
                                    488 ;copy routine to PAD 
      001DD1 1D 00 02         [ 2]  489 	subw x,#CELLL 
      001DD4 90 AE 1E 24      [ 2]  490 	ldw y,#row_erase_proc
      001DD8 FF               [ 2]  491 	ldw (x),y 
      001DD9 CD 0C 66         [ 4]  492 	call PAD 
      001DDC 90 AE 1E 4B      [ 2]  493 	ldw y,#row_erase_proc_end 
      001DE0 72 A2 1E 24      [ 2]  494 	subw y,#row_erase_proc
      001DE4 1D 00 02         [ 2]  495 	subw x,#CELLL 
      001DE7 FF               [ 2]  496 	ldw (x),y 
      001DE8 CD 0C A2         [ 4]  497 	call CMOVE 
      001DEB                        498 block_erase:
      001DEB 90 BE 35         [ 2]  499 	ldw y,FPTR+1
      001DEE 90 A3 33 80      [ 2]  500 	cpw y,#app_space 
      001DF2 2A 19            [ 1]  501 	jrpl erase_flash 
                                    502 ; erase EEPROM block
      001DF4 90 A3 40 00      [ 2]  503 	cpw y,#EEPROM_BASE 
      001DF8 24 04            [ 1]  504 	jruge 1$
      001DFA CD 04 4D         [ 4]  505 	call FC_XON
      001DFD 81               [ 4]  506 	ret ; bad address 
      001DFE 90 A3 47 FF      [ 2]  507 1$: cpw y,#EEPROM_END 
      001E02 23 04            [ 2]  508 	jrule 2$ 
      001E04 CD 04 4D         [ 4]  509 	call FC_XON
      001E07 81               [ 4]  510 	ret ; bad address 
      001E08                        511 2$:	
      001E08 CD 1C 17         [ 4]  512 	call UNLKEE 
      001E0B 20 03            [ 2]  513 	jra proceed_erase
                                    514 ; erase flash block:
      001E0D                        515 erase_flash:
      001E0D CD 1C 36         [ 4]  516 	call UNLKFL 
      001E10                        517 proceed_erase:
      001E10 CD 0C 66         [ 4]  518 	call PAD 
      001E13 90 93            [ 1]  519 	ldw y,x
      001E15 90 FE            [ 2]  520 	ldw y,(y)
      001E17 1C 00 02         [ 2]  521 	addw x,#CELLL  
      001E1A 90 FD            [ 4]  522 	call (y) 
      001E1C 72 17 50 5F      [ 1]  523 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001E20 CD 04 4D         [ 4]  524 	call FC_XON
      001E23 81               [ 4]  525 	ret 
                                    526 
                                    527 ; this routine is to be copied to PAD 
      001E24                        528 row_erase_proc:
      001E24 35 20 50 5B      [ 1]  529 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001E28 35 DF 50 5C      [ 1]  530 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001E2C 4F               [ 1]  531 	clr a 
      001E2D 90 5F            [ 1]  532 	clrw y 
      001E2F 91 A7 00 34      [ 1]  533 	ldf ([FPTR],y),a
      001E33 90 5C            [ 1]  534     incw y
      001E35 91 A7 00 34      [ 1]  535 	ldf ([FPTR],y),a
      001E39 90 5C            [ 1]  536     incw y
      001E3B 91 A7 00 34      [ 1]  537 	ldf ([FPTR],y),a
      001E3F 90 5C            [ 1]  538     incw y
      001E41 91 A7 00 34      [ 1]  539 	ldf ([FPTR],y),a
      001E45 72 05 50 5F FB   [ 2]  540 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001E4A 81               [ 4]  541 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001E4B                        542 row_erase_proc_end:
                                    543 
                                    544 
                                    545 ;-----------------------------------
                                    546 ; block programming must be 
                                    547 ; executed from RAM 
                                    548 ; initial contidions: 
                                    549 ; 		memory unlocked
                                    550 ;       FPTR initialized 
                                    551 ; input: 
                                    552 ;    x   buffer address 
                                    553 ;-----------------------------------
                           000001   554 	BCNT=1 
      001E4B                        555 copy_buffer:
      001E4B 4B 80            [ 1]  556 	push #BLOCK_SIZE  
                                    557 ;enable block programming 
      001E4D 72 10 50 5B      [ 1]  558 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001E51 72 11 50 5C      [ 1]  559 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001E55 90 5F            [ 1]  560 	clrw y
      001E57 F6               [ 1]  561 1$:	ld a,(x)
      001E58 91 A7 00 34      [ 1]  562 	ldf ([FPTR],y),a
      001E5C 5C               [ 1]  563 	incw x 
      001E5D 90 5C            [ 1]  564 	incw y 
      001E5F 0A 01            [ 1]  565 	dec (BCNT,sp)
      001E61 26 F4            [ 1]  566 	jrne 1$
                                    567 ; wait EOP bit 
      001E63 72 05 50 5F FB   [ 2]  568 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001E68 84               [ 1]  569 	pop a ; remove BCNT from stack 
      001E69 81               [ 4]  570 	ret 
      001E6A                        571 copy_buffer_end:
                                    572 
                                    573 ;-------------------------
                                    574 ; move program_row to RAM 
                                    575 ; in TIB 
                                    576 ;------------------------
      001E6A                        577 copy_prog_to_ram:
      001E6A 1D 00 06         [ 2]  578 	subw x,#6
      001E6D 90 AE 1E 4B      [ 2]  579 	ldw y,#copy_buffer 
      001E71 EF 04            [ 2]  580 	ldw (4,x),y 
      001E73 90 AE 17 00      [ 2]  581 	ldw y,#TIBBASE
      001E77 EF 02            [ 2]  582 	ldw (2,x),y 
      001E79 90 AE 1E 6A      [ 2]  583 	ldw y,#copy_buffer_end 
      001E7D 72 A2 1E 4B      [ 2]  584 	subw y,#copy_buffer  
      001E81 FF               [ 2]  585 	ldw (x),y 
      001E82 CD 0C A2         [ 4]  586 	call CMOVE 
      001E85 81               [ 4]  587 	ret 
                                    588 
                                    589 
                                    590 ;-----------------------------
                                    591 ; write a row in FLASH/EEPROM 
                                    592 ; WR-ROW ( a ud -- )
                                    593 ; a -> address 128 byte buffer to write 
                                    594 ; ud ->  row address in FLASH|EEPROM 
                                    595 ;-----------------------------
      001E86 1D C1                  596 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



                           001E88   597 	LINK=.
      001E88 06                     598 	.byte 6 
      001E89 57 52 2D 52 4F 57      599 	.ascii "WR-ROW"
      001E8F                        600 write_row:
      001E8F CD 04 63         [ 4]  601 	call FC_XOFF
      001E92 CD 1B 17         [ 4]  602 	call FPSTOR
                                    603 ; align to FLASH block 
      001E95 A6 80            [ 1]  604 	ld a,#0x80 
      001E97 B4 36            [ 1]  605 	and a,PTR8 
      001E99 B7 36            [ 1]  606 	ld PTR8,a  
      001E9B CD 1E 6A         [ 4]  607 	call copy_prog_to_ram
      001E9E CD 1C 55         [ 4]  608 	call UNLOCK
      001EA1 90 93            [ 1]  609 	ldw y,x 
      001EA3 90 FE            [ 2]  610 	ldw y,(y)
      001EA5 1C 00 02         [ 2]  611 	addw x,#CELLL 
      001EA8 89               [ 2]  612 	pushw x 
      001EA9 93               [ 1]  613 	ldw x,y ; buffer address in x 
      001EAA CD 17 00         [ 4]  614 	call TIBBASE
      001EAD CD 1C 7D         [ 4]  615 	call LOCK
      001EB0 85               [ 2]  616 	popw x 
      001EB1 CD 04 4D         [ 4]  617 	call FC_XON 
      001EB4 81               [ 4]  618 	ret 
                                    619 
                                    620 ;-------------------------------------
                                    621 ; change value of OPTION register 
                                    622 ; SET-OPT (c n -- ) 
                                    623 ; c new value.
                                    624 ; n OPT  number {1..7}
                                    625 ;--------------------------------------
      001EB5 1E 88                  626 		.word LINK 
                           001EB7   627 		LINK=.
      001EB7 07                     628 		.byte 7 
      001EB8 53 45 54 2D 4F 50 54   629 		.ascii "SET-OPT" 
      001EBF                        630 set_option: 
      001EBF 90 93            [ 1]  631 		ldw y,x 
      001EC1 90 FE            [ 2]  632 		ldw y,(y)
      001EC3 27 06            [ 1]  633 		jreq 1$
      001EC5 90 A3 00 07      [ 2]  634 		cpw y,#7 
      001EC9 23 04            [ 2]  635 		jrule 2$ 
                                    636 ; invalid OPTION number 		
      001ECB 1C 00 04         [ 2]  637 1$:		addw x,#2*CELLL
      001ECE 81               [ 4]  638 		ret
      001ECF 90 58            [ 2]  639 2$:		sllw y 
      001ED1 72 A9 47 FF      [ 2]  640 		addw y,#OPTION_BASE-1
      001ED5 FF               [ 2]  641 		ldw (x),y 
      001ED6 1D 00 02         [ 2]  642 		subw x,#CELLL 
      001ED9 90 5F            [ 1]  643 		clrw y 
      001EDB FF               [ 2]  644 		ldw (x),y 
      001EDC CD 1D 55         [ 4]  645 		call EECSTORE
      001EDF 81               [ 4]  646 		ret 
                                    647 
                                    648 
                                    649 
                                    650 ;--------------------------------------
                                    651 ; reset system to its original state 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                    652 ; before any user modification
                                    653 ; PRISTINE ( -- )
                                    654 ;-------------------------------------
      001EE0 1E B7                  655 	.word LINK  
                           001EE2   656 	LINK=.
      001EE2 08                     657 	.byte 8 
      001EE3 50 52 49 53 54 49 4E   658 	.ascii "PRISTINE"
             45
      001EEB                        659 pristine:
                                    660 ;;; erase EEPROM
      001EEB CD 1B 36         [ 4]  661 	call EEPROM 
      001EEE CD 07 C8         [ 4]  662 1$:	call DDUP 
      001EF1 CD 1D CB         [ 4]  663 	call row_erase
      001EF4 90 93            [ 1]  664 	ldw y,x 
      001EF6 90 EE 02         [ 2]  665 	ldw y,(2,y)
      001EF9 72 A9 00 80      [ 2]  666 	addw y,#BLOCK_SIZE
      001EFD EF 02            [ 2]  667 	ldw (2,x),y
      001EFF 90 A3 48 00      [ 2]  668 	cpw y,#OPTION_BASE 
      001F03 25 E9            [ 1]  669 	jrult 1$
                                    670 ;;; reset OPTION to default values
      001F05 90 AE 00 01      [ 2]  671 	ldw y,#1 ; OPT1 
      001F09 FF               [ 2]  672 2$:	ldw (x),y   
      001F0A 90 5F            [ 1]  673 	clrw y 
      001F0C EF 02            [ 2]  674 	ldw (2,x),y  ; ( 0 1 -- ) 
      001F0E CD 07 C8         [ 4]  675 	call DDUP    ; ( 0 1 0 1 -- )  
      001F11 CD 1E BF         [ 4]  676 	call set_option
      001F14 90 93            [ 1]  677 	ldw y,x 
      001F16 90 FE            [ 2]  678 	ldw y,(y)
      001F18 90 5C            [ 1]  679 	incw y  ; next OPTION 
      001F1A 90 A3 00 08      [ 2]  680 	cpw y,#8 
      001F1E 25 E9            [ 1]  681 	jrult 2$
                                    682 ;;; erase first row of app_space 	
      001F20 90 AE 33 80      [ 2]  683 	ldw y,#app_space
      001F24 EF 02            [ 2]  684 	ldw (2,x),y  
      001F26 90 5F            [ 1]  685 	clrw y 
      001F28 FF               [ 2]  686 	ldw (x),y ; ( app_space 0 -- )
      001F29 CD 1D CB         [ 4]  687 	call row_erase 
                                    688 ; reset interrupt vectors 
      001F2C 1D 00 02         [ 2]  689 	subw x,#CELLL 
      001F2F 90 5F            [ 1]  690 	clrw y  
      001F31 FF               [ 2]  691 4$:	ldw (x),y  ; ( n -- ) int# 
      001F32 CD 05 AE         [ 4]  692 	call DUPP  
      001F35 CD 1F 52         [ 4]  693 	call reset_vector
      001F38 90 93            [ 1]  694 	ldw y,x 
      001F3A 90 FE            [ 2]  695 	ldw y,(y)
      001F3C 90 5C            [ 1]  696 	incw y   ; next vector 
      001F3E 90 A3 00 19      [ 2]  697 	cpw y,#25 
      001F42 25 ED            [ 1]  698 	jrult 4$
      001F44 CC 00 00         [ 2]  699 	jp NonHandledInterrupt ; reset MCU
                                    700 
                                    701 ;------------------------------
                                    702 ; reset an interrupt vector 
                                    703 ; to its initial value 
                                    704 ; i.e. NonHandledInterrupt
                                    705 ; RST-IVEC ( n -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                                    706 ;-----------------------------
      001F47 1E E2                  707 	.word LINK 
                           001F49   708 	LINK=. 
      001F49 08                     709 	.byte 8 
      001F4A 52 53 54 2D 49 56 45   710 	.ascii "RST-IVEC"
             43
      001F52                        711 reset_vector:
      001F52 90 93            [ 1]  712 	ldw y,x
      001F54 1C 00 02         [ 2]  713 	addw x,#CELLL 
      001F57 90 FE            [ 2]  714 	ldw y,(y)
      001F59 90 A3 00 17      [ 2]  715 	cpw y,#23 
      001F5D 27 3A            [ 1]  716 	jreq 9$
      001F5F 90 A3 00 1D      [ 2]  717 	cpw y,#29 ; last vector
      001F63 22 34            [ 1]  718 	jrugt 9$  
      001F65 90 58            [ 2]  719 	sllw y 
      001F67 90 58            [ 2]  720 	sllw y 
      001F69 72 A9 80 08      [ 2]  721 	addw y,#0x8008 ; irq0 address 
      001F6D 90 BF 26         [ 2]  722 	ldw YTEMP,y
      001F70 1D 00 06         [ 2]  723 	subw x,#3*CELLL 
      001F73 EF 02            [ 2]  724 	ldw (2,x),y 
      001F75 90 5F            [ 1]  725 	clrw y
      001F77 FF               [ 2]  726 	ldw (x),y 
      001F78 A6 82            [ 1]  727 	ld a,#0x82 
      001F7A 90 95            [ 1]  728 	ld yh,a
      001F7C EF 04            [ 2]  729 	ldw (4,x),y
      001F7E CD 1D A1         [ 4]  730 	call EESTORE
      001F81 1D 00 06         [ 2]  731 	subw x,#3*CELLL
      001F84 90 5F            [ 1]  732 	clrw y 
      001F86 FF               [ 2]  733 	ldw (x),y 
      001F87 90 AE 00 00      [ 2]  734 	ldw y,#NonHandledInterrupt
      001F8B EF 04            [ 2]  735 	ldw (4,x),y 
      001F8D 90 BE 26         [ 2]  736 	ldw y,YTEMP  
      001F90 72 A9 00 02      [ 2]  737 	addw y,#2
      001F94 EF 02            [ 2]  738 	ldw (2,x),y 
      001F96 CD 1D A1         [ 4]  739 	call EESTORE
      001F99 81               [ 4]  740 9$:	ret 
                                    741 
                                    742 
                                    743 ;------------------------------
                                    744 ; all interrupt vector with 
                                    745 ; an address >= a are resetted 
                                    746 ; to default
                                    747 ; CHKIVEC ( a -- )
                                    748 ;------------------------------
      001F9A 1F 49                  749 	.word LINK 
                           001F9C   750 	LINK=.
      001F9C 07                     751 	.byte 7
      001F9D 43 48 4B 49 56 45 43   752 	.ascii "CHKIVEC"
                                    753 ;local variables 
                           000001   754 	SSP=1
                           000003   755 	CADR=3
                           000005   756 	OFS=5
                           000006   757 	VSIZE=6  
      001FA4                        758 CHKIVEC:
      001FA4 52 06            [ 2]  759 	sub sp,#VSIZE ;alloc local variables 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      001FA6 90 93            [ 1]  760 	ldw y,x 
      001FA8 90 FE            [ 2]  761 	ldw y,(y)
      001FAA 17 03            [ 2]  762 	ldw (CADR,sp),y ; ca 
      001FAC 1F 01            [ 2]  763 	ldw (SSP,sp),x 
      001FAE AE 80 0A         [ 2]  764 	ldw x,#0x800a ; irq0 address 
      001FB1 BF 35            [ 2]  765 	ldw PTR16,X
      001FB3 AE FF FC         [ 2]  766 	ldw x,#-4 
      001FB6 1C 00 04         [ 2]  767 1$:	addw x,#4
      001FB9 A3 00 78         [ 2]  768 	cpw x,#30*4 ; irq0-29 
      001FBC 27 22            [ 1]  769 	jreq 9$
      001FBE 90 93            [ 1]  770 	ldw y,x  
      001FC0 91 D6 35         [ 4]  771 	ld a,([PTR16],y)
      001FC3 11 03            [ 1]  772 	cp a,(CADR,sp)
      001FC5 25 EF            [ 1]  773 	jrult 1$
      001FC7 90 5C            [ 1]  774 	incw y 
      001FC9 91 D6 35         [ 4]  775 	ld a,([PTR16],y)
      001FCC 11 04            [ 1]  776 	cp a,(CADR+1,sp) 
      001FCE 25 E6            [ 1]  777 	jrult 1$ 
      001FD0 1F 05            [ 2]  778 	ldw (OFS,sp),x 
      001FD2 54               [ 2]  779 	srlw x
      001FD3 54               [ 2]  780 	srlw x 
      001FD4 90 93            [ 1]  781 	ldw y,x 
      001FD6 1E 01            [ 2]  782 	ldw x,(SSP,sp)
      001FD8 FF               [ 2]  783 	ldw (x),y
      001FD9 CD 1F 52         [ 4]  784 	call reset_vector
      001FDC 1E 05            [ 2]  785 	ldw x,(OFS,sp) 
      001FDE 20 D6            [ 2]  786 	jra 1$
      001FE0 1E 01            [ 2]  787 9$:	ldw x,(SSP,sp) 
      001FE2 1C 00 02         [ 2]  788 	addw x,#CELLL 
      001FE5 5B 06            [ 2]  789 	addw sp,#VSIZE ; drop local variables  
      001FE7 81               [ 4]  790 	ret 
                                    791 
                                    792 ;------------------------------
                                    793 ; set interrupt vector 
                                    794 ; SET-IVEC ( ud n -- )
                                    795 ;  ud Handler address
                                    796 ;  n  vector # 0 .. 29 
                                    797 ;-----------------------------
      001FE8 1F 9C                  798 	.word LINK
                           001FEA   799 	LINK=.
      001FEA 08                     800 	.byte 8 
      001FEB 53 45 54 2D 49 56 45   801 	.ascii "SET-IVEC" 
             43
      001FF3                        802 set_vector:
      001FF3 90 93            [ 1]  803     ldw y,x 
      001FF5 1C 00 02         [ 2]  804 	addw x,#CELLL 
      001FF8 90 FE            [ 2]  805 	ldw y,(y) ; vector #
      001FFA 90 A3 00 1D      [ 2]  806 	cpw y,#29 ; last vector
      001FFE 23 04            [ 2]  807 	jrule 2$
      002000 1C 00 04         [ 2]  808 	addw x,#2*CELLL 
      002003 81               [ 4]  809 	ret
      002004 90 58            [ 2]  810 2$:	sllw y 
      002006 90 58            [ 2]  811 	sllw y 
      002008 72 A9 80 08      [ 2]  812 	addw y,#0X8008 ; IRQ0 vector address 
      00200C 90 BF 26         [ 2]  813 	ldw YTEMP,y ; vector address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      00200F A6 82            [ 1]  814 	ld a,#0x82 
      002011 90 95            [ 1]  815 	ld yh,a 
      002013 E6 01            [ 1]  816 	ld a,(1,x) ; isr address bits 23..16 
      002015 90 97            [ 1]  817 	ld yl,a 
                                    818 ;  write 0x82 + most significant byte of int address	
      002017 1D 00 06         [ 2]  819 	subw x,#3*CELLL 
      00201A EF 04            [ 2]  820 	ldw (4,x),y 
      00201C 90 BE 26         [ 2]  821 	ldw y,YTEMP
      00201F EF 02            [ 2]  822 	ldw (2,x),y ; vector address 
      002021 90 5F            [ 1]  823 	clrw y 
      002023 FF               [ 2]  824 	ldw (x),y   ; as a double 
      002024 CD 1D A1         [ 4]  825 	call EESTORE 
      002027 90 93            [ 1]  826 	ldw y,x 
      002029 90 EE 02         [ 2]  827 	ldw y,(2,y) ; bits 15..0 int vector 
      00202C 1D 00 06         [ 2]  828 	subw x,#3*CELLL 
      00202F EF 04            [ 2]  829 	ldw (4,x),y 
      002031 90 BE 26         [ 2]  830 	ldw y,YTEMP 
      002034 72 A9 00 02      [ 2]  831 	addw y,#2 
      002038 EF 02            [ 2]  832 	ldw (2,x),y 
      00203A 90 5F            [ 1]  833 	clrw y 
      00203C FF               [ 2]  834 	ldw (x),y 
      00203D CD 1D A1         [ 4]  835 	call EESTORE
      002040 1C 00 04         [ 2]  836 	addw x,#2*CELLL  
      002043 81               [ 4]  837 9$: ret 
                                    838 
                                    839 
                                    840 ;------------------------
                                    841 ; Compile word to flash
                                    842 ; EE, (w -- )
                                    843 ;-----------------------
      002044 1F EA                  844 	.word LINK
                           002046   845 	LINK=.
      002046 03                     846 	.byte 3
      002047 45 45 2C               847 	.ascii "EE,"
      00204A                        848 EE_COMMA:
      00204A 1D 00 04         [ 2]  849 	subw x,#2*CELLL 
      00204D 90 BE 1A         [ 2]  850 	ldw y,UCP
      002050 90 89            [ 2]  851 	pushw y 
      002052 EF 02            [ 2]  852 	ldw (2,x),y 
      002054 90 5F            [ 1]  853 	clrw y 
      002056 FF               [ 2]  854 	ldw (x),y
      002057 CD 1D A1         [ 4]  855 	call EESTORE
      00205A 90 85            [ 2]  856 	popw y 
      00205C 72 A9 00 02      [ 2]  857 	addw y,#2
      002060 90 BF 1A         [ 2]  858 	ldw UCP,y
      002063 81               [ 4]  859 	ret 
                                    860 
                                    861 
                                    862 ;-------------------------
                                    863 ; Compile byte to flash 
                                    864 ; EEC, ( c -- )	
                                    865 ;-------------------------
      002064 20 46                  866 	.word LINK 
                           002066   867 	LINK=.
      002066 04                     868 	.byte 4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      002067 45 45 43 2C            869 	.ascii "EEC,"
      00206B                        870 EE_CCOMMA:
      00206B 1D 00 04         [ 2]  871 	subw x,#2*CELLL 
      00206E 90 BE 1A         [ 2]  872 	ldw y,UCP
      002071 90 89            [ 2]  873 	pushw y 
      002073 EF 02            [ 2]  874 	ldw (2,x),y 
      002075 90 5F            [ 1]  875 	clrw y 
      002077 FF               [ 2]  876 	ldw (x),y
      002078 CD 1D 55         [ 4]  877 	call EECSTORE
      00207B 90 85            [ 2]  878 	popw y 
      00207D 90 5C            [ 1]  879 	incw y 
      00207F 90 BF 1A         [ 2]  880 	ldw UCP,y
      002082 81               [ 4]  881 	ret 
                                    882 
                                    883 
                                    884 ;--------------------------
                                    885 ; copy FLASH block to ROWBUF
                                    886 ; ROW>BUF ( ud -- )
                                    887 ;--------------------------
      002083 20 66                  888 	.word LINK 
                           002085   889 	LINK=.
      002085 07                     890 	.byte 7 
      002086 52 4F 57 3E 42 55 46   891 	.ascii "ROW>BUF"
      00208D                        892 ROW2BUF: 
      00208D CD 1B 17         [ 4]  893 	call FPSTOR 
      002090 A6 80            [ 1]  894 	ld a,#BLOCK_SIZE
      002092 88               [ 1]  895 	push a 
      002093 B4 36            [ 1]  896 	and a,PTR8 ; block align 
      002095 B7 36            [ 1]  897 	ld PTR8,a
      002097 90 AE 16 80      [ 2]  898 	ldw y,#ROWBUFF 
      00209B 92 BC 00 34      [ 5]  899 1$: ldf a,[FPTR]
      00209F 90 F7            [ 1]  900 	ld (y),a
      0020A1 CD 1C 91         [ 4]  901 	call INC_FPTR
      0020A4 90 5C            [ 1]  902 	incw y 
      0020A6 0A 01            [ 1]  903 	dec (1,sp)
      0020A8 26 F1            [ 1]  904 	jrne 1$ 
      0020AA 84               [ 1]  905 	pop a 
      0020AB 81               [ 4]  906 	ret 
                                    907 
                                    908 
                                    909 ;---------------------------
                                    910 ; copy ROWBUFF to flash 
                                    911 ; BUF>ROW ( ud -- )
                                    912 ; ud is row address as double 
                                    913 ;---------------------------
      0020AC 20 85                  914 	.word LINK 
                           0020AE   915 	LINK=.
      0020AE 07                     916 	.byte 7 
      0020AF 42 55 46 3E 52 4F 57   917 	.ascii "BUF>ROW" 
      0020B6                        918 BUF2ROW:
      0020B6 CD 06 BC         [ 4]  919 	call TBUF ; ( ud rb -- )
      0020B9 CD 07 7C         [ 4]  920 	call ROT 
      0020BC CD 07 7C         [ 4]  921 	call ROT  ; ( rb ud -- )
      0020BF CD 1E 8F         [ 4]  922 	call write_row 
      0020C2 81               [ 4]  923 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



                                    924 
                                    925 ;---------------------------------
                                    926 ; how many byte free in that row 
                                    927 ; RFREE ( a -- n )
                                    928 ; a is least byte of target address
                                    929 ;----------------------------------
      0020C3 20 AE                  930 	.word LINK 
                           0020C5   931 	LINK=.
      0020C5 05                     932 	.byte 5 
      0020C6 52 46 52 45 45         933 	.ascii "RFREE"
      0020CB                        934 RFREE:
      0020CB E6 01            [ 1]  935 	ld a,(1,x)
      0020CD A4 7F            [ 1]  936 	and a,#BLOCK_SIZE-1 
      0020CF B7 26            [ 1]  937 	ld YTEMP,a 
      0020D1 A6 80            [ 1]  938 	ld a,#BLOCK_SIZE 
      0020D3 B0 26            [ 1]  939 	sub a,YTEMP 
      0020D5 90 5F            [ 1]  940 	clrw y 
      0020D7 90 97            [ 1]  941 	ld yl,a
      0020D9 FF               [ 2]  942 	ldw (x),y 
      0020DA 81               [ 4]  943 	ret 
                                    944 
                                    945 ;---------------------------------
                                    946 ; write u bytes to flash/EEPROM 
                                    947 ; constraint to row limit 
                                    948 ; RAM>EE ( ud a u -- u2 )
                                    949 ; ud flash address 
                                    950 ; a ram address 
                                    951 ; u bytes count
                                    952 ; return u2 bytes written  
                                    953 ;-------------------------------
      0020DB 20 C5                  954 	.word LINK 
                           0020DD   955 	LINK=. 
      0020DD 06                     956 	.byte 6
      0020DE 52 41 4D 3E 45 45      957 	.ascii "RAM>EE"
                                    958 	
      0020E4                        959 RAM2EE:
                                    960 ; copy ud on top 
      0020E4 90 93            [ 1]  961 	ldw y,x 
      0020E6 90 EE 06         [ 2]  962 	ldw y,(6,y) ; LSW of ud  
      0020E9 90 BF 26         [ 2]  963 	ldw YTEMP,y 
      0020EC 90 93            [ 1]  964 	ldw y,x 
      0020EE 90 EE 04         [ 2]  965 	ldw y,(4,y)  ; MSW of ud 
      0020F1 1D 00 04         [ 2]  966 	subw x,#2*CELLL 
      0020F4 FF               [ 2]  967 	ldw (x),y 
      0020F5 90 BE 26         [ 2]  968 	ldw y,YTEMP 
      0020F8 EF 02            [ 2]  969 	ldw (2,x),y 
      0020FA CD 20 8D         [ 4]  970 	call ROW2BUF 
      0020FD 90 93            [ 1]  971 	ldw y,x 
      0020FF 90 EE 06         [ 2]  972 	ldw y,(6,y)
      002102 90 89            [ 2]  973 	pushw y ; udl 
      002104 90 9F            [ 1]  974 	ld a,yl
      002106 A4 7F            [ 1]  975 	and a,#BLOCK_SIZE-1 
      002108 90 5F            [ 1]  976 	clrw y 
      00210A 90 97            [ 1]  977 	ld yl,a 
      00210C 72 A9 16 80      [ 2]  978 	addw y,#ROWBUFF 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      002110 1D 00 02         [ 2]  979 	subw x,#CELLL 
      002113 FF               [ 2]  980 	ldw (x),y  
      002114 CD 05 BE         [ 4]  981 	call SWAPP ;  ( ud a ra u -- )
      002117 CD 05 58         [ 4]  982 	call RFROM  
      00211A CD 20 CB         [ 4]  983 	call RFREE 
      00211D CD 09 36         [ 4]  984 	call MIN
      002120 CD 05 AE         [ 4]  985 	call DUPP 
      002123 CD 05 77         [ 4]  986 	call TOR  
      002126 CD 0C A2         [ 4]  987 	call CMOVE
      002129 CD 20 B6         [ 4]  988 	call BUF2ROW 
      00212C CD 05 58         [ 4]  989 	call RFROM 
      00212F 81               [ 4]  990 	ret 
                                    991 
                                    992 
                                    993 ;--------------------------
                                    994 ; expand 16 bit address 
                                    995 ; to 32 bit address 
                                    996 ; FADDR ( a -- ud )
                                    997 ;--------------------------
      002130 20 DD                  998 	.word LINK 
                           002132   999 	LINK=. 
      002132 05                    1000 	.byte 5 
      002133 46 41 44 44 52        1001 	.ascii "FADDR"
      002138                       1002 FADDR:
      002138 CC 0B 67         [ 2] 1003 	jp ZERO 
                                   1004 
                                   1005 
                                   1006 ;--------------------------
                                   1007 ; move new colon definition to FLASH 
                                   1008 ; using WR-ROW for efficiency 
                                   1009 ; preserving bytes already used 
                                   1010 ; in the current block. 
                                   1011 ; At this point the compiler as completed
                                   1012 ; in RAM and pointers CP and CNTXT updated.
                                   1013 ; CNTXT point to nfa of new word and  
                                   1014 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                   1015 ; 
                                   1016 ; FMOVE ( -- cp+ )
                                   1017 ; 
                                   1018 ;--------------------------
      00213B 21 32                 1019 	.word LINK 
                           00213D  1020 	LINK=.
      00213D 05                    1021 	.byte 5 
      00213E 46 4D 4F 56 45        1022 	.ascii "FMOVE" 
      002143                       1023 FMOVE:
      002143 CD 06 CE         [ 4] 1024 	call TFLASH 
      002146 CD 05 07         [ 4] 1025 	CALL AT 
      002149 CD 04 A4         [ 4] 1026 	CALL QBRAN 
      00214C 21 C7                 1027 	.word no_move  
      00214E CD 07 1D         [ 4] 1028 	call CPP
      002151 CD 05 07         [ 4] 1029 	call AT  
      002154 CD 05 AE         [ 4] 1030 	call DUPP ; ( udl udl -- )
      002157 CD 07 01         [ 4] 1031 	call CNTXT 
      00215A CD 05 07         [ 4] 1032 	call AT 
      00215D CD 04 71         [ 4] 1033 	call DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      002160 00 02                 1034 	.word 2 
      002162 CD 08 56         [ 4] 1035 	call SUBB ; ( udl udl a -- )
      002165 CD 05 BE         [ 4] 1036 	call SWAPP 
      002168 CD 21 38         [ 4] 1037 	call FADDR 
      00216B CD 07 7C         [ 4] 1038 	call ROT  ; ( udl ud a -- )
      00216E CD 05 AE         [ 4] 1039 	call DUPP 
      002171 CD 05 77         [ 4] 1040 	call TOR    ; R: a 
      002174                       1041 FMOVE2: 
      002174 CD 0C 55         [ 4] 1042 	call HERE 
      002177 CD 05 6B         [ 4] 1043 	call RAT 
      00217A CD 08 56         [ 4] 1044 	call SUBB ; (udl ud a wl -- )
      00217D                       1045 next_row:
      00217D CD 05 AE         [ 4] 1046 	call DUPP 
      002180 CD 05 77         [ 4] 1047 	call TOR  ; ( udl ud a wl -- ) R: a wl
      002183 CD 20 E4         [ 4] 1048 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      002186 CD 05 AE         [ 4] 1049 	call DUPP 
      002189 CD 05 77         [ 4] 1050 	call TOR
      00218C CD 07 DD         [ 4] 1051 	call PLUS  ; ( udl+ ) 
      00218F CD 05 AE         [ 4] 1052 	call DUPP 
      002192 CD 0B 67         [ 4] 1053 	call ZERO   ; ( udl+ ud -- )
      002195 CD 05 58         [ 4] 1054 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      002198 CD 05 58         [ 4] 1055 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      00219B CD 05 D8         [ 4] 1056 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      00219E CD 08 56         [ 4] 1057 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      0021A1 CD 05 AE         [ 4] 1058 	call DUPP 
      0021A4 CD 04 A4         [ 4] 1059 	call QBRAN
      0021A7 21 C0                 1060 	.word fmove_done 
      0021A9 CD 05 BE         [ 4] 1061 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      0021AC CD 05 58         [ 4] 1062 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      0021AF CD 07 DD         [ 4] 1063 	call PLUS  ; ( udl+2 ud wl- a+ )
      0021B2 CD 05 AE         [ 4] 1064 	call DUPP 
      0021B5 CD 05 77         [ 4] 1065 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      0021B8 CD 05 BE         [ 4] 1066 	call SWAPP 
      0021BB CD 04 D3         [ 4] 1067 	call BRAN
      0021BE 21 7D                 1068 	.word next_row  
      0021C0                       1069 fmove_done:	
      0021C0 CD 05 58         [ 4] 1070 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      0021C3 1C 00 0A         [ 2] 1071 	addw x,#5*CELLL ; (  -- cp+ ) new CP 
      0021C6 81               [ 4] 1072  	ret  
      0021C7                       1073 no_move:
      0021C7 CD 0B 67         [ 4] 1074 	call ZERO
      0021CA 81               [ 4] 1075 	ret 
                                   1076 
                                   1077 ;------------------------------------------
                                   1078 ; adjust pointers after **FMOVE** operetion.
                                   1079 ; UPDAT-PTR ( cp+ -- )
                                   1080 ; cp+ is new CP position after FMOVE 
                                   1081 ;-------------------------------------------
      0021CB 21 3D                 1082 	.word LINK 
                           0021CD  1083 	LINK=.
      0021CD 09                    1084 	.byte 9
      0021CE 55 50 44 41 54 2D 50  1085 	.ascii "UPDAT-PTR" 
             54 52
      0021D7                       1086 UPDATPTR:
                                   1087 ;reset VP to previous position  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      0021D7 CD 1B 91         [ 4] 1088 	call EEPVP 
      0021DA CD 05 A4         [ 4] 1089 	call DROP 
      0021DD CD 05 07         [ 4] 1090 	call AT
      0021E0 CD 07 0F         [ 4] 1091 	call VPP 
      0021E3 CD 04 F0         [ 4] 1092 	call STORE
                                   1093 ;update CONTEXT and LAST 
      0021E6 CD 1B 7B         [ 4] 1094 	call EEPCP 
      0021E9 CD 05 A4         [ 4] 1095 	call DROP
      0021EC CD 05 07         [ 4] 1096 	call AT
      0021EF CD 04 71         [ 4] 1097 	call DOLIT 
      0021F2 00 02                 1098 	.word 2 
      0021F4 CD 07 DD         [ 4] 1099 	call PLUS 
      0021F7 CD 05 AE         [ 4] 1100 	call DUPP 
      0021FA CD 07 01         [ 4] 1101 	call CNTXT 
      0021FD CD 04 F0         [ 4] 1102 	call STORE
      002200 CD 07 2D         [ 4] 1103 	call LAST
      002203 CD 04 F0         [ 4] 1104 	call STORE 
      002206 CD 1B AB         [ 4] 1105 	call UPDATLAST 
                                   1106 ;update CP 
      002209 CD 07 1D         [ 4] 1107 	call CPP 
      00220C CD 04 F0         [ 4] 1108 	call STORE
      00220F CD 1B D4         [ 4] 1109 	call UPDATCP 
      002212 81               [ 4] 1110 	ret 
                                   1111 
                                   1112 ;-----------------------------
                                   1113 ; move interrupt sub-routine
                                   1114 ; in flash memory
                                   1115 ;----------------------------- 
      002213 21 CD                 1116 	.word LINK 
                           002215  1117 	LINK=. 
      002215 06                    1118 	.byte 6
      002216 49 46 4D 4F 56 45     1119 	.ascii "IFMOVE" 
      00221C                       1120 IFMOVE:
      00221C CD 06 CE         [ 4] 1121 	call TFLASH 
      00221F CD 05 07         [ 4] 1122 	CALL AT 
      002222 CD 04 A4         [ 4] 1123 	CALL QBRAN 
      002225 21 C7                 1124 	.word no_move 
      002227 CD 07 1D         [ 4] 1125 	call CPP 
      00222A CD 05 07         [ 4] 1126 	call AT 
      00222D CD 05 AE         [ 4] 1127 	call DUPP ; ( udl udl -- )
      002230 CD 1B 91         [ 4] 1128 	call EEPVP 
      002233 CD 05 A4         [ 4] 1129 	call DROP
      002236 CD 05 07         [ 4] 1130 	call AT  ; ( udl udl a )
      002239 CD 05 77         [ 4] 1131 	call TOR 
      00223C CD 21 38         [ 4] 1132 	call FADDR
      00223F CD 05 6B         [ 4] 1133 	call RAT ; ( udl ud a -- ) R: a 
      002242 CC 21 74         [ 2] 1134 	jp FMOVE2 
                                   1135 
                                   1136 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



                           000001  4804 .if WANT_SCALING_CONST 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                                   4805         .include "const_ratio.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------------------------------------
                                     20 ; Irrationals constants 
                                     21 ; expressed as 2 integers ratio
                                     22 ; aproximation. These are to be used with scaling operators */ and */MOD 
                                     23 ; REF: https://www.forth.com/starting-forth/5-fixed-point-arithmetic/
                                     24 ;---------------------------------------------------------------------
                                     25 
                                     26 ;       PI ( --  355 113 )
                                     27 ; precision 8.5e-8 
                                     28 ; usage example to compute circle area
                                     29 ; : CAREA DUP * PI */ ;
                                     30 ; 
                                     31 
      002245 22 15                   32         .word LINK 
                           002247    33         LINK=.
      002247 02                      34         .byte 2
      002248 50 49                   35         .ascii "PI" 
      00224A                         36 PII:
      00224A 1D 00 04         [ 2]   37         subw x,#2*CELLL 
      00224D 90 AE 01 63      [ 2]   38         ldw y,#355 
      002251 EF 02            [ 2]   39         ldw (2,x),y 
      002253 90 AE 00 71      [ 2]   40         ldw y,#113 
      002257 FF               [ 2]   41         ldw (x),y 
      002258 81               [ 4]   42         ret 
                                     43 
                                     44 ;      SQRT2 ( -- 19601  13860 )
                                     45 ; precision: 1.5e-9 
                                     46 ; usage example to compute Voltage peek to peek from Vrms 
                                     47 ; : VPP SQRT2 */ 2 * ;
                                     48 ;
      002259 22 47                   49         .word LINK 
                           00225B    50         LINK=.
      00225B 05                      51         .byte 5 
      00225C 53 51 52 54 32          52         .ascii "SQRT2" 
      002261                         53 SQRT2:
      002261 1D 00 04         [ 2]   54         subw x,#2*CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      002264 90 AE 4C 91      [ 2]   55         ldw y,#19601 
      002268 EF 02            [ 2]   56         ldw (2,x),y 
      00226A 90 AE 36 24      [ 2]   57         ldw y,#13860 
      00226E FF               [ 2]   58         ldw (x),y 
      00226F 81               [ 4]   59         ret 
                                     60 
                                     61 ;   SQRT3 ( -- 18817 10864 )
                                     62 ; precision: 1.1e-9
                                     63 ;
      002270 22 5B                   64         .word LINK 
                           002272    65         LINK=.
      002272 05                      66         .byte 5
      002273 53 51 52 54 33          67         .ascii "SQRT3" 
      002278                         68 SQRT3: 
      002278 1D 00 04         [ 2]   69     subw x,#2*CELLL 
      00227B 90 AE 49 81      [ 2]   70     ldw y,#18817 
      00227F EF 02            [ 2]   71     ldw (2,x),y 
      002281 90 AE 2A 70      [ 2]   72     ldw y,#10864 
      002285 FF               [ 2]   73     ldw (x),y 
      002286 81               [ 4]   74     ret 
                                     75 
                                     76 ;   E ( -- 28667 10546 )
                                     77 ; precision: 5.5e-9 
                                     78 ; natural log base 
      002287 22 72                   79         .word LINK 
                           002289    80         LINK=.
      002289 01                      81         .byte 1
      00228A 45                      82         .ascii "E" 
      00228B                         83 ENEPER:
      00228B 1D 00 04         [ 2]   84     subw x,#2*CELLL 
      00228E 90 AE 6F FB      [ 2]   85     ldw y,#28667 
      002292 EF 02            [ 2]   86     ldw (2,x),y 
      002294 90 AE 29 32      [ 2]   87     ldw y,#10546 
      002298 FF               [ 2]   88     ldw (x),y 
      002299 81               [ 4]   89     ret 
                                     90 
                                     91 ;   SQRT10 ( -- 22936 7253 )
                                     92 ; precision: 5.7e-9 
      00229A 22 89                   93         .word LINK 
                           00229C    94         LINK=.
      00229C 06                      95         .byte 6 
      00229D 53 51 52 54 31 30       96         .ascii "SQRT10" 
      0022A3                         97 SQRT10:
      0022A3 1D 00 04         [ 2]   98     subw x,#2*CELLL
      0022A6 90 AE 59 98      [ 2]   99     ldw y,#22936 
      0022AA EF 02            [ 2]  100     ldw (2,x),y 
      0022AC 90 AE 1C 55      [ 2]  101     ldw y,#7253
      0022B0 FF               [ 2]  102     ldw (x),y 
      0022B1 81               [ 4]  103     ret 
                                    104 
                                    105 ;   12RT2 ( -- 26797 25293 )
                                    106 ; precision: 1.0e-9 
                                    107 ; used in music to compute well tempered scale
      0022B2 22 9C                  108         .word LINK 
                           0022B4   109         LINK=. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      0022B4 05                     110         .byte 5 
      0022B5 31 32 52 54 32         111         .ascii "12RT2"
      0022BA                        112 RT12_2:
      0022BA 1D 00 04         [ 2]  113     subw x,#2*CELLL 
      0022BD 90 AE 68 AD      [ 2]  114     ldw y,#26797
      0022C1 EF 02            [ 2]  115     ldw (2,x),y 
      0022C3 90 AE 62 CD      [ 2]  116     ldw y,#25293
      0022C7 FF               [ 2]  117     ldw (x),y 
      0022C8 81               [ 4]  118     ret 
                                    119 
                                    120 ;   LOG2s ( -- 2040 11103 )
                                    121 ; log(2)/1.6384
                                    122 ; precision: 1.1e-8
      0022C9 22 B4                  123         .word LINK 
                           0022CB   124         LINK=.
      0022CB 05                     125         .byte 5 
      0022CC 4C 4F 47 32 53         126         .ascii "LOG2S" 
      0022D1                        127 LOG2S:
      0022D1 1D 00 04         [ 2]  128     subw x,#2*CELLL
      0022D4 90 AE 07 F8      [ 2]  129     ldw y,#2040 
      0022D8 EF 02            [ 2]  130     ldw (2,x),y 
      0022DA 90 AE 2B 5F      [ 2]  131     ldw y,#11103 
      0022DE FF               [ 2]  132     ldw (x),y 
      0022DF 81               [ 4]  133     ret 
                                    134 
                                    135 ;   LN2 ( -- 485 11464 )
                                    136 ; ln(2)/16.384 
                                    137 ; precision: 1.0e-7 
      0022E0 22 CB                  138         .word LINK 
                           0022E2   139         LINK=.
      0022E2 04                     140         .byte 4 
      0022E3 4C 4E 32 53            141         .ascii "LN2S" 
      0022E7                        142 LN2S: 
      0022E7 1D 00 04         [ 2]  143     subw x,#2*CELLL
      0022EA 90 AE 01 E5      [ 2]  144     ldw y,#485
      0022EE EF 02            [ 2]  145     ldw (2,x),y 
      0022F0 90 AE 2C C8      [ 2]  146     ldw y,#11464 
      0022F4 FF               [ 2]  147     ldw (x),y 
      0022F5 81               [ 4]  148     ret 
                                    149 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



                                   4806 .endif
                           000001  4807 .if WANT_CONST_TABLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



                                   4808         .include "ctable.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;------------------------------
                                     20 ; words to create and read 
                                     21 ; constants tables in FLASH 
                                     22 ; and EEPROM
                                     23 ;------------------------------
                                     24 
                                     25 ;-----------------------------
                                     26 ; allocate space in CODE area 
                                     27 ; for constant table.
                                     28 ; CALLOT ( u -- ad )
                                     29 ; u  bytes to allocates 
                                     30 ; ad data address as double.
                                     31 ;-----------------------------
      0022F6 22 E2                   32     .word LINK 
                           0022F8    33     LINK=.
      0022F8 06                      34     .byte 6
      0022F9 43 41 4C 4C 4F 54       35     .ascii "CALLOT"
      0022FF                         36 CALLOT:
      0022FF CD 07 1D         [ 4]   37     CALL CPP
      002302 CD 05 AE         [ 4]   38     CALL DUPP 
      002305 CD 05 07         [ 4]   39     CALL AT 
      002308 CD 05 77         [ 4]   40     CALL TOR 
      00230B CD 0B D7         [ 4]   41     CALL PSTOR 
      00230E CD 1B D4         [ 4]   42     CALL UPDATCP 
      002311 CD 05 58         [ 4]   43     CALL RFROM
      002314 CC 0B 67         [ 2]   44     JP ZERO 
                                     45 
                                     46 ;------------------------------
                                     47 ; create constants bytes table 
                                     48 ; in persistant memory
                                     49 ;  CTABLE ( n+ -- ad ; <string> )
                                     50 ; n+ bytes reserved 
                                     51 ;-----------------------------
      002317 22 F8                   52     .word LINK 
                           002319    53     LINK=.
      002319 06                      54     .byte 6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      00231A 43 54 41 42 4C 45       55     .ascii "CTABLE"
      002320                         56 CTABLE:
      002320 CD 22 FF         [ 4]   57     CALL CALLOT     
      002323 CC 18 D6         [ 2]   58     JP DCONST 
                                     59      
                                     60 
                                     61 ;--------------------------------
                                     62 ; create constants words table 
                                     63 ; in persistant memory 
                                     64 ; WTABLE ( n+ -- ad ; <string> )
                                     65 ; n+  words reserved  
                                     66 ;--------------------------------
      002326 23 19                   67     .word LINK 
                           002328    68     LINK=.
      002328 06                      69     .byte 6
      002329 57 54 41 42 4C 45       70     .ascii "WTABLE"
      00232F                         71 WTABLE:
      00232F CD 0A EE         [ 4]   72     CALL CELLS  
      002332 CD 22 FF         [ 4]   73     CALL CALLOT 
      002335 CC 18 D6         [ 2]   74     JP DCONST 
                                     75 
                                     76 ;---------------------------------
                                     77 ; stack an element of CTABLE 
                                     78 ; CTABL@ ( u ad -- c )
                                     79 ; u element order {0..size-1}
                                     80 ; a|ad table address 
                                     81 ;--------------------------------
      002338 23 28                   82     .word LINK 
                           00233A    83     LINK=.
      00233A 06                      84     .byte 6
      00233B 43 54 41 42 4C 40       85     .ascii "CTABL@" 
      002341                         86 CTAT:
      002341 CD 1B 17         [ 4]   87     call FPSTOR 
      002344 CD 1C A9         [ 4]   88     call PTRPLUS 
      002347 CC 1C E6         [ 2]   89     jp EE_CREAD 
                                     90 
                                     91 ;---------------------------------
                                     92 ; stack an element of WTABLE 
                                     93 ; WTABL@ ( u ud -- w )
                                     94 ; u is element order {0..size-1}
                                     95 ; a|ud table address 
                                     96 ;----------------------------------
      00234A 23 3A                   97     .word LINK 
                           00234C    98     LINK=.
      00234C 06                      99     .byte 6
      00234D 57 54 41 42 4C 40      100     .ascii "WTABL@" 
      002353                        101 WTAT:
      002353 CD 1B 17         [ 4]  102     call FPSTOR 
      002356 CD 0A EE         [ 4]  103     call CELLS 
      002359 CD 1C A9         [ 4]  104     call PTRPLUS 
      00235C CD 1C C4         [ 4]  105     call EE_READ 
      00235F 81               [ 4]  106     ret 
                                    107 
                                    108 ;--------------------------
                                    109 ; tool to initialize character table 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



                                    110 ; CTINIT ( ad -- )
                                    111 ; ad is table address 
                                    112 ;--------------------------
      002360 23 4C                  113     .word LINK 
                           002362   114     LINK=.
      002362 06                     115     .byte 6 
      002363 43 54 49 4E 49 54      116     .ascii "CTINIT"
      002369                        117 CTINIT:
      002369 CD 1B 17         [ 4]  118     CALL FPSTOR
      00236C CD 1C 55         [ 4]  119     CALL UNLOCK
      00236F CD 0B 67         [ 4]  120     CALL ZERO 
      002372 CD 0A FB         [ 4]  121 1$: CALL ONEP 
      002375 CD 05 AE         [ 4]  122     CALL DUPP 
      002378 CD 23 C5         [ 4]  123     CALL INTQ 
      00237B CD 04 A4         [ 4]  124     CALL QBRAN 
      00237E 23 88                  125     .word 2$
      002380 CD 1D 00         [ 4]  126     call WR_BYTE 
      002383 CD 04 D3         [ 4]  127     CALL BRAN 
      002386 23 72                  128     .word 1$ 
      002388 CD 07 BD         [ 4]  129 2$: CALL DDROP 
      00238B CD 1C 7D         [ 4]  130     CALL LOCK 
      00238E 81               [ 4]  131     ret 
                                    132 
                                    133 ;--------------------------
                                    134 ; tool to initialize word table 
                                    135 ; WTINIT ( ad -- )
                                    136 ; ad is table address 
                                    137 ;--------------------------
      00238F 23 62                  138     .word LINK 
                           002391   139     LINK=.
      002391 06                     140     .byte 6 
      002392 57 54 49 4E 49 54      141     .ascii "WTINIT"
      002398                        142 WTINIT:
      002398 CD 1B 17         [ 4]  143     CALL FPSTOR
      00239B CD 1C 55         [ 4]  144     CALL UNLOCK
      00239E CD 0B 67         [ 4]  145     CALL ZERO 
      0023A1 CD 0A FB         [ 4]  146 1$: CALL ONEP 
      0023A4 CD 05 AE         [ 4]  147     CALL DUPP
      0023A7 CD 23 C5         [ 4]  148     CALL INTQ
      0023AA CD 04 A4         [ 4]  149     CALL QBRAN 
      0023AD 23 B7                  150     .word 2$
      0023AF CD 1D 25         [ 4]  151     call WR_WORD 
      0023B2 CD 04 D3         [ 4]  152     CALL BRAN 
      0023B5 23 A1                  153     .word 1$ 
      0023B7 CD 07 BD         [ 4]  154 2$: CALL DDROP 
      0023BA CD 1C 7D         [ 4]  155     CALL LOCK 
      0023BD 81               [ 4]  156     ret 
                                    157 
                                    158 ;------------------------
                                    159 ; Prompted input for integer 
                                    160 ; display n+ in bracket and
                                    161 ; '?' 
                                    162 ; [N]? ( n+ -- a )
                                    163 ;------------------------
      0023BE 23 91                  164     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



                           0023C0   165     LINK=.
      0023C0 04                     166     .byte 4
      0023C1 5B 4E 5D 3F            167     .ascii "[N]?" 
      0023C5                        168 INTQ:
      0023C5 CD 0E F6         [ 4]  169     CALL CR 
      0023C8 CD 04 71         [ 4]  170     call DOLIT 
      0023CB 00 5B                  171     .word '[
      0023CD CD 04 36         [ 4]  172     CALL EMIT 
      0023D0 CD 0F AF         [ 4]  173     CALL DOT 
      0023D3 CD 0F 35         [ 4]  174     CALL  DOTQP
      0023D6 03                     175     .byte 3
      0023D7 5D 3F 20               176     .ascii "]? " 
      0023DA CD 13 3E         [ 4]  177     CALL QUERY 
      0023DD CD 11 69         [ 4]  178     call TOKEN 
      0023E0 CC 24 6E         [ 2]  179     jp NUMBQ
                                    180 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



                                   4809 .endif
                           000001  4810 .if WANT_DOUBLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



                                   4811         .include "double.asm"
                                      1 ;************************************
                                      2 ;    doubles integers library 
                                      3 ;    doubles are signed 32 bits 
                                      4 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      5 
                                      6 
                                      7     .module DOUBLE 
                                      8 
                                      9 ; check for negative sign 
                                     10 ; ajust pointer and cntr 
      0023E3                         11 nsign: ; a cntr -- a cntr f 
      0023E3 CD 0B 67         [ 4]   12     CALL ZERO 
      0023E6 CD 05 77         [ 4]   13     CALL TOR  ; R: sign 
      0023E9 CD 05 77         [ 4]   14     CALL TOR  ; R: sign cntr 
      0023EC CD 05 AE         [ 4]   15     CALL DUPP 
      0023EF CD 05 25         [ 4]   16     CALL CAT 
      0023F2                         17     _DOLIT '-'
      0023F2 CD 04 71         [ 4]    1     CALL DOLIT 
      0023F5 00 2D                    2     .word '-' 
      0023F7 CD 08 7E         [ 4]   18     CALL EQUAL 
      0023FA                         19     _QBRAN nsign1 
      0023FA CD 04 A4         [ 4]    1     CALL QBRAN
      0023FD 24 14                    2     .word nsign1
      0023FF CD 0A FB         [ 4]   20     CALL ONEP ; a+ 
      002402 CD 05 58         [ 4]   21     CALL RFROM 
      002405 CD 0B 08         [ 4]   22     CALL ONEM ; cntr-
      002408 CD 05 58         [ 4]   23     CALL RFROM ; sign 
      00240B CD 07 F7         [ 4]   24     CALL INVER ; -1
      00240E CD 05 77         [ 4]   25     CALL TOR   ; R: sign 
      002411 CD 05 77         [ 4]   26     CALL TOR   ; R: cntr 
      002414                         27 nsign1:
      002414 CD 05 58         [ 4]   28     CALL RFROM 
      002417 CD 05 58         [ 4]   29     CALL RFROM 
      00241A 81               [ 4]   30     RET 
                                     31 
                                     32 
                                     33 ; get all digits in row 
                                     34 ; stop at first non-digit or end of string 
                                     35 ; ( dlo dhi a cntr -- dlo dhi [ a+ cntr- | a+ 0 ] )
      00241B                         36 parse_digits:
      00241B                         37 1$:
      00241B CD 05 AE         [ 4]   38     CALL DUPP 
      00241E                         39     _QBRAN 5$ 
      00241E CD 04 A4         [ 4]    1     CALL QBRAN
      002421 24 63                    2     .word 5$
      002423 CD 05 77         [ 4]   40     CALL TOR   ; dlo dhi a R: cntr 
      002426 CD 0C 3E         [ 4]   41     CALL COUNT ; dlo dhi a+ char 
      002429 CD 06 7E         [ 4]   42     CALL BASE 
      00242C CD 05 07         [ 4]   43     CALL AT 
      00242F CD 0E 36         [ 4]   44     CALL DIGTQ 
      002432                         45     _QBRAN 4$ ; not a digit
      002432 CD 04 A4         [ 4]    1     CALL QBRAN
      002435 24 5A                    2     .word 4$
      002437 CD 28 1B         [ 4]   46     CALL DTOR  ; dlo dhi R: cntr a+ c  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      00243A CD 06 7E         [ 4]   47     CALL BASE 
      00243D CD 05 07         [ 4]   48     CALL AT 
      002440 CD 26 55         [ 4]   49     CALL DSSTAR
      002443 CD 05 58         [ 4]   50     CALL RFROM 
      002446 CD 0B 67         [ 4]   51     CALL ZERO 
      002449 CD 2A E2         [ 4]   52     CALL DPLUS 
      00244C CD 05 58         [ 4]   53     CALL RFROM  ; dlo dhi a+ 
      00244F CD 05 58         [ 4]   54     CALL RFROM ; dlo dhi a+ cntr 
      002452 CD 0B 08         [ 4]   55     CALL ONEM 
      002455                         56     _BRAN 1$ ; dlo dhi a+ R: 
      002455 CD 04 D3         [ 4]    1     CALL BRAN 
      002458 24 1B                    2     .word 1$ 
      00245A CD 05 A4         [ 4]   57 4$: CALL DROP  ; dlo dhi a+ 
      00245D CD 0B 08         [ 4]   58     CALL ONEM  ; unget char 
      002460 CD 05 58         [ 4]   59     CALL RFROM ; dlo dhi a+ cntr-
      002463                         60 5$:
      002463 81               [ 4]   61     RET 
                                     62 
                                     63 
                                     64 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     65 ;   NUMBER? (a -- s -1 |d -2 | a F )
                                     66 ;   convert string to integer 
                                     67 ;   double begin with '#' 
                                     68 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002464                         69     _HEADER NUMBQ,7,"NUMBER?"
      002464 23 C0                    1         .word LINK 
                           002466     2         LINK=.
      002466 07                       3         .byte 7  
      002467 4E 55 4D 42 45 52 3F     4         .ascii "NUMBER?"
      00246E                          5         NUMBQ:
                                     70 ; save current base value 
      00246E CD 06 7E         [ 4]   71     CALL BASE 
      002471 CD 05 07         [ 4]   72     CALL AT 
      002474 CD 05 77         [ 4]   73     CALL TOR 
                                     74 ; initialize integer to 0     
      002477 1D 00 04         [ 2]   75     SUBW X,#4 
      00247A 90 5F            [ 1]   76     CLRW Y 
      00247C FF               [ 2]   77     LDW (X),Y 
      00247D EF 02            [ 2]   78     LDW (2,X),Y ; a 0 0 R: base  
      00247F                         79     _DOLIT 2 
      00247F CD 04 71         [ 4]    1     CALL DOLIT 
      002482 00 02                    2     .word 2 
      002484 CD 0B C0         [ 4]   80     CALL PICK  ; a 0 0 a R: base    
      002487 CD 0C 3E         [ 4]   81     CALL COUNT ; a 0 0 a+ n 
                                     82 ; check for '#' double integer 
      00248A CD 05 D8         [ 4]   83     CALL OVER  ; a 0 0 a+ n a+
      00248D CD 05 25         [ 4]   84     CALL CAT   ; a 0 0 a+ n c 
      002490                         85     _DOLIT '#' ; a 0 0 a+ n c '#' 
      002490 CD 04 71         [ 4]    1     CALL DOLIT 
      002493 00 23                    2     .word '#' 
      002495 CD 08 7E         [ 4]   86     CALL EQUAL 
      002498 CD 05 77         [ 4]   87     CALL TOR   ; a 0 0 a+ n R: base d? 
      00249B CD 05 6B         [ 4]   88     CALL RAT   ; a 0 0 a+ n d? R: base d?
      00249E                         89     _QBRAN NUMQ0
      00249E CD 04 A4         [ 4]    1     CALL QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



      0024A1 24 AF                    2     .word NUMQ0
                                     90 ; update a and count
      0024A3 CD 05 BE         [ 4]   91     CALL SWAPP 
      0024A6 CD 0A FB         [ 4]   92     CALL ONEP 
      0024A9 CD 05 BE         [ 4]   93     CALL SWAPP 
      0024AC CD 0B 08         [ 4]   94     CALL ONEM  ; a 0 0 a+ n- R: base d?
                                     95 ; check for '$' hexadecimal  
      0024AF                         96 NUMQ0: 
      0024AF CD 05 D8         [ 4]   97     CALL OVER   
      0024B2 CD 05 25         [ 4]   98     CALL CAT   
      0024B5                         99     _DOLIT '$'
      0024B5 CD 04 71         [ 4]    1     CALL DOLIT 
      0024B8 00 24                    2     .word '$' 
      0024BA CD 08 7E         [ 4]  100     CALL EQUAL ; a 0 0 a+ n- f  
      0024BD                        101     _QBRAN NUMQ1 
      0024BD CD 04 A4         [ 4]    1     CALL QBRAN
      0024C0 24 D1                    2     .word NUMQ1
      0024C2 CD 0E 0D         [ 4]  102     CALL HEX   ; switch to hexadecimal base 
                                    103 ; update a and count 
      0024C5 CD 05 BE         [ 4]  104     CALL SWAPP 
      0024C8 CD 0A FB         [ 4]  105     CALL ONEP 
      0024CB CD 05 BE         [ 4]  106     CALL SWAPP
      0024CE CD 0B 08         [ 4]  107     CALL ONEM ; a 0 0 a+ n-  R: base d?
                                    108 ; check for minus sign 
      0024D1                        109 NUMQ1: 
      0024D1 CD 23 E3         [ 4]  110     CALL nsign 
      0024D4 CD 05 77         [ 4]  111     CALL TOR ; R: base d? sign  
                                    112 ; check for end of string     
      0024D7 CD 07 6B         [ 4]  113     CALL QDUP    ; a dlo dhi a+ cntr R: base d? sign 
      0024DA                        114     _QBRAN NUMQ4 ; yes , not a number 
      0024DA CD 04 A4         [ 4]    1     CALL QBRAN
      0024DD 25 1C                    2     .word NUMQ4
      0024DF CD 24 1B         [ 4]  115     CALL parse_digits
      0024E2 CD 07 6B         [ 4]  116     CALL QDUP 
      0024E5 CD 05 F9         [ 4]  117     CALL ZEQUAL  
      0024E8                        118     _QBRAN NUMQ4 ; error not end of string  ( a dlo dhi a+ R: base d? sign )
      0024E8 CD 04 A4         [ 4]    1     CALL QBRAN
      0024EB 25 1C                    2     .word NUMQ4
      0024ED CD 05 A4         [ 4]  119     CALL DROP  ; a dlo dhi 
      0024F0 CD 05 58         [ 4]  120     CALL RFROM  ; a dlo dhi sign 
      0024F3                        121     _QBRAN NUMQ3
      0024F3 CD 04 A4         [ 4]    1     CALL QBRAN
      0024F6 24 FB                    2     .word NUMQ3
      0024F8 CD 08 1A         [ 4]  122     CALL DNEGA
      0024FB                        123 NUMQ3: 
      0024FB CD 07 7C         [ 4]  124     CALL ROT ; dlo dhi a  R: base d?
      0024FE CD 05 A4         [ 4]  125     CALL DROP
      002501                        126     _DOLIT -2  ; double return -2 flag 
      002501 CD 04 71         [ 4]    1     CALL DOLIT 
      002504 FF FE                    2     .word -2 
      002506 CD 05 58         [ 4]  127     CALL RFROM ; dlo dhi d? R: base 
      002509                        128     _TBRAN NUMQ8 
      002509 CD 04 BC         [ 4]    1     CALL TBRAN 
      00250C 25 25                    2     .word NUMQ8 
      00250E CD 05 BE         [ 4]  129     CALL SWAPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      002511 CD 05 A4         [ 4]  130     CALL DROP
      002514 CD 0A FB         [ 4]  131     CALL ONEP   ; single return -1 flag   
      002517                        132     _BRAN NUMQ8
      002517 CD 04 D3         [ 4]    1     CALL BRAN 
      00251A 25 25                    2     .word NUMQ8 
      00251C                        133 NUMQ4: ; not end of string error , ( a dlo dhi a+ cntr R: base d? sign )
                           000001   134 .if WANT_FLOAT
      00251C CD 05 58         [ 4]  135     CALL RFROM ; sign 
      00251F CD 05 58         [ 4]  136     CALL RFROM ; d? 
      002522 CD 2F 13         [ 4]  137     CALL FLOATQ ; ( a dlo dhi a+ cntr sign d? )    
                           000000   138 .else 
                                    139     ADDW X,#4 ; drop dhi a+  , ( a dlo R: base d? sign ) 
                                    140     ADDW SP,#4 ; drop d? sign  R: base 
                                    141     CLRW Y 
                                    142     LDW (X),Y ; dlo replaced by 0 ( -- a 0 R: base ) 
                                    143 .endif 
                                    144 ; restore original base value     
      002525                        145 NUMQ8: 
      002525 CD 05 58         [ 4]  146     CALL RFROM 
      002528 CD 06 7E         [ 4]  147     CALL BASE 
      00252B CD 04 F0         [ 4]  148     CALL STORE 
      00252E 81               [ 4]  149     RET 
                                    150 
                                    151 
                                    152 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    153 ;    D0= ( d -- 0|-1 )
                                    154 ;    check if double is 0 
                                    155 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00252F                        156     _HEADER DZEQUAL,3,"D0="
      00252F 24 66                    1         .word LINK 
                           002531     2         LINK=.
      002531 03                       3         .byte 3  
      002532 44 30 3D                 4         .ascii "D0="
      002535                          5         DZEQUAL:
      002535 CD 06 21         [ 4]  157     CALL ORR 
      002538 A6 FF            [ 1]  158     LD A,#0xFF
      00253A 90 93            [ 1]  159     LDW Y,X
      00253C 90 FE            [ 2]  160     LDW Y,(Y)
      00253E 90 A3 00 00      [ 2]  161     CPW Y,#0 
      002542 27 01            [ 1]  162     JREQ  ZEQ1
      002544 4F               [ 1]  163     CLR A   ;false
      002545                        164 ZEQ1:
      002545 F7               [ 1]  165     LD     (X),A
      002546 E7 01            [ 1]  166     LD (1,X),A
      002548 81               [ 4]  167 	RET     
                                    168     
                                    169 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    170 ;  2NEGATE ( d -- d )
                                    171 ;  negate double (2's complement)
                                    172 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002549                        173     _HEADER DNEGAT,7,"2NEGATE"
      002549 25 31                    1         .word LINK 
                           00254B     2         LINK=.
      00254B 07                       3         .byte 7  
      00254C 32 4E 45 47 41 54 45     4         .ascii "2NEGATE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      002553                          5         DNEGAT:
      002553 CD 07 F7         [ 4]  174     CALL INVER
      002556 CD 05 BE         [ 4]  175     CALL SWAPP 
      002559 CD 07 F7         [ 4]  176     CALL INVER 
      00255C 90 93            [ 1]  177     LDW  Y,X 
      00255E 90 FE            [ 2]  178     LDW Y,(Y)
      002560 72 A9 00 01      [ 2]  179     ADDW Y,#1 
      002564 FF               [ 2]  180     LDW (X),Y 
      002565 24 0B            [ 1]  181     JRNC DNEG1 
      002567 90 93            [ 1]  182     LDW Y,X 
      002569 90 EE 02         [ 2]  183     LDW Y,(2,Y)
      00256C 72 A9 00 01      [ 2]  184     ADDW Y,#1
      002570 EF 02            [ 2]  185     LDW (2,X),Y 
      002572                        186 DNEG1:
      002572 CD 05 BE         [ 4]  187     CALL SWAPP 
      002575 81               [ 4]  188     RET      
                                    189 
                                    190 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    191 ;   DABS ( d -- d )
                                    192 ;   absolute value of double
                                    193 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002576                        194     _HEADER DABS,4,"DABS"
      002576 25 4B                    1         .word LINK 
                           002578     2         LINK=.
      002578 04                       3         .byte 4  
      002579 44 41 42 53              4         .ascii "DABS"
      00257D                          5         DABS:
      00257D CD 05 AE         [ 4]  195     CALL DUPP 
      002580 CD 05 E7         [ 4]  196     CALL ZLESS 
      002583                        197     _QBRAN DABS1 
      002583 CD 04 A4         [ 4]    1     CALL QBRAN
      002586 25 8B                    2     .word DABS1
      002588 CD 08 1A         [ 4]  198     CALL DNEGA 
      00258B                        199 DABS1:
      00258B 81               [ 4]  200     RET 
                                    201 
                                    202 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    203 ;  DSIGN ( d -- d f )
                                    204 ;  sign of double 
                                    205 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00258C                        206     _HEADER DSIGN,5,"DSIGN"
      00258C 25 78                    1         .word LINK 
                           00258E     2         LINK=.
      00258E 05                       3         .byte 5  
      00258F 44 53 49 47 4E           4         .ascii "DSIGN"
      002594                          5         DSIGN:
      002594 A6 00            [ 1]  207     LD A,#0 
      002596 90 93            [ 1]  208     LDW Y,X 
      002598 90 FE            [ 2]  209     LDW Y,(Y)
      00259A 2A 02            [ 1]  210     JRPL DSIGN1
      00259C A6 FF            [ 1]  211     LD A,#0XFF 
      00259E                        212 DSIGN1:
      00259E 1D 00 02         [ 2]  213     SUBW X,#2 
      0025A1 F7               [ 1]  214     LD (X),A 
      0025A2 E7 01            [ 1]  215     LD (1,X),A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      0025A4 81               [ 4]  216     RET 
                                    217 
                                    218 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    219 ;   D/MOD ( d s - r qd )
                                    220 ;   unsigned divide double by single 
                                    221 ;   return double quotient 
                                    222 ;   and single remainder 
                                    223 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0025A5                        224     _HEADER DSLMOD,5,"D/MOD"
      0025A5 25 8E                    1         .word LINK 
                           0025A7     2         LINK=.
      0025A7 05                       3         .byte 5  
      0025A8 44 2F 4D 4F 44           4         .ascii "D/MOD"
      0025AD                          5         DSLMOD:
      0025AD 90 93            [ 1]  225         LDW     Y,X             ; stack pointer to Y
      0025AF FE               [ 2]  226         LDW     X,(X)           ; un
      0025B0 BF 26            [ 2]  227         LDW     YTEMP,X         ; save un
      0025B2 93               [ 1]  228         LDW     X,Y
      0025B3 89               [ 2]  229         PUSHW   X               ; save stack pointer
      0025B4 90 89            [ 2]  230         PUSHW   Y 
      0025B6 EE 02            [ 2]  231         LDW     X,(2,X)           ; X=udh
      0025B8 90 BE 26         [ 2]  232         LDW     Y,YTEMP         ; divisor 
      0025BB 65               [ 2]  233         DIVW    X,Y 
      0025BC BF 24            [ 2]  234         LDW     XTEMP,X         ; QUOTIENT hi 
      0025BE 93               [ 1]  235         LDW     X,Y             ; remainder in X 
      0025BF 90 85            [ 2]  236         POPW    Y 
      0025C1 90 EE 04         [ 2]  237         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      0025C4 A6 10            [ 1]  238         LD      A,#16           ; loop count
      0025C6 90 58            [ 2]  239         SLLW    Y               ; udl shift udl into udh
      0025C8                        240 DSLMOD3:
      0025C8 59               [ 2]  241         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      0025C9 25 04            [ 1]  242         JRC     DSLMODa         ; if carry out of rotate
      0025CB B3 26            [ 2]  243         CPW     X,YTEMP         ; compare udh to un
      0025CD 25 05            [ 1]  244         JRULT   DSLMOD4         ; can't subtract
      0025CF                        245 DSLMODa:
      0025CF 72 B0 00 26      [ 2]  246         SUBW    X,YTEMP         ; can subtract
      0025D3 98               [ 1]  247         RCF
      0025D4                        248 DSLMOD4:
      0025D4 8C               [ 1]  249         CCF                     ; quotient bit
      0025D5 90 59            [ 2]  250         RLCW    Y               ; rotate into quotient, rotate out udl
      0025D7 4A               [ 1]  251         DEC     A               ; repeat
      0025D8 26 EE            [ 1]  252         JRNE    DSLMOD3           ; if A == 0
      0025DA                        253 DSLMODb:
      0025DA BF 26            [ 2]  254         LDW     YTEMP,X         ; done, save remainder
      0025DC 85               [ 2]  255         POPW    X               ; restore stack pointer
      0025DD EF 02            [ 2]  256         LDW     (2,X),Y           ; save quotient low 
      0025DF 90 BE 24         [ 2]  257         LDW     Y,XTEMP         ; quotient hi 
      0025E2 FF               [ 2]  258         LDW     (X),Y           ; save quotient hi 
      0025E3 90 BE 26         [ 2]  259         LDW     Y,YTEMP         ; remainder onto stack
      0025E6 EF 04            [ 2]  260         LDW     (4,X),Y
      0025E8 81               [ 4]  261         RET 
                                    262 
                                    263 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    264 ;   D# ( d -- d )
                                    265 ;   extract least digit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



                                    266 ;   from double integer 
                                    267 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0025E9                        268     _HEADER DDIG,2,"D#"
      0025E9 25 A7                    1         .word LINK 
                           0025EB     2         LINK=.
      0025EB 02                       3         .byte 2  
      0025EC 44 23                    4         .ascii "D#"
      0025EE                          5         DDIG:
      0025EE CD 06 7E         [ 4]  269     CALL BASE 
      0025F1 CD 05 07         [ 4]  270     CALL AT 
      0025F4 CD 25 AD         [ 4]  271     CALL DSLMOD
      0025F7 CD 07 7C         [ 4]  272     CALL ROT   
      0025FA CD 0D 36         [ 4]  273     CALL DIGIT 
      0025FD CD 0D 82         [ 4]  274     CALL HOLD 
      002600 81               [ 4]  275     RET 
                                    276 
                                    277 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    278 ;    D#S ( d -- s )
                                    279 ;   extract digit from double 
                                    280 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002601                        281     _HEADER DDIGS,3,"D#S"
      002601 25 EB                    1         .word LINK 
                           002603     2         LINK=.
      002603 03                       3         .byte 3  
      002604 44 23 53                 4         .ascii "D#S"
      002607                          5         DDIGS:
      002607 CD 25 EE         [ 4]  282     CALL    DDIG 
      00260A CD 07 C8         [ 4]  283     CALL    DDUP 
      00260D CD 25 35         [ 4]  284     CALL    DZEQUAL
      002610                        285     _QBRAN  DDIGS 
      002610 CD 04 A4         [ 4]    1     CALL QBRAN
      002613 26 07                    2     .word DDIGS
      002615 CD 05 A4         [ 4]  286     CALL    DROP 
      002618 81               [ 4]  287     RET 
                                    288 
                                    289 
                                    290 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    291 ;   D. ( d -- )
                                    292 ;   display double integer 
                                    293 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002619                        294     _HEADER DDOT,2,"D."
      002619 26 03                    1         .word LINK 
                           00261B     2         LINK=.
      00261B 02                       3         .byte 2  
      00261C 44 2E                    4         .ascii "D."
      00261E                          5         DDOT:
      00261E CD 0E AE         [ 4]  295     CALL SPACE 
      002621 CD 25 94         [ 4]  296     CALL DSIGN 
      002624 CD 05 77         [ 4]  297     CALL TOR
      002627 CD 05 6B         [ 4]  298     CALL RAT 
      00262A                        299     _QBRAN DDOT0
      00262A CD 04 A4         [ 4]    1     CALL QBRAN
      00262D 26 32                    2     .word DDOT0
      00262F CD 08 1A         [ 4]  300     CALL DNEGA 
      002632                        301 DDOT0:     
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      002632 CD 0D 72         [ 4]  302     CALL BDIGS 
      002635 CD 26 07         [ 4]  303     CALL DDIGS 
      002638 CD 05 58         [ 4]  304     CALL RFROM 
      00263B                        305     _QBRAN DDOT1 
      00263B CD 04 A4         [ 4]    1     CALL QBRAN
      00263E 26 48                    2     .word DDOT1
      002640                        306     _DOLIT '-' 
      002640 CD 04 71         [ 4]    1     CALL DOLIT 
      002643 00 2D                    2     .word '-' 
      002645 CD 0D 82         [ 4]  307     CALL HOLD 
      002648                        308 DDOT1: 
      002648 CD 0D D7         [ 4]  309     CALL EDIGS 
      00264B CD 0E D8         [ 4]  310     CALL TYPES     
      00264E 81               [ 4]  311     RET 
                                    312 
                                    313 
                                    314 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    315 ; multiply double by single 
                                    316 ; return double 
                                    317 ;  ( d s -- d )
                                    318 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00264F                        319     _HEADER DSSTAR,3,"DS*"
      00264F 26 1B                    1         .word LINK 
                           002651     2         LINK=.
      002651 03                       3         .byte 3  
      002652 44 53 2A                 4         .ascii "DS*"
      002655                          5         DSSTAR:
                                    320 ;DSSTAR:
      002655 CD 05 77         [ 4]  321     CALL TOR
      002658 CD 05 AE         [ 4]  322     CALL DUPP 
      00265B CD 05 E7         [ 4]  323     CALL ZLESS
      00265E CD 05 AE         [ 4]  324     CALL DUPP 
      002661 CD 05 77         [ 4]  325     CALL TOR 
      002664                        326     _QBRAN DSSTAR1 
      002664 CD 04 A4         [ 4]    1     CALL QBRAN
      002667 26 6C                    2     .word DSSTAR1
      002669 CD 08 1A         [ 4]  327     CALL DNEGA 
      00266C                        328 DSSTAR1:
      00266C CD 05 58         [ 4]  329     CALL RFROM 
      00266F CD 07 9B         [ 4]  330     CALL NROT       
      002672 CD 05 BE         [ 4]  331     CALL SWAPP 
      002675 CD 05 6B         [ 4]  332     CALL RAT 
      002678 CD 0A 30         [ 4]  333     CALL UMSTA
      00267B CD 07 7C         [ 4]  334     CALL ROT 
      00267E CD 05 58         [ 4]  335     CALL RFROM 
      002681 CD 0A 30         [ 4]  336     CALL UMSTA 
      002684 CD 05 A4         [ 4]  337     CALL DROP ; DROP OVERFLOW 
      002687 CD 07 DD         [ 4]  338     CALL PLUS 
      00268A CD 07 7C         [ 4]  339     CALL ROT 
      00268D                        340     _QBRAN DSSTAR3 
      00268D CD 04 A4         [ 4]    1     CALL QBRAN
      002690 26 95                    2     .word DSSTAR3
      002692 CD 08 1A         [ 4]  341     CALL DNEGA 
      002695                        342 DSSTAR3:
      002695 81               [ 4]  343     RET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



                                    344 
                                    345 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    346 ;  2SWAP ( d1 d2 -- d2 d1 )
                                    347 ;  swap double 
                                    348 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002696                        349     _HEADER DSWAP,5,"2SWAP"
      002696 26 51                    1         .word LINK 
                           002698     2         LINK=.
      002698 05                       3         .byte 5  
      002699 32 53 57 41 50           4         .ascii "2SWAP"
      00269E                          5         DSWAP:
      00269E 90 93            [ 1]  350     LDW Y,X 
      0026A0 90 FE            [ 2]  351     LDW Y,(Y)
      0026A2 90 BF 26         [ 2]  352     LDW YTEMP,Y ; d2 hi 
      0026A5 90 93            [ 1]  353     LDW Y,X 
      0026A7 90 EE 02         [ 2]  354     LDW Y,(2,Y)
      0026AA 90 BF 24         [ 2]  355     LDW XTEMP,Y  ; d2 lo 
      0026AD 90 93            [ 1]  356     LDW Y,X 
      0026AF 90 EE 04         [ 2]  357     LDW Y,(4,Y)  ; d1 hi 
      0026B2 FF               [ 2]  358     LDW (X),Y 
      0026B3 90 93            [ 1]  359     LDW Y,X
      0026B5 90 EE 06         [ 2]  360     LDW Y,(6,Y)  ; d1 lo 
      0026B8 EF 02            [ 2]  361     LDW (2,X),Y
      0026BA 90 BE 26         [ 2]  362     LDW Y,YTEMP  
      0026BD EF 04            [ 2]  363     LDW (4,X),Y 
      0026BF 90 BE 24         [ 2]  364     LDW Y,XTEMP 
      0026C2 EF 06            [ 2]  365     LDW (6,X),Y 
      0026C4 81               [ 4]  366     RET 
                                    367 
                                    368 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    369 ;    DCLZ ( d -- u )
                                    370 ;    double count leading zeros
                                    371 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026C5                        372     _HEADER DCLZ,4,"DCLZ"
      0026C5 26 98                    1         .word LINK 
                           0026C7     2         LINK=.
      0026C7 04                       3         .byte 4  
      0026C8 44 43 4C 5A              4         .ascii "DCLZ"
      0026CC                          5         DCLZ:
      0026CC 4F               [ 1]  373     CLR A 
      0026CD 90 93            [ 1]  374     LDW Y,X 
      0026CF 90 FE            [ 2]  375     LDW Y,(Y)
      0026D1 2B 18            [ 1]  376     JRMI DCLZ8 ; no leading zero 
      0026D3 27 09            [ 1]  377     JREQ DCLZ4 ; >=16 
      0026D5                        378 DCLZ1: ; <16
      0026D5 90 58            [ 2]  379     SLLW Y
      0026D7 4C               [ 1]  380     INC A 
      0026D8 90 5D            [ 2]  381     TNZW Y 
      0026DA 2B 0F            [ 1]  382     JRMI DCLZ8
      0026DC 20 F7            [ 2]  383     JRA DCLZ1 
      0026DE                        384 DCLZ4:
      0026DE A6 10            [ 1]  385     LD A,#16 
      0026E0 90 93            [ 1]  386     LDW Y,X 
      0026E2 90 EE 02         [ 2]  387     LDW Y,(2,Y)
      0026E5 2B 04            [ 1]  388     JRMI DCLZ8 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      0026E7 26 EC            [ 1]  389     JRNE DCLZ1 
      0026E9 AB 10            [ 1]  390     ADD A,#16
      0026EB                        391 DCLZ8: 
      0026EB 1C 00 02         [ 2]  392     ADDW X,#2 
      0026EE 90 5F            [ 1]  393     CLRW Y 
      0026F0 90 97            [ 1]  394     LD YL,A 
      0026F2 FF               [ 2]  395     LDW (X),Y 
      0026F3 81               [ 4]  396     RET 
                                    397 
                                    398 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    399 ;   2<ROT ( d1 d2 d3 -- d3 d1 d2 )
                                    400 ;   rotate left doubles 
                                    401 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026F4                        402     _HEADER NDROT,5,"2<ROT"
      0026F4 26 C7                    1         .word LINK 
                           0026F6     2         LINK=.
      0026F6 05                       3         .byte 5  
      0026F7 32 3C 52 4F 54           4         .ascii "2<ROT"
      0026FC                          5         NDROT:
                                    403 ; save d3 in temp 
      0026FC 90 93            [ 1]  404     LDW Y,X 
      0026FE 90 FE            [ 2]  405     LDW Y,(Y)
      002700 90 BF 26         [ 2]  406     LDW YTEMP,Y  ; d3 hi 
      002703 90 93            [ 1]  407     LDW Y,X 
      002705 90 EE 02         [ 2]  408     LDW Y,(2,Y)
      002708 90 BF 24         [ 2]  409     LDW XTEMP,Y  ; d3 lo 
                                    410 ; put d2 in d1 slot 
      00270B 90 93            [ 1]  411     LDW Y,X 
      00270D 90 EE 04         [ 2]  412     LDW Y,(4,Y) 
      002710 FF               [ 2]  413     LDW (X),Y   ; d2 hi 
      002711 90 93            [ 1]  414     LDW Y,X 
      002713 90 EE 06         [ 2]  415     LDW Y,(6,Y)
      002716 EF 02            [ 2]  416     LDW (2,X),Y ; d2 lo
                                    417 ; put d1 in d2 slot 
      002718 90 93            [ 1]  418     LDW Y,X 
      00271A 90 EE 08         [ 2]  419     LDW Y,(8,Y) 
      00271D EF 04            [ 2]  420     LDW (4,X),Y ; d1 hi 
      00271F 90 93            [ 1]  421     LDW Y,X 
      002721 90 EE 0A         [ 2]  422     LDW Y,(10,Y)
      002724 EF 06            [ 2]  423     LDW (6,X),Y  ; d1 lo 
                                    424 ; put d3 in d1 slot 
      002726 90 BE 26         [ 2]  425     LDW Y,YTEMP 
      002729 EF 08            [ 2]  426     LDW (8,X),Y  ; d3 hi 
      00272B 90 BE 24         [ 2]  427     LDW Y,XTEMP 
      00272E EF 0A            [ 2]  428     LDW (10,X),Y  ; d3 lo 
      002730 81               [ 4]  429     RET 
                                    430 
                                    431 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    432 ;   2ROT ( d1 d2 d3 -- d2 d3 d1 )
                                    433 ;   rotate right doubles 
                                    434 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002731                        435     _HEADER DROT,4,"2ROT"
      002731 26 F6                    1         .word LINK 
                           002733     2         LINK=.
      002733 04                       3         .byte 4  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      002734 32 52 4F 54              4         .ascii "2ROT"
      002738                          5         DROT:
                                    436 ; save d3 in temp 
      002738 90 93            [ 1]  437     LDW Y,X 
      00273A 90 FE            [ 2]  438     LDW Y,(Y)
      00273C 90 BF 26         [ 2]  439     LDW YTEMP,Y ; d3 hi 
      00273F 90 93            [ 1]  440     LDW Y,X 
      002741 90 EE 02         [ 2]  441     LDW Y,(2,Y)
      002744 90 BF 24         [ 2]  442     LDW XTEMP,Y ; d3 lo 
                                    443 ; put d1 in d3 slot 
      002747 90 93            [ 1]  444     LDW Y,X 
      002749 90 EE 08         [ 2]  445     LDW Y,(8,Y)
      00274C FF               [ 2]  446     LDW (X),Y  ; d1 hi 
      00274D 90 93            [ 1]  447     LDW Y,X 
      00274F 90 EE 0A         [ 2]  448     LDW Y,(10,Y) 
      002752 EF 02            [ 2]  449     LDW (2,X),Y ; d1 lo 
                                    450 ; put d2 in d1 slot 
      002754 90 93            [ 1]  451     LDW Y,X 
      002756 90 EE 04         [ 2]  452     LDW Y,(4,Y) ; d2 hi 
      002759 EF 08            [ 2]  453     LDW (8,X),Y 
      00275B 90 93            [ 1]  454     LDW Y,X 
      00275D 90 EE 06         [ 2]  455     LDW Y,(6,Y) ; d2 lo 
      002760 EF 0A            [ 2]  456     LDW (10,X),Y 
                                    457 ; put d3 in d2 slot 
      002762 90 BE 26         [ 2]  458     LDW Y,YTEMP 
      002765 EF 04            [ 2]  459     LDW (4,X),Y 
      002767 90 BE 24         [ 2]  460     LDW Y,XTEMP 
      00276A EF 06            [ 2]  461     LDW (6,X),Y 
      00276C 81               [ 4]  462     RET 
                                    463 
                                    464 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    465 ;   D= ( d1 d2 -- f )
                                    466 ;   d1==d2?
                                    467 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00276D                        468     _HEADER DEQUAL,2,"D="
      00276D 27 33                    1         .word LINK 
                           00276F     2         LINK=.
      00276F 02                       3         .byte 2  
      002770 44 3D                    4         .ascii "D="
      002772                          5         DEQUAL:
      002772 A6 00            [ 1]  469     LD A,#0 
      002774 90 93            [ 1]  470     LDW Y,X 
      002776 90 FE            [ 2]  471     LDW Y,(Y)
      002778 E3 04            [ 2]  472     CPW Y,(4,X)
      00277A 26 0B            [ 1]  473     JRNE DEQU4 
      00277C 90 93            [ 1]  474     LDW Y,X 
      00277E 90 EE 02         [ 2]  475     LDW Y,(2,Y)
      002781 E3 06            [ 2]  476     CPW Y,(6,X)
      002783 26 02            [ 1]  477     JRNE DEQU4 
      002785 A6 FF            [ 1]  478     LD A,#0XFF
      002787                        479 DEQU4:
      002787 1C 00 06         [ 2]  480     ADDW X,#6
      00278A F7               [ 1]  481     LD (X),A 
      00278B E7 01            [ 1]  482     LD (1,X),A 
      00278D 81               [ 4]  483     RET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



                                    484 
                                    485 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    486 ;   D> ( d1 d2 -- f )
                                    487 ;   d1>d2?
                                    488 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00278E                        489     _HEADER DGREAT,2,"D>"
      00278E 27 6F                    1         .word LINK 
                           002790     2         LINK=.
      002790 02                       3         .byte 2  
      002791 44 3E                    4         .ascii "D>"
      002793                          5         DGREAT:
      002793 A6 FF            [ 1]  490     LD A,#0XFF 
      002795 90 93            [ 1]  491     LDW Y,X 
      002797 90 EE 04         [ 2]  492     LDW Y,(4,Y)  ; d1 hi 
      00279A F3               [ 2]  493     CPW Y,(X)    ; d2 hi 
      00279B 2C 0B            [ 1]  494     JRSGT DGREAT4 
      00279D 90 93            [ 1]  495     LDW Y,X 
      00279F 90 EE 06         [ 2]  496     LDW Y,(6,Y)
      0027A2 E3 02            [ 2]  497     CPW Y,(2,X)
      0027A4 22 02            [ 1]  498     JRUGT DGREAT4 
      0027A6 A6 00            [ 1]  499     LD A,#0
      0027A8                        500 DGREAT4:
      0027A8 1C 00 06         [ 2]  501     ADDW X,#6
      0027AB F7               [ 1]  502     LD (X),A 
      0027AC E7 01            [ 1]  503     LD (1,X),A 
      0027AE 81               [ 4]  504     RET
                                    505 
                                    506 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    507 ;   D< ( d1 d2 -- f )
                                    508 ;   d1<d2? 
                                    509 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027AF                        510     _HEADER DLESS,2,"D<"
      0027AF 27 90                    1         .word LINK 
                           0027B1     2         LINK=.
      0027B1 02                       3         .byte 2  
      0027B2 44 3C                    4         .ascii "D<"
      0027B4                          5         DLESS:
      0027B4 CD 2B 14         [ 4]  511     CALL DSUB
      0027B7                        512     _DOLIT 0 
      0027B7 CD 04 71         [ 4]    1     CALL DOLIT 
      0027BA 00 00                    2     .word 0 
      0027BC CD 07 9B         [ 4]  513     CALL NROT  
      0027BF CD 27 D1         [ 4]  514     CALL DZLESS 
      0027C2                        515     _QBRAN DLESS4
      0027C2 CD 04 A4         [ 4]    1     CALL QBRAN
      0027C5 27 CA                    2     .word DLESS4
      0027C7 CD 07 F7         [ 4]  516     CALL INVER  
      0027CA                        517 DLESS4:
      0027CA 81               [ 4]  518     RET
                                    519 
                                    520 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    521 ;  D0< ( d -- f )
                                    522 ;  d<0? 
                                    523 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027CB                        524     _HEADER DZLESS,3,"D0<"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      0027CB 27 B1                    1         .word LINK 
                           0027CD     2         LINK=.
      0027CD 03                       3         .byte 3  
      0027CE 44 30 3C                 4         .ascii "D0<"
      0027D1                          5         DZLESS:
      0027D1 A6 00            [ 1]  525     LD A,#0 
      0027D3 90 93            [ 1]  526     LDW Y,X 
      0027D5 90 FE            [ 2]  527     LDW Y,(Y)
      0027D7 2A 02            [ 1]  528     JRPL DZLESS1 
      0027D9 A6 FF            [ 1]  529     LD A,#0XFF 
      0027DB                        530 DZLESS1:
      0027DB 1C 00 02         [ 2]  531     ADDW X,#2 
      0027DE F7               [ 1]  532     LD (X),A 
      0027DF E7 01            [ 1]  533     LD (1,X),A    
      0027E1 81               [ 4]  534     RET 
                                    535 
                                    536 
                                    537 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    538 ;  DCMP ( d1 d2 -- d1 d2 -1|0|1 )
                                    539 ; compare 2 doubles 
                                    540 ; keep the doubles 
                                    541 ; return flag: 
                                    542 ;    -1 if d1<d2 
                                    543 ;     0 if d1==d2
                                    544 ;     1 if d1>d2 
                                    545 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027E2                        546     _HEADER DCMP,4,"DCMP"
      0027E2 27 CD                    1         .word LINK 
                           0027E4     2         LINK=.
      0027E4 04                       3         .byte 4  
      0027E5 44 43 4D 50              4         .ascii "DCMP"
      0027E9                          5         DCMP:
      0027E9 90 93            [ 1]  547     LDW Y,X 
      0027EB 90 EE 04         [ 2]  548     LDW Y,(4,Y)
      0027EE F3               [ 2]  549     CPW Y,(X) 
      0027EF 27 04            [ 1]  550     JREQ DCMP2 
      0027F1 2F 13            [ 1]  551     JRSLT DCMP_SMALL 
      0027F3 20 17            [ 2]  552     JRA  DCMP_GREAT 
      0027F5                        553 DCMP2:    
      0027F5 90 93            [ 1]  554     LDW Y,X 
      0027F7 90 EE 06         [ 2]  555     LDW Y,(6,Y)
      0027FA E3 02            [ 2]  556     CPW Y,(2,X)
      0027FC 27 04            [ 1]  557     JREQ DCMP_EQUAL  
      0027FE 25 06            [ 1]  558     JRULT DCMP_SMALL 
      002800 20 0A            [ 2]  559     JRA DCMP_GREAT
      002802                        560 DCMP_EQUAL:
      002802 90 5F            [ 1]  561     CLRW Y 
      002804 20 0A            [ 2]  562     JRA DCMP4 
      002806                        563 DCMP_SMALL:
      002806 90 AE FF FF      [ 2]  564     LDW Y,#-1 
      00280A 20 04            [ 2]  565     JRA DCMP4 
      00280C                        566 DCMP_GREAT:
      00280C 90 AE 00 01      [ 2]  567     LDW Y,#1
      002810                        568 DCMP4:
      002810 1D 00 02         [ 2]  569     SUBW X,#2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



      002813 FF               [ 2]  570     LDW (X),Y 
      002814 81               [ 4]  571     RET
                                    572 
                                    573 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    574 ;   2>R ( d -- R: d )
                                    575 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002815                        576     _HEADER DTOR,3,"2>R"
      002815 27 E4                    1         .word LINK 
                           002817     2         LINK=.
      002817 03                       3         .byte 3  
      002818 32 3E 52                 4         .ascii "2>R"
      00281B                          5         DTOR:
      00281B 90 85            [ 2]  577     POPW Y 
      00281D 90 BF 26         [ 2]  578     LDW YTEMP,Y 
      002820 90 93            [ 1]  579     LDW Y,X 
      002822 90 EE 02         [ 2]  580     LDW Y,(2,Y)
      002825 90 89            [ 2]  581     PUSHW Y   ; d low 
      002827 90 93            [ 1]  582     LDW Y,X 
      002829 90 FE            [ 2]  583     LDW Y,(Y)
      00282B 90 89            [ 2]  584     PUSHW Y   ; d hi 
      00282D 1C 00 04         [ 2]  585     ADDW X,#4  
      002830 92 CC 26         [ 5]  586     JP [YTEMP]
                                    587 
                                    588 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    589 ;  2R> ( -- d ) R: d --      
                                    590 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002833                        591     _HEADER DRFROM,3,"2R>"
      002833 28 17                    1         .word LINK 
                           002835     2         LINK=.
      002835 03                       3         .byte 3  
      002836 32 52 3E                 4         .ascii "2R>"
      002839                          5         DRFROM:
      002839 90 85            [ 2]  592     POPW Y      ; d hi 
      00283B 90 BF 26         [ 2]  593     LDW YTEMP,Y 
      00283E 1D 00 04         [ 2]  594     SUBW X,#4
      002841 90 85            [ 2]  595     POPW Y       ; d hi 
      002843 FF               [ 2]  596     LDW (X),Y 
      002844 90 85            [ 2]  597     POPW Y       ; d low  
      002846 EF 02            [ 2]  598     LDW (2,X),Y 
      002848 92 CC 26         [ 5]  599     JP [YTEMP]
                                    600     
                                    601 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    602 ;   2R@ ( -- d )
                                    603 ;   fecth a double from RSTACK
                                    604 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00284B                        605     _HEADER DRAT,3,"2R@"
      00284B 28 35                    1         .word LINK 
                           00284D     2         LINK=.
      00284D 03                       3         .byte 3  
      00284E 32 52 40                 4         .ascii "2R@"
      002851                          5         DRAT:
      002851 90 85            [ 2]  606     POPW Y 
      002853 90 BF 26         [ 2]  607     LDW YTEMP,Y 
      002856 1D 00 04         [ 2]  608     SUBW X,#4 
      002859 16 01            [ 2]  609     LDW Y,(1,SP)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



      00285B FF               [ 2]  610     LDW (X),Y 
      00285C 16 03            [ 2]  611     LDW Y,(3,SP)
      00285E EF 02            [ 2]  612     LDW (2,X),Y 
      002860 92 CC 26         [ 5]  613     JP [YTEMP]
                                    614 
                                    615 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    616 ;  2VARIABLE <name> 
                                    617 ;  create a double variable 
                                    618 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002863                        619     _HEADER DVARIA,9,"2VARIABLE"
      002863 28 4D                    1         .word LINK 
                           002865     2         LINK=.
      002865 09                       3         .byte 9  
      002866 32 56 41 52 49 41 42     4         .ascii "2VARIABLE"
             4C 45
      00286F                          5         DVARIA:
      00286F CD 0C 55         [ 4]  620         CALL HERE
      002872 CD 05 AE         [ 4]  621         CALL DUPP
      002875                        622         _DOLIT 4  
      002875 CD 04 71         [ 4]    1     CALL DOLIT 
      002878 00 04                    2     .word 4 
      00287A CD 07 DD         [ 4]  623         CALL PLUS 
      00287D CD 07 0F         [ 4]  624         CALL VPP 
      002880 CD 04 F0         [ 4]  625         CALL STORE
      002883 CD 18 3D         [ 4]  626         CALL CREAT
      002886 CD 05 AE         [ 4]  627         CALL DUPP
      002889 CD 14 AF         [ 4]  628         CALL COMMA
      00288C CD 0B 67         [ 4]  629         CALL ZERO
      00288F CD 05 D8         [ 4]  630         CALL OVER 
      002892 CD 04 F0         [ 4]  631         CALL STORE 
      002895 CD 0B 67         [ 4]  632         CALL ZERO 
      002898 CD 05 BE         [ 4]  633         CALL SWAPP 
      00289B CD 04 F0         [ 4]  634         CALL STORE
      00289E CD 21 43         [ 4]  635         CALL FMOVE ; move definition to FLASH
      0028A1 CD 07 6B         [ 4]  636         CALL QDUP 
      0028A4 CD 04 A4         [ 4]  637         CALL QBRAN 
      0028A7 18 8A                  638         .word SET_RAMLAST   
      0028A9 CD 1B EB         [ 4]  639         call UPDATVP  ; don't update if variable kept in RAM.
      0028AC CD 21 D7         [ 4]  640         CALL UPDATPTR
      0028AF 81               [ 4]  641         RET         
                                    642 
                                    643 
                                    644 
                                    645 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    646 ;  2LITERAL ( d -- )
                                    647 ;  compile double literal 
                                    648 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028B0                        649     _HEADER DLITER,IMEDD+8,"2LITERAL"
      0028B0 28 65                    1         .word LINK 
                           0028B2     2         LINK=.
      0028B2 88                       3         .byte IMEDD+8  
      0028B3 32 4C 49 54 45 52 41     4         .ascii "2LITERAL"
             4C
      0028BB                          5         DLITER:
      0028BB CD 14 F4         [ 4]  650     CALL COMPI 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



      0028BE 28 C6                  651     .word do2lit 
      0028C0 CD 14 AF         [ 4]  652     CALL COMMA 
      0028C3 CC 14 AF         [ 2]  653     JP   COMMA 
                                    654 
                                    655 
                                    656 ; runtime for 2LITERAL 
      0028C6                        657 do2lit:
      0028C6 1D 00 04         [ 2]  658     SUBW X,#4 
      0028C9 16 01            [ 2]  659     LDW Y,(1,SP)
      0028CB 90 FE            [ 2]  660     LDW Y,(Y)
      0028CD FF               [ 2]  661     LDW (X),Y 
      0028CE 16 01            [ 2]  662     LDW Y,(1,SP)
      0028D0 90 EE 02         [ 2]  663     LDW Y,(2,Y)
      0028D3 EF 02            [ 2]  664     LDW (2,X),Y 
      0028D5 90 85            [ 2]  665     POPW Y 
      0028D7 90 EC 04         [ 2]  666     JP (4,Y)
                                    667 
                                    668 
                                    669 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    670 ;   2OVER ( d1 d2 -- d1 d2 d1 )
                                    671 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028DA                        672     _HEADER DOVER,5,"2OVER"
      0028DA 28 B2                    1         .word LINK 
                           0028DC     2         LINK=.
      0028DC 05                       3         .byte 5  
      0028DD 32 4F 56 45 52           4         .ascii "2OVER"
      0028E2                          5         DOVER:
      0028E2 90 93            [ 1]  673     LDW Y,X 
      0028E4 1D 00 04         [ 2]  674     SUBW X,#4 
      0028E7 90 89            [ 2]  675     PUSHW Y 
      0028E9 90 EE 04         [ 2]  676     LDW Y,(4,Y)  ; d1 hi 
      0028EC FF               [ 2]  677     LDW (X),Y 
      0028ED 90 85            [ 2]  678     POPW Y 
      0028EF 90 EE 06         [ 2]  679     LDW Y,(6,Y)  ;d1 lo 
      0028F2 EF 02            [ 2]  680     LDW (2,X),Y 
      0028F4 81               [ 4]  681     RET 
                                    682 
                                    683 
                                    684 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    685 ;   D2/ ( d -- d/2 )
                                    686 ;   divide double by 2 
                                    687 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028F5                        688     _HEADER D2SLASH,3,"D2/"
      0028F5 28 DC                    1         .word LINK 
                           0028F7     2         LINK=.
      0028F7 03                       3         .byte 3  
      0028F8 44 32 2F                 4         .ascii "D2/"
      0028FB                          5         D2SLASH:
      0028FB 90 93            [ 1]  689     LDW Y,X 
      0028FD 90 FE            [ 2]  690     LDW Y,(Y)
      0028FF 90 57            [ 2]  691     SRAW Y 
      002901 FF               [ 2]  692     LDW (X),Y 
      002902 90 93            [ 1]  693     LDW Y,X 
      002904 90 EE 02         [ 2]  694     LDW Y,(2,Y)
      002907 90 56            [ 2]  695     RRCW Y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



      002909 EF 02            [ 2]  696     LDW (2,X),Y 
      00290B 81               [ 4]  697     RET
                                    698 
                                    699 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    700 ;  D2* ( d -- d*2 )
                                    701 ;  multiply double by 2 
                                    702 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00290C                        703     _HEADER D2STAR,3,"D2*"
      00290C 28 F7                    1         .word LINK 
                           00290E     2         LINK=.
      00290E 03                       3         .byte 3  
      00290F 44 32 2A                 4         .ascii "D2*"
      002912                          5         D2STAR:
      002912 90 93            [ 1]  704     LDW Y,X 
      002914 90 EE 02         [ 2]  705     LDW Y,(2,Y)
      002917 98               [ 1]  706     RCF 
      002918 90 59            [ 2]  707     RLCW Y 
      00291A EF 02            [ 2]  708     LDW (2,X),Y 
      00291C 90 93            [ 1]  709     LDW Y,X 
      00291E 90 FE            [ 2]  710     LDW Y,(Y)
      002920 90 59            [ 2]  711     RLCW Y 
      002922 FF               [ 2]  712     LDW (X),Y 
      002923 81               [ 4]  713     RET 
                                    714 
                                    715 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    716 ;   DLSHIFT ( d n -- d )
                                    717 ;   left shift double 
                                    718 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002924                        719     _HEADER DLSHIFT,7,"DLSHIFT"
      002924 29 0E                    1         .word LINK 
                           002926     2         LINK=.
      002926 07                       3         .byte 7  
      002927 44 4C 53 48 49 46 54     4         .ascii "DLSHIFT"
      00292E                          5         DLSHIFT:
      00292E E6 01            [ 1]  720     LD A,(1,X) ; shift count 
      002930 1C 00 02         [ 2]  721     ADDW X,#2 
      002933 90 93            [ 1]  722     LDW Y,X 
      002935 90 FE            [ 2]  723     LDW Y,(Y)
      002937 90 BF 26         [ 2]  724     LDW YTEMP,Y  ; d hi 
      00293A 90 93            [ 1]  725     LDW Y,X 
      00293C 90 EE 02         [ 2]  726     LDW Y,(2,Y)  ; d low 
      00293F                        727 DLSHIFT1:
      00293F 4D               [ 1]  728     TNZ A 
      002940 27 12            [ 1]  729     JREQ DLSHIFT2 
      002942 98               [ 1]  730     RCF 
      002943 90 59            [ 2]  731     RLCW Y 
      002945 90 89            [ 2]  732     PUSHW Y 
      002947 90 BE 26         [ 2]  733     LDW Y,YTEMP 
      00294A 90 59            [ 2]  734     RLCW Y 
      00294C 90 BF 26         [ 2]  735     LDW YTEMP,Y 
      00294F 90 85            [ 2]  736     POPW Y 
      002951 4A               [ 1]  737     DEC A 
      002952 20 EB            [ 2]  738     JRA DLSHIFT1 
      002954                        739 DLSHIFT2:
      002954 EF 02            [ 2]  740     LDW (2,X),Y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



      002956 90 BE 26         [ 2]  741     LDW Y,YTEMP 
      002959 FF               [ 2]  742     LDW (X),Y 
      00295A 81               [ 4]  743     RET 
                                    744 
                                    745 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    746 ;  DRSHIFT ( d n -- d )
                                    747 ;  shift right n bits 
                                    748 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00295B                        749     _HEADER DRSHIFT,7,"DRSHIFT"
      00295B 29 26                    1         .word LINK 
                           00295D     2         LINK=.
      00295D 07                       3         .byte 7  
      00295E 44 52 53 48 49 46 54     4         .ascii "DRSHIFT"
      002965                          5         DRSHIFT:
      002965 E6 01            [ 1]  750     LD A,(1,X)
      002967 A4 1F            [ 1]  751     AND A,#0X1F 
      002969 1C 00 02         [ 2]  752     ADDW X,#2 
      00296C                        753 DRSHIFT1:
      00296C 4D               [ 1]  754     TNZ A 
      00296D 27 13            [ 1]  755     JREQ DRSHIFT2 
      00296F 90 93            [ 1]  756     LDW Y,X 
      002971 90 FE            [ 2]  757     LDW Y,(Y)
      002973 90 57            [ 2]  758     SRAW Y 
      002975 FF               [ 2]  759     LDW (X),Y 
      002976 90 93            [ 1]  760     LDW Y,X 
      002978 90 EE 02         [ 2]  761     LDW Y,(2,Y)
      00297B 90 56            [ 2]  762     RRCW Y 
      00297D EF 02            [ 2]  763     LDW (2,X),Y 
      00297F 4A               [ 1]  764     DEC A
      002980 20 EA            [ 2]  765     JRA DRSHIFT1  
      002982                        766 DRSHIFT2:
      002982 81               [ 4]  767     RET 
                                    768 
                                    769 
                                    770 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    771 ;   D* ( d1 d2 -- d3 )
                                    772 ;   double product 
                                    773 ;   
                                    774 ;   d3 = d1 * d2
                                    775 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002983                        776     _HEADER DSTAR,2,"D*"
      002983 29 5D                    1         .word LINK 
                           002985     2         LINK=.
      002985 02                       3         .byte 2  
      002986 44 2A                    4         .ascii "D*"
      002988                          5         DSTAR:
      002988 CD 05 AE         [ 4]  777     CALL DUPP 
      00298B CD 05 E7         [ 4]  778     CALL ZLESS  
      00298E CD 05 77         [ 4]  779     CALL TOR    ; R: d2sign 
      002991 CD 25 7D         [ 4]  780     CALL DABS   
      002994 CD 05 58         [ 4]  781     CALL RFROM 
      002997 CD 07 9B         [ 4]  782     CALL NROT  ; d1 d2s ud2
      00299A CD 28 1B         [ 4]  783     CALL DTOR  ; d1 d2s R: ud2  
      00299D CD 05 77         [ 4]  784     CALL TOR   ; d1 R: ud2 d2s   
      0029A0 CD 05 AE         [ 4]  785     CALL DUPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



      0029A3 CD 05 E7         [ 4]  786     CALL ZLESS 
      0029A6 CD 05 58         [ 4]  787     CALL RFROM 
      0029A9 CD 06 36         [ 4]  788     CALL XORR   
      0029AC CD 05 77         [ 4]  789     CALL TOR   ; d1 R: ud2 prod_sign  
      0029AF CD 25 7D         [ 4]  790     CALL DABS ; ud1 R: ud2 ps  
      0029B2 CD 05 58         [ 4]  791     CALL RFROM  
      0029B5 CD 07 9B         [ 4]  792     CALL NROT   ; ps ud1 
      0029B8 CD 07 C8         [ 4]  793     CALL DDUP   ; ps ud1 ud1  
      0029BB CD 05 58         [ 4]  794     CALL RFROM  ; ps ud1 ud1 ud2hi 
      0029BE CD 26 55         [ 4]  795     CALL DSSTAR ; ps ud1 dprodhi 
                                    796 ; shift partial product 16 bits left 
      0029C1 CD 05 A4         [ 4]  797     CALL DROP   ; drop overflow 
      0029C4 CD 0B 67         [ 4]  798     CALL ZERO   ; ps ud1 prodhi 
      0029C7 CD 05 BE         [ 4]  799     CALL SWAPP  
      0029CA CD 26 9E         [ 4]  800     CALL DSWAP  ; ps dprodhi ud1 
      0029CD CD 05 58         [ 4]  801     CALL RFROM  ; ps dprodhi ud1 ud2lo
      0029D0 CD 26 55         [ 4]  802     CALL DSSTAR ; ps  dprodhi dprodlo 
      0029D3 CD 2A E2         [ 4]  803     CALL DPLUS
      0029D6 CD 07 7C         [ 4]  804     CALL ROT    ; dprod ps 
      0029D9                        805     _QBRAN DDSTAR3 
      0029D9 CD 04 A4         [ 4]    1     CALL QBRAN
      0029DC 29 E1                    2     .word DDSTAR3
      0029DE CD 08 1A         [ 4]  806     CALL DNEGA 
      0029E1                        807 DDSTAR3:  
      0029E1 81               [ 4]  808     RET 
                                    809 
                                    810 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    811 ;   DD/MOD  ( d1 d2 -- dr dq )
                                    812 ;   double division dq=d1/d2
                                    813 ;   dr remainder double 
                                    814 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0029E2                        815     _HEADER DDSLMOD,6,"DD/MOD"  
      0029E2 29 85                    1         .word LINK 
                           0029E4     2         LINK=.
      0029E4 06                       3         .byte 6  
      0029E5 44 44 2F 4D 4F 44        4         .ascii "DD/MOD"
      0029EB                          5         DDSLMOD:
      0029EB                        816     _DOLIT 0 
      0029EB CD 04 71         [ 4]    1     CALL DOLIT 
      0029EE 00 00                    2     .word 0 
      0029F0 CD 05 77         [ 4]  817     CALL TOR   ; R: sign 
      0029F3 90 93            [ 1]  818     LDW Y,X     
      0029F5 90 FE            [ 2]  819     LDW Y,(Y)
      0029F7 2A 0C            [ 1]  820     JRPL DSLA1
      0029F9 CD 08 1A         [ 4]  821     CALL DNEGA  ; ud2 
      0029FC CD 05 58         [ 4]  822     CALL RFROM 
      0029FF CD 07 F7         [ 4]  823     CALL INVER 
      002A02 CD 05 77         [ 4]  824     CALL TOR  ; sign inverted 
      002A05                        825 DSLA1:
      002A05                        826     _DOLIT 2 
      002A05 CD 04 71         [ 4]    1     CALL DOLIT 
      002A08 00 02                    2     .word 2 
      002A0A CD 0B C0         [ 4]  827     CALL PICK 
      002A0D CD 05 E7         [ 4]  828     CALL ZLESS 
      002A10                        829     _QBRAN DSLA2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      002A10 CD 04 A4         [ 4]    1     CALL QBRAN
      002A13 2A 27                    2     .word DSLA2
      002A15 CD 26 9E         [ 4]  830     CALL DSWAP 
      002A18 CD 08 1A         [ 4]  831     CALL DNEGA  ; ud1 
      002A1B CD 26 9E         [ 4]  832     CALL DSWAP  ; ud1 ud2 ( divident divisor )     
      002A1E CD 05 58         [ 4]  833     CALL RFROM 
      002A21 CD 07 F7         [ 4]  834     CALL INVER 
      002A24 CD 05 77         [ 4]  835     CALL TOR   ;  sign inverted again 
      002A27                        836 DSLA2:
                                    837 ; unsigned double division 
      002A27 CD 0B 67         [ 4]  838     CALL ZERO 
      002A2A CD 0B 67         [ 4]  839     CALL ZERO
      002A2D CD 28 1B         [ 4]  840     CALL DTOR ; quotient  R: sign qlo qhi 
      002A30 CD 28 E2         [ 4]  841     CALL DOVER 
      002A33 CD 26 CC         [ 4]  842     CALL DCLZ ; n2, dividend leading zeros  
      002A36 CD 05 77         [ 4]  843     CALL TOR 
      002A39 CD 07 C8         [ 4]  844     CALL DDUP    
      002A3C CD 26 CC         [ 4]  845     CALL DCLZ  ; n1, divisor leading zeros
      002A3F CD 05 58         [ 4]  846     CALL RFROM ; n1 n2 
      002A42 CD 08 56         [ 4]  847     CALL SUBB
      002A45 CD 05 AE         [ 4]  848     CALL DUPP   
      002A48 CD 05 E7         [ 4]  849     CALL ZLESS 
      002A4B                        850     _TBRAN DSLA7 ; quotient is null 
      002A4B CD 04 BC         [ 4]    1     CALL TBRAN 
      002A4E 2A BE                    2     .word DSLA7 
      002A50 CD 05 AE         [ 4]  851     CALL DUPP 
      002A53 CD 05 77         [ 4]  852     CALL TOR    ; loop counter 
      002A56 CD 05 AE         [ 4]  853     CALL DUPP 
      002A59 CD 05 77         [ 4]  854     CALL TOR    ; need to copies 
      002A5C CD 07 6B         [ 4]  855     CALL QDUP 
      002A5F                        856     _QBRAN DSLA3
      002A5F CD 04 A4         [ 4]    1     CALL QBRAN
      002A62 2A 67                    2     .word DSLA3
      002A64 CD 29 2E         [ 4]  857     CALL DLSHIFT ; align divisor with dividend 
      002A67                        858 DSLA3: ; division loop -- dividend divisor  
      002A67 90 5F            [ 1]  859     CLRW Y 
      002A69 90 89            [ 2]  860     PUSHW Y  
      002A6B CD 28 E2         [ 4]  861     CALL DOVER 
      002A6E CD 28 E2         [ 4]  862     CALL DOVER 
      002A71 CD 27 B4         [ 4]  863     CALL DLESS 
      002A74                        864     _TBRAN DSLA4 
      002A74 CD 04 BC         [ 4]    1     CALL TBRAN 
      002A77 2A 8D                    2     .word DSLA4 
      002A79 90 85            [ 2]  865     POPW Y 
      002A7B 72 A9 00 01      [ 2]  866     ADDW Y,#1 
      002A7F 90 89            [ 2]  867     PUSHW Y    ; quotiend least bit 
      002A81 CD 07 C8         [ 4]  868     CALL DDUP  ; dividend divisor divisor 
      002A84 CD 28 1B         [ 4]  869     CALL DTOR  
      002A87 CD 2B 14         [ 4]  870     CALL DSUB  ; dividend-divisor 
      002A8A CD 28 39         [ 4]  871     CALL DRFROM  ; dividend- divisor  
      002A8D                        872 DSLA4: ; shift quotient and add 1 bit 
      002A8D 90 85            [ 2]  873     POPW Y 
      002A8F 90 BF 26         [ 2]  874     LDW YTEMP,Y 
      002A92 16 07            [ 2]  875     LDW Y,(7,SP) ; quotient low 
      002A94 98               [ 1]  876     RCF 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



      002A95 90 59            [ 2]  877     RLCW Y
      002A97 17 07            [ 2]  878     LDW (7,SP),Y 
      002A99 16 05            [ 2]  879     LDW Y,(5,SP) ; quotient hi 
      002A9B 90 59            [ 2]  880     RLCW Y 
      002A9D 17 05            [ 2]  881     LDW (5,SP),Y 
      002A9F 16 07            [ 2]  882     LDW Y,(7,SP) 
      002AA1 72 B9 00 26      [ 2]  883     ADDW Y,YTEMP
      002AA5 17 07            [ 2]  884     LDW (7,SP),Y 
      002AA7 16 01            [ 2]  885     LDW Y,(1,SP) ; loop counter 
      002AA9 90 5D            [ 2]  886     TNZW Y 
      002AAB 27 14            [ 1]  887     JREQ DSLA8
      002AAD 72 A2 00 01      [ 2]  888     SUBW Y,#1  
      002AB1 17 01            [ 2]  889     LDW (1,SP),Y  
                                    890 ; shift dividend left 1 bit      
      002AB3 CD 26 9E         [ 4]  891     CALL DSWAP 
      002AB6 CD 29 12         [ 4]  892     CALL D2STAR 
      002AB9 CD 26 9E         [ 4]  893     CALL DSWAP 
      002ABC 20 A9            [ 2]  894     JRA DSLA3 
      002ABE                        895 DSLA7:
      002ABE 1C 00 02         [ 2]  896     ADDW X,#2 ; drop shift count  
      002AC1                        897 DSLA8:
      002AC1 1C 00 04         [ 2]  898     ADDW X,#4 ; drop divisor
      002AC4 CD 05 58         [ 4]  899     CALL RFROM
      002AC7 CD 05 A4         [ 4]  900     CALL DROP   ; loop counter 
      002ACA CD 05 58         [ 4]  901     CALL RFROM   ; shift count
      002ACD CD 29 65         [ 4]  902     CALL DRSHIFT 
                                    903     ; quotient replace dividend 
      002AD0 CD 28 39         [ 4]  904     CALL DRFROM  ; quotient 
      002AD3 90 85            [ 2]  905     POPW Y ; sign 
      002AD5 90 5D            [ 2]  906     TNZW Y 
      002AD7 27 03            [ 1]  907     JREQ DSLA9 
      002AD9 CD 08 1A         [ 4]  908     CALL DNEGA ; remainder quotient 
      002ADC                        909 DSLA9: 
      002ADC 81               [ 4]  910     RET 
                                    911 
                                    912 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    913 ;   D+ ( d1 d2 -- d3 )
                                    914 ;   add 2 doubles 
                                    915 ;   d3=d1+d2 
                                    916 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002ADD                        917     _HEADER DPLUS,2,"D+"
      002ADD 29 E4                    1         .word LINK 
                           002ADF     2         LINK=.
      002ADF 02                       3         .byte 2  
      002AE0 44 2B                    4         .ascii "D+"
      002AE2                          5         DPLUS:
      002AE2 90 93            [ 1]  918     LDW Y,X 
      002AE4 90 FE            [ 2]  919     LDW Y,(Y)
      002AE6 90 BF 26         [ 2]  920     LDW YTEMP,Y ; d2 hi 
      002AE9 90 93            [ 1]  921     LDW Y,X 
      002AEB 90 EE 02         [ 2]  922     LDW Y,(2,Y)
      002AEE 90 BF 24         [ 2]  923     LDW XTEMP,Y ; d2 lo 
      002AF1 1C 00 04         [ 2]  924     ADDW X,#4 
      002AF4 90 93            [ 1]  925     LDW Y,X 
      002AF6 90 EE 02         [ 2]  926     LDW Y,(2,Y) ; d1 lo
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



      002AF9 72 B9 00 24      [ 2]  927     ADDW Y,XTEMP
      002AFD EF 02            [ 2]  928     LDW (2,X),Y 
      002AFF 90 93            [ 1]  929     LDW Y,X 
      002B01 90 FE            [ 2]  930     LDW Y,(Y) ; d1 hi 
      002B03 24 04            [ 1]  931     JRNC DPLUS1 
      002B05 72 A9 00 01      [ 2]  932     ADDW Y,#1 
      002B09                        933 DPLUS1: 
      002B09 72 B9 00 26      [ 2]  934     ADDW Y,YTEMP 
      002B0D FF               [ 2]  935     LDW (X),Y 
      002B0E 81               [ 4]  936     RET 
                                    937 
                                    938 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    939 ;   D- ( d1 d2 -- d3 )
                                    940 ;   d3=d1-d2 
                                    941 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B0F                        942     _HEADER DSUB,2,"D-"
      002B0F 2A DF                    1         .word LINK 
                           002B11     2         LINK=.
      002B11 02                       3         .byte 2  
      002B12 44 2D                    4         .ascii "D-"
      002B14                          5         DSUB:
      002B14 90 93            [ 1]  943     LDW Y,X 
      002B16 90 FE            [ 2]  944     LDW Y,(Y)
      002B18 90 BF 26         [ 2]  945     LDW YTEMP,Y ; d2 hi 
      002B1B 90 93            [ 1]  946     LDW Y,X 
      002B1D 90 EE 02         [ 2]  947     LDW Y,(2,Y)
      002B20 90 BF 24         [ 2]  948     LDW XTEMP,Y ; d2 lo 
      002B23 1C 00 04         [ 2]  949     ADDW X,#4 
      002B26 90 93            [ 1]  950     LDW Y,X 
      002B28 90 EE 02         [ 2]  951     LDW Y,(2,Y) ; d1 lo
      002B2B 72 B2 00 24      [ 2]  952     SUBW Y,XTEMP
      002B2F EF 02            [ 2]  953     LDW (2,X),Y 
      002B31 90 93            [ 1]  954     LDW Y,X 
      002B33 90 FE            [ 2]  955     LDW Y,(Y) ; d1 hi 
      002B35 24 04            [ 1]  956     JRNC DSUB1 
      002B37 72 A2 00 01      [ 2]  957     SUBW Y,#1 
      002B3B                        958 DSUB1: 
      002B3B 72 B2 00 26      [ 2]  959     SUBW Y,YTEMP 
      002B3F FF               [ 2]  960     LDW (X),Y 
      002B40 81               [ 4]  961     RET 
                                    962 
                                    963 
                                    964 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    965 ;    ILOG ( ud base -- n )
                                    966 ;    integer part of double in base 
                                    967 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B41                        968     _HEADER ILOG,4,"ILOG"
      002B41 2B 11                    1         .word LINK 
                           002B43     2         LINK=.
      002B43 04                       3         .byte 4  
      002B44 49 4C 4F 47              4         .ascii "ILOG"
      002B48                          5         ILOG:
      002B48                        969     _DOLIT 0 
      002B48 CD 04 71         [ 4]    1     CALL DOLIT 
      002B4B 00 00                    2     .word 0 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      002B4D CD 05 77         [ 4]  970     CALL TOR 
      002B50 CD 07 9B         [ 4]  971     CALL NROT 
      002B53                        972 ILOG1: 
      002B53                        973     _DOLIT 2 
      002B53 CD 04 71         [ 4]    1     CALL DOLIT 
      002B56 00 02                    2     .word 2 
      002B58 CD 0B C0         [ 4]  974     CALL PICK 
      002B5B CD 25 AD         [ 4]  975     CALL DSLMOD 
      002B5E CD 07 7C         [ 4]  976     CALL ROT 
      002B61 CD 05 A4         [ 4]  977     CALL DROP 
      002B64 CD 07 C8         [ 4]  978     CALL DDUP
      002B67 CD 25 35         [ 4]  979     CALL DZEQUAL 
      002B6A                        980     _TBRAN ILOG2
      002B6A CD 04 BC         [ 4]    1     CALL TBRAN 
      002B6D 2B 7D                    2     .word ILOG2 
      002B6F CD 05 58         [ 4]  981     CALL RFROM 
      002B72 CD 0A FB         [ 4]  982     CALL ONEP 
      002B75 CD 05 77         [ 4]  983     CALL TOR 
      002B78                        984     _BRAN ILOG1 
      002B78 CD 04 D3         [ 4]    1     CALL BRAN 
      002B7B 2B 53                    2     .word ILOG1 
      002B7D                        985 ILOG2:
      002B7D CD 07 BD         [ 4]  986     CALL DDROP 
      002B80 CD 05 A4         [ 4]  987     CALL DROP 
      002B83 CD 05 58         [ 4]  988     CALL RFROM 
      002B86 81               [ 4]  989     RET 
                                    990 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



                                   4812 .endif 
                           000001  4813 .if WANT_FLOAT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



                                   4814         .include "float.asm"
                                      1 ;*********************************
                                      2 ;    floating point library
                                      3 ;    adapted from 
                                      4 ;    Forth dimensions Vol. IV #1 
                                      5 ;    published in  may/june 1982
                                      6 ;
                                      7 ; Creation date: 2021-06-15 
                                      8 ;
                                      9 ; NOTE: I used a different format 
                                     10 ;       for float number. This 
                                     11 ;       enable comparison of floats 
                                     12 ;       as they were integer hence 
                                     13 ;       there no need for F>,F<,etc 
                                     14 ;************************************
                                     15 
                                     16 ;*************************************************
                                     17 ;  FLOAT format double for storage 
                                     18 ;  bits 22:0  mantissa absolute value 
                                     19 ;  bits  30:23  exponent with 127 offset added  
                                     20 ;  bit 31  mantissa sign 
                                     21 ;  float value: if bit 31 is 1 negate mantissa
                                     22 ;                else keep mantissas as bits 22:0
                                     23 ;                as is
                                     24 ;                eponent: 10^^(exp-127) 
                                     25 ;***********************************************  
                                     26 
                                     27     .module FLOAT 
                                     28 
                           000001    29 .if WANT_DOUBLE 
                                     30 ; already included 
                           000000    31 .else
                                     32 ;  must be included  
                                     33     .include "double.asm"
                                     34 .endif  
                                     35 
                           7FFFFF    36     MAX_MANTISSA = 0x7FFFFF 
                                     37 
                                     38 ;-------------------------
                                     39 ;    FPSW ( -- a )
                                     40 ;    floating state variable
                                     41 ;    bit 0 zero flag 
                                     42 ;    bit 1 negative flag 
                                     43 ;    bit 2 overflow/error flag 
                                     44 ;---------------------------
      002B87                         45     _HEADER FPSW,4,"FPSW"
      002B87 2B 43                    1         .word LINK 
                           002B89     2         LINK=.
      002B89 04                       3         .byte 4  
      002B8A 46 50 53 57              4         .ascii "FPSW"
      002B8E                          5         FPSW:
      002B8E 90 AE 00 08      [ 2]   46 	LDW Y,#UFPSW  
      002B92 1D 00 02         [ 2]   47 	SUBW X,#2
      002B95 FF               [ 2]   48     LDW (X),Y
      002B96 81               [ 4]   49     RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



                                     50 
                                     51 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     52 ;   FRESET ( -- )
                                     53 ;   reset FPSW variable 
                                     54 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
      002B97                         55     _HEADER FRESET,6,"FRESET"
      002B97 2B 89                    1         .word LINK 
                           002B99     2         LINK=.
      002B99 06                       3         .byte 6  
      002B9A 46 52 45 53 45 54        4         .ascii "FRESET"
      002BA0                          5         FRESET:
      002BA0                         56     _DOLIT 0 
      002BA0 CD 04 71         [ 4]    1     CALL DOLIT 
      002BA3 00 00                    2     .word 0 
      002BA5 CD 2B 8E         [ 4]   57     CALL FPSW 
      002BA8 CD 04 F0         [ 4]   58     CALL STORE 
      002BAB 81               [ 4]   59     RET 
                                     60 
                                     61 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     62 ;   FINIT ( -- )
                                     63 ;   initialize floating point 
                                     64 ;   library 
                                     65 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BAC                         66     _HEADER FINIT,5,"FINIT"
      002BAC 2B 99                    1         .word LINK 
                           002BAE     2         LINK=.
      002BAE 05                       3         .byte 5  
      002BAF 46 49 4E 49 54           4         .ascii "FINIT"
      002BB4                          5         FINIT:
      002BB4 CD 2B A0         [ 4]   67     CALL FRESET 
      002BB7 81               [ 4]   68     RET 
                                     69 
                                     70 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     71 ;    FER ( -- u )
                                     72 ;    return FPSW value 
                                     73 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BB8                         74     _HEADER FER,3,"FER"
      002BB8 2B AE                    1         .word LINK 
                           002BBA     2         LINK=.
      002BBA 03                       3         .byte 3  
      002BBB 46 45 52                 4         .ascii "FER"
      002BBE                          5         FER:
      002BBE CD 2B 8E         [ 4]   75     CALL FPSW 
      002BC1 CD 05 07         [ 4]   76     CALL AT 
      002BC4 81               [ 4]   77     RET 
                                     78 
                                     79 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     80 ;    FZE  ( -- z )
                                     81 ;    return FPSW zero flag 
                                     82 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BC5                         83     _HEADER FZE,3,"FZE"
      002BC5 2B BA                    1         .word LINK 
                           002BC7     2         LINK=.
      002BC7 03                       3         .byte 3  
      002BC8 46 5A 45                 4         .ascii "FZE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



      002BCB                          5         FZE:
      002BCB CD 2B 8E         [ 4]   84     CALL FPSW
      002BCE CD 05 07         [ 4]   85     CALL AT  
      002BD1                         86     _DOLIT 1
      002BD1 CD 04 71         [ 4]    1     CALL DOLIT 
      002BD4 00 01                    2     .word 1 
      002BD6 CD 06 0D         [ 4]   87     CALL ANDD 
      002BD9 81               [ 4]   88     RET 
                                     89 
                                     90 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     91 ;    FNE ( -- n )
                                     92 ;    return FPSW negative flag 
                                     93 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BDA                         94     _HEADER FNE,3,"FNE"
      002BDA 2B C7                    1         .word LINK 
                           002BDC     2         LINK=.
      002BDC 03                       3         .byte 3  
      002BDD 46 4E 45                 4         .ascii "FNE"
      002BE0                          5         FNE:
      002BE0 CD 2B 8E         [ 4]   95     CALL FPSW 
      002BE3 CD 05 07         [ 4]   96     CALL AT 
      002BE6                         97     _DOLIT 2 
      002BE6 CD 04 71         [ 4]    1     CALL DOLIT 
      002BE9 00 02                    2     .word 2 
      002BEB CD 06 0D         [ 4]   98     CALL ANDD 
      002BEE 81               [ 4]   99     RET 
                                    100 
                                    101 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    102 ;   FOV (A -- v )
                                    103 ;   return FPSW overflow flag 
                                    104 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BEF                        105     _HEADER FOV,3,"FOV"
      002BEF 2B DC                    1         .word LINK 
                           002BF1     2         LINK=.
      002BF1 03                       3         .byte 3  
      002BF2 46 4F 56                 4         .ascii "FOV"
      002BF5                          5         FOV:
      002BF5 CD 2B 8E         [ 4]  106     CALL FPSW
      002BF8 CD 05 07         [ 4]  107     CALL AT  
      002BFB                        108     _DOLIT 4 
      002BFB CD 04 71         [ 4]    1     CALL DOLIT 
      002BFE 00 04                    2     .word 4 
      002C00 CD 06 0D         [ 4]  109     CALL ANDD 
      002C03 81               [ 4]  110     RET 
                                    111 
                                    112 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    113 ;    SFZ ( f# -- f# )
                                    114 ;    set FPSW zero flag 
                                    115 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C04                        116     _HEADER SFZ,3,"SFZ"
      002C04 2B F1                    1         .word LINK 
                           002C06     2         LINK=.
      002C06 03                       3         .byte 3  
      002C07 53 46 5A                 4         .ascii "SFZ"
      002C0A                          5         SFZ:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



      002C0A CD 07 C8         [ 4]  117     CALL DDUP 
      002C0D CD 2B BE         [ 4]  118     CALL FER 
      002C10                        119     _DOLIT 0xfffe 
      002C10 CD 04 71         [ 4]    1     CALL DOLIT 
      002C13 FF FE                    2     .word 0xfffe 
      002C15 CD 06 0D         [ 4]  120     CALL ANDD 
      002C18 CD 05 77         [ 4]  121     CALL TOR    
      002C1B                        122     _DOLIT 0x807F 
      002C1B CD 04 71         [ 4]    1     CALL DOLIT 
      002C1E 80 7F                    2     .word 0x807F 
      002C20 CD 06 0D         [ 4]  123     CALL ANDD 
      002C23 CD 25 35         [ 4]  124     CALL DZEQUAL 
      002C26                        125     _DOLIT 1 
      002C26 CD 04 71         [ 4]    1     CALL DOLIT 
      002C29 00 01                    2     .word 1 
      002C2B CD 06 0D         [ 4]  126     CALL ANDD 
      002C2E CD 05 58         [ 4]  127     CALL RFROM 
      002C31 CD 06 21         [ 4]  128     CALL ORR 
      002C34 CD 2B 8E         [ 4]  129     CALL FPSW 
      002C37 CD 04 F0         [ 4]  130     CALL STORE 
      002C3A 81               [ 4]  131     RET 
                                    132 
                                    133 
                                    134 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    135 ;   SFN ( f# -- f# )
                                    136 ;   set FPSW negative flag 
                                    137 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C3B                        138     _HEADER SFN,3,"SFN"
      002C3B 2C 06                    1         .word LINK 
                           002C3D     2         LINK=.
      002C3D 03                       3         .byte 3  
      002C3E 53 46 4E                 4         .ascii "SFN"
      002C41                          5         SFN:
      002C41 CD 05 AE         [ 4]  139     CALL DUPP  
      002C44 CD 2B BE         [ 4]  140     CALL FER 
      002C47                        141     _DOLIT 0xFFFD 
      002C47 CD 04 71         [ 4]    1     CALL DOLIT 
      002C4A FF FD                    2     .word 0xFFFD 
      002C4C CD 06 0D         [ 4]  142     CALL ANDD  
      002C4F CD 05 77         [ 4]  143     CALL TOR 
      002C52                        144     _DOLIT 0x8000
      002C52 CD 04 71         [ 4]    1     CALL DOLIT 
      002C55 80 00                    2     .word 0x8000 
      002C57 CD 06 0D         [ 4]  145     CALL ANDD
      002C5A 90 93            [ 1]  146     LDW Y,X 
      002C5C 90 FE            [ 2]  147     LDW Y,(Y)
      002C5E 98               [ 1]  148     RCF 
      002C5F 90 59            [ 2]  149     RLCW Y 
      002C61 90 59            [ 2]  150     RLCW Y 
      002C63 90 59            [ 2]  151     RLCW Y 
      002C65 FF               [ 2]  152     LDW (X),Y 
      002C66 CD 05 58         [ 4]  153     CALL RFROM 
      002C69 CD 06 21         [ 4]  154     CALL ORR 
      002C6C CD 2B 8E         [ 4]  155     CALL FPSW
      002C6F CD 04 F0         [ 4]  156     CALL STORE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



      002C72 81               [ 4]  157     RET 
                                    158 
                                    159 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    160 ;   SFV ( -- )
                                    161 ;   set overflow flag 
                                    162 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C73                        163     _HEADER SFV,3,"SFV"
      002C73 2C 3D                    1         .word LINK 
                           002C75     2         LINK=.
      002C75 03                       3         .byte 3  
      002C76 53 46 56                 4         .ascii "SFV"
      002C79                          5         SFV:
      002C79 CD 2B 8E         [ 4]  164     CALL FPSW 
      002C7C CD 05 07         [ 4]  165     CALL AT 
      002C7F                        166     _DOLIT 4 
      002C7F CD 04 71         [ 4]    1     CALL DOLIT 
      002C82 00 04                    2     .word 4 
      002C84 CD 06 21         [ 4]  167     CALL ORR 
      002C87 CD 2B 8E         [ 4]  168     CALL FPSW 
      002C8A CD 04 F0         [ 4]  169     CALL STORE 
      002C8D 81               [ 4]  170     RET 
                                    171 
                                    172 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    173 ;  @EXPONENT ( f# -- m e )
                                    174 ;  split float in mantissa/exponent 
                                    175 ;  m mantissa as a double 
                                    176 ;  e exponent as a single 
                                    177 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C8E                        178     _HEADER ATEXP,9,"@EXPONENT"             
      002C8E 2C 75                    1         .word LINK 
                           002C90     2         LINK=.
      002C90 09                       3         .byte 9  
      002C91 40 45 58 50 4F 4E 45     4         .ascii "@EXPONENT"
             4E 54
      002C9A                          5         ATEXP:
      002C9A CD 2B A0         [ 4]  179     CALL FRESET
      002C9D CD 2C 41         [ 4]  180     CALL SFN
      002CA0 CD 2C 0A         [ 4]  181     CALL SFZ 
      002CA3 CD 05 AE         [ 4]  182     CALL DUPP
      002CA6                        183     _DOLIT 0X7F80 
      002CA6 CD 04 71         [ 4]    1     CALL DOLIT 
      002CA9 7F 80                    2     .word 0X7F80 
      002CAB CD 06 0D         [ 4]  184     CALL ANDD 
      002CAE                        185     _DOLIT 7 
      002CAE CD 04 71         [ 4]    1     CALL DOLIT 
      002CB1 00 07                    2     .word 7 
      002CB3 CD 0B 35         [ 4]  186     CALL RSHIFT
      002CB6                        187     _DOLIT 127 
      002CB6 CD 04 71         [ 4]    1     CALL DOLIT 
      002CB9 00 7F                    2     .word 127 
      002CBB CD 08 56         [ 4]  188     CALL SUBB
      002CBE CD 05 77         [ 4]  189     CALL TOR 
      002CC1                        190     _DOLIT 0x7F
      002CC1 CD 04 71         [ 4]    1     CALL DOLIT 
      002CC4 00 7F                    2     .word 0x7F 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



      002CC6 CD 06 0D         [ 4]  191     CALL ANDD  ; mantissa as double  
      002CC9 CD 2B E0         [ 4]  192     CALL FNE 
      002CCC                        193     _QBRAN POSMANT 
      002CCC CD 04 A4         [ 4]    1     CALL QBRAN
      002CCF 2C D4                    2     .word POSMANT
      002CD1 CD 25 53         [ 4]  194     CALL DNEGAT 
      002CD4                        195 POSMANT:
      002CD4 CD 05 58         [ 4]  196     CALL RFROM 
      002CD7 81               [ 4]  197     RET 
                                    198 
                                    199 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    200 ;    !EXPONENT ( m e -- f# )
                                    201 ;    built float from mantissa/exponent 
                                    202 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002CD8                        203     _HEADER STEXP,9,"!EXPONENT"
      002CD8 2C 90                    1         .word LINK 
                           002CDA     2         LINK=.
      002CDA 09                       3         .byte 9  
      002CDB 21 45 58 50 4F 4E 45     4         .ascii "!EXPONENT"
             4E 54
      002CE4                          5         STEXP:
      002CE4 CD 05 AE         [ 4]  204     CALL DUPP 
      002CE7 CD 08 70         [ 4]  205     CALL ABSS 
      002CEA                        206     _DOLIT 127 
      002CEA CD 04 71         [ 4]    1     CALL DOLIT 
      002CED 00 7F                    2     .word 127 
      002CEF CD 08 DA         [ 4]  207     CALL UGREAT
      002CF2                        208     _QBRAN STEXP1
      002CF2 CD 04 A4         [ 4]    1     CALL QBRAN
      002CF5 2C FA                    2     .word STEXP1
      002CF7 CD 2C 79         [ 4]  209     CALL SFV  
      002CFA                        210 STEXP1:
      002CFA                        211     _DOLIT 127 
      002CFA CD 04 71         [ 4]    1     CALL DOLIT 
      002CFD 00 7F                    2     .word 127 
      002CFF CD 07 DD         [ 4]  212     CALL PLUS 
      002D02                        213     _DOLIT 0XFF 
      002D02 CD 04 71         [ 4]    1     CALL DOLIT 
      002D05 00 FF                    2     .word 0XFF 
      002D07 CD 06 0D         [ 4]  214     CALL ANDD 
      002D0A                        215     _DOLIT 7 
      002D0A CD 04 71         [ 4]    1     CALL DOLIT 
      002D0D 00 07                    2     .word 7 
      002D0F CD 0B 19         [ 4]  216     CALL LSHIFT 
      002D12 CD 05 77         [ 4]  217     CALL TOR   ; R: e 
      002D15 CD 05 AE         [ 4]  218     CALL DUPP 
      002D18                        219     _DOLIT 0X8000 
      002D18 CD 04 71         [ 4]    1     CALL DOLIT 
      002D1B 80 00                    2     .word 0X8000 
      002D1D CD 06 0D         [ 4]  220     CALL ANDD 
      002D20                        221     _QBRAN STEXP2 
      002D20 CD 04 A4         [ 4]    1     CALL QBRAN
      002D23 2D 36                    2     .word STEXP2
      002D25                        222     _DOLIT 0X8000 
      002D25 CD 04 71         [ 4]    1     CALL DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



      002D28 80 00                    2     .word 0X8000 
      002D2A CD 05 58         [ 4]  223     CALL RFROM 
      002D2D CD 06 21         [ 4]  224     CALL ORR
      002D30 CD 05 77         [ 4]  225     CALL TOR
      002D33 CD 25 53         [ 4]  226     CALL DNEGAT  
      002D36                        227 STEXP2:
      002D36 CD 05 AE         [ 4]  228     CALL DUPP 
      002D39                        229     _DOLIT 0X7F
      002D39 CD 04 71         [ 4]    1     CALL DOLIT 
      002D3C 00 7F                    2     .word 0X7F 
      002D3E CD 08 DA         [ 4]  230     CALL UGREAT 
      002D41                        231     _QBRAN STEXP3 
      002D41 CD 04 A4         [ 4]    1     CALL QBRAN
      002D44 2D 49                    2     .word STEXP3
      002D46 CD 2C 79         [ 4]  232     CALL SFV 
      002D49                        233 STEXP3:
      002D49                        234     _DOLIT 0X7F 
      002D49 CD 04 71         [ 4]    1     CALL DOLIT 
      002D4C 00 7F                    2     .word 0X7F 
      002D4E CD 06 0D         [ 4]  235     CALL ANDD 
      002D51 CD 05 58         [ 4]  236     CALL RFROM 
      002D54 CD 06 21         [ 4]  237     CALL ORR 
      002D57 CD 2C 0A         [ 4]  238     CALL SFZ 
      002D5A CD 2C 41         [ 4]  239     CALL SFN 
      002D5D 81               [ 4]  240     RET 
                                    241 
                                    242 
                                    243 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    244 ;   E. ( f# -- )
                                    245 ;   print float in scientific 
                                    246 ;   format 
                                    247 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002D5E                        248     _HEADER EDOT,2,"E."
      002D5E 2C DA                    1         .word LINK 
                           002D60     2         LINK=.
      002D60 02                       3         .byte 2  
      002D61 45 2E                    4         .ascii "E."
      002D63                          5         EDOT:
      002D63 CD 06 7E         [ 4]  249     CALL BASE 
      002D66 CD 05 07         [ 4]  250     CALL AT 
      002D69 CD 05 77         [ 4]  251     CALL TOR 
      002D6C                        252     _DOLIT 10 
      002D6C CD 04 71         [ 4]    1     CALL DOLIT 
      002D6F 00 0A                    2     .word 10 
      002D71 CD 06 7E         [ 4]  253     CALL BASE 
      002D74 CD 04 F0         [ 4]  254     CALL STORE 
      002D77 CD 2C 9A         [ 4]  255     CALL ATEXP ; m e 
      002D7A                        256 EDOT0:
      002D7A CD 05 77         [ 4]  257     CALL TOR   
      002D7D CD 2B E0         [ 4]  258     CALL FNE 
      002D80                        259     _QBRAN EDOT1
      002D80 CD 04 A4         [ 4]    1     CALL QBRAN
      002D83 2D 88                    2     .word EDOT1
      002D85 CD 25 53         [ 4]  260     CALL DNEGAT
      002D88                        261 EDOT1:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



      002D88 CD 0E AE         [ 4]  262     CALL SPACE 
      002D8B CD 0D 72         [ 4]  263     CALL BDIGS     
      002D8E                        264 EDOT2: 
      002D8E CD 25 EE         [ 4]  265     CALL DDIG
      002D91 CD 05 58         [ 4]  266     CALL RFROM 
      002D94 CD 0A FB         [ 4]  267     CALL ONEP 
      002D97 CD 05 77         [ 4]  268     CALL TOR 
      002D9A CD 05 AE         [ 4]  269     CALL DUPP
      002D9D                        270     _QBRAN EDOT3 
      002D9D CD 04 A4         [ 4]    1     CALL QBRAN
      002DA0 2D A7                    2     .word EDOT3
      002DA2                        271     _BRAN EDOT2  
      002DA2 CD 04 D3         [ 4]    1     CALL BRAN 
      002DA5 2D 8E                    2     .word EDOT2 
      002DA7                        272 EDOT3:
      002DA7 CD 05 D8         [ 4]  273     CALL OVER 
      002DAA CD 06 7E         [ 4]  274     CALL BASE 
      002DAD CD 05 07         [ 4]  275     CALL AT 
      002DB0 CD 08 9D         [ 4]  276     CALL ULESS 
      002DB3                        277     _QBRAN EDOT2 
      002DB3 CD 04 A4         [ 4]    1     CALL QBRAN
      002DB6 2D 8E                    2     .word EDOT2
      002DB8                        278     _DOLIT '.'
      002DB8 CD 04 71         [ 4]    1     CALL DOLIT 
      002DBB 00 2E                    2     .word '.' 
      002DBD CD 0D 82         [ 4]  279     CALL HOLD  
      002DC0 CD 25 EE         [ 4]  280     CALL DDIG
      002DC3 CD 2B E0         [ 4]  281     CALL FNE 
      002DC6                        282     _QBRAN EDOT4 
      002DC6 CD 04 A4         [ 4]    1     CALL QBRAN
      002DC9 2D D6                    2     .word EDOT4
      002DCB                        283     _DOLIT '-'
      002DCB CD 04 71         [ 4]    1     CALL DOLIT 
      002DCE 00 2D                    2     .word '-' 
      002DD0 CD 0D 82         [ 4]  284     CALL HOLD 
      002DD3 CD 05 A4         [ 4]  285     CALL DROP 
      002DD6                        286 EDOT4:       
      002DD6 CD 0D D7         [ 4]  287     CALL EDIGS 
      002DD9 CD 0E D8         [ 4]  288     CALL TYPES
      002DDC CD 05 58         [ 4]  289     CALL RFROM 
      002DDF CD 07 6B         [ 4]  290     CALL QDUP 
      002DE2                        291     _QBRAN EDOT5     
      002DE2 CD 04 A4         [ 4]    1     CALL QBRAN
      002DE5 2D F2                    2     .word EDOT5
      002DE7                        292     _DOLIT 'E'
      002DE7 CD 04 71         [ 4]    1     CALL DOLIT 
      002DEA 00 45                    2     .word 'E' 
      002DEC CD 04 36         [ 4]  293     CALL EMIT 
      002DEF CD 0F AF         [ 4]  294     CALL DOT
      002DF2                        295 EDOT5: 
      002DF2 CD 05 58         [ 4]  296     CALL RFROM 
      002DF5 CD 06 7E         [ 4]  297     CALL BASE 
      002DF8 CD 04 F0         [ 4]  298     CALL STORE  
      002DFB 81               [ 4]  299     RET 
                                    300 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



                                    301 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                    302 ;   F. (f# -- )
                                    303 ;   print float in fixed
                                    304 ;   point format. 
                                    305 ;;;;;;;;;;;;;;;;;;;;;;;;;
      002DFC                        306     _HEADER FDOT,2,"F."
      002DFC 2D 60                    1         .word LINK 
                           002DFE     2         LINK=.
      002DFE 02                       3         .byte 2  
      002DFF 46 2E                    4         .ascii "F."
      002E01                          5         FDOT:
      002E01 CD 06 7E         [ 4]  307     CALL BASE 
      002E04 CD 05 07         [ 4]  308     CALL AT 
      002E07 CD 05 77         [ 4]  309     CALL TOR 
      002E0A                        310     _DOLIT 10 
      002E0A CD 04 71         [ 4]    1     CALL DOLIT 
      002E0D 00 0A                    2     .word 10 
      002E0F CD 06 7E         [ 4]  311     CALL BASE 
      002E12 CD 04 F0         [ 4]  312     CALL STORE 
      002E15 CD 2C 9A         [ 4]  313     CALL    ATEXP
      002E18 CD 05 AE         [ 4]  314     CALL    DUPP  
      002E1B CD 08 70         [ 4]  315     CALL    ABSS 
      002E1E                        316     _DOLIT  8
      002E1E CD 04 71         [ 4]    1     CALL DOLIT 
      002E21 00 08                    2     .word 8 
      002E23 CD 08 F9         [ 4]  317     CALL    GREAT 
      002E26                        318     _QBRAN  FDOT1 
      002E26 CD 04 A4         [ 4]    1     CALL QBRAN
      002E29 2E 2E                    2     .word FDOT1
      002E2B CC 2D 7A         [ 2]  319     JP      EDOT0 
      002E2E                        320 FDOT1:
      002E2E CD 0E AE         [ 4]  321     CALL    SPACE 
      002E31 CD 05 77         [ 4]  322     CALL    TOR 
      002E34 CD 2B E0         [ 4]  323     CALL    FNE 
      002E37                        324     _QBRAN  FDOT0 
      002E37 CD 04 A4         [ 4]    1     CALL QBRAN
      002E3A 2E 3F                    2     .word FDOT0
      002E3C CD 25 53         [ 4]  325     CALL    DNEGAT 
      002E3F                        326 FDOT0: 
      002E3F CD 0D 72         [ 4]  327     CALL    BDIGS
      002E42 CD 05 6B         [ 4]  328     CALL    RAT  
      002E45 CD 05 E7         [ 4]  329     CALL    ZLESS 
      002E48                        330     _QBRAN  FDOT6 
      002E48 CD 04 A4         [ 4]    1     CALL QBRAN
      002E4B 2E 76                    2     .word FDOT6
      002E4D                        331 FDOT2: ; e<0 
      002E4D CD 25 EE         [ 4]  332     CALL    DDIG 
      002E50 CD 05 58         [ 4]  333     CALL    RFROM
      002E53 CD 0A FB         [ 4]  334     CALL    ONEP 
      002E56 CD 07 6B         [ 4]  335     CALL    QDUP 
      002E59                        336     _QBRAN  FDOT3 
      002E59 CD 04 A4         [ 4]    1     CALL QBRAN
      002E5C 2E 66                    2     .word FDOT3
      002E5E CD 05 77         [ 4]  337     CALL    TOR 
      002E61                        338     _BRAN   FDOT2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



      002E61 CD 04 D3         [ 4]    1     CALL BRAN 
      002E64 2E 4D                    2     .word FDOT2 
      002E66                        339 FDOT3:
      002E66                        340     _DOLIT  '.' 
      002E66 CD 04 71         [ 4]    1     CALL DOLIT 
      002E69 00 2E                    2     .word '.' 
      002E6B CD 0D 82         [ 4]  341     CALL    HOLD 
      002E6E CD 26 07         [ 4]  342     CALL    DDIGS
      002E71                        343     _BRAN   FDOT9  
      002E71 CD 04 D3         [ 4]    1     CALL BRAN 
      002E74 2E 8B                    2     .word FDOT9 
      002E76                        344 FDOT6: ; e>=0 
      002E76                        345     _BRAN   FDOT8
      002E76 CD 04 D3         [ 4]    1     CALL BRAN 
      002E79 2E 83                    2     .word FDOT8 
      002E7B                        346 FDOT7:     
      002E7B                        347     _DOLIT  '0'
      002E7B CD 04 71         [ 4]    1     CALL DOLIT 
      002E7E 00 30                    2     .word '0' 
      002E80 CD 0D 82         [ 4]  348     CALL    HOLD 
      002E83                        349 FDOT8:
      002E83 CD 04 85         [ 4]  350     CALL    DONXT 
      002E86 2E 7B                  351     .word   FDOT7
      002E88 CD 26 07         [ 4]  352     CALL    DDIGS 
      002E8B                        353 FDOT9:
      002E8B CD 2B E0         [ 4]  354     CALL    FNE 
      002E8E                        355     _QBRAN  FDOT10 
      002E8E CD 04 A4         [ 4]    1     CALL QBRAN
      002E91 2E 9B                    2     .word FDOT10
      002E93                        356     _DOLIT '-' 
      002E93 CD 04 71         [ 4]    1     CALL DOLIT 
      002E96 00 2D                    2     .word '-' 
      002E98 CD 0D 82         [ 4]  357     CALL   HOLD 
      002E9B                        358 FDOT10:
      002E9B CD 0D D7         [ 4]  359     CALL    EDIGS 
      002E9E CD 0E D8         [ 4]  360     CALL    TYPES 
      002EA1 CD 05 58         [ 4]  361     CALL    RFROM 
      002EA4 CD 06 7E         [ 4]  362     CALL    BASE 
      002EA7 CD 04 F0         [ 4]  363     CALL    STORE 
      002EAA 81               [ 4]  364     RET 
                                    365 
                                    366 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    367 ; return parsed exponent or 
                                    368 ; 0 if failed
                                    369 ; at entry exprect *a=='E'    
                                    370 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002EAB                        371 parse_exponent: ; a cntr -- e -1 | 0 
      002EAB CD 05 77         [ 4]  372     CALL TOR   ; R: cntr 
      002EAE CD 05 AE         [ 4]  373     CALL DUPP 
      002EB1 CD 05 25         [ 4]  374     CALL CAT 
      002EB4                        375     _DOLIT 'E' 
      002EB4 CD 04 71         [ 4]    1     CALL DOLIT 
      002EB7 00 45                    2     .word 'E' 
      002EB9 CD 08 7E         [ 4]  376     CALL EQUAL 
      002EBC                        377     _QBRAN 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



      002EBC CD 04 A4         [ 4]    1     CALL QBRAN
      002EBF 2E EC                    2     .word 1$
      002EC1 CD 0A FB         [ 4]  378     CALL ONEP 
      002EC4 CD 05 58         [ 4]  379     CALL RFROM  ; a cntr 
      002EC7 CD 0B 08         [ 4]  380     CALL ONEM
      002ECA CD 05 AE         [ 4]  381     CALL DUPP 
      002ECD                        382     _QBRAN 2$ ; a cntr 
      002ECD CD 04 A4         [ 4]    1     CALL QBRAN
      002ED0 2E EF                    2     .word 2$
      002ED2 CD 0B 67         [ 4]  383     CALL ZERO
      002ED5 CD 05 AE         [ 4]  384     CALL DUPP 
      002ED8 CD 26 9E         [ 4]  385     CALL DSWAP ; 0 0 a cntr  
      002EDB CD 23 E3         [ 4]  386     CALL nsign 
      002EDE CD 05 77         [ 4]  387     CALL TOR   ; R: esign  
      002EE1 CD 24 1B         [ 4]  388     CALL parse_digits
      002EE4                        389     _QBRAN PARSEXP_SUCCESS ; parsed to end of string 
      002EE4 CD 04 A4         [ 4]    1     CALL QBRAN
      002EE7 2E F6                    2     .word PARSEXP_SUCCESS
                                    390 ; failed invalid character
      002EE9 CD 07 BD         [ 4]  391     CALL DDROP ; 0 a 
      002EEC                        392 1$: 
      002EEC CD 05 58         [ 4]  393     CALL RFROM ; sign||cntr  
      002EEF                        394 2$:
      002EEF CD 07 BD         [ 4]  395     CALL DDROP  ; a cntr || a sign || 0 cntr   
      002EF2 CD 0B 67         [ 4]  396     CALL ZERO   ; return only 0 
      002EF5 81               [ 4]  397     RET 
      002EF6                        398 PARSEXP_SUCCESS: 
      002EF6 CD 07 BD         [ 4]  399     CALL DDROP ; drop dhi a 
      002EF9 CD 05 58         [ 4]  400     CALL RFROM ; es 
      002EFC                        401     _QBRAN 1$
      002EFC CD 04 A4         [ 4]    1     CALL QBRAN
      002EFF 2F 04                    2     .word 1$
      002F01 CD 08 08         [ 4]  402     CALL NEGAT
      002F04                        403 1$:
      002F04                        404     _DOLIT -1 ; -- e -1 
      002F04 CD 04 71         [ 4]    1     CALL DOLIT 
      002F07 FF FF                    2     .word -1 
      002F09 81               [ 4]  405     RET 
                                    406 
                                    407 
                                    408 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    409 ;   FLOAT?  ( a dlo dhi a+ cntr sign d? -- f -3 | a 0 )
                                    410 ;   called by NUMBER? 
                                    411 ;   convert string to float 
                                    412 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002F0A                        413     _HEADER FLOATQ,5,"FLOAT?"
      002F0A 2D FE                    1         .word LINK 
                           002F0C     2         LINK=.
      002F0C 05                       3         .byte 5  
      002F0D 46 4C 4F 41 54 3F        4         .ascii "FLOAT?"
      002F13                          5         FLOATQ:
      002F13                        414     _QBRAN FLOATQ0 
      002F13 CD 04 A4         [ 4]    1     CALL QBRAN
      002F16 2F 1D                    2     .word FLOATQ0
      002F18                        415     _BRAN FLOAT_ERROR  ; not a float, string start with '#'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



      002F18 CD 04 D3         [ 4]    1     CALL BRAN 
      002F1B 2F BC                    2     .word FLOAT_ERROR 
      002F1D                        416 FLOATQ0:
                                    417 ; BASE must be 10 
      002F1D CD 06 7E         [ 4]  418     CALL BASE 
      002F20 CD 05 07         [ 4]  419     CALL AT 
      002F23                        420     _DOLIT 10 
      002F23 CD 04 71         [ 4]    1     CALL DOLIT 
      002F26 00 0A                    2     .word 10 
      002F28 CD 08 7E         [ 4]  421     CALL EQUAL 
      002F2B                        422     _QBRAN FLOAT_ERROR 
      002F2B CD 04 A4         [ 4]    1     CALL QBRAN
      002F2E 2F BC                    2     .word FLOAT_ERROR
                                    423 ; if float next char is '.' or 'E' 
      002F30 CD 05 77         [ 4]  424     CALL TOR ; R: sign  
      002F33 CD 05 77         [ 4]  425     CALL TOR ; R: sign cntr 
      002F36 CD 05 AE         [ 4]  426     CALL DUPP
      002F39 CD 05 25         [ 4]  427     CALL CAT 
      002F3C                        428     _DOLIT '.' 
      002F3C CD 04 71         [ 4]    1     CALL DOLIT 
      002F3F 00 2E                    2     .word '.' 
      002F41 CD 08 7E         [ 4]  429     CALL EQUAL 
      002F44                        430     _QBRAN FLOATQ1 ; not a dot 
      002F44 CD 04 A4         [ 4]    1     CALL QBRAN
      002F47 2F 82                    2     .word FLOATQ1
      002F49 CD 0A FB         [ 4]  431     CALL ONEP 
      002F4C CD 05 58         [ 4]  432     CALL RFROM  ; dlo dhi a cntr R: sign  
      002F4F CD 0B 08         [ 4]  433     CALL ONEM 
      002F52 CD 05 AE         [ 4]  434     CALL DUPP 
      002F55 CD 05 77         [ 4]  435     CALL TOR  ; R: sign cntr 
                                    436 ; parse fractional part
      002F58 CD 24 1B         [ 4]  437     CALL parse_digits ; dlo dhi a cntr -- dm a cntr 
      002F5B CD 05 AE         [ 4]  438     CALL DUPP 
      002F5E CD 05 58         [ 4]  439     CALL RFROM 
      002F61 CD 05 BE         [ 4]  440     CALL SWAPP 
      002F64 CD 08 56         [ 4]  441     CALL SUBB ; fd -> fraction digits count 
      002F67 CD 05 77         [ 4]  442     CALL TOR  ; dlo dhi a cntr R: sign fd 
      002F6A CD 05 AE         [ 4]  443     CALL DUPP ; cntr cntr  
      002F6D                        444     _QBRAN 1$ ; end of string, no exponent
      002F6D CD 04 A4         [ 4]    1     CALL QBRAN
      002F70 2F 77                    2     .word 1$
      002F72                        445     _BRAN FLOATQ2
      002F72 CD 04 D3         [ 4]    1     CALL BRAN 
      002F75 2F 8B                    2     .word FLOATQ2 
      002F77 CD 05 BE         [ 4]  446 1$: CALL SWAPP 
      002F7A CD 05 A4         [ 4]  447     CALL DROP ; a
      002F7D                        448     _BRAN FLOATQ3        
      002F7D CD 04 D3         [ 4]    1     CALL BRAN 
      002F80 2F 93                    2     .word FLOATQ3 
      002F82                        449 FLOATQ1: ; must push fd==0 on RSTACK 
      002F82 CD 05 58         [ 4]  450     CALL RFROM ; cntr 
      002F85 CD 0B 67         [ 4]  451     CALL ZERO  ; fd 
      002F88 CD 05 77         [ 4]  452     CALL TOR   ; dm a cntr R: sign fd 
      002F8B                        453 FLOATQ2: 
      002F8B CD 2E AB         [ 4]  454     CALL parse_exponent 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



      002F8E                        455     _QBRAN FLOAT_ERROR0 ; exponent expected 
      002F8E CD 04 A4         [ 4]    1     CALL QBRAN
      002F91 2F B9                    2     .word FLOAT_ERROR0
      002F93                        456 FLOATQ3: ; dm 0 || dm e  
      002F93 CD 05 58         [ 4]  457     CALL RFROM ;  fd  
      002F96 CD 08 56         [ 4]  458     CALL SUBB  ; exp=e-fd 
      002F99 CD 07 9B         [ 4]  459     CALL NROT 
      002F9C CD 05 58         [ 4]  460     CALL RFROM  ; sign 
      002F9F                        461     _QBRAN FLOATQ4 
      002F9F CD 04 A4         [ 4]    1     CALL QBRAN
      002FA2 2F A7                    2     .word FLOATQ4
      002FA4 CD 08 1A         [ 4]  462     CALL DNEGA 
      002FA7                        463 FLOATQ4:
      002FA7 CD 07 7C         [ 4]  464     CALL ROT 
      002FAA CD 2C E4         [ 4]  465     CALL STEXP 
      002FAD CD 07 7C         [ 4]  466     CALL ROT 
      002FB0 CD 05 A4         [ 4]  467     CALL DROP 
      002FB3                        468     _DOLIT -3 
      002FB3 CD 04 71         [ 4]    1     CALL DOLIT 
      002FB6 FF FD                    2     .word -3 
      002FB8 81               [ 4]  469     RET       
      002FB9                        470 FLOAT_ERROR0: 
      002FB9 CD 28 39         [ 4]  471     CALL DRFROM ; sign df      
      002FBC                        472 FLOAT_ERROR: 
      002FBC CD 0B A9         [ 4]  473     CALL DEPTH 
      002FBF CD 0A EE         [ 4]  474     CALL CELLS 
      002FC2 CD 05 8E         [ 4]  475     CALL SPAT 
      002FC5 CD 05 BE         [ 4]  476     CALL SWAPP 
      002FC8 CD 07 DD         [ 4]  477     CALL PLUS  
      002FCB CD 05 9B         [ 4]  478     CALL SPSTO 
      002FCE                        479     _DOLIT 0 
      002FCE CD 04 71         [ 4]    1     CALL DOLIT 
      002FD1 00 00                    2     .word 0 
      002FD3 81               [ 4]  480     RET 
                                    481 
                                    482 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    483 ;  LSCALE ( f# -- f# )
                                    484 ;  m *=fbase , e -= 1
                                    485 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002FD4                        486     _HEADER LSCALE,6,"LSCALE"
      002FD4 2F 0C                    1         .word LINK 
                           002FD6     2         LINK=.
      002FD6 06                       3         .byte 6  
      002FD7 4C 53 43 41 4C 45        4         .ascii "LSCALE"
      002FDD                          5         LSCALE:
      002FDD CD 2C 9A         [ 4]  487     CALL ATEXP 
      002FE0                        488     _DOLIT 1 
      002FE0 CD 04 71         [ 4]    1     CALL DOLIT 
      002FE3 00 01                    2     .word 1 
      002FE5 CD 08 56         [ 4]  489     CALL SUBB 
      002FE8 CD 05 77         [ 4]  490     CALL TOR
      002FEB                        491     _DOLIT 10 
      002FEB CD 04 71         [ 4]    1     CALL DOLIT 
      002FEE 00 0A                    2     .word 10 
      002FF0 CD 26 55         [ 4]  492     CALL DSSTAR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



      002FF3 CD 05 58         [ 4]  493     CALL RFROM 
      002FF6 CD 2C E4         [ 4]  494     CALL STEXP 
      002FF9 81               [ 4]  495     RET  
                                    496 
                                    497 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    498 ;  RSCALE ( f# -- f# )
                                    499 ;  m /=fbase , e+=1 
                                    500 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002FFA                        501     _HEADER RSCALE,6,"RSCALE"
      002FFA 2F D6                    1         .word LINK 
                           002FFC     2         LINK=.
      002FFC 06                       3         .byte 6  
      002FFD 52 53 43 41 4C 45        4         .ascii "RSCALE"
      003003                          5         RSCALE:
      003003 CD 2C 9A         [ 4]  502     CALL ATEXP 
      003006                        503     _DOLIT 1 
      003006 CD 04 71         [ 4]    1     CALL DOLIT 
      003009 00 01                    2     .word 1 
      00300B CD 07 DD         [ 4]  504     CALL PLUS 
      00300E CD 05 77         [ 4]  505     CALL TOR 
      003011                        506     _DOLIT 10 
      003011 CD 04 71         [ 4]    1     CALL DOLIT 
      003014 00 0A                    2     .word 10 
      003016 CD 25 AD         [ 4]  507     CALL DSLMOD 
      003019 CD 07 7C         [ 4]  508     CALL ROT 
      00301C CD 05 A4         [ 4]  509     CALL DROP 
      00301F CD 05 58         [ 4]  510     CALL RFROM 
      003022 CD 2C E4         [ 4]  511     CALL STEXP 
      003025 81               [ 4]  512     RET 
                                    513 
                                    514 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    515 ;   SCALE>M ( ud1 -- e ud2 )
                                    516 ;   scale down a double  
                                    517 ;   by repeated d/10
                                    518 ;   until ud<=MAX_MANTISSA   
                                    519 ;   e is log10 exponent of scaled down
                                    520 ;   ud2 is scaled down ud1 
                                    521 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003026                        522     _HEADER SCALETOM,7,"SCALE>M"
      003026 2F FC                    1         .word LINK 
                           003028     2         LINK=.
      003028 07                       3         .byte 7  
      003029 53 43 41 4C 45 3E 4D     4         .ascii "SCALE>M"
      003030                          5         SCALETOM:
      003030 CD 0B 67         [ 4]  523     CALL ZERO 
      003033 CD 07 9B         [ 4]  524     CALL NROT 
      003036                        525 SCAL1:
      003036 CD 05 AE         [ 4]  526     CALL DUPP 
      003039                        527     _DOLIT 0X7F 
      003039 CD 04 71         [ 4]    1     CALL DOLIT 
      00303C 00 7F                    2     .word 0X7F 
      00303E CD 08 DA         [ 4]  528     CALL UGREAT 
      003041                        529     _QBRAN SCAL2  
      003041 CD 04 A4         [ 4]    1     CALL QBRAN
      003044 30 62                    2     .word SCAL2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



      003046                        530     _DOLIT 10 
      003046 CD 04 71         [ 4]    1     CALL DOLIT 
      003049 00 0A                    2     .word 10 
      00304B CD 25 AD         [ 4]  531     CALL DSLMOD 
      00304E CD 07 7C         [ 4]  532     CALL ROT  
      003051 CD 05 A4         [ 4]  533     CALL DROP
      003054 CD 07 7C         [ 4]  534     CALL ROT 
      003057 CD 0A FB         [ 4]  535     CALL ONEP 
      00305A CD 07 9B         [ 4]  536     CALL NROT  
      00305D                        537     _BRAN SCAL1 
      00305D CD 04 D3         [ 4]    1     CALL BRAN 
      003060 30 36                    2     .word SCAL1 
      003062                        538 SCAL2: 
      003062 81               [ 4]  539     RET 
                                    540 
                                    541 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    542 ;  UDIV10 ( ut -- ut )
                                    543 ;  divide a 48 bits uint by 10 
                                    544 ;  used to scale down MM* 
                                    545 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003063                        546 UDIV10:
      003063 90 93            [ 1]  547     LDW Y,X 
      003065 90 FE            [ 2]  548     LDW Y,(Y)
      003067 A6 0A            [ 1]  549     LD A,#10 
      003069 90 62            [ 2]  550     DIV Y,A 
      00306B FF               [ 2]  551     LDW (X),Y 
      00306C 90 95            [ 1]  552     LD YH,A 
      00306E E6 02            [ 1]  553     LD A,(2,X)
      003070 90 97            [ 1]  554     LD YL,A 
      003072 A6 0A            [ 1]  555     LD A,#10 
      003074 90 62            [ 2]  556     DIV Y,A 
      003076 90 95            [ 1]  557     LD YH,A 
      003078 90 9F            [ 1]  558     LD A,YL 
      00307A E7 02            [ 1]  559     LD (2,X),A 
      00307C E6 03            [ 1]  560     LD A,(3,X)
      00307E 90 97            [ 1]  561     LD YL,A 
      003080 A6 0A            [ 1]  562     LD A,#10 
      003082 90 62            [ 2]  563     DIV Y,A 
      003084 90 95            [ 1]  564     LD YH,A 
      003086 90 9F            [ 1]  565     LD A,YL 
      003088 E7 03            [ 1]  566     LD (3,X),A 
      00308A E6 04            [ 1]  567     LD A,(4,X)
      00308C 90 97            [ 1]  568     LD YL,A 
      00308E A6 0A            [ 1]  569     LD A,#10 
      003090 90 62            [ 2]  570     DIV Y,A 
      003092 90 95            [ 1]  571     LD YH,A 
      003094 90 9F            [ 1]  572     LD A,YL 
      003096 E7 04            [ 1]  573     LD (4,X),A 
      003098 E6 05            [ 1]  574     LD A,(5,X)
      00309A 90 97            [ 1]  575     LD YL,A 
      00309C A6 0A            [ 1]  576     LD A,#10 
      00309E 90 62            [ 2]  577     DIV Y,A 
      0030A0 90 9F            [ 1]  578     LD A,YL 
      0030A2 E7 05            [ 1]  579     LD (5,X),A 
      0030A4 81               [ 4]  580     RET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



                                    581 
                                    582 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    583 ;   MM* ( m1 m2 -- m3 e )
                                    584 ;   mantissa product 
                                    585 ;  scale down to 23 bits 
                                    586 ;   e  is log10 scaling factor.
                                    587 ;   The maximum product size 
                                    588 ;   before scaling is 46 bits .
                                    589 ;   UDIV10 is used to scale down.  
                                    590 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0030A5                        591     _HEADER MMSTAR,3,"MM*"
      0030A5 30 28                    1         .word LINK 
                           0030A7     2         LINK=.
      0030A7 03                       3         .byte 3  
      0030A8 4D 4D 2A                 4         .ascii "MM*"
      0030AB                          5         MMSTAR:
      0030AB CD 07 C8         [ 4]  592     CALL DDUP
      0030AE CD 25 35         [ 4]  593     CALL DZEQUAL
      0030B1                        594     _TBRAN MMSTA2
      0030B1 CD 04 BC         [ 4]    1     CALL TBRAN 
      0030B4 30 C1                    2     .word MMSTA2 
      0030B6                        595 MMSTA1:
      0030B6 CD 28 E2         [ 4]  596     CALL DOVER 
      0030B9 CD 25 35         [ 4]  597     CALL DZEQUAL 
      0030BC                        598     _QBRAN MMSTA3 
      0030BC CD 04 A4         [ 4]    1     CALL QBRAN
      0030BF 30 CC                    2     .word MMSTA3
      0030C1                        599 MMSTA2: ; ( -- 0 0 0 )
      0030C1 1C 00 02         [ 2]  600     ADDW X,#2 
      0030C4 90 5F            [ 1]  601     CLRW Y 
      0030C6 FF               [ 2]  602     LDW (X),Y 
      0030C7 EF 02            [ 2]  603     LDW (2,X),Y
      0030C9 EF 04            [ 2]  604     LDW (4,X),Y 
      0030CB 81               [ 4]  605     RET 
      0030CC                        606 MMSTA3:
      0030CC CD 25 94         [ 4]  607     CALL DSIGN 
      0030CF CD 05 77         [ 4]  608     CALL TOR    ; R: m2sign 
      0030D2 CD 25 7D         [ 4]  609     CALL DABS   ; m1 um2 
      0030D5 CD 26 9E         [ 4]  610     CALL DSWAP  ; um2 m1 
      0030D8 CD 25 94         [ 4]  611     CALL DSIGN  ; um2 m1 m1sign 
      0030DB CD 05 58         [ 4]  612     CALL RFROM 
      0030DE CD 06 36         [ 4]  613     CALL XORR 
      0030E1 CD 05 77         [ 4]  614     CALL TOR   ; R: product_sign 
      0030E4 CD 25 7D         [ 4]  615     CALL DABS  ; um2 um1  
      0030E7 CD 28 1B         [ 4]  616     CALL DTOR  ; um2 
      0030EA CD 05 AE         [ 4]  617     CALL DUPP  ; um2 um2hi 
      0030ED CD 05 6B         [ 4]  618     CALL RAT   ; um2 um2hi um1hi
                                    619 ; first partial product  
                                    620 ; pd1=um2hi*um1hi 
      0030F0 CD 0A 7A         [ 4]  621     CALL STAR 
      0030F3 CD 0B 67         [ 4]  622     CALL ZERO 
      0030F6 CD 05 BE         [ 4]  623     CALL SWAPP ; pd1<<16  
      0030F9 CD 26 9E         [ 4]  624     CALL DSWAP ; pd1 um2 
      0030FC CD 05 D8         [ 4]  625     CALL OVER  ; pd1 um2 um2lo 
      0030FF CD 05 58         [ 4]  626     CALL RFROM ; pd1 um2 um2lo um1hi 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



                                    627 ; pd2=um2lo*um1hi 
      003102 CD 0A 30         [ 4]  628     CALL UMSTA ; pd1 um2 pd2 
      003105 CD 26 9E         [ 4]  629     CALL DSWAP ; pd1 pd2 um2 
      003108 CD 05 6B         [ 4]  630     CALL RAT   ; pd1 pd2 um2 um1lo 
                                    631 ; pd3= um2hi*um1lo 
      00310B CD 0A 30         [ 4]  632     CALL UMSTA ; pd1 pd2 um2lo pd3 
      00310E CD 07 7C         [ 4]  633     CALL ROT ; pd1 pd2 pd3 um2lo 
      003111 CD 05 77         [ 4]  634     CALL TOR ; pd1 pd2 pd3 R: psign um1lo um2lo 
                                    635 ; pd1+pd2+pd3  pd1
      003114 CD 2A E2         [ 4]  636     CALL DPLUS 
      003117 CD 2A E2         [ 4]  637     CALL DPLUS  
      00311A CD 19 B2         [ 4]  638 CALL DOTS 
      00311D CD 28 39         [ 4]  639     CALL DRFROM ; triple um2lo um1lo 
                                    640 ; last partial product um2lo*um1lo 
      003120 CD 0A 30         [ 4]  641     CALL UMSTA ; prod pd4 
                                    642 ; mm*=prod<<16+pd4  
      003123 CD 28 1B         [ 4]  643     CALL DTOR ;   R: psign pd4lo pd4hi  
                                    644  ; add pd4hi to prodlo and propagate carry 
      003126 90 93            [ 1]  645     LDW Y,X 
      003128 90 EE 02         [ 2]  646     LDW Y,(2,Y)  ; prodlo 
      00312B 72 F9 01         [ 2]  647     ADDW Y,(1,SP)  ; prodlo+pd4hi 
      00312E 17 01            [ 2]  648     LDW (1,SP),Y    ; plo phi  
      003130 90 93            [ 1]  649     LDW Y,X
      003132 90 FE            [ 2]  650     LDW Y,(Y) ; prodhi  
      003134 24 04            [ 1]  651     JRNC MMSTA4
      003136 72 A9 00 01      [ 2]  652     ADDW Y,#1 ; add carry 
      00313A                        653 MMSTA4:     
      00313A 1D 00 02         [ 2]  654     SUBW X,#2 
      00313D FF               [ 2]  655     LDW (X),Y 
      00313E 90 85            [ 2]  656     POPW Y 
      003140 EF 02            [ 2]  657     LDW (2,X),Y 
      003142 90 85            [ 2]  658     POPW Y 
      003144 EF 04            [ 2]  659     LDW (4,X),Y
      003146 CD 0B 67         [ 4]  660     CALL ZERO 
      003149 CD 05 77         [ 4]  661     CALL TOR 
      00314C                        662 MMSTA5:
      00314C CD 07 6B         [ 4]  663     CALL QDUP 
      00314F                        664     _QBRAN MMSTA6 
      00314F CD 04 A4         [ 4]    1     CALL QBRAN
      003152 31 65                    2     .word MMSTA6
      003154 CD 30 63         [ 4]  665     CALL UDIV10 
      003157 CD 05 58         [ 4]  666     CALL RFROM 
      00315A CD 0A FB         [ 4]  667     CALL ONEP 
      00315D CD 05 77         [ 4]  668     CALL TOR 
      003160                        669     _BRAN MMSTA5 
      003160 CD 04 D3         [ 4]    1     CALL BRAN 
      003163 31 4C                    2     .word MMSTA5 
                                    670 ; now scale to double 
                                    671 ; scale further <= MAX_MANTISSA 
      003165                        672 MMSTA6: 
      003165 CD 05 58         [ 4]  673     CALL RFROM 
      003168 CD 07 9B         [ 4]  674     CALL NROT 
      00316B CD 30 30         [ 4]  675     CALL SCALETOM
      00316E CD 28 1B         [ 4]  676     CALL DTOR 
      003171 CD 07 DD         [ 4]  677     CALL PLUS 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



      003174 CD 28 39         [ 4]  678     CALL DRFROM 
      003177 CD 05 58         [ 4]  679     CALL RFROM
      00317A                        680     _QBRAN MMSTA7
      00317A CD 04 A4         [ 4]    1     CALL QBRAN
      00317D 31 82                    2     .word MMSTA7
      00317F CD 08 1A         [ 4]  681     CALL DNEGA
      003182                        682 MMSTA7:
      003182 CD 07 7C         [ 4]  683     CALL ROT ; m e 
      003185 81               [ 4]  684     RET 
                                    685 
                                    686 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    687 ;    F* ( f#1 f#2 -- f#3 )
                                    688 ;    float product 
                                    689 ;    f#3=f#1 * f#2 
                                    690 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003186                        691     _HEADER FSTAR,2,"F*"
      003186 30 A7                    1         .word LINK 
                           003188     2         LINK=.
      003188 02                       3         .byte 2  
      003189 46 2A                    4         .ascii "F*"
      00318B                          5         FSTAR:
      00318B CD 2C 9A         [ 4]  692     CALL ATEXP ; f#1 m2 e2 
      00318E CD 05 77         [ 4]  693     CALL TOR   
      003191 CD 26 9E         [ 4]  694     CALL DSWAP ; m2 f#1
      003194 CD 2C 9A         [ 4]  695     CALL ATEXP ; m2 m1 e1 
      003197 CD 05 58         [ 4]  696     CALL RFROM ; m2 m1 e1 e2 
      00319A CD 07 DD         [ 4]  697     CALL PLUS  ; m2 m1 e 
      00319D CD 05 77         [ 4]  698     CALL TOR   ; m2 m1 R: e 
      0031A0 CD 30 AB         [ 4]  699     CALL MMSTAR ; m2*m1 e   
      0031A3 CD 05 58         [ 4]  700     CALL RFROM 
      0031A6 CD 07 DD         [ 4]  701     CALL PLUS 
      0031A9 CD 2C E4         [ 4]  702     CALL STEXP ; f#3 
      0031AC 81               [ 4]  703     RET 
                                    704 
                                    705 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    706 ;  F/ ( f#1 f#2 -- f#3 )
                                    707 ;  float division
                                    708 ;  f#3 = f#1/f#2
                                    709 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0031AD                        710     _HEADER FSLASH,2,"F/"
      0031AD 31 88                    1         .word LINK 
                           0031AF     2         LINK=.
      0031AF 02                       3         .byte 2  
      0031B0 46 2F                    4         .ascii "F/"
      0031B2                          5         FSLASH:
      0031B2 CD 2C 9A         [ 4]  711     CALL ATEXP  ; f#1 m2 e2  
      0031B5 CD 05 77         [ 4]  712     CALL TOR    ; f#1 m2   R: e2 
      0031B8 CD 26 9E         [ 4]  713     CALL DSWAP  ; m2 f#1 
      0031BB CD 2C 9A         [ 4]  714     CALL ATEXP  ; m2 m1 e1 
      0031BE CD 05 58         [ 4]  715     CALL RFROM  ; m2 m1 e1 e2
      0031C1 CD 07 DD         [ 4]  716     CALL PLUS   ; m2 m1 e 
      0031C4 CD 05 77         [ 4]  717     CALL TOR    ; m2 m1 R: e 
      0031C7 CD 26 9E         [ 4]  718     CALL DSWAP  ; m1 m2 R: e
      0031CA CD 07 C8         [ 4]  719     CALL DDUP  ; m1 m2 m2 R: e
      0031CD CD 28 1B         [ 4]  720     CALL DTOR  ; m1 m2 R: e m2 ( keep divisor need later ) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



      0031D0 CD 29 EB         [ 4]  721     CALL DDSLMOD ; remainder m1/m2 R: e m2 
      0031D3 CD 28 E2         [ 4]  722     CALL DOVER ; if remainder null done 
      0031D6 CD 25 35         [ 4]  723     CALL DZEQUAL 
      0031D9                        724     _TBRAN FSLASH8 
      0031D9 CD 04 BC         [ 4]    1     CALL TBRAN 
      0031DC 32 35                    2     .word FSLASH8 
                                    725 ; get fractional digits from remainder until mantissa saturate
      0031DE                        726 FSLASH1: ; remainder mantissa R: e divisor 
                                    727 ; check for mantissa saturation 
      0031DE CD 07 C8         [ 4]  728     CALL DDUP 
      0031E1                        729     _DOLIT 0XCCCC 
      0031E1 CD 04 71         [ 4]    1     CALL DOLIT 
      0031E4 CC CC                    2     .word 0XCCCC 
      0031E6                        730     _DOLIT 0xC
      0031E6 CD 04 71         [ 4]    1     CALL DOLIT 
      0031E9 00 0C                    2     .word 0xC 
      0031EB CD 27 93         [ 4]  731     CALL DGREAT 
      0031EE                        732     _TBRAN FSLASH8 ; another loop would result in mantissa overflow 
      0031EE CD 04 BC         [ 4]    1     CALL TBRAN 
      0031F1 32 35                    2     .word FSLASH8 
                                    733 ; multiply mantissa by 10 
      0031F3                        734     _DOLIT 10 
      0031F3 CD 04 71         [ 4]    1     CALL DOLIT 
      0031F6 00 0A                    2     .word 10 
      0031F8 CD 0B 67         [ 4]  735     CALL ZERO 
      0031FB CD 29 88         [ 4]  736     CALL DSTAR 
                                    737 ; mutliply remainder by 10     
      0031FE CD 26 9E         [ 4]  738     CALL DSWAP 
      003201                        739     _DOLIT 10 
      003201 CD 04 71         [ 4]    1     CALL DOLIT 
      003204 00 0A                    2     .word 10 
      003206 CD 0B 67         [ 4]  740     CALL ZERO 
      003209 CD 29 88         [ 4]  741     CALL DSTAR 
                                    742 ; divide remainder by m2     
      00320C CD 28 51         [ 4]  743     CALL DRAT 
      00320F CD 29 EB         [ 4]  744     CALL DDSLMOD 
      003212 CD 26 9E         [ 4]  745     CALL DSWAP ; mantissa frac_digit remainder R: e divisor  
      003215 CD 28 1B         [ 4]  746     CALL DTOR  ; mantissa frac_digit R: e divisor remainder 
      003218 CD 2A E2         [ 4]  747     CALL DPLUS ; mantissa+frac_digit 
      00321B CD 28 39         [ 4]  748     CALL DRFROM ; mantissa remainder 
      00321E CD 28 39         [ 4]  749     CALL DRFROM ; mantissa remainder divisor 
      003221 CD 05 58         [ 4]  750     CALL RFROM  ; mantissa remainder divisor e 
      003224 CD 0B 08         [ 4]  751     CALL ONEM   ; decrement exponent 
      003227 CD 05 77         [ 4]  752     CALL TOR    ; mantissa remainder divisor R: e 
      00322A CD 28 1B         [ 4]  753     CALL DTOR   ; mantissa remainder R: e divisor 
      00322D CD 26 9E         [ 4]  754     CALL DSWAP  ; remainder mantissa  
      003230                        755     _BRAN FSLASH1
      003230 CD 04 D3         [ 4]    1     CALL BRAN 
      003233 31 DE                    2     .word FSLASH1 
      003235                        756 FSLASH8: ; remainder mantissa R: e divisor 
      003235 CD 26 9E         [ 4]  757     CALL DSWAP  
      003238 CD 07 BD         [ 4]  758     CALL DDROP  ; drop remainder     
      00323B CD 28 39         [ 4]  759     CALL DRFROM
      00323E CD 07 BD         [ 4]  760     CALL DDROP  ; drop divisor 
      003241 CD 05 58         [ 4]  761     CALL RFROM  ; exponent 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



      003244 CD 2C E4         [ 4]  762     CALL STEXP 
      003247 81               [ 4]  763     RET 
                                    764 
                                    765 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    766 ;   D>F  ( # -- f# )
                                    767 ;   convert double to float 
                                    768 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003248                        769     _HEADER DTOF,3,"D>F"
      003248 31 AF                    1         .word LINK 
                           00324A     2         LINK=.
      00324A 03                       3         .byte 3  
      00324B 44 3E 46                 4         .ascii "D>F"
      00324E                          5         DTOF:
      00324E CD 25 94         [ 4]  770     CALL DSIGN 
      003251 CD 05 77         [ 4]  771     CALL TOR
      003254 CD 25 7D         [ 4]  772     CALL DABS  
      003257                        773 DTOF1:      
      003257 CD 30 30         [ 4]  774     CALL SCALETOM 
      00325A CD 05 58         [ 4]  775     CALL RFROM
      00325D                        776     _QBRAN DTOF2 
      00325D CD 04 A4         [ 4]    1     CALL QBRAN
      003260 32 65                    2     .word DTOF2
      003262 CD 25 53         [ 4]  777     CALL DNEGAT 
      003265                        778 DTOF2: 
      003265 CD 07 7C         [ 4]  779     CALL ROT 
      003268 CD 2C E4         [ 4]  780     CALL STEXP 
      00326B 81               [ 4]  781     RET 
                                    782 
                                    783 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    784 ;   F>D  ( f# -- # )
                                    785 ;  convert float to double 
                                    786 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00326C                        787     _HEADER FTOD,3,"F>D"
      00326C 32 4A                    1         .word LINK 
                           00326E     2         LINK=.
      00326E 03                       3         .byte 3  
      00326F 46 3E 44                 4         .ascii "F>D"
      003272                          5         FTOD:
      003272 CD 2C 9A         [ 4]  788     CALL ATEXP ; m e 
      003275 CD 07 6B         [ 4]  789     CALL QDUP
      003278                        790     _QBRAN FTOD9
      003278 CD 04 A4         [ 4]    1     CALL QBRAN
      00327B 33 08                    2     .word FTOD9
      00327D CD 05 77         [ 4]  791     CALL TOR 
      003280 CD 25 94         [ 4]  792     CALL DSIGN 
      003283 CD 07 9B         [ 4]  793     CALL NROT 
      003286 CD 25 7D         [ 4]  794     CALL DABS
      003289 CD 05 58         [ 4]  795     CALL RFROM  
      00328C CD 05 AE         [ 4]  796     CALL DUPP   
      00328F CD 05 E7         [ 4]  797     CALL ZLESS 
      003292                        798     _QBRAN FTOD4 
      003292 CD 04 A4         [ 4]    1     CALL QBRAN
      003295 32 D0                    2     .word FTOD4
                                    799 ; negative exponent 
      003297 CD 08 70         [ 4]  800     CALL ABSS 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



      00329A CD 05 77         [ 4]  801     CALL TOR
      00329D                        802     _BRAN FTOD2  
      00329D CD 04 D3         [ 4]    1     CALL BRAN 
      0032A0 32 BB                    2     .word FTOD2 
      0032A2                        803 FTOD1:
      0032A2 CD 07 C8         [ 4]  804     CALL DDUP 
      0032A5 CD 25 35         [ 4]  805     CALL DZEQUAL 
      0032A8                        806     _TBRAN FTOD3 
      0032A8 CD 04 BC         [ 4]    1     CALL TBRAN 
      0032AB 32 C5                    2     .word FTOD3 
      0032AD                        807     _DOLIT 10 
      0032AD CD 04 71         [ 4]    1     CALL DOLIT 
      0032B0 00 0A                    2     .word 10 
      0032B2 CD 25 AD         [ 4]  808     CALL DSLMOD 
      0032B5 CD 07 7C         [ 4]  809     CALL ROT 
      0032B8 CD 05 A4         [ 4]  810     CALL DROP
      0032BB                        811 FTOD2:      
      0032BB                        812     _DONXT FTOD1
      0032BB CD 04 85         [ 4]    1     CALL DONXT 
      0032BE 32 A2                    2     .word FTOD1 
      0032C0                        813     _BRAN FTOD8   
      0032C0 CD 04 D3         [ 4]    1     CALL BRAN 
      0032C3 32 FD                    2     .word FTOD8 
      0032C5                        814 FTOD3: 
      0032C5 CD 05 58         [ 4]  815     CALL RFROM 
      0032C8 CD 05 A4         [ 4]  816     CALL DROP 
      0032CB                        817     _BRAN FTOD8  
      0032CB CD 04 D3         [ 4]    1     CALL BRAN 
      0032CE 32 FD                    2     .word FTOD8 
                                    818 ; positive exponent 
      0032D0                        819 FTOD4:
      0032D0 CD 05 77         [ 4]  820     CALL TOR 
      0032D3                        821     _BRAN FTOD6
      0032D3 CD 04 D3         [ 4]    1     CALL BRAN 
      0032D6 32 F8                    2     .word FTOD6 
      0032D8                        822 FTOD5:
      0032D8 CD 07 C8         [ 4]  823     CALL DDUP 
      0032DB                        824     _DOLIT 0XCCCC
      0032DB CD 04 71         [ 4]    1     CALL DOLIT 
      0032DE CC CC                    2     .word 0XCCCC 
      0032E0                        825     _DOLIT 0XCCC  
      0032E0 CD 04 71         [ 4]    1     CALL DOLIT 
      0032E3 0C CC                    2     .word 0XCCC 
      0032E5 CD 27 93         [ 4]  826     CALL DGREAT 
      0032E8                        827     _TBRAN FTOD3 
      0032E8 CD 04 BC         [ 4]    1     CALL TBRAN 
      0032EB 32 C5                    2     .word FTOD3 
      0032ED                        828     _DOLIT 10 
      0032ED CD 04 71         [ 4]    1     CALL DOLIT 
      0032F0 00 0A                    2     .word 10 
      0032F2 CD 0B 67         [ 4]  829     CALL ZERO 
      0032F5 CD 29 88         [ 4]  830     CALL DSTAR 
      0032F8                        831 FTOD6: 
      0032F8                        832     _DONXT FTOD5 
      0032F8 CD 04 85         [ 4]    1     CALL DONXT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



      0032FB 32 D8                    2     .word FTOD5 
      0032FD                        833 FTOD8:
      0032FD CD 07 7C         [ 4]  834     CALL ROT 
      003300                        835     _QBRAN FTOD9 
      003300 CD 04 A4         [ 4]    1     CALL QBRAN
      003303 33 08                    2     .word FTOD9
      003305 CD 08 1A         [ 4]  836     CALL DNEGA
      003308                        837 FTOD9:          
      003308 81               [ 4]  838     RET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



                                   4815 .endif 
                                   4816 
                                   4817 ;===============================================================
                                   4818 
                           00326E  4819 LASTN =	LINK   ;last name defined
                                   4820 
                                   4821 ; application code begin here
      003380                       4822 	.bndry 128 ; align on flash block  
      003380                       4823 app_space: 
                                   4824 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        000879 R   |   6 ABOR1      00137A R
  6 ABOR2      001391 R   |   6 ABORQ      001372 R   |   6 ABORT      001363 R
  6 ABRTQ      00164E R   |   6 ABSS       000870 R   |   6 ACCEP      0012F9 R
  6 ACCP1      001302 R   |   6 ACCP2      001328 R   |   6 ACCP3      00132B R
  6 ACCP4      00132D R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |   6 ADRADJ     00075B R
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  6 AFT        001639 R   |   6 AGAIN      00158F R   |   6 AHEAD      0015EC R
  6 ALLOT      0014A2 R   |   6 ANDD       00060D R   |     APP_CP  =  004004 
    APP_LAST=  004000     |     APP_RUN =  004002     |     APP_VP  =  004006 
  6 AT         000507 R   |   6 ATEXE      000C8B R   |   6 ATEXP      002C9A R
  6 AUTORUN    000129 R   |     AWU_APR =  0050F1     |     AWU_CSR =  0050F0 
    AWU_TBR =  0050F2     |     B0_MASK =  000001     |     B115200 =  000006 
  6 B115K2     0003E0 R   |     B19200  =  000003     |   6 B19K2      0003BD R
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
  6 B2K4       00038E R   |     B2_MASK =  000004     |     B38400  =  000004 
    B3_MASK =  000008     |     B460800 =  000008     |     B4800   =  000001 
  6 B4K8       00039C R   |     B4_MASK =  000010     |     B57600  =  000005 
  6 B57K6      0003CE R   |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
  6 B9K6       0003AC R   |   6 BACK1      0012A1 R   |   6 BASE       00067E R
    BASEE   =  00000A     |   6 BAUD       0003F0 R   |     BCNT    =  000001 
  6 BCOMP      0014E4 R   |   6 BDIGS      000D72 R   |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
  6 BEGIN      001571 R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
  6 BKSLA      0010F6 R   |   6 BKSP       001271 R   |     BKSPP   =  000008 
  6 BLANK      000B5A R   |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |   6 BRAN       0004D3 R   |     BTW     =  000001 
  6 BUF2ROW    0020B6 R   |   6 BYE        0000B6 R   |     CADR    =  000003 
    CALLL   =  0000CD     |   6 CALLOT     0022FF R   |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CARRY   =  00002A 
    CASE_SEN=  000000     |   6 CAT        000525 R   |   6 CCOMMA     0014C6 R
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CELLL   =  000002     |   6 CELLM      000ADF R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]

Symbol Table

  6 CELLP      000AD0 R   |   6 CELLS      000AEE R   |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   6 CHAR1      000EC8 R
  6 CHAR2      000ECB R   |   6 CHKIVEC    001FA4 R   |     CLKOPT  =  004807 
    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |   6 CMOV1      000CAA R
  6 CMOV2      000CC2 R   |   6 CMOVE      000CA2 R   |     CNTDWN  =  000032 
  6 CNTXT      000701 R   |   6 COLD       001AA5 R   |   6 COLD1      001AA5 R
  6 COLON      0017F7 R   |   6 COMMA      0014AF R   |   6 COMPI      0014F4 R
    COMPO   =  000040     |   6 CONSTANT   0018A1 R   |   6 COUNT      000C3E R
  6 CPP        00071D R   |     CPU_A   =  007F00     |     CPU_CCR =  007F0A 
    CPU_PCE =  007F01     |     CPU_PCH =  007F02     |     CPU_PCL =  007F03 
    CPU_SPH =  007F08     |     CPU_SPL =  007F09     |     CPU_XH  =  007F04 
    CPU_XL  =  007F05     |     CPU_YH  =  007F06     |     CPU_YL  =  007F07 
  6 CR         000EF6 R   |   6 CREAT      00183D R   |     CRR     =  00000D 
  6 CSTOR      000514 R   |   6 CTABLE     002320 R   |   6 CTAT       002341 R
  6 CTINIT     002369 R   |   6 D2SLASH    0028FB R   |   6 D2STAR     002912 R
  6 DABS       00257D R   |   6 DABS1      00258B R   |   6 DAT        000C1E R
    DATSTK  =  001680     |   6 DCLZ       0026CC R   |   6 DCLZ1      0026D5 R
  6 DCLZ4      0026DE R   |   6 DCLZ8      0026EB R   |   6 DCMP       0027E9 R
  6 DCMP2      0027F5 R   |   6 DCMP4      002810 R   |   6 DCMP_EQU   002802 R
  6 DCMP_GRE   00280C R   |   6 DCMP_SMA   002806 R   |   6 DCONST     0018D6 R
  6 DDIG       0025EE R   |   6 DDIGS      002607 R   |   6 DDOT       00261E R
  6 DDOT0      002632 R   |   6 DDOT1      002648 R   |   6 DDROP      0007BD R
  6 DDSLMOD    0029EB R   |   6 DDSTAR3    0029E1 R   |   6 DDUP       0007C8 R
    DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF     |   6 DECIM      000E22 R
  6 DEPTH      000BA9 R   |   6 DEQU4      002787 R   |   6 DEQUAL     002772 R
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |   6 DGREAT     002793 R
  6 DGREAT4    0027A8 R   |   6 DGTQ1      000E67 R   |   6 DI         0000C4 R
  6 DIG        000D9B R   |   6 DIGIT      000D36 R   |   6 DIGS       000DAC R
  6 DIGS1      000DAC R   |   6 DIGS2      000DB9 R   |   6 DIGTQ      000E36 R
    DISCOVER=  000000     |   6 DLESS      0027B4 R   |   6 DLESS4     0027CA R
  6 DLITER     0028BB R   |   6 DLSHIFT    00292E R   |   6 DLSHIFT1   00293F R
  6 DLSHIFT2   002954 R   |     DM_BK1RE=  007F90     |     DM_BK1RH=  007F91 
    DM_BK1RL=  007F92     |     DM_BK2RE=  007F93     |     DM_BK2RH=  007F94 
    DM_BK2RL=  007F95     |     DM_CR1  =  007F96     |     DM_CR2  =  007F97 
    DM_CSR1 =  007F98     |     DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A 
  6 DN1        000837 R   |   6 DNEG1      002572 R   |   6 DNEGA      00081A R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]

Symbol Table

  6 DNEGAT     002553 R   |   6 DOCONST    0018C1 R   |   6 DOLIT      000471 R
  6 DONXT      000485 R   |     DOORBELL=  000000     |   6 DOSTR      000F0C R
  6 DOT        000FAF R   |   6 DOT1       000FC5 R   |   6 DOTI1      001A26 R
  6 DOTID      001A10 R   |   6 DOTO1      001406 R   |   6 DOTOK      0013EC R
  6 DOTPR      0010D8 R   |   6 DOTQ       001668 R   |   6 DOTQP      000F35 R
  6 DOTR       000F43 R   |   6 DOTS       0019B2 R   |   6 DOTS1      0019BD R
  6 DOTS2      0019C6 R   |   6 DOVAR      00066E R   |   6 DOVER      0028E2 R
  6 DO_DCONS   0018F9 R   |   6 DPLUS      002AE2 R   |   6 DPLUS1     002B09 R
  6 DRAT       002851 R   |   6 DRFROM     002839 R   |   6 DROP       0005A4 R
  6 DROT       002738 R   |   6 DRSHIFT    002965 R   |   6 DRSHIFT1   00296C R
  6 DRSHIFT2   002982 R   |   6 DSIGN      002594 R   |   6 DSIGN1     00259E R
  6 DSLA1      002A05 R   |   6 DSLA2      002A27 R   |   6 DSLA3      002A67 R
  6 DSLA4      002A8D R   |   6 DSLA7      002ABE R   |   6 DSLA8      002AC1 R
  6 DSLA9      002ADC R   |   6 DSLMOD     0025AD R   |   6 DSLMOD3    0025C8 R
  6 DSLMOD4    0025D4 R   |   6 DSLMODa    0025CF R   |   6 DSLMODb    0025DA R
  6 DSSTAR     002655 R   |   6 DSSTAR1    00266C R   |   6 DSSTAR3    002695 R
  6 DSTAR      002988 R   |   6 DSTOR      000BF8 R   |   6 DSUB       002B14 R
  6 DSUB1      002B3B R   |   6 DSWAP      00269E R   |   6 DTOF       00324E R
  6 DTOF1      003257 R   |   6 DTOF2      003265 R   |   6 DTOR       00281B R
  6 DUMP       001968 R   |   6 DUMP1      00197F R   |   6 DUMP3      0019A1 R
  6 DUMPP      001937 R   |   6 DUPP       0005AE R   |   6 DVARIA     00286F R
  6 DZEQUAL    002535 R   |   6 DZLESS     0027D1 R   |   6 DZLESS1    0027DB R
  6 EDIGS      000DD7 R   |   6 EDOT       002D63 R   |   6 EDOT0      002D7A R
  6 EDOT1      002D88 R   |   6 EDOT2      002D8E R   |   6 EDOT3      002DA7 R
  6 EDOT4      002DD6 R   |   6 EDOT5      002DF2 R   |   6 EECSTORE   001D55 R
  6 EEPCP      001B7B R   |   6 EEPLAST    001B4E R   |   6 EEPROM     001B36 R
    EEPROM_B=  004000     |     EEPROM_E=  0047FF     |     EEPROM_R=  000010 
    EEPROM_S=  000800     |   6 EEPRUN     001B65 R   |   6 EEPVP      001B91 R
  6 EESTORE    001DA1 R   |   6 EE_CCOMM   00206B R   |   6 EE_COMMA   00204A R
  6 EE_CREAD   001CE6 R   |   6 EE_READ    001CC4 R   |   6 EI         0000BD R
  6 ELSEE      0015C7 R   |   6 EMIT       000436 R   |   6 ENEPER     00228B R
    EOL_CR  =  000001     |     EOL_LF  =  000000     |   6 EQ1        000894 R
  6 EQUAL      00087E R   |   6 ERASE      000D04 R   |     ERR     =  00001B 
  6 EVAL       00142F R   |   6 EVAL1      00142F R   |   6 EVAL2      00144B R
  6 EXE1       000C99 R   |   6 EXECU      0004E3 R   |     EXT     =  000000 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |   6 EXTRC      000D5E R
  6 FADDR      002138 R   |   6 FARAT      001BFC R   |   6 FARCAT     001C08 R
  6 FC_XOFF    000463 R   |   6 FC_XON     00044D R   |   6 FDOT       002E01 R
  6 FDOT0      002E3F R   |   6 FDOT1      002E2E R   |   6 FDOT10     002E9B R
  6 FDOT2      002E4D R   |   6 FDOT3      002E66 R   |   6 FDOT6      002E76 R
  6 FDOT7      002E7B R   |   6 FDOT8      002E83 R   |   6 FDOT9      002E8B R
  6 FER        002BBE R   |     FHSE    =  7A1200     |     FHSI    =  F42400 
  6 FILL       000CD1 R   |   6 FILL1      000CEE R   |   6 FILL2      000CF7 R
  6 FIND       0011CD R   |   6 FIND1      0011EB R   |   6 FIND2      001219 R
  6 FIND3      001225 R   |   6 FIND4      001239 R   |   6 FIND5      001246 R
  6 FIND6      00122A R   |   6 FINIT      002BB4 R   |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]

Symbol Table

    FLASH_IA=  000000     |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |   6 FLOATQ     002F13 R
  6 FLOATQ0    002F1D R   |   6 FLOATQ1    002F82 R   |   6 FLOATQ2    002F8B R
  6 FLOATQ3    002F93 R   |   6 FLOATQ4    002FA7 R   |   6 FLOAT_ER   002FBC R
  6 FLOAT_ER   002FB9 R   |     FLSI    =  01F400     |   6 FMOVE      002143 R
  6 FMOVE2     002174 R   |   6 FNE        002BE0 R   |   6 FOR        001544 R
  6 FORGET     00015A R   |   6 FORGET1    000189 R   |   6 FORGET2    00020F R
  6 FORGET4    000218 R   |   6 FORGET6    0001D1 R   |   6 FOV        002BF5 R
  6 FPSTOR     001B17 R   |   6 FPSW       002B8E R   |     FPTR    =  000034 
  6 FREEVAR    000225 R   |   6 FREEVAR4   00025B R   |   6 FRESET     002BA0 R
  6 FSLASH     0031B2 R   |   6 FSLASH1    0031DE R   |   6 FSLASH8    003235 R
  6 FSTAR      00318B R   |   6 FTOD       003272 R   |   6 FTOD1      0032A2 R
  6 FTOD2      0032BB R   |   6 FTOD3      0032C5 R   |   6 FTOD4      0032D0 R
  6 FTOD5      0032D8 R   |   6 FTOD6      0032F8 R   |   6 FTOD8      0032FD R
  6 FTOD9      003308 R   |   6 FZE        002BCB R   |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
  6 GREAT      0008F9 R   |   6 GREAT1     00090F R   |   6 HDOT       000F92 R
  6 HERE       000C55 R   |   6 HEX        000E0D R   |   6 HI         001A62 R
  6 HLD        0006EE R   |   6 HOLD       000D82 R   |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  6 ICOLON     001808 R   |   6 IFETCH     001562 R   |   6 IFF        00159F R
  6 IFMOVE     00221C R   |   6 ILOG       002B48 R   |   6 ILOG1      002B53 R
  6 ILOG2      002B7D R   |     IMEDD   =  000080     |   6 IMMED      00181A R
  6 INCH       00042A R   |   6 INC_FPTR   001C91 R   |   6 INITOFS    0017D0 R
  6 INN        00069C R   |     INPUT_DI=  000000     |     INPUT_EI=  000001 
    INPUT_FL=  000000     |     INPUT_PU=  000001     |   6 INTE1      0013CE R
  6 INTER      0013A4 R   |   6 INTQ       0023C5 R   |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]

Symbol Table

    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
  6 INVER      0007F7 R   |     IPR0    =  000002     |     IPR1    =  000001 
    IPR2    =  000000     |     IPR3    =  000003     |     IPR_MASK=  000003 
    IRET_COD=  000080     |   6 ISEMI      001765 R   |     ITC_SPR1=  007F70 
    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |   6 JSRC       0017BA R   |   6 KEY        000E76 R
  6 KTAP       0012BE R   |   6 KTAP1      0012E1 R   |   6 KTAP2      0012E4 R
  6 LAST       00072D R   |   6 LASTN   =  00326E R   |   6 LBRAC      0013DB R
    LED2_BIT=  000005     |     LED2_MAS=  000020     |     LED2_POR=  00500A 
  6 LESS       0008BB R   |     LF      =  00000A     |   6 LINK    =  00326E R
  6 LITER      001516 R   |   6 LN2S       0022E7 R   |   6 LOCK       001C7D R
  6 LOG2S      0022D1 R   |   6 LSCALE     002FDD R   |   6 LSHIFT     000B19 R
  6 LSHIFT1    000B22 R   |   6 LSHIFT4    000B2A R   |   6 LT1        0008D1 R
    MASKK   =  001F7F     |   6 MAX        000919 R   |   6 MAX1       00092C R
    MAX_MANT=  7FFFFF     |   6 MIN        000936 R   |   6 MIN1       000949 R
  6 MMOD1      0009D2 R   |   6 MMOD2      0009E6 R   |   6 MMOD3      0009FD R
  6 MMSM1      00098D R   |   6 MMSM3      000991 R   |   6 MMSM4      00099D R
  6 MMSMa      000998 R   |   6 MMSMb      0009A3 R   |   6 MMSTA1     0030B6 R
  6 MMSTA2     0030C1 R   |   6 MMSTA3     0030CC R   |   6 MMSTA4     00313A R
  6 MMSTA5     00314C R   |   6 MMSTA6     003165 R   |   6 MMSTA7     003182 R
  6 MMSTAR     0030AB R   |   6 MODD       000A17 R   |   6 MONE       000B80 R
    MS      =  000030     |   6 MSEC       0002D0 R   |   6 MSMOD      0009B5 R
  6 MSTA1      000AA8 R   |   6 MSTAR      000A85 R   |     NAFR    =  004804 
  6 NAMEQ      001266 R   |   6 NAMET      001177 R   |     NCLKOPT =  004808 
  6 NDROT      0026FC R   |   6 NEGAT      000808 R   |   6 NEX1       000492 R
  6 NEXT       001553 R   |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPT6   =  00480C 
    NOPT7   =  00480E     |     NOPTBL  =  00487F     |   6 NROT       00079B R
  6 NTIB       0006AC R   |     NUBC    =  004802     |     NUCLEO  =  000001 
  6 NUFQ       000E8C R   |   6 NUFQ1      000EA5 R   |   6 NUMBQ      00246E R
  6 NUMQ0      0024AF R   |   6 NUMQ1      0024D1 R   |   6 NUMQ3      0024FB R
  6 NUMQ4      00251C R   |   6 NUMQ8      002525 R   |     NWDGOPT =  004806 
    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   6 NonHandl   000000 R   |   6 OFFSET     000752 R
    OFS     =  000005     |   6 ONE        000B72 R   |   6 ONEM       000B08 R
  6 ONEP       000AFB R   |     OPT     =  000002     |     OPT0    =  004800 
    OPT1    =  004801     |     OPT2    =  004803     |     OPT3    =  004805 
    OPT4    =  004807     |     OPT5    =  004809     |     OPT6    =  00480B 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]

Symbol Table

    OPT7    =  00480D     |     OPTBL   =  00487E     |     OPTIMIZE=  000001 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  6 ORIG       000049 R   |   6 ORR        000621 R   |   6 OUTPUT     00043B R
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |   6 OVER       0005D8 R   |   6 OVERT      001733 R
    PA      =  000000     |   6 PACKS      000D15 R   |   6 PAD        000C66 R
  6 PAREN      0010E7 R   |   6 PARS       000FE0 R   |   6 PARS1      00100B R
  6 PARS2      001036 R   |   6 PARS3      001039 R   |   6 PARS4      001042 R
  6 PARS5      001065 R   |   6 PARS6      00107A R   |   6 PARS7      001089 R
  6 PARS8      001098 R   |   6 PARSE      0010A9 R   |   6 PARSEXP_   002EF6 R
  6 PAUSE      0002E0 R   |     PA_BASE =  005000     |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_BASE =  005005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_BASE =  00500A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |   6 PDUM1      00194A R   |   6 PDUM2      00195B R
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |   6 PICK       000BC0 R
  6 PII        00224A R   |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   6 PLUS       0007DD R   |   6 PNAM1      0016D8 R
  6 POSMANT    002CD4 R   |   6 PRESE      00145A R   |     PROD1   =  000024 
    PROD2   =  000026     |     PROD3   =  000028     |   6 PROTECTE   000201 R
  6 PSTOR      000BD7 R   |     PTR16   =  000035     |     PTR8    =  000036 
  6 PTRPLUS    001CA9 R   |   6 QBRAN      0004A4 R   |   6 QDUP       00076B R
  6 QDUP1      000775 R   |   6 QKEY       000418 R   |   6 QSTAC      001412 R
  6 QUERY      00133E R   |   6 QUEST      000FD2 R   |   6 QUIT       001477 R
  6 QUIT1      00147F R   |   6 QUIT2      001482 R   |   6 RAM2EE     0020E4 R
    RAMBASE =  000000     |   6 RAMLAST    000740 R   |     RAM_BASE=  000000 
    RAM_END =  0017FF     |     RAM_SIZE=  001800     |   6 RANDOM     00027E R
  6 RAT        00056B R   |   6 RBRAC      0017A7 R   |   6 REPEA      00161C R
  6 RFREE      0020CB R   |   6 RFROM      000558 R   |     ROP     =  004800 
  6 ROT        00077C R   |   6 ROW2BUF    00208D R   |     ROWBUFF =  001680 
    RP0     =  00002E     |   6 RPAT       000535 R   |     RPP     =  0017FF 
  6 RPSTO      000542 R   |   6 RSCALE     003003 R   |   6 RSHIFT     000B35 R
  6 RSHIFT1    000B3E R   |   6 RSHIFT4    000B46 R   |     RST_SR  =  0050B3 
  6 RT12_2     0022BA R   |   6 SAME1      001195 R   |   6 SAME2      0011BE R
  6 SAMEQ      00118D R   |   6 SCAL1      003036 R   |   6 SCAL2      003062 R
  6 SCALETOM   003030 R   |   6 SCOM1      00170D R   |   6 SCOM2      001710 R
  6 SCOMP      0016EF R   |   6 SEED       000265 R   |     SEEDX   =  000038 
    SEEDY   =  00003A     |   6 SEMIS      001743 R   |   6 SETISP     0000D0 R
  6 SET_RAML   00188A R   |   6 SFN        002C41 R   |     SFR_BASE=  005000 
    SFR_END =  0057FF     |   6 SFV        002C79 R   |   6 SFZ        002C0A R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]

Symbol Table

  6 SIGN       000DC1 R   |   6 SIGN1      000DD1 R   |   6 SLASH      000A21 R
  6 SLMOD      000A05 R   |   6 SNAME      0016A2 R   |     SP0     =  00002C 
  6 SPACE      000EAE R   |   6 SPACS      000EBD R   |   6 SPAT       00058E R
    SPI_CR1 =  005200     |     SPI_CR2 =  005201     |     SPI_CRCP=  005205 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_TXCR=  005207     |     SPP     =  001680 
    SPSAVE  =  000001     |   6 SPSTO      00059B R   |   6 SQRT10     0022A3 R
  6 SQRT2      002261 R   |   6 SQRT3      002278 R   |   6 SSMOD      000AB1 R
    SSP     =  000001     |     STACK   =  0017FF     |   6 STAR       000A7A R
  6 STASL      000AC2 R   |   6 STEXP      002CE4 R   |   6 STEXP1     002CFA R
  6 STEXP2     002D36 R   |   6 STEXP3     002D49 R   |   6 STOD       00083F R
  6 STORE      0004F0 R   |   6 STR        000DEF R   |   6 STRCQ      001524 R
  6 STRQ       00165B R   |   6 STRQP      000F2B R   |   6 SUBB       000856 R
  6 SWAPP      0005BE R   |     SWIM_CSR=  007F80     |   6 TAP        0012A8 R
  6 TBOOT      001A99 R   |   6 TBRAN      0004BC R   |   6 TBUF       0006BC R
    TBUFFBAS=  001680     |   6 TCHAR      000B91 R   |   6 TEMP       00068D R
  6 TEVAL      0006DF R   |   6 TFLASH     0006CE R   |   6 THENN      0015B4 R
  6 TIB        000C77 R   |     TIBB    =  001700     |     TIBBASE =  001700 
    TIC     =  000027     |   6 TICK       00148E R   |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  000000     |     TIM2_CCE=  000001     |     TIM2_CCE=  000004 
    TIM2_CCE=  000005     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCM=  000000 
    TIM2_CCM=  000004     |     TIM2_CCM=  000003     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_CR1=  000007 
    TIM2_CR1=  000000     |     TIM2_CR1=  000003     |     TIM2_CR1=  000001 
    TIM2_CR1=  000002     |     TIM2_EGR=  005304     |     TIM2_EGR=  000001 
    TIM2_EGR=  000002     |     TIM2_EGR=  000003     |     TIM2_EGR=  000006 
    TIM2_EGR=  000000     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
    TIM4_SR =  005342     |     TIM4_SR_=  000000     |   6 TIMEOUTQ   000310 R
  6 TIMER      0002FA R   |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
  6 TNAM2      0019E0 R   |   6 TNAM3      0019FE R   |   6 TNAM4      001A04 R
  6 TNAME      0019DD R   |   6 TOFLASH    000335 R   |   6 TOKEN      001169 R
  6 TOR        000577 R   |   6 TORAM      000375 R   |     TRUEE   =  00FFFF 
  6 TWOSL      000B4D R   |   6 TYPE1      000EDD R   |   6 TYPE2      000EE9 R
  6 TYPES      000ED8 R   |   6 Timer4Ha   000005 R   |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
    UART3   =  000001     |     UART3_BA=  005240     |     UART3_BR=  005242 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]

Symbol Table

    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  005232 
    UART_BRR=  005233     |     UART_CR1=  005234     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  005235     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  005231     |     UART_GTR=  000009     |     UART_PSC=  00000A 
    UART_SR =  005230     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBASE   =  000006     |     UBC     =  004801     |     UCNTXT  =  000016 
    UCP     =  00001A     |     UCTIB   =  00000E     |     UD1     =  000001 
    UD2     =  000002     |     UD3     =  000003     |     UD4     =  000004 
  6 UDIV10     003063 R   |   6 UDOT       000F7E R   |   6 UDOTR      000F5E R
  6 UEND       000047 R   |     UFPSW   =  000008     |   6 UGREAT     0008DA R
  6 UGREAT1    0008F1 R   |     UHLD    =  000014     |     UINN    =  00000C 
    UINTER  =  000012     |     ULAST   =  00001C     |   6 ULES1      0008B3 R
  6 ULESS      00089D R   |   6 UMMOD      000971 R   |   6 UMSTA      000A30 R
  6 UNIQ1      001699 R   |   6 UNIQU      00167A R   |   6 UNLKEE     001C17 R
  6 UNLKFL     001C36 R   |   6 UNLOCK     001C55 R   |   6 UNTIL      00157C R
    UOFFSET =  00001E     |   6 UPDATCP    001BD4 R   |   6 UPDATLAS   001BAB R
  6 UPDATPTR   0021D7 R   |   6 UPDATRUN   001BC3 R   |   6 UPDATVP    001BEB R
  6 UPL1       000662 R   |   6 UPLUS      00064B R   |     UPP     =  000006 
  6 UPPER      00112C R   |   6 UPPER1     00114F R   |   6 UPPER2     001158 R
    URLAST  =  000022     |     USR_BTN_=  000004     |     USR_BTN_=  000010 
    USR_BTN_=  005015     |     UTFLASH =  000020     |     UTIB    =  000010 
    UTMP    =  00000A     |   6 UTYP1      00191A R   |   6 UTYP2      001929 R
  6 UTYPE      001915 R   |     UVP     =  000018     |   6 UZERO      00002B R
  6 VARIA      001857 R   |     VAR_BASE=  000080     |     VAR_TOP =  0017BF 
    VER     =  000003     |   6 VPP        00070F R   |     VSIZE   =  000006 
    WANT_CON=  000001     |     WANT_DEB=  000000     |     WANT_DOU=  000001 
    WANT_FLO=  000001     |     WANT_SCA=  000001     |     WANT_SEE=  000000 
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |   6 WHILE      001602 R
  6 WITHI      000956 R   |   6 WORDD      001112 R   |   6 WORDS      001A3A R
  6 WORS1      001A40 R   |   6 WORS2      001A5C R   |   6 WR_BYTE    001D00 R
  6 WR_WORD    001D25 R   |   6 WTABLE     00232F R   |   6 WTAT       002353 R
  6 WTINIT     002398 R   |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
    XMEM_SIZ=  017830     |     XOFF    =  000013     |     XON     =  000011 
  6 XORR       000636 R   |     XTEMP   =  000024     |     YTEMP   =  000026 
  6 ZEQ1       002545 R   |   6 ZEQU1      000603 R   |   6 ZEQUAL     0005F9 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]

Symbol Table

  6 ZERO       000B67 R   |   6 ZL1        0005F0 R   |   6 ZLESS      0005E7 R
  6 app_spac   003380 R   |   6 baudrate   00037B R   |   6 block_er   001DEB R
  6 clear_ra   000019 R   |   6 clock_in   000064 R   |   6 copy_buf   001E4B R
  6 copy_buf   001E6A R   |   6 copy_pro   001E6A R   |     da      =  000002 
    db      =  000003     |     dc      =  000000     |     dd      =  000001 
  6 do2lit     0028C6 R   |   6 erase_fl   001E0D R   |   6 fmove_do   0021C0 R
  6 main       000016 R   |   6 next_row   00217D R   |   6 no_move    0021C7 R
  6 nsign      0023E3 R   |   6 nsign1     002414 R   |   6 parse_di   00241B R
  6 parse_ex   002EAB R   |   6 pristine   001EEB R   |   6 proceed_   001E10 R
  6 reboot     000327 R   |   6 reset_ve   001F52 R   |   6 row_eras   001DCB R
  6 row_eras   001E24 R   |   6 row_eras   001E4B R   |   6 set_opti   001EBF R
  6 set_vect   001FF3 R   |   6 uart_ini   000076 R   |   6 write_ro   001E8F R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   3380   flags    0

