ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                                .include "inc/macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        
                                            ; macro to create dictionary header record
                                            .macro _HEADER label,len,name 
                                        
                                            ; runtime literal 
                                            .macro _DOLIT value 
                                        
                                            ; branch if TOS==0 
                                            ; 0BRANCH 
                                            .macro _QBRAN target 
                                        
                                            ; uncondittionnal BRANCH 
                                            .macro _BRAN target 
                                        
                                            ; run time NEXT 
                                            .macro _DONXT target 
                                                .include "inc/config.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019,2020 
                                        ; This file is part of stm8_eForth  
                                        ;
                                        ;     stm8_eForth is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     stm8_eForth is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        
                                        ; constants to select board
                                        ; to assemble for a specific 
                                        ; board or MCU set it to 1 and the other
                                        ; to 0. 
                                 
                                 
                                 
                                        
                                        ; select end of line character
                                 
                                 
                                        
                                        ; set to 1 to include 
                                        ; scaling constants vocabulary
                                        ; see: const_ratio.asm 
                                 
                                        
                                        ; set to 1 to include 
                                        ; constants tables vocabulary 
                                        ; see: ctable.asm 
                                 
                                        
                                        ; include double library 
                                 
                                        
                                        ; to include floating point 
                                        ; library
                                        ; require double library  
                                 
                                        
                                        ; set to 1 to make vocabulary 
                                        ; case sensitive 
                                 
                                        
                                        ; how many bytes are reserved 
                                        ; by system at EEPROM base.
                                 
                                        
                                 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        .endif
                                        
                                 
                                        	.include "inc/stm8s105.inc"
                                        .if DISCOVERY
                                        	.include "inc/stm8s_disco.inc"
                                        .endif 
                                        XMEM_SIZE=0 ; size in bytes of EXTENDED MEMORY 
                                        UART_SR=UART2_SR
                                        UART_DR=UART2_DR
                                        UART_BRR1=UART2_BRR1
                                        UART_BRR2=UART2_BRR2
                                        UART_CR1=UART2_CR1
                                        UART_CR2=UART2_CR2
                                        .endif 
                                        
                                        	
                                         
                                        
                                        
                                        
                                     13 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     15 
                                     16 ;===============================================================
                                     17 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     18 ;  Date: 2020-06-07 
                                     19 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     20 ;  Date: 2019-10-26
                                     21 ;  Changes to memory map:
                                     22 ;       0x16f0  Data Stack, growing downward
                                     23 ;       0x1700  Terminal input buffer TIB
                                     24 ;       0x17ff  Return Stack, growing downard
                                     25 ;================================================================
                                     26 ;       STM8EF, Version 2.1, 13 July
                                     27 ;               Implemented on STM8S-Discovery Board.
                                     28 ;               Assembled by ST VisualDevelop STVD 
                                     29 ;               Bootup on internal 2 MHz clock
                                     30 ;               Switch to external 16 MHz crystal clock
                                     31 ;
                                     32 ; FORTH Virtual Machine:
                                     33 ; Subroutine threaded model
                                     34 ; SP Return stack pointer
                                     35 ; X Data stack pointer
                                     36 ; A,Y Scratch pad registers
                                     37 ;
                                     38 ; Memory Map:
                                     39 ; 0x0 RAM memory, system variables
                                     40 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     41 ; 0x780 Data stack, growing downward
                                     42 ; 0x790 Terminal input buffer TIB
                                     43 ; 0x7FF Return stack, growing downward
                                     44 ; 0x8000 Interrupt vector table
                                     45 ; 0x8080 FORTH startup code
                                     46 ; 0x80E7 Start of FORTH dictionary in ROM
                                     47 ; 0x9584 End of FORTH dictionary
                                     48 ;
                                     49 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     50 ;                  use UART1 instead of UART2 for communication with user.
                                     51 ;                  UART1 is available as ttyACM* device via USB connection.
                                     52 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     53 ;                  and MSEC word that return MS value.
                                     54 ;
                                     55 ;       EF12, Version 2.1, 18apr00cht
                                     56 ;               move to 8000H replacing WHYP.
                                     57 ;               copy interrupt vectors from WHYPFLSH.S19
                                     58 ;               to EF12.S19 before flashing
                                     59 ;               add TICKS1 and DELAY1 for motor stepping
                                     60 ;
                                     61 ;       EF12, 02/18/00, C. H. Ting
                                     62 ;       Adapt 86eForth v2.02 to 68HC12.
                                     63 ;               Use WHYP to seed EF12.ASM
                                     64 ;               Use AS12 native 68HC12 assembler:
                                     65 ;               as12 ef12.asm >ef12.lst
                                     66 ;       EF12A, add ADC code, 02mar00cht
                                     67 ;       EF12B, 01mar00cht
                                     68 ;               stack to 0x78, return stack to 0xf8.
                                     69 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     70 ;               add PWM registers
                                     71 ;               add SPI registers and code
                                     72 ;       EF12C, 12mar00cht
                                     73 ;               add MAX5250 D/A converter
                                     74 ;       EF12D, 15mar00cht
                                     75 ;               add all the Lexel interface words
                                     76 ;       EF12E, 18apr00cht, save for reference
                                     77 ;
                                     78 ;       Copyright (c) 2000
                                     79 ;       Dr. C. H. Ting
                                     80 ;       156 14th Avenue
                                     81 ;       San Mateo, CA 94402
                                     82 ;       (650) 571-7639
                                     83 ;
                                     84 
                                     85       
                                     86 ;*********************************************************
                                     87 ;	Assembler constants
                                     88 ;*********************************************************
                           000000    89 RAMBASE =	0x0000	   ;ram base
                           000001    90 .if NUCLEO 
                           0017FF    91 STACK   =	0x17FF 	;system (return) stack empty 
                           001680    92 DATSTK  =	0x1680	;data stack  empty
                           001680    93 TBUFFBASE =     0x1680  ; flash read/write transaction buffer address  
                           001700    94 TIBBASE =       0X1700  ; transaction input buffer addr.
                           000000    95 .else ; DISCOVERY
                                     96 STACK   =	0x7FF 	;system (return) stack empty 
                                     97 DATSTK  =	0x680	;data stack  empty
                                     98 TBUFFBASE =     0x680  ; flash read/write transaction buffer address  
                                     99 TIBBASE =       0X700  ; transaction input buffer addr.
                                    100 .endif
                                    101 
                                    102 ;; Memory allocation
                           000006   103 UPP     =     RAMBASE+6          ; systeme variables base address 
                           001680   104 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0017FF   105 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           001680   106 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           001700   107 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   108 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0017BF   109 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    110 
                                    111 ; user variables constants 
                           000006   112 UBASE = UPP       ; numeric base 
                           000008   113 UFBASE = UBASE+2  ; floating point base 
                           00000A   114 UFPSW = UFBASE+2  ; floating point state word 
                           00000C   115 UTMP = UFPSW+2    ; temporary storage
                           00000E   116 UINN = UTMP+2     ; >IN tib pointer 
                           000010   117 UCTIB = UINN+2    ; tib count 
                           000012   118 UTIB = UCTIB+2    ; tib address 
                           000014   119 UINTER = UTIB+2   ; interpreter vector 
                           000016   120 UHLD = UINTER+2   ; hold 
                           000018   121 UCNTXT = UHLD+2   ; context, dictionary first link 
                           00001A   122 UVP = UCNTXT+2    ; variable pointer 
                           00001C   123 UCP = UVP+2      ; code pointer
                           00001E   124 ULAST = UCP+2    ; last dictionary pointer 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000020   125 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
                           000022   126 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
                           000024   127 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    128 
                                    129 ;******  System Variables  ******
                           000026   130 XTEMP	=	URLAST +2;address called by CREATE
                           000028   131 YTEMP	=	XTEMP+2	;address called by CREATE
                           000026   132 PROD1 = XTEMP	;space for UM*
                           000028   133 PROD2 = PROD1+2
                           00002A   134 PROD3 = PROD2+2
                           00002C   135 CARRY = PROD3+2
                           00002E   136 SP0	= CARRY+2	;initial data stack pointer
                           000030   137 RP0	= SP0+2		;initial return stack pointer
                           000032   138 MS    =   RP0+2         ; millisecond counter 
                           000034   139 CNTDWN =  MS+2          ; count down timer 
                           000036   140 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000037   141 PTR16 = FPTR+1          ; middle byte of farptr 
                           000038   142 PTR8 = FPTR+2           ; least byte of farptr 
                           00003A   143 SEEDX = PTR8+2          ; PRNG seed X 
                           00003C   144 SEEDY = SEEDX+2         ; PRNG seed Y 
                                    145 
                                    146 ; EEPROM persistant data  
                           004000   147 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   148 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   149 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   150 APP_VP = APP_CP+2  ; free data space pointer 
                                    151 
                                    152 
                                    153 ;***********************************************
                                    154 ;; Version control
                                    155 
                           000003   156 VER     =     3         ;major release version
                           000000   157 EXT     =     0         ;minor extension
                                    158 
                                    159 ;; Constants
                                    160 
                           00FFFF   161 TRUEE   =     0xFFFF      ;true flag
                                    162 
                           000040   163 COMPO   =     0x40     ;lexicon compile only bit
                           000080   164 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   165 MASKK   =     0x1F7F  ;lexicon bit mask
                                    166 
                           000002   167 CELLL   =     2       ;size of a cell
                           00000A   168 BASEE   =     10      ;default radix
                           000008   169 BKSPP   =     8       ;back space
                           00000A   170 LF      =     10      ;line feed
                           00000D   171 CRR     =     13      ;carriage return
                           000011   172 XON     =     17
                           000013   173 XOFF    =     19
                           00001B   174 ERR     =     27      ;error escape
                           000027   175 TIC     =     39      ;tick
                           0000CD   176 CALLL   =     0xCD     ;CALL opcodes
                           000080   177 IRET_CODE =   0x80    ; IRET opcode 
                                    178 
                                    179         .macro _ledon
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    180         .if NUCLEO
                                    181         bset PC_ODR,#LED2_BIT
                                    182         .else ;DISCOVERY 
                                    183         .if DISCOVERY
                                    184         bres PD_ODR,#LD1_BIT 
                                    185         .endif
                                    186         .endif
                                    187         .endm
                                    188 
                                    189         .macro _ledoff
                                    190         .if NUCLEO 
                                    191         bres PC_ODR,#LED2_BIT
                                    192         .else ;DISCOVERY 
                                    193         .if DISCOVERY
                                    194         bset PD_ODR,#LD1_BIT 
                                    195         .endif 
                                    196         .endif
                                    197         .endm
                                    198 
                                    199 ;**********************************************************
                                    200         .area DATA (ABS)
      000000                        201         .org RAMBASE 
                                    202 ;**********************************************************
                                    203 
                                    204 ;**********************************************************
                                    205         .area SSEG (ABS) ; STACK
      001700                        206         .org 0x1700
      001700                        207         .ds 256 
                                    208 ; space for DATSTK,TIB and STACK         
                                    209 ;**********************************************************
                                    210 
                                    211 ;**********************************************************
                                    212         .area HOME ; vectors table
                                    213 ;**********************************************************
      000000 82 00 00 16            214 	int main	        ; reset
      000004 82 00 00 00            215 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            216 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            217 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            218 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            219 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            220 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            221 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            222 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            223 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            224 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            225 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            226 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            227 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            228 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            229 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            230 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            231 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            232 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            233 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            234 	int NonHandledInterrupt	; irq18
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      000054 82 00 00 00            235 	int NonHandledInterrupt	; irq19
      000058 82 00 00 00            236 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            237 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            238 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            239 	int Timer4Handler	; irq23
      000068 82 00 00 00            240 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            241 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            242 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            243 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            244 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            245 	int NonHandledInterrupt	; irq29
                                    246 
                                    247 ;**********************************************************
                                    248         .area CODE
                                    249 ;**********************************************************
                                    250 
                                    251 ; non handled interrupt reset MCU
      000000                        252 NonHandledInterrupt:
      000000 A6 80            [ 1]  253         ld a, #0x80
      000002 C7 50 D1         [ 1]  254         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    255 	;iret
                                    256 
                                    257 ; used for milliseconds counter 
                                    258 ; MS is 16 bits counter 
      000005                        259 Timer4Handler:
      000005 72 5F 53 42      [ 1]  260 	clr TIM4_SR 
      000009 BE 32            [ 2]  261         ldw x,MS 
      00000B 5C               [ 1]  262         incw x 
      00000C BF 32            [ 2]  263         ldw MS,x
      00000E BE 34            [ 2]  264         ldw x,CNTDWN 
      000010 27 03            [ 1]  265         jreq 1$
      000012 5A               [ 2]  266         decw x 
      000013 BF 34            [ 2]  267         ldw CNTDWN,x 
      000015                        268 1$:         
      000015 80               [11]  269         iret 
                                    270 
                                    271 
                                    272 ;; Main entry points and COLD start data
      000016                        273 main:
                                    274 ; clear all RAM
      000016 AE 00 00         [ 2]  275 	ldw X,#RAMBASE
      000019                        276 clear_ram0:
      000019 7F               [ 1]  277 	clr (X)
      00001A 5C               [ 1]  278 	incw X
      00001B A3 17 FF         [ 2]  279 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  280 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  281         ldw x,#RPP
      000023 94               [ 1]  282         ldw sp,x
                                    283 ; set SEEDX and SEEDY to 1 
      000024 3C 3B            [ 1]  284         inc SEEDX+1 
      000026 3C 3D            [ 1]  285         inc SEEDY+1          
      000028 CC 00 4B         [ 2]  286 	jp ORIG
                                    287 
                                    288 ; COLD initialize these variables.
      00002B                        289 UZERO:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      00002B 00 0A                  290         .word      BASEE   ;BASE
      00002D 00 0A                  291         .word      10      ; floating point base 
      00002F 00 00                  292         .word      0       ; floating point state 
      000031 00 00                  293         .word      0       ;tmp
      000033 00 00                  294         .word      0       ;>IN
      000035 00 00                  295         .word      0       ;#TIB
      000037 17 00                  296         .word      TIBB    ;TIB
      000039 13 6E                  297         .word      INTER   ;'EVAL
      00003B 00 00                  298         .word      0       ;HLD
      00003D 2E 6D                  299         .word      LASTN  ;CNTXT pointer
      00003F 00 80                  300         .word      VAR_BASE   ;variables free space pointer 
      000041 2F 80                  301         .word      app_space ; FLASH free space pointer 
      000043 2E 6D                  302         .word      LASTN   ;LAST
      000045 00 00                  303         .word      0        ; OFFSET 
      000047 00 00                  304         .word      0       ; TFLASH
                                    305 ;       .word      0       ; URLAST   
      000049 00 00                  306 UEND:   .word      0
                                    307 
      00004B                        308 ORIG:   
                                    309 ; initialize SP
      00004B AE 17 FF         [ 2]  310         LDW     X,#STACK  ;initialize return stack
      00004E 94               [ 1]  311         LDW     SP,X
      00004F BF 30            [ 2]  312         LDW     RP0,X
      000051 AE 16 80         [ 2]  313         LDW     X,#DATSTK ;initialize data stack
      000054 BF 2E            [ 2]  314         LDW     SP0,X
                           000001   315 .if NUCLEO        
                                    316 ; initialize PC_5 as output to control LED2
                                    317 ; added by Picatout 
      000056 72 1A 50 0D      [ 1]  318         bset PC_CR1,#LED2_BIT
      00005A 72 1A 50 0E      [ 1]  319         bset PC_CR2,#LED2_BIT
      00005E 72 1A 50 0C      [ 1]  320         bset PC_DDR,#LED2_BIT
                                    321 .endif 
                           000000   322 .if DISCOVERY
                                    323         bset PD_CR1,#LD1_BIT
                                    324         bset PD_CR2,#LD1_BIT
                                    325         bset PD_DDR,#LD1_BIT 
                                    326 .endif
      000062                        327         _ledoff
                           000001     1         .if NUCLEO 
      000062 72 1B 50 0A      [ 1]    2         bres PC_ODR,#LED2_BIT
                           000000     3         .else ;DISCOVERY 
                                      4         .if DISCOVERY
                                      5         bset PD_ODR,#LD1_BIT 
                                      6         .endif 
                                      7         .endif
                                    328 ; initialize clock to HSI
                                    329 ; no divisor 16Mhz 
                                    330 ; Added by Picatout 
      000066                        331 clock_init:
      000066 72 5F 50 C6      [ 1]  332         clr CLK_CKDIVR
      00006A 72 12 50 C5      [ 1]  333 	bset CLK_SWCR,#CLK_SWCR_SWEN
                           000001   334 .if NUCLEO|DOORBELL
      00006E A6 E1            [ 1]  335 	ld a,#CLK_SWR_HSI
                           000000   336 .else ; DISCOVERY as 16Mhz crystal
                                    337 	ld a,#CLK_SWR_HSE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                                    338 .endif 
      000070 C7 50 C4         [ 1]  339 	ld CLK_SWR,a
      000073 C1 50 C3         [ 1]  340 1$:	cp a,CLK_CMSR
      000076 26 FB            [ 1]  341 	jrne 1$
                                    342         
                                    343 ; initialize UART, 115200 8N1
      000078                        344 uart_init:
                           000001   345 .if NUCLEO 
      000078 72 14 50 C7      [ 1]  346 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    347 	; configure tx pin
      00007C 72 1A 50 02      [ 1]  348 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      000080 72 1A 50 03      [ 1]  349 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      000084 72 1A 50 04      [ 1]  350 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    351 	; baud rate 115200 Fmaster=16Mhz  16000000/115200=139=0x8b
                           000000   352 .else ; DISCOVERY use UART2 
                                    353 	bset CLK_PCKENR1,#CLK_PCKENR1_UART2
                                    354 	; configure tx pin
                                    355 	bset PD_DDR,#UART2_TX_PIN ; tx pin
                                    356 	bset PD_CR1,#UART2_TX_PIN ; push-pull output
                                    357 	bset PD_CR2,#UART2_TX_PIN ; fast output
                                    358 .endif
                                    359 ; baud rate 115200 Fmaster=8Mhz  
      000088 35 0B 52 33      [ 1]  360 	mov UART_BRR2,#0x0b ; must be loaded first
      00008C 35 08 52 32      [ 1]  361 	mov UART_BRR1,#0x8
      000090 35 0C 52 35      [ 1]  362 	mov UART_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    363 ; initialize timer4, used for millisecond interrupt  
      000094 35 07 53 45      [ 1]  364 	mov TIM4_PSCR,#7 ; prescale 128  
      000098 35 7D 53 46      [ 1]  365 	mov TIM4_ARR,#125 ; set for 1msec.
      00009C 35 05 53 40      [ 1]  366 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000A0 72 10 53 41      [ 1]  367 	bset TIM4_IER,#TIM4_IER_UIE 
                                    368 ; set TIM4 interrupt priority to highest
      0000A4 A6 3F            [ 1]  369         ld a,#~(IPR_MASK<<6)
      0000A6 C4 7F 75         [ 1]  370         and a,ITC_SPR6
      0000A9 AA C0            [ 1]  371         or a,#(IPR3<<6)
      0000AB C7 7F 75         [ 1]  372         ld ITC_SPR6,a 
      0000AE 9A               [ 1]  373         rim
      0000AF CC 1A 5F         [ 2]  374         jp  COLD   ;default=MN1
                                    375 
                                    376 
                                    377 ;; place MCU in sleep mode with
                                    378 ;; halt opcode 
                                    379 ;; BYE ( -- )
      0000B2 00 00                  380         .word 0
                           0000B4   381         LINK=.
      0000B4 03                     382         .byte 3 
      0000B5 42 59 45               383         .ascii "BYE"
      0000B8                        384 BYE: 
      0000B8 8E               [10]  385         halt 
      0000B9 81               [ 4]  386         ret 
                                    387 
                                    388 ; Enable interrupts 
                                    389 ; EI ( -- )
      0000BA 00 B4                  390         .word LINK 
                           0000BC   391         LINK=.
      0000BC 02                     392         .byte 2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      0000BD 45 49                  393         .ascii "EI"
      0000BF                        394 EI:
      0000BF 9A               [ 1]  395         rim 
      0000C0 81               [ 4]  396         ret 
                                    397 
                                    398 ; Disable interrupts
                                    399 ; DI ( -- )
      0000C1 00 BC                  400         .word LINK 
                           0000C3   401         LINK=.
      0000C3 02                     402         .byte 2 
      0000C4 44 49                  403         .ascii "DI"
      0000C6                        404 DI:
      0000C6 9B               [ 1]  405         sim 
      0000C7 81               [ 4]  406         ret 
                                    407 
                                    408 ; set interrupt priority level 
                                    409 ; SET-ISP ( n1 n2 -- )
                                    410 ; n1 level {1..3}
                                    411 ; n2 vector {0..29}
      0000C8 00 C3                  412         .word LINK 
                           0000CA   413         LINK=.
      0000CA 07                     414         .byte 7 
      0000CB 53 45 54 2D 49 53 50   415         .ascii "SET-ISP"
      0000D2                        416 SETISP:
      0000D2 90 93            [ 1]  417         ldw y,x 
      0000D4 90 FE            [ 2]  418         ldw y,(y)
      0000D6 A6 04            [ 1]  419         ld a,#4 ; 4 slot per register 
                                    420 ;  quotient select register, remainder select slot in register.        
      0000D8 90 62            [ 2]  421         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000DA A4 03            [ 1]  422         and a,#3 
      0000DC 48               [ 1]  423         sll a ; 2*SLOT  lshift 
      0000DD 72 A9 7F 70      [ 2]  424         addw y,#ITC_SPR1 
      0000E1 FF               [ 2]  425         ldw (x),y  ; ( level reg -- )
      0000E2 90 5F            [ 1]  426         clrw y 
      0000E4 90 97            [ 1]  427         ld yl,a 
      0000E6 1D 00 02         [ 2]  428         subw x,#CELLL 
      0000E9 FF               [ 2]  429         ldw (x),y  ; ( level reg lshift -- )
      0000EA 90 93            [ 1]  430         ldw y,x 
      0000EC 90 EE 02         [ 2]  431         ldw y,(2,y) 
      0000EF 90 F6            [ 1]  432         ld a,(y)   ; reg_value
      0000F1 1D 00 02         [ 2]  433         subw x,#CELLL 
      0000F4 FF               [ 2]  434         ldw (x),y ; ( level reg lshift rval -- )
      0000F5 CD 05 C2         [ 4]  435         call OVER ; ( level reg lshift rval lshift -- )
      0000F8 CD 04 73         [ 4]  436         call DOLIT 
      0000FB 00 03                  437         .word 3
      0000FD CD 05 A8         [ 4]  438         call SWAPP  ; ( level reg lshift rval 3 lshift )
      000100 CD 0A E3         [ 4]  439         call LSHIFT ; creat slot mask 
      000103 CD 07 E1         [ 4]  440         call INVER  ; ( level reg lshift rval mask )
      000106 CD 05 F7         [ 4]  441         call ANDD ; ( level reg lshift slot_masked )
      000109 CD 05 61         [ 4]  442         call TOR  ; ( level reg lshift -- R: slot_masked )
      00010C CD 07 66         [ 4]  443         call ROT  ; ( reg lshift level )
      00010F CD 05 A8         [ 4]  444         call SWAPP ; ( reg level lshift )
      000112 CD 0A E3         [ 4]  445         call LSHIFT  ; ( reg slot_level -- )
      000115 CD 05 42         [ 4]  446         call RFROM ; ( reg slot_level masked_val )
      000118 CD 06 0B         [ 4]  447         call ORR   ; ( reg updated_rval )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      00011B CD 05 A8         [ 4]  448         call SWAPP 
      00011E CD 04 FE         [ 4]  449         call CSTOR
                                    450 
                                    451 ; sélectionne l'application 
                                    452 ; qui démarre automatique lors 
                                    453 ; d'un COLD start 
      000121 00 CA                  454         .word LINK 
                           000123   455         LINK=.
      000123 07                     456         .byte 7
      000124 41 55 54 4F 52 55 4E   457         .ascii "AUTORUN"
      00012B                        458 AUTORUN:
      00012B CD 11 33         [ 4]  459         call TOKEN 
      00012E CD 05 98         [ 4]  460         call DUPP 
      000131 CD 04 A6         [ 4]  461         call QBRAN 
      000134 02 11                  462         .word FORGET2
      000136 CD 12 30         [ 4]  463         call NAMEQ
      000139 CD 07 55         [ 4]  464         call QDUP 
      00013C CD 04 A6         [ 4]  465         call QBRAN 
      00013F 02 11                  466         .word FORGET2
      000141 CD 05 8E         [ 4]  467         call DROP 
      000144 1D 00 04         [ 2]  468         subw x,#2*CELLL 
      000147 90 5F            [ 1]  469         clrw y 
      000149 FF               [ 2]  470         ldw (x),y 
      00014A 90 AE 40 02      [ 2]  471         ldw y,#APP_RUN 
      00014E EF 02            [ 2]  472         ldw (2,x),y 
      000150 CC 1D 5B         [ 2]  473         jp EESTORE 
                                    474 
                                    475 ;; Reset dictionary pointer before 
                                    476 ;; forgotten word. RAM space and 
                                    477 ;; interrupt vector defined after 
                                    478 ;; must be resetted also.
      000153 01 23                  479         .word LINK 
                           000155   480         LINK=.
      000155 06                     481         .byte 6
      000156 46 4F 52 47 45 54      482         .ascii "FORGET" 
      00015C                        483 FORGET: 
      00015C CD 11 33         [ 4]  484         call TOKEN
      00015F CD 05 98         [ 4]  485         call DUPP 
      000162 CD 04 A6         [ 4]  486         call QBRAN 
      000165 02 11                  487         .word FORGET2
      000167 CD 12 30         [ 4]  488         call NAMEQ ; ( a -- ca na | a F )
      00016A CD 07 55         [ 4]  489         call QDUP 
      00016D CD 04 A6         [ 4]  490         call QBRAN 
      000170 02 11                  491         .word FORGET2
                                    492 ; only forget users words 
      000172 CD 05 98         [ 4]  493         call DUPP ; ( ca na na )
      000175 CD 04 73         [ 4]  494         call DOLIT 
      000178 2F 80                  495         .word app_space 
      00017A CD 05 A8         [ 4]  496         call SWAPP 
      00017D CD 08 87         [ 4]  497         call  ULESS 
      000180 CD 04 A6         [ 4]  498         call QBRAN 
      000183 01 D3                  499         .word FORGET6 
                                    500 ; ( ca na -- )        
                                    501 ;reset ivec with address >= ca
      000185 CD 05 A8         [ 4]  502         call SWAPP ; ( na ca -- ) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      000188 CD 1F 5E         [ 4]  503         call CHKIVEC ; ( na -- ) 
                                    504 ; start at LAST and link back to na 
                                    505 ; if variable found reset VP at that point.
      00018B                        506 FORGET1:
      00018B CD 07 17         [ 4]  507         call LAST 
      00018E CD 04 F1         [ 4]  508         call AT 
      000191 CD 05 98         [ 4]  509         call DUPP  ; ( -- na last last )
      000194 CD 02 27         [ 4]  510         call FREEVAR ; ( -- na last )
      000197 CD 05 98         [ 4]  511         call DUPP 
      00019A CD 04 73         [ 4]  512         call DOLIT 
      00019D 00 02                  513         .word 2 
      00019F CD 08 40         [ 4]  514         call SUBB ; ( na last -- na last lfa ) link address 
      0001A2 CD 04 F1         [ 4]  515         call AT 
      0001A5 CD 05 98         [ 4]  516         call DUPP ; ( -- na last a a )
      0001A8 CD 06 EB         [ 4]  517         call CNTXT 
      0001AB CD 04 DA         [ 4]  518         call STORE
      0001AE CD 07 17         [ 4]  519         call LAST  
      0001B1 CD 04 DA         [ 4]  520         call STORE ; ( --  na last )
      0001B4 CD 05 C2         [ 4]  521         call OVER 
      0001B7 CD 08 68         [ 4]  522         call EQUAL ; ( na last na -- na T|F ) 
      0001BA CD 04 A6         [ 4]  523         call QBRAN 
      0001BD 01 8B                  524         .word FORGET1 
                                    525 ; ( na -- )
      0001BF CD 04 73         [ 4]  526         call DOLIT 
      0001C2 00 02                  527         .word 2 
      0001C4 CD 08 40         [ 4]  528         call SUBB 
      0001C7 CD 07 07         [ 4]  529         call CPP 
      0001CA CD 04 DA         [ 4]  530         call STORE  
      0001CD CD 1B 8E         [ 4]  531         call UPDATCP 
      0001D0 CC 1B 65         [ 2]  532         jp UPDATLAST 
      0001D3                        533 FORGET6: ; tried to forget a RAM or system word 
                                    534 ; ( ca na -- )
      0001D3 1D 00 02         [ 2]  535         subw x,#CELLL 
      0001D6 90 BE 2E         [ 2]  536         ldw y,SP0 
      0001D9 FF               [ 2]  537         ldw (x),y  
      0001DA CD 08 87         [ 4]  538         call ULESS
      0001DD CD 04 A6         [ 4]  539         call QBRAN 
      0001E0 02 03                  540         .word PROTECTED 
      0001E2 CD 13 3C         [ 4]  541         call ABORQ 
      0001E5 1D                     542         .byte 29
      0001E6 20 46 6F 72 20 52 41   543         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      000203                        544 PROTECTED:
      000203 CD 13 3C         [ 4]  545         call ABORQ
      000206 0A                     546         .byte 10
      000207 20 50 72 6F 74 65 63   547         .ascii " Protected"
             74 65 64
      000211                        548 FORGET2: ; no name or not found in dictionary 
      000211 CD 13 3C         [ 4]  549         call ABORQ
      000214 05                     550         .byte 5
      000215 20 77 68 61 74         551         .ascii " what"
      00021A                        552 FORGET4:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      00021A CC 05 8E         [ 2]  553         jp DROP 
                                    554 
                                    555 
                                    556 ;---------------------------------
                                    557 ; if na is variable 
                                    558 ; free variable data  
                                    559 ; FREEVAR ( na -- )
                                    560 ;---------------------------------
      00021D 01 55                  561         .word LINK 
                           00021F   562         LINK=.
      00021F 07                     563         .byte 7 
      000220 46 52 45 45 56 41 52   564         .ascii "FREEVAR"
      000227                        565 FREEVAR:
      000227 CD 05 98         [ 4]  566         call DUPP ; ( na na -- )
      00022A CD 05 0F         [ 4]  567         CALL CAT  ; ( na c -- )
      00022D CD 0A C5         [ 4]  568         call ONEP ;
      000230 CD 07 C7         [ 4]  569         CALL PLUS ; ( na c+1 -- ca ) 
      000233 CD 0A C5         [ 4]  570         call ONEP ; ( ca+ -- ) to get routne address 
      000236 CD 05 98         [ 4]  571         call DUPP ; ( ca+ ca+ -- )
      000239 CD 04 F1         [ 4]  572         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      00023C CD 04 73         [ 4]  573         call DOLIT 
      00023F 06 58                  574         .word DOVAR ; if routine address is DOVAR then variable 
      000241 CD 08 68         [ 4]  575         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      000244 CD 04 A6         [ 4]  576         call QBRAN 
      000247 02 5D                  577         .word FREEVAR4 
      000249 CD 04 73         [ 4]  578         call DOLIT 
      00024C 00 02                  579         .word 2 
      00024E CD 07 C7         [ 4]  580         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      000251 CD 04 F1         [ 4]  581         call AT 
      000254 CD 06 F9         [ 4]  582         call VPP   
      000257 CD 04 DA         [ 4]  583         call STORE 
      00025A CC 1B A5         [ 2]  584         jp UPDATVP 
      00025D                        585 FREEVAR4: ; not variable
      00025D CC 05 8E         [ 2]  586         jp  DROP 
                                    587 
                                    588 ;    SEED ( n -- )
                                    589 ; Initialize PRNG seed with n 
      000260 02 1F                  590         .word LINK 
                           000262   591         LINK=. 
      000262 04                     592         .byte 4 
      000263 53 45 45 44            593         .ascii "SEED" 
      000267                        594 SEED:
      000267 90 93            [ 1]  595         ldw y,x 
      000269 1C 00 02         [ 2]  596         addw x,#CELLL
      00026C 90 FE            [ 2]  597         ldw y,(y)
      00026E 90 9E            [ 1]  598         ld a,yh 
      000270 B7 3A            [ 1]  599         ld SEEDX,a 
      000272 90 9F            [ 1]  600         ld a,yl 
      000274 B7 3C            [ 1]  601         ld SEEDY,a 
      000276 81               [ 4]  602         ret 
                                    603 
                                    604 ;    RANDOM ( u1 -- u2 )
                                    605 ; Pseudo random number betwen 0 and u1-1
      000277 02 62                  606         .word LINK 
                           000279   607         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      000279 06                     608         .byte 6
      00027A 52 41 4E 44 4F 4D      609         .ascii "RANDOM" 
      000280                        610 RANDOM:
                                    611 ;local variable 
                           000001   612         SPSAVE=1
                           000002   613         VSIZE=2 
      000280 52 02            [ 2]  614         sub sp,#VSIZE
      000282 1F 01            [ 2]  615         ldw (SPSAVE,sp),x  
                                    616 ; XTEMP=(SEEDX<<5)^SEEDX 
      000284 90 93            [ 1]  617         ldw y,x 
      000286 90 FE            [ 2]  618         ldw y,(y)
      000288 90 BF 28         [ 2]  619         ldw YTEMP,y 
      00028B BE 3A            [ 2]  620 	ldw x,SEEDX 
      00028D 58               [ 2]  621 	sllw x 
      00028E 58               [ 2]  622 	sllw x 
      00028F 58               [ 2]  623 	sllw x 
      000290 58               [ 2]  624 	sllw x 
      000291 58               [ 2]  625 	sllw x 
      000292 9E               [ 1]  626 	ld a,xh 
      000293 B8 3A            [ 1]  627 	xor a,SEEDX 
      000295 B7 26            [ 1]  628 	ld XTEMP,a 
      000297 9F               [ 1]  629 	ld a,xl 
      000298 B8 3B            [ 1]  630 	xor a,SEEDX+1 
      00029A B7 27            [ 1]  631 	ld XTEMP+1,a 
                                    632 ; SEEDX=SEEDY 
      00029C BE 3C            [ 2]  633 	ldw x,SEEDY 
      00029E BF 3A            [ 2]  634 	ldw SEEDX,x  
                                    635 ; SEEDY=SEEDY^(SEEDY>>1)
      0002A0 54               [ 2]  636 	srlw x 
      0002A1 9E               [ 1]  637 	ld a,xh 
      0002A2 B8 3C            [ 1]  638 	xor a,SEEDY 
      0002A4 B7 3C            [ 1]  639 	ld SEEDY,a  
      0002A6 9F               [ 1]  640 	ld a,xl 
      0002A7 B8 3D            [ 1]  641 	xor a,SEEDY+1 
      0002A9 B7 3D            [ 1]  642 	ld SEEDY+1,a 
                                    643 ; XTEMP>>3 
      0002AB BE 26            [ 2]  644 	ldw x,XTEMP 
      0002AD 54               [ 2]  645 	srlw x 
      0002AE 54               [ 2]  646 	srlw x 
      0002AF 54               [ 2]  647 	srlw x 
                                    648 ; x=XTEMP^x 
      0002B0 9E               [ 1]  649 	ld a,xh 
      0002B1 B8 26            [ 1]  650 	xor a,XTEMP 
      0002B3 95               [ 1]  651 	ld xh,a 
      0002B4 9F               [ 1]  652 	ld a,xl 
      0002B5 B8 27            [ 1]  653 	xor a,XTEMP+1  
      0002B7 97               [ 1]  654 	ld xl,a 
                                    655 ; SEEDY=x^SEEDY 
      0002B8 B8 3D            [ 1]  656 	xor a,SEEDY+1
      0002BA 97               [ 1]  657 	ld xl,a 
      0002BB 9E               [ 1]  658 	ld a,xh 
      0002BC B8 3C            [ 1]  659 	xor a,SEEDY
      0002BE 95               [ 1]  660 	ld xh,a 
      0002BF BF 3C            [ 2]  661 	ldw SEEDY,x 
                                    662 ; return SEEDY modulo YTEMP  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      0002C1 90 BE 28         [ 2]  663 	ldw y,YTEMP  
      0002C4 65               [ 2]  664 	divw x,y 
      0002C5 1E 01            [ 2]  665 	ldw x,(SPSAVE,sp)
      0002C7 FF               [ 2]  666         ldw (x),y 
      0002C8 5B 02            [ 2]  667         addw sp,#VSIZE 
      0002CA 81               [ 4]  668 	ret 
                                    669 
                                    670 
                                    671 ;;
                                    672 ;; get millisecond counter 
                                    673 ;; msec ( -- u )
                                    674 ;; Added by Picatout 2020-04-26
      0002CB 02 79                  675         .word LINK  
                           0002CD   676         LINK = . 
      0002CD 04                     677         .byte 4
      0002CE 4D 53 45 43            678         .ascii "MSEC"
      0002D2                        679 MSEC: 
      0002D2 1D 00 02         [ 2]  680         subw x,#CELLL 
      0002D5 90 BE 32         [ 2]  681         ldw y,MS 
      0002D8 FF               [ 2]  682         ldw (x),y 
      0002D9 81               [ 4]  683         ret 
                                    684 
                                    685 ; suspend execution for u msec 
                                    686 ;  pause ( u -- )
      0002DA 02 CD                  687         .word LINK 
                           0002DC   688         LINK=.
      0002DC 05                     689         .byte 5 
      0002DD 50 41 55 53 45         690         .ascii "PAUSE"
      0002E2                        691 PAUSE:
      0002E2 90 93            [ 1]  692         ldw y,x
      0002E4 90 FE            [ 2]  693         ldw y,(y)
      0002E6 72 B9 00 32      [ 2]  694         addw y,MS 
      0002EA 8F               [10]  695 1$:     wfi  
      0002EB 90 B3 32         [ 2]  696         cpw y,MS  
      0002EE 26 FA            [ 1]  697         jrne 1$        
      0002F0 1C 00 02         [ 2]  698         addw x,#CELLL 
      0002F3 81               [ 4]  699         ret 
                                    700 
                                    701 ; initialize count down timer 
                                    702 ;  TIMER ( u -- )  milliseconds 
      0002F4 02 DC                  703         .word LINK 
                           0002F6   704         LINK=.
      0002F6 05                     705         .byte 5 
      0002F7 54 49 4D 45 52         706         .ascii "TIMER" 
      0002FC                        707 TIMER:
      0002FC 90 93            [ 1]  708         ldw y,x
      0002FE 90 FE            [ 2]  709         ldw y,(y) 
      000300 90 BF 34         [ 2]  710         ldw CNTDWN,y
      000303 1C 00 02         [ 2]  711         addw x,#CELLL 
      000306 81               [ 4]  712         ret 
                                    713 
                                    714 ; check for TIMER exiparition 
                                    715 ;  TIMEOUT? ( -- 0|-1 )
      000307 02 F6                  716         .word LINK 
                           000309   717         LINK=. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      000309 08                     718         .byte 8 
      00030A 54 49 4D 45 4F 55 54   719         .ascii "TIMEOUT?"
             3F
      000312                        720 TIMEOUTQ: 
      000312 4F               [ 1]  721         clr a
      000313 1D 00 02         [ 2]  722         subw x,#CELLL 
      000316 90 BE 34         [ 2]  723         ldw y,CNTDWN 
      000319 26 01            [ 1]  724         jrne 1$ 
      00031B 43               [ 1]  725         cpl a 
      00031C E7 01            [ 1]  726 1$:     ld (1,x),a 
      00031E F7               [ 1]  727         ld (x),a 
      00031F 81               [ 4]  728         ret         
                                    729 
                                    730 ; reboot MCU 
                                    731 ; REBOOT ( -- )
      000320 03 09                  732         .word LINK 
                           000322   733         LINK=. 
      000322 06                     734         .byte 6 
      000323 52 45 42 4F 4F 54      735         .ascii "REBOOT"
      000329                        736 reboot:
      000329 CC 00 00         [ 2]  737         jp NonHandledInterrupt
                                    738 
                                    739 ; compile to flash memory 
                                    740 ; TO-FLASH ( -- )
      00032C 03 22                  741         .word LINK 
                           00032E   742         LINK=.
      00032E 08                     743         .byte 8
      00032F 54 4F 2D 46 4C 41 53   744         .ascii "TO-FLASH"
             48
      000337                        745 TOFLASH:
      000337 CD 07 2A         [ 4]  746         call RAMLAST 
      00033A CD 04 F1         [ 4]  747         call AT 
      00033D CD 07 55         [ 4]  748         call QDUP 
      000340 CD 04 A6         [ 4]  749         call QBRAN
      000343 03 66                  750         .word 1$
      000345 CD 13 3C         [ 4]  751         call ABORQ 
      000348 1D                     752         .byte 29
      000349 20 4E 6F 74 20 77 68   753         .ascii " Not while definitions in RAM"   
             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      000366 90 AE FF FF      [ 2]  754 1$:     ldw y,#-1 
      00036A 90 BF 22         [ 2]  755         ldw UTFLASH,y
      00036D 81               [ 4]  756         ret 
                                    757 
                                    758 ; compile to RAM 
                                    759 ; TO-RAM ( -- )
      00036E 03 2E                  760         .word LINK 
                           000370   761         LINK=.
      000370 06                     762         .byte 6 
      000371 54 4F 2D 52 41 4D      763         .ascii "TO-RAM"
      000377                        764 TORAM:
      000377 90 5F            [ 1]  765         clrw y 
      000379 90 BF 22         [ 2]  766         ldw UTFLASH,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      00037C 81               [ 4]  767         ret 
                                    768 
                                    769 ;; BAUD RATE constants table
                                    770 ; values to put in BRR1 & BRR2 
      00037D                        771 baudrate: 
      00037D A0 1B                  772 	.byte 0xa0,0x1b ; 2400
      00037F D0 05                  773 	.byte 0xd0,0x5  ; 4800 
      000381 68 03                  774 	.byte 0x68,0x3  ; 9600
      000383 34 01                  775 	.byte 0x34,0x1  ; 19200
      000385 11 06                  776 	.byte 0x11,0x6  ; 57600
      000387 08 0B                  777 	.byte 0x8,0xb   ; 115200
                                    778 
                                    779 ; BAUD RATE CONSTANTS names 
                                    780 ; 2400 baud
      000389 03 70                  781 	.word LINK
                           00038B   782 LINK	= .
      00038B 04                     783 	.byte 4
      00038C 42 32 4B 34            784 	.ascii "B2K4" 
      000390                        785 B2K4:
      000390 1D 00 02         [ 2]  786 	subw x,#CELLL 
      000393 90 5F            [ 1]  787         clrw y
      000395 FF               [ 2]  788         ldw (x),y
      000396 81               [ 4]  789 	ret
                                    790 ; 4800 baud	
      000397 03 8B                  791 	.word LINK
                           000399   792 LINK	= .
      000399 04                     793 	.byte 4
      00039A 42 34 4B 38            794 	.ascii "B4K8" 
      00039E                        795 B4K8:
      00039E 1D 00 02         [ 2]  796         subw x,#CELLL 
      0003A1 90 AE 00 02      [ 2]  797         ldw y,#2 
      0003A5 FF               [ 2]  798         ldw (x),y
      0003A6 81               [ 4]  799         ret 
                                    800 ; 9600 baud
      0003A7 03 99                  801 	.word LINK
                           0003A9   802 LINK	= .
      0003A9 04                     803 	.byte 4
      0003AA 42 39 4B 36            804 	.ascii "B9K6" 
      0003AE                        805 B9K6:
      0003AE 1D 00 02         [ 2]  806         subw x,#CELLL 
      0003B1 90 AE 00 04      [ 2]  807         ldw y,#4 
      0003B5 FF               [ 2]  808         ldw (x),y 
      0003B6 81               [ 4]  809         ret 
                                    810 ; 19200 baud
      0003B7 03 A9                  811 	.word LINK
                           0003B9   812 LINK	= .
      0003B9 05                     813 	.byte 5
      0003BA 42 31 39 4B 32         814 	.ascii "B19K2" 
      0003BF                        815 B19K2:
      0003BF 1D 00 02         [ 2]  816         subw x,#CELLL
      0003C2 90 AE 00 06      [ 2]  817         ldw y,#6 
      0003C6 FF               [ 2]  818         ldw (x),y 
      0003C7 81               [ 4]  819         ret 
                                    820 ; 57600 baud        
      0003C8 03 B9                  821 	.word LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           0003CA   822 LINK	= .
      0003CA 05                     823 	.byte 5
      0003CB 42 35 37 4B 36         824 	.ascii "B57K6" 
      0003D0                        825 B57K6:
      0003D0 1D 00 02         [ 2]  826         subw x,#CELLL 
      0003D3 90 AE 00 08      [ 2]  827         ldw y,#8 
      0003D7 FF               [ 2]  828         ldw (x),y 
      0003D8 81               [ 4]  829         ret 
                                    830 ; 115200 baud 
      0003D9 03 CA                  831 	.word LINK
                           0003DB   832 LINK	= .
      0003DB 06                     833 	.byte 6
      0003DC 42 31 31 35 4B 32      834 	.ascii "B115K2" 
      0003E2                        835 B115K2:
      0003E2 1D 00 02         [ 2]  836 	subw x,#CELLL 
      0003E5 90 AE 00 0A      [ 2]  837         ldw y,#10 
      0003E9 FF               [ 2]  838         ldw (x),y 
      0003EA 81               [ 4]  839         ret 
                                    840 	
                                    841 ;; set UART2 BAUD rate
                                    842 ;	BAUD ( u -- )
      0003EB 03 DB                  843 	.word LINK 
                           0003ED   844 LINK	= .
      0003ED 04                     845 	.byte 4
      0003EE 42 41 55 44            846 	.ascii "BAUD" 
      0003F2                        847 BAUD:
      0003F2 1D 00 02         [ 2]  848 	subw x,#CELLL
      0003F5 90 AE 03 7D      [ 2]  849         ldw y,#baudrate 
      0003F9 FF               [ 2]  850         ldw (x),y 
      0003FA CD 07 C7         [ 4]  851         call PLUS
      0003FD 90 93            [ 1]  852         ldw y,x  
      0003FF 90 FE            [ 2]  853         ldw y,(y)
      000401 90 F6            [ 1]  854         ld a,(y)
      000403 88               [ 1]  855         push a 
      000404 90 5C            [ 1]  856         incw y 
      000406 90 F6            [ 1]  857         ld a,(y)
      000408 C7 52 33         [ 1]  858         ld UART_BRR2,a 
      00040B 84               [ 1]  859         pop a
      00040C C7 52 32         [ 1]  860         ld UART_BRR1,a 
      00040F 1C 00 02         [ 2]  861         addw x,#CELLL 
      000412 81               [ 4]  862         ret 
                                    863 
                                    864 ;; Device dependent I/O
                                    865 ;       ?RX     ( -- c T | F )
                                    866 ;         Return input byte and true, or false.
      000413 03 ED                  867         .word      LINK 
                           000415   868 LINK	= .
      000415 04                     869         .byte      4
      000416 3F 4B 45 59            870         .ascii     "?KEY"
      00041A                        871 QKEY:
      00041A 90 5F            [ 1]  872         CLRW Y 
      00041C 72 0B 52 30 0B   [ 2]  873         BTJF UART_SR,#UART_SR_RXNE,INCH   ;check status
      000421 C6 52 31         [ 1]  874         LD    A,UART_DR   ;get char in A
      000424 1D 00 02         [ 2]  875 	SUBW	X,#2
      000427 E7 01            [ 1]  876         LD     (1,X),A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      000429 7F               [ 1]  877 	CLR	(X)
      00042A 90 53            [ 2]  878         CPLW     Y
      00042C                        879 INCH:
      00042C 1D 00 02         [ 2]  880 		SUBW	X,#2
      00042F FF               [ 2]  881         LDW     (X),Y
      000430 81               [ 4]  882         RET
                                    883 
                                    884 ;       TX!     ( c -- )
                                    885 ;       Send character c to  output device.
      000431 04 15                  886         .word      LINK
                           000433   887 LINK	= .
      000433 04                     888         .byte      4
      000434 45 4D 49 54            889         .ascii     "EMIT"
      000438                        890 EMIT:
      000438 E6 01            [ 1]  891         LD     A,(1,X)
      00043A 1C 00 02         [ 2]  892 	ADDW	X,#2
      00043D 72 0F 52 30 FB   [ 2]  893 OUTPUT: BTJF UART_SR,#UART_SR_TXE,OUTPUT  ;loop until tx empty 
      000442 C7 52 31         [ 1]  894         LD    UART_DR,A   ;send A
      000445 81               [ 4]  895         RET
                                    896 
                                    897 ;       FC-XON  ( -- )
                                    898 ;       send XON character 
      000446 04 33                  899         .word LINK
                           000448   900 LINK    = .
      000448 06                     901         .byte 6 
      000449 46 43 2D 58 4F 4E      902         .ascii "FC-XON"
      00044F                        903 FC_XON:
      00044F 1D 00 02         [ 2]  904         subw x,#CELLL 
      000452 7F               [ 1]  905         clr (x)
      000453 A6 11            [ 1]  906         ld a,#XON 
      000455 E7 01            [ 1]  907         ld (1,x),a 
      000457 CD 04 38         [ 4]  908         call EMIT 
      00045A 81               [ 4]  909         ret 
                                    910 
                                    911 ;       FC-XOFF ( -- )
                                    912 ;       Send XOFF character 
      00045B 04 48                  913         .word LINK
                           00045D   914 LINK    = .
      00045D 07                     915         .byte 7
      00045E 46 43 2D 58 4F 46 46   916         .ascii "FC-XOFF"
      000465                        917 FC_XOFF:
      000465 1D 00 02         [ 2]  918         subw x,#CELLL 
      000468 7F               [ 1]  919         clr (x)
      000469 A6 13            [ 1]  920         ld a,#XOFF 
      00046B E7 01            [ 1]  921         ld (1,x),a 
      00046D CD 04 38         [ 4]  922         call EMIT 
      000470 81               [ 4]  923         ret
                                    924 
                                    925 ;; The kernel
                                    926 
                                    927 ;       doLIT   ( -- w )
                                    928 ;       Push an inline literal.
      000471 04 5D                  929         .word      LINK
                                    930 ;LINK	= 	.
                                    931 ;	.byte      COMPO+5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                                    932 ;        .ascii     "DOLIT"
      000473                        933 DOLIT:
      000473 1D 00 02         [ 2]  934 	SUBW X,#2
      000476 16 01            [ 2]  935         ldw y,(1,sp)
      000478 90 FE            [ 2]  936         ldw y,(y)
      00047A FF               [ 2]  937         ldw (x),y
      00047B 90 85            [ 2]  938         popw y 
      00047D 90 EC 02         [ 2]  939         jp (2,y)
                                    940 
                                    941 ;       next    ( -- )
                                    942 ;       Code for  single index loop.
      000480 04 5D                  943         .word      LINK
                           000482   944 LINK	= 	.
      000482 44                     945 	.byte      COMPO+4
      000483 6E 65 78 74            946         .ascii     "next"
      000487                        947 DONXT:
      000487 16 03            [ 2]  948 	LDW Y,(3,SP)
      000489 90 5A            [ 2]  949 	DECW Y
      00048B 2A 07            [ 1]  950 	JRPL NEX1 ; jump if N=0
      00048D 90 85            [ 2]  951 	POPW Y
      00048F 5B 02            [ 2]  952         addw sp,#2
      000491 90 EC 02         [ 2]  953         JP (2,Y)
      000494                        954 NEX1:
      000494 17 03            [ 2]  955         LDW (3,SP),Y
      000496 90 85            [ 2]  956         POPW Y
      000498 90 FE            [ 2]  957 	LDW Y,(Y)
      00049A 90 FC            [ 2]  958 	JP (Y)
                                    959 
                                    960 ;       ?branch ( f -- )
                                    961 ;       Branch if flag is zero.
      00049C 04 82                  962         .word      LINK
                           00049E   963 LINK	= 	.
      00049E 47                     964 	.byte      COMPO+7
      00049F 3F 42 52 41 4E 43 48   965         .ascii     "?BRANCH"
      0004A6                        966 QBRAN:	
      0004A6 90 93            [ 1]  967         LDW Y,X
      0004A8 1C 00 02         [ 2]  968 	ADDW X,#2
      0004AB 90 FE            [ 2]  969 	LDW Y,(Y)
      0004AD 27 0E            [ 1]  970         JREQ     BRAN
      0004AF 90 85            [ 2]  971 	POPW Y
      0004B1 90 EC 02         [ 2]  972 	JP (2,Y)
                                    973         
                                    974 ;       branch  ( -- )
                                    975 ;       Branch to an inline address.
      0004B4 04 9E                  976         .word      LINK
                           0004B6   977 LINK	= 	.
      0004B6 46                     978 	.byte      COMPO+6
      0004B7 42 52 41 4E 43 48      979         .ascii     "BRANCH"
      0004BD                        980 BRAN:
      0004BD 90 85            [ 2]  981         POPW Y
      0004BF 90 FE            [ 2]  982 	LDW Y,(Y)
      0004C1 90 FC            [ 2]  983         JP     (Y)
                                    984 
                                    985 ;       EXECUTE ( ca -- )
                                    986 ;       Execute  word at ca.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      0004C3 04 B6                  987         .word      LINK
                           0004C5   988 LINK	= 	.
      0004C5 07                     989         .byte       7
      0004C6 45 58 45 43 55 54 45   990         .ascii     "EXECUTE"
      0004CD                        991 EXECU:
      0004CD 90 93            [ 1]  992         LDW Y,X
      0004CF 1C 00 02         [ 2]  993 	ADDW X,#2
      0004D2 90 FE            [ 2]  994 	LDW  Y,(Y)
      0004D4 90 FC            [ 2]  995         JP   (Y)
                                    996 
                           000001   997 OPTIMIZE = 1
                           000001   998 .if OPTIMIZE 
                                    999 ; remplacement de CALL EXIT par 
                                   1000 ; le opcode de RET.
                                   1001 ; Voir modification au code de ";"
                           000000  1002 .else 
                                   1003 ;       EXIT    ( -- )
                                   1004 ;       Terminate a colon definition.
                                   1005         .word      LINK
                                   1006 LINK = .
                                   1007         .byte      4
                                   1008         .ascii     "EXIT"
                                   1009 EXIT:
                                   1010         POPW Y
                                   1011         RET
                                   1012 .endif 
                                   1013 
                                   1014 ;       !       ( w a -- )
                                   1015 ;       Pop  data stack to memory.
      0004D6 04 C5                 1016         .word      LINK
                           0004D8  1017 LINK = .
      0004D8 01                    1018         .byte      1
      0004D9 21                    1019         .ascii     "!"
      0004DA                       1020 STORE:
      0004DA 90 93            [ 1] 1021         LDW Y,X
      0004DC 90 FE            [ 2] 1022         LDW Y,(Y)    ;Y=a
      0004DE 90 BF 28         [ 2] 1023         LDW YTEMP,Y
      0004E1 90 93            [ 1] 1024         LDW Y,X
      0004E3 90 EE 02         [ 2] 1025         LDW Y,(2,Y)
      0004E6 91 CF 28         [ 5] 1026         LDW [YTEMP],Y ;store w at a
      0004E9 1C 00 04         [ 2] 1027         ADDW X,#4 ; DDROP 
      0004EC 81               [ 4] 1028         RET     
                                   1029 
                                   1030 ;       @       ( a -- w )
                                   1031 ;       Push memory location to stack.
      0004ED 04 D8                 1032         .word      LINK
                           0004EF  1033 LINK	= 	.
      0004EF 01                    1034         .byte    1
      0004F0 40                    1035         .ascii	"@"
      0004F1                       1036 AT:
      0004F1 90 93            [ 1] 1037         LDW Y,X     ;Y = a
      0004F3 90 FE            [ 2] 1038         LDW Y,(Y)   ; address 
      0004F5 90 FE            [ 2] 1039         LDW Y,(Y)   ; value 
      0004F7 FF               [ 2] 1040         LDW (X),Y ;w = @Y
      0004F8 81               [ 4] 1041         RET     
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                   1042 
                                   1043 ;       C!      ( c b -- )
                                   1044 ;       Pop  data stack to byte memory.
      0004F9 04 EF                 1045         .word      LINK
                           0004FB  1046 LINK	= .
      0004FB 02                    1047         .byte      2
      0004FC 43 21                 1048         .ascii     "C!"
      0004FE                       1049 CSTOR:
      0004FE 90 93            [ 1] 1050         LDW Y,X
      000500 90 FE            [ 2] 1051 	LDW Y,(Y)    ;Y=b
      000502 E6 03            [ 1] 1052         LD A,(3,X)    ;D = c
      000504 90 F7            [ 1] 1053         LD  (Y),A     ;store c at b
      000506 1C 00 04         [ 2] 1054 	ADDW X,#4 ; DDROP 
      000509 81               [ 4] 1055         RET     
                                   1056 
                                   1057 ;       C@      ( b -- c )
                                   1058 ;       Push byte in memory to  stack.
      00050A 04 FB                 1059         .word      LINK
                           00050C  1060 LINK	= 	.
      00050C 02                    1061         .byte      2
      00050D 43 40                 1062         .ascii     "C@"
      00050F                       1063 CAT:
      00050F 90 93            [ 1] 1064         LDW Y,X     ;Y=b
      000511 90 FE            [ 2] 1065         LDW Y,(Y)
      000513 90 F6            [ 1] 1066         LD A,(Y)
      000515 E7 01            [ 1] 1067         LD (1,X),A
      000517 7F               [ 1] 1068         CLR (X)
      000518 81               [ 4] 1069         RET     
                                   1070 
                                   1071 ;       RP@     ( -- a )
                                   1072 ;       Push current RP to data stack.
      000519 05 0C                 1073         .word      LINK
                           00051B  1074 LINK	= .
      00051B 03                    1075         .byte      3
      00051C 52 50 40              1076         .ascii     "RP@"
      00051F                       1077 RPAT:
      00051F 90 96            [ 1] 1078         LDW Y,SP    ;save return addr
      000521 1D 00 02         [ 2] 1079         SUBW X,#2
      000524 FF               [ 2] 1080         LDW (X),Y
      000525 81               [ 4] 1081         RET     
                                   1082 
                                   1083 ;       RP!     ( a -- )
                                   1084 ;       Set  return stack pointer.
      000526 05 1B                 1085         .word      LINK
                           000528  1086 LINK	= 	. 
      000528 43                    1087 	.byte      COMPO+3
      000529 52 50 21              1088         .ascii     "RP!"
      00052C                       1089 RPSTO:
      00052C 90 85            [ 2] 1090         POPW Y
      00052E 90 BF 28         [ 2] 1091         LDW YTEMP,Y
      000531 90 93            [ 1] 1092         LDW Y,X
      000533 90 FE            [ 2] 1093         LDW Y,(Y)
      000535 90 94            [ 1] 1094         LDW SP,Y
      000537 1C 00 02         [ 2] 1095         ADDW x,#CELLL ; a was not dropped, Picatout 2020-05-24
      00053A 92 CC 28         [ 5] 1096         JP [YTEMP]
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                   1097 
                                   1098 ;       R>      ( -- w )
                                   1099 ;       Pop return stack to data stack.
      00053D 05 28                 1100         .word      LINK
                           00053F  1101 LINK	= 	. 
      00053F 42                    1102 	.byte      COMPO+2
      000540 52 3E                 1103         .ascii     "R>"
      000542                       1104 RFROM:
      000542 90 85            [ 2] 1105         POPW Y    ;save return addr
      000544 90 BF 28         [ 2] 1106         LDW YTEMP,Y
      000547 90 85            [ 2] 1107         POPW Y
      000549 1D 00 02         [ 2] 1108         SUBW X,#2
      00054C FF               [ 2] 1109         LDW (X),Y
      00054D 92 CC 28         [ 5] 1110         JP [YTEMP]
                                   1111 
                                   1112 ;       R@      ( -- w )
                                   1113 ;       Copy top of return stack to stack.
      000550 05 3F                 1114         .word      LINK
                           000552  1115 LINK	= 	. 
      000552 02                    1116         .byte      2
      000553 52 40                 1117         .ascii     "R@"
      000555                       1118 RAT:
      000555 16 03            [ 2] 1119         ldw y,(3,sp)
      000557 1D 00 02         [ 2] 1120         subw x,#CELLL 
      00055A FF               [ 2] 1121         ldw (x),y 
      00055B 81               [ 4] 1122         ret 
                                   1123 
                                   1124 ;       >R      ( w -- )
                                   1125 ;       Push data stack to return stack.
      00055C 05 52                 1126         .word      LINK
                           00055E  1127 LINK	= 	. 
      00055E 42                    1128 	.byte      COMPO+2
      00055F 3E 52                 1129         .ascii     ">R"
      000561                       1130 TOR:
      000561 90 85            [ 2] 1131         POPW Y    ;save return addr
      000563 90 BF 28         [ 2] 1132         LDW YTEMP,Y
      000566 90 93            [ 1] 1133         LDW Y,X
      000568 90 FE            [ 2] 1134         LDW Y,(Y)
      00056A 90 89            [ 2] 1135         PUSHW Y    ;restore return addr
      00056C 1C 00 02         [ 2] 1136         ADDW X,#2
      00056F 92 CC 28         [ 5] 1137         JP [YTEMP]
                                   1138 
                                   1139 ;       SP@     ( -- a )
                                   1140 ;       Push current stack pointer.
      000572 05 5E                 1141         .word      LINK
                           000574  1142 LINK	= 	. 
      000574 03                    1143         .byte      3
      000575 53 50 40              1144         .ascii     "SP@"
      000578                       1145 SPAT:
      000578 90 93            [ 1] 1146 	LDW Y,X
      00057A 1D 00 02         [ 2] 1147         SUBW X,#2
      00057D FF               [ 2] 1148 	LDW (X),Y
      00057E 81               [ 4] 1149         RET     
                                   1150 
                                   1151 ;       SP!     ( a -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                                   1152 ;       Set  data stack pointer.
      00057F 05 74                 1153         .word      LINK
                           000581  1154 LINK	= 	. 
      000581 03                    1155         .byte      3
      000582 53 50 21              1156         .ascii     "SP!"
      000585                       1157 SPSTO:
      000585 FE               [ 2] 1158         LDW     X,(X)     ;X = a
      000586 81               [ 4] 1159         RET     
                                   1160 
                                   1161 ;       DROP    ( w -- )
                                   1162 ;       Discard top stack item.
      000587 05 81                 1163         .word      LINK
                           000589  1164 LINK	= 	. 
      000589 04                    1165         .byte      4
      00058A 44 52 4F 50           1166         .ascii     "DROP"
      00058E                       1167 DROP:
      00058E 1C 00 02         [ 2] 1168         ADDW X,#2     
      000591 81               [ 4] 1169         RET     
                                   1170 
                                   1171 ;       DUP     ( w -- w w )
                                   1172 ;       Duplicate  top stack item.
      000592 05 89                 1173         .word      LINK
                           000594  1174 LINK	= 	. 
      000594 03                    1175         .byte      3
      000595 44 55 50              1176         .ascii     "DUP"
      000598                       1177 DUPP:
      000598 90 93            [ 1] 1178 	LDW Y,X
      00059A 1D 00 02         [ 2] 1179         SUBW X,#2
      00059D 90 FE            [ 2] 1180 	LDW Y,(Y)
      00059F FF               [ 2] 1181 	LDW (X),Y
      0005A0 81               [ 4] 1182         RET     
                                   1183 
                                   1184 ;       SWAP    ( w1 w2 -- w2 w1 )
                                   1185 ;       Exchange top two stack items.
      0005A1 05 94                 1186         .word      LINK
                           0005A3  1187 LINK	= 	. 
      0005A3 04                    1188         .byte      4
      0005A4 53 57 41 50           1189         .ascii     "SWAP"
      0005A8                       1190 SWAPP:
      0005A8 90 93            [ 1] 1191         LDW Y,X
      0005AA 90 FE            [ 2] 1192         LDW Y,(Y)
      0005AC 90 BF 28         [ 2] 1193         LDW YTEMP,Y
      0005AF 90 93            [ 1] 1194         LDW Y,X
      0005B1 90 EE 02         [ 2] 1195         LDW Y,(2,Y)
      0005B4 FF               [ 2] 1196         LDW (X),Y
      0005B5 90 BE 28         [ 2] 1197         LDW Y,YTEMP
      0005B8 EF 02            [ 2] 1198         LDW (2,X),Y
      0005BA 81               [ 4] 1199         RET     
                                   1200 
                                   1201 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                   1202 ;       Copy second stack item to top.
      0005BB 05 A3                 1203         .word      LINK
                           0005BD  1204 LINK	= . 
      0005BD 04                    1205         .byte      4
      0005BE 4F 56 45 52           1206         .ascii     "OVER"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      0005C2                       1207 OVER:
      0005C2 1D 00 02         [ 2] 1208         SUBW X,#2
      0005C5 90 93            [ 1] 1209         LDW Y,X
      0005C7 90 EE 04         [ 2] 1210         LDW Y,(4,Y)
      0005CA FF               [ 2] 1211         LDW (X),Y
      0005CB 81               [ 4] 1212         RET     
                                   1213 
                                   1214 ;       0<      ( n -- t )
                                   1215 ;       Return true if n is negative.
      0005CC 05 BD                 1216         .word      LINK
                           0005CE  1217 LINK	= . 
      0005CE 02                    1218         .byte      2
      0005CF 30 3C                 1219         .ascii     "0<"
      0005D1                       1220 ZLESS:
      0005D1 A6 FF            [ 1] 1221         LD A,#0xFF
      0005D3 90 93            [ 1] 1222         LDW Y,X
      0005D5 90 FE            [ 2] 1223         LDW Y,(Y)
      0005D7 2B 01            [ 1] 1224         JRMI     ZL1
      0005D9 4F               [ 1] 1225         CLR A   ;false
      0005DA F7               [ 1] 1226 ZL1:    LD     (X),A
      0005DB E7 01            [ 1] 1227         LD (1,X),A
      0005DD 81               [ 4] 1228 	RET     
                                   1229 
                                   1230 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1231 ;       0= ( n -- f )
                                   1232 ;   n==0?
                                   1233 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005DE                       1234         _HEADER ZEQUAL,2,"0="
      0005DE 05 CE                    1         .word LINK 
                           0005E0     2         LINK=.
      0005E0 02                       3         .byte 2  
      0005E1 30 3D                    4         .ascii "0="
      0005E3                          5         ZEQUAL:
      0005E3 A6 FF            [ 1] 1235         LD A,#0XFF 
      0005E5 90 93            [ 1] 1236         LDW Y,X 
      0005E7 90 FE            [ 2] 1237         LDW Y,(Y)
      0005E9 27 02            [ 1] 1238         JREQ ZEQU1 
      0005EB A6 00            [ 1] 1239         LD A,#0 
      0005ED                       1240 ZEQU1:  
      0005ED F7               [ 1] 1241         LD (X),A 
      0005EE E7 01            [ 1] 1242         LD (1,X),A         
      0005F0 81               [ 4] 1243         RET 
                                   1244 
                                   1245 
                                   1246 ;       AND     ( w w -- w )
                                   1247 ;       Bitwise AND.
      0005F1 05 E0                 1248         .word      LINK
                           0005F3  1249 LINK	= . 
      0005F3 03                    1250         .byte      3
      0005F4 41 4E 44              1251         .ascii     "AND"
      0005F7                       1252 ANDD:
      0005F7 F6               [ 1] 1253         LD  A,(X)    ;D=w
      0005F8 E4 02            [ 1] 1254         AND A,(2,X)
      0005FA E7 02            [ 1] 1255         LD (2,X),A
      0005FC E6 01            [ 1] 1256         LD A,(1,X)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      0005FE E4 03            [ 1] 1257         AND A,(3,X)
      000600 E7 03            [ 1] 1258         LD (3,X),A
      000602 1C 00 02         [ 2] 1259         ADDW X,#2
      000605 81               [ 4] 1260         RET
                                   1261 
                                   1262 ;       OR      ( w w -- w )
                                   1263 ;       Bitwise inclusive OR.
      000606 05 F3                 1264         .word      LINK
                           000608  1265 LINK = . 
      000608 02                    1266         .byte      2
      000609 4F 52                 1267         .ascii     "OR"
      00060B                       1268 ORR:
      00060B F6               [ 1] 1269         LD A,(X)    ;D=w
      00060C EA 02            [ 1] 1270         OR A,(2,X)
      00060E E7 02            [ 1] 1271         LD (2,X),A
      000610 E6 01            [ 1] 1272         LD A,(1,X)
      000612 EA 03            [ 1] 1273         OR A,(3,X)
      000614 E7 03            [ 1] 1274         LD (3,X),A
      000616 1C 00 02         [ 2] 1275         ADDW X,#2
      000619 81               [ 4] 1276         RET
                                   1277 
                                   1278 ;       XOR     ( w w -- w )
                                   1279 ;       Bitwise exclusive OR.
      00061A 06 08                 1280         .word      LINK
                           00061C  1281 LINK	= . 
      00061C 03                    1282         .byte      3
      00061D 58 4F 52              1283         .ascii     "XOR"
      000620                       1284 XORR:
      000620 F6               [ 1] 1285         LD A,(X)    ;D=w
      000621 E8 02            [ 1] 1286         XOR A,(2,X)
      000623 E7 02            [ 1] 1287         LD (2,X),A
      000625 E6 01            [ 1] 1288         LD A,(1,X)
      000627 E8 03            [ 1] 1289         XOR A,(3,X)
      000629 E7 03            [ 1] 1290         LD (3,X),A
      00062B 1C 00 02         [ 2] 1291         ADDW X,#2
      00062E 81               [ 4] 1292         RET
                                   1293 
                                   1294 ;       UM+     ( u u -- udsum )
                                   1295 ;       Add two unsigned single
                                   1296 ;       and return a double sum.
      00062F 06 1C                 1297         .word      LINK
                           000631  1298 LINK	= . 
      000631 03                    1299         .byte      3
      000632 55 4D 2B              1300         .ascii     "UM+"
      000635                       1301 UPLUS:
      000635 A6 01            [ 1] 1302         LD A,#1
      000637 90 93            [ 1] 1303         LDW Y,X
      000639 90 EE 02         [ 2] 1304         LDW Y,(2,Y)
      00063C 90 BF 28         [ 2] 1305         LDW YTEMP,Y
      00063F 90 93            [ 1] 1306         LDW Y,X
      000641 90 FE            [ 2] 1307         LDW Y,(Y)
      000643 72 B9 00 28      [ 2] 1308         ADDW Y,YTEMP
      000647 EF 02            [ 2] 1309         LDW (2,X),Y
      000649 25 01            [ 1] 1310         JRC     UPL1
      00064B 4F               [ 1] 1311         CLR A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      00064C E7 01            [ 1] 1312 UPL1:   LD     (1,X),A
      00064E 7F               [ 1] 1313         CLR (X)
      00064F 81               [ 4] 1314         RET
                                   1315 
                                   1316 ;; System and user variables
                                   1317 
                                   1318 ;       doVAR   ( -- a )
                                   1319 ;       Code for VARIABLE and CREATE.
      000650 06 31                 1320         .word      LINK
                           000652  1321 LINK	= . 
      000652 45                    1322 	.byte      COMPO+5
      000653 44 4F 56 41 52        1323         .ascii     "DOVAR"
      000658                       1324 DOVAR:
      000658 1D 00 02         [ 2] 1325 	SUBW X,#2
      00065B 90 85            [ 2] 1326         POPW Y    ;get return addr (pfa)
      00065D 90 FE            [ 2] 1327         LDW Y,(Y) ; indirect address 
      00065F FF               [ 2] 1328         LDW (X),Y    ;push on stack
      000660 81               [ 4] 1329         RET     ;go to RET of EXEC
                                   1330 
                                   1331 ;       BASE    ( -- a )
                                   1332 ;       Radix base for numeric I/O.
      000661 06 52                 1333         .word      LINK        
                           000663  1334 LINK = . 
      000663 04                    1335         .byte      4
      000664 42 41 53 45           1336         .ascii     "BASE"
      000668                       1337 BASE:
      000668 90 AE 00 06      [ 2] 1338 	LDW Y,#UBASE 
      00066C 1D 00 02         [ 2] 1339 	SUBW X,#2
      00066F FF               [ 2] 1340         LDW (X),Y
      000670 81               [ 4] 1341         RET
                                   1342 
                                   1343 ;       tmp     ( -- a )
                                   1344 ;       A temporary storage.
      000671 06 63                 1345         .word      LINK
                                   1346         
                           000673  1347 LINK = . 
      000673 03                    1348 	.byte      3
      000674 54 4D 50              1349         .ascii     "TMP"
      000677                       1350 TEMP:
      000677 90 AE 00 0C      [ 2] 1351 	LDW Y,#UTMP
      00067B 1D 00 02         [ 2] 1352 	SUBW X,#2
      00067E FF               [ 2] 1353         LDW (X),Y
      00067F 81               [ 4] 1354         RET
                                   1355 
                                   1356 ;       >IN     ( -- a )
                                   1357 ;        Hold parsing pointer.
      000680 06 73                 1358         .word      LINK
                           000682  1359 LINK = . 
      000682 03                    1360         .byte      3
      000683 3E 49 4E              1361         .ascii    ">IN"
      000686                       1362 INN:
      000686 90 AE 00 0E      [ 2] 1363 	LDW Y,#UINN 
      00068A 1D 00 02         [ 2] 1364 	SUBW X,#2
      00068D FF               [ 2] 1365         LDW (X),Y
      00068E 81               [ 4] 1366         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                   1367 
                                   1368 ;       #TIB    ( -- a )
                                   1369 ;       Count in terminal input buffer.
      00068F 06 82                 1370         .word      LINK
                           000691  1371 LINK = . 
      000691 04                    1372         .byte      4
      000692 23 54 49 42           1373         .ascii     "#TIB"
      000696                       1374 NTIB:
      000696 90 AE 00 10      [ 2] 1375 	LDW Y,#UCTIB 
      00069A 1D 00 02         [ 2] 1376 	SUBW X,#2
      00069D FF               [ 2] 1377         LDW (X),Y
      00069E 81               [ 4] 1378         RET
                                   1379 
                                   1380 ;       TBUF ( -- a )
                                   1381 ;       address of 128 bytes transaction buffer 
      00069F 06 91                 1382         .word LINK 
                           0006A1  1383         LINK=.
      0006A1 04                    1384         .byte 4 
      0006A2 54 42 55 46           1385         .ascii "TBUF"
      0006A6                       1386 TBUF:
      0006A6 90 AE 16 80      [ 2] 1387         ldw y,#ROWBUFF
      0006AA 1D 00 02         [ 2] 1388         subw x,#CELLL
      0006AD FF               [ 2] 1389         ldw (x),y 
      0006AE 81               [ 4] 1390         ret 
                                   1391 
                                   1392 ; systeme variable 
                                   1393 ; compilation destination 
                                   1394 ; TFLASH ( -- A )
      0006AF 06 A1                 1395         .word LINK 
                           0006B1  1396         LINK=.
      0006B1 06                    1397         .byte 6 
      0006B2 54 46 4C 41 53 48     1398         .ascii "TFLASH"         
      0006B8                       1399 TFLASH:
      0006B8 1D 00 02         [ 2] 1400         subw x,#CELLL 
      0006BB 90 AE 00 22      [ 2] 1401         ldw y,#UTFLASH
      0006BF FF               [ 2] 1402         ldw (x),y 
      0006C0 81               [ 4] 1403         ret 
                                   1404 
                                   1405 ;       "EVAL   ( -- a )
                                   1406 ;       Execution vector of EVAL.
      0006C1 06 B1                 1407         .word      LINK
                           0006C3  1408 LINK = . 
      0006C3 05                    1409         .byte      5
      0006C4 27 45 56 41 4C        1410         .ascii     "'EVAL"
      0006C9                       1411 TEVAL:
      0006C9 90 AE 00 14      [ 2] 1412 	LDW Y,#UINTER 
      0006CD 1D 00 02         [ 2] 1413 	SUBW X,#2
      0006D0 FF               [ 2] 1414         LDW (X),Y
      0006D1 81               [ 4] 1415         RET
                                   1416 
                                   1417 ;       HLD     ( -- a )
                                   1418 ;       Hold a pointer of output string.
      0006D2 06 C3                 1419         .word      LINK
                           0006D4  1420 LINK = . 
      0006D4 03                    1421         .byte      3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      0006D5 48 4C 44              1422         .ascii     "HLD"
      0006D8                       1423 HLD:
      0006D8 90 AE 00 16      [ 2] 1424 	LDW Y,#UHLD 
      0006DC 1D 00 02         [ 2] 1425 	SUBW X,#2
      0006DF FF               [ 2] 1426         LDW (X),Y
      0006E0 81               [ 4] 1427         RET
                                   1428 
                                   1429 ;       CONTEXT ( -- a )
                                   1430 ;       Start vocabulary search.
      0006E1 06 D4                 1431         .word      LINK
                           0006E3  1432 LINK = . 
      0006E3 07                    1433         .byte      7
      0006E4 43 4F 4E 54 45 58 54  1434         .ascii     "CONTEXT"
      0006EB                       1435 CNTXT:
      0006EB 90 AE 00 18      [ 2] 1436 	LDW Y,#UCNTXT
      0006EF 1D 00 02         [ 2] 1437 	SUBW X,#2
      0006F2 FF               [ 2] 1438         LDW (X),Y
      0006F3 81               [ 4] 1439         RET
                                   1440 
                                   1441 ;       VP      ( -- a )
                                   1442 ;       Point to top of variables
      0006F4 06 E3                 1443         .word      LINK
                           0006F6  1444 LINK = . 
      0006F6 02                    1445         .byte      2
      0006F7 56 50                 1446         .ascii     "VP"
      0006F9                       1447 VPP:
      0006F9 90 AE 00 1A      [ 2] 1448 	LDW Y,#UVP 
      0006FD 1D 00 02         [ 2] 1449 	SUBW X,#2
      000700 FF               [ 2] 1450         LDW (X),Y
      000701 81               [ 4] 1451         RET
                                   1452 
                                   1453 ;       CP    ( -- a )
                                   1454 ;       Pointer to top of FLASH 
      000702 06 F6                 1455         .word LINK 
                           000704  1456         LINK=.
      000704 02                    1457         .byte 2 
      000705 43 50                 1458         .ascii "CP"
      000707                       1459 CPP: 
      000707 90 AE 00 1C      [ 2] 1460         ldw y,#UCP 
      00070B 1D 00 02         [ 2] 1461         subw x,#CELLL 
      00070E FF               [ 2] 1462         ldw (x),y 
      00070F 81               [ 4] 1463         ret                
                                   1464 
                                   1465 ;       LAST    ( -- a )
                                   1466 ;       Point to last name in dictionary.
      000710 07 04                 1467         .word      LINK
                           000712  1468 LINK = . 
      000712 04                    1469         .byte      4
      000713 4C 41 53 54           1470         .ascii     "LAST"
      000717                       1471 LAST:
      000717 90 AE 00 1E      [ 2] 1472 	LDW Y,#ULAST 
      00071B 1D 00 02         [ 2] 1473 	SUBW X,#2
      00071E FF               [ 2] 1474         LDW (X),Y
      00071F 81               [ 4] 1475         RET
                                   1476 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                   1477 ; address of system variable URLAST 
                                   1478 ;       RAMLAST ( -- a )
                                   1479 ; RAM dictionary context 
      000720 07 12                 1480         .word LINK 
                           000722  1481         LINK=. 
      000722 07                    1482         .byte 7  
      000723 52 41 4D 4C 41 53 54  1483         .ascii "RAMLAST" 
      00072A                       1484 RAMLAST: 
      00072A 90 AE 00 24      [ 2] 1485         ldw y,#URLAST 
      00072E 1D 00 02         [ 2] 1486         subw x,#CELLL 
      000731 FF               [ 2] 1487         ldw (x),y 
      000732 81               [ 4] 1488         ret 
                                   1489 
                                   1490 ; OFFSET ( -- a )
                                   1491 ; address of system variable OFFSET 
      000733 07 22                 1492         .word LINK 
                           000735  1493         LINK=.
      000735 06                    1494         .byte 6
      000736 4F 46 46 53 45 54     1495         .ascii "OFFSET" 
      00073C                       1496 OFFSET: 
      00073C 1D 00 02         [ 2] 1497         subw x,#CELLL
      00073F 90 AE 00 20      [ 2] 1498         ldw y,#UOFFSET 
      000743 FF               [ 2] 1499         ldw (x),y 
      000744 81               [ 4] 1500         ret 
                                   1501 
                                   1502 ; adjust jump address adding OFFSET
                                   1503 ; ADR-ADJ ( a -- a+offset )
      000745                       1504 ADRADJ: 
      000745 CD 07 3C         [ 4] 1505         call OFFSET 
      000748 CD 04 F1         [ 4] 1506         call AT 
      00074B CC 07 C7         [ 2] 1507         jp PLUS 
                                   1508 
                                   1509 
                                   1510 ;; Common functions
                                   1511 
                                   1512 ;       ?DUP    ( w -- w w | 0 )
                                   1513 ;       Dup tos if its is not zero.
      00074E 07 35                 1514         .word      LINK
                           000750  1515 LINK = . 
      000750 04                    1516         .byte      4
      000751 3F 44 55 50           1517         .ascii     "?DUP"
      000755                       1518 QDUP:
      000755 90 93            [ 1] 1519         LDW Y,X
      000757 90 FE            [ 2] 1520 	LDW Y,(Y)
      000759 27 04            [ 1] 1521         JREQ     QDUP1
      00075B 1D 00 02         [ 2] 1522 	SUBW X,#2
      00075E FF               [ 2] 1523         LDW (X),Y
      00075F 81               [ 4] 1524 QDUP1:  RET
                                   1525 
                                   1526 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1527 ;       Rot 3rd item to top.
      000760 07 50                 1528         .word      LINK
                           000762  1529 LINK = . 
      000762 03                    1530         .byte      3
      000763 52 4F 54              1531         .ascii     "ROT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      000766                       1532 ROT:
      000766 90 93            [ 1] 1533         ldw y,x 
      000768 90 FE            [ 2] 1534         ldw y,(y)
      00076A 90 89            [ 2] 1535         pushw y 
      00076C 90 93            [ 1] 1536         ldw y,x 
      00076E 90 EE 04         [ 2] 1537         ldw y,(4,y)
      000771 FF               [ 2] 1538         ldw (x),y 
      000772 90 93            [ 1] 1539         ldw y,x 
      000774 90 EE 02         [ 2] 1540         ldw y,(2,y)
      000777 EF 04            [ 2] 1541         ldw (4,x),y 
      000779 90 85            [ 2] 1542         popw y 
      00077B EF 02            [ 2] 1543         ldw (2,x),y
      00077D 81               [ 4] 1544         ret 
                                   1545 
                                   1546 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1547 ;    <ROT ( n1 n2 n3 -- n3 n1 n2 )
                                   1548 ;    rotate left 3 top elements 
                                   1549 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00077E                       1550     _HEADER NROT,4,"<ROT"
      00077E 07 62                    1         .word LINK 
                           000780     2         LINK=.
      000780 04                       3         .byte 4  
      000781 3C 52 4F 54              4         .ascii "<ROT"
      000785                          5         NROT:
      000785 90 93            [ 1] 1551     LDW Y,X 
      000787 90 FE            [ 2] 1552     LDW Y,(Y)
      000789 90 BF 28         [ 2] 1553     LDW YTEMP,Y ; n3  
      00078C 90 93            [ 1] 1554     LDW Y,X 
      00078E 90 EE 02         [ 2] 1555     LDW Y,(2,Y) ; Y = n2 
      000791 FF               [ 2] 1556     LDW (X),Y   ; TOS = n2 
      000792 90 93            [ 1] 1557     LDW Y,X    
      000794 90 EE 04         [ 2] 1558     LDW Y,(4,Y) ; Y = n1 
      000797 EF 02            [ 2] 1559     LDW (2,X),Y ;   = n1 
      000799 90 BE 28         [ 2] 1560     LDW Y,YTEMP 
      00079C EF 04            [ 2] 1561     LDW (4,X),Y ; = n3 
      00079E 81               [ 4] 1562     RET 
                                   1563 
                                   1564 ;       2DROP   ( w w -- )
                                   1565 ;       Discard two items on stack.
      00079F 07 80                 1566         .word      LINK
                           0007A1  1567 LINK = . 
      0007A1 05                    1568         .byte      5
      0007A2 32 44 52 4F 50        1569         .ascii     "2DROP"
      0007A7                       1570 DDROP:
      0007A7 1C 00 04         [ 2] 1571         ADDW X,#4
      0007AA 81               [ 4] 1572         RET
                                   1573 
                                   1574 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1575 ;       Duplicate top two items.
      0007AB 07 A1                 1576         .word      LINK
                           0007AD  1577 LINK = . 
      0007AD 04                    1578         .byte      4
      0007AE 32 44 55 50           1579         .ascii     "2DUP"
      0007B2                       1580 DDUP:
      0007B2 1D 00 04         [ 2] 1581         SUBW X,#4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      0007B5 90 93            [ 1] 1582         LDW Y,X
      0007B7 90 EE 06         [ 2] 1583         LDW Y,(6,Y)
      0007BA EF 02            [ 2] 1584         LDW (2,X),Y
      0007BC 90 93            [ 1] 1585         LDW Y,X
      0007BE 90 EE 04         [ 2] 1586         LDW Y,(4,Y)
      0007C1 FF               [ 2] 1587         LDW (X),Y
      0007C2 81               [ 4] 1588         RET
                                   1589 
                                   1590 ;       +       ( w w -- sum )
                                   1591 ;       Add top two items.
      0007C3 07 AD                 1592         .word      LINK
                           0007C5  1593 LINK = . 
      0007C5 01                    1594         .byte      1
      0007C6 2B                    1595         .ascii     "+"
      0007C7                       1596 PLUS:
      0007C7 90 93            [ 1] 1597         LDW Y,X
      0007C9 90 FE            [ 2] 1598         LDW Y,(Y)
      0007CB 90 BF 28         [ 2] 1599         LDW YTEMP,Y
      0007CE 1C 00 02         [ 2] 1600         ADDW X,#2
      0007D1 90 93            [ 1] 1601         LDW Y,X
      0007D3 90 FE            [ 2] 1602         LDW Y,(Y)
      0007D5 72 B9 00 28      [ 2] 1603         ADDW Y,YTEMP
      0007D9 FF               [ 2] 1604         LDW (X),Y
      0007DA 81               [ 4] 1605         RET
                                   1606 
                                   1607 ;       NOT     ( w -- w )
                                   1608 ;       One's complement of tos.
      0007DB 07 C5                 1609         .word      LINK
                           0007DD  1610 LINK = . 
      0007DD 03                    1611         .byte      3
      0007DE 4E 4F 54              1612         .ascii     "NOT"
      0007E1                       1613 INVER:
      0007E1 90 93            [ 1] 1614         LDW Y,X
      0007E3 90 FE            [ 2] 1615         LDW Y,(Y)
      0007E5 90 53            [ 2] 1616         CPLW Y
      0007E7 FF               [ 2] 1617         LDW (X),Y
      0007E8 81               [ 4] 1618         RET
                                   1619 
                                   1620 ;       NEGATE  ( n -- -n )
                                   1621 ;       Two's complement of tos.
      0007E9 07 DD                 1622         .word      LINK
                           0007EB  1623 LINK = . 
      0007EB 06                    1624         .byte      6
      0007EC 4E 45 47 41 54 45     1625         .ascii     "NEGATE"
      0007F2                       1626 NEGAT:
      0007F2 90 93            [ 1] 1627         LDW Y,X
      0007F4 90 FE            [ 2] 1628         LDW Y,(Y)
      0007F6 90 50            [ 2] 1629         NEGW Y
      0007F8 FF               [ 2] 1630         LDW (X),Y
      0007F9 81               [ 4] 1631         RET
                                   1632 
                                   1633 ;       DNEGATE ( d -- -d )
                                   1634 ;       Two's complement of top double.
      0007FA 07 EB                 1635         .word      LINK
                           0007FC  1636 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      0007FC 07                    1637         .byte      7
      0007FD 44 4E 45 47 41 54 45  1638         .ascii     "DNEGATE"
      000804                       1639 DNEGA:
      000804 90 93            [ 1] 1640         LDW Y,X
      000806 90 FE            [ 2] 1641 	LDW Y,(Y)
      000808 90 53            [ 2] 1642         CPLW Y     
      00080A 90 BF 28         [ 2] 1643 	LDW YTEMP,Y
      00080D 90 93            [ 1] 1644         LDW Y,X
      00080F 90 EE 02         [ 2] 1645         LDW Y,(2,Y)
      000812 90 53            [ 2] 1646         CPLW Y
      000814 72 A9 00 01      [ 2] 1647         addw y,#1
      000818 EF 02            [ 2] 1648         LDW (2,X),Y
      00081A 90 BE 28         [ 2] 1649         LDW Y,YTEMP
      00081D 24 02            [ 1] 1650         JRNC DN1 
      00081F 90 5C            [ 1] 1651         INCW Y
      000821 FF               [ 2] 1652 DN1:    LDW (X),Y
      000822 81               [ 4] 1653         RET
                                   1654 
                                   1655 
                                   1656 ;       S>D ( n -- d )
                                   1657 ; convert single integer to double 
      000823 07 FC                 1658         .word LINK 
                           000825  1659         LINK=. 
      000825 03                    1660         .byte 3 
      000826 53 3E 44              1661         .ascii "S>D"
      000829                       1662 STOD: 
      000829 1D 00 02         [ 2] 1663         subw x,#CELLL 
      00082C 90 5F            [ 1] 1664         clrw y 
      00082E FF               [ 2] 1665         ldw (x),y 
      00082F 90 93            [ 1] 1666         ldw y,x 
      000831 90 EE 02         [ 2] 1667         ldw y,(2,y)
      000834 2A 05            [ 1] 1668         jrpl 1$ 
      000836 90 AE FF FF      [ 2] 1669         ldw y,#-1
      00083A FF               [ 2] 1670         ldw (x),y 
      00083B 81               [ 4] 1671 1$:     ret 
                                   1672 
                                   1673 
                                   1674 
                                   1675 
                                   1676 ;       -       ( n1 n2 -- n1-n2 )
                                   1677 ;       Subtraction.
      00083C 08 25                 1678         .word      LINK
                           00083E  1679 LINK = . 
      00083E 01                    1680         .byte      1
      00083F 2D                    1681         .ascii     "-"
      000840                       1682 SUBB:
      000840 90 93            [ 1] 1683         LDW Y,X
      000842 90 FE            [ 2] 1684         LDW Y,(Y)
      000844 90 BF 28         [ 2] 1685         LDW YTEMP,Y
      000847 1C 00 02         [ 2] 1686         ADDW X,#2
      00084A 90 93            [ 1] 1687         LDW Y,X
      00084C 90 FE            [ 2] 1688         LDW Y,(Y)
      00084E 72 B2 00 28      [ 2] 1689         SUBW Y,YTEMP
      000852 FF               [ 2] 1690         LDW (X),Y
      000853 81               [ 4] 1691         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                                   1692 
                                   1693 ;       ABS     ( n -- n )
                                   1694 ;       Return  absolute value of n.
      000854 08 3E                 1695         .word      LINK
                           000856  1696 LINK = . 
      000856 03                    1697         .byte      3
      000857 41 42 53              1698         .ascii     "ABS"
      00085A                       1699 ABSS:
      00085A 90 93            [ 1] 1700         LDW Y,X
      00085C 90 FE            [ 2] 1701 	LDW Y,(Y)
      00085E 2A 03            [ 1] 1702         JRPL     AB1     ;negate:
      000860 90 50            [ 2] 1703         NEGW     Y     ;else negate hi byte
      000862 FF               [ 2] 1704         LDW (X),Y
      000863 81               [ 4] 1705 AB1:    RET
                                   1706 
                                   1707 ;       =       ( w w -- t )
                                   1708 ;       Return true if top two are =al.
      000864 08 56                 1709         .word      LINK
                           000866  1710 LINK = . 
      000866 01                    1711         .byte      1
      000867 3D                    1712         .ascii     "="
      000868                       1713 EQUAL:
      000868 A6 FF            [ 1] 1714         LD A,#0xFF  ;true
      00086A 90 93            [ 1] 1715         LDW Y,X    ;D = n2
      00086C 90 FE            [ 2] 1716         LDW Y,(Y)
      00086E 90 BF 28         [ 2] 1717         LDW YTEMP,Y
      000871 1C 00 02         [ 2] 1718         ADDW X,#2
      000874 90 93            [ 1] 1719         LDW Y,X
      000876 90 FE            [ 2] 1720         LDW Y,(Y)
      000878 90 B3 28         [ 2] 1721         CPW Y,YTEMP     ;if n2 <> n1
      00087B 27 01            [ 1] 1722         JREQ     EQ1
      00087D 4F               [ 1] 1723         CLR A
      00087E F7               [ 1] 1724 EQ1:    LD (X),A
      00087F E7 01            [ 1] 1725         LD (1,X),A
      000881 81               [ 4] 1726 	RET     
                                   1727 
                                   1728 ;       U<      ( u u -- t )
                                   1729 ;       Unsigned compare of top two items.
      000882 08 66                 1730         .word      LINK
                           000884  1731 LINK = . 
      000884 02                    1732         .byte      2
      000885 55 3C                 1733         .ascii     "U<"
      000887                       1734 ULESS:
      000887 A6 FF            [ 1] 1735         LD A,#0xFF  ;true
      000889 90 93            [ 1] 1736         LDW Y,X    ;D = n2
      00088B 90 FE            [ 2] 1737         LDW Y,(Y)
      00088D 90 BF 28         [ 2] 1738         LDW YTEMP,Y
      000890 1C 00 02         [ 2] 1739         ADDW X,#2
      000893 90 93            [ 1] 1740         LDW Y,X
      000895 90 FE            [ 2] 1741         LDW Y,(Y)
      000897 90 B3 28         [ 2] 1742         CPW Y,YTEMP     ;if n2 <> n1
      00089A 25 01            [ 1] 1743         JRULT     ULES1
      00089C 4F               [ 1] 1744         CLR A
      00089D F7               [ 1] 1745 ULES1:  LD (X),A
      00089E E7 01            [ 1] 1746         LD (1,X),A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      0008A0 81               [ 4] 1747 	RET     
                                   1748 
                                   1749 ;       <       ( n1 n2 -- t )
                                   1750 ;       Signed compare of top two items.
      0008A1 08 84                 1751         .word      LINK
                           0008A3  1752 LINK = . 
      0008A3 01                    1753         .byte      1
      0008A4 3C                    1754         .ascii     "<"
      0008A5                       1755 LESS:
      0008A5 A6 FF            [ 1] 1756         LD A,#0xFF  ;true
      0008A7 90 93            [ 1] 1757         LDW Y,X    ;D = n2
      0008A9 90 FE            [ 2] 1758         LDW Y,(Y)
      0008AB 90 BF 28         [ 2] 1759         LDW YTEMP,Y
      0008AE 1C 00 02         [ 2] 1760         ADDW X,#2
      0008B1 90 93            [ 1] 1761         LDW Y,X
      0008B3 90 FE            [ 2] 1762         LDW Y,(Y)
      0008B5 90 B3 28         [ 2] 1763         CPW Y,YTEMP     ;if n2 <> n1
      0008B8 2F 01            [ 1] 1764         JRSLT     LT1
      0008BA 4F               [ 1] 1765         CLR A
      0008BB F7               [ 1] 1766 LT1:    LD (X),A
      0008BC E7 01            [ 1] 1767         LD (1,X),A
      0008BE 81               [ 4] 1768 	RET     
                                   1769 
                                   1770 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1771 ;       >   (n1 n2 -- f )
                                   1772 ;  signed compare n1 n2 
                                   1773 ;  true if n1 > n2 
                                   1774 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008BF 08 A3                 1775         .word   LINK 
                           0008C1  1776         LINK = . 
      0008C1 01                    1777         .byte 1
      0008C2 3E                    1778         .ascii ">"
      0008C3                       1779 GREAT:
      0008C3 A6 FF            [ 1] 1780         LD A,#0xFF ;
      0008C5 90 93            [ 1] 1781         LDW Y,X 
      0008C7 90 FE            [ 2] 1782         LDW Y,(Y)
      0008C9 90 BF 28         [ 2] 1783         LDW YTEMP,Y 
      0008CC 1C 00 02         [ 2] 1784         ADDW X,#2 
      0008CF 90 93            [ 1] 1785         LDW Y,X 
      0008D1 90 FE            [ 2] 1786         LDW Y,(Y)
      0008D3 90 B3 28         [ 2] 1787         CPW  Y,YTEMP 
      0008D6 2C 01            [ 1] 1788         JRSGT GREAT1 
      0008D8 4F               [ 1] 1789         CLR  A
      0008D9                       1790 GREAT1:
      0008D9 F7               [ 1] 1791         LD (X),A 
      0008DA E7 01            [ 1] 1792         LD (1,X),A 
      0008DC 81               [ 4] 1793         RET 
                                   1794 
                                   1795 
                                   1796 ;       MAX     ( n n -- n )
                                   1797 ;       Return greater of two top items.
      0008DD 08 C1                 1798         .word      LINK
                           0008DF  1799 LINK = . 
      0008DF 03                    1800         .byte      3
      0008E0 4D 41 58              1801         .ascii     "MAX"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      0008E3                       1802 MAX:
      0008E3 90 93            [ 1] 1803         LDW Y,X    ;D = n2
      0008E5 90 EE 02         [ 2] 1804         LDW Y,(2,Y)
      0008E8 90 BF 28         [ 2] 1805         LDW YTEMP,Y
      0008EB 90 93            [ 1] 1806         LDW Y,X
      0008ED 90 FE            [ 2] 1807         LDW Y,(Y)
      0008EF 90 B3 28         [ 2] 1808         CPW Y,YTEMP     ;if n2 <> n1
      0008F2 2F 02            [ 1] 1809         JRSLT     MAX1
      0008F4 EF 02            [ 2] 1810         LDW (2,X),Y
      0008F6 1C 00 02         [ 2] 1811 MAX1:   ADDW X,#2
      0008F9 81               [ 4] 1812 	RET     
                                   1813 
                                   1814 ;       MIN     ( n n -- n )
                                   1815 ;       Return smaller of top two items.
      0008FA 08 DF                 1816         .word      LINK
                           0008FC  1817 LINK = . 
      0008FC 03                    1818         .byte      3
      0008FD 4D 49 4E              1819         .ascii     "MIN"
      000900                       1820 MIN:
      000900 90 93            [ 1] 1821         LDW Y,X    ;D = n2
      000902 90 EE 02         [ 2] 1822         LDW Y,(2,Y)
      000905 90 BF 28         [ 2] 1823         LDW YTEMP,Y
      000908 90 93            [ 1] 1824         LDW Y,X
      00090A 90 FE            [ 2] 1825         LDW Y,(Y)
      00090C 90 B3 28         [ 2] 1826         CPW Y,YTEMP     ;if n2 <> n1
      00090F 2C 02            [ 1] 1827         JRSGT     MIN1
      000911 EF 02            [ 2] 1828         LDW (2,X),Y
      000913 1C 00 02         [ 2] 1829 MIN1:	ADDW X,#2
      000916 81               [ 4] 1830 	RET     
                                   1831 
                                   1832 ;       WITHIN  ( u ul uh -- t )
                                   1833 ;       Return true if u is within
                                   1834 ;       range of ul and uh. ( ul <= u < uh )
      000917 08 FC                 1835         .word      LINK
                           000919  1836 LINK = . 
      000919 06                    1837         .byte      6
      00091A 57 49 54 48 49 4E     1838         .ascii     "WITHIN"
      000920                       1839 WITHI:
      000920 CD 05 C2         [ 4] 1840         CALL     OVER
      000923 CD 08 40         [ 4] 1841         CALL     SUBB
      000926 CD 05 61         [ 4] 1842         CALL     TOR
      000929 CD 08 40         [ 4] 1843         CALL     SUBB
      00092C CD 05 42         [ 4] 1844         CALL     RFROM
      00092F CC 08 87         [ 2] 1845         JP     ULESS
                                   1846 
                                   1847 ;; Divide
                                   1848 
                                   1849 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1850 ;       Unsigned divide of a double by a
                                   1851 ;       single. Return mod and quotient.
      000932 09 19                 1852         .word      LINK
                           000934  1853 LINK = . 
      000934 06                    1854         .byte      6
      000935 55 4D 2F 4D 4F 44     1855         .ascii     "UM/MOD"
                                   1856 ; 2021-02-22
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                   1857 ; changed algortihm for Jeeek one 
                                   1858 ; ref: https://github.com/TG9541/stm8ef/pull/406        
      00093B                       1859 UMMOD:
      00093B 90 93            [ 1] 1860         LDW     Y,X             ; stack pointer to Y
      00093D FE               [ 2] 1861         LDW     X,(X)           ; un
      00093E BF 28            [ 2] 1862         LDW     YTEMP,X         ; save un
      000940 93               [ 1] 1863         LDW     X,Y
      000941 5C               [ 1] 1864         INCW    X               ; drop un
      000942 5C               [ 1] 1865         INCW    X
      000943 89               [ 2] 1866         PUSHW   X               ; save stack pointer
      000944 FE               [ 2] 1867         LDW     X,(X)           ; X=udh
      000945 90 EE 04         [ 2] 1868         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      000948 B3 28            [ 2] 1869         CPW     X,YTEMP
      00094A 25 0B            [ 1] 1870         JRULT   MMSM1           ; X is still on the R-stack
      00094C 85               [ 2] 1871         POPW    X               ; restore stack pointer
      00094D 90 AE FF FF      [ 2] 1872         LDW     Y,#0xFFFF       ; overflow result:
      000951 FF               [ 2] 1873         LDW     (X),Y           ; quotient max. 16 bit value
      000952 90 5F            [ 1] 1874         CLRW    Y
      000954 EF 02            [ 2] 1875         LDW     (2,X),Y         ; remainder 0
      000956 81               [ 4] 1876         RET
      000957                       1877 MMSM1:
      000957 A6 10            [ 1] 1878         LD      A,#16           ; loop count
      000959 90 58            [ 2] 1879         SLLW    Y               ; udl shift udl into udh
      00095B                       1880 MMSM3:
      00095B 59               [ 2] 1881         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      00095C 25 04            [ 1] 1882         JRC     MMSMa           ; if carry out of rotate
      00095E B3 28            [ 2] 1883         CPW     X,YTEMP         ; compare udh to un
      000960 25 05            [ 1] 1884         JRULT   MMSM4           ; can't subtract
      000962                       1885 MMSMa:
      000962 72 B0 00 28      [ 2] 1886         SUBW    X,YTEMP         ; can subtract
      000966 98               [ 1] 1887         RCF
      000967                       1888 MMSM4:
      000967 8C               [ 1] 1889         CCF                     ; quotient bit
      000968 90 59            [ 2] 1890         RLCW    Y               ; rotate into quotient, rotate out udl
      00096A 4A               [ 1] 1891         DEC     A               ; repeat
      00096B 26 EE            [ 1] 1892         JRNE    MMSM3           ; if A == 0
      00096D                       1893 MMSMb:
      00096D BF 28            [ 2] 1894         LDW     YTEMP,X         ; done, save remainder
      00096F 85               [ 2] 1895         POPW    X               ; restore stack pointer
      000970 FF               [ 2] 1896         LDW     (X),Y           ; save quotient
      000971 90 BE 28         [ 2] 1897         LDW     Y,YTEMP         ; remainder onto stack
      000974 EF 02            [ 2] 1898         LDW     (2,X),Y
      000976 81               [ 4] 1899         RET
                                   1900 
                                   1901 
                                   1902 ;----------------------------------------------	
                                   1903 ;       M/MOD   ( d n -- r q )
                                   1904 ;       Signed floored divide of double by
                                   1905 ;       single. Return mod and quotient.
                                   1906 ;----------------------------------------------	
      000977 09 34                 1907         .word      LINK
                           000979  1908 LINK = . 
      000979 05                    1909         .byte      5
      00097A 4D 2F 4D 4F 44        1910         .ascii     "M/MOD"
      00097F                       1911 MSMOD:  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      00097F CD 05 98         [ 4] 1912         CALL	DUPP
      000982 CD 05 D1         [ 4] 1913         CALL	ZLESS
      000985 CD 05 98         [ 4] 1914         CALL	DUPP
      000988 CD 05 61         [ 4] 1915         CALL	TOR
      00098B CD 04 A6         [ 4] 1916         CALL	QBRAN
      00098E 09 9C                 1917         .word	MMOD1
      000990 CD 07 F2         [ 4] 1918         CALL	NEGAT
      000993 CD 05 61         [ 4] 1919         CALL	TOR
      000996 CD 08 04         [ 4] 1920         CALL	DNEGA
      000999 CD 05 42         [ 4] 1921         CALL	RFROM
      00099C CD 05 61         [ 4] 1922 MMOD1:	CALL	TOR
      00099F CD 05 98         [ 4] 1923         CALL	DUPP
      0009A2 CD 05 D1         [ 4] 1924         CALL	ZLESS
      0009A5 CD 04 A6         [ 4] 1925         CALL	QBRAN
      0009A8 09 B0                 1926         .word	MMOD2
      0009AA CD 05 55         [ 4] 1927         CALL	RAT
      0009AD CD 07 C7         [ 4] 1928         CALL	PLUS
      0009B0 CD 05 42         [ 4] 1929 MMOD2:	CALL	RFROM
      0009B3 CD 09 3B         [ 4] 1930         CALL	UMMOD
      0009B6 CD 05 42         [ 4] 1931         CALL	RFROM
      0009B9 CD 04 A6         [ 4] 1932         CALL	QBRAN
      0009BC 09 C7                 1933         .word	MMOD3
      0009BE CD 05 A8         [ 4] 1934         CALL	SWAPP
      0009C1 CD 07 F2         [ 4] 1935         CALL	NEGAT
      0009C4 CD 05 A8         [ 4] 1936         CALL	SWAPP
      0009C7 81               [ 4] 1937 MMOD3:	RET
                                   1938 
                                   1939 ;       /MOD    ( n n -- r q )
                                   1940 ;       Signed divide. Return mod and quotient.
      0009C8 09 79                 1941         .word      LINK
                           0009CA  1942 LINK = . 
      0009CA 04                    1943         .byte      4
      0009CB 2F 4D 4F 44           1944         .ascii     "/MOD"
      0009CF                       1945 SLMOD:
      0009CF CD 05 C2         [ 4] 1946         CALL	OVER
      0009D2 CD 05 D1         [ 4] 1947         CALL	ZLESS
      0009D5 CD 05 A8         [ 4] 1948         CALL	SWAPP
      0009D8 CC 09 7F         [ 2] 1949         JP	MSMOD
                                   1950 
                                   1951 ;       MOD     ( n n -- r )
                                   1952 ;       Signed divide. Return mod only.
      0009DB 09 CA                 1953         .word      LINK
                           0009DD  1954 LINK = . 
      0009DD 03                    1955         .byte      3
      0009DE 4D 4F 44              1956         .ascii     "MOD"
      0009E1                       1957 MODD:
      0009E1 CD 09 CF         [ 4] 1958 	CALL	SLMOD
      0009E4 CC 05 8E         [ 2] 1959 	JP	DROP
                                   1960 
                                   1961 ;       /       ( n n -- q )
                                   1962 ;       Signed divide. Return quotient only.
      0009E7 09 DD                 1963         .word      LINK
                           0009E9  1964 LINK = . 
      0009E9 01                    1965         .byte      1
      0009EA 2F                    1966         .ascii     "/"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      0009EB                       1967 SLASH:
      0009EB CD 09 CF         [ 4] 1968         CALL	SLMOD
      0009EE CD 05 A8         [ 4] 1969         CALL	SWAPP
      0009F1 CC 05 8E         [ 2] 1970         JP	DROP
                                   1971 
                                   1972 ;; Multiply
                                   1973 
                                   1974 ;       UM*     ( u u -- ud )
                                   1975 ;       Unsigned multiply. Return double product.
      0009F4 09 E9                 1976         .word      LINK
                           0009F6  1977 LINK = . 
      0009F6 03                    1978         .byte      3
      0009F7 55 4D 2A              1979         .ascii     "UM*"
      0009FA                       1980 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
                                   1981 ; take advantage of SP addressing modes
                                   1982 ; these PRODx in RAM are not required
                                   1983 ; the product is kept on stack as local variable 
                                   1984         ;; bytes offset on data stack 
                           000002  1985         da=2 
                           000003  1986         db=3 
                           000000  1987         dc=0 
                           000001  1988         dd=1 
                                   1989         ;; product bytes offset on return stack 
                           000001  1990         UD1=1  ; ud bits 31..24
                           000002  1991         UD2=2  ; ud bits 23..16
                           000003  1992         UD3=3  ; ud bits 15..8 
                           000004  1993         UD4=4  ; ud bits 7..0 
                                   1994         ;; local variable for product set to zero   
      0009FA 90 5F            [ 1] 1995         clrw y 
      0009FC 90 89            [ 2] 1996         pushw y  ; bits 15..0
      0009FE 90 89            [ 2] 1997         pushw y  ; bits 31..16 
      000A00 E6 03            [ 1] 1998         ld a,(db,x) ; b 
      000A02 90 97            [ 1] 1999         ld yl,a 
      000A04 E6 01            [ 1] 2000         ld a,(dd,x)   ; d
      000A06 90 42            [ 4] 2001         mul y,a    ; b*d  
      000A08 17 03            [ 2] 2002         ldw (UD3,sp),y ; lowest weight product 
      000A0A E6 03            [ 1] 2003         ld a,(db,x)
      000A0C 90 97            [ 1] 2004         ld yl,a 
      000A0E E6 00            [ 1] 2005         ld a,(dc,x)
      000A10 90 42            [ 4] 2006         mul y,a  ; b*c 
                                   2007         ;;; do the partial sum 
      000A12 72 F9 02         [ 2] 2008         addw y,(UD2,sp)
      000A15 4F               [ 1] 2009         clr a 
      000A16 49               [ 1] 2010         rlc a
      000A17 6B 01            [ 1] 2011         ld (UD1,sp),a 
      000A19 17 02            [ 2] 2012         ldw (UD2,sp),y 
      000A1B E6 02            [ 1] 2013         ld a,(da,x)
      000A1D 90 97            [ 1] 2014         ld yl,a 
      000A1F E6 01            [ 1] 2015         ld a,(dd,x)
      000A21 90 42            [ 4] 2016         mul y,a   ; a*d 
                                   2017         ;; do partial sum 
      000A23 72 F9 02         [ 2] 2018         addw y,(UD2,sp)
      000A26 4F               [ 1] 2019         clr a 
      000A27 19 01            [ 1] 2020         adc a,(UD1,sp)
      000A29 6B 01            [ 1] 2021         ld (UD1,sp),a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000A2B 17 02            [ 2] 2022         ldw (UD2,sp),y 
      000A2D E6 02            [ 1] 2023         ld a,(da,x)
      000A2F 90 97            [ 1] 2024         ld yl,a 
      000A31 E6 00            [ 1] 2025         ld a,(dc,x)
      000A33 90 42            [ 4] 2026         mul y,a  ;  a*c highest weight product 
                                   2027         ;;; do partial sum 
      000A35 72 F9 01         [ 2] 2028         addw y,(UD1,sp)
      000A38 FF               [ 2] 2029         ldw (x),y  ; udh 
      000A39 16 03            [ 2] 2030         ldw y,(UD3,sp)
      000A3B EF 02            [ 2] 2031         ldw (2,x),y  ; udl  
      000A3D 5B 04            [ 2] 2032         addw sp,#4 ; drop local variable 
      000A3F 81               [ 4] 2033         ret  
                                   2034 
                                   2035 
                                   2036 ;       *       ( n n -- n )
                                   2037 ;       Signed multiply. Return single product.
      000A40 09 F6                 2038         .word      LINK
                           000A42  2039 LINK = . 
      000A42 01                    2040         .byte      1
      000A43 2A                    2041         .ascii     "*"
      000A44                       2042 STAR:
      000A44 CD 09 FA         [ 4] 2043 	CALL	UMSTA
      000A47 CC 05 8E         [ 2] 2044 	JP	DROP
                                   2045 
                                   2046 ;       M*      ( n n -- d )
                                   2047 ;       Signed multiply. Return double product.
      000A4A 0A 42                 2048         .word      LINK
                           000A4C  2049 LINK = . 
      000A4C 02                    2050         .byte      2
      000A4D 4D 2A                 2051         .ascii     "M*"
      000A4F                       2052 MSTAR:      
      000A4F CD 07 B2         [ 4] 2053         CALL	DDUP
      000A52 CD 06 20         [ 4] 2054         CALL	XORR
      000A55 CD 05 D1         [ 4] 2055         CALL	ZLESS
      000A58 CD 05 61         [ 4] 2056         CALL	TOR
      000A5B CD 08 5A         [ 4] 2057         CALL	ABSS
      000A5E CD 05 A8         [ 4] 2058         CALL	SWAPP
      000A61 CD 08 5A         [ 4] 2059         CALL	ABSS
      000A64 CD 09 FA         [ 4] 2060         CALL	UMSTA
      000A67 CD 05 42         [ 4] 2061         CALL	RFROM
      000A6A CD 04 A6         [ 4] 2062         CALL	QBRAN
      000A6D 0A 72                 2063         .word	MSTA1
      000A6F CD 08 04         [ 4] 2064         CALL	DNEGA
      000A72 81               [ 4] 2065 MSTA1:	RET
                                   2066 
                                   2067 ;       */MOD   ( n1 n2 n3 -- r q )
                                   2068 ;       Multiply n1 and n2, then divide
                                   2069 ;       by n3. Return mod and quotient.
      000A73 0A 4C                 2070         .word      LINK
                           000A75  2071 LINK = . 
      000A75 05                    2072         .byte      5
      000A76 2A 2F 4D 4F 44        2073         .ascii     "*/MOD"
      000A7B                       2074 SSMOD:
      000A7B CD 05 61         [ 4] 2075         CALL     TOR
      000A7E CD 0A 4F         [ 4] 2076         CALL     MSTAR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000A81 CD 05 42         [ 4] 2077         CALL     RFROM
      000A84 CC 09 7F         [ 2] 2078         JP     MSMOD
                                   2079 
                                   2080 ;       */      ( n1 n2 n3 -- q )
                                   2081 ;       Multiply n1 by n2, then divide
                                   2082 ;       by n3. Return quotient only.
      000A87 0A 75                 2083         .word      LINK
                           000A89  2084 LINK = . 
      000A89 02                    2085         .byte      2
      000A8A 2A 2F                 2086         .ascii     "*/"
      000A8C                       2087 STASL:
      000A8C CD 0A 7B         [ 4] 2088         CALL	SSMOD
      000A8F CD 05 A8         [ 4] 2089         CALL	SWAPP
      000A92 CC 05 8E         [ 2] 2090         JP	DROP
                                   2091 
                                   2092 ;; Miscellaneous
                                   2093 
                                   2094 ;       CELL+   ( a -- a )
                                   2095 ;       Add cell size in byte to address.
      000A95 0A 89                 2096         .word      LINK
                           000A97  2097 LINK = . 
      000A97 02                    2098         .byte       2
      000A98 32 2B                 2099         .ascii     "2+"
      000A9A                       2100 CELLP:
      000A9A 90 93            [ 1] 2101         LDW Y,X
      000A9C 90 FE            [ 2] 2102 	LDW Y,(Y)
      000A9E 72 A9 00 02      [ 2] 2103         ADDW Y,#CELLL 
      000AA2 FF               [ 2] 2104         LDW (X),Y
      000AA3 81               [ 4] 2105         RET
                                   2106 
                                   2107 ;       CELL-   ( a -- a )
                                   2108 ;       Subtract 2 from address.
      000AA4 0A 97                 2109         .word      LINK
                           000AA6  2110 LINK = . 
      000AA6 02                    2111         .byte       2
      000AA7 32 2D                 2112         .ascii     "2-"
      000AA9                       2113 CELLM:
      000AA9 90 93            [ 1] 2114         LDW Y,X
      000AAB 90 FE            [ 2] 2115 	LDW Y,(Y)
      000AAD 72 A2 00 02      [ 2] 2116         SUBW Y,#CELLL
      000AB1 FF               [ 2] 2117         LDW (X),Y
      000AB2 81               [ 4] 2118         RET
                                   2119 
                                   2120 ;       CELLS   ( n -- n )
                                   2121 ;       Multiply tos by 2.
      000AB3 0A A6                 2122         .word      LINK
                           000AB5  2123 LINK = . 
      000AB5 02                    2124         .byte       2
      000AB6 32 2A                 2125         .ascii     "2*"
      000AB8                       2126 CELLS:
      000AB8 90 93            [ 1] 2127         LDW Y,X
      000ABA 90 FE            [ 2] 2128 	LDW Y,(Y)
      000ABC 90 58            [ 2] 2129         SLAW Y
      000ABE FF               [ 2] 2130         LDW (X),Y
      000ABF 81               [ 4] 2131         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                   2132 
                                   2133 ;       1+      ( a -- a )
                                   2134 ;       Add cell size in byte to address.
      000AC0 0A B5                 2135         .word      LINK
                           000AC2  2136 LINK = . 
      000AC2 02                    2137         .byte      2
      000AC3 31 2B                 2138         .ascii     "1+"
      000AC5                       2139 ONEP:
      000AC5 90 93            [ 1] 2140         LDW Y,X
      000AC7 90 FE            [ 2] 2141 	LDW Y,(Y)
      000AC9 90 5C            [ 1] 2142         INCW Y
      000ACB FF               [ 2] 2143         LDW (X),Y
      000ACC 81               [ 4] 2144         RET
                                   2145 
                                   2146 ;       1-      ( a -- a )
                                   2147 ;       Subtract 2 from address.
      000ACD 0A C2                 2148         .word      LINK
                           000ACF  2149 LINK = . 
      000ACF 02                    2150         .byte      2
      000AD0 31 2D                 2151         .ascii     "1-"
      000AD2                       2152 ONEM:
      000AD2 90 93            [ 1] 2153         LDW Y,X
      000AD4 90 FE            [ 2] 2154 	LDW Y,(Y)
      000AD6 90 5A            [ 2] 2155         DECW Y
      000AD8 FF               [ 2] 2156         LDW (X),Y
      000AD9 81               [ 4] 2157         RET
                                   2158 
                                   2159 ;  shift left n times 
                                   2160 ; LSHIFT ( n1 n2 -- n1<<n2 )
      000ADA 0A CF                 2161         .word LINK 
                           000ADC  2162         LINK=.
      000ADC 06                    2163         .byte 6 
      000ADD 4C 53 48 49 46 54     2164         .ascii "LSHIFT"
      000AE3                       2165 LSHIFT:
      000AE3 E6 01            [ 1] 2166         ld a,(1,x)
      000AE5 1C 00 02         [ 2] 2167         addw x,#CELLL 
      000AE8 90 93            [ 1] 2168         ldw y,x 
      000AEA 90 FE            [ 2] 2169         ldw y,(y)
      000AEC                       2170 LSHIFT1:
      000AEC 4D               [ 1] 2171         tnz a 
      000AED 27 05            [ 1] 2172         jreq LSHIFT4 
      000AEF 90 58            [ 2] 2173         sllw y 
      000AF1 4A               [ 1] 2174         dec a 
      000AF2 20 F8            [ 2] 2175         jra LSHIFT1 
      000AF4                       2176 LSHIFT4:
      000AF4 FF               [ 2] 2177         ldw (x),y 
      000AF5 81               [ 4] 2178         ret 
                                   2179 
                                   2180 ; shift right n times                 
                                   2181 ; RSHIFT (n1 n2 -- n1>>n2 )
      000AF6 0A DC                 2182         .word LINK 
                           000AF8  2183         LINK=.
      000AF8 06                    2184         .byte 6
      000AF9 52 53 48 49 46 54     2185         .ascii "RSHIFT"
      000AFF                       2186 RSHIFT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000AFF E6 01            [ 1] 2187         ld a,(1,x)
      000B01 1C 00 02         [ 2] 2188         addw x,#CELLL 
      000B04 90 93            [ 1] 2189         ldw y,x 
      000B06 90 FE            [ 2] 2190         ldw y,(y)
      000B08                       2191 RSHIFT1:
      000B08 4D               [ 1] 2192         tnz a 
      000B09 27 05            [ 1] 2193         jreq RSHIFT4 
      000B0B 90 54            [ 2] 2194         srlw y 
      000B0D 4A               [ 1] 2195         dec a 
      000B0E 20 F8            [ 2] 2196         jra RSHIFT1 
      000B10                       2197 RSHIFT4:
      000B10 FF               [ 2] 2198         ldw (x),y 
      000B11 81               [ 4] 2199         ret 
                                   2200 
                                   2201 
                                   2202 ;       2/      ( n -- n )
                                   2203 ;       divide  tos by 2.
      000B12 0A F8                 2204         .word      LINK
                           000B14  2205 LINK = . 
      000B14 02                    2206         .byte      2
      000B15 32 2F                 2207         .ascii     "2/"
      000B17                       2208 TWOSL:
      000B17 90 93            [ 1] 2209         LDW Y,X
      000B19 90 FE            [ 2] 2210 	LDW Y,(Y)
      000B1B 90 57            [ 2] 2211         SRAW Y
      000B1D FF               [ 2] 2212         LDW (X),Y
      000B1E 81               [ 4] 2213         RET
                                   2214 
                                   2215 ;       BL      ( -- 32 )
                                   2216 ;       Return 32,  blank character.
      000B1F 0B 14                 2217         .word      LINK
                           000B21  2218 LINK = . 
      000B21 02                    2219         .byte      2
      000B22 42 4C                 2220         .ascii     "BL"
      000B24                       2221 BLANK:
      000B24 1D 00 02         [ 2] 2222         SUBW X,#2
      000B27 90 AE 00 20      [ 2] 2223 	LDW Y,#32
      000B2B FF               [ 2] 2224         LDW (X),Y
      000B2C 81               [ 4] 2225         RET
                                   2226 
                                   2227 ;         0     ( -- 0)
                                   2228 ;         Return 0.
      000B2D 0B 21                 2229         .word      LINK
                           000B2F  2230 LINK = . 
      000B2F 01                    2231         .byte       1
      000B30 30                    2232         .ascii     "0"
      000B31                       2233 ZERO:
      000B31 1D 00 02         [ 2] 2234         SUBW X,#2
      000B34 90 5F            [ 1] 2235 	CLRW Y
      000B36 FF               [ 2] 2236         LDW (X),Y
      000B37 81               [ 4] 2237         RET
                                   2238 
                                   2239 ;         1     ( -- 1)
                                   2240 ;         Return 1.
      000B38 0B 2F                 2241         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                           000B3A  2242 LINK = . 
      000B3A 01                    2243         .byte       1
      000B3B 31                    2244         .ascii     "1"
      000B3C                       2245 ONE:
      000B3C 1D 00 02         [ 2] 2246         SUBW X,#2
      000B3F 90 AE 00 01      [ 2] 2247 	LDW Y,#1
      000B43 FF               [ 2] 2248         LDW (X),Y
      000B44 81               [ 4] 2249         RET
                                   2250 
                                   2251 ;         -1    ( -- -1)
                                   2252 ;         Return 32,  blank character.
      000B45 0B 3A                 2253         .word      LINK
                           000B47  2254 LINK = . 
      000B47 02                    2255         .byte       2
      000B48 2D 31                 2256         .ascii     "-1"
      000B4A                       2257 MONE:
      000B4A 1D 00 02         [ 2] 2258         SUBW X,#2
      000B4D 90 AE FF FF      [ 2] 2259 	LDW Y,#0xFFFF
      000B51 FF               [ 2] 2260         LDW (X),Y
      000B52 81               [ 4] 2261         RET
                                   2262 
                                   2263 ;       >CHAR   ( c -- c )
                                   2264 ;       Filter non-printing characters.
      000B53 0B 47                 2265         .word      LINK
                           000B55  2266 LINK = . 
      000B55 05                    2267         .byte      5
      000B56 3E 43 48 41 52        2268         .ascii     ">CHAR"
      000B5B                       2269 TCHAR:
      000B5B E6 01            [ 1] 2270         ld a,(1,x)
      000B5D A1 20            [ 1] 2271         cp a,#32  
      000B5F 2B 05            [ 1] 2272         jrmi 1$ 
      000B61 A1 7F            [ 1] 2273         cp a,#127 
      000B63 2A 01            [ 1] 2274         jrpl 1$ 
      000B65 81               [ 4] 2275         ret 
      000B66 A6 5F            [ 1] 2276 1$:     ld a,#'_ 
      000B68 E7 01            [ 1] 2277         ld (1,x),a 
      000B6A 81               [ 4] 2278         ret 
                                   2279 
                                   2280 ;       DEPTH   ( -- n )
                                   2281 ;       Return  depth of  data stack.
      000B6B 0B 55                 2282         .word      LINK
                           000B6D  2283 LINK = . 
      000B6D 05                    2284         .byte      5
      000B6E 44 45 50 54 48        2285         .ascii     "DEPTH"
      000B73                       2286 DEPTH: 
      000B73 90 BE 2E         [ 2] 2287         LDW Y,SP0    ;save data stack ptr
      000B76 BF 26            [ 2] 2288 	LDW XTEMP,X
      000B78 72 B2 00 26      [ 2] 2289         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000B7C 90 57            [ 2] 2290         SRAW Y    ;Y = #stack items
      000B7E 1D 00 02         [ 2] 2291 	SUBW X,#2
      000B81 FF               [ 2] 2292         LDW (X),Y     ; if neg, underflow
      000B82 81               [ 4] 2293         RET
                                   2294 
                                   2295 ;       PICK    ( ... +n -- ... w )
                                   2296 ;       Copy  nth stack item to tos.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000B83 0B 6D                 2297         .word      LINK
                           000B85  2298 LINK = . 
      000B85 04                    2299         .byte      4
      000B86 50 49 43 4B           2300         .ascii     "PICK"
      000B8A                       2301 PICK:
      000B8A 90 93            [ 1] 2302         LDW Y,X   ;D = n1
      000B8C 90 FE            [ 2] 2303         LDW Y,(Y)
                                   2304 ; modified for standard compliance          
                                   2305 ; 0 PICK must be equivalent to DUP 
      000B8E 90 5C            [ 1] 2306         INCW Y 
      000B90 90 58            [ 2] 2307         SLAW Y
      000B92 BF 26            [ 2] 2308         LDW XTEMP,X
      000B94 72 B9 00 26      [ 2] 2309         ADDW Y,XTEMP
      000B98 90 FE            [ 2] 2310         LDW Y,(Y)
      000B9A FF               [ 2] 2311         LDW (X),Y
      000B9B 81               [ 4] 2312         RET
                                   2313 
                                   2314 ;; Memory access
                                   2315 
                                   2316 ;       +!      ( n a -- )
                                   2317 ;       Add n to  contents at address a.
      000B9C 0B 85                 2318         .word      LINK
                           000B9E  2319 LINK = . 
      000B9E 02                    2320         .byte      2
      000B9F 2B 21                 2321         .ascii     "+!"
      000BA1                       2322 PSTOR:
      000BA1 90 93            [ 1] 2323         ldw y,x 
      000BA3 90 FE            [ 2] 2324         ldw y,(y)
      000BA5 90 BF 28         [ 2] 2325         ldw YTEMP,y  ; address
      000BA8 90 FE            [ 2] 2326         ldw y,(y)  
      000BAA 90 89            [ 2] 2327         pushw y  ; value at address 
      000BAC 90 93            [ 1] 2328         ldw y,x 
      000BAE 90 EE 02         [ 2] 2329         ldw y,(2,y) ; n 
      000BB1 72 F9 01         [ 2] 2330         addw y,(1,sp) ; n+value
      000BB4 91 CF 28         [ 5] 2331         ldw [YTEMP],y ;  a!
      000BB7 90 85            [ 2] 2332         popw y    ;drop local var
      000BB9 1C 00 04         [ 2] 2333         addw x,#4 ; DDROP 
      000BBC 81               [ 4] 2334         ret 
                                   2335 
                                   2336 ;       2!      ( d a -- )
                                   2337 ;       Store  double integer to address a.
      000BBD 0B 9E                 2338         .word      LINK
                           000BBF  2339 LINK = . 
      000BBF 02                    2340         .byte      2
      000BC0 32 21                 2341         .ascii     "2!"
      000BC2                       2342 DSTOR:
      000BC2 90 93            [ 1] 2343         ldw y,x 
      000BC4 90 FE            [ 2] 2344         ldw y,(y)
      000BC6 90 BF 28         [ 2] 2345         ldw YTEMP,y ; address 
      000BC9 1C 00 02         [ 2] 2346         addw x,#CELLL ; drop a 
      000BCC 90 93            [ 1] 2347         ldw y,x 
      000BCE 90 FE            [ 2] 2348         ldw y,(y) ; hi word 
      000BD0 89               [ 2] 2349         pushw x 
      000BD1 EE 02            [ 2] 2350         ldw x,(2,x) ; lo word 
      000BD3 91 CF 28         [ 5] 2351         ldw [YTEMP],y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000BD6 90 93            [ 1] 2352         ldw y,x 
      000BD8 AE 00 02         [ 2] 2353         ldw x,#2 
      000BDB 92 DF 28         [ 5] 2354         ldw ([YTEMP],x),y 
      000BDE 85               [ 2] 2355         popw x 
      000BDF 1C 00 04         [ 2] 2356         addw x,#4 ; DDROP 
      000BE2 81               [ 4] 2357         ret 
                                   2358 
                                   2359 ;       2@      ( a -- d )
                                   2360 ;       Fetch double integer from address a.
      000BE3 0B BF                 2361         .word      LINK
                           000BE5  2362 LINK = . 
      000BE5 02                    2363         .byte      2
      000BE6 32 40                 2364         .ascii     "2@"
      000BE8                       2365 DAT:
      000BE8 90 93            [ 1] 2366         ldw y,x 
      000BEA 90 FE            [ 2] 2367         ldw y,(y) ;address 
      000BEC 90 BF 28         [ 2] 2368         ldw YTEMP,y 
      000BEF 1D 00 02         [ 2] 2369         subw x,#CELLL ; space for udh 
      000BF2 91 CE 28         [ 5] 2370         ldw y,[YTEMP] ; udh 
      000BF5 FF               [ 2] 2371         ldw (x),y 
      000BF6 90 AE 00 02      [ 2] 2372         ldw y,#2
      000BFA 91 DE 28         [ 5] 2373         ldw y,([YTEMP],y) ; udl 
      000BFD EF 02            [ 2] 2374         ldw (2,x),y
      000BFF 81               [ 4] 2375         ret 
                                   2376 
                                   2377 ;       COUNT   ( b -- b +n )
                                   2378 ;       Return count byte of a string
                                   2379 ;       and add 1 to byte address.
      000C00 0B E5                 2380         .word      LINK
                           000C02  2381 LINK = . 
      000C02 05                    2382         .byte      5
      000C03 43 4F 55 4E 54        2383         .ascii     "COUNT"
      000C08                       2384 COUNT:
      000C08 90 93            [ 1] 2385         ldw y,x 
      000C0A 90 FE            [ 2] 2386         ldw y,(y) ; address 
      000C0C 90 F6            [ 1] 2387         ld a,(y)  ; count 
      000C0E 90 5C            [ 1] 2388         incw y 
      000C10 FF               [ 2] 2389         ldw (x),y 
      000C11 1D 00 02         [ 2] 2390         subw x,#CELLL 
      000C14 E7 01            [ 1] 2391         ld (1,x),a 
      000C16 7F               [ 1] 2392         clr (x)
      000C17 81               [ 4] 2393         ret 
                                   2394 
                                   2395 ;       HERE    ( -- a )
                                   2396 ;       Return  top of  variables
      000C18 0C 02                 2397         .word      LINK
                           000C1A  2398 LINK = . 
      000C1A 04                    2399         .byte      4
      000C1B 48 45 52 45           2400         .ascii     "HERE"
      000C1F                       2401 HERE:
      000C1F 90 AE 00 1A      [ 2] 2402       	ldw y,#UVP 
      000C23 90 FE            [ 2] 2403         ldw y,(y)
      000C25 1D 00 02         [ 2] 2404         subw x,#CELLL 
      000C28 FF               [ 2] 2405         ldw (x),y 
      000C29 81               [ 4] 2406         ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



                                   2407 
                                   2408 ;       PAD     ( -- a )
                                   2409 ;       Return address of text buffer
                                   2410 ;       above  code dictionary.
      000C2A 0C 1A                 2411         .word      LINK
                           000C2C  2412 LINK = . 
      000C2C 03                    2413         .byte      3
      000C2D 50 41 44              2414         .ascii     "PAD"
      000C30                       2415 PAD:
      000C30 CD 0C 1F         [ 4] 2416         CALL     HERE
      000C33 CD 04 73         [ 4] 2417         CALL     DOLIT
      000C36 00 50                 2418         .word      80
      000C38 CC 07 C7         [ 2] 2419         JP     PLUS
                                   2420 
                                   2421 ;       TIB     ( -- a )
                                   2422 ;       Return address of terminal input buffer.
      000C3B 0C 2C                 2423         .word      LINK
                           000C3D  2424 LINK = . 
      000C3D 03                    2425         .byte      3
      000C3E 54 49 42              2426         .ascii     "TIB"
      000C41                       2427 TIB:
      000C41 CD 06 96         [ 4] 2428         CALL     NTIB
      000C44 CD 0A 9A         [ 4] 2429         CALL     CELLP
      000C47 CC 04 F1         [ 2] 2430         JP     AT
                                   2431 
                                   2432 ;       @EXECUTE        ( a -- )
                                   2433 ;       Execute vector stored in address a.
      000C4A 0C 3D                 2434         .word      LINK
                           000C4C  2435 LINK = . 
      000C4C 08                    2436         .byte      8
      000C4D 40 45 58 45 43 55 54  2437         .ascii     "@EXECUTE"
             45
      000C55                       2438 ATEXE:
      000C55 CD 04 F1         [ 4] 2439         CALL     AT
      000C58 CD 07 55         [ 4] 2440         CALL     QDUP    ;?address or zero
      000C5B CD 04 A6         [ 4] 2441         CALL     QBRAN
      000C5E 0C 63                 2442         .word      EXE1
      000C60 CD 04 CD         [ 4] 2443         CALL     EXECU   ;execute if non-zero
      000C63 81               [ 4] 2444 EXE1:   RET     ;do nothing if zero
                                   2445 
                                   2446 ;       CMOVE   ( b1 b2 u -- )
                                   2447 ;       Copy u bytes from b1 to b2.
      000C64 0C 4C                 2448         .word      LINK
                           000C66  2449 LINK = . 
      000C66 05                    2450         .byte      5
      000C67 43 4D 4F 56 45        2451         .ascii     "CMOVE"
      000C6C                       2452 CMOVE:
      000C6C CD 05 61         [ 4] 2453         CALL	TOR
      000C6F CD 04 BD         [ 4] 2454         CALL	BRAN
      000C72 0C 8C                 2455         .word	CMOV2
      000C74 CD 05 61         [ 4] 2456 CMOV1:	CALL	TOR
      000C77 CD 05 98         [ 4] 2457         CALL	DUPP
      000C7A CD 05 0F         [ 4] 2458         CALL	CAT
      000C7D CD 05 55         [ 4] 2459         CALL	RAT
      000C80 CD 04 FE         [ 4] 2460         CALL	CSTOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000C83 CD 0A C5         [ 4] 2461         CALL	ONEP
      000C86 CD 05 42         [ 4] 2462         CALL	RFROM
      000C89 CD 0A C5         [ 4] 2463         CALL	ONEP
      000C8C CD 04 87         [ 4] 2464 CMOV2:	CALL	DONXT
      000C8F 0C 74                 2465         .word	CMOV1
      000C91 CC 07 A7         [ 2] 2466         JP	DDROP
                                   2467 
                                   2468 ;       FILL    ( b u c -- )
                                   2469 ;       Fill u bytes of character c
                                   2470 ;       to area beginning at b.
      000C94 0C 66                 2471         .word       LINK
                           000C96  2472 LINK = . 
      000C96 04                    2473         .byte       4
      000C97 46 49 4C 4C           2474         .ascii     "FILL"
      000C9B                       2475 FILL:
      000C9B 90 93            [ 1] 2476         ldw y,x 
      000C9D 90 E6 01         [ 1] 2477         ld a,(1,y) ; c 
      000CA0 1C 00 02         [ 2] 2478         addw x,#CELLL ; drop c 
      000CA3 90 93            [ 1] 2479         ldw y,x 
      000CA5 90 FE            [ 2] 2480         ldw y,(y) ; count
      000CA7 90 89            [ 2] 2481         pushw y 
      000CA9 1C 00 02         [ 2] 2482         addw x,#CELLL ; drop u 
      000CAC 90 93            [ 1] 2483         ldw y,x 
      000CAE 1C 00 02         [ 2] 2484         addw x,#CELLL ; drop b 
      000CB1 90 FE            [ 2] 2485         ldw y,(y) ; address
      000CB3 90 BF 28         [ 2] 2486         ldw YTEMP,y
      000CB6 90 85            [ 2] 2487         popw y ; count 
      000CB8                       2488 FILL1:  
      000CB8 92 C7 28         [ 4] 2489         ld [YTEMP],a 
      000CBB 3C 29            [ 1] 2490         inc YTEMP+1
      000CBD 24 02            [ 1] 2491         jrnc FILL2 
      000CBF 3C 28            [ 1] 2492         inc YTEMP
      000CC1                       2493 FILL2: 
      000CC1 90 5A            [ 2] 2494         decw y ; count 
      000CC3 26 F3            [ 1] 2495         jrne FILL1  
      000CC5 81               [ 4] 2496         ret 
                                   2497 
                                   2498 ;       ERASE   ( b u -- )
                                   2499 ;       Erase u bytes beginning at b.
      000CC6 0C 96                 2500         .word      LINK
                           000CC8  2501 LINK = . 
      000CC8 05                    2502         .byte      5
      000CC9 45 52 41 53 45        2503         .ascii     "ERASE"
      000CCE                       2504 ERASE:
      000CCE 90 5F            [ 1] 2505         clrw y 
      000CD0 1D 00 02         [ 2] 2506         subw x,#CELLL 
      000CD3 FF               [ 2] 2507         ldw (x),y 
      000CD4 CC 0C 9B         [ 2] 2508         jp FILL 
                                   2509 
                                   2510 
                                   2511 ;       PACK0   ( b u a -- a )
                                   2512 ;       Build a counted string with
                                   2513 ;       u characters from b. Null fill.
      000CD7 0C C8                 2514         .word      LINK
                           000CD9  2515 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000CD9 05                    2516         .byte      5
      000CDA 50 41 43 4B 30        2517         .ascii     "PACK0"
      000CDF                       2518 PACKS:
      000CDF CD 05 98         [ 4] 2519         CALL     DUPP
      000CE2 CD 05 61         [ 4] 2520         CALL     TOR     ;strings only on cell boundary
      000CE5 CD 07 B2         [ 4] 2521         CALL     DDUP
      000CE8 CD 04 FE         [ 4] 2522         CALL     CSTOR
      000CEB CD 0A C5         [ 4] 2523         CALL     ONEP ;save count
      000CEE CD 05 A8         [ 4] 2524         CALL     SWAPP
      000CF1 CD 0C 6C         [ 4] 2525         CALL     CMOVE
      000CF4 CD 05 42         [ 4] 2526         CALL     RFROM
      000CF7 81               [ 4] 2527         RET
                                   2528 
                                   2529 ;; Numeric output, single precision
                                   2530 
                                   2531 ;       DIGIT   ( u -- c )
                                   2532 ;       Convert digit u to a character.
      000CF8 0C D9                 2533         .word      LINK
                           000CFA  2534 LINK = . 
      000CFA 05                    2535         .byte      5
      000CFB 44 49 47 49 54        2536         .ascii     "DIGIT"
      000D00                       2537 DIGIT:
      000D00 CD 04 73         [ 4] 2538         CALL	DOLIT
      000D03 00 09                 2539         .word	9
      000D05 CD 05 C2         [ 4] 2540         CALL	OVER
      000D08 CD 08 A5         [ 4] 2541         CALL	LESS
      000D0B CD 04 73         [ 4] 2542         CALL	DOLIT
      000D0E 00 07                 2543         .word	7
      000D10 CD 05 F7         [ 4] 2544         CALL	ANDD
      000D13 CD 07 C7         [ 4] 2545         CALL	PLUS
      000D16 CD 04 73         [ 4] 2546         CALL	DOLIT
      000D19 00 30                 2547         .word	48	;'0'
      000D1B CC 07 C7         [ 2] 2548         JP	PLUS
                                   2549 
                                   2550 ;       EXTRACT ( n base -- n c )
                                   2551 ;       Extract least significant digit from n.
      000D1E 0C FA                 2552         .word      LINK
                           000D20  2553 LINK = . 
      000D20 07                    2554         .byte      7
      000D21 45 58 54 52 41 43 54  2555         .ascii     "EXTRACT"
      000D28                       2556 EXTRC:
      000D28 CD 0B 31         [ 4] 2557         CALL     ZERO
      000D2B CD 05 A8         [ 4] 2558         CALL     SWAPP
      000D2E CD 09 3B         [ 4] 2559         CALL     UMMOD
      000D31 CD 05 A8         [ 4] 2560         CALL     SWAPP
      000D34 CC 0D 00         [ 2] 2561         JP     DIGIT
                                   2562 
                                   2563 ;       <#      ( -- )
                                   2564 ;       Initiate  numeric output process.
      000D37 0D 20                 2565         .word      LINK
                           000D39  2566 LINK = . 
      000D39 02                    2567         .byte      2
      000D3A 3C 23                 2568         .ascii     "<#"
      000D3C                       2569 BDIGS:
      000D3C CD 0C 30         [ 4] 2570         CALL     PAD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000D3F CD 06 D8         [ 4] 2571         CALL     HLD
      000D42 CC 04 DA         [ 2] 2572         JP     STORE
                                   2573 
                                   2574 ;       HOLD    ( c -- )
                                   2575 ;       Insert a character into output string.
      000D45 0D 39                 2576         .word      LINK
                           000D47  2577 LINK = . 
      000D47 04                    2578         .byte      4
      000D48 48 4F 4C 44           2579         .ascii     "HOLD"
      000D4C                       2580 HOLD:
      000D4C CD 06 D8         [ 4] 2581         CALL     HLD
      000D4F CD 04 F1         [ 4] 2582         CALL     AT
      000D52 CD 0A D2         [ 4] 2583         CALL     ONEM
      000D55 CD 05 98         [ 4] 2584         CALL     DUPP
      000D58 CD 06 D8         [ 4] 2585         CALL     HLD
      000D5B CD 04 DA         [ 4] 2586         CALL     STORE
      000D5E CC 04 FE         [ 2] 2587         JP     CSTOR
                                   2588 
                                   2589 ;       #       ( u -- u )
                                   2590 ;       Extract one digit from u and
                                   2591 ;       append digit to output string.
      000D61 0D 47                 2592         .word      LINK
                           000D63  2593 LINK = . 
      000D63 01                    2594         .byte      1
      000D64 23                    2595         .ascii     "#"
      000D65                       2596 DIG:
      000D65 CD 06 68         [ 4] 2597         CALL     BASE
      000D68 CD 04 F1         [ 4] 2598         CALL     AT
      000D6B CD 0D 28         [ 4] 2599         CALL     EXTRC
      000D6E CC 0D 4C         [ 2] 2600         JP     HOLD
                                   2601 
                                   2602 ;       #S      ( u -- 0 )
                                   2603 ;       Convert u until all digits
                                   2604 ;       are added to output string.
      000D71 0D 63                 2605         .word      LINK
                           000D73  2606 LINK = . 
      000D73 02                    2607         .byte      2
      000D74 23 53                 2608         .ascii     "#S"
      000D76                       2609 DIGS:
      000D76 CD 0D 65         [ 4] 2610 DIGS1:  CALL     DIG
      000D79 CD 05 98         [ 4] 2611         CALL     DUPP
      000D7C CD 04 A6         [ 4] 2612         CALL     QBRAN
      000D7F 0D 83                 2613         .word      DIGS2
      000D81 20 F3            [ 2] 2614         JRA     DIGS1
      000D83 81               [ 4] 2615 DIGS2:  RET
                                   2616 
                                   2617 ;       SIGN    ( n -- )
                                   2618 ;       Add a minus sign to
                                   2619 ;       numeric output string.
      000D84 0D 73                 2620         .word      LINK
                           000D86  2621 LINK = . 
      000D86 04                    2622         .byte      4
      000D87 53 49 47 4E           2623         .ascii     "SIGN"
      000D8B                       2624 SIGN:
      000D8B CD 05 D1         [ 4] 2625         CALL     ZLESS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000D8E CD 04 A6         [ 4] 2626         CALL     QBRAN
      000D91 0D 9B                 2627         .word      SIGN1
      000D93 CD 04 73         [ 4] 2628         CALL     DOLIT
      000D96 00 2D                 2629         .word      45	;"-"
      000D98 CC 0D 4C         [ 2] 2630         JP     HOLD
      000D9B 81               [ 4] 2631 SIGN1:  RET
                                   2632 
                                   2633 ;       #>      ( w -- b u )
                                   2634 ;       Prepare output string.
      000D9C 0D 86                 2635         .word      LINK
                           000D9E  2636 LINK = . 
      000D9E 02                    2637         .byte      2
      000D9F 23 3E                 2638         .ascii     "#>"
      000DA1                       2639 EDIGS:
      000DA1 CD 05 8E         [ 4] 2640         CALL     DROP
      000DA4 CD 06 D8         [ 4] 2641         CALL     HLD
      000DA7 CD 04 F1         [ 4] 2642         CALL     AT
      000DAA CD 0C 30         [ 4] 2643         CALL     PAD
      000DAD CD 05 C2         [ 4] 2644         CALL     OVER
      000DB0 CC 08 40         [ 2] 2645         JP     SUBB
                                   2646 
                                   2647 ;       str     ( w -- b u )
                                   2648 ;       Convert a signed integer
                                   2649 ;       to a numeric string.
      000DB3 0D 9E                 2650         .word      LINK
                           000DB5  2651 LINK = . 
      000DB5 03                    2652         .byte      3
      000DB6 53 54 52              2653         .ascii     "STR"
      000DB9                       2654 STR:
      000DB9 CD 05 98         [ 4] 2655         CALL     DUPP
      000DBC CD 05 61         [ 4] 2656         CALL     TOR
      000DBF CD 08 5A         [ 4] 2657         CALL     ABSS
      000DC2 CD 0D 3C         [ 4] 2658         CALL     BDIGS
      000DC5 CD 0D 76         [ 4] 2659         CALL     DIGS
      000DC8 CD 05 42         [ 4] 2660         CALL     RFROM
      000DCB CD 0D 8B         [ 4] 2661         CALL     SIGN
      000DCE CC 0D A1         [ 2] 2662         JP     EDIGS
                                   2663 
                                   2664 ;       HEX     ( -- )
                                   2665 ;       Use radix 16 as base for
                                   2666 ;       numeric conversions.
      000DD1 0D B5                 2667         .word      LINK
                           000DD3  2668 LINK = . 
      000DD3 03                    2669         .byte      3
      000DD4 48 45 58              2670         .ascii     "HEX"
      000DD7                       2671 HEX:
      000DD7 CD 04 73         [ 4] 2672         CALL     DOLIT
      000DDA 00 10                 2673         .word      16
      000DDC CD 06 68         [ 4] 2674         CALL     BASE
      000DDF CC 04 DA         [ 2] 2675         JP     STORE
                                   2676 
                                   2677 ;       DECIMAL ( -- )
                                   2678 ;       Use radix 10 as base
                                   2679 ;       for numeric conversions.
      000DE2 0D D3                 2680         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



                           000DE4  2681 LINK = . 
      000DE4 07                    2682         .byte      7
      000DE5 44 45 43 49 4D 41 4C  2683         .ascii     "DECIMAL"
      000DEC                       2684 DECIM:
      000DEC CD 04 73         [ 4] 2685         CALL     DOLIT
      000DEF 00 0A                 2686         .word      10
      000DF1 CD 06 68         [ 4] 2687         CALL     BASE
      000DF4 CC 04 DA         [ 2] 2688         JP     STORE
                                   2689 
                                   2690 ;; Numeric input, single precision
                                   2691 
                                   2692 ;       DIGIT?  ( c base -- u t )
                                   2693 ;       Convert a character to its numeric
                                   2694 ;       value. A flag indicates success.
      000DF7 0D E4                 2695         .word      LINK
                           000DF9  2696 LINK = . 
      000DF9 06                    2697         .byte       6
      000DFA 44 49 47 49 54 3F     2698         .ascii     "DIGIT?"
      000E00                       2699 DIGTQ:
      000E00 CD 05 61         [ 4] 2700         CALL     TOR
      000E03 CD 04 73         [ 4] 2701         CALL     DOLIT
      000E06 00 30                 2702         .word     48	; "0"
      000E08 CD 08 40         [ 4] 2703         CALL     SUBB
      000E0B CD 04 73         [ 4] 2704         CALL     DOLIT
      000E0E 00 09                 2705         .word      9
      000E10 CD 05 C2         [ 4] 2706         CALL     OVER
      000E13 CD 08 A5         [ 4] 2707         CALL     LESS
      000E16 CD 04 A6         [ 4] 2708         CALL     QBRAN
      000E19 0E 31                 2709         .word      DGTQ1
      000E1B CD 04 73         [ 4] 2710         CALL     DOLIT
      000E1E 00 07                 2711         .word      7
      000E20 CD 08 40         [ 4] 2712         CALL     SUBB
      000E23 CD 05 98         [ 4] 2713         CALL     DUPP
      000E26 CD 04 73         [ 4] 2714         CALL     DOLIT
      000E29 00 0A                 2715         .word      10
      000E2B CD 08 A5         [ 4] 2716         CALL     LESS
      000E2E CD 06 0B         [ 4] 2717         CALL     ORR
      000E31 CD 05 98         [ 4] 2718 DGTQ1:  CALL     DUPP
      000E34 CD 05 42         [ 4] 2719         CALL     RFROM
      000E37 CC 08 87         [ 2] 2720         JP     ULESS
                                   2721 
                           000001  2722 .if  WANT_DOUBLE
                           000000  2723 .else 
                                   2724 ;       NUMBER? ( a -- n T | a F )
                                   2725 ;       Convert a number string to
                                   2726 ;       integer. Push a flag on tos.
                                   2727         .word      LINK
                                   2728 LINK = . 
                                   2729         .byte      7
                                   2730         .ascii     "NUMBER?"
                                   2731 NUMBQ:
                                   2732         CALL     BASE
                                   2733         CALL     AT
                                   2734         CALL     TOR
                                   2735         CALL     ZERO
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



                                   2736         CALL     OVER
                                   2737         CALL     COUNT
                                   2738         CALL     OVER
                                   2739         CALL     CAT
                                   2740         CALL     DOLIT
                                   2741         .word     36	; "0x"
                                   2742         CALL     EQUAL
                                   2743         CALL     QBRAN
                                   2744         .word      NUMQ1
                                   2745         CALL     HEX
                                   2746         CALL     SWAPP
                                   2747         CALL     ONEP
                                   2748         CALL     SWAPP
                                   2749         CALL     ONEM
                                   2750 NUMQ1:  CALL     OVER
                                   2751         CALL     CAT
                                   2752         CALL     DOLIT
                                   2753         .word     45	; "-"
                                   2754         CALL     EQUAL
                                   2755         CALL     TOR
                                   2756         CALL     SWAPP
                                   2757         CALL     RAT
                                   2758         CALL     SUBB
                                   2759         CALL     SWAPP
                                   2760         CALL     RAT
                                   2761         CALL     PLUS
                                   2762         CALL     QDUP
                                   2763         CALL     QBRAN
                                   2764         .word      NUMQ6
                                   2765         CALL     ONEM
                                   2766         CALL     TOR
                                   2767 NUMQ2:  CALL     DUPP
                                   2768         CALL     TOR
                                   2769         CALL     CAT
                                   2770         CALL     BASE
                                   2771         CALL     AT
                                   2772         CALL     DIGTQ
                                   2773         CALL     QBRAN
                                   2774         .word      NUMQ4
                                   2775         CALL     SWAPP
                                   2776         CALL     BASE
                                   2777         CALL     AT
                                   2778         CALL     STAR
                                   2779         CALL     PLUS
                                   2780         CALL     RFROM
                                   2781         CALL     ONEP
                                   2782         CALL     DONXT
                                   2783         .word      NUMQ2
                                   2784         CALL     RAT
                                   2785         CALL     SWAPP
                                   2786         CALL     DROP
                                   2787         CALL     QBRAN
                                   2788         .word      NUMQ3
                                   2789         CALL     NEGAT
                                   2790 NUMQ3:  CALL     SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                   2791         JRA     NUMQ5
                                   2792 NUMQ4:  CALL     RFROM
                                   2793         CALL     RFROM
                                   2794         CALL     DDROP
                                   2795         CALL     DDROP
                                   2796         CALL     ZERO
                                   2797 NUMQ5:  CALL     DUPP
                                   2798 NUMQ6:  CALL     RFROM
                                   2799         CALL     DDROP
                                   2800         CALL     RFROM
                                   2801         CALL     BASE
                                   2802         JP     STORE
                                   2803 .endif ; WANT_DOUBLE  
                                   2804 
                                   2805 ;; Basic I/O
                                   2806 
                                   2807 ;       KEY     ( -- c )
                                   2808 ;       Wait for and return an
                                   2809 ;       input character.
      000E3A 0D F9                 2810         .word      LINK
                           000E3C  2811 LINK = . 
      000E3C 03                    2812         .byte      3
      000E3D 4B 45 59              2813         .ascii     "KEY"
      000E40                       2814 KEY:
      000E40 72 0B 52 30 FB   [ 2] 2815         btjf UART_SR,#UART_SR_RXNE,. 
      000E45 C6 52 31         [ 1] 2816         ld a,UART_DR 
      000E48 1D 00 02         [ 2] 2817         subw x,#CELLL 
      000E4B E7 01            [ 1] 2818         ld (1,x),a 
      000E4D 7F               [ 1] 2819         clr (x)
      000E4E 81               [ 4] 2820         ret 
                                   2821 
                                   2822 ;       NUF?    ( -- t )
                                   2823 ;       Return false if no input,
                                   2824 ;       else pause and if CR return true.
      000E4F 0E 3C                 2825         .word      LINK
                           000E51  2826 LINK = . 
      000E51 04                    2827         .byte      4
      000E52 4E 55 46 3F           2828         .ascii     "NUF?"
      000E56                       2829 NUFQ:
      000E56 CD 04 1A         [ 4] 2830         CALL     QKEY
      000E59 CD 05 98         [ 4] 2831         CALL     DUPP
      000E5C CD 04 A6         [ 4] 2832         CALL     QBRAN
      000E5F 0E 6F                 2833         .word    NUFQ1
      000E61 CD 07 A7         [ 4] 2834         CALL     DDROP
      000E64 CD 0E 40         [ 4] 2835         CALL     KEY
      000E67 CD 04 73         [ 4] 2836         CALL     DOLIT
      000E6A 00 0D                 2837         .word      CRR
      000E6C CC 08 68         [ 2] 2838         JP     EQUAL
      000E6F 81               [ 4] 2839 NUFQ1:  RET
                                   2840 
                                   2841 ;       SPACE   ( -- )
                                   2842 ;       Send  blank character to
                                   2843 ;       output device.
      000E70 0E 51                 2844         .word      LINK
                           000E72  2845 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000E72 05                    2846         .byte      5
      000E73 53 50 41 43 45        2847         .ascii     "SPACE"
      000E78                       2848 SPACE:
      000E78 CD 0B 24         [ 4] 2849         CALL     BLANK
      000E7B CC 04 38         [ 2] 2850         JP     EMIT
                                   2851 
                                   2852 ;       SPACES  ( +n -- )
                                   2853 ;       Send n spaces to output device.
      000E7E 0E 72                 2854         .word      LINK
                           000E80  2855 LINK = . 
      000E80 06                    2856         .byte      6
      000E81 53 50 41 43 45 53     2857         .ascii     "SPACES"
      000E87                       2858 SPACS:
      000E87 CD 0B 31         [ 4] 2859         CALL     ZERO
      000E8A CD 08 E3         [ 4] 2860         CALL     MAX
      000E8D CD 05 61         [ 4] 2861         CALL     TOR
      000E90 20 03            [ 2] 2862         JRA      CHAR2
      000E92 CD 0E 78         [ 4] 2863 CHAR1:  CALL     SPACE
      000E95 CD 04 87         [ 4] 2864 CHAR2:  CALL     DONXT
      000E98 0E 92                 2865         .word    CHAR1
      000E9A 81               [ 4] 2866         RET
                                   2867 
                                   2868 ;       TYPE    ( b u -- )
                                   2869 ;       Output u characters from b.
      000E9B 0E 80                 2870         .word      LINK
                           000E9D  2871 LINK = . 
      000E9D 04                    2872         .byte      4
      000E9E 54 59 50 45           2873         .ascii     "TYPE"
      000EA2                       2874 TYPES:
      000EA2 CD 05 61         [ 4] 2875         CALL     TOR
      000EA5 20 0C            [ 2] 2876         JRA     TYPE2
      000EA7 CD 05 98         [ 4] 2877 TYPE1:  CALL     DUPP
      000EAA CD 05 0F         [ 4] 2878         CALL     CAT
      000EAD CD 04 38         [ 4] 2879         CALL     EMIT
      000EB0 CD 0A C5         [ 4] 2880         CALL     ONEP
      000EB3 CD 04 87         [ 4] 2881 TYPE2:  CALL     DONXT
      000EB6 0E A7                 2882         .word      TYPE1
      000EB8 CC 05 8E         [ 2] 2883         JP     DROP
                                   2884 
                                   2885 ;       CR      ( -- )
                                   2886 ;       Output a carriage return
                                   2887 ;       and a line feed.
      000EBB 0E 9D                 2888         .word      LINK
                           000EBD  2889 LINK = . 
      000EBD 02                    2890         .byte      2
      000EBE 43 52                 2891         .ascii     "CR"
      000EC0                       2892 CR:
      000EC0 CD 04 73         [ 4] 2893         CALL     DOLIT
      000EC3 00 0D                 2894         .word      CRR
      000EC5 CD 04 38         [ 4] 2895         CALL     EMIT
      000EC8 CD 04 73         [ 4] 2896         CALL     DOLIT
      000ECB 00 0A                 2897         .word      LF
      000ECD CC 04 38         [ 2] 2898         JP     EMIT
                                   2899 
                                   2900 ;       do$     ( -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



                                   2901 ;       Return  address of a compiled
                                   2902 ;       string.
      000ED0 0E BD                 2903         .word      LINK
                           000ED2  2904 LINK = . 
      000ED2 43                    2905 	.byte      COMPO+3
      000ED3 44 4F 24              2906         .ascii     "DO$"
      000ED6                       2907 DOSTR:
      000ED6 CD 05 42         [ 4] 2908         CALL     RFROM
      000ED9 CD 05 55         [ 4] 2909         CALL     RAT
      000EDC CD 05 42         [ 4] 2910         CALL     RFROM
      000EDF CD 0C 08         [ 4] 2911         CALL     COUNT
      000EE2 CD 07 C7         [ 4] 2912         CALL     PLUS
      000EE5 CD 05 61         [ 4] 2913         CALL     TOR
      000EE8 CD 05 A8         [ 4] 2914         CALL     SWAPP
      000EEB CD 05 61         [ 4] 2915         CALL     TOR
      000EEE 81               [ 4] 2916         RET
                                   2917 
                                   2918 ;       $"|     ( -- a )
                                   2919 ;       Run time routine compiled by $".
                                   2920 ;       Return address of a compiled string.
      000EEF 0E D2                 2921         .word      LINK
                           000EF1  2922 LINK = . 
      000EF1 43                    2923 	.byte      COMPO+3
      000EF2 24 22 7C              2924         .byte     '$','"','|'
      000EF5                       2925 STRQP:
      000EF5 CD 0E D6         [ 4] 2926         CALL     DOSTR
      000EF8 81               [ 4] 2927         RET
                                   2928 
                                   2929 ;       ."|     ( -- )
                                   2930 ;       Run time routine of ." .
                                   2931 ;       Output a compiled string.
      000EF9 0E F1                 2932         .word      LINK
                           000EFB  2933 LINK = . 
      000EFB 43                    2934 	.byte      COMPO+3
      000EFC 2E 22 7C              2935         .byte     '.','"','|'
      000EFF                       2936 DOTQP:
      000EFF CD 0E D6         [ 4] 2937         CALL     DOSTR
      000F02 CD 0C 08         [ 4] 2938         CALL     COUNT
      000F05 CC 0E A2         [ 2] 2939         JP     TYPES
                                   2940 
                                   2941 ;       .R      ( n +n -- )
                                   2942 ;       Display an integer in a field
                                   2943 ;       of n columns, right justified.
      000F08 0E FB                 2944         .word      LINK
                           000F0A  2945 LINK = . 
      000F0A 02                    2946         .byte      2
      000F0B 2E 52                 2947         .ascii     ".R"
      000F0D                       2948 DOTR:
      000F0D CD 05 61         [ 4] 2949         CALL     TOR
      000F10 CD 0D B9         [ 4] 2950         CALL     STR
      000F13 CD 05 42         [ 4] 2951         CALL     RFROM
      000F16 CD 05 C2         [ 4] 2952         CALL     OVER
      000F19 CD 08 40         [ 4] 2953         CALL     SUBB
      000F1C CD 0E 87         [ 4] 2954         CALL     SPACS
      000F1F CC 0E A2         [ 2] 2955         JP     TYPES
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



                                   2956 
                                   2957 ;       U.R     ( u +n -- )
                                   2958 ;       Display an unsigned integer
                                   2959 ;       in n column, right justified.
      000F22 0F 0A                 2960         .word      LINK
                           000F24  2961 LINK = . 
      000F24 03                    2962         .byte      3
      000F25 55 2E 52              2963         .ascii     "U.R"
      000F28                       2964 UDOTR:
      000F28 CD 05 61         [ 4] 2965         CALL     TOR
      000F2B CD 0D 3C         [ 4] 2966         CALL     BDIGS
      000F2E CD 0D 76         [ 4] 2967         CALL     DIGS
      000F31 CD 0D A1         [ 4] 2968         CALL     EDIGS
      000F34 CD 05 42         [ 4] 2969         CALL     RFROM
      000F37 CD 05 C2         [ 4] 2970         CALL     OVER
      000F3A CD 08 40         [ 4] 2971         CALL     SUBB
      000F3D CD 0E 87         [ 4] 2972         CALL     SPACS
      000F40 CC 0E A2         [ 2] 2973         JP     TYPES
                                   2974 
                                   2975 ;       U.      ( u -- )
                                   2976 ;       Display an unsigned integer
                                   2977 ;       in free format.
      000F43 0F 24                 2978         .word      LINK
                           000F45  2979 LINK = . 
      000F45 02                    2980         .byte      2
      000F46 55 2E                 2981         .ascii     "U."
      000F48                       2982 UDOT:
      000F48 CD 0D 3C         [ 4] 2983         CALL     BDIGS
      000F4B CD 0D 76         [ 4] 2984         CALL     DIGS
      000F4E CD 0D A1         [ 4] 2985         CALL     EDIGS
      000F51 CD 0E 78         [ 4] 2986         CALL     SPACE
      000F54 CC 0E A2         [ 2] 2987         JP     TYPES
                                   2988 
                                   2989 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2990 ;   H. ( n -- )
                                   2991 ;   display n in hexadecimal 
                                   2992 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F57                       2993         _HEADER HDOT,2,"H."
      000F57 0F 45                    1         .word LINK 
                           000F59     2         LINK=.
      000F59 02                       3         .byte 2  
      000F5A 48 2E                    4         .ascii "H."
      000F5C                          5         HDOT:
      000F5C CD 06 68         [ 4] 2994         CALL BASE 
      000F5F CD 04 F1         [ 4] 2995         CALL AT 
      000F62 CD 05 61         [ 4] 2996         CALL TOR 
      000F65 CD 0D D7         [ 4] 2997         CALL HEX 
      000F68 CD 0F 48         [ 4] 2998         CALL UDOT 
      000F6B CD 05 42         [ 4] 2999         CALL RFROM 
      000F6E CD 06 68         [ 4] 3000         CALL BASE 
      000F71 CD 04 DA         [ 4] 3001         CALL STORE 
      000F74 81               [ 4] 3002         RET 
                                   3003 
                                   3004 
                                   3005 ;       .       ( w -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



                                   3006 ;       Display an integer in free
                                   3007 ;       format, preceeded by a space.
      000F75 0F 59                 3008         .word      LINK
                           000F77  3009 LINK = . 
      000F77 01                    3010         .byte      1
      000F78 2E                    3011         .ascii     "."
      000F79                       3012 DOT:
      000F79 CD 06 68         [ 4] 3013         CALL     BASE
      000F7C CD 04 F1         [ 4] 3014         CALL     AT
      000F7F CD 04 73         [ 4] 3015         CALL     DOLIT
      000F82 00 0A                 3016         .word      10
      000F84 CD 06 20         [ 4] 3017         CALL     XORR    ;?decimal
      000F87 CD 04 A6         [ 4] 3018         CALL     QBRAN
      000F8A 0F 8F                 3019         .word      DOT1
      000F8C CC 0F 48         [ 2] 3020         JP     UDOT
      000F8F CD 0D B9         [ 4] 3021 DOT1:   CALL     STR
      000F92 CD 0E 78         [ 4] 3022         CALL     SPACE
      000F95 CC 0E A2         [ 2] 3023         JP     TYPES
                                   3024 
                                   3025 ;       ?       ( a -- )
                                   3026 ;       Display contents in memory cell.
      000F98 0F 77                 3027         .word      LINK
                                   3028         
                           000F9A  3029 LINK = . 
      000F9A 01                    3030         .byte      1
      000F9B 3F                    3031         .ascii     "?"
      000F9C                       3032 QUEST:
      000F9C CD 04 F1         [ 4] 3033         CALL     AT
      000F9F CC 0F 79         [ 2] 3034         JP     DOT
                                   3035 
                                   3036 ;; Parsing
                                   3037 
                                   3038 ;       parse   ( b u c -- b u delta ; <string> )
                                   3039 ;       Scan string delimited by c.
                                   3040 ;       Return found string and its offset.
      000FA2 0F 9A                 3041         .word      LINK
                           000FA4  3042 LINK = . 
      000FA4 05                    3043         .byte      5
      000FA5 70 61 72 73 65        3044         .ascii     "parse"
      000FAA                       3045 PARS:
      000FAA CD 06 77         [ 4] 3046         CALL     TEMP
      000FAD CD 04 DA         [ 4] 3047         CALL     STORE
      000FB0 CD 05 C2         [ 4] 3048         CALL     OVER
      000FB3 CD 05 61         [ 4] 3049         CALL     TOR
      000FB6 CD 05 98         [ 4] 3050         CALL     DUPP
      000FB9 CD 04 A6         [ 4] 3051         CALL     QBRAN
      000FBC 10 62                 3052         .word    PARS8
      000FBE CD 0A D2         [ 4] 3053         CALL     ONEM
      000FC1 CD 06 77         [ 4] 3054         CALL     TEMP
      000FC4 CD 04 F1         [ 4] 3055         CALL     AT
      000FC7 CD 0B 24         [ 4] 3056         CALL     BLANK
      000FCA CD 08 68         [ 4] 3057         CALL     EQUAL
      000FCD CD 04 A6         [ 4] 3058         CALL     QBRAN
      000FD0 10 03                 3059         .word      PARS3
      000FD2 CD 05 61         [ 4] 3060         CALL     TOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      000FD5 CD 0B 24         [ 4] 3061 PARS1:  CALL     BLANK
      000FD8 CD 05 C2         [ 4] 3062         CALL     OVER
      000FDB CD 05 0F         [ 4] 3063         CALL     CAT     ;skip leading blanks ONLY
      000FDE CD 08 40         [ 4] 3064         CALL     SUBB
      000FE1 CD 05 D1         [ 4] 3065         CALL     ZLESS
      000FE4 CD 07 E1         [ 4] 3066         CALL     INVER
      000FE7 CD 04 A6         [ 4] 3067         CALL     QBRAN
      000FEA 10 00                 3068         .word      PARS2
      000FEC CD 0A C5         [ 4] 3069         CALL     ONEP
      000FEF CD 04 87         [ 4] 3070         CALL     DONXT
      000FF2 0F D5                 3071         .word      PARS1
      000FF4 CD 05 42         [ 4] 3072         CALL     RFROM
      000FF7 CD 05 8E         [ 4] 3073         CALL     DROP
      000FFA CD 0B 31         [ 4] 3074         CALL     ZERO
      000FFD CC 05 98         [ 2] 3075         JP     DUPP
      001000 CD 05 42         [ 4] 3076 PARS2:  CALL     RFROM
      001003 CD 05 C2         [ 4] 3077 PARS3:  CALL     OVER
      001006 CD 05 A8         [ 4] 3078         CALL     SWAPP
      001009 CD 05 61         [ 4] 3079         CALL     TOR
      00100C CD 06 77         [ 4] 3080 PARS4:  CALL     TEMP
      00100F CD 04 F1         [ 4] 3081         CALL     AT
      001012 CD 05 C2         [ 4] 3082         CALL     OVER
      001015 CD 05 0F         [ 4] 3083         CALL     CAT
      001018 CD 08 40         [ 4] 3084         CALL     SUBB    ;scan for delimiter
      00101B CD 06 77         [ 4] 3085         CALL     TEMP
      00101E CD 04 F1         [ 4] 3086         CALL     AT
      001021 CD 0B 24         [ 4] 3087         CALL     BLANK
      001024 CD 08 68         [ 4] 3088         CALL     EQUAL
      001027 CD 04 A6         [ 4] 3089         CALL     QBRAN
      00102A 10 2F                 3090         .word      PARS5
      00102C CD 05 D1         [ 4] 3091         CALL     ZLESS
      00102F CD 04 A6         [ 4] 3092 PARS5:  CALL     QBRAN
      001032 10 44                 3093         .word      PARS6
      001034 CD 0A C5         [ 4] 3094         CALL     ONEP
      001037 CD 04 87         [ 4] 3095         CALL     DONXT
      00103A 10 0C                 3096         .word      PARS4
      00103C CD 05 98         [ 4] 3097         CALL     DUPP
      00103F CD 05 61         [ 4] 3098         CALL     TOR
      001042 20 0F            [ 2] 3099         JRA     PARS7
      001044 CD 05 42         [ 4] 3100 PARS6:  CALL     RFROM
      001047 CD 05 8E         [ 4] 3101         CALL     DROP
      00104A CD 05 98         [ 4] 3102         CALL     DUPP
      00104D CD 0A C5         [ 4] 3103         CALL     ONEP
      001050 CD 05 61         [ 4] 3104         CALL     TOR
      001053 CD 05 C2         [ 4] 3105 PARS7:  CALL     OVER
      001056 CD 08 40         [ 4] 3106         CALL     SUBB
      001059 CD 05 42         [ 4] 3107         CALL     RFROM
      00105C CD 05 42         [ 4] 3108         CALL     RFROM
      00105F CC 08 40         [ 2] 3109         JP     SUBB
      001062 CD 05 C2         [ 4] 3110 PARS8:  CALL     OVER
      001065 CD 05 42         [ 4] 3111         CALL     RFROM
      001068 CC 08 40         [ 2] 3112         JP     SUBB
                                   3113 
                                   3114 ;       PARSE   ( c -- b u ; <string> )
                                   3115 ;       Scan input stream and return
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                   3116 ;       counted string delimited by c.
      00106B 0F A4                 3117         .word      LINK
                           00106D  3118 LINK = . 
      00106D 05                    3119         .byte      5
      00106E 50 41 52 53 45        3120         .ascii     "PARSE"
      001073                       3121 PARSE:
      001073 CD 05 61         [ 4] 3122         CALL     TOR
      001076 CD 0C 41         [ 4] 3123         CALL     TIB
      001079 CD 06 86         [ 4] 3124         CALL     INN
      00107C CD 04 F1         [ 4] 3125         CALL     AT
      00107F CD 07 C7         [ 4] 3126         CALL     PLUS    ;current input buffer pointer
      001082 CD 06 96         [ 4] 3127         CALL     NTIB
      001085 CD 04 F1         [ 4] 3128         CALL     AT
      001088 CD 06 86         [ 4] 3129         CALL     INN
      00108B CD 04 F1         [ 4] 3130         CALL     AT
      00108E CD 08 40         [ 4] 3131         CALL     SUBB    ;remaining count
      001091 CD 05 42         [ 4] 3132         CALL     RFROM
      001094 CD 0F AA         [ 4] 3133         CALL     PARS
      001097 CD 06 86         [ 4] 3134         CALL     INN
      00109A CC 0B A1         [ 2] 3135         JP     PSTOR
                                   3136 
                                   3137 ;       .(      ( -- )
                                   3138 ;       Output following string up to next ) .
      00109D 10 6D                 3139         .word      LINK
                           00109F  3140 LINK = . 
      00109F 82                    3141 	.byte      IMEDD+2
      0010A0 2E 28                 3142         .ascii     ".("
      0010A2                       3143 DOTPR:
      0010A2 CD 04 73         [ 4] 3144         CALL     DOLIT
      0010A5 00 29                 3145         .word     41	; ")"
      0010A7 CD 10 73         [ 4] 3146         CALL     PARSE
      0010AA CC 0E A2         [ 2] 3147         JP     TYPES
                                   3148 
                                   3149 ;       (       ( -- )
                                   3150 ;       Ignore following string up to next ).
                                   3151 ;       A comment.
      0010AD 10 9F                 3152         .word      LINK
                           0010AF  3153 LINK = . 
      0010AF 81                    3154 	.byte      IMEDD+1
      0010B0 28                    3155         .ascii     "("
      0010B1                       3156 PAREN:
      0010B1 CD 04 73         [ 4] 3157         CALL     DOLIT
      0010B4 00 29                 3158         .word     41	; ")"
      0010B6 CD 10 73         [ 4] 3159         CALL     PARSE
      0010B9 CC 07 A7         [ 2] 3160         JP     DDROP
                                   3161 
                                   3162 ;       \       ( -- )
                                   3163 ;       Ignore following text till
                                   3164 ;       end of line.
      0010BC 10 AF                 3165         .word      LINK
                           0010BE  3166 LINK = . 
      0010BE 81                    3167 	.byte      IMEDD+1
      0010BF 5C                    3168         .ascii     "\"
      0010C0                       3169 BKSLA:
      0010C0 90 AE 00 10      [ 2] 3170         ldw y,#UCTIB ; #TIB  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      0010C4 90 FE            [ 2] 3171         ldw y,(y)
      0010C6 90 89            [ 2] 3172         pushw y ; count in TIB 
      0010C8 90 AE 00 0E      [ 2] 3173         ldw y,#UINN ; >IN 
      0010CC 90 BF 28         [ 2] 3174         ldw YTEMP,y
      0010CF 90 85            [ 2] 3175         popw y 
      0010D1 91 CF 28         [ 5] 3176         ldw [YTEMP],y
      0010D4 81               [ 4] 3177         ret 
                                   3178 
                                   3179 ;       WORD    ( c -- a ; <string> )
                                   3180 ;       Parse a word from input stream
                                   3181 ;       and copy it to code dictionary.
      0010D5 10 BE                 3182         .word      LINK
                           0010D7  3183 LINK = . 
      0010D7 04                    3184         .byte      4
      0010D8 57 4F 52 44           3185         .ascii     "WORD"
      0010DC                       3186 WORDD:
      0010DC CD 10 73         [ 4] 3187         CALL     PARSE
      0010DF CD 0C 1F         [ 4] 3188         CALL     HERE
      0010E2 CD 0A 9A         [ 4] 3189         CALL     CELLP
                           000000  3190 .IF CASE_SENSE 
                                   3191         JP      PACKS 
                           000001  3192 .ELSE                 
      0010E5 CD 0C DF         [ 4] 3193         CALL     PACKS
                                   3194 ; uppercase TOKEN 
      0010E8 CD 05 98         [ 4] 3195         CALL    DUPP 
      0010EB CD 0C 08         [ 4] 3196         CALL    COUNT 
      0010EE CD 05 61         [ 4] 3197         CALL    TOR 
      0010F1 CD 04 BD         [ 4] 3198         CALL    BRAN 
      0010F4 11 22                 3199         .word   UPPER2  
      0010F6                       3200 UPPER:
      0010F6 CD 05 98         [ 4] 3201         CALL    DUPP 
      0010F9 CD 05 0F         [ 4] 3202         CALL    CAT
      0010FC CD 05 98         [ 4] 3203         CALL    DUPP 
      0010FF CD 04 73         [ 4] 3204         CALL   DOLIT
      001102 00 61                 3205         .word   'a' 
      001104 CD 04 73         [ 4] 3206         CALL    DOLIT
      001107 00 7B                 3207         .word   'z'+1 
      001109 CD 09 20         [ 4] 3208         CALL   WITHI 
      00110C CD 04 A6         [ 4] 3209         CALL   QBRAN
      00110F 11 19                 3210         .word  UPPER1  
      001111 CD 04 73         [ 4] 3211         CALL    DOLIT 
      001114 00 DF                 3212         .word   0xDF 
      001116 CD 05 F7         [ 4] 3213         CALL    ANDD 
      001119                       3214 UPPER1:
      001119 CD 05 C2         [ 4] 3215         CALL    OVER 
      00111C CD 04 FE         [ 4] 3216         CALL    CSTOR          
      00111F CD 0A C5         [ 4] 3217         CALL    ONEP 
      001122                       3218 UPPER2: 
      001122 CD 04 87         [ 4] 3219         CALL    DONXT
      001125 10 F6                 3220         .word   UPPER  
      001127 CD 05 8E         [ 4] 3221         CALL    DROP  
      00112A 81               [ 4] 3222         RET 
                                   3223 .ENDIF 
                                   3224 
                                   3225 ;       TOKEN   ( -- a ; <string> )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                   3226 ;       Parse a word from input stream
                                   3227 ;       and copy it to name dictionary.
      00112B 10 D7                 3228         .word      LINK
                           00112D  3229 LINK = . 
      00112D 05                    3230         .byte      5
      00112E 54 4F 4B 45 4E        3231         .ascii     "TOKEN"
      001133                       3232 TOKEN:
      001133 CD 0B 24         [ 4] 3233         CALL     BLANK
      001136 CC 10 DC         [ 2] 3234         JP     WORDD
                                   3235 
                                   3236 ;; Dictionary search
                                   3237 
                                   3238 ;       NAME>   ( na -- ca )
                                   3239 ;       Return a code address given
                                   3240 ;       a name address.
      001139 11 2D                 3241         .word      LINK
                           00113B  3242 LINK = . 
      00113B 05                    3243         .byte      5
      00113C 4E 41 4D 45 3E        3244         .ascii     "NAME>"
      001141                       3245 NAMET:
      001141 CD 0C 08         [ 4] 3246         CALL     COUNT
      001144 CD 04 73         [ 4] 3247         CALL     DOLIT
      001147 00 1F                 3248         .word      31
      001149 CD 05 F7         [ 4] 3249         CALL     ANDD
      00114C CC 07 C7         [ 2] 3250         JP     PLUS
                                   3251 
                                   3252 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   3253 ;       Compare u cells in two
                                   3254 ;       strings. Return 0 if identical.
      00114F 11 3B                 3255         .word      LINK
                           001151  3256 LINK = . 
      001151 05                    3257         .byte       5
      001152 53 41 4D 45 3F        3258         .ascii     "SAME?"
      001157                       3259 SAMEQ:
      001157 CD 0A D2         [ 4] 3260         CALL     ONEM
      00115A CD 05 61         [ 4] 3261         CALL     TOR
      00115D 20 29            [ 2] 3262         JRA     SAME2
      00115F CD 05 C2         [ 4] 3263 SAME1:  CALL     OVER
      001162 CD 05 55         [ 4] 3264         CALL     RAT
      001165 CD 07 C7         [ 4] 3265         CALL     PLUS
      001168 CD 05 0F         [ 4] 3266         CALL     CAT
      00116B CD 05 C2         [ 4] 3267         CALL     OVER
      00116E CD 05 55         [ 4] 3268         CALL     RAT
      001171 CD 07 C7         [ 4] 3269         CALL     PLUS
      001174 CD 05 0F         [ 4] 3270         CALL     CAT
      001177 CD 08 40         [ 4] 3271         CALL     SUBB
      00117A CD 07 55         [ 4] 3272         CALL     QDUP
      00117D CD 04 A6         [ 4] 3273         CALL     QBRAN
      001180 11 88                 3274         .word      SAME2
      001182 CD 05 42         [ 4] 3275         CALL     RFROM
      001185 CC 05 8E         [ 2] 3276         JP     DROP
      001188 CD 04 87         [ 4] 3277 SAME2:  CALL     DONXT
      00118B 11 5F                 3278         .word      SAME1
      00118D CC 0B 31         [ 2] 3279         JP     ZERO
                                   3280 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



                                   3281 ;       find    ( a va -- ca na | a F )
                                   3282 ;       Search vocabulary for string.
                                   3283 ;       Return ca and na if succeeded.
      001190 11 51                 3284         .word      LINK
                           001192  3285 LINK = . 
      001192 04                    3286         .byte      4
      001193 46 49 4E 44           3287         .ascii     "FIND"
      001197                       3288 FIND:
      001197 CD 05 A8         [ 4] 3289         CALL     SWAPP
      00119A CD 05 98         [ 4] 3290         CALL     DUPP
      00119D CD 05 0F         [ 4] 3291         CALL     CAT
      0011A0 CD 06 77         [ 4] 3292         CALL     TEMP
      0011A3 CD 04 DA         [ 4] 3293         CALL     STORE
      0011A6 CD 05 98         [ 4] 3294         CALL     DUPP
      0011A9 CD 04 F1         [ 4] 3295         CALL     AT
      0011AC CD 05 61         [ 4] 3296         CALL     TOR
      0011AF CD 0A 9A         [ 4] 3297         CALL     CELLP
      0011B2 CD 05 A8         [ 4] 3298         CALL     SWAPP
      0011B5 CD 04 F1         [ 4] 3299 FIND1:  CALL     AT
      0011B8 CD 05 98         [ 4] 3300         CALL     DUPP
      0011BB CD 04 A6         [ 4] 3301         CALL     QBRAN
      0011BE 11 F4                 3302         .word      FIND6
      0011C0 CD 05 98         [ 4] 3303         CALL     DUPP
      0011C3 CD 04 F1         [ 4] 3304         CALL     AT
      0011C6 CD 04 73         [ 4] 3305         CALL     DOLIT
      0011C9 1F 7F                 3306         .word      MASKK
      0011CB CD 05 F7         [ 4] 3307         CALL     ANDD
      0011CE CD 05 55         [ 4] 3308         CALL     RAT
      0011D1 CD 06 20         [ 4] 3309         CALL     XORR
      0011D4 CD 04 A6         [ 4] 3310         CALL     QBRAN
      0011D7 11 E3                 3311         .word      FIND2
      0011D9 CD 0A 9A         [ 4] 3312         CALL     CELLP
      0011DC CD 04 73         [ 4] 3313         CALL     DOLIT
      0011DF FF FF                 3314         .word     0xFFFF
      0011E1 20 0C            [ 2] 3315         JRA     FIND3
      0011E3 CD 0A 9A         [ 4] 3316 FIND2:  CALL     CELLP
      0011E6 CD 06 77         [ 4] 3317         CALL     TEMP
      0011E9 CD 04 F1         [ 4] 3318         CALL     AT
      0011EC CD 11 57         [ 4] 3319         CALL     SAMEQ
      0011EF CD 04 BD         [ 4] 3320 FIND3:  CALL     BRAN
      0011F2 12 03                 3321         .word      FIND4
      0011F4 CD 05 42         [ 4] 3322 FIND6:  CALL     RFROM
      0011F7 CD 05 8E         [ 4] 3323         CALL     DROP
      0011FA CD 05 A8         [ 4] 3324         CALL     SWAPP
      0011FD CD 0A A9         [ 4] 3325         CALL     CELLM
      001200 CC 05 A8         [ 2] 3326         JP     SWAPP
      001203 CD 04 A6         [ 4] 3327 FIND4:  CALL     QBRAN
      001206 12 10                 3328         .word      FIND5
      001208 CD 0A A9         [ 4] 3329         CALL     CELLM
      00120B CD 0A A9         [ 4] 3330         CALL     CELLM
      00120E 20 A5            [ 2] 3331         JRA     FIND1
      001210 CD 05 42         [ 4] 3332 FIND5:  CALL     RFROM
      001213 CD 05 8E         [ 4] 3333         CALL     DROP
      001216 CD 05 A8         [ 4] 3334         CALL     SWAPP
      001219 CD 05 8E         [ 4] 3335         CALL     DROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      00121C CD 0A A9         [ 4] 3336         CALL     CELLM
      00121F CD 05 98         [ 4] 3337         CALL     DUPP
      001222 CD 11 41         [ 4] 3338         CALL     NAMET
      001225 CC 05 A8         [ 2] 3339         JP     SWAPP
                                   3340 
                                   3341 ;       NAME?   ( a -- ca na | a F )
                                   3342 ;       Search vocabularies for a string.
      001228 11 92                 3343         .word      LINK
                           00122A  3344 LINK = . 
      00122A 05                    3345         .byte      5
      00122B 4E 41 4D 45 3F        3346         .ascii     "NAME?"
      001230                       3347 NAMEQ:
      001230 CD 06 EB         [ 4] 3348         CALL   CNTXT
      001233 CC 11 97         [ 2] 3349         JP     FIND
                                   3350 
                                   3351 ;; Terminal response
                                   3352 
                                   3353 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3354 ;       Backup cursor by one character.
      001236 12 2A                 3355         .word      LINK
                           001238  3356 LINK = . 
      001238 02                    3357         .byte      2
      001239 5E 48                 3358         .ascii     "^H"
      00123B                       3359 BKSP:
      00123B CD 05 61         [ 4] 3360         CALL     TOR
      00123E CD 05 C2         [ 4] 3361         CALL     OVER
      001241 CD 05 42         [ 4] 3362         CALL     RFROM
      001244 CD 05 A8         [ 4] 3363         CALL     SWAPP
      001247 CD 05 C2         [ 4] 3364         CALL     OVER
      00124A CD 06 20         [ 4] 3365         CALL     XORR
      00124D CD 04 A6         [ 4] 3366         CALL     QBRAN
      001250 12 6B                 3367         .word      BACK1
      001252 CD 04 73         [ 4] 3368         CALL     DOLIT
      001255 00 08                 3369         .word      BKSPP
      001257 CD 04 38         [ 4] 3370         CALL     EMIT
      00125A CD 0A D2         [ 4] 3371         CALL     ONEM
      00125D CD 0B 24         [ 4] 3372         CALL     BLANK
      001260 CD 04 38         [ 4] 3373         CALL     EMIT
      001263 CD 04 73         [ 4] 3374         CALL     DOLIT
      001266 00 08                 3375         .word      BKSPP
      001268 CC 04 38         [ 2] 3376         JP     EMIT
      00126B 81               [ 4] 3377 BACK1:  RET
                                   3378 
                                   3379 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3380 ;       Accept and echo key stroke
                                   3381 ;       and bump cursor.
      00126C 12 38                 3382         .word      LINK
                           00126E  3383 LINK = . 
      00126E 03                    3384         .byte      3
      00126F 54 41 50              3385         .ascii     "TAP"
      001272                       3386 TAP:
      001272 CD 05 98         [ 4] 3387         CALL     DUPP
      001275 CD 04 38         [ 4] 3388         CALL     EMIT
      001278 CD 05 C2         [ 4] 3389         CALL     OVER
      00127B CD 04 FE         [ 4] 3390         CALL     CSTOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      00127E CC 0A C5         [ 2] 3391         JP     ONEP
                                   3392 
                                   3393 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3394 ;       Process a key stroke,
                                   3395 ;       CR,LF or backspace.
      001281 12 6E                 3396         .word      LINK
                           001283  3397 LINK = . 
      001283 04                    3398         .byte      4
      001284 4B 54 41 50           3399         .ascii     "KTAP"
      001288                       3400 KTAP:
      001288 CD 05 98         [ 4] 3401         CALL     DUPP
      00128B CD 04 73         [ 4] 3402         CALL     DOLIT
                           000001  3403 .if EOL_CR
      00128E 00 0D                 3404         .word   CRR
                           000000  3405 .else ; EOL_LF 
                                   3406         .word   LF
                                   3407 .endif 
      001290 CD 06 20         [ 4] 3408         CALL     XORR
      001293 CD 04 A6         [ 4] 3409         CALL     QBRAN
      001296 12 AE                 3410         .word      KTAP2
      001298 CD 04 73         [ 4] 3411         CALL     DOLIT
      00129B 00 08                 3412         .word      BKSPP
      00129D CD 06 20         [ 4] 3413         CALL     XORR
      0012A0 CD 04 A6         [ 4] 3414         CALL     QBRAN
      0012A3 12 AB                 3415         .word      KTAP1
      0012A5 CD 0B 24         [ 4] 3416         CALL     BLANK
      0012A8 CC 12 72         [ 2] 3417         JP     TAP
      0012AB CC 12 3B         [ 2] 3418 KTAP1:  JP     BKSP
      0012AE CD 05 8E         [ 4] 3419 KTAP2:  CALL     DROP
      0012B1 CD 05 A8         [ 4] 3420         CALL     SWAPP
      0012B4 CD 05 8E         [ 4] 3421         CALL     DROP
      0012B7 CC 05 98         [ 2] 3422         JP     DUPP
                                   3423 
                                   3424 ;       accept  ( b u -- b u )
                                   3425 ;       Accept characters to input
                                   3426 ;       buffer. Return with actual count.
      0012BA 12 83                 3427         .word      LINK
                           0012BC  3428 LINK = . 
      0012BC 06                    3429         .byte      6
      0012BD 41 43 43 45 50 54     3430         .ascii     "ACCEPT"
      0012C3                       3431 ACCEP:
      0012C3 CD 05 C2         [ 4] 3432         CALL     OVER
      0012C6 CD 07 C7         [ 4] 3433         CALL     PLUS
      0012C9 CD 05 C2         [ 4] 3434         CALL     OVER
      0012CC CD 07 B2         [ 4] 3435 ACCP1:  CALL     DDUP
      0012CF CD 06 20         [ 4] 3436         CALL     XORR
      0012D2 CD 04 A6         [ 4] 3437         CALL     QBRAN
      0012D5 12 F7                 3438         .word      ACCP4
      0012D7 CD 0E 40         [ 4] 3439         CALL     KEY
      0012DA CD 05 98         [ 4] 3440         CALL     DUPP
      0012DD CD 0B 24         [ 4] 3441         CALL     BLANK
      0012E0 CD 04 73         [ 4] 3442         CALL     DOLIT
      0012E3 00 7F                 3443         .word      127
      0012E5 CD 09 20         [ 4] 3444         CALL     WITHI
      0012E8 CD 04 A6         [ 4] 3445         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      0012EB 12 F2                 3446         .word      ACCP2
      0012ED CD 12 72         [ 4] 3447         CALL     TAP
      0012F0 20 03            [ 2] 3448         JRA     ACCP3
      0012F2 CD 12 88         [ 4] 3449 ACCP2:  CALL     KTAP
      0012F5 20 D5            [ 2] 3450 ACCP3:  JRA     ACCP1
      0012F7 CD 05 8E         [ 4] 3451 ACCP4:  CALL     DROP
      0012FA CD 05 C2         [ 4] 3452         CALL     OVER
      0012FD CC 08 40         [ 2] 3453         JP     SUBB
                                   3454 
                                   3455 ;       QUERY   ( -- )
                                   3456 ;       Accept input stream to
                                   3457 ;       terminal input buffer.
      001300 12 BC                 3458         .word      LINK
                                   3459         
                           001302  3460 LINK = . 
      001302 05                    3461         .byte      5
      001303 51 55 45 52 59        3462         .ascii     "QUERY"
      001308                       3463 QUERY:
      001308 CD 0C 41         [ 4] 3464         CALL     TIB
      00130B CD 04 73         [ 4] 3465         CALL     DOLIT
      00130E 00 50                 3466         .word      80
      001310 CD 12 C3         [ 4] 3467         CALL     ACCEP
      001313 CD 06 96         [ 4] 3468         CALL     NTIB
      001316 CD 04 DA         [ 4] 3469         CALL     STORE
      001319 CD 05 8E         [ 4] 3470         CALL     DROP
      00131C CD 0B 31         [ 4] 3471         CALL     ZERO
      00131F CD 06 86         [ 4] 3472         CALL     INN
      001322 CC 04 DA         [ 2] 3473         JP     STORE
                                   3474 
                                   3475 ;       ABORT   ( -- )
                                   3476 ;       Reset data stack and
                                   3477 ;       jump to QUIT.
      001325 13 02                 3478         .word      LINK
                           001327  3479 LINK = . 
      001327 05                    3480         .byte      5
      001328 41 42 4F 52 54        3481         .ascii     "ABORT"
      00132D                       3482 ABORT:
      00132D CD 14 24         [ 4] 3483         CALL     PRESE
      001330 CC 14 41         [ 2] 3484         JP     QUIT
                                   3485 
                                   3486 ;       abort"  ( f -- )
                                   3487 ;       Run time routine of ABORT".
                                   3488 ;       Abort with a message.
      001333 13 27                 3489         .word      LINK
                           001335  3490 LINK = . 
      001335 46                    3491 	.byte      COMPO+6
      001336 41 42 4F 52 54        3492         .ascii     "ABORT"
      00133B 22                    3493         .byte      '"'
      00133C                       3494 ABORQ:
      00133C CD 04 A6         [ 4] 3495         CALL     QBRAN
      00133F 13 5B                 3496         .word      ABOR2   ;text flag
      001341 CD 0E D6         [ 4] 3497         CALL     DOSTR
      001344 CD 0E 78         [ 4] 3498 ABOR1:  CALL     SPACE
      001347 CD 0C 08         [ 4] 3499         CALL     COUNT
      00134A CD 0E A2         [ 4] 3500         CALL     TYPES
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      00134D CD 04 73         [ 4] 3501         CALL     DOLIT
      001350 00 3F                 3502         .word     63 ; "?"
      001352 CD 04 38         [ 4] 3503         CALL     EMIT
      001355 CD 0E C0         [ 4] 3504         CALL     CR
      001358 CC 13 2D         [ 2] 3505         JP     ABORT   ;pass error string
      00135B CD 0E D6         [ 4] 3506 ABOR2:  CALL     DOSTR
      00135E CC 05 8E         [ 2] 3507         JP     DROP
                                   3508 
                                   3509 ;; The text interpreter
                                   3510 
                                   3511 ;       $INTERPRET      ( a -- )
                                   3512 ;       Interpret a word. If failed,
                                   3513 ;       try to convert it to an integer.
      001361 13 35                 3514         .word      LINK
                           001363  3515 LINK = . 
      001363 0A                    3516         .byte      10
      001364 24 49 4E 54 45 52 50  3517         .ascii     "$INTERPRET"
             52 45 54
      00136E                       3518 INTER:
      00136E CD 12 30         [ 4] 3519         CALL     NAMEQ
      001371 CD 07 55         [ 4] 3520         CALL     QDUP    ;?defined
      001374 CD 04 A6         [ 4] 3521         CALL     QBRAN
      001377 13 98                 3522         .word      INTE1
      001379 CD 04 F1         [ 4] 3523         CALL     AT
      00137C CD 04 73         [ 4] 3524         CALL     DOLIT
      00137F 40 00                 3525 	.word       0x4000	; COMPO*256
      001381 CD 05 F7         [ 4] 3526         CALL     ANDD    ;?compile only lexicon bits
      001384 CD 13 3C         [ 4] 3527         CALL     ABORQ
      001387 0D                    3528         .byte      13
      001388 20 63 6F 6D 70 69 6C  3529         .ascii     " compile only"
             65 20 6F 6E 6C 79
      001395 CC 04 CD         [ 2] 3530         JP     EXECU
      001398 CD 23 F1         [ 4] 3531 INTE1:  CALL     NUMBQ   ;convert a number
      00139B CD 04 A6         [ 4] 3532         CALL     QBRAN
      00139E 13 44                 3533         .word    ABOR1
      0013A0 81               [ 4] 3534         RET
                                   3535 
                                   3536 ;       [       ( -- )
                                   3537 ;       Start  text interpreter.
      0013A1 13 63                 3538         .word      LINK
                           0013A3  3539 LINK = . 
      0013A3 81                    3540 	.byte      IMEDD+1
      0013A4 5B                    3541         .ascii     "["
      0013A5                       3542 LBRAC:
      0013A5 CD 04 73         [ 4] 3543         CALL   DOLIT
      0013A8 13 6E                 3544         .word  INTER
      0013AA CD 06 C9         [ 4] 3545         CALL   TEVAL
      0013AD CC 04 DA         [ 2] 3546         JP     STORE
                                   3547 
                                   3548 ;       .OK     ( -- )
                                   3549 ;       Display 'ok' while interpreting.
      0013B0 13 A3                 3550         .word      LINK
                           0013B2  3551 LINK = . 
      0013B2 03                    3552         .byte      3
      0013B3 2E 4F 4B              3553         .ascii     ".OK"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      0013B6                       3554 DOTOK:
      0013B6 CD 04 73         [ 4] 3555         CALL     DOLIT
      0013B9 13 6E                 3556         .word      INTER
      0013BB CD 06 C9         [ 4] 3557         CALL     TEVAL
      0013BE CD 04 F1         [ 4] 3558         CALL     AT
      0013C1 CD 08 68         [ 4] 3559         CALL     EQUAL
      0013C4 CD 04 A6         [ 4] 3560         CALL     QBRAN
      0013C7 13 D0                 3561         .word      DOTO1
      0013C9 CD 0E FF         [ 4] 3562         CALL     DOTQP
      0013CC 03                    3563         .byte      3
      0013CD 20 6F 6B              3564         .ascii     " ok"
      0013D0 CC 0E C0         [ 2] 3565 DOTO1:  JP     CR
                                   3566 
                                   3567 ;       ?STACK  ( -- )
                                   3568 ;       Abort if stack underflows.
      0013D3 13 B2                 3569         .word      LINK
                           0013D5  3570 LINK = . 
      0013D5 06                    3571         .byte      6
      0013D6 3F 53 54 41 43 4B     3572         .ascii     "?STACK"
      0013DC                       3573 QSTAC: 
      0013DC CD 0B 73         [ 4] 3574         CALL     DEPTH
      0013DF CD 05 D1         [ 4] 3575         CALL     ZLESS   ;check only for underflow
      0013E2 CD 13 3C         [ 4] 3576         CALL     ABORQ
      0013E5 0B                    3577         .byte      11
      0013E6 20 75 6E 64 65 72 66  3578         .ascii     " underflow "
             6C 6F 77 20
      0013F1 81               [ 4] 3579         RET
                                   3580 
                                   3581 ;       EVAL    ( -- )
                                   3582 ;       Interpret  input stream.
      0013F2 13 D5                 3583         .word      LINK
                           0013F4  3584 LINK = . 
      0013F4 04                    3585         .byte      4
      0013F5 45 56 41 4C           3586         .ascii     "EVAL"
      0013F9                       3587 EVAL:
      0013F9 CD 11 33         [ 4] 3588 EVAL1:  CALL     TOKEN
      0013FC CD 05 98         [ 4] 3589         CALL     DUPP
      0013FF CD 05 0F         [ 4] 3590         CALL     CAT     ;?input stream empty
      001402 CD 04 A6         [ 4] 3591         CALL     QBRAN
      001405 14 15                 3592         .word    EVAL2
      001407 CD 06 C9         [ 4] 3593         CALL     TEVAL
      00140A CD 0C 55         [ 4] 3594         CALL     ATEXE
      00140D CD 13 DC         [ 4] 3595         CALL     QSTAC   ;evaluate input, check stack
      001410 CD 04 BD         [ 4] 3596         CALL     BRAN
      001413 13 F9                 3597         .word    EVAL1
      001415 CD 05 8E         [ 4] 3598 EVAL2:  CALL     DROP
      001418 CC 13 B6         [ 2] 3599         JP       DOTOK
                                   3600 
                                   3601 ;       PRESET  ( -- )
                                   3602 ;       Reset data stack pointer and
                                   3603 ;       terminal input buffer.
      00141B 13 F4                 3604         .word      LINK
                           00141D  3605 LINK = . 
      00141D 06                    3606         .byte      6
      00141E 50 52 45 53 45 54     3607         .ascii     "PRESET"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      001424                       3608 PRESE:
      001424 CD 04 73         [ 4] 3609         CALL     DOLIT
      001427 16 80                 3610         .word      SPP
      001429 CD 05 85         [ 4] 3611         CALL     SPSTO
      00142C CD 04 73         [ 4] 3612         CALL     DOLIT
      00142F 17 00                 3613         .word      TIBB
      001431 CD 06 96         [ 4] 3614         CALL     NTIB
      001434 CD 0A 9A         [ 4] 3615         CALL     CELLP
      001437 CC 04 DA         [ 2] 3616         JP     STORE
                                   3617 
                                   3618 ;       QUIT    ( -- )
                                   3619 ;       Reset return stack pointer
                                   3620 ;       and start text interpreter.
      00143A 14 1D                 3621         .word      LINK
                           00143C  3622 LINK = . 
      00143C 04                    3623         .byte      4
      00143D 51 55 49 54           3624         .ascii     "QUIT"
      001441                       3625 QUIT:
      001441 CD 04 73         [ 4] 3626         CALL     DOLIT
      001444 17 FF                 3627         .word      RPP
      001446 CD 05 2C         [ 4] 3628         CALL     RPSTO   ;reset return stack pointer
      001449 CD 13 A5         [ 4] 3629 QUIT1:  CALL     LBRAC   ;start interpretation
      00144C CD 13 08         [ 4] 3630 QUIT2:  CALL     QUERY   ;get input
      00144F CD 13 F9         [ 4] 3631         CALL     EVAL
      001452 20 F8            [ 2] 3632         JRA     QUIT2   ;continue till error
                                   3633 
                                   3634 ;; The compiler
                                   3635 
                                   3636 ;       '       ( -- ca )
                                   3637 ;       Search vocabularies for
                                   3638 ;       next word in input stream.
      001454 14 3C                 3639         .word      LINK
                           001456  3640 LINK = . 
      001456 01                    3641         .byte      1
      001457 27                    3642         .ascii     "'"
      001458                       3643 TICK:
      001458 CD 11 33         [ 4] 3644         CALL     TOKEN
      00145B CD 12 30         [ 4] 3645         CALL     NAMEQ   ;?defined
      00145E CD 04 A6         [ 4] 3646         CALL     QBRAN
      001461 13 44                 3647         .word      ABOR1
      001463 81               [ 4] 3648         RET     ;yes, push code address
                                   3649 
                                   3650 ;       ALLOT   ( n -- )
                                   3651 ;       Allocate n bytes to RAM 
      001464 14 56                 3652         .word      LINK
                           001466  3653         LINK = . 
      001466 05                    3654         .byte      5
      001467 41 4C 4C 4F 54        3655         .ascii     "ALLOT"
      00146C                       3656 ALLOT:
      00146C CD 06 F9         [ 4] 3657         CALL     VPP
                                   3658 ; must update APP_VP each time VP is modidied
      00146F CD 0B A1         [ 4] 3659         call PSTOR 
      001472 CC 1B A5         [ 2] 3660         jp UPDATVP 
                                   3661 
                                   3662 ;       ,       ( w -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                   3663 ;         Compile an integer into
                                   3664 ;         variable space.
      001475 14 66                 3665         .word      LINK
                           001477  3666 LINK = . 
      001477 01                    3667         .byte      1
      001478 2C                    3668         .ascii     ","
      001479                       3669 COMMA:
      001479 CD 0C 1F         [ 4] 3670         CALL     HERE
      00147C CD 05 98         [ 4] 3671         CALL     DUPP
      00147F CD 0A 9A         [ 4] 3672         CALL     CELLP   ;cell boundary
      001482 CD 06 F9         [ 4] 3673         CALL     VPP
      001485 CD 04 DA         [ 4] 3674         CALL     STORE
      001488 CC 04 DA         [ 2] 3675         JP     STORE
                                   3676 
                                   3677 ;       C,      ( c -- )
                                   3678 ;       Compile a byte into
                                   3679 ;       variables space.
      00148B 14 77                 3680        .word      LINK
                           00148D  3681 LINK = . 
      00148D 02                    3682         .byte      2
      00148E 43 2C                 3683         .ascii     "C,"
      001490                       3684 CCOMMA:
      001490 CD 0C 1F         [ 4] 3685         CALL     HERE
      001493 CD 05 98         [ 4] 3686         CALL     DUPP
      001496 CD 0A C5         [ 4] 3687         CALL     ONEP
      001499 CD 06 F9         [ 4] 3688         CALL     VPP
      00149C CD 04 DA         [ 4] 3689         CALL     STORE
      00149F CC 04 FE         [ 2] 3690         JP     CSTOR
                                   3691 
                                   3692 ;       [COMPILE]       ( -- ; <string> )
                                   3693 ;       Compile next immediate
                                   3694 ;       word into code dictionary.
      0014A2 14 8D                 3695         .word      LINK
                           0014A4  3696 LINK = . 
      0014A4 89                    3697 	.byte      IMEDD+9
      0014A5 5B 43 4F 4D 50 49 4C  3698         .ascii     "[COMPILE]"
             45 5D
      0014AE                       3699 BCOMP:
      0014AE CD 14 58         [ 4] 3700         CALL     TICK
      0014B1 CC 17 74         [ 2] 3701         JP     JSRC
                                   3702 
                                   3703 ;       COMPILE ( -- )
                                   3704 ;       Compile next jsr in
                                   3705 ;       colon list to code dictionary.
      0014B4 14 A4                 3706         .word      LINK
                           0014B6  3707 LINK = . 
      0014B6 47                    3708 	.byte      COMPO+7
      0014B7 43 4F 4D 50 49 4C 45  3709         .ascii     "COMPILE"
      0014BE                       3710 COMPI:
      0014BE CD 05 42         [ 4] 3711         CALL     RFROM
      0014C1 CD 05 98         [ 4] 3712         CALL     DUPP
      0014C4 CD 04 F1         [ 4] 3713         CALL     AT
      0014C7 CD 17 74         [ 4] 3714         CALL     JSRC    ;compile subroutine
      0014CA CD 0A 9A         [ 4] 3715         CALL     CELLP
      0014CD 90 93            [ 1] 3716         ldw y,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      0014CF 90 FE            [ 2] 3717         ldw y,(y)
      0014D1 1C 00 02         [ 2] 3718         addw x,#CELLL 
      0014D4 90 FC            [ 2] 3719         jp (y)
                                   3720 
                                   3721 ;       LITERAL ( w -- )
                                   3722 ;       Compile tos to dictionary
                                   3723 ;       as an integer literal.
      0014D6 14 B6                 3724         .word      LINK
                           0014D8  3725 LINK = . 
      0014D8 87                    3726 	.byte      IMEDD+7
      0014D9 4C 49 54 45 52 41 4C  3727         .ascii     "LITERAL"
      0014E0                       3728 LITER:
      0014E0 CD 14 BE         [ 4] 3729         CALL     COMPI
      0014E3 04 73                 3730         .word DOLIT 
      0014E5 CC 14 79         [ 2] 3731         JP     COMMA
                                   3732 
                                   3733 ;       $,"     ( -- )
                                   3734 ;       Compile a literal string
                                   3735 ;       up to next " .
      0014E8 14 D8                 3736         .word      LINK
                           0014EA  3737 LINK = . 
      0014EA 03                    3738         .byte      3
      0014EB 24 2C 22              3739         .byte     '$',',','"'
      0014EE                       3740 STRCQ:
      0014EE CD 04 73         [ 4] 3741         CALL     DOLIT
      0014F1 00 22                 3742         .word     34	; "
      0014F3 CD 10 73         [ 4] 3743         CALL     PARSE
      0014F6 CD 0C 1F         [ 4] 3744         CALL     HERE
      0014F9 CD 0C DF         [ 4] 3745         CALL     PACKS   ;string to code dictionary
      0014FC CD 0C 08         [ 4] 3746         CALL     COUNT
      0014FF CD 07 C7         [ 4] 3747         CALL     PLUS    ;calculate aligned end of string
      001502 CD 06 F9         [ 4] 3748         CALL     VPP
      001505 CC 04 DA         [ 2] 3749         JP     STORE
                                   3750 
                                   3751 ;; Structures
                                   3752 
                                   3753 ;       FOR     ( -- a )
                                   3754 ;       Start a FOR-NEXT loop
                                   3755 ;       structure in a colon definition.
      001508 14 EA                 3756         .word      LINK
                           00150A  3757 LINK = . 
      00150A 83                    3758 	.byte      IMEDD+3
      00150B 46 4F 52              3759         .ascii     "FOR"
      00150E                       3760 FOR:
      00150E CD 14 BE         [ 4] 3761         CALL     COMPI
      001511 05 61                 3762         .word TOR 
      001513 CC 0C 1F         [ 2] 3763         JP     HERE
                                   3764 
                                   3765 ;       NEXT    ( a -- )
                                   3766 ;       Terminate a FOR-NEXT loop.
      001516 15 0A                 3767         .word      LINK
                           001518  3768 LINK = . 
      001518 84                    3769 	.byte      IMEDD+4
      001519 4E 45 58 54           3770         .ascii     "NEXT"
      00151D                       3771 NEXT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      00151D CD 14 BE         [ 4] 3772         CALL     COMPI
      001520 04 87                 3773         .word DONXT 
      001522 CD 07 45         [ 4] 3774         call ADRADJ
      001525 CC 14 79         [ 2] 3775         JP     COMMA
                                   3776 
                                   3777 ;       I ( -- n )
                                   3778 ;       stack FOR-NEXT COUNTER 
      001528 15 18                 3779         .word LINK 
                           00152A  3780         LINK=.
      00152A 01                    3781         .byte 1 
      00152B 49                    3782         .ascii "I"
      00152C                       3783 IFETCH: 
      00152C 1D 00 02         [ 2] 3784         subw x,#CELLL 
      00152F 16 03            [ 2] 3785         ldw y,(3,sp)
      001531 FF               [ 2] 3786         ldw (x),y 
      001532 81               [ 4] 3787         ret 
                                   3788 
                                   3789 ;       BEGIN   ( -- a )
                                   3790 ;       Start an infinite or
                                   3791 ;       indefinite loop structure.
      001533 15 2A                 3792         .word      LINK
                           001535  3793 LINK = . 
      001535 85                    3794 	.byte      IMEDD+5
      001536 42 45 47 49 4E        3795         .ascii     "BEGIN"
      00153B                       3796 BEGIN:
      00153B CC 0C 1F         [ 2] 3797         JP     HERE
                                   3798 
                                   3799 ;       UNTIL   ( a -- )
                                   3800 ;       Terminate a BEGIN-UNTIL
                                   3801 ;       indefinite loop structure.
      00153E 15 35                 3802         .word      LINK
                           001540  3803 LINK = . 
      001540 85                    3804 	.byte      IMEDD+5
      001541 55 4E 54 49 4C        3805         .ascii     "UNTIL"
      001546                       3806 UNTIL:
      001546 CD 14 BE         [ 4] 3807         CALL     COMPI
      001549 04 A6                 3808         .word    QBRAN 
      00154B CD 07 45         [ 4] 3809         call ADRADJ
      00154E CC 14 79         [ 2] 3810         JP     COMMA
                                   3811 
                                   3812 ;       AGAIN   ( a -- )
                                   3813 ;       Terminate a BEGIN-AGAIN
                                   3814 ;       infinite loop structure.
      001551 15 40                 3815         .word      LINK
                           001553  3816 LINK = . 
      001553 85                    3817 	.byte      IMEDD+5
      001554 41 47 41 49 4E        3818         .ascii     "AGAIN"
      001559                       3819 AGAIN:
      001559 CD 14 BE         [ 4] 3820         CALL     COMPI
      00155C 04 BD                 3821         .word BRAN
      00155E CD 07 45         [ 4] 3822         call ADRADJ 
      001561 CC 14 79         [ 2] 3823         JP     COMMA
                                   3824 
                                   3825 ;       IF      ( -- A )
                                   3826 ;       Begin a conditional branch.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      001564 15 53                 3827         .word      LINK
                           001566  3828 LINK = . 
      001566 82                    3829 	.byte      IMEDD+2
      001567 49 46                 3830         .ascii     "IF"
      001569                       3831 IFF:
      001569 CD 14 BE         [ 4] 3832         CALL     COMPI
      00156C 04 A6                 3833         .word QBRAN
      00156E CD 0C 1F         [ 4] 3834         CALL     HERE
      001571 CD 0B 31         [ 4] 3835         CALL     ZERO
      001574 CC 14 79         [ 2] 3836         JP     COMMA
                                   3837 
                                   3838 ;       THEN        ( A -- )
                                   3839 ;       Terminate a conditional branch structure.
      001577 15 66                 3840         .word      LINK
                           001579  3841 LINK = . 
      001579 84                    3842 	.byte      IMEDD+4
      00157A 54 48 45 4E           3843         .ascii     "THEN"
      00157E                       3844 THENN:
      00157E CD 0C 1F         [ 4] 3845         CALL     HERE
      001581 CD 07 45         [ 4] 3846         call ADRADJ 
      001584 CD 05 A8         [ 4] 3847         CALL     SWAPP
      001587 CC 04 DA         [ 2] 3848         JP     STORE
                                   3849 
                                   3850 ;       ELSE        ( A -- A )
                                   3851 ;       Start the false clause in an IF-ELSE-THEN structure.
      00158A 15 79                 3852         .word      LINK
                           00158C  3853 LINK = . 
      00158C 84                    3854 	.byte      IMEDD+4
      00158D 45 4C 53 45           3855         .ascii     "ELSE"
      001591                       3856 ELSEE:
      001591 CD 14 BE         [ 4] 3857         CALL     COMPI
      001594 04 BD                 3858         .word BRAN
      001596 CD 0C 1F         [ 4] 3859         CALL     HERE
      001599 CD 0B 31         [ 4] 3860         CALL     ZERO
      00159C CD 14 79         [ 4] 3861         CALL     COMMA
      00159F CD 05 A8         [ 4] 3862         CALL     SWAPP
      0015A2 CD 0C 1F         [ 4] 3863         CALL     HERE
      0015A5 CD 07 45         [ 4] 3864         call ADRADJ 
      0015A8 CD 05 A8         [ 4] 3865         CALL     SWAPP
      0015AB CC 04 DA         [ 2] 3866         JP     STORE
                                   3867 
                                   3868 ;       AHEAD       ( -- A )
                                   3869 ;       Compile a forward branch instruction.
      0015AE 15 8C                 3870         .word      LINK
                           0015B0  3871 LINK = . 
      0015B0 85                    3872 	.byte      IMEDD+5
      0015B1 41 48 45 41 44        3873         .ascii     "AHEAD"
      0015B6                       3874 AHEAD:
      0015B6 CD 14 BE         [ 4] 3875         CALL     COMPI
      0015B9 04 BD                 3876         .word BRAN
      0015BB CD 0C 1F         [ 4] 3877         CALL     HERE
      0015BE CD 0B 31         [ 4] 3878         CALL     ZERO
      0015C1 CC 14 79         [ 2] 3879         JP     COMMA
                                   3880 
                                   3881 ;       WHILE       ( a -- A a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                   3882 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      0015C4 15 B0                 3883         .word      LINK
                           0015C6  3884 LINK = . 
      0015C6 85                    3885 	.byte      IMEDD+5
      0015C7 57 48 49 4C 45        3886         .ascii     "WHILE"
      0015CC                       3887 WHILE:
      0015CC CD 14 BE         [ 4] 3888         CALL     COMPI
      0015CF 04 A6                 3889         .word QBRAN
      0015D1 CD 0C 1F         [ 4] 3890         CALL     HERE
      0015D4 CD 0B 31         [ 4] 3891         CALL     ZERO
      0015D7 CD 14 79         [ 4] 3892         CALL     COMMA
      0015DA CC 05 A8         [ 2] 3893         JP     SWAPP
                                   3894 
                                   3895 ;       REPEAT      ( A a -- )
                                   3896 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      0015DD 15 C6                 3897         .word      LINK
                           0015DF  3898 LINK = . 
      0015DF 86                    3899         .byte      IMEDD+6
      0015E0 52 45 50 45 41 54     3900         .ascii     "REPEAT"
      0015E6                       3901 REPEA:
      0015E6 CD 14 BE         [ 4] 3902         CALL     COMPI
      0015E9 04 BD                 3903         .word BRAN
      0015EB CD 07 45         [ 4] 3904         call ADRADJ 
      0015EE CD 14 79         [ 4] 3905         CALL     COMMA
      0015F1 CD 0C 1F         [ 4] 3906         CALL     HERE
      0015F4 CD 07 45         [ 4] 3907         call ADRADJ 
      0015F7 CD 05 A8         [ 4] 3908         CALL     SWAPP
      0015FA CC 04 DA         [ 2] 3909         JP     STORE
                                   3910 
                                   3911 ;       AFT         ( a -- a A )
                                   3912 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      0015FD 15 DF                 3913         .word      LINK
                           0015FF  3914 LINK = . 
      0015FF 83                    3915 	.byte      IMEDD+3
      001600 41 46 54              3916         .ascii     "AFT"
      001603                       3917 AFT:
      001603 CD 05 8E         [ 4] 3918         CALL     DROP
      001606 CD 15 B6         [ 4] 3919         CALL     AHEAD
      001609 CD 0C 1F         [ 4] 3920         CALL     HERE
      00160C CC 05 A8         [ 2] 3921         JP     SWAPP
                                   3922 
                                   3923 ;       ABORT"      ( -- ; <string> )
                                   3924 ;       Conditional abort with an error message.
      00160F 15 FF                 3925         .word      LINK
                           001611  3926 LINK = . 
      001611 86                    3927 	.byte      IMEDD+6
      001612 41 42 4F 52 54        3928         .ascii     "ABORT"
      001617 22                    3929         .byte      '"'
      001618                       3930 ABRTQ:
      001618 CD 14 BE         [ 4] 3931         CALL     COMPI
      00161B 13 3C                 3932         .word ABORQ
      00161D CC 14 EE         [ 2] 3933         JP     STRCQ
                                   3934 
                                   3935 ;       $"     ( -- ; <string> )
                                   3936 ;       Compile an inline string literal.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      001620 16 11                 3937         .word      LINK
                           001622  3938 LINK = . 
      001622 82                    3939 	.byte      IMEDD+2
      001623 24 22                 3940         .byte     '$','"'
      001625                       3941 STRQ:
      001625 CD 14 BE         [ 4] 3942         CALL     COMPI
      001628 0E F5                 3943         .word STRQP 
      00162A CC 14 EE         [ 2] 3944         JP     STRCQ
                                   3945 
                                   3946 ;       ."          ( -- ; <string> )
                                   3947 ;       Compile an inline string literal to be typed out at run time.
      00162D 16 22                 3948         .word      LINK
                           00162F  3949 LINK = . 
      00162F 82                    3950 	.byte      IMEDD+2
      001630 2E 22                 3951         .byte     '.','"'
      001632                       3952 DOTQ:
      001632 CD 14 BE         [ 4] 3953         CALL     COMPI
      001635 0E FF                 3954         .word DOTQP 
      001637 CC 14 EE         [ 2] 3955         JP     STRCQ
                                   3956 
                                   3957 ;; Name compiler
                                   3958 
                                   3959 ;       ?UNIQUE ( a -- a )
                                   3960 ;       Display a warning message
                                   3961 ;       if word already exists.
      00163A 16 2F                 3962         .word      LINK
                           00163C  3963 LINK = . 
      00163C 07                    3964         .byte      7
      00163D 3F 55 4E 49 51 55 45  3965         .ascii     "?UNIQUE"
      001644                       3966 UNIQU:
      001644 CD 05 98         [ 4] 3967         CALL     DUPP
      001647 CD 12 30         [ 4] 3968         CALL     NAMEQ   ;?name exists
      00164A CD 04 A6         [ 4] 3969         CALL     QBRAN
      00164D 16 63                 3970         .word      UNIQ1
      00164F CD 0E FF         [ 4] 3971         CALL     DOTQP   ;redef are OK
      001652 07                    3972         .byte       7
      001653 20 72 65 44 65 66 20  3973         .ascii     " reDef "       
      00165A CD 05 C2         [ 4] 3974         CALL     OVER
      00165D CD 0C 08         [ 4] 3975         CALL     COUNT
      001660 CD 0E A2         [ 4] 3976         CALL     TYPES   ;just in case
      001663 CC 05 8E         [ 2] 3977 UNIQ1:  JP     DROP
                                   3978 
                                   3979 ;       $,n     ( na -- )
                                   3980 ;       Build a new dictionary name
                                   3981 ;       using string at na.
                                   3982 ; compile dans l'espace des variables 
      001666 16 3C                 3983         .word      LINK
                           001668  3984 LINK = . 
      001668 03                    3985         .byte      3
      001669 24 2C 6E              3986         .ascii     "$,n"
      00166C                       3987 SNAME:
      00166C CD 05 98         [ 4] 3988         CALL     DUPP
      00166F CD 05 0F         [ 4] 3989         CALL     CAT     ;?null input
      001672 CD 04 A6         [ 4] 3990         CALL     QBRAN
      001675 16 A2                 3991         .word      PNAM1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      001677 CD 16 44         [ 4] 3992         CALL     UNIQU   ;?redefinition
      00167A CD 05 98         [ 4] 3993         CALL     DUPP
      00167D CD 0C 08         [ 4] 3994         CALL     COUNT
      001680 CD 07 C7         [ 4] 3995         CALL     PLUS
      001683 CD 06 F9         [ 4] 3996         CALL     VPP
      001686 CD 04 DA         [ 4] 3997         CALL     STORE
      001689 CD 05 98         [ 4] 3998         CALL     DUPP
      00168C CD 07 17         [ 4] 3999         CALL     LAST
      00168F CD 04 DA         [ 4] 4000         CALL     STORE   ;save na for vocabulary link
      001692 CD 0A A9         [ 4] 4001         CALL     CELLM   ;link address
      001695 CD 06 EB         [ 4] 4002         CALL     CNTXT
      001698 CD 04 F1         [ 4] 4003         CALL     AT
      00169B CD 05 A8         [ 4] 4004         CALL     SWAPP
      00169E CD 04 DA         [ 4] 4005         CALL     STORE
      0016A1 81               [ 4] 4006         RET     ;save code pointer
      0016A2 CD 0E F5         [ 4] 4007 PNAM1:  CALL     STRQP
      0016A5 05                    4008         .byte      5
      0016A6 20 6E 61 6D 65        4009         .ascii     " name" ;null input
      0016AB CC 13 44         [ 2] 4010         JP     ABOR1
                                   4011 
                                   4012 ;; FORTH compiler
                                   4013 
                                   4014 ;       $COMPILE        ( a -- )
                                   4015 ;       Compile next word to
                                   4016 ;       dictionary as a token or literal.
      0016AE 16 68                 4017         .word      LINK
                           0016B0  4018 LINK = . 
      0016B0 08                    4019         .byte      8
      0016B1 24 43 4F 4D 50 49 4C  4020         .ascii     "$COMPILE"
             45
      0016B9                       4021 SCOMP:
      0016B9 CD 12 30         [ 4] 4022         CALL     NAMEQ
      0016BC CD 07 55         [ 4] 4023         CALL     QDUP    ;?defined
      0016BF CD 04 A6         [ 4] 4024         CALL     QBRAN
      0016C2 16 DA                 4025         .word      SCOM2
      0016C4 CD 04 F1         [ 4] 4026         CALL     AT
      0016C7 CD 04 73         [ 4] 4027         CALL     DOLIT
      0016CA 80 00                 4028         .word     0x8000	;  IMEDD*256
      0016CC CD 05 F7         [ 4] 4029         CALL     ANDD    ;?immediate
      0016CF CD 04 A6         [ 4] 4030         CALL     QBRAN
      0016D2 16 D7                 4031         .word      SCOM1
      0016D4 CC 04 CD         [ 2] 4032         JP     EXECU
      0016D7 CC 17 74         [ 2] 4033 SCOM1:  JP     JSRC
      0016DA CD 23 F1         [ 4] 4034 SCOM2:  CALL     NUMBQ   ;try to convert to number
      0016DD CD 04 A6         [ 4] 4035         CALL     QBRAN
      0016E0 13 44                 4036         .word      ABOR1
      0016E2 CC 14 E0         [ 2] 4037         JP     LITER
                                   4038 
                                   4039 ;       OVERT   ( -- )
                                   4040 ;       Link a new word into vocabulary.
      0016E5 16 B0                 4041         .word      LINK
                           0016E7  4042 LINK = . 
      0016E7 05                    4043         .byte      5
      0016E8 4F 56 45 52 54        4044         .ascii     "OVERT"
      0016ED                       4045 OVERT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      0016ED CD 07 17         [ 4] 4046         CALL     LAST
      0016F0 CD 04 F1         [ 4] 4047         CALL     AT
      0016F3 CD 06 EB         [ 4] 4048         CALL     CNTXT
      0016F6 CC 04 DA         [ 2] 4049         JP     STORE
                                   4050 
                                   4051 ;       ;       ( -- )
                                   4052 ;       Terminate a colon definition.
      0016F9 16 E7                 4053         .word      LINK
                           0016FB  4054 LINK = . 
      0016FB C1                    4055 	.byte      IMEDD+COMPO+1
      0016FC 3B                    4056         .ascii     ";"
      0016FD                       4057 SEMIS:
                           000001  4058 .if OPTIMIZE ; more compact and faster
      0016FD CD 04 73         [ 4] 4059         call DOLIT 
      001700 00 81                 4060         .word 0x81   ; opcode for RET 
      001702 CD 14 90         [ 4] 4061         call CCOMMA 
                           000000  4062 .else
                                   4063         CALL     COMPI
                                   4064         .word EXIT 
                                   4065 .endif 
      001705 CD 13 A5         [ 4] 4066         CALL     LBRAC
      001708 CD 16 ED         [ 4] 4067         call OVERT 
      00170B CD 20 FD         [ 4] 4068         CALL FMOVE
      00170E CD 07 55         [ 4] 4069         call QDUP 
      001711 CD 04 A6         [ 4] 4070         call QBRAN 
      001714 18 44                 4071         .word SET_RAMLAST 
      001716 CD 21 91         [ 4] 4072         CALL UPDATPTR
      001719 81               [ 4] 4073         RET 
                                   4074 
                                   4075 
                                   4076 ;       Terminate an ISR definition 
                                   4077 ;       retourn ca of ISR as double
                                   4078 ;       I; ( -- ud )
      00171A 16 FB                 4079         .word LINK 
                           00171C  4080         LINK=.
      00171C C2                    4081         .byte 2+IMEDD+COMPO 
      00171D 49 3B                 4082         .ascii "I;" 
      00171F                       4083 ISEMI:
      00171F 1D 00 02         [ 2] 4084         subw x,#CELLL  
      001722 90 AE 00 80      [ 2] 4085         ldw y,#IRET_CODE 
      001726 FF               [ 2] 4086         ldw (x),y 
      001727 CD 14 90         [ 4] 4087         call CCOMMA
      00172A CD 13 A5         [ 4] 4088         call LBRAC 
      00172D CD 21 D6         [ 4] 4089         call IFMOVE
      001730 CD 07 55         [ 4] 4090         call QDUP 
      001733 CD 04 A6         [ 4] 4091         CALL QBRAN 
      001736 18 44                 4092         .word SET_RAMLAST
      001738 CD 07 07         [ 4] 4093         CALL CPP
      00173B CD 04 F1         [ 4] 4094         call AT 
      00173E CD 05 A8         [ 4] 4095         call SWAPP 
      001741 CD 07 07         [ 4] 4096         CALL CPP 
      001744 CD 04 DA         [ 4] 4097         call STORE 
      001747 CD 1B 8E         [ 4] 4098         call UPDATCP 
      00174A CD 1B 4B         [ 4] 4099         call EEPVP 
      00174D CD 05 8E         [ 4] 4100         call DROP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      001750 CD 04 F1         [ 4] 4101         call AT 
      001753 CD 06 F9         [ 4] 4102         call VPP 
      001756 CD 04 DA         [ 4] 4103         call STORE 
      001759 CC 0B 31         [ 2] 4104         jp ZERO
      00175C 81               [ 4] 4105         ret           
                                   4106         
                                   4107 
                                   4108 ;       ]       ( -- )
                                   4109 ;       Start compiling words in
                                   4110 ;       input stream.
      00175D 17 1C                 4111         .word      LINK
                           00175F  4112 LINK = . 
      00175F 01                    4113         .byte      1
      001760 5D                    4114         .ascii     "]"
      001761                       4115 RBRAC:
      001761 CD 04 73         [ 4] 4116         CALL   DOLIT
      001764 16 B9                 4117         .word  SCOMP
      001766 CD 06 C9         [ 4] 4118         CALL   TEVAL
      001769 CC 04 DA         [ 2] 4119         JP     STORE
                                   4120 
                                   4121 ;       CALL,    ( ca -- )
                                   4122 ;       Compile a subroutine call.
      00176C 17 5F                 4123         .word      LINK
                           00176E  4124 LINK = . 
      00176E 05                    4125         .byte      5
      00176F 43 41 4C 4C 2C        4126         .ascii     "CALL,"
      001774                       4127 JSRC:
      001774 CD 04 73         [ 4] 4128         CALL     DOLIT
      001777 00 CD                 4129         .word     CALLL     ;CALL
      001779 CD 14 90         [ 4] 4130         CALL     CCOMMA
      00177C CC 14 79         [ 2] 4131         JP     COMMA
                                   4132 
                                   4133 ;       INIT-OFS ( -- )
                                   4134 ;       compute offset to adjust jump address 
                                   4135 ;       set variable OFFSET 
      00177F 17 6E                 4136         .word LINK 
                           001781  4137         LINK=.
      001781 08                    4138         .byte 8 
      001782 49 4E 49 54 2D 4F 46  4139         .ascii "INIT-OFS" 
             53
      00178A                       4140 INITOFS:
      00178A CD 06 B8         [ 4] 4141         call TFLASH 
      00178D CD 04 F1         [ 4] 4142         CALL AT 
      001790 CD 05 98         [ 4] 4143         CALL DUPP 
      001793 CD 04 A6         [ 4] 4144         call QBRAN
      001796 17 A7                 4145         .word 1$
      001798 CD 05 8E         [ 4] 4146         call DROP  
      00179B CD 07 07         [ 4] 4147         call CPP 
      00179E CD 04 F1         [ 4] 4148         call AT 
      0017A1 CD 0C 1F         [ 4] 4149         call HERE
      0017A4 CD 08 40         [ 4] 4150         call SUBB 
      0017A7 CD 07 3C         [ 4] 4151 1$:     call OFFSET 
      0017AA CC 04 DA         [ 2] 4152         jp STORE  
                                   4153 
                                   4154 ;       :       ( -- ; <string> )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                   4155 ;       Start a new colon definition
                                   4156 ;       using next word as its name.
      0017AD 17 81                 4157         .word      LINK
                           0017AF  4158 LINK = . 
      0017AF 01                    4159         .byte      1
      0017B0 3A                    4160         .ascii     ":"
      0017B1                       4161 COLON:
      0017B1 CD 17 8A         [ 4] 4162         call INITOFS       
      0017B4 CD 11 33         [ 4] 4163         CALL   TOKEN
      0017B7 CD 16 6C         [ 4] 4164         CALL   SNAME
      0017BA CC 17 61         [ 2] 4165         JP     RBRAC
                                   4166 
                                   4167 ;       I:  ( -- )
                                   4168 ;       Start interrupt service routine definition
                                   4169 ;       those definition have no name.
      0017BD 17 AF                 4170         .word LINK
                           0017BF  4171         LINK=.
      0017BF 02                    4172         .byte 2 
      0017C0 49 3A                 4173         .ascii "I:" 
      0017C2                       4174 ICOLON:
      0017C2 CD 17 8A         [ 4] 4175         call INITOFS 
      0017C5 CC 17 61         [ 2] 4176         jp RBRAC  
                                   4177 
                                   4178 ;       IMMEDIATE       ( -- )
                                   4179 ;       Make last compiled word
                                   4180 ;       an immediate word.
      0017C8 17 BF                 4181         .word      LINK
                           0017CA  4182 LINK = . 
      0017CA 09                    4183         .byte      9
      0017CB 49 4D 4D 45 44 49 41  4184         .ascii     "IMMEDIATE"
             54 45
      0017D4                       4185 IMMED:
      0017D4 CD 04 73         [ 4] 4186         CALL     DOLIT
      0017D7 80 00                 4187         .word     0x8000	;  IMEDD*256
      0017D9 CD 07 17         [ 4] 4188         CALL     LAST
      0017DC CD 04 F1         [ 4] 4189         CALL     AT
      0017DF CD 04 F1         [ 4] 4190         CALL     AT
      0017E2 CD 06 0B         [ 4] 4191         CALL     ORR
      0017E5 CD 07 17         [ 4] 4192         CALL     LAST
      0017E8 CD 04 F1         [ 4] 4193         CALL     AT
      0017EB CC 04 DA         [ 2] 4194         JP     STORE
                                   4195 
                                   4196 ;; Defining words
                                   4197 
                                   4198 ;       CREATE  ( -- ; <string> )
                                   4199 ;       Compile a new array
                                   4200 ;       without allocating space.
      0017EE 17 CA                 4201         .word      LINK
                           0017F0  4202 LINK = . 
      0017F0 06                    4203         .byte      6
      0017F1 43 52 45 41 54 45     4204         .ascii     "CREATE"
      0017F7                       4205 CREAT:
      0017F7 CD 11 33         [ 4] 4206         CALL     TOKEN
      0017FA CD 16 6C         [ 4] 4207         CALL     SNAME
      0017FD CD 16 ED         [ 4] 4208         CALL     OVERT        
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      001800 CD 14 BE         [ 4] 4209         CALL     COMPI 
      001803 06 58                 4210         .word DOVAR 
      001805 81               [ 4] 4211         RET
                                   4212 
                                   4213 ;       VARIABLE        ( -- ; <string> )
                                   4214 ;       Compile a new variable
                                   4215 ;       initialized to 0.
      001806 17 F0                 4216         .word      LINK
                           001808  4217 LINK = . 
      001808 08                    4218         .byte      8
      001809 56 41 52 49 41 42 4C  4219         .ascii     "VARIABLE"
             45
      001811                       4220 VARIA:
                                   4221 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      001811 CD 0C 1F         [ 4] 4222         CALL HERE
      001814 CD 05 98         [ 4] 4223         CALL DUPP 
      001817 CD 0A 9A         [ 4] 4224         CALL CELLP
      00181A CD 06 F9         [ 4] 4225         CALL VPP 
      00181D CD 04 DA         [ 4] 4226         CALL STORE
      001820 CD 17 F7         [ 4] 4227         CALL CREAT
      001823 CD 05 98         [ 4] 4228         CALL DUPP
      001826 CD 14 79         [ 4] 4229         CALL COMMA
      001829 CD 0B 31         [ 4] 4230         CALL ZERO
      00182C CD 05 A8         [ 4] 4231         call SWAPP 
      00182F CD 04 DA         [ 4] 4232         CALL STORE
      001832 CD 20 FD         [ 4] 4233         CALL FMOVE ; move definition to FLASH
      001835 CD 07 55         [ 4] 4234         CALL QDUP 
      001838 CD 04 A6         [ 4] 4235         CALL QBRAN 
      00183B 18 44                 4236         .word SET_RAMLAST   
      00183D CD 1B A5         [ 4] 4237         call UPDATVP  ; don't update if variable kept in RAM.
      001840 CD 21 91         [ 4] 4238         CALL UPDATPTR
      001843 81               [ 4] 4239         RET         
      001844                       4240 SET_RAMLAST: 
      001844 CD 07 17         [ 4] 4241         CALL LAST 
      001847 CD 04 F1         [ 4] 4242         CALL AT 
      00184A CD 07 2A         [ 4] 4243         CALL RAMLAST 
      00184D CC 04 DA         [ 2] 4244         jp STORE  
                                   4245 
                                   4246 
                                   4247 ;       CONSTANT  ( n -- ; <string> )
                                   4248 ;       Compile a new constant 
                                   4249 ;       n CONSTANT name 
      001850 18 08                 4250         .word LINK 
                           001852  4251         LINK=. 
      001852 08                    4252         .byte 8 
      001853 43 4F 4E 53 54 41 4E  4253         .ascii "CONSTANT" 
             54
      00185B                       4254 CONSTANT:          
      00185B CD 11 33         [ 4] 4255         CALL TOKEN
      00185E CD 16 6C         [ 4] 4256         CALL SNAME 
      001861 CD 16 ED         [ 4] 4257         CALL OVERT 
      001864 CD 14 BE         [ 4] 4258         CALL COMPI 
      001867 18 7B                 4259         .word DOCONST
      001869 CD 14 79         [ 4] 4260         CALL COMMA 
      00186C CD 20 FD         [ 4] 4261         CALL FMOVE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      00186F CD 07 55         [ 4] 4262         CALL QDUP 
      001872 CD 04 A6         [ 4] 4263         CALL QBRAN 
      001875 18 44                 4264         .word SET_RAMLAST  
      001877 CD 21 91         [ 4] 4265         CALL UPDATPTR  
      00187A 81               [ 4] 4266 1$:     RET          
                                   4267 
                                   4268 ; CONSTANT runtime semantic 
                                   4269 ; doCONST  ( -- n )
                                   4270 ;        .word LINK 
                                   4271 ;        LINK=.
                                   4272 ;        .byte 7
                                   4273 ;        .ascii "DOCONST"
      00187B                       4274 DOCONST:
      00187B 1D 00 02         [ 2] 4275         subw x,#CELLL
      00187E 90 85            [ 2] 4276         popw y 
      001880 90 FE            [ 2] 4277         ldw y,(y) 
      001882 FF               [ 2] 4278         ldw (x),y 
      001883 81               [ 4] 4279         ret 
                                   4280 
                                   4281 ;----------------------------------
                                   4282 ; create double constant 
                                   4283 ; 2CONSTANT ( d -- ; <string> )
                                   4284 ;----------------------------------
      001884 18 52                 4285     .word LINK 
                           001886  4286     LINK=.
      001886 09                    4287     .byte 9 
      001887 32 43 4F 4E 53 54 41  4288     .ascii "2CONSTANT"
             4E 54
      001890                       4289 DCONST:
      001890 CD 11 33         [ 4] 4290         CALL TOKEN
      001893 CD 16 6C         [ 4] 4291         CALL SNAME 
      001896 CD 16 ED         [ 4] 4292         CALL OVERT 
      001899 CD 14 BE         [ 4] 4293         CALL COMPI 
      00189C 18 B3                 4294         .word DO_DCONST
      00189E CD 14 79         [ 4] 4295         CALL COMMA
      0018A1 CD 14 79         [ 4] 4296         CALL COMMA  
      0018A4 CD 20 FD         [ 4] 4297         CALL FMOVE
      0018A7 CD 07 55         [ 4] 4298         CALL QDUP 
      0018AA CD 04 A6         [ 4] 4299         CALL QBRAN 
      0018AD 18 44                 4300         .word SET_RAMLAST  
      0018AF CD 21 91         [ 4] 4301         CALL UPDATPTR  
      0018B2 81               [ 4] 4302 1$:     RET          
                                   4303     
                                   4304 ;----------------------------------
                                   4305 ; runtime for DCONST 
                                   4306 ; stack double constant 
                                   4307 ; DO-DCONST ( -- d )
                                   4308 ;-----------------------------------
                                   4309 ;        .word LINK 
                                   4310 ;        LINK=.
                                   4311 ;        .byte 9 
                                   4312 ;        .ascii "DO-DCONST"
      0018B3                       4313 DO_DCONST:
      0018B3 90 85            [ 2] 4314     popw y 
      0018B5 90 BF 28         [ 2] 4315     ldw YTEMP,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      0018B8 1D 00 04         [ 2] 4316     subw x,#2*CELLL 
      0018BB 90 FE            [ 2] 4317     ldw y,(y)
      0018BD FF               [ 2] 4318     ldw (x),y 
      0018BE 90 BE 28         [ 2] 4319     ldw y,YTEMP 
      0018C1 90 EE 02         [ 2] 4320     ldw y,(2,y)
      0018C4 EF 02            [ 2] 4321     ldw (2,x),y 
      0018C6 81               [ 4] 4322     ret 
                                   4323 
                                   4324 ;; Tools
                                   4325 
                                   4326 ;       _TYPE   ( b u -- )
                                   4327 ;       Display a string. Filter
                                   4328 ;       non-printing characters.
      0018C7 18 86                 4329         .word      LINK
                           0018C9  4330 LINK = . 
      0018C9 05                    4331         .byte      5
      0018CA 5F 54 59 50 45        4332         .ascii     "_TYPE"
      0018CF                       4333 UTYPE:
      0018CF CD 05 61         [ 4] 4334         CALL     TOR     ;start count down loop
      0018D2 20 0F            [ 2] 4335         JRA     UTYP2   ;skip first pass
      0018D4 CD 05 98         [ 4] 4336 UTYP1:  CALL     DUPP
      0018D7 CD 05 0F         [ 4] 4337         CALL     CAT
      0018DA CD 0B 5B         [ 4] 4338         CALL     TCHAR
      0018DD CD 04 38         [ 4] 4339         CALL     EMIT    ;display only printable
      0018E0 CD 0A C5         [ 4] 4340         CALL     ONEP    ;increment address
      0018E3 CD 04 87         [ 4] 4341 UTYP2:  CALL     DONXT
      0018E6 18 D4                 4342         .word      UTYP1   ;loop till done
      0018E8 CC 05 8E         [ 2] 4343         JP     DROP
                                   4344 
                                   4345 ;       dm+     ( a u -- a )
                                   4346 ;       Dump u bytes from ,
                                   4347 ;       leaving a+u on  stack.
      0018EB 18 C9                 4348         .word      LINK
                           0018ED  4349 LINK = . 
      0018ED 03                    4350         .byte      3
      0018EE 64 6D 2B              4351         .ascii     "dm+"
      0018F1                       4352 DUMPP:
      0018F1 CD 05 C2         [ 4] 4353         CALL     OVER
      0018F4 CD 04 73         [ 4] 4354         CALL     DOLIT
      0018F7 00 04                 4355         .word      4
      0018F9 CD 0F 28         [ 4] 4356         CALL     UDOTR   ;display address
      0018FC CD 0E 78         [ 4] 4357         CALL     SPACE
      0018FF CD 05 61         [ 4] 4358         CALL     TOR     ;start count down loop
      001902 20 11            [ 2] 4359         JRA     PDUM2   ;skip first pass
      001904 CD 05 98         [ 4] 4360 PDUM1:  CALL     DUPP
      001907 CD 05 0F         [ 4] 4361         CALL     CAT
      00190A CD 04 73         [ 4] 4362         CALL     DOLIT
      00190D 00 03                 4363         .word      3
      00190F CD 0F 28         [ 4] 4364         CALL     UDOTR   ;display numeric data
      001912 CD 0A C5         [ 4] 4365         CALL     ONEP    ;increment address
      001915 CD 04 87         [ 4] 4366 PDUM2:  CALL     DONXT
      001918 19 04                 4367         .word      PDUM1   ;loop till done
      00191A 81               [ 4] 4368         RET
                                   4369 
                                   4370 ;       DUMP    ( a u -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                   4371 ;       Dump u bytes from a,
                                   4372 ;       in a formatted manner.
      00191B 18 ED                 4373         .word      LINK
                           00191D  4374 LINK = . 
      00191D 04                    4375         .byte      4
      00191E 44 55 4D 50           4376         .ascii     "DUMP"
      001922                       4377 DUMP:
      001922 CD 06 68         [ 4] 4378         CALL     BASE
      001925 CD 04 F1         [ 4] 4379         CALL     AT
      001928 CD 05 61         [ 4] 4380         CALL     TOR
      00192B CD 0D D7         [ 4] 4381         CALL     HEX     ;save radix, set hex
      00192E CD 04 73         [ 4] 4382         CALL     DOLIT
      001931 00 10                 4383         .word      16
      001933 CD 09 EB         [ 4] 4384         CALL     SLASH   ;change count to lines
      001936 CD 05 61         [ 4] 4385         CALL     TOR     ;start count down loop
      001939 CD 0E C0         [ 4] 4386 DUMP1:  CALL     CR
      00193C CD 04 73         [ 4] 4387         CALL     DOLIT
      00193F 00 10                 4388         .word      16
      001941 CD 07 B2         [ 4] 4389         CALL     DDUP
      001944 CD 18 F1         [ 4] 4390         CALL     DUMPP   ;display numeric
      001947 CD 07 66         [ 4] 4391         CALL     ROT
      00194A CD 07 66         [ 4] 4392         CALL     ROT
      00194D CD 0E 78         [ 4] 4393         CALL     SPACE
      001950 CD 0E 78         [ 4] 4394         CALL     SPACE
      001953 CD 18 CF         [ 4] 4395         CALL     UTYPE   ;display printable characters
      001956 CD 04 87         [ 4] 4396         CALL     DONXT
      001959 19 39                 4397         .word      DUMP1   ;loop till done
      00195B CD 05 8E         [ 4] 4398 DUMP3:  CALL     DROP
      00195E CD 05 42         [ 4] 4399         CALL     RFROM
      001961 CD 06 68         [ 4] 4400         CALL     BASE
      001964 CC 04 DA         [ 2] 4401         JP     STORE   ;restore radix
                                   4402 
                                   4403 ;       .S      ( ... -- ... )
                                   4404 ;        Display  contents of stack.
      001967 19 1D                 4405         .word      LINK
                           001969  4406 LINK = . 
      001969 02                    4407         .byte      2
      00196A 2E 53                 4408         .ascii     ".S"
      00196C                       4409 DOTS:
      00196C CD 0E C0         [ 4] 4410         CALL     CR
      00196F CD 0B 73         [ 4] 4411         CALL     DEPTH   ;stack depth
      001972 CD 05 61         [ 4] 4412         CALL     TOR     ;start count down loop
      001975 20 09            [ 2] 4413         JRA     DOTS2   ;skip first pass
      001977 CD 05 55         [ 4] 4414 DOTS1:  CALL     RAT
      00197A CD 0B 8A         [ 4] 4415 	CALL     PICK
      00197D CD 0F 79         [ 4] 4416         CALL     DOT     ;index stack, display contents
      001980 CD 04 87         [ 4] 4417 DOTS2:  CALL     DONXT
      001983 19 77                 4418         .word      DOTS1   ;loop till done
      001985 CD 0E FF         [ 4] 4419         CALL     DOTQP
      001988 05                    4420         .byte      5
      001989 20 3C 73 70 20        4421         .ascii     " <sp "
      00198E 81               [ 4] 4422         RET
                                   4423 
                                   4424 ;       >NAME   ( ca -- na | F )
                                   4425 ;       Convert code address
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                   4426 ;       to a name address.
      00198F 19 69                 4427         .word      LINK
                           001991  4428 LINK = . 
      001991 05                    4429         .byte      5
      001992 3E 4E 41 4D 45        4430         .ascii     ">NAME"
      001997                       4431 TNAME:
      001997 CD 06 EB         [ 4] 4432         CALL     CNTXT   ;vocabulary link
      00199A CD 04 F1         [ 4] 4433 TNAM2:  CALL     AT
      00199D CD 05 98         [ 4] 4434         CALL     DUPP    ;?last word in a vocabulary
      0019A0 CD 04 A6         [ 4] 4435         CALL     QBRAN
      0019A3 19 BE                 4436         .word      TNAM4
      0019A5 CD 07 B2         [ 4] 4437         CALL     DDUP
      0019A8 CD 11 41         [ 4] 4438         CALL     NAMET
      0019AB CD 06 20         [ 4] 4439         CALL     XORR    ;compare
      0019AE CD 04 A6         [ 4] 4440         CALL     QBRAN
      0019B1 19 B8                 4441         .word      TNAM3
      0019B3 CD 0A A9         [ 4] 4442         CALL     CELLM   ;continue with next word
      0019B6 20 E2            [ 2] 4443         JRA     TNAM2
      0019B8 CD 05 A8         [ 4] 4444 TNAM3:  CALL     SWAPP
      0019BB CC 05 8E         [ 2] 4445         JP     DROP
      0019BE CD 07 A7         [ 4] 4446 TNAM4:  CALL     DDROP
      0019C1 CC 0B 31         [ 2] 4447         JP     ZERO
                                   4448 
                                   4449 ;       .ID     ( na -- )
                                   4450 ;        Display  name at address.
      0019C4 19 91                 4451         .word      LINK
                           0019C6  4452 LINK = . 
      0019C6 03                    4453         .byte      3
      0019C7 2E 49 44              4454         .ascii     ".ID"
      0019CA                       4455 DOTID:
      0019CA CD 07 55         [ 4] 4456         CALL     QDUP    ;if zero no name
      0019CD CD 04 A6         [ 4] 4457         CALL     QBRAN
      0019D0 19 E0                 4458         .word      DOTI1
      0019D2 CD 0C 08         [ 4] 4459         CALL     COUNT
      0019D5 CD 04 73         [ 4] 4460         CALL     DOLIT
      0019D8 00 1F                 4461         .word      0x1F
      0019DA CD 05 F7         [ 4] 4462         CALL     ANDD    ;mask lexicon bits
      0019DD CC 18 CF         [ 2] 4463         JP     UTYPE
      0019E0 CD 0E FF         [ 4] 4464 DOTI1:  CALL     DOTQP
      0019E3 09                    4465         .byte      9
      0019E4 20 6E 6F 4E 61 6D 65  4466         .ascii     " noName"
      0019EB 81               [ 4] 4467         RET
                                   4468 
                           000000  4469 WANT_SEE=0
                           000000  4470 .if WANT_SEE 
                                   4471 ;       SEE     ( -- ; <string> )
                                   4472 ;       A simple decompiler.
                                   4473 ;       Updated for byte machines.
                                   4474         .word      LINK
                                   4475 LINK = . 
                                   4476         .byte      3
                                   4477         .ascii     "SEE"
                                   4478 SEE:
                                   4479         CALL     TICK    ;starting address
                                   4480         CALL     CR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                   4481         CALL     ONEM
                                   4482 SEE1:   CALL     ONEP
                                   4483         CALL     DUPP
                                   4484         CALL     AT
                                   4485         CALL     DUPP
                                   4486         CALL     QBRAN
                                   4487         .word    SEE2
                                   4488         CALL     TNAME   ;?is it a name
                                   4489 SEE2:   CALL     QDUP    ;name address or zero
                                   4490         CALL     QBRAN
                                   4491         .word    SEE3
                                   4492         CALL     SPACE
                                   4493         CALL     DOTID   ;display name
                                   4494         CALL     ONEP
                                   4495         JRA      SEE4
                                   4496 SEE3:   CALL     DUPP
                                   4497         CALL     CAT
                                   4498         CALL     UDOT    ;display number
                                   4499 SEE4:   CALL     NUFQ    ;user control
                                   4500         CALL     QBRAN
                                   4501         .word    SEE1
                                   4502         JP     DROP
                                   4503 .endif ; WANT_SEE 
                                   4504 
                                   4505 ;       WORDS   ( -- )
                                   4506 ;       Display names in vocabulary.
      0019EC 19 C6                 4507         .word      LINK
                           0019EE  4508 LINK = . 
      0019EE 05                    4509         .byte      5
      0019EF 57 4F 52 44 53        4510         .ascii     "WORDS"
      0019F4                       4511 WORDS:
      0019F4 CD 0E C0         [ 4] 4512         CALL     CR
      0019F7 CD 06 EB         [ 4] 4513         CALL     CNTXT   ;only in context
      0019FA CD 04 F1         [ 4] 4514 WORS1:  CALL     AT
      0019FD CD 07 55         [ 4] 4515         CALL     QDUP    ;?at end of list
      001A00 CD 04 A6         [ 4] 4516         CALL     QBRAN
      001A03 1A 16                 4517         .word      WORS2
      001A05 CD 05 98         [ 4] 4518         CALL     DUPP
      001A08 CD 0E 78         [ 4] 4519         CALL     SPACE
      001A0B CD 19 CA         [ 4] 4520         CALL     DOTID   ;display a name
      001A0E CD 0A A9         [ 4] 4521         CALL     CELLM
      001A11 CD 04 BD         [ 4] 4522         CALL     BRAN
      001A14 19 FA                 4523         .word      WORS1
      001A16 81               [ 4] 4524 WORS2:  RET
                                   4525 
                                   4526         
                                   4527 ;; Hardware reset
                                   4528 
                                   4529 ;       hi      ( -- )
                                   4530 ;       Display sign-on message.
      001A17 19 EE                 4531         .word      LINK
                           001A19  4532 LINK = . 
      001A19 02                    4533         .byte      2
      001A1A 68 69                 4534         .ascii     "hi"
      001A1C                       4535 HI:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      001A1C CD 0E C0         [ 4] 4536         CALL     CR
      001A1F CD 0E FF         [ 4] 4537         CALL     DOTQP   ;initialize I/O
      001A22 0F                    4538         .byte      15
      001A23 73 74 6D 38 65 46 6F  4539         .ascii     "stm8eForth v"
             72 74 68 20 76
      001A2F 33                    4540 	.byte      VER+'0'
      001A30 2E                    4541         .byte      '.' 
      001A31 30                    4542 	.byte      EXT+'0' ;version
      001A32 CD 0E FF         [ 4] 4543         CALL    DOTQP
                           000001  4544 .if NUCLEO          
      001A35 12                    4545         .byte 18
      001A36 20 6F 6E 20 4E 55 43  4546         .ascii  " on NUCLEO-8S208RB"
             4C 45 4F 2D 38 53 32
             30 38 52 42
                                   4547 .endif
                           000000  4548 .if DISCOVERY
                                   4549         .byte 19
                                   4550         .ascii  " on STM8S-DISCOVERY"
                                   4551 .endif
                           000000  4552 .if DOORBELL
                                   4553         .byte 16
                                   4554         .ascii " on stm8s105k6b6"
                                   4555 .endif
      001A48 CC 0E C0         [ 2] 4556         JP     CR
                                   4557 
                           000000  4558 WANT_DEBUG=0
                           000000  4559 .if WANT_DEBUG 
                                   4560 ;       DEBUG      ( -- )
                                   4561 ;       Display sign-on message.
                                   4562 ;        .word      LINK
                                   4563 LINK = . 
                                   4564         .byte      5
                                   4565         .ascii     "DEBUG"
                                   4566 DEBUG:
                                   4567 	CALL DOLIT
                                   4568 	.word 0x65
                                   4569 	CALL EMIT
                                   4570 	CALL DOLIT
                                   4571 	.word 0
                                   4572  	CALL ZLESS 
                                   4573 	CALL DOLIT
                                   4574 	.word 0xFFFE
                                   4575 	CALL ZLESS 
                                   4576 	CALL UPLUS 
                                   4577  	CALL DROP 
                                   4578 	CALL DOLIT
                                   4579 	.word 3
                                   4580 	CALL UPLUS 
                                   4581 	CALL UPLUS 
                                   4582  	CALL DROP
                                   4583 	CALL DOLIT
                                   4584 	.word 0x43
                                   4585 	CALL UPLUS 
                                   4586  	CALL DROP
                                   4587 	CALL EMIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                                   4588 	CALL DOLIT
                                   4589 	.word 0x4F
                                   4590 	CALL DOLIT
                                   4591 	.word 0x6F
                                   4592  	CALL XORR
                                   4593 	CALL DOLIT
                                   4594 	.word 0xF0
                                   4595  	CALL ANDD
                                   4596 	CALL DOLIT
                                   4597 	.word 0x4F
                                   4598  	CALL ORR
                                   4599 	CALL EMIT
                                   4600 	CALL DOLIT
                                   4601 	.word 8
                                   4602 	CALL DOLIT
                                   4603 	.word 6
                                   4604  	CALL SWAPP
                                   4605 	CALL OVER
                                   4606 	CALL XORR
                                   4607 	CALL DOLIT
                                   4608 	.word 3
                                   4609 	CALL ANDD 
                                   4610 	CALL ANDD
                                   4611 	CALL DOLIT
                                   4612 	.word 0x70
                                   4613 	CALL UPLUS 
                                   4614 	CALL DROP
                                   4615 	CALL EMIT
                                   4616 	CALL DOLIT
                                   4617 	.word 0
                                   4618 	CALL QBRAN
                                   4619 	.word DEBUG1
                                   4620 	CALL DOLIT
                                   4621 	.word 0x3F
                                   4622 DEBUG1:
                                   4623 	CALL DOLIT
                                   4624 	.word 0xFFFF
                                   4625 	CALL QBRAN
                                   4626 	.word DEBUG2
                                   4627 	CALL DOLIT
                                   4628 	.word 0x74
                                   4629 	CALL BRAN
                                   4630 	.word DEBUG3
                                   4631 DEBUG2:
                                   4632 	CALL DOLIT
                                   4633 	.word 0x21
                                   4634 DEBUG3:
                                   4635 	CALL EMIT
                                   4636 	CALL DOLIT
                                   4637 	.word 0x68
                                   4638 	CALL DOLIT
                                   4639 	.word 0x80
                                   4640 	CALL STORE
                                   4641 	CALL DOLIT
                                   4642 	.word 0x80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                   4643 	CALL AT
                                   4644 	CALL EMIT
                                   4645 	CALL DOLIT
                                   4646 	.word 0x4D
                                   4647 	CALL TOR
                                   4648 	CALL RAT
                                   4649 	CALL RFROM
                                   4650 	CALL ANDD
                                   4651 	CALL EMIT
                                   4652 	CALL DOLIT
                                   4653 	.word 0x61
                                   4654 	CALL DOLIT
                                   4655 	.word 0xA
                                   4656 	CALL TOR
                                   4657 DEBUG4:
                                   4658 	CALL DOLIT
                                   4659 	.word 1
                                   4660 	CALL UPLUS 
                                   4661 	CALL DROP
                                   4662 	CALL DONXT
                                   4663 	.word DEBUG4
                                   4664 	CALL EMIT
                                   4665 	CALL DOLIT
                                   4666 	.word 0x656D
                                   4667 	CALL DOLIT
                                   4668 	.word 0x100
                                   4669 	CALL UMSTA
                                   4670 	CALL SWAPP
                                   4671 	CALL DOLIT
                                   4672 	.word 0x100
                                   4673 	CALL UMSTA
                                   4674 	CALL SWAPP 
                                   4675 	CALL DROP
                                   4676 	CALL EMIT
                                   4677 	CALL EMIT
                                   4678 	CALL DOLIT
                                   4679 	.word 0x2043
                                   4680 	CALL DOLIT
                                   4681 	.word 0
                                   4682 	CALL DOLIT
                                   4683 	.word 0x100
                                   4684 	CALL UMMOD
                                   4685 	CALL EMIT
                                   4686 	CALL EMIT
                                   4687 	;JP ORIG
                                   4688 	RET
                                   4689 .endif ; WANT_DEBUG 
                                   4690 
                                   4691 
                                   4692 ;       'BOOT   ( -- a )
                                   4693 ;       The application startup vector.
      001A4B 1A 19                 4694         .word      LINK
                           001A4D  4695 LINK = . 
      001A4D 05                    4696         .byte      5
      001A4E 27 42 4F 4F 54        4697         .ascii     "'BOOT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      001A53                       4698 TBOOT:
      001A53 CD 06 58         [ 4] 4699         CALL     DOVAR
      001A56 40 02                 4700         .word    APP_RUN      ;application to boot
                                   4701 
                                   4702 ;       COLD    ( -- )
                                   4703 ;       The hilevel cold start s=ence.
      001A58 1A 4D                 4704         .word      LINK
                           001A5A  4705         LINK = . 
      001A5A 04                    4706         .byte      4
      001A5B 43 4F 4C 44           4707         .ascii     "COLD"
      001A5F                       4708 COLD:
                           000000  4709 .if WANT_DEBUG
                                   4710         CALL DEBUG
                                   4711 .endif ; WANT_DEBUG
      001A5F CD 04 73         [ 4] 4712 COLD1:  CALL     DOLIT
      001A62 00 2B                 4713         .word      UZERO
      001A64 CD 04 73         [ 4] 4714 	CALL     DOLIT
      001A67 00 06                 4715         .word      UPP
      001A69 CD 04 73         [ 4] 4716         CALL     DOLIT
      001A6C 00 1E                 4717 	.word      UEND-UZERO
      001A6E CD 0C 6C         [ 4] 4718         CALL     CMOVE   ;initialize user area
                           000001  4719 .if WANT_FLOAT 
      001A71 CD 2A 85         [ 4] 4720         CALL    FINIT 
                                   4721 .endif 
                                   4722 ; if APP_RUN==0 initialize with ca de 'hi'  
      001A74 90 CE 40 02      [ 2] 4723         ldw y,APP_RUN 
      001A78 26 0B            [ 1] 4724         jrne 0$
      001A7A 1D 00 02         [ 2] 4725         subw x,#CELLL 
      001A7D 90 AE 1A 1C      [ 2] 4726         ldw y,#HI  
      001A81 FF               [ 2] 4727         ldw (x),y
      001A82 CD 1B 7D         [ 4] 4728         call UPDATRUN 
      001A85                       4729 0$:        
                                   4730 ; update LAST with APP_LAST 
                                   4731 ; if APP_LAST > LAST else do the opposite
      001A85 90 CE 40 00      [ 2] 4732         ldw y,APP_LAST 
      001A89 90 B3 1E         [ 2] 4733         cpw y,ULAST 
      001A8C 22 05            [ 1] 4734         jrugt 1$ 
                                   4735 ; save LAST at APP_LAST  
      001A8E CD 1B 65         [ 4] 4736         call UPDATLAST 
      001A91 20 06            [ 2] 4737         jra 2$
      001A93                       4738 1$: ; update LAST with APP_LAST 
      001A93 90 BF 1E         [ 2] 4739         ldw ULAST,y
      001A96 90 BF 18         [ 2] 4740         ldw UCNTXT,y
      001A99                       4741 2$:  
                                   4742 ; update APP_CP if < app_space 
      001A99 90 CE 40 04      [ 2] 4743         ldw y,APP_CP  
      001A9D 90 B3 1C         [ 2] 4744         cpw y,UCP   
      001AA0 24 06            [ 1] 4745         jruge 3$ 
      001AA2 CD 1B 8E         [ 4] 4746         call UPDATCP
      001AA5 90 BE 1C         [ 2] 4747         ldw y,UCP   
      001AA8                       4748 3$:
      001AA8 90 BF 1C         [ 2] 4749         ldw UCP,y                 
                                   4750 ; update UVP with APP_VP  
                                   4751 ; if APP_VP>UVP else do the opposite 
      001AAB 90 CE 40 06      [ 2] 4752         ldw y,APP_VP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      001AAF 90 B3 1A         [ 2] 4753         cpw y,UVP 
      001AB2 22 05            [ 1] 4754         jrugt 4$
      001AB4 CD 1B A5         [ 4] 4755         call UPDATVP 
      001AB7 20 03            [ 2] 4756         jra 6$
      001AB9                       4757 4$: ; update UVP with APP_VP 
      001AB9 90 BF 1A         [ 2] 4758         ldw UVP,y 
      001ABC                       4759 6$:      
      001ABC CD 14 24         [ 4] 4760         CALL     PRESE   ;initialize data stack and TIB
      001ABF CD 1A 53         [ 4] 4761         CALL     TBOOT
      001AC2 CD 0C 55         [ 4] 4762         CALL     ATEXE   ;application boot
      001AC5 CD 16 ED         [ 4] 4763         CALL     OVERT
      001AC8 CC 14 41         [ 2] 4764         JP     QUIT    ;start interpretation
                                   4765 
                                   4766 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                   4767         .include "flash.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21 ;  routines to write to FLASH, EEPROM 
                                     22 ;  and OPTION 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26 ;--------------------------------
                                     27 ; initialize FPTR 
                                     28 ; FP!  ( ud -- )
                                     29 ;---------------------------------
      001ACB 1A 5A                   30     .word LINK 
                           001ACD    31     LINK=.
      001ACD 03                      32     .byte 3 
      001ACE 46 50 21                33     .ascii "FP!"
      001AD1                         34 FPSTOR:
      001AD1 90 93            [ 1]   35     ldw y,x
      001AD3 90 FE            [ 2]   36     ldw y,(y)
      001AD5 90 9F            [ 1]   37     ld a,yl 
      001AD7 B7 36            [ 1]   38     ld FPTR,a 
      001AD9 1C 00 02         [ 2]   39     addw x,#CELLL 
      001ADC 90 93            [ 1]   40     ldw y,x 
      001ADE 90 FE            [ 2]   41     ldw y,(y)
      001AE0 90 BF 37         [ 2]   42     ldw PTR16,y
      001AE3 1C 00 02         [ 2]   43     addw x,#CELLL 
      001AE6 81               [ 4]   44     ret 
                                     45 
                                     46 ;-----------------------------------
                                     47 ; return EEPROM base address 
                                     48 ; as a double 
                                     49 ;  EEPROM  ( -- ud )
                                     50 ;-----------------------------------
      001AE7 1A CD                   51     .word LINK 
                           001AE9    52 LINK=.
      001AE9 06                      53     .byte 6 
      001AEA 45 45 50 52 4F 4D       54     .ascii "EEPROM"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001AF0                         55 EEPROM: 
      001AF0 90 AE 40 00      [ 2]   56     ldw y,#EEPROM_BASE
      001AF4 1D 00 04         [ 2]   57     subw x,#2*CELLL 
      001AF7 EF 02            [ 2]   58     ldw (2,x),y 
      001AF9 90 5F            [ 1]   59     clrw y 
      001AFB FF               [ 2]   60     ldw (x),y 
      001AFC 81               [ 4]   61     ret
                                     62 
                                     63 ;---------------------------------
                                     64 ; return APP_LAST pointer as double
                                     65 ; EEP-LAST ( -- ud )
                                     66 ;---------------------------------
      001AFD 1A E9                   67 	.word LINK 
                           001AFF    68 	LINK=.
      001AFF 08                      69 	.byte 8 
      001B00 45 45 50 2D 4C 41 53    70 	.ascii "EEP-LAST"
             54
      001B08                         71 EEPLAST:
      001B08 1D 00 04         [ 2]   72 	subw x,#2*CELLL 
      001B0B 90 AE 40 00      [ 2]   73 	ldw y,#APP_LAST 
      001B0F EF 02            [ 2]   74 	ldw (2,x),y 
      001B11 90 5F            [ 1]   75 	clrw y 
      001B13 FF               [ 2]   76 	ldw (x),y 
      001B14 81               [ 4]   77 	ret 
                                     78 
                                     79 ;----------------------------------
                                     80 ; return APP_RUN pointer as double	
                                     81 ; EEP-RUN ( -- ud )
                                     82 ;-----------------------------------
      001B15 1A FF                   83 	.word LINK 
                           001B17    84 	LINK=.
      001B17 07                      85 	.byte 7
      001B18 45 45 50 2D 52 55 4E    86 	.ascii "EEP-RUN"
      001B1F                         87 EEPRUN:
      001B1F 1D 00 04         [ 2]   88 	subw x,#2*CELLL 
      001B22 90 AE 40 02      [ 2]   89 	ldw y,#APP_RUN 
      001B26 EF 02            [ 2]   90 	ldw (2,x),y 
      001B28 90 5F            [ 1]   91 	clrw y 
      001B2A FF               [ 2]   92 	ldw (x),y 
      001B2B 81               [ 4]   93 	ret 
                                     94 
                                     95 ;------------------------------------
                                     96 ; return APP_CP pointer as double 
                                     97 ; EEP-CP ( -- ud )
                                     98 ;------------------------------------
      001B2C 1B 17                   99 	.word LINK
                           001B2E   100 	LINK=.
      001B2E 06                     101 	.byte 6 
      001B2F 45 45 50 2D 43 50      102 	.ascii "EEP-CP"
      001B35                        103 EEPCP:
      001B35 1D 00 04         [ 2]  104 	subw x,#2*CELLL 
      001B38 90 AE 40 04      [ 2]  105 	ldw y,#APP_CP  
      001B3C EF 02            [ 2]  106 	ldw (2,x),y 
      001B3E 90 5F            [ 1]  107 	clrw y 
      001B40 FF               [ 2]  108 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001B41 81               [ 4]  109 	ret 
                                    110 
                                    111 ;------------------------------------
                                    112 ; return APP_VP pointer as double 
                                    113 ; EEP-VP ( -- ud )
                                    114 ;-------------------------------------
      001B42 1B 2E                  115 	.word LINK
                           001B44   116 	LINK=.
      001B44 06                     117 	.byte 6
      001B45 45 45 50 2D 56 50      118 	.ascii "EEP-VP"
      001B4B                        119 EEPVP:
      001B4B 1D 00 04         [ 2]  120 	subw x,#2*CELLL 
      001B4E 90 AE 40 06      [ 2]  121 	ldw y,#APP_VP  
      001B52 EF 02            [ 2]  122 	ldw (2,x),y 
      001B54 90 5F            [ 1]  123 	clrw y 
      001B56 FF               [ 2]  124 	ldw (x),y 
      001B57 81               [ 4]  125 	ret 
                                    126 
                                    127 ;----------------------------------
                                    128 ; update APP_LAST with LAST 
                                    129 ; UPDAT-LAST ( -- )
                                    130 ;----------------------------------
      001B58 1B 44                  131 	.word LINK 
                           001B5A   132 	LINK=.
      001B5A 0A                     133 	.byte 10
      001B5B 55 50 44 41 54 2D 4C   134 	.ascii "UPDAT-LAST"
             41 53 54
      001B65                        135 UPDATLAST:
      001B65 CD 07 17         [ 4]  136 	call LAST
      001B68 CD 04 F1         [ 4]  137 	call AT  
      001B6B CD 1B 08         [ 4]  138 	call EEPLAST
      001B6E CC 1D 5B         [ 2]  139 	jp EESTORE 
                                    140 
                                    141 ;---------------------------------
                                    142 ; update APP_RUN 
                                    143 ; UPDAT-RUN ( a -- )
                                    144 ;---------------------------------
      001B71 1B 5A                  145 	.word LINK
                           001B73   146 	LINK=.
      001B73 09                     147 	.byte 9
      001B74 55 50 44 41 54 2D 52   148 	.ascii "UPDAT-RUN"
             55 4E
      001B7D                        149 UPDATRUN:
      001B7D CD 1B 1F         [ 4]  150 	call EEPRUN
      001B80 CC 1D 5B         [ 2]  151 	jp EESTORE 
                                    152 	
                                    153 ;---------------------------------
                                    154 ; update APP_CP with CP 
                                    155 ; UPDAT-CP ( -- )
                                    156 ;---------------------------------
      001B83 1B 73                  157 	.word LINK 
                           001B85   158 	LINK=.
      001B85 08                     159 	.byte 8 
      001B86 55 50 44 41 54 2D 43   160 	.ascii "UPDAT-CP"
             50
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001B8E                        161 UPDATCP:
      001B8E CD 07 07         [ 4]  162 	call CPP 
      001B91 CD 04 F1         [ 4]  163 	call AT 
      001B94 CD 1B 35         [ 4]  164 	call EEPCP 
      001B97 CC 1D 5B         [ 2]  165 	jp EESTORE 
                                    166 
                                    167 ;----------------------------------
                                    168 ; update APP_VP with VP 
                                    169 ; UPDAT-VP ( -- )
                                    170 ;----------------------------------
      001B9A 1B 85                  171 	.word LINK
                           001B9C   172 	LINK=.
      001B9C 08                     173 	.byte 8 
      001B9D 55 50 44 41 54 2D 56   174 	.ascii "UPDAT-VP" 
             50
      001BA5                        175 UPDATVP:
      001BA5 CD 06 F9         [ 4]  176 	call VPP 
      001BA8 CD 04 F1         [ 4]  177 	call AT
      001BAB CD 1B 4B         [ 4]  178 	call EEPVP 
      001BAE CC 1D 5B         [ 2]  179 	jp EESTORE
                                    180 	
                           000001   181 .if NUCLEO
                                    182 ;----------------------------------
                                    183 ; fetch integer at address over 65535
                                    184 ;  F@   ( ud -- n )
                                    185 ;----------------------------------
      001BB1 1B 9C                  186     .word LINK 
                           001BB3   187 LINK=.
      001BB3 02                     188     .byte 2
      001BB4 46 40                  189     .ascii "F@"
      001BB6                        190 FARAT:
      001BB6 CD 1A D1         [ 4]  191     call FPSTOR
      001BB9 CC 1C 7E         [ 2]  192 	jp EE_READ 
                                    193 
                                    194 
                                    195 ;-------------------------------------
                                    196 ; fetch C at address over 65535 
                                    197 ; FC@ ( ud -- c)
                                    198 ;-------------------------------------
      001BBC 1B B3                  199     .word LINK
                           001BBE   200     LINK=.
      001BBE 03                     201     .byte 3 
      001BBF 46 43 40               202     .ascii "FC@" 
      001BC2                        203 FARCAT:
      001BC2 CD 1A D1         [ 4]  204     call FPSTOR
      001BC5 CC 1C A0         [ 2]  205 	jp EE_CREAD  
                                    206 .endif ; NUCLEO 
                                    207 
                                    208 ;----------------------------------
                                    209 ; UNLOCK EEPROM/OPT for writing/erasing
                                    210 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    211 ;  UNLKEE   ( -- )
                                    212 ;----------------------------------
      001BC8 1B BE                  213     .word LINK 
                           001BCA   214 LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001BCA 06                     215     .byte 6 
      001BCB 55 4E 4C 4B 45 45      216     .ascii "UNLKEE"
      001BD1                        217 UNLKEE:
      001BD1 35 00 50 5B      [ 1]  218 	mov FLASH_CR2,#0 
      001BD5 35 FF 50 5C      [ 1]  219 	mov FLASH_NCR2,#0xFF 
      001BD9 35 AE 50 64      [ 1]  220 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001BDD 35 56 50 64      [ 1]  221     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001BE1 72 07 50 5F FB   [ 2]  222 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001BE6 81               [ 4]  223 	ret
                                    224 
                                    225 ;----------------------------------
                                    226 ; UNLOCK FLASH for writing/erasing
                                    227 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    228 ; UNLKFL  ( -- )
                                    229 ;----------------------------------
      001BE7 1B CA                  230     .word LINK 
                           001BE9   231 LINK=. 
      001BE9 06                     232     .byte 6 
      001BEA 55 4E 4C 4B 46 4C      233     .ascii "UNLKFL"    
      001BF0                        234 UNLKFL:
      001BF0 35 00 50 5B      [ 1]  235 	mov FLASH_CR2,#0 
      001BF4 35 FF 50 5C      [ 1]  236 	mov FLASH_NCR2,#0xFF 
      001BF8 35 56 50 62      [ 1]  237 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001BFC 35 AE 50 62      [ 1]  238 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001C00 72 03 50 5F FB   [ 2]  239 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001C05 81               [ 4]  240 	ret
                                    241 
                                    242 ;-----------------------------
                                    243 ; UNLOCK FLASH or EEPROM 
                                    244 ; according to FPTR address 
                                    245 ;  UNLOCK ( -- )
                                    246 ;-----------------------------
      001C06 1B E9                  247 	.word LINK 
                           001C08   248 	LINK=.
      001C08 06                     249 	.byte 6
      001C09 55 4E 4C 4F 43 4B      250 	.ascii "UNLOCK"
      001C0F                        251 UNLOCK:
                                    252 ; put addr[15:0] in Y, for bounds check.
      001C0F 90 BE 37         [ 2]  253 	ldw y,PTR16   ; Y=addr15:0
                                    254 ; check addr[23:16], if <> 0 then it is extened flash memory
      001C12 3D 36            [ 1]  255 	tnz FPTR 
      001C14 26 16            [ 1]  256 	jrne 4$
      001C16 90 A3 80 00      [ 2]  257     cpw y,#FLASH_BASE
      001C1A 24 10            [ 1]  258     jruge 4$
      001C1C 90 A3 40 00      [ 2]  259 	cpw y,#EEPROM_BASE  
      001C20 25 0D            [ 1]  260     jrult 9$
      001C22 90 A3 48 7F      [ 2]  261 	cpw y,#OPTION_END 
      001C26 22 07            [ 1]  262 	jrugt 9$
      001C28 CD 1B D1         [ 4]  263 	call UNLKEE
      001C2B 81               [ 4]  264 	ret 
      001C2C CD 1B F0         [ 4]  265 4$: call UNLKFL
      001C2F 81               [ 4]  266 9$: ret 
                                    267 
                                    268 ;-------------------------
                                    269 ; LOCK write access to 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                    270 ; FLASH and EEPROM 
                                    271 ; LOCK ( -- )
                                    272 ;-------------------------
      001C30 1C 08                  273 	.word LINK 
                           001C32   274 	LINK=.
      001C32 04                     275 	.byte 4 
      001C33 4C 4F 43 4B            276 	.ascii "LOCK" 
      001C37                        277 LOCK: 
      001C37 72 13 50 5F      [ 1]  278 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001C3B 72 17 50 5F      [ 1]  279 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001C3F 81               [ 4]  280 	ret 
                                    281 
                                    282 ;-------------------------
                                    283 ; increment FPTR 
                                    284 ; INC-FPTR ( -- )
                                    285 ;-------------------------
      001C40 1C 32                  286 	.word LINK 
                           001C42   287 	LINK=. 
      001C42 08                     288 	.byte 8 
      001C43 49 4E 43 2D 46 50 54   289 	.ascii "INC-FPTR" 
             52
      001C4B                        290 INC_FPTR:
      001C4B 3C 38            [ 1]  291 	inc PTR8 
      001C4D 26 0C            [ 1]  292 	jrne 1$
      001C4F 90 89            [ 2]  293 	pushw y 
      001C51 90 BE 36         [ 2]  294 	ldw y,FPTR 
      001C54 90 5C            [ 1]  295 	incw y 
      001C56 90 BF 36         [ 2]  296 	ldw FPTR,y
      001C59 90 85            [ 2]  297 	popw y  
      001C5B 81               [ 4]  298 1$: ret 
                                    299 
                                    300 ;------------------------------
                                    301 ; add u to FPTR 
                                    302 ; PTR+ ( u -- )
                                    303 ;------------------------------
      001C5C 1C 42                  304 	.word LINK 
                           001C5E   305 	LINK=.
      001C5E 04                     306 	.byte 4 
      001C5F 50 54 52 2B            307 	.ascii "PTR+"
      001C63                        308 PTRPLUS:
      001C63 90 93            [ 1]  309 	ldw y,x 
      001C65 1C 00 02         [ 2]  310 	addw x,#CELLL 
      001C68 72 B9 00 37      [ 2]  311 	addw y,PTR16 
      001C6C 90 BF 37         [ 2]  312 	ldw PTR16,y  
      001C6F 24 02            [ 1]  313 	jrnc 1$
      001C71 3C 36            [ 1]  314 	inc FPTR 
      001C73 81               [ 4]  315 1$: ret 
                                    316 
                                    317 ;---------------------------------
                                    318 ; read word at address pointed FPTR
                                    319 ; increment FPTR 
                                    320 ; EE-READ ( -- w )
                                    321 ;------------------------------------
      001C74 1C 5E                  322 	.word LINK 
                           001C76   323 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001C76 07                     324 	.byte 7 
      001C77 45 45 2D 52 45 41 44   325 	.ascii "EE-READ"
      001C7E                        326 EE_READ:
      001C7E 1D 00 02         [ 2]  327 	subw x,#CELLL 
      001C81 92 BC 00 36      [ 5]  328 	ldf a,[FPTR]
      001C85 90 95            [ 1]  329 	ld yh,a 
      001C87 CD 1C 4B         [ 4]  330 	call INC_FPTR 
      001C8A 92 BC 00 36      [ 5]  331 	ldf a,[FPTR]
      001C8E CD 1C 4B         [ 4]  332 	call INC_FPTR 
      001C91 90 97            [ 1]  333 	ld yl,a 
      001C93 FF               [ 2]  334 	ldw (x),y 
      001C94 81               [ 4]  335 	ret 
                                    336 
                                    337 ;---------------------------------------
                                    338 ; Read byte at address pointed by FPTR 
                                    339 ; EE-CREAD ( -- c )
                                    340 ;---------------------------------------
      001C95 1C 76                  341 	.word LINK 
                           001C97   342 	LINK=.
      001C97 08                     343 	.byte 8
      001C98 45 45 2D 43 52 45 41   344 	.ascii "EE-CREAD" 
             44
      001CA0                        345 EE_CREAD:
      001CA0 1D 00 02         [ 2]  346 	subw x,#CELLL 
      001CA3 92 BC 00 36      [ 5]  347 	ldf a,[FPTR]	
      001CA7 CD 1C 4B         [ 4]  348 	call INC_FPTR
      001CAA 90 5F            [ 1]  349 	clrw y 
      001CAC 90 97            [ 1]  350 	ld yl,a 
      001CAE FF               [ 2]  351 	ldw (x),y 
      001CAF 81               [ 4]  352 	ret 
                                    353 
                                    354 ;----------------------------
                                    355 ; write a byte at address pointed 
                                    356 ; by FPTR and increment FPTR.
                                    357 ; Expect pointer already initialized 
                                    358 ; and memory unlocked 
                                    359 ; WR-BYTE ( c -- )
                                    360 ;----------------------------
      001CB0 1C 97                  361 	.word LINK 
                           001CB2   362 	LINK=. 
      001CB2 07                     363 	.byte 7 
      001CB3 57 52 2D 42 59 54 45   364 	.ascii "WR-BYTE" 
                                    365 
      001CBA                        366 WR_BYTE:
      001CBA CD 04 65         [ 4]  367 	call FC_XOFF
      001CBD 90 93            [ 1]  368 	ldw y,x 
      001CBF 90 FE            [ 2]  369 	ldw y,(y)
      001CC1 1C 00 02         [ 2]  370 	addw x,#CELLL 
      001CC4 90 9F            [ 1]  371 	ld a,yl
      001CC6 92 BD 00 36      [ 4]  372 	ldf [FPTR],a
      001CCA 72 05 50 5F FB   [ 2]  373 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001CCF CD 04 4F         [ 4]  374 	call FC_XON
      001CD2 CC 1C 4B         [ 2]  375 	jp INC_FPTR 
                                    376 
                                    377 ;---------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                                    378 ; write a word at address pointed 
                                    379 ; by FPTR and increment FPTR 
                                    380 ; Expect pointer already initialzed 
                                    381 ; and memory unlocked 
                                    382 ; WR-WORD ( w -- )
                                    383 ;---------------------------------------
      001CD5 1C B2                  384 	.word LINK 
                           001CD7   385 	LINK=.
      001CD7 07                     386 	.byte 7 
      001CD8 57 52 2D 57 4F 52 44   387 	.ascii "WR-WORD" 
      001CDF                        388 WR_WORD:
      001CDF CD 04 65         [ 4]  389 	call FC_XOFF
      001CE2 90 93            [ 1]  390 	ldw y,x
      001CE4 90 FE            [ 2]  391 	ldw y,(y)
      001CE6 1C 00 02         [ 2]  392 	addw x,#CELLL 
      001CE9 90 9E            [ 1]  393 	ld a,yh 
      001CEB 92 BD 00 36      [ 4]  394 	ldf [FPTR],a
      001CEF 72 05 50 5F FB   [ 2]  395 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001CF4 CD 1C 4B         [ 4]  396 	call INC_FPTR 
      001CF7 90 9F            [ 1]  397 	ld a,yl 
      001CF9 92 BD 00 36      [ 4]  398 	ldf [FPTR],a
      001CFD 72 05 50 5F FB   [ 2]  399 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001D02 CD 04 4F         [ 4]  400 	call FC_XON
      001D05 CC 1C 4B         [ 2]  401 	jp INC_FPTR 
                                    402 
                                    403 
                                    404 ;---------------------------------------
                                    405 ; write a byte to FLASH or EEPROM/OPTION  
                                    406 ; EEC!  (c ud -- )
                                    407 ;---------------------------------------
      001D08 1C D7                  408     .word LINK 
                           001D0A   409 	LINK=.
      001D0A 04                     410     .byte 4 
      001D0B 45 45 43 21            411     .ascii "EEC!"
                                    412 	; local variables 
                           000001   413 	BTW = 1   ; byte to write offset on stack
                           000002   414     OPT = 2 
                           000002   415 	VSIZE = 2
      001D0F                        416 EECSTORE:
      001D0F 52 02            [ 2]  417 	sub sp,#VSIZE
      001D11 CD 1A D1         [ 4]  418     call FPSTOR
      001D14 E6 01            [ 1]  419 	ld a,(1,x)
      001D16 43               [ 1]  420 	cpl a 
      001D17 6B 01            [ 1]  421 	ld (BTW,sp),a ; byte to write 
      001D19 0F 02            [ 1]  422 	clr (OPT,sp)  ; OPTION flag
      001D1B CD 1C 0F         [ 4]  423 	call UNLOCK 
                                    424 	; check if option
      001D1E 3D 36            [ 1]  425 	tnz FPTR 
      001D20 26 19            [ 1]  426 	jrne 2$
      001D22 90 BE 37         [ 2]  427 	ldw y,PTR16 
      001D25 90 A3 48 00      [ 2]  428 	cpw y,#OPTION_BASE
      001D29 2B 10            [ 1]  429 	jrmi 2$
      001D2B 90 A3 48 80      [ 2]  430 	cpw y,#OPTION_END+1
      001D2F 2A 0A            [ 1]  431 	jrpl 2$
      001D31 03 02            [ 1]  432 	cpl (OPT,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                    433 	; OPTION WRITE require this UNLOCK 
      001D33 72 1E 50 5B      [ 1]  434     bset FLASH_CR2,#FLASH_CR2_OPT
      001D37 72 1F 50 5C      [ 1]  435     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001D3B                        436 2$: 
      001D3B CD 1C BA         [ 4]  437 	call WR_BYTE 	
      001D3E 0D 02            [ 1]  438 	tnz (OPT,sp)
      001D40 27 0D            [ 1]  439 	jreq 3$ 
      001D42 7B 01            [ 1]  440     ld a,(BTW,sp)
      001D44 90 5F            [ 1]  441     clrw y
      001D46 90 97            [ 1]  442 	ld yl,a 
      001D48 1D 00 02         [ 2]  443 	subw x,#CELLL 
      001D4B FF               [ 2]  444 	ldw (x),y 
      001D4C CD 1C BA         [ 4]  445 	call WR_BYTE
      001D4F                        446 3$: 
      001D4F CD 1C 37         [ 4]  447 	call LOCK 
      001D52 5B 02            [ 2]  448 	addw sp,#VSIZE 
      001D54 81               [ 4]  449     ret
                                    450 
                                    451 ;------------------------------
                                    452 ; write integer in FLASH|EEPROM
                                    453 ; EE! ( n ud -- )
                                    454 ;------------------------------
      001D55 1D 0A                  455 	.word LINK 
                           001D57   456 	LINK=.
      001D57 03                     457 	.byte 3 
      001D58 45 45 21               458 	.ascii "EE!"
      001D5B                        459 EESTORE:
      001D5B CD 1A D1         [ 4]  460 	call FPSTOR 
      001D5E CD 1C 0F         [ 4]  461 	call UNLOCK 
      001D61 90 93            [ 1]  462 	ldw y,x 
      001D63 90 FE            [ 2]  463 	ldw y,(y)
      001D65 90 89            [ 2]  464 	pushw y 
      001D67 90 5E            [ 1]  465 	swapw y 
      001D69 FF               [ 2]  466 	ldw (x),y 
      001D6A CD 1C BA         [ 4]  467 	call WR_BYTE 
      001D6D 90 85            [ 2]  468 	popw y 
      001D6F 1D 00 02         [ 2]  469 	subw x,#CELLL
      001D72 FF               [ 2]  470 	ldw (x),y 
      001D73 CD 1C BA         [ 4]  471 	call WR_BYTE
      001D76 CC 1C 37         [ 2]  472 	jp LOCK 
                                    473 
                                    474 
                                    475 ;----------------------------
                                    476 ; Erase flash memory row 
                                    477 ; stm8s208 as 128 bytes rows
                                    478 ; ROW-ERASE ( ud -- )
                                    479 ;----------------------------
      001D79 1D 57                  480 	.word LINK 
                           001D7B   481 	LINK=. 
      001D7B 09                     482 	.byte 9 
      001D7C 52 4F 57 2D 45 52 41   483 	.ascii "ROW-ERASE" 
             53 45
      001D85                        484 row_erase:
      001D85 CD 04 65         [ 4]  485 	call FC_XOFF
      001D88 CD 1A D1         [ 4]  486 	call FPSTOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                                    487 ;code must be execute from RAM 
                                    488 ;copy routine to PAD 
      001D8B 1D 00 02         [ 2]  489 	subw x,#CELLL 
      001D8E 90 AE 1D DE      [ 2]  490 	ldw y,#row_erase_proc
      001D92 FF               [ 2]  491 	ldw (x),y 
      001D93 CD 0C 30         [ 4]  492 	call PAD 
      001D96 90 AE 1E 05      [ 2]  493 	ldw y,#row_erase_proc_end 
      001D9A 72 A2 1D DE      [ 2]  494 	subw y,#row_erase_proc
      001D9E 1D 00 02         [ 2]  495 	subw x,#CELLL 
      001DA1 FF               [ 2]  496 	ldw (x),y 
      001DA2 CD 0C 6C         [ 4]  497 	call CMOVE 
      001DA5                        498 block_erase:
      001DA5 90 BE 37         [ 2]  499 	ldw y,FPTR+1
      001DA8 90 A3 2F 80      [ 2]  500 	cpw y,#app_space 
      001DAC 2A 19            [ 1]  501 	jrpl erase_flash 
                                    502 ; erase EEPROM block
      001DAE 90 A3 40 00      [ 2]  503 	cpw y,#EEPROM_BASE 
      001DB2 24 04            [ 1]  504 	jruge 1$
      001DB4 CD 04 4F         [ 4]  505 	call FC_XON
      001DB7 81               [ 4]  506 	ret ; bad address 
      001DB8 90 A3 47 FF      [ 2]  507 1$: cpw y,#EEPROM_END 
      001DBC 23 04            [ 2]  508 	jrule 2$ 
      001DBE CD 04 4F         [ 4]  509 	call FC_XON
      001DC1 81               [ 4]  510 	ret ; bad address 
      001DC2                        511 2$:	
      001DC2 CD 1B D1         [ 4]  512 	call UNLKEE 
      001DC5 20 03            [ 2]  513 	jra proceed_erase
                                    514 ; erase flash block:
      001DC7                        515 erase_flash:
      001DC7 CD 1B F0         [ 4]  516 	call UNLKFL 
      001DCA                        517 proceed_erase:
      001DCA CD 0C 30         [ 4]  518 	call PAD 
      001DCD 90 93            [ 1]  519 	ldw y,x
      001DCF 90 FE            [ 2]  520 	ldw y,(y)
      001DD1 1C 00 02         [ 2]  521 	addw x,#CELLL  
      001DD4 90 FD            [ 4]  522 	call (y) 
      001DD6 72 17 50 5F      [ 1]  523 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001DDA CD 04 4F         [ 4]  524 	call FC_XON
      001DDD 81               [ 4]  525 	ret 
                                    526 
                                    527 ; this routine is to be copied to PAD 
      001DDE                        528 row_erase_proc:
      001DDE 35 20 50 5B      [ 1]  529 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001DE2 35 DF 50 5C      [ 1]  530 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001DE6 4F               [ 1]  531 	clr a 
      001DE7 90 5F            [ 1]  532 	clrw y 
      001DE9 91 A7 00 36      [ 1]  533 	ldf ([FPTR],y),a
      001DED 90 5C            [ 1]  534     incw y
      001DEF 91 A7 00 36      [ 1]  535 	ldf ([FPTR],y),a
      001DF3 90 5C            [ 1]  536     incw y
      001DF5 91 A7 00 36      [ 1]  537 	ldf ([FPTR],y),a
      001DF9 90 5C            [ 1]  538     incw y
      001DFB 91 A7 00 36      [ 1]  539 	ldf ([FPTR],y),a
      001DFF 72 05 50 5F FB   [ 2]  540 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001E04 81               [ 4]  541 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001E05                        542 row_erase_proc_end:
                                    543 
                                    544 
                                    545 ;-----------------------------------
                                    546 ; block programming must be 
                                    547 ; executed from RAM 
                                    548 ; initial contidions: 
                                    549 ; 		memory unlocked
                                    550 ;       FPTR initialized 
                                    551 ; input: 
                                    552 ;    x   buffer address 
                                    553 ;-----------------------------------
                           000001   554 	BCNT=1 
      001E05                        555 copy_buffer:
      001E05 4B 80            [ 1]  556 	push #BLOCK_SIZE  
                                    557 ;enable block programming 
      001E07 72 10 50 5B      [ 1]  558 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001E0B 72 11 50 5C      [ 1]  559 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001E0F 90 5F            [ 1]  560 	clrw y
      001E11 F6               [ 1]  561 1$:	ld a,(x)
      001E12 91 A7 00 36      [ 1]  562 	ldf ([FPTR],y),a
      001E16 5C               [ 1]  563 	incw x 
      001E17 90 5C            [ 1]  564 	incw y 
      001E19 0A 01            [ 1]  565 	dec (BCNT,sp)
      001E1B 26 F4            [ 1]  566 	jrne 1$
                                    567 ; wait EOP bit 
      001E1D 72 05 50 5F FB   [ 2]  568 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001E22 84               [ 1]  569 	pop a ; remove BCNT from stack 
      001E23 81               [ 4]  570 	ret 
      001E24                        571 copy_buffer_end:
                                    572 
                                    573 ;-------------------------
                                    574 ; move program_row to RAM 
                                    575 ; in TIB 
                                    576 ;------------------------
      001E24                        577 copy_prog_to_ram:
      001E24 1D 00 06         [ 2]  578 	subw x,#6
      001E27 90 AE 1E 05      [ 2]  579 	ldw y,#copy_buffer 
      001E2B EF 04            [ 2]  580 	ldw (4,x),y 
      001E2D 90 AE 17 00      [ 2]  581 	ldw y,#TIBBASE
      001E31 EF 02            [ 2]  582 	ldw (2,x),y 
      001E33 90 AE 1E 24      [ 2]  583 	ldw y,#copy_buffer_end 
      001E37 72 A2 1E 05      [ 2]  584 	subw y,#copy_buffer  
      001E3B FF               [ 2]  585 	ldw (x),y 
      001E3C CD 0C 6C         [ 4]  586 	call CMOVE 
      001E3F 81               [ 4]  587 	ret 
                                    588 
                                    589 
                                    590 ;-----------------------------
                                    591 ; write a row in FLASH/EEPROM 
                                    592 ; WR-ROW ( a ud -- )
                                    593 ; a -> address 128 byte buffer to write 
                                    594 ; ud ->  row address in FLASH|EEPROM 
                                    595 ;-----------------------------
      001E40 1D 7B                  596 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



                           001E42   597 	LINK=.
      001E42 06                     598 	.byte 6 
      001E43 57 52 2D 52 4F 57      599 	.ascii "WR-ROW"
      001E49                        600 write_row:
      001E49 CD 04 65         [ 4]  601 	call FC_XOFF
      001E4C CD 1A D1         [ 4]  602 	call FPSTOR
                                    603 ; align to FLASH block 
      001E4F A6 80            [ 1]  604 	ld a,#0x80 
      001E51 B4 38            [ 1]  605 	and a,PTR8 
      001E53 B7 38            [ 1]  606 	ld PTR8,a  
      001E55 CD 1E 24         [ 4]  607 	call copy_prog_to_ram
      001E58 CD 1C 0F         [ 4]  608 	call UNLOCK
      001E5B 90 93            [ 1]  609 	ldw y,x 
      001E5D 90 FE            [ 2]  610 	ldw y,(y)
      001E5F 1C 00 02         [ 2]  611 	addw x,#CELLL 
      001E62 89               [ 2]  612 	pushw x 
      001E63 93               [ 1]  613 	ldw x,y ; buffer address in x 
      001E64 CD 17 00         [ 4]  614 	call TIBBASE
      001E67 CD 1C 37         [ 4]  615 	call LOCK
      001E6A 85               [ 2]  616 	popw x 
      001E6B CD 04 4F         [ 4]  617 	call FC_XON 
      001E6E 81               [ 4]  618 	ret 
                                    619 
                                    620 ;-------------------------------------
                                    621 ; change value of OPTION register 
                                    622 ; SET-OPT (c n -- ) 
                                    623 ; c new value.
                                    624 ; n OPT  number {1..7}
                                    625 ;--------------------------------------
      001E6F 1E 42                  626 		.word LINK 
                           001E71   627 		LINK=.
      001E71 07                     628 		.byte 7 
      001E72 53 45 54 2D 4F 50 54   629 		.ascii "SET-OPT" 
      001E79                        630 set_option: 
      001E79 90 93            [ 1]  631 		ldw y,x 
      001E7B 90 FE            [ 2]  632 		ldw y,(y)
      001E7D 27 06            [ 1]  633 		jreq 1$
      001E7F 90 A3 00 07      [ 2]  634 		cpw y,#7 
      001E83 23 04            [ 2]  635 		jrule 2$ 
                                    636 ; invalid OPTION number 		
      001E85 1C 00 04         [ 2]  637 1$:		addw x,#2*CELLL
      001E88 81               [ 4]  638 		ret
      001E89 90 58            [ 2]  639 2$:		sllw y 
      001E8B 72 A9 47 FF      [ 2]  640 		addw y,#OPTION_BASE-1
      001E8F FF               [ 2]  641 		ldw (x),y 
      001E90 1D 00 02         [ 2]  642 		subw x,#CELLL 
      001E93 90 5F            [ 1]  643 		clrw y 
      001E95 FF               [ 2]  644 		ldw (x),y 
      001E96 CD 1D 0F         [ 4]  645 		call EECSTORE
      001E99 81               [ 4]  646 		ret 
                                    647 
                                    648 
                                    649 
                                    650 ;--------------------------------------
                                    651 ; reset system to its original state 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



                                    652 ; before any user modification
                                    653 ; PRISTINE ( -- )
                                    654 ;-------------------------------------
      001E9A 1E 71                  655 	.word LINK  
                           001E9C   656 	LINK=.
      001E9C 08                     657 	.byte 8 
      001E9D 50 52 49 53 54 49 4E   658 	.ascii "PRISTINE"
             45
      001EA5                        659 pristine:
                                    660 ;;; erase EEPROM
      001EA5 CD 1A F0         [ 4]  661 	call EEPROM 
      001EA8 CD 07 B2         [ 4]  662 1$:	call DDUP 
      001EAB CD 1D 85         [ 4]  663 	call row_erase
      001EAE 90 93            [ 1]  664 	ldw y,x 
      001EB0 90 EE 02         [ 2]  665 	ldw y,(2,y)
      001EB3 72 A9 00 80      [ 2]  666 	addw y,#BLOCK_SIZE
      001EB7 EF 02            [ 2]  667 	ldw (2,x),y
      001EB9 90 A3 48 00      [ 2]  668 	cpw y,#OPTION_BASE 
      001EBD 25 E9            [ 1]  669 	jrult 1$
                                    670 ;;; reset OPTION to default values
      001EBF 90 AE 00 01      [ 2]  671 	ldw y,#1 ; OPT1 
      001EC3 FF               [ 2]  672 2$:	ldw (x),y   
      001EC4 90 5F            [ 1]  673 	clrw y 
      001EC6 EF 02            [ 2]  674 	ldw (2,x),y  ; ( 0 1 -- ) 
      001EC8 CD 07 B2         [ 4]  675 	call DDUP    ; ( 0 1 0 1 -- )  
      001ECB CD 1E 79         [ 4]  676 	call set_option
      001ECE 90 93            [ 1]  677 	ldw y,x 
      001ED0 90 FE            [ 2]  678 	ldw y,(y)
      001ED2 90 5C            [ 1]  679 	incw y  ; next OPTION 
      001ED4 90 A3 00 08      [ 2]  680 	cpw y,#8 
      001ED8 25 E9            [ 1]  681 	jrult 2$
                                    682 ;;; erase first row of app_space 	
      001EDA 90 AE 2F 80      [ 2]  683 	ldw y,#app_space
      001EDE EF 02            [ 2]  684 	ldw (2,x),y  
      001EE0 90 5F            [ 1]  685 	clrw y 
      001EE2 FF               [ 2]  686 	ldw (x),y ; ( app_space 0 -- )
      001EE3 CD 1D 85         [ 4]  687 	call row_erase 
                                    688 ; reset interrupt vectors 
      001EE6 1D 00 02         [ 2]  689 	subw x,#CELLL 
      001EE9 90 5F            [ 1]  690 	clrw y  
      001EEB FF               [ 2]  691 4$:	ldw (x),y  ; ( n -- ) int# 
      001EEC CD 05 98         [ 4]  692 	call DUPP  
      001EEF CD 1F 0C         [ 4]  693 	call reset_vector
      001EF2 90 93            [ 1]  694 	ldw y,x 
      001EF4 90 FE            [ 2]  695 	ldw y,(y)
      001EF6 90 5C            [ 1]  696 	incw y   ; next vector 
      001EF8 90 A3 00 19      [ 2]  697 	cpw y,#25 
      001EFC 25 ED            [ 1]  698 	jrult 4$
      001EFE CC 00 00         [ 2]  699 	jp NonHandledInterrupt ; reset MCU
                                    700 
                                    701 ;------------------------------
                                    702 ; reset an interrupt vector 
                                    703 ; to its initial value 
                                    704 ; i.e. NonHandledInterrupt
                                    705 ; RST-IVEC ( n -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                    706 ;-----------------------------
      001F01 1E 9C                  707 	.word LINK 
                           001F03   708 	LINK=. 
      001F03 08                     709 	.byte 8 
      001F04 52 53 54 2D 49 56 45   710 	.ascii "RST-IVEC"
             43
      001F0C                        711 reset_vector:
      001F0C 90 93            [ 1]  712 	ldw y,x
      001F0E 1C 00 02         [ 2]  713 	addw x,#CELLL 
      001F11 90 FE            [ 2]  714 	ldw y,(y)
      001F13 90 A3 00 17      [ 2]  715 	cpw y,#23 
      001F17 27 3A            [ 1]  716 	jreq 9$
      001F19 90 A3 00 1D      [ 2]  717 	cpw y,#29 ; last vector
      001F1D 22 34            [ 1]  718 	jrugt 9$  
      001F1F 90 58            [ 2]  719 	sllw y 
      001F21 90 58            [ 2]  720 	sllw y 
      001F23 72 A9 80 08      [ 2]  721 	addw y,#0x8008 ; irq0 address 
      001F27 90 BF 28         [ 2]  722 	ldw YTEMP,y
      001F2A 1D 00 06         [ 2]  723 	subw x,#3*CELLL 
      001F2D EF 02            [ 2]  724 	ldw (2,x),y 
      001F2F 90 5F            [ 1]  725 	clrw y
      001F31 FF               [ 2]  726 	ldw (x),y 
      001F32 A6 82            [ 1]  727 	ld a,#0x82 
      001F34 90 95            [ 1]  728 	ld yh,a
      001F36 EF 04            [ 2]  729 	ldw (4,x),y
      001F38 CD 1D 5B         [ 4]  730 	call EESTORE
      001F3B 1D 00 06         [ 2]  731 	subw x,#3*CELLL
      001F3E 90 5F            [ 1]  732 	clrw y 
      001F40 FF               [ 2]  733 	ldw (x),y 
      001F41 90 AE 00 00      [ 2]  734 	ldw y,#NonHandledInterrupt
      001F45 EF 04            [ 2]  735 	ldw (4,x),y 
      001F47 90 BE 28         [ 2]  736 	ldw y,YTEMP  
      001F4A 72 A9 00 02      [ 2]  737 	addw y,#2
      001F4E EF 02            [ 2]  738 	ldw (2,x),y 
      001F50 CD 1D 5B         [ 4]  739 	call EESTORE
      001F53 81               [ 4]  740 9$:	ret 
                                    741 
                                    742 
                                    743 ;------------------------------
                                    744 ; all interrupt vector with 
                                    745 ; an address >= a are resetted 
                                    746 ; to default
                                    747 ; CHKIVEC ( a -- )
                                    748 ;------------------------------
      001F54 1F 03                  749 	.word LINK 
                           001F56   750 	LINK=.
      001F56 07                     751 	.byte 7
      001F57 43 48 4B 49 56 45 43   752 	.ascii "CHKIVEC"
                                    753 ;local variables 
                           000001   754 	SSP=1
                           000003   755 	CADR=3
                           000005   756 	OFS=5
                           000006   757 	VSIZE=6  
      001F5E                        758 CHKIVEC:
      001F5E 52 06            [ 2]  759 	sub sp,#VSIZE ;alloc local variables 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      001F60 90 93            [ 1]  760 	ldw y,x 
      001F62 90 FE            [ 2]  761 	ldw y,(y)
      001F64 17 03            [ 2]  762 	ldw (CADR,sp),y ; ca 
      001F66 1F 01            [ 2]  763 	ldw (SSP,sp),x 
      001F68 AE 80 0A         [ 2]  764 	ldw x,#0x800a ; irq0 address 
      001F6B BF 37            [ 2]  765 	ldw PTR16,X
      001F6D AE FF FC         [ 2]  766 	ldw x,#-4 
      001F70 1C 00 04         [ 2]  767 1$:	addw x,#4
      001F73 A3 00 78         [ 2]  768 	cpw x,#30*4 ; irq0-29 
      001F76 27 22            [ 1]  769 	jreq 9$
      001F78 90 93            [ 1]  770 	ldw y,x  
      001F7A 91 D6 37         [ 4]  771 	ld a,([PTR16],y)
      001F7D 11 03            [ 1]  772 	cp a,(CADR,sp)
      001F7F 25 EF            [ 1]  773 	jrult 1$
      001F81 90 5C            [ 1]  774 	incw y 
      001F83 91 D6 37         [ 4]  775 	ld a,([PTR16],y)
      001F86 11 04            [ 1]  776 	cp a,(CADR+1,sp) 
      001F88 25 E6            [ 1]  777 	jrult 1$ 
      001F8A 1F 05            [ 2]  778 	ldw (OFS,sp),x 
      001F8C 54               [ 2]  779 	srlw x
      001F8D 54               [ 2]  780 	srlw x 
      001F8E 90 93            [ 1]  781 	ldw y,x 
      001F90 1E 01            [ 2]  782 	ldw x,(SSP,sp)
      001F92 FF               [ 2]  783 	ldw (x),y
      001F93 CD 1F 0C         [ 4]  784 	call reset_vector
      001F96 1E 05            [ 2]  785 	ldw x,(OFS,sp) 
      001F98 20 D6            [ 2]  786 	jra 1$
      001F9A 1E 01            [ 2]  787 9$:	ldw x,(SSP,sp) 
      001F9C 1C 00 02         [ 2]  788 	addw x,#CELLL 
      001F9F 5B 06            [ 2]  789 	addw sp,#VSIZE ; drop local variables  
      001FA1 81               [ 4]  790 	ret 
                                    791 
                                    792 ;------------------------------
                                    793 ; set interrupt vector 
                                    794 ; SET-IVEC ( ud n -- )
                                    795 ;  ud Handler address
                                    796 ;  n  vector # 0 .. 29 
                                    797 ;-----------------------------
      001FA2 1F 56                  798 	.word LINK
                           001FA4   799 	LINK=.
      001FA4 08                     800 	.byte 8 
      001FA5 53 45 54 2D 49 56 45   801 	.ascii "SET-IVEC" 
             43
      001FAD                        802 set_vector:
      001FAD 90 93            [ 1]  803     ldw y,x 
      001FAF 1C 00 02         [ 2]  804 	addw x,#CELLL 
      001FB2 90 FE            [ 2]  805 	ldw y,(y) ; vector #
      001FB4 90 A3 00 1D      [ 2]  806 	cpw y,#29 ; last vector
      001FB8 23 04            [ 2]  807 	jrule 2$
      001FBA 1C 00 04         [ 2]  808 	addw x,#2*CELLL 
      001FBD 81               [ 4]  809 	ret
      001FBE 90 58            [ 2]  810 2$:	sllw y 
      001FC0 90 58            [ 2]  811 	sllw y 
      001FC2 72 A9 80 08      [ 2]  812 	addw y,#0X8008 ; IRQ0 vector address 
      001FC6 90 BF 28         [ 2]  813 	ldw YTEMP,y ; vector address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      001FC9 A6 82            [ 1]  814 	ld a,#0x82 
      001FCB 90 95            [ 1]  815 	ld yh,a 
      001FCD E6 01            [ 1]  816 	ld a,(1,x) ; isr address bits 23..16 
      001FCF 90 97            [ 1]  817 	ld yl,a 
                                    818 ;  write 0x82 + most significant byte of int address	
      001FD1 1D 00 06         [ 2]  819 	subw x,#3*CELLL 
      001FD4 EF 04            [ 2]  820 	ldw (4,x),y 
      001FD6 90 BE 28         [ 2]  821 	ldw y,YTEMP
      001FD9 EF 02            [ 2]  822 	ldw (2,x),y ; vector address 
      001FDB 90 5F            [ 1]  823 	clrw y 
      001FDD FF               [ 2]  824 	ldw (x),y   ; as a double 
      001FDE CD 1D 5B         [ 4]  825 	call EESTORE 
      001FE1 90 93            [ 1]  826 	ldw y,x 
      001FE3 90 EE 02         [ 2]  827 	ldw y,(2,y) ; bits 15..0 int vector 
      001FE6 1D 00 06         [ 2]  828 	subw x,#3*CELLL 
      001FE9 EF 04            [ 2]  829 	ldw (4,x),y 
      001FEB 90 BE 28         [ 2]  830 	ldw y,YTEMP 
      001FEE 72 A9 00 02      [ 2]  831 	addw y,#2 
      001FF2 EF 02            [ 2]  832 	ldw (2,x),y 
      001FF4 90 5F            [ 1]  833 	clrw y 
      001FF6 FF               [ 2]  834 	ldw (x),y 
      001FF7 CD 1D 5B         [ 4]  835 	call EESTORE
      001FFA 1C 00 04         [ 2]  836 	addw x,#2*CELLL  
      001FFD 81               [ 4]  837 9$: ret 
                                    838 
                                    839 
                                    840 ;------------------------
                                    841 ; Compile word to flash
                                    842 ; EE, (w -- )
                                    843 ;-----------------------
      001FFE 1F A4                  844 	.word LINK
                           002000   845 	LINK=.
      002000 03                     846 	.byte 3
      002001 45 45 2C               847 	.ascii "EE,"
      002004                        848 EE_COMMA:
      002004 1D 00 04         [ 2]  849 	subw x,#2*CELLL 
      002007 90 BE 1C         [ 2]  850 	ldw y,UCP
      00200A 90 89            [ 2]  851 	pushw y 
      00200C EF 02            [ 2]  852 	ldw (2,x),y 
      00200E 90 5F            [ 1]  853 	clrw y 
      002010 FF               [ 2]  854 	ldw (x),y
      002011 CD 1D 5B         [ 4]  855 	call EESTORE
      002014 90 85            [ 2]  856 	popw y 
      002016 72 A9 00 02      [ 2]  857 	addw y,#2
      00201A 90 BF 1C         [ 2]  858 	ldw UCP,y
      00201D 81               [ 4]  859 	ret 
                                    860 
                                    861 
                                    862 ;-------------------------
                                    863 ; Compile byte to flash 
                                    864 ; EEC, ( c -- )	
                                    865 ;-------------------------
      00201E 20 00                  866 	.word LINK 
                           002020   867 	LINK=.
      002020 04                     868 	.byte 4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      002021 45 45 43 2C            869 	.ascii "EEC,"
      002025                        870 EE_CCOMMA:
      002025 1D 00 04         [ 2]  871 	subw x,#2*CELLL 
      002028 90 BE 1C         [ 2]  872 	ldw y,UCP
      00202B 90 89            [ 2]  873 	pushw y 
      00202D EF 02            [ 2]  874 	ldw (2,x),y 
      00202F 90 5F            [ 1]  875 	clrw y 
      002031 FF               [ 2]  876 	ldw (x),y
      002032 CD 1D 0F         [ 4]  877 	call EECSTORE
      002035 90 85            [ 2]  878 	popw y 
      002037 90 5C            [ 1]  879 	incw y 
      002039 90 BF 1C         [ 2]  880 	ldw UCP,y
      00203C 81               [ 4]  881 	ret 
                                    882 
                                    883 
                                    884 ;--------------------------
                                    885 ; copy FLASH block to ROWBUF
                                    886 ; ROW>BUF ( ud -- )
                                    887 ;--------------------------
      00203D 20 20                  888 	.word LINK 
                           00203F   889 	LINK=.
      00203F 07                     890 	.byte 7 
      002040 52 4F 57 3E 42 55 46   891 	.ascii "ROW>BUF"
      002047                        892 ROW2BUF: 
      002047 CD 1A D1         [ 4]  893 	call FPSTOR 
      00204A A6 80            [ 1]  894 	ld a,#BLOCK_SIZE
      00204C 88               [ 1]  895 	push a 
      00204D B4 38            [ 1]  896 	and a,PTR8 ; block align 
      00204F B7 38            [ 1]  897 	ld PTR8,a
      002051 90 AE 16 80      [ 2]  898 	ldw y,#ROWBUFF 
      002055 92 BC 00 36      [ 5]  899 1$: ldf a,[FPTR]
      002059 90 F7            [ 1]  900 	ld (y),a
      00205B CD 1C 4B         [ 4]  901 	call INC_FPTR
      00205E 90 5C            [ 1]  902 	incw y 
      002060 0A 01            [ 1]  903 	dec (1,sp)
      002062 26 F1            [ 1]  904 	jrne 1$ 
      002064 84               [ 1]  905 	pop a 
      002065 81               [ 4]  906 	ret 
                                    907 
                                    908 
                                    909 ;---------------------------
                                    910 ; copy ROWBUFF to flash 
                                    911 ; BUF>ROW ( ud -- )
                                    912 ; ud is row address as double 
                                    913 ;---------------------------
      002066 20 3F                  914 	.word LINK 
                           002068   915 	LINK=.
      002068 07                     916 	.byte 7 
      002069 42 55 46 3E 52 4F 57   917 	.ascii "BUF>ROW" 
      002070                        918 BUF2ROW:
      002070 CD 06 A6         [ 4]  919 	call TBUF ; ( ud rb -- )
      002073 CD 07 66         [ 4]  920 	call ROT 
      002076 CD 07 66         [ 4]  921 	call ROT  ; ( rb ud -- )
      002079 CD 1E 49         [ 4]  922 	call write_row 
      00207C 81               [ 4]  923 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



                                    924 
                                    925 ;---------------------------------
                                    926 ; how many byte free in that row 
                                    927 ; RFREE ( a -- n )
                                    928 ; a is least byte of target address
                                    929 ;----------------------------------
      00207D 20 68                  930 	.word LINK 
                           00207F   931 	LINK=.
      00207F 05                     932 	.byte 5 
      002080 52 46 52 45 45         933 	.ascii "RFREE"
      002085                        934 RFREE:
      002085 E6 01            [ 1]  935 	ld a,(1,x)
      002087 A4 7F            [ 1]  936 	and a,#BLOCK_SIZE-1 
      002089 B7 28            [ 1]  937 	ld YTEMP,a 
      00208B A6 80            [ 1]  938 	ld a,#BLOCK_SIZE 
      00208D B0 28            [ 1]  939 	sub a,YTEMP 
      00208F 90 5F            [ 1]  940 	clrw y 
      002091 90 97            [ 1]  941 	ld yl,a
      002093 FF               [ 2]  942 	ldw (x),y 
      002094 81               [ 4]  943 	ret 
                                    944 
                                    945 ;---------------------------------
                                    946 ; write u bytes to flash/EEPROM 
                                    947 ; constraint to row limit 
                                    948 ; RAM>EE ( ud a u -- u2 )
                                    949 ; ud flash address 
                                    950 ; a ram address 
                                    951 ; u bytes count
                                    952 ; return u2 bytes written  
                                    953 ;-------------------------------
      002095 20 7F                  954 	.word LINK 
                           002097   955 	LINK=. 
      002097 06                     956 	.byte 6
      002098 52 41 4D 3E 45 45      957 	.ascii "RAM>EE"
                                    958 	
      00209E                        959 RAM2EE:
                                    960 ; copy ud on top 
      00209E 90 93            [ 1]  961 	ldw y,x 
      0020A0 90 EE 06         [ 2]  962 	ldw y,(6,y) ; LSW of ud  
      0020A3 90 BF 28         [ 2]  963 	ldw YTEMP,y 
      0020A6 90 93            [ 1]  964 	ldw y,x 
      0020A8 90 EE 04         [ 2]  965 	ldw y,(4,y)  ; MSW of ud 
      0020AB 1D 00 04         [ 2]  966 	subw x,#2*CELLL 
      0020AE FF               [ 2]  967 	ldw (x),y 
      0020AF 90 BE 28         [ 2]  968 	ldw y,YTEMP 
      0020B2 EF 02            [ 2]  969 	ldw (2,x),y 
      0020B4 CD 20 47         [ 4]  970 	call ROW2BUF 
      0020B7 90 93            [ 1]  971 	ldw y,x 
      0020B9 90 EE 06         [ 2]  972 	ldw y,(6,y)
      0020BC 90 89            [ 2]  973 	pushw y ; udl 
      0020BE 90 9F            [ 1]  974 	ld a,yl
      0020C0 A4 7F            [ 1]  975 	and a,#BLOCK_SIZE-1 
      0020C2 90 5F            [ 1]  976 	clrw y 
      0020C4 90 97            [ 1]  977 	ld yl,a 
      0020C6 72 A9 16 80      [ 2]  978 	addw y,#ROWBUFF 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      0020CA 1D 00 02         [ 2]  979 	subw x,#CELLL 
      0020CD FF               [ 2]  980 	ldw (x),y  
      0020CE CD 05 A8         [ 4]  981 	call SWAPP ;  ( ud a ra u -- )
      0020D1 CD 05 42         [ 4]  982 	call RFROM  
      0020D4 CD 20 85         [ 4]  983 	call RFREE 
      0020D7 CD 09 00         [ 4]  984 	call MIN
      0020DA CD 05 98         [ 4]  985 	call DUPP 
      0020DD CD 05 61         [ 4]  986 	call TOR  
      0020E0 CD 0C 6C         [ 4]  987 	call CMOVE
      0020E3 CD 20 70         [ 4]  988 	call BUF2ROW 
      0020E6 CD 05 42         [ 4]  989 	call RFROM 
      0020E9 81               [ 4]  990 	ret 
                                    991 
                                    992 
                                    993 ;--------------------------
                                    994 ; expand 16 bit address 
                                    995 ; to 32 bit address 
                                    996 ; FADDR ( a -- ud )
                                    997 ;--------------------------
      0020EA 20 97                  998 	.word LINK 
                           0020EC   999 	LINK=. 
      0020EC 05                    1000 	.byte 5 
      0020ED 46 41 44 44 52        1001 	.ascii "FADDR"
      0020F2                       1002 FADDR:
      0020F2 CC 0B 31         [ 2] 1003 	jp ZERO 
                                   1004 
                                   1005 
                                   1006 ;--------------------------
                                   1007 ; move new colon definition to FLASH 
                                   1008 ; using WR-ROW for efficiency 
                                   1009 ; preserving bytes already used 
                                   1010 ; in the current block. 
                                   1011 ; At this point the compiler as completed
                                   1012 ; in RAM and pointers CP and CNTXT updated.
                                   1013 ; CNTXT point to nfa of new word and  
                                   1014 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                   1015 ; 
                                   1016 ; FMOVE ( -- cp+ )
                                   1017 ; 
                                   1018 ;--------------------------
      0020F5 20 EC                 1019 	.word LINK 
                           0020F7  1020 	LINK=.
      0020F7 05                    1021 	.byte 5 
      0020F8 46 4D 4F 56 45        1022 	.ascii "FMOVE" 
      0020FD                       1023 FMOVE:
      0020FD CD 06 B8         [ 4] 1024 	call TFLASH 
      002100 CD 04 F1         [ 4] 1025 	CALL AT 
      002103 CD 04 A6         [ 4] 1026 	CALL QBRAN 
      002106 21 81                 1027 	.word no_move  
      002108 CD 07 07         [ 4] 1028 	call CPP
      00210B CD 04 F1         [ 4] 1029 	call AT  
      00210E CD 05 98         [ 4] 1030 	call DUPP ; ( udl udl -- )
      002111 CD 06 EB         [ 4] 1031 	call CNTXT 
      002114 CD 04 F1         [ 4] 1032 	call AT 
      002117 CD 04 73         [ 4] 1033 	call DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      00211A 00 02                 1034 	.word 2 
      00211C CD 08 40         [ 4] 1035 	call SUBB ; ( udl udl a -- )
      00211F CD 05 A8         [ 4] 1036 	call SWAPP 
      002122 CD 20 F2         [ 4] 1037 	call FADDR 
      002125 CD 07 66         [ 4] 1038 	call ROT  ; ( udl ud a -- )
      002128 CD 05 98         [ 4] 1039 	call DUPP 
      00212B CD 05 61         [ 4] 1040 	call TOR    ; R: a 
      00212E                       1041 FMOVE2: 
      00212E CD 0C 1F         [ 4] 1042 	call HERE 
      002131 CD 05 55         [ 4] 1043 	call RAT 
      002134 CD 08 40         [ 4] 1044 	call SUBB ; (udl ud a wl -- )
      002137                       1045 next_row:
      002137 CD 05 98         [ 4] 1046 	call DUPP 
      00213A CD 05 61         [ 4] 1047 	call TOR  ; ( udl ud a wl -- ) R: a wl
      00213D CD 20 9E         [ 4] 1048 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      002140 CD 05 98         [ 4] 1049 	call DUPP 
      002143 CD 05 61         [ 4] 1050 	call TOR
      002146 CD 07 C7         [ 4] 1051 	call PLUS  ; ( udl+ ) 
      002149 CD 05 98         [ 4] 1052 	call DUPP 
      00214C CD 0B 31         [ 4] 1053 	call ZERO   ; ( udl+ ud -- )
      00214F CD 05 42         [ 4] 1054 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      002152 CD 05 42         [ 4] 1055 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      002155 CD 05 C2         [ 4] 1056 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      002158 CD 08 40         [ 4] 1057 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      00215B CD 05 98         [ 4] 1058 	call DUPP 
      00215E CD 04 A6         [ 4] 1059 	call QBRAN
      002161 21 7A                 1060 	.word fmove_done 
      002163 CD 05 A8         [ 4] 1061 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      002166 CD 05 42         [ 4] 1062 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      002169 CD 07 C7         [ 4] 1063 	call PLUS  ; ( udl+2 ud wl- a+ )
      00216C CD 05 98         [ 4] 1064 	call DUPP 
      00216F CD 05 61         [ 4] 1065 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      002172 CD 05 A8         [ 4] 1066 	call SWAPP 
      002175 CD 04 BD         [ 4] 1067 	call BRAN
      002178 21 37                 1068 	.word next_row  
      00217A                       1069 fmove_done:	
      00217A CD 05 42         [ 4] 1070 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      00217D 1C 00 0A         [ 2] 1071 	addw x,#5*CELLL ; (  -- cp+ ) new CP 
      002180 81               [ 4] 1072  	ret  
      002181                       1073 no_move:
      002181 CD 0B 31         [ 4] 1074 	call ZERO
      002184 81               [ 4] 1075 	ret 
                                   1076 
                                   1077 ;------------------------------------------
                                   1078 ; adjust pointers after **FMOVE** operetion.
                                   1079 ; UPDAT-PTR ( cp+ -- )
                                   1080 ; cp+ is new CP position after FMOVE 
                                   1081 ;-------------------------------------------
      002185 20 F7                 1082 	.word LINK 
                           002187  1083 	LINK=.
      002187 09                    1084 	.byte 9
      002188 55 50 44 41 54 2D 50  1085 	.ascii "UPDAT-PTR" 
             54 52
      002191                       1086 UPDATPTR:
                                   1087 ;reset VP to previous position  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      002191 CD 1B 4B         [ 4] 1088 	call EEPVP 
      002194 CD 05 8E         [ 4] 1089 	call DROP 
      002197 CD 04 F1         [ 4] 1090 	call AT
      00219A CD 06 F9         [ 4] 1091 	call VPP 
      00219D CD 04 DA         [ 4] 1092 	call STORE
                                   1093 ;update CONTEXT and LAST 
      0021A0 CD 1B 35         [ 4] 1094 	call EEPCP 
      0021A3 CD 05 8E         [ 4] 1095 	call DROP
      0021A6 CD 04 F1         [ 4] 1096 	call AT
      0021A9 CD 04 73         [ 4] 1097 	call DOLIT 
      0021AC 00 02                 1098 	.word 2 
      0021AE CD 07 C7         [ 4] 1099 	call PLUS 
      0021B1 CD 05 98         [ 4] 1100 	call DUPP 
      0021B4 CD 06 EB         [ 4] 1101 	call CNTXT 
      0021B7 CD 04 DA         [ 4] 1102 	call STORE
      0021BA CD 07 17         [ 4] 1103 	call LAST
      0021BD CD 04 DA         [ 4] 1104 	call STORE 
      0021C0 CD 1B 65         [ 4] 1105 	call UPDATLAST 
                                   1106 ;update CP 
      0021C3 CD 07 07         [ 4] 1107 	call CPP 
      0021C6 CD 04 DA         [ 4] 1108 	call STORE
      0021C9 CD 1B 8E         [ 4] 1109 	call UPDATCP 
      0021CC 81               [ 4] 1110 	ret 
                                   1111 
                                   1112 ;-----------------------------
                                   1113 ; move interrupt sub-routine
                                   1114 ; in flash memory
                                   1115 ;----------------------------- 
      0021CD 21 87                 1116 	.word LINK 
                           0021CF  1117 	LINK=. 
      0021CF 06                    1118 	.byte 6
      0021D0 49 46 4D 4F 56 45     1119 	.ascii "IFMOVE" 
      0021D6                       1120 IFMOVE:
      0021D6 CD 06 B8         [ 4] 1121 	call TFLASH 
      0021D9 CD 04 F1         [ 4] 1122 	CALL AT 
      0021DC CD 04 A6         [ 4] 1123 	CALL QBRAN 
      0021DF 21 81                 1124 	.word no_move 
      0021E1 CD 07 07         [ 4] 1125 	call CPP 
      0021E4 CD 04 F1         [ 4] 1126 	call AT 
      0021E7 CD 05 98         [ 4] 1127 	call DUPP ; ( udl udl -- )
      0021EA CD 1B 4B         [ 4] 1128 	call EEPVP 
      0021ED CD 05 8E         [ 4] 1129 	call DROP
      0021F0 CD 04 F1         [ 4] 1130 	call AT  ; ( udl udl a )
      0021F3 CD 05 61         [ 4] 1131 	call TOR 
      0021F6 CD 20 F2         [ 4] 1132 	call FADDR
      0021F9 CD 05 55         [ 4] 1133 	call RAT ; ( udl ud a -- ) R: a 
      0021FC CC 21 2E         [ 2] 1134 	jp FMOVE2 
                                   1135 
                                   1136 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



                           000001  4768 .if WANT_SCALING_CONST 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



                                   4769         .include "const_ratio.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------------------------------------
                                     20 ; Irrationals constants 
                                     21 ; expressed as 2 integers ratio
                                     22 ; aproximation. These are to be used with scaling operators */ and */MOD 
                                     23 ; REF: https://www.forth.com/starting-forth/5-fixed-point-arithmetic/
                                     24 ;---------------------------------------------------------------------
                                     25 
                                     26 ;       PI ( --  355 113 )
                                     27 ; precision 8.5e-8 
                                     28 ; usage example to compute circle area
                                     29 ; : CAREA DUP * PI */ ;
                                     30 ; 
      0021FF 21 CF                   31         .word LINK 
                           002201    32         LINK=.
      002201 02                      33         .byte 2
      002202 50 49                   34         .ascii "PI" 
      002204                         35 PII:
      002204 1D 00 04         [ 2]   36         subw x,#2*CELLL 
      002207 90 AE 01 63      [ 2]   37         ldw y,#355 
      00220B EF 02            [ 2]   38         ldw (2,x),y 
      00220D 90 AE 00 71      [ 2]   39         ldw y,#113 
      002211 FF               [ 2]   40         ldw (x),y 
      002212 81               [ 4]   41         ret 
                                     42 
                                     43 ;      SQRT2 ( -- 19601  13860 )
                                     44 ; precision: 1.5e-9 
                                     45 ; usage example to compute Voltage peek to peek from Vrms 
                                     46 ; : VPP SQRT2 */ 2 * ;
                                     47 ;
      002213 22 01                   48         .word LINK 
                           002215    49         LINK=.
      002215 05                      50         .byte 5 
      002216 53 51 52 54 32          51         .ascii "SQRT2" 
      00221B                         52 SQRT2:
      00221B 1D 00 04         [ 2]   53         subw x,#2*CELLL 
      00221E 90 AE 4C 91      [ 2]   54         ldw y,#19601 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



      002222 EF 02            [ 2]   55         ldw (2,x),y 
      002224 90 AE 36 24      [ 2]   56         ldw y,#13860 
      002228 FF               [ 2]   57         ldw (x),y 
      002229 81               [ 4]   58         ret 
                                     59 
                                     60 ;   SQRT3 ( -- 18817 10864 )
                                     61 ; precision: 1.1e-9
                                     62 ;
      00222A 22 15                   63         .word LINK 
                           00222C    64         LINK=.
      00222C 05                      65         .byte 5
      00222D 53 51 52 54 33          66         .ascii "SQRT3" 
      002232                         67 SQRT3: 
      002232 1D 00 04         [ 2]   68     subw x,#2*CELLL 
      002235 90 AE 49 81      [ 2]   69     ldw y,#18817 
      002239 EF 02            [ 2]   70     ldw (2,x),y 
      00223B 90 AE 2A 70      [ 2]   71     ldw y,#10864 
      00223F FF               [ 2]   72     ldw (x),y 
      002240 81               [ 4]   73     ret 
                                     74 
                                     75 ;   E ( -- 28667 10546 )
                                     76 ; precision: 5.5e-9 
                                     77 ; natural log base 
      002241 22 2C                   78         .word LINK 
                           002243    79         LINK=.
      002243 01                      80         .byte 1
      002244 45                      81         .ascii "E" 
      002245                         82 ENEPER:
      002245 1D 00 04         [ 2]   83     subw x,#2*CELLL 
      002248 90 AE 6F FB      [ 2]   84     ldw y,#28667 
      00224C EF 02            [ 2]   85     ldw (2,x),y 
      00224E 90 AE 29 32      [ 2]   86     ldw y,#10546 
      002252 FF               [ 2]   87     ldw (x),y 
      002253 81               [ 4]   88     ret 
                                     89 
                                     90 ;   SQRT10 ( -- 22936 7253 )
                                     91 ; precision: 5.7e-9 
      002254 22 43                   92         .word LINK 
                           002256    93         LINK=.
      002256 06                      94         .byte 6 
      002257 53 51 52 54 31 30       95         .ascii "SQRT10" 
      00225D                         96 SQRT10:
      00225D 1D 00 04         [ 2]   97     subw x,#2*CELLL
      002260 90 AE 59 98      [ 2]   98     ldw y,#22936 
      002264 EF 02            [ 2]   99     ldw (2,x),y 
      002266 90 AE 1C 55      [ 2]  100     ldw y,#7253
      00226A FF               [ 2]  101     ldw (x),y 
      00226B 81               [ 4]  102     ret 
                                    103 
                                    104 ;   12RT2 ( -- 26797 25293 )
                                    105 ; precision: 1.0e-9 
                                    106 ; used in music to compute well tempered scale
      00226C 22 56                  107         .word LINK 
                           00226E   108         LINK=. 
      00226E 05                     109         .byte 5 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      00226F 31 32 52 54 32         110         .ascii "12RT2"
      002274                        111 RT12_2:
      002274 1D 00 04         [ 2]  112     subw x,#2*CELLL 
      002277 90 AE 68 AD      [ 2]  113     ldw y,#26797
      00227B EF 02            [ 2]  114     ldw (2,x),y 
      00227D 90 AE 62 CD      [ 2]  115     ldw y,#25293
      002281 FF               [ 2]  116     ldw (x),y 
      002282 81               [ 4]  117     ret 
                                    118 
                                    119 ;   LOG2s ( -- 2040 11103 )
                                    120 ; log(2)/1.6384
                                    121 ; precision: 1.1e-8
      002283 22 6E                  122         .word LINK 
                           002285   123         LINK=.
      002285 05                     124         .byte 5 
      002286 4C 4F 47 32 53         125         .ascii "LOG2S" 
      00228B                        126 LOG2S:
      00228B 1D 00 04         [ 2]  127     subw x,#2*CELLL
      00228E 90 AE 07 F8      [ 2]  128     ldw y,#2040 
      002292 EF 02            [ 2]  129     ldw (2,x),y 
      002294 90 AE 2B 5F      [ 2]  130     ldw y,#11103 
      002298 FF               [ 2]  131     ldw (x),y 
      002299 81               [ 4]  132     ret 
                                    133 
                                    134 ;   LN2 ( -- 485 11464 )
                                    135 ; ln(2)/16.384 
                                    136 ; precision: 1.0e-7 
      00229A 22 85                  137         .word LINK 
                           00229C   138         LINK=.
      00229C 04                     139         .byte 4 
      00229D 4C 4E 32 53            140         .ascii "LN2S" 
      0022A1                        141 LN2S: 
      0022A1 1D 00 04         [ 2]  142     subw x,#2*CELLL
      0022A4 90 AE 01 E5      [ 2]  143     ldw y,#485
      0022A8 EF 02            [ 2]  144     ldw (2,x),y 
      0022AA 90 AE 2C C8      [ 2]  145     ldw y,#11464 
      0022AE FF               [ 2]  146     ldw (x),y 
      0022AF 81               [ 4]  147     ret 
                                    148 
                                    149 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                                   4770 .endif
                           000001  4771 .if WANT_CONST_TABLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



                                   4772         .include "ctable.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;------------------------------
                                     20 ; words to create and read 
                                     21 ; constants tables in FLASH 
                                     22 ; and EEPROM
                                     23 ;------------------------------
                                     24 
                                     25 ;-----------------------------
                                     26 ; allocate space in CODE area 
                                     27 ; for constant table.
                                     28 ; CALLOT ( u -- ad )
                                     29 ; u  bytes to allocates 
                                     30 ; ad data address as double.
                                     31 ;-----------------------------
      0022B0 22 9C                   32     .word LINK 
                           0022B2    33     LINK=.
      0022B2 06                      34     .byte 6
      0022B3 43 41 4C 4C 4F 54       35     .ascii "CALLOT"
      0022B9                         36 CALLOT:
      0022B9 CD 07 07         [ 4]   37     CALL CPP
      0022BC CD 05 98         [ 4]   38     CALL DUPP 
      0022BF CD 04 F1         [ 4]   39     CALL AT 
      0022C2 CD 05 61         [ 4]   40     CALL TOR 
      0022C5 CD 0B A1         [ 4]   41     CALL PSTOR 
      0022C8 CD 1B 8E         [ 4]   42     CALL UPDATCP 
      0022CB CD 05 42         [ 4]   43     CALL RFROM
      0022CE CC 0B 31         [ 2]   44     JP ZERO 
                                     45 
                                     46 ;------------------------------
                                     47 ; create constants bytes table 
                                     48 ; in persistant memory
                                     49 ;  CTABLE ( n+ -- ad ; <string> )
                                     50 ; n+ bytes reserved 
                                     51 ;-----------------------------
      0022D1 22 B2                   52     .word LINK 
                           0022D3    53     LINK=.
      0022D3 06                      54     .byte 6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      0022D4 43 54 41 42 4C 45       55     .ascii "CTABLE"
      0022DA                         56 CTABLE:
      0022DA CD 22 B9         [ 4]   57     CALL CALLOT     
      0022DD CC 18 90         [ 2]   58     JP DCONST 
                                     59      
                                     60 
                                     61 ;--------------------------------
                                     62 ; create constants words table 
                                     63 ; in persistant memory 
                                     64 ; WTABLE ( n+ -- ad ; <string> )
                                     65 ; n+  words reserved  
                                     66 ;--------------------------------
      0022E0 22 D3                   67     .word LINK 
                           0022E2    68     LINK=.
      0022E2 06                      69     .byte 6
      0022E3 57 54 41 42 4C 45       70     .ascii "WTABLE"
      0022E9                         71 WTABLE:
      0022E9 CD 0A B8         [ 4]   72     CALL CELLS  
      0022EC CD 22 B9         [ 4]   73     CALL CALLOT 
      0022EF CC 18 90         [ 2]   74     JP DCONST 
                                     75 
                                     76 ;---------------------------------
                                     77 ; stack an element of CTABLE 
                                     78 ; CTABL@ ( u ad -- c )
                                     79 ; u element order {0..size-1}
                                     80 ; a|ad table address 
                                     81 ;--------------------------------
      0022F2 22 E2                   82     .word LINK 
                           0022F4    83     LINK=.
      0022F4 06                      84     .byte 6
      0022F5 43 54 41 42 4C 40       85     .ascii "CTABL@" 
      0022FB                         86 CTAT:
      0022FB CD 1A D1         [ 4]   87     call FPSTOR 
      0022FE CD 1C 63         [ 4]   88     call PTRPLUS 
      002301 CC 1C A0         [ 2]   89     jp EE_CREAD 
                                     90 
                                     91 ;---------------------------------
                                     92 ; stack an element of WTABLE 
                                     93 ; WTABL@ ( u ud -- w )
                                     94 ; u is element order {0..size-1}
                                     95 ; a|ud table address 
                                     96 ;----------------------------------
      002304 22 F4                   97     .word LINK 
                           002306    98     LINK=.
      002306 06                      99     .byte 6
      002307 57 54 41 42 4C 40      100     .ascii "WTABL@" 
      00230D                        101 WTAT:
      00230D CD 1A D1         [ 4]  102     call FPSTOR 
      002310 CD 0A B8         [ 4]  103     call CELLS 
      002313 CD 1C 63         [ 4]  104     call PTRPLUS 
      002316 CD 1C 7E         [ 4]  105     call EE_READ 
      002319 81               [ 4]  106     ret 
                                    107 
                                    108 ;--------------------------
                                    109 ; tool to initialize character table 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



                                    110 ; CTINIT ( ad -- )
                                    111 ; ad is table address 
                                    112 ;--------------------------
      00231A 23 06                  113     .word LINK 
                           00231C   114     LINK=.
      00231C 06                     115     .byte 6 
      00231D 43 54 49 4E 49 54      116     .ascii "CTINIT"
      002323                        117 CTINIT:
      002323 CD 1A D1         [ 4]  118     CALL FPSTOR
      002326 CD 1C 0F         [ 4]  119     CALL UNLOCK
      002329 CD 0B 31         [ 4]  120     CALL ZERO 
      00232C CD 0A C5         [ 4]  121 1$: CALL ONEP 
      00232F CD 05 98         [ 4]  122     CALL DUPP 
      002332 CD 23 7F         [ 4]  123     CALL INTQ 
      002335 CD 04 A6         [ 4]  124     CALL QBRAN 
      002338 23 42                  125     .word 2$
      00233A CD 1C BA         [ 4]  126     call WR_BYTE 
      00233D CD 04 BD         [ 4]  127     CALL BRAN 
      002340 23 2C                  128     .word 1$ 
      002342 CD 07 A7         [ 4]  129 2$: CALL DDROP 
      002345 CD 1C 37         [ 4]  130     CALL LOCK 
      002348 81               [ 4]  131     ret 
                                    132 
                                    133 ;--------------------------
                                    134 ; tool to initialize word table 
                                    135 ; WTINIT ( ad -- )
                                    136 ; ad is table address 
                                    137 ;--------------------------
      002349 23 1C                  138     .word LINK 
                           00234B   139     LINK=.
      00234B 06                     140     .byte 6 
      00234C 57 54 49 4E 49 54      141     .ascii "WTINIT"
      002352                        142 WTINIT:
      002352 CD 1A D1         [ 4]  143     CALL FPSTOR
      002355 CD 1C 0F         [ 4]  144     CALL UNLOCK
      002358 CD 0B 31         [ 4]  145     CALL ZERO 
      00235B CD 0A C5         [ 4]  146 1$: CALL ONEP 
      00235E CD 05 98         [ 4]  147     CALL DUPP
      002361 CD 23 7F         [ 4]  148     CALL INTQ
      002364 CD 04 A6         [ 4]  149     CALL QBRAN 
      002367 23 71                  150     .word 2$
      002369 CD 1C DF         [ 4]  151     call WR_WORD 
      00236C CD 04 BD         [ 4]  152     CALL BRAN 
      00236F 23 5B                  153     .word 1$ 
      002371 CD 07 A7         [ 4]  154 2$: CALL DDROP 
      002374 CD 1C 37         [ 4]  155     CALL LOCK 
      002377 81               [ 4]  156     ret 
                                    157 
                                    158 ;------------------------
                                    159 ; Prompted input for integer 
                                    160 ; display n+ in bracket and
                                    161 ; '?' 
                                    162 ; [N]? ( n+ -- a )
                                    163 ;------------------------
      002378 23 4B                  164     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



                           00237A   165     LINK=.
      00237A 04                     166     .byte 4
      00237B 5B 4E 5D 3F            167     .ascii "[N]?" 
      00237F                        168 INTQ:
      00237F CD 0E C0         [ 4]  169     CALL CR 
      002382 CD 04 73         [ 4]  170     call DOLIT 
      002385 00 5B                  171     .word '[
      002387 CD 04 38         [ 4]  172     CALL EMIT 
      00238A CD 0F 79         [ 4]  173     CALL DOT 
      00238D CD 0E FF         [ 4]  174     CALL  DOTQP
      002390 03                     175     .byte 3
      002391 5D 3F 20               176     .ascii "]? " 
      002394 CD 13 08         [ 4]  177     CALL QUERY 
      002397 CD 11 33         [ 4]  178     call TOKEN 
      00239A CC 23 F1         [ 2]  179     jp NUMBQ
                                    180 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



                                   4773 .endif
                           000001  4774 .if WANT_DOUBLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



                                   4775         .include "double.asm"
                                      1 ;************************************
                                      2 ;    doubles integers library 
                                      3 ;    doubles are signed 32 bits 
                                      4 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      5 
                                      6 
                                      7     .module DOUBLE 
                                      8 
                                      9 ; get all digits in row 
                                     10 ; stop at first non-digit or end of string 
                                     11 ; ( dlo dhi a cntr -- dlo dhi [ a+ cntr- | a+ 0 ] )
      00239D                         12 parse_digits:
      00239D CD 05 61         [ 4]   13     CALL TOR ; dlo dhi a R: cntr 
      0023A0                         14 1$:
      0023A0 CD 0C 08         [ 4]   15     CALL COUNT ; dlo dhi a+ c 
      0023A3 CD 06 68         [ 4]   16     CALL BASE 
      0023A6 CD 04 F1         [ 4]   17     CALL AT 
      0023A9 CD 0E 00         [ 4]   18     CALL DIGTQ 
      0023AC                         19     _QBRAN 4$ ; not a digit
      0023AC CD 04 A6         [ 4]    1     CALL QBRAN
      0023AF 23 E0                    2     .word 4$
      0023B1 CD 27 B9         [ 4]   20     CALL DTOR  ; dlo dhi R: cntr a+ c  
      0023B4 CD 06 68         [ 4]   21     CALL BASE 
      0023B7 CD 04 F1         [ 4]   22     CALL AT 
      0023BA CD 25 F1         [ 4]   23     CALL DSSTAR
      0023BD CD 05 42         [ 4]   24     CALL RFROM 
      0023C0 CD 0B 31         [ 4]   25     CALL ZERO 
      0023C3 CD 29 9F         [ 4]   26     CALL DPLUS 
      0023C6 CD 05 42         [ 4]   27     CALL RFROM  ; dlo dhi a+ 
      0023C9 CD 05 42         [ 4]   28     CALL RFROM ; dlo dhi a+ cntr 
      0023CC CD 0A D2         [ 4]   29     CALL ONEM 
      0023CF CD 05 98         [ 4]   30     CALL DUPP 
      0023D2                         31     _QBRAN 2$ 
      0023D2 CD 04 A6         [ 4]    1     CALL QBRAN
      0023D5 23 DF                    2     .word 2$
      0023D7 CD 05 61         [ 4]   32     CALL TOR  
      0023DA                         33     _BRAN 1$ ; dlo dhi a+ R: cntr 
      0023DA CD 04 BD         [ 4]    1     CALL BRAN 
      0023DD 23 A0                    2     .word 1$ 
      0023DF                         34 2$: ; end of string ( dlo hi a+ 0 )
      0023DF 81               [ 4]   35     RET 
      0023E0 CD 05 8E         [ 4]   36 4$: CALL DROP  ; dlo dhi a+ 
      0023E3 CD 05 42         [ 4]   37     CALL RFROM ; dlo dhi a+ cntr- 
      0023E6 81               [ 4]   38     RET 
                                     39 
                                     40 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     41 ;   NUMBER? (a -- s|d T | a F )
                                     42 ;   convert string to integer 
                                     43 ;   double begin with '#' 
                                     44 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0023E7                         45     _HEADER NUMBQ,7,"NUMBER?"
      0023E7 23 7A                    1         .word LINK 
                           0023E9     2         LINK=.
      0023E9 07                       3         .byte 7  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      0023EA 4E 55 4D 42 45 52 3F     4         .ascii "NUMBER?"
      0023F1                          5         NUMBQ:
                                     46 ; save current base value 
      0023F1 CD 06 68         [ 4]   47     CALL BASE 
      0023F4 CD 04 F1         [ 4]   48     CALL AT 
      0023F7 CD 05 61         [ 4]   49     CALL TOR 
                                     50 ; initialize integer to 0     
      0023FA 1D 00 04         [ 2]   51     SUBW X,#4 
      0023FD 90 5F            [ 1]   52     CLRW Y 
      0023FF FF               [ 2]   53     LDW (X),Y 
      002400 EF 02            [ 2]   54     LDW (2,X),Y ; a 0 0 R: base  
      002402                         55     _DOLIT 2 
      002402 CD 04 73         [ 4]    1     CALL DOLIT 
      002405 00 02                    2     .word 2 
      002407 CD 0B 8A         [ 4]   56     CALL PICK  ; a 0 0 a R: base    
      00240A CD 0C 08         [ 4]   57     CALL COUNT ; a 0 0 a+ n 
                                     58 ; check for '#' double integer 
      00240D CD 05 C2         [ 4]   59     CALL OVER  ; a 0 0 a+ n a+
      002410 CD 05 0F         [ 4]   60     CALL CAT   ; a 0 0 a+ n c 
      002413                         61     _DOLIT '#' ; a 0 0 a+ n c '#' 
      002413 CD 04 73         [ 4]    1     CALL DOLIT 
      002416 00 23                    2     .word '#' 
      002418 CD 08 68         [ 4]   62     CALL EQUAL 
      00241B CD 05 61         [ 4]   63     CALL TOR   ; a 0 0 a+ n R: base d? 
      00241E CD 05 55         [ 4]   64     CALL RAT   ; a 0 0 a+ n d? R: base d?
      002421                         65     _QBRAN NUMQ0
      002421 CD 04 A6         [ 4]    1     CALL QBRAN
      002424 24 32                    2     .word NUMQ0
                                     66 ; update a and count
      002426 CD 05 A8         [ 4]   67     CALL SWAPP 
      002429 CD 0A C5         [ 4]   68     CALL ONEP 
      00242C CD 05 A8         [ 4]   69     CALL SWAPP 
      00242F CD 0A D2         [ 4]   70     CALL ONEM  ; a 0 0 a+ n- R: base d?
                                     71 ; check for '$' hexadecimal  
      002432                         72 NUMQ0: 
      002432 CD 05 C2         [ 4]   73     CALL OVER   
      002435 CD 05 0F         [ 4]   74     CALL CAT   
      002438                         75     _DOLIT '$'
      002438 CD 04 73         [ 4]    1     CALL DOLIT 
      00243B 00 24                    2     .word '$' 
      00243D CD 08 68         [ 4]   76     CALL EQUAL ; a 0 0 a+ n- f  
      002440                         77     _QBRAN NUMQ1 
      002440 CD 04 A6         [ 4]    1     CALL QBRAN
      002443 24 54                    2     .word NUMQ1
      002445 CD 0D D7         [ 4]   78     CALL HEX   ; switch to hexadecimal base 
                                     79 ; update a and count 
      002448 CD 05 A8         [ 4]   80     CALL SWAPP 
      00244B CD 0A C5         [ 4]   81     CALL ONEP 
      00244E CD 05 A8         [ 4]   82     CALL SWAPP
      002451 CD 0A D2         [ 4]   83     CALL ONEM ; a 0 0 a+ n-  R: base d?
                                     84 ; check for minus sign 
      002454                         85 NUMQ1:    
      002454 CD 05 C2         [ 4]   86     CALL OVER 
      002457 CD 05 0F         [ 4]   87     CALL CAT   
      00245A                         88     _DOLIT '-' 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      00245A CD 04 73         [ 4]    1     CALL DOLIT 
      00245D 00 2D                    2     .word '-' 
      00245F CD 08 68         [ 4]   89     CALL EQUAL 
      002462 CD 05 61         [ 4]   90     CALL TOR ; R: base d? sign  
                                     91 ; update a and n, if sign==0 no change  
      002465 CD 05 55         [ 4]   92     CALL RAT   
      002468 CD 07 C7         [ 4]   93     CALL PLUS  
      00246B CD 05 A8         [ 4]   94     CALL SWAPP 
      00246E CD 05 55         [ 4]   95     CALL RAT 
      002471 CD 08 40         [ 4]   96     CALL SUBB  
      002474 CD 05 A8         [ 4]   97     CALL SWAPP 
                                     98 ; check for end of string     
      002477 CD 07 55         [ 4]   99     CALL QDUP    ; a dlo dhi a+ cntr R: base d? sign 
      00247A                        100     _QBRAN NUMQ4 ; yes , not a number 
      00247A CD 04 A6         [ 4]    1     CALL QBRAN
      00247D 24 B9                    2     .word NUMQ4
      00247F CD 23 9D         [ 4]  101     CALL parse_digits
      002482 CD 05 E3         [ 4]  102     CALL ZEQUAL  
      002485                        103     _QBRAN NUMQ4 ; error not end of string  ( a dlo dhi a+ R: base d? sign )
      002485 CD 04 A6         [ 4]    1     CALL QBRAN
      002488 24 B9                    2     .word NUMQ4
      00248A CD 05 8E         [ 4]  104     CALL DROP  ; a dlo dhi 
      00248D CD 05 42         [ 4]  105     CALL RFROM  ; a dlo dhi sign 
      002490                        106     _QBRAN NUMQ3
      002490 CD 04 A6         [ 4]    1     CALL QBRAN
      002493 24 98                    2     .word NUMQ3
      002495 CD 08 04         [ 4]  107     CALL DNEGA
      002498                        108 NUMQ3: 
      002498 CD 07 66         [ 4]  109     CALL ROT ; dlo dhi a  R: base d?
      00249B CD 05 8E         [ 4]  110     CALL DROP
      00249E                        111     _DOLIT -1  
      00249E CD 04 73         [ 4]    1     CALL DOLIT 
      0024A1 FF FF                    2     .word -1 
      0024A3 CD 05 42         [ 4]  112     CALL RFROM ; dlo dhi d? R: base 
      0024A6 CD 07 E1         [ 4]  113     CALL INVER 
      0024A9                        114     _QBRAN NUMQ8 
      0024A9 CD 04 A6         [ 4]    1     CALL QBRAN
      0024AC 24 C1                    2     .word NUMQ8
      0024AE CD 05 A8         [ 4]  115     CALL SWAPP 
      0024B1 CD 05 8E         [ 4]  116     CALL DROP 
      0024B4                        117     _BRAN NUMQ8
      0024B4 CD 04 BD         [ 4]    1     CALL BRAN 
      0024B7 24 C1                    2     .word NUMQ8 
      0024B9                        118 NUMQ4: ; not end of string error , ( a dlo dhi a+ R: base d? sign )
      0024B9 1C 00 04         [ 2]  119     ADDW X,#4 ; drop dhi a+  , ( a dlo R: base d? sign ) 
      0024BC 5B 04            [ 2]  120     ADDW SP,#4 ; drop d? sign  R: base 
      0024BE 90 5F            [ 1]  121     CLRW Y 
      0024C0 FF               [ 2]  122     LDW (X),Y ; dlo replaced by 0 ( -- a 0 R: base ) 
                                    123 ; restore original base value     
      0024C1                        124 NUMQ8: 
      0024C1 CD 05 42         [ 4]  125     CALL RFROM 
      0024C4 CD 06 68         [ 4]  126     CALL BASE 
      0024C7 CD 04 DA         [ 4]  127     CALL STORE 
      0024CA 81               [ 4]  128     RET 
                                    129 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



                                    130 
                                    131 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    132 ;    D0= ( d -- 0|-1 )
                                    133 ;    check if double is 0 
                                    134 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0024CB                        135     _HEADER DZEQUAL,3,"D0="
      0024CB 23 E9                    1         .word LINK 
                           0024CD     2         LINK=.
      0024CD 03                       3         .byte 3  
      0024CE 44 30 3D                 4         .ascii "D0="
      0024D1                          5         DZEQUAL:
      0024D1 CD 06 0B         [ 4]  136     CALL ORR 
      0024D4 A6 FF            [ 1]  137     LD A,#0xFF
      0024D6 90 93            [ 1]  138     LDW Y,X
      0024D8 90 FE            [ 2]  139     LDW Y,(Y)
      0024DA 90 A3 00 00      [ 2]  140     CPW Y,#0 
      0024DE 27 01            [ 1]  141     JREQ  ZEQ1
      0024E0 4F               [ 1]  142     CLR A   ;false
      0024E1                        143 ZEQ1:
      0024E1 F7               [ 1]  144     LD     (X),A
      0024E2 E7 01            [ 1]  145     LD (1,X),A
      0024E4 81               [ 4]  146 	RET     
                                    147     
                                    148 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    149 ;  DNEGATE ( d -- d )
                                    150 ;  negate double (2's complement)
                                    151 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0024E5                        152     _HEADER DNEGAT,7,"DNEGATE"
      0024E5 24 CD                    1         .word LINK 
                           0024E7     2         LINK=.
      0024E7 07                       3         .byte 7  
      0024E8 44 4E 45 47 41 54 45     4         .ascii "DNEGATE"
      0024EF                          5         DNEGAT:
      0024EF CD 07 E1         [ 4]  153     CALL INVER
      0024F2 CD 05 A8         [ 4]  154     CALL SWAPP 
      0024F5 CD 07 E1         [ 4]  155     CALL INVER 
      0024F8 90 93            [ 1]  156     LDW  Y,X 
      0024FA 90 FE            [ 2]  157     LDW Y,(Y)
      0024FC 72 A9 00 01      [ 2]  158     ADDW Y,#1 
      002500 FF               [ 2]  159     LDW (X),Y 
      002501 24 0B            [ 1]  160     JRNC DNEG1 
      002503 90 93            [ 1]  161     LDW Y,X 
      002505 90 EE 02         [ 2]  162     LDW Y,(2,Y)
      002508 72 A9 00 01      [ 2]  163     ADDW Y,#1
      00250C EF 02            [ 2]  164     LDW (2,X),Y 
      00250E                        165 DNEG1:
      00250E CD 05 A8         [ 4]  166     CALL SWAPP 
      002511 81               [ 4]  167     RET      
                                    168 
                                    169 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    170 ;   DABS ( d -- d )
                                    171 ;   absolute value of double
                                    172 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002512                        173     _HEADER DABS,4,"DABS"
      002512 24 E7                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



                           002514     2         LINK=.
      002514 04                       3         .byte 4  
      002515 44 41 42 53              4         .ascii "DABS"
      002519                          5         DABS:
      002519 CD 05 98         [ 4]  174     CALL DUPP 
      00251C CD 05 D1         [ 4]  175     CALL ZLESS 
      00251F                        176     _QBRAN DABS1 
      00251F CD 04 A6         [ 4]    1     CALL QBRAN
      002522 25 27                    2     .word DABS1
      002524 CD 08 04         [ 4]  177     CALL DNEGA 
      002527                        178 DABS1:
      002527 81               [ 4]  179     RET 
                                    180 
                                    181 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    182 ;  DSIGN ( d -- d f )
                                    183 ;  sign of double 
                                    184 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002528                        185     _HEADER DSIGN,5,"DSIGN"
      002528 25 14                    1         .word LINK 
                           00252A     2         LINK=.
      00252A 05                       3         .byte 5  
      00252B 44 53 49 47 4E           4         .ascii "DSIGN"
      002530                          5         DSIGN:
      002530 A6 00            [ 1]  186     LD A,#0 
      002532 90 93            [ 1]  187     LDW Y,X 
      002534 90 FE            [ 2]  188     LDW Y,(Y)
      002536 2A 02            [ 1]  189     JRPL DSIGN1
      002538 A6 FF            [ 1]  190     LD A,#0XFF 
      00253A                        191 DSIGN1:
      00253A 1D 00 02         [ 2]  192     SUBW X,#2 
      00253D F7               [ 1]  193     LD (X),A 
      00253E E7 01            [ 1]  194     LD (1,X),A 
      002540 81               [ 4]  195     RET 
                                    196 
                                    197 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    198 ;   D/MOD ( d s - r qd )
                                    199 ;   unsigned divide double by single 
                                    200 ;   return double quotient 
                                    201 ;   and single remainder 
                                    202 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002541                        203     _HEADER DSLMOD,5,"D/MOD"
      002541 25 2A                    1         .word LINK 
                           002543     2         LINK=.
      002543 05                       3         .byte 5  
      002544 44 2F 4D 4F 44           4         .ascii "D/MOD"
      002549                          5         DSLMOD:
      002549 90 93            [ 1]  204         LDW     Y,X             ; stack pointer to Y
      00254B FE               [ 2]  205         LDW     X,(X)           ; un
      00254C BF 28            [ 2]  206         LDW     YTEMP,X         ; save un
      00254E 93               [ 1]  207         LDW     X,Y
      00254F 89               [ 2]  208         PUSHW   X               ; save stack pointer
      002550 90 89            [ 2]  209         PUSHW   Y 
      002552 EE 02            [ 2]  210         LDW     X,(2,X)           ; X=udh
      002554 90 BE 28         [ 2]  211         LDW     Y,YTEMP         ; divisor 
      002557 65               [ 2]  212         DIVW    X,Y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      002558 BF 26            [ 2]  213         LDW     XTEMP,X         ; QUOTIENT hi 
      00255A 93               [ 1]  214         LDW     X,Y             ; remainder in X 
      00255B 90 85            [ 2]  215         POPW    Y 
      00255D 90 EE 04         [ 2]  216         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      002560 A6 10            [ 1]  217         LD      A,#16           ; loop count
      002562 90 58            [ 2]  218         SLLW    Y               ; udl shift udl into udh
      002564                        219 DSLMOD3:
      002564 59               [ 2]  220         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      002565 25 04            [ 1]  221         JRC     DSLMODa         ; if carry out of rotate
      002567 B3 28            [ 2]  222         CPW     X,YTEMP         ; compare udh to un
      002569 25 05            [ 1]  223         JRULT   DSLMOD4         ; can't subtract
      00256B                        224 DSLMODa:
      00256B 72 B0 00 28      [ 2]  225         SUBW    X,YTEMP         ; can subtract
      00256F 98               [ 1]  226         RCF
      002570                        227 DSLMOD4:
      002570 8C               [ 1]  228         CCF                     ; quotient bit
      002571 90 59            [ 2]  229         RLCW    Y               ; rotate into quotient, rotate out udl
      002573 4A               [ 1]  230         DEC     A               ; repeat
      002574 26 EE            [ 1]  231         JRNE    DSLMOD3           ; if A == 0
      002576                        232 DSLMODb:
      002576 BF 28            [ 2]  233         LDW     YTEMP,X         ; done, save remainder
      002578 85               [ 2]  234         POPW    X               ; restore stack pointer
      002579 EF 02            [ 2]  235         LDW     (2,X),Y           ; save quotient low 
      00257B 90 BE 26         [ 2]  236         LDW     Y,XTEMP         ; quotient hi 
      00257E FF               [ 2]  237         LDW     (X),Y           ; save quotient hi 
      00257F 90 BE 28         [ 2]  238         LDW     Y,YTEMP         ; remainder onto stack
      002582 EF 04            [ 2]  239         LDW     (4,X),Y
      002584 81               [ 4]  240         RET 
                                    241 
                                    242 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    243 ;   D# ( d -- d )
                                    244 ;   extract least digit 
                                    245 ;   from double integer 
                                    246 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002585                        247     _HEADER DDIG,2,"D#"
      002585 25 43                    1         .word LINK 
                           002587     2         LINK=.
      002587 02                       3         .byte 2  
      002588 44 23                    4         .ascii "D#"
      00258A                          5         DDIG:
      00258A CD 06 68         [ 4]  248     CALL BASE 
      00258D CD 04 F1         [ 4]  249     CALL AT 
      002590 CD 25 49         [ 4]  250     CALL DSLMOD
      002593 CD 07 66         [ 4]  251     CALL ROT   
      002596 CD 0D 00         [ 4]  252     CALL DIGIT 
      002599 CD 0D 4C         [ 4]  253     CALL HOLD 
      00259C 81               [ 4]  254     RET 
                                    255 
                                    256 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    257 ;    D#S ( d -- s )
                                    258 ;   extract digit from double 
                                    259 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00259D                        260     _HEADER DDIGS,3,"D#S"
      00259D 25 87                    1         .word LINK 
                           00259F     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      00259F 03                       3         .byte 3  
      0025A0 44 23 53                 4         .ascii "D#S"
      0025A3                          5         DDIGS:
      0025A3 CD 25 8A         [ 4]  261     CALL    DDIG 
      0025A6 CD 07 B2         [ 4]  262     CALL    DDUP 
      0025A9 CD 24 D1         [ 4]  263     CALL    DZEQUAL
      0025AC                        264     _QBRAN  DDIGS 
      0025AC CD 04 A6         [ 4]    1     CALL QBRAN
      0025AF 25 A3                    2     .word DDIGS
      0025B1 CD 05 8E         [ 4]  265     CALL    DROP 
      0025B4 81               [ 4]  266     RET 
                                    267 
                                    268 
                                    269 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    270 ;   D. ( d -- )
                                    271 ;   display double integer 
                                    272 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0025B5                        273     _HEADER DDOT,2,"D."
      0025B5 25 9F                    1         .word LINK 
                           0025B7     2         LINK=.
      0025B7 02                       3         .byte 2  
      0025B8 44 2E                    4         .ascii "D."
      0025BA                          5         DDOT:
      0025BA CD 0E 78         [ 4]  274     CALL SPACE 
      0025BD CD 25 30         [ 4]  275     CALL DSIGN 
      0025C0 CD 05 61         [ 4]  276     CALL TOR
      0025C3 CD 05 55         [ 4]  277     CALL RAT 
      0025C6                        278     _QBRAN DDOT0
      0025C6 CD 04 A6         [ 4]    1     CALL QBRAN
      0025C9 25 CE                    2     .word DDOT0
      0025CB CD 08 04         [ 4]  279     CALL DNEGA 
      0025CE                        280 DDOT0:     
      0025CE CD 0D 3C         [ 4]  281     CALL BDIGS 
      0025D1 CD 25 A3         [ 4]  282     CALL DDIGS 
      0025D4 CD 05 42         [ 4]  283     CALL RFROM 
      0025D7                        284     _QBRAN DDOT1 
      0025D7 CD 04 A6         [ 4]    1     CALL QBRAN
      0025DA 25 E4                    2     .word DDOT1
      0025DC                        285     _DOLIT '-' 
      0025DC CD 04 73         [ 4]    1     CALL DOLIT 
      0025DF 00 2D                    2     .word '-' 
      0025E1 CD 0D 4C         [ 4]  286     CALL HOLD 
      0025E4                        287 DDOT1: 
      0025E4 CD 0D A1         [ 4]  288     CALL EDIGS 
      0025E7 CD 0E A2         [ 4]  289     CALL TYPES     
      0025EA 81               [ 4]  290     RET 
                                    291 
                                    292 
                                    293 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    294 ; multiply double by single 
                                    295 ; return double 
                                    296 ;  ( d s -- d )
                                    297 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0025EB                        298     _HEADER DSSTAR,3,"DS*"
      0025EB 25 B7                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



                           0025ED     2         LINK=.
      0025ED 03                       3         .byte 3  
      0025EE 44 53 2A                 4         .ascii "DS*"
      0025F1                          5         DSSTAR:
                                    299 ;DSSTAR:
      0025F1 CD 05 61         [ 4]  300     CALL TOR
      0025F4 CD 05 98         [ 4]  301     CALL DUPP 
      0025F7 CD 05 D1         [ 4]  302     CALL ZLESS
      0025FA CD 05 98         [ 4]  303     CALL DUPP 
      0025FD CD 05 61         [ 4]  304     CALL TOR 
      002600                        305     _QBRAN DSSTAR1 
      002600 CD 04 A6         [ 4]    1     CALL QBRAN
      002603 26 08                    2     .word DSSTAR1
      002605 CD 08 04         [ 4]  306     CALL DNEGA 
      002608                        307 DSSTAR1:
      002608 CD 05 42         [ 4]  308     CALL RFROM 
      00260B CD 07 85         [ 4]  309     CALL NROT       
      00260E CD 05 A8         [ 4]  310     CALL SWAPP 
      002611 CD 05 55         [ 4]  311     CALL RAT 
      002614 CD 09 FA         [ 4]  312     CALL UMSTA
      002617 CD 07 66         [ 4]  313     CALL ROT 
      00261A CD 05 42         [ 4]  314     CALL RFROM 
      00261D CD 09 FA         [ 4]  315     CALL UMSTA 
      002620 CD 05 8E         [ 4]  316     CALL DROP ; DROP OVERFLOW 
      002623 CD 07 C7         [ 4]  317     CALL PLUS 
      002626 CD 07 66         [ 4]  318     CALL ROT 
      002629                        319     _QBRAN DSSTAR3 
      002629 CD 04 A6         [ 4]    1     CALL QBRAN
      00262C 26 31                    2     .word DSSTAR3
      00262E CD 08 04         [ 4]  320     CALL DNEGA 
      002631                        321 DSSTAR3:
      002631 81               [ 4]  322     RET 
                                    323 
                                    324 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    325 ;  2SWAP ( d1 d2 -- d2 d1 )
                                    326 ;  swap double 
                                    327 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002632                        328     _HEADER DSWAP,5,"2SWAP"
      002632 25 ED                    1         .word LINK 
                           002634     2         LINK=.
      002634 05                       3         .byte 5  
      002635 32 53 57 41 50           4         .ascii "2SWAP"
      00263A                          5         DSWAP:
      00263A 90 93            [ 1]  329     LDW Y,X 
      00263C 90 FE            [ 2]  330     LDW Y,(Y)
      00263E 90 BF 28         [ 2]  331     LDW YTEMP,Y ; d2 hi 
      002641 90 93            [ 1]  332     LDW Y,X 
      002643 90 EE 02         [ 2]  333     LDW Y,(2,Y)
      002646 90 BF 26         [ 2]  334     LDW XTEMP,Y  ; d2 lo 
      002649 90 93            [ 1]  335     LDW Y,X 
      00264B 90 EE 04         [ 2]  336     LDW Y,(4,Y)  ; d1 hi 
      00264E FF               [ 2]  337     LDW (X),Y 
      00264F 90 93            [ 1]  338     LDW Y,X
      002651 90 EE 06         [ 2]  339     LDW Y,(6,Y)  ; d1 lo 
      002654 EF 02            [ 2]  340     LDW (2,X),Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      002656 90 BE 28         [ 2]  341     LDW Y,YTEMP  
      002659 EF 04            [ 2]  342     LDW (4,X),Y 
      00265B 90 BE 26         [ 2]  343     LDW Y,XTEMP 
      00265E EF 06            [ 2]  344     LDW (6,X),Y 
      002660 81               [ 4]  345     RET 
                                    346 
                                    347 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    348 ;    DCLZ ( d -- u )
                                    349 ;    double count leading zeros
                                    350 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002661                        351     _HEADER DCLZ,4,"DCLZ"
      002661 26 34                    1         .word LINK 
                           002663     2         LINK=.
      002663 04                       3         .byte 4  
      002664 44 43 4C 5A              4         .ascii "DCLZ"
      002668                          5         DCLZ:
      002668 4F               [ 1]  352     CLR A 
      002669 90 93            [ 1]  353     LDW Y,X 
      00266B 90 FE            [ 2]  354     LDW Y,(Y)
      00266D 2B 15            [ 1]  355     JRMI DCLZ8 ; no leading zero 
      00266F 27 06            [ 1]  356     JREQ DCLZ4 ; >=16 
      002671                        357 DCLZ1: ; <16
      002671 90 58            [ 2]  358     SLLW Y 
      002673 2B 0F            [ 1]  359     JRMI DCLZ8 
      002675 20 FA            [ 2]  360     JRA DCLZ1 
      002677                        361 DCLZ4:
      002677 A6 10            [ 1]  362     LD A,#16 
      002679 90 93            [ 1]  363     LDW Y,X 
      00267B 90 EE 02         [ 2]  364     LDW Y,(2,Y)
      00267E 2B 04            [ 1]  365     JRMI DCLZ8 
      002680 26 EF            [ 1]  366     JRNE DCLZ1 
      002682 AB 10            [ 1]  367     ADD A,#16
      002684                        368 DCLZ8: 
      002684 1C 00 02         [ 2]  369     ADDW X,#2 
      002687 90 5F            [ 1]  370     CLRW Y 
      002689 90 97            [ 1]  371     LD YL,A 
      00268B FF               [ 2]  372     LDW (X),Y 
      00268C 81               [ 4]  373     RET 
                                    374 
                                    375 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    376 ;   2<ROT ( d1 d2 d3 -- d3 d1 d2 )
                                    377 ;   rotate left doubles 
                                    378 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00268D                        379     _HEADER NDROT,5,"2<ROT"
      00268D 26 63                    1         .word LINK 
                           00268F     2         LINK=.
      00268F 05                       3         .byte 5  
      002690 32 3C 52 4F 54           4         .ascii "2<ROT"
      002695                          5         NDROT:
                                    380 ; save d3 in temp 
      002695 90 93            [ 1]  381     LDW Y,X 
      002697 90 FE            [ 2]  382     LDW Y,(Y)
      002699 90 BF 28         [ 2]  383     LDW YTEMP,Y  ; d3 hi 
      00269C 90 93            [ 1]  384     LDW Y,X 
      00269E 90 EE 02         [ 2]  385     LDW Y,(2,Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



      0026A1 90 BF 26         [ 2]  386     LDW XTEMP,Y  ; d3 lo 
                                    387 ; put d2 in d1 slot 
      0026A4 90 93            [ 1]  388     LDW Y,X 
      0026A6 90 EE 04         [ 2]  389     LDW Y,(4,Y) 
      0026A9 FF               [ 2]  390     LDW (X),Y   ; d2 hi 
      0026AA 90 93            [ 1]  391     LDW Y,X 
      0026AC 90 EE 06         [ 2]  392     LDW Y,(6,Y)
      0026AF EF 02            [ 2]  393     LDW (2,X),Y ; d2 lo
                                    394 ; put d1 in d2 slot 
      0026B1 90 93            [ 1]  395     LDW Y,X 
      0026B3 90 EE 08         [ 2]  396     LDW Y,(8,Y) 
      0026B6 EF 04            [ 2]  397     LDW (4,X),Y ; d1 hi 
      0026B8 90 93            [ 1]  398     LDW Y,X 
      0026BA 90 EE 0A         [ 2]  399     LDW Y,(10,Y)
      0026BD EF 06            [ 2]  400     LDW (6,X),Y  ; d1 lo 
                                    401 ; put d3 in d1 slot 
      0026BF 90 BE 28         [ 2]  402     LDW Y,YTEMP 
      0026C2 EF 08            [ 2]  403     LDW (8,X),Y  ; d3 hi 
      0026C4 90 BE 26         [ 2]  404     LDW Y,XTEMP 
      0026C7 EF 0A            [ 2]  405     LDW (10,X),Y  ; d3 lo 
      0026C9 81               [ 4]  406     RET 
                                    407 
                                    408 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    409 ;   2ROT ( d1 d2 d3 -- d2 d3 d1 )
                                    410 ;   rotate right doubles 
                                    411 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026CA                        412     _HEADER DROT,4,"2ROT"
      0026CA 26 8F                    1         .word LINK 
                           0026CC     2         LINK=.
      0026CC 04                       3         .byte 4  
      0026CD 32 52 4F 54              4         .ascii "2ROT"
      0026D1                          5         DROT:
                                    413 ; save d3 in temp 
      0026D1 90 93            [ 1]  414     LDW Y,X 
      0026D3 90 FE            [ 2]  415     LDW Y,(Y)
      0026D5 90 BF 28         [ 2]  416     LDW YTEMP,Y ; d3 hi 
      0026D8 90 93            [ 1]  417     LDW Y,X 
      0026DA 90 EE 02         [ 2]  418     LDW Y,(2,Y)
      0026DD 90 BF 26         [ 2]  419     LDW XTEMP,Y ; d3 lo 
                                    420 ; put d1 in d3 slot 
      0026E0 90 93            [ 1]  421     LDW Y,X 
      0026E2 90 EE 08         [ 2]  422     LDW Y,(8,Y)
      0026E5 FF               [ 2]  423     LDW (X),Y  ; d1 hi 
      0026E6 90 93            [ 1]  424     LDW Y,X 
      0026E8 90 EE 0A         [ 2]  425     LDW Y,(10,Y) 
      0026EB EF 02            [ 2]  426     LDW (2,X),Y ; d1 lo 
                                    427 ; put d2 in d1 slot 
      0026ED 90 93            [ 1]  428     LDW Y,X 
      0026EF 90 EE 04         [ 2]  429     LDW Y,(4,Y) ; d2 hi 
      0026F2 EF 08            [ 2]  430     LDW (8,X),Y 
      0026F4 90 93            [ 1]  431     LDW Y,X 
      0026F6 90 EE 06         [ 2]  432     LDW Y,(6,Y) ; d2 lo 
      0026F9 EF 0A            [ 2]  433     LDW (10,X),Y 
                                    434 ; put d3 in d2 slot 
      0026FB 90 BE 28         [ 2]  435     LDW Y,YTEMP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      0026FE EF 04            [ 2]  436     LDW (4,X),Y 
      002700 90 BE 26         [ 2]  437     LDW Y,XTEMP 
      002703 EF 06            [ 2]  438     LDW (6,X),Y 
      002705 81               [ 4]  439     RET 
                                    440 
                                    441 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    442 ;   D= ( d1 d2 -- f )
                                    443 ;   d1==d2?
                                    444 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002706                        445     _HEADER DEQUAL,2,"D="
      002706 26 CC                    1         .word LINK 
                           002708     2         LINK=.
      002708 02                       3         .byte 2  
      002709 44 3D                    4         .ascii "D="
      00270B                          5         DEQUAL:
      00270B A6 00            [ 1]  446     LD A,#0 
      00270D 90 93            [ 1]  447     LDW Y,X 
      00270F 90 FE            [ 2]  448     LDW Y,(Y)
      002711 E3 04            [ 2]  449     CPW Y,(4,X)
      002713 26 0B            [ 1]  450     JRNE DEQU4 
      002715 90 93            [ 1]  451     LDW Y,X 
      002717 90 EE 02         [ 2]  452     LDW Y,(2,Y)
      00271A E3 06            [ 2]  453     CPW Y,(6,X)
      00271C 26 02            [ 1]  454     JRNE DEQU4 
      00271E A6 FF            [ 1]  455     LD A,#0XFF
      002720                        456 DEQU4:
      002720 1C 00 06         [ 2]  457     ADDW X,#6
      002723 F7               [ 1]  458     LD (X),A 
      002724 E7 01            [ 1]  459     LD (1,X),A 
      002726 81               [ 4]  460     RET 
                                    461 
                                    462 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    463 ;   D> ( d1 d2 -- f )
                                    464 ;   d1>d2?
                                    465 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002727                        466     _HEADER DGREAT,2,"D>"
      002727 27 08                    1         .word LINK 
                           002729     2         LINK=.
      002729 02                       3         .byte 2  
      00272A 44 3E                    4         .ascii "D>"
      00272C                          5         DGREAT:
      00272C A6 00            [ 1]  467     LD A,#0 
      00272E 90 93            [ 1]  468     LDW Y,X 
      002730 90 EE 04         [ 2]  469     LDW Y,(4,Y)  ; d1 hi 
      002733 F3               [ 2]  470     CPW Y,(X)    ; d2 hi 
      002734 2F 0B            [ 1]  471     JRSLT DGREAT4 
      002736 90 93            [ 1]  472     LDW Y,X 
      002738 90 EE 06         [ 2]  473     LDW Y,(6,Y)
      00273B E3 02            [ 2]  474     CPW Y,(2,X)
      00273D 2D 02            [ 1]  475     JRSLE DGREAT4 
      00273F A6 FF            [ 1]  476     LD A,#0XFF
      002741                        477 DGREAT4:
      002741 1C 00 06         [ 2]  478     ADDW X,#6
      002744 F7               [ 1]  479     LD (X),A 
      002745 E7 01            [ 1]  480     LD (1,X),A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      002747 81               [ 4]  481     RET
                                    482 
                                    483 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    484 ;   D< ( d1 d2 -- f )
                                    485 ;   d1<d2? 
                                    486 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002748                        487     _HEADER DLESS,2,"D<"
      002748 27 29                    1         .word LINK 
                           00274A     2         LINK=.
      00274A 02                       3         .byte 2  
      00274B 44 3C                    4         .ascii "D<"
      00274D                          5         DLESS:
      00274D A6 00            [ 1]  488     LD A,#0 
      00274F 90 93            [ 1]  489     LDW Y,X 
      002751 90 EE 04         [ 2]  490     LDW Y,(4,Y)
      002754 F3               [ 2]  491     CPW Y,(X)
      002755 2C 0B            [ 1]  492     JRSGT DLESS4 
      002757 90 93            [ 1]  493     LDW Y,X 
      002759 90 EE 06         [ 2]  494     LDW Y,(6,Y)
      00275C E3 02            [ 2]  495     CPW Y,(2,X)
      00275E 2E C0            [ 1]  496     JRSGE DEQU4 
      002760 A6 FF            [ 1]  497     LD A,#0XFF
      002762                        498 DLESS4:
      002762 1C 00 06         [ 2]  499     ADDW X,#6
      002765 F7               [ 1]  500     LD (X),A 
      002766 E7 01            [ 1]  501     LD (1,X),A 
      002768 81               [ 4]  502     RET
                                    503 
                                    504 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    505 ;  D0< ( d -- f )
                                    506 ;  d<0? 
                                    507 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002769                        508     _HEADER DZLESS,3,"D0<"
      002769 27 4A                    1         .word LINK 
                           00276B     2         LINK=.
      00276B 03                       3         .byte 3  
      00276C 44 30 3C                 4         .ascii "D0<"
      00276F                          5         DZLESS:
      00276F A6 00            [ 1]  509     LD A,#0 
      002771 90 93            [ 1]  510     LDW Y,X 
      002773 90 FE            [ 2]  511     LDW Y,(Y)
      002775 2A 02            [ 1]  512     JRPL DZLESS1 
      002777 A6 FF            [ 1]  513     LD A,#0XFF 
      002779                        514 DZLESS1:
      002779 1C 00 02         [ 2]  515     ADDW X,#2 
      00277C F7               [ 1]  516     LD (X),A 
      00277D E7 01            [ 1]  517     LD (1,X),A    
      00277F 81               [ 4]  518     RET 
                                    519 
                                    520 
                                    521 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    522 ;  DCMP ( d1 d2 -- d1 d2 -1|0|1 )
                                    523 ; compare 2 doubles 
                                    524 ; keep the doubles 
                                    525 ; return flag: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



                                    526 ;    -1 if d1<d2 
                                    527 ;     0 if d1==d2
                                    528 ;     1 if d1>d2 
                                    529 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002780                        530     _HEADER DCMP,4,"DCMP"
      002780 27 6B                    1         .word LINK 
                           002782     2         LINK=.
      002782 04                       3         .byte 4  
      002783 44 43 4D 50              4         .ascii "DCMP"
      002787                          5         DCMP:
      002787 90 93            [ 1]  531     LDW Y,X 
      002789 90 EE 04         [ 2]  532     LDW Y,(4,Y)
      00278C F3               [ 2]  533     CPW Y,(X) 
      00278D 27 04            [ 1]  534     JREQ DCMP2 
      00278F 2F 13            [ 1]  535     JRSLT DCMP_SMALL 
      002791 20 17            [ 2]  536     JRA  DCMP_GREAT 
      002793                        537 DCMP2:    
      002793 90 93            [ 1]  538     LDW Y,X 
      002795 90 EE 06         [ 2]  539     LDW Y,(6,Y)
      002798 E3 02            [ 2]  540     CPW Y,(2,X)
      00279A 27 04            [ 1]  541     JREQ DCMP_EQUAL  
      00279C 25 06            [ 1]  542     JRULT DCMP_SMALL 
      00279E 20 0A            [ 2]  543     JRA DCMP_GREAT
      0027A0                        544 DCMP_EQUAL:
      0027A0 90 5F            [ 1]  545     CLRW Y 
      0027A2 20 0A            [ 2]  546     JRA DCMP4 
      0027A4                        547 DCMP_SMALL:
      0027A4 90 AE FF FF      [ 2]  548     LDW Y,#-1 
      0027A8 20 04            [ 2]  549     JRA DCMP4 
      0027AA                        550 DCMP_GREAT:
      0027AA 90 AE 00 01      [ 2]  551     LDW Y,#1
      0027AE                        552 DCMP4:
      0027AE 1D 00 02         [ 2]  553     SUBW X,#2 
      0027B1 FF               [ 2]  554     LDW (X),Y 
      0027B2 81               [ 4]  555     RET
                                    556 
                                    557 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    558 ;   2>R ( d -- R: d )
                                    559 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027B3                        560     _HEADER DTOR,3,"2>R"
      0027B3 27 82                    1         .word LINK 
                           0027B5     2         LINK=.
      0027B5 03                       3         .byte 3  
      0027B6 32 3E 52                 4         .ascii "2>R"
      0027B9                          5         DTOR:
      0027B9 90 85            [ 2]  561     POPW Y 
      0027BB 90 BF 28         [ 2]  562     LDW YTEMP,Y 
      0027BE 90 93            [ 1]  563     LDW Y,X 
      0027C0 90 EE 02         [ 2]  564     LDW Y,(2,Y)
      0027C3 90 89            [ 2]  565     PUSHW Y   ; d low 
      0027C5 90 93            [ 1]  566     LDW Y,X 
      0027C7 90 FE            [ 2]  567     LDW Y,(Y)
      0027C9 90 89            [ 2]  568     PUSHW Y   ; d hi 
      0027CB 1C 00 04         [ 2]  569     ADDW X,#4  
      0027CE 92 CC 28         [ 5]  570     JP [YTEMP]
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



                                    571 
                                    572 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    573 ;  2R> ( -- d ) R: d --      
                                    574 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027D1                        575     _HEADER DRFROM,3,"2R>"
      0027D1 27 B5                    1         .word LINK 
                           0027D3     2         LINK=.
      0027D3 03                       3         .byte 3  
      0027D4 32 52 3E                 4         .ascii "2R>"
      0027D7                          5         DRFROM:
      0027D7 90 85            [ 2]  576     POPW Y      ; d hi 
      0027D9 90 BF 28         [ 2]  577     LDW YTEMP,Y 
      0027DC 1D 00 04         [ 2]  578     SUBW X,#4
      0027DF 90 85            [ 2]  579     POPW Y       ; d hi 
      0027E1 FF               [ 2]  580     LDW (X),Y 
      0027E2 90 85            [ 2]  581     POPW Y       ; d low  
      0027E4 EF 02            [ 2]  582     LDW (2,X),Y 
      0027E6 92 CC 28         [ 5]  583     JP [YTEMP]
                                    584     
                                    585 
                                    586 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    587 ;  2VARIABLE <name> 
                                    588 ;  create a double variable 
                                    589 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027E9                        590     _HEADER DVARIA,9,"2VARIABLE"
      0027E9 27 D3                    1         .word LINK 
                           0027EB     2         LINK=.
      0027EB 09                       3         .byte 9  
      0027EC 32 56 41 52 49 41 42     4         .ascii "2VARIABLE"
             4C 45
      0027F5                          5         DVARIA:
      0027F5 CD 0C 1F         [ 4]  591         CALL HERE
      0027F8 CD 05 98         [ 4]  592         CALL DUPP
      0027FB                        593         _DOLIT 4  
      0027FB CD 04 73         [ 4]    1     CALL DOLIT 
      0027FE 00 04                    2     .word 4 
      002800 CD 07 C7         [ 4]  594         CALL PLUS 
      002803 CD 06 F9         [ 4]  595         CALL VPP 
      002806 CD 04 DA         [ 4]  596         CALL STORE
      002809 CD 17 F7         [ 4]  597         CALL CREAT
      00280C CD 05 98         [ 4]  598         CALL DUPP
      00280F CD 14 79         [ 4]  599         CALL COMMA
      002812 CD 0B 31         [ 4]  600         CALL ZERO
      002815 CD 05 C2         [ 4]  601         CALL OVER 
      002818 CD 04 DA         [ 4]  602         CALL STORE 
      00281B CD 0B 31         [ 4]  603         CALL ZERO 
      00281E CD 05 A8         [ 4]  604         CALL SWAPP 
      002821 CD 04 DA         [ 4]  605         CALL STORE
      002824 CD 20 FD         [ 4]  606         CALL FMOVE ; move definition to FLASH
      002827 CD 07 55         [ 4]  607         CALL QDUP 
      00282A CD 04 A6         [ 4]  608         CALL QBRAN 
      00282D 18 44                  609         .word SET_RAMLAST   
      00282F CD 1B A5         [ 4]  610         call UPDATVP  ; don't update if variable kept in RAM.
      002832 CD 21 91         [ 4]  611         CALL UPDATPTR
      002835 81               [ 4]  612         RET         
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



                                    613 
                                    614 
                                    615 
                                    616 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    617 ;  2LITERAL ( d -- )
                                    618 ;  compile double literal 
                                    619 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002836                        620     _HEADER DLITER,IMEDD+8,"2LITERAL"
      002836 27 EB                    1         .word LINK 
                           002838     2         LINK=.
      002838 88                       3         .byte IMEDD+8  
      002839 32 4C 49 54 45 52 41     4         .ascii "2LITERAL"
             4C
      002841                          5         DLITER:
      002841 CD 14 BE         [ 4]  621     CALL COMPI 
      002844 28 4C                  622     .word do2lit 
      002846 CD 14 79         [ 4]  623     CALL COMMA 
      002849 CC 14 79         [ 2]  624     JP   COMMA 
                                    625 
                                    626 
                                    627 ; runtime for 2LITERAL 
      00284C                        628 do2lit:
      00284C 1D 00 04         [ 2]  629     SUBW X,#4 
      00284F 16 01            [ 2]  630     LDW Y,(1,SP)
      002851 90 FE            [ 2]  631     LDW Y,(Y)
      002853 FF               [ 2]  632     LDW (X),Y 
      002854 16 01            [ 2]  633     LDW Y,(1,SP)
      002856 90 EE 02         [ 2]  634     LDW Y,(2,Y)
      002859 EF 02            [ 2]  635     LDW (2,X),Y 
      00285B 90 85            [ 2]  636     POPW Y 
      00285D 90 EC 04         [ 2]  637     JP (4,Y)
                                    638 
                                    639 
                                    640 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    641 ;   2OVER ( d1 d2 -- d1 d2 d1 )
                                    642 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002860                        643     _HEADER DOVER,5,"2OVER"
      002860 28 38                    1         .word LINK 
                           002862     2         LINK=.
      002862 05                       3         .byte 5  
      002863 32 4F 56 45 52           4         .ascii "2OVER"
      002868                          5         DOVER:
      002868 90 93            [ 1]  644     LDW Y,X 
      00286A 1D 00 04         [ 2]  645     SUBW X,#4 
      00286D 90 89            [ 2]  646     PUSHW Y 
      00286F 90 EE 04         [ 2]  647     LDW Y,(4,Y)  ; d1 hi 
      002872 FF               [ 2]  648     LDW (X),Y 
      002873 90 85            [ 2]  649     POPW Y 
      002875 90 EE 06         [ 2]  650     LDW Y,(6,Y)  ;d1 lo 
      002878 EF 02            [ 2]  651     LDW (2,X),Y 
      00287A 81               [ 4]  652     RET 
                                    653 
                                    654 
                                    655 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    656 ;   D2/ ( d -- d/2 )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



                                    657 ;   divide double by 2 
                                    658 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00287B                        659     _HEADER D2SLASH,3,"D2/"
      00287B 28 62                    1         .word LINK 
                           00287D     2         LINK=.
      00287D 03                       3         .byte 3  
      00287E 44 32 2F                 4         .ascii "D2/"
      002881                          5         D2SLASH:
      002881 90 93            [ 1]  660     LDW Y,X 
      002883 90 FE            [ 2]  661     LDW Y,(Y)
      002885 90 57            [ 2]  662     SRAW Y 
      002887 FF               [ 2]  663     LDW (X),Y 
      002888 90 93            [ 1]  664     LDW Y,X 
      00288A 90 EE 02         [ 2]  665     LDW Y,(2,Y)
      00288D 90 56            [ 2]  666     RRCW Y 
      00288F EF 02            [ 2]  667     LDW (2,X),Y 
      002891 81               [ 4]  668     RET
                                    669 
                                    670 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    671 ;   DLSHIFT ( d n -- d )
                                    672 ;   left shift double 
                                    673 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002892                        674     _HEADER DLSHIFT,7,"DLSHIFT"
      002892 28 7D                    1         .word LINK 
                           002894     2         LINK=.
      002894 07                       3         .byte 7  
      002895 44 4C 53 48 49 46 54     4         .ascii "DLSHIFT"
      00289C                          5         DLSHIFT:
      00289C E6 01            [ 1]  675     LD A,(1,X) ; shift count 
      00289E 1C 00 02         [ 2]  676     ADDW X,#2 
      0028A1 90 93            [ 1]  677     LDW Y,X 
      0028A3 90 FE            [ 2]  678     LDW Y,(Y)
      0028A5 90 BF 28         [ 2]  679     LDW YTEMP,Y  ; d hi 
      0028A8 90 93            [ 1]  680     LDW Y,X 
      0028AA 90 EE 02         [ 2]  681     LDW Y,(2,Y)  ; d low 
      0028AD                        682 DLSHIFT1:
      0028AD 4D               [ 1]  683     TNZ A 
      0028AE 27 12            [ 1]  684     JREQ DLSHIFT2 
      0028B0 98               [ 1]  685     RCF 
      0028B1 90 59            [ 2]  686     RLCW Y 
      0028B3 90 89            [ 2]  687     PUSHW Y 
      0028B5 90 BE 28         [ 2]  688     LDW Y,YTEMP 
      0028B8 90 59            [ 2]  689     RLCW Y 
      0028BA 90 BF 28         [ 2]  690     LDW YTEMP,Y 
      0028BD 90 85            [ 2]  691     POPW Y 
      0028BF 4A               [ 1]  692     DEC A 
      0028C0 20 EB            [ 2]  693     JRA DLSHIFT1 
      0028C2                        694 DLSHIFT2:
      0028C2 EF 02            [ 2]  695     LDW (2,X),Y 
      0028C4 90 BE 28         [ 2]  696     LDW Y,YTEMP 
      0028C7 FF               [ 2]  697     LDW (X),Y 
      0028C8 81               [ 4]  698     RET 
                                    699 
                                    700 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    701 ;  DD/MOD ( d1 d2 -- dr dq )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



                                    702 ;  unsigned division double 
                                    703 ;  double.
                                    704 ;  return double quotient and 
                                    705 ;  double remainder 
                                    706 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028C9                        707     _HEADER DDSLMOD,6,"DD/MOD"
      0028C9 28 94                    1         .word LINK 
                           0028CB     2         LINK=.
      0028CB 06                       3         .byte 6  
      0028CC 44 44 2F 4D 4F 44        4         .ascii "DD/MOD"
      0028D2                          5         DDSLMOD:
      0028D2 CD 07 B2         [ 4]  708     CALL DDUP 
      0028D5 CD 26 68         [ 4]  709     CALL DCLZ 
      0028D8 CD 05 98         [ 4]  710     CALL DUPP
      0028DB                        711     _DOLIT 16 
      0028DB CD 04 73         [ 4]    1     CALL DOLIT 
      0028DE 00 10                    2     .word 16 
      0028E0 CD 08 C3         [ 4]  712     CALL GREAT 
      0028E3                        713     _QBRAN DDSLMOD1 
      0028E3 CD 04 A6         [ 4]    1     CALL QBRAN
      0028E6 28 EF                    2     .word DDSLMOD1
      0028E8 CD 07 A7         [ 4]  714     CALL DDROP 
      0028EB CD 25 49         [ 4]  715     CALL DSLMOD 
      0028EE 81               [ 4]  716     RET 
      0028EF                        717 DDSLMOD1:
      0028EF CD 05 98         [ 4]  718     CALL DUPP      
      0028F2 CD 05 61         [ 4]  719     CALL TOR 
      0028F5 CD 28 9C         [ 4]  720     CALL DLSHIFT
      0028F8                        721     _DOLIT 32 
      0028F8 CD 04 73         [ 4]    1     CALL DOLIT 
      0028FB 00 20                    2     .word 32 
      0028FD CD 05 42         [ 4]  722     CALL RFROM 
      002900 CD 08 40         [ 4]  723     CALL SUBB 
      002903                        724     _DOLIT 5 
      002903 CD 04 73         [ 4]    1     CALL DOLIT 
      002906 00 05                    2     .word 5 
      002908 CD 0B 8A         [ 4]  725     CALL PICK 
      00290B                        726     _DOLIT 5 
      00290B CD 04 73         [ 4]    1     CALL DOLIT 
      00290E 00 05                    2     .word 5 
      002910 CD 0B 8A         [ 4]  727     CALL PICK 
      002913 CD 26 68         [ 4]  728     CALL DCLZ 
      002916 CD 05 61         [ 4]  729     CALL TOR 
      002919 CD 26 3A         [ 4]  730     CALL DSWAP 
      00291C CD 05 55         [ 4]  731     CALL RAT 
      00291F CD 28 9C         [ 4]  732     CALL DLSHIFT 
      002922 CD 26 3A         [ 4]  733     CALL DSWAP 
      002925 CD 05 42         [ 4]  734     CALL RFROM 
      002928 CD 05 42         [ 4]  735     CALL RFROM 
      00292B CD 05 A8         [ 4]  736     CALL SWAPP 
      00292E CD 08 40         [ 4]  737     CALL SUBB ; number dividend left shift to do.
                                    738 
      002931 81               [ 4]  739     RET 
                                    740 
                                    741 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



                                    742 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    743 ;   D* ( d1 d2 -- d3 )
                                    744 ;   double product 
                                    745 ;   
                                    746 ;   d3 = d1 * d2
                                    747 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002932                        748     _HEADER DSTAR,2,"D*"
      002932 28 CB                    1         .word LINK 
                           002934     2         LINK=.
      002934 02                       3         .byte 2  
      002935 44 2A                    4         .ascii "D*"
      002937                          5         DSTAR:
      002937                        749     _DOLIT 0 
      002937 CD 04 73         [ 4]    1     CALL DOLIT 
      00293A 00 00                    2     .word 0 
      00293C CD 07 85         [ 4]  750     CALL NROT  
      00293F CD 05 98         [ 4]  751     CALL DUPP 
      002942 CD 05 D1         [ 4]  752     CALL ZLESS 
      002945                        753     _QBRAN DDSTAR1 
      002945 CD 04 A6         [ 4]    1     CALL QBRAN
      002948 29 56                    2     .word DDSTAR1
      00294A CD 08 04         [ 4]  754     CALL DNEGA 
      00294D CD 07 66         [ 4]  755     CALL ROT  
      002950 CD 07 E1         [ 4]  756     CALL INVER 
      002953 CD 07 85         [ 4]  757     CALL NROT  
      002956                        758 DDSTAR1:
      002956 CD 05 61         [ 4]  759     CALL TOR 
      002959 CD 05 61         [ 4]  760     CALL TOR
      00295C CD 07 85         [ 4]  761     CALL NROT  
      00295F CD 05 98         [ 4]  762     CALL DUPP 
      002962 CD 05 D1         [ 4]  763     CALL ZLESS 
      002965                        764     _QBRAN DDSTAR2 
      002965 CD 04 A6         [ 4]    1     CALL QBRAN
      002968 29 76                    2     .word DDSTAR2
      00296A CD 08 04         [ 4]  765     CALL DNEGA 
      00296D CD 07 66         [ 4]  766     CALL ROT
      002970 CD 07 E1         [ 4]  767     CALL INVER 
      002973 CD 07 85         [ 4]  768     CALL NROT 
      002976                        769 DDSTAR2:
      002976 CD 07 B2         [ 4]  770     CALL DDUP 
      002979 CD 05 42         [ 4]  771     CALL RFROM 
      00297C CD 25 F1         [ 4]  772     CALL DSSTAR 
      00297F CD 26 3A         [ 4]  773     CALL DSWAP 
      002982 CD 05 42         [ 4]  774     CALL RFROM 
      002985 CD 25 F1         [ 4]  775     CALL DSSTAR 
      002988 CD 05 8E         [ 4]  776     CALL DROP
      00298B CD 07 C7         [ 4]  777     CALL PLUS
      00298E CD 07 66         [ 4]  778     CALL ROT 
      002991                        779     _QBRAN DDSTAR3 
      002991 CD 04 A6         [ 4]    1     CALL QBRAN
      002994 29 99                    2     .word DDSTAR3
      002996 CD 08 04         [ 4]  780     CALL DNEGA 
      002999                        781 DDSTAR3:  
      002999 81               [ 4]  782     RET 
                                    783 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



                                    784 
                                    785 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    786 ;   D+ ( d1 d2 -- d3 )
                                    787 ;   add 2 doubles 
                                    788 ;   d3=d1+d2 
                                    789 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00299A                        790     _HEADER DPLUS,2,"D+"
      00299A 29 34                    1         .word LINK 
                           00299C     2         LINK=.
      00299C 02                       3         .byte 2  
      00299D 44 2B                    4         .ascii "D+"
      00299F                          5         DPLUS:
      00299F 90 93            [ 1]  791     LDW Y,X 
      0029A1 90 FE            [ 2]  792     LDW Y,(Y)
      0029A3 90 BF 28         [ 2]  793     LDW YTEMP,Y ; d2 hi 
      0029A6 90 93            [ 1]  794     LDW Y,X 
      0029A8 90 EE 02         [ 2]  795     LDW Y,(2,Y)
      0029AB 90 BF 26         [ 2]  796     LDW XTEMP,Y ; d2 lo 
      0029AE 1C 00 04         [ 2]  797     ADDW X,#4 
      0029B1 90 93            [ 1]  798     LDW Y,X 
      0029B3 90 EE 02         [ 2]  799     LDW Y,(2,Y) ; d1 lo
      0029B6 72 B9 00 26      [ 2]  800     ADDW Y,XTEMP
      0029BA EF 02            [ 2]  801     LDW (2,X),Y 
      0029BC 90 93            [ 1]  802     LDW Y,X 
      0029BE 90 FE            [ 2]  803     LDW Y,(Y) ; d1 hi 
      0029C0 24 04            [ 1]  804     JRNC DPLUS1 
      0029C2 72 A9 00 01      [ 2]  805     ADDW Y,#1 
      0029C6                        806 DPLUS1: 
      0029C6 72 B9 00 28      [ 2]  807     ADDW Y,YTEMP 
      0029CA FF               [ 2]  808     LDW (X),Y 
      0029CB 81               [ 4]  809     RET 
                                    810 
                                    811 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    812 ;   D- ( d1 d2 -- d3 )
                                    813 ;   d3=d1-d2 
                                    814 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0029CC                        815     _HEADER DSUB,2,"D-"
      0029CC 29 9C                    1         .word LINK 
                           0029CE     2         LINK=.
      0029CE 02                       3         .byte 2  
      0029CF 44 2D                    4         .ascii "D-"
      0029D1                          5         DSUB:
      0029D1 90 93            [ 1]  816     LDW Y,X 
      0029D3 90 FE            [ 2]  817     LDW Y,(Y)
      0029D5 90 BF 28         [ 2]  818     LDW YTEMP,Y ; d2 hi 
      0029D8 90 93            [ 1]  819     LDW Y,X 
      0029DA 90 EE 02         [ 2]  820     LDW Y,(2,Y)
      0029DD 90 BF 26         [ 2]  821     LDW XTEMP,Y ; d2 lo 
      0029E0 1C 00 04         [ 2]  822     ADDW X,#4 
      0029E3 90 93            [ 1]  823     LDW Y,X 
      0029E5 90 EE 02         [ 2]  824     LDW Y,(2,Y) ; d1 lo
      0029E8 72 B2 00 26      [ 2]  825     SUBW Y,XTEMP
      0029EC EF 02            [ 2]  826     LDW (2,X),Y 
      0029EE 90 93            [ 1]  827     LDW Y,X 
      0029F0 90 FE            [ 2]  828     LDW Y,(Y) ; d1 hi 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



      0029F2 24 04            [ 1]  829     JRNC DSUB1 
      0029F4 72 A2 00 01      [ 2]  830     SUBW Y,#1 
      0029F8                        831 DSUB1: 
      0029F8 72 B2 00 28      [ 2]  832     SUBW Y,YTEMP 
      0029FC FF               [ 2]  833     LDW (X),Y 
      0029FD 81               [ 4]  834     RET 
                                    835 
                                    836 
                                    837 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    838 ;    ILOG ( ud base -- n )
                                    839 ;    integer part of double in base 
                                    840 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0029FE                        841     _HEADER ILOG,4,"ILOG"
      0029FE 29 CE                    1         .word LINK 
                           002A00     2         LINK=.
      002A00 04                       3         .byte 4  
      002A01 49 4C 4F 47              4         .ascii "ILOG"
      002A05                          5         ILOG:
      002A05                        842     _DOLIT 0 
      002A05 CD 04 73         [ 4]    1     CALL DOLIT 
      002A08 00 00                    2     .word 0 
      002A0A CD 05 61         [ 4]  843     CALL TOR 
      002A0D CD 07 85         [ 4]  844     CALL NROT 
      002A10                        845 ILOG1: 
      002A10                        846     _DOLIT 2 
      002A10 CD 04 73         [ 4]    1     CALL DOLIT 
      002A13 00 02                    2     .word 2 
      002A15 CD 0B 8A         [ 4]  847     CALL PICK 
      002A18 CD 25 49         [ 4]  848     CALL DSLMOD 
      002A1B CD 07 66         [ 4]  849     CALL ROT 
      002A1E CD 05 8E         [ 4]  850     CALL DROP 
      002A21 CD 07 B2         [ 4]  851     CALL DDUP
      002A24 CD 24 D1         [ 4]  852     CALL DZEQUAL 
      002A27 CD 07 E1         [ 4]  853     CALL INVER 
      002A2A                        854     _QBRAN ILOG2
      002A2A CD 04 A6         [ 4]    1     CALL QBRAN
      002A2D 2A 3D                    2     .word ILOG2
      002A2F CD 05 42         [ 4]  855     CALL RFROM 
      002A32 CD 0A C5         [ 4]  856     CALL ONEP 
      002A35 CD 05 61         [ 4]  857     CALL TOR 
      002A38                        858     _BRAN ILOG1 
      002A38 CD 04 BD         [ 4]    1     CALL BRAN 
      002A3B 2A 10                    2     .word ILOG1 
      002A3D                        859 ILOG2:
      002A3D CD 07 A7         [ 4]  860     CALL DDROP 
      002A40 CD 05 8E         [ 4]  861     CALL DROP 
      002A43 CD 05 42         [ 4]  862     CALL RFROM 
      002A46 81               [ 4]  863     RET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



                                   4776 .endif 
                           000001  4777 .if WANT_FLOAT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



                                   4778         .include "float.asm"
                                      1 ;*********************************
                                      2 ;    floating point library
                                      3 ;    adapted from 
                                      4 ;    Forth dimensions Vol. IV #1 
                                      5 ;    published in  may/june 1982
                                      6 ;
                                      7 ; Creation date: 2021-06-15 
                                      8 ;
                                      9 ; NOTE: I used a different format 
                                     10 ;       for float number. This 
                                     11 ;       enable comparison of floats 
                                     12 ;       as they were integer hence 
                                     13 ;       there no need for F>,F<,etc 
                                     14 ;************************************
                                     15 
                                     16 ;*************************************************
                                     17 ;  FLOAT format double for storage 
                                     18 ;  bits 22:0  mantissa absolute value 
                                     19 ;  bits  30:23  exponent with 127 offset added  
                                     20 ;  bit 31  mantissa sign 
                                     21 ;  float value: if bit 31 is 1 negate mantissa
                                     22 ;                else keep mantissas as bits 22:0
                                     23 ;                as is
                                     24 ;                eponent: 10^^(exp-127) 
                                     25 ;***********************************************  
                                     26 
                                     27     .module FLOAT 
                                     28 
                           000001    29 .if WANT_DOUBLE 
                                     30 ; already included 
                           000000    31 .else
                                     32 ;  must be included  
                                     33     .include "double.asm"
                                     34 .endif  
                                     35 
                                     36 ;-------------------------
                                     37 ;    FPSW ( -- a )
                                     38 ;    floating state variable
                                     39 ;    bit 0 zero flag 
                                     40 ;    bit 1 negative flag 
                                     41 ;    bit 2 overflow/error flag 
                                     42 ;---------------------------
      002A47                         43     _HEADER FPSW,4,"FPSW"
      002A47 2A 00                    1         .word LINK 
                           002A49     2         LINK=.
      002A49 04                       3         .byte 4  
      002A4A 46 50 53 57              4         .ascii "FPSW"
      002A4E                          5         FPSW:
      002A4E 90 AE 00 0A      [ 2]   44 	LDW Y,#UFPSW  
      002A52 1D 00 02         [ 2]   45 	SUBW X,#2
      002A55 FF               [ 2]   46     LDW (X),Y
      002A56 81               [ 4]   47     RET
                                     48 
                                     49 ;----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



                                     50 ;    FBASE ( -- a )
                                     51 ;    floating point numerical
                                     52 ;    base variable 
                                     53 ;----------------------------
      002A57                         54     _HEADER FBASE,5,"FBASE"
      002A57 2A 49                    1         .word LINK 
                           002A59     2         LINK=.
      002A59 05                       3         .byte 5  
      002A5A 46 42 41 53 45           4         .ascii "FBASE"
      002A5F                          5         FBASE:
      002A5F 90 AE 00 08      [ 2]   55 	LDW Y,#UFBASE  
      002A63 1D 00 02         [ 2]   56 	SUBW X,#2
      002A66 FF               [ 2]   57     LDW (X),Y
      002A67 81               [ 4]   58     RET
                                     59 
                                     60 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     61 ;   FRESET ( -- )
                                     62 ;   reset FPSW variable 
                                     63 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
      002A68                         64     _HEADER FRESET,6,"FRESET"
      002A68 2A 59                    1         .word LINK 
                           002A6A     2         LINK=.
      002A6A 06                       3         .byte 6  
      002A6B 46 52 45 53 45 54        4         .ascii "FRESET"
      002A71                          5         FRESET:
      002A71                         65     _DOLIT 0 
      002A71 CD 04 73         [ 4]    1     CALL DOLIT 
      002A74 00 00                    2     .word 0 
      002A76 CD 2A 4E         [ 4]   66     CALL FPSW 
      002A79 CD 04 DA         [ 4]   67     CALL STORE 
      002A7C 81               [ 4]   68     RET 
                                     69 
                                     70 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     71 ;   FINIT ( -- )
                                     72 ;   initialize floating point 
                                     73 ;   library 
                                     74 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002A7D                         75     _HEADER FINIT,5,"FINIT"
      002A7D 2A 6A                    1         .word LINK 
                           002A7F     2         LINK=.
      002A7F 05                       3         .byte 5  
      002A80 46 49 4E 49 54           4         .ascii "FINIT"
      002A85                          5         FINIT:
      002A85 CD 2A 71         [ 4]   76     CALL FRESET 
      002A88 CD 06 68         [ 4]   77     CALL BASE 
      002A8B CD 04 F1         [ 4]   78     CALL AT 
      002A8E CD 2A 5F         [ 4]   79     CALL FBASE 
      002A91 CD 04 DA         [ 4]   80     CALL STORE 
      002A94 81               [ 4]   81     RET 
                                     82 
                                     83 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     84 ;    FER ( -- u )
                                     85 ;    return FPSW value 
                                     86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002A95                         87     _HEADER FER,3,"FER"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      002A95 2A 7F                    1         .word LINK 
                           002A97     2         LINK=.
      002A97 03                       3         .byte 3  
      002A98 46 45 52                 4         .ascii "FER"
      002A9B                          5         FER:
      002A9B CD 2A 4E         [ 4]   88     CALL FPSW 
      002A9E CD 04 F1         [ 4]   89     CALL AT 
      002AA1 81               [ 4]   90     RET 
                                     91 
                                     92 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     93 ;    FZE  ( -- z )
                                     94 ;    return FPSW zero flag 
                                     95 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002AA2                         96     _HEADER FZE,3,"FZE"
      002AA2 2A 97                    1         .word LINK 
                           002AA4     2         LINK=.
      002AA4 03                       3         .byte 3  
      002AA5 46 5A 45                 4         .ascii "FZE"
      002AA8                          5         FZE:
      002AA8 CD 2A 4E         [ 4]   97     CALL FPSW
      002AAB CD 04 F1         [ 4]   98     CALL AT  
      002AAE                         99     _DOLIT 1
      002AAE CD 04 73         [ 4]    1     CALL DOLIT 
      002AB1 00 01                    2     .word 1 
      002AB3 CD 05 F7         [ 4]  100     CALL ANDD 
      002AB6 81               [ 4]  101     RET 
                                    102 
                                    103 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    104 ;    FNE ( -- n )
                                    105 ;    return FPSW negative flag 
                                    106 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002AB7                        107     _HEADER FNE,3,"FNE"
      002AB7 2A A4                    1         .word LINK 
                           002AB9     2         LINK=.
      002AB9 03                       3         .byte 3  
      002ABA 46 4E 45                 4         .ascii "FNE"
      002ABD                          5         FNE:
      002ABD CD 2A 4E         [ 4]  108     CALL FPSW 
      002AC0 CD 04 F1         [ 4]  109     CALL AT 
      002AC3                        110     _DOLIT 2 
      002AC3 CD 04 73         [ 4]    1     CALL DOLIT 
      002AC6 00 02                    2     .word 2 
      002AC8 CD 05 F7         [ 4]  111     CALL ANDD 
      002ACB 81               [ 4]  112     RET 
                                    113 
                                    114 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    115 ;   FOV (A -- v )
                                    116 ;   return FPSW overflow flag 
                                    117 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002ACC                        118     _HEADER FOV,3,"FOV"
      002ACC 2A B9                    1         .word LINK 
                           002ACE     2         LINK=.
      002ACE 03                       3         .byte 3  
      002ACF 46 4F 56                 4         .ascii "FOV"
      002AD2                          5         FOV:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



      002AD2 CD 2A 4E         [ 4]  119     CALL FPSW
      002AD5 CD 04 F1         [ 4]  120     CALL AT  
      002AD8                        121     _DOLIT 4 
      002AD8 CD 04 73         [ 4]    1     CALL DOLIT 
      002ADB 00 04                    2     .word 4 
      002ADD CD 05 F7         [ 4]  122     CALL ANDD 
      002AE0 81               [ 4]  123     RET 
                                    124 
                                    125 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    126 ;   U> ( u1 u2 -- f )
                                    127 ;   f = true if u1>u2 
                                    128 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002AE1                        129     _HEADER UGREAT,2,"U>"
      002AE1 2A CE                    1         .word LINK 
                           002AE3     2         LINK=.
      002AE3 02                       3         .byte 2  
      002AE4 55 3E                    4         .ascii "U>"
      002AE6                          5         UGREAT:
      002AE6 A6 00            [ 1]  130     LD A,#0
      002AE8 90 93            [ 1]  131     LDW Y,X 
      002AEA 90 EE 02         [ 2]  132     LDW Y,(2,Y)
      002AED 90 BF 28         [ 2]  133     LDW YTEMP,Y 
      002AF0 90 93            [ 1]  134     LDW Y,X
      002AF2 1C 00 02         [ 2]  135     ADDW X,#2 
      002AF5 90 FE            [ 2]  136     LDW Y,(Y)
      002AF7 90 B3 28         [ 2]  137     CPW Y,YTEMP 
      002AFA 2B 02            [ 1]  138     JRMI UGREAT1 
      002AFC A6 FF            [ 1]  139     LD A,#0XFF 
      002AFE                        140 UGREAT1:
      002AFE F7               [ 1]  141     LD (X),A 
      002AFF E7 01            [ 1]  142     LD (1,X),A 
      002B01 81               [ 4]  143     RET 
                                    144 
                                    145 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    146 ;    SFZ ( f# -- f# )
                                    147 ;    set FPSW zero flag 
                                    148 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B02                        149     _HEADER SFZ,3,"SFZ"
      002B02 2A E3                    1         .word LINK 
                           002B04     2         LINK=.
      002B04 03                       3         .byte 3  
      002B05 53 46 5A                 4         .ascii "SFZ"
      002B08                          5         SFZ:
      002B08 CD 07 B2         [ 4]  150     CALL DDUP 
      002B0B CD 2A 9B         [ 4]  151     CALL FER 
      002B0E                        152     _DOLIT 0xfffe 
      002B0E CD 04 73         [ 4]    1     CALL DOLIT 
      002B11 FF FE                    2     .word 0xfffe 
      002B13 CD 05 F7         [ 4]  153     CALL ANDD 
      002B16 CD 05 61         [ 4]  154     CALL TOR    
      002B19                        155     _DOLIT 0x807F 
      002B19 CD 04 73         [ 4]    1     CALL DOLIT 
      002B1C 80 7F                    2     .word 0x807F 
      002B1E CD 05 F7         [ 4]  156     CALL ANDD 
      002B21 CD 24 D1         [ 4]  157     CALL DZEQUAL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



      002B24                        158     _DOLIT 1 
      002B24 CD 04 73         [ 4]    1     CALL DOLIT 
      002B27 00 01                    2     .word 1 
      002B29 CD 05 F7         [ 4]  159     CALL ANDD 
      002B2C CD 05 42         [ 4]  160     CALL RFROM 
      002B2F CD 06 0B         [ 4]  161     CALL ORR 
      002B32 CD 2A 4E         [ 4]  162     CALL FPSW 
      002B35 CD 04 DA         [ 4]  163     CALL STORE 
      002B38 81               [ 4]  164     RET 
                                    165 
                                    166 
                                    167 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    168 ;   SFN ( f# -- f# )
                                    169 ;   set FPSW negative flag 
                                    170 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B39                        171     _HEADER SFN,3,"SFN"
      002B39 2B 04                    1         .word LINK 
                           002B3B     2         LINK=.
      002B3B 03                       3         .byte 3  
      002B3C 53 46 4E                 4         .ascii "SFN"
      002B3F                          5         SFN:
      002B3F CD 05 98         [ 4]  172     CALL DUPP  
      002B42 CD 2A 9B         [ 4]  173     CALL FER 
      002B45                        174     _DOLIT 0xFFFD 
      002B45 CD 04 73         [ 4]    1     CALL DOLIT 
      002B48 FF FD                    2     .word 0xFFFD 
      002B4A CD 05 F7         [ 4]  175     CALL ANDD  
      002B4D CD 05 61         [ 4]  176     CALL TOR 
      002B50                        177     _DOLIT 0x8000
      002B50 CD 04 73         [ 4]    1     CALL DOLIT 
      002B53 80 00                    2     .word 0x8000 
      002B55 CD 05 F7         [ 4]  178     CALL ANDD
      002B58 90 93            [ 1]  179     LDW Y,X 
      002B5A 90 FE            [ 2]  180     LDW Y,(Y)
      002B5C 98               [ 1]  181     RCF 
      002B5D 90 59            [ 2]  182     RLCW Y 
      002B5F 90 59            [ 2]  183     RLCW Y 
      002B61 90 59            [ 2]  184     RLCW Y 
      002B63 FF               [ 2]  185     LDW (X),Y 
      002B64 CD 05 42         [ 4]  186     CALL RFROM 
      002B67 CD 06 0B         [ 4]  187     CALL ORR 
      002B6A CD 2A 4E         [ 4]  188     CALL FPSW
      002B6D CD 04 DA         [ 4]  189     CALL STORE 
      002B70 81               [ 4]  190     RET 
                                    191 
                                    192 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    193 ;   SFV ( -- )
                                    194 ;   set overflow flag 
                                    195 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B71                        196     _HEADER SFV,3,"SFV"
      002B71 2B 3B                    1         .word LINK 
                           002B73     2         LINK=.
      002B73 03                       3         .byte 3  
      002B74 53 46 56                 4         .ascii "SFV"
      002B77                          5         SFV:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



      002B77 CD 2A 4E         [ 4]  197     CALL FPSW 
      002B7A CD 04 F1         [ 4]  198     CALL AT 
      002B7D                        199     _DOLIT 4 
      002B7D CD 04 73         [ 4]    1     CALL DOLIT 
      002B80 00 04                    2     .word 4 
      002B82 CD 06 0B         [ 4]  200     CALL ORR 
      002B85 CD 2A 4E         [ 4]  201     CALL FPSW 
      002B88 CD 04 DA         [ 4]  202     CALL STORE 
      002B8B 81               [ 4]  203     RET 
                                    204 
                                    205 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    206 ;  @EXPONENT ( f# -- m e )
                                    207 ;  split float in mantissa/exponent 
                                    208 ;  m mantissa as a double 
                                    209 ;  e exponent as a single 
                                    210 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B8C                        211     _HEADER ATEXP,9,"@EXPONENT"             
      002B8C 2B 73                    1         .word LINK 
                           002B8E     2         LINK=.
      002B8E 09                       3         .byte 9  
      002B8F 40 45 58 50 4F 4E 45     4         .ascii "@EXPONENT"
             4E 54
      002B98                          5         ATEXP:
      002B98 CD 2A 71         [ 4]  212     CALL FRESET
      002B9B CD 2B 3F         [ 4]  213     CALL SFN
      002B9E CD 2B 08         [ 4]  214     CALL SFZ 
      002BA1 CD 05 98         [ 4]  215     CALL DUPP
      002BA4                        216     _DOLIT 0X7F80 
      002BA4 CD 04 73         [ 4]    1     CALL DOLIT 
      002BA7 7F 80                    2     .word 0X7F80 
      002BA9 CD 05 F7         [ 4]  217     CALL ANDD 
      002BAC                        218     _DOLIT 7 
      002BAC CD 04 73         [ 4]    1     CALL DOLIT 
      002BAF 00 07                    2     .word 7 
      002BB1 CD 0A FF         [ 4]  219     CALL RSHIFT
      002BB4                        220     _DOLIT 127 
      002BB4 CD 04 73         [ 4]    1     CALL DOLIT 
      002BB7 00 7F                    2     .word 127 
      002BB9 CD 08 40         [ 4]  221     CALL SUBB
      002BBC CD 05 61         [ 4]  222     CALL TOR 
      002BBF                        223     _DOLIT 0x7F
      002BBF CD 04 73         [ 4]    1     CALL DOLIT 
      002BC2 00 7F                    2     .word 0x7F 
      002BC4 CD 05 F7         [ 4]  224     CALL ANDD  ; mantissa as double  
      002BC7 CD 2A BD         [ 4]  225     CALL FNE 
      002BCA                        226     _QBRAN POSMANT 
      002BCA CD 04 A6         [ 4]    1     CALL QBRAN
      002BCD 2B D2                    2     .word POSMANT
      002BCF CD 24 EF         [ 4]  227     CALL DNEGAT 
      002BD2                        228 POSMANT:
      002BD2 CD 05 42         [ 4]  229     CALL RFROM 
      002BD5 81               [ 4]  230     RET 
                                    231 
                                    232 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    233 ;    !EXPONENT ( m e -- f# )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



                                    234 ;    built float from mantissa/exponent 
                                    235 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BD6                        236     _HEADER STEXP,9,"!EXPONENT"
      002BD6 2B 8E                    1         .word LINK 
                           002BD8     2         LINK=.
      002BD8 09                       3         .byte 9  
      002BD9 21 45 58 50 4F 4E 45     4         .ascii "!EXPONENT"
             4E 54
      002BE2                          5         STEXP:
      002BE2 CD 05 98         [ 4]  237     CALL DUPP 
      002BE5 CD 08 5A         [ 4]  238     CALL ABSS 
      002BE8                        239     _DOLIT 127 
      002BE8 CD 04 73         [ 4]    1     CALL DOLIT 
      002BEB 00 7F                    2     .word 127 
      002BED CD 2A E6         [ 4]  240     CALL UGREAT
      002BF0                        241     _QBRAN STEXP1
      002BF0 CD 04 A6         [ 4]    1     CALL QBRAN
      002BF3 2B F8                    2     .word STEXP1
      002BF5 CD 2B 77         [ 4]  242     CALL SFV  
      002BF8                        243 STEXP1:
      002BF8                        244     _DOLIT 127 
      002BF8 CD 04 73         [ 4]    1     CALL DOLIT 
      002BFB 00 7F                    2     .word 127 
      002BFD CD 07 C7         [ 4]  245     CALL PLUS 
      002C00                        246     _DOLIT 0XFF 
      002C00 CD 04 73         [ 4]    1     CALL DOLIT 
      002C03 00 FF                    2     .word 0XFF 
      002C05 CD 05 F7         [ 4]  247     CALL ANDD 
      002C08                        248     _DOLIT 7 
      002C08 CD 04 73         [ 4]    1     CALL DOLIT 
      002C0B 00 07                    2     .word 7 
      002C0D CD 0A E3         [ 4]  249     CALL LSHIFT 
      002C10 CD 05 61         [ 4]  250     CALL TOR   ; R: e 
      002C13 CD 05 98         [ 4]  251     CALL DUPP 
      002C16                        252     _DOLIT 0X8000 
      002C16 CD 04 73         [ 4]    1     CALL DOLIT 
      002C19 80 00                    2     .word 0X8000 
      002C1B CD 05 F7         [ 4]  253     CALL ANDD 
      002C1E                        254     _QBRAN STEXP2 
      002C1E CD 04 A6         [ 4]    1     CALL QBRAN
      002C21 2C 34                    2     .word STEXP2
      002C23                        255     _DOLIT 0X8000 
      002C23 CD 04 73         [ 4]    1     CALL DOLIT 
      002C26 80 00                    2     .word 0X8000 
      002C28 CD 05 42         [ 4]  256     CALL RFROM 
      002C2B CD 06 0B         [ 4]  257     CALL ORR
      002C2E CD 05 61         [ 4]  258     CALL TOR
      002C31 CD 24 EF         [ 4]  259     CALL DNEGAT  
      002C34                        260 STEXP2:
      002C34 CD 05 98         [ 4]  261     CALL DUPP 
      002C37                        262     _DOLIT 0X7F
      002C37 CD 04 73         [ 4]    1     CALL DOLIT 
      002C3A 00 7F                    2     .word 0X7F 
      002C3C CD 2A E6         [ 4]  263     CALL UGREAT 
      002C3F                        264     _QBRAN STEXP3 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



      002C3F CD 04 A6         [ 4]    1     CALL QBRAN
      002C42 2C 47                    2     .word STEXP3
      002C44 CD 2B 77         [ 4]  265     CALL SFV 
      002C47                        266 STEXP3:
      002C47                        267     _DOLIT 0X7F 
      002C47 CD 04 73         [ 4]    1     CALL DOLIT 
      002C4A 00 7F                    2     .word 0X7F 
      002C4C CD 05 F7         [ 4]  268     CALL ANDD 
      002C4F CD 05 42         [ 4]  269     CALL RFROM 
      002C52 CD 06 0B         [ 4]  270     CALL ORR 
      002C55 CD 2B 08         [ 4]  271     CALL SFZ 
      002C58 CD 2B 3F         [ 4]  272     CALL SFN 
      002C5B 81               [ 4]  273     RET 
                                    274 
                                    275 
                                    276 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    277 ;   E. ( f# -- )
                                    278 ;   print float in scientific 
                                    279 ;   format 
                                    280 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C5C                        281     _HEADER EDOT,2,"E."
      002C5C 2B D8                    1         .word LINK 
                           002C5E     2         LINK=.
      002C5E 02                       3         .byte 2  
      002C5F 45 2E                    4         .ascii "E."
      002C61                          5         EDOT:
      002C61 CD 06 68         [ 4]  282     CALL BASE 
      002C64 CD 04 F1         [ 4]  283     CALL AT 
      002C67 CD 05 61         [ 4]  284     CALL TOR 
      002C6A CD 2A 5F         [ 4]  285     CALL FBASE 
      002C6D CD 04 F1         [ 4]  286     CALL AT
      002C70 CD 06 68         [ 4]  287     CALL BASE 
      002C73 CD 04 DA         [ 4]  288     CALL STORE 
      002C76 CD 2B 98         [ 4]  289     CALL ATEXP ; m e 
      002C79                        290 EDOT0:
      002C79 CD 05 61         [ 4]  291     CALL TOR   
      002C7C CD 2A BD         [ 4]  292     CALL FNE 
      002C7F                        293     _QBRAN EDOT1
      002C7F CD 04 A6         [ 4]    1     CALL QBRAN
      002C82 2C 87                    2     .word EDOT1
      002C84 CD 24 EF         [ 4]  294     CALL DNEGAT
      002C87                        295 EDOT1:
      002C87 CD 0E 78         [ 4]  296     CALL SPACE 
      002C8A CD 0D 3C         [ 4]  297     CALL BDIGS     
      002C8D                        298 EDOT2: 
      002C8D CD 25 8A         [ 4]  299     CALL DDIG
      002C90 CD 05 42         [ 4]  300     CALL RFROM 
      002C93 CD 0A C5         [ 4]  301     CALL ONEP 
      002C96 CD 05 61         [ 4]  302     CALL TOR 
      002C99 CD 05 98         [ 4]  303     CALL DUPP
      002C9C                        304     _QBRAN EDOT3 
      002C9C CD 04 A6         [ 4]    1     CALL QBRAN
      002C9F 2C A6                    2     .word EDOT3
      002CA1                        305     _BRAN EDOT2  
      002CA1 CD 04 BD         [ 4]    1     CALL BRAN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



      002CA4 2C 8D                    2     .word EDOT2 
      002CA6                        306 EDOT3:
      002CA6 CD 05 C2         [ 4]  307     CALL OVER 
      002CA9 CD 06 68         [ 4]  308     CALL BASE 
      002CAC CD 04 F1         [ 4]  309     CALL AT 
      002CAF CD 08 87         [ 4]  310     CALL ULESS 
      002CB2                        311     _QBRAN EDOT2 
      002CB2 CD 04 A6         [ 4]    1     CALL QBRAN
      002CB5 2C 8D                    2     .word EDOT2
      002CB7                        312     _DOLIT '.'
      002CB7 CD 04 73         [ 4]    1     CALL DOLIT 
      002CBA 00 2E                    2     .word '.' 
      002CBC CD 0D 4C         [ 4]  313     CALL HOLD  
      002CBF CD 25 8A         [ 4]  314     CALL DDIG
      002CC2 CD 2A BD         [ 4]  315     CALL FNE 
      002CC5                        316     _QBRAN EDOT4 
      002CC5 CD 04 A6         [ 4]    1     CALL QBRAN
      002CC8 2C D2                    2     .word EDOT4
      002CCA                        317     _DOLIT '-'
      002CCA CD 04 73         [ 4]    1     CALL DOLIT 
      002CCD 00 2D                    2     .word '-' 
      002CCF CD 0D 4C         [ 4]  318     CALL HOLD 
      002CD2                        319 EDOT4:       
      002CD2 CD 0D A1         [ 4]  320     CALL EDIGS 
      002CD5 CD 0E A2         [ 4]  321     CALL TYPES
      002CD8 CD 05 42         [ 4]  322     CALL RFROM 
      002CDB CD 07 55         [ 4]  323     CALL QDUP 
      002CDE                        324     _QBRAN EDOT5     
      002CDE CD 04 A6         [ 4]    1     CALL QBRAN
      002CE1 2C EE                    2     .word EDOT5
      002CE3                        325     _DOLIT 'E'
      002CE3 CD 04 73         [ 4]    1     CALL DOLIT 
      002CE6 00 45                    2     .word 'E' 
      002CE8 CD 04 38         [ 4]  326     CALL EMIT 
      002CEB CD 0F 79         [ 4]  327     CALL DOT
      002CEE                        328 EDOT5: 
      002CEE CD 05 42         [ 4]  329     CALL RFROM 
      002CF1 CD 06 68         [ 4]  330     CALL BASE 
      002CF4 CD 04 DA         [ 4]  331     CALL STORE  
      002CF7 81               [ 4]  332     RET 
                                    333 
                                    334 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                    335 ;   F. (f# -- )
                                    336 ;   print float in fixed
                                    337 ;   point format. 
                                    338 ;;;;;;;;;;;;;;;;;;;;;;;;;
      002CF8                        339     _HEADER FDOT,2,"F."
      002CF8 2C 5E                    1         .word LINK 
                           002CFA     2         LINK=.
      002CFA 02                       3         .byte 2  
      002CFB 46 2E                    4         .ascii "F."
      002CFD                          5         FDOT:
      002CFD CD 06 68         [ 4]  340     CALL BASE 
      002D00 CD 04 F1         [ 4]  341     CALL AT 
      002D03 CD 05 61         [ 4]  342     CALL TOR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



      002D06 CD 2A 5F         [ 4]  343     CALL FBASE 
      002D09 CD 04 F1         [ 4]  344     CALL AT
      002D0C CD 06 68         [ 4]  345     CALL BASE 
      002D0F CD 04 DA         [ 4]  346     CALL STORE 
      002D12 CD 2B 98         [ 4]  347     CALL    ATEXP
      002D15 CD 05 98         [ 4]  348     CALL    DUPP  
      002D18 CD 08 5A         [ 4]  349     CALL    ABSS 
      002D1B                        350     _DOLIT  8
      002D1B CD 04 73         [ 4]    1     CALL DOLIT 
      002D1E 00 08                    2     .word 8 
      002D20 CD 08 C3         [ 4]  351     CALL    GREAT 
      002D23                        352     _QBRAN  FDOT1 
      002D23 CD 04 A6         [ 4]    1     CALL QBRAN
      002D26 2D 2B                    2     .word FDOT1
      002D28 CC 2C 79         [ 2]  353     JP      EDOT0 
      002D2B                        354 FDOT1:
      002D2B CD 0E 78         [ 4]  355     CALL    SPACE 
      002D2E CD 05 61         [ 4]  356     CALL    TOR 
      002D31 CD 2A BD         [ 4]  357     CALL    FNE 
      002D34                        358     _QBRAN  FDOT0 
      002D34 CD 04 A6         [ 4]    1     CALL QBRAN
      002D37 2D 3C                    2     .word FDOT0
      002D39 CD 24 EF         [ 4]  359     CALL    DNEGAT 
      002D3C                        360 FDOT0: 
      002D3C CD 0D 3C         [ 4]  361     CALL    BDIGS
      002D3F CD 05 55         [ 4]  362     CALL    RAT  
      002D42 CD 05 D1         [ 4]  363     CALL    ZLESS 
      002D45                        364     _QBRAN  FDOT6 
      002D45 CD 04 A6         [ 4]    1     CALL QBRAN
      002D48 2D 73                    2     .word FDOT6
      002D4A                        365 FDOT2: ; e<0 
      002D4A CD 25 8A         [ 4]  366     CALL    DDIG 
      002D4D CD 05 42         [ 4]  367     CALL    RFROM
      002D50 CD 0A C5         [ 4]  368     CALL    ONEP 
      002D53 CD 07 55         [ 4]  369     CALL    QDUP 
      002D56                        370     _QBRAN  FDOT3 
      002D56 CD 04 A6         [ 4]    1     CALL QBRAN
      002D59 2D 63                    2     .word FDOT3
      002D5B CD 05 61         [ 4]  371     CALL    TOR 
      002D5E                        372     _BRAN   FDOT2 
      002D5E CD 04 BD         [ 4]    1     CALL BRAN 
      002D61 2D 4A                    2     .word FDOT2 
      002D63                        373 FDOT3:
      002D63                        374     _DOLIT  '.' 
      002D63 CD 04 73         [ 4]    1     CALL DOLIT 
      002D66 00 2E                    2     .word '.' 
      002D68 CD 0D 4C         [ 4]  375     CALL    HOLD 
      002D6B CD 25 A3         [ 4]  376     CALL    DDIGS
      002D6E                        377     _BRAN   FDOT9  
      002D6E CD 04 BD         [ 4]    1     CALL BRAN 
      002D71 2D 88                    2     .word FDOT9 
      002D73                        378 FDOT6: ; e>=0 
      002D73                        379     _BRAN   FDOT8
      002D73 CD 04 BD         [ 4]    1     CALL BRAN 
      002D76 2D 80                    2     .word FDOT8 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



      002D78                        380 FDOT7:     
      002D78                        381     _DOLIT  '0'
      002D78 CD 04 73         [ 4]    1     CALL DOLIT 
      002D7B 00 30                    2     .word '0' 
      002D7D CD 0D 4C         [ 4]  382     CALL    HOLD 
      002D80                        383 FDOT8:
      002D80 CD 04 87         [ 4]  384     CALL    DONXT 
      002D83 2D 78                  385     .word   FDOT7
      002D85 CD 25 A3         [ 4]  386     CALL    DDIGS 
      002D88                        387 FDOT9:
      002D88 CD 2A BD         [ 4]  388     CALL    FNE 
      002D8B                        389     _QBRAN  FDOT10 
      002D8B CD 04 A6         [ 4]    1     CALL QBRAN
      002D8E 2D 98                    2     .word FDOT10
      002D90                        390     _DOLIT '-' 
      002D90 CD 04 73         [ 4]    1     CALL DOLIT 
      002D93 00 2D                    2     .word '-' 
      002D95 CD 0D 4C         [ 4]  391     CALL   HOLD 
      002D98                        392 FDOT10:
      002D98 CD 0D A1         [ 4]  393     CALL    EDIGS 
      002D9B CD 0E A2         [ 4]  394     CALL    TYPES 
      002D9E CD 05 42         [ 4]  395     CALL    RFROM 
      002DA1 CD 06 68         [ 4]  396     CALL    BASE 
      002DA4 CD 04 DA         [ 4]  397     CALL    STORE 
      002DA7 81               [ 4]  398     RET 
                                    399 
                                    400 
                                    401     
                                    402 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    403 ;   FLOAT? <string> ( a -- f T | a F )
                                    404 ;   convert <string> to float 
                                    405 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002DA8                        406     _HEADER FLOATQ,5,"FLOAT?"
      002DA8 2C FA                    1         .word LINK 
                           002DAA     2         LINK=.
      002DAA 05                       3         .byte 5  
      002DAB 46 4C 4F 41 54 3F        4         .ascii "FLOAT?"
      002DB1                          5         FLOATQ:
                                    407 
      002DB1 81               [ 4]  408     RET 
                                    409 
                                    410 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    411 ;  LSCALE ( f# -- f# )
                                    412 ;  m *=fbase , e -= 1
                                    413 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002DB2                        414     _HEADER LSCALE,6,"LSCALE"
      002DB2 2D AA                    1         .word LINK 
                           002DB4     2         LINK=.
      002DB4 06                       3         .byte 6  
      002DB5 4C 53 43 41 4C 45        4         .ascii "LSCALE"
      002DBB                          5         LSCALE:
      002DBB CD 2B 98         [ 4]  415     CALL ATEXP 
      002DBE                        416     _DOLIT 1 
      002DBE CD 04 73         [ 4]    1     CALL DOLIT 
      002DC1 00 01                    2     .word 1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



      002DC3 CD 08 40         [ 4]  417     CALL SUBB 
      002DC6 CD 05 61         [ 4]  418     CALL TOR
      002DC9 CD 2A 5F         [ 4]  419     CALL FBASE 
      002DCC CD 04 F1         [ 4]  420     CALL AT 
      002DCF CD 25 F1         [ 4]  421     CALL DSSTAR
      002DD2 CD 05 42         [ 4]  422     CALL RFROM 
      002DD5 CD 2B E2         [ 4]  423     CALL STEXP 
      002DD8 81               [ 4]  424     RET  
                                    425 
                                    426 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    427 ;  RSCALE ( f# -- f# )
                                    428 ;  m /=fbase , e+=1 
                                    429 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002DD9                        430     _HEADER RSCALE,6,"RSCALE"
      002DD9 2D B4                    1         .word LINK 
                           002DDB     2         LINK=.
      002DDB 06                       3         .byte 6  
      002DDC 52 53 43 41 4C 45        4         .ascii "RSCALE"
      002DE2                          5         RSCALE:
      002DE2 CD 2B 98         [ 4]  431     CALL ATEXP 
      002DE5                        432     _DOLIT 1 
      002DE5 CD 04 73         [ 4]    1     CALL DOLIT 
      002DE8 00 01                    2     .word 1 
      002DEA CD 07 C7         [ 4]  433     CALL PLUS 
      002DED CD 05 61         [ 4]  434     CALL TOR 
      002DF0 CD 2A 5F         [ 4]  435     CALL FBASE 
      002DF3 CD 04 F1         [ 4]  436     CALL AT 
      002DF6 CD 25 49         [ 4]  437     CALL DSLMOD 
      002DF9 CD 07 66         [ 4]  438     CALL ROT 
      002DFC CD 05 8E         [ 4]  439     CALL DROP 
      002DFF CD 05 42         [ 4]  440     CALL RFROM 
      002E02 CD 2B E2         [ 4]  441     CALL STEXP 
      002E05 81               [ 4]  442     RET 
                                    443 
                                    444 
                                    445 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    446 ;    F* ( f#1 f#2 -- f#3 )
                                    447 ;    float product 
                                    448 ;    f#3=f#1 * f#2 
                                    449 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002E06                        450     _HEADER FSTAR,2,"F*"
      002E06 2D DB                    1         .word LINK 
                           002E08     2         LINK=.
      002E08 02                       3         .byte 2  
      002E09 46 2A                    4         .ascii "F*"
      002E0B                          5         FSTAR:
      002E0B CD 2B 98         [ 4]  451     CALL ATEXP 
      002E0E CD 05 61         [ 4]  452     CALL TOR 
      002E11 CD 26 3A         [ 4]  453     CALL DSWAP 
      002E14 CD 2B 98         [ 4]  454     CALL ATEXP
      002E17 CD 05 42         [ 4]  455     CALL RFROM 
      002E1A CD 07 C7         [ 4]  456     CALL PLUS  
      002E1D CD 05 61         [ 4]  457     CALL TOR
      002E20 CD 29 37         [ 4]  458     CALL DSTAR
      002E23 CD 25 30         [ 4]  459     CALL DSIGN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



      002E26 CD 07 85         [ 4]  460     CALL NROT 
      002E29 CD 25 19         [ 4]  461     CALL DABS 
      002E2C                        462 FSTAR1:
      002E2C CD 05 98         [ 4]  463     CALL DUPP
      002E2F                        464     _DOLIT 0X7F   
      002E2F CD 04 73         [ 4]    1     CALL DOLIT 
      002E32 00 7F                    2     .word 0X7F 
      002E34 CD 08 C3         [ 4]  465     CALL GREAT 
      002E37                        466     _QBRAN FSTAR2 
      002E37 CD 04 A6         [ 4]    1     CALL QBRAN
      002E3A 2E 59                    2     .word FSTAR2
      002E3C CD 2A 5F         [ 4]  467     CALL FBASE 
      002E3F CD 04 F1         [ 4]  468     CALL AT 
      002E42 CD 25 49         [ 4]  469     CALL DSLMOD 
      002E45 CD 07 66         [ 4]  470     CALL ROT 
      002E48 CD 05 8E         [ 4]  471     CALL DROP
      002E4B CD 05 42         [ 4]  472     CALL RFROM 
      002E4E CD 0A C5         [ 4]  473     CALL ONEP 
      002E51 CD 05 61         [ 4]  474     CALL TOR  
      002E54                        475     _BRAN FSTAR1
      002E54 CD 04 BD         [ 4]    1     CALL BRAN 
      002E57 2E 2C                    2     .word FSTAR1 
      002E59                        476 FSTAR2:
      002E59 CD 07 66         [ 4]  477     CALL ROT 
      002E5C                        478     _QBRAN FSTAR3 
      002E5C CD 04 A6         [ 4]    1     CALL QBRAN
      002E5F 2E 64                    2     .word FSTAR3
      002E61 CD 08 04         [ 4]  479     CALL DNEGA 
      002E64                        480 FSTAR3:     
      002E64 CD 05 42         [ 4]  481     CALL RFROM 
      002E67 CD 2B E2         [ 4]  482     CALL STEXP 
      002E6A 81               [ 4]  483     RET 
                                    484 
                                    485 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    486 ;  F/ ( f#1 f#2 -- f#3 )
                                    487 ;  float division
                                    488 ;  f#3 = f#1/f#2
                                    489 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002E6B                        490     _HEADER FSLASH,2,"F/"
      002E6B 2E 08                    1         .word LINK 
                           002E6D     2         LINK=.
      002E6D 02                       3         .byte 2  
      002E6E 46 2F                    4         .ascii "F/"
      002E70                          5         FSLASH:
      002E70 CD 2B 98         [ 4]  491     CALL ATEXP  ; f#1 dm2 e2  
      002E73 CD 05 61         [ 4]  492     CALL TOR    ; f#1 dm2   R: e2 
      002E76 CD 25 30         [ 4]  493     CALL DSIGN  ; f#1 dm2 s2 
      002E79 CD 05 61         [ 4]  494     CALL TOR    ; f#1 dm2  R: e2 s2 
      002E7C CD 25 19         [ 4]  495     CALL DABS   ; f#1 +dm2 
      002E7F CD 26 3A         [ 4]  496     CALL DSWAP  ; +dm2 f#1 
      002E82 CD 2B 98         [ 4]  497     CALL ATEXP  ; +dm2 dm1 e1 
      002E85 CD 05 42         [ 4]  498     CALL RFROM  ; +dm2 dm1 e1 s2 
      002E88 CD 05 A8         [ 4]  499     CALL SWAPP  ; +dm2 dm1 s1 e1 
      002E8B CD 05 61         [ 4]  500     CALL TOR    ; +dm2 dm1 s2 R: e2 e1  
      002E8E CD 07 85         [ 4]  501     CALL NROT   ; +dm2 s2 dm1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



      002E91 CD 25 30         [ 4]  502     CALL DSIGN  ; +dm2 s2 dm1 s1 
      002E94 CD 07 85         [ 4]  503     CALL NROT   ; +dm2 s2 s1 dm1 
      002E97 CD 25 19         [ 4]  504     CALL DABS   ; +dm2 s2 s1 +dm1  
      002E9A CD 05 61         [ 4]  505     CALL TOR    
      002E9D CD 05 61         [ 4]  506     CALL TOR    ; +dm2 s2 s1 R: e2 e1 +dm1  
      002EA0 CD 06 20         [ 4]  507     CALL XORR   ; +dm2 s R: e2 e1 +dm1 
      002EA3 CD 07 85         [ 4]  508     CALL NROT   ; s +dm2 
      002EA6 CD 05 42         [ 4]  509     CALL RFROM 
      002EA9 CD 05 42         [ 4]  510     CALL RFROM  ; s +dm2 +dm1 
      002EAC CD 26 3A         [ 4]  511     CALL DSWAP  ; s +dm1 +dm2 
      002EAF                        512 FSLASH1:
      002EAF CD 05 98         [ 4]  513     CALL DUPP 
      002EB2                        514     _QBRAN FSLASH4 
      002EB2 CD 04 A6         [ 4]    1     CALL QBRAN
      002EB5 2E E6                    2     .word FSLASH4
      002EB7                        515 FSLASH2: 
                                    516 ; reduce divisor
      002EB7 CD 2A 5F         [ 4]  517     CALL FBASE 
      002EBA CD 04 F1         [ 4]  518     CALL AT 
      002EBD CD 25 49         [ 4]  519     CALL DSLMOD
      002EC0 CD 07 66         [ 4]  520     CALL ROT 
      002EC3 CD 05 8E         [ 4]  521     CALL DROP ; drop remainder 
      002EC6 CD 05 61         [ 4]  522     CALL TOR 
      002EC9 CD 05 61         [ 4]  523     CALL TOR
                                    524 ; redure divident      
      002ECC CD 2A 5F         [ 4]  525     CALL FBASE 
      002ECF CD 04 F1         [ 4]  526     CALL AT 
      002ED2 CD 25 49         [ 4]  527     CALL DSLMOD 
      002ED5 CD 07 66         [ 4]  528     CALL ROT    
      002ED8 CD 05 8E         [ 4]  529     CALL DROP    ; drop remainder 
      002EDB CD 05 42         [ 4]  530     CALL RFROM 
      002EDE CD 05 42         [ 4]  531     CALL RFROM   ; s +dm1 +dm2 
      002EE1                        532     _BRAN FSLASH1 
      002EE1 CD 04 BD         [ 4]    1     CALL BRAN 
      002EE4 2E AF                    2     .word FSLASH1 
      002EE6                        533 FSLASH4:
      002EE6 CD 05 8E         [ 4]  534     CALL DROP   ; drop divisor hi, is 0 
      002EE9 CD 25 49         [ 4]  535     CALL DSLMOD 
      002EEC CD 19 6C         [ 4]  536 CALL DOTS 
                                    537 ; scale up dquot to include remainder 
      002EEF                        538     _DOLIT 2 
      002EEF CD 04 73         [ 4]    1     CALL DOLIT 
      002EF2 00 02                    2     .word 2 
      002EF4 CD 0B 8A         [ 4]  539     CALL PICK 
      002EF7 CD 07 85         [ 4]  540     CALL NROT  ; s r r dquot 
      002EFA                        541 FSL1:
      002EFA                        542     _DOLIT 2
      002EFA CD 04 73         [ 4]    1     CALL DOLIT 
      002EFD 00 02                    2     .word 2 
      002EFF CD 0B 8A         [ 4]  543     CALL PICK 
      002F02                        544     _QBRAN FSL4 
      002F02 CD 04 A6         [ 4]    1     CALL QBRAN
      002F05 2F 2D                    2     .word FSL4
      002F07 CD 2A 5F         [ 4]  545     CALL FBASE 
      002F0A CD 04 F1         [ 4]  546     CALL AT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



      002F0D CD 25 F1         [ 4]  547     CALL DSSTAR
      002F10 CD 05 42         [ 4]  548     CALL RFROM 
      002F13 CD 0A D2         [ 4]  549     CALL ONEM 
      002F16 CD 05 61         [ 4]  550     CALL TOR 
      002F19 CD 07 66         [ 4]  551     CALL ROT 
      002F1C CD 2A 5F         [ 4]  552     CALL FBASE 
      002F1F CD 04 F1         [ 4]  553     CALL AT 
      002F22 CD 09 EB         [ 4]  554     CALL SLASH 
      002F25 CD 07 85         [ 4]  555     CALL NROT 
      002F28                        556     _BRAN FSL1 
      002F28 CD 04 BD         [ 4]    1     CALL BRAN 
      002F2B 2E FA                    2     .word FSL1 
      002F2D                        557 FSL4:
      002F2D CD 07 66         [ 4]  558     CALL ROT
      002F30 CD 05 61         [ 4]  559     CALL TOR 
      002F33 CD 07 66         [ 4]  560     CALL ROT 
      002F36 CD 05 42         [ 4]  561     CALL RFROM 
      002F39 CD 29 9F         [ 4]  562     CALL DPLUS  
      002F3C CD 07 66         [ 4]  563     CALL ROT    ; dquot s 
      002F3F                        564     _QBRAN FSLASH5 
      002F3F CD 04 A6         [ 4]    1     CALL QBRAN
      002F42 2F 47                    2     .word FSLASH5
      002F44 CD 08 04         [ 4]  565     CALL DNEGA  ; negate quotient 
      002F47                        566 FSLASH5:
      002F47 CD 05 42         [ 4]  567     CALL RFROM 
      002F4A CD 05 42         [ 4]  568     CALL RFROM 
      002F4D CD 07 C7         [ 4]  569     CALL PLUS   
      002F50 CD 2B E2         [ 4]  570     CALL STEXP 
      002F53 81               [ 4]  571     RET     
                                    572 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



                                   4779 .endif 
                                   4780 
                                   4781 ;===============================================================
                                   4782 
                           002E6D  4783 LASTN =	LINK   ;last name defined
                                   4784 
                                   4785 ; application code begin here
      002F80                       4786 	.bndry 128 ; align on flash block  
      002F80                       4787 app_space: 
                                   4788 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        000863 R   |   6 ABOR1      001344 R
  6 ABOR2      00135B R   |   6 ABORQ      00133C R   |   6 ABORT      00132D R
  6 ABRTQ      001618 R   |   6 ABSS       00085A R   |   6 ACCEP      0012C3 R
  6 ACCP1      0012CC R   |   6 ACCP2      0012F2 R   |   6 ACCP3      0012F5 R
  6 ACCP4      0012F7 R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |   6 ADRADJ     000745 R
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  6 AFT        001603 R   |   6 AGAIN      001559 R   |   6 AHEAD      0015B6 R
  6 ALLOT      00146C R   |   6 ANDD       0005F7 R   |     APP_CP  =  004004 
    APP_LAST=  004000     |     APP_RUN =  004002     |     APP_VP  =  004006 
  6 AT         0004F1 R   |   6 ATEXE      000C55 R   |   6 ATEXP      002B98 R
  6 AUTORUN    00012B R   |     AWU_APR =  0050F1     |     AWU_CSR =  0050F0 
    AWU_TBR =  0050F2     |     B0_MASK =  000001     |     B115200 =  000006 
  6 B115K2     0003E2 R   |     B19200  =  000003     |   6 B19K2      0003BF R
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
  6 B2K4       000390 R   |     B2_MASK =  000004     |     B38400  =  000004 
    B3_MASK =  000008     |     B460800 =  000008     |     B4800   =  000001 
  6 B4K8       00039E R   |     B4_MASK =  000010     |     B57600  =  000005 
  6 B57K6      0003D0 R   |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
  6 B9K6       0003AE R   |   6 BACK1      00126B R   |   6 BASE       000668 R
    BASEE   =  00000A     |   6 BAUD       0003F2 R   |     BCNT    =  000001 
  6 BCOMP      0014AE R   |   6 BDIGS      000D3C R   |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
  6 BEGIN      00153B R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
  6 BKSLA      0010C0 R   |   6 BKSP       00123B R   |     BKSPP   =  000008 
  6 BLANK      000B24 R   |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |   6 BRAN       0004BD R   |     BTW     =  000001 
  6 BUF2ROW    002070 R   |   6 BYE        0000B8 R   |     CADR    =  000003 
    CALLL   =  0000CD     |   6 CALLOT     0022B9 R   |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CARRY   =  00002C 
    CASE_SEN=  000000     |   6 CAT        00050F R   |   6 CCOMMA     001490 R
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CELLL   =  000002     |   6 CELLM      000AA9 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]

Symbol Table

  6 CELLP      000A9A R   |   6 CELLS      000AB8 R   |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   6 CHAR1      000E92 R
  6 CHAR2      000E95 R   |   6 CHKIVEC    001F5E R   |     CLKOPT  =  004807 
    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |   6 CMOV1      000C74 R
  6 CMOV2      000C8C R   |   6 CMOVE      000C6C R   |     CNTDWN  =  000034 
  6 CNTXT      0006EB R   |   6 COLD       001A5F R   |   6 COLD1      001A5F R
  6 COLON      0017B1 R   |   6 COMMA      001479 R   |   6 COMPI      0014BE R
    COMPO   =  000040     |   6 CONSTANT   00185B R   |   6 COUNT      000C08 R
  6 CPP        000707 R   |     CPU_A   =  007F00     |     CPU_CCR =  007F0A 
    CPU_PCE =  007F01     |     CPU_PCH =  007F02     |     CPU_PCL =  007F03 
    CPU_SPH =  007F08     |     CPU_SPL =  007F09     |     CPU_XH  =  007F04 
    CPU_XL  =  007F05     |     CPU_YH  =  007F06     |     CPU_YL  =  007F07 
  6 CR         000EC0 R   |   6 CREAT      0017F7 R   |     CRR     =  00000D 
  6 CSTOR      0004FE R   |   6 CTABLE     0022DA R   |   6 CTAT       0022FB R
  6 CTINIT     002323 R   |   6 D2SLASH    002881 R   |   6 DABS       002519 R
  6 DABS1      002527 R   |   6 DAT        000BE8 R   |     DATSTK  =  001680 
  6 DCLZ       002668 R   |   6 DCLZ1      002671 R   |   6 DCLZ4      002677 R
  6 DCLZ8      002684 R   |   6 DCMP       002787 R   |   6 DCMP2      002793 R
  6 DCMP4      0027AE R   |   6 DCMP_EQU   0027A0 R   |   6 DCMP_GRE   0027AA R
  6 DCMP_SMA   0027A4 R   |   6 DCONST     001890 R   |   6 DDIG       00258A R
  6 DDIGS      0025A3 R   |   6 DDOT       0025BA R   |   6 DDOT0      0025CE R
  6 DDOT1      0025E4 R   |   6 DDROP      0007A7 R   |   6 DDSLMOD    0028D2 R
  6 DDSLMOD1   0028EF R   |   6 DDSTAR1    002956 R   |   6 DDSTAR2    002976 R
  6 DDSTAR3    002999 R   |   6 DDUP       0007B2 R   |     DEBUG_BA=  007F00 
    DEBUG_EN=  007FFF     |   6 DECIM      000DEC R   |   6 DEPTH      000B73 R
  6 DEQU4      002720 R   |   6 DEQUAL     00270B R   |     DEVID_BA=  0048CD 
    DEVID_EN=  0048D8     |     DEVID_LO=  0048D2     |     DEVID_LO=  0048D3 
    DEVID_LO=  0048D4     |     DEVID_LO=  0048D5     |     DEVID_LO=  0048D6 
    DEVID_LO=  0048D7     |     DEVID_LO=  0048D8     |     DEVID_WA=  0048D1 
    DEVID_XH=  0048CE     |     DEVID_XL=  0048CD     |     DEVID_YH=  0048D0 
    DEVID_YL=  0048CF     |   6 DGREAT     00272C R   |   6 DGREAT4    002741 R
  6 DGTQ1      000E31 R   |   6 DI         0000C6 R   |   6 DIG        000D65 R
  6 DIGIT      000D00 R   |   6 DIGS       000D76 R   |   6 DIGS1      000D76 R
  6 DIGS2      000D83 R   |   6 DIGTQ      000E00 R   |     DISCOVER=  000000 
  6 DLESS      00274D R   |   6 DLESS4     002762 R   |   6 DLITER     002841 R
  6 DLSHIFT    00289C R   |   6 DLSHIFT1   0028AD R   |   6 DLSHIFT2   0028C2 R
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   6 DN1        000821 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]

Symbol Table

  6 DNEG1      00250E R   |   6 DNEGA      000804 R   |   6 DNEGAT     0024EF R
  6 DOCONST    00187B R   |   6 DOLIT      000473 R   |   6 DONXT      000487 R
    DOORBELL=  000000     |   6 DOSTR      000ED6 R   |   6 DOT        000F79 R
  6 DOT1       000F8F R   |   6 DOTI1      0019E0 R   |   6 DOTID      0019CA R
  6 DOTO1      0013D0 R   |   6 DOTOK      0013B6 R   |   6 DOTPR      0010A2 R
  6 DOTQ       001632 R   |   6 DOTQP      000EFF R   |   6 DOTR       000F0D R
  6 DOTS       00196C R   |   6 DOTS1      001977 R   |   6 DOTS2      001980 R
  6 DOVAR      000658 R   |   6 DOVER      002868 R   |   6 DO_DCONS   0018B3 R
  6 DPLUS      00299F R   |   6 DPLUS1     0029C6 R   |   6 DRFROM     0027D7 R
  6 DROP       00058E R   |   6 DROT       0026D1 R   |   6 DSIGN      002530 R
  6 DSIGN1     00253A R   |   6 DSLMOD     002549 R   |   6 DSLMOD3    002564 R
  6 DSLMOD4    002570 R   |   6 DSLMODa    00256B R   |   6 DSLMODb    002576 R
  6 DSSTAR     0025F1 R   |   6 DSSTAR1    002608 R   |   6 DSSTAR3    002631 R
  6 DSTAR      002937 R   |   6 DSTOR      000BC2 R   |   6 DSUB       0029D1 R
  6 DSUB1      0029F8 R   |   6 DSWAP      00263A R   |   6 DTOR       0027B9 R
  6 DUMP       001922 R   |   6 DUMP1      001939 R   |   6 DUMP3      00195B R
  6 DUMPP      0018F1 R   |   6 DUPP       000598 R   |   6 DVARIA     0027F5 R
  6 DZEQUAL    0024D1 R   |   6 DZLESS     00276F R   |   6 DZLESS1    002779 R
  6 EDIGS      000DA1 R   |   6 EDOT       002C61 R   |   6 EDOT0      002C79 R
  6 EDOT1      002C87 R   |   6 EDOT2      002C8D R   |   6 EDOT3      002CA6 R
  6 EDOT4      002CD2 R   |   6 EDOT5      002CEE R   |   6 EECSTORE   001D0F R
  6 EEPCP      001B35 R   |   6 EEPLAST    001B08 R   |   6 EEPROM     001AF0 R
    EEPROM_B=  004000     |     EEPROM_E=  0047FF     |     EEPROM_R=  000010 
    EEPROM_S=  000800     |   6 EEPRUN     001B1F R   |   6 EEPVP      001B4B R
  6 EESTORE    001D5B R   |   6 EE_CCOMM   002025 R   |   6 EE_COMMA   002004 R
  6 EE_CREAD   001CA0 R   |   6 EE_READ    001C7E R   |   6 EI         0000BF R
  6 ELSEE      001591 R   |   6 EMIT       000438 R   |   6 ENEPER     002245 R
    EOL_CR  =  000001     |     EOL_LF  =  000000     |   6 EQ1        00087E R
  6 EQUAL      000868 R   |   6 ERASE      000CCE R   |     ERR     =  00001B 
  6 EVAL       0013F9 R   |   6 EVAL1      0013F9 R   |   6 EVAL2      001415 R
  6 EXE1       000C63 R   |   6 EXECU      0004CD R   |     EXT     =  000000 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |   6 EXTRC      000D28 R
  6 FADDR      0020F2 R   |   6 FARAT      001BB6 R   |   6 FARCAT     001BC2 R
  6 FBASE      002A5F R   |   6 FC_XOFF    000465 R   |   6 FC_XON     00044F R
  6 FDOT       002CFD R   |   6 FDOT0      002D3C R   |   6 FDOT1      002D2B R
  6 FDOT10     002D98 R   |   6 FDOT2      002D4A R   |   6 FDOT3      002D63 R
  6 FDOT6      002D73 R   |   6 FDOT7      002D78 R   |   6 FDOT8      002D80 R
  6 FDOT9      002D88 R   |   6 FER        002A9B R   |     FHSE    =  7A1200 
    FHSI    =  F42400     |   6 FILL       000C9B R   |   6 FILL1      000CB8 R
  6 FILL2      000CC1 R   |   6 FIND       001197 R   |   6 FIND1      0011B5 R
  6 FIND2      0011E3 R   |   6 FIND3      0011EF R   |   6 FIND4      001203 R
  6 FIND5      001210 R   |   6 FIND6      0011F4 R   |   6 FINIT      002A85 R
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]

Symbol Table

    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
  6 FLOATQ     002DB1 R   |     FLSI    =  01F400     |   6 FMOVE      0020FD R
  6 FMOVE2     00212E R   |   6 FNE        002ABD R   |   6 FOR        00150E R
  6 FORGET     00015C R   |   6 FORGET1    00018B R   |   6 FORGET2    000211 R
  6 FORGET4    00021A R   |   6 FORGET6    0001D3 R   |   6 FOV        002AD2 R
  6 FPSTOR     001AD1 R   |   6 FPSW       002A4E R   |     FPTR    =  000036 
  6 FREEVAR    000227 R   |   6 FREEVAR4   00025D R   |   6 FRESET     002A71 R
  6 FSL1       002EFA R   |   6 FSL4       002F2D R   |   6 FSLASH     002E70 R
  6 FSLASH1    002EAF R   |   6 FSLASH2    002EB7 R   |   6 FSLASH4    002EE6 R
  6 FSLASH5    002F47 R   |   6 FSTAR      002E0B R   |   6 FSTAR1     002E2C R
  6 FSTAR2     002E59 R   |   6 FSTAR3     002E64 R   |   6 FZE        002AA8 R
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_ODR=  000000 
    GPIO_SIZ=  000005     |   6 GREAT      0008C3 R   |   6 GREAT1     0008D9 R
  6 HDOT       000F5C R   |   6 HERE       000C1F R   |   6 HEX        000DD7 R
  6 HI         001A1C R   |   6 HLD        0006D8 R   |   6 HOLD       000D4C R
    HSECNT  =  004809     |     I2C_CCRH=  00521C     |     I2C_CCRH=  000080 
    I2C_CCRH=  0000C0     |     I2C_CCRH=  000080     |     I2C_CCRH=  000000 
    I2C_CCRH=  000001     |     I2C_CCRH=  000000     |     I2C_CCRL=  00521B 
    I2C_CCRL=  00001A     |     I2C_CCRL=  000002     |     I2C_CCRL=  00000D 
    I2C_CCRL=  000050     |     I2C_CCRL=  000090     |     I2C_CCRL=  0000A0 
    I2C_CR1 =  005210     |     I2C_CR1_=  000006     |     I2C_CR1_=  000007 
    I2C_CR1_=  000000     |     I2C_CR2 =  005211     |     I2C_CR2_=  000002 
    I2C_CR2_=  000003     |     I2C_CR2_=  000000     |     I2C_CR2_=  000001 
    I2C_CR2_=  000007     |     I2C_DR  =  005216     |     I2C_FREQ=  005212 
    I2C_ITR =  00521A     |     I2C_ITR_=  000002     |     I2C_ITR_=  000000 
    I2C_ITR_=  000001     |     I2C_OARH=  005214     |     I2C_OARH=  000001 
    I2C_OARH=  000002     |     I2C_OARH=  000006     |     I2C_OARH=  000007 
    I2C_OARL=  005213     |     I2C_OARL=  000000     |     I2C_OAR_=  000813 
    I2C_OAR_=  000009     |     I2C_PECR=  00521E     |     I2C_READ=  000001 
    I2C_SR1 =  005217     |     I2C_SR1_=  000003     |     I2C_SR1_=  000001 
    I2C_SR1_=  000002     |     I2C_SR1_=  000006     |     I2C_SR1_=  000000 
    I2C_SR1_=  000004     |     I2C_SR1_=  000007     |     I2C_SR2 =  005218 
    I2C_SR2_=  000002     |     I2C_SR2_=  000001     |     I2C_SR2_=  000000 
    I2C_SR2_=  000003     |     I2C_SR2_=  000005     |     I2C_SR3 =  005219 
    I2C_SR3_=  000001     |     I2C_SR3_=  000007     |     I2C_SR3_=  000004 
    I2C_SR3_=  000000     |     I2C_SR3_=  000002     |     I2C_TRIS=  00521D 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_WRIT=  000000     |   6 ICOLON     0017C2 R   |   6 IFETCH     00152C R
  6 IFF        001569 R   |   6 IFMOVE     0021D6 R   |   6 ILOG       002A05 R
  6 ILOG1      002A10 R   |   6 ILOG2      002A3D R   |     IMEDD   =  000080 
  6 IMMED      0017D4 R   |   6 INCH       00042C R   |   6 INC_FPTR   001C4B R
  6 INITOFS    00178A R   |   6 INN        000686 R   |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_PU=  000001 
  6 INTE1      001398 R   |   6 INTER      00136E R   |   6 INTQ       00237F R
    INT_ADC2=  000016     |     INT_AUAR=  000012     |     INT_AWU =  000001 
    INT_CAN_=  000008     |     INT_CAN_=  000009     |     INT_CLK =  000002 
    INT_EXTI=  000003     |     INT_EXTI=  000004     |     INT_EXTI=  000005 
    INT_EXTI=  000006     |     INT_EXTI=  000007     |     INT_FLAS=  000018 
    INT_I2C =  000013     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000011     |     INT_UART=  000015 
    INT_UART=  000014     |     INT_VECT=  008060     |     INT_VECT=  00800C 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]

Symbol Table

    INT_VECT=  008028     |     INT_VECT=  00802C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  008050     |     INT_VECT=  00804C     |     INT_VECT=  00805C 
    INT_VECT=  008058     |   6 INVER      0007E1 R   |     IPR0    =  000002 
    IPR1    =  000001     |     IPR2    =  000000     |     IPR3    =  000003 
    IPR_MASK=  000003     |     IRET_COD=  000080     |   6 ISEMI      00171F R
    ITC_SPR1=  007F70     |     ITC_SPR2=  007F71     |     ITC_SPR3=  007F72 
    ITC_SPR4=  007F73     |     ITC_SPR5=  007F74     |     ITC_SPR6=  007F75 
    ITC_SPR7=  007F76     |     ITC_SPR8=  007F77     |     IWDG_KR =  0050E0 
    IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2     |   6 JSRC       001774 R
  6 KEY        000E40 R   |   6 KTAP       001288 R   |   6 KTAP1      0012AB R
  6 KTAP2      0012AE R   |   6 LAST       000717 R   |   6 LASTN   =  002E6D R
  6 LBRAC      0013A5 R   |     LED2_BIT=  000005     |     LED2_MAS=  000020 
    LED2_POR=  00500A     |   6 LESS       0008A5 R   |     LF      =  00000A 
  6 LINK    =  002E6D R   |   6 LITER      0014E0 R   |   6 LN2S       0022A1 R
  6 LOCK       001C37 R   |   6 LOG2S      00228B R   |   6 LSCALE     002DBB R
  6 LSHIFT     000AE3 R   |   6 LSHIFT1    000AEC R   |   6 LSHIFT4    000AF4 R
  6 LT1        0008BB R   |     MASKK   =  001F7F     |   6 MAX        0008E3 R
  6 MAX1       0008F6 R   |   6 MIN        000900 R   |   6 MIN1       000913 R
  6 MMOD1      00099C R   |   6 MMOD2      0009B0 R   |   6 MMOD3      0009C7 R
  6 MMSM1      000957 R   |   6 MMSM3      00095B R   |   6 MMSM4      000967 R
  6 MMSMa      000962 R   |   6 MMSMb      00096D R   |   6 MODD       0009E1 R
  6 MONE       000B4A R   |     MS      =  000032     |   6 MSEC       0002D2 R
  6 MSMOD      00097F R   |   6 MSTA1      000A72 R   |   6 MSTAR      000A4F R
    NAFR    =  004804     |   6 NAMEQ      001230 R   |   6 NAMET      001141 R
    NCLKOPT =  004808     |   6 NDROT      002695 R   |   6 NEGAT      0007F2 R
  6 NEX1       000494 R   |   6 NEXT       00151D R   |     NFLASH_W=  00480E 
    NHSECNT =  00480A     |     NOPT1   =  004802     |     NOPT2   =  004804 
    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPT6   =  00480C     |     NOPT7   =  00480E     |     NOPTBL  =  00487F 
  6 NROT       000785 R   |   6 NTIB       000696 R   |     NUBC    =  004802 
    NUCLEO  =  000001     |   6 NUFQ       000E56 R   |   6 NUFQ1      000E6F R
  6 NUMBQ      0023F1 R   |   6 NUMQ0      002432 R   |   6 NUMQ1      002454 R
  6 NUMQ3      002498 R   |   6 NUMQ4      0024B9 R   |   6 NUMQ8      0024C1 R
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   6 NonHandl   000000 R
  6 OFFSET     00073C R   |     OFS     =  000005     |   6 ONE        000B3C R
  6 ONEM       000AD2 R   |   6 ONEP       000AC5 R   |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTIMIZE=  000001     |     OPTION_B=  004800     |     OPTION_E=  00487F 
    OPTION_S=  000080     |   6 ORIG       00004B R   |   6 ORR        00060B R
  6 OUTPUT     00043D R   |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |   6 OVER       0005C2 R
  6 OVERT      0016ED R   |     PA      =  000000     |   6 PACKS      000CDF R
  6 PAD        000C30 R   |   6 PAREN      0010B1 R   |   6 PARS       000FAA R
  6 PARS1      000FD5 R   |   6 PARS2      001000 R   |   6 PARS3      001003 R
  6 PARS4      00100C R   |   6 PARS5      00102F R   |   6 PARS6      001044 R
  6 PARS7      001053 R   |   6 PARS8      001062 R   |   6 PARSE      001073 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]

Symbol Table

  6 PAUSE      0002E2 R   |     PA_BASE =  005000     |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_BASE =  005005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_BASE =  00500A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |   6 PDUM1      001904 R   |   6 PDUM2      001915 R
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |   6 PICK       000B8A R
  6 PII        002204 R   |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   6 PLUS       0007C7 R   |   6 PNAM1      0016A2 R
  6 POSMANT    002BD2 R   |   6 PRESE      001424 R   |     PROD1   =  000026 
    PROD2   =  000028     |     PROD3   =  00002A     |   6 PROTECTE   000203 R
  6 PSTOR      000BA1 R   |     PTR16   =  000037     |     PTR8    =  000038 
  6 PTRPLUS    001C63 R   |   6 QBRAN      0004A6 R   |   6 QDUP       000755 R
  6 QDUP1      00075F R   |   6 QKEY       00041A R   |   6 QSTAC      0013DC R
  6 QUERY      001308 R   |   6 QUEST      000F9C R   |   6 QUIT       001441 R
  6 QUIT1      001449 R   |   6 QUIT2      00144C R   |   6 RAM2EE     00209E R
    RAMBASE =  000000     |   6 RAMLAST    00072A R   |     RAM_BASE=  000000 
    RAM_END =  0017FF     |     RAM_SIZE=  001800     |   6 RANDOM     000280 R
  6 RAT        000555 R   |   6 RBRAC      001761 R   |   6 REPEA      0015E6 R
  6 RFREE      002085 R   |   6 RFROM      000542 R   |     ROP     =  004800 
  6 ROT        000766 R   |   6 ROW2BUF    002047 R   |     ROWBUFF =  001680 
    RP0     =  000030     |   6 RPAT       00051F R   |     RPP     =  0017FF 
  6 RPSTO      00052C R   |   6 RSCALE     002DE2 R   |   6 RSHIFT     000AFF R
  6 RSHIFT1    000B08 R   |   6 RSHIFT4    000B10 R   |     RST_SR  =  0050B3 
  6 RT12_2     002274 R   |   6 SAME1      00115F R   |   6 SAME2      001188 R
  6 SAMEQ      001157 R   |   6 SCOM1      0016D7 R   |   6 SCOM2      0016DA R
  6 SCOMP      0016B9 R   |   6 SEED       000267 R   |     SEEDX   =  00003A 
    SEEDY   =  00003C     |   6 SEMIS      0016FD R   |   6 SETISP     0000D2 R
  6 SET_RAML   001844 R   |   6 SFN        002B3F R   |     SFR_BASE=  005000 
    SFR_END =  0057FF     |   6 SFV        002B77 R   |   6 SFZ        002B08 R
  6 SIGN       000D8B R   |   6 SIGN1      000D9B R   |   6 SLASH      0009EB R
  6 SLMOD      0009CF R   |   6 SNAME      00166C R   |     SP0     =  00002E 
  6 SPACE      000E78 R   |   6 SPACS      000E87 R   |   6 SPAT       000578 R
    SPI_CR1 =  005200     |     SPI_CR2 =  005201     |     SPI_CRCP=  005205 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_TXCR=  005207     |     SPP     =  001680 
    SPSAVE  =  000001     |   6 SPSTO      000585 R   |   6 SQRT10     00225D R
  6 SQRT2      00221B R   |   6 SQRT3      002232 R   |   6 SSMOD      000A7B R
    SSP     =  000001     |     STACK   =  0017FF     |   6 STAR       000A44 R
  6 STASL      000A8C R   |   6 STEXP      002BE2 R   |   6 STEXP1     002BF8 R
  6 STEXP2     002C34 R   |   6 STEXP3     002C47 R   |   6 STOD       000829 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]

Symbol Table

  6 STORE      0004DA R   |   6 STR        000DB9 R   |   6 STRCQ      0014EE R
  6 STRQ       001625 R   |   6 STRQP      000EF5 R   |   6 SUBB       000840 R
  6 SWAPP      0005A8 R   |     SWIM_CSR=  007F80     |   6 TAP        001272 R
  6 TBOOT      001A53 R   |   6 TBUF       0006A6 R   |     TBUFFBAS=  001680 
  6 TCHAR      000B5B R   |   6 TEMP       000677 R   |   6 TEVAL      0006C9 R
  6 TFLASH     0006B8 R   |   6 THENN      00157E R   |   6 TIB        000C41 R
    TIBB    =  001700     |     TIBBASE =  001700     |     TIC     =  000027 
  6 TICK       001458 R   |     TIM1_ARR=  005262     |     TIM1_ARR=  005263 
    TIM1_BKR=  00526D     |     TIM1_CCE=  00525C     |     TIM1_CCE=  00525D 
    TIM1_CCM=  005258     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  005259     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525A     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525B     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCR=  005265     |     TIM1_CCR=  005266     |     TIM1_CCR=  005267 
    TIM1_CCR=  005268     |     TIM1_CCR=  005269     |     TIM1_CCR=  00526A 
    TIM1_CCR=  00526B     |     TIM1_CCR=  00526C     |     TIM1_CNT=  00525E 
    TIM1_CNT=  00525F     |     TIM1_CR1=  005250     |     TIM1_CR2=  005251 
    TIM1_CR2=  000000     |     TIM1_CR2=  000002     |     TIM1_CR2=  000004 
    TIM1_CR2=  000005     |     TIM1_CR2=  000006     |     TIM1_DTR=  00526E 
    TIM1_EGR=  005257     |     TIM1_EGR=  000007     |     TIM1_EGR=  000001 
    TIM1_EGR=  000002     |     TIM1_EGR=  000003     |     TIM1_EGR=  000004 
    TIM1_EGR=  000005     |     TIM1_EGR=  000006     |     TIM1_EGR=  000000 
    TIM1_ETR=  005253     |     TIM1_ETR=  000006     |     TIM1_ETR=  000000 
    TIM1_ETR=  000001     |     TIM1_ETR=  000002     |     TIM1_ETR=  000003 
    TIM1_ETR=  000007     |     TIM1_ETR=  000004     |     TIM1_ETR=  000005 
    TIM1_IER=  005254     |     TIM1_IER=  000007     |     TIM1_IER=  000001 
    TIM1_IER=  000002     |     TIM1_IER=  000003     |     TIM1_IER=  000004 
    TIM1_IER=  000005     |     TIM1_IER=  000006     |     TIM1_IER=  000000 
    TIM1_OIS=  00526F     |     TIM1_PSC=  005260     |     TIM1_PSC=  005261 
    TIM1_RCR=  005264     |     TIM1_SMC=  005252     |     TIM1_SMC=  000007 
    TIM1_SMC=  000000     |     TIM1_SMC=  000001     |     TIM1_SMC=  000002 
    TIM1_SMC=  000004     |     TIM1_SMC=  000005     |     TIM1_SMC=  000006 
    TIM1_SR1=  005255     |     TIM1_SR1=  000007     |     TIM1_SR1=  000001 
    TIM1_SR1=  000002     |     TIM1_SR1=  000003     |     TIM1_SR1=  000004 
    TIM1_SR1=  000005     |     TIM1_SR1=  000006     |     TIM1_SR1=  000000 
    TIM1_SR2=  005256     |     TIM1_SR2=  000001     |     TIM1_SR2=  000002 
    TIM1_SR2=  000003     |     TIM1_SR2=  000004     |     TIM2_ARR=  00530D 
    TIM2_ARR=  00530E     |     TIM2_CCE=  005308     |     TIM2_CCE=  000000 
    TIM2_CCE=  000001     |     TIM2_CCE=  000004     |     TIM2_CCE=  000005 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]

Symbol Table

    TIM2_CCE=  005309     |     TIM2_CCM=  005305     |     TIM2_CCM=  005306 
    TIM2_CCM=  005307     |     TIM2_CCM=  000000     |     TIM2_CCM=  000004 
    TIM2_CCM=  000003     |     TIM2_CCR=  00530F     |     TIM2_CCR=  005310 
    TIM2_CCR=  005311     |     TIM2_CCR=  005312     |     TIM2_CCR=  005313 
    TIM2_CCR=  005314     |     TIM2_CNT=  00530A     |     TIM2_CNT=  00530B 
    TIM2_CR1=  005300     |     TIM2_CR1=  000007     |     TIM2_CR1=  000000 
    TIM2_CR1=  000003     |     TIM2_CR1=  000001     |     TIM2_CR1=  000002 
    TIM2_EGR=  005304     |     TIM2_EGR=  000001     |     TIM2_EGR=  000002 
    TIM2_EGR=  000003     |     TIM2_EGR=  000006     |     TIM2_EGR=  000000 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |   6 TIMEOUTQ   000312 R   |   6 TIMER      0002FC R
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |   6 TNAM2      00199A R
  6 TNAM3      0019B8 R   |   6 TNAM4      0019BE R   |   6 TNAME      001997 R
  6 TOFLASH    000337 R   |   6 TOKEN      001133 R   |   6 TOR        000561 R
  6 TORAM      000377 R   |     TRUEE   =  00FFFF     |   6 TWOSL      000B17 R
  6 TYPE1      000EA7 R   |   6 TYPE2      000EB3 R   |   6 TYPES      000EA2 R
  6 Timer4Ha   000005 R   |     UART1   =  000000     |     UART1_BA=  005230 
    UART1_BR=  005232     |     UART1_BR=  005233     |     UART1_CR=  005234 
    UART1_CR=  005235     |     UART1_CR=  005236     |     UART1_CR=  005237 
    UART1_CR=  005238     |     UART1_DR=  005231     |     UART1_GT=  005239 
    UART1_PO=  000000     |     UART1_PS=  00523A     |     UART1_RX=  000004 
    UART1_SR=  005230     |     UART1_TX=  000005     |     UART3   =  000001 
    UART3_BA=  005240     |     UART3_BR=  005242     |     UART3_BR=  005243 
    UART3_CR=  005244     |     UART3_CR=  005245     |     UART3_CR=  005246 
    UART3_CR=  005247     |     UART3_CR=  004249     |     UART3_DR=  005241 
    UART3_PO=  00000F     |     UART3_RX=  000006     |     UART3_SR=  005240 
    UART3_TX=  000005     |     UART_BRR=  005232     |     UART_BRR=  005233 
    UART_CR1=  005234     |     UART_CR1=  000004     |     UART_CR1=  000002 
    UART_CR1=  000000     |     UART_CR1=  000001     |     UART_CR1=  000007 
    UART_CR1=  000006     |     UART_CR1=  000005     |     UART_CR1=  000003 
    UART_CR2=  005235     |     UART_CR2=  000004     |     UART_CR2=  000002 
    UART_CR2=  000005     |     UART_CR2=  000001     |     UART_CR2=  000000 
    UART_CR2=  000006     |     UART_CR2=  000003     |     UART_CR2=  000007 
    UART_CR3=  000006     |     UART_CR3=  000003     |     UART_CR3=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]

Symbol Table

    UART_CR3=  000002     |     UART_CR3=  000000     |     UART_CR3=  000006 
    UART_CR3=  000004     |     UART_CR3=  000005     |     UART_CR4=  000007 
    UART_CR4=  000000     |     UART_CR4=  000001     |     UART_CR4=  000002 
    UART_CR4=  000003     |     UART_CR4=  000004     |     UART_CR4=  000006 
    UART_CR4=  000005     |     UART_CR5=  000008     |     UART_CR5=  000003 
    UART_CR5=  000001     |     UART_CR5=  000002     |     UART_CR5=  000004 
    UART_CR5=  000005     |     UART_CR6=  000009     |     UART_CR6=  000004 
    UART_CR6=  000007     |     UART_CR6=  000001     |     UART_CR6=  000002 
    UART_CR6=  000000     |     UART_CR6=  000005     |     UART_DR =  005231 
    UART_GTR=  000009     |     UART_PSC=  00000A     |     UART_SR =  005230 
    UART_SR_=  000001     |     UART_SR_=  000004     |     UART_SR_=  000002 
    UART_SR_=  000003     |     UART_SR_=  000000     |     UART_SR_=  000005 
    UART_SR_=  000006     |     UART_SR_=  000007     |     UBASE   =  000006 
    UBC     =  004801     |     UCNTXT  =  000018     |     UCP     =  00001C 
    UCTIB   =  000010     |     UD1     =  000001     |     UD2     =  000002 
    UD3     =  000003     |     UD4     =  000004     |   6 UDOT       000F48 R
  6 UDOTR      000F28 R   |   6 UEND       000049 R   |     UFBASE  =  000008 
    UFPSW   =  00000A     |   6 UGREAT     002AE6 R   |   6 UGREAT1    002AFE R
    UHLD    =  000016     |     UINN    =  00000E     |     UINTER  =  000014 
    ULAST   =  00001E     |   6 ULES1      00089D R   |   6 ULESS      000887 R
  6 UMMOD      00093B R   |   6 UMSTA      0009FA R   |   6 UNIQ1      001663 R
  6 UNIQU      001644 R   |   6 UNLKEE     001BD1 R   |   6 UNLKFL     001BF0 R
  6 UNLOCK     001C0F R   |   6 UNTIL      001546 R   |     UOFFSET =  000020 
  6 UPDATCP    001B8E R   |   6 UPDATLAS   001B65 R   |   6 UPDATPTR   002191 R
  6 UPDATRUN   001B7D R   |   6 UPDATVP    001BA5 R   |   6 UPL1       00064C R
  6 UPLUS      000635 R   |     UPP     =  000006     |   6 UPPER      0010F6 R
  6 UPPER1     001119 R   |   6 UPPER2     001122 R   |     URLAST  =  000024 
    USR_BTN_=  000004     |     USR_BTN_=  000010     |     USR_BTN_=  005015 
    UTFLASH =  000022     |     UTIB    =  000012     |     UTMP    =  00000C 
  6 UTYP1      0018D4 R   |   6 UTYP2      0018E3 R   |   6 UTYPE      0018CF R
    UVP     =  00001A     |   6 UZERO      00002B R   |   6 VARIA      001811 R
    VAR_BASE=  000080     |     VAR_TOP =  0017BF     |     VER     =  000003 
  6 VPP        0006F9 R   |     VSIZE   =  000006     |     WANT_CON=  000001 
    WANT_DEB=  000000     |     WANT_DOU=  000001     |     WANT_FLO=  000001 
    WANT_SCA=  000001     |     WANT_SEE=  000000     |     WDGOPT  =  004805 
    WDGOPT_I=  000002     |     WDGOPT_L=  000003     |     WDGOPT_W=  000000 
    WDGOPT_W=  000001     |   6 WHILE      0015CC R   |   6 WITHI      000920 R
  6 WORDD      0010DC R   |   6 WORDS      0019F4 R   |   6 WORS1      0019FA R
  6 WORS2      001A16 R   |   6 WR_BYTE    001CBA R   |   6 WR_WORD    001CDF R
  6 WTABLE     0022E9 R   |   6 WTAT       00230D R   |   6 WTINIT     002352 R
    WWDG_CR =  0050D1     |     WWDG_WR =  0050D2     |     XMEM_SIZ=  017830 
    XOFF    =  000013     |     XON     =  000011     |   6 XORR       000620 R
    XTEMP   =  000026     |     YTEMP   =  000028     |   6 ZEQ1       0024E1 R
  6 ZEQU1      0005ED R   |   6 ZEQUAL     0005E3 R   |   6 ZERO       000B31 R
  6 ZL1        0005DA R   |   6 ZLESS      0005D1 R   |   6 app_spac   002F80 R
  6 baudrate   00037D R   |   6 block_er   001DA5 R   |   6 clear_ra   000019 R
  6 clock_in   000066 R   |   6 copy_buf   001E05 R   |   6 copy_buf   001E24 R
  6 copy_pro   001E24 R   |     da      =  000002     |     db      =  000003 
    dc      =  000000     |     dd      =  000001     |   6 do2lit     00284C R
  6 erase_fl   001DC7 R   |   6 fmove_do   00217A R   |   6 main       000016 R
  6 next_row   002137 R   |   6 no_move    002181 R   |   6 parse_di   00239D R
  6 pristine   001EA5 R   |   6 proceed_   001DCA R   |   6 reboot     000329 R
  6 reset_ve   001F0C R   |   6 row_eras   001D85 R   |   6 row_eras   001DDE R
  6 row_eras   001E05 R   |   6 set_opti   001E79 R   |   6 set_vect   001FAD R
  6 uart_ini   000078 R   |   6 write_ro   001E49 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   2F80   flags    0

