ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;-------------------------------------------------------------
                                     21 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                     22 ;  assemble using sdasstm8
                                     23 ;  implemented on NUCLEO-8S208RB board
                                     24 ;  Adapted by picatout 2019/10/27
                                     25 ;  https://github.com/picatout/stm8_nucleo/eForth
                                     26 ;--------------------------------------------------------------
                                     27 	.module EFORTH
                                     28          .optsdcc -mstm8
                                                .include "inc/macros.inc" 
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        
                                            ; macro to create dictionary header record
                                            .macro _HEADER label,len,name 
                                        
                                            ; runtime literal 
                                            .macro _DOLIT value 
                                        
                                            ; branch if TOS<>0
                                            ; TBRANCH 
                                            .macro _TBRAN target 
                                            
                                            ; branch if TOS==0 
                                            ; 0BRANCH 
                                            .macro _QBRAN target 
                                        
                                            ; uncondittionnal BRANCH 
                                            .macro _BRAN target 
                                        
                                            ; run time NEXT 
                                            .macro _DONXT target 
                                                .include "inc/config.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        
                                        ; constants to select board
                                        ; to assemble for a specific 
                                        ; board or MCU set it to 1 and the other
                                        ; to 0. 
                                 
                                 
                                 
                                        
                                        ; select end of line character
                                 
                                 
                                        
                                        ; set to 1 to include 
                                        ; scaling constants vocabulary
                                        ; see: const_ratio.asm 
                                 
                                        
                                        ; set to 1 to include 
                                        ; constants tables vocabulary 
                                        ; see: ctable.asm 
                                 
                                        
                                        ; include double library 
                                 
                                        
                                        ; to include floating point 
                                        ; library
                                        ; require double library  
                                 
                                        
                                        ; set to 1 to make vocabulary 
                                        ; case sensitive 
                                 
                                        
                                        ; how many bytes are reserved 
                                        ; by system at EEPROM base.
                                 
                                        
                                 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        .endif
                                        
                                 
                                        	.include "inc/stm8s105.inc"
                                        .if DISCOVERY
                                        	.include "inc/stm8s_disco.inc"
                                        .endif 
                                        XMEM_SIZE=0 ; size in bytes of EXTENDED MEMORY 
                                        UART_SR=UART2_SR
                                        UART_DR=UART2_DR
                                        UART_BRR1=UART2_BRR1
                                        UART_BRR2=UART2_BRR2
                                        UART_CR1=UART2_CR1
                                        UART_CR2=UART2_CR2
                                        .endif 
                                        
                                        	
                                         
                                        
                                        
                                        
                                     32 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     34 
                                     35 ;===============================================================
                                     36 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     37 ;  Date: 2020-06-07 
                                     38 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     39 ;  Date: 2019-10-26
                                     40 ;  Changes to memory map:
                                     41 ;       0x16f0  Data Stack, growing downward
                                     42 ;       0x1700  Terminal input buffer TIB
                                     43 ;       0x17ff  Return Stack, growing downard
                                     44 ;================================================================
                                     45 ;       STM8EF, Version 2.1, 13 July
                                     46 ;               Implemented on STM8S-Discovery Board.
                                     47 ;               Assembled by ST VisualDevelop STVD 
                                     48 ;               Bootup on internal 2 MHz clock
                                     49 ;               Switch to external 16 MHz crystal clock
                                     50 ;
                                     51 ; FORTH Virtual Machine:
                                     52 ; Subroutine threaded model
                                     53 ; SP Return stack pointer
                                     54 ; X Data stack pointer
                                     55 ; A,Y Scratch pad registers
                                     56 ;
                                     57 ; Memory Map:
                                     58 ; 0x0 RAM memory, system variables
                                     59 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     60 ; 0x780 Data stack, growing downward
                                     61 ; 0x790 Terminal input buffer TIB
                                     62 ; 0x7FF Return stack, growing downward
                                     63 ; 0x8000 Interrupt vector table
                                     64 ; 0x8080 FORTH startup code
                                     65 ; 0x80E7 Start of FORTH dictionary in ROM
                                     66 ; 0x9584 End of FORTH dictionary
                                     67 ;
                                     68 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     69 ;                  use UART1 instead of UART2 for communication with user.
                                     70 ;                  UART1 is available as ttyACM* device via USB connection.
                                     71 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     72 ;                  and MSEC word that return MS value.
                                     73 ;
                                     74 ;       EF12, Version 2.1, 18apr00cht
                                     75 ;               move to 8000H replacing WHYP.
                                     76 ;               copy interrupt vectors from WHYPFLSH.S19
                                     77 ;               to EF12.S19 before flashing
                                     78 ;               add TICKS1 and DELAY1 for motor stepping
                                     79 ;
                                     80 ;       EF12, 02/18/00, C. H. Ting
                                     81 ;       Adapt 86eForth v2.02 to 68HC12.
                                     82 ;               Use WHYP to seed EF12.ASM
                                     83 ;               Use AS12 native 68HC12 assembler:
                                     84 ;               as12 ef12.asm >ef12.lst
                                     85 ;       EF12A, add ADC code, 02mar00cht
                                     86 ;       EF12B, 01mar00cht
                                     87 ;               stack to 0x78, return stack to 0xf8.
                                     88 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     89 ;               add PWM registers
                                     90 ;               add SPI registers and code
                                     91 ;       EF12C, 12mar00cht
                                     92 ;               add MAX5250 D/A converter
                                     93 ;       EF12D, 15mar00cht
                                     94 ;               add all the Lexel interface words
                                     95 ;       EF12E, 18apr00cht, save for reference
                                     96 ;
                                     97 ;       Copyright (c) 2000
                                     98 ;       Dr. C. H. Ting
                                     99 ;       156 14th Avenue
                                    100 ;       San Mateo, CA 94402
                                    101 ;       (650) 571-7639
                                    102 ;
                                    103 
                                    104       
                                    105 ;*********************************************************
                                    106 ;	Assembler constants
                                    107 ;*********************************************************
                           000000   108 RAMBASE =	0x0000	   ;ram base
                           000001   109 .if NUCLEO 
                           0017FF   110 STACK   =	0x17FF 	;system (return) stack empty 
                           001680   111 DATSTK  =	0x1680	;data stack  empty
                           001680   112 TBUFFBASE =     0x1680  ; flash read/write transaction buffer address  
                           001700   113 TIBBASE =       0X1700  ; transaction input buffer addr.
                           000000   114 .else ; DISCOVERY
                                    115 STACK   =	0x7FF 	;system (return) stack empty 
                                    116 DATSTK  =	0x680	;data stack  empty
                                    117 TBUFFBASE =     0x680  ; flash read/write transaction buffer address  
                                    118 TIBBASE =       0X700  ; transaction input buffer addr.
                                    119 .endif
                                    120 
                                    121 ;; Memory allocation
                           000006   122 UPP     =     RAMBASE+6          ; systeme variables base address 
                           001680   123 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0017FF   124 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           001680   125 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           001700   126 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   127 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0017BF   128 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    129 
                                    130 ; user variables constants 
                           000006   131 UBASE = UPP       ; numeric base 
                           000008   132 UFPSW = UBASE+2  ; floating point state word 
                           00000A   133 UTMP = UFPSW+2    ; temporary storage
                           00000C   134 UINN = UTMP+2     ; >IN tib pointer 
                           00000E   135 UCTIB = UINN+2    ; tib count 
                           000010   136 UTIB = UCTIB+2    ; tib address 
                           000012   137 UINTER = UTIB+2   ; interpreter vector 
                           000014   138 UHLD = UINTER+2   ; hold 
                           000016   139 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000018   140 UVP = UCNTXT+2    ; variable pointer 
                           00001A   141 UCP = UVP+2      ; code pointer
                           00001C   142 ULAST = UCP+2    ; last dictionary pointer 
                           00001E   143 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000020   144 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
                           000022   145 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    146 
                                    147 ;******  System Variables  ******
                           000024   148 XTEMP	=	URLAST +2;address called by CREATE
                           000026   149 YTEMP	=	XTEMP+2	;address called by CREATE
                           000024   150 PROD1 = XTEMP	;space for UM*
                           000026   151 PROD2 = PROD1+2
                           000028   152 PROD3 = PROD2+2
                           00002A   153 CARRY = PROD3+2
                           00002C   154 SP0	= CARRY+2	;initial data stack pointer
                           00002E   155 RP0	= SP0+2		;initial return stack pointer
                           000030   156 MS    =   RP0+2         ; millisecond counter 
                           000032   157 CNTDWN =  MS+2          ; count down timer 
                           000034   158 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000035   159 PTR16 = FPTR+1          ; middle byte of farptr 
                           000036   160 PTR8 = FPTR+2           ; least byte of farptr 
                           000038   161 SEEDX = PTR8+2          ; PRNG seed X 
                           00003A   162 SEEDY = SEEDX+2         ; PRNG seed Y 
                                    163 
                                    164 ; EEPROM persistant data  
                           004000   165 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   166 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   167 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   168 APP_VP = APP_CP+2  ; free data space pointer 
                                    169 
                                    170 
                                    171 ;***********************************************
                                    172 ;; Version control
                                    173 
                           000004   174 VER     =     4         ;major release version
                           000000   175 EXT     =     0         ;minor extension
                                    176 
                                    177 ;; Constants
                                    178 
                           00FFFF   179 TRUEE   =     0xFFFF      ;true flag
                                    180 
                           000040   181 COMPO   =     0x40     ;lexicon compile only bit
                           000080   182 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   183 MASKK   =     0x1F7F  ;lexicon bit mask
                                    184 
                           000002   185 CELLL   =     2       ;size of a cell
                           00000A   186 BASEE   =     10      ;default radix
                           000008   187 BKSPP   =     8       ;back space
                           00000A   188 LF      =     10      ;line feed
                           00000D   189 CRR     =     13      ;carriage return
                           000011   190 XON     =     17
                           000013   191 XOFF    =     19
                           00001B   192 ERR     =     27      ;error escape
                           000027   193 TIC     =     39      ;tick
                           0000CD   194 CALLL   =     0xCD     ;CALL opcodes
                           000080   195 IRET_CODE =   0x80    ; IRET opcode 
                                    196 
                                    197         .macro _ledon
                                    198         .if NUCLEO
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    199         bset PC_ODR,#LED2_BIT
                                    200         .else ;DISCOVERY 
                                    201         .if DISCOVERY
                                    202         bres PD_ODR,#LD1_BIT 
                                    203         .endif
                                    204         .endif
                                    205         .endm
                                    206 
                                    207         .macro _ledoff
                                    208         .if NUCLEO 
                                    209         bres PC_ODR,#LED2_BIT
                                    210         .else ;DISCOVERY 
                                    211         .if DISCOVERY
                                    212         bset PD_ODR,#LD1_BIT 
                                    213         .endif 
                                    214         .endif
                                    215         .endm
                                    216 
                                    217 ;**********************************************************
                                    218         .area DATA (ABS)
      000000                        219         .org RAMBASE 
                                    220 ;**********************************************************
                                    221 
                                    222 ;**********************************************************
                                    223         .area SSEG (ABS) ; STACK
      001700                        224         .org 0x1700
      001700                        225         .ds 256 
                                    226 ; space for DATSTK,TIB and STACK         
                                    227 ;**********************************************************
                                    228 
                                    229 ;**********************************************************
                                    230         .area HOME ; vectors table
                                    231 ;**********************************************************
      000000 82 00 00 16            232 	int main	        ; reset
      000004 82 00 00 00            233 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            234 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            235 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            236 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            237 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            238 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            239 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            240 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            241 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            242 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            243 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            244 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            245 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            246 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            247 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            248 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            249 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            250 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            251 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            252 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            253 	int NonHandledInterrupt	; irq19
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      000058 82 00 00 00            254 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            255 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            256 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            257 	int Timer4Handler	; irq23
      000068 82 00 00 00            258 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            259 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            260 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            261 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            262 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            263 	int NonHandledInterrupt	; irq29
                                    264 
                                    265 ;**********************************************************
                                    266         .area CODE
                                    267 ;**********************************************************
                                    268 
                                    269 ; non handled interrupt reset MCU
      000000                        270 NonHandledInterrupt:
      000000 A6 80            [ 1]  271         ld a, #0x80
      000002 C7 50 D1         [ 1]  272         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    273 	;iret
                                    274 
                                    275 ; used for milliseconds counter 
                                    276 ; MS is 16 bits counter 
      000005                        277 Timer4Handler:
      000005 72 5F 53 42      [ 1]  278 	clr TIM4_SR 
      000009 BE 30            [ 2]  279         ldw x,MS 
      00000B 5C               [ 1]  280         incw x 
      00000C BF 30            [ 2]  281         ldw MS,x
      00000E BE 32            [ 2]  282         ldw x,CNTDWN 
      000010 27 03            [ 1]  283         jreq 1$
      000012 5A               [ 2]  284         decw x 
      000013 BF 32            [ 2]  285         ldw CNTDWN,x 
      000015                        286 1$:         
      000015 80               [11]  287         iret 
                                    288 
                                    289 
                                    290 ;; Main entry points and COLD start data
      000016                        291 main:
                                    292 ; clear all RAM
      000016 AE 00 00         [ 2]  293 	ldw X,#RAMBASE
      000019                        294 clear_ram0:
      000019 7F               [ 1]  295 	clr (X)
      00001A 5C               [ 1]  296 	incw X
      00001B A3 17 FF         [ 2]  297 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  298 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  299         ldw x,#RPP
      000023 94               [ 1]  300         ldw sp,x
                                    301 ; set SEEDX and SEEDY to 1 
      000024 3C 39            [ 1]  302         inc SEEDX+1 
      000026 3C 3B            [ 1]  303         inc SEEDY+1          
      000028 CC 00 49         [ 2]  304 	jp ORIG
                                    305 
                                    306 ; COLD initialize these variables.
      00002B                        307 UZERO:
      00002B 00 0A                  308         .word      BASEE   ;BASE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      00002D 00 00                  309         .word      0       ; floating point state 
      00002F 00 00                  310         .word      0       ;tmp
      000031 00 00                  311         .word      0       ;>IN
      000033 00 00                  312         .word      0       ;#TIB
      000035 17 00                  313         .word      TIBB    ;TIB
      000037 13 F6                  314         .word      INTER   ;'EVAL
      000039 00 00                  315         .word      0       ;HLD
      00003B 35 39                  316         .word      LASTN  ;CNTXT pointer
      00003D 00 80                  317         .word      VAR_BASE   ;variables free space pointer 
      00003F 35 80                  318         .word      app_space ; FLASH free space pointer 
      000041 35 39                  319         .word      LASTN   ;LAST
      000043 00 00                  320         .word      0        ; OFFSET 
      000045 00 00                  321         .word      0       ; TFLASH
                                    322 ;       .word      0       ; URLAST   
      000047 00 00                  323 UEND:   .word      0
                                    324 
      000049                        325 ORIG:   
                                    326 ; initialize SP
      000049 AE 17 FF         [ 2]  327         LDW     X,#STACK  ;initialize return stack
      00004C 94               [ 1]  328         LDW     SP,X
      00004D BF 2E            [ 2]  329         LDW     RP0,X
      00004F AE 16 80         [ 2]  330         LDW     X,#DATSTK ;initialize data stack
      000052 BF 2C            [ 2]  331         LDW     SP0,X
                           000001   332 .if NUCLEO        
                                    333 ; initialize PC_5 as output to control LED2
                                    334 ; added by Picatout 
      000054 72 1A 50 0D      [ 1]  335         bset PC_CR1,#LED2_BIT
      000058 72 1A 50 0E      [ 1]  336         bset PC_CR2,#LED2_BIT
      00005C 72 1A 50 0C      [ 1]  337         bset PC_DDR,#LED2_BIT
                                    338 .endif 
                           000000   339 .if DISCOVERY
                                    340         bset PD_CR1,#LD1_BIT
                                    341         bset PD_CR2,#LD1_BIT
                                    342         bset PD_DDR,#LD1_BIT 
                                    343 .endif
      000060                        344         _ledoff
                           000001     1         .if NUCLEO 
      000060 72 1B 50 0A      [ 1]    2         bres PC_ODR,#LED2_BIT
                           000000     3         .else ;DISCOVERY 
                                      4         .if DISCOVERY
                                      5         bset PD_ODR,#LD1_BIT 
                                      6         .endif 
                                      7         .endif
                                    345 ; initialize clock to HSI
                                    346 ; no divisor 16Mhz 
                                    347 ; Added by Picatout 
      000064                        348 clock_init:
      000064 72 5F 50 C6      [ 1]  349         clr CLK_CKDIVR
      000068 72 12 50 C5      [ 1]  350 	bset CLK_SWCR,#CLK_SWCR_SWEN
                           000001   351 .if NUCLEO|DOORBELL
      00006C A6 E1            [ 1]  352 	ld a,#CLK_SWR_HSI
                           000000   353 .else ; DISCOVERY as 16Mhz crystal
                                    354 	ld a,#CLK_SWR_HSE
                                    355 .endif 
      00006E C7 50 C4         [ 1]  356 	ld CLK_SWR,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      000071 C1 50 C3         [ 1]  357 1$:	cp a,CLK_CMSR
      000074 26 FB            [ 1]  358 	jrne 1$
                                    359         
                                    360 ; initialize UART, 115200 8N1
      000076                        361 uart_init:
                           000001   362 .if NUCLEO 
      000076 72 14 50 C7      [ 1]  363 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    364 	; configure tx pin
      00007A 72 1A 50 02      [ 1]  365 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      00007E 72 1A 50 03      [ 1]  366 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      000082 72 1A 50 04      [ 1]  367 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    368 	; baud rate 115200 Fmaster=16Mhz  16000000/115200=139=0x8b
                           000000   369 .else ; DISCOVERY use UART2 
                                    370 	bset CLK_PCKENR1,#CLK_PCKENR1_UART2
                                    371 	; configure tx pin
                                    372 	bset PD_DDR,#UART2_TX_PIN ; tx pin
                                    373 	bset PD_CR1,#UART2_TX_PIN ; push-pull output
                                    374 	bset PD_CR2,#UART2_TX_PIN ; fast output
                                    375 .endif
                                    376 ; baud rate 115200 Fmaster=8Mhz  
      000086 35 0B 52 33      [ 1]  377 	mov UART_BRR2,#0x0b ; must be loaded first
      00008A 35 08 52 32      [ 1]  378 	mov UART_BRR1,#0x8
      00008E 35 0C 52 35      [ 1]  379 	mov UART_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    380 ; initialize timer4, used for millisecond interrupt  
      000092 35 07 53 45      [ 1]  381 	mov TIM4_PSCR,#7 ; prescale 128  
      000096 35 7D 53 46      [ 1]  382 	mov TIM4_ARR,#125 ; set for 1msec.
      00009A 35 05 53 40      [ 1]  383 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      00009E 72 10 53 41      [ 1]  384 	bset TIM4_IER,#TIM4_IER_UIE 
                                    385 ; set TIM4 interrupt priority to highest
      0000A2 A6 3F            [ 1]  386         ld a,#~(IPR_MASK<<6)
      0000A4 C4 7F 75         [ 1]  387         and a,ITC_SPR6
      0000A7 AA C0            [ 1]  388         or a,#(IPR3<<6)
      0000A9 C7 7F 75         [ 1]  389         ld ITC_SPR6,a 
      0000AC 9A               [ 1]  390         rim
      0000AD CC 1B 66         [ 2]  391         jp  COLD   ;default=MN1
                                    392 
                           000000   393         LINK=0 
                                    394 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;        
                                    395 ;; place MCU in sleep mode with
                                    396 ;; halt opcode 
                                    397 ;; BYE ( -- )
                                    398 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000B0                        399         _HEADER BYE,3,"BYE"
      0000B0 00 00                    1         .word LINK 
                           0000B2     2         LINK=.
      0000B2 03                       3         .byte 3  
      0000B3 42 59 45                 4         .ascii "BYE"
      0000B6                          5         BYE:
      0000B6 8E               [10]  400         halt 
      0000B7 81               [ 4]  401         ret 
                                    402 
                                    403 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    404 ; Enable interrupts 
                                    405 ; EI ( -- )
                                    406 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      0000B8                        407         _HEADER EI,2,"EI"
      0000B8 00 B2                    1         .word LINK 
                           0000BA     2         LINK=.
      0000BA 02                       3         .byte 2  
      0000BB 45 49                    4         .ascii "EI"
      0000BD                          5         EI:
      0000BD 9A               [ 1]  408         rim 
      0000BE 81               [ 4]  409         ret 
                                    410 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    411 ; Disable interrupts
                                    412 ; DI ( -- )
                                    413 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000BF                        414         _HEADER DI,2,"DI"
      0000BF 00 BA                    1         .word LINK 
                           0000C1     2         LINK=.
      0000C1 02                       3         .byte 2  
      0000C2 44 49                    4         .ascii "DI"
      0000C4                          5         DI:
      0000C4 9B               [ 1]  415         sim 
      0000C5 81               [ 4]  416         ret 
                                    417 
                                    418 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    419 ; set interrupt priority level 
                                    420 ; SET-ISP ( n1 n2 -- )
                                    421 ; n1 level {1..3}
                                    422 ; n2 vector {0..29}
                                    423 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000C6                        424         _HEADER SETISP,7,"SET-ISP"
      0000C6 00 C1                    1         .word LINK 
                           0000C8     2         LINK=.
      0000C8 07                       3         .byte 7  
      0000C9 53 45 54 2D 49 53 50     4         .ascii "SET-ISP"
      0000D0                          5         SETISP:
      0000D0 90 93            [ 1]  425         ldw y,x 
      0000D2 90 FE            [ 2]  426         ldw y,(y)
      0000D4 A6 04            [ 1]  427         ld a,#4 ; 4 slot per register 
                                    428 ;  quotient select register, remainder select slot in register.        
      0000D6 90 62            [ 2]  429         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000D8 A4 03            [ 1]  430         and a,#3 
      0000DA 48               [ 1]  431         sll a ; 2*SLOT  lshift 
      0000DB 72 A9 7F 70      [ 2]  432         addw y,#ITC_SPR1 
      0000DF FF               [ 2]  433         ldw (x),y  ; ( level reg -- )
      0000E0 90 5F            [ 1]  434         clrw y 
      0000E2 90 97            [ 1]  435         ld yl,a 
      0000E4 1D 00 02         [ 2]  436         subw x,#CELLL 
      0000E7 FF               [ 2]  437         ldw (x),y  ; ( level reg lshift -- )
      0000E8 90 93            [ 1]  438         ldw y,x 
      0000EA 90 EE 02         [ 2]  439         ldw y,(2,y) 
      0000ED 90 F6            [ 1]  440         ld a,(y)   ; reg_value
      0000EF 1D 00 02         [ 2]  441         subw x,#CELLL 
      0000F2 FF               [ 2]  442         ldw (x),y ; ( level reg lshift rval -- )
      0000F3 CD 06 49         [ 4]  443         call OVER ; ( level reg lshift rval lshift -- )
      0000F6 CD 04 6F         [ 4]  444         call DOLIT 
      0000F9 00 03                  445         .word 3
      0000FB CD 06 31         [ 4]  446         call SWAPP  ; ( level reg lshift rval 3 lshift )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      0000FE CD 0B 93         [ 4]  447         call LSHIFT ; creat slot mask 
      000101 CD 08 73         [ 4]  448         call INVER  ; ( level reg lshift rval mask )
      000104 CD 06 7E         [ 4]  449         call ANDD ; ( level reg lshift slot_masked )
      000107 CD 05 EA         [ 4]  450         call TOR  ; ( level reg lshift -- R: slot_masked )
      00010A CD 07 E5         [ 4]  451         call ROT  ; ( reg lshift level )
      00010D CD 06 31         [ 4]  452         call SWAPP ; ( reg level lshift )
      000110 CD 0B 93         [ 4]  453         call LSHIFT  ; ( reg slot_level -- )
      000113 CD 05 34         [ 4]  454         call RFROM ; ( reg slot_level masked_val )
      000116 CD 06 92         [ 4]  455         call ORR   ; ( reg updated_rval )
      000119 CD 06 31         [ 4]  456         call SWAPP 
      00011C CD 04 F0         [ 4]  457         call CSTOR
                                    458 
                                    459 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    460 ; sélectionne l'application 
                                    461 ; qui démarre automatique lors 
                                    462 ; d'un COLD start 
                                    463 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00011F                        464         _HEADER AUTORUN,7,"AUTORUN"
      00011F 00 C8                    1         .word LINK 
                           000121     2         LINK=.
      000121 07                       3         .byte 7  
      000122 41 55 54 4F 52 55 4E     4         .ascii "AUTORUN"
      000129                          5         AUTORUN:
      000129 CD 11 BB         [ 4]  465         call TOKEN 
      00012C CD 06 21         [ 4]  466         call DUPP 
      00012F CD 04 98         [ 4]  467         call QBRAN 
      000132 02 0F                  468         .word FORGET2
      000134 CD 12 B8         [ 4]  469         call NAMEQ
      000137 CD 07 D4         [ 4]  470         call QDUP 
      00013A CD 04 98         [ 4]  471         call QBRAN 
      00013D 02 0F                  472         .word FORGET2
      00013F CD 06 17         [ 4]  473         call DROP 
      000142 1D 00 04         [ 2]  474         subw x,#2*CELLL 
      000145 90 5F            [ 1]  475         clrw y 
      000147 FF               [ 2]  476         ldw (x),y 
      000148 90 AE 40 02      [ 2]  477         ldw y,#APP_RUN 
      00014C EF 02            [ 2]  478         ldw (2,x),y 
      00014E CC 1E 62         [ 2]  479         jp EESTORE 
                                    480 
                                    481 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    482 ;; Reset dictionary pointer before 
                                    483 ;; forgotten word. RAM space and 
                                    484 ;; interrupt vector defined after 
                                    485 ;; must be resetted also.
                                    486 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000151                        487         _HEADER FORGET,6,"FORGET"
      000151 01 21                    1         .word LINK 
                           000153     2         LINK=.
      000153 06                       3         .byte 6  
      000154 46 4F 52 47 45 54        4         .ascii "FORGET"
      00015A                          5         FORGET:
      00015A CD 11 BB         [ 4]  488         call TOKEN
      00015D CD 06 21         [ 4]  489         call DUPP 
      000160 CD 04 98         [ 4]  490         call QBRAN 
      000163 02 0F                  491         .word FORGET2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      000165 CD 12 B8         [ 4]  492         call NAMEQ ; ( a -- ca na | a F )
      000168 CD 07 D4         [ 4]  493         call QDUP 
      00016B CD 04 98         [ 4]  494         call QBRAN 
      00016E 02 0F                  495         .word FORGET2
                                    496 ; only forget users words 
      000170 CD 06 21         [ 4]  497         call DUPP ; ( ca na na )
      000173 CD 04 6F         [ 4]  498         call DOLIT 
      000176 35 80                  499         .word app_space 
      000178 CD 06 31         [ 4]  500         call SWAPP 
      00017B CD 09 17         [ 4]  501         call  ULESS 
      00017E CD 04 98         [ 4]  502         call QBRAN 
      000181 01 D1                  503         .word FORGET6 
                                    504 ; ( ca na -- )        
                                    505 ;reset ivec with address >= ca
      000183 CD 06 31         [ 4]  506         call SWAPP ; ( na ca -- ) 
      000186 CD 20 65         [ 4]  507         call CHKIVEC ; ( na -- ) 
                                    508 ; start at LAST and link back to na 
                                    509 ; if variable found reset VP at that point.
      000189                        510 FORGET1:
      000189 CD 07 96         [ 4]  511         call LAST 
      00018C CD 04 E3         [ 4]  512         call AT 
      00018F CD 06 21         [ 4]  513         call DUPP  ; ( -- na last last )
      000192 CD 02 25         [ 4]  514         call FREEVAR ; ( -- na last )
      000195 CD 06 21         [ 4]  515         call DUPP 
      000198 CD 04 6F         [ 4]  516         call DOLIT 
      00019B 00 02                  517         .word 2 
      00019D CD 08 D0         [ 4]  518         call SUBB ; ( na last -- na last lfa ) link address 
      0001A0 CD 04 E3         [ 4]  519         call AT 
      0001A3 CD 06 21         [ 4]  520         call DUPP ; ( -- na last a a )
      0001A6 CD 07 6A         [ 4]  521         call CNTXT 
      0001A9 CD 04 D1         [ 4]  522         call STORE
      0001AC CD 07 96         [ 4]  523         call LAST  
      0001AF CD 04 D1         [ 4]  524         call STORE ; ( --  na last )
      0001B2 CD 06 49         [ 4]  525         call OVER 
      0001B5 CD 08 F8         [ 4]  526         call EQUAL ; ( na last na -- na T|F ) 
      0001B8 CD 04 98         [ 4]  527         call QBRAN 
      0001BB 01 89                  528         .word FORGET1 
                                    529 ; ( na -- )
      0001BD CD 04 6F         [ 4]  530         call DOLIT 
      0001C0 00 02                  531         .word 2 
      0001C2 CD 08 D0         [ 4]  532         call SUBB 
      0001C5 CD 07 86         [ 4]  533         call CPP 
      0001C8 CD 04 D1         [ 4]  534         call STORE  
      0001CB CD 1C 95         [ 4]  535         call UPDATCP 
      0001CE CC 1C 6C         [ 2]  536         jp UPDATLAST 
      0001D1                        537 FORGET6: ; tried to forget a RAM or system word 
                                    538 ; ( ca na -- )
      0001D1 1D 00 02         [ 2]  539         subw x,#CELLL 
      0001D4 90 BE 2C         [ 2]  540         ldw y,SP0 
      0001D7 FF               [ 2]  541         ldw (x),y  
      0001D8 CD 09 17         [ 4]  542         call ULESS
      0001DB CD 04 98         [ 4]  543         call QBRAN 
      0001DE 02 01                  544         .word PROTECTED 
      0001E0 CD 13 C4         [ 4]  545         call ABORQ 
      0001E3 1D                     546         .byte 29
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      0001E4 20 46 6F 72 20 52 41   547         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      000201                        548 PROTECTED:
      000201 CD 13 C4         [ 4]  549         call ABORQ
      000204 0A                     550         .byte 10
      000205 20 50 72 6F 74 65 63   551         .ascii " Protected"
             74 65 64
      00020F                        552 FORGET2: ; no name or not found in dictionary 
      00020F CD 13 C4         [ 4]  553         call ABORQ
      000212 05                     554         .byte 5
      000213 20 77 68 61 74         555         .ascii " what"
      000218                        556 FORGET4:
      000218 CC 06 17         [ 2]  557         jp DROP 
                                    558 
                                    559 
                                    560 ;;;;;;;;;;;;;;;;;;;;;
                                    561 ; if na is variable 
                                    562 ; free variable data  
                                    563 ; FREEVAR ( na -- )
                                    564 ;;;;;;;;;;;;;;;;;;;;;;
      00021B                        565         _HEADER FREEVAR,7,"FREEVAR"
      00021B 01 53                    1         .word LINK 
                           00021D     2         LINK=.
      00021D 07                       3         .byte 7  
      00021E 46 52 45 45 56 41 52     4         .ascii "FREEVAR"
      000225                          5         FREEVAR:
      000225 CD 06 21         [ 4]  566         call DUPP ; ( na na -- )
      000228 CD 05 01         [ 4]  567         CALL CAT  ; ( na c -- )
      00022B CD 0B 75         [ 4]  568         call ONEP ;
      00022E CD 08 46         [ 4]  569         CALL PLUS ; ( na c+1 -- ca ) 
      000231 CD 0B 75         [ 4]  570         call ONEP ; ( ca+ -- ) to get routne address 
      000234 CD 06 21         [ 4]  571         call DUPP ; ( ca+ ca+ -- )
      000237 CD 04 E3         [ 4]  572         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      00023A CD 04 6F         [ 4]  573         call DOLIT 
      00023D 06 D7                  574         .word DOVAR ; if routine address is DOVAR then variable 
      00023F CD 08 F8         [ 4]  575         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      000242 CD 04 98         [ 4]  576         call QBRAN 
      000245 02 5B                  577         .word FREEVAR4 
      000247 CD 04 6F         [ 4]  578         call DOLIT 
      00024A 00 02                  579         .word 2 
      00024C CD 08 46         [ 4]  580         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      00024F CD 04 E3         [ 4]  581         call AT 
      000252 CD 07 78         [ 4]  582         call VPP   
      000255 CD 04 D1         [ 4]  583         call STORE 
      000258 CC 1C AC         [ 2]  584         jp UPDATVP 
      00025B                        585 FREEVAR4: ; not variable
      00025B CC 06 17         [ 2]  586         jp  DROP 
                                    587 
                                    588 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    589 ;    SEED ( n -- )
                                    590 ; Initialize PRNG seed with n 
                                    591 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      00025E                        592         _HEADER SEED,4,"SEED"
      00025E 02 1D                    1         .word LINK 
                           000260     2         LINK=.
      000260 04                       3         .byte 4  
      000261 53 45 45 44              4         .ascii "SEED"
      000265                          5         SEED:
      000265 90 93            [ 1]  593         ldw y,x 
      000267 1C 00 02         [ 2]  594         addw x,#CELLL
      00026A 90 FE            [ 2]  595         ldw y,(y)
      00026C 90 9E            [ 1]  596         ld a,yh 
      00026E B7 38            [ 1]  597         ld SEEDX,a 
      000270 90 9F            [ 1]  598         ld a,yl 
      000272 B7 3A            [ 1]  599         ld SEEDY,a 
      000274 81               [ 4]  600         ret 
                                    601 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    602 ;    RANDOM ( u1 -- u2 )
                                    603 ; Pseudo random number betwen 0 and u1-1
                                    604 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000275                        605         _HEADER RANDOM,6,"RANDOM"
      000275 02 60                    1         .word LINK 
                           000277     2         LINK=.
      000277 06                       3         .byte 6  
      000278 52 41 4E 44 4F 4D        4         .ascii "RANDOM"
      00027E                          5         RANDOM:
                                    606 ;local variable 
                           000001   607         SPSAVE=1
                           000002   608         VSIZE=2 
      00027E 52 02            [ 2]  609         sub sp,#VSIZE
      000280 1F 01            [ 2]  610         ldw (SPSAVE,sp),x  
                                    611 ; XTEMP=(SEEDX<<5)^SEEDX 
      000282 90 93            [ 1]  612         ldw y,x 
      000284 90 FE            [ 2]  613         ldw y,(y)
      000286 90 BF 26         [ 2]  614         ldw YTEMP,y 
      000289 BE 38            [ 2]  615 	ldw x,SEEDX 
      00028B 58               [ 2]  616 	sllw x 
      00028C 58               [ 2]  617 	sllw x 
      00028D 58               [ 2]  618 	sllw x 
      00028E 58               [ 2]  619 	sllw x 
      00028F 58               [ 2]  620 	sllw x 
      000290 9E               [ 1]  621 	ld a,xh 
      000291 B8 38            [ 1]  622 	xor a,SEEDX 
      000293 B7 24            [ 1]  623 	ld XTEMP,a 
      000295 9F               [ 1]  624 	ld a,xl 
      000296 B8 39            [ 1]  625 	xor a,SEEDX+1 
      000298 B7 25            [ 1]  626 	ld XTEMP+1,a 
                                    627 ; SEEDX=SEEDY 
      00029A BE 3A            [ 2]  628 	ldw x,SEEDY 
      00029C BF 38            [ 2]  629 	ldw SEEDX,x  
                                    630 ; SEEDY=SEEDY^(SEEDY>>1)
      00029E 54               [ 2]  631 	srlw x 
      00029F 9E               [ 1]  632 	ld a,xh 
      0002A0 B8 3A            [ 1]  633 	xor a,SEEDY 
      0002A2 B7 3A            [ 1]  634 	ld SEEDY,a  
      0002A4 9F               [ 1]  635 	ld a,xl 
      0002A5 B8 3B            [ 1]  636 	xor a,SEEDY+1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      0002A7 B7 3B            [ 1]  637 	ld SEEDY+1,a 
                                    638 ; XTEMP>>3 
      0002A9 BE 24            [ 2]  639 	ldw x,XTEMP 
      0002AB 54               [ 2]  640 	srlw x 
      0002AC 54               [ 2]  641 	srlw x 
      0002AD 54               [ 2]  642 	srlw x 
                                    643 ; x=XTEMP^x 
      0002AE 9E               [ 1]  644 	ld a,xh 
      0002AF B8 24            [ 1]  645 	xor a,XTEMP 
      0002B1 95               [ 1]  646 	ld xh,a 
      0002B2 9F               [ 1]  647 	ld a,xl 
      0002B3 B8 25            [ 1]  648 	xor a,XTEMP+1  
      0002B5 97               [ 1]  649 	ld xl,a 
                                    650 ; SEEDY=x^SEEDY 
      0002B6 B8 3B            [ 1]  651 	xor a,SEEDY+1
      0002B8 97               [ 1]  652 	ld xl,a 
      0002B9 9E               [ 1]  653 	ld a,xh 
      0002BA B8 3A            [ 1]  654 	xor a,SEEDY
      0002BC 95               [ 1]  655 	ld xh,a 
      0002BD BF 3A            [ 2]  656 	ldw SEEDY,x 
                                    657 ; return SEEDY modulo YTEMP  
      0002BF 90 BE 26         [ 2]  658 	ldw y,YTEMP  
      0002C2 65               [ 2]  659 	divw x,y 
      0002C3 1E 01            [ 2]  660 	ldw x,(SPSAVE,sp)
      0002C5 FF               [ 2]  661         ldw (x),y 
      0002C6 5B 02            [ 2]  662         addw sp,#VSIZE 
      0002C8 81               [ 4]  663 	ret 
                                    664 
                                    665 
                                    666 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    667 ;; get millisecond counter 
                                    668 ;; msec ( -- u )
                                    669 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002C9                        670         _HEADER MSEC,4,"MSEC"
      0002C9 02 77                    1         .word LINK 
                           0002CB     2         LINK=.
      0002CB 04                       3         .byte 4  
      0002CC 4D 53 45 43              4         .ascii "MSEC"
      0002D0                          5         MSEC:
      0002D0 1D 00 02         [ 2]  671         subw x,#CELLL 
      0002D3 90 BE 30         [ 2]  672         ldw y,MS 
      0002D6 FF               [ 2]  673         ldw (x),y 
      0002D7 81               [ 4]  674         ret 
                                    675 
                                    676 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    677 ; suspend execution for u msec 
                                    678 ;  pause ( u -- )
                                    679 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002D8                        680         _HEADER PAUSE,5,"PAUSE"
      0002D8 02 CB                    1         .word LINK 
                           0002DA     2         LINK=.
      0002DA 05                       3         .byte 5  
      0002DB 50 41 55 53 45           4         .ascii "PAUSE"
      0002E0                          5         PAUSE:
      0002E0 90 93            [ 1]  681         ldw y,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      0002E2 90 FE            [ 2]  682         ldw y,(y)
      0002E4 72 B9 00 30      [ 2]  683         addw y,MS 
      0002E8 8F               [10]  684 1$:     wfi  
      0002E9 90 B3 30         [ 2]  685         cpw y,MS  
      0002EC 26 FA            [ 1]  686         jrne 1$        
      0002EE 1C 00 02         [ 2]  687         addw x,#CELLL 
      0002F1 81               [ 4]  688         ret 
                                    689 
                                    690 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    691 ; initialize count down timer 
                                    692 ;  TIMER ( u -- )  milliseconds
                                    693 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002F2                        694         _HEADER TIMER,5,"TIMER"
      0002F2 02 DA                    1         .word LINK 
                           0002F4     2         LINK=.
      0002F4 05                       3         .byte 5  
      0002F5 54 49 4D 45 52           4         .ascii "TIMER"
      0002FA                          5         TIMER:
      0002FA 90 93            [ 1]  695         ldw y,x
      0002FC 90 FE            [ 2]  696         ldw y,(y) 
      0002FE 90 BF 32         [ 2]  697         ldw CNTDWN,y
      000301 1C 00 02         [ 2]  698         addw x,#CELLL 
      000304 81               [ 4]  699         ret 
                                    700 
                                    701 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    702 ; check for TIMER exiparition 
                                    703 ;  TIMEOUT? ( -- 0|-1 )
                                    704 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000305                        705         _HEADER TIMEOUTQ,8,"TIMEOUT?"
      000305 02 F4                    1         .word LINK 
                           000307     2         LINK=.
      000307 08                       3         .byte 8  
      000308 54 49 4D 45 4F 55 54     4         .ascii "TIMEOUT?"
             3F
      000310                          5         TIMEOUTQ:
      000310 4F               [ 1]  706         clr a
      000311 1D 00 02         [ 2]  707         subw x,#CELLL 
      000314 90 BE 32         [ 2]  708         ldw y,CNTDWN 
      000317 26 01            [ 1]  709         jrne 1$ 
      000319 43               [ 1]  710         cpl a 
      00031A E7 01            [ 1]  711 1$:     ld (1,x),a 
      00031C F7               [ 1]  712         ld (x),a 
      00031D 81               [ 4]  713         ret         
                                    714 
                                    715 ;;;;;;;;;;;;;;;;;;;;;
                                    716 ; reboot MCU 
                                    717 ; REBOOT ( -- )
                                    718 ;;;;;;;;;;;;;;;;;;;;;
      00031E                        719         _HEADER reboot,6,"REBOOT"
      00031E 03 07                    1         .word LINK 
                           000320     2         LINK=.
      000320 06                       3         .byte 6  
      000321 52 45 42 4F 4F 54        4         .ascii "REBOOT"
      000327                          5         reboot:
      000327 CC 00 00         [ 2]  720         jp NonHandledInterrupt
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    721 
                                    722 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    723 ; compile to flash memory 
                                    724 ; TO-FLASH ( -- )
                                    725 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      00032A                        726         _HEADER TOFLASH,8,"TO-FLASH"
      00032A 03 20                    1         .word LINK 
                           00032C     2         LINK=.
      00032C 08                       3         .byte 8  
      00032D 54 4F 2D 46 4C 41 53     4         .ascii "TO-FLASH"
             48
      000335                          5         TOFLASH:
      000335 CD 07 A9         [ 4]  727         call RAMLAST 
      000338 CD 04 E3         [ 4]  728         call AT 
      00033B CD 07 D4         [ 4]  729         call QDUP 
      00033E CD 04 98         [ 4]  730         call QBRAN
      000341 03 64                  731         .word 1$
      000343 CD 13 C4         [ 4]  732         call ABORQ 
      000346 1D                     733         .byte 29
      000347 20 4E 6F 74 20 77 68   734         .ascii " Not while definitions in RAM"   
             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      000364 90 AE FF FF      [ 2]  735 1$:     ldw y,#-1 
      000368 90 BF 20         [ 2]  736         ldw UTFLASH,y
      00036B 81               [ 4]  737         ret 
                                    738 
                                    739 ;;;;;;;;;;;;;;;;;;;;;;
                                    740 ; compile to RAM 
                                    741 ; TO-RAM ( -- )
                                    742 ;;;;;;;;;;;;;;;;;;;;;;
      00036C                        743         _HEADER TORAM,6,"TO-RAM"
      00036C 03 2C                    1         .word LINK 
                           00036E     2         LINK=.
      00036E 06                       3         .byte 6  
      00036F 54 4F 2D 52 41 4D        4         .ascii "TO-RAM"
      000375                          5         TORAM:
      000375 90 5F            [ 1]  744         clrw y 
      000377 90 BF 20         [ 2]  745         ldw UTFLASH,y 
      00037A 81               [ 4]  746         ret 
                                    747 
                                    748 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    749 ;; BAUD RATE constants table
                                    750 ; values to put in BRR1 & BRR2 
                                    751 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00037B                        752 baudrate: 
      00037B A0 1B                  753 	.byte 0xa0,0x1b ; 2400
      00037D D0 05                  754 	.byte 0xd0,0x5  ; 4800 
      00037F 68 03                  755 	.byte 0x68,0x3  ; 9600
      000381 34 01                  756 	.byte 0x34,0x1  ; 19200
      000383 11 06                  757 	.byte 0x11,0x6  ; 57600
      000385 08 0B                  758 	.byte 0x8,0xb   ; 115200
                                    759 
                                    760 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                                    761 ; BAUD RATE CONSTANTS names 
                                    762 ; 2400 baud  ( -- n )
                                    763 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000387                        764         _HEADER B2K4,4,"B2K4"
      000387 03 6E                    1         .word LINK 
                           000389     2         LINK=.
      000389 04                       3         .byte 4  
      00038A 42 32 4B 34              4         .ascii "B2K4"
      00038E                          5         B2K4:
      00038E 1D 00 02         [ 2]  765 	subw x,#CELLL 
      000391 90 5F            [ 1]  766         clrw y
      000393 FF               [ 2]  767         ldw (x),y
      000394 81               [ 4]  768 	ret
                                    769 
                                    770 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    771 ; 4800 baud	
                                    772 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000395                        773         _HEADER B4K8,4,"B4K8"
      000395 03 89                    1         .word LINK 
                           000397     2         LINK=.
      000397 04                       3         .byte 4  
      000398 42 34 4B 38              4         .ascii "B4K8"
      00039C                          5         B4K8:
      00039C 1D 00 02         [ 2]  774         subw x,#CELLL 
      00039F 90 AE 00 02      [ 2]  775         ldw y,#2 
      0003A3 FF               [ 2]  776         ldw (x),y
      0003A4 81               [ 4]  777         ret 
                                    778 
                                    779 ;;;;;;;;;;;;;;;;;;;;
                                    780 ; 9600 baud
                                    781 ;;;;;;;;;;;;;;;;;;;;
      0003A5                        782         _HEADER B9K6,4,"B9K6"
      0003A5 03 97                    1         .word LINK 
                           0003A7     2         LINK=.
      0003A7 04                       3         .byte 4  
      0003A8 42 39 4B 36              4         .ascii "B9K6"
      0003AC                          5         B9K6:
      0003AC 1D 00 02         [ 2]  783         subw x,#CELLL 
      0003AF 90 AE 00 04      [ 2]  784         ldw y,#4 
      0003B3 FF               [ 2]  785         ldw (x),y 
      0003B4 81               [ 4]  786         ret 
                                    787 ;;;;;;;;;;;;;;
                                    788 ; 19200 baud
                                    789 ;;;;;;;;;;;;;;
      0003B5                        790         _HEADER B19K2,5,"B19K2"
      0003B5 03 A7                    1         .word LINK 
                           0003B7     2         LINK=.
      0003B7 05                       3         .byte 5  
      0003B8 42 31 39 4B 32           4         .ascii "B19K2"
      0003BD                          5         B19K2:
      0003BD 1D 00 02         [ 2]  791         subw x,#CELLL
      0003C0 90 AE 00 06      [ 2]  792         ldw y,#6 
      0003C4 FF               [ 2]  793         ldw (x),y 
      0003C5 81               [ 4]  794         ret 
                                    795 ;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    796 ; 57600 baud  
                                    797 ;;;;;;;;;;;;;;
      0003C6                        798         _HEADER B57K6,5,"B57K6"
      0003C6 03 B7                    1         .word LINK 
                           0003C8     2         LINK=.
      0003C8 05                       3         .byte 5  
      0003C9 42 35 37 4B 36           4         .ascii "B57K6"
      0003CE                          5         B57K6:
      0003CE 1D 00 02         [ 2]  799         subw x,#CELLL 
      0003D1 90 AE 00 08      [ 2]  800         ldw y,#8 
      0003D5 FF               [ 2]  801         ldw (x),y 
      0003D6 81               [ 4]  802         ret 
                                    803 ;;;;;;;;;;;;;;
                                    804 ; 115200 baud 
                                    805 ;;;;;;;;;;;;;;
      0003D7                        806         _HEADER B115K2,6,"B115K2"
      0003D7 03 C8                    1         .word LINK 
                           0003D9     2         LINK=.
      0003D9 06                       3         .byte 6  
      0003DA 42 31 31 35 4B 32        4         .ascii "B115K2"
      0003E0                          5         B115K2:
      0003E0 1D 00 02         [ 2]  807 	subw x,#CELLL 
      0003E3 90 AE 00 0A      [ 2]  808         ldw y,#10 
      0003E7 FF               [ 2]  809         ldw (x),y 
      0003E8 81               [ 4]  810         ret 
                                    811 
                                    812 ;;;;;;;;;;;;;;;;;;;;;;;	
                                    813 ;; set UART2 BAUD rate
                                    814 ;	BAUD ( u -- )
                                    815 ;;;;;;;;;;;;;;;;;;;;;;;
      0003E9                        816         _HEADER BAUD,4,"BAUD"
      0003E9 03 D9                    1         .word LINK 
                           0003EB     2         LINK=.
      0003EB 04                       3         .byte 4  
      0003EC 42 41 55 44              4         .ascii "BAUD"
      0003F0                          5         BAUD:
      0003F0 1D 00 02         [ 2]  817 	subw x,#CELLL
      0003F3 90 AE 03 7B      [ 2]  818         ldw y,#baudrate 
      0003F7 FF               [ 2]  819         ldw (x),y 
      0003F8 CD 08 46         [ 4]  820         call PLUS
      0003FB 90 93            [ 1]  821         ldw y,x  
      0003FD 90 FE            [ 2]  822         ldw y,(y)
      0003FF 90 F6            [ 1]  823         ld a,(y)
      000401 88               [ 1]  824         push a 
      000402 90 5C            [ 1]  825         incw y 
      000404 90 F6            [ 1]  826         ld a,(y)
      000406 C7 52 33         [ 1]  827         ld UART_BRR2,a 
      000409 84               [ 1]  828         pop a
      00040A C7 52 32         [ 1]  829         ld UART_BRR1,a 
      00040D 1C 00 02         [ 2]  830         addw x,#CELLL 
      000410 81               [ 4]  831         ret 
                                    832 
                                    833 ;; Device dependent I/O
                                    834 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    835 ;       ?RX     ( -- c T | F )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                                    836 ;         Return input byte and true, or false.
                                    837 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000411                        838         _HEADER QKEY,4,"?KEY"
      000411 03 EB                    1         .word LINK 
                           000413     2         LINK=.
      000413 04                       3         .byte 4  
      000414 3F 4B 45 59              4         .ascii "?KEY"
      000418                          5         QKEY:
      000418 90 5F            [ 1]  839         CLRW Y 
      00041A 72 0B 52 30 0B   [ 2]  840         BTJF UART_SR,#UART_SR_RXNE,INCH   ;check status
      00041F C6 52 31         [ 1]  841         LD    A,UART_DR   ;get char in A
      000422 1D 00 02         [ 2]  842 	SUBW	X,#2
      000425 E7 01            [ 1]  843         LD     (1,X),A
      000427 7F               [ 1]  844 	CLR	(X)
      000428 90 53            [ 2]  845         CPLW     Y
      00042A                        846 INCH:
      00042A 1D 00 02         [ 2]  847 		SUBW	X,#2
      00042D FF               [ 2]  848         LDW     (X),Y
      00042E 81               [ 4]  849         RET
                                    850 
                                    851 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    852 ;       TX!     ( c -- )
                                    853 ;       Send character c to  output device.
                                    854 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00042F                        855         _HEADER EMIT,4,"EMIT"
      00042F 04 13                    1         .word LINK 
                           000431     2         LINK=.
      000431 04                       3         .byte 4  
      000432 45 4D 49 54              4         .ascii "EMIT"
      000436                          5         EMIT:
      000436 E6 01            [ 1]  856         LD     A,(1,X)
      000438 1C 00 02         [ 2]  857 	ADDW	X,#2
      00043B 72 0F 52 30 FB   [ 2]  858 OUTPUT: BTJF UART_SR,#UART_SR_TXE,OUTPUT  ;loop until tx empty 
      000440 C7 52 31         [ 1]  859         LD    UART_DR,A   ;send A
      000443 81               [ 4]  860         RET
                                    861 
                                    862 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    863 ;       FC-XON  ( -- )
                                    864 ;       send XON character 
                                    865 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000444                        866         _HEADER FC_XON,6,"FC-XON"
      000444 04 31                    1         .word LINK 
                           000446     2         LINK=.
      000446 06                       3         .byte 6  
      000447 46 43 2D 58 4F 4E        4         .ascii "FC-XON"
      00044D                          5         FC_XON:
      00044D 1D 00 02         [ 2]  867         subw x,#CELLL 
      000450 7F               [ 1]  868         clr (x)
      000451 A6 11            [ 1]  869         ld a,#XON 
      000453 E7 01            [ 1]  870         ld (1,x),a 
      000455 CD 04 36         [ 4]  871         call EMIT 
      000458 81               [ 4]  872         ret 
                                    873 
                                    874 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    875 ;       FC-XOFF ( -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                                    876 ;       Send XOFF character 
                                    877 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000459                        878         _HEADER FC_XOFF,7,"FC-XOFF"
      000459 04 46                    1         .word LINK 
                           00045B     2         LINK=.
      00045B 07                       3         .byte 7  
      00045C 46 43 2D 58 4F 46 46     4         .ascii "FC-XOFF"
      000463                          5         FC_XOFF:
      000463 1D 00 02         [ 2]  879         subw x,#CELLL 
      000466 7F               [ 1]  880         clr (x)
      000467 A6 13            [ 1]  881         ld a,#XOFF 
      000469 E7 01            [ 1]  882         ld (1,x),a 
      00046B CD 04 36         [ 4]  883         call EMIT 
      00046E 81               [ 4]  884         ret
                                    885 
                                    886 ;; The kernel
                                    887 
                                    888 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    889 ;       doLIT   ( -- w )
                                    890 ;       Push an inline literal.
                                    891 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00046F                        892 DOLIT:
      00046F 1D 00 02         [ 2]  893 	SUBW X,#2
      000472 16 01            [ 2]  894         ldw y,(1,sp)
      000474 90 FE            [ 2]  895         ldw y,(y)
      000476 FF               [ 2]  896         ldw (x),y
      000477 90 85            [ 2]  897         popw y 
      000479 90 EC 02         [ 2]  898         jp (2,y)
                                    899 
                                    900 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    901 ;       NEXT    ( -- )
                                    902 ;       Code for  single index loop.
                                    903 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00047C                        904         _HEADER DONXT,COMPO+4,"NEXT"
      00047C 04 5B                    1         .word LINK 
                           00047E     2         LINK=.
      00047E 44                       3         .byte COMPO+4  
      00047F 4E 45 58 54              4         .ascii "NEXT"
      000483                          5         DONXT:
      000483 16 03            [ 2]  905 	LDW Y,(3,SP)
      000485 90 5A            [ 2]  906 	DECW Y
      000487 2A 07            [ 1]  907 	JRPL NEX1 ; jump if N=0
      000489 90 85            [ 2]  908 	POPW Y
      00048B 5B 02            [ 2]  909         addw sp,#2
      00048D 90 EC 02         [ 2]  910         JP (2,Y)
      000490                        911 NEX1:
      000490 17 03            [ 2]  912         LDW (3,SP),Y
      000492 90 85            [ 2]  913         POPW Y
      000494 90 FE            [ 2]  914 	LDW Y,(Y)
      000496 90 FC            [ 2]  915 	JP (Y)
                                    916 
                                    917 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    918 ;       ?branch ( f -- )
                                    919 ;       Branch if flag is zero.
                                    920 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                    921 ;       _HEADER QBRAN,COMPO+7,"?BRANCH"        
      000498                        922 QBRAN:	
      000498 90 93            [ 1]  923         LDW Y,X
      00049A 1C 00 02         [ 2]  924 	ADDW X,#2
      00049D 90 FE            [ 2]  925 	LDW Y,(Y)
      00049F 27 13            [ 1]  926         JREQ     BRAN
      0004A1 90 85            [ 2]  927 	POPW Y
      0004A3 90 EC 02         [ 2]  928 	JP (2,Y)
                                    929 
                                    930 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    931 ;  TBRANCH ( f -- )
                                    932 ;  branch if f==TRUE 
                                    933 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    934 ;        _HEADER TBRAN,COMPO+7,"TBRANCH"
      0004A6                        935 TBRAN: 
      0004A6 90 93            [ 1]  936         LDW Y,X 
      0004A8 1C 00 02         [ 2]  937         ADDW X,#2 
      0004AB 90 FE            [ 2]  938         LDW Y,(Y)
      0004AD 26 05            [ 1]  939         JRNE BRAN 
      0004AF 90 85            [ 2]  940         POPW Y 
      0004B1 90 EC 02         [ 2]  941         JP (2,Y)
                                    942 
                                    943 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    944 ;       branch  ( -- )
                                    945 ;       Branch to an inline address.
                                    946 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    947 ;       _HEADER BRAN,COMPO+6,"BRANCH"
      0004B4                        948 BRAN:
      0004B4 90 85            [ 2]  949         POPW Y
      0004B6 90 FE            [ 2]  950 	LDW Y,(Y)
      0004B8 90 FC            [ 2]  951         JP     (Y)
                                    952 
                                    953 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    954 ;       EXECUTE ( ca -- )
                                    955 ;       Execute  word at ca.
                                    956 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004BA                        957         _HEADER EXECU,7,"EXECUTE"
      0004BA 04 7E                    1         .word LINK 
                           0004BC     2         LINK=.
      0004BC 07                       3         .byte 7  
      0004BD 45 58 45 43 55 54 45     4         .ascii "EXECUTE"
      0004C4                          5         EXECU:
      0004C4 90 93            [ 1]  958         LDW Y,X
      0004C6 1C 00 02         [ 2]  959 	ADDW X,#2
      0004C9 90 FE            [ 2]  960 	LDW  Y,(Y)
      0004CB 90 FC            [ 2]  961         JP   (Y)
                                    962 
                           000001   963 OPTIMIZE = 1
                           000001   964 .if OPTIMIZE 
                                    965 ; remplacement de CALL EXIT par 
                                    966 ; le opcode de RET.
                                    967 ; Voir modification au code de ";"
                           000000   968 .else 
                                    969 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    970 ;       EXIT    ( -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                    971 ;       Terminate a colon definition.
                                    972 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    973 ;       _HEADER EXIT,4,"EXIT"
                                    974 EXIT:
                                    975         POPW Y
                                    976         RET
                                    977 .endif 
                                    978 
                                    979 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    980 ;       !       ( w a -- )
                                    981 ;       Pop  data stack to memory.
                                    982 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004CD                        983         _HEADER STORE,1,"!"
      0004CD 04 BC                    1         .word LINK 
                           0004CF     2         LINK=.
      0004CF 01                       3         .byte 1  
      0004D0 21                       4         .ascii "!"
      0004D1                          5         STORE:
      0004D1 90 93            [ 1]  984         LDW Y,X
      0004D3 90 FE            [ 2]  985         LDW Y,(Y)    ;Y=a
      0004D5 89               [ 2]  986         PUSHW X
      0004D6 EE 02            [ 2]  987         LDW X,(2,X) ; x=w 
      0004D8 90 FF            [ 2]  988         LDW (Y),X 
      0004DA 85               [ 2]  989         POPW X  
      0004DB 1C 00 04         [ 2]  990         ADDW X,#4 ; DDROP 
      0004DE 81               [ 4]  991         RET     
                                    992 
                                    993 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    994 ;       @       ( a -- w )
                                    995 ;       Push memory location to stack.
                                    996 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004DF                        997         _HEADER AT,1,"@"
      0004DF 04 CF                    1         .word LINK 
                           0004E1     2         LINK=.
      0004E1 01                       3         .byte 1  
      0004E2 40                       4         .ascii "@"
      0004E3                          5         AT:
      0004E3 90 93            [ 1]  998         LDW Y,X     ;Y = a
      0004E5 90 FE            [ 2]  999         LDW Y,(Y)   ; address 
      0004E7 90 FE            [ 2] 1000         LDW Y,(Y)   ; value 
      0004E9 FF               [ 2] 1001         LDW (X),Y ;w = @Y
      0004EA 81               [ 4] 1002         RET     
                                   1003 
                                   1004 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1005 ;       C!      ( c b -- )
                                   1006 ;       Pop  data stack to byte memory.
                                   1007 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004EB                       1008         _HEADER CSTOR,2,"C!"
      0004EB 04 E1                    1         .word LINK 
                           0004ED     2         LINK=.
      0004ED 02                       3         .byte 2  
      0004EE 43 21                    4         .ascii "C!"
      0004F0                          5         CSTOR:
      0004F0 90 93            [ 1] 1009         LDW Y,X
      0004F2 90 FE            [ 2] 1010 	LDW Y,(Y)    ;Y=b
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      0004F4 E6 03            [ 1] 1011         LD A,(3,X)    ;D = c
      0004F6 90 F7            [ 1] 1012         LD  (Y),A     ;store c at b
      0004F8 1C 00 04         [ 2] 1013 	ADDW X,#4 ; DDROP 
      0004FB 81               [ 4] 1014         RET     
                                   1015 
                                   1016 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1017 ;       C@      ( b -- c )
                                   1018 ;       Push byte in memory to  stack.
                                   1019 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004FC                       1020         _HEADER CAT,2,"C@"
      0004FC 04 ED                    1         .word LINK 
                           0004FE     2         LINK=.
      0004FE 02                       3         .byte 2  
      0004FF 43 40                    4         .ascii "C@"
      000501                          5         CAT:
      000501 90 93            [ 1] 1021         LDW Y,X     ;Y=b
      000503 90 FE            [ 2] 1022         LDW Y,(Y)
      000505 90 F6            [ 1] 1023         LD A,(Y)
      000507 E7 01            [ 1] 1024         LD (1,X),A
      000509 7F               [ 1] 1025         CLR (X)
      00050A 81               [ 4] 1026         RET     
                                   1027 
                                   1028 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1029 ;       RP@     ( -- a )
                                   1030 ;       Push current RP to data stack.
                                   1031 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00050B                       1032         _HEADER RPAT,3,"RP@"
      00050B 04 FE                    1         .word LINK 
                           00050D     2         LINK=.
      00050D 03                       3         .byte 3  
      00050E 52 50 40                 4         .ascii "RP@"
      000511                          5         RPAT:
      000511 90 96            [ 1] 1033         LDW Y,SP    ;save return addr
      000513 1D 00 02         [ 2] 1034         SUBW X,#2
      000516 FF               [ 2] 1035         LDW (X),Y
      000517 81               [ 4] 1036         RET     
                                   1037 
                                   1038 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1039 ;       RP!     ( a -- )
                                   1040 ;       Set  return stack pointer.
                                   1041 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000518                       1042         _HEADER RPSTO,COMPO+3,"RP!"
      000518 05 0D                    1         .word LINK 
                           00051A     2         LINK=.
      00051A 43                       3         .byte COMPO+3  
      00051B 52 50 21                 4         .ascii "RP!"
      00051E                          5         RPSTO:
      00051E 90 85            [ 2] 1043         POPW Y
      000520 90 BF 26         [ 2] 1044         LDW YTEMP,Y
      000523 90 93            [ 1] 1045         LDW Y,X
      000525 90 FE            [ 2] 1046         LDW Y,(Y)
      000527 90 94            [ 1] 1047         LDW SP,Y
      000529 1C 00 02         [ 2] 1048         ADDW X,#CELLL ; a was not dropped, Picatout 2020-05-24
      00052C 92 CC 26         [ 5] 1049         JP [YTEMP]
                                   1050 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                                   1051 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1052 ;       R>      ( -- w )
                                   1053 ;       Pop return stack to data stack.
                                   1054 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00052F                       1055         _HEADER RFROM,2,"R>"
      00052F 05 1A                    1         .word LINK 
                           000531     2         LINK=.
      000531 02                       3         .byte 2  
      000532 52 3E                    4         .ascii "R>"
      000534                          5         RFROM:
      000534 1D 00 02         [ 2] 1056         SUBW X,#CELLL 
      000537 16 03            [ 2] 1057         LDW Y,(3,SP)
      000539 FF               [ 2] 1058         LDW (X),Y 
      00053A 90 85            [ 2] 1059         POPW Y 
      00053C 5B 02            [ 2] 1060         ADDW SP,#2 
      00053E 90 FC            [ 2] 1061         JP (Y)
                                   1062 
                                   1063 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1064 ;       R@      ( -- w )
                                   1065 ;       Copy top of return stack to stack.
                                   1066 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000540                       1067         _HEADER RAT,2,"R@"
      000540 05 31                    1         .word LINK 
                           000542     2         LINK=.
      000542 02                       3         .byte 2  
      000543 52 40                    4         .ascii "R@"
      000545                          5         RAT:
      000545 16 03            [ 2] 1068         ldw y,(3,sp)
      000547 1D 00 02         [ 2] 1069         subw x,#CELLL 
      00054A FF               [ 2] 1070         ldw (x),y 
      00054B 81               [ 4] 1071         ret 
                                   1072 
                                   1073 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1074 ;       LOCAL ( n -- )
                                   1075 ;       reserve n slots on return stack
                                   1076 ;       for local variables 
                                   1077 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00054C                       1078         _HEADER LOCAL,5,"LOCAL"
      00054C 05 42                    1         .word LINK 
                           00054E     2         LINK=.
      00054E 05                       3         .byte 5  
      00054F 4C 4F 43 41 4C           4         .ascii "LOCAL"
      000554                          5         LOCAL:
      000554 90 85            [ 2] 1079         POPW Y  
      000556 90 BF 26         [ 2] 1080         LDW YTEMP,Y ; RETURN ADDRESS 
      000559 90 5F            [ 1] 1081         CLRW Y 
      00055B E6 01            [ 1] 1082         LD A,(1,X)
      00055D 90 97            [ 1] 1083         LD YL,A 
      00055F A6 02            [ 1] 1084         LD A,#CELLL 
      000561 90 42            [ 4] 1085         MUL Y,A 
      000563 90 BF 24         [ 2] 1086         LDw XTEMP,Y
      000566 90 96            [ 1] 1087         LDW Y,SP 
      000568 72 B2 00 24      [ 2] 1088         SUBW Y,XTEMP
      00056C 90 94            [ 1] 1089         LDW SP,Y 
      00056E 1C 00 02         [ 2] 1090         ADDW X,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      000571 92 CC 26         [ 5] 1091         JP [YTEMP]
                                   1092 
                                   1093 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1094 ;       NRDROP ( n -- )
                                   1095 ;       drop n elements from rstack
                                   1096 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000574                       1097         _HEADER NRDROP,6,"NRDROP" 
      000574 05 4E                    1         .word LINK 
                           000576     2         LINK=.
      000576 06                       3         .byte 6  
      000577 4E 52 44 52 4F 50        4         .ascii "NRDROP"
      00057D                          5         NRDROP:
      00057D 90 85            [ 2] 1098         POPW Y 
      00057F 90 BF 26         [ 2] 1099         LDW YTEMP,Y ; RETOURN ADDRESS 
      000582 90 5F            [ 1] 1100         CLRW Y 
      000584 E6 01            [ 1] 1101         LD A,(1,X)
      000586 90 97            [ 1] 1102         LD YL,A  
      000588 A6 02            [ 1] 1103         LD A,#CELLL 
      00058A 90 42            [ 4] 1104         MUL Y,A 
      00058C 90 BF 24         [ 2] 1105         LDW XTEMP,Y 
      00058F 90 96            [ 1] 1106         LDW Y,SP 
      000591 72 B9 00 24      [ 2] 1107         ADDW Y,XTEMP 
      000595 90 94            [ 1] 1108         LDW SP,Y  
      000597 1C 00 02         [ 2] 1109         ADDW X,#CELLL 
      00059A 92 CC 26         [ 5] 1110         JP [YTEMP]
                                   1111 
                                   1112 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1113 ;      NR@ ( n -- w)
                                   1114 ;      fetch nth element ofr return stack 
                                   1115 ;      n==0 is same as R@ 
                                   1116 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00059D                       1117         _HEADER NRAT,3,"NR@"
      00059D 05 76                    1         .word LINK 
                           00059F     2         LINK=.
      00059F 03                       3         .byte 3  
      0005A0 4E 52 40                 4         .ascii "NR@"
      0005A3                          5         NRAT:
      0005A3 90 5F            [ 1] 1118         CLRW Y 
      0005A5 E6 01            [ 1] 1119         LD A,(1,X)
      0005A7 90 97            [ 1] 1120         LD YL,A 
      0005A9 A6 02            [ 1] 1121         LD A,#CELLL 
      0005AB 90 42            [ 4] 1122         MUL Y,A 
      0005AD 90 BF 26         [ 2] 1123         LDW YTEMP,Y 
      0005B0 90 96            [ 1] 1124         LDW Y,SP 
      0005B2 72 A9 00 03      [ 2] 1125         ADDW Y,#3 
      0005B6 72 B9 00 26      [ 2] 1126         ADDW Y,YTEMP 
      0005BA 90 FE            [ 2] 1127         LDW Y,(Y)
      0005BC FF               [ 2] 1128         LDW (X),Y 
      0005BD 81               [ 4] 1129         RET 
                                   1130 
                                   1131 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1132 ;       NR! ( w n --  )
                                   1133 ;       store w on nth position of 
                                   1134 ;       return stack 
                                   1135 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      0005BE                       1136         _HEADER NRSTO,3,"NR!"
      0005BE 05 9F                    1         .word LINK 
                           0005C0     2         LINK=.
      0005C0 03                       3         .byte 3  
      0005C1 4E 52 21                 4         .ascii "NR!"
      0005C4                          5         NRSTO:
      0005C4 90 96            [ 1] 1137         LDW Y,SP
      0005C6 72 A9 00 03      [ 2] 1138         ADDW Y,#3 
      0005CA 90 BF 26         [ 2] 1139         LDW YTEMP,Y 
      0005CD 90 5F            [ 1] 1140         CLRW Y 
      0005CF E6 01            [ 1] 1141         LD A,(1,X)
      0005D1 90 97            [ 1] 1142         LD YL,A 
      0005D3 A6 02            [ 1] 1143         LD A,#CELLL 
      0005D5 90 42            [ 4] 1144         MUL Y,A 
      0005D7 72 B9 00 26      [ 2] 1145         ADDW Y,YTEMP
      0005DB 89               [ 2] 1146         PUSHW X 
      0005DC EE 02            [ 2] 1147         LDW X,(2,X)
      0005DE 90 FF            [ 2] 1148         LDW (Y),X
      0005E0 85               [ 2] 1149         POPW X 
      0005E1 1C 00 04         [ 2] 1150         ADDW X,#2*CELLL 
      0005E4 81               [ 4] 1151         RET 
                                   1152 
                                   1153 
                                   1154 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1155 ;       >R      ( w -- )
                                   1156 ;       Push data stack to return stack.
                                   1157 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005E5                       1158         _HEADER TOR,COMPO+2,">R"
      0005E5 05 C0                    1         .word LINK 
                           0005E7     2         LINK=.
      0005E7 42                       3         .byte COMPO+2  
      0005E8 3E 52                    4         .ascii ">R"
      0005EA                          5         TOR:
      0005EA 90 85            [ 2] 1159         POPW Y    ;save return addr
      0005EC 90 BF 26         [ 2] 1160         LDW YTEMP,Y
      0005EF 90 93            [ 1] 1161         LDW Y,X
      0005F1 90 FE            [ 2] 1162         LDW Y,(Y)  ; W
      0005F3 90 89            [ 2] 1163         PUSHW Y    ;W >R 
      0005F5 1C 00 02         [ 2] 1164         ADDW X,#2
      0005F8 92 CC 26         [ 5] 1165         JP [YTEMP]
                                   1166 
                                   1167 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1168 ;       SP@     ( -- a )
                                   1169 ;       Push current stack pointer.
                                   1170 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005FB                       1171         _HEADER SPAT,3,"SP@"
      0005FB 05 E7                    1         .word LINK 
                           0005FD     2         LINK=.
      0005FD 03                       3         .byte 3  
      0005FE 53 50 40                 4         .ascii "SP@"
      000601                          5         SPAT:
      000601 90 93            [ 1] 1172 	LDW Y,X
      000603 1D 00 02         [ 2] 1173         SUBW X,#2
      000606 FF               [ 2] 1174 	LDW (X),Y
      000607 81               [ 4] 1175         RET     
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                   1176 
                                   1177 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1178 ;       SP!     ( a -- )
                                   1179 ;       Set  data stack pointer.
                                   1180 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000608                       1181         _HEADER SPSTO,3,"SP!"
      000608 05 FD                    1         .word LINK 
                           00060A     2         LINK=.
      00060A 03                       3         .byte 3  
      00060B 53 50 21                 4         .ascii "SP!"
      00060E                          5         SPSTO:
      00060E FE               [ 2] 1182         LDW     X,(X)     ;X = a
      00060F 81               [ 4] 1183         RET     
                                   1184 
                                   1185 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1186 ;       DROP    ( w -- )
                                   1187 ;       Discard top stack item.
                                   1188 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000610                       1189         _HEADER DROP,4,"DROP"
      000610 06 0A                    1         .word LINK 
                           000612     2         LINK=.
      000612 04                       3         .byte 4  
      000613 44 52 4F 50              4         .ascii "DROP"
      000617                          5         DROP:
      000617 1C 00 02         [ 2] 1190         ADDW X,#2     
      00061A 81               [ 4] 1191         RET     
                                   1192 
                                   1193 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1194 ;       DUP     ( w -- w w )
                                   1195 ;       Duplicate  top stack item.
                                   1196 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00061B                       1197         _HEADER DUPP,3,"DUP"
      00061B 06 12                    1         .word LINK 
                           00061D     2         LINK=.
      00061D 03                       3         .byte 3  
      00061E 44 55 50                 4         .ascii "DUP"
      000621                          5         DUPP:
      000621 90 93            [ 1] 1198 	LDW Y,X
      000623 1D 00 02         [ 2] 1199         SUBW X,#2
      000626 90 FE            [ 2] 1200 	LDW Y,(Y)
      000628 FF               [ 2] 1201 	LDW (X),Y
      000629 81               [ 4] 1202         RET     
                                   1203 
                                   1204 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1205 ;       SWAP    ( w1 w2 -- w2 w1 )
                                   1206 ;       Exchange top two stack items.
                                   1207 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00062A                       1208         _HEADER SWAPP,4,"SWAP"
      00062A 06 1D                    1         .word LINK 
                           00062C     2         LINK=.
      00062C 04                       3         .byte 4  
      00062D 53 57 41 50              4         .ascii "SWAP"
      000631                          5         SWAPP:
      000631 90 93            [ 1] 1209         LDW Y,X
      000633 90 FE            [ 2] 1210         LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      000635 90 89            [ 2] 1211         PUSHW Y  
      000637 90 93            [ 1] 1212         LDW Y,X
      000639 90 EE 02         [ 2] 1213         LDW Y,(2,Y)
      00063C FF               [ 2] 1214         LDW (X),Y
      00063D 90 85            [ 2] 1215         POPW Y 
      00063F EF 02            [ 2] 1216         LDW (2,X),Y
      000641 81               [ 4] 1217         RET     
                                   1218 
                                   1219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1220 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                   1221 ;       Copy second stack item to top.
                                   1222 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000642                       1223         _HEADER OVER,4,"OVER"
      000642 06 2C                    1         .word LINK 
                           000644     2         LINK=.
      000644 04                       3         .byte 4  
      000645 4F 56 45 52              4         .ascii "OVER"
      000649                          5         OVER:
      000649 1D 00 02         [ 2] 1224         SUBW X,#2
      00064C 90 93            [ 1] 1225         LDW Y,X
      00064E 90 EE 04         [ 2] 1226         LDW Y,(4,Y)
      000651 FF               [ 2] 1227         LDW (X),Y
      000652 81               [ 4] 1228         RET     
                                   1229 
                                   1230 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1231 ;       0<      ( n -- t )
                                   1232 ;       Return true if n is negative.
                                   1233 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000653                       1234         _HEADER ZLESS,2,"0<"
      000653 06 44                    1         .word LINK 
                           000655     2         LINK=.
      000655 02                       3         .byte 2  
      000656 30 3C                    4         .ascii "0<"
      000658                          5         ZLESS:
      000658 A6 FF            [ 1] 1235         LD A,#0xFF
      00065A 90 93            [ 1] 1236         LDW Y,X
      00065C 90 FE            [ 2] 1237         LDW Y,(Y)
      00065E 2B 01            [ 1] 1238         JRMI     ZL1
      000660 4F               [ 1] 1239         CLR A   ;false
      000661 F7               [ 1] 1240 ZL1:    LD     (X),A
      000662 E7 01            [ 1] 1241         LD (1,X),A
      000664 81               [ 4] 1242 	RET     
                                   1243 
                                   1244 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1245 ;       0= ( n -- f )
                                   1246 ;   n==0?
                                   1247 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000665                       1248         _HEADER ZEQUAL,2,"0="
      000665 06 55                    1         .word LINK 
                           000667     2         LINK=.
      000667 02                       3         .byte 2  
      000668 30 3D                    4         .ascii "0="
      00066A                          5         ZEQUAL:
      00066A A6 FF            [ 1] 1249         LD A,#0XFF 
      00066C 90 93            [ 1] 1250         LDW Y,X 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      00066E 90 FE            [ 2] 1251         LDW Y,(Y)
      000670 27 02            [ 1] 1252         JREQ ZEQU1 
      000672 A6 00            [ 1] 1253         LD A,#0 
      000674                       1254 ZEQU1:  
      000674 F7               [ 1] 1255         LD (X),A 
      000675 E7 01            [ 1] 1256         LD (1,X),A         
      000677 81               [ 4] 1257         RET 
                                   1258 
                                   1259 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1260 ;       AND     ( w w -- w )
                                   1261 ;       Bitwise AND.
                                   1262 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000678                       1263         _HEADER ANDD,3,"AND"
      000678 06 67                    1         .word LINK 
                           00067A     2         LINK=.
      00067A 03                       3         .byte 3  
      00067B 41 4E 44                 4         .ascii "AND"
      00067E                          5         ANDD:
      00067E F6               [ 1] 1264         LD  A,(X)    ;D=w
      00067F E4 02            [ 1] 1265         AND A,(2,X)
      000681 E7 02            [ 1] 1266         LD (2,X),A
      000683 E6 01            [ 1] 1267         LD A,(1,X)
      000685 E4 03            [ 1] 1268         AND A,(3,X)
      000687 E7 03            [ 1] 1269         LD (3,X),A
      000689 1C 00 02         [ 2] 1270         ADDW X,#2
      00068C 81               [ 4] 1271         RET
                                   1272 
                                   1273 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1274 ;       OR      ( w w -- w )
                                   1275 ;       Bitwise inclusive OR.
                                   1276 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00068D                       1277         _HEADER ORR,2,"OR"
      00068D 06 7A                    1         .word LINK 
                           00068F     2         LINK=.
      00068F 02                       3         .byte 2  
      000690 4F 52                    4         .ascii "OR"
      000692                          5         ORR:
      000692 F6               [ 1] 1278         LD A,(X)    ;D=w
      000693 EA 02            [ 1] 1279         OR A,(2,X)
      000695 E7 02            [ 1] 1280         LD (2,X),A
      000697 E6 01            [ 1] 1281         LD A,(1,X)
      000699 EA 03            [ 1] 1282         OR A,(3,X)
      00069B E7 03            [ 1] 1283         LD (3,X),A
      00069D 1C 00 02         [ 2] 1284         ADDW X,#2
      0006A0 81               [ 4] 1285         RET
                                   1286 
                                   1287 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1288 ;       XOR     ( w w -- w )
                                   1289 ;       Bitwise exclusive OR.
                                   1290 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006A1                       1291         _HEADER XORR,3,"XOR"
      0006A1 06 8F                    1         .word LINK 
                           0006A3     2         LINK=.
      0006A3 03                       3         .byte 3  
      0006A4 58 4F 52                 4         .ascii "XOR"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      0006A7                          5         XORR:
      0006A7 F6               [ 1] 1292         LD A,(X)    ;D=w
      0006A8 E8 02            [ 1] 1293         XOR A,(2,X)
      0006AA E7 02            [ 1] 1294         LD (2,X),A
      0006AC E6 01            [ 1] 1295         LD A,(1,X)
      0006AE E8 03            [ 1] 1296         XOR A,(3,X)
      0006B0 E7 03            [ 1] 1297         LD (3,X),A
      0006B2 1C 00 02         [ 2] 1298         ADDW X,#2
      0006B5 81               [ 4] 1299         RET
                                   1300 
                                   1301 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1302 ;       UM+     ( u u -- udsum )
                                   1303 ;       Add two unsigned single
                                   1304 ;       and return a double sum.
                                   1305 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006B6                       1306         _HEADER UPLUS,3,"UM+"
      0006B6 06 A3                    1         .word LINK 
                           0006B8     2         LINK=.
      0006B8 03                       3         .byte 3  
      0006B9 55 4D 2B                 4         .ascii "UM+"
      0006BC                          5         UPLUS:
      0006BC A6 01            [ 1] 1307         LD A,#1
      0006BE 90 93            [ 1] 1308         LDW Y,X
      0006C0 90 EE 02         [ 2] 1309         LDW Y,(2,Y)
      0006C3 90 BF 26         [ 2] 1310         LDW YTEMP,Y
      0006C6 90 93            [ 1] 1311         LDW Y,X
      0006C8 90 FE            [ 2] 1312         LDW Y,(Y)
      0006CA 72 B9 00 26      [ 2] 1313         ADDW Y,YTEMP
      0006CE EF 02            [ 2] 1314         LDW (2,X),Y
      0006D0 25 01            [ 1] 1315         JRC     UPL1
      0006D2 4F               [ 1] 1316         CLR A
      0006D3 E7 01            [ 1] 1317 UPL1:   LD     (1,X),A
      0006D5 7F               [ 1] 1318         CLR (X)
      0006D6 81               [ 4] 1319         RET
                                   1320 
                                   1321 ;; System and user variables
                                   1322 
                                   1323 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1324 ;       doVAR   ( -- a )
                                   1325 ;       run time code 
                                   1326 ;       for VARIABLE and CREATE.
                                   1327 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1328 ;       HEADER DOVAR,COMPO+5,"DOVAR"
      0006D7                       1329 DOVAR:
      0006D7 1D 00 02         [ 2] 1330 	SUBW X,#2
      0006DA 90 85            [ 2] 1331         POPW Y    ;get return addr (pfa)
      0006DC 90 FE            [ 2] 1332         LDW Y,(Y) ; indirect address 
      0006DE FF               [ 2] 1333         LDW (X),Y    ;push on stack
      0006DF 81               [ 4] 1334         RET     ;go to RET of EXEC
                                   1335 
                                   1336 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1337 ;       BASE    ( -- a )
                                   1338 ;       Radix base for numeric I/O.
                                   1339 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006E0                       1340         _HEADER BASE,4,"BASE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      0006E0 06 B8                    1         .word LINK 
                           0006E2     2         LINK=.
      0006E2 04                       3         .byte 4  
      0006E3 42 41 53 45              4         .ascii "BASE"
      0006E7                          5         BASE:
      0006E7 90 AE 00 06      [ 2] 1341 	LDW Y,#UBASE 
      0006EB 1D 00 02         [ 2] 1342 	SUBW X,#2
      0006EE FF               [ 2] 1343         LDW (X),Y
      0006EF 81               [ 4] 1344         RET
                                   1345 
                                   1346 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1347 ;       tmp     ( -- a )
                                   1348 ;       A temporary storage.
                                   1349 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006F0                       1350         _HEADER TEMP,3,"TMP"
      0006F0 06 E2                    1         .word LINK 
                           0006F2     2         LINK=.
      0006F2 03                       3         .byte 3  
      0006F3 54 4D 50                 4         .ascii "TMP"
      0006F6                          5         TEMP:
      0006F6 90 AE 00 0A      [ 2] 1351 	LDW Y,#UTMP
      0006FA 1D 00 02         [ 2] 1352 	SUBW X,#2
      0006FD FF               [ 2] 1353         LDW (X),Y
      0006FE 81               [ 4] 1354         RET
                                   1355 
                                   1356 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1357 ;       >IN     ( -- a )
                                   1358 ;        Hold parsing pointer.
                                   1359 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006FF                       1360         _HEADER INN,3,">IN"
      0006FF 06 F2                    1         .word LINK 
                           000701     2         LINK=.
      000701 03                       3         .byte 3  
      000702 3E 49 4E                 4         .ascii ">IN"
      000705                          5         INN:
      000705 90 AE 00 0C      [ 2] 1361 	LDW Y,#UINN 
      000709 1D 00 02         [ 2] 1362 	SUBW X,#2
      00070C FF               [ 2] 1363         LDW (X),Y
      00070D 81               [ 4] 1364         RET
                                   1365 
                                   1366 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1367 ;       #TIB    ( -- a )
                                   1368 ;       Count in terminal input 
                                   1369 ;       buffer.
                                   1370 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00070E                       1371         _HEADER NTIB,4,"#TIB"
      00070E 07 01                    1         .word LINK 
                           000710     2         LINK=.
      000710 04                       3         .byte 4  
      000711 23 54 49 42              4         .ascii "#TIB"
      000715                          5         NTIB:
      000715 90 AE 00 0E      [ 2] 1372 	LDW Y,#UCTIB 
      000719 1D 00 02         [ 2] 1373 	SUBW X,#2
      00071C FF               [ 2] 1374         LDW (X),Y
      00071D 81               [ 4] 1375         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                   1376 
                                   1377 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1378 ;       TBUF ( -- a )
                                   1379 ;       address of 128 bytes 
                                   1380 ;       transaction buffer
                                   1381 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00071E                       1382         _HEADER TBUF,4,"TBUF"
      00071E 07 10                    1         .word LINK 
                           000720     2         LINK=.
      000720 04                       3         .byte 4  
      000721 54 42 55 46              4         .ascii "TBUF"
      000725                          5         TBUF:
      000725 90 AE 16 80      [ 2] 1383         ldw y,#ROWBUFF
      000729 1D 00 02         [ 2] 1384         subw x,#CELLL
      00072C FF               [ 2] 1385         ldw (x),y 
      00072D 81               [ 4] 1386         ret 
                                   1387 
                                   1388 ; systeme variable 
                                   1389 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1390 ; compilation destination 
                                   1391 ; TFLASH ( -- A )
                                   1392 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00072E                       1393         _HEADER TFLASH,6,"TFLASH"
      00072E 07 20                    1         .word LINK 
                           000730     2         LINK=.
      000730 06                       3         .byte 6  
      000731 54 46 4C 41 53 48        4         .ascii "TFLASH"
      000737                          5         TFLASH:
      000737 1D 00 02         [ 2] 1394         subw x,#CELLL 
      00073A 90 AE 00 20      [ 2] 1395         ldw y,#UTFLASH
      00073E FF               [ 2] 1396         ldw (x),y 
      00073F 81               [ 4] 1397         ret 
                                   1398 
                                   1399 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1400 ;       "EVAL   ( -- a )
                                   1401 ;       Execution vector of EVAL.
                                   1402 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000740                       1403         _HEADER TEVAL,5,"'EVAL"
      000740 07 30                    1         .word LINK 
                           000742     2         LINK=.
      000742 05                       3         .byte 5  
      000743 27 45 56 41 4C           4         .ascii "'EVAL"
      000748                          5         TEVAL:
      000748 90 AE 00 12      [ 2] 1404 	LDW Y,#UINTER 
      00074C 1D 00 02         [ 2] 1405 	SUBW X,#2
      00074F FF               [ 2] 1406         LDW (X),Y
      000750 81               [ 4] 1407         RET
                                   1408 
                                   1409 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1410 ;       HLD     ( -- a )
                                   1411 ;       Hold a pointer of output
                                   1412 ;        string.
                                   1413 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000751                       1414         _HEADER HLD,3,"HLD"
      000751 07 42                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                           000753     2         LINK=.
      000753 03                       3         .byte 3  
      000754 48 4C 44                 4         .ascii "HLD"
      000757                          5         HLD:
      000757 90 AE 00 14      [ 2] 1415 	LDW Y,#UHLD 
      00075B 1D 00 02         [ 2] 1416 	SUBW X,#2
      00075E FF               [ 2] 1417         LDW (X),Y
      00075F 81               [ 4] 1418         RET
                                   1419 
                                   1420 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1421 ;       CONTEXT ( -- a )
                                   1422 ;       Start vocabulary search.
                                   1423 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000760                       1424         _HEADER CNTXT,7,"CONTEXT"
      000760 07 53                    1         .word LINK 
                           000762     2         LINK=.
      000762 07                       3         .byte 7  
      000763 43 4F 4E 54 45 58 54     4         .ascii "CONTEXT"
      00076A                          5         CNTXT:
      00076A 90 AE 00 16      [ 2] 1425 	LDW Y,#UCNTXT
      00076E 1D 00 02         [ 2] 1426 	SUBW X,#2
      000771 FF               [ 2] 1427         LDW (X),Y
      000772 81               [ 4] 1428         RET
                                   1429 
                                   1430 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1431 ;       VP      ( -- a )
                                   1432 ;       Point to top of variables
                                   1433 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000773                       1434         _HEADER VPP,2,"VP"
      000773 07 62                    1         .word LINK 
                           000775     2         LINK=.
      000775 02                       3         .byte 2  
      000776 56 50                    4         .ascii "VP"
      000778                          5         VPP:
      000778 90 AE 00 18      [ 2] 1435 	LDW Y,#UVP 
      00077C 1D 00 02         [ 2] 1436 	SUBW X,#2
      00077F FF               [ 2] 1437         LDW (X),Y
      000780 81               [ 4] 1438         RET
                                   1439 
                                   1440 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1441 ;       CP    ( -- a )
                                   1442 ;       Pointer to top of FLASH 
                                   1443 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000781                       1444         _HEADER CPP,2,"CP"
      000781 07 75                    1         .word LINK 
                           000783     2         LINK=.
      000783 02                       3         .byte 2  
      000784 43 50                    4         .ascii "CP"
      000786                          5         CPP:
      000786 90 AE 00 1A      [ 2] 1445         ldw y,#UCP 
      00078A 1D 00 02         [ 2] 1446         subw x,#CELLL 
      00078D FF               [ 2] 1447         ldw (x),y 
      00078E 81               [ 4] 1448         ret                
                                   1449 
                                   1450 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                                   1451 ;       LAST    ( -- a )
                                   1452 ;       Point to last name in 
                                   1453 ;       dictionary.
                                   1454 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00078F                       1455         _HEADER LAST,4,"LAST"
      00078F 07 83                    1         .word LINK 
                           000791     2         LINK=.
      000791 04                       3         .byte 4  
      000792 4C 41 53 54              4         .ascii "LAST"
      000796                          5         LAST:
      000796 90 AE 00 1C      [ 2] 1456 	LDW Y,#ULAST 
      00079A 1D 00 02         [ 2] 1457 	SUBW X,#2
      00079D FF               [ 2] 1458         LDW (X),Y
      00079E 81               [ 4] 1459         RET
                                   1460 
                                   1461 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1462 ; address of system variable URLAST 
                                   1463 ;       RAMLAST ( -- a )
                                   1464 ; RAM dictionary context 
                                   1465 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00079F                       1466         _HEADER RAMLAST,7,"RAMLAST"
      00079F 07 91                    1         .word LINK 
                           0007A1     2         LINK=.
      0007A1 07                       3         .byte 7  
      0007A2 52 41 4D 4C 41 53 54     4         .ascii "RAMLAST"
      0007A9                          5         RAMLAST:
      0007A9 90 AE 00 22      [ 2] 1467         ldw y,#URLAST 
      0007AD 1D 00 02         [ 2] 1468         subw x,#CELLL 
      0007B0 FF               [ 2] 1469         ldw (x),y 
      0007B1 81               [ 4] 1470         ret 
                                   1471 
                                   1472 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1473 ;       OFFSET ( -- a )
                                   1474 ;       address of system 
                                   1475 ;       variable OFFSET 
                                   1476 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007B2                       1477         _HEADER OFFSET,6,"OFFSET"
      0007B2 07 A1                    1         .word LINK 
                           0007B4     2         LINK=.
      0007B4 06                       3         .byte 6  
      0007B5 4F 46 46 53 45 54        4         .ascii "OFFSET"
      0007BB                          5         OFFSET:
      0007BB 1D 00 02         [ 2] 1478         subw x,#CELLL
      0007BE 90 AE 00 1E      [ 2] 1479         ldw y,#UOFFSET 
      0007C2 FF               [ 2] 1480         ldw (x),y 
      0007C3 81               [ 4] 1481         ret 
                                   1482 
                                   1483 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1484 ; adjust jump address 
                                   1485 ;  adding OFFSET
                                   1486 ; ADR-ADJ ( a -- a+offset )
                                   1487 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007C4                       1488 ADRADJ: 
      0007C4 CD 07 BB         [ 4] 1489         call OFFSET 
      0007C7 CD 04 E3         [ 4] 1490         call AT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      0007CA CC 08 46         [ 2] 1491         jp PLUS 
                                   1492 
                                   1493 
                                   1494 ;; Common functions
                                   1495 
                                   1496 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1497 ;       ?DUP    ( w -- w w | 0 )
                                   1498 ;       Dup tos if its is not zero.
                                   1499 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007CD                       1500         _HEADER QDUP,4,"?DUP"
      0007CD 07 B4                    1         .word LINK 
                           0007CF     2         LINK=.
      0007CF 04                       3         .byte 4  
      0007D0 3F 44 55 50              4         .ascii "?DUP"
      0007D4                          5         QDUP:
      0007D4 90 93            [ 1] 1501         LDW Y,X
      0007D6 90 FE            [ 2] 1502 	LDW Y,(Y)
      0007D8 27 04            [ 1] 1503         JREQ     QDUP1
      0007DA 1D 00 02         [ 2] 1504 	SUBW X,#2
      0007DD FF               [ 2] 1505         LDW (X),Y
      0007DE 81               [ 4] 1506 QDUP1:  RET
                                   1507 
                                   1508 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1509 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1510 ;       Rot 3rd item to top.
                                   1511 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007DF                       1512         _HEADER ROT,3,"ROT"
      0007DF 07 CF                    1         .word LINK 
                           0007E1     2         LINK=.
      0007E1 03                       3         .byte 3  
      0007E2 52 4F 54                 4         .ascii "ROT"
      0007E5                          5         ROT:
      0007E5 90 93            [ 1] 1513         ldw y,x 
      0007E7 90 FE            [ 2] 1514         ldw y,(y)
      0007E9 90 89            [ 2] 1515         pushw y 
      0007EB 90 93            [ 1] 1516         ldw y,x 
      0007ED 90 EE 04         [ 2] 1517         ldw y,(4,y)
      0007F0 FF               [ 2] 1518         ldw (x),y 
      0007F1 90 93            [ 1] 1519         ldw y,x 
      0007F3 90 EE 02         [ 2] 1520         ldw y,(2,y)
      0007F6 EF 04            [ 2] 1521         ldw (4,x),y 
      0007F8 90 85            [ 2] 1522         popw y 
      0007FA EF 02            [ 2] 1523         ldw (2,x),y
      0007FC 81               [ 4] 1524         ret 
                                   1525 
                                   1526 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1527 ;    <ROT ( n1 n2 n3 -- n3 n1 n2 )
                                   1528 ;    rotate left 3 top elements 
                                   1529 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007FD                       1530     _HEADER NROT,4,"<ROT"
      0007FD 07 E1                    1         .word LINK 
                           0007FF     2         LINK=.
      0007FF 04                       3         .byte 4  
      000800 3C 52 4F 54              4         .ascii "<ROT"
      000804                          5         NROT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000804 90 93            [ 1] 1531     LDW Y,X 
      000806 90 FE            [ 2] 1532     LDW Y,(Y)
      000808 90 BF 26         [ 2] 1533     LDW YTEMP,Y ; n3  
      00080B 90 93            [ 1] 1534     LDW Y,X 
      00080D 90 EE 02         [ 2] 1535     LDW Y,(2,Y) ; Y = n2 
      000810 FF               [ 2] 1536     LDW (X),Y   ; TOS = n2 
      000811 90 93            [ 1] 1537     LDW Y,X    
      000813 90 EE 04         [ 2] 1538     LDW Y,(4,Y) ; Y = n1 
      000816 EF 02            [ 2] 1539     LDW (2,X),Y ;   = n1 
      000818 90 BE 26         [ 2] 1540     LDW Y,YTEMP 
      00081B EF 04            [ 2] 1541     LDW (4,X),Y ; = n3 
      00081D 81               [ 4] 1542     RET 
                                   1543 
                                   1544 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1545 ;       2DROP   ( w w -- )
                                   1546 ;       Discard two items on stack.
                                   1547 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00081E                       1548         _HEADER DDROP,5,"2DROP"
      00081E 07 FF                    1         .word LINK 
                           000820     2         LINK=.
      000820 05                       3         .byte 5  
      000821 32 44 52 4F 50           4         .ascii "2DROP"
      000826                          5         DDROP:
      000826 1C 00 04         [ 2] 1549         ADDW X,#4
      000829 81               [ 4] 1550         RET
                                   1551 
                                   1552 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1553 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1554 ;       Duplicate top two items.
                                   1555 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00082A                       1556         _HEADER DDUP,4,"2DUP"
      00082A 08 20                    1         .word LINK 
                           00082C     2         LINK=.
      00082C 04                       3         .byte 4  
      00082D 32 44 55 50              4         .ascii "2DUP"
      000831                          5         DDUP:
      000831 1D 00 04         [ 2] 1557         SUBW X,#4
      000834 90 93            [ 1] 1558         LDW Y,X
      000836 90 EE 06         [ 2] 1559         LDW Y,(6,Y)
      000839 EF 02            [ 2] 1560         LDW (2,X),Y
      00083B 90 93            [ 1] 1561         LDW Y,X
      00083D 90 EE 04         [ 2] 1562         LDW Y,(4,Y)
      000840 FF               [ 2] 1563         LDW (X),Y
      000841 81               [ 4] 1564         RET
                                   1565 
                                   1566 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1567 ;       +       ( w w -- sum )
                                   1568 ;       Add top two items.
                                   1569 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000842                       1570         _HEADER PLUS,1,"+"
      000842 08 2C                    1         .word LINK 
                           000844     2         LINK=.
      000844 01                       3         .byte 1  
      000845 2B                       4         .ascii "+"
      000846                          5         PLUS:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000846 90 93            [ 1] 1571         LDW Y,X
      000848 90 FE            [ 2] 1572         LDW Y,(Y)
      00084A 90 BF 26         [ 2] 1573         LDW YTEMP,Y
      00084D 1C 00 02         [ 2] 1574         ADDW X,#2
      000850 90 93            [ 1] 1575         LDW Y,X
      000852 90 FE            [ 2] 1576         LDW Y,(Y)
      000854 72 B9 00 26      [ 2] 1577         ADDW Y,YTEMP
      000858 FF               [ 2] 1578         LDW (X),Y
      000859 81               [ 4] 1579         RET
                                   1580 
                                   1581 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1582 ;       TRUE ( -- -1 )
                                   1583 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00085A                       1584         _HEADER TRUE,4,"TRUE"
      00085A 08 44                    1         .word LINK 
                           00085C     2         LINK=.
      00085C 04                       3         .byte 4  
      00085D 54 52 55 45              4         .ascii "TRUE"
      000861                          5         TRUE:
      000861 A6 FF            [ 1] 1585         LD A,#255 
      000863 1D 00 02         [ 2] 1586         SUBW X,#CELLL
      000866 F7               [ 1] 1587         LD (X),A 
      000867 E7 01            [ 1] 1588         LD (1,X),A 
      000869 81               [ 4] 1589         RET 
                                   1590 
                                   1591 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1592 ;       FALSE ( -- 0 )
                                   1593 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00086A CC 0B E1         [ 2] 1594         JP ZERO 
                                   1595 
                                   1596 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1597 ;       NOT     ( w -- w )
                                   1598 ;       One's complement of tos.
                                   1599 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00086D                       1600         _HEADER INVER,3,"NOT"
      00086D 08 5C                    1         .word LINK 
                           00086F     2         LINK=.
      00086F 03                       3         .byte 3  
      000870 4E 4F 54                 4         .ascii "NOT"
      000873                          5         INVER:
      000873 90 93            [ 1] 1601         LDW Y,X
      000875 90 FE            [ 2] 1602         LDW Y,(Y)
      000877 90 53            [ 2] 1603         CPLW Y
      000879 FF               [ 2] 1604         LDW (X),Y
      00087A 81               [ 4] 1605         RET
                                   1606 
                                   1607 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1608 ;       NEGATE  ( n -- -n )
                                   1609 ;       Two's complement of tos.
                                   1610 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00087B                       1611         _HEADER NEGAT,6,"NEGATE"
      00087B 08 6F                    1         .word LINK 
                           00087D     2         LINK=.
      00087D 06                       3         .byte 6  
      00087E 4E 45 47 41 54 45        4         .ascii "NEGATE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      000884                          5         NEGAT:
      000884 90 93            [ 1] 1612         LDW Y,X
      000886 90 FE            [ 2] 1613         LDW Y,(Y)
      000888 90 50            [ 2] 1614         NEGW Y
      00088A FF               [ 2] 1615         LDW (X),Y
      00088B 81               [ 4] 1616         RET
                                   1617 
                                   1618 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1619 ;       DNEGATE ( d -- -d )
                                   1620 ;       Two's complement of double.
                                   1621 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00088C                       1622         _HEADER DNEGA,7,"DNEGATE"
      00088C 08 7D                    1         .word LINK 
                           00088E     2         LINK=.
      00088E 07                       3         .byte 7  
      00088F 44 4E 45 47 41 54 45     4         .ascii "DNEGATE"
      000896                          5         DNEGA:
      000896 90 93            [ 1] 1623         LDW Y,X
      000898 90 FE            [ 2] 1624 	LDW Y,(Y)
      00089A 90 53            [ 2] 1625         CPLW Y
      00089C 90 89            [ 2] 1626         PUSHW Y      ; Y >R 
      00089E 90 93            [ 1] 1627         LDW Y,X
      0008A0 90 EE 02         [ 2] 1628         LDW Y,(2,Y)
      0008A3 90 53            [ 2] 1629         CPLW Y
      0008A5 72 A9 00 01      [ 2] 1630         ADDW Y,#1
      0008A9 EF 02            [ 2] 1631         LDW (2,X),Y
      0008AB 90 85            [ 2] 1632         POPW Y       ; R> Y  
      0008AD 24 02            [ 1] 1633         JRNC DN1 
      0008AF 90 5C            [ 1] 1634         INCW Y
      0008B1 FF               [ 2] 1635 DN1:    LDW (X),Y
      0008B2 81               [ 4] 1636         RET
                                   1637 
                                   1638 
                                   1639 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1640 ;       S>D ( n -- d )
                                   1641 ; convert single integer to double 
                                   1642 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008B3                       1643         _HEADER STOD,3,"S>D"
      0008B3 08 8E                    1         .word LINK 
                           0008B5     2         LINK=.
      0008B5 03                       3         .byte 3  
      0008B6 53 3E 44                 4         .ascii "S>D"
      0008B9                          5         STOD:
      0008B9 1D 00 02         [ 2] 1644         subw x,#CELLL 
      0008BC 90 5F            [ 1] 1645         clrw y 
      0008BE FF               [ 2] 1646         ldw (x),y 
      0008BF 90 93            [ 1] 1647         ldw y,x 
      0008C1 90 EE 02         [ 2] 1648         ldw y,(2,y)
      0008C4 2A 05            [ 1] 1649         jrpl 1$ 
      0008C6 90 AE FF FF      [ 2] 1650         ldw y,#-1
      0008CA FF               [ 2] 1651         ldw (x),y 
      0008CB 81               [ 4] 1652 1$:     ret 
                                   1653 
                                   1654 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1655 ;       -       ( n1 n2 -- n1-n2 )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                                   1656 ;       Subtraction.
                                   1657 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008CC                       1658         _HEADER SUBB,1,"-"
      0008CC 08 B5                    1         .word LINK 
                           0008CE     2         LINK=.
      0008CE 01                       3         .byte 1  
      0008CF 2D                       4         .ascii "-"
      0008D0                          5         SUBB:
      0008D0 90 93            [ 1] 1659         LDW Y,X
      0008D2 90 FE            [ 2] 1660         LDW Y,(Y)
      0008D4 90 BF 26         [ 2] 1661         LDW YTEMP,Y
      0008D7 1C 00 02         [ 2] 1662         ADDW X,#2
      0008DA 90 93            [ 1] 1663         LDW Y,X
      0008DC 90 FE            [ 2] 1664         LDW Y,(Y)
      0008DE 72 B2 00 26      [ 2] 1665         SUBW Y,YTEMP
      0008E2 FF               [ 2] 1666         LDW (X),Y
      0008E3 81               [ 4] 1667         RET
                                   1668 
                                   1669 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1670 ;       ABS     ( n -- n )
                                   1671 ;       Return  absolute value of n.
                                   1672 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008E4                       1673         _HEADER ABSS,3,"ABS"
      0008E4 08 CE                    1         .word LINK 
                           0008E6     2         LINK=.
      0008E6 03                       3         .byte 3  
      0008E7 41 42 53                 4         .ascii "ABS"
      0008EA                          5         ABSS:
      0008EA 90 93            [ 1] 1674         LDW Y,X
      0008EC 90 FE            [ 2] 1675 	LDW Y,(Y)
      0008EE 2A 03            [ 1] 1676         JRPL     AB1     ;negate:
      0008F0 90 50            [ 2] 1677         NEGW     Y     ;else negate hi byte
      0008F2 FF               [ 2] 1678         LDW (X),Y
      0008F3 81               [ 4] 1679 AB1:    RET
                                   1680 
                                   1681 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1682 ;       =       ( w w -- t )
                                   1683 ;       Return true if top two are =al.
                                   1684 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008F4                       1685         _HEADER EQUAL,1,"="
      0008F4 08 E6                    1         .word LINK 
                           0008F6     2         LINK=.
      0008F6 01                       3         .byte 1  
      0008F7 3D                       4         .ascii "="
      0008F8                          5         EQUAL:
      0008F8 A6 FF            [ 1] 1686         LD A,#0xFF  ;true
      0008FA 90 93            [ 1] 1687         LDW Y,X    ;D = n2
      0008FC 90 FE            [ 2] 1688         LDW Y,(Y)
      0008FE 90 BF 26         [ 2] 1689         LDW YTEMP,Y
      000901 1C 00 02         [ 2] 1690         ADDW X,#2
      000904 90 93            [ 1] 1691         LDW Y,X
      000906 90 FE            [ 2] 1692         LDW Y,(Y)
      000908 90 B3 26         [ 2] 1693         CPW Y,YTEMP     ;if n2 <> n1
      00090B 27 01            [ 1] 1694         JREQ     EQ1
      00090D 4F               [ 1] 1695         CLR A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      00090E F7               [ 1] 1696 EQ1:    LD (X),A
      00090F E7 01            [ 1] 1697         LD (1,X),A
      000911 81               [ 4] 1698 	RET     
                                   1699 
                                   1700 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1701 ;       U<      ( u u -- t )
                                   1702 ;       Unsigned compare of top two items.
                                   1703 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000912                       1704         _HEADER ULESS,2,"U<"
      000912 08 F6                    1         .word LINK 
                           000914     2         LINK=.
      000914 02                       3         .byte 2  
      000915 55 3C                    4         .ascii "U<"
      000917                          5         ULESS:
      000917 A6 FF            [ 1] 1705         LD A,#0xFF  ;true
      000919 90 93            [ 1] 1706         LDW Y,X    ;D = n2
      00091B 90 FE            [ 2] 1707         LDW Y,(Y)
      00091D 90 BF 26         [ 2] 1708         LDW YTEMP,Y
      000920 1C 00 02         [ 2] 1709         ADDW X,#2
      000923 90 93            [ 1] 1710         LDW Y,X
      000925 90 FE            [ 2] 1711         LDW Y,(Y)
      000927 90 B3 26         [ 2] 1712         CPW Y,YTEMP     ;if n2 <> n1
      00092A 25 01            [ 1] 1713         JRULT     ULES1
      00092C 4F               [ 1] 1714         CLR A
      00092D F7               [ 1] 1715 ULES1:  LD (X),A
      00092E E7 01            [ 1] 1716         LD (1,X),A
      000930 81               [ 4] 1717 	RET     
                                   1718 
                                   1719 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1720 ;       <       ( n1 n2 -- t )
                                   1721 ;       Signed compare of top two items.
                                   1722 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000931                       1723         _HEADER LESS,1,"<"
      000931 09 14                    1         .word LINK 
                           000933     2         LINK=.
      000933 01                       3         .byte 1  
      000934 3C                       4         .ascii "<"
      000935                          5         LESS:
      000935 A6 FF            [ 1] 1724         LD A,#0xFF  ;true
      000937 90 93            [ 1] 1725         LDW Y,X    ;D = n2
      000939 90 FE            [ 2] 1726         LDW Y,(Y)
      00093B 90 BF 26         [ 2] 1727         LDW YTEMP,Y
      00093E 1C 00 02         [ 2] 1728         ADDW X,#2
      000941 90 93            [ 1] 1729         LDW Y,X
      000943 90 FE            [ 2] 1730         LDW Y,(Y)
      000945 90 B3 26         [ 2] 1731         CPW Y,YTEMP     ;if n2 <> n1
      000948 2F 01            [ 1] 1732         JRSLT     LT1
      00094A 4F               [ 1] 1733         CLR A
      00094B F7               [ 1] 1734 LT1:    LD (X),A
      00094C E7 01            [ 1] 1735         LD (1,X),A
      00094E 81               [ 4] 1736 	RET     
                                   1737 
                                   1738 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1739 ;   U> ( u1 u2 -- f )
                                   1740 ;   f = true if u1>u2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                   1741 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00094F                       1742     _HEADER UGREAT,2,"U>"
      00094F 09 33                    1         .word LINK 
                           000951     2         LINK=.
      000951 02                       3         .byte 2  
      000952 55 3E                    4         .ascii "U>"
      000954                          5         UGREAT:
      000954 A6 00            [ 1] 1743     LD A,#0 
      000956 90 93            [ 1] 1744     LDW Y,X 
      000958 90 FE            [ 2] 1745     LDW Y,(Y)
      00095A 90 BF 26         [ 2] 1746     LDW YTEMP,Y 
      00095D 1C 00 02         [ 2] 1747     ADDW X,#2 
      000960 90 93            [ 1] 1748     LDW Y,X
      000962 90 FE            [ 2] 1749     LDW Y,(Y)
      000964 90 B3 26         [ 2] 1750     CPW Y,YTEMP 
      000967 23 02            [ 2] 1751     JRULE UGREAT1 
      000969 A6 FF            [ 1] 1752     LD A,#0xff  
      00096B                       1753 UGREAT1:
      00096B F7               [ 1] 1754     LD (X),A 
      00096C E7 01            [ 1] 1755     LD (1,X),A 
      00096E 81               [ 4] 1756     RET 
                                   1757 
                                   1758 
                                   1759 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1760 ;       >   (n1 n2 -- f )
                                   1761 ;  signed compare n1 n2 
                                   1762 ;  true if n1 > n2 
                                   1763 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00096F                       1764         _HEADER GREAT,1,">"
      00096F 09 51                    1         .word LINK 
                           000971     2         LINK=.
      000971 01                       3         .byte 1  
      000972 3E                       4         .ascii ">"
      000973                          5         GREAT:
      000973 A6 FF            [ 1] 1765         LD A,#0xFF ;
      000975 90 93            [ 1] 1766         LDW Y,X 
      000977 90 FE            [ 2] 1767         LDW Y,(Y)
      000979 90 BF 26         [ 2] 1768         LDW YTEMP,Y 
      00097C 1C 00 02         [ 2] 1769         ADDW X,#2 
      00097F 90 93            [ 1] 1770         LDW Y,X 
      000981 90 FE            [ 2] 1771         LDW Y,(Y)
      000983 90 B3 26         [ 2] 1772         CPW  Y,YTEMP 
      000986 2C 01            [ 1] 1773         JRSGT GREAT1 
      000988 4F               [ 1] 1774         CLR  A
      000989                       1775 GREAT1:
      000989 F7               [ 1] 1776         LD (X),A 
      00098A E7 01            [ 1] 1777         LD (1,X),A 
      00098C 81               [ 4] 1778         RET 
                                   1779 
                                   1780 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1781 ;       MAX     ( n n -- n )
                                   1782 ;       Return greater of two top items.
                                   1783 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00098D                       1784         _HEADER MAX,3,"MAX"
      00098D 09 71                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                           00098F     2         LINK=.
      00098F 03                       3         .byte 3  
      000990 4D 41 58                 4         .ascii "MAX"
      000993                          5         MAX:
      000993 90 93            [ 1] 1785         LDW Y,X    ;D = n2
      000995 90 EE 02         [ 2] 1786         LDW Y,(2,Y)
      000998 90 BF 26         [ 2] 1787         LDW YTEMP,Y
      00099B 90 93            [ 1] 1788         LDW Y,X
      00099D 90 FE            [ 2] 1789         LDW Y,(Y)
      00099F 90 B3 26         [ 2] 1790         CPW Y,YTEMP     ;if n2 <> n1
      0009A2 2F 02            [ 1] 1791         JRSLT     MAX1
      0009A4 EF 02            [ 2] 1792         LDW (2,X),Y
      0009A6 1C 00 02         [ 2] 1793 MAX1:   ADDW X,#2
      0009A9 81               [ 4] 1794 	RET     
                                   1795 
                                   1796 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1797 ;       MIN     ( n n -- n )
                                   1798 ;       Return smaller of top two items.
                                   1799 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0009AA                       1800         _HEADER MIN,3,"MIN"
      0009AA 09 8F                    1         .word LINK 
                           0009AC     2         LINK=.
      0009AC 03                       3         .byte 3  
      0009AD 4D 49 4E                 4         .ascii "MIN"
      0009B0                          5         MIN:
      0009B0 90 93            [ 1] 1801         LDW Y,X    ;D = n2
      0009B2 90 EE 02         [ 2] 1802         LDW Y,(2,Y)
      0009B5 90 BF 26         [ 2] 1803         LDW YTEMP,Y
      0009B8 90 93            [ 1] 1804         LDW Y,X
      0009BA 90 FE            [ 2] 1805         LDW Y,(Y)
      0009BC 90 B3 26         [ 2] 1806         CPW Y,YTEMP     ;if n2 <> n1
      0009BF 2C 02            [ 1] 1807         JRSGT     MIN1
      0009C1 EF 02            [ 2] 1808         LDW (2,X),Y
      0009C3 1C 00 02         [ 2] 1809 MIN1:	ADDW X,#2
      0009C6 81               [ 4] 1810 	RET     
                                   1811 
                                   1812 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1813 ;       WITHIN  ( u ul uh -- t )
                                   1814 ;       Return true if u is within
                                   1815 ;       range of ul and uh. ( ul <= u < uh )
                                   1816 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0009C7                       1817         _HEADER WITHI,6,"WITHIN"
      0009C7 09 AC                    1         .word LINK 
                           0009C9     2         LINK=.
      0009C9 06                       3         .byte 6  
      0009CA 57 49 54 48 49 4E        4         .ascii "WITHIN"
      0009D0                          5         WITHI:
      0009D0 CD 06 49         [ 4] 1818         CALL     OVER
      0009D3 CD 08 D0         [ 4] 1819         CALL     SUBB
      0009D6 CD 05 EA         [ 4] 1820         CALL     TOR
      0009D9 CD 08 D0         [ 4] 1821         CALL     SUBB
      0009DC CD 05 34         [ 4] 1822         CALL     RFROM
      0009DF CC 09 17         [ 2] 1823         JP     ULESS
                                   1824 
                                   1825 ;; Divide
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                   1826 
                                   1827 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1828 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1829 ;       Unsigned divide of a double by a
                                   1830 ;       single. Return mod and quotient.
                                   1831 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0009E2                       1832         _HEADER UMMOD,6,"UM/MOD"
      0009E2 09 C9                    1         .word LINK 
                           0009E4     2         LINK=.
      0009E4 06                       3         .byte 6  
      0009E5 55 4D 2F 4D 4F 44        4         .ascii "UM/MOD"
      0009EB                          5         UMMOD:
                                   1833 ; 2021-02-22
                                   1834 ; changed algortihm for Jeeek one 
                                   1835 ; ref: https://github.com/TG9541/stm8ef/pull/406        
      0009EB 90 93            [ 1] 1836         LDW     Y,X             ; stack pointer to Y
      0009ED FE               [ 2] 1837         LDW     X,(X)           ; un
      0009EE BF 26            [ 2] 1838         LDW     YTEMP,X         ; save un
      0009F0 93               [ 1] 1839         LDW     X,Y
      0009F1 5C               [ 1] 1840         INCW    X               ; drop un
      0009F2 5C               [ 1] 1841         INCW    X
      0009F3 89               [ 2] 1842         PUSHW   X               ; save stack pointer
      0009F4 FE               [ 2] 1843         LDW     X,(X)           ; X=udh
      0009F5 90 EE 04         [ 2] 1844         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      0009F8 B3 26            [ 2] 1845         CPW     X,YTEMP
      0009FA 25 0B            [ 1] 1846         JRULT   MMSM1           ; X is still on the R-stack
      0009FC 85               [ 2] 1847         POPW    X               ; restore stack pointer
      0009FD 90 AE FF FF      [ 2] 1848         LDW     Y,#0xFFFF       ; overflow result:
      000A01 FF               [ 2] 1849         LDW     (X),Y           ; quotient max. 16 bit value
      000A02 90 5F            [ 1] 1850         CLRW    Y
      000A04 EF 02            [ 2] 1851         LDW     (2,X),Y         ; remainder 0
      000A06 81               [ 4] 1852         RET
      000A07                       1853 MMSM1:
      000A07 A6 10            [ 1] 1854         LD      A,#16           ; loop count
      000A09 90 58            [ 2] 1855         SLLW    Y               ; udl shift udl into udh
      000A0B                       1856 MMSM3:
      000A0B 59               [ 2] 1857         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      000A0C 25 04            [ 1] 1858         JRC     MMSMa           ; if carry out of rotate
      000A0E B3 26            [ 2] 1859         CPW     X,YTEMP         ; compare udh to un
      000A10 25 05            [ 1] 1860         JRULT   MMSM4           ; can't subtract
      000A12                       1861 MMSMa:
      000A12 72 B0 00 26      [ 2] 1862         SUBW    X,YTEMP         ; can subtract
      000A16 98               [ 1] 1863         RCF
      000A17                       1864 MMSM4:
      000A17 8C               [ 1] 1865         CCF                     ; quotient bit
      000A18 90 59            [ 2] 1866         RLCW    Y               ; rotate into quotient, rotate out udl
      000A1A 4A               [ 1] 1867         DEC     A               ; repeat
      000A1B 26 EE            [ 1] 1868         JRNE    MMSM3           ; if A == 0
      000A1D                       1869 MMSMb:
      000A1D BF 26            [ 2] 1870         LDW     YTEMP,X         ; done, save remainder
      000A1F 85               [ 2] 1871         POPW    X               ; restore stack pointer
      000A20 FF               [ 2] 1872         LDW     (X),Y           ; save quotient
      000A21 90 BE 26         [ 2] 1873         LDW     Y,YTEMP         ; remainder onto stack
      000A24 EF 02            [ 2] 1874         LDW     (2,X),Y
      000A26 81               [ 4] 1875         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



                                   1876 
                                   1877 
                                   1878 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                   1879 ;       M/MOD   ( d n -- r q )
                                   1880 ;       Signed floored divide of double by
                                   1881 ;       single. Return mod and quotient.
                                   1882 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A27                       1883         _HEADER MSMOD,5,"M/MOD"
      000A27 09 E4                    1         .word LINK 
                           000A29     2         LINK=.
      000A29 05                       3         .byte 5  
      000A2A 4D 2F 4D 4F 44           4         .ascii "M/MOD"
      000A2F                          5         MSMOD:
      000A2F CD 06 21         [ 4] 1884         CALL	DUPP
      000A32 CD 06 58         [ 4] 1885         CALL	ZLESS
      000A35 CD 06 21         [ 4] 1886         CALL	DUPP
      000A38 CD 05 EA         [ 4] 1887         CALL	TOR
      000A3B CD 04 98         [ 4] 1888         CALL	QBRAN
      000A3E 0A 4C                 1889         .word	MMOD1
      000A40 CD 08 84         [ 4] 1890         CALL	NEGAT
      000A43 CD 05 EA         [ 4] 1891         CALL	TOR
      000A46 CD 08 96         [ 4] 1892         CALL	DNEGA
      000A49 CD 05 34         [ 4] 1893         CALL	RFROM
      000A4C CD 05 EA         [ 4] 1894 MMOD1:	CALL	TOR
      000A4F CD 06 21         [ 4] 1895         CALL	DUPP
      000A52 CD 06 58         [ 4] 1896         CALL	ZLESS
      000A55 CD 04 98         [ 4] 1897         CALL	QBRAN
      000A58 0A 60                 1898         .word	MMOD2
      000A5A CD 05 45         [ 4] 1899         CALL	RAT
      000A5D CD 08 46         [ 4] 1900         CALL	PLUS
      000A60 CD 05 34         [ 4] 1901 MMOD2:	CALL	RFROM
      000A63 CD 09 EB         [ 4] 1902         CALL	UMMOD
      000A66 CD 05 34         [ 4] 1903         CALL	RFROM
      000A69 CD 04 98         [ 4] 1904         CALL	QBRAN
      000A6C 0A 77                 1905         .word	MMOD3
      000A6E CD 06 31         [ 4] 1906         CALL	SWAPP
      000A71 CD 08 84         [ 4] 1907         CALL	NEGAT
      000A74 CD 06 31         [ 4] 1908         CALL	SWAPP
      000A77 81               [ 4] 1909 MMOD3:	RET
                                   1910 
                                   1911 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1912 ;       /MOD    ( n n -- r q )
                                   1913 ;       Signed divide. Return mod 
                                   1914 ;       and quotient.
                                   1915 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A78                       1916         _HEADER SLMOD,4,"/MOD"
      000A78 0A 29                    1         .word LINK 
                           000A7A     2         LINK=.
      000A7A 04                       3         .byte 4  
      000A7B 2F 4D 4F 44              4         .ascii "/MOD"
      000A7F                          5         SLMOD:
      000A7F CD 06 49         [ 4] 1917         CALL	OVER
      000A82 CD 06 58         [ 4] 1918         CALL	ZLESS
      000A85 CD 06 31         [ 4] 1919         CALL	SWAPP
      000A88 CC 0A 2F         [ 2] 1920         JP	MSMOD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



                                   1921 
                                   1922 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1923 ;       MOD     ( n n -- r )
                                   1924 ;       Signed divide. Return mod only.
                                   1925 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A8B                       1926         _HEADER MODD,3,"MOD"
      000A8B 0A 7A                    1         .word LINK 
                           000A8D     2         LINK=.
      000A8D 03                       3         .byte 3  
      000A8E 4D 4F 44                 4         .ascii "MOD"
      000A91                          5         MODD:
      000A91 CD 0A 7F         [ 4] 1927 	CALL	SLMOD
      000A94 CC 06 17         [ 2] 1928 	JP	DROP
                                   1929 
                                   1930 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1931 ;       /       ( n n -- q )
                                   1932 ;       Signed divide. Return quotient only.
                                   1933 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A97                       1934         _HEADER SLASH,1,"/"
      000A97 0A 8D                    1         .word LINK 
                           000A99     2         LINK=.
      000A99 01                       3         .byte 1  
      000A9A 2F                       4         .ascii "/"
      000A9B                          5         SLASH:
      000A9B CD 0A 7F         [ 4] 1935         CALL	SLMOD
      000A9E CD 06 31         [ 4] 1936         CALL	SWAPP
      000AA1 CC 06 17         [ 2] 1937         JP	DROP
                                   1938 
                                   1939 ;; Multiply
                                   1940 
                                   1941 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1942 ;       UM*     ( u u -- ud )
                                   1943 ;       Unsigned multiply. Return 
                                   1944 ;       double product.
                                   1945 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AA4                       1946         _HEADER UMSTA,3,"UM*"
      000AA4 0A 99                    1         .word LINK 
                           000AA6     2         LINK=.
      000AA6 03                       3         .byte 3  
      000AA7 55 4D 2A                 4         .ascii "UM*"
      000AAA                          5         UMSTA:
                                   1947 ; stack have 4 bytes u1=a,b u2=c,d
                                   1948 ; take advantage of SP addressing modes
                                   1949 ; these PRODx in RAM are not required
                                   1950 ; the product is kept on stack as local variable 
                                   1951         ;; bytes offset on data stack 
                           000002  1952         da=2 
                           000003  1953         db=3 
                           000000  1954         dc=0 
                           000001  1955         dd=1 
                                   1956         ;; product bytes offset on return stack 
                           000001  1957         UD1=1  ; ud bits 31..24
                           000002  1958         UD2=2  ; ud bits 23..16
                           000003  1959         UD3=3  ; ud bits 15..8 
                           000004  1960         UD4=4  ; ud bits 7..0 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



                                   1961         ;; local variable for product set to zero   
      000AAA 90 5F            [ 1] 1962         clrw y 
      000AAC 90 89            [ 2] 1963         pushw y  ; bits 15..0
      000AAE 90 89            [ 2] 1964         pushw y  ; bits 31..16 
      000AB0 E6 03            [ 1] 1965         ld a,(db,x) ; b 
      000AB2 90 97            [ 1] 1966         ld yl,a 
      000AB4 E6 01            [ 1] 1967         ld a,(dd,x)   ; d
      000AB6 90 42            [ 4] 1968         mul y,a    ; b*d  
      000AB8 17 03            [ 2] 1969         ldw (UD3,sp),y ; lowest weight product 
      000ABA E6 03            [ 1] 1970         ld a,(db,x)
      000ABC 90 97            [ 1] 1971         ld yl,a 
      000ABE E6 00            [ 1] 1972         ld a,(dc,x)
      000AC0 90 42            [ 4] 1973         mul y,a  ; b*c 
                                   1974         ;;; do the partial sum 
      000AC2 72 F9 02         [ 2] 1975         addw y,(UD2,sp)
      000AC5 4F               [ 1] 1976         clr a 
      000AC6 49               [ 1] 1977         rlc a
      000AC7 6B 01            [ 1] 1978         ld (UD1,sp),a 
      000AC9 17 02            [ 2] 1979         ldw (UD2,sp),y 
      000ACB E6 02            [ 1] 1980         ld a,(da,x)
      000ACD 90 97            [ 1] 1981         ld yl,a 
      000ACF E6 01            [ 1] 1982         ld a,(dd,x)
      000AD1 90 42            [ 4] 1983         mul y,a   ; a*d 
                                   1984         ;; do partial sum 
      000AD3 72 F9 02         [ 2] 1985         addw y,(UD2,sp)
      000AD6 4F               [ 1] 1986         clr a 
      000AD7 19 01            [ 1] 1987         adc a,(UD1,sp)
      000AD9 6B 01            [ 1] 1988         ld (UD1,sp),a  
      000ADB 17 02            [ 2] 1989         ldw (UD2,sp),y 
      000ADD E6 02            [ 1] 1990         ld a,(da,x)
      000ADF 90 97            [ 1] 1991         ld yl,a 
      000AE1 E6 00            [ 1] 1992         ld a,(dc,x)
      000AE3 90 42            [ 4] 1993         mul y,a  ;  a*c highest weight product 
                                   1994         ;;; do partial sum 
      000AE5 72 F9 01         [ 2] 1995         addw y,(UD1,sp)
      000AE8 FF               [ 2] 1996         ldw (x),y  ; udh 
      000AE9 16 03            [ 2] 1997         ldw y,(UD3,sp)
      000AEB EF 02            [ 2] 1998         ldw (2,x),y  ; udl  
      000AED 5B 04            [ 2] 1999         addw sp,#4 ; drop local variable 
      000AEF 81               [ 4] 2000         ret  
                                   2001 
                                   2002 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2003 ;       *       ( n n -- n )
                                   2004 ;       Signed multiply. Return 
                                   2005 ;       single product.
                                   2006 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AF0                       2007         _HEADER STAR,1,"*"
      000AF0 0A A6                    1         .word LINK 
                           000AF2     2         LINK=.
      000AF2 01                       3         .byte 1  
      000AF3 2A                       4         .ascii "*"
      000AF4                          5         STAR:
      000AF4 CD 0A AA         [ 4] 2008 	CALL	UMSTA
      000AF7 CC 06 17         [ 2] 2009 	JP	DROP
                                   2010 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



                                   2011 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2012 ;       M*      ( n n -- d )
                                   2013 ;       Signed multiply. Return 
                                   2014 ;       double product.
                                   2015 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AFA                       2016         _HEADER MSTAR,2,"M*"
      000AFA 0A F2                    1         .word LINK 
                           000AFC     2         LINK=.
      000AFC 02                       3         .byte 2  
      000AFD 4D 2A                    4         .ascii "M*"
      000AFF                          5         MSTAR:
      000AFF CD 08 31         [ 4] 2017         CALL	DDUP
      000B02 CD 06 A7         [ 4] 2018         CALL	XORR
      000B05 CD 06 58         [ 4] 2019         CALL	ZLESS
      000B08 CD 05 EA         [ 4] 2020         CALL	TOR
      000B0B CD 08 EA         [ 4] 2021         CALL	ABSS
      000B0E CD 06 31         [ 4] 2022         CALL	SWAPP
      000B11 CD 08 EA         [ 4] 2023         CALL	ABSS
      000B14 CD 0A AA         [ 4] 2024         CALL	UMSTA
      000B17 CD 05 34         [ 4] 2025         CALL	RFROM
      000B1A CD 04 98         [ 4] 2026         CALL	QBRAN
      000B1D 0B 22                 2027         .word	MSTA1
      000B1F CD 08 96         [ 4] 2028         CALL	DNEGA
      000B22 81               [ 4] 2029 MSTA1:	RET
                                   2030 
                                   2031 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2032 ;       */MOD   ( n1 n2 n3 -- r q )
                                   2033 ;       Multiply n1 and n2, then divide
                                   2034 ;       by n3. Return mod and quotient.
                                   2035 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B23                       2036         _HEADER SSMOD,5,"*/MOD"
      000B23 0A FC                    1         .word LINK 
                           000B25     2         LINK=.
      000B25 05                       3         .byte 5  
      000B26 2A 2F 4D 4F 44           4         .ascii "*/MOD"
      000B2B                          5         SSMOD:
      000B2B CD 05 EA         [ 4] 2037         CALL     TOR
      000B2E CD 0A FF         [ 4] 2038         CALL     MSTAR
      000B31 CD 05 34         [ 4] 2039         CALL     RFROM
      000B34 CC 0A 2F         [ 2] 2040         JP     MSMOD
                                   2041 
                                   2042 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2043 ;       */      ( n1 n2 n3 -- q )
                                   2044 ;       Multiply n1 by n2, then divide
                                   2045 ;       by n3. Return quotient only.
                                   2046 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B37                       2047         _HEADER STASL,2,"*/"
      000B37 0B 25                    1         .word LINK 
                           000B39     2         LINK=.
      000B39 02                       3         .byte 2  
      000B3A 2A 2F                    4         .ascii "*/"
      000B3C                          5         STASL:
      000B3C CD 0B 2B         [ 4] 2048         CALL	SSMOD
      000B3F CD 06 31         [ 4] 2049         CALL	SWAPP
      000B42 CC 06 17         [ 2] 2050         JP	DROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



                                   2051 
                                   2052 ;; Miscellaneous
                                   2053 
                                   2054 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2055 ;       CELL+   ( a -- a )
                                   2056 ;       Add cell size in byte to address.
                                   2057 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B45                       2058         _HEADER CELLP,2,"2+"
      000B45 0B 39                    1         .word LINK 
                           000B47     2         LINK=.
      000B47 02                       3         .byte 2  
      000B48 32 2B                    4         .ascii "2+"
      000B4A                          5         CELLP:
      000B4A 90 93            [ 1] 2059         LDW Y,X
      000B4C 90 FE            [ 2] 2060 	LDW Y,(Y)
      000B4E 72 A9 00 02      [ 2] 2061         ADDW Y,#CELLL 
      000B52 FF               [ 2] 2062         LDW (X),Y
      000B53 81               [ 4] 2063         RET
                                   2064 
                                   2065 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2066 ;       CELL-   ( a -- a )
                                   2067 ;       Subtract 2 from address.
                                   2068 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B54                       2069         _HEADER CELLM,2,"2-"
      000B54 0B 47                    1         .word LINK 
                           000B56     2         LINK=.
      000B56 02                       3         .byte 2  
      000B57 32 2D                    4         .ascii "2-"
      000B59                          5         CELLM:
      000B59 90 93            [ 1] 2070         LDW Y,X
      000B5B 90 FE            [ 2] 2071 	LDW Y,(Y)
      000B5D 72 A2 00 02      [ 2] 2072         SUBW Y,#CELLL
      000B61 FF               [ 2] 2073         LDW (X),Y
      000B62 81               [ 4] 2074         RET
                                   2075 
                                   2076 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2077 ;       CELLS   ( n -- n )
                                   2078 ;       Multiply tos by 2.
                                   2079 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B63                       2080         _HEADER CELLS,2,"2*"
      000B63 0B 56                    1         .word LINK 
                           000B65     2         LINK=.
      000B65 02                       3         .byte 2  
      000B66 32 2A                    4         .ascii "2*"
      000B68                          5         CELLS:
      000B68 90 93            [ 1] 2081         LDW Y,X
      000B6A 90 FE            [ 2] 2082 	LDW Y,(Y)
      000B6C 90 58            [ 2] 2083         SLAW Y
      000B6E FF               [ 2] 2084         LDW (X),Y
      000B6F 81               [ 4] 2085         RET
                                   2086 
                                   2087 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2088 ;       1+      ( a -- a )
                                   2089 ;       Add cell size in byte 
                                   2090 ;       to address.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



                                   2091 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B70                       2092         _HEADER ONEP,2,"1+"
      000B70 0B 65                    1         .word LINK 
                           000B72     2         LINK=.
      000B72 02                       3         .byte 2  
      000B73 31 2B                    4         .ascii "1+"
      000B75                          5         ONEP:
      000B75 90 93            [ 1] 2093         LDW Y,X
      000B77 90 FE            [ 2] 2094 	LDW Y,(Y)
      000B79 90 5C            [ 1] 2095         INCW Y
      000B7B FF               [ 2] 2096         LDW (X),Y
      000B7C 81               [ 4] 2097         RET
                                   2098 
                                   2099 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2100 ;       1-      ( a -- a )
                                   2101 ;       Subtract 2 from address.
                                   2102 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B7D                       2103         _HEADER ONEM,2,"1-"
      000B7D 0B 72                    1         .word LINK 
                           000B7F     2         LINK=.
      000B7F 02                       3         .byte 2  
      000B80 31 2D                    4         .ascii "1-"
      000B82                          5         ONEM:
      000B82 90 93            [ 1] 2104         LDW Y,X
      000B84 90 FE            [ 2] 2105 	LDW Y,(Y)
      000B86 90 5A            [ 2] 2106         DECW Y
      000B88 FF               [ 2] 2107         LDW (X),Y
      000B89 81               [ 4] 2108         RET
                                   2109 
                                   2110 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2111 ;  shift left n times 
                                   2112 ; LSHIFT ( n1 n2 -- n1<<n2 )
                                   2113 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B8A                       2114         _HEADER LSHIFT,6,"LSHIFT"
      000B8A 0B 7F                    1         .word LINK 
                           000B8C     2         LINK=.
      000B8C 06                       3         .byte 6  
      000B8D 4C 53 48 49 46 54        4         .ascii "LSHIFT"
      000B93                          5         LSHIFT:
      000B93 E6 01            [ 1] 2115         ld a,(1,x)
      000B95 1C 00 02         [ 2] 2116         addw x,#CELLL 
      000B98 90 93            [ 1] 2117         ldw y,x 
      000B9A 90 FE            [ 2] 2118         ldw y,(y)
      000B9C                       2119 LSHIFT1:
      000B9C 4D               [ 1] 2120         tnz a 
      000B9D 27 05            [ 1] 2121         jreq LSHIFT4 
      000B9F 90 58            [ 2] 2122         sllw y 
      000BA1 4A               [ 1] 2123         dec a 
      000BA2 20 F8            [ 2] 2124         jra LSHIFT1 
      000BA4                       2125 LSHIFT4:
      000BA4 FF               [ 2] 2126         ldw (x),y 
      000BA5 81               [ 4] 2127         ret 
                                   2128 
                                   2129 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2130 ; shift right n times                 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                   2131 ; RSHIFT (n1 n2 -- n1>>n2 )
                                   2132 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BA6                       2133         _HEADER RSHIFT,6,"RSHIFT"
      000BA6 0B 8C                    1         .word LINK 
                           000BA8     2         LINK=.
      000BA8 06                       3         .byte 6  
      000BA9 52 53 48 49 46 54        4         .ascii "RSHIFT"
      000BAF                          5         RSHIFT:
      000BAF E6 01            [ 1] 2134         ld a,(1,x)
      000BB1 1C 00 02         [ 2] 2135         addw x,#CELLL 
      000BB4 90 93            [ 1] 2136         ldw y,x 
      000BB6 90 FE            [ 2] 2137         ldw y,(y)
      000BB8                       2138 RSHIFT1:
      000BB8 4D               [ 1] 2139         tnz a 
      000BB9 27 05            [ 1] 2140         jreq RSHIFT4 
      000BBB 90 54            [ 2] 2141         srlw y 
      000BBD 4A               [ 1] 2142         dec a 
      000BBE 20 F8            [ 2] 2143         jra RSHIFT1 
      000BC0                       2144 RSHIFT4:
      000BC0 FF               [ 2] 2145         ldw (x),y 
      000BC1 81               [ 4] 2146         ret 
                                   2147 
                                   2148 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2149 ;       2/      ( n -- n )
                                   2150 ;       divide  tos by 2.
                                   2151 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BC2                       2152         _HEADER TWOSL,2,"2/"
      000BC2 0B A8                    1         .word LINK 
                           000BC4     2         LINK=.
      000BC4 02                       3         .byte 2  
      000BC5 32 2F                    4         .ascii "2/"
      000BC7                          5         TWOSL:
      000BC7 90 93            [ 1] 2153         LDW Y,X
      000BC9 90 FE            [ 2] 2154 	LDW Y,(Y)
      000BCB 90 57            [ 2] 2155         SRAW Y
      000BCD FF               [ 2] 2156         LDW (X),Y
      000BCE 81               [ 4] 2157         RET
                                   2158 
                                   2159 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2160 ;       BL      ( -- 32 )
                                   2161 ;       Return 32,  blank character.
                                   2162 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BCF                       2163         _HEADER BLANK,2,"BL"
      000BCF 0B C4                    1         .word LINK 
                           000BD1     2         LINK=.
      000BD1 02                       3         .byte 2  
      000BD2 42 4C                    4         .ascii "BL"
      000BD4                          5         BLANK:
      000BD4 1D 00 02         [ 2] 2164         SUBW X,#2
      000BD7 90 AE 00 20      [ 2] 2165 	LDW Y,#32
      000BDB FF               [ 2] 2166         LDW (X),Y
      000BDC 81               [ 4] 2167         RET
                                   2168 
                                   2169 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2170 ;         0     ( -- 0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



                                   2171 ;         Return 0.
                                   2172 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BDD                       2173         _HEADER ZERO,1,"0"
      000BDD 0B D1                    1         .word LINK 
                           000BDF     2         LINK=.
      000BDF 01                       3         .byte 1  
      000BE0 30                       4         .ascii "0"
      000BE1                          5         ZERO:
      000BE1 1D 00 02         [ 2] 2174         SUBW X,#2
      000BE4 90 5F            [ 1] 2175 	CLRW Y
      000BE6 FF               [ 2] 2176         LDW (X),Y
      000BE7 81               [ 4] 2177         RET
                                   2178 
                                   2179 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2180 ;         1     ( -- 1)
                                   2181 ;         Return 1.
                                   2182 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BE8                       2183         _HEADER ONE,1,"1"
      000BE8 0B DF                    1         .word LINK 
                           000BEA     2         LINK=.
      000BEA 01                       3         .byte 1  
      000BEB 31                       4         .ascii "1"
      000BEC                          5         ONE:
      000BEC 1D 00 02         [ 2] 2184         SUBW X,#2
      000BEF 90 AE 00 01      [ 2] 2185 	LDW Y,#1
      000BF3 FF               [ 2] 2186         LDW (X),Y
      000BF4 81               [ 4] 2187         RET
                                   2188 
                                   2189 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2190 ;         -1    ( -- -1)
                                   2191 ;   Return -1
                                   2192 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BF5                       2193         _HEADER MONE,2,"-1"
      000BF5 0B EA                    1         .word LINK 
                           000BF7     2         LINK=.
      000BF7 02                       3         .byte 2  
      000BF8 2D 31                    4         .ascii "-1"
      000BFA                          5         MONE:
      000BFA 1D 00 02         [ 2] 2194         SUBW X,#2
      000BFD 90 AE FF FF      [ 2] 2195 	LDW Y,#0xFFFF
      000C01 FF               [ 2] 2196         LDW (X),Y
      000C02 81               [ 4] 2197         RET
                                   2198 
                                   2199 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2200 ;       >CHAR   ( c -- c )
                                   2201 ;       Filter non-printing characters.
                                   2202 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C03                       2203         _HEADER TCHAR,5,">CHAR"
      000C03 0B F7                    1         .word LINK 
                           000C05     2         LINK=.
      000C05 05                       3         .byte 5  
      000C06 3E 43 48 41 52           4         .ascii ">CHAR"
      000C0B                          5         TCHAR:
      000C0B E6 01            [ 1] 2204         ld a,(1,x)
      000C0D A1 20            [ 1] 2205         cp a,#32  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000C0F 2B 05            [ 1] 2206         jrmi 1$ 
      000C11 A1 7F            [ 1] 2207         cp a,#127 
      000C13 2A 01            [ 1] 2208         jrpl 1$ 
      000C15 81               [ 4] 2209         ret 
      000C16 A6 5F            [ 1] 2210 1$:     ld a,#'_ 
      000C18 E7 01            [ 1] 2211         ld (1,x),a 
      000C1A 81               [ 4] 2212         ret 
                                   2213 
                                   2214 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2215 ;       DEPTH   ( -- n )
                                   2216 ;       Return  depth of  data stack.
                                   2217 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C1B                       2218         _HEADER DEPTH,5,"DEPTH"
      000C1B 0C 05                    1         .word LINK 
                           000C1D     2         LINK=.
      000C1D 05                       3         .byte 5  
      000C1E 44 45 50 54 48           4         .ascii "DEPTH"
      000C23                          5         DEPTH:
      000C23 90 BE 2C         [ 2] 2219         LDW Y,SP0    ;save data stack ptr
      000C26 BF 24            [ 2] 2220 	LDW XTEMP,X
      000C28 72 B2 00 24      [ 2] 2221         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000C2C 90 57            [ 2] 2222         SRAW Y    ;Y = #stack items
      000C2E 1D 00 02         [ 2] 2223 	SUBW X,#2
      000C31 FF               [ 2] 2224         LDW (X),Y     ; if neg, underflow
      000C32 81               [ 4] 2225         RET
                                   2226 
                                   2227 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2228 ;       PICK    ( ... +n -- ... w )
                                   2229 ;       Copy  nth stack item to tos.
                                   2230 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C33                       2231         _HEADER PICK,4,"PICK"
      000C33 0C 1D                    1         .word LINK 
                           000C35     2         LINK=.
      000C35 04                       3         .byte 4  
      000C36 50 49 43 4B              4         .ascii "PICK"
      000C3A                          5         PICK:
      000C3A 90 93            [ 1] 2232         LDW Y,X   ;D = n1
      000C3C 90 FE            [ 2] 2233         LDW Y,(Y)
                                   2234 ; modified for standard compliance          
                                   2235 ; 0 PICK must be equivalent to DUP 
      000C3E 90 5C            [ 1] 2236         INCW Y 
      000C40 90 58            [ 2] 2237         SLAW Y
      000C42 BF 24            [ 2] 2238         LDW XTEMP,X
      000C44 72 B9 00 24      [ 2] 2239         ADDW Y,XTEMP
      000C48 90 FE            [ 2] 2240         LDW Y,(Y)
      000C4A FF               [ 2] 2241         LDW (X),Y
      000C4B 81               [ 4] 2242         RET
                                   2243 
                                   2244 ;; Memory access
                                   2245 
                                   2246 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2247 ;       +!      ( n a -- )
                                   2248 ;       Add n to  contents at 
                                   2249 ;       address a.
                                   2250 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000C4C                       2251         _HEADER PSTOR,2,"+!"
      000C4C 0C 35                    1         .word LINK 
                           000C4E     2         LINK=.
      000C4E 02                       3         .byte 2  
      000C4F 2B 21                    4         .ascii "+!"
      000C51                          5         PSTOR:
      000C51 90 93            [ 1] 2252         ldw y,x 
      000C53 90 FE            [ 2] 2253         ldw y,(y)
      000C55 90 BF 26         [ 2] 2254         ldw YTEMP,y  ; address
      000C58 90 FE            [ 2] 2255         ldw y,(y)  
      000C5A 90 89            [ 2] 2256         pushw y  ; value at address 
      000C5C 90 93            [ 1] 2257         ldw y,x 
      000C5E 90 EE 02         [ 2] 2258         ldw y,(2,y) ; n 
      000C61 72 F9 01         [ 2] 2259         addw y,(1,sp) ; n+value
      000C64 91 CF 26         [ 5] 2260         ldw [YTEMP],y ;  a!
      000C67 90 85            [ 2] 2261         popw y    ;drop local var
      000C69 1C 00 04         [ 2] 2262         addw x,#4 ; DDROP 
      000C6C 81               [ 4] 2263         ret 
                                   2264 
                                   2265 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2266 ;       2!      ( d a -- )
                                   2267 ;       Store  double integer 
                                   2268 ;       to address a.
                                   2269 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C6D                       2270         _HEADER DSTOR,2,"2!"
      000C6D 0C 4E                    1         .word LINK 
                           000C6F     2         LINK=.
      000C6F 02                       3         .byte 2  
      000C70 32 21                    4         .ascii "2!"
      000C72                          5         DSTOR:
      000C72 90 93            [ 1] 2271         LDW Y,X 
      000C74 89               [ 2] 2272         PUSHW X 
      000C75 FE               [ 2] 2273         LDW X,(X) ; a 
      000C76 90 EE 02         [ 2] 2274         LDW Y,(2,Y) ; dhi 
      000C79 FF               [ 2] 2275         LDW (X),Y 
      000C7A 16 01            [ 2] 2276         LDW Y,(1,SP)  
      000C7C 90 EE 04         [ 2] 2277         LDW Y,(4,Y) ; dlo 
      000C7F EF 02            [ 2] 2278         LDW (2,X),Y  
      000C81 85               [ 2] 2279         POPW X 
      000C82 1C 00 06         [ 2] 2280         ADDW X,#3*CELLL 
      000C85 81               [ 4] 2281         RET 
                                   2282 
                                   2283 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2284 ;       2@      ( a -- d )
                                   2285 ;       Fetch double integer 
                                   2286 ;       from address a.
                                   2287 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C86                       2288         _HEADER DAT,2,"2@"
      000C86 0C 6F                    1         .word LINK 
                           000C88     2         LINK=.
      000C88 02                       3         .byte 2  
      000C89 32 40                    4         .ascii "2@"
      000C8B                          5         DAT:
      000C8B 90 93            [ 1] 2289         ldw y,x 
      000C8D 1D 00 02         [ 2] 2290         subw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000C90 90 FE            [ 2] 2291         ldw y,(y) ;address 
      000C92 90 89            [ 2] 2292         pushw y  
      000C94 90 FE            [ 2] 2293         ldw y,(y) ; dhi 
      000C96 FF               [ 2] 2294         ldw (x),y 
      000C97 90 85            [ 2] 2295         popw y 
      000C99 90 EE 02         [ 2] 2296         ldw y,(2,y) ; dlo 
      000C9C EF 02            [ 2] 2297         ldw (2,x),y 
      000C9E 81               [ 4] 2298         ret 
                                   2299 
                                   2300 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2301 ;       COUNT   ( b -- b +n )
                                   2302 ;       Return count byte of a string
                                   2303 ;       and add 1 to byte address.
                                   2304 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C9F                       2305         _HEADER COUNT,5,"COUNT"
      000C9F 0C 88                    1         .word LINK 
                           000CA1     2         LINK=.
      000CA1 05                       3         .byte 5  
      000CA2 43 4F 55 4E 54           4         .ascii "COUNT"
      000CA7                          5         COUNT:
      000CA7 90 93            [ 1] 2306         ldw y,x 
      000CA9 90 FE            [ 2] 2307         ldw y,(y) ; address 
      000CAB 90 F6            [ 1] 2308         ld a,(y)  ; count 
      000CAD 90 5C            [ 1] 2309         incw y 
      000CAF FF               [ 2] 2310         ldw (x),y 
      000CB0 1D 00 02         [ 2] 2311         subw x,#CELLL 
      000CB3 E7 01            [ 1] 2312         ld (1,x),a 
      000CB5 7F               [ 1] 2313         clr (x)
      000CB6 81               [ 4] 2314         ret 
                                   2315 
                                   2316 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2317 ;       HERE    ( -- a )
                                   2318 ;       Return  top of  variables
                                   2319 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CB7                       2320         _HEADER HERE,4,"HERE"
      000CB7 0C A1                    1         .word LINK 
                           000CB9     2         LINK=.
      000CB9 04                       3         .byte 4  
      000CBA 48 45 52 45              4         .ascii "HERE"
      000CBE                          5         HERE:
      000CBE 90 AE 00 18      [ 2] 2321       	ldw y,#UVP 
      000CC2 90 FE            [ 2] 2322         ldw y,(y)
      000CC4 1D 00 02         [ 2] 2323         subw x,#CELLL 
      000CC7 FF               [ 2] 2324         ldw (x),y 
      000CC8 81               [ 4] 2325         ret 
                                   2326 
                                   2327 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2328 ;       PAD     ( -- a )
                                   2329 ;       Return address of text buffer
                                   2330 ;       above  code dictionary.
                                   2331 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CC9                       2332         _HEADER PAD,3,"PAD"
      000CC9 0C B9                    1         .word LINK 
                           000CCB     2         LINK=.
      000CCB 03                       3         .byte 3  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000CCC 50 41 44                 4         .ascii "PAD"
      000CCF                          5         PAD:
      000CCF CD 0C BE         [ 4] 2333         CALL     HERE
      000CD2                       2334         _DOLIT   80
      000CD2 CD 04 6F         [ 4]    1     CALL DOLIT 
      000CD5 00 50                    2     .word 80 
      000CD7 CC 08 46         [ 2] 2335         JP     PLUS
                                   2336 
                                   2337 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2338 ;       TIB     ( -- a )
                                   2339 ;       Return address of 
                                   2340 ;       terminal input buffer.
                                   2341 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CDA                       2342         _HEADER TIB,3,"TIB"
      000CDA 0C CB                    1         .word LINK 
                           000CDC     2         LINK=.
      000CDC 03                       3         .byte 3  
      000CDD 54 49 42                 4         .ascii "TIB"
      000CE0                          5         TIB:
      000CE0 CD 07 15         [ 4] 2343         CALL     NTIB
      000CE3 CD 0B 4A         [ 4] 2344         CALL     CELLP
      000CE6 CC 04 E3         [ 2] 2345         JP     AT
                                   2346 
                                   2347 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2348 ;       @EXECUTE        ( a -- )
                                   2349 ;       Execute vector stored in 
                                   2350 ;       address a.
                                   2351 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CE9                       2352         _HEADER ATEXE,8,"@EXECUTE"
      000CE9 0C DC                    1         .word LINK 
                           000CEB     2         LINK=.
      000CEB 08                       3         .byte 8  
      000CEC 40 45 58 45 43 55 54     4         .ascii "@EXECUTE"
             45
      000CF4                          5         ATEXE:
      000CF4 CD 04 E3         [ 4] 2353         CALL     AT
      000CF7 CD 07 D4         [ 4] 2354         CALL     QDUP    ;?address or zero
      000CFA CD 04 98         [ 4] 2355         CALL     QBRAN
      000CFD 0D 02                 2356         .word      EXE1
      000CFF CD 04 C4         [ 4] 2357         CALL     EXECU   ;execute if non-zero
      000D02 81               [ 4] 2358 EXE1:   RET     ;do nothing if zero
                                   2359 
                                   2360 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2361 ;       CMOVE   ( b1 b2 u -- )
                                   2362 ;       Copy u bytes from b1 to b2.
                                   2363 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D03                       2364         _HEADER CMOVE,5,"CMOVE"
      000D03 0C EB                    1         .word LINK 
                           000D05     2         LINK=.
      000D05 05                       3         .byte 5  
      000D06 43 4D 4F 56 45           4         .ascii "CMOVE"
      000D0B                          5         CMOVE:
      000D0B CD 05 EA         [ 4] 2365         CALL	TOR
      000D0E CD 04 B4         [ 4] 2366         CALL	BRAN
      000D11 0D 2B                 2367         .word	CMOV2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      000D13 CD 05 EA         [ 4] 2368 CMOV1:	CALL	TOR
      000D16 CD 06 21         [ 4] 2369         CALL	DUPP
      000D19 CD 05 01         [ 4] 2370         CALL	CAT
      000D1C CD 05 45         [ 4] 2371         CALL	RAT
      000D1F CD 04 F0         [ 4] 2372         CALL	CSTOR
      000D22 CD 0B 75         [ 4] 2373         CALL	ONEP
      000D25 CD 05 34         [ 4] 2374         CALL	RFROM
      000D28 CD 0B 75         [ 4] 2375         CALL	ONEP
      000D2B CD 04 83         [ 4] 2376 CMOV2:	CALL	DONXT
      000D2E 0D 13                 2377         .word	CMOV1
      000D30 CC 08 26         [ 2] 2378         JP	DDROP
                                   2379 
                                   2380 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2381 ;       FILL    ( b u c -- )
                                   2382 ;       Fill u bytes of character c
                                   2383 ;       to area beginning at b.
                                   2384 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D33                       2385         _HEADER FILL,4,"FILL"
      000D33 0D 05                    1         .word LINK 
                           000D35     2         LINK=.
      000D35 04                       3         .byte 4  
      000D36 46 49 4C 4C              4         .ascii "FILL"
      000D3A                          5         FILL:
      000D3A 90 93            [ 1] 2386         ldw y,x 
      000D3C 90 E6 01         [ 1] 2387         ld a,(1,y) ; c 
      000D3F 1C 00 02         [ 2] 2388         addw x,#CELLL ; drop c 
      000D42 90 93            [ 1] 2389         ldw y,x 
      000D44 90 FE            [ 2] 2390         ldw y,(y) ; count
      000D46 90 89            [ 2] 2391         pushw y 
      000D48 1C 00 02         [ 2] 2392         addw x,#CELLL ; drop u 
      000D4B 90 93            [ 1] 2393         ldw y,x 
      000D4D 1C 00 02         [ 2] 2394         addw x,#CELLL ; drop b 
      000D50 90 FE            [ 2] 2395         ldw y,(y) ; address
      000D52 90 BF 26         [ 2] 2396         ldw YTEMP,y
      000D55 90 85            [ 2] 2397         popw y ; count 
      000D57                       2398 FILL1:  
      000D57 92 C7 26         [ 4] 2399         ld [YTEMP],a 
      000D5A 3C 27            [ 1] 2400         inc YTEMP+1
      000D5C 24 02            [ 1] 2401         jrnc FILL2 
      000D5E 3C 26            [ 1] 2402         inc YTEMP
      000D60                       2403 FILL2: 
      000D60 90 5A            [ 2] 2404         decw y ; count 
      000D62 26 F3            [ 1] 2405         jrne FILL1  
      000D64 81               [ 4] 2406         ret 
                                   2407 
                                   2408 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2409 ;       ERASE   ( b u -- )
                                   2410 ;       Erase u bytes beginning at b.
                                   2411 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D65                       2412         _HEADER ERASE,5,"ERASE"
      000D65 0D 35                    1         .word LINK 
                           000D67     2         LINK=.
      000D67 05                       3         .byte 5  
      000D68 45 52 41 53 45           4         .ascii "ERASE"
      000D6D                          5         ERASE:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      000D6D 90 5F            [ 1] 2413         clrw y 
      000D6F 1D 00 02         [ 2] 2414         subw x,#CELLL 
      000D72 FF               [ 2] 2415         ldw (x),y 
      000D73 CC 0D 3A         [ 2] 2416         jp FILL 
                                   2417 
                                   2418 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2419 ;       PACK0   ( b u a -- a )
                                   2420 ;       Build a counted string with
                                   2421 ;       u characters from b. Null fill.
                                   2422 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D76                       2423         _HEADER PACKS,5,"PACK0"
      000D76 0D 67                    1         .word LINK 
                           000D78     2         LINK=.
      000D78 05                       3         .byte 5  
      000D79 50 41 43 4B 30           4         .ascii "PACK0"
      000D7E                          5         PACKS:
      000D7E CD 06 21         [ 4] 2424         CALL     DUPP
      000D81 CD 05 EA         [ 4] 2425         CALL     TOR     ;strings only on cell boundary
      000D84 CD 08 31         [ 4] 2426         CALL     DDUP
      000D87 CD 04 F0         [ 4] 2427         CALL     CSTOR
      000D8A CD 0B 75         [ 4] 2428         CALL     ONEP ;save count
      000D8D CD 06 31         [ 4] 2429         CALL     SWAPP
      000D90 CD 0D 0B         [ 4] 2430         CALL     CMOVE
      000D93 CD 05 34         [ 4] 2431         CALL     RFROM
      000D96 81               [ 4] 2432         RET
                                   2433 
                                   2434 ;; Numeric output, single precision
                                   2435 
                                   2436 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2437 ;       DIGIT   ( u -- c )
                                   2438 ;       Convert digit u to a character.
                                   2439 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D97                       2440         _HEADER DIGIT,5,"DIGIT"
      000D97 0D 78                    1         .word LINK 
                           000D99     2         LINK=.
      000D99 05                       3         .byte 5  
      000D9A 44 49 47 49 54           4         .ascii "DIGIT"
      000D9F                          5         DIGIT:
      000D9F CD 04 6F         [ 4] 2441         CALL	DOLIT
      000DA2 00 09                 2442         .word	9
      000DA4 CD 06 49         [ 4] 2443         CALL	OVER
      000DA7 CD 09 35         [ 4] 2444         CALL	LESS
      000DAA CD 04 6F         [ 4] 2445         CALL	DOLIT
      000DAD 00 07                 2446         .word	7
      000DAF CD 06 7E         [ 4] 2447         CALL	ANDD
      000DB2 CD 08 46         [ 4] 2448         CALL	PLUS
      000DB5 CD 04 6F         [ 4] 2449         CALL	DOLIT
      000DB8 00 30                 2450         .word	48	;'0'
      000DBA CC 08 46         [ 2] 2451         JP	PLUS
                                   2452 
                                   2453 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2454 ;       EXTRACT ( n base -- n c )
                                   2455 ;       Extract least significant 
                                   2456 ;       digit from n.
                                   2457 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      000DBD                       2458         _HEADER EXTRC,7,"EXTRACT"
      000DBD 0D 99                    1         .word LINK 
                           000DBF     2         LINK=.
      000DBF 07                       3         .byte 7  
      000DC0 45 58 54 52 41 43 54     4         .ascii "EXTRACT"
      000DC7                          5         EXTRC:
      000DC7 CD 0B E1         [ 4] 2459         CALL     ZERO
      000DCA CD 06 31         [ 4] 2460         CALL     SWAPP
      000DCD CD 09 EB         [ 4] 2461         CALL     UMMOD
      000DD0 CD 06 31         [ 4] 2462         CALL     SWAPP
      000DD3 CC 0D 9F         [ 2] 2463         JP     DIGIT
                                   2464 
                                   2465 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2466 ;       <#      ( -- )
                                   2467 ;       Initiate  numeric 
                                   2468 ;       output process.
                                   2469 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DD6                       2470         _HEADER BDIGS,2,"#<"
      000DD6 0D BF                    1         .word LINK 
                           000DD8     2         LINK=.
      000DD8 02                       3         .byte 2  
      000DD9 23 3C                    4         .ascii "#<"
      000DDB                          5         BDIGS:
      000DDB CD 0C CF         [ 4] 2471         CALL     PAD
      000DDE CD 07 57         [ 4] 2472         CALL     HLD
      000DE1 CC 04 D1         [ 2] 2473         JP     STORE
                                   2474 
                                   2475 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2476 ;       HOLD    ( c -- )
                                   2477 ;       Insert a character 
                                   2478 ;       into output string.
                                   2479 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DE4                       2480         _HEADER HOLD,4,"HOLD"
      000DE4 0D D8                    1         .word LINK 
                           000DE6     2         LINK=.
      000DE6 04                       3         .byte 4  
      000DE7 48 4F 4C 44              4         .ascii "HOLD"
      000DEB                          5         HOLD:
      000DEB CD 07 57         [ 4] 2481         CALL     HLD
      000DEE CD 04 E3         [ 4] 2482         CALL     AT
      000DF1 CD 0B 82         [ 4] 2483         CALL     ONEM
      000DF4 CD 06 21         [ 4] 2484         CALL     DUPP
      000DF7 CD 07 57         [ 4] 2485         CALL     HLD
      000DFA CD 04 D1         [ 4] 2486         CALL     STORE
      000DFD CC 04 F0         [ 2] 2487         JP     CSTOR
                                   2488 
                                   2489 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2490 ;       #       ( u -- u )
                                   2491 ;       Extract one digit from u and
                                   2492 ;       append digit to output string.
                                   2493 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E00                       2494         _HEADER DIG,1,"#"
      000E00 0D E6                    1         .word LINK 
                           000E02     2         LINK=.
      000E02 01                       3         .byte 1  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      000E03 23                       4         .ascii "#"
      000E04                          5         DIG:
      000E04 CD 06 E7         [ 4] 2495         CALL     BASE
      000E07 CD 04 E3         [ 4] 2496         CALL     AT
      000E0A CD 0D C7         [ 4] 2497         CALL     EXTRC
      000E0D CC 0D EB         [ 2] 2498         JP     HOLD
                                   2499 
                                   2500 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2501 ;       #S      ( u -- 0 )
                                   2502 ;       Convert u until all digits
                                   2503 ;       are added to output string.
                                   2504 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E10                       2505         _HEADER DIGS,2,"#S"
      000E10 0E 02                    1         .word LINK 
                           000E12     2         LINK=.
      000E12 02                       3         .byte 2  
      000E13 23 53                    4         .ascii "#S"
      000E15                          5         DIGS:
      000E15 CD 0E 04         [ 4] 2506 DIGS1:  CALL     DIG
      000E18 CD 06 21         [ 4] 2507         CALL     DUPP
      000E1B CD 04 98         [ 4] 2508         CALL     QBRAN
      000E1E 0E 22                 2509         .word      DIGS2
      000E20 20 F3            [ 2] 2510         JRA     DIGS1
      000E22 81               [ 4] 2511 DIGS2:  RET
                                   2512 
                                   2513 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2514 ;       SIGN    ( n -- )
                                   2515 ;       Add a minus sign to
                                   2516 ;       numeric output string.
                                   2517 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E23                       2518         _HEADER SIGN,4,"SIGN"
      000E23 0E 12                    1         .word LINK 
                           000E25     2         LINK=.
      000E25 04                       3         .byte 4  
      000E26 53 49 47 4E              4         .ascii "SIGN"
      000E2A                          5         SIGN:
      000E2A CD 06 58         [ 4] 2519         CALL     ZLESS
      000E2D CD 04 98         [ 4] 2520         CALL     QBRAN
      000E30 0E 3A                 2521         .word      SIGN1
      000E32 CD 04 6F         [ 4] 2522         CALL     DOLIT
      000E35 00 2D                 2523         .word      45	;"-"
      000E37 CC 0D EB         [ 2] 2524         JP     HOLD
      000E3A 81               [ 4] 2525 SIGN1:  RET
                                   2526 
                                   2527 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2528 ;       #>      ( w -- b u )
                                   2529 ;       Prepare output string.
                                   2530 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E3B                       2531         _HEADER EDIGS,2,"#>"
      000E3B 0E 25                    1         .word LINK 
                           000E3D     2         LINK=.
      000E3D 02                       3         .byte 2  
      000E3E 23 3E                    4         .ascii "#>"
      000E40                          5         EDIGS:
      000E40 CD 06 17         [ 4] 2532         CALL     DROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      000E43 CD 07 57         [ 4] 2533         CALL     HLD
      000E46 CD 04 E3         [ 4] 2534         CALL     AT
      000E49 CD 0C CF         [ 4] 2535         CALL     PAD
      000E4C CD 06 49         [ 4] 2536         CALL     OVER
      000E4F CC 08 D0         [ 2] 2537         JP     SUBB
                                   2538 
                                   2539 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2540 ;       str     ( w -- b u )
                                   2541 ;       Convert a signed integer
                                   2542 ;       to a numeric string.
                                   2543 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E52                       2544         _HEADER STR,3,"STR"
      000E52 0E 3D                    1         .word LINK 
                           000E54     2         LINK=.
      000E54 03                       3         .byte 3  
      000E55 53 54 52                 4         .ascii "STR"
      000E58                          5         STR:
      000E58 CD 06 21         [ 4] 2545         CALL     DUPP
      000E5B CD 05 EA         [ 4] 2546         CALL     TOR
      000E5E CD 08 EA         [ 4] 2547         CALL     ABSS
      000E61 CD 0D DB         [ 4] 2548         CALL     BDIGS
      000E64 CD 0E 15         [ 4] 2549         CALL     DIGS
      000E67 CD 05 34         [ 4] 2550         CALL     RFROM
      000E6A CD 0E 2A         [ 4] 2551         CALL     SIGN
      000E6D CC 0E 40         [ 2] 2552         JP     EDIGS
                                   2553 
                                   2554 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2555 ;       HEX     ( -- )
                                   2556 ;       Use radix 16 as base for
                                   2557 ;       numeric conversions.
                                   2558 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E70                       2559         _HEADER HEX,3,"HEX"
      000E70 0E 54                    1         .word LINK 
                           000E72     2         LINK=.
      000E72 03                       3         .byte 3  
      000E73 48 45 58                 4         .ascii "HEX"
      000E76                          5         HEX:
      000E76 CD 04 6F         [ 4] 2560         CALL     DOLIT
      000E79 00 10                 2561         .word      16
      000E7B CD 06 E7         [ 4] 2562         CALL     BASE
      000E7E CC 04 D1         [ 2] 2563         JP     STORE
                                   2564 
                                   2565 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2566 ;       DECIMAL ( -- )
                                   2567 ;       Use radix 10 as base
                                   2568 ;       for numeric conversions.
                                   2569 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E81                       2570         _HEADER DECIM,7,"DECIMAL"
      000E81 0E 72                    1         .word LINK 
                           000E83     2         LINK=.
      000E83 07                       3         .byte 7  
      000E84 44 45 43 49 4D 41 4C     4         .ascii "DECIMAL"
      000E8B                          5         DECIM:
      000E8B CD 04 6F         [ 4] 2571         CALL     DOLIT
      000E8E 00 0A                 2572         .word      10
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      000E90 CD 06 E7         [ 4] 2573         CALL     BASE
      000E93 CC 04 D1         [ 2] 2574         JP     STORE
                                   2575 
                                   2576 ;; Numeric input, single precision
                                   2577 
                                   2578 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2579 ;       DIGIT?  ( c base -- u t )
                                   2580 ;       Convert a character to its numeric
                                   2581 ;       value. A flag indicates success.
                                   2582 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E96                       2583         _HEADER DIGTQ,6,"DIGIT?"
      000E96 0E 83                    1         .word LINK 
                           000E98     2         LINK=.
      000E98 06                       3         .byte 6  
      000E99 44 49 47 49 54 3F        4         .ascii "DIGIT?"
      000E9F                          5         DIGTQ:
      000E9F CD 05 EA         [ 4] 2584         CALL     TOR
      000EA2 CD 04 6F         [ 4] 2585         CALL     DOLIT
      000EA5 00 30                 2586         .word     48	; "0"
      000EA7 CD 08 D0         [ 4] 2587         CALL     SUBB
      000EAA CD 04 6F         [ 4] 2588         CALL     DOLIT
      000EAD 00 09                 2589         .word      9
      000EAF CD 06 49         [ 4] 2590         CALL     OVER
      000EB2 CD 09 35         [ 4] 2591         CALL     LESS
      000EB5 CD 04 98         [ 4] 2592         CALL     QBRAN
      000EB8 0E D0                 2593         .word      DGTQ1
      000EBA CD 04 6F         [ 4] 2594         CALL     DOLIT
      000EBD 00 07                 2595         .word      7
      000EBF CD 08 D0         [ 4] 2596         CALL     SUBB
      000EC2 CD 06 21         [ 4] 2597         CALL     DUPP
      000EC5 CD 04 6F         [ 4] 2598         CALL     DOLIT
      000EC8 00 0A                 2599         .word      10
      000ECA CD 09 35         [ 4] 2600         CALL     LESS
      000ECD CD 06 92         [ 4] 2601         CALL     ORR
      000ED0 CD 06 21         [ 4] 2602 DGTQ1:  CALL     DUPP
      000ED3 CD 05 34         [ 4] 2603         CALL     RFROM
      000ED6 CC 09 17         [ 2] 2604         JP     ULESS
                                   2605 
                           000001  2606 .if  WANT_DOUBLE
                           000000  2607 .else 
                                   2608 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2609 ;       NUMBER? ( a -- n T | a F )
                                   2610 ;       Convert a number string to
                                   2611 ;       integer. Push a flag on tos.
                                   2612 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2613         _HEADER NUMBQ,7,"NUMBER?"
                                   2614         CALL     BASE
                                   2615         CALL     AT
                                   2616         CALL     TOR
                                   2617         CALL     ZERO
                                   2618         CALL     OVER
                                   2619         CALL     COUNT
                                   2620         CALL     OVER
                                   2621         CALL     CAT
                                   2622         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



                                   2623         .word     36	; "0x"
                                   2624         CALL     EQUAL
                                   2625         CALL     QBRAN
                                   2626         .word      NUMQ1
                                   2627         CALL     HEX
                                   2628         CALL     SWAPP
                                   2629         CALL     ONEP
                                   2630         CALL     SWAPP
                                   2631         CALL     ONEM
                                   2632 NUMQ1:  CALL     OVER
                                   2633         CALL     CAT
                                   2634         CALL     DOLIT
                                   2635         .word     45	; "-"
                                   2636         CALL     EQUAL
                                   2637         CALL     TOR
                                   2638         CALL     SWAPP
                                   2639         CALL     RAT
                                   2640         CALL     SUBB
                                   2641         CALL     SWAPP
                                   2642         CALL     RAT
                                   2643         CALL     PLUS
                                   2644         CALL     QDUP
                                   2645         CALL     QBRAN
                                   2646         .word      NUMQ6
                                   2647         CALL     ONEM
                                   2648         CALL     TOR
                                   2649 NUMQ2:  CALL     DUPP
                                   2650         CALL     TOR
                                   2651         CALL     CAT
                                   2652         CALL     BASE
                                   2653         CALL     AT
                                   2654         CALL     DIGTQ
                                   2655         CALL     QBRAN
                                   2656         .word      NUMQ4
                                   2657         CALL     SWAPP
                                   2658         CALL     BASE
                                   2659         CALL     AT
                                   2660         CALL     STAR
                                   2661         CALL     PLUS
                                   2662         CALL     RFROM
                                   2663         CALL     ONEP
                                   2664         CALL     DONXT
                                   2665         .word      NUMQ2
                                   2666         CALL     RAT
                                   2667         CALL     SWAPP
                                   2668         CALL     DROP
                                   2669         CALL     QBRAN
                                   2670         .word      NUMQ3
                                   2671         CALL     NEGAT
                                   2672 NUMQ3:  CALL     SWAPP
                                   2673         JRA     NUMQ5
                                   2674 NUMQ4:  CALL     RFROM
                                   2675         CALL     RFROM
                                   2676         CALL     DDROP
                                   2677         CALL     DDROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



                                   2678         CALL     ZERO
                                   2679 NUMQ5:  CALL     DUPP
                                   2680 NUMQ6:  CALL     RFROM
                                   2681         CALL     DDROP
                                   2682         CALL     RFROM
                                   2683         CALL     BASE
                                   2684         JP     STORE
                                   2685 .endif ; WANT_DOUBLE  
                                   2686 
                                   2687 ;; Basic I/O
                                   2688 
                                   2689 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2690 ;       KEY     ( -- c )
                                   2691 ;       Wait for and return an
                                   2692 ;       input character.
                                   2693 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000ED9                       2694         _HEADER KEY,3,"KEY"
      000ED9 0E 98                    1         .word LINK 
                           000EDB     2         LINK=.
      000EDB 03                       3         .byte 3  
      000EDC 4B 45 59                 4         .ascii "KEY"
      000EDF                          5         KEY:
      000EDF 72 0B 52 30 FB   [ 2] 2695         btjf UART_SR,#UART_SR_RXNE,. 
      000EE4 C6 52 31         [ 1] 2696         ld a,UART_DR 
      000EE7 1D 00 02         [ 2] 2697         subw x,#CELLL 
      000EEA E7 01            [ 1] 2698         ld (1,x),a 
      000EEC 7F               [ 1] 2699         clr (x)
      000EED 81               [ 4] 2700         ret 
                                   2701 
                                   2702 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2703 ;       NUF?    ( -- t )
                                   2704 ;       Return false if no input,
                                   2705 ;       else pause and if CR return true.
                                   2706 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000EEE                       2707         _HEADER NUFQ,4,"NUF?"
      000EEE 0E DB                    1         .word LINK 
                           000EF0     2         LINK=.
      000EF0 04                       3         .byte 4  
      000EF1 4E 55 46 3F              4         .ascii "NUF?"
      000EF5                          5         NUFQ:
      000EF5 CD 04 18         [ 4] 2708         CALL     QKEY
      000EF8 CD 06 21         [ 4] 2709         CALL     DUPP
      000EFB CD 04 98         [ 4] 2710         CALL     QBRAN
      000EFE 0F 0E                 2711         .word    NUFQ1
      000F00 CD 08 26         [ 4] 2712         CALL     DDROP
      000F03 CD 0E DF         [ 4] 2713         CALL     KEY
      000F06 CD 04 6F         [ 4] 2714         CALL     DOLIT
      000F09 00 0D                 2715         .word      CRR
      000F0B CC 08 F8         [ 2] 2716         JP     EQUAL
      000F0E 81               [ 4] 2717 NUFQ1:  RET
                                   2718 
                                   2719 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2720 ;       SPACE   ( -- )
                                   2721 ;       Send  blank character to
                                   2722 ;       output device.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                   2723 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F0F                       2724         _HEADER SPACE,5,"SPACE"
      000F0F 0E F0                    1         .word LINK 
                           000F11     2         LINK=.
      000F11 05                       3         .byte 5  
      000F12 53 50 41 43 45           4         .ascii "SPACE"
      000F17                          5         SPACE:
      000F17 CD 0B D4         [ 4] 2725         CALL     BLANK
      000F1A CC 04 36         [ 2] 2726         JP     EMIT
                                   2727 
                                   2728 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2729 ;       SPACES  ( +n -- )
                                   2730 ;       Send n spaces to output device.
                                   2731 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F1D                       2732         _HEADER SPACS,6,"SPACES"
      000F1D 0F 11                    1         .word LINK 
                           000F1F     2         LINK=.
      000F1F 06                       3         .byte 6  
      000F20 53 50 41 43 45 53        4         .ascii "SPACES"
      000F26                          5         SPACS:
      000F26 CD 0B E1         [ 4] 2733         CALL     ZERO
      000F29 CD 09 93         [ 4] 2734         CALL     MAX
      000F2C CD 05 EA         [ 4] 2735         CALL     TOR
      000F2F 20 03            [ 2] 2736         JRA      CHAR2
      000F31 CD 0F 17         [ 4] 2737 CHAR1:  CALL     SPACE
      000F34 CD 04 83         [ 4] 2738 CHAR2:  CALL     DONXT
      000F37 0F 31                 2739         .word    CHAR1
      000F39 81               [ 4] 2740         RET
                                   2741 
                                   2742 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2743 ;       TYPE    ( b u -- )
                                   2744 ;       Output u characters from b.
                                   2745 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F3A                       2746         _HEADER TYPES,4,"TYPE"
      000F3A 0F 1F                    1         .word LINK 
                           000F3C     2         LINK=.
      000F3C 04                       3         .byte 4  
      000F3D 54 59 50 45              4         .ascii "TYPE"
      000F41                          5         TYPES:
      000F41 CD 05 EA         [ 4] 2747         CALL     TOR
      000F44 20 06            [ 2] 2748         JRA     TYPE2
      000F46 CD 0C A7         [ 4] 2749 TYPE1:  CALL     COUNT 
      000F49 CD 04 36         [ 4] 2750         CALL     EMIT
      000F4C                       2751 TYPE2:  _DONXT  TYPE1
      000F4C CD 04 83         [ 4]    1     CALL DONXT 
      000F4F 0F 46                    2     .word TYPE1 
      000F51 CC 06 17         [ 2] 2752         JP     DROP
                                   2753 
                                   2754 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2755 ;       CR      ( -- )
                                   2756 ;       Output a carriage return
                                   2757 ;       and a line feed.
                                   2758 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F54                       2759         _HEADER CR,2,"CR"
      000F54 0F 3C                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



                           000F56     2         LINK=.
      000F56 02                       3         .byte 2  
      000F57 43 52                    4         .ascii "CR"
      000F59                          5         CR:
      000F59                       2760         _DOLIT  CRR 
      000F59 CD 04 6F         [ 4]    1     CALL DOLIT 
      000F5C 00 0D                    2     .word CRR 
      000F5E CD 04 36         [ 4] 2761         CALL    EMIT
      000F61                       2762         _DOLIT  LF
      000F61 CD 04 6F         [ 4]    1     CALL DOLIT 
      000F64 00 0A                    2     .word LF 
      000F66 CC 04 36         [ 2] 2763         JP      EMIT
                                   2764 
                                   2765 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2766 ;       do$     ( -- a )
                                   2767 ;       Return  address of a compiled
                                   2768 ;       string.
                                   2769 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2770 ;       _HEADER DOSTR,COMPO+3,"DO$"
      000F69                       2771 DOSTR:
      000F69 CD 05 34         [ 4] 2772         CALL     RFROM
      000F6C CD 05 45         [ 4] 2773         CALL     RAT
      000F6F CD 05 34         [ 4] 2774         CALL     RFROM
      000F72 CD 0C A7         [ 4] 2775         CALL     COUNT
      000F75 CD 08 46         [ 4] 2776         CALL     PLUS
      000F78 CD 05 EA         [ 4] 2777         CALL     TOR
      000F7B CD 06 31         [ 4] 2778         CALL     SWAPP
      000F7E CD 05 EA         [ 4] 2779         CALL     TOR
      000F81 81               [ 4] 2780         RET
                                   2781 
                                   2782 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2783 ;       $"|     ( -- a )
                                   2784 ;       Run time routine compiled by $".
                                   2785 ;       Return address of a compiled string.
                                   2786 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2787 ;       _HEADER STRQP,COMPO+3,"$\"|"
      000F82                       2788 STRQP:
      000F82 CD 0F 69         [ 4] 2789         CALL     DOSTR
      000F85 81               [ 4] 2790         RET
                                   2791 
                                   2792 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2793 ;       ."|     ( -- )
                                   2794 ;       Run time routine of ." .
                                   2795 ;       Output a compiled string.
                                   2796 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2797 ;       _HEADER DOTQP,COMPO+3,".\"|"
      000F86                       2798 DOTQP:
      000F86 CD 0F 69         [ 4] 2799         CALL     DOSTR
      000F89 CD 0C A7         [ 4] 2800         CALL     COUNT
      000F8C CC 0F 41         [ 2] 2801         JP     TYPES
                                   2802 
                                   2803 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2804 ;       .R      ( n +n -- )
                                   2805 ;       Display an integer in a field
                                   2806 ;       of n columns, right justified.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



                                   2807 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F8F                       2808         _HEADER DOTR,2,".R"
      000F8F 0F 56                    1         .word LINK 
                           000F91     2         LINK=.
      000F91 02                       3         .byte 2  
      000F92 2E 52                    4         .ascii ".R"
      000F94                          5         DOTR:
      000F94 CD 05 EA         [ 4] 2809         CALL     TOR
      000F97 CD 0E 58         [ 4] 2810         CALL     STR
      000F9A CD 05 34         [ 4] 2811         CALL     RFROM
      000F9D CD 06 49         [ 4] 2812         CALL     OVER
      000FA0 CD 08 D0         [ 4] 2813         CALL     SUBB
      000FA3 CD 0F 26         [ 4] 2814         CALL     SPACS
      000FA6 CC 0F 41         [ 2] 2815         JP     TYPES
                                   2816 
                                   2817 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2818 ;       U.R     ( u +n -- )
                                   2819 ;       Display an unsigned integer
                                   2820 ;       in n column, right justified.
                                   2821 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000FA9                       2822         _HEADER UDOTR,3,"U.R"
      000FA9 0F 91                    1         .word LINK 
                           000FAB     2         LINK=.
      000FAB 03                       3         .byte 3  
      000FAC 55 2E 52                 4         .ascii "U.R"
      000FAF                          5         UDOTR:
      000FAF CD 05 EA         [ 4] 2823         CALL     TOR
      000FB2 CD 0D DB         [ 4] 2824         CALL     BDIGS
      000FB5 CD 0E 15         [ 4] 2825         CALL     DIGS
      000FB8 CD 0E 40         [ 4] 2826         CALL     EDIGS
      000FBB CD 05 34         [ 4] 2827         CALL     RFROM
      000FBE CD 06 49         [ 4] 2828         CALL     OVER
      000FC1 CD 08 D0         [ 4] 2829         CALL     SUBB
      000FC4 CD 0F 26         [ 4] 2830         CALL     SPACS
      000FC7 CC 0F 41         [ 2] 2831         JP     TYPES
                                   2832 
                                   2833 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2834 ;       U.      ( u -- )
                                   2835 ;       Display an unsigned integer
                                   2836 ;       in free format.
                                   2837 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000FCA                       2838         _HEADER UDOT,2,"U."
      000FCA 0F AB                    1         .word LINK 
                           000FCC     2         LINK=.
      000FCC 02                       3         .byte 2  
      000FCD 55 2E                    4         .ascii "U."
      000FCF                          5         UDOT:
      000FCF CD 0D DB         [ 4] 2839         CALL     BDIGS
      000FD2 CD 0E 15         [ 4] 2840         CALL     DIGS
      000FD5 CD 0E 40         [ 4] 2841         CALL     EDIGS
      000FD8 CD 0F 17         [ 4] 2842         CALL     SPACE
      000FDB CC 0F 41         [ 2] 2843         JP     TYPES
                                   2844 
                                   2845 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2846 ;   H. ( n -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



                                   2847 ;   display n in hexadecimal 
                                   2848 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000FDE                       2849         _HEADER HDOT,2,"H."
      000FDE 0F CC                    1         .word LINK 
                           000FE0     2         LINK=.
      000FE0 02                       3         .byte 2  
      000FE1 48 2E                    4         .ascii "H."
      000FE3                          5         HDOT:
      000FE3 CD 06 E7         [ 4] 2850         CALL BASE 
      000FE6 CD 04 E3         [ 4] 2851         CALL AT 
      000FE9 CD 05 EA         [ 4] 2852         CALL TOR 
      000FEC CD 0E 76         [ 4] 2853         CALL HEX 
      000FEF CD 0F CF         [ 4] 2854         CALL UDOT 
      000FF2 CD 05 34         [ 4] 2855         CALL RFROM 
      000FF5 CD 06 E7         [ 4] 2856         CALL BASE 
      000FF8 CD 04 D1         [ 4] 2857         CALL STORE 
      000FFB 81               [ 4] 2858         RET 
                                   2859 
                                   2860 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2861 ;       .       ( w -- )
                                   2862 ;       Display an integer in free
                                   2863 ;       format, preceeded by a space.
                                   2864 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000FFC                       2865         _HEADER DOT,1,"."
      000FFC 0F E0                    1         .word LINK 
                           000FFE     2         LINK=.
      000FFE 01                       3         .byte 1  
      000FFF 2E                       4         .ascii "."
      001000                          5         DOT:
      001000 CD 06 E7         [ 4] 2866         CALL     BASE
      001003 CD 04 E3         [ 4] 2867         CALL     AT
      001006 CD 04 6F         [ 4] 2868         CALL     DOLIT
      001009 00 0A                 2869         .word      10
      00100B CD 06 A7         [ 4] 2870         CALL     XORR    ;?decimal
      00100E CD 04 98         [ 4] 2871         CALL     QBRAN
      001011 10 16                 2872         .word      DOT1
      001013 CC 0F CF         [ 2] 2873         JP     UDOT
      001016 CD 0E 58         [ 4] 2874 DOT1:   CALL     STR
      001019 CD 0F 17         [ 4] 2875         CALL     SPACE
      00101C CC 0F 41         [ 2] 2876         JP     TYPES
                                   2877 
                                   2878 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2879 ;       ?       ( a -- )
                                   2880 ;       Display contents in memory cell.
                                   2881 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00101F                       2882         _HEADER QUEST,1,"?"
      00101F 0F FE                    1         .word LINK 
                           001021     2         LINK=.
      001021 01                       3         .byte 1  
      001022 3F                       4         .ascii "?"
      001023                          5         QUEST:
      001023 CD 04 E3         [ 4] 2883         CALL     AT
      001026 CC 10 00         [ 2] 2884         JP     DOT
                                   2885 
                                   2886 ;; Parsing
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                   2887 
                                   2888 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2889 ;       parse   ( b u c -- b u delta ; <string> )
                                   2890 ;       Scan string delimited by c.
                                   2891 ;       Return found string and its offset.
                                   2892 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001029                       2893         _HEADER PARS,5,"PARS$"
      001029 10 21                    1         .word LINK 
                           00102B     2         LINK=.
      00102B 05                       3         .byte 5  
      00102C 50 41 52 53 24           4         .ascii "PARS$"
      001031                          5         PARS:
      001031 CD 06 F6         [ 4] 2894         CALL     TEMP
      001034 CD 04 D1         [ 4] 2895         CALL     STORE
      001037 CD 06 49         [ 4] 2896         CALL     OVER
      00103A CD 05 EA         [ 4] 2897         CALL     TOR
      00103D CD 06 21         [ 4] 2898         CALL     DUPP
      001040 CD 04 98         [ 4] 2899         CALL     QBRAN
      001043 10 E9                 2900         .word    PARS8
      001045 CD 0B 82         [ 4] 2901         CALL     ONEM
      001048 CD 06 F6         [ 4] 2902         CALL     TEMP
      00104B CD 04 E3         [ 4] 2903         CALL     AT
      00104E CD 0B D4         [ 4] 2904         CALL     BLANK
      001051 CD 08 F8         [ 4] 2905         CALL     EQUAL
      001054 CD 04 98         [ 4] 2906         CALL     QBRAN
      001057 10 8A                 2907         .word      PARS3
      001059 CD 05 EA         [ 4] 2908         CALL     TOR
      00105C CD 0B D4         [ 4] 2909 PARS1:  CALL     BLANK
      00105F CD 06 49         [ 4] 2910         CALL     OVER
      001062 CD 05 01         [ 4] 2911         CALL     CAT     ;skip leading blanks ONLY
      001065 CD 08 D0         [ 4] 2912         CALL     SUBB
      001068 CD 06 58         [ 4] 2913         CALL     ZLESS
      00106B CD 08 73         [ 4] 2914         CALL     INVER
      00106E CD 04 98         [ 4] 2915         CALL     QBRAN
      001071 10 87                 2916         .word      PARS2
      001073 CD 0B 75         [ 4] 2917         CALL     ONEP
      001076 CD 04 83         [ 4] 2918         CALL     DONXT
      001079 10 5C                 2919         .word      PARS1
      00107B CD 05 34         [ 4] 2920         CALL     RFROM
      00107E CD 06 17         [ 4] 2921         CALL     DROP
      001081 CD 0B E1         [ 4] 2922         CALL     ZERO
      001084 CC 06 21         [ 2] 2923         JP     DUPP
      001087 CD 05 34         [ 4] 2924 PARS2:  CALL     RFROM
      00108A CD 06 49         [ 4] 2925 PARS3:  CALL     OVER
      00108D CD 06 31         [ 4] 2926         CALL     SWAPP
      001090 CD 05 EA         [ 4] 2927         CALL     TOR
      001093 CD 06 F6         [ 4] 2928 PARS4:  CALL     TEMP
      001096 CD 04 E3         [ 4] 2929         CALL     AT
      001099 CD 06 49         [ 4] 2930         CALL     OVER
      00109C CD 05 01         [ 4] 2931         CALL     CAT
      00109F CD 08 D0         [ 4] 2932         CALL     SUBB    ;scan for delimiter
      0010A2 CD 06 F6         [ 4] 2933         CALL     TEMP
      0010A5 CD 04 E3         [ 4] 2934         CALL     AT
      0010A8 CD 0B D4         [ 4] 2935         CALL     BLANK
      0010AB CD 08 F8         [ 4] 2936         CALL     EQUAL
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      0010AE CD 04 98         [ 4] 2937         CALL     QBRAN
      0010B1 10 B6                 2938         .word      PARS5
      0010B3 CD 06 58         [ 4] 2939         CALL     ZLESS
      0010B6 CD 04 98         [ 4] 2940 PARS5:  CALL     QBRAN
      0010B9 10 CB                 2941         .word      PARS6
      0010BB CD 0B 75         [ 4] 2942         CALL     ONEP
      0010BE CD 04 83         [ 4] 2943         CALL     DONXT
      0010C1 10 93                 2944         .word      PARS4
      0010C3 CD 06 21         [ 4] 2945         CALL     DUPP
      0010C6 CD 05 EA         [ 4] 2946         CALL     TOR
      0010C9 20 0F            [ 2] 2947         JRA     PARS7
      0010CB CD 05 34         [ 4] 2948 PARS6:  CALL     RFROM
      0010CE CD 06 17         [ 4] 2949         CALL     DROP
      0010D1 CD 06 21         [ 4] 2950         CALL     DUPP
      0010D4 CD 0B 75         [ 4] 2951         CALL     ONEP
      0010D7 CD 05 EA         [ 4] 2952         CALL     TOR
      0010DA CD 06 49         [ 4] 2953 PARS7:  CALL     OVER
      0010DD CD 08 D0         [ 4] 2954         CALL     SUBB
      0010E0 CD 05 34         [ 4] 2955         CALL     RFROM
      0010E3 CD 05 34         [ 4] 2956         CALL     RFROM
      0010E6 CC 08 D0         [ 2] 2957         JP     SUBB
      0010E9 CD 06 49         [ 4] 2958 PARS8:  CALL     OVER
      0010EC CD 05 34         [ 4] 2959         CALL     RFROM
      0010EF CC 08 D0         [ 2] 2960         JP     SUBB
                                   2961 
                                   2962 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2963 ;       PARSE   ( c -- b u ; <string> )
                                   2964 ;       Scan input stream and return
                                   2965 ;       counted string delimited by c.
                                   2966 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0010F2                       2967         _HEADER PARSE,5,"PARSE"
      0010F2 10 2B                    1         .word LINK 
                           0010F4     2         LINK=.
      0010F4 05                       3         .byte 5  
      0010F5 50 41 52 53 45           4         .ascii "PARSE"
      0010FA                          5         PARSE:
      0010FA CD 05 EA         [ 4] 2968         CALL     TOR
      0010FD CD 0C E0         [ 4] 2969         CALL     TIB
      001100 CD 07 05         [ 4] 2970         CALL     INN
      001103 CD 04 E3         [ 4] 2971         CALL     AT
      001106 CD 08 46         [ 4] 2972         CALL     PLUS    ;current input buffer pointer
      001109 CD 07 15         [ 4] 2973         CALL     NTIB
      00110C CD 04 E3         [ 4] 2974         CALL     AT
      00110F CD 07 05         [ 4] 2975         CALL     INN
      001112 CD 04 E3         [ 4] 2976         CALL     AT
      001115 CD 08 D0         [ 4] 2977         CALL     SUBB    ;remaining count
      001118 CD 05 34         [ 4] 2978         CALL     RFROM
      00111B CD 10 31         [ 4] 2979         CALL     PARS
      00111E CD 07 05         [ 4] 2980         CALL     INN
      001121 CC 0C 51         [ 2] 2981         JP     PSTOR
                                   2982 
                                   2983 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2984 ;       .(      ( -- )
                                   2985 ;       Output following string up to next ) .
                                   2986 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      001124                       2987         _HEADER DOTPR,IMEDD+2,".("
      001124 10 F4                    1         .word LINK 
                           001126     2         LINK=.
      001126 82                       3         .byte IMEDD+2  
      001127 2E 28                    4         .ascii ".("
      001129                          5         DOTPR:
      001129 CD 04 6F         [ 4] 2988         CALL     DOLIT
      00112C 00 29                 2989         .word     41	; ")"
      00112E CD 10 FA         [ 4] 2990         CALL     PARSE
      001131 CC 0F 41         [ 2] 2991         JP     TYPES
                                   2992 
                                   2993 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2994 ;       (       ( -- )
                                   2995 ;       Ignore following string up to next ).
                                   2996 ;       A comment.
                                   2997 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001134                       2998         _HEADER PAREN,IMEDD+1,"("
      001134 11 26                    1         .word LINK 
                           001136     2         LINK=.
      001136 81                       3         .byte IMEDD+1  
      001137 28                       4         .ascii "("
      001138                          5         PAREN:
      001138 CD 04 6F         [ 4] 2999         CALL     DOLIT
      00113B 00 29                 3000         .word     41	; ")"
      00113D CD 10 FA         [ 4] 3001         CALL     PARSE
      001140 CC 08 26         [ 2] 3002         JP     DDROP
                                   3003 
                                   3004 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3005 ;       \       ( -- )
                                   3006 ;       Ignore following text till
                                   3007 ;       end of line.
                                   3008 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001143                       3009         _HEADER BKSLA,IMEDD+1,"\\"
      001143 11 36                    1         .word LINK 
                           001145     2         LINK=.
      001145 81                       3         .byte IMEDD+1  
      001146 5C 5C                    4         .ascii "\\"
      001148                          5         BKSLA:
      001148 90 AE 00 0E      [ 2] 3010         ldw y,#UCTIB ; #TIB  
      00114C 90 FE            [ 2] 3011         ldw y,(y)
      00114E 90 89            [ 2] 3012         pushw y ; count in TIB 
      001150 90 AE 00 0C      [ 2] 3013         ldw y,#UINN ; >IN 
      001154 90 BF 26         [ 2] 3014         ldw YTEMP,y
      001157 90 85            [ 2] 3015         popw y 
      001159 91 CF 26         [ 5] 3016         ldw [YTEMP],y
      00115C 81               [ 4] 3017         ret 
                                   3018 
                                   3019 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3020 ;       WORD    ( c -- a ; <string> )
                                   3021 ;       Parse a word from input stream
                                   3022 ;       and copy it to code dictionary.
                                   3023 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00115D                       3024         _HEADER WORDD,4,"WORD"
      00115D 11 45                    1         .word LINK 
                           00115F     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      00115F 04                       3         .byte 4  
      001160 57 4F 52 44              4         .ascii "WORD"
      001164                          5         WORDD:
      001164 CD 10 FA         [ 4] 3025         CALL     PARSE
      001167 CD 0C BE         [ 4] 3026         CALL     HERE
      00116A CD 0B 4A         [ 4] 3027         CALL     CELLP
                           000000  3028 .IF CASE_SENSE 
                                   3029         JP      PACKS 
                           000001  3030 .ELSE                 
      00116D CD 0D 7E         [ 4] 3031         CALL     PACKS
                                   3032 ; uppercase TOKEN 
      001170 CD 06 21         [ 4] 3033         CALL    DUPP 
      001173 CD 0C A7         [ 4] 3034         CALL    COUNT 
      001176 CD 05 EA         [ 4] 3035         CALL    TOR 
      001179 CD 04 B4         [ 4] 3036         CALL    BRAN 
      00117C 11 AA                 3037         .word   UPPER2  
      00117E                       3038 UPPER:
      00117E CD 06 21         [ 4] 3039         CALL    DUPP 
      001181 CD 05 01         [ 4] 3040         CALL    CAT
      001184 CD 06 21         [ 4] 3041         CALL    DUPP 
      001187 CD 04 6F         [ 4] 3042         CALL   DOLIT
      00118A 00 61                 3043         .word   'a' 
      00118C CD 04 6F         [ 4] 3044         CALL    DOLIT
      00118F 00 7B                 3045         .word   'z'+1 
      001191 CD 09 D0         [ 4] 3046         CALL   WITHI 
      001194 CD 04 98         [ 4] 3047         CALL   QBRAN
      001197 11 A1                 3048         .word  UPPER1  
      001199 CD 04 6F         [ 4] 3049         CALL    DOLIT 
      00119C 00 DF                 3050         .word   0xDF 
      00119E CD 06 7E         [ 4] 3051         CALL    ANDD 
      0011A1                       3052 UPPER1:
      0011A1 CD 06 49         [ 4] 3053         CALL    OVER 
      0011A4 CD 04 F0         [ 4] 3054         CALL    CSTOR          
      0011A7 CD 0B 75         [ 4] 3055         CALL    ONEP 
      0011AA                       3056 UPPER2: 
      0011AA CD 04 83         [ 4] 3057         CALL    DONXT
      0011AD 11 7E                 3058         .word   UPPER  
      0011AF CD 06 17         [ 4] 3059         CALL    DROP  
      0011B2 81               [ 4] 3060         RET 
                                   3061 .ENDIF 
                                   3062 
                                   3063 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3064 ;       TOKEN   ( -- a ; <string> )
                                   3065 ;       Parse a word from input stream
                                   3066 ;       and copy it to name dictionary.
                                   3067 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0011B3                       3068         _HEADER TOKEN,5,"TOKEN"
      0011B3 11 5F                    1         .word LINK 
                           0011B5     2         LINK=.
      0011B5 05                       3         .byte 5  
      0011B6 54 4F 4B 45 4E           4         .ascii "TOKEN"
      0011BB                          5         TOKEN:
      0011BB CD 0B D4         [ 4] 3069         CALL     BLANK
      0011BE CC 11 64         [ 2] 3070         JP     WORDD
                                   3071 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                   3072 ;; Dictionary search
                                   3073 
                                   3074 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3075 ;       NAME>   ( na -- ca )
                                   3076 ;       Return a code address given
                                   3077 ;       a name address.
                                   3078 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0011C1                       3079         _HEADER NAMET,5,"NAME>"
      0011C1 11 B5                    1         .word LINK 
                           0011C3     2         LINK=.
      0011C3 05                       3         .byte 5  
      0011C4 4E 41 4D 45 3E           4         .ascii "NAME>"
      0011C9                          5         NAMET:
      0011C9 CD 0C A7         [ 4] 3080         CALL     COUNT
      0011CC CD 04 6F         [ 4] 3081         CALL     DOLIT
      0011CF 00 1F                 3082         .word      31
      0011D1 CD 06 7E         [ 4] 3083         CALL     ANDD
      0011D4 CC 08 46         [ 2] 3084         JP     PLUS
                                   3085 
                                   3086 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3087 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   3088 ;       Compare u cells in two
                                   3089 ;       strings. Return 0 if identical.
                                   3090 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0011D7                       3091         _HEADER SAMEQ,5,"SAME?"
      0011D7 11 C3                    1         .word LINK 
                           0011D9     2         LINK=.
      0011D9 05                       3         .byte 5  
      0011DA 53 41 4D 45 3F           4         .ascii "SAME?"
      0011DF                          5         SAMEQ:
      0011DF CD 0B 82         [ 4] 3092         CALL     ONEM
      0011E2 CD 05 EA         [ 4] 3093         CALL     TOR
      0011E5 20 29            [ 2] 3094         JRA     SAME2
      0011E7 CD 06 49         [ 4] 3095 SAME1:  CALL     OVER
      0011EA CD 05 45         [ 4] 3096         CALL     RAT
      0011ED CD 08 46         [ 4] 3097         CALL     PLUS
      0011F0 CD 05 01         [ 4] 3098         CALL     CAT
      0011F3 CD 06 49         [ 4] 3099         CALL     OVER
      0011F6 CD 05 45         [ 4] 3100         CALL     RAT
      0011F9 CD 08 46         [ 4] 3101         CALL     PLUS
      0011FC CD 05 01         [ 4] 3102         CALL     CAT
      0011FF CD 08 D0         [ 4] 3103         CALL     SUBB
      001202 CD 07 D4         [ 4] 3104         CALL     QDUP
      001205 CD 04 98         [ 4] 3105         CALL     QBRAN
      001208 12 10                 3106         .word      SAME2
      00120A CD 05 34         [ 4] 3107         CALL     RFROM
      00120D CC 06 17         [ 2] 3108         JP     DROP
      001210 CD 04 83         [ 4] 3109 SAME2:  CALL     DONXT
      001213 11 E7                 3110         .word      SAME1
      001215 CC 0B E1         [ 2] 3111         JP     ZERO
                                   3112 
                                   3113 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3114 ;       find    ( a va -- ca na | a F )
                                   3115 ;       Search vocabulary for string.
                                   3116 ;       Return ca and na if succeeded.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                   3117 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001218                       3118         _HEADER FIND,4,"FIND"
      001218 11 D9                    1         .word LINK 
                           00121A     2         LINK=.
      00121A 04                       3         .byte 4  
      00121B 46 49 4E 44              4         .ascii "FIND"
      00121F                          5         FIND:
      00121F CD 06 31         [ 4] 3119         CALL     SWAPP
      001222 CD 06 21         [ 4] 3120         CALL     DUPP
      001225 CD 05 01         [ 4] 3121         CALL     CAT
      001228 CD 06 F6         [ 4] 3122         CALL     TEMP
      00122B CD 04 D1         [ 4] 3123         CALL     STORE
      00122E CD 06 21         [ 4] 3124         CALL     DUPP
      001231 CD 04 E3         [ 4] 3125         CALL     AT
      001234 CD 05 EA         [ 4] 3126         CALL     TOR
      001237 CD 0B 4A         [ 4] 3127         CALL     CELLP
      00123A CD 06 31         [ 4] 3128         CALL     SWAPP
      00123D CD 04 E3         [ 4] 3129 FIND1:  CALL     AT
      001240 CD 06 21         [ 4] 3130         CALL     DUPP
      001243 CD 04 98         [ 4] 3131         CALL     QBRAN
      001246 12 7C                 3132         .word      FIND6
      001248 CD 06 21         [ 4] 3133         CALL     DUPP
      00124B CD 04 E3         [ 4] 3134         CALL     AT
      00124E CD 04 6F         [ 4] 3135         CALL     DOLIT
      001251 1F 7F                 3136         .word      MASKK
      001253 CD 06 7E         [ 4] 3137         CALL     ANDD
      001256 CD 05 45         [ 4] 3138         CALL     RAT
      001259 CD 06 A7         [ 4] 3139         CALL     XORR
      00125C CD 04 98         [ 4] 3140         CALL     QBRAN
      00125F 12 6B                 3141         .word      FIND2
      001261 CD 0B 4A         [ 4] 3142         CALL     CELLP
      001264 CD 04 6F         [ 4] 3143         CALL     DOLIT
      001267 FF FF                 3144         .word     0xFFFF
      001269 20 0C            [ 2] 3145         JRA     FIND3
      00126B CD 0B 4A         [ 4] 3146 FIND2:  CALL     CELLP
      00126E CD 06 F6         [ 4] 3147         CALL     TEMP
      001271 CD 04 E3         [ 4] 3148         CALL     AT
      001274 CD 11 DF         [ 4] 3149         CALL     SAMEQ
      001277 CD 04 B4         [ 4] 3150 FIND3:  CALL     BRAN
      00127A 12 8B                 3151         .word      FIND4
      00127C CD 05 34         [ 4] 3152 FIND6:  CALL     RFROM
      00127F CD 06 17         [ 4] 3153         CALL     DROP
      001282 CD 06 31         [ 4] 3154         CALL     SWAPP
      001285 CD 0B 59         [ 4] 3155         CALL     CELLM
      001288 CC 06 31         [ 2] 3156         JP     SWAPP
      00128B CD 04 98         [ 4] 3157 FIND4:  CALL     QBRAN
      00128E 12 98                 3158         .word      FIND5
      001290 CD 0B 59         [ 4] 3159         CALL     CELLM
      001293 CD 0B 59         [ 4] 3160         CALL     CELLM
      001296 20 A5            [ 2] 3161         JRA     FIND1
      001298 CD 05 34         [ 4] 3162 FIND5:  CALL     RFROM
      00129B CD 06 17         [ 4] 3163         CALL     DROP
      00129E CD 06 31         [ 4] 3164         CALL     SWAPP
      0012A1 CD 06 17         [ 4] 3165         CALL     DROP
      0012A4 CD 0B 59         [ 4] 3166         CALL     CELLM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      0012A7 CD 06 21         [ 4] 3167         CALL     DUPP
      0012AA CD 11 C9         [ 4] 3168         CALL     NAMET
      0012AD CC 06 31         [ 2] 3169         JP     SWAPP
                                   3170 
                                   3171 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3172 ;       NAME?   ( a -- ca na | a F )
                                   3173 ;       Search vocabularies for a string.
                                   3174 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0012B0                       3175         _HEADER NAMEQ,5,"NAME?"
      0012B0 12 1A                    1         .word LINK 
                           0012B2     2         LINK=.
      0012B2 05                       3         .byte 5  
      0012B3 4E 41 4D 45 3F           4         .ascii "NAME?"
      0012B8                          5         NAMEQ:
      0012B8 CD 07 6A         [ 4] 3176         CALL   CNTXT
      0012BB CC 12 1F         [ 2] 3177         JP     FIND
                                   3178 
                                   3179 ;; Terminal response
                                   3180 
                                   3181 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3182 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3183 ;       Backup cursor by one character.
                                   3184 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0012BE                       3185         _HEADER BKSP,2,"^H"
      0012BE 12 B2                    1         .word LINK 
                           0012C0     2         LINK=.
      0012C0 02                       3         .byte 2  
      0012C1 5E 48                    4         .ascii "^H"
      0012C3                          5         BKSP:
      0012C3 CD 05 EA         [ 4] 3186         CALL     TOR
      0012C6 CD 06 49         [ 4] 3187         CALL     OVER
      0012C9 CD 05 34         [ 4] 3188         CALL     RFROM
      0012CC CD 06 31         [ 4] 3189         CALL     SWAPP
      0012CF CD 06 49         [ 4] 3190         CALL     OVER
      0012D2 CD 06 A7         [ 4] 3191         CALL     XORR
      0012D5 CD 04 98         [ 4] 3192         CALL     QBRAN
      0012D8 12 F3                 3193         .word      BACK1
      0012DA CD 04 6F         [ 4] 3194         CALL     DOLIT
      0012DD 00 08                 3195         .word      BKSPP
      0012DF CD 04 36         [ 4] 3196         CALL     EMIT
      0012E2 CD 0B 82         [ 4] 3197         CALL     ONEM
      0012E5 CD 0B D4         [ 4] 3198         CALL     BLANK
      0012E8 CD 04 36         [ 4] 3199         CALL     EMIT
      0012EB CD 04 6F         [ 4] 3200         CALL     DOLIT
      0012EE 00 08                 3201         .word      BKSPP
      0012F0 CC 04 36         [ 2] 3202         JP     EMIT
      0012F3 81               [ 4] 3203 BACK1:  RET
                                   3204 
                                   3205 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3206 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3207 ;       Accept and echo key stroke
                                   3208 ;       and bump cursor.
                                   3209 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0012F4                       3210         _HEADER TAP,3,"TAP"
      0012F4 12 C0                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                           0012F6     2         LINK=.
      0012F6 03                       3         .byte 3  
      0012F7 54 41 50                 4         .ascii "TAP"
      0012FA                          5         TAP:
      0012FA CD 06 21         [ 4] 3211         CALL     DUPP
      0012FD CD 04 36         [ 4] 3212         CALL     EMIT
      001300 CD 06 49         [ 4] 3213         CALL     OVER
      001303 CD 04 F0         [ 4] 3214         CALL     CSTOR
      001306 CC 0B 75         [ 2] 3215         JP     ONEP
                                   3216 
                                   3217 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3218 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3219 ;       Process a key stroke,
                                   3220 ;       CR,LF or backspace.
                                   3221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001309                       3222         _HEADER KTAP,4,"KTAP"
      001309 12 F6                    1         .word LINK 
                           00130B     2         LINK=.
      00130B 04                       3         .byte 4  
      00130C 4B 54 41 50              4         .ascii "KTAP"
      001310                          5         KTAP:
      001310 CD 06 21         [ 4] 3223         CALL     DUPP
      001313 CD 04 6F         [ 4] 3224         CALL     DOLIT
                           000001  3225 .if EOL_CR
      001316 00 0D                 3226         .word   CRR
                           000000  3227 .else ; EOL_LF 
                                   3228         .word   LF
                                   3229 .endif 
      001318 CD 06 A7         [ 4] 3230         CALL     XORR
      00131B CD 04 98         [ 4] 3231         CALL     QBRAN
      00131E 13 36                 3232         .word      KTAP2
      001320 CD 04 6F         [ 4] 3233         CALL     DOLIT
      001323 00 08                 3234         .word      BKSPP
      001325 CD 06 A7         [ 4] 3235         CALL     XORR
      001328 CD 04 98         [ 4] 3236         CALL     QBRAN
      00132B 13 33                 3237         .word      KTAP1
      00132D CD 0B D4         [ 4] 3238         CALL     BLANK
      001330 CC 12 FA         [ 2] 3239         JP     TAP
      001333 CC 12 C3         [ 2] 3240 KTAP1:  JP     BKSP
      001336 CD 06 17         [ 4] 3241 KTAP2:  CALL     DROP
      001339 CD 06 31         [ 4] 3242         CALL     SWAPP
      00133C CD 06 17         [ 4] 3243         CALL     DROP
      00133F CC 06 21         [ 2] 3244         JP     DUPP
                                   3245 
                                   3246 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3247 ;       accept  ( b u -- b u )
                                   3248 ;       Accept characters to input
                                   3249 ;       buffer. Return with actual count.
                                   3250 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001342                       3251         _HEADER ACCEP,6,"ACCEPT"
      001342 13 0B                    1         .word LINK 
                           001344     2         LINK=.
      001344 06                       3         .byte 6  
      001345 41 43 43 45 50 54        4         .ascii "ACCEPT"
      00134B                          5         ACCEP:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      00134B CD 06 49         [ 4] 3252         CALL     OVER
      00134E CD 08 46         [ 4] 3253         CALL     PLUS
      001351 CD 06 49         [ 4] 3254         CALL     OVER
      001354 CD 08 31         [ 4] 3255 ACCP1:  CALL     DDUP
      001357 CD 06 A7         [ 4] 3256         CALL     XORR
      00135A CD 04 98         [ 4] 3257         CALL     QBRAN
      00135D 13 7F                 3258         .word      ACCP4
      00135F CD 0E DF         [ 4] 3259         CALL     KEY
      001362 CD 06 21         [ 4] 3260         CALL     DUPP
      001365 CD 0B D4         [ 4] 3261         CALL     BLANK
      001368 CD 04 6F         [ 4] 3262         CALL     DOLIT
      00136B 00 7F                 3263         .word      127
      00136D CD 09 D0         [ 4] 3264         CALL     WITHI
      001370 CD 04 98         [ 4] 3265         CALL     QBRAN
      001373 13 7A                 3266         .word      ACCP2
      001375 CD 12 FA         [ 4] 3267         CALL     TAP
      001378 20 03            [ 2] 3268         JRA     ACCP3
      00137A CD 13 10         [ 4] 3269 ACCP2:  CALL     KTAP
      00137D 20 D5            [ 2] 3270 ACCP3:  JRA     ACCP1
      00137F CD 06 17         [ 4] 3271 ACCP4:  CALL     DROP
      001382 CD 06 49         [ 4] 3272         CALL     OVER
      001385 CC 08 D0         [ 2] 3273         JP     SUBB
                                   3274 
                                   3275 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3276 ;       QUERY   ( -- )
                                   3277 ;       Accept input stream to
                                   3278 ;       terminal input buffer.
                                   3279 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001388                       3280         _HEADER QUERY,5,"QUERY"
      001388 13 44                    1         .word LINK 
                           00138A     2         LINK=.
      00138A 05                       3         .byte 5  
      00138B 51 55 45 52 59           4         .ascii "QUERY"
      001390                          5         QUERY:
      001390 CD 0C E0         [ 4] 3281         CALL     TIB
      001393 CD 04 6F         [ 4] 3282         CALL     DOLIT
      001396 00 50                 3283         .word      80
      001398 CD 13 4B         [ 4] 3284         CALL     ACCEP
      00139B CD 07 15         [ 4] 3285         CALL     NTIB
      00139E CD 04 D1         [ 4] 3286         CALL     STORE
      0013A1 CD 06 17         [ 4] 3287         CALL     DROP
      0013A4 CD 0B E1         [ 4] 3288         CALL     ZERO
      0013A7 CD 07 05         [ 4] 3289         CALL     INN
      0013AA CC 04 D1         [ 2] 3290         JP     STORE
                                   3291 
                                   3292 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3293 ;       ABORT   ( -- )
                                   3294 ;       Reset data stack and
                                   3295 ;       jump to QUIT.
                                   3296 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0013AD                       3297         _HEADER ABORT,5,"ABORT"
      0013AD 13 8A                    1         .word LINK 
                           0013AF     2         LINK=.
      0013AF 05                       3         .byte 5  
      0013B0 41 42 4F 52 54           4         .ascii "ABORT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      0013B5                          5         ABORT:
      0013B5 CD 14 AC         [ 4] 3298         CALL     PRESE
      0013B8 CC 14 C9         [ 2] 3299         JP     QUIT
                                   3300 
                                   3301 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3302 ;       abort"  ( f -- )
                                   3303 ;       Run time routine of ABORT".
                                   3304 ;       Abort with a message.
                                   3305 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0013BB                       3306         _HEADER ABORQ,COMPO+6,'ABORT"'
      0013BB 13 AF                    1         .word LINK 
                           0013BD     2         LINK=.
      0013BD 46                       3         .byte COMPO+6  
      0013BE 41 42 4F 52 54 22        4         .ascii 'ABORT"'
      0013C4                          5         ABORQ:
      0013C4 CD 04 98         [ 4] 3307         CALL     QBRAN
      0013C7 13 E3                 3308         .word      ABOR2   ;text flag
      0013C9 CD 0F 69         [ 4] 3309         CALL     DOSTR
      0013CC CD 0F 17         [ 4] 3310 ABOR1:  CALL     SPACE
      0013CF CD 0C A7         [ 4] 3311         CALL     COUNT
      0013D2 CD 0F 41         [ 4] 3312         CALL     TYPES
      0013D5 CD 04 6F         [ 4] 3313         CALL     DOLIT
      0013D8 00 3F                 3314         .word     63 ; "?"
      0013DA CD 04 36         [ 4] 3315         CALL     EMIT
      0013DD CD 0F 59         [ 4] 3316         CALL     CR
      0013E0 CC 13 B5         [ 2] 3317         JP     ABORT   ;pass error string
      0013E3 CD 0F 69         [ 4] 3318 ABOR2:  CALL     DOSTR
      0013E6 CC 06 17         [ 2] 3319         JP     DROP
                                   3320 
                                   3321 ;; The text interpreter
                                   3322 
                                   3323 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3324 ;       $INTERPRET      ( a -- )
                                   3325 ;       Interpret a word. If failed,
                                   3326 ;       try to convert it to an integer.
                                   3327 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0013E9                       3328         _HEADER INTER,10,"$INTERPRET"
      0013E9 13 BD                    1         .word LINK 
                           0013EB     2         LINK=.
      0013EB 0A                       3         .byte 10  
      0013EC 24 49 4E 54 45 52 50     4         .ascii "$INTERPRET"
             52 45 54
      0013F6                          5         INTER:
      0013F6 CD 12 B8         [ 4] 3329         CALL     NAMEQ
      0013F9 CD 07 D4         [ 4] 3330         CALL     QDUP    ;?defined
      0013FC CD 04 98         [ 4] 3331         CALL     QBRAN
      0013FF 14 20                 3332         .word      INTE1
      001401 CD 04 E3         [ 4] 3333         CALL     AT
      001404 CD 04 6F         [ 4] 3334         CALL     DOLIT
      001407 40 00                 3335 	.word       0x4000	; COMPO*256
      001409 CD 06 7E         [ 4] 3336         CALL     ANDD    ;?compile only lexicon bits
      00140C CD 13 C4         [ 4] 3337         CALL     ABORQ
      00140F 0D                    3338         .byte      13
      001410 20 63 6F 6D 70 69 6C  3339         .ascii     " compile only"
             65 20 6F 6E 6C 79
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      00141D CC 04 C4         [ 2] 3340         JP     EXECU
      001420 CD 25 60         [ 4] 3341 INTE1:  CALL     NUMBQ   ;convert a number
      001423 CD 04 98         [ 4] 3342         CALL     QBRAN
      001426 13 CC                 3343         .word    ABOR1
      001428 81               [ 4] 3344         RET
                                   3345 
                                   3346 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3347 ;       [       ( -- )
                                   3348 ;       Start  text interpreter.
                                   3349 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001429                       3350         _HEADER LBRAC,IMEDD+1,"["
      001429 13 EB                    1         .word LINK 
                           00142B     2         LINK=.
      00142B 81                       3         .byte IMEDD+1  
      00142C 5B                       4         .ascii "["
      00142D                          5         LBRAC:
      00142D CD 04 6F         [ 4] 3351         CALL   DOLIT
      001430 13 F6                 3352         .word  INTER
      001432 CD 07 48         [ 4] 3353         CALL   TEVAL
      001435 CC 04 D1         [ 2] 3354         JP     STORE
                                   3355 
                                   3356 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3357 ;       .OK     ( -- )
                                   3358 ;       Display 'ok' while interpreting.
                                   3359 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001438                       3360         _HEADER DOTOK,3,".OK"
      001438 14 2B                    1         .word LINK 
                           00143A     2         LINK=.
      00143A 03                       3         .byte 3  
      00143B 2E 4F 4B                 4         .ascii ".OK"
      00143E                          5         DOTOK:
      00143E CD 04 6F         [ 4] 3361         CALL     DOLIT
      001441 13 F6                 3362         .word      INTER
      001443 CD 07 48         [ 4] 3363         CALL     TEVAL
      001446 CD 04 E3         [ 4] 3364         CALL     AT
      001449 CD 08 F8         [ 4] 3365         CALL     EQUAL
      00144C CD 04 98         [ 4] 3366         CALL     QBRAN
      00144F 14 58                 3367         .word      DOTO1
      001451 CD 0F 86         [ 4] 3368         CALL     DOTQP
      001454 03                    3369         .byte      3
      001455 20 6F 6B              3370         .ascii     " ok"
      001458 CC 0F 59         [ 2] 3371 DOTO1:  JP     CR
                                   3372 
                                   3373 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3374 ;       ?STACK  ( -- )
                                   3375 ;       Abort if stack underflows.
                                   3376 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00145B                       3377         _HEADER QSTAC,6,"?STACK"
      00145B 14 3A                    1         .word LINK 
                           00145D     2         LINK=.
      00145D 06                       3         .byte 6  
      00145E 3F 53 54 41 43 4B        4         .ascii "?STACK"
      001464                          5         QSTAC:
      001464 CD 0C 23         [ 4] 3378         CALL     DEPTH
      001467 CD 06 58         [ 4] 3379         CALL     ZLESS   ;check only for underflow
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      00146A CD 13 C4         [ 4] 3380         CALL     ABORQ
      00146D 0B                    3381         .byte      11
      00146E 20 75 6E 64 65 72 66  3382         .ascii     " underflow "
             6C 6F 77 20
      001479 81               [ 4] 3383         RET
                                   3384 
                                   3385 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3386 ;       EVAL    ( -- )
                                   3387 ;       Interpret  input stream.
                                   3388 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00147A                       3389         _HEADER EVAL,4,"EVAL"
      00147A 14 5D                    1         .word LINK 
                           00147C     2         LINK=.
      00147C 04                       3         .byte 4  
      00147D 45 56 41 4C              4         .ascii "EVAL"
      001481                          5         EVAL:
      001481 CD 11 BB         [ 4] 3390 EVAL1:  CALL     TOKEN
      001484 CD 06 21         [ 4] 3391         CALL     DUPP
      001487 CD 05 01         [ 4] 3392         CALL     CAT     ;?input stream empty
      00148A CD 04 98         [ 4] 3393         CALL     QBRAN
      00148D 14 9D                 3394         .word    EVAL2
      00148F CD 07 48         [ 4] 3395         CALL     TEVAL
      001492 CD 0C F4         [ 4] 3396         CALL     ATEXE
      001495 CD 14 64         [ 4] 3397         CALL     QSTAC   ;evaluate input, check stack
      001498 CD 04 B4         [ 4] 3398         CALL     BRAN
      00149B 14 81                 3399         .word    EVAL1
      00149D CD 06 17         [ 4] 3400 EVAL2:  CALL     DROP
      0014A0 CC 14 3E         [ 2] 3401         JP       DOTOK
                                   3402 
                                   3403 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3404 ;       PRESET  ( -- )
                                   3405 ;       Reset data stack pointer and
                                   3406 ;       terminal input buffer.
                                   3407 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014A3                       3408         _HEADER PRESE,6,"PRESET"
      0014A3 14 7C                    1         .word LINK 
                           0014A5     2         LINK=.
      0014A5 06                       3         .byte 6  
      0014A6 50 52 45 53 45 54        4         .ascii "PRESET"
      0014AC                          5         PRESE:
      0014AC CD 04 6F         [ 4] 3409         CALL     DOLIT
      0014AF 16 80                 3410         .word      SPP
      0014B1 CD 06 0E         [ 4] 3411         CALL     SPSTO
      0014B4 CD 04 6F         [ 4] 3412         CALL     DOLIT
      0014B7 17 00                 3413         .word      TIBB
      0014B9 CD 07 15         [ 4] 3414         CALL     NTIB
      0014BC CD 0B 4A         [ 4] 3415         CALL     CELLP
      0014BF CC 04 D1         [ 2] 3416         JP     STORE
                                   3417 
                                   3418 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3419 ;       QUIT    ( -- )
                                   3420 ;       Reset return stack pointer
                                   3421 ;       and start text interpreter.
                                   3422 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014C2                       3423         _HEADER QUIT,4,"QUIT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      0014C2 14 A5                    1         .word LINK 
                           0014C4     2         LINK=.
      0014C4 04                       3         .byte 4  
      0014C5 51 55 49 54              4         .ascii "QUIT"
      0014C9                          5         QUIT:
      0014C9 CD 04 6F         [ 4] 3424         CALL     DOLIT
      0014CC 17 FF                 3425         .word      RPP
      0014CE CD 05 1E         [ 4] 3426         CALL     RPSTO   ;reset return stack pointer
      0014D1 CD 14 2D         [ 4] 3427 QUIT1:  CALL     LBRAC   ;start interpretation
      0014D4 CD 13 90         [ 4] 3428 QUIT2:  CALL     QUERY   ;get input
      0014D7 CD 14 81         [ 4] 3429         CALL     EVAL
      0014DA 20 F8            [ 2] 3430         JRA     QUIT2   ;continue till error
                                   3431 
                                   3432 ;; The compiler
                                   3433 
                                   3434 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3435 ;       '       ( -- ca )
                                   3436 ;       Search vocabularies for
                                   3437 ;       next word in input stream.
                                   3438 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014DC                       3439         _HEADER TICK,1,"'"
      0014DC 14 C4                    1         .word LINK 
                           0014DE     2         LINK=.
      0014DE 01                       3         .byte 1  
      0014DF 27                       4         .ascii "'"
      0014E0                          5         TICK:
      0014E0 CD 11 BB         [ 4] 3440         CALL     TOKEN
      0014E3 CD 12 B8         [ 4] 3441         CALL     NAMEQ   ;?defined
      0014E6 CD 04 98         [ 4] 3442         CALL     QBRAN
      0014E9 13 CC                 3443         .word      ABOR1
      0014EB 81               [ 4] 3444         RET     ;yes, push code address
                                   3445 
                                   3446 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3447 ;       ALLOT   ( n -- )
                                   3448 ;       Allocate n bytes to RAM 
                                   3449 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014EC                       3450         _HEADER ALLOT,5,"ALLOT"
      0014EC 14 DE                    1         .word LINK 
                           0014EE     2         LINK=.
      0014EE 05                       3         .byte 5  
      0014EF 41 4C 4C 4F 54           4         .ascii "ALLOT"
      0014F4                          5         ALLOT:
      0014F4 CD 07 78         [ 4] 3451         CALL     VPP
                                   3452 ; must update APP_VP each time VP is modidied
      0014F7 CD 0C 51         [ 4] 3453         call PSTOR 
      0014FA CC 1C AC         [ 2] 3454         jp UPDATVP 
                                   3455 
                                   3456 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3457 ;       ,       ( w -- )
                                   3458 ;         Compile an integer into
                                   3459 ;         variable space.
                                   3460 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014FD                       3461         _HEADER COMMA,1,^/"\,"/
      0014FD 14 EE                    1         .word LINK 
                           0014FF     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      0014FF 01                       3         .byte 1  
      001500 5C 2C                    4         .ascii "\,"
      001502                          5         COMMA:
      001502 CD 0C BE         [ 4] 3462         CALL     HERE
      001505 CD 06 21         [ 4] 3463         CALL     DUPP
      001508 CD 0B 4A         [ 4] 3464         CALL     CELLP   ;cell boundary
      00150B CD 07 78         [ 4] 3465         CALL     VPP
      00150E CD 04 D1         [ 4] 3466         CALL     STORE
      001511 CC 04 D1         [ 2] 3467         JP     STORE
                                   3468 
                                   3469 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3470 ;       C,      ( c -- )
                                   3471 ;       Compile a byte into
                                   3472 ;       variables space.
                                   3473 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001514                       3474         _HEADER CCOMMA,2,^/"C,"/
      001514 14 FF                    1         .word LINK 
                           001516     2         LINK=.
      001516 02                       3         .byte 2  
      001517 43 2C                    4         .ascii "C,"
      001519                          5         CCOMMA:
      001519 CD 0C BE         [ 4] 3475         CALL     HERE
      00151C CD 06 21         [ 4] 3476         CALL     DUPP
      00151F CD 0B 75         [ 4] 3477         CALL     ONEP
      001522 CD 07 78         [ 4] 3478         CALL     VPP
      001525 CD 04 D1         [ 4] 3479         CALL     STORE
      001528 CC 04 F0         [ 2] 3480         JP     CSTOR
                                   3481 
                                   3482 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3483 ;       [COMPILE]       ( -- ; <string> )
                                   3484 ;       Compile next immediate
                                   3485 ;       word into code dictionary.
                                   3486 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00152B                       3487         _HEADER BCOMP,IMEDD+9,"[COMPILE]"
      00152B 15 16                    1         .word LINK 
                           00152D     2         LINK=.
      00152D 89                       3         .byte IMEDD+9  
      00152E 5B 43 4F 4D 50 49 4C     4         .ascii "[COMPILE]"
             45 5D
      001537                          5         BCOMP:
      001537 CD 14 E0         [ 4] 3488         CALL     TICK
      00153A CC 18 0C         [ 2] 3489         JP     JSRC
                                   3490 
                                   3491 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3492 ;       COMPILE ( -- )
                                   3493 ;       Compile next jsr in
                                   3494 ;       colon list to code dictionary.
                                   3495 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00153D                       3496         _HEADER COMPI,COMPO+7,"COMPILE"
      00153D 15 2D                    1         .word LINK 
                           00153F     2         LINK=.
      00153F 47                       3         .byte COMPO+7  
      001540 43 4F 4D 50 49 4C 45     4         .ascii "COMPILE"
      001547                          5         COMPI:
      001547 CD 05 34         [ 4] 3497         CALL     RFROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      00154A CD 06 21         [ 4] 3498         CALL     DUPP
      00154D CD 04 E3         [ 4] 3499         CALL     AT
      001550 CD 18 0C         [ 4] 3500         CALL     JSRC    ;compile subroutine
      001553 CD 0B 4A         [ 4] 3501         CALL     CELLP
      001556 90 93            [ 1] 3502         ldw y,x 
      001558 90 FE            [ 2] 3503         ldw y,(y)
      00155A 1C 00 02         [ 2] 3504         addw x,#CELLL 
      00155D 90 FC            [ 2] 3505         jp (y)
                                   3506 
                                   3507 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3508 ;       LITERAL ( w -- )
                                   3509 ;       Compile tos to dictionary
                                   3510 ;       as an integer literal.
                                   3511 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00155F                       3512         _HEADER LITER,COMPO+IMEDD+7,"LITERAL"
      00155F 15 3F                    1         .word LINK 
                           001561     2         LINK=.
      001561 C7                       3         .byte COMPO+IMEDD+7  
      001562 4C 49 54 45 52 41 4C     4         .ascii "LITERAL"
      001569                          5         LITER:
      001569 CD 15 47         [ 4] 3513         CALL     COMPI
      00156C 04 6F                 3514         .word DOLIT 
      00156E CC 15 02         [ 2] 3515         JP     COMMA
                                   3516 
                                   3517 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3518 ;       $,"     ( -- )
                                   3519 ;       Compile a literal string
                                   3520 ;       up to next " .
                                   3521 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3522 ;        _HEADER STRCQ,3,^/'$,"'/
      001571                       3523 STRCQ:
      001571 CD 04 6F         [ 4] 3524         CALL     DOLIT
      001574 00 22                 3525         .word     34	; "
      001576 CD 10 FA         [ 4] 3526         CALL     PARSE
      001579 CD 0C BE         [ 4] 3527         CALL     HERE
      00157C CD 0D 7E         [ 4] 3528         CALL     PACKS   ;string to code dictionary
      00157F CD 0C A7         [ 4] 3529         CALL     COUNT
      001582 CD 08 46         [ 4] 3530         CALL     PLUS    ;calculate aligned end of string
      001585 CD 07 78         [ 4] 3531         CALL     VPP
      001588 CC 04 D1         [ 2] 3532         JP     STORE
                                   3533 
                                   3534 ;; Structures
                                   3535 
                                   3536 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3537 ;       FOR     ( -- a )
                                   3538 ;       Start a FOR-NEXT loop
                                   3539 ;       structure in a colon definition.
                                   3540 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00158B                       3541         _HEADER FOR,IMEDD+3,"FOR"
      00158B 15 61                    1         .word LINK 
                           00158D     2         LINK=.
      00158D 83                       3         .byte IMEDD+3  
      00158E 46 4F 52                 4         .ascii "FOR"
      001591                          5         FOR:
      001591 CD 15 47         [ 4] 3542         CALL     COMPI
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      001594 05 EA                 3543         .word TOR 
      001596 CC 0C BE         [ 2] 3544         JP     HERE
                                   3545 
                                   3546 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3547 ;       NEXT    ( a -- )
                                   3548 ;       Terminate a FOR-NEXT loop.
                                   3549 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001599                       3550         _HEADER NEXT,IMEDD+4,"NEXT"
      001599 15 8D                    1         .word LINK 
                           00159B     2         LINK=.
      00159B 84                       3         .byte IMEDD+4  
      00159C 4E 45 58 54              4         .ascii "NEXT"
      0015A0                          5         NEXT:
      0015A0 CD 15 47         [ 4] 3551         CALL     COMPI
      0015A3 04 83                 3552         .word DONXT 
      0015A5 CD 07 C4         [ 4] 3553         call ADRADJ
      0015A8 CC 15 02         [ 2] 3554         JP     COMMA
                                   3555 
                                   3556 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3557 ;       I ( -- n )
                                   3558 ;       stack COUNTER
                                   3559 ;       of innermost FOR-NEXT  
                                   3560 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015AB                       3561         _HEADER IFETCH,1,"I"
      0015AB 15 9B                    1         .word LINK 
                           0015AD     2         LINK=.
      0015AD 01                       3         .byte 1  
      0015AE 49                       4         .ascii "I"
      0015AF                          5         IFETCH:
      0015AF 1D 00 02         [ 2] 3562         subw x,#CELLL 
      0015B2 16 03            [ 2] 3563         ldw y,(3,sp)
      0015B4 FF               [ 2] 3564         ldw (x),y 
      0015B5 81               [ 4] 3565         ret 
                                   3566 
                                   3567 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3568 ;       J ( -- n )
                                   3569 ;   stack COUNTER
                                   3570 ;   of outer FOR-NEXT  
                                   3571 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015B6                       3572         _HEADER JFETCH,1,"J"
      0015B6 15 AD                    1         .word LINK 
                           0015B8     2         LINK=.
      0015B8 01                       3         .byte 1  
      0015B9 4A                       4         .ascii "J"
      0015BA                          5         JFETCH:
      0015BA 1D 00 02         [ 2] 3573         SUBW X,#CELLL 
      0015BD 16 05            [ 2] 3574         LDW Y,(5,SP)
      0015BF FF               [ 2] 3575         LDW (X),Y 
      0015C0 81               [ 4] 3576         RET 
                                   3577 
                                   3578 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3579 ;       BEGIN   ( -- a )
                                   3580 ;       Start an infinite or
                                   3581 ;       indefinite loop structure.
                                   3582 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      0015C1                       3583         _HEADER BEGIN,IMEDD+5,"BEGIN"
      0015C1 15 B8                    1         .word LINK 
                           0015C3     2         LINK=.
      0015C3 85                       3         .byte IMEDD+5  
      0015C4 42 45 47 49 4E           4         .ascii "BEGIN"
      0015C9                          5         BEGIN:
      0015C9 CC 0C BE         [ 2] 3584         JP     HERE
                                   3585 
                                   3586 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3587 ;       UNTIL   ( a -- )
                                   3588 ;       Terminate a BEGIN-UNTIL
                                   3589 ;       indefinite loop structure.
                                   3590 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015CC                       3591         _HEADER UNTIL,IMEDD+5,"UNTIL"
      0015CC 15 C3                    1         .word LINK 
                           0015CE     2         LINK=.
      0015CE 85                       3         .byte IMEDD+5  
      0015CF 55 4E 54 49 4C           4         .ascii "UNTIL"
      0015D4                          5         UNTIL:
      0015D4 CD 15 47         [ 4] 3592         CALL     COMPI
      0015D7 04 98                 3593         .word    QBRAN 
      0015D9 CD 07 C4         [ 4] 3594         call ADRADJ
      0015DC CC 15 02         [ 2] 3595         JP     COMMA
                                   3596 
                                   3597 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3598 ;       AGAIN   ( a -- )
                                   3599 ;       Terminate a BEGIN-AGAIN
                                   3600 ;       infinite loop structure.
                                   3601 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015DF                       3602         _HEADER AGAIN,IMEDD+5,"AGAIN"
      0015DF 15 CE                    1         .word LINK 
                           0015E1     2         LINK=.
      0015E1 85                       3         .byte IMEDD+5  
      0015E2 41 47 41 49 4E           4         .ascii "AGAIN"
      0015E7                          5         AGAIN:
      0015E7 CD 15 47         [ 4] 3603         CALL     COMPI
      0015EA 04 B4                 3604         .word BRAN
      0015EC CD 07 C4         [ 4] 3605         call ADRADJ 
      0015EF CC 15 02         [ 2] 3606         JP     COMMA
                                   3607 
                                   3608 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3609 ;       IF      ( -- A )
                                   3610 ;       Begin a conditional branch.
                                   3611 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015F2                       3612         _HEADER IFF,IMEDD+2,"IF"
      0015F2 15 E1                    1         .word LINK 
                           0015F4     2         LINK=.
      0015F4 82                       3         .byte IMEDD+2  
      0015F5 49 46                    4         .ascii "IF"
      0015F7                          5         IFF:
      0015F7 CD 15 47         [ 4] 3613         CALL     COMPI
      0015FA 04 98                 3614         .word QBRAN
      0015FC CD 0C BE         [ 4] 3615         CALL     HERE
      0015FF CD 0B E1         [ 4] 3616         CALL     ZERO
      001602 CC 15 02         [ 2] 3617         JP     COMMA
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                   3618 
                                   3619 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3620 ;       THEN        ( A -- )
                                   3621 ;       Terminate a conditional 
                                   3622 ;       branch structure.
                                   3623 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001605                       3624         _HEADER THENN,IMEDD+4,"THEN"
      001605 15 F4                    1         .word LINK 
                           001607     2         LINK=.
      001607 84                       3         .byte IMEDD+4  
      001608 54 48 45 4E              4         .ascii "THEN"
      00160C                          5         THENN:
      00160C CD 0C BE         [ 4] 3625         CALL     HERE
      00160F CD 07 C4         [ 4] 3626         call ADRADJ 
      001612 CD 06 31         [ 4] 3627         CALL     SWAPP
      001615 CC 04 D1         [ 2] 3628         JP     STORE
                                   3629 
                                   3630 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3631 ;       ELSE        ( A -- A )
                                   3632 ;       Start the false clause in 
                                   3633 ;       an IF-ELSE-THEN structure.
                                   3634 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001618                       3635         _HEADER ELSEE,IMEDD+4,"ELSE"
      001618 16 07                    1         .word LINK 
                           00161A     2         LINK=.
      00161A 84                       3         .byte IMEDD+4  
      00161B 45 4C 53 45              4         .ascii "ELSE"
      00161F                          5         ELSEE:
      00161F CD 15 47         [ 4] 3636         CALL     COMPI
      001622 04 B4                 3637         .word BRAN
      001624 CD 0C BE         [ 4] 3638         CALL     HERE
      001627 CD 0B E1         [ 4] 3639         CALL     ZERO
      00162A CD 15 02         [ 4] 3640         CALL     COMMA
      00162D CD 06 31         [ 4] 3641         CALL     SWAPP
      001630 CD 0C BE         [ 4] 3642         CALL     HERE
      001633 CD 07 C4         [ 4] 3643         call ADRADJ 
      001636 CD 06 31         [ 4] 3644         CALL     SWAPP
      001639 CC 04 D1         [ 2] 3645         JP     STORE
                                   3646 
                                   3647 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3648 ;       AHEAD       ( -- A )
                                   3649 ;       Compile a forward branch
                                   3650 ;       instruction.
                                   3651 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00163C                       3652         _HEADER AHEAD,IMEDD+5,"AHEAD"
      00163C 16 1A                    1         .word LINK 
                           00163E     2         LINK=.
      00163E 85                       3         .byte IMEDD+5  
      00163F 41 48 45 41 44           4         .ascii "AHEAD"
      001644                          5         AHEAD:
      001644 CD 15 47         [ 4] 3653         CALL     COMPI
      001647 04 B4                 3654         .word BRAN
      001649 CD 0C BE         [ 4] 3655         CALL     HERE
      00164C CD 0B E1         [ 4] 3656         CALL     ZERO
      00164F CC 15 02         [ 2] 3657         JP     COMMA
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                                   3658 
                                   3659 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3660 ;       WHILE       ( a -- A a )
                                   3661 ;       Conditional branch out of a 
                                   3662 ;       BEGIN-WHILE-REPEAT loop.
                                   3663 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001652                       3664         _HEADER WHILE,IMEDD+5,"WHILE"
      001652 16 3E                    1         .word LINK 
                           001654     2         LINK=.
      001654 85                       3         .byte IMEDD+5  
      001655 57 48 49 4C 45           4         .ascii "WHILE"
      00165A                          5         WHILE:
      00165A CD 15 47         [ 4] 3665         CALL     COMPI
      00165D 04 98                 3666         .word QBRAN
      00165F CD 0C BE         [ 4] 3667         CALL     HERE
      001662 CD 0B E1         [ 4] 3668         CALL     ZERO
      001665 CD 15 02         [ 4] 3669         CALL     COMMA
      001668 CC 06 31         [ 2] 3670         JP     SWAPP
                                   3671 
                                   3672 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3673 ;       REPEAT      ( A a -- )
                                   3674 ;       Terminate a BEGIN-WHILE-REPEAT 
                                   3675 ;       indefinite loop.
                                   3676 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00166B                       3677         _HEADER REPEA,IMEDD+6,"REPEAT"
      00166B 16 54                    1         .word LINK 
                           00166D     2         LINK=.
      00166D 86                       3         .byte IMEDD+6  
      00166E 52 45 50 45 41 54        4         .ascii "REPEAT"
      001674                          5         REPEA:
      001674 CD 15 47         [ 4] 3678         CALL     COMPI
      001677 04 B4                 3679         .word BRAN
      001679 CD 07 C4         [ 4] 3680         call ADRADJ 
      00167C CD 15 02         [ 4] 3681         CALL     COMMA
      00167F CD 0C BE         [ 4] 3682         CALL     HERE
      001682 CD 07 C4         [ 4] 3683         call ADRADJ 
      001685 CD 06 31         [ 4] 3684         CALL     SWAPP
      001688 CC 04 D1         [ 2] 3685         JP     STORE
                                   3686 
                                   3687 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3688 ;       AFT         ( a -- a A )
                                   3689 ;       Jump to THEN in a FOR-AFT-THEN-NEXT 
                                   3690 ;       loop the first time through.
                                   3691 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00168B                       3692         _HEADER AFT,IMEDD+3,"AFT"
      00168B 16 6D                    1         .word LINK 
                           00168D     2         LINK=.
      00168D 83                       3         .byte IMEDD+3  
      00168E 41 46 54                 4         .ascii "AFT"
      001691                          5         AFT:
      001691 CD 06 17         [ 4] 3693         CALL     DROP
      001694 CD 16 44         [ 4] 3694         CALL     AHEAD
      001697 CD 0C BE         [ 4] 3695         CALL     HERE
      00169A CC 06 31         [ 2] 3696         JP     SWAPP
                                   3697 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                   3698 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3699 ;       ABORT"      ( -- ; <string> )
                                   3700 ;       Conditional abort with an error message.
                                   3701 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00169D                       3702         _HEADER ABRTQ,IMEDD+6,'ABORT"'
      00169D 16 8D                    1         .word LINK 
                           00169F     2         LINK=.
      00169F 86                       3         .byte IMEDD+6  
      0016A0 41 42 4F 52 54 22        4         .ascii 'ABORT"'
      0016A6                          5         ABRTQ:
      0016A6 CD 15 47         [ 4] 3703         CALL     COMPI
      0016A9 13 C4                 3704         .word ABORQ
      0016AB CC 15 71         [ 2] 3705         JP     STRCQ
                                   3706 
                                   3707 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3708 ;       $"     ( -- ; <string> )
                                   3709 ;       Compile an inline string literal.
                                   3710 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016AE                       3711         _HEADER STRQ,IMEDD+2,'$"'
      0016AE 16 9F                    1         .word LINK 
                           0016B0     2         LINK=.
      0016B0 82                       3         .byte IMEDD+2  
      0016B1 24 22                    4         .ascii '$"'
      0016B3                          5         STRQ:
      0016B3 CD 15 47         [ 4] 3712         CALL     COMPI
      0016B6 0F 82                 3713         .word STRQP 
      0016B8 CC 15 71         [ 2] 3714         JP     STRCQ
                                   3715 
                                   3716 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3717 ;       ."          ( -- ; <string> )
                                   3718 ;       Compile an inline string literal 
                                   3719 ;       to be typed out at run time.
                                   3720 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016BB                       3721         _HEADER DOTQ,IMEDD+2,'."'
      0016BB 16 B0                    1         .word LINK 
                           0016BD     2         LINK=.
      0016BD 82                       3         .byte IMEDD+2  
      0016BE 2E 22                    4         .ascii '."'
      0016C0                          5         DOTQ:
      0016C0 CD 15 47         [ 4] 3722         CALL     COMPI
      0016C3 0F 86                 3723         .word DOTQP 
      0016C5 CC 15 71         [ 2] 3724         JP     STRCQ
                                   3725 
                                   3726 ;; Name compiler
                                   3727 
                                   3728 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3729 ;       ?UNIQUE ( a -- a )
                                   3730 ;       Display a warning message
                                   3731 ;       if word already exists.
                                   3732 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016C8                       3733         _HEADER UNIQU,7,"?UNIQUE"
      0016C8 16 BD                    1         .word LINK 
                           0016CA     2         LINK=.
      0016CA 07                       3         .byte 7  
      0016CB 3F 55 4E 49 51 55 45     4         .ascii "?UNIQUE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      0016D2                          5         UNIQU:
      0016D2 CD 06 21         [ 4] 3734         CALL     DUPP
      0016D5 CD 12 B8         [ 4] 3735         CALL     NAMEQ   ;?name exists
      0016D8 CD 04 98         [ 4] 3736         CALL     QBRAN
      0016DB 16 F1                 3737         .word      UNIQ1
      0016DD CD 0F 86         [ 4] 3738         CALL     DOTQP   ;redef are OK
      0016E0 07                    3739         .byte       7
      0016E1 20 72 65 44 65 66 20  3740         .ascii     " reDef "       
      0016E8 CD 06 49         [ 4] 3741         CALL     OVER
      0016EB CD 0C A7         [ 4] 3742         CALL     COUNT
      0016EE CD 0F 41         [ 4] 3743         CALL     TYPES   ;just in case
      0016F1 CC 06 17         [ 2] 3744 UNIQ1:  JP     DROP
                                   3745 
                                   3746 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3747 ;       $,n     ( na -- )
                                   3748 ;       Build a new dictionary name
                                   3749 ;       using string at na.
                                   3750 ; compile dans l'espace des variables 
                                   3751 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3752 ;        _HEADER SNAME,3,^/"$,n"/
      0016F4                       3753 SNAME: 
      0016F4 CD 06 21         [ 4] 3754         CALL     DUPP
      0016F7 CD 05 01         [ 4] 3755         CALL     CAT     ;?null input
      0016FA CD 04 98         [ 4] 3756         CALL     QBRAN
      0016FD 17 2A                 3757         .word      PNAM1
      0016FF CD 16 D2         [ 4] 3758         CALL     UNIQU   ;?redefinition
      001702 CD 06 21         [ 4] 3759         CALL     DUPP
      001705 CD 0C A7         [ 4] 3760         CALL     COUNT
      001708 CD 08 46         [ 4] 3761         CALL     PLUS
      00170B CD 07 78         [ 4] 3762         CALL     VPP
      00170E CD 04 D1         [ 4] 3763         CALL     STORE
      001711 CD 06 21         [ 4] 3764         CALL     DUPP
      001714 CD 07 96         [ 4] 3765         CALL     LAST
      001717 CD 04 D1         [ 4] 3766         CALL     STORE   ;save na for vocabulary link
      00171A CD 0B 59         [ 4] 3767         CALL     CELLM   ;link address
      00171D CD 07 6A         [ 4] 3768         CALL     CNTXT
      001720 CD 04 E3         [ 4] 3769         CALL     AT
      001723 CD 06 31         [ 4] 3770         CALL     SWAPP
      001726 CD 04 D1         [ 4] 3771         CALL     STORE
      001729 81               [ 4] 3772         RET     ;save code pointer
      00172A CD 0F 82         [ 4] 3773 PNAM1:  CALL     STRQP
      00172D 05                    3774         .byte      5
      00172E 20 6E 61 6D 65        3775         .ascii     " name" ;null input
      001733 CC 13 CC         [ 2] 3776         JP     ABOR1
                                   3777 
                                   3778 ;; FORTH compiler
                                   3779 
                                   3780 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3781 ;       $COMPILE        ( a -- )
                                   3782 ;       Compile next word to
                                   3783 ;       dictionary as a token or literal.
                                   3784 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001736                       3785         _HEADER SCOMP,8,"$COMPILE"
      001736 16 CA                    1         .word LINK 
                           001738     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      001738 08                       3         .byte 8  
      001739 24 43 4F 4D 50 49 4C     4         .ascii "$COMPILE"
             45
      001741                          5         SCOMP:
      001741 CD 12 B8         [ 4] 3786         CALL     NAMEQ
      001744 CD 07 D4         [ 4] 3787         CALL     QDUP    ;?defined
      001747 CD 04 98         [ 4] 3788         CALL     QBRAN
      00174A 17 62                 3789         .word      SCOM2
      00174C CD 04 E3         [ 4] 3790         CALL     AT
      00174F CD 04 6F         [ 4] 3791         CALL     DOLIT
      001752 80 00                 3792         .word     0x8000	;  IMEDD*256
      001754 CD 06 7E         [ 4] 3793         CALL     ANDD    ;?immediate
      001757 CD 04 98         [ 4] 3794         CALL     QBRAN
      00175A 17 5F                 3795         .word      SCOM1
      00175C CC 04 C4         [ 2] 3796         JP     EXECU
      00175F CC 18 0C         [ 2] 3797 SCOM1:  JP     JSRC
      001762 CD 25 60         [ 4] 3798 SCOM2:  CALL     NUMBQ   ;try to convert to number
      001765 CD 07 D4         [ 4] 3799         CALL    QDUP  
      001768 CD 04 98         [ 4] 3800         CALL     QBRAN
      00176B 13 CC                 3801         .word      ABOR1
      00176D                       3802         _DOLIT  -1
      00176D CD 04 6F         [ 4]    1     CALL DOLIT 
      001770 FF FF                    2     .word -1 
      001772 CD 08 F8         [ 4] 3803         CALL    EQUAL
      001775                       3804         _QBRAN DLITER  
      001775 CD 04 98         [ 4]    1     CALL QBRAN
      001778 29 33                    2     .word DLITER
      00177A CC 15 69         [ 2] 3805         JP     LITER
                                   3806 
                                   3807 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3808 ;       OVERT   ( -- )
                                   3809 ;       Link a new word into vocabulary.
                                   3810 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00177D                       3811         _HEADER OVERT,5,"OVERT"
      00177D 17 38                    1         .word LINK 
                           00177F     2         LINK=.
      00177F 05                       3         .byte 5  
      001780 4F 56 45 52 54           4         .ascii "OVERT"
      001785                          5         OVERT:
      001785 CD 07 96         [ 4] 3812         CALL     LAST
      001788 CD 04 E3         [ 4] 3813         CALL     AT
      00178B CD 07 6A         [ 4] 3814         CALL     CNTXT
      00178E CC 04 D1         [ 2] 3815         JP     STORE
                                   3816 
                                   3817 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3818 ;       ;       ( -- )
                                   3819 ;       Terminate a colon definition.
                                   3820 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001791                       3821         _HEADER SEMIS,IMEDD+COMPO+1,^/";"/
      001791 17 7F                    1         .word LINK 
                           001793     2         LINK=.
      001793 C1                       3         .byte IMEDD+COMPO+1  
      001794 3B                       4         .ascii ";"
      001795                          5         SEMIS:
                           000001  3822 .if OPTIMIZE ; more compact and faster
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001795 CD 04 6F         [ 4] 3823         call DOLIT 
      001798 00 81                 3824         .word 0x81   ; opcode for RET 
      00179A CD 15 19         [ 4] 3825         call CCOMMA 
                           000000  3826 .else
                                   3827         CALL     COMPI
                                   3828         .word EXIT 
                                   3829 .endif 
      00179D CD 14 2D         [ 4] 3830         CALL     LBRAC
      0017A0 CD 17 85         [ 4] 3831         call OVERT 
      0017A3 CD 22 04         [ 4] 3832         CALL FMOVE
      0017A6 CD 07 D4         [ 4] 3833         call QDUP 
      0017A9 CD 04 98         [ 4] 3834         call QBRAN 
      0017AC 18 DC                 3835         .word SET_RAMLAST 
      0017AE CD 22 98         [ 4] 3836         CALL UPDATPTR
      0017B1 81               [ 4] 3837         RET 
                                   3838 
                                   3839 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3840 ;       Terminate an ISR definition 
                                   3841 ;       retourn ca of ISR as double
                                   3842 ;       I; ( -- ud )
                                   3843 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017B2                       3844        _HEADER ISEMI,2+IMEDD+COMPO,^/"I;"/
      0017B2 17 93                    1         .word LINK 
                           0017B4     2         LINK=.
      0017B4 C2                       3         .byte 2+IMEDD+COMPO  
      0017B5 49 3B                    4         .ascii "I;"
      0017B7                          5         ISEMI:
      0017B7 1D 00 02         [ 2] 3845         subw x,#CELLL  
      0017BA 90 AE 00 80      [ 2] 3846         ldw y,#IRET_CODE 
      0017BE FF               [ 2] 3847         ldw (x),y 
      0017BF CD 15 19         [ 4] 3848         call CCOMMA
      0017C2 CD 14 2D         [ 4] 3849         call LBRAC 
      0017C5 CD 22 DD         [ 4] 3850         call IFMOVE
      0017C8 CD 07 D4         [ 4] 3851         call QDUP 
      0017CB CD 04 98         [ 4] 3852         CALL QBRAN 
      0017CE 18 DC                 3853         .word SET_RAMLAST
      0017D0 CD 07 86         [ 4] 3854         CALL CPP
      0017D3 CD 04 E3         [ 4] 3855         call AT 
      0017D6 CD 06 31         [ 4] 3856         call SWAPP 
      0017D9 CD 07 86         [ 4] 3857         CALL CPP 
      0017DC CD 04 D1         [ 4] 3858         call STORE 
      0017DF CD 1C 95         [ 4] 3859         call UPDATCP 
      0017E2 CD 1C 52         [ 4] 3860         call EEPVP 
      0017E5 CD 06 17         [ 4] 3861         call DROP 
      0017E8 CD 04 E3         [ 4] 3862         call AT 
      0017EB CD 07 78         [ 4] 3863         call VPP 
      0017EE CD 04 D1         [ 4] 3864         call STORE 
      0017F1 CC 0B E1         [ 2] 3865         jp ZERO
      0017F4 81               [ 4] 3866         ret           
                                   3867         
                                   3868 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3869 ;       ]       ( -- )
                                   3870 ;       Start compiling words in
                                   3871 ;       input stream.
                                   3872 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      0017F5                       3873         _HEADER RBRAC,1,"]"
      0017F5 17 B4                    1         .word LINK 
                           0017F7     2         LINK=.
      0017F7 01                       3         .byte 1  
      0017F8 5D                       4         .ascii "]"
      0017F9                          5         RBRAC:
      0017F9 CD 04 6F         [ 4] 3874         CALL   DOLIT
      0017FC 17 41                 3875         .word  SCOMP
      0017FE CD 07 48         [ 4] 3876         CALL   TEVAL
      001801 CC 04 D1         [ 2] 3877         JP     STORE
                                   3878 
                                   3879 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3880 ;       CALL,    ( ca -- )
                                   3881 ;       Compile a subroutine call.
                                   3882 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001804                       3883         _HEADER JSRC,5,^/"CALL,"/
      001804 17 F7                    1         .word LINK 
                           001806     2         LINK=.
      001806 05                       3         .byte 5  
      001807 43 41 4C 4C 2C           4         .ascii "CALL,"
      00180C                          5         JSRC:
      00180C CD 04 6F         [ 4] 3884         CALL     DOLIT
      00180F 00 CD                 3885         .word     CALLL     ;CALL
      001811 CD 15 19         [ 4] 3886         CALL     CCOMMA
      001814 CC 15 02         [ 2] 3887         JP     COMMA
                                   3888 
                                   3889 ;       INIT-OFS ( -- )
                                   3890 ;       compute offset to adjust jump address 
                                   3891 ;       set variable OFFSET 
      001817 18 06                 3892         .word LINK 
                           001819  3893         LINK=.
      001819 08                    3894         .byte 8 
      00181A 49 4E 49 54 2D 4F 46  3895         .ascii "INIT-OFS" 
             53
      001822                       3896 INITOFS:
      001822 CD 07 37         [ 4] 3897         call TFLASH 
      001825 CD 04 E3         [ 4] 3898         CALL AT 
      001828 CD 06 21         [ 4] 3899         CALL DUPP 
      00182B CD 04 98         [ 4] 3900         call QBRAN
      00182E 18 3F                 3901         .word 1$
      001830 CD 06 17         [ 4] 3902         call DROP  
      001833 CD 07 86         [ 4] 3903         call CPP 
      001836 CD 04 E3         [ 4] 3904         call AT 
      001839 CD 0C BE         [ 4] 3905         call HERE
      00183C CD 08 D0         [ 4] 3906         call SUBB 
      00183F CD 07 BB         [ 4] 3907 1$:     call OFFSET 
      001842 CC 04 D1         [ 2] 3908         jp STORE  
                                   3909 
                                   3910 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3911 ;       :       ( -- ; <string> )
                                   3912 ;       Start a new colon definition
                                   3913 ;       using next word as its name.
                                   3914 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001845                       3915         _HEADER COLON,1,":"
      001845 18 19                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                           001847     2         LINK=.
      001847 01                       3         .byte 1  
      001848 3A                       4         .ascii ":"
      001849                          5         COLON:
      001849 CD 18 22         [ 4] 3916         call INITOFS       
      00184C CD 11 BB         [ 4] 3917         CALL   TOKEN
      00184F CD 16 F4         [ 4] 3918         CALL   SNAME
      001852 CC 17 F9         [ 2] 3919         JP     RBRAC
                                   3920 
                                   3921 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3922 ;       I:  ( -- )
                                   3923 ;       Start interrupt service 
                                   3924 ;       routine definition
                                   3925 ;       those definition have 
                                   3926 ;       no name.
                                   3927 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001855                       3928         _HEADER ICOLON,2,"I:"
      001855 18 47                    1         .word LINK 
                           001857     2         LINK=.
      001857 02                       3         .byte 2  
      001858 49 3A                    4         .ascii "I:"
      00185A                          5         ICOLON:
      00185A CD 18 22         [ 4] 3929         call INITOFS 
      00185D CC 17 F9         [ 2] 3930         jp RBRAC  
                                   3931 
                                   3932 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3933 ;       IMMEDIATE       ( -- )
                                   3934 ;       Make last compiled word
                                   3935 ;       an immediate word.
                                   3936 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001860                       3937         _HEADER IMMED,9,"IMMEDIATE"
      001860 18 57                    1         .word LINK 
                           001862     2         LINK=.
      001862 09                       3         .byte 9  
      001863 49 4D 4D 45 44 49 41     4         .ascii "IMMEDIATE"
             54 45
      00186C                          5         IMMED:
      00186C CD 04 6F         [ 4] 3938         CALL     DOLIT
      00186F 80 00                 3939         .word     0x8000	;  IMEDD*256
      001871 CD 07 96         [ 4] 3940         CALL     LAST
      001874 CD 04 E3         [ 4] 3941         CALL     AT
      001877 CD 04 E3         [ 4] 3942         CALL     AT
      00187A CD 06 92         [ 4] 3943         CALL     ORR
      00187D CD 07 96         [ 4] 3944         CALL     LAST
      001880 CD 04 E3         [ 4] 3945         CALL     AT
      001883 CC 04 D1         [ 2] 3946         JP     STORE
                                   3947 
                                   3948 ;; Defining words
                                   3949 
                                   3950 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3951 ;       CREATE  ( -- ; <string> )
                                   3952 ;       Compile a new array
                                   3953 ;       without allocating space.
                                   3954 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001886                       3955         _HEADER CREAT,6,"CREATE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001886 18 62                    1         .word LINK 
                           001888     2         LINK=.
      001888 06                       3         .byte 6  
      001889 43 52 45 41 54 45        4         .ascii "CREATE"
      00188F                          5         CREAT:
      00188F CD 11 BB         [ 4] 3956         CALL     TOKEN
      001892 CD 16 F4         [ 4] 3957         CALL     SNAME
      001895 CD 17 85         [ 4] 3958         CALL     OVERT        
      001898 CD 15 47         [ 4] 3959         CALL     COMPI 
      00189B 06 D7                 3960         .word DOVAR 
      00189D 81               [ 4] 3961         RET
                                   3962 
                                   3963 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3964 ;       VARIABLE  ( -- ; <string> )
                                   3965 ;       Compile a new variable
                                   3966 ;       initialized to 0.
                                   3967 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00189E                       3968         _HEADER VARIA,8,"VARIABLE"
      00189E 18 88                    1         .word LINK 
                           0018A0     2         LINK=.
      0018A0 08                       3         .byte 8  
      0018A1 56 41 52 49 41 42 4C     4         .ascii "VARIABLE"
             45
      0018A9                          5         VARIA:
                                   3969 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      0018A9 CD 0C BE         [ 4] 3970         CALL HERE
      0018AC CD 06 21         [ 4] 3971         CALL DUPP 
      0018AF CD 0B 4A         [ 4] 3972         CALL CELLP
      0018B2 CD 07 78         [ 4] 3973         CALL VPP 
      0018B5 CD 04 D1         [ 4] 3974         CALL STORE
      0018B8 CD 18 8F         [ 4] 3975         CALL CREAT
      0018BB CD 06 21         [ 4] 3976         CALL DUPP
      0018BE CD 15 02         [ 4] 3977         CALL COMMA
      0018C1 CD 0B E1         [ 4] 3978         CALL ZERO
      0018C4 CD 06 31         [ 4] 3979         call SWAPP 
      0018C7 CD 04 D1         [ 4] 3980         CALL STORE
      0018CA CD 22 04         [ 4] 3981         CALL FMOVE ; move definition to FLASH
      0018CD CD 07 D4         [ 4] 3982         CALL QDUP 
      0018D0 CD 04 98         [ 4] 3983         CALL QBRAN 
      0018D3 18 DC                 3984         .word SET_RAMLAST   
      0018D5 CD 1C AC         [ 4] 3985         call UPDATVP  ; don't update if variable kept in RAM.
      0018D8 CD 22 98         [ 4] 3986         CALL UPDATPTR
      0018DB 81               [ 4] 3987         RET         
      0018DC                       3988 SET_RAMLAST: 
      0018DC CD 07 96         [ 4] 3989         CALL LAST 
      0018DF CD 04 E3         [ 4] 3990         CALL AT 
      0018E2 CD 07 A9         [ 4] 3991         CALL RAMLAST 
      0018E5 CC 04 D1         [ 2] 3992         jp STORE  
                                   3993 
                                   3994 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3995 ;       CONSTANT  ( n -- ; <string> )
                                   3996 ;       Compile a new constant 
                                   3997 ;       n CONSTANT name 
                                   3998 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0018E8                       3999         _HEADER CONSTANT,8,"CONSTANT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      0018E8 18 A0                    1         .word LINK 
                           0018EA     2         LINK=.
      0018EA 08                       3         .byte 8  
      0018EB 43 4F 4E 53 54 41 4E     4         .ascii "CONSTANT"
             54
      0018F3                          5         CONSTANT:
      0018F3 CD 11 BB         [ 4] 4000         CALL TOKEN
      0018F6 CD 16 F4         [ 4] 4001         CALL SNAME 
      0018F9 CD 17 85         [ 4] 4002         CALL OVERT 
      0018FC CD 15 47         [ 4] 4003         CALL COMPI 
      0018FF 19 13                 4004         .word DOCONST
      001901 CD 15 02         [ 4] 4005         CALL COMMA 
      001904 CD 22 04         [ 4] 4006         CALL FMOVE
      001907 CD 07 D4         [ 4] 4007         CALL QDUP 
      00190A CD 04 98         [ 4] 4008         CALL QBRAN 
      00190D 18 DC                 4009         .word SET_RAMLAST  
      00190F CD 22 98         [ 4] 4010         CALL UPDATPTR  
      001912 81               [ 4] 4011 1$:     RET          
                                   4012 
                                   4013 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4014 ; CONSTANT runtime semantic 
                                   4015 ; doCONST  ( -- n )
                                   4016 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4017 ;       _HEADER DOCONST,7,"DOCONST"
      001913                       4018 DOCONST:
      001913 1D 00 02         [ 2] 4019         subw x,#CELLL
      001916 90 85            [ 2] 4020         popw y 
      001918 90 FE            [ 2] 4021         ldw y,(y) 
      00191A FF               [ 2] 4022         ldw (x),y 
      00191B 81               [ 4] 4023         ret 
                                   4024 
                                   4025 ;----------------------------------
                                   4026 ; create double constant 
                                   4027 ; 2CONSTANT ( d -- ; <string> )
                                   4028 ;----------------------------------
      00191C                       4029         _HEADER DCONST,9,"2CONSTANT"
      00191C 18 EA                    1         .word LINK 
                           00191E     2         LINK=.
      00191E 09                       3         .byte 9  
      00191F 32 43 4F 4E 53 54 41     4         .ascii "2CONSTANT"
             4E 54
      001928                          5         DCONST:
      001928 CD 11 BB         [ 4] 4030         CALL TOKEN
      00192B CD 16 F4         [ 4] 4031         CALL SNAME 
      00192E CD 17 85         [ 4] 4032         CALL OVERT 
      001931 CD 15 47         [ 4] 4033         CALL COMPI 
      001934 19 4B                 4034         .word DO_DCONST
      001936 CD 15 02         [ 4] 4035         CALL COMMA
      001939 CD 15 02         [ 4] 4036         CALL COMMA  
      00193C CD 22 04         [ 4] 4037         CALL FMOVE
      00193F CD 07 D4         [ 4] 4038         CALL QDUP 
      001942 CD 04 98         [ 4] 4039         CALL QBRAN 
      001945 18 DC                 4040         .word SET_RAMLAST  
      001947 CD 22 98         [ 4] 4041         CALL UPDATPTR  
      00194A 81               [ 4] 4042 1$:     RET          
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                   4043     
                                   4044 ;----------------------------------
                                   4045 ; runtime for DCONST 
                                   4046 ; stack double constant 
                                   4047 ; DO-DCONST ( -- d )
                                   4048 ;-----------------------------------
                                   4049 ;       _HEADER DO_DCONST,9,"DO-DCONST"
      00194B                       4050 DO_DCONST:
      00194B 90 85            [ 2] 4051     popw y 
      00194D 90 BF 26         [ 2] 4052     ldw YTEMP,y 
      001950 1D 00 04         [ 2] 4053     subw x,#2*CELLL 
      001953 90 FE            [ 2] 4054     ldw y,(y)
      001955 FF               [ 2] 4055     ldw (x),y 
      001956 90 BE 26         [ 2] 4056     ldw y,YTEMP 
      001959 90 EE 02         [ 2] 4057     ldw y,(2,y)
      00195C EF 02            [ 2] 4058     ldw (2,x),y 
      00195E 81               [ 4] 4059     ret 
                                   4060 
                                   4061 ;; Tools
                                   4062 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4063 ;       _TYPE   ( b u -- )
                                   4064 ;       Display a string. Filter
                                   4065 ;       non-printing characters.
                                   4066 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00195F                       4067         _HEADER UTYPE,5,"_TYPE"
      00195F 19 1E                    1         .word LINK 
                           001961     2         LINK=.
      001961 05                       3         .byte 5  
      001962 5F 54 59 50 45           4         .ascii "_TYPE"
      001967                          5         UTYPE:
      001967 CD 05 EA         [ 4] 4068         CALL     TOR     ;start count down loop
      00196A 20 0F            [ 2] 4069         JRA     UTYP2   ;skip first pass
      00196C CD 06 21         [ 4] 4070 UTYP1:  CALL     DUPP
      00196F CD 05 01         [ 4] 4071         CALL     CAT
      001972 CD 0C 0B         [ 4] 4072         CALL     TCHAR
      001975 CD 04 36         [ 4] 4073         CALL     EMIT    ;display only printable
      001978 CD 0B 75         [ 4] 4074         CALL     ONEP    ;increment address
      00197B CD 04 83         [ 4] 4075 UTYP2:  CALL     DONXT
      00197E 19 6C                 4076         .word      UTYP1   ;loop till done
      001980 CC 06 17         [ 2] 4077         JP     DROP
                                   4078 
                                   4079 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4080 ;       dm+     ( a u -- a )
                                   4081 ;       Dump u bytes from ,
                                   4082 ;       leaving a+u on  stack.
                                   4083 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001983                       4084         _HEADER DUMPP,3,"DM+"
      001983 19 61                    1         .word LINK 
                           001985     2         LINK=.
      001985 03                       3         .byte 3  
      001986 44 4D 2B                 4         .ascii "DM+"
      001989                          5         DUMPP:
      001989 CD 06 49         [ 4] 4085         CALL     OVER
      00198C CD 04 6F         [ 4] 4086         CALL     DOLIT
      00198F 00 04                 4087         .word      4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001991 CD 0F AF         [ 4] 4088         CALL     UDOTR   ;display address
      001994 CD 0F 17         [ 4] 4089         CALL     SPACE
      001997 CD 05 EA         [ 4] 4090         CALL     TOR     ;start count down loop
      00199A 20 11            [ 2] 4091         JRA     PDUM2   ;skip first pass
      00199C CD 06 21         [ 4] 4092 PDUM1:  CALL     DUPP
      00199F CD 05 01         [ 4] 4093         CALL     CAT
      0019A2 CD 04 6F         [ 4] 4094         CALL     DOLIT
      0019A5 00 03                 4095         .word      3
      0019A7 CD 0F AF         [ 4] 4096         CALL     UDOTR   ;display numeric data
      0019AA CD 0B 75         [ 4] 4097         CALL     ONEP    ;increment address
      0019AD CD 04 83         [ 4] 4098 PDUM2:  CALL     DONXT
      0019B0 19 9C                 4099         .word      PDUM1   ;loop till done
      0019B2 81               [ 4] 4100         RET
                                   4101 
                                   4102 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4103 ;       DUMP    ( a u -- )
                                   4104 ;       Dump u bytes from a,
                                   4105 ;       in a formatted manner.
                                   4106 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0019B3                       4107         _HEADER DUMP,4,"DUMP"
      0019B3 19 85                    1         .word LINK 
                           0019B5     2         LINK=.
      0019B5 04                       3         .byte 4  
      0019B6 44 55 4D 50              4         .ascii "DUMP"
      0019BA                          5         DUMP:
      0019BA CD 06 E7         [ 4] 4108         CALL     BASE
      0019BD CD 04 E3         [ 4] 4109         CALL     AT
      0019C0 CD 05 EA         [ 4] 4110         CALL     TOR
      0019C3 CD 0E 76         [ 4] 4111         CALL     HEX     ;save radix, set hex
      0019C6 CD 04 6F         [ 4] 4112         CALL     DOLIT
      0019C9 00 10                 4113         .word      16
      0019CB CD 0A 9B         [ 4] 4114         CALL     SLASH   ;change count to lines
      0019CE CD 05 EA         [ 4] 4115         CALL     TOR     ;start count down loop
      0019D1 CD 0F 59         [ 4] 4116 DUMP1:  CALL     CR
      0019D4 CD 04 6F         [ 4] 4117         CALL     DOLIT
      0019D7 00 10                 4118         .word      16
      0019D9 CD 08 31         [ 4] 4119         CALL     DDUP
      0019DC CD 19 89         [ 4] 4120         CALL     DUMPP   ;display numeric
      0019DF CD 07 E5         [ 4] 4121         CALL     ROT
      0019E2 CD 07 E5         [ 4] 4122         CALL     ROT
      0019E5 CD 0F 17         [ 4] 4123         CALL     SPACE
      0019E8 CD 0F 17         [ 4] 4124         CALL     SPACE
      0019EB CD 19 67         [ 4] 4125         CALL     UTYPE   ;display printable characters
      0019EE CD 04 83         [ 4] 4126         CALL     DONXT
      0019F1 19 D1                 4127         .word      DUMP1   ;loop till done
      0019F3 CD 06 17         [ 4] 4128 DUMP3:  CALL     DROP
      0019F6 CD 05 34         [ 4] 4129         CALL     RFROM
      0019F9 CD 06 E7         [ 4] 4130         CALL     BASE
      0019FC CC 04 D1         [ 2] 4131         JP     STORE   ;restore radix
                                   4132 
                                   4133 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4134 ;       .S      ( ... -- ... )
                                   4135 ;        Display  contents of stack.
                                   4136 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0019FF                       4137         _HEADER DOTS,2,".S"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      0019FF 19 B5                    1         .word LINK 
                           001A01     2         LINK=.
      001A01 02                       3         .byte 2  
      001A02 2E 53                    4         .ascii ".S"
      001A04                          5         DOTS:
      001A04 CD 0F 59         [ 4] 4138         CALL     CR
      001A07 CD 0C 23         [ 4] 4139         CALL     DEPTH   ;stack depth
      001A0A CD 05 EA         [ 4] 4140         CALL     TOR     ;start count down loop
      001A0D 20 09            [ 2] 4141         JRA     DOTS2   ;skip first pass
      001A0F CD 05 45         [ 4] 4142 DOTS1:  CALL     RAT
      001A12 CD 0C 3A         [ 4] 4143 	CALL     PICK
      001A15 CD 10 00         [ 4] 4144         CALL     DOT     ;index stack, display contents
      001A18 CD 04 83         [ 4] 4145 DOTS2:  CALL     DONXT
      001A1B 1A 0F                 4146         .word      DOTS1   ;loop till done
      001A1D CD 0F 86         [ 4] 4147         CALL     DOTQP
      001A20 05                    4148         .byte      5
      001A21 20 3C 73 70 20        4149         .ascii     " <sp "
      001A26 81               [ 4] 4150         RET
                                   4151 
                                   4152 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4153 ;       >NAME   ( ca -- na | F )
                                   4154 ;       Convert code address
                                   4155 ;       to a name address.
                                   4156 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A27                       4157         _HEADER TNAME,5,">NAME"
      001A27 1A 01                    1         .word LINK 
                           001A29     2         LINK=.
      001A29 05                       3         .byte 5  
      001A2A 3E 4E 41 4D 45           4         .ascii ">NAME"
      001A2F                          5         TNAME:
      001A2F CD 07 6A         [ 4] 4158         CALL     CNTXT   ;vocabulary link
      001A32 CD 04 E3         [ 4] 4159 TNAM2:  CALL     AT
      001A35 CD 06 21         [ 4] 4160         CALL     DUPP    ;?last word in a vocabulary
      001A38 CD 04 98         [ 4] 4161         CALL     QBRAN
      001A3B 1A 56                 4162         .word      TNAM4
      001A3D CD 08 31         [ 4] 4163         CALL     DDUP
      001A40 CD 11 C9         [ 4] 4164         CALL     NAMET
      001A43 CD 06 A7         [ 4] 4165         CALL     XORR    ;compare
      001A46 CD 04 98         [ 4] 4166         CALL     QBRAN
      001A49 1A 50                 4167         .word      TNAM3
      001A4B CD 0B 59         [ 4] 4168         CALL     CELLM   ;continue with next word
      001A4E 20 E2            [ 2] 4169         JRA     TNAM2
      001A50 CD 06 31         [ 4] 4170 TNAM3:  CALL     SWAPP
      001A53 CC 06 17         [ 2] 4171         JP     DROP
      001A56 CD 08 26         [ 4] 4172 TNAM4:  CALL     DDROP
      001A59 CC 0B E1         [ 2] 4173         JP     ZERO
                                   4174 
                                   4175 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4176 ;       .ID     ( na -- )
                                   4177 ;        Display  name at address.
                                   4178 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A5C                       4179         _HEADER DOTID,3,".ID"
      001A5C 1A 29                    1         .word LINK 
                           001A5E     2         LINK=.
      001A5E 03                       3         .byte 3  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001A5F 2E 49 44                 4         .ascii ".ID"
      001A62                          5         DOTID:
      001A62 CD 07 D4         [ 4] 4180         CALL     QDUP    ;if zero no name
      001A65 CD 04 98         [ 4] 4181         CALL     QBRAN
      001A68 1A 78                 4182         .word      DOTI1
      001A6A CD 0C A7         [ 4] 4183         CALL     COUNT
      001A6D CD 04 6F         [ 4] 4184         CALL     DOLIT
      001A70 00 1F                 4185         .word      0x1F
      001A72 CD 06 7E         [ 4] 4186         CALL     ANDD    ;mask lexicon bits
      001A75 CC 19 67         [ 2] 4187         JP     UTYPE
      001A78 CD 0F 86         [ 4] 4188 DOTI1:  CALL     DOTQP
      001A7B 09                    4189         .byte      9
      001A7C 20 6E 6F 4E 61 6D 65  4190         .ascii     " noName"
      001A83 81               [ 4] 4191         RET
                                   4192 
                           000000  4193 WANT_SEE=0
                           000000  4194 .if WANT_SEE 
                                   4195 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4196 ;       SEE     ( -- ; <string> )
                                   4197 ;       A simple decompiler.
                                   4198 ;       Updated for byte machines.
                                   4199 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4200         _HEADER SEE,3,"SEE"
                                   4201         CALL     TICK    ;starting address
                                   4202         CALL     CR
                                   4203         CALL     ONEM
                                   4204 SEE1:   CALL     ONEP
                                   4205         CALL     DUPP
                                   4206         CALL     AT
                                   4207         CALL     DUPP
                                   4208         CALL     QBRAN
                                   4209         .word    SEE2
                                   4210         CALL     TNAME   ;?is it a name
                                   4211 SEE2:   CALL     QDUP    ;name address or zero
                                   4212         CALL     QBRAN
                                   4213         .word    SEE3
                                   4214         CALL     SPACE
                                   4215         CALL     DOTID   ;display name
                                   4216         CALL     ONEP
                                   4217         JRA      SEE4
                                   4218 SEE3:   CALL     DUPP
                                   4219         CALL     CAT
                                   4220         CALL     UDOT    ;display number
                                   4221 SEE4:   CALL     NUFQ    ;user control
                                   4222         CALL     QBRAN
                                   4223         .word    SEE1
                                   4224         JP     DROP
                                   4225 .endif ; WANT_SEE 
                                   4226 
                                   4227 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4228 ;       WORDS   ( -- )
                                   4229 ;       Display names in vocabulary.
                                   4230 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A84                       4231         _HEADER WORDS,5,"WORDS"
      001A84 1A 5E                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                           001A86     2         LINK=.
      001A86 05                       3         .byte 5  
      001A87 57 4F 52 44 53           4         .ascii "WORDS"
      001A8C                          5         WORDS:
      001A8C CD 0F 59         [ 4] 4232         CALL     CR
      001A8F CD 07 6A         [ 4] 4233         CALL     CNTXT   ;only in context
      001A92 CD 04 E3         [ 4] 4234 WORS1:  CALL     AT
      001A95 CD 07 D4         [ 4] 4235         CALL     QDUP    ;?at end of list
      001A98 CD 04 98         [ 4] 4236         CALL     QBRAN
      001A9B 1A AE                 4237         .word      WORS2
      001A9D CD 06 21         [ 4] 4238         CALL     DUPP
      001AA0 CD 0F 17         [ 4] 4239         CALL     SPACE
      001AA3 CD 1A 62         [ 4] 4240         CALL     DOTID   ;display a name
      001AA6 CD 0B 59         [ 4] 4241         CALL     CELLM
      001AA9 CD 04 B4         [ 4] 4242         CALL     BRAN
      001AAC 1A 92                 4243         .word      WORS1
      001AAE 81               [ 4] 4244 WORS2:  RET
                                   4245 
                                   4246         
                                   4247 ;; Hardware reset
                                   4248 
                                   4249 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4250 ;  COPYRIGTH
                                   4251 ; print copyright notice 
                                   4252 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001AAF                       4253 COPYRIGHT:
      001AAF CD 0F 86         [ 4] 4254     CALL DOTQP 
      001AB2 21                    4255     .byte 33 
      001AB3 4A 61 63 71 75 65 73  4256     .ascii "Jacques Deschenes, Copyright 2021"
             20 44 65 73 63 68 65
             6E 65 73 2C 20 43 6F
             70 79 72 69 67 68 74
             20 32 30 32 31
      001AD4 CC 0F 59         [ 2] 4257     JP CR 
                                   4258 
                                   4259 
                                   4260 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4261 ;  PRT_LICENCE 
                                   4262 ;  print GPLV2 licence 
                                   4263 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001AD7                       4264 PRT_LICENCE:
      001AD7 CD 0F 86         [ 4] 4265         CALL DOTQP 
      001ADA 0F                    4266         .byte  15 
      001ADB 4C 49 43 45 4E 43 45  4267         .ascii "LICENCE GPLV3\r\n"
             20 47 50 4C 56 33 0D
             0A
      001AEA 81               [ 4] 4268         RET 
                                   4269 
                                   4270 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4271 ;    PRINT_VERSION ( c1 c2 -- )
                                   4272 ;    c2 minor 
                                   4273 ;    c1 major 
                                   4274 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001AEB                       4275 PRINT_VERSION:
      001AEB CD 0F 86         [ 4] 4276      CALL DOTQP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001AEE 09                    4277      .byte 9
      001AEF 20 76 65 72 73 69 6F  4278      .ascii " version "
             6E 20
      001AF8 CD 0D DB         [ 4] 4279      CALL BDIGS 
      001AFB CD 0E 15         [ 4] 4280      CALL DIGS 
      001AFE CD 0E 15         [ 4] 4281      CALL DIGS 
      001B01                       4282      _DOLIT '.' 
      001B01 CD 04 6F         [ 4]    1     CALL DOLIT 
      001B04 00 2E                    2     .word '.' 
      001B06 CD 0D EB         [ 4] 4283      CALL HOLD 
      001B09 CD 06 17         [ 4] 4284      CALL DROP 
      001B0C CD 0E 15         [ 4] 4285      CALL DIGS 
      001B0F CD 0E 40         [ 4] 4286      CALL EDIGS 
      001B12 CD 0F 41         [ 4] 4287      CALL TYPES 
      001B15 81               [ 4] 4288      RET 
                                   4289 
                                   4290 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4291 ;       hi      ( -- )
                                   4292 ;       Display sign-on message.
                                   4293 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B16                       4294         _HEADER HI,2,"HI"
      001B16 1A 86                    1         .word LINK 
                           001B18     2         LINK=.
      001B18 02                       3         .byte 2  
      001B19 48 49                    4         .ascii "HI"
      001B1B                          5         HI:
      001B1B CD 0F 59         [ 4] 4295         CALL     CR
      001B1E CD 0F 86         [ 4] 4296         CALL     DOTQP   
      001B21 0A                    4297         .byte      10
      001B22 73 74 6D 38 65 46 6F  4298         .ascii     "stm8eForth"
             72 74 68
      001B2C                       4299 	_DOLIT VER 
      001B2C CD 04 6F         [ 4]    1     CALL DOLIT 
      001B2F 00 04                    2     .word VER 
      001B31                       4300         _DOLIT EXT 
      001B31 CD 04 6F         [ 4]    1     CALL DOLIT 
      001B34 00 00                    2     .word EXT 
      001B36 CD 1A EB         [ 4] 4301         CALL PRINT_VERSION 
      001B39 CD 0F 86         [ 4] 4302         CALL    DOTQP
                           000001  4303 .if NUCLEO          
      001B3C 12                    4304         .byte 18
      001B3D 20 6F 6E 20 4E 55 43  4305         .ascii  " on NUCLEO-8S208RB"
             4C 45 4F 2D 38 53 32
             30 38 52 42
                                   4306 .endif
                           000000  4307 .if DISCOVERY
                                   4308         .byte 19
                                   4309         .ascii  " on STM8S-DISCOVERY"
                                   4310 .endif
                           000000  4311 .if DOORBELL
                                   4312         .byte 16
                                   4313         .ascii " on stm8s105k6b6"
                                   4314 .endif
      001B4F CC 0F 59         [ 2] 4315         JP     CR
                                   4316 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



                           000000  4317 WANT_DEBUG=0
                           000000  4318 .if WANT_DEBUG 
                                   4319 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4320 ;       DEBUG      ( -- )
                                   4321 ;       Display sign-on message.
                                   4322 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4323         _HEADER DEBUG,5,"DEBUG"
                                   4324 	CALL DOLIT
                                   4325 	.word 0x65
                                   4326 	CALL EMIT
                                   4327 	CALL ZERO
                                   4328  	CALL ZLESS 
                                   4329 	CALL DOLIT
                                   4330 	.word 0xFFFE
                                   4331 	CALL ZLESS 
                                   4332 	CALL UPLUS 
                                   4333  	CALL DROP 
                                   4334 	CALL DOLIT
                                   4335 	.word 3
                                   4336 	CALL UPLUS 
                                   4337 	CALL UPLUS 
                                   4338  	CALL DROP
                                   4339 	CALL DOLIT
                                   4340 	.word 0x43
                                   4341 	CALL UPLUS 
                                   4342  	CALL DROP
                                   4343 	CALL EMIT
                                   4344 	CALL DOLIT
                                   4345 	.word 0x4F
                                   4346 	CALL DOLIT
                                   4347 	.word 0x6F
                                   4348  	CALL XORR
                                   4349 	CALL DOLIT
                                   4350 	.word 0xF0
                                   4351  	CALL ANDD
                                   4352 	CALL DOLIT
                                   4353 	.word 0x4F
                                   4354  	CALL ORR
                                   4355 	CALL EMIT
                                   4356 	CALL DOLIT
                                   4357 	.word 8
                                   4358 	CALL DOLIT
                                   4359 	.word 6
                                   4360  	CALL SWAPP
                                   4361 	CALL OVER
                                   4362 	CALL XORR
                                   4363 	CALL DOLIT
                                   4364 	.word 3
                                   4365 	CALL ANDD 
                                   4366 	CALL ANDD
                                   4367 	CALL DOLIT
                                   4368 	.word 0x70
                                   4369 	CALL UPLUS 
                                   4370 	CALL DROP
                                   4371 	CALL EMIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



                                   4372 	CALL ZERO
                                   4373 	CALL QBRAN
                                   4374 	.word DEBUG1
                                   4375 	CALL DOLIT
                                   4376 	.word 0x3F
                                   4377 DEBUG1:
                                   4378 	CALL DOLIT
                                   4379 	.word 0xFFFF
                                   4380 	CALL QBRAN
                                   4381 	.word DEBUG2
                                   4382 	CALL DOLIT
                                   4383 	.word 0x74
                                   4384 	CALL BRAN
                                   4385 	.word DEBUG3
                                   4386 DEBUG2:
                                   4387 	CALL DOLIT
                                   4388 	.word 0x21
                                   4389 DEBUG3:
                                   4390 	CALL EMIT
                                   4391 	CALL DOLIT
                                   4392 	.word 0x68
                                   4393 	CALL DOLIT
                                   4394 	.word 0x80
                                   4395 	CALL STORE
                                   4396 	CALL DOLIT
                                   4397 	.word 0x80
                                   4398 	CALL AT
                                   4399 	CALL EMIT
                                   4400 	CALL DOLIT
                                   4401 	.word 0x4D
                                   4402 	CALL TOR
                                   4403 	CALL RAT
                                   4404 	CALL RFROM
                                   4405 	CALL ANDD
                                   4406 	CALL EMIT
                                   4407 	CALL DOLIT
                                   4408 	.word 0x61
                                   4409 	CALL DOLIT
                                   4410 	.word 0xA
                                   4411 	CALL TOR
                                   4412 DEBUG4:
                                   4413 	CALL ONE
                                   4414 	CALL UPLUS 
                                   4415 	CALL DROP
                                   4416 	CALL DONXT
                                   4417 	.word DEBUG4
                                   4418 	CALL EMIT
                                   4419 	CALL DOLIT
                                   4420 	.word 0x656D
                                   4421 	CALL DOLIT
                                   4422 	.word 0x100
                                   4423 	CALL UMSTA
                                   4424 	CALL SWAPP
                                   4425 	CALL DOLIT
                                   4426 	.word 0x100
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                   4427 	CALL UMSTA
                                   4428 	CALL SWAPP 
                                   4429 	CALL DROP
                                   4430 	CALL EMIT
                                   4431 	CALL EMIT
                                   4432 	CALL DOLIT
                                   4433 	.word 0x2043
                                   4434 	CALL ZERO
                                   4435 	CALL DOLIT
                                   4436 	.word 0x100
                                   4437 	CALL UMMOD
                                   4438 	CALL EMIT
                                   4439 	CALL EMIT
                                   4440 	;JP ORIG
                                   4441 	RET
                                   4442 .endif ; WANT_DEBUG 
                                   4443 
                                   4444 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4445 ;       'BOOT   ( -- a )
                                   4446 ;       The application startup vector.
                                   4447 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B52                       4448         _HEADER TBOOT,5,"'BOOT"
      001B52 1B 18                    1         .word LINK 
                           001B54     2         LINK=.
      001B54 05                       3         .byte 5  
      001B55 27 42 4F 4F 54           4         .ascii "'BOOT"
      001B5A                          5         TBOOT:
      001B5A CD 06 D7         [ 4] 4449         CALL     DOVAR
      001B5D 40 02                 4450         .word    APP_RUN      ;application to boot
                                   4451 
                                   4452 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4453 ;       COLD    ( -- )
                                   4454 ;       The hilevel cold start s=ence.
                                   4455 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B5F                       4456         _HEADER COLD,4,"COLD"
      001B5F 1B 54                    1         .word LINK 
                           001B61     2         LINK=.
      001B61 04                       3         .byte 4  
      001B62 43 4F 4C 44              4         .ascii "COLD"
      001B66                          5         COLD:
                           000000  4457 .if WANT_DEBUG
                                   4458         CALL DEBUG
                                   4459 .endif ; WANT_DEBUG
      001B66 CD 04 6F         [ 4] 4460 COLD1:  CALL     DOLIT
      001B69 00 2B                 4461         .word      UZERO
      001B6B CD 04 6F         [ 4] 4462 	CALL     DOLIT
      001B6E 00 06                 4463         .word      UPP
      001B70 CD 04 6F         [ 4] 4464         CALL     DOLIT
      001B73 00 1C                 4465 	.word      UEND-UZERO
      001B75 CD 0D 0B         [ 4] 4466         CALL     CMOVE   ;initialize user area
                           000001  4467 .if WANT_FLOAT 
      001B78 CD 2C 17         [ 4] 4468         CALL    FINIT 
                                   4469 .endif 
                                   4470 ; if APP_RUN==0 initialize with ca de 'hi'  
      001B7B 90 CE 40 02      [ 2] 4471         ldw y,APP_RUN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      001B7F 26 0B            [ 1] 4472         jrne 0$
      001B81 1D 00 02         [ 2] 4473         subw x,#CELLL 
      001B84 90 AE 1B 1B      [ 2] 4474         ldw y,#HI  
      001B88 FF               [ 2] 4475         ldw (x),y
      001B89 CD 1C 84         [ 4] 4476         call UPDATRUN 
      001B8C                       4477 0$:        
                                   4478 ; update LAST with APP_LAST 
                                   4479 ; if APP_LAST > LAST else do the opposite
      001B8C 90 CE 40 00      [ 2] 4480         ldw y,APP_LAST 
      001B90 90 B3 1C         [ 2] 4481         cpw y,ULAST 
      001B93 22 05            [ 1] 4482         jrugt 1$ 
                                   4483 ; save LAST at APP_LAST  
      001B95 CD 1C 6C         [ 4] 4484         call UPDATLAST 
      001B98 20 06            [ 2] 4485         jra 2$
      001B9A                       4486 1$: ; update LAST with APP_LAST 
      001B9A 90 BF 1C         [ 2] 4487         ldw ULAST,y
      001B9D 90 BF 16         [ 2] 4488         ldw UCNTXT,y
      001BA0                       4489 2$:  
                                   4490 ; update APP_CP if < app_space 
      001BA0 90 CE 40 04      [ 2] 4491         ldw y,APP_CP  
      001BA4 90 B3 1A         [ 2] 4492         cpw y,UCP   
      001BA7 24 06            [ 1] 4493         jruge 3$ 
      001BA9 CD 1C 95         [ 4] 4494         call UPDATCP
      001BAC 90 BE 1A         [ 2] 4495         ldw y,UCP   
      001BAF                       4496 3$:
      001BAF 90 BF 1A         [ 2] 4497         ldw UCP,y                 
                                   4498 ; update UVP with APP_VP  
                                   4499 ; if APP_VP>UVP else do the opposite 
      001BB2 90 CE 40 06      [ 2] 4500         ldw y,APP_VP 
      001BB6 90 B3 18         [ 2] 4501         cpw y,UVP 
      001BB9 22 05            [ 1] 4502         jrugt 4$
      001BBB CD 1C AC         [ 4] 4503         call UPDATVP 
      001BBE 20 03            [ 2] 4504         jra 6$
      001BC0                       4505 4$: ; update UVP with APP_VP 
      001BC0 90 BF 18         [ 2] 4506         ldw UVP,y 
      001BC3                       4507 6$:      
      001BC3 CD 14 AC         [ 4] 4508         CALL     PRESE   ;initialize data stack and TIB
      001BC6 CD 1B 5A         [ 4] 4509         CALL     TBOOT
      001BC9 CD 0C F4         [ 4] 4510         CALL     ATEXE   ;application boot
      001BCC CD 17 85         [ 4] 4511         CALL     OVERT
      001BCF CC 14 C9         [ 2] 4512         JP     QUIT    ;start interpretation
                                   4513 
                                   4514 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



                                   4515         .include "flash.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;  routines to write to FLASH, EEPROM 
                                     23 ;  and OPTION 
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27 ;--------------------------------
                                     28 ; initialize FPTR 
                                     29 ; FP!  ( ud -- )
                                     30 ;---------------------------------
      001BD2 1B 61                   31     .word LINK 
                           001BD4    32     LINK=.
      001BD4 03                      33     .byte 3 
      001BD5 46 50 21                34     .ascii "FP!"
      001BD8                         35 FPSTOR:
      001BD8 90 93            [ 1]   36     ldw y,x
      001BDA 90 FE            [ 2]   37     ldw y,(y)
      001BDC 90 9F            [ 1]   38     ld a,yl 
      001BDE B7 34            [ 1]   39     ld FPTR,a 
      001BE0 1C 00 02         [ 2]   40     addw x,#CELLL 
      001BE3 90 93            [ 1]   41     ldw y,x 
      001BE5 90 FE            [ 2]   42     ldw y,(y)
      001BE7 90 BF 35         [ 2]   43     ldw PTR16,y
      001BEA 1C 00 02         [ 2]   44     addw x,#CELLL 
      001BED 81               [ 4]   45     ret 
                                     46 
                                     47 ;-----------------------------------
                                     48 ; return EEPROM base address 
                                     49 ; as a double 
                                     50 ;  EEPROM  ( -- ud )
                                     51 ;-----------------------------------
      001BEE 1B D4                   52     .word LINK 
                           001BF0    53 LINK=.
      001BF0 06                      54     .byte 6 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      001BF1 45 45 50 52 4F 4D       55     .ascii "EEPROM"
      001BF7                         56 EEPROM: 
      001BF7 90 AE 40 00      [ 2]   57     ldw y,#EEPROM_BASE
      001BFB 1D 00 04         [ 2]   58     subw x,#2*CELLL 
      001BFE EF 02            [ 2]   59     ldw (2,x),y 
      001C00 90 5F            [ 1]   60     clrw y 
      001C02 FF               [ 2]   61     ldw (x),y 
      001C03 81               [ 4]   62     ret
                                     63 
                                     64 ;---------------------------------
                                     65 ; return APP_LAST pointer as double
                                     66 ; EEP-LAST ( -- ud )
                                     67 ;---------------------------------
      001C04 1B F0                   68 	.word LINK 
                           001C06    69 	LINK=.
      001C06 08                      70 	.byte 8 
      001C07 45 45 50 2D 4C 41 53    71 	.ascii "EEP-LAST"
             54
      001C0F                         72 EEPLAST:
      001C0F 1D 00 04         [ 2]   73 	subw x,#2*CELLL 
      001C12 90 AE 40 00      [ 2]   74 	ldw y,#APP_LAST 
      001C16 EF 02            [ 2]   75 	ldw (2,x),y 
      001C18 90 5F            [ 1]   76 	clrw y 
      001C1A FF               [ 2]   77 	ldw (x),y 
      001C1B 81               [ 4]   78 	ret 
                                     79 
                                     80 ;----------------------------------
                                     81 ; return APP_RUN pointer as double	
                                     82 ; EEP-RUN ( -- ud )
                                     83 ;-----------------------------------
      001C1C 1C 06                   84 	.word LINK 
                           001C1E    85 	LINK=.
      001C1E 07                      86 	.byte 7
      001C1F 45 45 50 2D 52 55 4E    87 	.ascii "EEP-RUN"
      001C26                         88 EEPRUN:
      001C26 1D 00 04         [ 2]   89 	subw x,#2*CELLL 
      001C29 90 AE 40 02      [ 2]   90 	ldw y,#APP_RUN 
      001C2D EF 02            [ 2]   91 	ldw (2,x),y 
      001C2F 90 5F            [ 1]   92 	clrw y 
      001C31 FF               [ 2]   93 	ldw (x),y 
      001C32 81               [ 4]   94 	ret 
                                     95 
                                     96 ;------------------------------------
                                     97 ; return APP_CP pointer as double 
                                     98 ; EEP-CP ( -- ud )
                                     99 ;------------------------------------
      001C33 1C 1E                  100 	.word LINK
                           001C35   101 	LINK=.
      001C35 06                     102 	.byte 6 
      001C36 45 45 50 2D 43 50      103 	.ascii "EEP-CP"
      001C3C                        104 EEPCP:
      001C3C 1D 00 04         [ 2]  105 	subw x,#2*CELLL 
      001C3F 90 AE 40 04      [ 2]  106 	ldw y,#APP_CP  
      001C43 EF 02            [ 2]  107 	ldw (2,x),y 
      001C45 90 5F            [ 1]  108 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      001C47 FF               [ 2]  109 	ldw (x),y 
      001C48 81               [ 4]  110 	ret 
                                    111 
                                    112 ;------------------------------------
                                    113 ; return APP_VP pointer as double 
                                    114 ; EEP-VP ( -- ud )
                                    115 ;-------------------------------------
      001C49 1C 35                  116 	.word LINK
                           001C4B   117 	LINK=.
      001C4B 06                     118 	.byte 6
      001C4C 45 45 50 2D 56 50      119 	.ascii "EEP-VP"
      001C52                        120 EEPVP:
      001C52 1D 00 04         [ 2]  121 	subw x,#2*CELLL 
      001C55 90 AE 40 06      [ 2]  122 	ldw y,#APP_VP  
      001C59 EF 02            [ 2]  123 	ldw (2,x),y 
      001C5B 90 5F            [ 1]  124 	clrw y 
      001C5D FF               [ 2]  125 	ldw (x),y 
      001C5E 81               [ 4]  126 	ret 
                                    127 
                                    128 ;----------------------------------
                                    129 ; update APP_LAST with LAST 
                                    130 ; UPDAT-LAST ( -- )
                                    131 ;----------------------------------
      001C5F 1C 4B                  132 	.word LINK 
                           001C61   133 	LINK=.
      001C61 0A                     134 	.byte 10
      001C62 55 50 44 41 54 2D 4C   135 	.ascii "UPDAT-LAST"
             41 53 54
      001C6C                        136 UPDATLAST:
      001C6C CD 07 96         [ 4]  137 	call LAST
      001C6F CD 04 E3         [ 4]  138 	call AT  
      001C72 CD 1C 0F         [ 4]  139 	call EEPLAST
      001C75 CC 1E 62         [ 2]  140 	jp EESTORE 
                                    141 
                                    142 ;---------------------------------
                                    143 ; update APP_RUN 
                                    144 ; UPDAT-RUN ( a -- )
                                    145 ;---------------------------------
      001C78 1C 61                  146 	.word LINK
                           001C7A   147 	LINK=.
      001C7A 09                     148 	.byte 9
      001C7B 55 50 44 41 54 2D 52   149 	.ascii "UPDAT-RUN"
             55 4E
      001C84                        150 UPDATRUN:
      001C84 CD 1C 26         [ 4]  151 	call EEPRUN
      001C87 CC 1E 62         [ 2]  152 	jp EESTORE 
                                    153 	
                                    154 ;---------------------------------
                                    155 ; update APP_CP with CP 
                                    156 ; UPDAT-CP ( -- )
                                    157 ;---------------------------------
      001C8A 1C 7A                  158 	.word LINK 
                           001C8C   159 	LINK=.
      001C8C 08                     160 	.byte 8 
      001C8D 55 50 44 41 54 2D 43   161 	.ascii "UPDAT-CP"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



             50
      001C95                        162 UPDATCP:
      001C95 CD 07 86         [ 4]  163 	call CPP 
      001C98 CD 04 E3         [ 4]  164 	call AT 
      001C9B CD 1C 3C         [ 4]  165 	call EEPCP 
      001C9E CC 1E 62         [ 2]  166 	jp EESTORE 
                                    167 
                                    168 ;----------------------------------
                                    169 ; update APP_VP with VP 
                                    170 ; UPDAT-VP ( -- )
                                    171 ;----------------------------------
      001CA1 1C 8C                  172 	.word LINK
                           001CA3   173 	LINK=.
      001CA3 08                     174 	.byte 8 
      001CA4 55 50 44 41 54 2D 56   175 	.ascii "UPDAT-VP" 
             50
      001CAC                        176 UPDATVP:
      001CAC CD 07 78         [ 4]  177 	call VPP 
      001CAF CD 04 E3         [ 4]  178 	call AT
      001CB2 CD 1C 52         [ 4]  179 	call EEPVP 
      001CB5 CC 1E 62         [ 2]  180 	jp EESTORE
                                    181 	
                           000001   182 .if NUCLEO
                                    183 ;----------------------------------
                                    184 ; fetch integer at address over 65535
                                    185 ;  F@   ( ud -- n )
                                    186 ;----------------------------------
      001CB8 1C A3                  187     .word LINK 
                           001CBA   188 LINK=.
      001CBA 02                     189     .byte 2
      001CBB 46 40                  190     .ascii "F@"
      001CBD                        191 FARAT:
      001CBD CD 1B D8         [ 4]  192     call FPSTOR
      001CC0 CC 1D 85         [ 2]  193 	jp EE_READ 
                                    194 
                                    195 
                                    196 ;-------------------------------------
                                    197 ; fetch C at address over 65535 
                                    198 ; FC@ ( ud -- c)
                                    199 ;-------------------------------------
      001CC3 1C BA                  200     .word LINK
                           001CC5   201     LINK=.
      001CC5 03                     202     .byte 3 
      001CC6 46 43 40               203     .ascii "FC@" 
      001CC9                        204 FARCAT:
      001CC9 CD 1B D8         [ 4]  205     call FPSTOR
      001CCC CC 1D A7         [ 2]  206 	jp EE_CREAD  
                                    207 .endif ; NUCLEO 
                                    208 
                                    209 ;----------------------------------
                                    210 ; UNLOCK EEPROM/OPT for writing/erasing
                                    211 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    212 ;  UNLKEE   ( -- )
                                    213 ;----------------------------------
      001CCF 1C C5                  214     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



                           001CD1   215 LINK=.
      001CD1 06                     216     .byte 6 
      001CD2 55 4E 4C 4B 45 45      217     .ascii "UNLKEE"
      001CD8                        218 UNLKEE:
      001CD8 35 00 50 5B      [ 1]  219 	mov FLASH_CR2,#0 
      001CDC 35 FF 50 5C      [ 1]  220 	mov FLASH_NCR2,#0xFF 
      001CE0 35 AE 50 64      [ 1]  221 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001CE4 35 56 50 64      [ 1]  222     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001CE8 72 07 50 5F FB   [ 2]  223 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001CED 81               [ 4]  224 	ret
                                    225 
                                    226 ;----------------------------------
                                    227 ; UNLOCK FLASH for writing/erasing
                                    228 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    229 ; UNLKFL  ( -- )
                                    230 ;----------------------------------
      001CEE 1C D1                  231     .word LINK 
                           001CF0   232 LINK=. 
      001CF0 06                     233     .byte 6 
      001CF1 55 4E 4C 4B 46 4C      234     .ascii "UNLKFL"    
      001CF7                        235 UNLKFL:
      001CF7 35 00 50 5B      [ 1]  236 	mov FLASH_CR2,#0 
      001CFB 35 FF 50 5C      [ 1]  237 	mov FLASH_NCR2,#0xFF 
      001CFF 35 56 50 62      [ 1]  238 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001D03 35 AE 50 62      [ 1]  239 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001D07 72 03 50 5F FB   [ 2]  240 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001D0C 81               [ 4]  241 	ret
                                    242 
                                    243 ;-----------------------------
                                    244 ; UNLOCK FLASH or EEPROM 
                                    245 ; according to FPTR address 
                                    246 ;  UNLOCK ( -- )
                                    247 ;-----------------------------
      001D0D 1C F0                  248 	.word LINK 
                           001D0F   249 	LINK=.
      001D0F 06                     250 	.byte 6
      001D10 55 4E 4C 4F 43 4B      251 	.ascii "UNLOCK"
      001D16                        252 UNLOCK:
                                    253 ; put addr[15:0] in Y, for bounds check.
      001D16 90 BE 35         [ 2]  254 	ldw y,PTR16   ; Y=addr15:0
                                    255 ; check addr[23:16], if <> 0 then it is extened flash memory
      001D19 3D 34            [ 1]  256 	tnz FPTR 
      001D1B 26 16            [ 1]  257 	jrne 4$
      001D1D 90 A3 80 00      [ 2]  258     cpw y,#FLASH_BASE
      001D21 24 10            [ 1]  259     jruge 4$
      001D23 90 A3 40 00      [ 2]  260 	cpw y,#EEPROM_BASE  
      001D27 25 0D            [ 1]  261     jrult 9$
      001D29 90 A3 48 7F      [ 2]  262 	cpw y,#OPTION_END 
      001D2D 22 07            [ 1]  263 	jrugt 9$
      001D2F CD 1C D8         [ 4]  264 	call UNLKEE
      001D32 81               [ 4]  265 	ret 
      001D33 CD 1C F7         [ 4]  266 4$: call UNLKFL
      001D36 81               [ 4]  267 9$: ret 
                                    268 
                                    269 ;-------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



                                    270 ; LOCK write access to 
                                    271 ; FLASH and EEPROM 
                                    272 ; LOCK ( -- )
                                    273 ;-------------------------
      001D37 1D 0F                  274 	.word LINK 
                           001D39   275 	LINK=.
      001D39 04                     276 	.byte 4 
      001D3A 4C 4F 43 4B            277 	.ascii "LOCK" 
      001D3E                        278 LOCK: 
      001D3E 72 13 50 5F      [ 1]  279 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001D42 72 17 50 5F      [ 1]  280 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001D46 81               [ 4]  281 	ret 
                                    282 
                                    283 ;-------------------------
                                    284 ; increment FPTR 
                                    285 ; INC-FPTR ( -- )
                                    286 ;-------------------------
      001D47 1D 39                  287 	.word LINK 
                           001D49   288 	LINK=. 
      001D49 08                     289 	.byte 8 
      001D4A 49 4E 43 2D 46 50 54   290 	.ascii "INC-FPTR" 
             52
      001D52                        291 INC_FPTR:
      001D52 3C 36            [ 1]  292 	inc PTR8 
      001D54 26 0C            [ 1]  293 	jrne 1$
      001D56 90 89            [ 2]  294 	pushw y 
      001D58 90 BE 34         [ 2]  295 	ldw y,FPTR 
      001D5B 90 5C            [ 1]  296 	incw y 
      001D5D 90 BF 34         [ 2]  297 	ldw FPTR,y
      001D60 90 85            [ 2]  298 	popw y  
      001D62 81               [ 4]  299 1$: ret 
                                    300 
                                    301 ;------------------------------
                                    302 ; add u to FPTR 
                                    303 ; PTR+ ( u -- )
                                    304 ;------------------------------
      001D63 1D 49                  305 	.word LINK 
                           001D65   306 	LINK=.
      001D65 04                     307 	.byte 4 
      001D66 50 54 52 2B            308 	.ascii "PTR+"
      001D6A                        309 PTRPLUS:
      001D6A 90 93            [ 1]  310 	ldw y,x 
      001D6C 1C 00 02         [ 2]  311 	addw x,#CELLL 
      001D6F 72 B9 00 35      [ 2]  312 	addw y,PTR16 
      001D73 90 BF 35         [ 2]  313 	ldw PTR16,y  
      001D76 24 02            [ 1]  314 	jrnc 1$
      001D78 3C 34            [ 1]  315 	inc FPTR 
      001D7A 81               [ 4]  316 1$: ret 
                                    317 
                                    318 ;---------------------------------
                                    319 ; read word at address pointed FPTR
                                    320 ; increment FPTR 
                                    321 ; EE-READ ( -- w )
                                    322 ;------------------------------------
      001D7B 1D 65                  323 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



                           001D7D   324 	LINK=.
      001D7D 07                     325 	.byte 7 
      001D7E 45 45 2D 52 45 41 44   326 	.ascii "EE-READ"
      001D85                        327 EE_READ:
      001D85 1D 00 02         [ 2]  328 	subw x,#CELLL 
      001D88 92 BC 00 34      [ 5]  329 	ldf a,[FPTR]
      001D8C 90 95            [ 1]  330 	ld yh,a 
      001D8E CD 1D 52         [ 4]  331 	call INC_FPTR 
      001D91 92 BC 00 34      [ 5]  332 	ldf a,[FPTR]
      001D95 CD 1D 52         [ 4]  333 	call INC_FPTR 
      001D98 90 97            [ 1]  334 	ld yl,a 
      001D9A FF               [ 2]  335 	ldw (x),y 
      001D9B 81               [ 4]  336 	ret 
                                    337 
                                    338 ;---------------------------------------
                                    339 ; Read byte at address pointed by FPTR 
                                    340 ; EE-CREAD ( -- c )
                                    341 ;---------------------------------------
      001D9C 1D 7D                  342 	.word LINK 
                           001D9E   343 	LINK=.
      001D9E 08                     344 	.byte 8
      001D9F 45 45 2D 43 52 45 41   345 	.ascii "EE-CREAD" 
             44
      001DA7                        346 EE_CREAD:
      001DA7 1D 00 02         [ 2]  347 	subw x,#CELLL 
      001DAA 92 BC 00 34      [ 5]  348 	ldf a,[FPTR]	
      001DAE CD 1D 52         [ 4]  349 	call INC_FPTR
      001DB1 90 5F            [ 1]  350 	clrw y 
      001DB3 90 97            [ 1]  351 	ld yl,a 
      001DB5 FF               [ 2]  352 	ldw (x),y 
      001DB6 81               [ 4]  353 	ret 
                                    354 
                                    355 ;----------------------------
                                    356 ; write a byte at address pointed 
                                    357 ; by FPTR and increment FPTR.
                                    358 ; Expect pointer already initialized 
                                    359 ; and memory unlocked 
                                    360 ; WR-BYTE ( c -- )
                                    361 ;----------------------------
      001DB7 1D 9E                  362 	.word LINK 
                           001DB9   363 	LINK=. 
      001DB9 07                     364 	.byte 7 
      001DBA 57 52 2D 42 59 54 45   365 	.ascii "WR-BYTE" 
                                    366 
      001DC1                        367 WR_BYTE:
      001DC1 CD 04 63         [ 4]  368 	call FC_XOFF
      001DC4 90 93            [ 1]  369 	ldw y,x 
      001DC6 90 FE            [ 2]  370 	ldw y,(y)
      001DC8 1C 00 02         [ 2]  371 	addw x,#CELLL 
      001DCB 90 9F            [ 1]  372 	ld a,yl
      001DCD 92 BD 00 34      [ 4]  373 	ldf [FPTR],a
      001DD1 72 05 50 5F FB   [ 2]  374 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001DD6 CD 04 4D         [ 4]  375 	call FC_XON
      001DD9 CC 1D 52         [ 2]  376 	jp INC_FPTR 
                                    377 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



                                    378 ;---------------------------------------
                                    379 ; write a word at address pointed 
                                    380 ; by FPTR and increment FPTR 
                                    381 ; Expect pointer already initialzed 
                                    382 ; and memory unlocked 
                                    383 ; WR-WORD ( w -- )
                                    384 ;---------------------------------------
      001DDC 1D B9                  385 	.word LINK 
                           001DDE   386 	LINK=.
      001DDE 07                     387 	.byte 7 
      001DDF 57 52 2D 57 4F 52 44   388 	.ascii "WR-WORD" 
      001DE6                        389 WR_WORD:
      001DE6 CD 04 63         [ 4]  390 	call FC_XOFF
      001DE9 90 93            [ 1]  391 	ldw y,x
      001DEB 90 FE            [ 2]  392 	ldw y,(y)
      001DED 1C 00 02         [ 2]  393 	addw x,#CELLL 
      001DF0 90 9E            [ 1]  394 	ld a,yh 
      001DF2 92 BD 00 34      [ 4]  395 	ldf [FPTR],a
      001DF6 72 05 50 5F FB   [ 2]  396 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001DFB CD 1D 52         [ 4]  397 	call INC_FPTR 
      001DFE 90 9F            [ 1]  398 	ld a,yl 
      001E00 92 BD 00 34      [ 4]  399 	ldf [FPTR],a
      001E04 72 05 50 5F FB   [ 2]  400 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001E09 CD 04 4D         [ 4]  401 	call FC_XON
      001E0C CC 1D 52         [ 2]  402 	jp INC_FPTR 
                                    403 
                                    404 
                                    405 ;---------------------------------------
                                    406 ; write a byte to FLASH or EEPROM/OPTION  
                                    407 ; EEC!  (c ud -- )
                                    408 ;---------------------------------------
      001E0F 1D DE                  409     .word LINK 
                           001E11   410 	LINK=.
      001E11 04                     411     .byte 4 
      001E12 45 45 43 21            412     .ascii "EEC!"
                                    413 	; local variables 
                           000001   414 	BTW = 1   ; byte to write offset on stack
                           000002   415     OPT = 2 
                           000002   416 	VSIZE = 2
      001E16                        417 EECSTORE:
      001E16 52 02            [ 2]  418 	sub sp,#VSIZE
      001E18 CD 1B D8         [ 4]  419     call FPSTOR
      001E1B E6 01            [ 1]  420 	ld a,(1,x)
      001E1D 43               [ 1]  421 	cpl a 
      001E1E 6B 01            [ 1]  422 	ld (BTW,sp),a ; byte to write 
      001E20 0F 02            [ 1]  423 	clr (OPT,sp)  ; OPTION flag
      001E22 CD 1D 16         [ 4]  424 	call UNLOCK 
                                    425 	; check if option
      001E25 3D 34            [ 1]  426 	tnz FPTR 
      001E27 26 19            [ 1]  427 	jrne 2$
      001E29 90 BE 35         [ 2]  428 	ldw y,PTR16 
      001E2C 90 A3 48 00      [ 2]  429 	cpw y,#OPTION_BASE
      001E30 2B 10            [ 1]  430 	jrmi 2$
      001E32 90 A3 48 80      [ 2]  431 	cpw y,#OPTION_END+1
      001E36 2A 0A            [ 1]  432 	jrpl 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



      001E38 03 02            [ 1]  433 	cpl (OPT,sp)
                                    434 	; OPTION WRITE require this UNLOCK 
      001E3A 72 1E 50 5B      [ 1]  435     bset FLASH_CR2,#FLASH_CR2_OPT
      001E3E 72 1F 50 5C      [ 1]  436     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001E42                        437 2$: 
      001E42 CD 1D C1         [ 4]  438 	call WR_BYTE 	
      001E45 0D 02            [ 1]  439 	tnz (OPT,sp)
      001E47 27 0D            [ 1]  440 	jreq 3$ 
      001E49 7B 01            [ 1]  441     ld a,(BTW,sp)
      001E4B 90 5F            [ 1]  442     clrw y
      001E4D 90 97            [ 1]  443 	ld yl,a 
      001E4F 1D 00 02         [ 2]  444 	subw x,#CELLL 
      001E52 FF               [ 2]  445 	ldw (x),y 
      001E53 CD 1D C1         [ 4]  446 	call WR_BYTE
      001E56                        447 3$: 
      001E56 CD 1D 3E         [ 4]  448 	call LOCK 
      001E59 5B 02            [ 2]  449 	addw sp,#VSIZE 
      001E5B 81               [ 4]  450     ret
                                    451 
                                    452 ;------------------------------
                                    453 ; write integer in FLASH|EEPROM
                                    454 ; EE! ( n ud -- )
                                    455 ;------------------------------
      001E5C 1E 11                  456 	.word LINK 
                           001E5E   457 	LINK=.
      001E5E 03                     458 	.byte 3 
      001E5F 45 45 21               459 	.ascii "EE!"
      001E62                        460 EESTORE:
      001E62 CD 1B D8         [ 4]  461 	call FPSTOR 
      001E65 CD 1D 16         [ 4]  462 	call UNLOCK 
      001E68 90 93            [ 1]  463 	ldw y,x 
      001E6A 90 FE            [ 2]  464 	ldw y,(y)
      001E6C 90 89            [ 2]  465 	pushw y 
      001E6E 90 5E            [ 1]  466 	swapw y 
      001E70 FF               [ 2]  467 	ldw (x),y 
      001E71 CD 1D C1         [ 4]  468 	call WR_BYTE 
      001E74 90 85            [ 2]  469 	popw y 
      001E76 1D 00 02         [ 2]  470 	subw x,#CELLL
      001E79 FF               [ 2]  471 	ldw (x),y 
      001E7A CD 1D C1         [ 4]  472 	call WR_BYTE
      001E7D CC 1D 3E         [ 2]  473 	jp LOCK 
                                    474 
                                    475 
                                    476 ;----------------------------
                                    477 ; Erase flash memory row 
                                    478 ; stm8s208 as 128 bytes rows
                                    479 ; ROW-ERASE ( ud -- )
                                    480 ;----------------------------
      001E80 1E 5E                  481 	.word LINK 
                           001E82   482 	LINK=. 
      001E82 09                     483 	.byte 9 
      001E83 52 4F 57 2D 45 52 41   484 	.ascii "ROW-ERASE" 
             53 45
      001E8C                        485 row_erase:
      001E8C CD 04 63         [ 4]  486 	call FC_XOFF
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      001E8F CD 1B D8         [ 4]  487 	call FPSTOR
                                    488 ;code must be execute from RAM 
                                    489 ;copy routine to PAD 
      001E92 1D 00 02         [ 2]  490 	subw x,#CELLL 
      001E95 90 AE 1E E5      [ 2]  491 	ldw y,#row_erase_proc
      001E99 FF               [ 2]  492 	ldw (x),y 
      001E9A CD 0C CF         [ 4]  493 	call PAD 
      001E9D 90 AE 1F 0C      [ 2]  494 	ldw y,#row_erase_proc_end 
      001EA1 72 A2 1E E5      [ 2]  495 	subw y,#row_erase_proc
      001EA5 1D 00 02         [ 2]  496 	subw x,#CELLL 
      001EA8 FF               [ 2]  497 	ldw (x),y 
      001EA9 CD 0D 0B         [ 4]  498 	call CMOVE 
      001EAC                        499 block_erase:
      001EAC 90 BE 35         [ 2]  500 	ldw y,FPTR+1
      001EAF 90 A3 35 80      [ 2]  501 	cpw y,#app_space 
      001EB3 2A 19            [ 1]  502 	jrpl erase_flash 
                                    503 ; erase EEPROM block
      001EB5 90 A3 40 00      [ 2]  504 	cpw y,#EEPROM_BASE 
      001EB9 24 04            [ 1]  505 	jruge 1$
      001EBB CD 04 4D         [ 4]  506 	call FC_XON
      001EBE 81               [ 4]  507 	ret ; bad address 
      001EBF 90 A3 47 FF      [ 2]  508 1$: cpw y,#EEPROM_END 
      001EC3 23 04            [ 2]  509 	jrule 2$ 
      001EC5 CD 04 4D         [ 4]  510 	call FC_XON
      001EC8 81               [ 4]  511 	ret ; bad address 
      001EC9                        512 2$:	
      001EC9 CD 1C D8         [ 4]  513 	call UNLKEE 
      001ECC 20 03            [ 2]  514 	jra proceed_erase
                                    515 ; erase flash block:
      001ECE                        516 erase_flash:
      001ECE CD 1C F7         [ 4]  517 	call UNLKFL 
      001ED1                        518 proceed_erase:
      001ED1 CD 0C CF         [ 4]  519 	call PAD 
      001ED4 90 93            [ 1]  520 	ldw y,x
      001ED6 90 FE            [ 2]  521 	ldw y,(y)
      001ED8 1C 00 02         [ 2]  522 	addw x,#CELLL  
      001EDB 90 FD            [ 4]  523 	call (y) 
      001EDD 72 17 50 5F      [ 1]  524 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001EE1 CD 04 4D         [ 4]  525 	call FC_XON
      001EE4 81               [ 4]  526 	ret 
                                    527 
                                    528 ; this routine is to be copied to PAD 
      001EE5                        529 row_erase_proc:
      001EE5 35 20 50 5B      [ 1]  530 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001EE9 35 DF 50 5C      [ 1]  531 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001EED 4F               [ 1]  532 	clr a 
      001EEE 90 5F            [ 1]  533 	clrw y 
      001EF0 91 A7 00 34      [ 1]  534 	ldf ([FPTR],y),a
      001EF4 90 5C            [ 1]  535     incw y
      001EF6 91 A7 00 34      [ 1]  536 	ldf ([FPTR],y),a
      001EFA 90 5C            [ 1]  537     incw y
      001EFC 91 A7 00 34      [ 1]  538 	ldf ([FPTR],y),a
      001F00 90 5C            [ 1]  539     incw y
      001F02 91 A7 00 34      [ 1]  540 	ldf ([FPTR],y),a
      001F06 72 05 50 5F FB   [ 2]  541 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      001F0B 81               [ 4]  542 	ret
      001F0C                        543 row_erase_proc_end:
                                    544 
                                    545 
                                    546 ;-----------------------------------
                                    547 ; block programming must be 
                                    548 ; executed from RAM 
                                    549 ; initial contidions: 
                                    550 ; 		memory unlocked
                                    551 ;       FPTR initialized 
                                    552 ; input: 
                                    553 ;    x   buffer address 
                                    554 ;-----------------------------------
                           000001   555 	BCNT=1 
      001F0C                        556 copy_buffer:
      001F0C 4B 80            [ 1]  557 	push #BLOCK_SIZE  
                                    558 ;enable block programming 
      001F0E 72 10 50 5B      [ 1]  559 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001F12 72 11 50 5C      [ 1]  560 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001F16 90 5F            [ 1]  561 	clrw y
      001F18 F6               [ 1]  562 1$:	ld a,(x)
      001F19 91 A7 00 34      [ 1]  563 	ldf ([FPTR],y),a
      001F1D 5C               [ 1]  564 	incw x 
      001F1E 90 5C            [ 1]  565 	incw y 
      001F20 0A 01            [ 1]  566 	dec (BCNT,sp)
      001F22 26 F4            [ 1]  567 	jrne 1$
                                    568 ; wait EOP bit 
      001F24 72 05 50 5F FB   [ 2]  569 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001F29 84               [ 1]  570 	pop a ; remove BCNT from stack 
      001F2A 81               [ 4]  571 	ret 
      001F2B                        572 copy_buffer_end:
                                    573 
                                    574 ;-------------------------
                                    575 ; move program_row to RAM 
                                    576 ; in TIB 
                                    577 ;------------------------
      001F2B                        578 copy_prog_to_ram:
      001F2B 1D 00 06         [ 2]  579 	subw x,#6
      001F2E 90 AE 1F 0C      [ 2]  580 	ldw y,#copy_buffer 
      001F32 EF 04            [ 2]  581 	ldw (4,x),y 
      001F34 90 AE 17 00      [ 2]  582 	ldw y,#TIBBASE
      001F38 EF 02            [ 2]  583 	ldw (2,x),y 
      001F3A 90 AE 1F 2B      [ 2]  584 	ldw y,#copy_buffer_end 
      001F3E 72 A2 1F 0C      [ 2]  585 	subw y,#copy_buffer  
      001F42 FF               [ 2]  586 	ldw (x),y 
      001F43 CD 0D 0B         [ 4]  587 	call CMOVE 
      001F46 81               [ 4]  588 	ret 
                                    589 
                                    590 
                                    591 ;-----------------------------
                                    592 ; write a row in FLASH/EEPROM 
                                    593 ; WR-ROW ( a ud -- )
                                    594 ; a -> address 128 byte buffer to write 
                                    595 ; ud ->  row address in FLASH|EEPROM 
                                    596 ;-----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      001F47 1E 82                  597 	.word LINK 
                           001F49   598 	LINK=.
      001F49 06                     599 	.byte 6 
      001F4A 57 52 2D 52 4F 57      600 	.ascii "WR-ROW"
      001F50                        601 write_row:
      001F50 CD 04 63         [ 4]  602 	call FC_XOFF
      001F53 CD 1B D8         [ 4]  603 	call FPSTOR
                                    604 ; align to FLASH block 
      001F56 A6 80            [ 1]  605 	ld a,#0x80 
      001F58 B4 36            [ 1]  606 	and a,PTR8 
      001F5A B7 36            [ 1]  607 	ld PTR8,a  
      001F5C CD 1F 2B         [ 4]  608 	call copy_prog_to_ram
      001F5F CD 1D 16         [ 4]  609 	call UNLOCK
      001F62 90 93            [ 1]  610 	ldw y,x 
      001F64 90 FE            [ 2]  611 	ldw y,(y)
      001F66 1C 00 02         [ 2]  612 	addw x,#CELLL 
      001F69 89               [ 2]  613 	pushw x 
      001F6A 93               [ 1]  614 	ldw x,y ; buffer address in x 
      001F6B CD 17 00         [ 4]  615 	call TIBBASE
      001F6E CD 1D 3E         [ 4]  616 	call LOCK
      001F71 85               [ 2]  617 	popw x 
      001F72 CD 04 4D         [ 4]  618 	call FC_XON 
      001F75 81               [ 4]  619 	ret 
                                    620 
                                    621 ;-------------------------------------
                                    622 ; change value of OPTION register 
                                    623 ; SET-OPT (c n -- ) 
                                    624 ; c new value.
                                    625 ; n OPT  number {1..7}
                                    626 ;--------------------------------------
      001F76 1F 49                  627 		.word LINK 
                           001F78   628 		LINK=.
      001F78 07                     629 		.byte 7 
      001F79 53 45 54 2D 4F 50 54   630 		.ascii "SET-OPT" 
      001F80                        631 set_option: 
      001F80 90 93            [ 1]  632 		ldw y,x 
      001F82 90 FE            [ 2]  633 		ldw y,(y)
      001F84 27 06            [ 1]  634 		jreq 1$
      001F86 90 A3 00 07      [ 2]  635 		cpw y,#7 
      001F8A 23 04            [ 2]  636 		jrule 2$ 
                                    637 ; invalid OPTION number 		
      001F8C 1C 00 04         [ 2]  638 1$:		addw x,#2*CELLL
      001F8F 81               [ 4]  639 		ret
      001F90 90 58            [ 2]  640 2$:		sllw y 
      001F92 72 A9 47 FF      [ 2]  641 		addw y,#OPTION_BASE-1
      001F96 FF               [ 2]  642 		ldw (x),y 
      001F97 1D 00 02         [ 2]  643 		subw x,#CELLL 
      001F9A 90 5F            [ 1]  644 		clrw y 
      001F9C FF               [ 2]  645 		ldw (x),y 
      001F9D CD 1E 16         [ 4]  646 		call EECSTORE
      001FA0 81               [ 4]  647 		ret 
                                    648 
                                    649 
                                    650 
                                    651 ;--------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



                                    652 ; reset system to its original state 
                                    653 ; before any user modification
                                    654 ; PRISTINE ( -- )
                                    655 ;-------------------------------------
      001FA1 1F 78                  656 	.word LINK  
                           001FA3   657 	LINK=.
      001FA3 08                     658 	.byte 8 
      001FA4 50 52 49 53 54 49 4E   659 	.ascii "PRISTINE"
             45
      001FAC                        660 pristine:
                                    661 ;;; erase EEPROM
      001FAC CD 1B F7         [ 4]  662 	call EEPROM 
      001FAF CD 08 31         [ 4]  663 1$:	call DDUP 
      001FB2 CD 1E 8C         [ 4]  664 	call row_erase
      001FB5 90 93            [ 1]  665 	ldw y,x 
      001FB7 90 EE 02         [ 2]  666 	ldw y,(2,y)
      001FBA 72 A9 00 80      [ 2]  667 	addw y,#BLOCK_SIZE
      001FBE EF 02            [ 2]  668 	ldw (2,x),y
      001FC0 90 A3 48 00      [ 2]  669 	cpw y,#OPTION_BASE 
      001FC4 25 E9            [ 1]  670 	jrult 1$
                                    671 ;;; reset OPTION to default values
      001FC6 90 AE 00 01      [ 2]  672 	ldw y,#1 ; OPT1 
      001FCA FF               [ 2]  673 2$:	ldw (x),y   
      001FCB 90 5F            [ 1]  674 	clrw y 
      001FCD EF 02            [ 2]  675 	ldw (2,x),y  ; ( 0 1 -- ) 
      001FCF CD 08 31         [ 4]  676 	call DDUP    ; ( 0 1 0 1 -- )  
      001FD2 CD 1F 80         [ 4]  677 	call set_option
      001FD5 90 93            [ 1]  678 	ldw y,x 
      001FD7 90 FE            [ 2]  679 	ldw y,(y)
      001FD9 90 5C            [ 1]  680 	incw y  ; next OPTION 
      001FDB 90 A3 00 08      [ 2]  681 	cpw y,#8 
      001FDF 25 E9            [ 1]  682 	jrult 2$
                                    683 ;;; erase first row of app_space 	
      001FE1 90 AE 35 80      [ 2]  684 	ldw y,#app_space
      001FE5 EF 02            [ 2]  685 	ldw (2,x),y  
      001FE7 90 5F            [ 1]  686 	clrw y 
      001FE9 FF               [ 2]  687 	ldw (x),y ; ( app_space 0 -- )
      001FEA CD 1E 8C         [ 4]  688 	call row_erase 
                                    689 ; reset interrupt vectors 
      001FED 1D 00 02         [ 2]  690 	subw x,#CELLL 
      001FF0 90 5F            [ 1]  691 	clrw y  
      001FF2 FF               [ 2]  692 4$:	ldw (x),y  ; ( n -- ) int# 
      001FF3 CD 06 21         [ 4]  693 	call DUPP  
      001FF6 CD 20 13         [ 4]  694 	call reset_vector
      001FF9 90 93            [ 1]  695 	ldw y,x 
      001FFB 90 FE            [ 2]  696 	ldw y,(y)
      001FFD 90 5C            [ 1]  697 	incw y   ; next vector 
      001FFF 90 A3 00 19      [ 2]  698 	cpw y,#25 
      002003 25 ED            [ 1]  699 	jrult 4$
      002005 CC 00 00         [ 2]  700 	jp NonHandledInterrupt ; reset MCU
                                    701 
                                    702 ;------------------------------
                                    703 ; reset an interrupt vector 
                                    704 ; to its initial value 
                                    705 ; i.e. NonHandledInterrupt
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



                                    706 ; RST-IVEC ( n -- )
                                    707 ;-----------------------------
      002008 1F A3                  708 	.word LINK 
                           00200A   709 	LINK=. 
      00200A 08                     710 	.byte 8 
      00200B 52 53 54 2D 49 56 45   711 	.ascii "RST-IVEC"
             43
      002013                        712 reset_vector:
      002013 90 93            [ 1]  713 	ldw y,x
      002015 1C 00 02         [ 2]  714 	addw x,#CELLL 
      002018 90 FE            [ 2]  715 	ldw y,(y)
      00201A 90 A3 00 17      [ 2]  716 	cpw y,#23 
      00201E 27 3A            [ 1]  717 	jreq 9$
      002020 90 A3 00 1D      [ 2]  718 	cpw y,#29 ; last vector
      002024 22 34            [ 1]  719 	jrugt 9$  
      002026 90 58            [ 2]  720 	sllw y 
      002028 90 58            [ 2]  721 	sllw y 
      00202A 72 A9 80 08      [ 2]  722 	addw y,#0x8008 ; irq0 address 
      00202E 90 BF 26         [ 2]  723 	ldw YTEMP,y
      002031 1D 00 06         [ 2]  724 	subw x,#3*CELLL 
      002034 EF 02            [ 2]  725 	ldw (2,x),y 
      002036 90 5F            [ 1]  726 	clrw y
      002038 FF               [ 2]  727 	ldw (x),y 
      002039 A6 82            [ 1]  728 	ld a,#0x82 
      00203B 90 95            [ 1]  729 	ld yh,a
      00203D EF 04            [ 2]  730 	ldw (4,x),y
      00203F CD 1E 62         [ 4]  731 	call EESTORE
      002042 1D 00 06         [ 2]  732 	subw x,#3*CELLL
      002045 90 5F            [ 1]  733 	clrw y 
      002047 FF               [ 2]  734 	ldw (x),y 
      002048 90 AE 00 00      [ 2]  735 	ldw y,#NonHandledInterrupt
      00204C EF 04            [ 2]  736 	ldw (4,x),y 
      00204E 90 BE 26         [ 2]  737 	ldw y,YTEMP  
      002051 72 A9 00 02      [ 2]  738 	addw y,#2
      002055 EF 02            [ 2]  739 	ldw (2,x),y 
      002057 CD 1E 62         [ 4]  740 	call EESTORE
      00205A 81               [ 4]  741 9$:	ret 
                                    742 
                                    743 
                                    744 ;------------------------------
                                    745 ; all interrupt vector with 
                                    746 ; an address >= a are resetted 
                                    747 ; to default
                                    748 ; CHKIVEC ( a -- )
                                    749 ;------------------------------
      00205B 20 0A                  750 	.word LINK 
                           00205D   751 	LINK=.
      00205D 07                     752 	.byte 7
      00205E 43 48 4B 49 56 45 43   753 	.ascii "CHKIVEC"
                                    754 ;local variables 
                           000001   755 	SSP=1
                           000003   756 	CADR=3
                           000005   757 	OFS=5
                           000006   758 	VSIZE=6  
      002065                        759 CHKIVEC:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      002065 52 06            [ 2]  760 	sub sp,#VSIZE ;alloc local variables 
      002067 90 93            [ 1]  761 	ldw y,x 
      002069 90 FE            [ 2]  762 	ldw y,(y)
      00206B 17 03            [ 2]  763 	ldw (CADR,sp),y ; ca 
      00206D 1F 01            [ 2]  764 	ldw (SSP,sp),x 
      00206F AE 80 0A         [ 2]  765 	ldw x,#0x800a ; irq0 address 
      002072 BF 35            [ 2]  766 	ldw PTR16,X
      002074 AE FF FC         [ 2]  767 	ldw x,#-4 
      002077 1C 00 04         [ 2]  768 1$:	addw x,#4
      00207A A3 00 78         [ 2]  769 	cpw x,#30*4 ; irq0-29 
      00207D 27 22            [ 1]  770 	jreq 9$
      00207F 90 93            [ 1]  771 	ldw y,x  
      002081 91 D6 35         [ 4]  772 	ld a,([PTR16],y)
      002084 11 03            [ 1]  773 	cp a,(CADR,sp)
      002086 25 EF            [ 1]  774 	jrult 1$
      002088 90 5C            [ 1]  775 	incw y 
      00208A 91 D6 35         [ 4]  776 	ld a,([PTR16],y)
      00208D 11 04            [ 1]  777 	cp a,(CADR+1,sp) 
      00208F 25 E6            [ 1]  778 	jrult 1$ 
      002091 1F 05            [ 2]  779 	ldw (OFS,sp),x 
      002093 54               [ 2]  780 	srlw x
      002094 54               [ 2]  781 	srlw x 
      002095 90 93            [ 1]  782 	ldw y,x 
      002097 1E 01            [ 2]  783 	ldw x,(SSP,sp)
      002099 FF               [ 2]  784 	ldw (x),y
      00209A CD 20 13         [ 4]  785 	call reset_vector
      00209D 1E 05            [ 2]  786 	ldw x,(OFS,sp) 
      00209F 20 D6            [ 2]  787 	jra 1$
      0020A1 1E 01            [ 2]  788 9$:	ldw x,(SSP,sp) 
      0020A3 1C 00 02         [ 2]  789 	addw x,#CELLL 
      0020A6 5B 06            [ 2]  790 	addw sp,#VSIZE ; drop local variables  
      0020A8 81               [ 4]  791 	ret 
                                    792 
                                    793 ;------------------------------
                                    794 ; set interrupt vector 
                                    795 ; SET-IVEC ( ud n -- )
                                    796 ;  ud Handler address
                                    797 ;  n  vector # 0 .. 29 
                                    798 ;-----------------------------
      0020A9 20 5D                  799 	.word LINK
                           0020AB   800 	LINK=.
      0020AB 08                     801 	.byte 8 
      0020AC 53 45 54 2D 49 56 45   802 	.ascii "SET-IVEC" 
             43
      0020B4                        803 set_vector:
      0020B4 90 93            [ 1]  804     ldw y,x 
      0020B6 1C 00 02         [ 2]  805 	addw x,#CELLL 
      0020B9 90 FE            [ 2]  806 	ldw y,(y) ; vector #
      0020BB 90 A3 00 1D      [ 2]  807 	cpw y,#29 ; last vector
      0020BF 23 04            [ 2]  808 	jrule 2$
      0020C1 1C 00 04         [ 2]  809 	addw x,#2*CELLL 
      0020C4 81               [ 4]  810 	ret
      0020C5 90 58            [ 2]  811 2$:	sllw y 
      0020C7 90 58            [ 2]  812 	sllw y 
      0020C9 72 A9 80 08      [ 2]  813 	addw y,#0X8008 ; IRQ0 vector address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



      0020CD 90 BF 26         [ 2]  814 	ldw YTEMP,y ; vector address 
      0020D0 A6 82            [ 1]  815 	ld a,#0x82 
      0020D2 90 95            [ 1]  816 	ld yh,a 
      0020D4 E6 01            [ 1]  817 	ld a,(1,x) ; isr address bits 23..16 
      0020D6 90 97            [ 1]  818 	ld yl,a 
                                    819 ;  write 0x82 + most significant byte of int address	
      0020D8 1D 00 06         [ 2]  820 	subw x,#3*CELLL 
      0020DB EF 04            [ 2]  821 	ldw (4,x),y 
      0020DD 90 BE 26         [ 2]  822 	ldw y,YTEMP
      0020E0 EF 02            [ 2]  823 	ldw (2,x),y ; vector address 
      0020E2 90 5F            [ 1]  824 	clrw y 
      0020E4 FF               [ 2]  825 	ldw (x),y   ; as a double 
      0020E5 CD 1E 62         [ 4]  826 	call EESTORE 
      0020E8 90 93            [ 1]  827 	ldw y,x 
      0020EA 90 EE 02         [ 2]  828 	ldw y,(2,y) ; bits 15..0 int vector 
      0020ED 1D 00 06         [ 2]  829 	subw x,#3*CELLL 
      0020F0 EF 04            [ 2]  830 	ldw (4,x),y 
      0020F2 90 BE 26         [ 2]  831 	ldw y,YTEMP 
      0020F5 72 A9 00 02      [ 2]  832 	addw y,#2 
      0020F9 EF 02            [ 2]  833 	ldw (2,x),y 
      0020FB 90 5F            [ 1]  834 	clrw y 
      0020FD FF               [ 2]  835 	ldw (x),y 
      0020FE CD 1E 62         [ 4]  836 	call EESTORE
      002101 1C 00 04         [ 2]  837 	addw x,#2*CELLL  
      002104 81               [ 4]  838 9$: ret 
                                    839 
                                    840 
                                    841 ;------------------------
                                    842 ; Compile word to flash
                                    843 ; EE, (w -- )
                                    844 ;-----------------------
      002105 20 AB                  845 	.word LINK
                           002107   846 	LINK=.
      002107 03                     847 	.byte 3
      002108 45 45 2C               848 	.ascii "EE,"
      00210B                        849 EE_COMMA:
      00210B 1D 00 04         [ 2]  850 	subw x,#2*CELLL 
      00210E 90 BE 1A         [ 2]  851 	ldw y,UCP
      002111 90 89            [ 2]  852 	pushw y 
      002113 EF 02            [ 2]  853 	ldw (2,x),y 
      002115 90 5F            [ 1]  854 	clrw y 
      002117 FF               [ 2]  855 	ldw (x),y
      002118 CD 1E 62         [ 4]  856 	call EESTORE
      00211B 90 85            [ 2]  857 	popw y 
      00211D 72 A9 00 02      [ 2]  858 	addw y,#2
      002121 90 BF 1A         [ 2]  859 	ldw UCP,y
      002124 81               [ 4]  860 	ret 
                                    861 
                                    862 
                                    863 ;-------------------------
                                    864 ; Compile byte to flash 
                                    865 ; EEC, ( c -- )	
                                    866 ;-------------------------
      002125 21 07                  867 	.word LINK 
                           002127   868 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



      002127 04                     869 	.byte 4 
      002128 45 45 43 2C            870 	.ascii "EEC,"
      00212C                        871 EE_CCOMMA:
      00212C 1D 00 04         [ 2]  872 	subw x,#2*CELLL 
      00212F 90 BE 1A         [ 2]  873 	ldw y,UCP
      002132 90 89            [ 2]  874 	pushw y 
      002134 EF 02            [ 2]  875 	ldw (2,x),y 
      002136 90 5F            [ 1]  876 	clrw y 
      002138 FF               [ 2]  877 	ldw (x),y
      002139 CD 1E 16         [ 4]  878 	call EECSTORE
      00213C 90 85            [ 2]  879 	popw y 
      00213E 90 5C            [ 1]  880 	incw y 
      002140 90 BF 1A         [ 2]  881 	ldw UCP,y
      002143 81               [ 4]  882 	ret 
                                    883 
                                    884 
                                    885 ;--------------------------
                                    886 ; copy FLASH block to ROWBUF
                                    887 ; ROW>BUF ( ud -- )
                                    888 ;--------------------------
      002144 21 27                  889 	.word LINK 
                           002146   890 	LINK=.
      002146 07                     891 	.byte 7 
      002147 52 4F 57 3E 42 55 46   892 	.ascii "ROW>BUF"
      00214E                        893 ROW2BUF: 
      00214E CD 1B D8         [ 4]  894 	call FPSTOR 
      002151 A6 80            [ 1]  895 	ld a,#BLOCK_SIZE
      002153 88               [ 1]  896 	push a 
      002154 B4 36            [ 1]  897 	and a,PTR8 ; block align 
      002156 B7 36            [ 1]  898 	ld PTR8,a
      002158 90 AE 16 80      [ 2]  899 	ldw y,#ROWBUFF 
      00215C 92 BC 00 34      [ 5]  900 1$: ldf a,[FPTR]
      002160 90 F7            [ 1]  901 	ld (y),a
      002162 CD 1D 52         [ 4]  902 	call INC_FPTR
      002165 90 5C            [ 1]  903 	incw y 
      002167 0A 01            [ 1]  904 	dec (1,sp)
      002169 26 F1            [ 1]  905 	jrne 1$ 
      00216B 84               [ 1]  906 	pop a 
      00216C 81               [ 4]  907 	ret 
                                    908 
                                    909 
                                    910 ;---------------------------
                                    911 ; copy ROWBUFF to flash 
                                    912 ; BUF>ROW ( ud -- )
                                    913 ; ud is row address as double 
                                    914 ;---------------------------
      00216D 21 46                  915 	.word LINK 
                           00216F   916 	LINK=.
      00216F 07                     917 	.byte 7 
      002170 42 55 46 3E 52 4F 57   918 	.ascii "BUF>ROW" 
      002177                        919 BUF2ROW:
      002177 CD 07 25         [ 4]  920 	call TBUF ; ( ud rb -- )
      00217A CD 07 E5         [ 4]  921 	call ROT 
      00217D CD 07 E5         [ 4]  922 	call ROT  ; ( rb ud -- )
      002180 CD 1F 50         [ 4]  923 	call write_row 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      002183 81               [ 4]  924 	ret 
                                    925 
                                    926 ;---------------------------------
                                    927 ; how many byte free in that row 
                                    928 ; RFREE ( a -- n )
                                    929 ; a is least byte of target address
                                    930 ;----------------------------------
      002184 21 6F                  931 	.word LINK 
                           002186   932 	LINK=.
      002186 05                     933 	.byte 5 
      002187 52 46 52 45 45         934 	.ascii "RFREE"
      00218C                        935 RFREE:
      00218C E6 01            [ 1]  936 	ld a,(1,x)
      00218E A4 7F            [ 1]  937 	and a,#BLOCK_SIZE-1 
      002190 B7 26            [ 1]  938 	ld YTEMP,a 
      002192 A6 80            [ 1]  939 	ld a,#BLOCK_SIZE 
      002194 B0 26            [ 1]  940 	sub a,YTEMP 
      002196 90 5F            [ 1]  941 	clrw y 
      002198 90 97            [ 1]  942 	ld yl,a
      00219A FF               [ 2]  943 	ldw (x),y 
      00219B 81               [ 4]  944 	ret 
                                    945 
                                    946 ;---------------------------------
                                    947 ; write u bytes to flash/EEPROM 
                                    948 ; constraint to row limit 
                                    949 ; RAM>EE ( ud a u -- u2 )
                                    950 ; ud flash address 
                                    951 ; a ram address 
                                    952 ; u bytes count
                                    953 ; return u2 bytes written  
                                    954 ;-------------------------------
      00219C 21 86                  955 	.word LINK 
                           00219E   956 	LINK=. 
      00219E 06                     957 	.byte 6
      00219F 52 41 4D 3E 45 45      958 	.ascii "RAM>EE"
                                    959 	
      0021A5                        960 RAM2EE:
                                    961 ; copy ud on top 
      0021A5 90 93            [ 1]  962 	ldw y,x 
      0021A7 90 EE 06         [ 2]  963 	ldw y,(6,y) ; LSW of ud  
      0021AA 90 BF 26         [ 2]  964 	ldw YTEMP,y 
      0021AD 90 93            [ 1]  965 	ldw y,x 
      0021AF 90 EE 04         [ 2]  966 	ldw y,(4,y)  ; MSW of ud 
      0021B2 1D 00 04         [ 2]  967 	subw x,#2*CELLL 
      0021B5 FF               [ 2]  968 	ldw (x),y 
      0021B6 90 BE 26         [ 2]  969 	ldw y,YTEMP 
      0021B9 EF 02            [ 2]  970 	ldw (2,x),y 
      0021BB CD 21 4E         [ 4]  971 	call ROW2BUF 
      0021BE 90 93            [ 1]  972 	ldw y,x 
      0021C0 90 EE 06         [ 2]  973 	ldw y,(6,y)
      0021C3 90 89            [ 2]  974 	pushw y ; udl 
      0021C5 90 9F            [ 1]  975 	ld a,yl
      0021C7 A4 7F            [ 1]  976 	and a,#BLOCK_SIZE-1 
      0021C9 90 5F            [ 1]  977 	clrw y 
      0021CB 90 97            [ 1]  978 	ld yl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      0021CD 72 A9 16 80      [ 2]  979 	addw y,#ROWBUFF 
      0021D1 1D 00 02         [ 2]  980 	subw x,#CELLL 
      0021D4 FF               [ 2]  981 	ldw (x),y  
      0021D5 CD 06 31         [ 4]  982 	call SWAPP ;  ( ud a ra u -- )
      0021D8 CD 05 34         [ 4]  983 	call RFROM  
      0021DB CD 21 8C         [ 4]  984 	call RFREE 
      0021DE CD 09 B0         [ 4]  985 	call MIN
      0021E1 CD 06 21         [ 4]  986 	call DUPP 
      0021E4 CD 05 EA         [ 4]  987 	call TOR  
      0021E7 CD 0D 0B         [ 4]  988 	call CMOVE
      0021EA CD 21 77         [ 4]  989 	call BUF2ROW 
      0021ED CD 05 34         [ 4]  990 	call RFROM 
      0021F0 81               [ 4]  991 	ret 
                                    992 
                                    993 
                                    994 ;--------------------------
                                    995 ; expand 16 bit address 
                                    996 ; to 32 bit address 
                                    997 ; FADDR ( a -- ud )
                                    998 ;--------------------------
      0021F1 21 9E                  999 	.word LINK 
                           0021F3  1000 	LINK=. 
      0021F3 05                    1001 	.byte 5 
      0021F4 46 41 44 44 52        1002 	.ascii "FADDR"
      0021F9                       1003 FADDR:
      0021F9 CC 0B E1         [ 2] 1004 	jp ZERO 
                                   1005 
                                   1006 
                                   1007 ;--------------------------
                                   1008 ; move new colon definition to FLASH 
                                   1009 ; using WR-ROW for efficiency 
                                   1010 ; preserving bytes already used 
                                   1011 ; in the current block. 
                                   1012 ; At this point the compiler as completed
                                   1013 ; in RAM and pointers CP and CNTXT updated.
                                   1014 ; CNTXT point to nfa of new word and  
                                   1015 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                   1016 ; 
                                   1017 ; FMOVE ( -- cp+ )
                                   1018 ; 
                                   1019 ;--------------------------
      0021FC 21 F3                 1020 	.word LINK 
                           0021FE  1021 	LINK=.
      0021FE 05                    1022 	.byte 5 
      0021FF 46 4D 4F 56 45        1023 	.ascii "FMOVE" 
      002204                       1024 FMOVE:
      002204 CD 07 37         [ 4] 1025 	call TFLASH 
      002207 CD 04 E3         [ 4] 1026 	CALL AT 
      00220A CD 04 98         [ 4] 1027 	CALL QBRAN 
      00220D 22 88                 1028 	.word no_move  
      00220F CD 07 86         [ 4] 1029 	call CPP
      002212 CD 04 E3         [ 4] 1030 	call AT  
      002215 CD 06 21         [ 4] 1031 	call DUPP ; ( udl udl -- )
      002218 CD 07 6A         [ 4] 1032 	call CNTXT 
      00221B CD 04 E3         [ 4] 1033 	call AT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



      00221E CD 04 6F         [ 4] 1034 	call DOLIT 
      002221 00 02                 1035 	.word 2 
      002223 CD 08 D0         [ 4] 1036 	call SUBB ; ( udl udl a -- )
      002226 CD 06 31         [ 4] 1037 	call SWAPP 
      002229 CD 21 F9         [ 4] 1038 	call FADDR 
      00222C CD 07 E5         [ 4] 1039 	call ROT  ; ( udl ud a -- )
      00222F CD 06 21         [ 4] 1040 	call DUPP 
      002232 CD 05 EA         [ 4] 1041 	call TOR    ; R: a 
      002235                       1042 FMOVE2: 
      002235 CD 0C BE         [ 4] 1043 	call HERE 
      002238 CD 05 45         [ 4] 1044 	call RAT 
      00223B CD 08 D0         [ 4] 1045 	call SUBB ; (udl ud a wl -- )
      00223E                       1046 next_row:
      00223E CD 06 21         [ 4] 1047 	call DUPP 
      002241 CD 05 EA         [ 4] 1048 	call TOR  ; ( udl ud a wl -- ) R: a wl
      002244 CD 21 A5         [ 4] 1049 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      002247 CD 06 21         [ 4] 1050 	call DUPP 
      00224A CD 05 EA         [ 4] 1051 	call TOR
      00224D CD 08 46         [ 4] 1052 	call PLUS  ; ( udl+ ) 
      002250 CD 06 21         [ 4] 1053 	call DUPP 
      002253 CD 0B E1         [ 4] 1054 	call ZERO   ; ( udl+ ud -- )
      002256 CD 05 34         [ 4] 1055 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      002259 CD 05 34         [ 4] 1056 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      00225C CD 06 49         [ 4] 1057 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      00225F CD 08 D0         [ 4] 1058 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      002262 CD 06 21         [ 4] 1059 	call DUPP 
      002265 CD 04 98         [ 4] 1060 	call QBRAN
      002268 22 81                 1061 	.word fmove_done 
      00226A CD 06 31         [ 4] 1062 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      00226D CD 05 34         [ 4] 1063 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      002270 CD 08 46         [ 4] 1064 	call PLUS  ; ( udl+2 ud wl- a+ )
      002273 CD 06 21         [ 4] 1065 	call DUPP 
      002276 CD 05 EA         [ 4] 1066 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      002279 CD 06 31         [ 4] 1067 	call SWAPP 
      00227C CD 04 B4         [ 4] 1068 	call BRAN
      00227F 22 3E                 1069 	.word next_row  
      002281                       1070 fmove_done:	
      002281 CD 05 34         [ 4] 1071 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      002284 1C 00 0A         [ 2] 1072 	addw x,#5*CELLL ; (  -- cp+ ) new CP 
      002287 81               [ 4] 1073  	ret  
      002288                       1074 no_move:
      002288 CD 0B E1         [ 4] 1075 	call ZERO
      00228B 81               [ 4] 1076 	ret 
                                   1077 
                                   1078 ;------------------------------------------
                                   1079 ; adjust pointers after **FMOVE** operetion.
                                   1080 ; UPDAT-PTR ( cp+ -- )
                                   1081 ; cp+ is new CP position after FMOVE 
                                   1082 ;-------------------------------------------
      00228C 21 FE                 1083 	.word LINK 
                           00228E  1084 	LINK=.
      00228E 09                    1085 	.byte 9
      00228F 55 50 44 41 54 2D 50  1086 	.ascii "UPDAT-PTR" 
             54 52
      002298                       1087 UPDATPTR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



                                   1088 ;reset VP to previous position  
      002298 CD 1C 52         [ 4] 1089 	call EEPVP 
      00229B CD 06 17         [ 4] 1090 	call DROP 
      00229E CD 04 E3         [ 4] 1091 	call AT
      0022A1 CD 07 78         [ 4] 1092 	call VPP 
      0022A4 CD 04 D1         [ 4] 1093 	call STORE
                                   1094 ;update CONTEXT and LAST 
      0022A7 CD 1C 3C         [ 4] 1095 	call EEPCP 
      0022AA CD 06 17         [ 4] 1096 	call DROP
      0022AD CD 04 E3         [ 4] 1097 	call AT
      0022B0 CD 04 6F         [ 4] 1098 	call DOLIT 
      0022B3 00 02                 1099 	.word 2 
      0022B5 CD 08 46         [ 4] 1100 	call PLUS 
      0022B8 CD 06 21         [ 4] 1101 	call DUPP 
      0022BB CD 07 6A         [ 4] 1102 	call CNTXT 
      0022BE CD 04 D1         [ 4] 1103 	call STORE
      0022C1 CD 07 96         [ 4] 1104 	call LAST
      0022C4 CD 04 D1         [ 4] 1105 	call STORE 
      0022C7 CD 1C 6C         [ 4] 1106 	call UPDATLAST 
                                   1107 ;update CP 
      0022CA CD 07 86         [ 4] 1108 	call CPP 
      0022CD CD 04 D1         [ 4] 1109 	call STORE
      0022D0 CD 1C 95         [ 4] 1110 	call UPDATCP 
      0022D3 81               [ 4] 1111 	ret 
                                   1112 
                                   1113 ;-----------------------------
                                   1114 ; move interrupt sub-routine
                                   1115 ; in flash memory
                                   1116 ;----------------------------- 
      0022D4 22 8E                 1117 	.word LINK 
                           0022D6  1118 	LINK=. 
      0022D6 06                    1119 	.byte 6
      0022D7 49 46 4D 4F 56 45     1120 	.ascii "IFMOVE" 
      0022DD                       1121 IFMOVE:
      0022DD CD 07 37         [ 4] 1122 	call TFLASH 
      0022E0 CD 04 E3         [ 4] 1123 	CALL AT 
      0022E3 CD 04 98         [ 4] 1124 	CALL QBRAN 
      0022E6 22 88                 1125 	.word no_move 
      0022E8 CD 07 86         [ 4] 1126 	call CPP 
      0022EB CD 04 E3         [ 4] 1127 	call AT 
      0022EE CD 06 21         [ 4] 1128 	call DUPP ; ( udl udl -- )
      0022F1 CD 1C 52         [ 4] 1129 	call EEPVP 
      0022F4 CD 06 17         [ 4] 1130 	call DROP
      0022F7 CD 04 E3         [ 4] 1131 	call AT  ; ( udl udl a )
      0022FA CD 05 EA         [ 4] 1132 	call TOR 
      0022FD CD 21 F9         [ 4] 1133 	call FADDR
      002300 CD 05 45         [ 4] 1134 	call RAT ; ( udl ud a -- ) R: a 
      002303 CC 22 35         [ 2] 1135 	jp FMOVE2 
                                   1136 
                                   1137 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



                           000001  4516 .if WANT_SCALING_CONST 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



                                   4517         .include "const_ratio.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;--------------------------------------------------------------------
                                     22 ; Irrationals constants 
                                     23 ; expressed as 2 integers ratio
                                     24 ; aproximation. These are to be used with scaling operators */ and */MOD 
                                     25 ; REF: https://www.forth.com/starting-forth/5-fixed-point-arithmetic/
                                     26 ;---------------------------------------------------------------------
                                     27 
                                     28 ;       PI ( --  355 113 )
                                     29 ; precision 8.5e-8 
                                     30 ; usage example to compute circle area
                                     31 ; : CAREA DUP * PI */ ;
                                     32 ; 
                                     33 
      002306 22 D6                   34         .word LINK 
                           002308    35         LINK=.
      002308 02                      36         .byte 2
      002309 50 49                   37         .ascii "PI" 
      00230B                         38 PII:
      00230B 1D 00 04         [ 2]   39         subw x,#2*CELLL 
      00230E 90 AE 01 63      [ 2]   40         ldw y,#355 
      002312 EF 02            [ 2]   41         ldw (2,x),y 
      002314 90 AE 00 71      [ 2]   42         ldw y,#113 
      002318 FF               [ 2]   43         ldw (x),y 
      002319 81               [ 4]   44         ret 
                                     45 
                                     46 ;      SQRT2 ( -- 19601  13860 )
                                     47 ; precision: 1.5e-9 
                                     48 ; usage example to compute Voltage peek to peek from Vrms 
                                     49 ; : VPP SQRT2 */ 2 * ;
                                     50 ;
      00231A 23 08                   51         .word LINK 
                           00231C    52         LINK=.
      00231C 05                      53         .byte 5 
      00231D 53 51 52 54 32          54         .ascii "SQRT2" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      002322                         55 SQRT2:
      002322 1D 00 04         [ 2]   56         subw x,#2*CELLL 
      002325 90 AE 4C 91      [ 2]   57         ldw y,#19601 
      002329 EF 02            [ 2]   58         ldw (2,x),y 
      00232B 90 AE 36 24      [ 2]   59         ldw y,#13860 
      00232F FF               [ 2]   60         ldw (x),y 
      002330 81               [ 4]   61         ret 
                                     62 
                                     63 ;   SQRT3 ( -- 18817 10864 )
                                     64 ; precision: 1.1e-9
                                     65 ;
      002331 23 1C                   66         .word LINK 
                           002333    67         LINK=.
      002333 05                      68         .byte 5
      002334 53 51 52 54 33          69         .ascii "SQRT3" 
      002339                         70 SQRT3: 
      002339 1D 00 04         [ 2]   71     subw x,#2*CELLL 
      00233C 90 AE 49 81      [ 2]   72     ldw y,#18817 
      002340 EF 02            [ 2]   73     ldw (2,x),y 
      002342 90 AE 2A 70      [ 2]   74     ldw y,#10864 
      002346 FF               [ 2]   75     ldw (x),y 
      002347 81               [ 4]   76     ret 
                                     77 
                                     78 ;   E ( -- 28667 10546 )
                                     79 ; precision: 5.5e-9 
                                     80 ; natural log base 
      002348 23 33                   81         .word LINK 
                           00234A    82         LINK=.
      00234A 01                      83         .byte 1
      00234B 45                      84         .ascii "E" 
      00234C                         85 ENEPER:
      00234C 1D 00 04         [ 2]   86     subw x,#2*CELLL 
      00234F 90 AE 6F FB      [ 2]   87     ldw y,#28667 
      002353 EF 02            [ 2]   88     ldw (2,x),y 
      002355 90 AE 29 32      [ 2]   89     ldw y,#10546 
      002359 FF               [ 2]   90     ldw (x),y 
      00235A 81               [ 4]   91     ret 
                                     92 
                                     93 ;   SQRT10 ( -- 22936 7253 )
                                     94 ; precision: 5.7e-9 
      00235B 23 4A                   95         .word LINK 
                           00235D    96         LINK=.
      00235D 06                      97         .byte 6 
      00235E 53 51 52 54 31 30       98         .ascii "SQRT10" 
      002364                         99 SQRT10:
      002364 1D 00 04         [ 2]  100     subw x,#2*CELLL
      002367 90 AE 59 98      [ 2]  101     ldw y,#22936 
      00236B EF 02            [ 2]  102     ldw (2,x),y 
      00236D 90 AE 1C 55      [ 2]  103     ldw y,#7253
      002371 FF               [ 2]  104     ldw (x),y 
      002372 81               [ 4]  105     ret 
                                    106 
                                    107 ;   12RT2 ( -- 26797 25293 )
                                    108 ; precision: 1.0e-9 
                                    109 ; used in music to compute well tempered scale
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      002373 23 5D                  110         .word LINK 
                           002375   111         LINK=. 
      002375 05                     112         .byte 5 
      002376 31 32 52 54 32         113         .ascii "12RT2"
      00237B                        114 RT12_2:
      00237B 1D 00 04         [ 2]  115     subw x,#2*CELLL 
      00237E 90 AE 68 AD      [ 2]  116     ldw y,#26797
      002382 EF 02            [ 2]  117     ldw (2,x),y 
      002384 90 AE 62 CD      [ 2]  118     ldw y,#25293
      002388 FF               [ 2]  119     ldw (x),y 
      002389 81               [ 4]  120     ret 
                                    121 
                                    122 ;   LOG2s ( -- 2040 11103 )
                                    123 ; log(2)/1.6384
                                    124 ; precision: 1.1e-8
      00238A 23 75                  125         .word LINK 
                           00238C   126         LINK=.
      00238C 05                     127         .byte 5 
      00238D 4C 4F 47 32 53         128         .ascii "LOG2S" 
      002392                        129 LOG2S:
      002392 1D 00 04         [ 2]  130     subw x,#2*CELLL
      002395 90 AE 07 F8      [ 2]  131     ldw y,#2040 
      002399 EF 02            [ 2]  132     ldw (2,x),y 
      00239B 90 AE 2B 5F      [ 2]  133     ldw y,#11103 
      00239F FF               [ 2]  134     ldw (x),y 
      0023A0 81               [ 4]  135     ret 
                                    136 
                                    137 ;   LN2 ( -- 485 11464 )
                                    138 ; ln(2)/16.384 
                                    139 ; precision: 1.0e-7 
      0023A1 23 8C                  140         .word LINK 
                           0023A3   141         LINK=.
      0023A3 04                     142         .byte 4 
      0023A4 4C 4E 32 53            143         .ascii "LN2S" 
      0023A8                        144 LN2S: 
      0023A8 1D 00 04         [ 2]  145     subw x,#2*CELLL
      0023AB 90 AE 01 E5      [ 2]  146     ldw y,#485
      0023AF EF 02            [ 2]  147     ldw (2,x),y 
      0023B1 90 AE 2C C8      [ 2]  148     ldw y,#11464 
      0023B5 FF               [ 2]  149     ldw (x),y 
      0023B6 81               [ 4]  150     ret 
                                    151 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



                                   4518 .endif
                           000001  4519 .if WANT_CONST_TABLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



                                   4520         .include "ctable.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;------------------------------
                                     22 ; words to create and read 
                                     23 ; constants tables in FLASH 
                                     24 ; and EEPROM
                                     25 ;------------------------------
                                     26 
                                     27 ;-----------------------------
                                     28 ; allocate space in CODE area 
                                     29 ; for constant table.
                                     30 ; CALLOT ( u -- ad )
                                     31 ; u  bytes to allocates 
                                     32 ; ad data address as double.
                                     33 ;-----------------------------
      0023B7 23 A3                   34     .word LINK 
                           0023B9    35     LINK=.
      0023B9 06                      36     .byte 6
      0023BA 43 41 4C 4C 4F 54       37     .ascii "CALLOT"
      0023C0                         38 CALLOT:
      0023C0 CD 07 86         [ 4]   39     CALL CPP
      0023C3 CD 06 21         [ 4]   40     CALL DUPP 
      0023C6 CD 04 E3         [ 4]   41     CALL AT 
      0023C9 CD 05 EA         [ 4]   42     CALL TOR 
      0023CC CD 0C 51         [ 4]   43     CALL PSTOR 
      0023CF CD 1C 95         [ 4]   44     CALL UPDATCP 
      0023D2 CD 05 34         [ 4]   45     CALL RFROM
      0023D5 CC 0B E1         [ 2]   46     JP ZERO 
                                     47 
                                     48 ;------------------------------
                                     49 ; create constants bytes table 
                                     50 ; in persistant memory
                                     51 ;  CTABLE ( n+ -- ad ; <string> )
                                     52 ; n+ bytes reserved 
                                     53 ;-----------------------------
      0023D8 23 B9                   54     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



                           0023DA    55     LINK=.
      0023DA 06                      56     .byte 6
      0023DB 43 54 41 42 4C 45       57     .ascii "CTABLE"
      0023E1                         58 CTABLE:
      0023E1 CD 23 C0         [ 4]   59     CALL CALLOT     
      0023E4 CC 19 28         [ 2]   60     JP DCONST 
                                     61      
                                     62 
                                     63 ;--------------------------------
                                     64 ; create constants words table 
                                     65 ; in persistant memory 
                                     66 ; WTABLE ( n+ -- ad ; <string> )
                                     67 ; n+  words reserved  
                                     68 ;--------------------------------
      0023E7 23 DA                   69     .word LINK 
                           0023E9    70     LINK=.
      0023E9 06                      71     .byte 6
      0023EA 57 54 41 42 4C 45       72     .ascii "WTABLE"
      0023F0                         73 WTABLE:
      0023F0 CD 0B 68         [ 4]   74     CALL CELLS  
      0023F3 CD 23 C0         [ 4]   75     CALL CALLOT 
      0023F6 CC 19 28         [ 2]   76     JP DCONST 
                                     77 
                                     78 ;---------------------------------
                                     79 ; stack an element of CTABLE 
                                     80 ; CTABL@ ( u ad -- c )
                                     81 ; u element order {0..size-1}
                                     82 ; a|ad table address 
                                     83 ;--------------------------------
      0023F9 23 E9                   84     .word LINK 
                           0023FB    85     LINK=.
      0023FB 06                      86     .byte 6
      0023FC 43 54 41 42 4C 40       87     .ascii "CTABL@" 
      002402                         88 CTAT:
      002402 CD 1B D8         [ 4]   89     call FPSTOR 
      002405 CD 1D 6A         [ 4]   90     call PTRPLUS 
      002408 CC 1D A7         [ 2]   91     jp EE_CREAD 
                                     92 
                                     93 ;---------------------------------
                                     94 ; stack an element of WTABLE 
                                     95 ; WTABL@ ( u ud -- w )
                                     96 ; u is element order {0..size-1}
                                     97 ; a|ud table address 
                                     98 ;----------------------------------
      00240B 23 FB                   99     .word LINK 
                           00240D   100     LINK=.
      00240D 06                     101     .byte 6
      00240E 57 54 41 42 4C 40      102     .ascii "WTABL@" 
      002414                        103 WTAT:
      002414 CD 1B D8         [ 4]  104     call FPSTOR 
      002417 CD 0B 68         [ 4]  105     call CELLS 
      00241A CD 1D 6A         [ 4]  106     call PTRPLUS 
      00241D CD 1D 85         [ 4]  107     call EE_READ 
      002420 81               [ 4]  108     ret 
                                    109 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



                                    110 ;--------------------------
                                    111 ; tool to initialize character table 
                                    112 ; CTINIT ( ad -- )
                                    113 ; ad is table address 
                                    114 ;--------------------------
      002421 24 0D                  115     .word LINK 
                           002423   116     LINK=.
      002423 06                     117     .byte 6 
      002424 43 54 49 4E 49 54      118     .ascii "CTINIT"
      00242A                        119 CTINIT:
      00242A CD 1B D8         [ 4]  120     CALL FPSTOR
      00242D CD 1D 16         [ 4]  121     CALL UNLOCK
      002430 CD 0B E1         [ 4]  122     CALL ZERO 
      002433 CD 0B 75         [ 4]  123 1$: CALL ONEP 
      002436 CD 06 21         [ 4]  124     CALL DUPP 
      002439 CD 24 86         [ 4]  125     CALL INTQ 
      00243C CD 04 98         [ 4]  126     CALL QBRAN 
      00243F 24 49                  127     .word 2$
      002441 CD 1D C1         [ 4]  128     call WR_BYTE 
      002444 CD 04 B4         [ 4]  129     CALL BRAN 
      002447 24 33                  130     .word 1$ 
      002449 CD 08 26         [ 4]  131 2$: CALL DDROP 
      00244C CD 1D 3E         [ 4]  132     CALL LOCK 
      00244F 81               [ 4]  133     ret 
                                    134 
                                    135 ;--------------------------
                                    136 ; tool to initialize word table 
                                    137 ; WTINIT ( ad -- )
                                    138 ; ad is table address 
                                    139 ;--------------------------
      002450 24 23                  140     .word LINK 
                           002452   141     LINK=.
      002452 06                     142     .byte 6 
      002453 57 54 49 4E 49 54      143     .ascii "WTINIT"
      002459                        144 WTINIT:
      002459 CD 1B D8         [ 4]  145     CALL FPSTOR
      00245C CD 1D 16         [ 4]  146     CALL UNLOCK
      00245F CD 0B E1         [ 4]  147     CALL ZERO 
      002462 CD 0B 75         [ 4]  148 1$: CALL ONEP 
      002465 CD 06 21         [ 4]  149     CALL DUPP
      002468 CD 24 86         [ 4]  150     CALL INTQ
      00246B CD 04 98         [ 4]  151     CALL QBRAN 
      00246E 24 78                  152     .word 2$
      002470 CD 1D E6         [ 4]  153     call WR_WORD 
      002473 CD 04 B4         [ 4]  154     CALL BRAN 
      002476 24 62                  155     .word 1$ 
      002478 CD 08 26         [ 4]  156 2$: CALL DDROP 
      00247B CD 1D 3E         [ 4]  157     CALL LOCK 
      00247E 81               [ 4]  158     ret 
                                    159 
                                    160 ;------------------------
                                    161 ; Prompted input for integer 
                                    162 ; display n+ in bracket and
                                    163 ; '?' 
                                    164 ; [N]? ( n+ -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



                                    165 ;------------------------
      00247F 24 52                  166     .word LINK 
                           002481   167     LINK=.
      002481 04                     168     .byte 4
      002482 5B 4E 5D 3F            169     .ascii "[N]?" 
      002486                        170 INTQ:
      002486 CD 0F 59         [ 4]  171     CALL CR 
      002489 CD 04 6F         [ 4]  172     call DOLIT 
      00248C 00 5B                  173     .word '[
      00248E CD 04 36         [ 4]  174     CALL EMIT 
      002491 CD 10 00         [ 4]  175     CALL DOT 
      002494 CD 0F 86         [ 4]  176     CALL  DOTQP
      002497 03                     177     .byte 3
      002498 5D 3F 20               178     .ascii "]? " 
      00249B CD 13 90         [ 4]  179     CALL QUERY 
      00249E CD 11 BB         [ 4]  180     call TOKEN 
      0024A1 CC 25 60         [ 2]  181     jp NUMBQ
                                    182 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



                                   4521 .endif
                           000001  4522 .if WANT_DOUBLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



                                   4523         .include "double.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;************************************
                                     21 ;    doubles integers library 
                                     22 ;    doubles are signed 32 bits 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26     .module DOUBLE 
                                     27 
                           000001    28     DVER_MAJOR=1 
                           000000    29     DVER_MINOR=0 
                                     30 
                                     31 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     32 ;  DBL-VER ( -- )
                                     33 ;  print library version 
                                     34 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0024A4                         35     _HEADER DBLVER,7,"DBL-VER"
      0024A4 24 81                    1         .word LINK 
                           0024A6     2         LINK=.
      0024A6 07                       3         .byte 7  
      0024A7 44 42 4C 2D 56 45 52     4         .ascii "DBL-VER"
      0024AE                          5         DBLVER:
      0024AE CD 0F 59         [ 4]   36     CALL CR 
      0024B1 CD 0F 86         [ 4]   37     CALL DOTQP 
      0024B4 18                      38     .byte  24 
      0024B5 64 6F 75 62 6C 65 20    39     .ascii "double integer library, "
             69 6E 74 65 67 65 72
             20 6C 69 62 72 61 72
             79 2C 20
      0024CD CD 1A D7         [ 4]   40     CALL PRT_LICENCE
      0024D0 CD 1A AF         [ 4]   41     CALL COPYRIGHT  
      0024D3                         42     _DOLIT DVER_MAJOR 
      0024D3 CD 04 6F         [ 4]    1     CALL DOLIT 
      0024D6 00 01                    2     .word DVER_MAJOR 
      0024D8                         43     _DOLIT DVER_MINOR  
      0024D8 CD 04 6F         [ 4]    1     CALL DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



      0024DB 00 00                    2     .word DVER_MINOR 
      0024DD CC 1A EB         [ 2]   44     JP PRINT_VERSION  
                                     45 
                                     46 
                                     47 ; check for negative sign 
                                     48 ; ajust pointer and cntr 
      0024E0                         49 nsign: ; addr cntr -- addr cntr f 
      0024E0 1D 00 02         [ 2]   50     SUBW X,#CELLL ; a cntr f 
      0024E3 90 93            [ 1]   51     LDW Y,X 
      0024E5 90 EE 04         [ 2]   52     LDW Y,(4,Y) ; addr 
      0024E8 90 F6            [ 1]   53     LD A,(Y) ; char=*addr  
      0024EA A1 2D            [ 1]   54     CP A,#'-' 
      0024EC 27 03            [ 1]   55     JREQ NEG_SIGN 
      0024EE 4F               [ 1]   56     CLR A  
      0024EF 20 18            [ 2]   57     JRA STO_SIGN 
      0024F1                         58 NEG_SIGN:
                                     59 ; increment addr 
      0024F1 90 93            [ 1]   60     LDW Y,X 
      0024F3 90 EE 04         [ 2]   61     LDW Y,(4,Y)
      0024F6 72 A9 00 01      [ 2]   62     ADDW Y,#1   ;addr+1 
      0024FA EF 04            [ 2]   63     LDW (4,X),Y 
                                     64 ; decrement cntr 
      0024FC 90 93            [ 1]   65     LDW Y,X
      0024FE 90 EE 02         [ 2]   66     LDW Y,(2,Y)
      002501 72 A2 00 01      [ 2]   67     SUBW Y,#1   ;cntr-1 
      002505 EF 02            [ 2]   68     LDW (2,X),Y 
      002507 A6 FF            [ 1]   69     LD A,#0XFF
      002509                         70 STO_SIGN:   
      002509 F7               [ 1]   71     LD (X),A 
      00250A E7 01            [ 1]   72     LD (1,X),A 
      00250C 81               [ 4]   73     RET 
                                     74 
                                     75 
                                     76 ; get all digits in row 
                                     77 ; stop at first non-digit or end of string 
                                     78 ; ( dlo dhi a cntr -- dlo dhi [ a+ cntr- | a+ 0 ] )
      00250D                         79 parse_digits:
      00250D                         80 1$:
      00250D CD 06 21         [ 4]   81     CALL DUPP 
      002510                         82     _QBRAN 5$ 
      002510 CD 04 98         [ 4]    1     CALL QBRAN
      002513 25 55                    2     .word 5$
      002515 CD 05 EA         [ 4]   83     CALL TOR   ; dlo dhi a R: cntr 
      002518 CD 0C A7         [ 4]   84     CALL COUNT ; dlo dhi a+ char 
      00251B CD 06 E7         [ 4]   85     CALL BASE 
      00251E CD 04 E3         [ 4]   86     CALL AT 
      002521 CD 0E 9F         [ 4]   87     CALL DIGTQ 
      002524                         88     _QBRAN 4$ ; not a digit
      002524 CD 04 98         [ 4]    1     CALL QBRAN
      002527 25 4C                    2     .word 4$
      002529 CD 28 93         [ 4]   89     CALL DTOR  ; dlo dhi R: cntr a+ c  
      00252C CD 06 E7         [ 4]   90     CALL BASE 
      00252F CD 04 E3         [ 4]   91     CALL AT 
      002532 CD 27 1E         [ 4]   92     CALL DSSTAR
      002535 CD 05 34         [ 4]   93     CALL RFROM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



      002538 CD 0B E1         [ 4]   94     CALL ZERO 
      00253B CD 2B 56         [ 4]   95     CALL DPLUS 
      00253E CD 05 34         [ 4]   96     CALL RFROM  ; dlo dhi a+ 
      002541 CD 05 34         [ 4]   97     CALL RFROM ; dlo dhi a+ cntr 
      002544 CD 0B 82         [ 4]   98     CALL ONEM 
      002547                         99     _BRAN 1$ ; dlo dhi a+ R: 
      002547 CD 04 B4         [ 4]    1     CALL BRAN 
      00254A 25 0D                    2     .word 1$ 
      00254C CD 06 17         [ 4]  100 4$: CALL DROP  ; dlo dhi a+ 
      00254F CD 0B 82         [ 4]  101     CALL ONEM  ; unget char 
      002552 CD 05 34         [ 4]  102     CALL RFROM ; dlo dhi a+ cntr-
      002555                        103 5$:
      002555 81               [ 4]  104     RET 
                                    105 
                                    106 
                                    107 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    108 ;   NUMBER? (a -- s -1 |d -2 | a F )
                                    109 ;   convert string to integer 
                                    110 ;   double begin with '#' 
                                    111 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002556                        112     _HEADER NUMBQ,7,"NUMBER?"
      002556 24 A6                    1         .word LINK 
                           002558     2         LINK=.
      002558 07                       3         .byte 7  
      002559 4E 55 4D 42 45 52 3F     4         .ascii "NUMBER?"
      002560                          5         NUMBQ:
                                    113 ; save current base value 
      002560 CD 06 E7         [ 4]  114     CALL BASE 
      002563 CD 04 E3         [ 4]  115     CALL AT 
      002566 CD 05 EA         [ 4]  116     CALL TOR 
                                    117 ; initialize integer to 0     
      002569 1D 00 04         [ 2]  118     SUBW X,#4 
      00256C 90 5F            [ 1]  119     CLRW Y 
      00256E FF               [ 2]  120     LDW (X),Y 
      00256F EF 02            [ 2]  121     LDW (2,X),Y ; a 0 0 R: base  
      002571                        122     _DOLIT 2 
      002571 CD 04 6F         [ 4]    1     CALL DOLIT 
      002574 00 02                    2     .word 2 
      002576 CD 0C 3A         [ 4]  123     CALL PICK  ; a 0 0 a R: base    
      002579 CD 0C A7         [ 4]  124     CALL COUNT ; a 0 0 a+ n 
                                    125 ; check for '#' double integer 
      00257C CD 06 49         [ 4]  126     CALL OVER  ; a 0 0 a+ n a+
      00257F CD 05 01         [ 4]  127     CALL CAT   ; a 0 0 a+ n c 
      002582                        128     _DOLIT '#' ; a 0 0 a+ n c '#' 
      002582 CD 04 6F         [ 4]    1     CALL DOLIT 
      002585 00 23                    2     .word '#' 
      002587 CD 08 F8         [ 4]  129     CALL EQUAL 
      00258A CD 05 EA         [ 4]  130     CALL TOR   ; a 0 0 a+ n R: base d? 
      00258D CD 05 45         [ 4]  131     CALL RAT   ; a 0 0 a+ n d? R: base d?
      002590                        132     _QBRAN NUMQ0
      002590 CD 04 98         [ 4]    1     CALL QBRAN
      002593 25 A1                    2     .word NUMQ0
                                    133 ; update a and count
      002595 CD 06 31         [ 4]  134     CALL SWAPP 
      002598 CD 0B 75         [ 4]  135     CALL ONEP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



      00259B CD 06 31         [ 4]  136     CALL SWAPP 
      00259E CD 0B 82         [ 4]  137     CALL ONEM  ; a 0 0 a+ n- R: base d?
                                    138 ; check for '$' hexadecimal  
      0025A1                        139 NUMQ0: 
      0025A1 CD 06 49         [ 4]  140     CALL OVER   
      0025A4 CD 05 01         [ 4]  141     CALL CAT   
      0025A7                        142     _DOLIT '$'
      0025A7 CD 04 6F         [ 4]    1     CALL DOLIT 
      0025AA 00 24                    2     .word '$' 
      0025AC CD 08 F8         [ 4]  143     CALL EQUAL ; a 0 0 a+ n- f  
      0025AF                        144     _QBRAN NUMQ1 
      0025AF CD 04 98         [ 4]    1     CALL QBRAN
      0025B2 25 C3                    2     .word NUMQ1
      0025B4 CD 0E 76         [ 4]  145     CALL HEX   ; switch to hexadecimal base 
                                    146 ; update a and count 
      0025B7 CD 06 31         [ 4]  147     CALL SWAPP 
      0025BA CD 0B 75         [ 4]  148     CALL ONEP 
      0025BD CD 06 31         [ 4]  149     CALL SWAPP
      0025C0 CD 0B 82         [ 4]  150     CALL ONEM ; a 0 0 a+ n-  R: base d?
                                    151 ; check for minus sign 
      0025C3                        152 NUMQ1: 
      0025C3 CD 24 E0         [ 4]  153     CALL nsign 
      0025C6 CD 05 EA         [ 4]  154     CALL TOR ; R: base d? sign  
                                    155 ; check for end of string     
      0025C9 CD 07 D4         [ 4]  156     CALL QDUP    ; a dlo dhi a+ cntr R: base d? sign 
      0025CC                        157     _QBRAN NUMQ4 ; yes , not a number 
      0025CC CD 04 98         [ 4]    1     CALL QBRAN
      0025CF 26 0E                    2     .word NUMQ4
      0025D1 CD 25 0D         [ 4]  158     CALL parse_digits
      0025D4 CD 07 D4         [ 4]  159     CALL QDUP 
      0025D7 CD 06 6A         [ 4]  160     CALL ZEQUAL  
      0025DA                        161     _QBRAN NUMQ4 ; error not end of string  ( a dlo dhi a+ R: base d? sign )
      0025DA CD 04 98         [ 4]    1     CALL QBRAN
      0025DD 26 0E                    2     .word NUMQ4
      0025DF CD 06 17         [ 4]  162     CALL DROP  ; a dlo dhi 
      0025E2 CD 05 34         [ 4]  163     CALL RFROM  ; a dlo dhi sign 
      0025E5                        164     _QBRAN NUMQ3
      0025E5 CD 04 98         [ 4]    1     CALL QBRAN
      0025E8 25 ED                    2     .word NUMQ3
      0025EA CD 08 96         [ 4]  165     CALL DNEGA
      0025ED                        166 NUMQ3: 
      0025ED CD 07 E5         [ 4]  167     CALL ROT ; dlo dhi a  R: base d?
      0025F0 CD 06 17         [ 4]  168     CALL DROP
      0025F3                        169     _DOLIT -2  ; double return -2 flag 
      0025F3 CD 04 6F         [ 4]    1     CALL DOLIT 
      0025F6 FF FE                    2     .word -2 
      0025F8 CD 05 34         [ 4]  170     CALL RFROM ; dlo dhi d? R: base 
      0025FB                        171     _TBRAN NUMQ8 
      0025FB CD 04 A6         [ 4]    1     CALL TBRAN 
      0025FE 26 17                    2     .word NUMQ8 
      002600 CD 06 31         [ 4]  172     CALL SWAPP 
      002603 CD 06 17         [ 4]  173     CALL DROP
      002606 CD 0B 75         [ 4]  174     CALL ONEP   ; single return -1 flag   
      002609                        175     _BRAN NUMQ8
      002609 CD 04 B4         [ 4]    1     CALL BRAN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



      00260C 26 17                    2     .word NUMQ8 
      00260E                        176 NUMQ4: ; not end of string error , ( a dlo dhi a+ cntr R: base d? sign )
                           000001   177 .if WANT_FLOAT
      00260E CD 05 34         [ 4]  178     CALL RFROM ; sign 
      002611 CD 05 34         [ 4]  179     CALL RFROM ; d? 
      002614 CD 2F 31         [ 4]  180     CALL FLOATQ ; ( a dlo dhi a+ cntr sign d? )    
                           000000   181 .else 
                                    182     ADDW X,#4 ; drop dhi a+  , ( a dlo R: base d? sign ) 
                                    183     ADDW SP,#4 ; drop d? sign  R: base 
                                    184     CLRW Y 
                                    185     LDW (X),Y ; dlo replaced by 0 ( -- a 0 R: base ) 
                                    186 .endif 
                                    187 ; restore original base value     
      002617                        188 NUMQ8: 
      002617 CD 05 34         [ 4]  189     CALL RFROM 
      00261A CD 06 E7         [ 4]  190     CALL BASE 
      00261D CD 04 D1         [ 4]  191     CALL STORE 
      002620 81               [ 4]  192     RET 
                                    193 
                                    194 
                                    195 
                                    196 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    197 ;   DABS ( d -- d )
                                    198 ;   absolute value of double
                                    199 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002621                        200     _HEADER DABS,4,"DABS"
      002621 25 58                    1         .word LINK 
                           002623     2         LINK=.
      002623 04                       3         .byte 4  
      002624 44 41 42 53              4         .ascii "DABS"
      002628                          5         DABS:
      002628 F6               [ 1]  201     LD A,(X) 
      002629 A4 80            [ 1]  202     AND A,#0X80 
      00262B 27 03            [ 1]  203     JREQ DABS1 
      00262D CD 08 96         [ 4]  204     CALL DNEGA 
      002630                        205 DABS1:
      002630 81               [ 4]  206     RET 
                                    207 
                                    208 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    209 ;  DSIGN ( d -- d f )
                                    210 ;  sign of double 
                                    211 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002631                        212     _HEADER DSIGN,5,"DSIGN"
      002631 26 23                    1         .word LINK 
                           002633     2         LINK=.
      002633 05                       3         .byte 5  
      002634 44 53 49 47 4E           4         .ascii "DSIGN"
      002639                          5         DSIGN:
      002639 A6 00            [ 1]  213     LD A,#0 
      00263B 90 93            [ 1]  214     LDW Y,X 
      00263D 90 FE            [ 2]  215     LDW Y,(Y)
      00263F 2A 02            [ 1]  216     JRPL DSIGN1
      002641 A6 FF            [ 1]  217     LD A,#0XFF 
      002643                        218 DSIGN1:
      002643 1D 00 02         [ 2]  219     SUBW X,#2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      002646 F7               [ 1]  220     LD (X),A 
      002647 E7 01            [ 1]  221     LD (1,X),A 
      002649 81               [ 4]  222     RET 
                                    223 
                                    224 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    225 ;   DS/MOD ( ud us - ur qud )
                                    226 ;   unsigned divide double by single 
                                    227 ;   return double quotient 
                                    228 ;   and single remainder 
                                    229 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00264A                        230     _HEADER DSLMOD,6,"DS/MOD"
      00264A 26 33                    1         .word LINK 
                           00264C     2         LINK=.
      00264C 06                       3         .byte 6  
      00264D 44 53 2F 4D 4F 44        4         .ascii "DS/MOD"
      002653                          5         DSLMOD:
      002653 90 93            [ 1]  231         LDW     Y,X             ; stack pointer to Y
      002655 FE               [ 2]  232         LDW     X,(X)           ; un
      002656 BF 26            [ 2]  233         LDW     YTEMP,X         ; save un
      002658 93               [ 1]  234         LDW     X,Y
      002659 89               [ 2]  235         PUSHW   X               ; save stack pointer
      00265A 90 89            [ 2]  236         PUSHW   Y 
      00265C EE 02            [ 2]  237         LDW     X,(2,X)           ; X=udh
      00265E 90 BE 26         [ 2]  238         LDW     Y,YTEMP         ; divisor 
      002661 65               [ 2]  239         DIVW    X,Y 
      002662 BF 24            [ 2]  240         LDW     XTEMP,X         ; QUOTIENT hi 
      002664 93               [ 1]  241         LDW     X,Y             ; remainder in X 
      002665 90 85            [ 2]  242         POPW    Y 
      002667 90 EE 04         [ 2]  243         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      00266A A6 10            [ 1]  244         LD      A,#16           ; loop count
      00266C 90 58            [ 2]  245         SLLW    Y               ; udl shift udl into udh
      00266E                        246 DSLMOD3:
      00266E 59               [ 2]  247         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      00266F 25 04            [ 1]  248         JRC     DSLMODa         ; if carry out of rotate
      002671 B3 26            [ 2]  249         CPW     X,YTEMP         ; compare udh to un
      002673 25 05            [ 1]  250         JRULT   DSLMOD4         ; can't subtract
      002675                        251 DSLMODa:
      002675 72 B0 00 26      [ 2]  252         SUBW    X,YTEMP         ; can subtract
      002679 98               [ 1]  253         RCF
      00267A                        254 DSLMOD4:
      00267A 8C               [ 1]  255         CCF                     ; quotient bit
      00267B 90 59            [ 2]  256         RLCW    Y               ; rotate into quotient, rotate out udl
      00267D 4A               [ 1]  257         DEC     A               ; repeat
      00267E 26 EE            [ 1]  258         JRNE    DSLMOD3           ; if A == 0
      002680                        259 DSLMODb:
      002680 BF 26            [ 2]  260         LDW     YTEMP,X         ; done, save remainder
      002682 85               [ 2]  261         POPW    X               ; restore stack pointer
      002683 EF 02            [ 2]  262         LDW     (2,X),Y           ; save quotient low 
      002685 90 BE 24         [ 2]  263         LDW     Y,XTEMP         ; quotient hi 
      002688 FF               [ 2]  264         LDW     (X),Y           ; save quotient hi 
      002689 90 BE 26         [ 2]  265         LDW     Y,YTEMP         ; remainder onto stack
      00268C EF 04            [ 2]  266         LDW     (4,X),Y
      00268E 81               [ 4]  267         RET 
                                    268 
                                    269 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



                                    270 ;   D# ( d -- d )
                                    271 ;   extract least digit 
                                    272 ;   from double integer 
                                    273 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00268F                        274     _HEADER DDIG,2,"D#"
      00268F 26 4C                    1         .word LINK 
                           002691     2         LINK=.
      002691 02                       3         .byte 2  
      002692 44 23                    4         .ascii "D#"
      002694                          5         DDIG:
      002694 CD 06 E7         [ 4]  275     CALL BASE 
      002697 CD 04 E3         [ 4]  276     CALL AT 
      00269A CD 26 53         [ 4]  277     CALL DSLMOD
      00269D CD 07 E5         [ 4]  278     CALL ROT   
      0026A0 CD 0D 9F         [ 4]  279     CALL DIGIT 
      0026A3 CD 0D EB         [ 4]  280     CALL HOLD 
      0026A6 81               [ 4]  281     RET 
                                    282 
                                    283 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    284 ;    D#S ( d -- s )
                                    285 ;   extract digit from double 
                                    286 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026A7                        287     _HEADER DDIGS,3,"D#S"
      0026A7 26 91                    1         .word LINK 
                           0026A9     2         LINK=.
      0026A9 03                       3         .byte 3  
      0026AA 44 23 53                 4         .ascii "D#S"
      0026AD                          5         DDIGS:
      0026AD CD 26 94         [ 4]  288     CALL    DDIG 
      0026B0 CD 08 31         [ 4]  289     CALL    DDUP 
      0026B3 CD 28 19         [ 4]  290     CALL    DZEQUAL
      0026B6                        291     _QBRAN  DDIGS 
      0026B6 CD 04 98         [ 4]    1     CALL QBRAN
      0026B9 26 AD                    2     .word DDIGS
      0026BB CD 06 17         [ 4]  292     CALL    DROP 
      0026BE 81               [ 4]  293     RET 
                                    294 
                                    295 
                                    296 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    297 ;   D. ( d -- )
                                    298 ;   display double integer 
                                    299 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026BF                        300     _HEADER DDOT,2,"D."
      0026BF 26 A9                    1         .word LINK 
                           0026C1     2         LINK=.
      0026C1 02                       3         .byte 2  
      0026C2 44 2E                    4         .ascii "D."
      0026C4                          5         DDOT:
      0026C4 CD 0F 17         [ 4]  301     CALL SPACE 
      0026C7 CD 26 39         [ 4]  302     CALL DSIGN 
      0026CA CD 05 EA         [ 4]  303     CALL TOR
      0026CD CD 05 45         [ 4]  304     CALL RAT 
      0026D0                        305     _QBRAN DDOT0
      0026D0 CD 04 98         [ 4]    1     CALL QBRAN
      0026D3 26 D8                    2     .word DDOT0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



      0026D5 CD 08 96         [ 4]  306     CALL DNEGA 
      0026D8                        307 DDOT0:     
      0026D8 CD 0D DB         [ 4]  308     CALL BDIGS 
      0026DB CD 26 AD         [ 4]  309     CALL DDIGS 
      0026DE CD 05 34         [ 4]  310     CALL RFROM 
      0026E1                        311     _QBRAN DDOT1 
      0026E1 CD 04 98         [ 4]    1     CALL QBRAN
      0026E4 26 EE                    2     .word DDOT1
      0026E6                        312     _DOLIT '-' 
      0026E6 CD 04 6F         [ 4]    1     CALL DOLIT 
      0026E9 00 2D                    2     .word '-' 
      0026EB CD 0D EB         [ 4]  313     CALL HOLD 
      0026EE                        314 DDOT1: 
      0026EE CD 0E 40         [ 4]  315     CALL EDIGS 
      0026F1 CD 0F 41         [ 4]  316     CALL TYPES     
      0026F4 81               [ 4]  317     RET 
                                    318 
                                    319 
                                    320 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    321 ;  UDS* ( ud u -- ud*u )
                                    322 ;  uint32*uint16 
                                    323 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026F5                        324     _HEADER UDSSTAR,4,"UDS*"
      0026F5 26 C1                    1         .word LINK 
                           0026F7     2         LINK=.
      0026F7 04                       3         .byte 4  
      0026F8 55 44 53 2A              4         .ascii "UDS*"
      0026FC                          5         UDSSTAR:
      0026FC CD 05 EA         [ 4]  325     CALL TOR 
      0026FF CD 06 31         [ 4]  326     CALL SWAPP 
      002702 CD 05 45         [ 4]  327     CALL RAT 
      002705 CD 0A AA         [ 4]  328     CALL UMSTA ; udlo*u 
      002708 CD 07 E5         [ 4]  329     CALL ROT 
      00270B CD 05 34         [ 4]  330     CALL RFROM 
      00270E CD 0A AA         [ 4]  331     CALL UMSTA ; udhi*u 
      002711 CD 06 17         [ 4]  332     CALL DROP  ; drop overflow 
      002714 CD 08 46         [ 4]  333     CALL PLUS  ; udlo*u+(uhi*u<<16)
      002717 81               [ 4]  334     RET 
                                    335 
                                    336 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    337 ; multiply double by unsigned single 
                                    338 ; return double 
                                    339 ;  ( d u -- d )
                                    340 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002718                        341     _HEADER DSSTAR,3,"DS*"
      002718 26 F7                    1         .word LINK 
                           00271A     2         LINK=.
      00271A 03                       3         .byte 3  
      00271B 44 53 2A                 4         .ascii "DS*"
      00271E                          5         DSSTAR:
                                    342 ;DSSTAR:
      00271E CD 05 EA         [ 4]  343     CALL TOR
      002721 CD 26 39         [ 4]  344     CALL DSIGN 
      002724 CD 08 04         [ 4]  345     CALL NROT 
      002727 CD 26 28         [ 4]  346     CALL DABS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      00272A CD 05 34         [ 4]  347     CALL RFROM 
      00272D CD 26 FC         [ 4]  348     CALL UDSSTAR  
      002730 CD 07 E5         [ 4]  349     CALL ROT 
      002733                        350     _QBRAN DSSTAR3 
      002733 CD 04 98         [ 4]    1     CALL QBRAN
      002736 27 3B                    2     .word DSSTAR3
      002738 CD 08 96         [ 4]  351     CALL DNEGA 
      00273B                        352 DSSTAR3:
      00273B 81               [ 4]  353     RET 
                                    354 
                                    355 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    356 ;  2SWAP ( d1 d2 -- d2 d1 )
                                    357 ;  swap double 
                                    358 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00273C                        359     _HEADER DSWAP,5,"2SWAP"
      00273C 27 1A                    1         .word LINK 
                           00273E     2         LINK=.
      00273E 05                       3         .byte 5  
      00273F 32 53 57 41 50           4         .ascii "2SWAP"
      002744                          5         DSWAP:
      002744 90 93            [ 1]  360     LDW Y,X 
      002746 90 FE            [ 2]  361     LDW Y,(Y)
      002748 90 BF 26         [ 2]  362     LDW YTEMP,Y ; d2 hi 
      00274B 90 93            [ 1]  363     LDW Y,X 
      00274D 90 EE 02         [ 2]  364     LDW Y,(2,Y)
      002750 90 BF 24         [ 2]  365     LDW XTEMP,Y  ; d2 lo 
      002753 90 93            [ 1]  366     LDW Y,X 
      002755 90 EE 04         [ 2]  367     LDW Y,(4,Y)  ; d1 hi 
      002758 FF               [ 2]  368     LDW (X),Y 
      002759 90 93            [ 1]  369     LDW Y,X
      00275B 90 EE 06         [ 2]  370     LDW Y,(6,Y)  ; d1 lo 
      00275E EF 02            [ 2]  371     LDW (2,X),Y
      002760 90 BE 26         [ 2]  372     LDW Y,YTEMP  
      002763 EF 04            [ 2]  373     LDW (4,X),Y 
      002765 90 BE 24         [ 2]  374     LDW Y,XTEMP 
      002768 EF 06            [ 2]  375     LDW (6,X),Y 
      00276A 81               [ 4]  376     RET 
                                    377 
                                    378 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    379 ;    DCLZ ( d -- u )
                                    380 ;    double count leading zeros
                                    381 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00276B                        382     _HEADER DCLZ,4,"DCLZ"
      00276B 27 3E                    1         .word LINK 
                           00276D     2         LINK=.
      00276D 04                       3         .byte 4  
      00276E 44 43 4C 5A              4         .ascii "DCLZ"
      002772                          5         DCLZ:
      002772 4F               [ 1]  383     CLR A 
      002773 90 93            [ 1]  384     LDW Y,X 
      002775 90 FE            [ 2]  385     LDW Y,(Y)
      002777 2B 18            [ 1]  386     JRMI DCLZ8 ; no leading zero 
      002779 27 09            [ 1]  387     JREQ DCLZ4 ; >=16 
      00277B                        388 DCLZ1: ; <16
      00277B 90 58            [ 2]  389     SLLW Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



      00277D 4C               [ 1]  390     INC A 
      00277E 90 5D            [ 2]  391     TNZW Y 
      002780 2B 0F            [ 1]  392     JRMI DCLZ8
      002782 20 F7            [ 2]  393     JRA DCLZ1 
      002784                        394 DCLZ4: ; >=16 
      002784 A6 10            [ 1]  395     LD A,#16 
      002786 90 93            [ 1]  396     LDW Y,X 
      002788 90 EE 02         [ 2]  397     LDW Y,(2,Y)
      00278B 2B 04            [ 1]  398     JRMI DCLZ8 
      00278D 26 EC            [ 1]  399     JRNE DCLZ1 
      00278F AB 10            [ 1]  400     ADD A,#16
      002791                        401 DCLZ8: 
      002791 1C 00 02         [ 2]  402     ADDW X,#2 
      002794 90 5F            [ 1]  403     CLRW Y 
      002796 90 97            [ 1]  404     LD YL,A 
      002798 FF               [ 2]  405     LDW (X),Y 
      002799 81               [ 4]  406     RET 
                                    407 
                                    408 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    409 ;   <2ROT ( d1 d2 d3 -- d3 d1 d2 )
                                    410 ;   rotate left doubles 
                                    411 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00279A                        412     _HEADER NDROT,5,"<2ROT"
      00279A 27 6D                    1         .word LINK 
                           00279C     2         LINK=.
      00279C 05                       3         .byte 5  
      00279D 3C 32 52 4F 54           4         .ascii "<2ROT"
      0027A2                          5         NDROT:
                                    413 ; save d3 in temp 
      0027A2 90 93            [ 1]  414     LDW Y,X 
      0027A4 90 FE            [ 2]  415     LDW Y,(Y)
      0027A6 90 BF 26         [ 2]  416     LDW YTEMP,Y  ; d3 hi 
      0027A9 90 93            [ 1]  417     LDW Y,X 
      0027AB 90 EE 02         [ 2]  418     LDW Y,(2,Y)
      0027AE 90 BF 24         [ 2]  419     LDW XTEMP,Y  ; d3 lo 
                                    420 ; put d2 in d1 slot 
      0027B1 90 93            [ 1]  421     LDW Y,X 
      0027B3 90 EE 04         [ 2]  422     LDW Y,(4,Y) 
      0027B6 FF               [ 2]  423     LDW (X),Y   ; d2 hi 
      0027B7 90 93            [ 1]  424     LDW Y,X 
      0027B9 90 EE 06         [ 2]  425     LDW Y,(6,Y)
      0027BC EF 02            [ 2]  426     LDW (2,X),Y ; d2 lo
                                    427 ; put d1 in d2 slot 
      0027BE 90 93            [ 1]  428     LDW Y,X 
      0027C0 90 EE 08         [ 2]  429     LDW Y,(8,Y) 
      0027C3 EF 04            [ 2]  430     LDW (4,X),Y ; d1 hi 
      0027C5 90 93            [ 1]  431     LDW Y,X 
      0027C7 90 EE 0A         [ 2]  432     LDW Y,(10,Y)
      0027CA EF 06            [ 2]  433     LDW (6,X),Y  ; d1 lo 
                                    434 ; put d3 in d1 slot 
      0027CC 90 BE 26         [ 2]  435     LDW Y,YTEMP 
      0027CF EF 08            [ 2]  436     LDW (8,X),Y  ; d3 hi 
      0027D1 90 BE 24         [ 2]  437     LDW Y,XTEMP 
      0027D4 EF 0A            [ 2]  438     LDW (10,X),Y  ; d3 lo 
      0027D6 81               [ 4]  439     RET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



                                    440 
                                    441 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    442 ;   2ROT ( d1 d2 d3 -- d2 d3 d1 )
                                    443 ;   rotate right doubles 
                                    444 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027D7                        445     _HEADER DROT,4,"2ROT"
      0027D7 27 9C                    1         .word LINK 
                           0027D9     2         LINK=.
      0027D9 04                       3         .byte 4  
      0027DA 32 52 4F 54              4         .ascii "2ROT"
      0027DE                          5         DROT:
                                    446 ; save d3 in temp 
      0027DE 90 93            [ 1]  447     LDW Y,X 
      0027E0 90 FE            [ 2]  448     LDW Y,(Y)
      0027E2 90 BF 26         [ 2]  449     LDW YTEMP,Y ; d3 hi 
      0027E5 90 93            [ 1]  450     LDW Y,X 
      0027E7 90 EE 02         [ 2]  451     LDW Y,(2,Y)
      0027EA 90 BF 24         [ 2]  452     LDW XTEMP,Y ; d3 lo 
                                    453 ; put d1 in d3 slot 
      0027ED 90 93            [ 1]  454     LDW Y,X 
      0027EF 90 EE 08         [ 2]  455     LDW Y,(8,Y)
      0027F2 FF               [ 2]  456     LDW (X),Y  ; d1 hi 
      0027F3 90 93            [ 1]  457     LDW Y,X 
      0027F5 90 EE 0A         [ 2]  458     LDW Y,(10,Y) 
      0027F8 EF 02            [ 2]  459     LDW (2,X),Y ; d1 lo 
                                    460 ; put d2 in d1 slot 
      0027FA 90 93            [ 1]  461     LDW Y,X 
      0027FC 90 EE 04         [ 2]  462     LDW Y,(4,Y) ; d2 hi 
      0027FF EF 08            [ 2]  463     LDW (8,X),Y 
      002801 90 93            [ 1]  464     LDW Y,X 
      002803 90 EE 06         [ 2]  465     LDW Y,(6,Y) ; d2 lo 
      002806 EF 0A            [ 2]  466     LDW (10,X),Y 
                                    467 ; put d3 in d2 slot 
      002808 90 BE 26         [ 2]  468     LDW Y,YTEMP 
      00280B EF 04            [ 2]  469     LDW (4,X),Y 
      00280D 90 BE 24         [ 2]  470     LDW Y,XTEMP 
      002810 EF 06            [ 2]  471     LDW (6,X),Y 
      002812 81               [ 4]  472     RET 
                                    473 
                                    474 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    475 ;    D0= ( d -- 0|-1 )
                                    476 ;    check if double is 0 
                                    477 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002813                        478     _HEADER DZEQUAL,3,"D0="
      002813 27 D9                    1         .word LINK 
                           002815     2         LINK=.
      002815 03                       3         .byte 3  
      002816 44 30 3D                 4         .ascii "D0="
      002819                          5         DZEQUAL:
      002819 4F               [ 1]  479     CLR A  
      00281A 90 93            [ 1]  480     LDW Y,X 
      00281C 90 FE            [ 2]  481     LDW Y,(Y)
      00281E 26 09            [ 1]  482     JRNE ZEQ1 
      002820 90 93            [ 1]  483     LDW Y,X 
      002822 90 EE 02         [ 2]  484     LDW Y,(2,Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



      002825 26 02            [ 1]  485     JRNE ZEQ1 
      002827 A6 FF            [ 1]  486     LD A,#0xFF
      002829                        487 ZEQ1:
      002829 1C 00 02         [ 2]  488     ADDW X,#CELLL 
      00282C F7               [ 1]  489     LD (X),A
      00282D E7 01            [ 1]  490     LD (1,X),A
      00282F 81               [ 4]  491 	RET     
                                    492 
                                    493 
                                    494 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    495 ;   D= ( d1 d2 -- f )
                                    496 ;   d1==d2?
                                    497 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002830                        498     _HEADER DEQUAL,2,"D="
      002830 28 15                    1         .word LINK 
                           002832     2         LINK=.
      002832 02                       3         .byte 2  
      002833 44 3D                    4         .ascii "D="
      002835                          5         DEQUAL:
      002835 A6 00            [ 1]  499     LD A,#0 
      002837 90 93            [ 1]  500     LDW Y,X 
      002839 90 FE            [ 2]  501     LDW Y,(Y)
      00283B E3 04            [ 2]  502     CPW Y,(4,X)
      00283D 26 0B            [ 1]  503     JRNE DEQU4 
      00283F 90 93            [ 1]  504     LDW Y,X 
      002841 90 EE 02         [ 2]  505     LDW Y,(2,Y)
      002844 E3 06            [ 2]  506     CPW Y,(6,X)
      002846 26 02            [ 1]  507     JRNE DEQU4 
      002848 A6 FF            [ 1]  508     LD A,#0XFF
      00284A                        509 DEQU4:
      00284A 1C 00 06         [ 2]  510     ADDW X,#6
      00284D F7               [ 1]  511     LD (X),A 
      00284E E7 01            [ 1]  512     LD (1,X),A 
      002850 81               [ 4]  513     RET 
                                    514 
                                    515 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    516 ;   D> ( d1 d2 -- f )
                                    517 ;   d1>d2?
                                    518 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002851                        519     _HEADER DGREAT,2,"D>"
      002851 28 32                    1         .word LINK 
                           002853     2         LINK=.
      002853 02                       3         .byte 2  
      002854 44 3E                    4         .ascii "D>"
      002856                          5         DGREAT:
      002856 CD 27 44         [ 4]  520     CALL DSWAP 
      002859 CC 28 61         [ 2]  521     JP DLESS 
                                    522 
                                    523 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    524 ;   D< ( d1 d2 -- f )
                                    525 ;   d1<d2? 
                                    526 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00285C                        527     _HEADER DLESS,2,"D<"
      00285C 28 53                    1         .word LINK 
                           00285E     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



      00285E 02                       3         .byte 2  
      00285F 44 3C                    4         .ascii "D<"
      002861                          5         DLESS:
      002861 CD 2B 88         [ 4]  528     CALL DSUB
      002864 CD 0B E1         [ 4]  529     CALL ZERO
      002867 CD 08 04         [ 4]  530     CALL NROT  
      00286A CD 28 7C         [ 4]  531     CALL DZLESS 
      00286D                        532     _QBRAN DLESS4
      00286D CD 04 98         [ 4]    1     CALL QBRAN
      002870 28 75                    2     .word DLESS4
      002872 CD 08 73         [ 4]  533     CALL INVER  
      002875                        534 DLESS4:
      002875 81               [ 4]  535     RET
                                    536 
                                    537 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    538 ;  D0< ( d -- f )
                                    539 ;  d<0? 
                                    540 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002876                        541     _HEADER DZLESS,3,"D0<"
      002876 28 5E                    1         .word LINK 
                           002878     2         LINK=.
      002878 03                       3         .byte 3  
      002879 44 30 3C                 4         .ascii "D0<"
      00287C                          5         DZLESS:
      00287C A6 00            [ 1]  542     LD A,#0 
      00287E 90 93            [ 1]  543     LDW Y,X 
      002880 90 FE            [ 2]  544     LDW Y,(Y)
      002882 2A 02            [ 1]  545     JRPL DZLESS1 
      002884 A6 FF            [ 1]  546     LD A,#0XFF 
      002886                        547 DZLESS1:
      002886 1C 00 02         [ 2]  548     ADDW X,#CELLL 
      002889 F7               [ 1]  549     LD (X),A 
      00288A E7 01            [ 1]  550     LD (1,X),A    
      00288C 81               [ 4]  551     RET 
                                    552 
                                    553 
                                    554 
                                    555 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    556 ;   2>R ( d -- R: d )
                                    557 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00288D                        558     _HEADER DTOR,3,"2>R"
      00288D 28 78                    1         .word LINK 
                           00288F     2         LINK=.
      00288F 03                       3         .byte 3  
      002890 32 3E 52                 4         .ascii "2>R"
      002893                          5         DTOR:
      002893 90 85            [ 2]  559     POPW Y 
      002895 90 BF 26         [ 2]  560     LDW YTEMP,Y 
      002898 90 93            [ 1]  561     LDW Y,X 
      00289A 90 EE 02         [ 2]  562     LDW Y,(2,Y)
      00289D 90 89            [ 2]  563     PUSHW Y   ; d low 
      00289F 90 93            [ 1]  564     LDW Y,X 
      0028A1 90 FE            [ 2]  565     LDW Y,(Y)
      0028A3 90 89            [ 2]  566     PUSHW Y   ; d hi 
      0028A5 1C 00 04         [ 2]  567     ADDW X,#4  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



      0028A8 92 CC 26         [ 5]  568     JP [YTEMP]
                                    569 
                                    570 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    571 ;  2R> ( -- d ) R: d --      
                                    572 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028AB                        573     _HEADER DRFROM,3,"2R>"
      0028AB 28 8F                    1         .word LINK 
                           0028AD     2         LINK=.
      0028AD 03                       3         .byte 3  
      0028AE 32 52 3E                 4         .ascii "2R>"
      0028B1                          5         DRFROM:
      0028B1 90 85            [ 2]  574     POPW Y      ; d hi 
      0028B3 90 BF 26         [ 2]  575     LDW YTEMP,Y 
      0028B6 1D 00 04         [ 2]  576     SUBW X,#4
      0028B9 90 85            [ 2]  577     POPW Y       ; d hi 
      0028BB FF               [ 2]  578     LDW (X),Y 
      0028BC 90 85            [ 2]  579     POPW Y       ; d low  
      0028BE EF 02            [ 2]  580     LDW (2,X),Y 
      0028C0 92 CC 26         [ 5]  581     JP [YTEMP]
                                    582     
                                    583 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    584 ;   2R@ ( -- d )
                                    585 ;   fecth a double from RSTACK
                                    586 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028C3                        587     _HEADER DRAT,3,"2R@"
      0028C3 28 AD                    1         .word LINK 
                           0028C5     2         LINK=.
      0028C5 03                       3         .byte 3  
      0028C6 32 52 40                 4         .ascii "2R@"
      0028C9                          5         DRAT:
      0028C9 90 85            [ 2]  588     POPW Y 
      0028CB 90 BF 26         [ 2]  589     LDW YTEMP,Y 
      0028CE 1D 00 04         [ 2]  590     SUBW X,#4 
      0028D1 16 01            [ 2]  591     LDW Y,(1,SP)
      0028D3 FF               [ 2]  592     LDW (X),Y 
      0028D4 16 03            [ 2]  593     LDW Y,(3,SP)
      0028D6 EF 02            [ 2]  594     LDW (2,X),Y 
      0028D8 92 CC 26         [ 5]  595     JP [YTEMP]
                                    596 
                                    597 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    598 ;  2VARIABLE <name> 
                                    599 ;  create a double variable 
                                    600 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028DB                        601     _HEADER DVARIA,9,"2VARIABLE"
      0028DB 28 C5                    1         .word LINK 
                           0028DD     2         LINK=.
      0028DD 09                       3         .byte 9  
      0028DE 32 56 41 52 49 41 42     4         .ascii "2VARIABLE"
             4C 45
      0028E7                          5         DVARIA:
      0028E7 CD 0C BE         [ 4]  602         CALL HERE
      0028EA CD 06 21         [ 4]  603         CALL DUPP
      0028ED                        604         _DOLIT 4  
      0028ED CD 04 6F         [ 4]    1     CALL DOLIT 
      0028F0 00 04                    2     .word 4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



      0028F2 CD 08 46         [ 4]  605         CALL PLUS 
      0028F5 CD 07 78         [ 4]  606         CALL VPP 
      0028F8 CD 04 D1         [ 4]  607         CALL STORE
      0028FB CD 18 8F         [ 4]  608         CALL CREAT
      0028FE CD 06 21         [ 4]  609         CALL DUPP
      002901 CD 15 02         [ 4]  610         CALL COMMA
      002904 CD 0B E1         [ 4]  611         CALL ZERO
      002907 CD 06 49         [ 4]  612         CALL OVER 
      00290A CD 04 D1         [ 4]  613         CALL STORE 
      00290D CD 0B E1         [ 4]  614         CALL ZERO 
      002910 CD 06 31         [ 4]  615         CALL SWAPP 
      002913 CD 04 D1         [ 4]  616         CALL STORE
      002916 CD 22 04         [ 4]  617         CALL FMOVE ; move definition to FLASH
      002919 CD 07 D4         [ 4]  618         CALL QDUP 
      00291C CD 04 98         [ 4]  619         CALL QBRAN 
      00291F 18 DC                  620         .word SET_RAMLAST   
      002921 CD 1C AC         [ 4]  621         call UPDATVP  ; don't update if variable kept in RAM.
      002924 CD 22 98         [ 4]  622         CALL UPDATPTR
      002927 81               [ 4]  623         RET         
                                    624 
                                    625 
                                    626 
                                    627 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    628 ;  2LITERAL ( d -- )
                                    629 ;  compile double literal 
                                    630 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002928                        631     _HEADER DLITER,IMEDD+8,"2LITERAL"
      002928 28 DD                    1         .word LINK 
                           00292A     2         LINK=.
      00292A 88                       3         .byte IMEDD+8  
      00292B 32 4C 49 54 45 52 41     4         .ascii "2LITERAL"
             4C
      002933                          5         DLITER:
      002933 CD 15 47         [ 4]  632     CALL COMPI 
      002936 29 3E                  633     .word do2lit 
      002938 CD 15 02         [ 4]  634     CALL COMMA 
      00293B CC 15 02         [ 2]  635     JP   COMMA 
                                    636 
                                    637 
                                    638 ; runtime for 2LITERAL 
      00293E                        639 do2lit:
      00293E 1D 00 04         [ 2]  640     SUBW X,#4 
      002941 16 01            [ 2]  641     LDW Y,(1,SP)
      002943 90 FE            [ 2]  642     LDW Y,(Y)
      002945 FF               [ 2]  643     LDW (X),Y 
      002946 16 01            [ 2]  644     LDW Y,(1,SP)
      002948 90 EE 02         [ 2]  645     LDW Y,(2,Y)
      00294B EF 02            [ 2]  646     LDW (2,X),Y 
      00294D 90 85            [ 2]  647     POPW Y 
      00294F 90 EC 04         [ 2]  648     JP (4,Y)
                                    649 
                                    650 
                                    651 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    652 ;   2OVER ( d1 d2 -- d1 d2 d1 )
                                    653 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



      002952                        654     _HEADER DOVER,5,"2OVER"
      002952 29 2A                    1         .word LINK 
                           002954     2         LINK=.
      002954 05                       3         .byte 5  
      002955 32 4F 56 45 52           4         .ascii "2OVER"
      00295A                          5         DOVER:
      00295A 90 93            [ 1]  655     LDW Y,X 
      00295C 1D 00 04         [ 2]  656     SUBW X,#4 
      00295F 90 89            [ 2]  657     PUSHW Y 
      002961 90 EE 04         [ 2]  658     LDW Y,(4,Y)  ; d1 hi 
      002964 FF               [ 2]  659     LDW (X),Y 
      002965 90 85            [ 2]  660     POPW Y 
      002967 90 EE 06         [ 2]  661     LDW Y,(6,Y)  ;d1 lo 
      00296A EF 02            [ 2]  662     LDW (2,X),Y 
      00296C 81               [ 4]  663     RET 
                                    664 
                                    665 
                                    666 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    667 ;   D2/ ( d -- d/2 )
                                    668 ;   divide double by 2 
                                    669 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00296D                        670     _HEADER D2SLASH,3,"D2/"
      00296D 29 54                    1         .word LINK 
                           00296F     2         LINK=.
      00296F 03                       3         .byte 3  
      002970 44 32 2F                 4         .ascii "D2/"
      002973                          5         D2SLASH:
      002973 90 93            [ 1]  671     LDW Y,X 
      002975 90 FE            [ 2]  672     LDW Y,(Y)
      002977 90 57            [ 2]  673     SRAW Y 
      002979 FF               [ 2]  674     LDW (X),Y 
      00297A 90 93            [ 1]  675     LDW Y,X 
      00297C 90 EE 02         [ 2]  676     LDW Y,(2,Y)
      00297F 90 56            [ 2]  677     RRCW Y 
      002981 EF 02            [ 2]  678     LDW (2,X),Y 
      002983 81               [ 4]  679     RET
                                    680 
                                    681 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    682 ;  D2* ( d -- d*2 )
                                    683 ;  multiply double by 2 
                                    684 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002984                        685     _HEADER D2STAR,3,"D2*"
      002984 29 6F                    1         .word LINK 
                           002986     2         LINK=.
      002986 03                       3         .byte 3  
      002987 44 32 2A                 4         .ascii "D2*"
      00298A                          5         D2STAR:
      00298A 90 93            [ 1]  686     LDW Y,X 
      00298C 90 EE 02         [ 2]  687     LDW Y,(2,Y)
      00298F 98               [ 1]  688     RCF 
      002990 90 59            [ 2]  689     RLCW Y 
      002992 EF 02            [ 2]  690     LDW (2,X),Y 
      002994 90 93            [ 1]  691     LDW Y,X 
      002996 90 FE            [ 2]  692     LDW Y,(Y)
      002998 90 59            [ 2]  693     RLCW Y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



      00299A FF               [ 2]  694     LDW (X),Y 
      00299B 81               [ 4]  695     RET 
                                    696 
                                    697 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    698 ;   DLSHIFT ( d n -- d )
                                    699 ;   left shift double 
                                    700 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00299C                        701     _HEADER DLSHIFT,7,"DLSHIFT"
      00299C 29 86                    1         .word LINK 
                           00299E     2         LINK=.
      00299E 07                       3         .byte 7  
      00299F 44 4C 53 48 49 46 54     4         .ascii "DLSHIFT"
      0029A6                          5         DLSHIFT:
      0029A6 E6 01            [ 1]  702     LD A,(1,X) ; shift count 
      0029A8 A4 1F            [ 1]  703     AND A,#31
      0029AA 1C 00 02         [ 2]  704     ADDW X,#CELLL 
      0029AD 90 93            [ 1]  705     LDW Y,X 
      0029AF 90 FE            [ 2]  706     LDW Y,(Y)
      0029B1 90 BF 26         [ 2]  707     LDW YTEMP,Y  ; d hi 
      0029B4 90 93            [ 1]  708     LDW Y,X 
      0029B6 90 EE 02         [ 2]  709     LDW Y,(2,Y)  ; d low 
      0029B9                        710 DLSHIFT1:
      0029B9 4D               [ 1]  711     TNZ A 
      0029BA 27 12            [ 1]  712     JREQ DLSHIFT2 
      0029BC 98               [ 1]  713     RCF 
      0029BD 90 59            [ 2]  714     RLCW Y 
      0029BF 90 89            [ 2]  715     PUSHW Y 
      0029C1 90 BE 26         [ 2]  716     LDW Y,YTEMP 
      0029C4 90 59            [ 2]  717     RLCW Y 
      0029C6 90 BF 26         [ 2]  718     LDW YTEMP,Y 
      0029C9 90 85            [ 2]  719     POPW Y 
      0029CB 4A               [ 1]  720     DEC A 
      0029CC 20 EB            [ 2]  721     JRA DLSHIFT1 
      0029CE                        722 DLSHIFT2:
      0029CE EF 02            [ 2]  723     LDW (2,X),Y 
      0029D0 90 BE 26         [ 2]  724     LDW Y,YTEMP 
      0029D3 FF               [ 2]  725     LDW (X),Y 
      0029D4 81               [ 4]  726     RET 
                                    727 
                                    728 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    729 ;  DRSHIFT ( d n -- d )
                                    730 ;  shift right n bits 
                                    731 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0029D5                        732     _HEADER DRSHIFT,7,"DRSHIFT"
      0029D5 29 9E                    1         .word LINK 
                           0029D7     2         LINK=.
      0029D7 07                       3         .byte 7  
      0029D8 44 52 53 48 49 46 54     4         .ascii "DRSHIFT"
      0029DF                          5         DRSHIFT:
      0029DF E6 01            [ 1]  733     LD A,(1,X)
      0029E1 A4 1F            [ 1]  734     AND A,#31
      0029E3 1C 00 02         [ 2]  735     ADDW X,#2 
      0029E6                        736 DRSHIFT1:
      0029E6 4D               [ 1]  737     TNZ A 
      0029E7 27 13            [ 1]  738     JREQ DRSHIFT2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



      0029E9 90 93            [ 1]  739     LDW Y,X 
      0029EB 90 FE            [ 2]  740     LDW Y,(Y)
      0029ED 90 54            [ 2]  741     SRLW Y 
      0029EF FF               [ 2]  742     LDW (X),Y 
      0029F0 90 93            [ 1]  743     LDW Y,X 
      0029F2 90 EE 02         [ 2]  744     LDW Y,(2,Y)
      0029F5 90 56            [ 2]  745     RRCW Y 
      0029F7 EF 02            [ 2]  746     LDW (2,X),Y 
      0029F9 4A               [ 1]  747     DEC A
      0029FA 20 EA            [ 2]  748     JRA DRSHIFT1  
      0029FC                        749 DRSHIFT2:
      0029FC 81               [ 4]  750     RET 
                                    751 
                                    752 
                                    753 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    754 ;   D* ( d1 d2 -- d3 )
                                    755 ;   double product 
                                    756 ;   
                                    757 ;   d3 = d1 * d2
                                    758 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0029FD                        759     _HEADER DSTAR,2,"D*"
      0029FD 29 D7                    1         .word LINK 
                           0029FF     2         LINK=.
      0029FF 02                       3         .byte 2  
      002A00 44 2A                    4         .ascii "D*"
      002A02                          5         DSTAR:
      002A02 CD 06 21         [ 4]  760     CALL DUPP 
      002A05 CD 06 58         [ 4]  761     CALL ZLESS  
      002A08 CD 05 EA         [ 4]  762     CALL TOR    ; R: d2sign 
      002A0B CD 26 28         [ 4]  763     CALL DABS   
      002A0E CD 05 34         [ 4]  764     CALL RFROM 
      002A11 CD 08 04         [ 4]  765     CALL NROT  ; d1 d2s ud2
      002A14 CD 28 93         [ 4]  766     CALL DTOR  ; d1 d2s R: ud2  
      002A17 CD 05 EA         [ 4]  767     CALL TOR   ; d1 R: ud2 d2s   
      002A1A CD 06 21         [ 4]  768     CALL DUPP 
      002A1D CD 06 58         [ 4]  769     CALL ZLESS 
      002A20 CD 05 34         [ 4]  770     CALL RFROM 
      002A23 CD 06 A7         [ 4]  771     CALL XORR   
      002A26 CD 05 EA         [ 4]  772     CALL TOR   ; d1 R: ud2 prod_sign  
      002A29 CD 26 28         [ 4]  773     CALL DABS ; ud1 R: ud2 ps  
      002A2C CD 05 34         [ 4]  774     CALL RFROM  
      002A2F CD 08 04         [ 4]  775     CALL NROT   ; ps ud1 
      002A32 CD 08 31         [ 4]  776     CALL DDUP   ; ps ud1 ud1  
      002A35 CD 05 34         [ 4]  777     CALL RFROM  ; ps ud1 ud1 ud2hi 
      002A38 CD 27 1E         [ 4]  778     CALL DSSTAR ; ps ud1 dprodhi 
                                    779 ; shift partial product 16 bits left 
      002A3B CD 06 17         [ 4]  780     CALL DROP   ; drop overflow 
      002A3E CD 0B E1         [ 4]  781     CALL ZERO   ; ps ud1 prodhi 
      002A41 CD 06 31         [ 4]  782     CALL SWAPP  
      002A44 CD 27 44         [ 4]  783     CALL DSWAP  ; ps dprodhi ud1 
      002A47 CD 05 34         [ 4]  784     CALL RFROM  ; ps dprodhi ud1 ud2lo
      002A4A CD 27 1E         [ 4]  785     CALL DSSTAR ; ps  dprodhi dprodlo 
      002A4D CD 2B 56         [ 4]  786     CALL DPLUS
      002A50 CD 07 E5         [ 4]  787     CALL ROT    ; dprod ps 
      002A53                        788     _QBRAN DDSTAR3 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



      002A53 CD 04 98         [ 4]    1     CALL QBRAN
      002A56 2A 5B                    2     .word DDSTAR3
      002A58 CD 08 96         [ 4]  789     CALL DNEGA 
      002A5B                        790 DDSTAR3:  
      002A5B 81               [ 4]  791     RET 
                                    792 
                                    793 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    794 ;  UD/MOD ( ud1 ud2 -- dr udq )
                                    795 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002A5C                        796     _HEADER UDSLMOD,6,"UD/MOD"
      002A5C 29 FF                    1         .word LINK 
                           002A5E     2         LINK=.
      002A5E 06                       3         .byte 6  
      002A5F 55 44 2F 4D 4F 44        4         .ascii "UD/MOD"
      002A65                          5         UDSLMOD:
                                    797 ; unsigned double division 
      002A65 CD 0B E1         [ 4]  798     CALL ZERO 
      002A68 CD 0B E1         [ 4]  799     CALL ZERO
      002A6B CD 28 93         [ 4]  800     CALL DTOR ; quotient  R: qlo qhi 
      002A6E CD 29 5A         [ 4]  801     CALL DOVER 
      002A71 CD 27 72         [ 4]  802     CALL DCLZ ; n2, dividend leading zeros  
      002A74 CD 05 EA         [ 4]  803     CALL TOR 
      002A77 CD 08 31         [ 4]  804     CALL DDUP    
      002A7A CD 27 72         [ 4]  805     CALL DCLZ  ; n1, divisor leading zeros
      002A7D CD 05 34         [ 4]  806     CALL RFROM ; n1 n2 
      002A80 CD 08 D0         [ 4]  807     CALL SUBB  ; loop count 
      002A83 CD 06 21         [ 4]  808     CALL DUPP
      002A86 CD 28 93         [ 4]  809     CALL DTOR  ; ud1 ud2 R: qlo qhi cntr cntr 
      002A89 CD 05 45         [ 4]  810     CALL RAT    
      002A8C CD 06 58         [ 4]  811     CALL ZLESS 
      002A8F                        812     _TBRAN UDSLA7 ; quotient is null 
      002A8F CD 04 A6         [ 4]    1     CALL TBRAN 
      002A92 2A F1                    2     .word UDSLA7 
      002A94 CD 05 45         [ 4]  813     CALL RAT 
      002A97 CD 29 A6         [ 4]  814     CALL DLSHIFT ; align divisor with dividend 
      002A9A                        815 UDSLA3: ; division loop -- dividend divisor  
      002A9A 90 5F            [ 1]  816     CLRW Y 
      002A9C 90 89            [ 2]  817     PUSHW Y  
      002A9E CD 29 5A         [ 4]  818     CALL DOVER 
      002AA1 CD 29 5A         [ 4]  819     CALL DOVER 
      002AA4 CD 28 61         [ 4]  820     CALL DLESS 
      002AA7                        821     _TBRAN UDSLA4 
      002AA7 CD 04 A6         [ 4]    1     CALL TBRAN 
      002AAA 2A C0                    2     .word UDSLA4 
      002AAC 90 85            [ 2]  822     POPW Y 
      002AAE 72 A9 00 01      [ 2]  823     ADDW Y,#1 
      002AB2 90 89            [ 2]  824     PUSHW Y    ; quotiend least bit 
      002AB4 CD 08 31         [ 4]  825     CALL DDUP  ; dividend divisor divisor 
      002AB7 CD 28 93         [ 4]  826     CALL DTOR  
      002ABA CD 2B 88         [ 4]  827     CALL DSUB  ; dividend-divisor 
      002ABD CD 28 B1         [ 4]  828     CALL DRFROM  ; dividend- divisor  
      002AC0                        829 UDSLA4: ; shift quotient and add 1 bit 
      002AC0 90 85            [ 2]  830     POPW Y 
      002AC2 90 BF 26         [ 2]  831     LDW YTEMP,Y 
      002AC5 16 07            [ 2]  832     LDW Y,(7,SP) ; quotient low 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



      002AC7 98               [ 1]  833     RCF 
      002AC8 90 59            [ 2]  834     RLCW Y
      002ACA 17 07            [ 2]  835     LDW (7,SP),Y 
      002ACC 16 05            [ 2]  836     LDW Y,(5,SP) ; quotient hi 
      002ACE 90 59            [ 2]  837     RLCW Y 
      002AD0 17 05            [ 2]  838     LDW (5,SP),Y 
      002AD2 16 07            [ 2]  839     LDW Y,(7,SP) 
      002AD4 72 B9 00 26      [ 2]  840     ADDW Y,YTEMP
      002AD8 17 07            [ 2]  841     LDW (7,SP),Y 
      002ADA 16 01            [ 2]  842     LDW Y,(1,SP) ; loop counter 
      002ADC 90 5D            [ 2]  843     TNZW Y 
      002ADE 27 1C            [ 1]  844     JREQ UDSLA8
      002AE0 72 A2 00 01      [ 2]  845     SUBW Y,#1  
      002AE4 17 01            [ 2]  846     LDW (1,SP),Y  
                                    847 ; shift dividend left 1 bit      
      002AE6 CD 27 44         [ 4]  848     CALL DSWAP 
      002AE9 CD 29 8A         [ 4]  849     CALL D2STAR 
      002AEC CD 27 44         [ 4]  850     CALL DSWAP 
      002AEF 20 A9            [ 2]  851     JRA UDSLA3 
      002AF1                        852 UDSLA7:
      002AF1 CD 0B E1         [ 4]  853     CALL ZERO 
      002AF4                        854     _DOLIT 1 
      002AF4 CD 04 6F         [ 4]    1     CALL DOLIT 
      002AF7 00 01                    2     .word 1 
      002AF9 CD 05 C4         [ 4]  855     CALL NRSTO ; R: 0 0 0 cntr    
      002AFC                        856 UDSLA8:
      002AFC 1C 00 04         [ 2]  857     ADDW X,#4 ; drop divisor
      002AFF CD 05 34         [ 4]  858     CALL RFROM  
      002B02 CD 06 17         [ 4]  859     CALL DROP ; drop cntr 
      002B05 CD 05 34         [ 4]  860     CALL RFROM   ; shift count
      002B08 CD 29 DF         [ 4]  861     CALL DRSHIFT 
                                    862     ; quotient replace dividend 
      002B0B CD 28 B1         [ 4]  863     CALL DRFROM  ; quotient 
      002B0E 81               [ 4]  864     RET 
                                    865 
                                    866 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    867 ;   D/MOD  ( d1 d2 -- dr dq )
                                    868 ;   double division dq=d1/d2
                                    869 ;   dr remainder double 
                                    870 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B0F                        871     _HEADER DDSLMOD,5,"D/MOD"  
      002B0F 2A 5E                    1         .word LINK 
                           002B11     2         LINK=.
      002B11 05                       3         .byte 5  
      002B12 44 2F 4D 4F 44           4         .ascii "D/MOD"
      002B17                          5         DDSLMOD:
      002B17 CD 26 39         [ 4]  872     CALL DSIGN 
      002B1A CD 05 EA         [ 4]  873     CALL TOR   ; R: divisor sign 
      002B1D CD 26 28         [ 4]  874     CALL DABS 
      002B20 CD 27 44         [ 4]  875     CALL DSWAP 
      002B23 CD 26 39         [ 4]  876     CALL DSIGN ; dividend sign 
      002B26 CD 05 34         [ 4]  877     CALL RFROM 
      002B29 CD 06 A7         [ 4]  878     CALL XORR  ; quotient sign
      002B2C CD 05 EA         [ 4]  879     CALL TOR   ; 
      002B2F CD 26 28         [ 4]  880     CALL DABS  ; d2 ud1 R: sign 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



      002B32 CD 27 44         [ 4]  881     CALL DSWAP  ; ud1 ud2 
      002B35 CD 2A 65         [ 4]  882     CALL UDSLMOD ; ud1/ud2 -- dr dq  
      002B38 90 85            [ 2]  883     POPW Y ; sign 
      002B3A 90 5D            [ 2]  884     TNZW Y 
      002B3C 2A 03            [ 1]  885     JRPL DSLA9 
      002B3E CD 08 96         [ 4]  886     CALL DNEGA ; remainder quotient 
      002B41                        887 DSLA9: 
      002B41 81               [ 4]  888     RET 
                                    889 
                                    890 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    891 ;   D/  ( d1 d2 -- dq )
                                    892 ;   division double by double 
                                    893 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B42                        894     _HEADER DSLASH,2,"D/"
      002B42 2B 11                    1         .word LINK 
                           002B44     2         LINK=.
      002B44 02                       3         .byte 2  
      002B45 44 2F                    4         .ascii "D/"
      002B47                          5         DSLASH:
      002B47 CD 2B 17         [ 4]  895     CALL DDSLMOD
      002B4A CD 27 44         [ 4]  896     CALL DSWAP
      002B4D CD 08 26         [ 4]  897     CALL DDROP 
      002B50 81               [ 4]  898     RET 
                                    899 
                                    900 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    901 ;   D+ ( d1 d2 -- d3 )
                                    902 ;   add 2 doubles 
                                    903 ;   d3=d1+d2 
                                    904 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B51                        905     _HEADER DPLUS,2,"D+"
      002B51 2B 44                    1         .word LINK 
                           002B53     2         LINK=.
      002B53 02                       3         .byte 2  
      002B54 44 2B                    4         .ascii "D+"
      002B56                          5         DPLUS:
      002B56 90 93            [ 1]  906     LDW Y,X 
      002B58 90 FE            [ 2]  907     LDW Y,(Y)
      002B5A 90 BF 26         [ 2]  908     LDW YTEMP,Y ; d2 hi 
      002B5D 90 93            [ 1]  909     LDW Y,X 
      002B5F 90 EE 02         [ 2]  910     LDW Y,(2,Y)
      002B62 90 BF 24         [ 2]  911     LDW XTEMP,Y ; d2 lo 
      002B65 1C 00 04         [ 2]  912     ADDW X,#4 
      002B68 90 93            [ 1]  913     LDW Y,X 
      002B6A 90 EE 02         [ 2]  914     LDW Y,(2,Y) ; d1 lo
      002B6D 72 B9 00 24      [ 2]  915     ADDW Y,XTEMP
      002B71 EF 02            [ 2]  916     LDW (2,X),Y 
      002B73 90 93            [ 1]  917     LDW Y,X 
      002B75 90 FE            [ 2]  918     LDW Y,(Y) ; d1 hi 
      002B77 24 04            [ 1]  919     JRNC DPLUS1 
      002B79 72 A9 00 01      [ 2]  920     ADDW Y,#1 
      002B7D                        921 DPLUS1: 
      002B7D 72 B9 00 26      [ 2]  922     ADDW Y,YTEMP 
      002B81 FF               [ 2]  923     LDW (X),Y 
      002B82 81               [ 4]  924     RET 
                                    925 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



                                    926 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    927 ;   D- ( d1 d2 -- d3 )
                                    928 ;   d3=d1-d2 
                                    929 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B83                        930     _HEADER DSUB,2,"D-"
      002B83 2B 53                    1         .word LINK 
                           002B85     2         LINK=.
      002B85 02                       3         .byte 2  
      002B86 44 2D                    4         .ascii "D-"
      002B88                          5         DSUB:
      002B88 90 93            [ 1]  931     LDW Y,X 
      002B8A 90 FE            [ 2]  932     LDW Y,(Y)
      002B8C 90 BF 26         [ 2]  933     LDW YTEMP,Y ; d2 hi 
      002B8F 90 93            [ 1]  934     LDW Y,X 
      002B91 90 EE 02         [ 2]  935     LDW Y,(2,Y)
      002B94 90 BF 24         [ 2]  936     LDW XTEMP,Y ; d2 lo 
      002B97 1C 00 04         [ 2]  937     ADDW X,#4 
      002B9A 90 93            [ 1]  938     LDW Y,X 
      002B9C 90 EE 02         [ 2]  939     LDW Y,(2,Y) ; d1 lo
      002B9F 72 B2 00 24      [ 2]  940     SUBW Y,XTEMP
      002BA3 EF 02            [ 2]  941     LDW (2,X),Y 
      002BA5 90 93            [ 1]  942     LDW Y,X 
      002BA7 90 FE            [ 2]  943     LDW Y,(Y) ; d1 hi 
      002BA9 24 04            [ 1]  944     JRNC DSUB1 
      002BAB 72 A2 00 01      [ 2]  945     SUBW Y,#1 
      002BAF                        946 DSUB1: 
      002BAF 72 B2 00 26      [ 2]  947     SUBW Y,YTEMP 
      002BB3 FF               [ 2]  948     LDW (X),Y 
      002BB4 81               [ 4]  949     RET 
                                    950 
                                    951 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



                                   4524 .endif 
                           000001  4525 .if WANT_FLOAT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



                                   4526         .include "float.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;*********************************
                                     21 ;    floating point library
                                     22 ;    adapted from 
                                     23 ;    Forth dimensions Vol. IV #1 
                                     24 ;    published in  may/june 1982
                                     25 ;
                                     26 ; Creation date: 2021-06-15 
                                     27 ;
                                     28 ;  This file is part of stm8_eforth 
                                     29 ;  project and same licence apply.
                                     30 ;************************************
                                     31 
                                     32 ;*************************************************
                                     33 ;  FLOAT format double for storage 
                                     34 ;  bits 23:0  signed mantissa
                                     35 ;  bits  31:24  signed exponent
                                     36 ;***********************************************  
                                     37 
                                     38     .module FLOAT 
                                     39 
                           000001    40 .if WANT_DOUBLE 
                                     41 ; already included 
                           000000    42 .else
                                     43 ;  must be included  
                                     44     .include "double.asm"
                                     45 .endif  
                                     46 
                           7FFFFF    47     MAX_MANTISSA = 0x7FFFFF 
                                     48 
                           000001    49     FLOAT_MAJOR=1 
                           000000    50     FLOAT_MINOR=0 
                                     51 
                                     52 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     53 ;   FLOAT-VER ( -- )
                                     54 ;   print library version 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



                                     55 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BB5                         56     _HEADER FVER,9,"FLOAT-VER"
      002BB5 2B 85                    1         .word LINK 
                           002BB7     2         LINK=.
      002BB7 09                       3         .byte 9  
      002BB8 46 4C 4F 41 54 2D 56     4         .ascii "FLOAT-VER"
             45 52
      002BC1                          5         FVER:
      002BC1 CD 0F 59         [ 4]   57     CALL CR 
      002BC4 CD 0F 86         [ 4]   58     CALL DOTQP 
      002BC7 11                      59     .byte  17 
      002BC8 66 6C 6F 61 74 33 32    60     .ascii "float32 library, "
             20 6C 69 62 72 61 72
             79 2C 20
      002BD9 CD 1A D7         [ 4]   61     CALL PRT_LICENCE 
      002BDC CD 1A AF         [ 4]   62     CALL COPYRIGHT 
      002BDF                         63     _DOLIT FLOAT_MAJOR     
      002BDF CD 04 6F         [ 4]    1     CALL DOLIT 
      002BE2 00 01                    2     .word FLOAT_MAJOR 
      002BE4                         64     _DOLIT FLOAT_MINOR 
      002BE4 CD 04 6F         [ 4]    1     CALL DOLIT 
      002BE7 00 00                    2     .word FLOAT_MINOR 
      002BE9 CC 1A EB         [ 2]   65     JP PRINT_VERSION 
                                     66 
                                     67 
                                     68 ;-------------------------
                                     69 ;    FPSW ( -- a )
                                     70 ;    floating state variable
                                     71 ;    bit 0 zero flag 
                                     72 ;    bit 1 negative flag 
                                     73 ;    bit 2 overflow/error flag 
                                     74 ;---------------------------
      002BEC                         75     _HEADER FPSW,4,"FPSW"
      002BEC 2B B7                    1         .word LINK 
                           002BEE     2         LINK=.
      002BEE 04                       3         .byte 4  
      002BEF 46 50 53 57              4         .ascii "FPSW"
      002BF3                          5         FPSW:
      002BF3 90 AE 00 08      [ 2]   76 	LDW Y,#UFPSW  
      002BF7 1D 00 02         [ 2]   77 	SUBW X,#2
      002BFA FF               [ 2]   78     LDW (X),Y
      002BFB 81               [ 4]   79     RET
                                     80 
                                     81 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     82 ;   FRESET ( -- )
                                     83 ;   reset FPSW variable 
                                     84 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
      002BFC                         85     _HEADER FRESET,6,"FRESET"
      002BFC 2B EE                    1         .word LINK 
                           002BFE     2         LINK=.
      002BFE 06                       3         .byte 6  
      002BFF 46 52 45 53 45 54        4         .ascii "FRESET"
      002C05                          5         FRESET:
      002C05 CD 0B E1         [ 4]   86     CALL ZERO  
      002C08 CD 2B F3         [ 4]   87     CALL FPSW 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



      002C0B CD 04 D1         [ 4]   88     CALL STORE 
      002C0E 81               [ 4]   89     RET 
                                     90 
                                     91 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     92 ;   FINIT ( -- )
                                     93 ;   initialize floating point 
                                     94 ;   library 
                                     95 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C0F                         96     _HEADER FINIT,5,"FINIT"
      002C0F 2B FE                    1         .word LINK 
                           002C11     2         LINK=.
      002C11 05                       3         .byte 5  
      002C12 46 49 4E 49 54           4         .ascii "FINIT"
      002C17                          5         FINIT:
      002C17 CD 2C 05         [ 4]   97     CALL FRESET 
      002C1A 81               [ 4]   98     RET 
                                     99 
                                    100 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    101 ;    FER ( -- u )
                                    102 ;    return FPSW value 
                                    103 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C1B                        104     _HEADER FER,3,"FER"
      002C1B 2C 11                    1         .word LINK 
                           002C1D     2         LINK=.
      002C1D 03                       3         .byte 3  
      002C1E 46 45 52                 4         .ascii "FER"
      002C21                          5         FER:
      002C21 CD 2B F3         [ 4]  105     CALL FPSW 
      002C24 CD 04 E3         [ 4]  106     CALL AT 
      002C27 81               [ 4]  107     RET 
                                    108 
                                    109 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    110 ;    FZE  ( -- 0|-1 )
                                    111 ;    return FPSW zero flag 
                                    112 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C28                        113     _HEADER FZE,3,"FZE"
      002C28 2C 1D                    1         .word LINK 
                           002C2A     2         LINK=.
      002C2A 03                       3         .byte 3  
      002C2B 46 5A 45                 4         .ascii "FZE"
      002C2E                          5         FZE:
      002C2E CD 2B F3         [ 4]  114     CALL FPSW
      002C31 CD 04 E3         [ 4]  115     CALL AT  
      002C34 CD 0B EC         [ 4]  116     CALL ONE 
      002C37 CD 06 7E         [ 4]  117     CALL ANDD
      002C3A CD 08 84         [ 4]  118     CALL NEGAT  
      002C3D 81               [ 4]  119     RET 
                                    120 
                                    121 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    122 ;    FNE ( -- 0|-1 )
                                    123 ;    return FPSW negative flag 
                                    124 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C3E                        125     _HEADER FNE,3,"FNE"
      002C3E 2C 2A                    1         .word LINK 
                           002C40     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



      002C40 03                       3         .byte 3  
      002C41 46 4E 45                 4         .ascii "FNE"
      002C44                          5         FNE:
      002C44 CD 2B F3         [ 4]  126     CALL FPSW 
      002C47 CD 04 E3         [ 4]  127     CALL AT 
      002C4A                        128     _DOLIT 2 
      002C4A CD 04 6F         [ 4]    1     CALL DOLIT 
      002C4D 00 02                    2     .word 2 
      002C4F CD 06 7E         [ 4]  129     CALL ANDD
      002C52 CD 0B C7         [ 4]  130     CALL TWOSL
      002C55 CD 08 84         [ 4]  131     CALL NEGAT   
      002C58 81               [ 4]  132     RET 
                                    133 
                                    134 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    135 ;   FOV (  -- 0|-1 )
                                    136 ;   return FPSW overflow flag 
                                    137 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C59                        138     _HEADER FOV,3,"FOV"
      002C59 2C 40                    1         .word LINK 
                           002C5B     2         LINK=.
      002C5B 03                       3         .byte 3  
      002C5C 46 4F 56                 4         .ascii "FOV"
      002C5F                          5         FOV:
      002C5F CD 2B F3         [ 4]  139     CALL FPSW
      002C62 CD 04 E3         [ 4]  140     CALL AT  
      002C65                        141     _DOLIT 4 
      002C65 CD 04 6F         [ 4]    1     CALL DOLIT 
      002C68 00 04                    2     .word 4 
      002C6A CD 06 7E         [ 4]  142     CALL ANDD
      002C6D                        143     _DOLIT 2 
      002C6D CD 04 6F         [ 4]    1     CALL DOLIT 
      002C70 00 02                    2     .word 2 
      002C72 CD 0B AF         [ 4]  144     CALL RSHIFT 
      002C75 CD 08 84         [ 4]  145     CALL NEGAT  
      002C78 81               [ 4]  146     RET 
                                    147 
                                    148 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    149 ;    SFZ ( f# -- f# )
                                    150 ;    set FPSW zero flag 
                                    151 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C79                        152     _HEADER SFZ,3,"SFZ"
      002C79 2C 5B                    1         .word LINK 
                           002C7B     2         LINK=.
      002C7B 03                       3         .byte 3  
      002C7C 53 46 5A                 4         .ascii "SFZ"
      002C7F                          5         SFZ:
      002C7F CD 2C 21         [ 4]  153     CALL FER 
      002C82                        154     _DOLIT 0xfffe 
      002C82 CD 04 6F         [ 4]    1     CALL DOLIT 
      002C85 FF FE                    2     .word 0xfffe 
      002C87 CD 06 7E         [ 4]  155     CALL ANDD 
      002C8A CD 05 EA         [ 4]  156     CALL TOR    
      002C8D CD 08 31         [ 4]  157     CALL DDUP 
      002C90                        158     _DOLIT 0xFF  
      002C90 CD 04 6F         [ 4]    1     CALL DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



      002C93 00 FF                    2     .word 0xFF 
      002C95 CD 06 7E         [ 4]  159     CALL ANDD
      002C98 CD 28 19         [ 4]  160     CALL DZEQUAL 
      002C9B                        161     _DOLIT 1 
      002C9B CD 04 6F         [ 4]    1     CALL DOLIT 
      002C9E 00 01                    2     .word 1 
      002CA0 CD 06 7E         [ 4]  162     CALL ANDD 
      002CA3 CD 05 34         [ 4]  163     CALL RFROM 
      002CA6 CD 06 92         [ 4]  164     CALL ORR 
      002CA9 CD 2B F3         [ 4]  165     CALL FPSW 
      002CAC CD 04 D1         [ 4]  166     CALL STORE 
      002CAF 81               [ 4]  167     RET 
                                    168 
                                    169 
                                    170 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    171 ;   SFN ( f# -- f# )
                                    172 ;   set FPSW negative flag 
                                    173 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002CB0                        174     _HEADER SFN,3,"SFN"
      002CB0 2C 7B                    1         .word LINK 
                           002CB2     2         LINK=.
      002CB2 03                       3         .byte 3  
      002CB3 53 46 4E                 4         .ascii "SFN"
      002CB6                          5         SFN:
      002CB6 CD 2C 21         [ 4]  175     CALL FER 
      002CB9                        176     _DOLIT 0xFFFD 
      002CB9 CD 04 6F         [ 4]    1     CALL DOLIT 
      002CBC FF FD                    2     .word 0xFFFD 
      002CBE CD 06 7E         [ 4]  177     CALL ANDD  
      002CC1 CD 05 EA         [ 4]  178     CALL TOR 
      002CC4 CD 06 21         [ 4]  179     CALL DUPP 
      002CC7                        180     _DOLIT 0X80 
      002CC7 CD 04 6F         [ 4]    1     CALL DOLIT 
      002CCA 00 80                    2     .word 0X80 
      002CCC CD 06 7E         [ 4]  181     CALL ANDD 
      002CCF                        182     _DOLIT 6 
      002CCF CD 04 6F         [ 4]    1     CALL DOLIT 
      002CD2 00 06                    2     .word 6 
      002CD4 CD 0B AF         [ 4]  183     CALL RSHIFT 
      002CD7 CD 05 34         [ 4]  184     CALL RFROM 
      002CDA CD 06 92         [ 4]  185     CALL ORR 
      002CDD CD 2B F3         [ 4]  186     CALL FPSW 
      002CE0 CD 04 D1         [ 4]  187     CALL STORE 
      002CE3 81               [ 4]  188     RET 
                                    189 
                                    190 
                                    191 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    192 ;   SFV ( -- )
                                    193 ;   set overflow flag 
                                    194 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002CE4                        195     _HEADER SFV,3,"SFV"
      002CE4 2C B2                    1         .word LINK 
                           002CE6     2         LINK=.
      002CE6 03                       3         .byte 3  
      002CE7 53 46 56                 4         .ascii "SFV"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



      002CEA                          5         SFV:
      002CEA CD 2C 21         [ 4]  196     CALL FER 
      002CED                        197     _DOLIT 4 
      002CED CD 04 6F         [ 4]    1     CALL DOLIT 
      002CF0 00 04                    2     .word 4 
      002CF2 CD 06 92         [ 4]  198     CALL ORR 
      002CF5 CD 2B F3         [ 4]  199     CALL FPSW 
      002CF8 CD 04 D1         [ 4]  200     CALL STORE 
      002CFB 81               [ 4]  201     RET 
                                    202 
                                    203 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    204 ;  F>ME ( f# -- m e )
                                    205 ;  split float in mantissa/exponent 
                                    206 ;  m mantissa as a double 
                                    207 ;  e exponent as a single 
                                    208 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002CFC                        209     _HEADER ATEXP,4,"F>ME"             
      002CFC 2C E6                    1         .word LINK 
                           002CFE     2         LINK=.
      002CFE 04                       3         .byte 4  
      002CFF 46 3E 4D 45              4         .ascii "F>ME"
      002D03                          5         ATEXP:
      002D03 CD 2C 05         [ 4]  210     CALL FRESET
      002D06 CD 2C B6         [ 4]  211     CALL SFN
      002D09 CD 2C 7F         [ 4]  212     CALL SFZ 
      002D0C 90 93            [ 1]  213     LDW Y,X 
      002D0E 90 FE            [ 2]  214     LDW Y,(Y)
      002D10 90 89            [ 2]  215     PUSHW Y 
      002D12 4F               [ 1]  216     CLR A  
      002D13 90 5E            [ 1]  217     SWAPW Y 
      002D15 2A 01            [ 1]  218     JRPL ATEXP1 
      002D17 43               [ 1]  219     CPL A 
      002D18                        220 ATEXP1: ; sign extend mantissa 
      002D18 90 5E            [ 1]  221     SWAPW Y 
      002D1A 90 95            [ 1]  222     LD YH,A 
      002D1C FF               [ 2]  223     LDW (X),Y 
      002D1D 1D 00 02         [ 2]  224     SUBW X,#CELLL 
      002D20 90 85            [ 2]  225     POPW Y 
      002D22 4F               [ 1]  226     CLR A 
      002D23 90 5D            [ 2]  227     TNZW Y 
      002D25 2A 01            [ 1]  228     JRPL ATEXP2 
      002D27 43               [ 1]  229     CPL A 
      002D28                        230 ATEXP2:
      002D28 90 5E            [ 1]  231     SWAPW Y 
      002D2A 90 95            [ 1]  232     LD YH,A 
      002D2C FF               [ 2]  233     LDW (X),Y 
      002D2D 81               [ 4]  234     RET 
                                    235 
                                    236 
                                    237 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    238 ;    ME>F ( m e -- f# )
                                    239 ;    built float from mantissa/exponent 
                                    240 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002D2E                        241     _HEADER STEXP,4,"ME>F"
      002D2E 2C FE                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



                           002D30     2         LINK=.
      002D30 04                       3         .byte 4  
      002D31 4D 45 3E 46              4         .ascii "ME>F"
      002D35                          5         STEXP:
      002D35 CD 06 21         [ 4]  242     CALL DUPP 
      002D38 CD 08 EA         [ 4]  243     CALL ABSS 
      002D3B                        244     _DOLIT 127 
      002D3B CD 04 6F         [ 4]    1     CALL DOLIT 
      002D3E 00 7F                    2     .word 127 
      002D40 CD 09 73         [ 4]  245     CALL GREAT
      002D43                        246     _QBRAN STEXP1
      002D43 CD 04 98         [ 4]    1     CALL QBRAN
      002D46 2D 4B                    2     .word STEXP1
      002D48 CD 2C EA         [ 4]  247     CALL SFV
      002D4B                        248 STEXP1:
      002D4B 90 93            [ 1]  249     LDW Y,X 
      002D4D 90 FE            [ 2]  250     LDW Y,(Y)
      002D4F 4F               [ 1]  251     CLR A 
      002D50 90 95            [ 1]  252     LD YH,A
      002D52 90 5E            [ 1]  253     SWAPW Y 
      002D54 90 89            [ 2]  254     PUSHW Y  ; e >r 
      002D56 1C 00 02         [ 2]  255     ADDW X,#CELLL 
      002D59 CD 08 31         [ 4]  256     CALL DDUP 
      002D5C CD 26 28         [ 4]  257     CALL DABS
      002D5F CD 06 31         [ 4]  258     CALL SWAPP 
      002D62 CD 06 17         [ 4]  259     CALL DROP  
      002D65                        260     _DOLIT 127 
      002D65 CD 04 6F         [ 4]    1     CALL DOLIT 
      002D68 00 7F                    2     .word 127 
      002D6A CD 09 73         [ 4]  261     CALL GREAT 
      002D6D                        262     _QBRAN STEXP2 
      002D6D CD 04 98         [ 4]    1     CALL QBRAN
      002D70 2D 75                    2     .word STEXP2
      002D72 CD 2C EA         [ 4]  263     CALL SFV 
      002D75                        264 STEXP2: 
      002D75 4F               [ 1]  265     CLR A 
      002D76 F7               [ 1]  266     LD (X),A     
      002D77 CD 05 34         [ 4]  267     CALL RFROM 
      002D7A CD 06 92         [ 4]  268     CALL ORR
      002D7D CD 2C 7F         [ 4]  269     CALL SFZ 
      002D80 CD 2C B6         [ 4]  270     CALL SFN 
      002D83 81               [ 4]  271     RET 
                                    272 
                                    273 
                                    274 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    275 ;   E. ( f# -- )
                                    276 ;   print float in scientific 
                                    277 ;   format 
                                    278 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002D84                        279     _HEADER EDOT,2,"E."
      002D84 2D 30                    1         .word LINK 
                           002D86     2         LINK=.
      002D86 02                       3         .byte 2  
      002D87 45 2E                    4         .ascii "E."
      002D89                          5         EDOT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



      002D89 CD 06 E7         [ 4]  280     CALL BASE 
      002D8C CD 04 E3         [ 4]  281     CALL AT 
      002D8F CD 05 EA         [ 4]  282     CALL TOR 
      002D92                        283     _DOLIT 10 
      002D92 CD 04 6F         [ 4]    1     CALL DOLIT 
      002D95 00 0A                    2     .word 10 
      002D97 CD 06 E7         [ 4]  284     CALL BASE 
      002D9A CD 04 D1         [ 4]  285     CALL STORE 
      002D9D CD 2D 03         [ 4]  286     CALL ATEXP ; m e 
      002DA0                        287 EDOT0:
      002DA0 CD 05 EA         [ 4]  288     CALL TOR   
      002DA3 CD 26 28         [ 4]  289     CALL DABS 
      002DA6 CD 0F 17         [ 4]  290     CALL SPACE 
      002DA9 CD 0D DB         [ 4]  291     CALL BDIGS     
      002DAC                        292 EDOT2: 
      002DAC CD 26 94         [ 4]  293     CALL DDIG
      002DAF CD 05 34         [ 4]  294     CALL RFROM 
      002DB2 CD 0B 75         [ 4]  295     CALL ONEP 
      002DB5 CD 05 EA         [ 4]  296     CALL TOR 
      002DB8 CD 06 21         [ 4]  297     CALL DUPP
      002DBB                        298     _QBRAN EDOT3 
      002DBB CD 04 98         [ 4]    1     CALL QBRAN
      002DBE 2D C5                    2     .word EDOT3
      002DC0                        299     _BRAN EDOT2  
      002DC0 CD 04 B4         [ 4]    1     CALL BRAN 
      002DC3 2D AC                    2     .word EDOT2 
      002DC5                        300 EDOT3:
      002DC5 CD 06 49         [ 4]  301     CALL OVER 
      002DC8 CD 06 E7         [ 4]  302     CALL BASE 
      002DCB CD 04 E3         [ 4]  303     CALL AT 
      002DCE CD 09 17         [ 4]  304     CALL ULESS 
      002DD1                        305     _QBRAN EDOT2 
      002DD1 CD 04 98         [ 4]    1     CALL QBRAN
      002DD4 2D AC                    2     .word EDOT2
      002DD6                        306     _DOLIT '.'
      002DD6 CD 04 6F         [ 4]    1     CALL DOLIT 
      002DD9 00 2E                    2     .word '.' 
      002DDB CD 0D EB         [ 4]  307     CALL HOLD  
      002DDE CD 26 94         [ 4]  308     CALL DDIG
      002DE1 CD 2C 44         [ 4]  309     CALL FNE 
      002DE4                        310     _QBRAN EDOT4 
      002DE4 CD 04 98         [ 4]    1     CALL QBRAN
      002DE7 2D F1                    2     .word EDOT4
      002DE9                        311     _DOLIT '-'
      002DE9 CD 04 6F         [ 4]    1     CALL DOLIT 
      002DEC 00 2D                    2     .word '-' 
      002DEE CD 0D EB         [ 4]  312     CALL HOLD 
      002DF1                        313 EDOT4:       
      002DF1 CD 06 17         [ 4]  314     CALL DROP 
      002DF4 CD 0E 40         [ 4]  315     CALL EDIGS 
      002DF7 CD 0F 41         [ 4]  316     CALL TYPES
      002DFA CD 05 34         [ 4]  317     CALL RFROM 
      002DFD CD 07 D4         [ 4]  318     CALL QDUP 
      002E00                        319     _QBRAN EDOT5     
      002E00 CD 04 98         [ 4]    1     CALL QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



      002E03 2E 10                    2     .word EDOT5
      002E05                        320     _DOLIT 'E'
      002E05 CD 04 6F         [ 4]    1     CALL DOLIT 
      002E08 00 45                    2     .word 'E' 
      002E0A CD 04 36         [ 4]  321     CALL EMIT 
      002E0D CD 10 00         [ 4]  322     CALL DOT
      002E10                        323 EDOT5: 
      002E10 CD 05 34         [ 4]  324     CALL RFROM 
      002E13 CD 06 E7         [ 4]  325     CALL BASE 
      002E16 CD 04 D1         [ 4]  326     CALL STORE  
      002E19 81               [ 4]  327     RET 
                                    328 
                                    329 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                    330 ;   F. (f# -- )
                                    331 ;   print float in fixed
                                    332 ;   point format. 
                                    333 ;;;;;;;;;;;;;;;;;;;;;;;;;
      002E1A                        334     _HEADER FDOT,2,"F."
      002E1A 2D 86                    1         .word LINK 
                           002E1C     2         LINK=.
      002E1C 02                       3         .byte 2  
      002E1D 46 2E                    4         .ascii "F."
      002E1F                          5         FDOT:
      002E1F CD 06 E7         [ 4]  335     CALL BASE 
      002E22 CD 04 E3         [ 4]  336     CALL AT 
      002E25 CD 05 EA         [ 4]  337     CALL TOR 
      002E28                        338     _DOLIT 10 
      002E28 CD 04 6F         [ 4]    1     CALL DOLIT 
      002E2B 00 0A                    2     .word 10 
      002E2D CD 06 E7         [ 4]  339     CALL BASE 
      002E30 CD 04 D1         [ 4]  340     CALL STORE 
      002E33 CD 2D 03         [ 4]  341     CALL    ATEXP
      002E36 CD 06 21         [ 4]  342     CALL    DUPP  
      002E39 CD 08 EA         [ 4]  343     CALL    ABSS 
      002E3C                        344     _DOLIT  8
      002E3C CD 04 6F         [ 4]    1     CALL DOLIT 
      002E3F 00 08                    2     .word 8 
      002E41 CD 09 73         [ 4]  345     CALL    GREAT 
      002E44                        346     _QBRAN  FDOT1 
      002E44 CD 04 98         [ 4]    1     CALL QBRAN
      002E47 2E 4C                    2     .word FDOT1
      002E49 CC 2D A0         [ 2]  347     JP      EDOT0 
      002E4C                        348 FDOT1:
      002E4C CD 0F 17         [ 4]  349     CALL    SPACE 
      002E4F CD 05 EA         [ 4]  350     CALL    TOR 
      002E52 CD 2C 44         [ 4]  351     CALL    FNE 
      002E55                        352     _QBRAN  FDOT0 
      002E55 CD 04 98         [ 4]    1     CALL QBRAN
      002E58 2E 5D                    2     .word FDOT0
      002E5A CD 08 96         [ 4]  353     CALL    DNEGA 
      002E5D                        354 FDOT0: 
      002E5D CD 0D DB         [ 4]  355     CALL    BDIGS
      002E60 CD 05 45         [ 4]  356     CALL    RAT  
      002E63 CD 06 58         [ 4]  357     CALL    ZLESS 
      002E66                        358     _QBRAN  FDOT6 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



      002E66 CD 04 98         [ 4]    1     CALL QBRAN
      002E69 2E 94                    2     .word FDOT6
      002E6B                        359 FDOT2: ; e<0 
      002E6B CD 26 94         [ 4]  360     CALL    DDIG 
      002E6E CD 05 34         [ 4]  361     CALL    RFROM
      002E71 CD 0B 75         [ 4]  362     CALL    ONEP 
      002E74 CD 07 D4         [ 4]  363     CALL    QDUP 
      002E77                        364     _QBRAN  FDOT3 
      002E77 CD 04 98         [ 4]    1     CALL QBRAN
      002E7A 2E 84                    2     .word FDOT3
      002E7C CD 05 EA         [ 4]  365     CALL    TOR 
      002E7F                        366     _BRAN   FDOT2 
      002E7F CD 04 B4         [ 4]    1     CALL BRAN 
      002E82 2E 6B                    2     .word FDOT2 
      002E84                        367 FDOT3:
      002E84                        368     _DOLIT  '.' 
      002E84 CD 04 6F         [ 4]    1     CALL DOLIT 
      002E87 00 2E                    2     .word '.' 
      002E89 CD 0D EB         [ 4]  369     CALL    HOLD 
      002E8C CD 26 AD         [ 4]  370     CALL    DDIGS
      002E8F                        371     _BRAN   FDOT9  
      002E8F CD 04 B4         [ 4]    1     CALL BRAN 
      002E92 2E A9                    2     .word FDOT9 
      002E94                        372 FDOT6: ; e>=0 
      002E94                        373     _BRAN   FDOT8
      002E94 CD 04 B4         [ 4]    1     CALL BRAN 
      002E97 2E A1                    2     .word FDOT8 
      002E99                        374 FDOT7:     
      002E99                        375     _DOLIT  '0'
      002E99 CD 04 6F         [ 4]    1     CALL DOLIT 
      002E9C 00 30                    2     .word '0' 
      002E9E CD 0D EB         [ 4]  376     CALL    HOLD 
      002EA1                        377 FDOT8:
      002EA1 CD 04 83         [ 4]  378     CALL    DONXT 
      002EA4 2E 99                  379     .word   FDOT7
      002EA6 CD 26 AD         [ 4]  380     CALL    DDIGS 
      002EA9                        381 FDOT9:
      002EA9 CD 2C 44         [ 4]  382     CALL    FNE 
      002EAC                        383     _QBRAN  FDOT10 
      002EAC CD 04 98         [ 4]    1     CALL QBRAN
      002EAF 2E B9                    2     .word FDOT10
      002EB1                        384     _DOLIT '-' 
      002EB1 CD 04 6F         [ 4]    1     CALL DOLIT 
      002EB4 00 2D                    2     .word '-' 
      002EB6 CD 0D EB         [ 4]  385     CALL   HOLD 
      002EB9                        386 FDOT10:
      002EB9 CD 0E 40         [ 4]  387     CALL    EDIGS 
      002EBC CD 0F 41         [ 4]  388     CALL    TYPES 
      002EBF CD 05 34         [ 4]  389     CALL    RFROM 
      002EC2 CD 06 E7         [ 4]  390     CALL    BASE 
      002EC5 CD 04 D1         [ 4]  391     CALL    STORE 
      002EC8 81               [ 4]  392     RET 
                                    393 
                                    394 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    395 ; return parsed exponent or 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]



                                    396 ; 0 if failed
                                    397 ; at entry exprect *a=='E'    
                                    398 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002EC9                        399 parse_exponent: ; a cntr -- e -1 | 0 
      002EC9 CD 05 EA         [ 4]  400     CALL TOR   ; R: cntr 
      002ECC CD 06 21         [ 4]  401     CALL DUPP 
      002ECF CD 05 01         [ 4]  402     CALL CAT 
      002ED2                        403     _DOLIT 'E' 
      002ED2 CD 04 6F         [ 4]    1     CALL DOLIT 
      002ED5 00 45                    2     .word 'E' 
      002ED7 CD 08 F8         [ 4]  404     CALL EQUAL 
      002EDA                        405     _QBRAN 1$
      002EDA CD 04 98         [ 4]    1     CALL QBRAN
      002EDD 2F 0A                    2     .word 1$
      002EDF CD 0B 75         [ 4]  406     CALL ONEP 
      002EE2 CD 05 34         [ 4]  407     CALL RFROM  ; a cntr 
      002EE5 CD 0B 82         [ 4]  408     CALL ONEM
      002EE8 CD 06 21         [ 4]  409     CALL DUPP 
      002EEB                        410     _QBRAN 2$ ; a cntr 
      002EEB CD 04 98         [ 4]    1     CALL QBRAN
      002EEE 2F 0D                    2     .word 2$
      002EF0 CD 0B E1         [ 4]  411     CALL ZERO
      002EF3 CD 06 21         [ 4]  412     CALL DUPP 
      002EF6 CD 27 44         [ 4]  413     CALL DSWAP ; 0 0 a cntr  
      002EF9 CD 24 E0         [ 4]  414     CALL nsign 
      002EFC CD 05 EA         [ 4]  415     CALL TOR   ; R: esign  
      002EFF CD 25 0D         [ 4]  416     CALL parse_digits
      002F02                        417     _QBRAN PARSEXP_SUCCESS ; parsed to end of string 
      002F02 CD 04 98         [ 4]    1     CALL QBRAN
      002F05 2F 14                    2     .word PARSEXP_SUCCESS
                                    418 ; failed invalid character
      002F07 CD 08 26         [ 4]  419     CALL DDROP ; 0 a 
      002F0A                        420 1$: 
      002F0A CD 05 34         [ 4]  421     CALL RFROM ; sign||cntr  
      002F0D                        422 2$:
      002F0D CD 08 26         [ 4]  423     CALL DDROP  ; a cntr || a sign || 0 cntr   
      002F10 CD 0B E1         [ 4]  424     CALL ZERO   ; return only 0 
      002F13 81               [ 4]  425     RET 
      002F14                        426 PARSEXP_SUCCESS: 
      002F14 CD 08 26         [ 4]  427     CALL DDROP ; drop dhi a 
      002F17 CD 05 34         [ 4]  428     CALL RFROM ; es 
      002F1A                        429     _QBRAN 1$
      002F1A CD 04 98         [ 4]    1     CALL QBRAN
      002F1D 2F 22                    2     .word 1$
      002F1F CD 08 84         [ 4]  430     CALL NEGAT
      002F22                        431 1$:
      002F22                        432     _DOLIT -1 ; -- e -1 
      002F22 CD 04 6F         [ 4]    1     CALL DOLIT 
      002F25 FF FF                    2     .word -1 
      002F27 81               [ 4]  433     RET 
                                    434 
                                    435 
                                    436 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    437 ;   FLOAT?  ( a dlo dhi a+ cntr sign d? -- f -3 | a 0 )
                                    438 ;   called by NUMBER? 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]



                                    439 ;   convert string to float 
                                    440 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002F28                        441     _HEADER FLOATQ,5,"FLOAT?"
      002F28 2E 1C                    1         .word LINK 
                           002F2A     2         LINK=.
      002F2A 05                       3         .byte 5  
      002F2B 46 4C 4F 41 54 3F        4         .ascii "FLOAT?"
      002F31                          5         FLOATQ:
      002F31                        442     _QBRAN FLOATQ0 
      002F31 CD 04 98         [ 4]    1     CALL QBRAN
      002F34 2F 3B                    2     .word FLOATQ0
      002F36                        443     _BRAN FLOAT_ERROR  ; not a float, string start with '#'
      002F36 CD 04 B4         [ 4]    1     CALL BRAN 
      002F39 2F E0                    2     .word FLOAT_ERROR 
      002F3B                        444 FLOATQ0:
                                    445 ; BASE must be 10 
      002F3B CD 06 E7         [ 4]  446     CALL BASE 
      002F3E CD 04 E3         [ 4]  447     CALL AT 
      002F41                        448     _DOLIT 10 
      002F41 CD 04 6F         [ 4]    1     CALL DOLIT 
      002F44 00 0A                    2     .word 10 
      002F46 CD 08 F8         [ 4]  449     CALL EQUAL 
      002F49                        450     _QBRAN FLOAT_ERROR 
      002F49 CD 04 98         [ 4]    1     CALL QBRAN
      002F4C 2F E0                    2     .word FLOAT_ERROR
                                    451 ; if float next char is '.' or 'E' 
      002F4E CD 05 EA         [ 4]  452     CALL TOR ; R: sign  
      002F51 CD 05 EA         [ 4]  453     CALL TOR ; R: sign cntr 
      002F54 CD 06 21         [ 4]  454     CALL DUPP
      002F57 CD 05 01         [ 4]  455     CALL CAT 
      002F5A                        456     _DOLIT '.' 
      002F5A CD 04 6F         [ 4]    1     CALL DOLIT 
      002F5D 00 2E                    2     .word '.' 
      002F5F CD 08 F8         [ 4]  457     CALL EQUAL 
      002F62                        458     _QBRAN FLOATQ1 ; not a dot 
      002F62 CD 04 98         [ 4]    1     CALL QBRAN
      002F65 2F A0                    2     .word FLOATQ1
      002F67 CD 0B 75         [ 4]  459     CALL ONEP 
      002F6A CD 05 34         [ 4]  460     CALL RFROM  ; dlo dhi a cntr R: sign  
      002F6D CD 0B 82         [ 4]  461     CALL ONEM 
      002F70 CD 06 21         [ 4]  462     CALL DUPP 
      002F73 CD 05 EA         [ 4]  463     CALL TOR  ; R: sign cntr 
                                    464 ; parse fractional part
      002F76 CD 25 0D         [ 4]  465     CALL parse_digits ; dlo dhi a cntr -- dm a cntr 
      002F79 CD 06 21         [ 4]  466     CALL DUPP 
      002F7C CD 05 34         [ 4]  467     CALL RFROM 
      002F7F CD 06 31         [ 4]  468     CALL SWAPP 
      002F82 CD 08 D0         [ 4]  469     CALL SUBB ; fd -> fraction digits count 
      002F85 CD 05 EA         [ 4]  470     CALL TOR  ; dlo dhi a cntr R: sign fd 
      002F88 CD 06 21         [ 4]  471     CALL DUPP ; cntr cntr  
      002F8B                        472     _QBRAN 1$ ; end of string, no exponent
      002F8B CD 04 98         [ 4]    1     CALL QBRAN
      002F8E 2F 95                    2     .word 1$
      002F90                        473     _BRAN FLOATQ2
      002F90 CD 04 B4         [ 4]    1     CALL BRAN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]



      002F93 2F A9                    2     .word FLOATQ2 
      002F95 CD 06 31         [ 4]  474 1$: CALL SWAPP 
      002F98 CD 06 17         [ 4]  475     CALL DROP ; a
      002F9B                        476     _BRAN FLOATQ3        
      002F9B CD 04 B4         [ 4]    1     CALL BRAN 
      002F9E 2F B1                    2     .word FLOATQ3 
      002FA0                        477 FLOATQ1: ; must push fd==0 on RSTACK 
      002FA0 CD 05 34         [ 4]  478     CALL RFROM ; cntr 
      002FA3 CD 0B E1         [ 4]  479     CALL ZERO  ; fd 
      002FA6 CD 05 EA         [ 4]  480     CALL TOR   ; dm a cntr R: sign fd 
      002FA9                        481 FLOATQ2: 
      002FA9 CD 2E C9         [ 4]  482     CALL parse_exponent 
      002FAC                        483     _QBRAN FLOAT_ERROR0 ; exponent expected 
      002FAC CD 04 98         [ 4]    1     CALL QBRAN
      002FAF 2F DD                    2     .word FLOAT_ERROR0
      002FB1                        484 FLOATQ3: ; dm 0 || dm e  
      002FB1 CD 05 34         [ 4]  485     CALL RFROM ;  fd  
      002FB4 CD 08 D0         [ 4]  486     CALL SUBB  ; exp=e-fd 
      002FB7 CD 08 04         [ 4]  487     CALL NROT 
      002FBA CD 05 34         [ 4]  488     CALL RFROM  ; sign 
      002FBD                        489     _QBRAN FLOATQ4 
      002FBD CD 04 98         [ 4]    1     CALL QBRAN
      002FC0 2F C5                    2     .word FLOATQ4
      002FC2 CD 08 96         [ 4]  490     CALL DNEGA 
      002FC5                        491 FLOATQ4:
      002FC5 CD 07 E5         [ 4]  492     CALL ROT 
      002FC8 CD 2D 35         [ 4]  493     CALL STEXP 
      002FCB CD 07 E5         [ 4]  494     CALL ROT 
      002FCE CD 06 17         [ 4]  495     CALL DROP 
      002FD1 CD 2C B6         [ 4]  496     CALL SFN 
      002FD4 CD 2C 7F         [ 4]  497     CALL SFZ 
      002FD7                        498     _DOLIT -3 
      002FD7 CD 04 6F         [ 4]    1     CALL DOLIT 
      002FDA FF FD                    2     .word -3 
      002FDC 81               [ 4]  499     RET       
      002FDD                        500 FLOAT_ERROR0: 
      002FDD CD 28 B1         [ 4]  501     CALL DRFROM ; sign df      
      002FE0                        502 FLOAT_ERROR: 
      002FE0 CD 0C 23         [ 4]  503     CALL DEPTH 
      002FE3 CD 0B 68         [ 4]  504     CALL CELLS 
      002FE6 CD 06 01         [ 4]  505     CALL SPAT 
      002FE9 CD 06 31         [ 4]  506     CALL SWAPP 
      002FEC CD 08 46         [ 4]  507     CALL PLUS  
      002FEF CD 06 0E         [ 4]  508     CALL SPSTO 
      002FF2 CD 0B E1         [ 4]  509     CALL ZERO 
      002FF5 81               [ 4]  510     RET 
                                    511 
                                    512 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    513 ;  LSCALE ( f# -- f# )
                                    514 ;  m *=10 , e -= 1
                                    515 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002FF6                        516     _HEADER LSCALE,6,"LSCALE"
      002FF6 2F 2A                    1         .word LINK 
                           002FF8     2         LINK=.
      002FF8 06                       3         .byte 6  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]



      002FF9 4C 53 43 41 4C 45        4         .ascii "LSCALE"
      002FFF                          5         LSCALE:
      002FFF CD 2D 03         [ 4]  517     CALL ATEXP 
      003002 CD 0B EC         [ 4]  518     CALL ONE 
      003005 CD 08 D0         [ 4]  519     CALL SUBB 
      003008 CD 05 EA         [ 4]  520     CALL TOR
      00300B                        521     _DOLIT 10 
      00300B CD 04 6F         [ 4]    1     CALL DOLIT 
      00300E 00 0A                    2     .word 10 
      003010 CD 27 1E         [ 4]  522     CALL DSSTAR
      003013 CD 05 34         [ 4]  523     CALL RFROM 
      003016 CD 2D 35         [ 4]  524     CALL STEXP 
      003019 81               [ 4]  525     RET  
                                    526 
                                    527 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    528 ;  RSCALE ( f# -- f# )
                                    529 ;  m /=10 , e+=1 
                                    530 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00301A                        531     _HEADER RSCALE,6,"RSCALE"
      00301A 2F F8                    1         .word LINK 
                           00301C     2         LINK=.
      00301C 06                       3         .byte 6  
      00301D 52 53 43 41 4C 45        4         .ascii "RSCALE"
      003023                          5         RSCALE:
      003023 CD 2D 03         [ 4]  532     CALL ATEXP 
      003026 CD 0B EC         [ 4]  533     CALL ONE 
      003029 CD 08 46         [ 4]  534     CALL PLUS 
      00302C CD 05 EA         [ 4]  535     CALL TOR 
      00302F                        536     _DOLIT 10 
      00302F CD 04 6F         [ 4]    1     CALL DOLIT 
      003032 00 0A                    2     .word 10 
      003034 CD 26 53         [ 4]  537     CALL DSLMOD 
      003037 CD 07 E5         [ 4]  538     CALL ROT 
      00303A CD 06 17         [ 4]  539     CALL DROP 
      00303D CD 05 34         [ 4]  540     CALL RFROM 
      003040 CD 2D 35         [ 4]  541     CALL STEXP 
      003043 81               [ 4]  542     RET 
                                    543 
                                    544 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    545 ;  SCALEUP ( ud u1 u2 -- ud*10 u1 u2 )
                                    546 ;  while (ud<=0xcccccccc && u1<u2 ){
                                    547 ;        ud*10;
                                    548 ;        u2--;
                                    549 ;  }  
                                    550 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003044                        551 SCALEUP:
      003044 CD 08 31         [ 4]  552     CALL DDUP
      003047 CD 09 35         [ 4]  553     CALL LESS  
      00304A                        554     _QBRAN SCALEUP3
      00304A CD 04 98         [ 4]    1     CALL QBRAN
      00304D 30 7A                    2     .word SCALEUP3
      00304F CD 28 93         [ 4]  555     CALL DTOR   ; R: u1 u2  
      003052 CD 08 31         [ 4]  556     CALL DDUP 
      003055                        557     _DOLIT 0XCCCC 
      003055 CD 04 6F         [ 4]    1     CALL DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]



      003058 CC CC                    2     .word 0XCCCC 
      00305A                        558     _DOLIT 0XCCC 
      00305A CD 04 6F         [ 4]    1     CALL DOLIT 
      00305D 0C CC                    2     .word 0XCCC 
      00305F CD 28 56         [ 4]  559     CALL DGREAT  
      003062                        560     _TBRAN SCALEUP2 
      003062 CD 04 A6         [ 4]    1     CALL TBRAN 
      003065 30 77                    2     .word SCALEUP2 
      003067                        561     _DOLIT 10 
      003067 CD 04 6F         [ 4]    1     CALL DOLIT 
      00306A 00 0A                    2     .word 10 
      00306C CD 26 FC         [ 4]  562     CALL UDSSTAR 
      00306F CD 28 B1         [ 4]  563     CALL DRFROM 
      003072 CD 0B 82         [ 4]  564     CALL ONEM
      003075 20 CD            [ 2]  565     JRA SCALEUP
      003077                        566 SCALEUP2:
      003077 CD 28 B1         [ 4]  567     CALL DRFROM
      00307A                        568 SCALEUP3: 
      00307A 81               [ 4]  569     RET 
                                    570 
                                    571 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    572 ; SCALEDOWN ( ud u1 u2 -- ud u1 u2 )
                                    573 ;  whhile (ud && u1>u2 ){ 
                                    574 ;     ud/10;
                                    575 ;     u2++;
                                    576 ;  } 
                                    577 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00307B                        578 SCALEDOWN: 
      00307B CD 08 31         [ 4]  579     CALL DDUP 
      00307E CD 09 73         [ 4]  580     CALL GREAT 
      003081                        581     _QBRAN SCALDN3 
      003081 CD 04 98         [ 4]    1     CALL QBRAN
      003084 30 AA                    2     .word SCALDN3
      003086 CD 28 93         [ 4]  582     CALL DTOR 
      003089 CD 08 31         [ 4]  583     CALL DDUP 
      00308C CD 28 19         [ 4]  584     CALL DZEQUAL 
      00308F                        585     _TBRAN SCALDN2  
      00308F CD 04 A6         [ 4]    1     CALL TBRAN 
      003092 30 A7                    2     .word SCALDN2 
      003094                        586     _DOLIT 10
      003094 CD 04 6F         [ 4]    1     CALL DOLIT 
      003097 00 0A                    2     .word 10 
      003099 CD 0B E1         [ 4]  587     CALL ZERO  
      00309C CD 2B 47         [ 4]  588     CALL DSLASH 
      00309F CD 28 B1         [ 4]  589     CALL DRFROM 
      0030A2 CD 0B 75         [ 4]  590     CALL ONEP  
      0030A5 20 D4            [ 2]  591     JRA SCALEDOWN 
      0030A7                        592 SCALDN2:
      0030A7 CD 28 B1         [ 4]  593     CALL DRFROM 
      0030AA                        594 SCALDN3:
      0030AA 81               [ 4]  595     RET 
                                    596 
                                    597 
                                    598 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    599 ;  F-ALIGN ( f#1 f#2 -- m1 m2 e )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]



                                    600 ;  align to same exponent 
                                    601 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0030AB                        602     _HEADER FALIGN,7,"F-ALIGN"
      0030AB 30 1C                    1         .word LINK 
                           0030AD     2         LINK=.
      0030AD 07                       3         .byte 7  
      0030AE 46 2D 41 4C 49 47 4E     4         .ascii "F-ALIGN"
      0030B5                          5         FALIGN:
      0030B5 CD 2D 03         [ 4]  603     CALL ATEXP 
      0030B8 CD 05 EA         [ 4]  604     CALL TOR 
      0030BB CD 27 44         [ 4]  605     CALL DSWAP 
      0030BE CD 2D 03         [ 4]  606     CALL ATEXP 
      0030C1 CD 05 EA         [ 4]  607     CALL TOR    ; m2 m1 R: e2 e1 
      0030C4 CD 27 44         [ 4]  608     CALL DSWAP 
      0030C7 CD 28 C9         [ 4]  609     CALL DRAT 
      0030CA CD 08 F8         [ 4]  610     CALL EQUAL 
      0030CD                        611     _TBRAN FALGN8
      0030CD CD 04 A6         [ 4]    1     CALL TBRAN 
      0030D0 31 52                    2     .word FALGN8 
                                    612 ; scaleup the largest float 
                                    613 ; but limit mantissa <=0xccccccc
                                    614 ; to avoid mantissa overflow     
      0030D2 CD 28 C9         [ 4]  615     CALL DRAT ; m1 m2 e2 e1 
      0030D5 CD 09 73         [ 4]  616     CALL GREAT 
      0030D8                        617     _QBRAN FALGN4 ; e2<e1 
      0030D8 CD 04 98         [ 4]    1     CALL QBRAN
      0030DB 30 EE                    2     .word FALGN4
                                    618 ; e2>e1 then scale up m2   
      0030DD CD 28 B1         [ 4]  619     CALL DRFROM 
      0030E0 CD 06 31         [ 4]  620     CALL SWAPP 
      0030E3 CD 30 44         [ 4]  621     CALL SCALEUP 
      0030E6 CD 06 31         [ 4]  622     CALL SWAPP 
      0030E9 CD 28 93         [ 4]  623     CALL DTOR 
      0030EC 20 0F            [ 2]  624     JRA FALGN6
      0030EE                        625 FALGN4: ; e2<e1 then scaleup m1 
      0030EE CD 27 44         [ 4]  626     CALL DSWAP 
      0030F1 CD 28 B1         [ 4]  627     CALL DRFROM 
      0030F4 CD 30 44         [ 4]  628     CALL SCALEUP 
      0030F7 CD 28 93         [ 4]  629     CALL DTOR
      0030FA CD 27 44         [ 4]  630     CALL DSWAP 
                                    631 ; check again for e2==e1 
                                    632 ; if scaleup was not enough 
                                    633 ; to equalize exponent then
                                    634 ; scaledown smallest float     
      0030FD                        635 FALGN6: 
      0030FD CD 28 C9         [ 4]  636     CALL DRAT 
      003100 CD 08 F8         [ 4]  637     CALL EQUAL 
      003103                        638     _TBRAN FALGN8 
      003103 CD 04 A6         [ 4]    1     CALL TBRAN 
      003106 31 52                    2     .word FALGN8 
                                    639 ; e2!=e1 need to scale down smallest 
      003108 CD 28 C9         [ 4]  640     CALL DRAT 
      00310B CD 09 73         [ 4]  641     CALL GREAT 
      00310E                        642     _QBRAN FALGN7 ; e2<e1 
      00310E CD 04 98         [ 4]    1     CALL QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]



      003111 31 24                    2     .word FALGN7
                                    643 ; e2>e1 scaledown m1 
      003113 CD 27 44         [ 4]  644     CALL DSWAP 
      003116 CD 28 B1         [ 4]  645     CALL DRFROM 
      003119 CD 30 7B         [ 4]  646     CALL SCALEDOWN
      00311C CD 06 31         [ 4]  647     CALL SWAPP 
      00311F CD 28 93         [ 4]  648     CALL DTOR 
      003122 20 0F            [ 2]  649     JRA FALGN71  
      003124                        650 FALGN7: ; e2<e1 scaledown m2 
      003124 CD 28 B1         [ 4]  651     CALL DRFROM 
      003127 CD 06 31         [ 4]  652     CALL SWAPP 
      00312A CD 30 7B         [ 4]  653     CALL SCALEDOWN 
      00312D CD 06 31         [ 4]  654     CALL SWAPP 
      003130 CD 28 93         [ 4]  655     CALL DTOR 
                                    656 ; after scaledown if e2!=e1 
                                    657 ; this imply that one of mantissa 
                                    658 ; as been nullified by scalling 
                                    659 ; hence keep largest exponent 
      003133                        660 FALGN71:
      003133 CD 28 C9         [ 4]  661     CALL DRAT 
      003136 CD 08 F8         [ 4]  662     CALL EQUAL
      003139                        663     _TBRAN FALGN8 
      003139 CD 04 A6         [ 4]    1     CALL TBRAN 
      00313C 31 52                    2     .word FALGN8 
      00313E CD 28 B1         [ 4]  664     CALL DRFROM 
      003141 CD 08 31         [ 4]  665     CALL DDUP 
      003144 CD 09 73         [ 4]  666     CALL GREAT 
      003147                        667     _TBRAN FALGN72
      003147 CD 04 A6         [ 4]    1     CALL TBRAN 
      00314A 31 4F                    2     .word FALGN72 
      00314C CD 06 31         [ 4]  668     CALL SWAPP     
      00314F                        669 FALGN72:
      00314F CD 28 93         [ 4]  670     CALL DTOR  ; now smallest e is at rtop.
      003152                        671 FALGN8:
      003152 CD 28 B1         [ 4]  672     CALL DRFROM 
      003155 CD 06 17         [ 4]  673     CALL DROP 
      003158 81               [ 4]  674     RET 
                                    675 
                                    676 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    677 ;   F+ ( f#1 f#2 -- f#1+f#2 )
                                    678 ;   float addition 
                                    679 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003159                        680     _HEADER FPLUS,2,"F+"
      003159 30 AD                    1         .word LINK 
                           00315B     2         LINK=.
      00315B 02                       3         .byte 2  
      00315C 46 2B                    4         .ascii "F+"
      00315E                          5         FPLUS:
      00315E CD 30 B5         [ 4]  681     CALL FALIGN 
      003161 CD 05 EA         [ 4]  682     CALL TOR 
      003164 CD 2B 56         [ 4]  683     CALL DPLUS
      003167 CD 26 39         [ 4]  684     CALL DSIGN 
      00316A CD 05 EA         [ 4]  685     CALL TOR 
      00316D CD 26 28         [ 4]  686     CALL DABS 
      003170 CD 31 D3         [ 4]  687     CALL SCALETOM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]



      003173 CD 05 34         [ 4]  688     CALL RFROM 
      003176                        689     _QBRAN FPLUS1 
      003176 CD 04 98         [ 4]    1     CALL QBRAN
      003179 31 7E                    2     .word FPLUS1
      00317B CD 08 96         [ 4]  690     CALL DNEGA  
      00317E                        691 FPLUS1: 
      00317E CD 07 E5         [ 4]  692     CALL ROT   
      003181 CD 05 34         [ 4]  693     CALL RFROM
      003184 CD 08 46         [ 4]  694     CALL PLUS  
      003187 CD 2D 35         [ 4]  695     CALL STEXP 
      00318A 81               [ 4]  696     RET 
                                    697 
                                    698 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    699 ;  F- ( f#1 f#2 -- f#1-f#2 )
                                    700 ;  substraction 
                                    701 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00318B                        702     _HEADER FSUB,2,"F-"
      00318B 31 5B                    1         .word LINK 
                           00318D     2         LINK=.
      00318D 02                       3         .byte 2  
      00318E 46 2D                    4         .ascii "F-"
      003190                          5         FSUB:
      003190 CD 30 B5         [ 4]  703     CALL FALIGN 
      003193 CD 05 EA         [ 4]  704     CALL TOR 
      003196 CD 2B 88         [ 4]  705     CALL DSUB
      003199 CD 26 39         [ 4]  706     CALL DSIGN 
      00319C CD 05 EA         [ 4]  707     CALL TOR 
      00319F CD 26 28         [ 4]  708     CALL DABS 
      0031A2 CD 31 D3         [ 4]  709     CALL SCALETOM 
      0031A5 CD 05 34         [ 4]  710     CALL RFROM 
      0031A8                        711     _QBRAN FSUB1 
      0031A8 CD 04 98         [ 4]    1     CALL QBRAN
      0031AB 31 B0                    2     .word FSUB1
      0031AD CD 08 96         [ 4]  712     CALL DNEGA 
      0031B0                        713 FSUB1:
      0031B0 CD 07 E5         [ 4]  714     CALL ROT 
      0031B3 CD 05 34         [ 4]  715     CALL RFROM
      0031B6 CD 08 46         [ 4]  716     CALL PLUS  
      0031B9 CD 2D 35         [ 4]  717     CALL STEXP 
      0031BC 81               [ 4]  718     RET 
                                    719 
                                    720 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    721 ; /mod10  ( m -- m/10 r )
                                    722 ; divide mantissa by 10 
                                    723 ; return quotient and remainder 
                                    724 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0031BD                        725 UMOD10:
      0031BD                        726     _DOLIT 10 
      0031BD CD 04 6F         [ 4]    1     CALL DOLIT 
      0031C0 00 0A                    2     .word 10 
      0031C2 CD 26 53         [ 4]  727     CALL DSLMOD
      0031C5 CD 07 E5         [ 4]  728     CALL ROT  
      0031C8 81               [ 4]  729     RET 
                                    730 
                                    731 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]



                                    732 ;   SCALE>M ( ud1 -- e ud2 )
                                    733 ;   scale down a double  
                                    734 ;   by repeated d/10
                                    735 ;   until ud<=MAX_MANTISSA   
                                    736 ;   e is log10 exponent of scaled down
                                    737 ;   ud2 is scaled down ud1 
                                    738 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0031C9                        739     _HEADER SCALETOM,7,"SCALE>M"
      0031C9 31 8D                    1         .word LINK 
                           0031CB     2         LINK=.
      0031CB 07                       3         .byte 7  
      0031CC 53 43 41 4C 45 3E 4D     4         .ascii "SCALE>M"
      0031D3                          5         SCALETOM:
      0031D3 CD 0B E1         [ 4]  740     CALL ZERO 
      0031D6 CD 08 04         [ 4]  741     CALL NROT 
      0031D9                        742 SCAL1:
      0031D9 CD 06 21         [ 4]  743     CALL DUPP 
      0031DC                        744     _DOLIT 0X7F 
      0031DC CD 04 6F         [ 4]    1     CALL DOLIT 
      0031DF 00 7F                    2     .word 0X7F 
      0031E1 CD 09 54         [ 4]  745     CALL UGREAT 
      0031E4                        746     _QBRAN SCAL2  
      0031E4 CD 04 98         [ 4]    1     CALL QBRAN
      0031E7 31 FD                    2     .word SCAL2
      0031E9 CD 31 BD         [ 4]  747     CALL UMOD10 
      0031EC CD 06 17         [ 4]  748     CALL DROP 
      0031EF CD 07 E5         [ 4]  749     CALL ROT 
      0031F2 CD 0B 75         [ 4]  750     CALL ONEP 
      0031F5 CD 08 04         [ 4]  751     CALL NROT  
      0031F8                        752     _BRAN SCAL1 
      0031F8 CD 04 B4         [ 4]    1     CALL BRAN 
      0031FB 31 D9                    2     .word SCAL1 
      0031FD                        753 SCAL2: 
      0031FD 81               [ 4]  754     RET 
                                    755 
                                    756 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    757 ;  UDIV10 ( ut -- ut )
                                    758 ;  divide a 48 bits uint by 10 
                                    759 ;  used to scale down MM* 
                                    760 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0031FE                        761 UDIV10:
      0031FE 90 93            [ 1]  762     LDW Y,X 
      003200 90 FE            [ 2]  763     LDW Y,(Y)
      003202 A6 0A            [ 1]  764     LD A,#10 
      003204 90 62            [ 2]  765     DIV Y,A 
      003206 FF               [ 2]  766     LDW (X),Y 
      003207 90 95            [ 1]  767     LD YH,A 
      003209 E6 02            [ 1]  768     LD A,(2,X)
      00320B 90 97            [ 1]  769     LD YL,A 
      00320D A6 0A            [ 1]  770     LD A,#10 
      00320F 90 62            [ 2]  771     DIV Y,A 
      003211 90 95            [ 1]  772     LD YH,A 
      003213 90 9F            [ 1]  773     LD A,YL 
      003215 E7 02            [ 1]  774     LD (2,X),A 
      003217 E6 03            [ 1]  775     LD A,(3,X)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]



      003219 90 97            [ 1]  776     LD YL,A 
      00321B A6 0A            [ 1]  777     LD A,#10 
      00321D 90 62            [ 2]  778     DIV Y,A 
      00321F 90 95            [ 1]  779     LD YH,A 
      003221 90 9F            [ 1]  780     LD A,YL 
      003223 E7 03            [ 1]  781     LD (3,X),A 
      003225 E6 04            [ 1]  782     LD A,(4,X)
      003227 90 97            [ 1]  783     LD YL,A 
      003229 A6 0A            [ 1]  784     LD A,#10 
      00322B 90 62            [ 2]  785     DIV Y,A 
      00322D 90 95            [ 1]  786     LD YH,A 
      00322F 90 9F            [ 1]  787     LD A,YL 
      003231 E7 04            [ 1]  788     LD (4,X),A 
      003233 E6 05            [ 1]  789     LD A,(5,X)
      003235 90 97            [ 1]  790     LD YL,A 
      003237 A6 0A            [ 1]  791     LD A,#10 
      003239 90 62            [ 2]  792     DIV Y,A 
      00323B 90 9F            [ 1]  793     LD A,YL 
      00323D E7 05            [ 1]  794     LD (5,X),A 
      00323F 81               [ 4]  795     RET 
                                    796 
                                    797 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    798 ;   MM* ( m1 m2 -- m3 e )
                                    799 ;   mantissa product 
                                    800 ;  scale down to 23 bits 
                                    801 ;   e  is log10 scaling factor.
                                    802 ;   The maximum product size 
                                    803 ;   before scaling is 46 bits .
                                    804 ;   UDIV10 is used to scale down.  
                                    805 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003240                        806     _HEADER MMSTAR,3,"MM*"
      003240 31 CB                    1         .word LINK 
                           003242     2         LINK=.
      003242 03                       3         .byte 3  
      003243 4D 4D 2A                 4         .ascii "MM*"
      003246                          5         MMSTAR:
      003246 CD 08 31         [ 4]  807     CALL DDUP
      003249 CD 28 19         [ 4]  808     CALL DZEQUAL
      00324C                        809     _TBRAN MMSTA2
      00324C CD 04 A6         [ 4]    1     CALL TBRAN 
      00324F 32 5C                    2     .word MMSTA2 
      003251                        810 MMSTA1:
      003251 CD 29 5A         [ 4]  811     CALL DOVER 
      003254 CD 28 19         [ 4]  812     CALL DZEQUAL 
      003257                        813     _QBRAN MMSTA3 
      003257 CD 04 98         [ 4]    1     CALL QBRAN
      00325A 32 67                    2     .word MMSTA3
      00325C                        814 MMSTA2: ; ( -- 0 0 0 )
      00325C 1C 00 02         [ 2]  815     ADDW X,#2 
      00325F 90 5F            [ 1]  816     CLRW Y 
      003261 FF               [ 2]  817     LDW (X),Y 
      003262 EF 02            [ 2]  818     LDW (2,X),Y
      003264 EF 04            [ 2]  819     LDW (4,X),Y 
      003266 81               [ 4]  820     RET 
      003267                        821 MMSTA3:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]



      003267 CD 26 39         [ 4]  822     CALL DSIGN 
      00326A CD 05 EA         [ 4]  823     CALL TOR    ; R: m2sign 
      00326D CD 26 28         [ 4]  824     CALL DABS   ; m1 um2 
      003270 CD 27 44         [ 4]  825     CALL DSWAP  ; um2 m1 
      003273 CD 26 39         [ 4]  826     CALL DSIGN  ; um2 m1 m1sign 
      003276 CD 05 34         [ 4]  827     CALL RFROM 
      003279 CD 06 A7         [ 4]  828     CALL XORR 
      00327C CD 05 EA         [ 4]  829     CALL TOR   ; R: product_sign 
      00327F CD 26 28         [ 4]  830     CALL DABS  ; um2 um1  
      003282 CD 28 93         [ 4]  831     CALL DTOR  ; um2 
      003285 CD 06 21         [ 4]  832     CALL DUPP  ; um2 um2hi 
      003288 CD 05 45         [ 4]  833     CALL RAT   ; um2 um2hi um1hi
                                    834 ; first partial product  
                                    835 ; pd1=um2hi*um1hi 
      00328B CD 0A F4         [ 4]  836     CALL STAR 
      00328E CD 0B E1         [ 4]  837     CALL ZERO 
      003291 CD 06 31         [ 4]  838     CALL SWAPP ; pd1<<16  
      003294 CD 27 44         [ 4]  839     CALL DSWAP ; pd1 um2 
      003297 CD 06 49         [ 4]  840     CALL OVER  ; pd1 um2 um2lo 
      00329A CD 05 34         [ 4]  841     CALL RFROM ; pd1 um2 um2lo um1hi 
                                    842 ; pd2=um2lo*um1hi 
      00329D CD 0A AA         [ 4]  843     CALL UMSTA ; pd1 um2 pd2 
      0032A0 CD 27 44         [ 4]  844     CALL DSWAP ; pd1 pd2 um2 
      0032A3 CD 05 45         [ 4]  845     CALL RAT   ; pd1 pd2 um2 um1lo 
                                    846 ; pd3= um2hi*um1lo 
      0032A6 CD 0A AA         [ 4]  847     CALL UMSTA ; pd1 pd2 um2lo pd3 
      0032A9 CD 07 E5         [ 4]  848     CALL ROT ; pd1 pd2 pd3 um2lo 
      0032AC CD 05 EA         [ 4]  849     CALL TOR ; pd1 pd2 pd3 R: psign um1lo um2lo 
                                    850 ; pd1+pd2+pd3  pd1
      0032AF CD 2B 56         [ 4]  851     CALL DPLUS 
      0032B2 CD 2B 56         [ 4]  852     CALL DPLUS  
      0032B5 CD 28 B1         [ 4]  853     CALL DRFROM ; triple um2lo um1lo 
                                    854 ; last partial product um2lo*um1lo 
      0032B8 CD 0A AA         [ 4]  855     CALL UMSTA ; prod pd4 
                                    856 ; mm*=prod<<16+pd4  
      0032BB CD 28 93         [ 4]  857     CALL DTOR ;   R: psign pd4lo pd4hi  
                                    858  ; add pd4hi to prodlo and propagate carry 
      0032BE 90 93            [ 1]  859     LDW Y,X 
      0032C0 90 EE 02         [ 2]  860     LDW Y,(2,Y)  ; prodlo 
      0032C3 72 F9 01         [ 2]  861     ADDW Y,(1,SP)  ; prodlo+pd4hi 
      0032C6 17 01            [ 2]  862     LDW (1,SP),Y    ; plo phi  
      0032C8 90 93            [ 1]  863     LDW Y,X
      0032CA 90 FE            [ 2]  864     LDW Y,(Y) ; prodhi  
      0032CC 24 04            [ 1]  865     JRNC MMSTA4
      0032CE 72 A9 00 01      [ 2]  866     ADDW Y,#1 ; add carry 
      0032D2                        867 MMSTA4:     
      0032D2 1D 00 02         [ 2]  868     SUBW X,#2 
      0032D5 FF               [ 2]  869     LDW (X),Y 
      0032D6 90 85            [ 2]  870     POPW Y 
      0032D8 EF 02            [ 2]  871     LDW (2,X),Y 
      0032DA 90 85            [ 2]  872     POPW Y 
      0032DC EF 04            [ 2]  873     LDW (4,X),Y
      0032DE CD 0B E1         [ 4]  874     CALL ZERO 
      0032E1 CD 05 EA         [ 4]  875     CALL TOR 
      0032E4                        876 MMSTA5:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 180.
Hexadecimal [24-Bits]



      0032E4 CD 07 D4         [ 4]  877     CALL QDUP 
      0032E7                        878     _QBRAN MMSTA6 
      0032E7 CD 04 98         [ 4]    1     CALL QBRAN
      0032EA 32 FD                    2     .word MMSTA6
      0032EC CD 31 FE         [ 4]  879     CALL UDIV10 
      0032EF CD 05 34         [ 4]  880     CALL RFROM 
      0032F2 CD 0B 75         [ 4]  881     CALL ONEP 
      0032F5 CD 05 EA         [ 4]  882     CALL TOR 
      0032F8                        883     _BRAN MMSTA5 
      0032F8 CD 04 B4         [ 4]    1     CALL BRAN 
      0032FB 32 E4                    2     .word MMSTA5 
                                    884 ; now scale to double 
                                    885 ; scale further <= MAX_MANTISSA 
      0032FD                        886 MMSTA6: 
      0032FD CD 05 34         [ 4]  887     CALL RFROM 
      003300 CD 08 04         [ 4]  888     CALL NROT 
      003303 CD 31 D3         [ 4]  889     CALL SCALETOM
      003306 CD 28 93         [ 4]  890     CALL DTOR 
      003309 CD 08 46         [ 4]  891     CALL PLUS 
      00330C CD 28 B1         [ 4]  892     CALL DRFROM 
      00330F CD 05 34         [ 4]  893     CALL RFROM
      003312                        894     _QBRAN MMSTA7
      003312 CD 04 98         [ 4]    1     CALL QBRAN
      003315 33 1A                    2     .word MMSTA7
      003317 CD 08 96         [ 4]  895     CALL DNEGA
      00331A                        896 MMSTA7:
      00331A CD 07 E5         [ 4]  897     CALL ROT ; m e 
      00331D 81               [ 4]  898     RET 
                                    899 
                                    900 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    901 ;    F* ( f#1 f#2 -- f#3 )
                                    902 ;    float product 
                                    903 ;    f#3=f#1 * f#2 
                                    904 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00331E                        905     _HEADER FSTAR,2,"F*"
      00331E 32 42                    1         .word LINK 
                           003320     2         LINK=.
      003320 02                       3         .byte 2  
      003321 46 2A                    4         .ascii "F*"
      003323                          5         FSTAR:
      003323 CD 2D 03         [ 4]  906     CALL ATEXP ; f#1 m2 e2 
      003326 CD 05 EA         [ 4]  907     CALL TOR   
      003329 CD 27 44         [ 4]  908     CALL DSWAP ; m2 f#1
      00332C CD 2D 03         [ 4]  909     CALL ATEXP ; m2 m1 e1 
      00332F CD 05 34         [ 4]  910     CALL RFROM ; m2 m1 e1 e2 
      003332 CD 08 46         [ 4]  911     CALL PLUS  ; m2 m1 e 
      003335 CD 05 EA         [ 4]  912     CALL TOR   ; m2 m1 R: e 
      003338 CD 32 46         [ 4]  913     CALL MMSTAR ; m2*m1 e   
      00333B CD 05 34         [ 4]  914     CALL RFROM 
      00333E CD 08 46         [ 4]  915     CALL PLUS 
      003341 CD 2D 35         [ 4]  916     CALL STEXP ; f#3 
      003344 81               [ 4]  917     RET 
                                    918 
                                    919 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    920 ;  F/ ( f#1 f#2 -- f#3 )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 181.
Hexadecimal [24-Bits]



                                    921 ;  float division
                                    922 ;  f#3 = f#1/f#2
                                    923 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003345                        924     _HEADER FSLASH,2,"F/"
      003345 33 20                    1         .word LINK 
                           003347     2         LINK=.
      003347 02                       3         .byte 2  
      003348 46 2F                    4         .ascii "F/"
      00334A                          5         FSLASH:
      00334A CD 2D 03         [ 4]  925     CALL ATEXP  ; f#1 m2 e2 
      00334D CD 05 EA         [ 4]  926     CALL TOR    ; f#1 m2   R: e2 
      003350 CD 26 39         [ 4]  927     CALL DSIGN  ; f#1 m2 m2sign 
      003353 CD 05 EA         [ 4]  928     CALL TOR    ; F#1 m2 R: e2 m2s 
      003356 CD 26 28         [ 4]  929     CALL DABS   ; F#1 um2 
      003359 CD 27 44         [ 4]  930     CALL DSWAP  ; m2 f#1 
      00335C CD 2D 03         [ 4]  931     CALL ATEXP  ; m2 m1 e1 
      00335F CD 0B EC         [ 4]  932     CALL ONE    ; e2 slot on rstack  
      003362 CD 05 A3         [ 4]  933     CALL NRAT   ; m2 m1 e1 e2 
      003365 CD 08 D0         [ 4]  934     CALL SUBB   ; m2 m1 e 
      003368 CD 0B EC         [ 4]  935     CALL ONE    ; e slot on rstack 
      00336B CD 05 C4         [ 4]  936     CALL NRSTO  ; m2 m1 R: e m2s 
      00336E CD 26 39         [ 4]  937     CALL DSIGN  ; m2 m1 m1sign 
      003371 CD 05 34         [ 4]  938     CALL RFROM  ; m2 m1 m1s m2s  
      003374 CD 06 A7         [ 4]  939     CALL XORR   ; m2 m1 quot_sign R: e 
      003377 CD 05 34         [ 4]  940     CALL RFROM   
      00337A CD 28 93         [ 4]  941     CALL DTOR   ; m2 m1 R: qs e  
      00337D CD 26 28         [ 4]  942     CALL DABS   ; um2 um1 R: qs e  
      003380 CD 27 44         [ 4]  943     CALL DSWAP  ; m1 m2 R: qs e
      003383 CD 08 31         [ 4]  944     CALL DDUP  ; m1 m2 m2 R: qs e
      003386 CD 28 93         [ 4]  945     CALL DTOR  ; m1 m2 R: qs e m2 ( keep divisor need later ) 
      003389 CD 2A 65         [ 4]  946     CALL UDSLMOD ; remainder m1/m2 R: e m2 
      00338C                        947 FSLASH1: 
      00338C CD 29 5A         [ 4]  948     CALL DOVER ; if remainder null done 
      00338F CD 28 19         [ 4]  949     CALL DZEQUAL 
      003392                        950     _TBRAN FSLASH8 
      003392 CD 04 A6         [ 4]    1     CALL TBRAN 
      003395 33 F2                    2     .word FSLASH8 
                                    951 ; get fractional digits from remainder until mantissa saturate
                                    952 ; remainder mantissa R: e divisor 
                                    953 ; check for mantissa saturation 
      003397 CD 08 31         [ 4]  954     CALL DDUP 
      00339A                        955     _DOLIT 0XCCCC 
      00339A CD 04 6F         [ 4]    1     CALL DOLIT 
      00339D CC CC                    2     .word 0XCCCC 
      00339F                        956     _DOLIT 0xC
      00339F CD 04 6F         [ 4]    1     CALL DOLIT 
      0033A2 00 0C                    2     .word 0xC 
      0033A4 CD 28 56         [ 4]  957     CALL DGREAT 
      0033A7                        958     _TBRAN FSLASH8 ; another loop would result in mantissa overflow 
      0033A7 CD 04 A6         [ 4]    1     CALL TBRAN 
      0033AA 33 F2                    2     .word FSLASH8 
                                    959 ; multiply mantissa by 10 
      0033AC                        960     _DOLIT 10 
      0033AC CD 04 6F         [ 4]    1     CALL DOLIT 
      0033AF 00 0A                    2     .word 10 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 182.
Hexadecimal [24-Bits]



      0033B1 CD 0B E1         [ 4]  961     CALL ZERO 
      0033B4 CD 2A 02         [ 4]  962     CALL DSTAR 
                                    963 ; mutliply remainder by 10     
      0033B7 CD 27 44         [ 4]  964     CALL DSWAP 
      0033BA                        965     _DOLIT 10 
      0033BA CD 04 6F         [ 4]    1     CALL DOLIT 
      0033BD 00 0A                    2     .word 10 
      0033BF CD 0B E1         [ 4]  966     CALL ZERO 
      0033C2 CD 2A 02         [ 4]  967     CALL DSTAR 
                                    968 ; divide remainder by m2     
      0033C5 CD 28 C9         [ 4]  969     CALL DRAT  ; mantissa remainder divisor R: e divisor 
      0033C8 CD 2A 65         [ 4]  970     CALL UDSLMOD ; mantissa dr dq R: qs e divisor 
      0033CB CD 27 44         [ 4]  971     CALL DSWAP ; mantissa frac_digit remainder R: qs e divisor  
      0033CE CD 28 93         [ 4]  972     CALL DTOR  ; mantissa frac_digit R: qs e divisor remainder 
      0033D1 CD 2B 56         [ 4]  973     CALL DPLUS ; mantissa+frac_digit 
      0033D4 CD 28 B1         [ 4]  974     CALL DRFROM ; mantissa remainder R: qs e divisor  
      0033D7 CD 27 44         [ 4]  975     CALL DSWAP  ; remainder mantissa  
                                    976 ; increment e 
      0033DA                        977     _DOLIT 2    ; e slot on rstack 
      0033DA CD 04 6F         [ 4]    1     CALL DOLIT 
      0033DD 00 02                    2     .word 2 
      0033DF CD 05 A3         [ 4]  978     CALL NRAT   ;  2 NR@ -- e 
      0033E2 CD 0B 75         [ 4]  979     CALL ONEP   ; increment exponent 
      0033E5                        980     _DOLIT 2 
      0033E5 CD 04 6F         [ 4]    1     CALL DOLIT 
      0033E8 00 02                    2     .word 2 
      0033EA CD 05 C4         [ 4]  981     CALL NRSTO  ; e 2 NR! , update e on rstack     
      0033ED                        982     _BRAN FSLASH1
      0033ED CD 04 B4         [ 4]    1     CALL BRAN 
      0033F0 33 8C                    2     .word FSLASH1 
      0033F2                        983 FSLASH8: ; remainder mantissa R: qs e divisor 
      0033F2 CD 27 44         [ 4]  984     CALL DSWAP  
      0033F5 CD 08 26         [ 4]  985     CALL DDROP  ; drop remainder     
      0033F8 CD 28 B1         [ 4]  986     CALL DRFROM
      0033FB CD 08 26         [ 4]  987     CALL DDROP  ; drop divisor 
      0033FE CD 15 BA         [ 4]  988     CALL JFETCH    ; quotient sign 
      003401                        989     _QBRAN FSLASH9 
      003401 CD 04 98         [ 4]    1     CALL QBRAN
      003404 34 09                    2     .word FSLASH9
      003406 CD 08 96         [ 4]  990     CALL DNEGA  
      003409                        991 FSLASH9:
      003409 CD 05 34         [ 4]  992     CALL RFROM  ; exponent 
      00340C CD 2D 35         [ 4]  993     CALL STEXP 
      00340F CD 05 34         [ 4]  994     CALL RFROM 
      003412 CD 06 17         [ 4]  995     CALL DROP ; drop qs 
      003415 81               [ 4]  996     RET 
                                    997 
                                    998 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    999 ;   D>F  ( # -- f# )
                                   1000 ;   convert double to float 
                                   1001 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003416                       1002     _HEADER DTOF,3,"D>F"
      003416 33 47                    1         .word LINK 
                           003418     2         LINK=.
      003418 03                       3         .byte 3  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 183.
Hexadecimal [24-Bits]



      003419 44 3E 46                 4         .ascii "D>F"
      00341C                          5         DTOF:
      00341C CD 26 39         [ 4] 1003     CALL DSIGN 
      00341F CD 05 EA         [ 4] 1004     CALL TOR
      003422 CD 26 28         [ 4] 1005     CALL DABS  
      003425                       1006 DTOF1:      
      003425 CD 31 D3         [ 4] 1007     CALL SCALETOM 
      003428 CD 05 34         [ 4] 1008     CALL RFROM
      00342B                       1009     _QBRAN DTOF2 
      00342B CD 04 98         [ 4]    1     CALL QBRAN
      00342E 34 33                    2     .word DTOF2
      003430 CD 08 96         [ 4] 1010     CALL DNEGA 
      003433                       1011 DTOF2: 
      003433 CD 07 E5         [ 4] 1012     CALL ROT 
      003436 CD 2D 35         [ 4] 1013     CALL STEXP 
      003439 81               [ 4] 1014     RET 
                                   1015 
                                   1016 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1017 ;   F>D  ( f# -- # )
                                   1018 ;  convert float to double 
                                   1019 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00343A                       1020     _HEADER FTOD,3,"F>D"
      00343A 34 18                    1         .word LINK 
                           00343C     2         LINK=.
      00343C 03                       3         .byte 3  
      00343D 46 3E 44                 4         .ascii "F>D"
      003440                          5         FTOD:
      003440 CD 2D 03         [ 4] 1021     CALL ATEXP ; m e 
      003443 CD 07 D4         [ 4] 1022     CALL QDUP
      003446                       1023     _QBRAN FTOD9
      003446 CD 04 98         [ 4]    1     CALL QBRAN
      003449 34 D6                    2     .word FTOD9
      00344B CD 05 EA         [ 4] 1024     CALL TOR 
      00344E CD 26 39         [ 4] 1025     CALL DSIGN 
      003451 CD 08 04         [ 4] 1026     CALL NROT 
      003454 CD 26 28         [ 4] 1027     CALL DABS
      003457 CD 05 34         [ 4] 1028     CALL RFROM  
      00345A CD 06 21         [ 4] 1029     CALL DUPP   
      00345D CD 06 58         [ 4] 1030     CALL ZLESS 
      003460                       1031     _QBRAN FTOD4 
      003460 CD 04 98         [ 4]    1     CALL QBRAN
      003463 34 9E                    2     .word FTOD4
                                   1032 ; negative exponent 
      003465 CD 08 EA         [ 4] 1033     CALL ABSS 
      003468 CD 05 EA         [ 4] 1034     CALL TOR
      00346B                       1035     _BRAN FTOD2  
      00346B CD 04 B4         [ 4]    1     CALL BRAN 
      00346E 34 89                    2     .word FTOD2 
      003470                       1036 FTOD1:
      003470 CD 08 31         [ 4] 1037     CALL DDUP 
      003473 CD 28 19         [ 4] 1038     CALL DZEQUAL 
      003476                       1039     _TBRAN FTOD3 
      003476 CD 04 A6         [ 4]    1     CALL TBRAN 
      003479 34 93                    2     .word FTOD3 
      00347B                       1040     _DOLIT 10 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 184.
Hexadecimal [24-Bits]



      00347B CD 04 6F         [ 4]    1     CALL DOLIT 
      00347E 00 0A                    2     .word 10 
      003480 CD 26 53         [ 4] 1041     CALL DSLMOD 
      003483 CD 07 E5         [ 4] 1042     CALL ROT 
      003486 CD 06 17         [ 4] 1043     CALL DROP
      003489                       1044 FTOD2:      
      003489                       1045     _DONXT FTOD1
      003489 CD 04 83         [ 4]    1     CALL DONXT 
      00348C 34 70                    2     .word FTOD1 
      00348E                       1046     _BRAN FTOD8   
      00348E CD 04 B4         [ 4]    1     CALL BRAN 
      003491 34 CB                    2     .word FTOD8 
      003493                       1047 FTOD3: 
      003493 CD 05 34         [ 4] 1048     CALL RFROM 
      003496 CD 06 17         [ 4] 1049     CALL DROP 
      003499                       1050     _BRAN FTOD8  
      003499 CD 04 B4         [ 4]    1     CALL BRAN 
      00349C 34 CB                    2     .word FTOD8 
                                   1051 ; positive exponent 
      00349E                       1052 FTOD4:
      00349E CD 05 EA         [ 4] 1053     CALL TOR 
      0034A1                       1054     _BRAN FTOD6
      0034A1 CD 04 B4         [ 4]    1     CALL BRAN 
      0034A4 34 C6                    2     .word FTOD6 
      0034A6                       1055 FTOD5:
      0034A6 CD 08 31         [ 4] 1056     CALL DDUP 
      0034A9                       1057     _DOLIT 0XCCCC
      0034A9 CD 04 6F         [ 4]    1     CALL DOLIT 
      0034AC CC CC                    2     .word 0XCCCC 
      0034AE                       1058     _DOLIT 0XCCC  
      0034AE CD 04 6F         [ 4]    1     CALL DOLIT 
      0034B1 0C CC                    2     .word 0XCCC 
      0034B3 CD 28 56         [ 4] 1059     CALL DGREAT 
      0034B6                       1060     _TBRAN FTOD3 
      0034B6 CD 04 A6         [ 4]    1     CALL TBRAN 
      0034B9 34 93                    2     .word FTOD3 
      0034BB                       1061     _DOLIT 10 
      0034BB CD 04 6F         [ 4]    1     CALL DOLIT 
      0034BE 00 0A                    2     .word 10 
      0034C0 CD 0B E1         [ 4] 1062     CALL ZERO 
      0034C3 CD 2A 02         [ 4] 1063     CALL DSTAR 
      0034C6                       1064 FTOD6: 
      0034C6                       1065     _DONXT FTOD5 
      0034C6 CD 04 83         [ 4]    1     CALL DONXT 
      0034C9 34 A6                    2     .word FTOD5 
      0034CB                       1066 FTOD8:
      0034CB CD 07 E5         [ 4] 1067     CALL ROT 
      0034CE                       1068     _QBRAN FTOD9 
      0034CE CD 04 98         [ 4]    1     CALL QBRAN
      0034D1 34 D6                    2     .word FTOD9
      0034D3 CD 08 96         [ 4] 1069     CALL DNEGA
      0034D6                       1070 FTOD9:          
      0034D6 81               [ 4] 1071     RET 
                                   1072 
                                   1073 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 185.
Hexadecimal [24-Bits]



                                   1074 ;;;;;;;;;;;;;;;;;;;;;;;;
                                   1075 ;   F0< ( f# -- f )
                                   1076 ;   true if f#<0
                                   1077 ;;;;;;;;;;;;;;;;;;;;;;;;
      0034D7                       1078     _HEADER FZLESS,3,"F0<"
      0034D7 34 3C                    1         .word LINK 
                           0034D9     2         LINK=.
      0034D9 03                       3         .byte 3  
      0034DA 46 30 3C                 4         .ascii "F0<"
      0034DD                          5         FZLESS:
      0034DD CD 2D 03         [ 4] 1079     CALL ATEXP 
      0034E0 CD 06 17         [ 4] 1080     CALL DROP 
      0034E3 CD 06 31         [ 4] 1081     CALL SWAPP 
      0034E6 CD 06 17         [ 4] 1082     CALL DROP 
      0034E9 CD 06 58         [ 4] 1083     CALL ZLESS 
      0034EC 81               [ 4] 1084     RET
                                   1085 
                                   1086 ;;;;;;;;;;;;;;;;;;;;;;;;
                                   1087 ;   F< ( f#1 f#2 -- f )
                                   1088 ; true if f#1 < f#1 
                                   1089 ;;;;;;;;;;;;;;;;;;;;;;;
      0034ED                       1090     _HEADER FLESS,2,"F<"
      0034ED 34 D9                    1         .word LINK 
                           0034EF     2         LINK=.
      0034EF 02                       3         .byte 2  
      0034F0 46 3C                    4         .ascii "F<"
      0034F2                          5         FLESS:
      0034F2 CD 31 90         [ 4] 1091     CALL FSUB  
      0034F5 CC 34 DD         [ 2] 1092     JP FZLESS
                                   1093 
                                   1094 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1095 ;   F> ( f#1 f#2 -- f )
                                   1096 ;   true fi f#1>f#2
                                   1097 ;;;;;;;;;;;;;;;;;;;;;;;;;
      0034F8                       1098     _HEADER FGREAT,2,"F>"
      0034F8 34 EF                    1         .word LINK 
                           0034FA     2         LINK=.
      0034FA 02                       3         .byte 2  
      0034FB 46 3E                    4         .ascii "F>"
      0034FD                          5         FGREAT:
      0034FD CD 27 44         [ 4] 1099     CALL DSWAP 
      003500 CC 34 F2         [ 2] 1100     JP FLESS 
                                   1101 
                                   1102 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1103 ;   F= ( f#1 f#2 -- f ) 
                                   1104 ;   true fi f#1==f#2 
                                   1105 ;;;;;;;;;;;;;;;;;;;;;;;;;
      003503                       1106     _HEADER FEQUAL,2,"F="
      003503 34 FA                    1         .word LINK 
                           003505     2         LINK=.
      003505 02                       3         .byte 2  
      003506 46 3D                    4         .ascii "F="
      003508                          5         FEQUAL:
      003508 CC 28 35         [ 2] 1107     JP DEQUAL 
                                   1108 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 186.
Hexadecimal [24-Bits]



                                   1109 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1110 ;   F0= ( f# -- f )
                                   1111 ;   true if f# is 0.0 
                                   1112 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      00350B                       1113     _HEADER FZEQUAL,3,"F0="
      00350B 35 05                    1         .word LINK 
                           00350D     2         LINK=.
      00350D 03                       3         .byte 3  
      00350E 46 30 3D                 4         .ascii "F0="
      003511                          5         FZEQUAL:
      003511 CD 2D 03         [ 4] 1114     CALL ATEXP 
      003514 CD 06 17         [ 4] 1115     CALL DROP 
      003517 CC 28 19         [ 2] 1116     JP DZEQUAL  
                                   1117 
                                   1118 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1119 ;  FNEGATE ( f#1 -- f#2 )
                                   1120 ;  f#2 is negation of f#1 
                                   1121 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      00351A                       1122     _HEADER FNEGA,7,"FNEGATE"
      00351A 35 0D                    1         .word LINK 
                           00351C     2         LINK=.
      00351C 07                       3         .byte 7  
      00351D 46 4E 45 47 41 54 45     4         .ascii "FNEGATE"
      003524                          5         FNEGA:
      003524 CD 2D 03         [ 4] 1123     CALL ATEXP 
      003527 CD 05 EA         [ 4] 1124     CALL TOR 
      00352A CD 08 96         [ 4] 1125     CALL DNEGA
      00352D CD 05 34         [ 4] 1126     CALL RFROM 
      003530 CD 2D 35         [ 4] 1127     CALL STEXP 
      003533 CD 2C B6         [ 4] 1128     CALL SFN 
      003536 81               [ 4] 1129     RET 
                                   1130 
                                   1131 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1132 ;  FABS ( f#1 -- abs(f#1) )
                                   1133 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003537                       1134     _HEADER FABS,4,"FABS"
      003537 35 1C                    1         .word LINK 
                           003539     2         LINK=.
      003539 04                       3         .byte 4  
      00353A 46 41 42 53              4         .ascii "FABS"
      00353E                          5         FABS:
      00353E CD 2D 03         [ 4] 1135     CALL ATEXP 
      003541 CD 05 EA         [ 4] 1136     CALL TOR 
      003544 CD 06 21         [ 4] 1137     CALL DUPP 
      003547                       1138     _DOLIT 0X80 
      003547 CD 04 6F         [ 4]    1     CALL DOLIT 
      00354A 00 80                    2     .word 0X80 
      00354C CD 06 7E         [ 4] 1139     CALL ANDD 
      00354F                       1140     _QBRAN FABS1
      00354F CD 04 98         [ 4]    1     CALL QBRAN
      003552 35 57                    2     .word FABS1
      003554 CD 08 96         [ 4] 1141     CALL DNEGA 
      003557                       1142 FABS1: 
      003557 CD 05 34         [ 4] 1143     CALL RFROM 
      00355A CD 2D 35         [ 4] 1144     CALL STEXP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 187.
Hexadecimal [24-Bits]



      00355D CD 2C B6         [ 4] 1145     CALL SFN 
      003560 81               [ 4] 1146     RET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 188.
Hexadecimal [24-Bits]



                                   4527 .endif 
                                   4528 
                                   4529 ;===============================================================
                                   4530 
                           003539  4531 LASTN =	LINK   ;last name defined
                                   4532 
                                   4533 ; application code begin here
      003580                       4534 	.bndry 128 ; align on flash block  
      003580                       4535 app_space: 
                                   4536 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 189.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        0008F3 R   |   6 ABOR1      0013CC R
  6 ABOR2      0013E3 R   |   6 ABORQ      0013C4 R   |   6 ABORT      0013B5 R
  6 ABRTQ      0016A6 R   |   6 ABSS       0008EA R   |   6 ACCEP      00134B R
  6 ACCP1      001354 R   |   6 ACCP2      00137A R   |   6 ACCP3      00137D R
  6 ACCP4      00137F R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |   6 ADRADJ     0007C4 R
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  6 AFT        001691 R   |   6 AGAIN      0015E7 R   |   6 AHEAD      001644 R
  6 ALLOT      0014F4 R   |   6 ANDD       00067E R   |     APP_CP  =  004004 
    APP_LAST=  004000     |     APP_RUN =  004002     |     APP_VP  =  004006 
  6 AT         0004E3 R   |   6 ATEXE      000CF4 R   |   6 ATEXP      002D03 R
  6 ATEXP1     002D18 R   |   6 ATEXP2     002D28 R   |   6 AUTORUN    000129 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |   6 B115K2     0003E0 R
    B19200  =  000003     |   6 B19K2      0003BD R   |     B1_MASK =  000002 
    B230400 =  000007     |     B2400   =  000000     |   6 B2K4       00038E R
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |   6 B4K8       00039C R
    B4_MASK =  000010     |     B57600  =  000005     |   6 B57K6      0003CE R
    B5_MASK =  000020     |     B6_MASK =  000040     |     B7_MASK =  000080 
    B921600 =  000009     |     B9600   =  000002     |   6 B9K6       0003AC R
  6 BACK1      0012F3 R   |   6 BASE       0006E7 R   |     BASEE   =  00000A 
  6 BAUD       0003F0 R   |     BCNT    =  000001     |   6 BCOMP      001537 R
  6 BDIGS      000DDB R   |     BEEP_BIT=  000004     |     BEEP_CSR=  0050F3 
    BEEP_MAS=  000010     |     BEEP_POR=  00000F     |   6 BEGIN      0015C9 R
    BIT0    =  000000     |     BIT1    =  000001     |     BIT2    =  000002 
    BIT3    =  000003     |     BIT4    =  000004     |     BIT5    =  000005 
    BIT6    =  000006     |     BIT7    =  000007     |   6 BKSLA      001148 R
  6 BKSP       0012C3 R   |     BKSPP   =  000008     |   6 BLANK      000BD4 R
    BLOCK_SI=  000080     |     BOOT_ROM=  006000     |     BOOT_ROM=  007FFF 
  6 BRAN       0004B4 R   |     BTW     =  000001     |   6 BUF2ROW    002177 R
  6 BYE        0000B6 R   |     CADR    =  000003     |     CALLL   =  0000CD 
  6 CALLOT     0023C0 R   |     CAN_DGR =  005426     |     CAN_FPSR=  005427 
    CAN_IER =  005425     |     CAN_MCR =  005420     |     CAN_MSR =  005421 
    CAN_P0  =  005428     |     CAN_P1  =  005429     |     CAN_P2  =  00542A 
    CAN_P3  =  00542B     |     CAN_P4  =  00542C     |     CAN_P5  =  00542D 
    CAN_P6  =  00542E     |     CAN_P7  =  00542F     |     CAN_P8  =  005430 
    CAN_P9  =  005431     |     CAN_PA  =  005432     |     CAN_PB  =  005433 
    CAN_PC  =  005434     |     CAN_PD  =  005435     |     CAN_PE  =  005436 
    CAN_PF  =  005437     |     CAN_RFR =  005424     |     CAN_TPR =  005423 
    CAN_TSR =  005422     |     CARRY   =  00002A     |     CASE_SEN=  000000 
  6 CAT        000501 R   |   6 CCOMMA     001519 R   |     CC_C    =  000000 
    CC_H    =  000004     |     CC_I0   =  000003     |     CC_I1   =  000005 
    CC_N    =  000002     |     CC_V    =  000007     |     CC_Z    =  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 190.
Hexadecimal [24-Bits]

Symbol Table

    CELLL   =  000002     |   6 CELLM      000B59 R   |   6 CELLP      000B4A R
  6 CELLS      000B68 R   |     CFG_GCR =  007F60     |     CFG_GCR_=  000001 
    CFG_GCR_=  000000     |   6 CHAR1      000F31 R   |   6 CHAR2      000F34 R
  6 CHKIVEC    002065 R   |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |   6 CMOV1      000D13 R   |   6 CMOV2      000D2B R
  6 CMOVE      000D0B R   |     CNTDWN  =  000032     |   6 CNTXT      00076A R
  6 COLD       001B66 R   |   6 COLD1      001B66 R   |   6 COLON      001849 R
  6 COMMA      001502 R   |   6 COMPI      001547 R   |     COMPO   =  000040 
  6 CONSTANT   0018F3 R   |   6 COPYRIGH   001AAF R   |   6 COUNT      000CA7 R
  6 CPP        000786 R   |     CPU_A   =  007F00     |     CPU_CCR =  007F0A 
    CPU_PCE =  007F01     |     CPU_PCH =  007F02     |     CPU_PCL =  007F03 
    CPU_SPH =  007F08     |     CPU_SPL =  007F09     |     CPU_XH  =  007F04 
    CPU_XL  =  007F05     |     CPU_YH  =  007F06     |     CPU_YL  =  007F07 
  6 CR         000F59 R   |   6 CREAT      00188F R   |     CRR     =  00000D 
  6 CSTOR      0004F0 R   |   6 CTABLE     0023E1 R   |   6 CTAT       002402 R
  6 CTINIT     00242A R   |   6 D2SLASH    002973 R   |   6 D2STAR     00298A R
  6 DABS       002628 R   |   6 DABS1      002630 R   |   6 DAT        000C8B R
    DATSTK  =  001680     |   6 DBLVER     0024AE R   |   6 DCLZ       002772 R
  6 DCLZ1      00277B R   |   6 DCLZ4      002784 R   |   6 DCLZ8      002791 R
  6 DCONST     001928 R   |   6 DDIG       002694 R   |   6 DDIGS      0026AD R
  6 DDOT       0026C4 R   |   6 DDOT0      0026D8 R   |   6 DDOT1      0026EE R
  6 DDROP      000826 R   |   6 DDSLMOD    002B17 R   |   6 DDSTAR3    002A5B R
  6 DDUP       000831 R   |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
  6 DECIM      000E8B R   |   6 DEPTH      000C23 R   |   6 DEQU4      00284A R
  6 DEQUAL     002835 R   |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
  6 DGREAT     002856 R   |   6 DGTQ1      000ED0 R   |   6 DI         0000C4 R
  6 DIG        000E04 R   |   6 DIGIT      000D9F R   |   6 DIGS       000E15 R
  6 DIGS1      000E15 R   |   6 DIGS2      000E22 R   |   6 DIGTQ      000E9F R
    DISCOVER=  000000     |   6 DLESS      002861 R   |   6 DLESS4     002875 R
  6 DLITER     002933 R   |   6 DLSHIFT    0029A6 R   |   6 DLSHIFT1   0029B9 R
  6 DLSHIFT2   0029CE R   |     DM_BK1RE=  007F90     |     DM_BK1RH=  007F91 
    DM_BK1RL=  007F92     |     DM_BK2RE=  007F93     |     DM_BK2RH=  007F94 
    DM_BK2RL=  007F95     |     DM_CR1  =  007F96     |     DM_CR2  =  007F97 
    DM_CSR1 =  007F98     |     DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A 
  6 DN1        0008B1 R   |   6 DNEGA      000896 R   |   6 DOCONST    001913 R
  6 DOLIT      00046F R   |   6 DONXT      000483 R   |     DOORBELL=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 191.
Hexadecimal [24-Bits]

Symbol Table

  6 DOSTR      000F69 R   |   6 DOT        001000 R   |   6 DOT1       001016 R
  6 DOTI1      001A78 R   |   6 DOTID      001A62 R   |   6 DOTO1      001458 R
  6 DOTOK      00143E R   |   6 DOTPR      001129 R   |   6 DOTQ       0016C0 R
  6 DOTQP      000F86 R   |   6 DOTR       000F94 R   |   6 DOTS       001A04 R
  6 DOTS1      001A0F R   |   6 DOTS2      001A18 R   |   6 DOVAR      0006D7 R
  6 DOVER      00295A R   |   6 DO_DCONS   00194B R   |   6 DPLUS      002B56 R
  6 DPLUS1     002B7D R   |   6 DRAT       0028C9 R   |   6 DRFROM     0028B1 R
  6 DROP       000617 R   |   6 DROT       0027DE R   |   6 DRSHIFT    0029DF R
  6 DRSHIFT1   0029E6 R   |   6 DRSHIFT2   0029FC R   |   6 DSIGN      002639 R
  6 DSIGN1     002643 R   |   6 DSLA9      002B41 R   |   6 DSLASH     002B47 R
  6 DSLMOD     002653 R   |   6 DSLMOD3    00266E R   |   6 DSLMOD4    00267A R
  6 DSLMODa    002675 R   |   6 DSLMODb    002680 R   |   6 DSSTAR     00271E R
  6 DSSTAR3    00273B R   |   6 DSTAR      002A02 R   |   6 DSTOR      000C72 R
  6 DSUB       002B88 R   |   6 DSUB1      002BAF R   |   6 DSWAP      002744 R
  6 DTOF       00341C R   |   6 DTOF1      003425 R   |   6 DTOF2      003433 R
  6 DTOR       002893 R   |   6 DUMP       0019BA R   |   6 DUMP1      0019D1 R
  6 DUMP3      0019F3 R   |   6 DUMPP      001989 R   |   6 DUPP       000621 R
  6 DVARIA     0028E7 R   |     DVER_MAJ=  000001     |     DVER_MIN=  000000 
  6 DZEQUAL    002819 R   |   6 DZLESS     00287C R   |   6 DZLESS1    002886 R
  6 EDIGS      000E40 R   |   6 EDOT       002D89 R   |   6 EDOT0      002DA0 R
  6 EDOT2      002DAC R   |   6 EDOT3      002DC5 R   |   6 EDOT4      002DF1 R
  6 EDOT5      002E10 R   |   6 EECSTORE   001E16 R   |   6 EEPCP      001C3C R
  6 EEPLAST    001C0F R   |   6 EEPROM     001BF7 R   |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |     EEPROM_R=  000010     |     EEPROM_S=  000800 
  6 EEPRUN     001C26 R   |   6 EEPVP      001C52 R   |   6 EESTORE    001E62 R
  6 EE_CCOMM   00212C R   |   6 EE_COMMA   00210B R   |   6 EE_CREAD   001DA7 R
  6 EE_READ    001D85 R   |   6 EI         0000BD R   |   6 ELSEE      00161F R
  6 EMIT       000436 R   |   6 ENEPER     00234C R   |     EOL_CR  =  000001 
    EOL_LF  =  000000     |   6 EQ1        00090E R   |   6 EQUAL      0008F8 R
  6 ERASE      000D6D R   |     ERR     =  00001B     |   6 EVAL       001481 R
  6 EVAL1      001481 R   |   6 EVAL2      00149D R   |   6 EXE1       000D02 R
  6 EXECU      0004C4 R   |     EXT     =  000000     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |   6 EXTRC      000DC7 R   |   6 FABS       00353E R
  6 FABS1      003557 R   |   6 FADDR      0021F9 R   |   6 FALGN4     0030EE R
  6 FALGN6     0030FD R   |   6 FALGN7     003124 R   |   6 FALGN71    003133 R
  6 FALGN72    00314F R   |   6 FALGN8     003152 R   |   6 FALIGN     0030B5 R
  6 FARAT      001CBD R   |   6 FARCAT     001CC9 R   |   6 FC_XOFF    000463 R
  6 FC_XON     00044D R   |   6 FDOT       002E1F R   |   6 FDOT0      002E5D R
  6 FDOT1      002E4C R   |   6 FDOT10     002EB9 R   |   6 FDOT2      002E6B R
  6 FDOT3      002E84 R   |   6 FDOT6      002E94 R   |   6 FDOT7      002E99 R
  6 FDOT8      002EA1 R   |   6 FDOT9      002EA9 R   |   6 FEQUAL     003508 R
  6 FER        002C21 R   |   6 FGREAT     0034FD R   |     FHSE    =  7A1200 
    FHSI    =  F42400     |   6 FILL       000D3A R   |   6 FILL1      000D57 R
  6 FILL2      000D60 R   |   6 FIND       00121F R   |   6 FIND1      00123D R
  6 FIND2      00126B R   |   6 FIND3      001277 R   |   6 FIND4      00128B R
  6 FIND5      001298 R   |   6 FIND6      00127C R   |   6 FINIT      002C17 R
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 192.
Hexadecimal [24-Bits]

Symbol Table

    FLASH_IA=  000001     |     FLASH_IA=  000000     |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
  6 FLESS      0034F2 R   |   6 FLOATQ     002F31 R   |   6 FLOATQ0    002F3B R
  6 FLOATQ1    002FA0 R   |   6 FLOATQ2    002FA9 R   |   6 FLOATQ3    002FB1 R
  6 FLOATQ4    002FC5 R   |   6 FLOAT_ER   002FE0 R   |   6 FLOAT_ER   002FDD R
    FLOAT_MA=  000001     |     FLOAT_MI=  000000     |     FLSI    =  01F400 
  6 FMOVE      002204 R   |   6 FMOVE2     002235 R   |   6 FNE        002C44 R
  6 FNEGA      003524 R   |   6 FOR        001591 R   |   6 FORGET     00015A R
  6 FORGET1    000189 R   |   6 FORGET2    00020F R   |   6 FORGET4    000218 R
  6 FORGET6    0001D1 R   |   6 FOV        002C5F R   |   6 FPLUS      00315E R
  6 FPLUS1     00317E R   |   6 FPSTOR     001BD8 R   |   6 FPSW       002BF3 R
    FPTR    =  000034     |   6 FREEVAR    000225 R   |   6 FREEVAR4   00025B R
  6 FRESET     002C05 R   |   6 FSLASH     00334A R   |   6 FSLASH1    00338C R
  6 FSLASH8    0033F2 R   |   6 FSLASH9    003409 R   |   6 FSTAR      003323 R
  6 FSUB       003190 R   |   6 FSUB1      0031B0 R   |   6 FTOD       003440 R
  6 FTOD1      003470 R   |   6 FTOD2      003489 R   |   6 FTOD3      003493 R
  6 FTOD4      00349E R   |   6 FTOD5      0034A6 R   |   6 FTOD6      0034C6 R
  6 FTOD8      0034CB R   |   6 FTOD9      0034D6 R   |   6 FVER       002BC1 R
  6 FZE        002C2E R   |   6 FZEQUAL    003511 R   |   6 FZLESS     0034DD R
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_ODR=  000000 
    GPIO_SIZ=  000005     |   6 GREAT      000973 R   |   6 GREAT1     000989 R
  6 HDOT       000FE3 R   |   6 HERE       000CBE R   |   6 HEX        000E76 R
  6 HI         001B1B R   |   6 HLD        000757 R   |   6 HOLD       000DEB R
    HSECNT  =  004809     |     I2C_CCRH=  00521C     |     I2C_CCRH=  000080 
    I2C_CCRH=  0000C0     |     I2C_CCRH=  000080     |     I2C_CCRH=  000000 
    I2C_CCRH=  000001     |     I2C_CCRH=  000000     |     I2C_CCRL=  00521B 
    I2C_CCRL=  00001A     |     I2C_CCRL=  000002     |     I2C_CCRL=  00000D 
    I2C_CCRL=  000050     |     I2C_CCRL=  000090     |     I2C_CCRL=  0000A0 
    I2C_CR1 =  005210     |     I2C_CR1_=  000006     |     I2C_CR1_=  000007 
    I2C_CR1_=  000000     |     I2C_CR2 =  005211     |     I2C_CR2_=  000002 
    I2C_CR2_=  000003     |     I2C_CR2_=  000000     |     I2C_CR2_=  000001 
    I2C_CR2_=  000007     |     I2C_DR  =  005216     |     I2C_FREQ=  005212 
    I2C_ITR =  00521A     |     I2C_ITR_=  000002     |     I2C_ITR_=  000000 
    I2C_ITR_=  000001     |     I2C_OARH=  005214     |     I2C_OARH=  000001 
    I2C_OARH=  000002     |     I2C_OARH=  000006     |     I2C_OARH=  000007 
    I2C_OARL=  005213     |     I2C_OARL=  000000     |     I2C_OAR_=  000813 
    I2C_OAR_=  000009     |     I2C_PECR=  00521E     |     I2C_READ=  000001 
    I2C_SR1 =  005217     |     I2C_SR1_=  000003     |     I2C_SR1_=  000001 
    I2C_SR1_=  000002     |     I2C_SR1_=  000006     |     I2C_SR1_=  000000 
    I2C_SR1_=  000004     |     I2C_SR1_=  000007     |     I2C_SR2 =  005218 
    I2C_SR2_=  000002     |     I2C_SR2_=  000001     |     I2C_SR2_=  000000 
    I2C_SR2_=  000003     |     I2C_SR2_=  000005     |     I2C_SR3 =  005219 
    I2C_SR3_=  000001     |     I2C_SR3_=  000007     |     I2C_SR3_=  000004 
    I2C_SR3_=  000000     |     I2C_SR3_=  000002     |     I2C_TRIS=  00521D 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_WRIT=  000000     |   6 ICOLON     00185A R   |   6 IFETCH     0015AF R
  6 IFF        0015F7 R   |   6 IFMOVE     0022DD R   |     IMEDD   =  000080 
  6 IMMED      00186C R   |   6 INCH       00042A R   |   6 INC_FPTR   001D52 R
  6 INITOFS    001822 R   |   6 INN        000705 R   |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_PU=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 193.
Hexadecimal [24-Bits]

Symbol Table

  6 INTE1      001420 R   |   6 INTER      0013F6 R   |   6 INTQ       002486 R
    INT_ADC2=  000016     |     INT_AUAR=  000012     |     INT_AWU =  000001 
    INT_CAN_=  000008     |     INT_CAN_=  000009     |     INT_CLK =  000002 
    INT_EXTI=  000003     |     INT_EXTI=  000004     |     INT_EXTI=  000005 
    INT_EXTI=  000006     |     INT_EXTI=  000007     |     INT_FLAS=  000018 
    INT_I2C =  000013     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000011     |     INT_UART=  000015 
    INT_UART=  000014     |     INT_VECT=  008060     |     INT_VECT=  00800C 
    INT_VECT=  008028     |     INT_VECT=  00802C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  008050     |     INT_VECT=  00804C     |     INT_VECT=  00805C 
    INT_VECT=  008058     |   6 INVER      000873 R   |     IPR0    =  000002 
    IPR1    =  000001     |     IPR2    =  000000     |     IPR3    =  000003 
    IPR_MASK=  000003     |     IRET_COD=  000080     |   6 ISEMI      0017B7 R
    ITC_SPR1=  007F70     |     ITC_SPR2=  007F71     |     ITC_SPR3=  007F72 
    ITC_SPR4=  007F73     |     ITC_SPR5=  007F74     |     ITC_SPR6=  007F75 
    ITC_SPR7=  007F76     |     ITC_SPR8=  007F77     |     IWDG_KR =  0050E0 
    IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2     |   6 JFETCH     0015BA R
  6 JSRC       00180C R   |   6 KEY        000EDF R   |   6 KTAP       001310 R
  6 KTAP1      001333 R   |   6 KTAP2      001336 R   |   6 LAST       000796 R
  6 LASTN   =  003539 R   |   6 LBRAC      00142D R   |     LED2_BIT=  000005 
    LED2_MAS=  000020     |     LED2_POR=  00500A     |   6 LESS       000935 R
    LF      =  00000A     |   6 LINK    =  003539 R   |   6 LITER      001569 R
  6 LN2S       0023A8 R   |   6 LOCAL      000554 R   |   6 LOCK       001D3E R
  6 LOG2S      002392 R   |   6 LSCALE     002FFF R   |   6 LSHIFT     000B93 R
  6 LSHIFT1    000B9C R   |   6 LSHIFT4    000BA4 R   |   6 LT1        00094B R
    MASKK   =  001F7F     |   6 MAX        000993 R   |   6 MAX1       0009A6 R
    MAX_MANT=  7FFFFF     |   6 MIN        0009B0 R   |   6 MIN1       0009C3 R
  6 MMOD1      000A4C R   |   6 MMOD2      000A60 R   |   6 MMOD3      000A77 R
  6 MMSM1      000A07 R   |   6 MMSM3      000A0B R   |   6 MMSM4      000A17 R
  6 MMSMa      000A12 R   |   6 MMSMb      000A1D R   |   6 MMSTA1     003251 R
  6 MMSTA2     00325C R   |   6 MMSTA3     003267 R   |   6 MMSTA4     0032D2 R
  6 MMSTA5     0032E4 R   |   6 MMSTA6     0032FD R   |   6 MMSTA7     00331A R
  6 MMSTAR     003246 R   |   6 MODD       000A91 R   |   6 MONE       000BFA R
    MS      =  000030     |   6 MSEC       0002D0 R   |   6 MSMOD      000A2F R
  6 MSTA1      000B22 R   |   6 MSTAR      000AFF R   |     NAFR    =  004804 
  6 NAMEQ      0012B8 R   |   6 NAMET      0011C9 R   |     NCLKOPT =  004808 
  6 NDROT      0027A2 R   |   6 NEGAT      000884 R   |   6 NEG_SIGN   0024F1 R
  6 NEX1       000490 R   |   6 NEXT       0015A0 R   |     NFLASH_W=  00480E 
    NHSECNT =  00480A     |     NOPT1   =  004802     |     NOPT2   =  004804 
    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPT6   =  00480C     |     NOPT7   =  00480E     |     NOPTBL  =  00487F 
  6 NRAT       0005A3 R   |   6 NRDROP     00057D R   |   6 NROT       000804 R
  6 NRSTO      0005C4 R   |   6 NTIB       000715 R   |     NUBC    =  004802 
    NUCLEO  =  000001     |   6 NUFQ       000EF5 R   |   6 NUFQ1      000F0E R
  6 NUMBQ      002560 R   |   6 NUMQ0      0025A1 R   |   6 NUMQ1      0025C3 R
  6 NUMQ3      0025ED R   |   6 NUMQ4      00260E R   |   6 NUMQ8      002617 R
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 194.
Hexadecimal [24-Bits]

Symbol Table

    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   6 NonHandl   000000 R
  6 OFFSET     0007BB R   |     OFS     =  000005     |   6 ONE        000BEC R
  6 ONEM       000B82 R   |   6 ONEP       000B75 R   |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTIMIZE=  000001     |     OPTION_B=  004800     |     OPTION_E=  00487F 
    OPTION_S=  000080     |   6 ORIG       000049 R   |   6 ORR        000692 R
  6 OUTPUT     00043B R   |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |   6 OVER       000649 R
  6 OVERT      001785 R   |     PA      =  000000     |   6 PACKS      000D7E R
  6 PAD        000CCF R   |   6 PAREN      001138 R   |   6 PARS       001031 R
  6 PARS1      00105C R   |   6 PARS2      001087 R   |   6 PARS3      00108A R
  6 PARS4      001093 R   |   6 PARS5      0010B6 R   |   6 PARS6      0010CB R
  6 PARS7      0010DA R   |   6 PARS8      0010E9 R   |   6 PARSE      0010FA R
  6 PARSEXP_   002F14 R   |   6 PAUSE      0002E0 R   |     PA_BASE =  005000 
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_BASE =  005005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_BASE =  00500A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |   6 PDUM1      00199C R
  6 PDUM2      0019AD R   |     PD_BASE =  00500F     |     PD_CR1  =  005012 
    PD_CR2  =  005013     |     PD_DDR  =  005011     |     PD_IDR  =  005010 
    PD_ODR  =  00500F     |     PE      =  000014     |     PE_BASE =  005014 
    PE_CR1  =  005017     |     PE_CR2  =  005018     |     PE_DDR  =  005016 
    PE_IDR  =  005015     |     PE_ODR  =  005014     |     PF      =  000019 
    PF_BASE =  005019     |     PF_CR1  =  00501C     |     PF_CR2  =  00501D 
    PF_DDR  =  00501B     |     PF_IDR  =  00501A     |     PF_ODR  =  005019 
    PG      =  00001E     |     PG_BASE =  00501E     |     PG_CR1  =  005021 
    PG_CR2  =  005022     |     PG_DDR  =  005020     |     PG_IDR  =  00501F 
    PG_ODR  =  00501E     |     PH      =  000023     |     PH_BASE =  005023 
    PH_CR1  =  005026     |     PH_CR2  =  005027     |     PH_DDR  =  005025 
    PH_IDR  =  005024     |     PH_ODR  =  005023     |     PI      =  000028 
  6 PICK       000C3A R   |   6 PII        00230B R   |     PI_BASE =  005028 
    PI_CR1  =  00502B     |     PI_CR2  =  00502C     |     PI_DDR  =  00502A 
    PI_IDR  =  005029     |     PI_ODR  =  005028     |   6 PLUS       000846 R
  6 PNAM1      00172A R   |   6 PRESE      0014AC R   |   6 PRINT_VE   001AEB R
    PROD1   =  000024     |     PROD2   =  000026     |     PROD3   =  000028 
  6 PROTECTE   000201 R   |   6 PRT_LICE   001AD7 R   |   6 PSTOR      000C51 R
    PTR16   =  000035     |     PTR8    =  000036     |   6 PTRPLUS    001D6A R
  6 QBRAN      000498 R   |   6 QDUP       0007D4 R   |   6 QDUP1      0007DE R
  6 QKEY       000418 R   |   6 QSTAC      001464 R   |   6 QUERY      001390 R
  6 QUEST      001023 R   |   6 QUIT       0014C9 R   |   6 QUIT1      0014D1 R
  6 QUIT2      0014D4 R   |   6 RAM2EE     0021A5 R   |     RAMBASE =  000000 
  6 RAMLAST    0007A9 R   |     RAM_BASE=  000000     |     RAM_END =  0017FF 
    RAM_SIZE=  001800     |   6 RANDOM     00027E R   |   6 RAT        000545 R
  6 RBRAC      0017F9 R   |   6 REPEA      001674 R   |   6 RFREE      00218C R
  6 RFROM      000534 R   |     ROP     =  004800     |   6 ROT        0007E5 R
  6 ROW2BUF    00214E R   |     ROWBUFF =  001680     |     RP0     =  00002E 
  6 RPAT       000511 R   |     RPP     =  0017FF     |   6 RPSTO      00051E R
  6 RSCALE     003023 R   |   6 RSHIFT     000BAF R   |   6 RSHIFT1    000BB8 R
  6 RSHIFT4    000BC0 R   |     RST_SR  =  0050B3     |   6 RT12_2     00237B R
  6 SAME1      0011E7 R   |   6 SAME2      001210 R   |   6 SAMEQ      0011DF R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 195.
Hexadecimal [24-Bits]

Symbol Table

  6 SCAL1      0031D9 R   |   6 SCAL2      0031FD R   |   6 SCALDN2    0030A7 R
  6 SCALDN3    0030AA R   |   6 SCALEDOW   00307B R   |   6 SCALETOM   0031D3 R
  6 SCALEUP    003044 R   |   6 SCALEUP2   003077 R   |   6 SCALEUP3   00307A R
  6 SCOM1      00175F R   |   6 SCOM2      001762 R   |   6 SCOMP      001741 R
  6 SEED       000265 R   |     SEEDX   =  000038     |     SEEDY   =  00003A 
  6 SEMIS      001795 R   |   6 SETISP     0000D0 R   |   6 SET_RAML   0018DC R
  6 SFN        002CB6 R   |     SFR_BASE=  005000     |     SFR_END =  0057FF 
  6 SFV        002CEA R   |   6 SFZ        002C7F R   |   6 SIGN       000E2A R
  6 SIGN1      000E3A R   |   6 SLASH      000A9B R   |   6 SLMOD      000A7F R
  6 SNAME      0016F4 R   |     SP0     =  00002C     |   6 SPACE      000F17 R
  6 SPACS      000F26 R   |   6 SPAT       000601 R   |     SPI_CR1 =  005200 
    SPI_CR2 =  005201     |     SPI_CRCP=  005205     |     SPI_DR  =  005204 
    SPI_ICR =  005202     |     SPI_RXCR=  005206     |     SPI_SR  =  005203 
    SPI_TXCR=  005207     |     SPP     =  001680     |     SPSAVE  =  000001 
  6 SPSTO      00060E R   |   6 SQRT10     002364 R   |   6 SQRT2      002322 R
  6 SQRT3      002339 R   |   6 SSMOD      000B2B R   |     SSP     =  000001 
    STACK   =  0017FF     |   6 STAR       000AF4 R   |   6 STASL      000B3C R
  6 STEXP      002D35 R   |   6 STEXP1     002D4B R   |   6 STEXP2     002D75 R
  6 STOD       0008B9 R   |   6 STORE      0004D1 R   |   6 STO_SIGN   002509 R
  6 STR        000E58 R   |   6 STRCQ      001571 R   |   6 STRQ       0016B3 R
  6 STRQP      000F82 R   |   6 SUBB       0008D0 R   |   6 SWAPP      000631 R
    SWIM_CSR=  007F80     |   6 TAP        0012FA R   |   6 TBOOT      001B5A R
  6 TBRAN      0004A6 R   |   6 TBUF       000725 R   |     TBUFFBAS=  001680 
  6 TCHAR      000C0B R   |   6 TEMP       0006F6 R   |   6 TEVAL      000748 R
  6 TFLASH     000737 R   |   6 THENN      00160C R   |   6 TIB        000CE0 R
    TIBB    =  001700     |     TIBBASE =  001700     |     TIC     =  000027 
  6 TICK       0014E0 R   |     TIM1_ARR=  005262     |     TIM1_ARR=  005263 
    TIM1_BKR=  00526D     |     TIM1_CCE=  00525C     |     TIM1_CCE=  00525D 
    TIM1_CCM=  005258     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  005259     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525A     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525B     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCR=  005265     |     TIM1_CCR=  005266     |     TIM1_CCR=  005267 
    TIM1_CCR=  005268     |     TIM1_CCR=  005269     |     TIM1_CCR=  00526A 
    TIM1_CCR=  00526B     |     TIM1_CCR=  00526C     |     TIM1_CNT=  00525E 
    TIM1_CNT=  00525F     |     TIM1_CR1=  005250     |     TIM1_CR2=  005251 
    TIM1_CR2=  000000     |     TIM1_CR2=  000002     |     TIM1_CR2=  000004 
    TIM1_CR2=  000005     |     TIM1_CR2=  000006     |     TIM1_DTR=  00526E 
    TIM1_EGR=  005257     |     TIM1_EGR=  000007     |     TIM1_EGR=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 196.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_EGR=  000002     |     TIM1_EGR=  000003     |     TIM1_EGR=  000004 
    TIM1_EGR=  000005     |     TIM1_EGR=  000006     |     TIM1_EGR=  000000 
    TIM1_ETR=  005253     |     TIM1_ETR=  000006     |     TIM1_ETR=  000000 
    TIM1_ETR=  000001     |     TIM1_ETR=  000002     |     TIM1_ETR=  000003 
    TIM1_ETR=  000007     |     TIM1_ETR=  000004     |     TIM1_ETR=  000005 
    TIM1_IER=  005254     |     TIM1_IER=  000007     |     TIM1_IER=  000001 
    TIM1_IER=  000002     |     TIM1_IER=  000003     |     TIM1_IER=  000004 
    TIM1_IER=  000005     |     TIM1_IER=  000006     |     TIM1_IER=  000000 
    TIM1_OIS=  00526F     |     TIM1_PSC=  005260     |     TIM1_PSC=  005261 
    TIM1_RCR=  005264     |     TIM1_SMC=  005252     |     TIM1_SMC=  000007 
    TIM1_SMC=  000000     |     TIM1_SMC=  000001     |     TIM1_SMC=  000002 
    TIM1_SMC=  000004     |     TIM1_SMC=  000005     |     TIM1_SMC=  000006 
    TIM1_SR1=  005255     |     TIM1_SR1=  000007     |     TIM1_SR1=  000001 
    TIM1_SR1=  000002     |     TIM1_SR1=  000003     |     TIM1_SR1=  000004 
    TIM1_SR1=  000005     |     TIM1_SR1=  000006     |     TIM1_SR1=  000000 
    TIM1_SR2=  005256     |     TIM1_SR2=  000001     |     TIM1_SR2=  000002 
    TIM1_SR2=  000003     |     TIM1_SR2=  000004     |     TIM2_ARR=  00530D 
    TIM2_ARR=  00530E     |     TIM2_CCE=  005308     |     TIM2_CCE=  000000 
    TIM2_CCE=  000001     |     TIM2_CCE=  000004     |     TIM2_CCE=  000005 
    TIM2_CCE=  005309     |     TIM2_CCM=  005305     |     TIM2_CCM=  005306 
    TIM2_CCM=  005307     |     TIM2_CCM=  000000     |     TIM2_CCM=  000004 
    TIM2_CCM=  000003     |     TIM2_CCR=  00530F     |     TIM2_CCR=  005310 
    TIM2_CCR=  005311     |     TIM2_CCR=  005312     |     TIM2_CCR=  005313 
    TIM2_CCR=  005314     |     TIM2_CNT=  00530A     |     TIM2_CNT=  00530B 
    TIM2_CR1=  005300     |     TIM2_CR1=  000007     |     TIM2_CR1=  000000 
    TIM2_CR1=  000003     |     TIM2_CR1=  000001     |     TIM2_CR1=  000002 
    TIM2_EGR=  005304     |     TIM2_EGR=  000001     |     TIM2_EGR=  000002 
    TIM2_EGR=  000003     |     TIM2_EGR=  000006     |     TIM2_EGR=  000000 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |   6 TIMEOUTQ   000310 R   |   6 TIMER      0002FA R
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |   6 TNAM2      001A32 R
  6 TNAM3      001A50 R   |   6 TNAM4      001A56 R   |   6 TNAME      001A2F R
  6 TOFLASH    000335 R   |   6 TOKEN      0011BB R   |   6 TOR        0005EA R
  6 TORAM      000375 R   |   6 TRUE       000861 R   |     TRUEE   =  00FFFF 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 197.
Hexadecimal [24-Bits]

Symbol Table

  6 TWOSL      000BC7 R   |   6 TYPE1      000F46 R   |   6 TYPE2      000F4C R
  6 TYPES      000F41 R   |   6 Timer4Ha   000005 R   |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
    UART3   =  000001     |     UART3_BA=  005240     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  005232 
    UART_BRR=  005233     |     UART_CR1=  005234     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  005235     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  005231     |     UART_GTR=  000009     |     UART_PSC=  00000A 
    UART_SR =  005230     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBASE   =  000006     |     UBC     =  004801     |     UCNTXT  =  000016 
    UCP     =  00001A     |     UCTIB   =  00000E     |     UD1     =  000001 
    UD2     =  000002     |     UD3     =  000003     |     UD4     =  000004 
  6 UDIV10     0031FE R   |   6 UDOT       000FCF R   |   6 UDOTR      000FAF R
  6 UDSLA3     002A9A R   |   6 UDSLA4     002AC0 R   |   6 UDSLA7     002AF1 R
  6 UDSLA8     002AFC R   |   6 UDSLMOD    002A65 R   |   6 UDSSTAR    0026FC R
  6 UEND       000047 R   |     UFPSW   =  000008     |   6 UGREAT     000954 R
  6 UGREAT1    00096B R   |     UHLD    =  000014     |     UINN    =  00000C 
    UINTER  =  000012     |     ULAST   =  00001C     |   6 ULES1      00092D R
  6 ULESS      000917 R   |   6 UMMOD      0009EB R   |   6 UMOD10     0031BD R
  6 UMSTA      000AAA R   |   6 UNIQ1      0016F1 R   |   6 UNIQU      0016D2 R
  6 UNLKEE     001CD8 R   |   6 UNLKFL     001CF7 R   |   6 UNLOCK     001D16 R
  6 UNTIL      0015D4 R   |     UOFFSET =  00001E     |   6 UPDATCP    001C95 R
  6 UPDATLAS   001C6C R   |   6 UPDATPTR   002298 R   |   6 UPDATRUN   001C84 R
  6 UPDATVP    001CAC R   |   6 UPL1       0006D3 R   |   6 UPLUS      0006BC R
    UPP     =  000006     |   6 UPPER      00117E R   |   6 UPPER1     0011A1 R
  6 UPPER2     0011AA R   |     URLAST  =  000022     |     USR_BTN_=  000004 
    USR_BTN_=  000010     |     USR_BTN_=  005015     |     UTFLASH =  000020 
    UTIB    =  000010     |     UTMP    =  00000A     |   6 UTYP1      00196C R
  6 UTYP2      00197B R   |   6 UTYPE      001967 R   |     UVP     =  000018 
  6 UZERO      00002B R   |   6 VARIA      0018A9 R   |     VAR_BASE=  000080 
    VAR_TOP =  0017BF     |     VER     =  000004     |   6 VPP        000778 R
    VSIZE   =  000006     |     WANT_CON=  000001     |     WANT_DEB=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 198.
Hexadecimal [24-Bits]

Symbol Table

    WANT_DOU=  000001     |     WANT_FLO=  000001     |     WANT_SCA=  000001 
    WANT_SEE=  000000     |     WDGOPT  =  004805     |     WDGOPT_I=  000002 
    WDGOPT_L=  000003     |     WDGOPT_W=  000000     |     WDGOPT_W=  000001 
  6 WHILE      00165A R   |   6 WITHI      0009D0 R   |   6 WORDD      001164 R
  6 WORDS      001A8C R   |   6 WORS1      001A92 R   |   6 WORS2      001AAE R
  6 WR_BYTE    001DC1 R   |   6 WR_WORD    001DE6 R   |   6 WTABLE     0023F0 R
  6 WTAT       002414 R   |   6 WTINIT     002459 R   |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |     XMEM_SIZ=  017830     |     XOFF    =  000013 
    XON     =  000011     |   6 XORR       0006A7 R   |     XTEMP   =  000024 
    YTEMP   =  000026     |   6 ZEQ1       002829 R   |   6 ZEQU1      000674 R
  6 ZEQUAL     00066A R   |   6 ZERO       000BE1 R   |   6 ZL1        000661 R
  6 ZLESS      000658 R   |   6 app_spac   003580 R   |   6 baudrate   00037B R
  6 block_er   001EAC R   |   6 clear_ra   000019 R   |   6 clock_in   000064 R
  6 copy_buf   001F0C R   |   6 copy_buf   001F2B R   |   6 copy_pro   001F2B R
    da      =  000002     |     db      =  000003     |     dc      =  000000 
    dd      =  000001     |   6 do2lit     00293E R   |   6 erase_fl   001ECE R
  6 fmove_do   002281 R   |   6 main       000016 R   |   6 next_row   00223E R
  6 no_move    002288 R   |   6 nsign      0024E0 R   |   6 parse_di   00250D R
  6 parse_ex   002EC9 R   |   6 pristine   001FAC R   |   6 proceed_   001ED1 R
  6 reboot     000327 R   |   6 reset_ve   002013 R   |   6 row_eras   001E8C R
  6 row_eras   001EE5 R   |   6 row_eras   001F0C R   |   6 set_opti   001F80 R
  6 set_vect   0020B4 R   |   6 uart_ini   000076 R   |   6 write_ro   001F50 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 199.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   3580   flags    0

