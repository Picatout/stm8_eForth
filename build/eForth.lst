ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;-------------------------------------------------------------
                                     21 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                     22 ;  assemble using sdasstm8
                                     23 ;  implemented on NUCLEO-8S208RB board
                                     24 ;  Adapted by picatout 2019/10/27
                                     25 ;  https://github.com/picatout/stm8_nucleo/eForth
                                     26 ;--------------------------------------------------------------
                                     27 	.module EFORTH
                                     28          .optsdcc -mstm8
                                                .include "inc/macros.inc" 
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        
                                            ; macro to create dictionary header record
                                            .macro _HEADER label,len,name 
                                        
                                            ; runtime literal 
                                            .macro _DOLIT value 
                                        
                                            ; branch if TOS<>0
                                            ; TBRANCH 
                                            .macro _TBRAN target 
                                            
                                            ; branch if TOS==0 
                                            ; 0BRANCH 
                                            .macro _QBRAN target 
                                        
                                            ; uncondittionnal BRANCH 
                                            .macro _BRAN target 
                                        
                                            ; run time NEXT 
                                            .macro _DONXT target 
                                                .include "inc/config.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        
                                        ; constants to select board
                                        ; to assemble for a specific 
                                        ; board or MCU set it to 1 and the other
                                        ; to 0. 
                                 
                                 
                                 
                                        
                                        ; select end of line character
                                 
                                 
                                        
                                        ; set to 1 to include 
                                        ; scaling constants vocabulary
                                        ; see: const_ratio.asm 
                                 
                                        
                                        ; set to 1 to include 
                                        ; constants tables vocabulary 
                                        ; see: ctable.asm 
                                 
                                        
                                        ; include double library 
                                 
                                        
                                        ; to include floating point 
                                        ; library
                                        ; require double library  
                                 
                                        
                                        ; set to 1 to make vocabulary 
                                        ; case sensitive 
                                 
                                        
                                        ; how many bytes are reserved 
                                        ; by system at EEPROM base.
                                 
                                        
                                 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        .endif
                                        
                                 
                                        	.include "inc/stm8s105.inc"
                                        .if DISCOVERY
                                        	.include "inc/stm8s_disco.inc"
                                        .endif 
                                        XMEM_SIZE=0 ; size in bytes of EXTENDED MEMORY 
                                        UART_SR=UART2_SR
                                        UART_DR=UART2_DR
                                        UART_BRR1=UART2_BRR1
                                        UART_BRR2=UART2_BRR2
                                        UART_CR1=UART2_CR1
                                        UART_CR2=UART2_CR2
                                        .endif 
                                        
                                        	
                                         
                                        
                                        
                                        
                                     32 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     34 
                                     35 ;===============================================================
                                     36 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     37 ;  Date: 2020-06-07 
                                     38 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     39 ;  Date: 2019-10-26
                                     40 ;  Changes to memory map:
                                     41 ;       0x16f0  Data Stack, growing downward
                                     42 ;       0x1700  Terminal input buffer TIB
                                     43 ;       0x17ff  Return Stack, growing downard
                                     44 ;================================================================
                                     45 ;       STM8EF, Version 2.1, 13 July
                                     46 ;               Implemented on STM8S-Discovery Board.
                                     47 ;               Assembled by ST VisualDevelop STVD 
                                     48 ;               Bootup on internal 2 MHz clock
                                     49 ;               Switch to external 16 MHz crystal clock
                                     50 ;
                                     51 ; FORTH Virtual Machine:
                                     52 ; Subroutine threaded model
                                     53 ; SP Return stack pointer
                                     54 ; X Data stack pointer
                                     55 ; A,Y Scratch pad registers
                                     56 ;
                                     57 ; Memory Map:
                                     58 ; 0x0 RAM memory, system variables
                                     59 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     60 ; 0x780 Data stack, growing downward
                                     61 ; 0x790 Terminal input buffer TIB
                                     62 ; 0x7FF Return stack, growing downward
                                     63 ; 0x8000 Interrupt vector table
                                     64 ; 0x8080 FORTH startup code
                                     65 ; 0x80E7 Start of FORTH dictionary in ROM
                                     66 ; 0x9584 End of FORTH dictionary
                                     67 ;
                                     68 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     69 ;                  use UART1 instead of UART2 for communication with user.
                                     70 ;                  UART1 is available as ttyACM* device via USB connection.
                                     71 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     72 ;                  and MSEC word that return MS value.
                                     73 ;
                                     74 ;       EF12, Version 2.1, 18apr00cht
                                     75 ;               move to 8000H replacing WHYP.
                                     76 ;               copy interrupt vectors from WHYPFLSH.S19
                                     77 ;               to EF12.S19 before flashing
                                     78 ;               add TICKS1 and DELAY1 for motor stepping
                                     79 ;
                                     80 ;       EF12, 02/18/00, C. H. Ting
                                     81 ;       Adapt 86eForth v2.02 to 68HC12.
                                     82 ;               Use WHYP to seed EF12.ASM
                                     83 ;               Use AS12 native 68HC12 assembler:
                                     84 ;               as12 ef12.asm >ef12.lst
                                     85 ;       EF12A, add ADC code, 02mar00cht
                                     86 ;       EF12B, 01mar00cht
                                     87 ;               stack to 0x78, return stack to 0xf8.
                                     88 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     89 ;               add PWM registers
                                     90 ;               add SPI registers and code
                                     91 ;       EF12C, 12mar00cht
                                     92 ;               add MAX5250 D/A converter
                                     93 ;       EF12D, 15mar00cht
                                     94 ;               add all the Lexel interface words
                                     95 ;       EF12E, 18apr00cht, save for reference
                                     96 ;
                                     97 ;       Copyright (c) 2000
                                     98 ;       Dr. C. H. Ting
                                     99 ;       156 14th Avenue
                                    100 ;       San Mateo, CA 94402
                                    101 ;       (650) 571-7639
                                    102 ;
                                    103 
                                    104       
                                    105 ;*********************************************************
                                    106 ;	Assembler constants
                                    107 ;*********************************************************
                           000000   108 RAMBASE =	0x0000	   ;ram base
                           000001   109 .if NUCLEO 
                           0017FF   110 STACK   =	0x17FF 	;system (return) stack empty 
                           001680   111 DATSTK  =	0x1680	;data stack  empty
                           001680   112 TBUFFBASE =     0x1680  ; flash read/write transaction buffer address  
                           001700   113 TIBBASE =       0X1700  ; transaction input buffer addr.
                           000000   114 .else ; DISCOVERY
                                    115 STACK   =	0x7FF 	;system (return) stack empty 
                                    116 DATSTK  =	0x680	;data stack  empty
                                    117 TBUFFBASE =     0x680  ; flash read/write transaction buffer address  
                                    118 TIBBASE =       0X700  ; transaction input buffer addr.
                                    119 .endif
                                    120 
                                    121 ;; Memory allocation
                           000006   122 UPP     =     RAMBASE+6          ; systeme variables base address 
                           001680   123 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0017FF   124 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           001680   125 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           001700   126 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   127 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0017BF   128 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    129 
                                    130 ; user variables constants 
                           000006   131 UBASE = UPP       ; numeric base 
                           000008   132 UFPSW = UBASE+2  ; floating point state word 
                           00000A   133 UTMP = UFPSW+2    ; temporary storage
                           00000C   134 UINN = UTMP+2     ; >IN tib pointer 
                           00000E   135 UCTIB = UINN+2    ; tib count 
                           000010   136 UTIB = UCTIB+2    ; tib address 
                           000012   137 UINTER = UTIB+2   ; interpreter vector 
                           000014   138 UHLD = UINTER+2   ; hold 
                           000016   139 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000018   140 UVP = UCNTXT+2    ; variable pointer 
                           00001A   141 UCP = UVP+2      ; code pointer
                           00001C   142 ULAST = UCP+2    ; last dictionary pointer 
                           00001E   143 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000020   144 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
                           000022   145 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    146 
                                    147 ;******  System Variables  ******
                           000024   148 XTEMP	=	URLAST +2;address called by CREATE
                           000026   149 YTEMP	=	XTEMP+2	;address called by CREATE
                           000024   150 PROD1 = XTEMP	;space for UM*
                           000026   151 PROD2 = PROD1+2
                           000028   152 PROD3 = PROD2+2
                           00002A   153 CARRY = PROD3+2
                           00002C   154 SP0	= CARRY+2	;initial data stack pointer
                           00002E   155 RP0	= SP0+2		;initial return stack pointer
                           000030   156 MS    =   RP0+2         ; millisecond counter 
                           000032   157 CNTDWN =  MS+2          ; count down timer 
                           000034   158 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000035   159 PTR16 = FPTR+1          ; middle byte of farptr 
                           000036   160 PTR8 = FPTR+2           ; least byte of farptr 
                           000038   161 SEEDX = PTR8+2          ; PRNG seed X 
                           00003A   162 SEEDY = SEEDX+2         ; PRNG seed Y 
                                    163 
                                    164 ; EEPROM persistant data  
                           004000   165 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   166 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   167 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   168 APP_VP = APP_CP+2  ; free data space pointer 
                                    169 
                                    170 
                                    171 ;***********************************************
                                    172 ;; Version control
                                    173 
                           000004   174 VER     =     4         ;major release version
                           000000   175 EXT     =     0         ;minor extension
                                    176 
                                    177 ;; Constants
                                    178 
                           00FFFF   179 TRUEE   =     0xFFFF      ;true flag
                                    180 
                           000040   181 COMPO   =     0x40     ;lexicon compile only bit
                           000080   182 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   183 MASKK   =     0x1F7F  ;lexicon bit mask
                                    184 
                           000002   185 CELLL   =     2       ;size of a cell
                           00000A   186 BASEE   =     10      ;default radix
                           000008   187 BKSPP   =     8       ;back space
                           00000A   188 LF      =     10      ;line feed
                           00000D   189 CRR     =     13      ;carriage return
                           000011   190 XON     =     17
                           000013   191 XOFF    =     19
                           00001B   192 ERR     =     27      ;error escape
                           000027   193 TIC     =     39      ;tick
                           0000CD   194 CALLL   =     0xCD     ;CALL opcodes
                           000080   195 IRET_CODE =   0x80    ; IRET opcode 
                                    196 
                                    197         .macro _ledon
                                    198         .if NUCLEO
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    199         bset PC_ODR,#LED2_BIT
                                    200         .else ;DISCOVERY 
                                    201         .if DISCOVERY
                                    202         bres PD_ODR,#LD1_BIT 
                                    203         .endif
                                    204         .endif
                                    205         .endm
                                    206 
                                    207         .macro _ledoff
                                    208         .if NUCLEO 
                                    209         bres PC_ODR,#LED2_BIT
                                    210         .else ;DISCOVERY 
                                    211         .if DISCOVERY
                                    212         bset PD_ODR,#LD1_BIT 
                                    213         .endif 
                                    214         .endif
                                    215         .endm
                                    216 
                                    217 ;**********************************************************
                                    218         .area DATA (ABS)
      000000                        219         .org RAMBASE 
                                    220 ;**********************************************************
                                    221 
                                    222 ;**********************************************************
                                    223         .area SSEG (ABS) ; STACK
      001700                        224         .org 0x1700
      001700                        225         .ds 256 
                                    226 ; space for DATSTK,TIB and STACK         
                                    227 ;**********************************************************
                                    228 
                                    229 ;**********************************************************
                                    230         .area HOME ; vectors table
                                    231 ;**********************************************************
      000000 82 00 00 16            232 	int main	        ; reset
      000004 82 00 00 00            233 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            234 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            235 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            236 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            237 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            238 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            239 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            240 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            241 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            242 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            243 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            244 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            245 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            246 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            247 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            248 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            249 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            250 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            251 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            252 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            253 	int NonHandledInterrupt	; irq19
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      000058 82 00 00 00            254 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            255 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            256 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            257 	int Timer4Handler	; irq23
      000068 82 00 00 00            258 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            259 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            260 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            261 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            262 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            263 	int NonHandledInterrupt	; irq29
                                    264 
                                    265 ;**********************************************************
                                    266         .area CODE
                                    267 ;**********************************************************
                                    268 
                                    269 ; non handled interrupt reset MCU
      000000                        270 NonHandledInterrupt:
      000000 A6 80            [ 1]  271         ld a, #0x80
      000002 C7 50 D1         [ 1]  272         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    273 	;iret
                                    274 
                                    275 ; used for milliseconds counter 
                                    276 ; MS is 16 bits counter 
      000005                        277 Timer4Handler:
      000005 72 5F 53 42      [ 1]  278 	clr TIM4_SR 
      000009 BE 30            [ 2]  279         ldw x,MS 
      00000B 5C               [ 1]  280         incw x 
      00000C BF 30            [ 2]  281         ldw MS,x
      00000E BE 32            [ 2]  282         ldw x,CNTDWN 
      000010 27 03            [ 1]  283         jreq 1$
      000012 5A               [ 2]  284         decw x 
      000013 BF 32            [ 2]  285         ldw CNTDWN,x 
      000015                        286 1$:         
      000015 80               [11]  287         iret 
                                    288 
                                    289 
                                    290 ;; Main entry points and COLD start data
      000016                        291 main:
                                    292 ; clear all RAM
      000016 AE 00 00         [ 2]  293 	ldw X,#RAMBASE
      000019                        294 clear_ram0:
      000019 7F               [ 1]  295 	clr (X)
      00001A 5C               [ 1]  296 	incw X
      00001B A3 17 FF         [ 2]  297 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  298 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  299         ldw x,#RPP
      000023 94               [ 1]  300         ldw sp,x
                                    301 ; set SEEDX and SEEDY to 1 
      000024 3C 39            [ 1]  302         inc SEEDX+1 
      000026 3C 3B            [ 1]  303         inc SEEDY+1          
      000028 CC 00 49         [ 2]  304 	jp ORIG
                                    305 
                                    306 ; COLD initialize these variables.
      00002B                        307 UZERO:
      00002B 00 0A                  308         .word      BASEE   ;BASE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      00002D 00 00                  309         .word      0       ; floating point state 
      00002F 00 00                  310         .word      0       ;tmp
      000031 00 00                  311         .word      0       ;>IN
      000033 00 00                  312         .word      0       ;#TIB
      000035 17 00                  313         .word      TIBB    ;TIB
      000037 13 87                  314         .word      INTER   ;'EVAL
      000039 00 00                  315         .word      0       ;HLD
      00003B 31 FE                  316         .word      LASTN  ;CNTXT pointer
      00003D 00 80                  317         .word      VAR_BASE   ;variables free space pointer 
      00003F 33 00                  318         .word      app_space ; FLASH free space pointer 
      000041 31 FE                  319         .word      LASTN   ;LAST
      000043 00 00                  320         .word      0        ; OFFSET 
      000045 00 00                  321         .word      0       ; TFLASH
                                    322 ;       .word      0       ; URLAST   
      000047 00 00                  323 UEND:   .word      0
                                    324 
      000049                        325 ORIG:   
                                    326 ; initialize SP
      000049 AE 17 FF         [ 2]  327         LDW     X,#STACK  ;initialize return stack
      00004C 94               [ 1]  328         LDW     SP,X
      00004D BF 2E            [ 2]  329         LDW     RP0,X
      00004F AE 16 80         [ 2]  330         LDW     X,#DATSTK ;initialize data stack
      000052 BF 2C            [ 2]  331         LDW     SP0,X
                           000001   332 .if NUCLEO        
                                    333 ; initialize PC_5 as output to control LED2
                                    334 ; added by Picatout 
      000054 72 1A 50 0D      [ 1]  335         bset PC_CR1,#LED2_BIT
      000058 72 1A 50 0E      [ 1]  336         bset PC_CR2,#LED2_BIT
      00005C 72 1A 50 0C      [ 1]  337         bset PC_DDR,#LED2_BIT
                                    338 .endif 
                           000000   339 .if DISCOVERY
                                    340         bset PD_CR1,#LD1_BIT
                                    341         bset PD_CR2,#LD1_BIT
                                    342         bset PD_DDR,#LD1_BIT 
                                    343 .endif
      000060                        344         _ledoff
                           000001     1         .if NUCLEO 
      000060 72 1B 50 0A      [ 1]    2         bres PC_ODR,#LED2_BIT
                           000000     3         .else ;DISCOVERY 
                                      4         .if DISCOVERY
                                      5         bset PD_ODR,#LD1_BIT 
                                      6         .endif 
                                      7         .endif
                                    345 ; initialize clock to HSI
                                    346 ; no divisor 16Mhz 
                                    347 ; Added by Picatout 
      000064                        348 clock_init:
      000064 72 5F 50 C6      [ 1]  349         clr CLK_CKDIVR
      000068 72 12 50 C5      [ 1]  350 	bset CLK_SWCR,#CLK_SWCR_SWEN
                           000001   351 .if NUCLEO|DOORBELL
      00006C A6 E1            [ 1]  352 	ld a,#CLK_SWR_HSI
                           000000   353 .else ; DISCOVERY as 16Mhz crystal
                                    354 	ld a,#CLK_SWR_HSE
                                    355 .endif 
      00006E C7 50 C4         [ 1]  356 	ld CLK_SWR,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      000071 C1 50 C3         [ 1]  357 1$:	cp a,CLK_CMSR
      000074 26 FB            [ 1]  358 	jrne 1$
                                    359         
                                    360 ; initialize UART, 115200 8N1
      000076                        361 uart_init:
                           000001   362 .if NUCLEO 
      000076 72 14 50 C7      [ 1]  363 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    364 	; configure tx pin
      00007A 72 1A 50 02      [ 1]  365 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      00007E 72 1A 50 03      [ 1]  366 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      000082 72 1A 50 04      [ 1]  367 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    368 	; baud rate 115200 Fmaster=16Mhz  16000000/115200=139=0x8b
                           000000   369 .else ; DISCOVERY use UART2 
                                    370 	bset CLK_PCKENR1,#CLK_PCKENR1_UART2
                                    371 	; configure tx pin
                                    372 	bset PD_DDR,#UART2_TX_PIN ; tx pin
                                    373 	bset PD_CR1,#UART2_TX_PIN ; push-pull output
                                    374 	bset PD_CR2,#UART2_TX_PIN ; fast output
                                    375 .endif
                                    376 ; baud rate 115200 Fmaster=8Mhz  
      000086 35 0B 52 33      [ 1]  377 	mov UART_BRR2,#0x0b ; must be loaded first
      00008A 35 08 52 32      [ 1]  378 	mov UART_BRR1,#0x8
      00008E 35 0C 52 35      [ 1]  379 	mov UART_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    380 ; initialize timer4, used for millisecond interrupt  
      000092 35 07 53 45      [ 1]  381 	mov TIM4_PSCR,#7 ; prescale 128  
      000096 35 7D 53 46      [ 1]  382 	mov TIM4_ARR,#125 ; set for 1msec.
      00009A 35 05 53 40      [ 1]  383 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      00009E 72 10 53 41      [ 1]  384 	bset TIM4_IER,#TIM4_IER_UIE 
                                    385 ; set TIM4 interrupt priority to highest
      0000A2 A6 3F            [ 1]  386         ld a,#~(IPR_MASK<<6)
      0000A4 C4 7F 75         [ 1]  387         and a,ITC_SPR6
      0000A7 AA C0            [ 1]  388         or a,#(IPR3<<6)
      0000A9 C7 7F 75         [ 1]  389         ld ITC_SPR6,a 
      0000AC 9A               [ 1]  390         rim
      0000AD CC 1A 88         [ 2]  391         jp  COLD   ;default=MN1
                                    392 
                                    393 
                                    394 ;; place MCU in sleep mode with
                                    395 ;; halt opcode 
                                    396 ;; BYE ( -- )
      0000B0 00 00                  397         .word 0
                           0000B2   398         LINK=.
      0000B2 03                     399         .byte 3 
      0000B3 42 59 45               400         .ascii "BYE"
      0000B6                        401 BYE: 
      0000B6 8E               [10]  402         halt 
      0000B7 81               [ 4]  403         ret 
                                    404 
                                    405 ; Enable interrupts 
                                    406 ; EI ( -- )
      0000B8 00 B2                  407         .word LINK 
                           0000BA   408         LINK=.
      0000BA 02                     409         .byte 2
      0000BB 45 49                  410         .ascii "EI"
      0000BD                        411 EI:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      0000BD 9A               [ 1]  412         rim 
      0000BE 81               [ 4]  413         ret 
                                    414 
                                    415 ; Disable interrupts
                                    416 ; DI ( -- )
      0000BF 00 BA                  417         .word LINK 
                           0000C1   418         LINK=.
      0000C1 02                     419         .byte 2 
      0000C2 44 49                  420         .ascii "DI"
      0000C4                        421 DI:
      0000C4 9B               [ 1]  422         sim 
      0000C5 81               [ 4]  423         ret 
                                    424 
                                    425 ; set interrupt priority level 
                                    426 ; SET-ISP ( n1 n2 -- )
                                    427 ; n1 level {1..3}
                                    428 ; n2 vector {0..29}
      0000C6 00 C1                  429         .word LINK 
                           0000C8   430         LINK=.
      0000C8 07                     431         .byte 7 
      0000C9 53 45 54 2D 49 53 50   432         .ascii "SET-ISP"
      0000D0                        433 SETISP:
      0000D0 90 93            [ 1]  434         ldw y,x 
      0000D2 90 FE            [ 2]  435         ldw y,(y)
      0000D4 A6 04            [ 1]  436         ld a,#4 ; 4 slot per register 
                                    437 ;  quotient select register, remainder select slot in register.        
      0000D6 90 62            [ 2]  438         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000D8 A4 03            [ 1]  439         and a,#3 
      0000DA 48               [ 1]  440         sll a ; 2*SLOT  lshift 
      0000DB 72 A9 7F 70      [ 2]  441         addw y,#ITC_SPR1 
      0000DF FF               [ 2]  442         ldw (x),y  ; ( level reg -- )
      0000E0 90 5F            [ 1]  443         clrw y 
      0000E2 90 97            [ 1]  444         ld yl,a 
      0000E4 1D 00 02         [ 2]  445         subw x,#CELLL 
      0000E7 FF               [ 2]  446         ldw (x),y  ; ( level reg lshift -- )
      0000E8 90 93            [ 1]  447         ldw y,x 
      0000EA 90 EE 02         [ 2]  448         ldw y,(2,y) 
      0000ED 90 F6            [ 1]  449         ld a,(y)   ; reg_value
      0000EF 1D 00 02         [ 2]  450         subw x,#CELLL 
      0000F2 FF               [ 2]  451         ldw (x),y ; ( level reg lshift rval -- )
      0000F3 CD 05 BB         [ 4]  452         call OVER ; ( level reg lshift rval lshift -- )
      0000F6 CD 04 71         [ 4]  453         call DOLIT 
      0000F9 00 03                  454         .word 3
      0000FB CD 05 A1         [ 4]  455         call SWAPP  ; ( level reg lshift rval 3 lshift )
      0000FE CD 0A FC         [ 4]  456         call LSHIFT ; creat slot mask 
      000101 CD 07 DA         [ 4]  457         call INVER  ; ( level reg lshift rval mask )
      000104 CD 05 F0         [ 4]  458         call ANDD ; ( level reg lshift slot_masked )
      000107 CD 05 5A         [ 4]  459         call TOR  ; ( level reg lshift -- R: slot_masked )
      00010A CD 07 5F         [ 4]  460         call ROT  ; ( reg lshift level )
      00010D CD 05 A1         [ 4]  461         call SWAPP ; ( reg level lshift )
      000110 CD 0A FC         [ 4]  462         call LSHIFT  ; ( reg slot_level -- )
      000113 CD 05 3B         [ 4]  463         call RFROM ; ( reg slot_level masked_val )
      000116 CD 06 04         [ 4]  464         call ORR   ; ( reg updated_rval )
      000119 CD 05 A1         [ 4]  465         call SWAPP 
      00011C CD 04 F7         [ 4]  466         call CSTOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                                    467 
                                    468 ; sélectionne l'application 
                                    469 ; qui démarre automatique lors 
                                    470 ; d'un COLD start 
      00011F 00 C8                  471         .word LINK 
                           000121   472         LINK=.
      000121 07                     473         .byte 7
      000122 41 55 54 4F 52 55 4E   474         .ascii "AUTORUN"
      000129                        475 AUTORUN:
      000129 CD 11 4C         [ 4]  476         call TOKEN 
      00012C CD 05 91         [ 4]  477         call DUPP 
      00012F CD 04 9A         [ 4]  478         call QBRAN 
      000132 02 0F                  479         .word FORGET2
      000134 CD 12 49         [ 4]  480         call NAMEQ
      000137 CD 07 4E         [ 4]  481         call QDUP 
      00013A CD 04 9A         [ 4]  482         call QBRAN 
      00013D 02 0F                  483         .word FORGET2
      00013F CD 05 87         [ 4]  484         call DROP 
      000142 1D 00 04         [ 2]  485         subw x,#2*CELLL 
      000145 90 5F            [ 1]  486         clrw y 
      000147 FF               [ 2]  487         ldw (x),y 
      000148 90 AE 40 02      [ 2]  488         ldw y,#APP_RUN 
      00014C EF 02            [ 2]  489         ldw (2,x),y 
      00014E CC 1D 84         [ 2]  490         jp EESTORE 
                                    491 
                                    492 ;; Reset dictionary pointer before 
                                    493 ;; forgotten word. RAM space and 
                                    494 ;; interrupt vector defined after 
                                    495 ;; must be resetted also.
      000151 01 21                  496         .word LINK 
                           000153   497         LINK=.
      000153 06                     498         .byte 6
      000154 46 4F 52 47 45 54      499         .ascii "FORGET" 
      00015A                        500 FORGET: 
      00015A CD 11 4C         [ 4]  501         call TOKEN
      00015D CD 05 91         [ 4]  502         call DUPP 
      000160 CD 04 9A         [ 4]  503         call QBRAN 
      000163 02 0F                  504         .word FORGET2
      000165 CD 12 49         [ 4]  505         call NAMEQ ; ( a -- ca na | a F )
      000168 CD 07 4E         [ 4]  506         call QDUP 
      00016B CD 04 9A         [ 4]  507         call QBRAN 
      00016E 02 0F                  508         .word FORGET2
                                    509 ; only forget users words 
      000170 CD 05 91         [ 4]  510         call DUPP ; ( ca na na )
      000173 CD 04 71         [ 4]  511         call DOLIT 
      000176 33 00                  512         .word app_space 
      000178 CD 05 A1         [ 4]  513         call SWAPP 
      00017B CD 08 80         [ 4]  514         call  ULESS 
      00017E CD 04 9A         [ 4]  515         call QBRAN 
      000181 01 D1                  516         .word FORGET6 
                                    517 ; ( ca na -- )        
                                    518 ;reset ivec with address >= ca
      000183 CD 05 A1         [ 4]  519         call SWAPP ; ( na ca -- ) 
      000186 CD 1F 87         [ 4]  520         call CHKIVEC ; ( na -- ) 
                                    521 ; start at LAST and link back to na 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                                    522 ; if variable found reset VP at that point.
      000189                        523 FORGET1:
      000189 CD 07 10         [ 4]  524         call LAST 
      00018C CD 04 EA         [ 4]  525         call AT 
      00018F CD 05 91         [ 4]  526         call DUPP  ; ( -- na last last )
      000192 CD 02 25         [ 4]  527         call FREEVAR ; ( -- na last )
      000195 CD 05 91         [ 4]  528         call DUPP 
      000198 CD 04 71         [ 4]  529         call DOLIT 
      00019B 00 02                  530         .word 2 
      00019D CD 08 39         [ 4]  531         call SUBB ; ( na last -- na last lfa ) link address 
      0001A0 CD 04 EA         [ 4]  532         call AT 
      0001A3 CD 05 91         [ 4]  533         call DUPP ; ( -- na last a a )
      0001A6 CD 06 E4         [ 4]  534         call CNTXT 
      0001A9 CD 04 D3         [ 4]  535         call STORE
      0001AC CD 07 10         [ 4]  536         call LAST  
      0001AF CD 04 D3         [ 4]  537         call STORE ; ( --  na last )
      0001B2 CD 05 BB         [ 4]  538         call OVER 
      0001B5 CD 08 61         [ 4]  539         call EQUAL ; ( na last na -- na T|F ) 
      0001B8 CD 04 9A         [ 4]  540         call QBRAN 
      0001BB 01 89                  541         .word FORGET1 
                                    542 ; ( na -- )
      0001BD CD 04 71         [ 4]  543         call DOLIT 
      0001C0 00 02                  544         .word 2 
      0001C2 CD 08 39         [ 4]  545         call SUBB 
      0001C5 CD 07 00         [ 4]  546         call CPP 
      0001C8 CD 04 D3         [ 4]  547         call STORE  
      0001CB CD 1B B7         [ 4]  548         call UPDATCP 
      0001CE CC 1B 8E         [ 2]  549         jp UPDATLAST 
      0001D1                        550 FORGET6: ; tried to forget a RAM or system word 
                                    551 ; ( ca na -- )
      0001D1 1D 00 02         [ 2]  552         subw x,#CELLL 
      0001D4 90 BE 2C         [ 2]  553         ldw y,SP0 
      0001D7 FF               [ 2]  554         ldw (x),y  
      0001D8 CD 08 80         [ 4]  555         call ULESS
      0001DB CD 04 9A         [ 4]  556         call QBRAN 
      0001DE 02 01                  557         .word PROTECTED 
      0001E0 CD 13 55         [ 4]  558         call ABORQ 
      0001E3 1D                     559         .byte 29
      0001E4 20 46 6F 72 20 52 41   560         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      000201                        561 PROTECTED:
      000201 CD 13 55         [ 4]  562         call ABORQ
      000204 0A                     563         .byte 10
      000205 20 50 72 6F 74 65 63   564         .ascii " Protected"
             74 65 64
      00020F                        565 FORGET2: ; no name or not found in dictionary 
      00020F CD 13 55         [ 4]  566         call ABORQ
      000212 05                     567         .byte 5
      000213 20 77 68 61 74         568         .ascii " what"
      000218                        569 FORGET4:
      000218 CC 05 87         [ 2]  570         jp DROP 
                                    571 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                                    572 
                                    573 ;---------------------------------
                                    574 ; if na is variable 
                                    575 ; free variable data  
                                    576 ; FREEVAR ( na -- )
                                    577 ;---------------------------------
      00021B 01 53                  578         .word LINK 
                           00021D   579         LINK=.
      00021D 07                     580         .byte 7 
      00021E 46 52 45 45 56 41 52   581         .ascii "FREEVAR"
      000225                        582 FREEVAR:
      000225 CD 05 91         [ 4]  583         call DUPP ; ( na na -- )
      000228 CD 05 08         [ 4]  584         CALL CAT  ; ( na c -- )
      00022B CD 0A DE         [ 4]  585         call ONEP ;
      00022E CD 07 C0         [ 4]  586         CALL PLUS ; ( na c+1 -- ca ) 
      000231 CD 0A DE         [ 4]  587         call ONEP ; ( ca+ -- ) to get routne address 
      000234 CD 05 91         [ 4]  588         call DUPP ; ( ca+ ca+ -- )
      000237 CD 04 EA         [ 4]  589         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      00023A CD 04 71         [ 4]  590         call DOLIT 
      00023D 06 51                  591         .word DOVAR ; if routine address is DOVAR then variable 
      00023F CD 08 61         [ 4]  592         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      000242 CD 04 9A         [ 4]  593         call QBRAN 
      000245 02 5B                  594         .word FREEVAR4 
      000247 CD 04 71         [ 4]  595         call DOLIT 
      00024A 00 02                  596         .word 2 
      00024C CD 07 C0         [ 4]  597         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      00024F CD 04 EA         [ 4]  598         call AT 
      000252 CD 06 F2         [ 4]  599         call VPP   
      000255 CD 04 D3         [ 4]  600         call STORE 
      000258 CC 1B CE         [ 2]  601         jp UPDATVP 
      00025B                        602 FREEVAR4: ; not variable
      00025B CC 05 87         [ 2]  603         jp  DROP 
                                    604 
                                    605 ;    SEED ( n -- )
                                    606 ; Initialize PRNG seed with n 
      00025E 02 1D                  607         .word LINK 
                           000260   608         LINK=. 
      000260 04                     609         .byte 4 
      000261 53 45 45 44            610         .ascii "SEED" 
      000265                        611 SEED:
      000265 90 93            [ 1]  612         ldw y,x 
      000267 1C 00 02         [ 2]  613         addw x,#CELLL
      00026A 90 FE            [ 2]  614         ldw y,(y)
      00026C 90 9E            [ 1]  615         ld a,yh 
      00026E B7 38            [ 1]  616         ld SEEDX,a 
      000270 90 9F            [ 1]  617         ld a,yl 
      000272 B7 3A            [ 1]  618         ld SEEDY,a 
      000274 81               [ 4]  619         ret 
                                    620 
                                    621 ;    RANDOM ( u1 -- u2 )
                                    622 ; Pseudo random number betwen 0 and u1-1
      000275 02 60                  623         .word LINK 
                           000277   624         LINK=.
      000277 06                     625         .byte 6
      000278 52 41 4E 44 4F 4D      626         .ascii "RANDOM" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      00027E                        627 RANDOM:
                                    628 ;local variable 
                           000001   629         SPSAVE=1
                           000002   630         VSIZE=2 
      00027E 52 02            [ 2]  631         sub sp,#VSIZE
      000280 1F 01            [ 2]  632         ldw (SPSAVE,sp),x  
                                    633 ; XTEMP=(SEEDX<<5)^SEEDX 
      000282 90 93            [ 1]  634         ldw y,x 
      000284 90 FE            [ 2]  635         ldw y,(y)
      000286 90 BF 26         [ 2]  636         ldw YTEMP,y 
      000289 BE 38            [ 2]  637 	ldw x,SEEDX 
      00028B 58               [ 2]  638 	sllw x 
      00028C 58               [ 2]  639 	sllw x 
      00028D 58               [ 2]  640 	sllw x 
      00028E 58               [ 2]  641 	sllw x 
      00028F 58               [ 2]  642 	sllw x 
      000290 9E               [ 1]  643 	ld a,xh 
      000291 B8 38            [ 1]  644 	xor a,SEEDX 
      000293 B7 24            [ 1]  645 	ld XTEMP,a 
      000295 9F               [ 1]  646 	ld a,xl 
      000296 B8 39            [ 1]  647 	xor a,SEEDX+1 
      000298 B7 25            [ 1]  648 	ld XTEMP+1,a 
                                    649 ; SEEDX=SEEDY 
      00029A BE 3A            [ 2]  650 	ldw x,SEEDY 
      00029C BF 38            [ 2]  651 	ldw SEEDX,x  
                                    652 ; SEEDY=SEEDY^(SEEDY>>1)
      00029E 54               [ 2]  653 	srlw x 
      00029F 9E               [ 1]  654 	ld a,xh 
      0002A0 B8 3A            [ 1]  655 	xor a,SEEDY 
      0002A2 B7 3A            [ 1]  656 	ld SEEDY,a  
      0002A4 9F               [ 1]  657 	ld a,xl 
      0002A5 B8 3B            [ 1]  658 	xor a,SEEDY+1 
      0002A7 B7 3B            [ 1]  659 	ld SEEDY+1,a 
                                    660 ; XTEMP>>3 
      0002A9 BE 24            [ 2]  661 	ldw x,XTEMP 
      0002AB 54               [ 2]  662 	srlw x 
      0002AC 54               [ 2]  663 	srlw x 
      0002AD 54               [ 2]  664 	srlw x 
                                    665 ; x=XTEMP^x 
      0002AE 9E               [ 1]  666 	ld a,xh 
      0002AF B8 24            [ 1]  667 	xor a,XTEMP 
      0002B1 95               [ 1]  668 	ld xh,a 
      0002B2 9F               [ 1]  669 	ld a,xl 
      0002B3 B8 25            [ 1]  670 	xor a,XTEMP+1  
      0002B5 97               [ 1]  671 	ld xl,a 
                                    672 ; SEEDY=x^SEEDY 
      0002B6 B8 3B            [ 1]  673 	xor a,SEEDY+1
      0002B8 97               [ 1]  674 	ld xl,a 
      0002B9 9E               [ 1]  675 	ld a,xh 
      0002BA B8 3A            [ 1]  676 	xor a,SEEDY
      0002BC 95               [ 1]  677 	ld xh,a 
      0002BD BF 3A            [ 2]  678 	ldw SEEDY,x 
                                    679 ; return SEEDY modulo YTEMP  
      0002BF 90 BE 26         [ 2]  680 	ldw y,YTEMP  
      0002C2 65               [ 2]  681 	divw x,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      0002C3 1E 01            [ 2]  682 	ldw x,(SPSAVE,sp)
      0002C5 FF               [ 2]  683         ldw (x),y 
      0002C6 5B 02            [ 2]  684         addw sp,#VSIZE 
      0002C8 81               [ 4]  685 	ret 
                                    686 
                                    687 
                                    688 ;;
                                    689 ;; get millisecond counter 
                                    690 ;; msec ( -- u )
                                    691 ;; Added by Picatout 2020-04-26
      0002C9 02 77                  692         .word LINK  
                           0002CB   693         LINK = . 
      0002CB 04                     694         .byte 4
      0002CC 4D 53 45 43            695         .ascii "MSEC"
      0002D0                        696 MSEC: 
      0002D0 1D 00 02         [ 2]  697         subw x,#CELLL 
      0002D3 90 BE 30         [ 2]  698         ldw y,MS 
      0002D6 FF               [ 2]  699         ldw (x),y 
      0002D7 81               [ 4]  700         ret 
                                    701 
                                    702 ; suspend execution for u msec 
                                    703 ;  pause ( u -- )
      0002D8 02 CB                  704         .word LINK 
                           0002DA   705         LINK=.
      0002DA 05                     706         .byte 5 
      0002DB 50 41 55 53 45         707         .ascii "PAUSE"
      0002E0                        708 PAUSE:
      0002E0 90 93            [ 1]  709         ldw y,x
      0002E2 90 FE            [ 2]  710         ldw y,(y)
      0002E4 72 B9 00 30      [ 2]  711         addw y,MS 
      0002E8 8F               [10]  712 1$:     wfi  
      0002E9 90 B3 30         [ 2]  713         cpw y,MS  
      0002EC 26 FA            [ 1]  714         jrne 1$        
      0002EE 1C 00 02         [ 2]  715         addw x,#CELLL 
      0002F1 81               [ 4]  716         ret 
                                    717 
                                    718 ; initialize count down timer 
                                    719 ;  TIMER ( u -- )  milliseconds 
      0002F2 02 DA                  720         .word LINK 
                           0002F4   721         LINK=.
      0002F4 05                     722         .byte 5 
      0002F5 54 49 4D 45 52         723         .ascii "TIMER" 
      0002FA                        724 TIMER:
      0002FA 90 93            [ 1]  725         ldw y,x
      0002FC 90 FE            [ 2]  726         ldw y,(y) 
      0002FE 90 BF 32         [ 2]  727         ldw CNTDWN,y
      000301 1C 00 02         [ 2]  728         addw x,#CELLL 
      000304 81               [ 4]  729         ret 
                                    730 
                                    731 ; check for TIMER exiparition 
                                    732 ;  TIMEOUT? ( -- 0|-1 )
      000305 02 F4                  733         .word LINK 
                           000307   734         LINK=. 
      000307 08                     735         .byte 8 
      000308 54 49 4D 45 4F 55 54   736         .ascii "TIMEOUT?"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



             3F
      000310                        737 TIMEOUTQ: 
      000310 4F               [ 1]  738         clr a
      000311 1D 00 02         [ 2]  739         subw x,#CELLL 
      000314 90 BE 32         [ 2]  740         ldw y,CNTDWN 
      000317 26 01            [ 1]  741         jrne 1$ 
      000319 43               [ 1]  742         cpl a 
      00031A E7 01            [ 1]  743 1$:     ld (1,x),a 
      00031C F7               [ 1]  744         ld (x),a 
      00031D 81               [ 4]  745         ret         
                                    746 
                                    747 ; reboot MCU 
                                    748 ; REBOOT ( -- )
      00031E 03 07                  749         .word LINK 
                           000320   750         LINK=. 
      000320 06                     751         .byte 6 
      000321 52 45 42 4F 4F 54      752         .ascii "REBOOT"
      000327                        753 reboot:
      000327 CC 00 00         [ 2]  754         jp NonHandledInterrupt
                                    755 
                                    756 ; compile to flash memory 
                                    757 ; TO-FLASH ( -- )
      00032A 03 20                  758         .word LINK 
                           00032C   759         LINK=.
      00032C 08                     760         .byte 8
      00032D 54 4F 2D 46 4C 41 53   761         .ascii "TO-FLASH"
             48
      000335                        762 TOFLASH:
      000335 CD 07 23         [ 4]  763         call RAMLAST 
      000338 CD 04 EA         [ 4]  764         call AT 
      00033B CD 07 4E         [ 4]  765         call QDUP 
      00033E CD 04 9A         [ 4]  766         call QBRAN
      000341 03 64                  767         .word 1$
      000343 CD 13 55         [ 4]  768         call ABORQ 
      000346 1D                     769         .byte 29
      000347 20 4E 6F 74 20 77 68   770         .ascii " Not while definitions in RAM"   
             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      000364 90 AE FF FF      [ 2]  771 1$:     ldw y,#-1 
      000368 90 BF 20         [ 2]  772         ldw UTFLASH,y
      00036B 81               [ 4]  773         ret 
                                    774 
                                    775 ; compile to RAM 
                                    776 ; TO-RAM ( -- )
      00036C 03 2C                  777         .word LINK 
                           00036E   778         LINK=.
      00036E 06                     779         .byte 6 
      00036F 54 4F 2D 52 41 4D      780         .ascii "TO-RAM"
      000375                        781 TORAM:
      000375 90 5F            [ 1]  782         clrw y 
      000377 90 BF 20         [ 2]  783         ldw UTFLASH,y 
      00037A 81               [ 4]  784         ret 
                                    785 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    786 ;; BAUD RATE constants table
                                    787 ; values to put in BRR1 & BRR2 
      00037B                        788 baudrate: 
      00037B A0 1B                  789 	.byte 0xa0,0x1b ; 2400
      00037D D0 05                  790 	.byte 0xd0,0x5  ; 4800 
      00037F 68 03                  791 	.byte 0x68,0x3  ; 9600
      000381 34 01                  792 	.byte 0x34,0x1  ; 19200
      000383 11 06                  793 	.byte 0x11,0x6  ; 57600
      000385 08 0B                  794 	.byte 0x8,0xb   ; 115200
                                    795 
                                    796 ; BAUD RATE CONSTANTS names 
                                    797 ; 2400 baud
      000387 03 6E                  798 	.word LINK
                           000389   799 LINK	= .
      000389 04                     800 	.byte 4
      00038A 42 32 4B 34            801 	.ascii "B2K4" 
      00038E                        802 B2K4:
      00038E 1D 00 02         [ 2]  803 	subw x,#CELLL 
      000391 90 5F            [ 1]  804         clrw y
      000393 FF               [ 2]  805         ldw (x),y
      000394 81               [ 4]  806 	ret
                                    807 ; 4800 baud	
      000395 03 89                  808 	.word LINK
                           000397   809 LINK	= .
      000397 04                     810 	.byte 4
      000398 42 34 4B 38            811 	.ascii "B4K8" 
      00039C                        812 B4K8:
      00039C 1D 00 02         [ 2]  813         subw x,#CELLL 
      00039F 90 AE 00 02      [ 2]  814         ldw y,#2 
      0003A3 FF               [ 2]  815         ldw (x),y
      0003A4 81               [ 4]  816         ret 
                                    817 ; 9600 baud
      0003A5 03 97                  818 	.word LINK
                           0003A7   819 LINK	= .
      0003A7 04                     820 	.byte 4
      0003A8 42 39 4B 36            821 	.ascii "B9K6" 
      0003AC                        822 B9K6:
      0003AC 1D 00 02         [ 2]  823         subw x,#CELLL 
      0003AF 90 AE 00 04      [ 2]  824         ldw y,#4 
      0003B3 FF               [ 2]  825         ldw (x),y 
      0003B4 81               [ 4]  826         ret 
                                    827 ; 19200 baud
      0003B5 03 A7                  828 	.word LINK
                           0003B7   829 LINK	= .
      0003B7 05                     830 	.byte 5
      0003B8 42 31 39 4B 32         831 	.ascii "B19K2" 
      0003BD                        832 B19K2:
      0003BD 1D 00 02         [ 2]  833         subw x,#CELLL
      0003C0 90 AE 00 06      [ 2]  834         ldw y,#6 
      0003C4 FF               [ 2]  835         ldw (x),y 
      0003C5 81               [ 4]  836         ret 
                                    837 ; 57600 baud        
      0003C6 03 B7                  838 	.word LINK
                           0003C8   839 LINK	= .
      0003C8 05                     840 	.byte 5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      0003C9 42 35 37 4B 36         841 	.ascii "B57K6" 
      0003CE                        842 B57K6:
      0003CE 1D 00 02         [ 2]  843         subw x,#CELLL 
      0003D1 90 AE 00 08      [ 2]  844         ldw y,#8 
      0003D5 FF               [ 2]  845         ldw (x),y 
      0003D6 81               [ 4]  846         ret 
                                    847 ; 115200 baud 
      0003D7 03 C8                  848 	.word LINK
                           0003D9   849 LINK	= .
      0003D9 06                     850 	.byte 6
      0003DA 42 31 31 35 4B 32      851 	.ascii "B115K2" 
      0003E0                        852 B115K2:
      0003E0 1D 00 02         [ 2]  853 	subw x,#CELLL 
      0003E3 90 AE 00 0A      [ 2]  854         ldw y,#10 
      0003E7 FF               [ 2]  855         ldw (x),y 
      0003E8 81               [ 4]  856         ret 
                                    857 	
                                    858 ;; set UART2 BAUD rate
                                    859 ;	BAUD ( u -- )
      0003E9 03 D9                  860 	.word LINK 
                           0003EB   861 LINK	= .
      0003EB 04                     862 	.byte 4
      0003EC 42 41 55 44            863 	.ascii "BAUD" 
      0003F0                        864 BAUD:
      0003F0 1D 00 02         [ 2]  865 	subw x,#CELLL
      0003F3 90 AE 03 7B      [ 2]  866         ldw y,#baudrate 
      0003F7 FF               [ 2]  867         ldw (x),y 
      0003F8 CD 07 C0         [ 4]  868         call PLUS
      0003FB 90 93            [ 1]  869         ldw y,x  
      0003FD 90 FE            [ 2]  870         ldw y,(y)
      0003FF 90 F6            [ 1]  871         ld a,(y)
      000401 88               [ 1]  872         push a 
      000402 90 5C            [ 1]  873         incw y 
      000404 90 F6            [ 1]  874         ld a,(y)
      000406 C7 52 33         [ 1]  875         ld UART_BRR2,a 
      000409 84               [ 1]  876         pop a
      00040A C7 52 32         [ 1]  877         ld UART_BRR1,a 
      00040D 1C 00 02         [ 2]  878         addw x,#CELLL 
      000410 81               [ 4]  879         ret 
                                    880 
                                    881 ;; Device dependent I/O
                                    882 ;       ?RX     ( -- c T | F )
                                    883 ;         Return input byte and true, or false.
      000411 03 EB                  884         .word      LINK 
                           000413   885 LINK	= .
      000413 04                     886         .byte      4
      000414 3F 4B 45 59            887         .ascii     "?KEY"
      000418                        888 QKEY:
      000418 90 5F            [ 1]  889         CLRW Y 
      00041A 72 0B 52 30 0B   [ 2]  890         BTJF UART_SR,#UART_SR_RXNE,INCH   ;check status
      00041F C6 52 31         [ 1]  891         LD    A,UART_DR   ;get char in A
      000422 1D 00 02         [ 2]  892 	SUBW	X,#2
      000425 E7 01            [ 1]  893         LD     (1,X),A
      000427 7F               [ 1]  894 	CLR	(X)
      000428 90 53            [ 2]  895         CPLW     Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      00042A                        896 INCH:
      00042A 1D 00 02         [ 2]  897 		SUBW	X,#2
      00042D FF               [ 2]  898         LDW     (X),Y
      00042E 81               [ 4]  899         RET
                                    900 
                                    901 ;       TX!     ( c -- )
                                    902 ;       Send character c to  output device.
      00042F 04 13                  903         .word      LINK
                           000431   904 LINK	= .
      000431 04                     905         .byte      4
      000432 45 4D 49 54            906         .ascii     "EMIT"
      000436                        907 EMIT:
      000436 E6 01            [ 1]  908         LD     A,(1,X)
      000438 1C 00 02         [ 2]  909 	ADDW	X,#2
      00043B 72 0F 52 30 FB   [ 2]  910 OUTPUT: BTJF UART_SR,#UART_SR_TXE,OUTPUT  ;loop until tx empty 
      000440 C7 52 31         [ 1]  911         LD    UART_DR,A   ;send A
      000443 81               [ 4]  912         RET
                                    913 
                                    914 ;       FC-XON  ( -- )
                                    915 ;       send XON character 
      000444 04 31                  916         .word LINK
                           000446   917 LINK    = .
      000446 06                     918         .byte 6 
      000447 46 43 2D 58 4F 4E      919         .ascii "FC-XON"
      00044D                        920 FC_XON:
      00044D 1D 00 02         [ 2]  921         subw x,#CELLL 
      000450 7F               [ 1]  922         clr (x)
      000451 A6 11            [ 1]  923         ld a,#XON 
      000453 E7 01            [ 1]  924         ld (1,x),a 
      000455 CD 04 36         [ 4]  925         call EMIT 
      000458 81               [ 4]  926         ret 
                                    927 
                                    928 ;       FC-XOFF ( -- )
                                    929 ;       Send XOFF character 
      000459 04 46                  930         .word LINK
                           00045B   931 LINK    = .
      00045B 07                     932         .byte 7
      00045C 46 43 2D 58 4F 46 46   933         .ascii "FC-XOFF"
      000463                        934 FC_XOFF:
      000463 1D 00 02         [ 2]  935         subw x,#CELLL 
      000466 7F               [ 1]  936         clr (x)
      000467 A6 13            [ 1]  937         ld a,#XOFF 
      000469 E7 01            [ 1]  938         ld (1,x),a 
      00046B CD 04 36         [ 4]  939         call EMIT 
      00046E 81               [ 4]  940         ret
                                    941 
                                    942 ;; The kernel
                                    943 
                                    944 ;       doLIT   ( -- w )
                                    945 ;       Push an inline literal.
      00046F 04 5B                  946         .word      LINK
                                    947 ;LINK	= 	.
                                    948 ;	.byte      COMPO+5
                                    949 ;        .ascii     "DOLIT"
      000471                        950 DOLIT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      000471 1D 00 02         [ 2]  951 	SUBW X,#2
      000474 16 01            [ 2]  952         ldw y,(1,sp)
      000476 90 FE            [ 2]  953         ldw y,(y)
      000478 FF               [ 2]  954         ldw (x),y
      000479 90 85            [ 2]  955         popw y 
      00047B 90 EC 02         [ 2]  956         jp (2,y)
                                    957 
                                    958 ;       next    ( -- )
                                    959 ;       Code for  single index loop.
      00047E 04 5B                  960         .word      LINK
                           000480   961 LINK	= 	.
      000480 44                     962 	.byte      COMPO+4
      000481 6E 65 78 74            963         .ascii     "next"
      000485                        964 DONXT:
      000485 16 03            [ 2]  965 	LDW Y,(3,SP)
      000487 90 5A            [ 2]  966 	DECW Y
      000489 2A 07            [ 1]  967 	JRPL NEX1 ; jump if N=0
      00048B 90 85            [ 2]  968 	POPW Y
      00048D 5B 02            [ 2]  969         addw sp,#2
      00048F 90 EC 02         [ 2]  970         JP (2,Y)
      000492                        971 NEX1:
      000492 17 03            [ 2]  972         LDW (3,SP),Y
      000494 90 85            [ 2]  973         POPW Y
      000496 90 FE            [ 2]  974 	LDW Y,(Y)
      000498 90 FC            [ 2]  975 	JP (Y)
                                    976 
                                    977 ;       ?branch ( f -- )
                                    978 ;       Branch if flag is zero.
                                    979 ;        .word      LINK
                                    980 ;LINK	= 	.
                                    981 ;	.byte      COMPO+7
                                    982 ;       .ascii     "?BRANCH"
      00049A                        983 QBRAN:	
      00049A 90 93            [ 1]  984         LDW Y,X
      00049C 1C 00 02         [ 2]  985 	ADDW X,#2
      00049F 90 FE            [ 2]  986 	LDW Y,(Y)
      0004A1 27 13            [ 1]  987         JREQ     BRAN
      0004A3 90 85            [ 2]  988 	POPW Y
      0004A5 90 EC 02         [ 2]  989 	JP (2,Y)
                                    990 
                                    991 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    992 ;  TBRANCH ( f -- )
                                    993 ;  branch if f==TRUE 
                                    994 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    995 ;        _HEADER TBRAN,COMPO+7,"TBRANCH"
      0004A8                        996 TBRAN: 
      0004A8 90 93            [ 1]  997         LDW Y,X 
      0004AA 1C 00 02         [ 2]  998         ADDW X,#2 
      0004AD 90 FE            [ 2]  999         LDW Y,(Y)
      0004AF 26 05            [ 1] 1000         JRNE BRAN 
      0004B1 90 85            [ 2] 1001         POPW Y 
      0004B3 90 EC 02         [ 2] 1002         JP (2,Y)
                                   1003 
                                   1004 
                                   1005 ;       branch  ( -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                                   1006 ;       Branch to an inline address.
                                   1007 ;        .word      LINK
                                   1008 ;LINK	= 	.
                                   1009 ;	.byte      COMPO+6
                                   1010 ;        .ascii     "BRANCH"
      0004B6                       1011 BRAN:
      0004B6 90 85            [ 2] 1012         POPW Y
      0004B8 90 FE            [ 2] 1013 	LDW Y,(Y)
      0004BA 90 FC            [ 2] 1014         JP     (Y)
                                   1015 
                                   1016 ;       EXECUTE ( ca -- )
                                   1017 ;       Execute  word at ca.
      0004BC 04 80                 1018         .word      LINK
                           0004BE  1019 LINK	= 	.
      0004BE 07                    1020         .byte       7
      0004BF 45 58 45 43 55 54 45  1021         .ascii     "EXECUTE"
      0004C6                       1022 EXECU:
      0004C6 90 93            [ 1] 1023         LDW Y,X
      0004C8 1C 00 02         [ 2] 1024 	ADDW X,#2
      0004CB 90 FE            [ 2] 1025 	LDW  Y,(Y)
      0004CD 90 FC            [ 2] 1026         JP   (Y)
                                   1027 
                           000001  1028 OPTIMIZE = 1
                           000001  1029 .if OPTIMIZE 
                                   1030 ; remplacement de CALL EXIT par 
                                   1031 ; le opcode de RET.
                                   1032 ; Voir modification au code de ";"
                           000000  1033 .else 
                                   1034 ;       EXIT    ( -- )
                                   1035 ;       Terminate a colon definition.
                                   1036         .word      LINK
                                   1037 LINK = .
                                   1038         .byte      4
                                   1039         .ascii     "EXIT"
                                   1040 EXIT:
                                   1041         POPW Y
                                   1042         RET
                                   1043 .endif 
                                   1044 
                                   1045 ;       !       ( w a -- )
                                   1046 ;       Pop  data stack to memory.
      0004CF 04 BE                 1047         .word      LINK
                           0004D1  1048 LINK = .
      0004D1 01                    1049         .byte      1
      0004D2 21                    1050         .ascii     "!"
      0004D3                       1051 STORE:
      0004D3 90 93            [ 1] 1052         LDW Y,X
      0004D5 90 FE            [ 2] 1053         LDW Y,(Y)    ;Y=a
      0004D7 90 BF 26         [ 2] 1054         LDW YTEMP,Y
      0004DA 90 93            [ 1] 1055         LDW Y,X
      0004DC 90 EE 02         [ 2] 1056         LDW Y,(2,Y)
      0004DF 91 CF 26         [ 5] 1057         LDW [YTEMP],Y ;store w at a
      0004E2 1C 00 04         [ 2] 1058         ADDW X,#4 ; DDROP 
      0004E5 81               [ 4] 1059         RET     
                                   1060 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                   1061 ;       @       ( a -- w )
                                   1062 ;       Push memory location to stack.
      0004E6 04 D1                 1063         .word      LINK
                           0004E8  1064 LINK	= 	.
      0004E8 01                    1065         .byte    1
      0004E9 40                    1066         .ascii	"@"
      0004EA                       1067 AT:
      0004EA 90 93            [ 1] 1068         LDW Y,X     ;Y = a
      0004EC 90 FE            [ 2] 1069         LDW Y,(Y)   ; address 
      0004EE 90 FE            [ 2] 1070         LDW Y,(Y)   ; value 
      0004F0 FF               [ 2] 1071         LDW (X),Y ;w = @Y
      0004F1 81               [ 4] 1072         RET     
                                   1073 
                                   1074 ;       C!      ( c b -- )
                                   1075 ;       Pop  data stack to byte memory.
      0004F2 04 E8                 1076         .word      LINK
                           0004F4  1077 LINK	= .
      0004F4 02                    1078         .byte      2
      0004F5 43 21                 1079         .ascii     "C!"
      0004F7                       1080 CSTOR:
      0004F7 90 93            [ 1] 1081         LDW Y,X
      0004F9 90 FE            [ 2] 1082 	LDW Y,(Y)    ;Y=b
      0004FB E6 03            [ 1] 1083         LD A,(3,X)    ;D = c
      0004FD 90 F7            [ 1] 1084         LD  (Y),A     ;store c at b
      0004FF 1C 00 04         [ 2] 1085 	ADDW X,#4 ; DDROP 
      000502 81               [ 4] 1086         RET     
                                   1087 
                                   1088 ;       C@      ( b -- c )
                                   1089 ;       Push byte in memory to  stack.
      000503 04 F4                 1090         .word      LINK
                           000505  1091 LINK	= 	.
      000505 02                    1092         .byte      2
      000506 43 40                 1093         .ascii     "C@"
      000508                       1094 CAT:
      000508 90 93            [ 1] 1095         LDW Y,X     ;Y=b
      00050A 90 FE            [ 2] 1096         LDW Y,(Y)
      00050C 90 F6            [ 1] 1097         LD A,(Y)
      00050E E7 01            [ 1] 1098         LD (1,X),A
      000510 7F               [ 1] 1099         CLR (X)
      000511 81               [ 4] 1100         RET     
                                   1101 
                                   1102 ;       RP@     ( -- a )
                                   1103 ;       Push current RP to data stack.
      000512 05 05                 1104         .word      LINK
                           000514  1105 LINK	= .
      000514 03                    1106         .byte      3
      000515 52 50 40              1107         .ascii     "RP@"
      000518                       1108 RPAT:
      000518 90 96            [ 1] 1109         LDW Y,SP    ;save return addr
      00051A 1D 00 02         [ 2] 1110         SUBW X,#2
      00051D FF               [ 2] 1111         LDW (X),Y
      00051E 81               [ 4] 1112         RET     
                                   1113 
                                   1114 ;       RP!     ( a -- )
                                   1115 ;       Set  return stack pointer.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      00051F 05 14                 1116         .word      LINK
                           000521  1117 LINK	= 	. 
      000521 43                    1118 	.byte      COMPO+3
      000522 52 50 21              1119         .ascii     "RP!"
      000525                       1120 RPSTO:
      000525 90 85            [ 2] 1121         POPW Y
      000527 90 BF 26         [ 2] 1122         LDW YTEMP,Y
      00052A 90 93            [ 1] 1123         LDW Y,X
      00052C 90 FE            [ 2] 1124         LDW Y,(Y)
      00052E 90 94            [ 1] 1125         LDW SP,Y
      000530 1C 00 02         [ 2] 1126         ADDW x,#CELLL ; a was not dropped, Picatout 2020-05-24
      000533 92 CC 26         [ 5] 1127         JP [YTEMP]
                                   1128 
                                   1129 ;       R>      ( -- w )
                                   1130 ;       Pop return stack to data stack.
      000536 05 21                 1131         .word      LINK
                           000538  1132 LINK	= 	. 
      000538 42                    1133 	.byte      COMPO+2
      000539 52 3E                 1134         .ascii     "R>"
      00053B                       1135 RFROM:
      00053B 90 85            [ 2] 1136         POPW Y    ;save return addr
      00053D 90 BF 26         [ 2] 1137         LDW YTEMP,Y
      000540 90 85            [ 2] 1138         POPW Y
      000542 1D 00 02         [ 2] 1139         SUBW X,#2
      000545 FF               [ 2] 1140         LDW (X),Y
      000546 92 CC 26         [ 5] 1141         JP [YTEMP]
                                   1142 
                                   1143 ;       R@      ( -- w )
                                   1144 ;       Copy top of return stack to stack.
      000549 05 38                 1145         .word      LINK
                           00054B  1146 LINK	= 	. 
      00054B 02                    1147         .byte      2
      00054C 52 40                 1148         .ascii     "R@"
      00054E                       1149 RAT:
      00054E 16 03            [ 2] 1150         ldw y,(3,sp)
      000550 1D 00 02         [ 2] 1151         subw x,#CELLL 
      000553 FF               [ 2] 1152         ldw (x),y 
      000554 81               [ 4] 1153         ret 
                                   1154 
                                   1155 ;       >R      ( w -- )
                                   1156 ;       Push data stack to return stack.
      000555 05 4B                 1157         .word      LINK
                           000557  1158 LINK	= 	. 
      000557 42                    1159 	.byte      COMPO+2
      000558 3E 52                 1160         .ascii     ">R"
      00055A                       1161 TOR:
      00055A 90 85            [ 2] 1162         POPW Y    ;save return addr
      00055C 90 BF 26         [ 2] 1163         LDW YTEMP,Y
      00055F 90 93            [ 1] 1164         LDW Y,X
      000561 90 FE            [ 2] 1165         LDW Y,(Y)
      000563 90 89            [ 2] 1166         PUSHW Y    ;restore return addr
      000565 1C 00 02         [ 2] 1167         ADDW X,#2
      000568 92 CC 26         [ 5] 1168         JP [YTEMP]
                                   1169 
                                   1170 ;       SP@     ( -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                                   1171 ;       Push current stack pointer.
      00056B 05 57                 1172         .word      LINK
                           00056D  1173 LINK	= 	. 
      00056D 03                    1174         .byte      3
      00056E 53 50 40              1175         .ascii     "SP@"
      000571                       1176 SPAT:
      000571 90 93            [ 1] 1177 	LDW Y,X
      000573 1D 00 02         [ 2] 1178         SUBW X,#2
      000576 FF               [ 2] 1179 	LDW (X),Y
      000577 81               [ 4] 1180         RET     
                                   1181 
                                   1182 ;       SP!     ( a -- )
                                   1183 ;       Set  data stack pointer.
      000578 05 6D                 1184         .word      LINK
                           00057A  1185 LINK	= 	. 
      00057A 03                    1186         .byte      3
      00057B 53 50 21              1187         .ascii     "SP!"
      00057E                       1188 SPSTO:
      00057E FE               [ 2] 1189         LDW     X,(X)     ;X = a
      00057F 81               [ 4] 1190         RET     
                                   1191 
                                   1192 ;       DROP    ( w -- )
                                   1193 ;       Discard top stack item.
      000580 05 7A                 1194         .word      LINK
                           000582  1195 LINK	= 	. 
      000582 04                    1196         .byte      4
      000583 44 52 4F 50           1197         .ascii     "DROP"
      000587                       1198 DROP:
      000587 1C 00 02         [ 2] 1199         ADDW X,#2     
      00058A 81               [ 4] 1200         RET     
                                   1201 
                                   1202 ;       DUP     ( w -- w w )
                                   1203 ;       Duplicate  top stack item.
      00058B 05 82                 1204         .word      LINK
                           00058D  1205 LINK	= 	. 
      00058D 03                    1206         .byte      3
      00058E 44 55 50              1207         .ascii     "DUP"
      000591                       1208 DUPP:
      000591 90 93            [ 1] 1209 	LDW Y,X
      000593 1D 00 02         [ 2] 1210         SUBW X,#2
      000596 90 FE            [ 2] 1211 	LDW Y,(Y)
      000598 FF               [ 2] 1212 	LDW (X),Y
      000599 81               [ 4] 1213         RET     
                                   1214 
                                   1215 ;       SWAP    ( w1 w2 -- w2 w1 )
                                   1216 ;       Exchange top two stack items.
      00059A 05 8D                 1217         .word      LINK
                           00059C  1218 LINK	= 	. 
      00059C 04                    1219         .byte      4
      00059D 53 57 41 50           1220         .ascii     "SWAP"
      0005A1                       1221 SWAPP:
      0005A1 90 93            [ 1] 1222         LDW Y,X
      0005A3 90 FE            [ 2] 1223         LDW Y,(Y)
      0005A5 90 BF 26         [ 2] 1224         LDW YTEMP,Y
      0005A8 90 93            [ 1] 1225         LDW Y,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      0005AA 90 EE 02         [ 2] 1226         LDW Y,(2,Y)
      0005AD FF               [ 2] 1227         LDW (X),Y
      0005AE 90 BE 26         [ 2] 1228         LDW Y,YTEMP
      0005B1 EF 02            [ 2] 1229         LDW (2,X),Y
      0005B3 81               [ 4] 1230         RET     
                                   1231 
                                   1232 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                   1233 ;       Copy second stack item to top.
      0005B4 05 9C                 1234         .word      LINK
                           0005B6  1235 LINK	= . 
      0005B6 04                    1236         .byte      4
      0005B7 4F 56 45 52           1237         .ascii     "OVER"
      0005BB                       1238 OVER:
      0005BB 1D 00 02         [ 2] 1239         SUBW X,#2
      0005BE 90 93            [ 1] 1240         LDW Y,X
      0005C0 90 EE 04         [ 2] 1241         LDW Y,(4,Y)
      0005C3 FF               [ 2] 1242         LDW (X),Y
      0005C4 81               [ 4] 1243         RET     
                                   1244 
                                   1245 ;       0<      ( n -- t )
                                   1246 ;       Return true if n is negative.
      0005C5 05 B6                 1247         .word      LINK
                           0005C7  1248 LINK	= . 
      0005C7 02                    1249         .byte      2
      0005C8 30 3C                 1250         .ascii     "0<"
      0005CA                       1251 ZLESS:
      0005CA A6 FF            [ 1] 1252         LD A,#0xFF
      0005CC 90 93            [ 1] 1253         LDW Y,X
      0005CE 90 FE            [ 2] 1254         LDW Y,(Y)
      0005D0 2B 01            [ 1] 1255         JRMI     ZL1
      0005D2 4F               [ 1] 1256         CLR A   ;false
      0005D3 F7               [ 1] 1257 ZL1:    LD     (X),A
      0005D4 E7 01            [ 1] 1258         LD (1,X),A
      0005D6 81               [ 4] 1259 	RET     
                                   1260 
                                   1261 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1262 ;       0= ( n -- f )
                                   1263 ;   n==0?
                                   1264 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005D7                       1265         _HEADER ZEQUAL,2,"0="
      0005D7 05 C7                    1         .word LINK 
                           0005D9     2         LINK=.
      0005D9 02                       3         .byte 2  
      0005DA 30 3D                    4         .ascii "0="
      0005DC                          5         ZEQUAL:
      0005DC A6 FF            [ 1] 1266         LD A,#0XFF 
      0005DE 90 93            [ 1] 1267         LDW Y,X 
      0005E0 90 FE            [ 2] 1268         LDW Y,(Y)
      0005E2 27 02            [ 1] 1269         JREQ ZEQU1 
      0005E4 A6 00            [ 1] 1270         LD A,#0 
      0005E6                       1271 ZEQU1:  
      0005E6 F7               [ 1] 1272         LD (X),A 
      0005E7 E7 01            [ 1] 1273         LD (1,X),A         
      0005E9 81               [ 4] 1274         RET 
                                   1275 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                                   1276 
                                   1277 ;       AND     ( w w -- w )
                                   1278 ;       Bitwise AND.
      0005EA 05 D9                 1279         .word      LINK
                           0005EC  1280 LINK	= . 
      0005EC 03                    1281         .byte      3
      0005ED 41 4E 44              1282         .ascii     "AND"
      0005F0                       1283 ANDD:
      0005F0 F6               [ 1] 1284         LD  A,(X)    ;D=w
      0005F1 E4 02            [ 1] 1285         AND A,(2,X)
      0005F3 E7 02            [ 1] 1286         LD (2,X),A
      0005F5 E6 01            [ 1] 1287         LD A,(1,X)
      0005F7 E4 03            [ 1] 1288         AND A,(3,X)
      0005F9 E7 03            [ 1] 1289         LD (3,X),A
      0005FB 1C 00 02         [ 2] 1290         ADDW X,#2
      0005FE 81               [ 4] 1291         RET
                                   1292 
                                   1293 ;       OR      ( w w -- w )
                                   1294 ;       Bitwise inclusive OR.
      0005FF 05 EC                 1295         .word      LINK
                           000601  1296 LINK = . 
      000601 02                    1297         .byte      2
      000602 4F 52                 1298         .ascii     "OR"
      000604                       1299 ORR:
      000604 F6               [ 1] 1300         LD A,(X)    ;D=w
      000605 EA 02            [ 1] 1301         OR A,(2,X)
      000607 E7 02            [ 1] 1302         LD (2,X),A
      000609 E6 01            [ 1] 1303         LD A,(1,X)
      00060B EA 03            [ 1] 1304         OR A,(3,X)
      00060D E7 03            [ 1] 1305         LD (3,X),A
      00060F 1C 00 02         [ 2] 1306         ADDW X,#2
      000612 81               [ 4] 1307         RET
                                   1308 
                                   1309 ;       XOR     ( w w -- w )
                                   1310 ;       Bitwise exclusive OR.
      000613 06 01                 1311         .word      LINK
                           000615  1312 LINK	= . 
      000615 03                    1313         .byte      3
      000616 58 4F 52              1314         .ascii     "XOR"
      000619                       1315 XORR:
      000619 F6               [ 1] 1316         LD A,(X)    ;D=w
      00061A E8 02            [ 1] 1317         XOR A,(2,X)
      00061C E7 02            [ 1] 1318         LD (2,X),A
      00061E E6 01            [ 1] 1319         LD A,(1,X)
      000620 E8 03            [ 1] 1320         XOR A,(3,X)
      000622 E7 03            [ 1] 1321         LD (3,X),A
      000624 1C 00 02         [ 2] 1322         ADDW X,#2
      000627 81               [ 4] 1323         RET
                                   1324 
                                   1325 ;       UM+     ( u u -- udsum )
                                   1326 ;       Add two unsigned single
                                   1327 ;       and return a double sum.
      000628 06 15                 1328         .word      LINK
                           00062A  1329 LINK	= . 
      00062A 03                    1330         .byte      3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      00062B 55 4D 2B              1331         .ascii     "UM+"
      00062E                       1332 UPLUS:
      00062E A6 01            [ 1] 1333         LD A,#1
      000630 90 93            [ 1] 1334         LDW Y,X
      000632 90 EE 02         [ 2] 1335         LDW Y,(2,Y)
      000635 90 BF 26         [ 2] 1336         LDW YTEMP,Y
      000638 90 93            [ 1] 1337         LDW Y,X
      00063A 90 FE            [ 2] 1338         LDW Y,(Y)
      00063C 72 B9 00 26      [ 2] 1339         ADDW Y,YTEMP
      000640 EF 02            [ 2] 1340         LDW (2,X),Y
      000642 25 01            [ 1] 1341         JRC     UPL1
      000644 4F               [ 1] 1342         CLR A
      000645 E7 01            [ 1] 1343 UPL1:   LD     (1,X),A
      000647 7F               [ 1] 1344         CLR (X)
      000648 81               [ 4] 1345         RET
                                   1346 
                                   1347 ;; System and user variables
                                   1348 
                                   1349 ;       doVAR   ( -- a )
                                   1350 ;       Code for VARIABLE and CREATE.
      000649 06 2A                 1351         .word      LINK
                           00064B  1352 LINK	= . 
      00064B 45                    1353 	.byte      COMPO+5
      00064C 44 4F 56 41 52        1354         .ascii     "DOVAR"
      000651                       1355 DOVAR:
      000651 1D 00 02         [ 2] 1356 	SUBW X,#2
      000654 90 85            [ 2] 1357         POPW Y    ;get return addr (pfa)
      000656 90 FE            [ 2] 1358         LDW Y,(Y) ; indirect address 
      000658 FF               [ 2] 1359         LDW (X),Y    ;push on stack
      000659 81               [ 4] 1360         RET     ;go to RET of EXEC
                                   1361 
                                   1362 ;       BASE    ( -- a )
                                   1363 ;       Radix base for numeric I/O.
      00065A 06 4B                 1364         .word      LINK        
                           00065C  1365 LINK = . 
      00065C 04                    1366         .byte      4
      00065D 42 41 53 45           1367         .ascii     "BASE"
      000661                       1368 BASE:
      000661 90 AE 00 06      [ 2] 1369 	LDW Y,#UBASE 
      000665 1D 00 02         [ 2] 1370 	SUBW X,#2
      000668 FF               [ 2] 1371         LDW (X),Y
      000669 81               [ 4] 1372         RET
                                   1373 
                                   1374 ;       tmp     ( -- a )
                                   1375 ;       A temporary storage.
      00066A 06 5C                 1376         .word      LINK
                                   1377         
                           00066C  1378 LINK = . 
      00066C 03                    1379 	.byte      3
      00066D 54 4D 50              1380         .ascii     "TMP"
      000670                       1381 TEMP:
      000670 90 AE 00 0A      [ 2] 1382 	LDW Y,#UTMP
      000674 1D 00 02         [ 2] 1383 	SUBW X,#2
      000677 FF               [ 2] 1384         LDW (X),Y
      000678 81               [ 4] 1385         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                   1386 
                                   1387 ;       >IN     ( -- a )
                                   1388 ;        Hold parsing pointer.
      000679 06 6C                 1389         .word      LINK
                           00067B  1390 LINK = . 
      00067B 03                    1391         .byte      3
      00067C 3E 49 4E              1392         .ascii    ">IN"
      00067F                       1393 INN:
      00067F 90 AE 00 0C      [ 2] 1394 	LDW Y,#UINN 
      000683 1D 00 02         [ 2] 1395 	SUBW X,#2
      000686 FF               [ 2] 1396         LDW (X),Y
      000687 81               [ 4] 1397         RET
                                   1398 
                                   1399 ;       #TIB    ( -- a )
                                   1400 ;       Count in terminal input buffer.
      000688 06 7B                 1401         .word      LINK
                           00068A  1402 LINK = . 
      00068A 04                    1403         .byte      4
      00068B 23 54 49 42           1404         .ascii     "#TIB"
      00068F                       1405 NTIB:
      00068F 90 AE 00 0E      [ 2] 1406 	LDW Y,#UCTIB 
      000693 1D 00 02         [ 2] 1407 	SUBW X,#2
      000696 FF               [ 2] 1408         LDW (X),Y
      000697 81               [ 4] 1409         RET
                                   1410 
                                   1411 ;       TBUF ( -- a )
                                   1412 ;       address of 128 bytes transaction buffer 
      000698 06 8A                 1413         .word LINK 
                           00069A  1414         LINK=.
      00069A 04                    1415         .byte 4 
      00069B 54 42 55 46           1416         .ascii "TBUF"
      00069F                       1417 TBUF:
      00069F 90 AE 16 80      [ 2] 1418         ldw y,#ROWBUFF
      0006A3 1D 00 02         [ 2] 1419         subw x,#CELLL
      0006A6 FF               [ 2] 1420         ldw (x),y 
      0006A7 81               [ 4] 1421         ret 
                                   1422 
                                   1423 ; systeme variable 
                                   1424 ; compilation destination 
                                   1425 ; TFLASH ( -- A )
      0006A8 06 9A                 1426         .word LINK 
                           0006AA  1427         LINK=.
      0006AA 06                    1428         .byte 6 
      0006AB 54 46 4C 41 53 48     1429         .ascii "TFLASH"         
      0006B1                       1430 TFLASH:
      0006B1 1D 00 02         [ 2] 1431         subw x,#CELLL 
      0006B4 90 AE 00 20      [ 2] 1432         ldw y,#UTFLASH
      0006B8 FF               [ 2] 1433         ldw (x),y 
      0006B9 81               [ 4] 1434         ret 
                                   1435 
                                   1436 ;       "EVAL   ( -- a )
                                   1437 ;       Execution vector of EVAL.
      0006BA 06 AA                 1438         .word      LINK
                           0006BC  1439 LINK = . 
      0006BC 05                    1440         .byte      5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      0006BD 27 45 56 41 4C        1441         .ascii     "'EVAL"
      0006C2                       1442 TEVAL:
      0006C2 90 AE 00 12      [ 2] 1443 	LDW Y,#UINTER 
      0006C6 1D 00 02         [ 2] 1444 	SUBW X,#2
      0006C9 FF               [ 2] 1445         LDW (X),Y
      0006CA 81               [ 4] 1446         RET
                                   1447 
                                   1448 ;       HLD     ( -- a )
                                   1449 ;       Hold a pointer of output string.
      0006CB 06 BC                 1450         .word      LINK
                           0006CD  1451 LINK = . 
      0006CD 03                    1452         .byte      3
      0006CE 48 4C 44              1453         .ascii     "HLD"
      0006D1                       1454 HLD:
      0006D1 90 AE 00 14      [ 2] 1455 	LDW Y,#UHLD 
      0006D5 1D 00 02         [ 2] 1456 	SUBW X,#2
      0006D8 FF               [ 2] 1457         LDW (X),Y
      0006D9 81               [ 4] 1458         RET
                                   1459 
                                   1460 ;       CONTEXT ( -- a )
                                   1461 ;       Start vocabulary search.
      0006DA 06 CD                 1462         .word      LINK
                           0006DC  1463 LINK = . 
      0006DC 07                    1464         .byte      7
      0006DD 43 4F 4E 54 45 58 54  1465         .ascii     "CONTEXT"
      0006E4                       1466 CNTXT:
      0006E4 90 AE 00 16      [ 2] 1467 	LDW Y,#UCNTXT
      0006E8 1D 00 02         [ 2] 1468 	SUBW X,#2
      0006EB FF               [ 2] 1469         LDW (X),Y
      0006EC 81               [ 4] 1470         RET
                                   1471 
                                   1472 ;       VP      ( -- a )
                                   1473 ;       Point to top of variables
      0006ED 06 DC                 1474         .word      LINK
                           0006EF  1475 LINK = . 
      0006EF 02                    1476         .byte      2
      0006F0 56 50                 1477         .ascii     "VP"
      0006F2                       1478 VPP:
      0006F2 90 AE 00 18      [ 2] 1479 	LDW Y,#UVP 
      0006F6 1D 00 02         [ 2] 1480 	SUBW X,#2
      0006F9 FF               [ 2] 1481         LDW (X),Y
      0006FA 81               [ 4] 1482         RET
                                   1483 
                                   1484 ;       CP    ( -- a )
                                   1485 ;       Pointer to top of FLASH 
      0006FB 06 EF                 1486         .word LINK 
                           0006FD  1487         LINK=.
      0006FD 02                    1488         .byte 2 
      0006FE 43 50                 1489         .ascii "CP"
      000700                       1490 CPP: 
      000700 90 AE 00 1A      [ 2] 1491         ldw y,#UCP 
      000704 1D 00 02         [ 2] 1492         subw x,#CELLL 
      000707 FF               [ 2] 1493         ldw (x),y 
      000708 81               [ 4] 1494         ret                
                                   1495 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                   1496 ;       LAST    ( -- a )
                                   1497 ;       Point to last name in dictionary.
      000709 06 FD                 1498         .word      LINK
                           00070B  1499 LINK = . 
      00070B 04                    1500         .byte      4
      00070C 4C 41 53 54           1501         .ascii     "LAST"
      000710                       1502 LAST:
      000710 90 AE 00 1C      [ 2] 1503 	LDW Y,#ULAST 
      000714 1D 00 02         [ 2] 1504 	SUBW X,#2
      000717 FF               [ 2] 1505         LDW (X),Y
      000718 81               [ 4] 1506         RET
                                   1507 
                                   1508 ; address of system variable URLAST 
                                   1509 ;       RAMLAST ( -- a )
                                   1510 ; RAM dictionary context 
      000719 07 0B                 1511         .word LINK 
                           00071B  1512         LINK=. 
      00071B 07                    1513         .byte 7  
      00071C 52 41 4D 4C 41 53 54  1514         .ascii "RAMLAST" 
      000723                       1515 RAMLAST: 
      000723 90 AE 00 22      [ 2] 1516         ldw y,#URLAST 
      000727 1D 00 02         [ 2] 1517         subw x,#CELLL 
      00072A FF               [ 2] 1518         ldw (x),y 
      00072B 81               [ 4] 1519         ret 
                                   1520 
                                   1521 ; OFFSET ( -- a )
                                   1522 ; address of system variable OFFSET 
      00072C 07 1B                 1523         .word LINK 
                           00072E  1524         LINK=.
      00072E 06                    1525         .byte 6
      00072F 4F 46 46 53 45 54     1526         .ascii "OFFSET" 
      000735                       1527 OFFSET: 
      000735 1D 00 02         [ 2] 1528         subw x,#CELLL
      000738 90 AE 00 1E      [ 2] 1529         ldw y,#UOFFSET 
      00073C FF               [ 2] 1530         ldw (x),y 
      00073D 81               [ 4] 1531         ret 
                                   1532 
                                   1533 ; adjust jump address adding OFFSET
                                   1534 ; ADR-ADJ ( a -- a+offset )
      00073E                       1535 ADRADJ: 
      00073E CD 07 35         [ 4] 1536         call OFFSET 
      000741 CD 04 EA         [ 4] 1537         call AT 
      000744 CC 07 C0         [ 2] 1538         jp PLUS 
                                   1539 
                                   1540 
                                   1541 ;; Common functions
                                   1542 
                                   1543 ;       ?DUP    ( w -- w w | 0 )
                                   1544 ;       Dup tos if its is not zero.
      000747 07 2E                 1545         .word      LINK
                           000749  1546 LINK = . 
      000749 04                    1547         .byte      4
      00074A 3F 44 55 50           1548         .ascii     "?DUP"
      00074E                       1549 QDUP:
      00074E 90 93            [ 1] 1550         LDW Y,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      000750 90 FE            [ 2] 1551 	LDW Y,(Y)
      000752 27 04            [ 1] 1552         JREQ     QDUP1
      000754 1D 00 02         [ 2] 1553 	SUBW X,#2
      000757 FF               [ 2] 1554         LDW (X),Y
      000758 81               [ 4] 1555 QDUP1:  RET
                                   1556 
                                   1557 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1558 ;       Rot 3rd item to top.
      000759 07 49                 1559         .word      LINK
                           00075B  1560 LINK = . 
      00075B 03                    1561         .byte      3
      00075C 52 4F 54              1562         .ascii     "ROT"
      00075F                       1563 ROT:
      00075F 90 93            [ 1] 1564         ldw y,x 
      000761 90 FE            [ 2] 1565         ldw y,(y)
      000763 90 89            [ 2] 1566         pushw y 
      000765 90 93            [ 1] 1567         ldw y,x 
      000767 90 EE 04         [ 2] 1568         ldw y,(4,y)
      00076A FF               [ 2] 1569         ldw (x),y 
      00076B 90 93            [ 1] 1570         ldw y,x 
      00076D 90 EE 02         [ 2] 1571         ldw y,(2,y)
      000770 EF 04            [ 2] 1572         ldw (4,x),y 
      000772 90 85            [ 2] 1573         popw y 
      000774 EF 02            [ 2] 1574         ldw (2,x),y
      000776 81               [ 4] 1575         ret 
                                   1576 
                                   1577 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1578 ;    <ROT ( n1 n2 n3 -- n3 n1 n2 )
                                   1579 ;    rotate left 3 top elements 
                                   1580 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000777                       1581     _HEADER NROT,4,"<ROT"
      000777 07 5B                    1         .word LINK 
                           000779     2         LINK=.
      000779 04                       3         .byte 4  
      00077A 3C 52 4F 54              4         .ascii "<ROT"
      00077E                          5         NROT:
      00077E 90 93            [ 1] 1582     LDW Y,X 
      000780 90 FE            [ 2] 1583     LDW Y,(Y)
      000782 90 BF 26         [ 2] 1584     LDW YTEMP,Y ; n3  
      000785 90 93            [ 1] 1585     LDW Y,X 
      000787 90 EE 02         [ 2] 1586     LDW Y,(2,Y) ; Y = n2 
      00078A FF               [ 2] 1587     LDW (X),Y   ; TOS = n2 
      00078B 90 93            [ 1] 1588     LDW Y,X    
      00078D 90 EE 04         [ 2] 1589     LDW Y,(4,Y) ; Y = n1 
      000790 EF 02            [ 2] 1590     LDW (2,X),Y ;   = n1 
      000792 90 BE 26         [ 2] 1591     LDW Y,YTEMP 
      000795 EF 04            [ 2] 1592     LDW (4,X),Y ; = n3 
      000797 81               [ 4] 1593     RET 
                                   1594 
                                   1595 ;       2DROP   ( w w -- )
                                   1596 ;       Discard two items on stack.
      000798 07 79                 1597         .word      LINK
                           00079A  1598 LINK = . 
      00079A 05                    1599         .byte      5
      00079B 32 44 52 4F 50        1600         .ascii     "2DROP"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      0007A0                       1601 DDROP:
      0007A0 1C 00 04         [ 2] 1602         ADDW X,#4
      0007A3 81               [ 4] 1603         RET
                                   1604 
                                   1605 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1606 ;       Duplicate top two items.
      0007A4 07 9A                 1607         .word      LINK
                           0007A6  1608 LINK = . 
      0007A6 04                    1609         .byte      4
      0007A7 32 44 55 50           1610         .ascii     "2DUP"
      0007AB                       1611 DDUP:
      0007AB 1D 00 04         [ 2] 1612         SUBW X,#4
      0007AE 90 93            [ 1] 1613         LDW Y,X
      0007B0 90 EE 06         [ 2] 1614         LDW Y,(6,Y)
      0007B3 EF 02            [ 2] 1615         LDW (2,X),Y
      0007B5 90 93            [ 1] 1616         LDW Y,X
      0007B7 90 EE 04         [ 2] 1617         LDW Y,(4,Y)
      0007BA FF               [ 2] 1618         LDW (X),Y
      0007BB 81               [ 4] 1619         RET
                                   1620 
                                   1621 ;       +       ( w w -- sum )
                                   1622 ;       Add top two items.
      0007BC 07 A6                 1623         .word      LINK
                           0007BE  1624 LINK = . 
      0007BE 01                    1625         .byte      1
      0007BF 2B                    1626         .ascii     "+"
      0007C0                       1627 PLUS:
      0007C0 90 93            [ 1] 1628         LDW Y,X
      0007C2 90 FE            [ 2] 1629         LDW Y,(Y)
      0007C4 90 BF 26         [ 2] 1630         LDW YTEMP,Y
      0007C7 1C 00 02         [ 2] 1631         ADDW X,#2
      0007CA 90 93            [ 1] 1632         LDW Y,X
      0007CC 90 FE            [ 2] 1633         LDW Y,(Y)
      0007CE 72 B9 00 26      [ 2] 1634         ADDW Y,YTEMP
      0007D2 FF               [ 2] 1635         LDW (X),Y
      0007D3 81               [ 4] 1636         RET
                                   1637 
                                   1638 ;       NOT     ( w -- w )
                                   1639 ;       One's complement of tos.
      0007D4 07 BE                 1640         .word      LINK
                           0007D6  1641 LINK = . 
      0007D6 03                    1642         .byte      3
      0007D7 4E 4F 54              1643         .ascii     "NOT"
      0007DA                       1644 INVER:
      0007DA 90 93            [ 1] 1645         LDW Y,X
      0007DC 90 FE            [ 2] 1646         LDW Y,(Y)
      0007DE 90 53            [ 2] 1647         CPLW Y
      0007E0 FF               [ 2] 1648         LDW (X),Y
      0007E1 81               [ 4] 1649         RET
                                   1650 
                                   1651 ;       NEGATE  ( n -- -n )
                                   1652 ;       Two's complement of tos.
      0007E2 07 D6                 1653         .word      LINK
                           0007E4  1654 LINK = . 
      0007E4 06                    1655         .byte      6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      0007E5 4E 45 47 41 54 45     1656         .ascii     "NEGATE"
      0007EB                       1657 NEGAT:
      0007EB 90 93            [ 1] 1658         LDW Y,X
      0007ED 90 FE            [ 2] 1659         LDW Y,(Y)
      0007EF 90 50            [ 2] 1660         NEGW Y
      0007F1 FF               [ 2] 1661         LDW (X),Y
      0007F2 81               [ 4] 1662         RET
                                   1663 
                                   1664 ;       DNEGATE ( d -- -d )
                                   1665 ;       Two's complement of top double.
      0007F3 07 E4                 1666         .word      LINK
                           0007F5  1667 LINK = . 
      0007F5 07                    1668         .byte      7
      0007F6 44 4E 45 47 41 54 45  1669         .ascii     "DNEGATE"
      0007FD                       1670 DNEGA:
      0007FD 90 93            [ 1] 1671         LDW Y,X
      0007FF 90 FE            [ 2] 1672 	LDW Y,(Y)
      000801 90 53            [ 2] 1673         CPLW Y     
      000803 90 BF 26         [ 2] 1674 	LDW YTEMP,Y
      000806 90 93            [ 1] 1675         LDW Y,X
      000808 90 EE 02         [ 2] 1676         LDW Y,(2,Y)
      00080B 90 53            [ 2] 1677         CPLW Y
      00080D 72 A9 00 01      [ 2] 1678         addw y,#1
      000811 EF 02            [ 2] 1679         LDW (2,X),Y
      000813 90 BE 26         [ 2] 1680         LDW Y,YTEMP
      000816 24 02            [ 1] 1681         JRNC DN1 
      000818 90 5C            [ 1] 1682         INCW Y
      00081A FF               [ 2] 1683 DN1:    LDW (X),Y
      00081B 81               [ 4] 1684         RET
                                   1685 
                                   1686 
                                   1687 ;       S>D ( n -- d )
                                   1688 ; convert single integer to double 
      00081C 07 F5                 1689         .word LINK 
                           00081E  1690         LINK=. 
      00081E 03                    1691         .byte 3 
      00081F 53 3E 44              1692         .ascii "S>D"
      000822                       1693 STOD: 
      000822 1D 00 02         [ 2] 1694         subw x,#CELLL 
      000825 90 5F            [ 1] 1695         clrw y 
      000827 FF               [ 2] 1696         ldw (x),y 
      000828 90 93            [ 1] 1697         ldw y,x 
      00082A 90 EE 02         [ 2] 1698         ldw y,(2,y)
      00082D 2A 05            [ 1] 1699         jrpl 1$ 
      00082F 90 AE FF FF      [ 2] 1700         ldw y,#-1
      000833 FF               [ 2] 1701         ldw (x),y 
      000834 81               [ 4] 1702 1$:     ret 
                                   1703 
                                   1704 
                                   1705 
                                   1706 
                                   1707 ;       -       ( n1 n2 -- n1-n2 )
                                   1708 ;       Subtraction.
      000835 08 1E                 1709         .word      LINK
                           000837  1710 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      000837 01                    1711         .byte      1
      000838 2D                    1712         .ascii     "-"
      000839                       1713 SUBB:
      000839 90 93            [ 1] 1714         LDW Y,X
      00083B 90 FE            [ 2] 1715         LDW Y,(Y)
      00083D 90 BF 26         [ 2] 1716         LDW YTEMP,Y
      000840 1C 00 02         [ 2] 1717         ADDW X,#2
      000843 90 93            [ 1] 1718         LDW Y,X
      000845 90 FE            [ 2] 1719         LDW Y,(Y)
      000847 72 B2 00 26      [ 2] 1720         SUBW Y,YTEMP
      00084B FF               [ 2] 1721         LDW (X),Y
      00084C 81               [ 4] 1722         RET
                                   1723 
                                   1724 ;       ABS     ( n -- n )
                                   1725 ;       Return  absolute value of n.
      00084D 08 37                 1726         .word      LINK
                           00084F  1727 LINK = . 
      00084F 03                    1728         .byte      3
      000850 41 42 53              1729         .ascii     "ABS"
      000853                       1730 ABSS:
      000853 90 93            [ 1] 1731         LDW Y,X
      000855 90 FE            [ 2] 1732 	LDW Y,(Y)
      000857 2A 03            [ 1] 1733         JRPL     AB1     ;negate:
      000859 90 50            [ 2] 1734         NEGW     Y     ;else negate hi byte
      00085B FF               [ 2] 1735         LDW (X),Y
      00085C 81               [ 4] 1736 AB1:    RET
                                   1737 
                                   1738 ;       =       ( w w -- t )
                                   1739 ;       Return true if top two are =al.
      00085D 08 4F                 1740         .word      LINK
                           00085F  1741 LINK = . 
      00085F 01                    1742         .byte      1
      000860 3D                    1743         .ascii     "="
      000861                       1744 EQUAL:
      000861 A6 FF            [ 1] 1745         LD A,#0xFF  ;true
      000863 90 93            [ 1] 1746         LDW Y,X    ;D = n2
      000865 90 FE            [ 2] 1747         LDW Y,(Y)
      000867 90 BF 26         [ 2] 1748         LDW YTEMP,Y
      00086A 1C 00 02         [ 2] 1749         ADDW X,#2
      00086D 90 93            [ 1] 1750         LDW Y,X
      00086F 90 FE            [ 2] 1751         LDW Y,(Y)
      000871 90 B3 26         [ 2] 1752         CPW Y,YTEMP     ;if n2 <> n1
      000874 27 01            [ 1] 1753         JREQ     EQ1
      000876 4F               [ 1] 1754         CLR A
      000877 F7               [ 1] 1755 EQ1:    LD (X),A
      000878 E7 01            [ 1] 1756         LD (1,X),A
      00087A 81               [ 4] 1757 	RET     
                                   1758 
                                   1759 ;       U<      ( u u -- t )
                                   1760 ;       Unsigned compare of top two items.
      00087B 08 5F                 1761         .word      LINK
                           00087D  1762 LINK = . 
      00087D 02                    1763         .byte      2
      00087E 55 3C                 1764         .ascii     "U<"
      000880                       1765 ULESS:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      000880 A6 FF            [ 1] 1766         LD A,#0xFF  ;true
      000882 90 93            [ 1] 1767         LDW Y,X    ;D = n2
      000884 90 FE            [ 2] 1768         LDW Y,(Y)
      000886 90 BF 26         [ 2] 1769         LDW YTEMP,Y
      000889 1C 00 02         [ 2] 1770         ADDW X,#2
      00088C 90 93            [ 1] 1771         LDW Y,X
      00088E 90 FE            [ 2] 1772         LDW Y,(Y)
      000890 90 B3 26         [ 2] 1773         CPW Y,YTEMP     ;if n2 <> n1
      000893 25 01            [ 1] 1774         JRULT     ULES1
      000895 4F               [ 1] 1775         CLR A
      000896 F7               [ 1] 1776 ULES1:  LD (X),A
      000897 E7 01            [ 1] 1777         LD (1,X),A
      000899 81               [ 4] 1778 	RET     
                                   1779 
                                   1780 ;       <       ( n1 n2 -- t )
                                   1781 ;       Signed compare of top two items.
      00089A 08 7D                 1782         .word      LINK
                           00089C  1783 LINK = . 
      00089C 01                    1784         .byte      1
      00089D 3C                    1785         .ascii     "<"
      00089E                       1786 LESS:
      00089E A6 FF            [ 1] 1787         LD A,#0xFF  ;true
      0008A0 90 93            [ 1] 1788         LDW Y,X    ;D = n2
      0008A2 90 FE            [ 2] 1789         LDW Y,(Y)
      0008A4 90 BF 26         [ 2] 1790         LDW YTEMP,Y
      0008A7 1C 00 02         [ 2] 1791         ADDW X,#2
      0008AA 90 93            [ 1] 1792         LDW Y,X
      0008AC 90 FE            [ 2] 1793         LDW Y,(Y)
      0008AE 90 B3 26         [ 2] 1794         CPW Y,YTEMP     ;if n2 <> n1
      0008B1 2F 01            [ 1] 1795         JRSLT     LT1
      0008B3 4F               [ 1] 1796         CLR A
      0008B4 F7               [ 1] 1797 LT1:    LD (X),A
      0008B5 E7 01            [ 1] 1798         LD (1,X),A
      0008B7 81               [ 4] 1799 	RET     
                                   1800 
                                   1801 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1802 ;   U> ( u1 u2 -- f )
                                   1803 ;   f = true if u1>u2 
                                   1804 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008B8                       1805     _HEADER UGREAT,2,"U>"
      0008B8 08 9C                    1         .word LINK 
                           0008BA     2         LINK=.
      0008BA 02                       3         .byte 2  
      0008BB 55 3E                    4         .ascii "U>"
      0008BD                          5         UGREAT:
      0008BD A6 00            [ 1] 1806     LD A,#0 
      0008BF 90 93            [ 1] 1807     LDW Y,X 
      0008C1 90 FE            [ 2] 1808     LDW Y,(Y)
      0008C3 90 BF 26         [ 2] 1809     LDW YTEMP,Y 
      0008C6 1C 00 02         [ 2] 1810     ADDW X,#2 
      0008C9 90 93            [ 1] 1811     LDW Y,X
      0008CB 90 FE            [ 2] 1812     LDW Y,(Y)
      0008CD 90 B3 26         [ 2] 1813     CPW Y,YTEMP 
      0008D0 23 02            [ 2] 1814     JRULE UGREAT1 
      0008D2 A6 FF            [ 1] 1815     LD A,#0xff  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      0008D4                       1816 UGREAT1:
      0008D4 F7               [ 1] 1817     LD (X),A 
      0008D5 E7 01            [ 1] 1818     LD (1,X),A 
      0008D7 81               [ 4] 1819     RET 
                                   1820 
                                   1821 
                                   1822 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1823 ;       >   (n1 n2 -- f )
                                   1824 ;  signed compare n1 n2 
                                   1825 ;  true if n1 > n2 
                                   1826 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008D8 08 BA                 1827         .word   LINK 
                           0008DA  1828         LINK = . 
      0008DA 01                    1829         .byte 1
      0008DB 3E                    1830         .ascii ">"
      0008DC                       1831 GREAT:
      0008DC A6 FF            [ 1] 1832         LD A,#0xFF ;
      0008DE 90 93            [ 1] 1833         LDW Y,X 
      0008E0 90 FE            [ 2] 1834         LDW Y,(Y)
      0008E2 90 BF 26         [ 2] 1835         LDW YTEMP,Y 
      0008E5 1C 00 02         [ 2] 1836         ADDW X,#2 
      0008E8 90 93            [ 1] 1837         LDW Y,X 
      0008EA 90 FE            [ 2] 1838         LDW Y,(Y)
      0008EC 90 B3 26         [ 2] 1839         CPW  Y,YTEMP 
      0008EF 2C 01            [ 1] 1840         JRSGT GREAT1 
      0008F1 4F               [ 1] 1841         CLR  A
      0008F2                       1842 GREAT1:
      0008F2 F7               [ 1] 1843         LD (X),A 
      0008F3 E7 01            [ 1] 1844         LD (1,X),A 
      0008F5 81               [ 4] 1845         RET 
                                   1846 
                                   1847 
                                   1848 ;       MAX     ( n n -- n )
                                   1849 ;       Return greater of two top items.
      0008F6 08 DA                 1850         .word      LINK
                           0008F8  1851 LINK = . 
      0008F8 03                    1852         .byte      3
      0008F9 4D 41 58              1853         .ascii     "MAX"
      0008FC                       1854 MAX:
      0008FC 90 93            [ 1] 1855         LDW Y,X    ;D = n2
      0008FE 90 EE 02         [ 2] 1856         LDW Y,(2,Y)
      000901 90 BF 26         [ 2] 1857         LDW YTEMP,Y
      000904 90 93            [ 1] 1858         LDW Y,X
      000906 90 FE            [ 2] 1859         LDW Y,(Y)
      000908 90 B3 26         [ 2] 1860         CPW Y,YTEMP     ;if n2 <> n1
      00090B 2F 02            [ 1] 1861         JRSLT     MAX1
      00090D EF 02            [ 2] 1862         LDW (2,X),Y
      00090F 1C 00 02         [ 2] 1863 MAX1:   ADDW X,#2
      000912 81               [ 4] 1864 	RET     
                                   1865 
                                   1866 ;       MIN     ( n n -- n )
                                   1867 ;       Return smaller of top two items.
      000913 08 F8                 1868         .word      LINK
                           000915  1869 LINK = . 
      000915 03                    1870         .byte      3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000916 4D 49 4E              1871         .ascii     "MIN"
      000919                       1872 MIN:
      000919 90 93            [ 1] 1873         LDW Y,X    ;D = n2
      00091B 90 EE 02         [ 2] 1874         LDW Y,(2,Y)
      00091E 90 BF 26         [ 2] 1875         LDW YTEMP,Y
      000921 90 93            [ 1] 1876         LDW Y,X
      000923 90 FE            [ 2] 1877         LDW Y,(Y)
      000925 90 B3 26         [ 2] 1878         CPW Y,YTEMP     ;if n2 <> n1
      000928 2C 02            [ 1] 1879         JRSGT     MIN1
      00092A EF 02            [ 2] 1880         LDW (2,X),Y
      00092C 1C 00 02         [ 2] 1881 MIN1:	ADDW X,#2
      00092F 81               [ 4] 1882 	RET     
                                   1883 
                                   1884 ;       WITHIN  ( u ul uh -- t )
                                   1885 ;       Return true if u is within
                                   1886 ;       range of ul and uh. ( ul <= u < uh )
      000930 09 15                 1887         .word      LINK
                           000932  1888 LINK = . 
      000932 06                    1889         .byte      6
      000933 57 49 54 48 49 4E     1890         .ascii     "WITHIN"
      000939                       1891 WITHI:
      000939 CD 05 BB         [ 4] 1892         CALL     OVER
      00093C CD 08 39         [ 4] 1893         CALL     SUBB
      00093F CD 05 5A         [ 4] 1894         CALL     TOR
      000942 CD 08 39         [ 4] 1895         CALL     SUBB
      000945 CD 05 3B         [ 4] 1896         CALL     RFROM
      000948 CC 08 80         [ 2] 1897         JP     ULESS
                                   1898 
                                   1899 ;; Divide
                                   1900 
                                   1901 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1902 ;       Unsigned divide of a double by a
                                   1903 ;       single. Return mod and quotient.
      00094B 09 32                 1904         .word      LINK
                           00094D  1905 LINK = . 
      00094D 06                    1906         .byte      6
      00094E 55 4D 2F 4D 4F 44     1907         .ascii     "UM/MOD"
                                   1908 ; 2021-02-22
                                   1909 ; changed algortihm for Jeeek one 
                                   1910 ; ref: https://github.com/TG9541/stm8ef/pull/406        
      000954                       1911 UMMOD:
      000954 90 93            [ 1] 1912         LDW     Y,X             ; stack pointer to Y
      000956 FE               [ 2] 1913         LDW     X,(X)           ; un
      000957 BF 26            [ 2] 1914         LDW     YTEMP,X         ; save un
      000959 93               [ 1] 1915         LDW     X,Y
      00095A 5C               [ 1] 1916         INCW    X               ; drop un
      00095B 5C               [ 1] 1917         INCW    X
      00095C 89               [ 2] 1918         PUSHW   X               ; save stack pointer
      00095D FE               [ 2] 1919         LDW     X,(X)           ; X=udh
      00095E 90 EE 04         [ 2] 1920         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      000961 B3 26            [ 2] 1921         CPW     X,YTEMP
      000963 25 0B            [ 1] 1922         JRULT   MMSM1           ; X is still on the R-stack
      000965 85               [ 2] 1923         POPW    X               ; restore stack pointer
      000966 90 AE FF FF      [ 2] 1924         LDW     Y,#0xFFFF       ; overflow result:
      00096A FF               [ 2] 1925         LDW     (X),Y           ; quotient max. 16 bit value
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      00096B 90 5F            [ 1] 1926         CLRW    Y
      00096D EF 02            [ 2] 1927         LDW     (2,X),Y         ; remainder 0
      00096F 81               [ 4] 1928         RET
      000970                       1929 MMSM1:
      000970 A6 10            [ 1] 1930         LD      A,#16           ; loop count
      000972 90 58            [ 2] 1931         SLLW    Y               ; udl shift udl into udh
      000974                       1932 MMSM3:
      000974 59               [ 2] 1933         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      000975 25 04            [ 1] 1934         JRC     MMSMa           ; if carry out of rotate
      000977 B3 26            [ 2] 1935         CPW     X,YTEMP         ; compare udh to un
      000979 25 05            [ 1] 1936         JRULT   MMSM4           ; can't subtract
      00097B                       1937 MMSMa:
      00097B 72 B0 00 26      [ 2] 1938         SUBW    X,YTEMP         ; can subtract
      00097F 98               [ 1] 1939         RCF
      000980                       1940 MMSM4:
      000980 8C               [ 1] 1941         CCF                     ; quotient bit
      000981 90 59            [ 2] 1942         RLCW    Y               ; rotate into quotient, rotate out udl
      000983 4A               [ 1] 1943         DEC     A               ; repeat
      000984 26 EE            [ 1] 1944         JRNE    MMSM3           ; if A == 0
      000986                       1945 MMSMb:
      000986 BF 26            [ 2] 1946         LDW     YTEMP,X         ; done, save remainder
      000988 85               [ 2] 1947         POPW    X               ; restore stack pointer
      000989 FF               [ 2] 1948         LDW     (X),Y           ; save quotient
      00098A 90 BE 26         [ 2] 1949         LDW     Y,YTEMP         ; remainder onto stack
      00098D EF 02            [ 2] 1950         LDW     (2,X),Y
      00098F 81               [ 4] 1951         RET
                                   1952 
                                   1953 
                                   1954 ;----------------------------------------------	
                                   1955 ;       M/MOD   ( d n -- r q )
                                   1956 ;       Signed floored divide of double by
                                   1957 ;       single. Return mod and quotient.
                                   1958 ;----------------------------------------------	
      000990 09 4D                 1959         .word      LINK
                           000992  1960 LINK = . 
      000992 05                    1961         .byte      5
      000993 4D 2F 4D 4F 44        1962         .ascii     "M/MOD"
      000998                       1963 MSMOD:  
      000998 CD 05 91         [ 4] 1964         CALL	DUPP
      00099B CD 05 CA         [ 4] 1965         CALL	ZLESS
      00099E CD 05 91         [ 4] 1966         CALL	DUPP
      0009A1 CD 05 5A         [ 4] 1967         CALL	TOR
      0009A4 CD 04 9A         [ 4] 1968         CALL	QBRAN
      0009A7 09 B5                 1969         .word	MMOD1
      0009A9 CD 07 EB         [ 4] 1970         CALL	NEGAT
      0009AC CD 05 5A         [ 4] 1971         CALL	TOR
      0009AF CD 07 FD         [ 4] 1972         CALL	DNEGA
      0009B2 CD 05 3B         [ 4] 1973         CALL	RFROM
      0009B5 CD 05 5A         [ 4] 1974 MMOD1:	CALL	TOR
      0009B8 CD 05 91         [ 4] 1975         CALL	DUPP
      0009BB CD 05 CA         [ 4] 1976         CALL	ZLESS
      0009BE CD 04 9A         [ 4] 1977         CALL	QBRAN
      0009C1 09 C9                 1978         .word	MMOD2
      0009C3 CD 05 4E         [ 4] 1979         CALL	RAT
      0009C6 CD 07 C0         [ 4] 1980         CALL	PLUS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      0009C9 CD 05 3B         [ 4] 1981 MMOD2:	CALL	RFROM
      0009CC CD 09 54         [ 4] 1982         CALL	UMMOD
      0009CF CD 05 3B         [ 4] 1983         CALL	RFROM
      0009D2 CD 04 9A         [ 4] 1984         CALL	QBRAN
      0009D5 09 E0                 1985         .word	MMOD3
      0009D7 CD 05 A1         [ 4] 1986         CALL	SWAPP
      0009DA CD 07 EB         [ 4] 1987         CALL	NEGAT
      0009DD CD 05 A1         [ 4] 1988         CALL	SWAPP
      0009E0 81               [ 4] 1989 MMOD3:	RET
                                   1990 
                                   1991 ;       /MOD    ( n n -- r q )
                                   1992 ;       Signed divide. Return mod and quotient.
      0009E1 09 92                 1993         .word      LINK
                           0009E3  1994 LINK = . 
      0009E3 04                    1995         .byte      4
      0009E4 2F 4D 4F 44           1996         .ascii     "/MOD"
      0009E8                       1997 SLMOD:
      0009E8 CD 05 BB         [ 4] 1998         CALL	OVER
      0009EB CD 05 CA         [ 4] 1999         CALL	ZLESS
      0009EE CD 05 A1         [ 4] 2000         CALL	SWAPP
      0009F1 CC 09 98         [ 2] 2001         JP	MSMOD
                                   2002 
                                   2003 ;       MOD     ( n n -- r )
                                   2004 ;       Signed divide. Return mod only.
      0009F4 09 E3                 2005         .word      LINK
                           0009F6  2006 LINK = . 
      0009F6 03                    2007         .byte      3
      0009F7 4D 4F 44              2008         .ascii     "MOD"
      0009FA                       2009 MODD:
      0009FA CD 09 E8         [ 4] 2010 	CALL	SLMOD
      0009FD CC 05 87         [ 2] 2011 	JP	DROP
                                   2012 
                                   2013 ;       /       ( n n -- q )
                                   2014 ;       Signed divide. Return quotient only.
      000A00 09 F6                 2015         .word      LINK
                           000A02  2016 LINK = . 
      000A02 01                    2017         .byte      1
      000A03 2F                    2018         .ascii     "/"
      000A04                       2019 SLASH:
      000A04 CD 09 E8         [ 4] 2020         CALL	SLMOD
      000A07 CD 05 A1         [ 4] 2021         CALL	SWAPP
      000A0A CC 05 87         [ 2] 2022         JP	DROP
                                   2023 
                                   2024 ;; Multiply
                                   2025 
                                   2026 ;       UM*     ( u u -- ud )
                                   2027 ;       Unsigned multiply. Return double product.
      000A0D 0A 02                 2028         .word      LINK
                           000A0F  2029 LINK = . 
      000A0F 03                    2030         .byte      3
      000A10 55 4D 2A              2031         .ascii     "UM*"
      000A13                       2032 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
                                   2033 ; take advantage of SP addressing modes
                                   2034 ; these PRODx in RAM are not required
                                   2035 ; the product is kept on stack as local variable 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                                   2036         ;; bytes offset on data stack 
                           000002  2037         da=2 
                           000003  2038         db=3 
                           000000  2039         dc=0 
                           000001  2040         dd=1 
                                   2041         ;; product bytes offset on return stack 
                           000001  2042         UD1=1  ; ud bits 31..24
                           000002  2043         UD2=2  ; ud bits 23..16
                           000003  2044         UD3=3  ; ud bits 15..8 
                           000004  2045         UD4=4  ; ud bits 7..0 
                                   2046         ;; local variable for product set to zero   
      000A13 90 5F            [ 1] 2047         clrw y 
      000A15 90 89            [ 2] 2048         pushw y  ; bits 15..0
      000A17 90 89            [ 2] 2049         pushw y  ; bits 31..16 
      000A19 E6 03            [ 1] 2050         ld a,(db,x) ; b 
      000A1B 90 97            [ 1] 2051         ld yl,a 
      000A1D E6 01            [ 1] 2052         ld a,(dd,x)   ; d
      000A1F 90 42            [ 4] 2053         mul y,a    ; b*d  
      000A21 17 03            [ 2] 2054         ldw (UD3,sp),y ; lowest weight product 
      000A23 E6 03            [ 1] 2055         ld a,(db,x)
      000A25 90 97            [ 1] 2056         ld yl,a 
      000A27 E6 00            [ 1] 2057         ld a,(dc,x)
      000A29 90 42            [ 4] 2058         mul y,a  ; b*c 
                                   2059         ;;; do the partial sum 
      000A2B 72 F9 02         [ 2] 2060         addw y,(UD2,sp)
      000A2E 4F               [ 1] 2061         clr a 
      000A2F 49               [ 1] 2062         rlc a
      000A30 6B 01            [ 1] 2063         ld (UD1,sp),a 
      000A32 17 02            [ 2] 2064         ldw (UD2,sp),y 
      000A34 E6 02            [ 1] 2065         ld a,(da,x)
      000A36 90 97            [ 1] 2066         ld yl,a 
      000A38 E6 01            [ 1] 2067         ld a,(dd,x)
      000A3A 90 42            [ 4] 2068         mul y,a   ; a*d 
                                   2069         ;; do partial sum 
      000A3C 72 F9 02         [ 2] 2070         addw y,(UD2,sp)
      000A3F 4F               [ 1] 2071         clr a 
      000A40 19 01            [ 1] 2072         adc a,(UD1,sp)
      000A42 6B 01            [ 1] 2073         ld (UD1,sp),a  
      000A44 17 02            [ 2] 2074         ldw (UD2,sp),y 
      000A46 E6 02            [ 1] 2075         ld a,(da,x)
      000A48 90 97            [ 1] 2076         ld yl,a 
      000A4A E6 00            [ 1] 2077         ld a,(dc,x)
      000A4C 90 42            [ 4] 2078         mul y,a  ;  a*c highest weight product 
                                   2079         ;;; do partial sum 
      000A4E 72 F9 01         [ 2] 2080         addw y,(UD1,sp)
      000A51 FF               [ 2] 2081         ldw (x),y  ; udh 
      000A52 16 03            [ 2] 2082         ldw y,(UD3,sp)
      000A54 EF 02            [ 2] 2083         ldw (2,x),y  ; udl  
      000A56 5B 04            [ 2] 2084         addw sp,#4 ; drop local variable 
      000A58 81               [ 4] 2085         ret  
                                   2086 
                                   2087 
                                   2088 ;       *       ( n n -- n )
                                   2089 ;       Signed multiply. Return single product.
      000A59 0A 0F                 2090         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                           000A5B  2091 LINK = . 
      000A5B 01                    2092         .byte      1
      000A5C 2A                    2093         .ascii     "*"
      000A5D                       2094 STAR:
      000A5D CD 0A 13         [ 4] 2095 	CALL	UMSTA
      000A60 CC 05 87         [ 2] 2096 	JP	DROP
                                   2097 
                                   2098 ;       M*      ( n n -- d )
                                   2099 ;       Signed multiply. Return double product.
      000A63 0A 5B                 2100         .word      LINK
                           000A65  2101 LINK = . 
      000A65 02                    2102         .byte      2
      000A66 4D 2A                 2103         .ascii     "M*"
      000A68                       2104 MSTAR:      
      000A68 CD 07 AB         [ 4] 2105         CALL	DDUP
      000A6B CD 06 19         [ 4] 2106         CALL	XORR
      000A6E CD 05 CA         [ 4] 2107         CALL	ZLESS
      000A71 CD 05 5A         [ 4] 2108         CALL	TOR
      000A74 CD 08 53         [ 4] 2109         CALL	ABSS
      000A77 CD 05 A1         [ 4] 2110         CALL	SWAPP
      000A7A CD 08 53         [ 4] 2111         CALL	ABSS
      000A7D CD 0A 13         [ 4] 2112         CALL	UMSTA
      000A80 CD 05 3B         [ 4] 2113         CALL	RFROM
      000A83 CD 04 9A         [ 4] 2114         CALL	QBRAN
      000A86 0A 8B                 2115         .word	MSTA1
      000A88 CD 07 FD         [ 4] 2116         CALL	DNEGA
      000A8B 81               [ 4] 2117 MSTA1:	RET
                                   2118 
                                   2119 ;       */MOD   ( n1 n2 n3 -- r q )
                                   2120 ;       Multiply n1 and n2, then divide
                                   2121 ;       by n3. Return mod and quotient.
      000A8C 0A 65                 2122         .word      LINK
                           000A8E  2123 LINK = . 
      000A8E 05                    2124         .byte      5
      000A8F 2A 2F 4D 4F 44        2125         .ascii     "*/MOD"
      000A94                       2126 SSMOD:
      000A94 CD 05 5A         [ 4] 2127         CALL     TOR
      000A97 CD 0A 68         [ 4] 2128         CALL     MSTAR
      000A9A CD 05 3B         [ 4] 2129         CALL     RFROM
      000A9D CC 09 98         [ 2] 2130         JP     MSMOD
                                   2131 
                                   2132 ;       */      ( n1 n2 n3 -- q )
                                   2133 ;       Multiply n1 by n2, then divide
                                   2134 ;       by n3. Return quotient only.
      000AA0 0A 8E                 2135         .word      LINK
                           000AA2  2136 LINK = . 
      000AA2 02                    2137         .byte      2
      000AA3 2A 2F                 2138         .ascii     "*/"
      000AA5                       2139 STASL:
      000AA5 CD 0A 94         [ 4] 2140         CALL	SSMOD
      000AA8 CD 05 A1         [ 4] 2141         CALL	SWAPP
      000AAB CC 05 87         [ 2] 2142         JP	DROP
                                   2143 
                                   2144 ;; Miscellaneous
                                   2145 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                   2146 ;       CELL+   ( a -- a )
                                   2147 ;       Add cell size in byte to address.
      000AAE 0A A2                 2148         .word      LINK
                           000AB0  2149 LINK = . 
      000AB0 02                    2150         .byte       2
      000AB1 32 2B                 2151         .ascii     "2+"
      000AB3                       2152 CELLP:
      000AB3 90 93            [ 1] 2153         LDW Y,X
      000AB5 90 FE            [ 2] 2154 	LDW Y,(Y)
      000AB7 72 A9 00 02      [ 2] 2155         ADDW Y,#CELLL 
      000ABB FF               [ 2] 2156         LDW (X),Y
      000ABC 81               [ 4] 2157         RET
                                   2158 
                                   2159 ;       CELL-   ( a -- a )
                                   2160 ;       Subtract 2 from address.
      000ABD 0A B0                 2161         .word      LINK
                           000ABF  2162 LINK = . 
      000ABF 02                    2163         .byte       2
      000AC0 32 2D                 2164         .ascii     "2-"
      000AC2                       2165 CELLM:
      000AC2 90 93            [ 1] 2166         LDW Y,X
      000AC4 90 FE            [ 2] 2167 	LDW Y,(Y)
      000AC6 72 A2 00 02      [ 2] 2168         SUBW Y,#CELLL
      000ACA FF               [ 2] 2169         LDW (X),Y
      000ACB 81               [ 4] 2170         RET
                                   2171 
                                   2172 ;       CELLS   ( n -- n )
                                   2173 ;       Multiply tos by 2.
      000ACC 0A BF                 2174         .word      LINK
                           000ACE  2175 LINK = . 
      000ACE 02                    2176         .byte       2
      000ACF 32 2A                 2177         .ascii     "2*"
      000AD1                       2178 CELLS:
      000AD1 90 93            [ 1] 2179         LDW Y,X
      000AD3 90 FE            [ 2] 2180 	LDW Y,(Y)
      000AD5 90 58            [ 2] 2181         SLAW Y
      000AD7 FF               [ 2] 2182         LDW (X),Y
      000AD8 81               [ 4] 2183         RET
                                   2184 
                                   2185 ;       1+      ( a -- a )
                                   2186 ;       Add cell size in byte to address.
      000AD9 0A CE                 2187         .word      LINK
                           000ADB  2188 LINK = . 
      000ADB 02                    2189         .byte      2
      000ADC 31 2B                 2190         .ascii     "1+"
      000ADE                       2191 ONEP:
      000ADE 90 93            [ 1] 2192         LDW Y,X
      000AE0 90 FE            [ 2] 2193 	LDW Y,(Y)
      000AE2 90 5C            [ 1] 2194         INCW Y
      000AE4 FF               [ 2] 2195         LDW (X),Y
      000AE5 81               [ 4] 2196         RET
                                   2197 
                                   2198 ;       1-      ( a -- a )
                                   2199 ;       Subtract 2 from address.
      000AE6 0A DB                 2200         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                           000AE8  2201 LINK = . 
      000AE8 02                    2202         .byte      2
      000AE9 31 2D                 2203         .ascii     "1-"
      000AEB                       2204 ONEM:
      000AEB 90 93            [ 1] 2205         LDW Y,X
      000AED 90 FE            [ 2] 2206 	LDW Y,(Y)
      000AEF 90 5A            [ 2] 2207         DECW Y
      000AF1 FF               [ 2] 2208         LDW (X),Y
      000AF2 81               [ 4] 2209         RET
                                   2210 
                                   2211 ;  shift left n times 
                                   2212 ; LSHIFT ( n1 n2 -- n1<<n2 )
      000AF3 0A E8                 2213         .word LINK 
                           000AF5  2214         LINK=.
      000AF5 06                    2215         .byte 6 
      000AF6 4C 53 48 49 46 54     2216         .ascii "LSHIFT"
      000AFC                       2217 LSHIFT:
      000AFC E6 01            [ 1] 2218         ld a,(1,x)
      000AFE 1C 00 02         [ 2] 2219         addw x,#CELLL 
      000B01 90 93            [ 1] 2220         ldw y,x 
      000B03 90 FE            [ 2] 2221         ldw y,(y)
      000B05                       2222 LSHIFT1:
      000B05 4D               [ 1] 2223         tnz a 
      000B06 27 05            [ 1] 2224         jreq LSHIFT4 
      000B08 90 58            [ 2] 2225         sllw y 
      000B0A 4A               [ 1] 2226         dec a 
      000B0B 20 F8            [ 2] 2227         jra LSHIFT1 
      000B0D                       2228 LSHIFT4:
      000B0D FF               [ 2] 2229         ldw (x),y 
      000B0E 81               [ 4] 2230         ret 
                                   2231 
                                   2232 ; shift right n times                 
                                   2233 ; RSHIFT (n1 n2 -- n1>>n2 )
      000B0F 0A F5                 2234         .word LINK 
                           000B11  2235         LINK=.
      000B11 06                    2236         .byte 6
      000B12 52 53 48 49 46 54     2237         .ascii "RSHIFT"
      000B18                       2238 RSHIFT:
      000B18 E6 01            [ 1] 2239         ld a,(1,x)
      000B1A 1C 00 02         [ 2] 2240         addw x,#CELLL 
      000B1D 90 93            [ 1] 2241         ldw y,x 
      000B1F 90 FE            [ 2] 2242         ldw y,(y)
      000B21                       2243 RSHIFT1:
      000B21 4D               [ 1] 2244         tnz a 
      000B22 27 05            [ 1] 2245         jreq RSHIFT4 
      000B24 90 54            [ 2] 2246         srlw y 
      000B26 4A               [ 1] 2247         dec a 
      000B27 20 F8            [ 2] 2248         jra RSHIFT1 
      000B29                       2249 RSHIFT4:
      000B29 FF               [ 2] 2250         ldw (x),y 
      000B2A 81               [ 4] 2251         ret 
                                   2252 
                                   2253 
                                   2254 ;       2/      ( n -- n )
                                   2255 ;       divide  tos by 2.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000B2B 0B 11                 2256         .word      LINK
                           000B2D  2257 LINK = . 
      000B2D 02                    2258         .byte      2
      000B2E 32 2F                 2259         .ascii     "2/"
      000B30                       2260 TWOSL:
      000B30 90 93            [ 1] 2261         LDW Y,X
      000B32 90 FE            [ 2] 2262 	LDW Y,(Y)
      000B34 90 57            [ 2] 2263         SRAW Y
      000B36 FF               [ 2] 2264         LDW (X),Y
      000B37 81               [ 4] 2265         RET
                                   2266 
                                   2267 ;       BL      ( -- 32 )
                                   2268 ;       Return 32,  blank character.
      000B38 0B 2D                 2269         .word      LINK
                           000B3A  2270 LINK = . 
      000B3A 02                    2271         .byte      2
      000B3B 42 4C                 2272         .ascii     "BL"
      000B3D                       2273 BLANK:
      000B3D 1D 00 02         [ 2] 2274         SUBW X,#2
      000B40 90 AE 00 20      [ 2] 2275 	LDW Y,#32
      000B44 FF               [ 2] 2276         LDW (X),Y
      000B45 81               [ 4] 2277         RET
                                   2278 
                                   2279 ;         0     ( -- 0)
                                   2280 ;         Return 0.
      000B46 0B 3A                 2281         .word      LINK
                           000B48  2282 LINK = . 
      000B48 01                    2283         .byte       1
      000B49 30                    2284         .ascii     "0"
      000B4A                       2285 ZERO:
      000B4A 1D 00 02         [ 2] 2286         SUBW X,#2
      000B4D 90 5F            [ 1] 2287 	CLRW Y
      000B4F FF               [ 2] 2288         LDW (X),Y
      000B50 81               [ 4] 2289         RET
                                   2290 
                                   2291 ;         1     ( -- 1)
                                   2292 ;         Return 1.
      000B51 0B 48                 2293         .word      LINK
                           000B53  2294 LINK = . 
      000B53 01                    2295         .byte       1
      000B54 31                    2296         .ascii     "1"
      000B55                       2297 ONE:
      000B55 1D 00 02         [ 2] 2298         SUBW X,#2
      000B58 90 AE 00 01      [ 2] 2299 	LDW Y,#1
      000B5C FF               [ 2] 2300         LDW (X),Y
      000B5D 81               [ 4] 2301         RET
                                   2302 
                                   2303 ;         -1    ( -- -1)
                                   2304 ;         Return 32,  blank character.
      000B5E 0B 53                 2305         .word      LINK
                           000B60  2306 LINK = . 
      000B60 02                    2307         .byte       2
      000B61 2D 31                 2308         .ascii     "-1"
      000B63                       2309 MONE:
      000B63 1D 00 02         [ 2] 2310         SUBW X,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000B66 90 AE FF FF      [ 2] 2311 	LDW Y,#0xFFFF
      000B6A FF               [ 2] 2312         LDW (X),Y
      000B6B 81               [ 4] 2313         RET
                                   2314 
                                   2315 ;       >CHAR   ( c -- c )
                                   2316 ;       Filter non-printing characters.
      000B6C 0B 60                 2317         .word      LINK
                           000B6E  2318 LINK = . 
      000B6E 05                    2319         .byte      5
      000B6F 3E 43 48 41 52        2320         .ascii     ">CHAR"
      000B74                       2321 TCHAR:
      000B74 E6 01            [ 1] 2322         ld a,(1,x)
      000B76 A1 20            [ 1] 2323         cp a,#32  
      000B78 2B 05            [ 1] 2324         jrmi 1$ 
      000B7A A1 7F            [ 1] 2325         cp a,#127 
      000B7C 2A 01            [ 1] 2326         jrpl 1$ 
      000B7E 81               [ 4] 2327         ret 
      000B7F A6 5F            [ 1] 2328 1$:     ld a,#'_ 
      000B81 E7 01            [ 1] 2329         ld (1,x),a 
      000B83 81               [ 4] 2330         ret 
                                   2331 
                                   2332 ;       DEPTH   ( -- n )
                                   2333 ;       Return  depth of  data stack.
      000B84 0B 6E                 2334         .word      LINK
                           000B86  2335 LINK = . 
      000B86 05                    2336         .byte      5
      000B87 44 45 50 54 48        2337         .ascii     "DEPTH"
      000B8C                       2338 DEPTH: 
      000B8C 90 BE 2C         [ 2] 2339         LDW Y,SP0    ;save data stack ptr
      000B8F BF 24            [ 2] 2340 	LDW XTEMP,X
      000B91 72 B2 00 24      [ 2] 2341         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000B95 90 57            [ 2] 2342         SRAW Y    ;Y = #stack items
      000B97 1D 00 02         [ 2] 2343 	SUBW X,#2
      000B9A FF               [ 2] 2344         LDW (X),Y     ; if neg, underflow
      000B9B 81               [ 4] 2345         RET
                                   2346 
                                   2347 ;       PICK    ( ... +n -- ... w )
                                   2348 ;       Copy  nth stack item to tos.
      000B9C 0B 86                 2349         .word      LINK
                           000B9E  2350 LINK = . 
      000B9E 04                    2351         .byte      4
      000B9F 50 49 43 4B           2352         .ascii     "PICK"
      000BA3                       2353 PICK:
      000BA3 90 93            [ 1] 2354         LDW Y,X   ;D = n1
      000BA5 90 FE            [ 2] 2355         LDW Y,(Y)
                                   2356 ; modified for standard compliance          
                                   2357 ; 0 PICK must be equivalent to DUP 
      000BA7 90 5C            [ 1] 2358         INCW Y 
      000BA9 90 58            [ 2] 2359         SLAW Y
      000BAB BF 24            [ 2] 2360         LDW XTEMP,X
      000BAD 72 B9 00 24      [ 2] 2361         ADDW Y,XTEMP
      000BB1 90 FE            [ 2] 2362         LDW Y,(Y)
      000BB3 FF               [ 2] 2363         LDW (X),Y
      000BB4 81               [ 4] 2364         RET
                                   2365 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



                                   2366 ;; Memory access
                                   2367 
                                   2368 ;       +!      ( n a -- )
                                   2369 ;       Add n to  contents at address a.
      000BB5 0B 9E                 2370         .word      LINK
                           000BB7  2371 LINK = . 
      000BB7 02                    2372         .byte      2
      000BB8 2B 21                 2373         .ascii     "+!"
      000BBA                       2374 PSTOR:
      000BBA 90 93            [ 1] 2375         ldw y,x 
      000BBC 90 FE            [ 2] 2376         ldw y,(y)
      000BBE 90 BF 26         [ 2] 2377         ldw YTEMP,y  ; address
      000BC1 90 FE            [ 2] 2378         ldw y,(y)  
      000BC3 90 89            [ 2] 2379         pushw y  ; value at address 
      000BC5 90 93            [ 1] 2380         ldw y,x 
      000BC7 90 EE 02         [ 2] 2381         ldw y,(2,y) ; n 
      000BCA 72 F9 01         [ 2] 2382         addw y,(1,sp) ; n+value
      000BCD 91 CF 26         [ 5] 2383         ldw [YTEMP],y ;  a!
      000BD0 90 85            [ 2] 2384         popw y    ;drop local var
      000BD2 1C 00 04         [ 2] 2385         addw x,#4 ; DDROP 
      000BD5 81               [ 4] 2386         ret 
                                   2387 
                                   2388 ;       2!      ( d a -- )
                                   2389 ;       Store  double integer to address a.
      000BD6 0B B7                 2390         .word      LINK
                           000BD8  2391 LINK = . 
      000BD8 02                    2392         .byte      2
      000BD9 32 21                 2393         .ascii     "2!"
      000BDB                       2394 DSTOR:
      000BDB 90 93            [ 1] 2395         ldw y,x 
      000BDD 90 FE            [ 2] 2396         ldw y,(y)
      000BDF 90 BF 26         [ 2] 2397         ldw YTEMP,y ; address 
      000BE2 1C 00 02         [ 2] 2398         addw x,#CELLL ; drop a 
      000BE5 90 93            [ 1] 2399         ldw y,x 
      000BE7 90 FE            [ 2] 2400         ldw y,(y) ; hi word 
      000BE9 89               [ 2] 2401         pushw x 
      000BEA EE 02            [ 2] 2402         ldw x,(2,x) ; lo word 
      000BEC 91 CF 26         [ 5] 2403         ldw [YTEMP],y
      000BEF 90 93            [ 1] 2404         ldw y,x 
      000BF1 AE 00 02         [ 2] 2405         ldw x,#2 
      000BF4 92 DF 26         [ 5] 2406         ldw ([YTEMP],x),y 
      000BF7 85               [ 2] 2407         popw x 
      000BF8 1C 00 04         [ 2] 2408         addw x,#4 ; DDROP 
      000BFB 81               [ 4] 2409         ret 
                                   2410 
                                   2411 ;       2@      ( a -- d )
                                   2412 ;       Fetch double integer from address a.
      000BFC 0B D8                 2413         .word      LINK
                           000BFE  2414 LINK = . 
      000BFE 02                    2415         .byte      2
      000BFF 32 40                 2416         .ascii     "2@"
      000C01                       2417 DAT:
      000C01 90 93            [ 1] 2418         ldw y,x 
      000C03 90 FE            [ 2] 2419         ldw y,(y) ;address 
      000C05 90 BF 26         [ 2] 2420         ldw YTEMP,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000C08 1D 00 02         [ 2] 2421         subw x,#CELLL ; space for udh 
      000C0B 91 CE 26         [ 5] 2422         ldw y,[YTEMP] ; udh 
      000C0E FF               [ 2] 2423         ldw (x),y 
      000C0F 90 AE 00 02      [ 2] 2424         ldw y,#2
      000C13 91 DE 26         [ 5] 2425         ldw y,([YTEMP],y) ; udl 
      000C16 EF 02            [ 2] 2426         ldw (2,x),y
      000C18 81               [ 4] 2427         ret 
                                   2428 
                                   2429 ;       COUNT   ( b -- b +n )
                                   2430 ;       Return count byte of a string
                                   2431 ;       and add 1 to byte address.
      000C19 0B FE                 2432         .word      LINK
                           000C1B  2433 LINK = . 
      000C1B 05                    2434         .byte      5
      000C1C 43 4F 55 4E 54        2435         .ascii     "COUNT"
      000C21                       2436 COUNT:
      000C21 90 93            [ 1] 2437         ldw y,x 
      000C23 90 FE            [ 2] 2438         ldw y,(y) ; address 
      000C25 90 F6            [ 1] 2439         ld a,(y)  ; count 
      000C27 90 5C            [ 1] 2440         incw y 
      000C29 FF               [ 2] 2441         ldw (x),y 
      000C2A 1D 00 02         [ 2] 2442         subw x,#CELLL 
      000C2D E7 01            [ 1] 2443         ld (1,x),a 
      000C2F 7F               [ 1] 2444         clr (x)
      000C30 81               [ 4] 2445         ret 
                                   2446 
                                   2447 ;       HERE    ( -- a )
                                   2448 ;       Return  top of  variables
      000C31 0C 1B                 2449         .word      LINK
                           000C33  2450 LINK = . 
      000C33 04                    2451         .byte      4
      000C34 48 45 52 45           2452         .ascii     "HERE"
      000C38                       2453 HERE:
      000C38 90 AE 00 18      [ 2] 2454       	ldw y,#UVP 
      000C3C 90 FE            [ 2] 2455         ldw y,(y)
      000C3E 1D 00 02         [ 2] 2456         subw x,#CELLL 
      000C41 FF               [ 2] 2457         ldw (x),y 
      000C42 81               [ 4] 2458         ret 
                                   2459 
                                   2460 ;       PAD     ( -- a )
                                   2461 ;       Return address of text buffer
                                   2462 ;       above  code dictionary.
      000C43 0C 33                 2463         .word      LINK
                           000C45  2464 LINK = . 
      000C45 03                    2465         .byte      3
      000C46 50 41 44              2466         .ascii     "PAD"
      000C49                       2467 PAD:
      000C49 CD 0C 38         [ 4] 2468         CALL     HERE
      000C4C CD 04 71         [ 4] 2469         CALL     DOLIT
      000C4F 00 50                 2470         .word      80
      000C51 CC 07 C0         [ 2] 2471         JP     PLUS
                                   2472 
                                   2473 ;       TIB     ( -- a )
                                   2474 ;       Return address of terminal input buffer.
      000C54 0C 45                 2475         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



                           000C56  2476 LINK = . 
      000C56 03                    2477         .byte      3
      000C57 54 49 42              2478         .ascii     "TIB"
      000C5A                       2479 TIB:
      000C5A CD 06 8F         [ 4] 2480         CALL     NTIB
      000C5D CD 0A B3         [ 4] 2481         CALL     CELLP
      000C60 CC 04 EA         [ 2] 2482         JP     AT
                                   2483 
                                   2484 ;       @EXECUTE        ( a -- )
                                   2485 ;       Execute vector stored in address a.
      000C63 0C 56                 2486         .word      LINK
                           000C65  2487 LINK = . 
      000C65 08                    2488         .byte      8
      000C66 40 45 58 45 43 55 54  2489         .ascii     "@EXECUTE"
             45
      000C6E                       2490 ATEXE:
      000C6E CD 04 EA         [ 4] 2491         CALL     AT
      000C71 CD 07 4E         [ 4] 2492         CALL     QDUP    ;?address or zero
      000C74 CD 04 9A         [ 4] 2493         CALL     QBRAN
      000C77 0C 7C                 2494         .word      EXE1
      000C79 CD 04 C6         [ 4] 2495         CALL     EXECU   ;execute if non-zero
      000C7C 81               [ 4] 2496 EXE1:   RET     ;do nothing if zero
                                   2497 
                                   2498 ;       CMOVE   ( b1 b2 u -- )
                                   2499 ;       Copy u bytes from b1 to b2.
      000C7D 0C 65                 2500         .word      LINK
                           000C7F  2501 LINK = . 
      000C7F 05                    2502         .byte      5
      000C80 43 4D 4F 56 45        2503         .ascii     "CMOVE"
      000C85                       2504 CMOVE:
      000C85 CD 05 5A         [ 4] 2505         CALL	TOR
      000C88 CD 04 B6         [ 4] 2506         CALL	BRAN
      000C8B 0C A5                 2507         .word	CMOV2
      000C8D CD 05 5A         [ 4] 2508 CMOV1:	CALL	TOR
      000C90 CD 05 91         [ 4] 2509         CALL	DUPP
      000C93 CD 05 08         [ 4] 2510         CALL	CAT
      000C96 CD 05 4E         [ 4] 2511         CALL	RAT
      000C99 CD 04 F7         [ 4] 2512         CALL	CSTOR
      000C9C CD 0A DE         [ 4] 2513         CALL	ONEP
      000C9F CD 05 3B         [ 4] 2514         CALL	RFROM
      000CA2 CD 0A DE         [ 4] 2515         CALL	ONEP
      000CA5 CD 04 85         [ 4] 2516 CMOV2:	CALL	DONXT
      000CA8 0C 8D                 2517         .word	CMOV1
      000CAA CC 07 A0         [ 2] 2518         JP	DDROP
                                   2519 
                                   2520 ;       FILL    ( b u c -- )
                                   2521 ;       Fill u bytes of character c
                                   2522 ;       to area beginning at b.
      000CAD 0C 7F                 2523         .word       LINK
                           000CAF  2524 LINK = . 
      000CAF 04                    2525         .byte       4
      000CB0 46 49 4C 4C           2526         .ascii     "FILL"
      000CB4                       2527 FILL:
      000CB4 90 93            [ 1] 2528         ldw y,x 
      000CB6 90 E6 01         [ 1] 2529         ld a,(1,y) ; c 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000CB9 1C 00 02         [ 2] 2530         addw x,#CELLL ; drop c 
      000CBC 90 93            [ 1] 2531         ldw y,x 
      000CBE 90 FE            [ 2] 2532         ldw y,(y) ; count
      000CC0 90 89            [ 2] 2533         pushw y 
      000CC2 1C 00 02         [ 2] 2534         addw x,#CELLL ; drop u 
      000CC5 90 93            [ 1] 2535         ldw y,x 
      000CC7 1C 00 02         [ 2] 2536         addw x,#CELLL ; drop b 
      000CCA 90 FE            [ 2] 2537         ldw y,(y) ; address
      000CCC 90 BF 26         [ 2] 2538         ldw YTEMP,y
      000CCF 90 85            [ 2] 2539         popw y ; count 
      000CD1                       2540 FILL1:  
      000CD1 92 C7 26         [ 4] 2541         ld [YTEMP],a 
      000CD4 3C 27            [ 1] 2542         inc YTEMP+1
      000CD6 24 02            [ 1] 2543         jrnc FILL2 
      000CD8 3C 26            [ 1] 2544         inc YTEMP
      000CDA                       2545 FILL2: 
      000CDA 90 5A            [ 2] 2546         decw y ; count 
      000CDC 26 F3            [ 1] 2547         jrne FILL1  
      000CDE 81               [ 4] 2548         ret 
                                   2549 
                                   2550 ;       ERASE   ( b u -- )
                                   2551 ;       Erase u bytes beginning at b.
      000CDF 0C AF                 2552         .word      LINK
                           000CE1  2553 LINK = . 
      000CE1 05                    2554         .byte      5
      000CE2 45 52 41 53 45        2555         .ascii     "ERASE"
      000CE7                       2556 ERASE:
      000CE7 90 5F            [ 1] 2557         clrw y 
      000CE9 1D 00 02         [ 2] 2558         subw x,#CELLL 
      000CEC FF               [ 2] 2559         ldw (x),y 
      000CED CC 0C B4         [ 2] 2560         jp FILL 
                                   2561 
                                   2562 
                                   2563 ;       PACK0   ( b u a -- a )
                                   2564 ;       Build a counted string with
                                   2565 ;       u characters from b. Null fill.
      000CF0 0C E1                 2566         .word      LINK
                           000CF2  2567 LINK = . 
      000CF2 05                    2568         .byte      5
      000CF3 50 41 43 4B 30        2569         .ascii     "PACK0"
      000CF8                       2570 PACKS:
      000CF8 CD 05 91         [ 4] 2571         CALL     DUPP
      000CFB CD 05 5A         [ 4] 2572         CALL     TOR     ;strings only on cell boundary
      000CFE CD 07 AB         [ 4] 2573         CALL     DDUP
      000D01 CD 04 F7         [ 4] 2574         CALL     CSTOR
      000D04 CD 0A DE         [ 4] 2575         CALL     ONEP ;save count
      000D07 CD 05 A1         [ 4] 2576         CALL     SWAPP
      000D0A CD 0C 85         [ 4] 2577         CALL     CMOVE
      000D0D CD 05 3B         [ 4] 2578         CALL     RFROM
      000D10 81               [ 4] 2579         RET
                                   2580 
                                   2581 ;; Numeric output, single precision
                                   2582 
                                   2583 ;       DIGIT   ( u -- c )
                                   2584 ;       Convert digit u to a character.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000D11 0C F2                 2585         .word      LINK
                           000D13  2586 LINK = . 
      000D13 05                    2587         .byte      5
      000D14 44 49 47 49 54        2588         .ascii     "DIGIT"
      000D19                       2589 DIGIT:
      000D19 CD 04 71         [ 4] 2590         CALL	DOLIT
      000D1C 00 09                 2591         .word	9
      000D1E CD 05 BB         [ 4] 2592         CALL	OVER
      000D21 CD 08 9E         [ 4] 2593         CALL	LESS
      000D24 CD 04 71         [ 4] 2594         CALL	DOLIT
      000D27 00 07                 2595         .word	7
      000D29 CD 05 F0         [ 4] 2596         CALL	ANDD
      000D2C CD 07 C0         [ 4] 2597         CALL	PLUS
      000D2F CD 04 71         [ 4] 2598         CALL	DOLIT
      000D32 00 30                 2599         .word	48	;'0'
      000D34 CC 07 C0         [ 2] 2600         JP	PLUS
                                   2601 
                                   2602 ;       EXTRACT ( n base -- n c )
                                   2603 ;       Extract least significant digit from n.
      000D37 0D 13                 2604         .word      LINK
                           000D39  2605 LINK = . 
      000D39 07                    2606         .byte      7
      000D3A 45 58 54 52 41 43 54  2607         .ascii     "EXTRACT"
      000D41                       2608 EXTRC:
      000D41 CD 0B 4A         [ 4] 2609         CALL     ZERO
      000D44 CD 05 A1         [ 4] 2610         CALL     SWAPP
      000D47 CD 09 54         [ 4] 2611         CALL     UMMOD
      000D4A CD 05 A1         [ 4] 2612         CALL     SWAPP
      000D4D CC 0D 19         [ 2] 2613         JP     DIGIT
                                   2614 
                                   2615 ;       <#      ( -- )
                                   2616 ;       Initiate  numeric output process.
      000D50 0D 39                 2617         .word      LINK
                           000D52  2618 LINK = . 
      000D52 02                    2619         .byte      2
      000D53 3C 23                 2620         .ascii     "<#"
      000D55                       2621 BDIGS:
      000D55 CD 0C 49         [ 4] 2622         CALL     PAD
      000D58 CD 06 D1         [ 4] 2623         CALL     HLD
      000D5B CC 04 D3         [ 2] 2624         JP     STORE
                                   2625 
                                   2626 ;       HOLD    ( c -- )
                                   2627 ;       Insert a character into output string.
      000D5E 0D 52                 2628         .word      LINK
                           000D60  2629 LINK = . 
      000D60 04                    2630         .byte      4
      000D61 48 4F 4C 44           2631         .ascii     "HOLD"
      000D65                       2632 HOLD:
      000D65 CD 06 D1         [ 4] 2633         CALL     HLD
      000D68 CD 04 EA         [ 4] 2634         CALL     AT
      000D6B CD 0A EB         [ 4] 2635         CALL     ONEM
      000D6E CD 05 91         [ 4] 2636         CALL     DUPP
      000D71 CD 06 D1         [ 4] 2637         CALL     HLD
      000D74 CD 04 D3         [ 4] 2638         CALL     STORE
      000D77 CC 04 F7         [ 2] 2639         JP     CSTOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                   2640 
                                   2641 ;       #       ( u -- u )
                                   2642 ;       Extract one digit from u and
                                   2643 ;       append digit to output string.
      000D7A 0D 60                 2644         .word      LINK
                           000D7C  2645 LINK = . 
      000D7C 01                    2646         .byte      1
      000D7D 23                    2647         .ascii     "#"
      000D7E                       2648 DIG:
      000D7E CD 06 61         [ 4] 2649         CALL     BASE
      000D81 CD 04 EA         [ 4] 2650         CALL     AT
      000D84 CD 0D 41         [ 4] 2651         CALL     EXTRC
      000D87 CC 0D 65         [ 2] 2652         JP     HOLD
                                   2653 
                                   2654 ;       #S      ( u -- 0 )
                                   2655 ;       Convert u until all digits
                                   2656 ;       are added to output string.
      000D8A 0D 7C                 2657         .word      LINK
                           000D8C  2658 LINK = . 
      000D8C 02                    2659         .byte      2
      000D8D 23 53                 2660         .ascii     "#S"
      000D8F                       2661 DIGS:
      000D8F CD 0D 7E         [ 4] 2662 DIGS1:  CALL     DIG
      000D92 CD 05 91         [ 4] 2663         CALL     DUPP
      000D95 CD 04 9A         [ 4] 2664         CALL     QBRAN
      000D98 0D 9C                 2665         .word      DIGS2
      000D9A 20 F3            [ 2] 2666         JRA     DIGS1
      000D9C 81               [ 4] 2667 DIGS2:  RET
                                   2668 
                                   2669 ;       SIGN    ( n -- )
                                   2670 ;       Add a minus sign to
                                   2671 ;       numeric output string.
      000D9D 0D 8C                 2672         .word      LINK
                           000D9F  2673 LINK = . 
      000D9F 04                    2674         .byte      4
      000DA0 53 49 47 4E           2675         .ascii     "SIGN"
      000DA4                       2676 SIGN:
      000DA4 CD 05 CA         [ 4] 2677         CALL     ZLESS
      000DA7 CD 04 9A         [ 4] 2678         CALL     QBRAN
      000DAA 0D B4                 2679         .word      SIGN1
      000DAC CD 04 71         [ 4] 2680         CALL     DOLIT
      000DAF 00 2D                 2681         .word      45	;"-"
      000DB1 CC 0D 65         [ 2] 2682         JP     HOLD
      000DB4 81               [ 4] 2683 SIGN1:  RET
                                   2684 
                                   2685 ;       #>      ( w -- b u )
                                   2686 ;       Prepare output string.
      000DB5 0D 9F                 2687         .word      LINK
                           000DB7  2688 LINK = . 
      000DB7 02                    2689         .byte      2
      000DB8 23 3E                 2690         .ascii     "#>"
      000DBA                       2691 EDIGS:
      000DBA CD 05 87         [ 4] 2692         CALL     DROP
      000DBD CD 06 D1         [ 4] 2693         CALL     HLD
      000DC0 CD 04 EA         [ 4] 2694         CALL     AT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000DC3 CD 0C 49         [ 4] 2695         CALL     PAD
      000DC6 CD 05 BB         [ 4] 2696         CALL     OVER
      000DC9 CC 08 39         [ 2] 2697         JP     SUBB
                                   2698 
                                   2699 ;       str     ( w -- b u )
                                   2700 ;       Convert a signed integer
                                   2701 ;       to a numeric string.
      000DCC 0D B7                 2702         .word      LINK
                           000DCE  2703 LINK = . 
      000DCE 03                    2704         .byte      3
      000DCF 53 54 52              2705         .ascii     "STR"
      000DD2                       2706 STR:
      000DD2 CD 05 91         [ 4] 2707         CALL     DUPP
      000DD5 CD 05 5A         [ 4] 2708         CALL     TOR
      000DD8 CD 08 53         [ 4] 2709         CALL     ABSS
      000DDB CD 0D 55         [ 4] 2710         CALL     BDIGS
      000DDE CD 0D 8F         [ 4] 2711         CALL     DIGS
      000DE1 CD 05 3B         [ 4] 2712         CALL     RFROM
      000DE4 CD 0D A4         [ 4] 2713         CALL     SIGN
      000DE7 CC 0D BA         [ 2] 2714         JP     EDIGS
                                   2715 
                                   2716 ;       HEX     ( -- )
                                   2717 ;       Use radix 16 as base for
                                   2718 ;       numeric conversions.
      000DEA 0D CE                 2719         .word      LINK
                           000DEC  2720 LINK = . 
      000DEC 03                    2721         .byte      3
      000DED 48 45 58              2722         .ascii     "HEX"
      000DF0                       2723 HEX:
      000DF0 CD 04 71         [ 4] 2724         CALL     DOLIT
      000DF3 00 10                 2725         .word      16
      000DF5 CD 06 61         [ 4] 2726         CALL     BASE
      000DF8 CC 04 D3         [ 2] 2727         JP     STORE
                                   2728 
                                   2729 ;       DECIMAL ( -- )
                                   2730 ;       Use radix 10 as base
                                   2731 ;       for numeric conversions.
      000DFB 0D EC                 2732         .word      LINK
                           000DFD  2733 LINK = . 
      000DFD 07                    2734         .byte      7
      000DFE 44 45 43 49 4D 41 4C  2735         .ascii     "DECIMAL"
      000E05                       2736 DECIM:
      000E05 CD 04 71         [ 4] 2737         CALL     DOLIT
      000E08 00 0A                 2738         .word      10
      000E0A CD 06 61         [ 4] 2739         CALL     BASE
      000E0D CC 04 D3         [ 2] 2740         JP     STORE
                                   2741 
                                   2742 ;; Numeric input, single precision
                                   2743 
                                   2744 ;       DIGIT?  ( c base -- u t )
                                   2745 ;       Convert a character to its numeric
                                   2746 ;       value. A flag indicates success.
      000E10 0D FD                 2747         .word      LINK
                           000E12  2748 LINK = . 
      000E12 06                    2749         .byte       6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000E13 44 49 47 49 54 3F     2750         .ascii     "DIGIT?"
      000E19                       2751 DIGTQ:
      000E19 CD 05 5A         [ 4] 2752         CALL     TOR
      000E1C CD 04 71         [ 4] 2753         CALL     DOLIT
      000E1F 00 30                 2754         .word     48	; "0"
      000E21 CD 08 39         [ 4] 2755         CALL     SUBB
      000E24 CD 04 71         [ 4] 2756         CALL     DOLIT
      000E27 00 09                 2757         .word      9
      000E29 CD 05 BB         [ 4] 2758         CALL     OVER
      000E2C CD 08 9E         [ 4] 2759         CALL     LESS
      000E2F CD 04 9A         [ 4] 2760         CALL     QBRAN
      000E32 0E 4A                 2761         .word      DGTQ1
      000E34 CD 04 71         [ 4] 2762         CALL     DOLIT
      000E37 00 07                 2763         .word      7
      000E39 CD 08 39         [ 4] 2764         CALL     SUBB
      000E3C CD 05 91         [ 4] 2765         CALL     DUPP
      000E3F CD 04 71         [ 4] 2766         CALL     DOLIT
      000E42 00 0A                 2767         .word      10
      000E44 CD 08 9E         [ 4] 2768         CALL     LESS
      000E47 CD 06 04         [ 4] 2769         CALL     ORR
      000E4A CD 05 91         [ 4] 2770 DGTQ1:  CALL     DUPP
      000E4D CD 05 3B         [ 4] 2771         CALL     RFROM
      000E50 CC 08 80         [ 2] 2772         JP     ULESS
                                   2773 
                           000001  2774 .if  WANT_DOUBLE
                           000000  2775 .else 
                                   2776 ;       NUMBER? ( a -- n T | a F )
                                   2777 ;       Convert a number string to
                                   2778 ;       integer. Push a flag on tos.
                                   2779         .word      LINK
                                   2780 LINK = . 
                                   2781         .byte      7
                                   2782         .ascii     "NUMBER?"
                                   2783 NUMBQ:
                                   2784         CALL     BASE
                                   2785         CALL     AT
                                   2786         CALL     TOR
                                   2787         CALL     ZERO
                                   2788         CALL     OVER
                                   2789         CALL     COUNT
                                   2790         CALL     OVER
                                   2791         CALL     CAT
                                   2792         CALL     DOLIT
                                   2793         .word     36	; "0x"
                                   2794         CALL     EQUAL
                                   2795         CALL     QBRAN
                                   2796         .word      NUMQ1
                                   2797         CALL     HEX
                                   2798         CALL     SWAPP
                                   2799         CALL     ONEP
                                   2800         CALL     SWAPP
                                   2801         CALL     ONEM
                                   2802 NUMQ1:  CALL     OVER
                                   2803         CALL     CAT
                                   2804         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                   2805         .word     45	; "-"
                                   2806         CALL     EQUAL
                                   2807         CALL     TOR
                                   2808         CALL     SWAPP
                                   2809         CALL     RAT
                                   2810         CALL     SUBB
                                   2811         CALL     SWAPP
                                   2812         CALL     RAT
                                   2813         CALL     PLUS
                                   2814         CALL     QDUP
                                   2815         CALL     QBRAN
                                   2816         .word      NUMQ6
                                   2817         CALL     ONEM
                                   2818         CALL     TOR
                                   2819 NUMQ2:  CALL     DUPP
                                   2820         CALL     TOR
                                   2821         CALL     CAT
                                   2822         CALL     BASE
                                   2823         CALL     AT
                                   2824         CALL     DIGTQ
                                   2825         CALL     QBRAN
                                   2826         .word      NUMQ4
                                   2827         CALL     SWAPP
                                   2828         CALL     BASE
                                   2829         CALL     AT
                                   2830         CALL     STAR
                                   2831         CALL     PLUS
                                   2832         CALL     RFROM
                                   2833         CALL     ONEP
                                   2834         CALL     DONXT
                                   2835         .word      NUMQ2
                                   2836         CALL     RAT
                                   2837         CALL     SWAPP
                                   2838         CALL     DROP
                                   2839         CALL     QBRAN
                                   2840         .word      NUMQ3
                                   2841         CALL     NEGAT
                                   2842 NUMQ3:  CALL     SWAPP
                                   2843         JRA     NUMQ5
                                   2844 NUMQ4:  CALL     RFROM
                                   2845         CALL     RFROM
                                   2846         CALL     DDROP
                                   2847         CALL     DDROP
                                   2848         CALL     ZERO
                                   2849 NUMQ5:  CALL     DUPP
                                   2850 NUMQ6:  CALL     RFROM
                                   2851         CALL     DDROP
                                   2852         CALL     RFROM
                                   2853         CALL     BASE
                                   2854         JP     STORE
                                   2855 .endif ; WANT_DOUBLE  
                                   2856 
                                   2857 ;; Basic I/O
                                   2858 
                                   2859 ;       KEY     ( -- c )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                                   2860 ;       Wait for and return an
                                   2861 ;       input character.
      000E53 0E 12                 2862         .word      LINK
                           000E55  2863 LINK = . 
      000E55 03                    2864         .byte      3
      000E56 4B 45 59              2865         .ascii     "KEY"
      000E59                       2866 KEY:
      000E59 72 0B 52 30 FB   [ 2] 2867         btjf UART_SR,#UART_SR_RXNE,. 
      000E5E C6 52 31         [ 1] 2868         ld a,UART_DR 
      000E61 1D 00 02         [ 2] 2869         subw x,#CELLL 
      000E64 E7 01            [ 1] 2870         ld (1,x),a 
      000E66 7F               [ 1] 2871         clr (x)
      000E67 81               [ 4] 2872         ret 
                                   2873 
                                   2874 ;       NUF?    ( -- t )
                                   2875 ;       Return false if no input,
                                   2876 ;       else pause and if CR return true.
      000E68 0E 55                 2877         .word      LINK
                           000E6A  2878 LINK = . 
      000E6A 04                    2879         .byte      4
      000E6B 4E 55 46 3F           2880         .ascii     "NUF?"
      000E6F                       2881 NUFQ:
      000E6F CD 04 18         [ 4] 2882         CALL     QKEY
      000E72 CD 05 91         [ 4] 2883         CALL     DUPP
      000E75 CD 04 9A         [ 4] 2884         CALL     QBRAN
      000E78 0E 88                 2885         .word    NUFQ1
      000E7A CD 07 A0         [ 4] 2886         CALL     DDROP
      000E7D CD 0E 59         [ 4] 2887         CALL     KEY
      000E80 CD 04 71         [ 4] 2888         CALL     DOLIT
      000E83 00 0D                 2889         .word      CRR
      000E85 CC 08 61         [ 2] 2890         JP     EQUAL
      000E88 81               [ 4] 2891 NUFQ1:  RET
                                   2892 
                                   2893 ;       SPACE   ( -- )
                                   2894 ;       Send  blank character to
                                   2895 ;       output device.
      000E89 0E 6A                 2896         .word      LINK
                           000E8B  2897 LINK = . 
      000E8B 05                    2898         .byte      5
      000E8C 53 50 41 43 45        2899         .ascii     "SPACE"
      000E91                       2900 SPACE:
      000E91 CD 0B 3D         [ 4] 2901         CALL     BLANK
      000E94 CC 04 36         [ 2] 2902         JP     EMIT
                                   2903 
                                   2904 ;       SPACES  ( +n -- )
                                   2905 ;       Send n spaces to output device.
      000E97 0E 8B                 2906         .word      LINK
                           000E99  2907 LINK = . 
      000E99 06                    2908         .byte      6
      000E9A 53 50 41 43 45 53     2909         .ascii     "SPACES"
      000EA0                       2910 SPACS:
      000EA0 CD 0B 4A         [ 4] 2911         CALL     ZERO
      000EA3 CD 08 FC         [ 4] 2912         CALL     MAX
      000EA6 CD 05 5A         [ 4] 2913         CALL     TOR
      000EA9 20 03            [ 2] 2914         JRA      CHAR2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000EAB CD 0E 91         [ 4] 2915 CHAR1:  CALL     SPACE
      000EAE CD 04 85         [ 4] 2916 CHAR2:  CALL     DONXT
      000EB1 0E AB                 2917         .word    CHAR1
      000EB3 81               [ 4] 2918         RET
                                   2919 
                                   2920 ;       TYPE    ( b u -- )
                                   2921 ;       Output u characters from b.
      000EB4 0E 99                 2922         .word      LINK
                           000EB6  2923 LINK = . 
      000EB6 04                    2924         .byte      4
      000EB7 54 59 50 45           2925         .ascii     "TYPE"
      000EBB                       2926 TYPES:
      000EBB CD 05 5A         [ 4] 2927         CALL     TOR
      000EBE 20 0C            [ 2] 2928         JRA     TYPE2
      000EC0 CD 05 91         [ 4] 2929 TYPE1:  CALL     DUPP
      000EC3 CD 05 08         [ 4] 2930         CALL     CAT
      000EC6 CD 04 36         [ 4] 2931         CALL     EMIT
      000EC9 CD 0A DE         [ 4] 2932         CALL     ONEP
      000ECC CD 04 85         [ 4] 2933 TYPE2:  CALL     DONXT
      000ECF 0E C0                 2934         .word      TYPE1
      000ED1 CC 05 87         [ 2] 2935         JP     DROP
                                   2936 
                                   2937 ;       CR      ( -- )
                                   2938 ;       Output a carriage return
                                   2939 ;       and a line feed.
      000ED4 0E B6                 2940         .word      LINK
                           000ED6  2941 LINK = . 
      000ED6 02                    2942         .byte      2
      000ED7 43 52                 2943         .ascii     "CR"
      000ED9                       2944 CR:
      000ED9 CD 04 71         [ 4] 2945         CALL     DOLIT
      000EDC 00 0D                 2946         .word      CRR
      000EDE CD 04 36         [ 4] 2947         CALL     EMIT
      000EE1 CD 04 71         [ 4] 2948         CALL     DOLIT
      000EE4 00 0A                 2949         .word      LF
      000EE6 CC 04 36         [ 2] 2950         JP     EMIT
                                   2951 
                                   2952 ;       do$     ( -- a )
                                   2953 ;       Return  address of a compiled
                                   2954 ;       string.
      000EE9 0E D6                 2955         .word      LINK
                           000EEB  2956 LINK = . 
      000EEB 43                    2957 	.byte      COMPO+3
      000EEC 44 4F 24              2958         .ascii     "DO$"
      000EEF                       2959 DOSTR:
      000EEF CD 05 3B         [ 4] 2960         CALL     RFROM
      000EF2 CD 05 4E         [ 4] 2961         CALL     RAT
      000EF5 CD 05 3B         [ 4] 2962         CALL     RFROM
      000EF8 CD 0C 21         [ 4] 2963         CALL     COUNT
      000EFB CD 07 C0         [ 4] 2964         CALL     PLUS
      000EFE CD 05 5A         [ 4] 2965         CALL     TOR
      000F01 CD 05 A1         [ 4] 2966         CALL     SWAPP
      000F04 CD 05 5A         [ 4] 2967         CALL     TOR
      000F07 81               [ 4] 2968         RET
                                   2969 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



                                   2970 ;       $"|     ( -- a )
                                   2971 ;       Run time routine compiled by $".
                                   2972 ;       Return address of a compiled string.
      000F08 0E EB                 2973         .word      LINK
                           000F0A  2974 LINK = . 
      000F0A 43                    2975 	.byte      COMPO+3
      000F0B 24 22 7C              2976         .byte     '$','"','|'
      000F0E                       2977 STRQP:
      000F0E CD 0E EF         [ 4] 2978         CALL     DOSTR
      000F11 81               [ 4] 2979         RET
                                   2980 
                                   2981 ;       ."|     ( -- )
                                   2982 ;       Run time routine of ." .
                                   2983 ;       Output a compiled string.
      000F12 0F 0A                 2984         .word      LINK
                           000F14  2985 LINK = . 
      000F14 43                    2986 	.byte      COMPO+3
      000F15 2E 22 7C              2987         .byte     '.','"','|'
      000F18                       2988 DOTQP:
      000F18 CD 0E EF         [ 4] 2989         CALL     DOSTR
      000F1B CD 0C 21         [ 4] 2990         CALL     COUNT
      000F1E CC 0E BB         [ 2] 2991         JP     TYPES
                                   2992 
                                   2993 ;       .R      ( n +n -- )
                                   2994 ;       Display an integer in a field
                                   2995 ;       of n columns, right justified.
      000F21 0F 14                 2996         .word      LINK
                           000F23  2997 LINK = . 
      000F23 02                    2998         .byte      2
      000F24 2E 52                 2999         .ascii     ".R"
      000F26                       3000 DOTR:
      000F26 CD 05 5A         [ 4] 3001         CALL     TOR
      000F29 CD 0D D2         [ 4] 3002         CALL     STR
      000F2C CD 05 3B         [ 4] 3003         CALL     RFROM
      000F2F CD 05 BB         [ 4] 3004         CALL     OVER
      000F32 CD 08 39         [ 4] 3005         CALL     SUBB
      000F35 CD 0E A0         [ 4] 3006         CALL     SPACS
      000F38 CC 0E BB         [ 2] 3007         JP     TYPES
                                   3008 
                                   3009 ;       U.R     ( u +n -- )
                                   3010 ;       Display an unsigned integer
                                   3011 ;       in n column, right justified.
      000F3B 0F 23                 3012         .word      LINK
                           000F3D  3013 LINK = . 
      000F3D 03                    3014         .byte      3
      000F3E 55 2E 52              3015         .ascii     "U.R"
      000F41                       3016 UDOTR:
      000F41 CD 05 5A         [ 4] 3017         CALL     TOR
      000F44 CD 0D 55         [ 4] 3018         CALL     BDIGS
      000F47 CD 0D 8F         [ 4] 3019         CALL     DIGS
      000F4A CD 0D BA         [ 4] 3020         CALL     EDIGS
      000F4D CD 05 3B         [ 4] 3021         CALL     RFROM
      000F50 CD 05 BB         [ 4] 3022         CALL     OVER
      000F53 CD 08 39         [ 4] 3023         CALL     SUBB
      000F56 CD 0E A0         [ 4] 3024         CALL     SPACS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      000F59 CC 0E BB         [ 2] 3025         JP     TYPES
                                   3026 
                                   3027 ;       U.      ( u -- )
                                   3028 ;       Display an unsigned integer
                                   3029 ;       in free format.
      000F5C 0F 3D                 3030         .word      LINK
                           000F5E  3031 LINK = . 
      000F5E 02                    3032         .byte      2
      000F5F 55 2E                 3033         .ascii     "U."
      000F61                       3034 UDOT:
      000F61 CD 0D 55         [ 4] 3035         CALL     BDIGS
      000F64 CD 0D 8F         [ 4] 3036         CALL     DIGS
      000F67 CD 0D BA         [ 4] 3037         CALL     EDIGS
      000F6A CD 0E 91         [ 4] 3038         CALL     SPACE
      000F6D CC 0E BB         [ 2] 3039         JP     TYPES
                                   3040 
                                   3041 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3042 ;   H. ( n -- )
                                   3043 ;   display n in hexadecimal 
                                   3044 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F70                       3045         _HEADER HDOT,2,"H."
      000F70 0F 5E                    1         .word LINK 
                           000F72     2         LINK=.
      000F72 02                       3         .byte 2  
      000F73 48 2E                    4         .ascii "H."
      000F75                          5         HDOT:
      000F75 CD 06 61         [ 4] 3046         CALL BASE 
      000F78 CD 04 EA         [ 4] 3047         CALL AT 
      000F7B CD 05 5A         [ 4] 3048         CALL TOR 
      000F7E CD 0D F0         [ 4] 3049         CALL HEX 
      000F81 CD 0F 61         [ 4] 3050         CALL UDOT 
      000F84 CD 05 3B         [ 4] 3051         CALL RFROM 
      000F87 CD 06 61         [ 4] 3052         CALL BASE 
      000F8A CD 04 D3         [ 4] 3053         CALL STORE 
      000F8D 81               [ 4] 3054         RET 
                                   3055 
                                   3056 
                                   3057 ;       .       ( w -- )
                                   3058 ;       Display an integer in free
                                   3059 ;       format, preceeded by a space.
      000F8E 0F 72                 3060         .word      LINK
                           000F90  3061 LINK = . 
      000F90 01                    3062         .byte      1
      000F91 2E                    3063         .ascii     "."
      000F92                       3064 DOT:
      000F92 CD 06 61         [ 4] 3065         CALL     BASE
      000F95 CD 04 EA         [ 4] 3066         CALL     AT
      000F98 CD 04 71         [ 4] 3067         CALL     DOLIT
      000F9B 00 0A                 3068         .word      10
      000F9D CD 06 19         [ 4] 3069         CALL     XORR    ;?decimal
      000FA0 CD 04 9A         [ 4] 3070         CALL     QBRAN
      000FA3 0F A8                 3071         .word      DOT1
      000FA5 CC 0F 61         [ 2] 3072         JP     UDOT
      000FA8 CD 0D D2         [ 4] 3073 DOT1:   CALL     STR
      000FAB CD 0E 91         [ 4] 3074         CALL     SPACE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      000FAE CC 0E BB         [ 2] 3075         JP     TYPES
                                   3076 
                                   3077 ;       ?       ( a -- )
                                   3078 ;       Display contents in memory cell.
      000FB1 0F 90                 3079         .word      LINK
                                   3080         
                           000FB3  3081 LINK = . 
      000FB3 01                    3082         .byte      1
      000FB4 3F                    3083         .ascii     "?"
      000FB5                       3084 QUEST:
      000FB5 CD 04 EA         [ 4] 3085         CALL     AT
      000FB8 CC 0F 92         [ 2] 3086         JP     DOT
                                   3087 
                                   3088 ;; Parsing
                                   3089 
                                   3090 ;       parse   ( b u c -- b u delta ; <string> )
                                   3091 ;       Scan string delimited by c.
                                   3092 ;       Return found string and its offset.
      000FBB 0F B3                 3093         .word      LINK
                           000FBD  3094 LINK = . 
      000FBD 05                    3095         .byte      5
      000FBE 70 61 72 73 65        3096         .ascii     "parse"
      000FC3                       3097 PARS:
      000FC3 CD 06 70         [ 4] 3098         CALL     TEMP
      000FC6 CD 04 D3         [ 4] 3099         CALL     STORE
      000FC9 CD 05 BB         [ 4] 3100         CALL     OVER
      000FCC CD 05 5A         [ 4] 3101         CALL     TOR
      000FCF CD 05 91         [ 4] 3102         CALL     DUPP
      000FD2 CD 04 9A         [ 4] 3103         CALL     QBRAN
      000FD5 10 7B                 3104         .word    PARS8
      000FD7 CD 0A EB         [ 4] 3105         CALL     ONEM
      000FDA CD 06 70         [ 4] 3106         CALL     TEMP
      000FDD CD 04 EA         [ 4] 3107         CALL     AT
      000FE0 CD 0B 3D         [ 4] 3108         CALL     BLANK
      000FE3 CD 08 61         [ 4] 3109         CALL     EQUAL
      000FE6 CD 04 9A         [ 4] 3110         CALL     QBRAN
      000FE9 10 1C                 3111         .word      PARS3
      000FEB CD 05 5A         [ 4] 3112         CALL     TOR
      000FEE CD 0B 3D         [ 4] 3113 PARS1:  CALL     BLANK
      000FF1 CD 05 BB         [ 4] 3114         CALL     OVER
      000FF4 CD 05 08         [ 4] 3115         CALL     CAT     ;skip leading blanks ONLY
      000FF7 CD 08 39         [ 4] 3116         CALL     SUBB
      000FFA CD 05 CA         [ 4] 3117         CALL     ZLESS
      000FFD CD 07 DA         [ 4] 3118         CALL     INVER
      001000 CD 04 9A         [ 4] 3119         CALL     QBRAN
      001003 10 19                 3120         .word      PARS2
      001005 CD 0A DE         [ 4] 3121         CALL     ONEP
      001008 CD 04 85         [ 4] 3122         CALL     DONXT
      00100B 0F EE                 3123         .word      PARS1
      00100D CD 05 3B         [ 4] 3124         CALL     RFROM
      001010 CD 05 87         [ 4] 3125         CALL     DROP
      001013 CD 0B 4A         [ 4] 3126         CALL     ZERO
      001016 CC 05 91         [ 2] 3127         JP     DUPP
      001019 CD 05 3B         [ 4] 3128 PARS2:  CALL     RFROM
      00101C CD 05 BB         [ 4] 3129 PARS3:  CALL     OVER
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      00101F CD 05 A1         [ 4] 3130         CALL     SWAPP
      001022 CD 05 5A         [ 4] 3131         CALL     TOR
      001025 CD 06 70         [ 4] 3132 PARS4:  CALL     TEMP
      001028 CD 04 EA         [ 4] 3133         CALL     AT
      00102B CD 05 BB         [ 4] 3134         CALL     OVER
      00102E CD 05 08         [ 4] 3135         CALL     CAT
      001031 CD 08 39         [ 4] 3136         CALL     SUBB    ;scan for delimiter
      001034 CD 06 70         [ 4] 3137         CALL     TEMP
      001037 CD 04 EA         [ 4] 3138         CALL     AT
      00103A CD 0B 3D         [ 4] 3139         CALL     BLANK
      00103D CD 08 61         [ 4] 3140         CALL     EQUAL
      001040 CD 04 9A         [ 4] 3141         CALL     QBRAN
      001043 10 48                 3142         .word      PARS5
      001045 CD 05 CA         [ 4] 3143         CALL     ZLESS
      001048 CD 04 9A         [ 4] 3144 PARS5:  CALL     QBRAN
      00104B 10 5D                 3145         .word      PARS6
      00104D CD 0A DE         [ 4] 3146         CALL     ONEP
      001050 CD 04 85         [ 4] 3147         CALL     DONXT
      001053 10 25                 3148         .word      PARS4
      001055 CD 05 91         [ 4] 3149         CALL     DUPP
      001058 CD 05 5A         [ 4] 3150         CALL     TOR
      00105B 20 0F            [ 2] 3151         JRA     PARS7
      00105D CD 05 3B         [ 4] 3152 PARS6:  CALL     RFROM
      001060 CD 05 87         [ 4] 3153         CALL     DROP
      001063 CD 05 91         [ 4] 3154         CALL     DUPP
      001066 CD 0A DE         [ 4] 3155         CALL     ONEP
      001069 CD 05 5A         [ 4] 3156         CALL     TOR
      00106C CD 05 BB         [ 4] 3157 PARS7:  CALL     OVER
      00106F CD 08 39         [ 4] 3158         CALL     SUBB
      001072 CD 05 3B         [ 4] 3159         CALL     RFROM
      001075 CD 05 3B         [ 4] 3160         CALL     RFROM
      001078 CC 08 39         [ 2] 3161         JP     SUBB
      00107B CD 05 BB         [ 4] 3162 PARS8:  CALL     OVER
      00107E CD 05 3B         [ 4] 3163         CALL     RFROM
      001081 CC 08 39         [ 2] 3164         JP     SUBB
                                   3165 
                                   3166 ;       PARSE   ( c -- b u ; <string> )
                                   3167 ;       Scan input stream and return
                                   3168 ;       counted string delimited by c.
      001084 0F BD                 3169         .word      LINK
                           001086  3170 LINK = . 
      001086 05                    3171         .byte      5
      001087 50 41 52 53 45        3172         .ascii     "PARSE"
      00108C                       3173 PARSE:
      00108C CD 05 5A         [ 4] 3174         CALL     TOR
      00108F CD 0C 5A         [ 4] 3175         CALL     TIB
      001092 CD 06 7F         [ 4] 3176         CALL     INN
      001095 CD 04 EA         [ 4] 3177         CALL     AT
      001098 CD 07 C0         [ 4] 3178         CALL     PLUS    ;current input buffer pointer
      00109B CD 06 8F         [ 4] 3179         CALL     NTIB
      00109E CD 04 EA         [ 4] 3180         CALL     AT
      0010A1 CD 06 7F         [ 4] 3181         CALL     INN
      0010A4 CD 04 EA         [ 4] 3182         CALL     AT
      0010A7 CD 08 39         [ 4] 3183         CALL     SUBB    ;remaining count
      0010AA CD 05 3B         [ 4] 3184         CALL     RFROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      0010AD CD 0F C3         [ 4] 3185         CALL     PARS
      0010B0 CD 06 7F         [ 4] 3186         CALL     INN
      0010B3 CC 0B BA         [ 2] 3187         JP     PSTOR
                                   3188 
                                   3189 ;       .(      ( -- )
                                   3190 ;       Output following string up to next ) .
      0010B6 10 86                 3191         .word      LINK
                           0010B8  3192 LINK = . 
      0010B8 82                    3193 	.byte      IMEDD+2
      0010B9 2E 28                 3194         .ascii     ".("
      0010BB                       3195 DOTPR:
      0010BB CD 04 71         [ 4] 3196         CALL     DOLIT
      0010BE 00 29                 3197         .word     41	; ")"
      0010C0 CD 10 8C         [ 4] 3198         CALL     PARSE
      0010C3 CC 0E BB         [ 2] 3199         JP     TYPES
                                   3200 
                                   3201 ;       (       ( -- )
                                   3202 ;       Ignore following string up to next ).
                                   3203 ;       A comment.
      0010C6 10 B8                 3204         .word      LINK
                           0010C8  3205 LINK = . 
      0010C8 81                    3206 	.byte      IMEDD+1
      0010C9 28                    3207         .ascii     "("
      0010CA                       3208 PAREN:
      0010CA CD 04 71         [ 4] 3209         CALL     DOLIT
      0010CD 00 29                 3210         .word     41	; ")"
      0010CF CD 10 8C         [ 4] 3211         CALL     PARSE
      0010D2 CC 07 A0         [ 2] 3212         JP     DDROP
                                   3213 
                                   3214 ;       \       ( -- )
                                   3215 ;       Ignore following text till
                                   3216 ;       end of line.
      0010D5 10 C8                 3217         .word      LINK
                           0010D7  3218 LINK = . 
      0010D7 81                    3219 	.byte      IMEDD+1
      0010D8 5C                    3220         .ascii     "\"
      0010D9                       3221 BKSLA:
      0010D9 90 AE 00 0E      [ 2] 3222         ldw y,#UCTIB ; #TIB  
      0010DD 90 FE            [ 2] 3223         ldw y,(y)
      0010DF 90 89            [ 2] 3224         pushw y ; count in TIB 
      0010E1 90 AE 00 0C      [ 2] 3225         ldw y,#UINN ; >IN 
      0010E5 90 BF 26         [ 2] 3226         ldw YTEMP,y
      0010E8 90 85            [ 2] 3227         popw y 
      0010EA 91 CF 26         [ 5] 3228         ldw [YTEMP],y
      0010ED 81               [ 4] 3229         ret 
                                   3230 
                                   3231 ;       WORD    ( c -- a ; <string> )
                                   3232 ;       Parse a word from input stream
                                   3233 ;       and copy it to code dictionary.
      0010EE 10 D7                 3234         .word      LINK
                           0010F0  3235 LINK = . 
      0010F0 04                    3236         .byte      4
      0010F1 57 4F 52 44           3237         .ascii     "WORD"
      0010F5                       3238 WORDD:
      0010F5 CD 10 8C         [ 4] 3239         CALL     PARSE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      0010F8 CD 0C 38         [ 4] 3240         CALL     HERE
      0010FB CD 0A B3         [ 4] 3241         CALL     CELLP
                           000000  3242 .IF CASE_SENSE 
                                   3243         JP      PACKS 
                           000001  3244 .ELSE                 
      0010FE CD 0C F8         [ 4] 3245         CALL     PACKS
                                   3246 ; uppercase TOKEN 
      001101 CD 05 91         [ 4] 3247         CALL    DUPP 
      001104 CD 0C 21         [ 4] 3248         CALL    COUNT 
      001107 CD 05 5A         [ 4] 3249         CALL    TOR 
      00110A CD 04 B6         [ 4] 3250         CALL    BRAN 
      00110D 11 3B                 3251         .word   UPPER2  
      00110F                       3252 UPPER:
      00110F CD 05 91         [ 4] 3253         CALL    DUPP 
      001112 CD 05 08         [ 4] 3254         CALL    CAT
      001115 CD 05 91         [ 4] 3255         CALL    DUPP 
      001118 CD 04 71         [ 4] 3256         CALL   DOLIT
      00111B 00 61                 3257         .word   'a' 
      00111D CD 04 71         [ 4] 3258         CALL    DOLIT
      001120 00 7B                 3259         .word   'z'+1 
      001122 CD 09 39         [ 4] 3260         CALL   WITHI 
      001125 CD 04 9A         [ 4] 3261         CALL   QBRAN
      001128 11 32                 3262         .word  UPPER1  
      00112A CD 04 71         [ 4] 3263         CALL    DOLIT 
      00112D 00 DF                 3264         .word   0xDF 
      00112F CD 05 F0         [ 4] 3265         CALL    ANDD 
      001132                       3266 UPPER1:
      001132 CD 05 BB         [ 4] 3267         CALL    OVER 
      001135 CD 04 F7         [ 4] 3268         CALL    CSTOR          
      001138 CD 0A DE         [ 4] 3269         CALL    ONEP 
      00113B                       3270 UPPER2: 
      00113B CD 04 85         [ 4] 3271         CALL    DONXT
      00113E 11 0F                 3272         .word   UPPER  
      001140 CD 05 87         [ 4] 3273         CALL    DROP  
      001143 81               [ 4] 3274         RET 
                                   3275 .ENDIF 
                                   3276 
                                   3277 ;       TOKEN   ( -- a ; <string> )
                                   3278 ;       Parse a word from input stream
                                   3279 ;       and copy it to name dictionary.
      001144 10 F0                 3280         .word      LINK
                           001146  3281 LINK = . 
      001146 05                    3282         .byte      5
      001147 54 4F 4B 45 4E        3283         .ascii     "TOKEN"
      00114C                       3284 TOKEN:
      00114C CD 0B 3D         [ 4] 3285         CALL     BLANK
      00114F CC 10 F5         [ 2] 3286         JP     WORDD
                                   3287 
                                   3288 ;; Dictionary search
                                   3289 
                                   3290 ;       NAME>   ( na -- ca )
                                   3291 ;       Return a code address given
                                   3292 ;       a name address.
      001152 11 46                 3293         .word      LINK
                           001154  3294 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      001154 05                    3295         .byte      5
      001155 4E 41 4D 45 3E        3296         .ascii     "NAME>"
      00115A                       3297 NAMET:
      00115A CD 0C 21         [ 4] 3298         CALL     COUNT
      00115D CD 04 71         [ 4] 3299         CALL     DOLIT
      001160 00 1F                 3300         .word      31
      001162 CD 05 F0         [ 4] 3301         CALL     ANDD
      001165 CC 07 C0         [ 2] 3302         JP     PLUS
                                   3303 
                                   3304 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   3305 ;       Compare u cells in two
                                   3306 ;       strings. Return 0 if identical.
      001168 11 54                 3307         .word      LINK
                           00116A  3308 LINK = . 
      00116A 05                    3309         .byte       5
      00116B 53 41 4D 45 3F        3310         .ascii     "SAME?"
      001170                       3311 SAMEQ:
      001170 CD 0A EB         [ 4] 3312         CALL     ONEM
      001173 CD 05 5A         [ 4] 3313         CALL     TOR
      001176 20 29            [ 2] 3314         JRA     SAME2
      001178 CD 05 BB         [ 4] 3315 SAME1:  CALL     OVER
      00117B CD 05 4E         [ 4] 3316         CALL     RAT
      00117E CD 07 C0         [ 4] 3317         CALL     PLUS
      001181 CD 05 08         [ 4] 3318         CALL     CAT
      001184 CD 05 BB         [ 4] 3319         CALL     OVER
      001187 CD 05 4E         [ 4] 3320         CALL     RAT
      00118A CD 07 C0         [ 4] 3321         CALL     PLUS
      00118D CD 05 08         [ 4] 3322         CALL     CAT
      001190 CD 08 39         [ 4] 3323         CALL     SUBB
      001193 CD 07 4E         [ 4] 3324         CALL     QDUP
      001196 CD 04 9A         [ 4] 3325         CALL     QBRAN
      001199 11 A1                 3326         .word      SAME2
      00119B CD 05 3B         [ 4] 3327         CALL     RFROM
      00119E CC 05 87         [ 2] 3328         JP     DROP
      0011A1 CD 04 85         [ 4] 3329 SAME2:  CALL     DONXT
      0011A4 11 78                 3330         .word      SAME1
      0011A6 CC 0B 4A         [ 2] 3331         JP     ZERO
                                   3332 
                                   3333 ;       find    ( a va -- ca na | a F )
                                   3334 ;       Search vocabulary for string.
                                   3335 ;       Return ca and na if succeeded.
      0011A9 11 6A                 3336         .word      LINK
                           0011AB  3337 LINK = . 
      0011AB 04                    3338         .byte      4
      0011AC 46 49 4E 44           3339         .ascii     "FIND"
      0011B0                       3340 FIND:
      0011B0 CD 05 A1         [ 4] 3341         CALL     SWAPP
      0011B3 CD 05 91         [ 4] 3342         CALL     DUPP
      0011B6 CD 05 08         [ 4] 3343         CALL     CAT
      0011B9 CD 06 70         [ 4] 3344         CALL     TEMP
      0011BC CD 04 D3         [ 4] 3345         CALL     STORE
      0011BF CD 05 91         [ 4] 3346         CALL     DUPP
      0011C2 CD 04 EA         [ 4] 3347         CALL     AT
      0011C5 CD 05 5A         [ 4] 3348         CALL     TOR
      0011C8 CD 0A B3         [ 4] 3349         CALL     CELLP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      0011CB CD 05 A1         [ 4] 3350         CALL     SWAPP
      0011CE CD 04 EA         [ 4] 3351 FIND1:  CALL     AT
      0011D1 CD 05 91         [ 4] 3352         CALL     DUPP
      0011D4 CD 04 9A         [ 4] 3353         CALL     QBRAN
      0011D7 12 0D                 3354         .word      FIND6
      0011D9 CD 05 91         [ 4] 3355         CALL     DUPP
      0011DC CD 04 EA         [ 4] 3356         CALL     AT
      0011DF CD 04 71         [ 4] 3357         CALL     DOLIT
      0011E2 1F 7F                 3358         .word      MASKK
      0011E4 CD 05 F0         [ 4] 3359         CALL     ANDD
      0011E7 CD 05 4E         [ 4] 3360         CALL     RAT
      0011EA CD 06 19         [ 4] 3361         CALL     XORR
      0011ED CD 04 9A         [ 4] 3362         CALL     QBRAN
      0011F0 11 FC                 3363         .word      FIND2
      0011F2 CD 0A B3         [ 4] 3364         CALL     CELLP
      0011F5 CD 04 71         [ 4] 3365         CALL     DOLIT
      0011F8 FF FF                 3366         .word     0xFFFF
      0011FA 20 0C            [ 2] 3367         JRA     FIND3
      0011FC CD 0A B3         [ 4] 3368 FIND2:  CALL     CELLP
      0011FF CD 06 70         [ 4] 3369         CALL     TEMP
      001202 CD 04 EA         [ 4] 3370         CALL     AT
      001205 CD 11 70         [ 4] 3371         CALL     SAMEQ
      001208 CD 04 B6         [ 4] 3372 FIND3:  CALL     BRAN
      00120B 12 1C                 3373         .word      FIND4
      00120D CD 05 3B         [ 4] 3374 FIND6:  CALL     RFROM
      001210 CD 05 87         [ 4] 3375         CALL     DROP
      001213 CD 05 A1         [ 4] 3376         CALL     SWAPP
      001216 CD 0A C2         [ 4] 3377         CALL     CELLM
      001219 CC 05 A1         [ 2] 3378         JP     SWAPP
      00121C CD 04 9A         [ 4] 3379 FIND4:  CALL     QBRAN
      00121F 12 29                 3380         .word      FIND5
      001221 CD 0A C2         [ 4] 3381         CALL     CELLM
      001224 CD 0A C2         [ 4] 3382         CALL     CELLM
      001227 20 A5            [ 2] 3383         JRA     FIND1
      001229 CD 05 3B         [ 4] 3384 FIND5:  CALL     RFROM
      00122C CD 05 87         [ 4] 3385         CALL     DROP
      00122F CD 05 A1         [ 4] 3386         CALL     SWAPP
      001232 CD 05 87         [ 4] 3387         CALL     DROP
      001235 CD 0A C2         [ 4] 3388         CALL     CELLM
      001238 CD 05 91         [ 4] 3389         CALL     DUPP
      00123B CD 11 5A         [ 4] 3390         CALL     NAMET
      00123E CC 05 A1         [ 2] 3391         JP     SWAPP
                                   3392 
                                   3393 ;       NAME?   ( a -- ca na | a F )
                                   3394 ;       Search vocabularies for a string.
      001241 11 AB                 3395         .word      LINK
                           001243  3396 LINK = . 
      001243 05                    3397         .byte      5
      001244 4E 41 4D 45 3F        3398         .ascii     "NAME?"
      001249                       3399 NAMEQ:
      001249 CD 06 E4         [ 4] 3400         CALL   CNTXT
      00124C CC 11 B0         [ 2] 3401         JP     FIND
                                   3402 
                                   3403 ;; Terminal response
                                   3404 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                   3405 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3406 ;       Backup cursor by one character.
      00124F 12 43                 3407         .word      LINK
                           001251  3408 LINK = . 
      001251 02                    3409         .byte      2
      001252 5E 48                 3410         .ascii     "^H"
      001254                       3411 BKSP:
      001254 CD 05 5A         [ 4] 3412         CALL     TOR
      001257 CD 05 BB         [ 4] 3413         CALL     OVER
      00125A CD 05 3B         [ 4] 3414         CALL     RFROM
      00125D CD 05 A1         [ 4] 3415         CALL     SWAPP
      001260 CD 05 BB         [ 4] 3416         CALL     OVER
      001263 CD 06 19         [ 4] 3417         CALL     XORR
      001266 CD 04 9A         [ 4] 3418         CALL     QBRAN
      001269 12 84                 3419         .word      BACK1
      00126B CD 04 71         [ 4] 3420         CALL     DOLIT
      00126E 00 08                 3421         .word      BKSPP
      001270 CD 04 36         [ 4] 3422         CALL     EMIT
      001273 CD 0A EB         [ 4] 3423         CALL     ONEM
      001276 CD 0B 3D         [ 4] 3424         CALL     BLANK
      001279 CD 04 36         [ 4] 3425         CALL     EMIT
      00127C CD 04 71         [ 4] 3426         CALL     DOLIT
      00127F 00 08                 3427         .word      BKSPP
      001281 CC 04 36         [ 2] 3428         JP     EMIT
      001284 81               [ 4] 3429 BACK1:  RET
                                   3430 
                                   3431 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3432 ;       Accept and echo key stroke
                                   3433 ;       and bump cursor.
      001285 12 51                 3434         .word      LINK
                           001287  3435 LINK = . 
      001287 03                    3436         .byte      3
      001288 54 41 50              3437         .ascii     "TAP"
      00128B                       3438 TAP:
      00128B CD 05 91         [ 4] 3439         CALL     DUPP
      00128E CD 04 36         [ 4] 3440         CALL     EMIT
      001291 CD 05 BB         [ 4] 3441         CALL     OVER
      001294 CD 04 F7         [ 4] 3442         CALL     CSTOR
      001297 CC 0A DE         [ 2] 3443         JP     ONEP
                                   3444 
                                   3445 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3446 ;       Process a key stroke,
                                   3447 ;       CR,LF or backspace.
      00129A 12 87                 3448         .word      LINK
                           00129C  3449 LINK = . 
      00129C 04                    3450         .byte      4
      00129D 4B 54 41 50           3451         .ascii     "KTAP"
      0012A1                       3452 KTAP:
      0012A1 CD 05 91         [ 4] 3453         CALL     DUPP
      0012A4 CD 04 71         [ 4] 3454         CALL     DOLIT
                           000001  3455 .if EOL_CR
      0012A7 00 0D                 3456         .word   CRR
                           000000  3457 .else ; EOL_LF 
                                   3458         .word   LF
                                   3459 .endif 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      0012A9 CD 06 19         [ 4] 3460         CALL     XORR
      0012AC CD 04 9A         [ 4] 3461         CALL     QBRAN
      0012AF 12 C7                 3462         .word      KTAP2
      0012B1 CD 04 71         [ 4] 3463         CALL     DOLIT
      0012B4 00 08                 3464         .word      BKSPP
      0012B6 CD 06 19         [ 4] 3465         CALL     XORR
      0012B9 CD 04 9A         [ 4] 3466         CALL     QBRAN
      0012BC 12 C4                 3467         .word      KTAP1
      0012BE CD 0B 3D         [ 4] 3468         CALL     BLANK
      0012C1 CC 12 8B         [ 2] 3469         JP     TAP
      0012C4 CC 12 54         [ 2] 3470 KTAP1:  JP     BKSP
      0012C7 CD 05 87         [ 4] 3471 KTAP2:  CALL     DROP
      0012CA CD 05 A1         [ 4] 3472         CALL     SWAPP
      0012CD CD 05 87         [ 4] 3473         CALL     DROP
      0012D0 CC 05 91         [ 2] 3474         JP     DUPP
                                   3475 
                                   3476 ;       accept  ( b u -- b u )
                                   3477 ;       Accept characters to input
                                   3478 ;       buffer. Return with actual count.
      0012D3 12 9C                 3479         .word      LINK
                           0012D5  3480 LINK = . 
      0012D5 06                    3481         .byte      6
      0012D6 41 43 43 45 50 54     3482         .ascii     "ACCEPT"
      0012DC                       3483 ACCEP:
      0012DC CD 05 BB         [ 4] 3484         CALL     OVER
      0012DF CD 07 C0         [ 4] 3485         CALL     PLUS
      0012E2 CD 05 BB         [ 4] 3486         CALL     OVER
      0012E5 CD 07 AB         [ 4] 3487 ACCP1:  CALL     DDUP
      0012E8 CD 06 19         [ 4] 3488         CALL     XORR
      0012EB CD 04 9A         [ 4] 3489         CALL     QBRAN
      0012EE 13 10                 3490         .word      ACCP4
      0012F0 CD 0E 59         [ 4] 3491         CALL     KEY
      0012F3 CD 05 91         [ 4] 3492         CALL     DUPP
      0012F6 CD 0B 3D         [ 4] 3493         CALL     BLANK
      0012F9 CD 04 71         [ 4] 3494         CALL     DOLIT
      0012FC 00 7F                 3495         .word      127
      0012FE CD 09 39         [ 4] 3496         CALL     WITHI
      001301 CD 04 9A         [ 4] 3497         CALL     QBRAN
      001304 13 0B                 3498         .word      ACCP2
      001306 CD 12 8B         [ 4] 3499         CALL     TAP
      001309 20 03            [ 2] 3500         JRA     ACCP3
      00130B CD 12 A1         [ 4] 3501 ACCP2:  CALL     KTAP
      00130E 20 D5            [ 2] 3502 ACCP3:  JRA     ACCP1
      001310 CD 05 87         [ 4] 3503 ACCP4:  CALL     DROP
      001313 CD 05 BB         [ 4] 3504         CALL     OVER
      001316 CC 08 39         [ 2] 3505         JP     SUBB
                                   3506 
                                   3507 ;       QUERY   ( -- )
                                   3508 ;       Accept input stream to
                                   3509 ;       terminal input buffer.
      001319 12 D5                 3510         .word      LINK
                                   3511         
                           00131B  3512 LINK = . 
      00131B 05                    3513         .byte      5
      00131C 51 55 45 52 59        3514         .ascii     "QUERY"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      001321                       3515 QUERY:
      001321 CD 0C 5A         [ 4] 3516         CALL     TIB
      001324 CD 04 71         [ 4] 3517         CALL     DOLIT
      001327 00 50                 3518         .word      80
      001329 CD 12 DC         [ 4] 3519         CALL     ACCEP
      00132C CD 06 8F         [ 4] 3520         CALL     NTIB
      00132F CD 04 D3         [ 4] 3521         CALL     STORE
      001332 CD 05 87         [ 4] 3522         CALL     DROP
      001335 CD 0B 4A         [ 4] 3523         CALL     ZERO
      001338 CD 06 7F         [ 4] 3524         CALL     INN
      00133B CC 04 D3         [ 2] 3525         JP     STORE
                                   3526 
                                   3527 ;       ABORT   ( -- )
                                   3528 ;       Reset data stack and
                                   3529 ;       jump to QUIT.
      00133E 13 1B                 3530         .word      LINK
                           001340  3531 LINK = . 
      001340 05                    3532         .byte      5
      001341 41 42 4F 52 54        3533         .ascii     "ABORT"
      001346                       3534 ABORT:
      001346 CD 14 3D         [ 4] 3535         CALL     PRESE
      001349 CC 14 5A         [ 2] 3536         JP     QUIT
                                   3537 
                                   3538 ;       abort"  ( f -- )
                                   3539 ;       Run time routine of ABORT".
                                   3540 ;       Abort with a message.
      00134C 13 40                 3541         .word      LINK
                           00134E  3542 LINK = . 
      00134E 46                    3543 	.byte      COMPO+6
      00134F 41 42 4F 52 54        3544         .ascii     "ABORT"
      001354 22                    3545         .byte      '"'
      001355                       3546 ABORQ:
      001355 CD 04 9A         [ 4] 3547         CALL     QBRAN
      001358 13 74                 3548         .word      ABOR2   ;text flag
      00135A CD 0E EF         [ 4] 3549         CALL     DOSTR
      00135D CD 0E 91         [ 4] 3550 ABOR1:  CALL     SPACE
      001360 CD 0C 21         [ 4] 3551         CALL     COUNT
      001363 CD 0E BB         [ 4] 3552         CALL     TYPES
      001366 CD 04 71         [ 4] 3553         CALL     DOLIT
      001369 00 3F                 3554         .word     63 ; "?"
      00136B CD 04 36         [ 4] 3555         CALL     EMIT
      00136E CD 0E D9         [ 4] 3556         CALL     CR
      001371 CC 13 46         [ 2] 3557         JP     ABORT   ;pass error string
      001374 CD 0E EF         [ 4] 3558 ABOR2:  CALL     DOSTR
      001377 CC 05 87         [ 2] 3559         JP     DROP
                                   3560 
                                   3561 ;; The text interpreter
                                   3562 
                                   3563 ;       $INTERPRET      ( a -- )
                                   3564 ;       Interpret a word. If failed,
                                   3565 ;       try to convert it to an integer.
      00137A 13 4E                 3566         .word      LINK
                           00137C  3567 LINK = . 
      00137C 0A                    3568         .byte      10
      00137D 24 49 4E 54 45 52 50  3569         .ascii     "$INTERPRET"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



             52 45 54
      001387                       3570 INTER:
      001387 CD 12 49         [ 4] 3571         CALL     NAMEQ
      00138A CD 07 4E         [ 4] 3572         CALL     QDUP    ;?defined
      00138D CD 04 9A         [ 4] 3573         CALL     QBRAN
      001390 13 B1                 3574         .word      INTE1
      001392 CD 04 EA         [ 4] 3575         CALL     AT
      001395 CD 04 71         [ 4] 3576         CALL     DOLIT
      001398 40 00                 3577 	.word       0x4000	; COMPO*256
      00139A CD 05 F0         [ 4] 3578         CALL     ANDD    ;?compile only lexicon bits
      00139D CD 13 55         [ 4] 3579         CALL     ABORQ
      0013A0 0D                    3580         .byte      13
      0013A1 20 63 6F 6D 70 69 6C  3581         .ascii     " compile only"
             65 20 6F 6E 6C 79
      0013AE CC 04 C6         [ 2] 3582         JP     EXECU
      0013B1 CD 24 51         [ 4] 3583 INTE1:  CALL     NUMBQ   ;convert a number
      0013B4 CD 04 9A         [ 4] 3584         CALL     QBRAN
      0013B7 13 5D                 3585         .word    ABOR1
      0013B9 81               [ 4] 3586         RET
                                   3587 
                                   3588 ;       [       ( -- )
                                   3589 ;       Start  text interpreter.
      0013BA 13 7C                 3590         .word      LINK
                           0013BC  3591 LINK = . 
      0013BC 81                    3592 	.byte      IMEDD+1
      0013BD 5B                    3593         .ascii     "["
      0013BE                       3594 LBRAC:
      0013BE CD 04 71         [ 4] 3595         CALL   DOLIT
      0013C1 13 87                 3596         .word  INTER
      0013C3 CD 06 C2         [ 4] 3597         CALL   TEVAL
      0013C6 CC 04 D3         [ 2] 3598         JP     STORE
                                   3599 
                                   3600 ;       .OK     ( -- )
                                   3601 ;       Display 'ok' while interpreting.
      0013C9 13 BC                 3602         .word      LINK
                           0013CB  3603 LINK = . 
      0013CB 03                    3604         .byte      3
      0013CC 2E 4F 4B              3605         .ascii     ".OK"
      0013CF                       3606 DOTOK:
      0013CF CD 04 71         [ 4] 3607         CALL     DOLIT
      0013D2 13 87                 3608         .word      INTER
      0013D4 CD 06 C2         [ 4] 3609         CALL     TEVAL
      0013D7 CD 04 EA         [ 4] 3610         CALL     AT
      0013DA CD 08 61         [ 4] 3611         CALL     EQUAL
      0013DD CD 04 9A         [ 4] 3612         CALL     QBRAN
      0013E0 13 E9                 3613         .word      DOTO1
      0013E2 CD 0F 18         [ 4] 3614         CALL     DOTQP
      0013E5 03                    3615         .byte      3
      0013E6 20 6F 6B              3616         .ascii     " ok"
      0013E9 CC 0E D9         [ 2] 3617 DOTO1:  JP     CR
                                   3618 
                                   3619 ;       ?STACK  ( -- )
                                   3620 ;       Abort if stack underflows.
      0013EC 13 CB                 3621         .word      LINK
                           0013EE  3622 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      0013EE 06                    3623         .byte      6
      0013EF 3F 53 54 41 43 4B     3624         .ascii     "?STACK"
      0013F5                       3625 QSTAC: 
      0013F5 CD 0B 8C         [ 4] 3626         CALL     DEPTH
      0013F8 CD 05 CA         [ 4] 3627         CALL     ZLESS   ;check only for underflow
      0013FB CD 13 55         [ 4] 3628         CALL     ABORQ
      0013FE 0B                    3629         .byte      11
      0013FF 20 75 6E 64 65 72 66  3630         .ascii     " underflow "
             6C 6F 77 20
      00140A 81               [ 4] 3631         RET
                                   3632 
                                   3633 ;       EVAL    ( -- )
                                   3634 ;       Interpret  input stream.
      00140B 13 EE                 3635         .word      LINK
                           00140D  3636 LINK = . 
      00140D 04                    3637         .byte      4
      00140E 45 56 41 4C           3638         .ascii     "EVAL"
      001412                       3639 EVAL:
      001412 CD 11 4C         [ 4] 3640 EVAL1:  CALL     TOKEN
      001415 CD 05 91         [ 4] 3641         CALL     DUPP
      001418 CD 05 08         [ 4] 3642         CALL     CAT     ;?input stream empty
      00141B CD 04 9A         [ 4] 3643         CALL     QBRAN
      00141E 14 2E                 3644         .word    EVAL2
      001420 CD 06 C2         [ 4] 3645         CALL     TEVAL
      001423 CD 0C 6E         [ 4] 3646         CALL     ATEXE
      001426 CD 13 F5         [ 4] 3647         CALL     QSTAC   ;evaluate input, check stack
      001429 CD 04 B6         [ 4] 3648         CALL     BRAN
      00142C 14 12                 3649         .word    EVAL1
      00142E CD 05 87         [ 4] 3650 EVAL2:  CALL     DROP
      001431 CC 13 CF         [ 2] 3651         JP       DOTOK
                                   3652 
                                   3653 ;       PRESET  ( -- )
                                   3654 ;       Reset data stack pointer and
                                   3655 ;       terminal input buffer.
      001434 14 0D                 3656         .word      LINK
                           001436  3657 LINK = . 
      001436 06                    3658         .byte      6
      001437 50 52 45 53 45 54     3659         .ascii     "PRESET"
      00143D                       3660 PRESE:
      00143D CD 04 71         [ 4] 3661         CALL     DOLIT
      001440 16 80                 3662         .word      SPP
      001442 CD 05 7E         [ 4] 3663         CALL     SPSTO
      001445 CD 04 71         [ 4] 3664         CALL     DOLIT
      001448 17 00                 3665         .word      TIBB
      00144A CD 06 8F         [ 4] 3666         CALL     NTIB
      00144D CD 0A B3         [ 4] 3667         CALL     CELLP
      001450 CC 04 D3         [ 2] 3668         JP     STORE
                                   3669 
                                   3670 ;       QUIT    ( -- )
                                   3671 ;       Reset return stack pointer
                                   3672 ;       and start text interpreter.
      001453 14 36                 3673         .word      LINK
                           001455  3674 LINK = . 
      001455 04                    3675         .byte      4
      001456 51 55 49 54           3676         .ascii     "QUIT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      00145A                       3677 QUIT:
      00145A CD 04 71         [ 4] 3678         CALL     DOLIT
      00145D 17 FF                 3679         .word      RPP
      00145F CD 05 25         [ 4] 3680         CALL     RPSTO   ;reset return stack pointer
      001462 CD 13 BE         [ 4] 3681 QUIT1:  CALL     LBRAC   ;start interpretation
      001465 CD 13 21         [ 4] 3682 QUIT2:  CALL     QUERY   ;get input
      001468 CD 14 12         [ 4] 3683         CALL     EVAL
      00146B 20 F8            [ 2] 3684         JRA     QUIT2   ;continue till error
                                   3685 
                                   3686 ;; The compiler
                                   3687 
                                   3688 ;       '       ( -- ca )
                                   3689 ;       Search vocabularies for
                                   3690 ;       next word in input stream.
      00146D 14 55                 3691         .word      LINK
                           00146F  3692 LINK = . 
      00146F 01                    3693         .byte      1
      001470 27                    3694         .ascii     "'"
      001471                       3695 TICK:
      001471 CD 11 4C         [ 4] 3696         CALL     TOKEN
      001474 CD 12 49         [ 4] 3697         CALL     NAMEQ   ;?defined
      001477 CD 04 9A         [ 4] 3698         CALL     QBRAN
      00147A 13 5D                 3699         .word      ABOR1
      00147C 81               [ 4] 3700         RET     ;yes, push code address
                                   3701 
                                   3702 ;       ALLOT   ( n -- )
                                   3703 ;       Allocate n bytes to RAM 
      00147D 14 6F                 3704         .word      LINK
                           00147F  3705         LINK = . 
      00147F 05                    3706         .byte      5
      001480 41 4C 4C 4F 54        3707         .ascii     "ALLOT"
      001485                       3708 ALLOT:
      001485 CD 06 F2         [ 4] 3709         CALL     VPP
                                   3710 ; must update APP_VP each time VP is modidied
      001488 CD 0B BA         [ 4] 3711         call PSTOR 
      00148B CC 1B CE         [ 2] 3712         jp UPDATVP 
                                   3713 
                                   3714 ;       ,       ( w -- )
                                   3715 ;         Compile an integer into
                                   3716 ;         variable space.
      00148E 14 7F                 3717         .word      LINK
                           001490  3718 LINK = . 
      001490 01                    3719         .byte      1
      001491 2C                    3720         .ascii     ","
      001492                       3721 COMMA:
      001492 CD 0C 38         [ 4] 3722         CALL     HERE
      001495 CD 05 91         [ 4] 3723         CALL     DUPP
      001498 CD 0A B3         [ 4] 3724         CALL     CELLP   ;cell boundary
      00149B CD 06 F2         [ 4] 3725         CALL     VPP
      00149E CD 04 D3         [ 4] 3726         CALL     STORE
      0014A1 CC 04 D3         [ 2] 3727         JP     STORE
                                   3728 
                                   3729 ;       C,      ( c -- )
                                   3730 ;       Compile a byte into
                                   3731 ;       variables space.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      0014A4 14 90                 3732        .word      LINK
                           0014A6  3733 LINK = . 
      0014A6 02                    3734         .byte      2
      0014A7 43 2C                 3735         .ascii     "C,"
      0014A9                       3736 CCOMMA:
      0014A9 CD 0C 38         [ 4] 3737         CALL     HERE
      0014AC CD 05 91         [ 4] 3738         CALL     DUPP
      0014AF CD 0A DE         [ 4] 3739         CALL     ONEP
      0014B2 CD 06 F2         [ 4] 3740         CALL     VPP
      0014B5 CD 04 D3         [ 4] 3741         CALL     STORE
      0014B8 CC 04 F7         [ 2] 3742         JP     CSTOR
                                   3743 
                                   3744 ;       [COMPILE]       ( -- ; <string> )
                                   3745 ;       Compile next immediate
                                   3746 ;       word into code dictionary.
      0014BB 14 A6                 3747         .word      LINK
                           0014BD  3748 LINK = . 
      0014BD 89                    3749 	.byte      IMEDD+9
      0014BE 5B 43 4F 4D 50 49 4C  3750         .ascii     "[COMPILE]"
             45 5D
      0014C7                       3751 BCOMP:
      0014C7 CD 14 71         [ 4] 3752         CALL     TICK
      0014CA CC 17 9D         [ 2] 3753         JP     JSRC
                                   3754 
                                   3755 ;       COMPILE ( -- )
                                   3756 ;       Compile next jsr in
                                   3757 ;       colon list to code dictionary.
      0014CD 14 BD                 3758         .word      LINK
                           0014CF  3759 LINK = . 
      0014CF 47                    3760 	.byte      COMPO+7
      0014D0 43 4F 4D 50 49 4C 45  3761         .ascii     "COMPILE"
      0014D7                       3762 COMPI:
      0014D7 CD 05 3B         [ 4] 3763         CALL     RFROM
      0014DA CD 05 91         [ 4] 3764         CALL     DUPP
      0014DD CD 04 EA         [ 4] 3765         CALL     AT
      0014E0 CD 17 9D         [ 4] 3766         CALL     JSRC    ;compile subroutine
      0014E3 CD 0A B3         [ 4] 3767         CALL     CELLP
      0014E6 90 93            [ 1] 3768         ldw y,x 
      0014E8 90 FE            [ 2] 3769         ldw y,(y)
      0014EA 1C 00 02         [ 2] 3770         addw x,#CELLL 
      0014ED 90 FC            [ 2] 3771         jp (y)
                                   3772 
                                   3773 ;       LITERAL ( w -- )
                                   3774 ;       Compile tos to dictionary
                                   3775 ;       as an integer literal.
      0014EF 14 CF                 3776         .word      LINK
                           0014F1  3777 LINK = . 
      0014F1 87                    3778 	.byte      IMEDD+7
      0014F2 4C 49 54 45 52 41 4C  3779         .ascii     "LITERAL"
      0014F9                       3780 LITER:
      0014F9 CD 14 D7         [ 4] 3781         CALL     COMPI
      0014FC 04 71                 3782         .word DOLIT 
      0014FE CC 14 92         [ 2] 3783         JP     COMMA
                                   3784 
                                   3785 ;       $,"     ( -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



                                   3786 ;       Compile a literal string
                                   3787 ;       up to next " .
      001501 14 F1                 3788         .word      LINK
                           001503  3789 LINK = . 
      001503 03                    3790         .byte      3
      001504 24 2C 22              3791         .byte     '$',',','"'
      001507                       3792 STRCQ:
      001507 CD 04 71         [ 4] 3793         CALL     DOLIT
      00150A 00 22                 3794         .word     34	; "
      00150C CD 10 8C         [ 4] 3795         CALL     PARSE
      00150F CD 0C 38         [ 4] 3796         CALL     HERE
      001512 CD 0C F8         [ 4] 3797         CALL     PACKS   ;string to code dictionary
      001515 CD 0C 21         [ 4] 3798         CALL     COUNT
      001518 CD 07 C0         [ 4] 3799         CALL     PLUS    ;calculate aligned end of string
      00151B CD 06 F2         [ 4] 3800         CALL     VPP
      00151E CC 04 D3         [ 2] 3801         JP     STORE
                                   3802 
                                   3803 ;; Structures
                                   3804 
                                   3805 ;       FOR     ( -- a )
                                   3806 ;       Start a FOR-NEXT loop
                                   3807 ;       structure in a colon definition.
      001521 15 03                 3808         .word      LINK
                           001523  3809 LINK = . 
      001523 83                    3810 	.byte      IMEDD+3
      001524 46 4F 52              3811         .ascii     "FOR"
      001527                       3812 FOR:
      001527 CD 14 D7         [ 4] 3813         CALL     COMPI
      00152A 05 5A                 3814         .word TOR 
      00152C CC 0C 38         [ 2] 3815         JP     HERE
                                   3816 
                                   3817 ;       NEXT    ( a -- )
                                   3818 ;       Terminate a FOR-NEXT loop.
      00152F 15 23                 3819         .word      LINK
                           001531  3820 LINK = . 
      001531 84                    3821 	.byte      IMEDD+4
      001532 4E 45 58 54           3822         .ascii     "NEXT"
      001536                       3823 NEXT:
      001536 CD 14 D7         [ 4] 3824         CALL     COMPI
      001539 04 85                 3825         .word DONXT 
      00153B CD 07 3E         [ 4] 3826         call ADRADJ
      00153E CC 14 92         [ 2] 3827         JP     COMMA
                                   3828 
                                   3829 ;       I ( -- n )
                                   3830 ;       stack FOR-NEXT COUNTER 
      001541 15 31                 3831         .word LINK 
                           001543  3832         LINK=.
      001543 01                    3833         .byte 1 
      001544 49                    3834         .ascii "I"
      001545                       3835 IFETCH: 
      001545 1D 00 02         [ 2] 3836         subw x,#CELLL 
      001548 16 03            [ 2] 3837         ldw y,(3,sp)
      00154A FF               [ 2] 3838         ldw (x),y 
      00154B 81               [ 4] 3839         ret 
                                   3840 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                   3841 ;       BEGIN   ( -- a )
                                   3842 ;       Start an infinite or
                                   3843 ;       indefinite loop structure.
      00154C 15 43                 3844         .word      LINK
                           00154E  3845 LINK = . 
      00154E 85                    3846 	.byte      IMEDD+5
      00154F 42 45 47 49 4E        3847         .ascii     "BEGIN"
      001554                       3848 BEGIN:
      001554 CC 0C 38         [ 2] 3849         JP     HERE
                                   3850 
                                   3851 ;       UNTIL   ( a -- )
                                   3852 ;       Terminate a BEGIN-UNTIL
                                   3853 ;       indefinite loop structure.
      001557 15 4E                 3854         .word      LINK
                           001559  3855 LINK = . 
      001559 85                    3856 	.byte      IMEDD+5
      00155A 55 4E 54 49 4C        3857         .ascii     "UNTIL"
      00155F                       3858 UNTIL:
      00155F CD 14 D7         [ 4] 3859         CALL     COMPI
      001562 04 9A                 3860         .word    QBRAN 
      001564 CD 07 3E         [ 4] 3861         call ADRADJ
      001567 CC 14 92         [ 2] 3862         JP     COMMA
                                   3863 
                                   3864 ;       AGAIN   ( a -- )
                                   3865 ;       Terminate a BEGIN-AGAIN
                                   3866 ;       infinite loop structure.
      00156A 15 59                 3867         .word      LINK
                           00156C  3868 LINK = . 
      00156C 85                    3869 	.byte      IMEDD+5
      00156D 41 47 41 49 4E        3870         .ascii     "AGAIN"
      001572                       3871 AGAIN:
      001572 CD 14 D7         [ 4] 3872         CALL     COMPI
      001575 04 B6                 3873         .word BRAN
      001577 CD 07 3E         [ 4] 3874         call ADRADJ 
      00157A CC 14 92         [ 2] 3875         JP     COMMA
                                   3876 
                                   3877 ;       IF      ( -- A )
                                   3878 ;       Begin a conditional branch.
      00157D 15 6C                 3879         .word      LINK
                           00157F  3880 LINK = . 
      00157F 82                    3881 	.byte      IMEDD+2
      001580 49 46                 3882         .ascii     "IF"
      001582                       3883 IFF:
      001582 CD 14 D7         [ 4] 3884         CALL     COMPI
      001585 04 9A                 3885         .word QBRAN
      001587 CD 0C 38         [ 4] 3886         CALL     HERE
      00158A CD 0B 4A         [ 4] 3887         CALL     ZERO
      00158D CC 14 92         [ 2] 3888         JP     COMMA
                                   3889 
                                   3890 ;       THEN        ( A -- )
                                   3891 ;       Terminate a conditional branch structure.
      001590 15 7F                 3892         .word      LINK
                           001592  3893 LINK = . 
      001592 84                    3894 	.byte      IMEDD+4
      001593 54 48 45 4E           3895         .ascii     "THEN"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      001597                       3896 THENN:
      001597 CD 0C 38         [ 4] 3897         CALL     HERE
      00159A CD 07 3E         [ 4] 3898         call ADRADJ 
      00159D CD 05 A1         [ 4] 3899         CALL     SWAPP
      0015A0 CC 04 D3         [ 2] 3900         JP     STORE
                                   3901 
                                   3902 ;       ELSE        ( A -- A )
                                   3903 ;       Start the false clause in an IF-ELSE-THEN structure.
      0015A3 15 92                 3904         .word      LINK
                           0015A5  3905 LINK = . 
      0015A5 84                    3906 	.byte      IMEDD+4
      0015A6 45 4C 53 45           3907         .ascii     "ELSE"
      0015AA                       3908 ELSEE:
      0015AA CD 14 D7         [ 4] 3909         CALL     COMPI
      0015AD 04 B6                 3910         .word BRAN
      0015AF CD 0C 38         [ 4] 3911         CALL     HERE
      0015B2 CD 0B 4A         [ 4] 3912         CALL     ZERO
      0015B5 CD 14 92         [ 4] 3913         CALL     COMMA
      0015B8 CD 05 A1         [ 4] 3914         CALL     SWAPP
      0015BB CD 0C 38         [ 4] 3915         CALL     HERE
      0015BE CD 07 3E         [ 4] 3916         call ADRADJ 
      0015C1 CD 05 A1         [ 4] 3917         CALL     SWAPP
      0015C4 CC 04 D3         [ 2] 3918         JP     STORE
                                   3919 
                                   3920 ;       AHEAD       ( -- A )
                                   3921 ;       Compile a forward branch instruction.
      0015C7 15 A5                 3922         .word      LINK
                           0015C9  3923 LINK = . 
      0015C9 85                    3924 	.byte      IMEDD+5
      0015CA 41 48 45 41 44        3925         .ascii     "AHEAD"
      0015CF                       3926 AHEAD:
      0015CF CD 14 D7         [ 4] 3927         CALL     COMPI
      0015D2 04 B6                 3928         .word BRAN
      0015D4 CD 0C 38         [ 4] 3929         CALL     HERE
      0015D7 CD 0B 4A         [ 4] 3930         CALL     ZERO
      0015DA CC 14 92         [ 2] 3931         JP     COMMA
                                   3932 
                                   3933 ;       WHILE       ( a -- A a )
                                   3934 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      0015DD 15 C9                 3935         .word      LINK
                           0015DF  3936 LINK = . 
      0015DF 85                    3937 	.byte      IMEDD+5
      0015E0 57 48 49 4C 45        3938         .ascii     "WHILE"
      0015E5                       3939 WHILE:
      0015E5 CD 14 D7         [ 4] 3940         CALL     COMPI
      0015E8 04 9A                 3941         .word QBRAN
      0015EA CD 0C 38         [ 4] 3942         CALL     HERE
      0015ED CD 0B 4A         [ 4] 3943         CALL     ZERO
      0015F0 CD 14 92         [ 4] 3944         CALL     COMMA
      0015F3 CC 05 A1         [ 2] 3945         JP     SWAPP
                                   3946 
                                   3947 ;       REPEAT      ( A a -- )
                                   3948 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      0015F6 15 DF                 3949         .word      LINK
                           0015F8  3950 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      0015F8 86                    3951         .byte      IMEDD+6
      0015F9 52 45 50 45 41 54     3952         .ascii     "REPEAT"
      0015FF                       3953 REPEA:
      0015FF CD 14 D7         [ 4] 3954         CALL     COMPI
      001602 04 B6                 3955         .word BRAN
      001604 CD 07 3E         [ 4] 3956         call ADRADJ 
      001607 CD 14 92         [ 4] 3957         CALL     COMMA
      00160A CD 0C 38         [ 4] 3958         CALL     HERE
      00160D CD 07 3E         [ 4] 3959         call ADRADJ 
      001610 CD 05 A1         [ 4] 3960         CALL     SWAPP
      001613 CC 04 D3         [ 2] 3961         JP     STORE
                                   3962 
                                   3963 ;       AFT         ( a -- a A )
                                   3964 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      001616 15 F8                 3965         .word      LINK
                           001618  3966 LINK = . 
      001618 83                    3967 	.byte      IMEDD+3
      001619 41 46 54              3968         .ascii     "AFT"
      00161C                       3969 AFT:
      00161C CD 05 87         [ 4] 3970         CALL     DROP
      00161F CD 15 CF         [ 4] 3971         CALL     AHEAD
      001622 CD 0C 38         [ 4] 3972         CALL     HERE
      001625 CC 05 A1         [ 2] 3973         JP     SWAPP
                                   3974 
                                   3975 ;       ABORT"      ( -- ; <string> )
                                   3976 ;       Conditional abort with an error message.
      001628 16 18                 3977         .word      LINK
                           00162A  3978 LINK = . 
      00162A 86                    3979 	.byte      IMEDD+6
      00162B 41 42 4F 52 54        3980         .ascii     "ABORT"
      001630 22                    3981         .byte      '"'
      001631                       3982 ABRTQ:
      001631 CD 14 D7         [ 4] 3983         CALL     COMPI
      001634 13 55                 3984         .word ABORQ
      001636 CC 15 07         [ 2] 3985         JP     STRCQ
                                   3986 
                                   3987 ;       $"     ( -- ; <string> )
                                   3988 ;       Compile an inline string literal.
      001639 16 2A                 3989         .word      LINK
                           00163B  3990 LINK = . 
      00163B 82                    3991 	.byte      IMEDD+2
      00163C 24 22                 3992         .byte     '$','"'
      00163E                       3993 STRQ:
      00163E CD 14 D7         [ 4] 3994         CALL     COMPI
      001641 0F 0E                 3995         .word STRQP 
      001643 CC 15 07         [ 2] 3996         JP     STRCQ
                                   3997 
                                   3998 ;       ."          ( -- ; <string> )
                                   3999 ;       Compile an inline string literal to be typed out at run time.
      001646 16 3B                 4000         .word      LINK
                           001648  4001 LINK = . 
      001648 82                    4002 	.byte      IMEDD+2
      001649 2E 22                 4003         .byte     '.','"'
      00164B                       4004 DOTQ:
      00164B CD 14 D7         [ 4] 4005         CALL     COMPI
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      00164E 0F 18                 4006         .word DOTQP 
      001650 CC 15 07         [ 2] 4007         JP     STRCQ
                                   4008 
                                   4009 ;; Name compiler
                                   4010 
                                   4011 ;       ?UNIQUE ( a -- a )
                                   4012 ;       Display a warning message
                                   4013 ;       if word already exists.
      001653 16 48                 4014         .word      LINK
                           001655  4015 LINK = . 
      001655 07                    4016         .byte      7
      001656 3F 55 4E 49 51 55 45  4017         .ascii     "?UNIQUE"
      00165D                       4018 UNIQU:
      00165D CD 05 91         [ 4] 4019         CALL     DUPP
      001660 CD 12 49         [ 4] 4020         CALL     NAMEQ   ;?name exists
      001663 CD 04 9A         [ 4] 4021         CALL     QBRAN
      001666 16 7C                 4022         .word      UNIQ1
      001668 CD 0F 18         [ 4] 4023         CALL     DOTQP   ;redef are OK
      00166B 07                    4024         .byte       7
      00166C 20 72 65 44 65 66 20  4025         .ascii     " reDef "       
      001673 CD 05 BB         [ 4] 4026         CALL     OVER
      001676 CD 0C 21         [ 4] 4027         CALL     COUNT
      001679 CD 0E BB         [ 4] 4028         CALL     TYPES   ;just in case
      00167C CC 05 87         [ 2] 4029 UNIQ1:  JP     DROP
                                   4030 
                                   4031 ;       $,n     ( na -- )
                                   4032 ;       Build a new dictionary name
                                   4033 ;       using string at na.
                                   4034 ; compile dans l'espace des variables 
      00167F 16 55                 4035         .word      LINK
                           001681  4036 LINK = . 
      001681 03                    4037         .byte      3
      001682 24 2C 6E              4038         .ascii     "$,n"
      001685                       4039 SNAME:
      001685 CD 05 91         [ 4] 4040         CALL     DUPP
      001688 CD 05 08         [ 4] 4041         CALL     CAT     ;?null input
      00168B CD 04 9A         [ 4] 4042         CALL     QBRAN
      00168E 16 BB                 4043         .word      PNAM1
      001690 CD 16 5D         [ 4] 4044         CALL     UNIQU   ;?redefinition
      001693 CD 05 91         [ 4] 4045         CALL     DUPP
      001696 CD 0C 21         [ 4] 4046         CALL     COUNT
      001699 CD 07 C0         [ 4] 4047         CALL     PLUS
      00169C CD 06 F2         [ 4] 4048         CALL     VPP
      00169F CD 04 D3         [ 4] 4049         CALL     STORE
      0016A2 CD 05 91         [ 4] 4050         CALL     DUPP
      0016A5 CD 07 10         [ 4] 4051         CALL     LAST
      0016A8 CD 04 D3         [ 4] 4052         CALL     STORE   ;save na for vocabulary link
      0016AB CD 0A C2         [ 4] 4053         CALL     CELLM   ;link address
      0016AE CD 06 E4         [ 4] 4054         CALL     CNTXT
      0016B1 CD 04 EA         [ 4] 4055         CALL     AT
      0016B4 CD 05 A1         [ 4] 4056         CALL     SWAPP
      0016B7 CD 04 D3         [ 4] 4057         CALL     STORE
      0016BA 81               [ 4] 4058         RET     ;save code pointer
      0016BB CD 0F 0E         [ 4] 4059 PNAM1:  CALL     STRQP
      0016BE 05                    4060         .byte      5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      0016BF 20 6E 61 6D 65        4061         .ascii     " name" ;null input
      0016C4 CC 13 5D         [ 2] 4062         JP     ABOR1
                                   4063 
                                   4064 ;; FORTH compiler
                                   4065 
                                   4066 ;       $COMPILE        ( a -- )
                                   4067 ;       Compile next word to
                                   4068 ;       dictionary as a token or literal.
      0016C7 16 81                 4069         .word      LINK
                           0016C9  4070 LINK = . 
      0016C9 08                    4071         .byte      8
      0016CA 24 43 4F 4D 50 49 4C  4072         .ascii     "$COMPILE"
             45
      0016D2                       4073 SCOMP:
      0016D2 CD 12 49         [ 4] 4074         CALL     NAMEQ
      0016D5 CD 07 4E         [ 4] 4075         CALL     QDUP    ;?defined
      0016D8 CD 04 9A         [ 4] 4076         CALL     QBRAN
      0016DB 16 F3                 4077         .word      SCOM2
      0016DD CD 04 EA         [ 4] 4078         CALL     AT
      0016E0 CD 04 71         [ 4] 4079         CALL     DOLIT
      0016E3 80 00                 4080         .word     0x8000	;  IMEDD*256
      0016E5 CD 05 F0         [ 4] 4081         CALL     ANDD    ;?immediate
      0016E8 CD 04 9A         [ 4] 4082         CALL     QBRAN
      0016EB 16 F0                 4083         .word      SCOM1
      0016ED CC 04 C6         [ 2] 4084         JP     EXECU
      0016F0 CC 17 9D         [ 2] 4085 SCOM1:  JP     JSRC
      0016F3 CD 24 51         [ 4] 4086 SCOM2:  CALL     NUMBQ   ;try to convert to number
      0016F6 CD 07 4E         [ 4] 4087         CALL    QDUP  
      0016F9 CD 04 9A         [ 4] 4088         CALL     QBRAN
      0016FC 13 5D                 4089         .word      ABOR1
      0016FE                       4090         _DOLIT  -1
      0016FE CD 04 71         [ 4]    1     CALL DOLIT 
      001701 FF FF                    2     .word -1 
      001703 CD 08 61         [ 4] 4091         CALL    EQUAL
      001706                       4092         _QBRAN DLITER  
      001706 CD 04 9A         [ 4]    1     CALL QBRAN
      001709 28 9E                    2     .word DLITER
      00170B CC 14 F9         [ 2] 4093         JP     LITER
                                   4094 
                                   4095 ;       OVERT   ( -- )
                                   4096 ;       Link a new word into vocabulary.
      00170E 16 C9                 4097         .word      LINK
                           001710  4098 LINK = . 
      001710 05                    4099         .byte      5
      001711 4F 56 45 52 54        4100         .ascii     "OVERT"
      001716                       4101 OVERT:
      001716 CD 07 10         [ 4] 4102         CALL     LAST
      001719 CD 04 EA         [ 4] 4103         CALL     AT
      00171C CD 06 E4         [ 4] 4104         CALL     CNTXT
      00171F CC 04 D3         [ 2] 4105         JP     STORE
                                   4106 
                                   4107 ;       ;       ( -- )
                                   4108 ;       Terminate a colon definition.
      001722 17 10                 4109         .word      LINK
                           001724  4110 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      001724 C1                    4111 	.byte      IMEDD+COMPO+1
      001725 3B                    4112         .ascii     ";"
      001726                       4113 SEMIS:
                           000001  4114 .if OPTIMIZE ; more compact and faster
      001726 CD 04 71         [ 4] 4115         call DOLIT 
      001729 00 81                 4116         .word 0x81   ; opcode for RET 
      00172B CD 14 A9         [ 4] 4117         call CCOMMA 
                           000000  4118 .else
                                   4119         CALL     COMPI
                                   4120         .word EXIT 
                                   4121 .endif 
      00172E CD 13 BE         [ 4] 4122         CALL     LBRAC
      001731 CD 17 16         [ 4] 4123         call OVERT 
      001734 CD 21 26         [ 4] 4124         CALL FMOVE
      001737 CD 07 4E         [ 4] 4125         call QDUP 
      00173A CD 04 9A         [ 4] 4126         call QBRAN 
      00173D 18 6D                 4127         .word SET_RAMLAST 
      00173F CD 21 BA         [ 4] 4128         CALL UPDATPTR
      001742 81               [ 4] 4129         RET 
                                   4130 
                                   4131 
                                   4132 ;       Terminate an ISR definition 
                                   4133 ;       retourn ca of ISR as double
                                   4134 ;       I; ( -- ud )
      001743 17 24                 4135         .word LINK 
                           001745  4136         LINK=.
      001745 C2                    4137         .byte 2+IMEDD+COMPO 
      001746 49 3B                 4138         .ascii "I;" 
      001748                       4139 ISEMI:
      001748 1D 00 02         [ 2] 4140         subw x,#CELLL  
      00174B 90 AE 00 80      [ 2] 4141         ldw y,#IRET_CODE 
      00174F FF               [ 2] 4142         ldw (x),y 
      001750 CD 14 A9         [ 4] 4143         call CCOMMA
      001753 CD 13 BE         [ 4] 4144         call LBRAC 
      001756 CD 21 FF         [ 4] 4145         call IFMOVE
      001759 CD 07 4E         [ 4] 4146         call QDUP 
      00175C CD 04 9A         [ 4] 4147         CALL QBRAN 
      00175F 18 6D                 4148         .word SET_RAMLAST
      001761 CD 07 00         [ 4] 4149         CALL CPP
      001764 CD 04 EA         [ 4] 4150         call AT 
      001767 CD 05 A1         [ 4] 4151         call SWAPP 
      00176A CD 07 00         [ 4] 4152         CALL CPP 
      00176D CD 04 D3         [ 4] 4153         call STORE 
      001770 CD 1B B7         [ 4] 4154         call UPDATCP 
      001773 CD 1B 74         [ 4] 4155         call EEPVP 
      001776 CD 05 87         [ 4] 4156         call DROP 
      001779 CD 04 EA         [ 4] 4157         call AT 
      00177C CD 06 F2         [ 4] 4158         call VPP 
      00177F CD 04 D3         [ 4] 4159         call STORE 
      001782 CC 0B 4A         [ 2] 4160         jp ZERO
      001785 81               [ 4] 4161         ret           
                                   4162         
                                   4163 
                                   4164 ;       ]       ( -- )
                                   4165 ;       Start compiling words in
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                   4166 ;       input stream.
      001786 17 45                 4167         .word      LINK
                           001788  4168 LINK = . 
      001788 01                    4169         .byte      1
      001789 5D                    4170         .ascii     "]"
      00178A                       4171 RBRAC:
      00178A CD 04 71         [ 4] 4172         CALL   DOLIT
      00178D 16 D2                 4173         .word  SCOMP
      00178F CD 06 C2         [ 4] 4174         CALL   TEVAL
      001792 CC 04 D3         [ 2] 4175         JP     STORE
                                   4176 
                                   4177 ;       CALL,    ( ca -- )
                                   4178 ;       Compile a subroutine call.
      001795 17 88                 4179         .word      LINK
                           001797  4180 LINK = . 
      001797 05                    4181         .byte      5
      001798 43 41 4C 4C 2C        4182         .ascii     "CALL,"
      00179D                       4183 JSRC:
      00179D CD 04 71         [ 4] 4184         CALL     DOLIT
      0017A0 00 CD                 4185         .word     CALLL     ;CALL
      0017A2 CD 14 A9         [ 4] 4186         CALL     CCOMMA
      0017A5 CC 14 92         [ 2] 4187         JP     COMMA
                                   4188 
                                   4189 ;       INIT-OFS ( -- )
                                   4190 ;       compute offset to adjust jump address 
                                   4191 ;       set variable OFFSET 
      0017A8 17 97                 4192         .word LINK 
                           0017AA  4193         LINK=.
      0017AA 08                    4194         .byte 8 
      0017AB 49 4E 49 54 2D 4F 46  4195         .ascii "INIT-OFS" 
             53
      0017B3                       4196 INITOFS:
      0017B3 CD 06 B1         [ 4] 4197         call TFLASH 
      0017B6 CD 04 EA         [ 4] 4198         CALL AT 
      0017B9 CD 05 91         [ 4] 4199         CALL DUPP 
      0017BC CD 04 9A         [ 4] 4200         call QBRAN
      0017BF 17 D0                 4201         .word 1$
      0017C1 CD 05 87         [ 4] 4202         call DROP  
      0017C4 CD 07 00         [ 4] 4203         call CPP 
      0017C7 CD 04 EA         [ 4] 4204         call AT 
      0017CA CD 0C 38         [ 4] 4205         call HERE
      0017CD CD 08 39         [ 4] 4206         call SUBB 
      0017D0 CD 07 35         [ 4] 4207 1$:     call OFFSET 
      0017D3 CC 04 D3         [ 2] 4208         jp STORE  
                                   4209 
                                   4210 ;       :       ( -- ; <string> )
                                   4211 ;       Start a new colon definition
                                   4212 ;       using next word as its name.
      0017D6 17 AA                 4213         .word      LINK
                           0017D8  4214 LINK = . 
      0017D8 01                    4215         .byte      1
      0017D9 3A                    4216         .ascii     ":"
      0017DA                       4217 COLON:
      0017DA CD 17 B3         [ 4] 4218         call INITOFS       
      0017DD CD 11 4C         [ 4] 4219         CALL   TOKEN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      0017E0 CD 16 85         [ 4] 4220         CALL   SNAME
      0017E3 CC 17 8A         [ 2] 4221         JP     RBRAC
                                   4222 
                                   4223 ;       I:  ( -- )
                                   4224 ;       Start interrupt service routine definition
                                   4225 ;       those definition have no name.
      0017E6 17 D8                 4226         .word LINK
                           0017E8  4227         LINK=.
      0017E8 02                    4228         .byte 2 
      0017E9 49 3A                 4229         .ascii "I:" 
      0017EB                       4230 ICOLON:
      0017EB CD 17 B3         [ 4] 4231         call INITOFS 
      0017EE CC 17 8A         [ 2] 4232         jp RBRAC  
                                   4233 
                                   4234 ;       IMMEDIATE       ( -- )
                                   4235 ;       Make last compiled word
                                   4236 ;       an immediate word.
      0017F1 17 E8                 4237         .word      LINK
                           0017F3  4238 LINK = . 
      0017F3 09                    4239         .byte      9
      0017F4 49 4D 4D 45 44 49 41  4240         .ascii     "IMMEDIATE"
             54 45
      0017FD                       4241 IMMED:
      0017FD CD 04 71         [ 4] 4242         CALL     DOLIT
      001800 80 00                 4243         .word     0x8000	;  IMEDD*256
      001802 CD 07 10         [ 4] 4244         CALL     LAST
      001805 CD 04 EA         [ 4] 4245         CALL     AT
      001808 CD 04 EA         [ 4] 4246         CALL     AT
      00180B CD 06 04         [ 4] 4247         CALL     ORR
      00180E CD 07 10         [ 4] 4248         CALL     LAST
      001811 CD 04 EA         [ 4] 4249         CALL     AT
      001814 CC 04 D3         [ 2] 4250         JP     STORE
                                   4251 
                                   4252 ;; Defining words
                                   4253 
                                   4254 ;       CREATE  ( -- ; <string> )
                                   4255 ;       Compile a new array
                                   4256 ;       without allocating space.
      001817 17 F3                 4257         .word      LINK
                           001819  4258 LINK = . 
      001819 06                    4259         .byte      6
      00181A 43 52 45 41 54 45     4260         .ascii     "CREATE"
      001820                       4261 CREAT:
      001820 CD 11 4C         [ 4] 4262         CALL     TOKEN
      001823 CD 16 85         [ 4] 4263         CALL     SNAME
      001826 CD 17 16         [ 4] 4264         CALL     OVERT        
      001829 CD 14 D7         [ 4] 4265         CALL     COMPI 
      00182C 06 51                 4266         .word DOVAR 
      00182E 81               [ 4] 4267         RET
                                   4268 
                                   4269 ;       VARIABLE        ( -- ; <string> )
                                   4270 ;       Compile a new variable
                                   4271 ;       initialized to 0.
      00182F 18 19                 4272         .word      LINK
                           001831  4273 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      001831 08                    4274         .byte      8
      001832 56 41 52 49 41 42 4C  4275         .ascii     "VARIABLE"
             45
      00183A                       4276 VARIA:
                                   4277 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      00183A CD 0C 38         [ 4] 4278         CALL HERE
      00183D CD 05 91         [ 4] 4279         CALL DUPP 
      001840 CD 0A B3         [ 4] 4280         CALL CELLP
      001843 CD 06 F2         [ 4] 4281         CALL VPP 
      001846 CD 04 D3         [ 4] 4282         CALL STORE
      001849 CD 18 20         [ 4] 4283         CALL CREAT
      00184C CD 05 91         [ 4] 4284         CALL DUPP
      00184F CD 14 92         [ 4] 4285         CALL COMMA
      001852 CD 0B 4A         [ 4] 4286         CALL ZERO
      001855 CD 05 A1         [ 4] 4287         call SWAPP 
      001858 CD 04 D3         [ 4] 4288         CALL STORE
      00185B CD 21 26         [ 4] 4289         CALL FMOVE ; move definition to FLASH
      00185E CD 07 4E         [ 4] 4290         CALL QDUP 
      001861 CD 04 9A         [ 4] 4291         CALL QBRAN 
      001864 18 6D                 4292         .word SET_RAMLAST   
      001866 CD 1B CE         [ 4] 4293         call UPDATVP  ; don't update if variable kept in RAM.
      001869 CD 21 BA         [ 4] 4294         CALL UPDATPTR
      00186C 81               [ 4] 4295         RET         
      00186D                       4296 SET_RAMLAST: 
      00186D CD 07 10         [ 4] 4297         CALL LAST 
      001870 CD 04 EA         [ 4] 4298         CALL AT 
      001873 CD 07 23         [ 4] 4299         CALL RAMLAST 
      001876 CC 04 D3         [ 2] 4300         jp STORE  
                                   4301 
                                   4302 
                                   4303 ;       CONSTANT  ( n -- ; <string> )
                                   4304 ;       Compile a new constant 
                                   4305 ;       n CONSTANT name 
      001879 18 31                 4306         .word LINK 
                           00187B  4307         LINK=. 
      00187B 08                    4308         .byte 8 
      00187C 43 4F 4E 53 54 41 4E  4309         .ascii "CONSTANT" 
             54
      001884                       4310 CONSTANT:          
      001884 CD 11 4C         [ 4] 4311         CALL TOKEN
      001887 CD 16 85         [ 4] 4312         CALL SNAME 
      00188A CD 17 16         [ 4] 4313         CALL OVERT 
      00188D CD 14 D7         [ 4] 4314         CALL COMPI 
      001890 18 A4                 4315         .word DOCONST
      001892 CD 14 92         [ 4] 4316         CALL COMMA 
      001895 CD 21 26         [ 4] 4317         CALL FMOVE
      001898 CD 07 4E         [ 4] 4318         CALL QDUP 
      00189B CD 04 9A         [ 4] 4319         CALL QBRAN 
      00189E 18 6D                 4320         .word SET_RAMLAST  
      0018A0 CD 21 BA         [ 4] 4321         CALL UPDATPTR  
      0018A3 81               [ 4] 4322 1$:     RET          
                                   4323 
                                   4324 ; CONSTANT runtime semantic 
                                   4325 ; doCONST  ( -- n )
                                   4326 ;        .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                   4327 ;        LINK=.
                                   4328 ;        .byte 7
                                   4329 ;        .ascii "DOCONST"
      0018A4                       4330 DOCONST:
      0018A4 1D 00 02         [ 2] 4331         subw x,#CELLL
      0018A7 90 85            [ 2] 4332         popw y 
      0018A9 90 FE            [ 2] 4333         ldw y,(y) 
      0018AB FF               [ 2] 4334         ldw (x),y 
      0018AC 81               [ 4] 4335         ret 
                                   4336 
                                   4337 ;----------------------------------
                                   4338 ; create double constant 
                                   4339 ; 2CONSTANT ( d -- ; <string> )
                                   4340 ;----------------------------------
      0018AD 18 7B                 4341     .word LINK 
                           0018AF  4342     LINK=.
      0018AF 09                    4343     .byte 9 
      0018B0 32 43 4F 4E 53 54 41  4344     .ascii "2CONSTANT"
             4E 54
      0018B9                       4345 DCONST:
      0018B9 CD 11 4C         [ 4] 4346         CALL TOKEN
      0018BC CD 16 85         [ 4] 4347         CALL SNAME 
      0018BF CD 17 16         [ 4] 4348         CALL OVERT 
      0018C2 CD 14 D7         [ 4] 4349         CALL COMPI 
      0018C5 18 DC                 4350         .word DO_DCONST
      0018C7 CD 14 92         [ 4] 4351         CALL COMMA
      0018CA CD 14 92         [ 4] 4352         CALL COMMA  
      0018CD CD 21 26         [ 4] 4353         CALL FMOVE
      0018D0 CD 07 4E         [ 4] 4354         CALL QDUP 
      0018D3 CD 04 9A         [ 4] 4355         CALL QBRAN 
      0018D6 18 6D                 4356         .word SET_RAMLAST  
      0018D8 CD 21 BA         [ 4] 4357         CALL UPDATPTR  
      0018DB 81               [ 4] 4358 1$:     RET          
                                   4359     
                                   4360 ;----------------------------------
                                   4361 ; runtime for DCONST 
                                   4362 ; stack double constant 
                                   4363 ; DO-DCONST ( -- d )
                                   4364 ;-----------------------------------
                                   4365 ;        .word LINK 
                                   4366 ;        LINK=.
                                   4367 ;        .byte 9 
                                   4368 ;        .ascii "DO-DCONST"
      0018DC                       4369 DO_DCONST:
      0018DC 90 85            [ 2] 4370     popw y 
      0018DE 90 BF 26         [ 2] 4371     ldw YTEMP,y 
      0018E1 1D 00 04         [ 2] 4372     subw x,#2*CELLL 
      0018E4 90 FE            [ 2] 4373     ldw y,(y)
      0018E6 FF               [ 2] 4374     ldw (x),y 
      0018E7 90 BE 26         [ 2] 4375     ldw y,YTEMP 
      0018EA 90 EE 02         [ 2] 4376     ldw y,(2,y)
      0018ED EF 02            [ 2] 4377     ldw (2,x),y 
      0018EF 81               [ 4] 4378     ret 
                                   4379 
                                   4380 ;; Tools
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                   4381 
                                   4382 ;       _TYPE   ( b u -- )
                                   4383 ;       Display a string. Filter
                                   4384 ;       non-printing characters.
      0018F0 18 AF                 4385         .word      LINK
                           0018F2  4386 LINK = . 
      0018F2 05                    4387         .byte      5
      0018F3 5F 54 59 50 45        4388         .ascii     "_TYPE"
      0018F8                       4389 UTYPE:
      0018F8 CD 05 5A         [ 4] 4390         CALL     TOR     ;start count down loop
      0018FB 20 0F            [ 2] 4391         JRA     UTYP2   ;skip first pass
      0018FD CD 05 91         [ 4] 4392 UTYP1:  CALL     DUPP
      001900 CD 05 08         [ 4] 4393         CALL     CAT
      001903 CD 0B 74         [ 4] 4394         CALL     TCHAR
      001906 CD 04 36         [ 4] 4395         CALL     EMIT    ;display only printable
      001909 CD 0A DE         [ 4] 4396         CALL     ONEP    ;increment address
      00190C CD 04 85         [ 4] 4397 UTYP2:  CALL     DONXT
      00190F 18 FD                 4398         .word      UTYP1   ;loop till done
      001911 CC 05 87         [ 2] 4399         JP     DROP
                                   4400 
                                   4401 ;       dm+     ( a u -- a )
                                   4402 ;       Dump u bytes from ,
                                   4403 ;       leaving a+u on  stack.
      001914 18 F2                 4404         .word      LINK
                           001916  4405 LINK = . 
      001916 03                    4406         .byte      3
      001917 64 6D 2B              4407         .ascii     "dm+"
      00191A                       4408 DUMPP:
      00191A CD 05 BB         [ 4] 4409         CALL     OVER
      00191D CD 04 71         [ 4] 4410         CALL     DOLIT
      001920 00 04                 4411         .word      4
      001922 CD 0F 41         [ 4] 4412         CALL     UDOTR   ;display address
      001925 CD 0E 91         [ 4] 4413         CALL     SPACE
      001928 CD 05 5A         [ 4] 4414         CALL     TOR     ;start count down loop
      00192B 20 11            [ 2] 4415         JRA     PDUM2   ;skip first pass
      00192D CD 05 91         [ 4] 4416 PDUM1:  CALL     DUPP
      001930 CD 05 08         [ 4] 4417         CALL     CAT
      001933 CD 04 71         [ 4] 4418         CALL     DOLIT
      001936 00 03                 4419         .word      3
      001938 CD 0F 41         [ 4] 4420         CALL     UDOTR   ;display numeric data
      00193B CD 0A DE         [ 4] 4421         CALL     ONEP    ;increment address
      00193E CD 04 85         [ 4] 4422 PDUM2:  CALL     DONXT
      001941 19 2D                 4423         .word      PDUM1   ;loop till done
      001943 81               [ 4] 4424         RET
                                   4425 
                                   4426 ;       DUMP    ( a u -- )
                                   4427 ;       Dump u bytes from a,
                                   4428 ;       in a formatted manner.
      001944 19 16                 4429         .word      LINK
                           001946  4430 LINK = . 
      001946 04                    4431         .byte      4
      001947 44 55 4D 50           4432         .ascii     "DUMP"
      00194B                       4433 DUMP:
      00194B CD 06 61         [ 4] 4434         CALL     BASE
      00194E CD 04 EA         [ 4] 4435         CALL     AT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      001951 CD 05 5A         [ 4] 4436         CALL     TOR
      001954 CD 0D F0         [ 4] 4437         CALL     HEX     ;save radix, set hex
      001957 CD 04 71         [ 4] 4438         CALL     DOLIT
      00195A 00 10                 4439         .word      16
      00195C CD 0A 04         [ 4] 4440         CALL     SLASH   ;change count to lines
      00195F CD 05 5A         [ 4] 4441         CALL     TOR     ;start count down loop
      001962 CD 0E D9         [ 4] 4442 DUMP1:  CALL     CR
      001965 CD 04 71         [ 4] 4443         CALL     DOLIT
      001968 00 10                 4444         .word      16
      00196A CD 07 AB         [ 4] 4445         CALL     DDUP
      00196D CD 19 1A         [ 4] 4446         CALL     DUMPP   ;display numeric
      001970 CD 07 5F         [ 4] 4447         CALL     ROT
      001973 CD 07 5F         [ 4] 4448         CALL     ROT
      001976 CD 0E 91         [ 4] 4449         CALL     SPACE
      001979 CD 0E 91         [ 4] 4450         CALL     SPACE
      00197C CD 18 F8         [ 4] 4451         CALL     UTYPE   ;display printable characters
      00197F CD 04 85         [ 4] 4452         CALL     DONXT
      001982 19 62                 4453         .word      DUMP1   ;loop till done
      001984 CD 05 87         [ 4] 4454 DUMP3:  CALL     DROP
      001987 CD 05 3B         [ 4] 4455         CALL     RFROM
      00198A CD 06 61         [ 4] 4456         CALL     BASE
      00198D CC 04 D3         [ 2] 4457         JP     STORE   ;restore radix
                                   4458 
                                   4459 ;       .S      ( ... -- ... )
                                   4460 ;        Display  contents of stack.
      001990 19 46                 4461         .word      LINK
                           001992  4462 LINK = . 
      001992 02                    4463         .byte      2
      001993 2E 53                 4464         .ascii     ".S"
      001995                       4465 DOTS:
      001995 CD 0E D9         [ 4] 4466         CALL     CR
      001998 CD 0B 8C         [ 4] 4467         CALL     DEPTH   ;stack depth
      00199B CD 05 5A         [ 4] 4468         CALL     TOR     ;start count down loop
      00199E 20 09            [ 2] 4469         JRA     DOTS2   ;skip first pass
      0019A0 CD 05 4E         [ 4] 4470 DOTS1:  CALL     RAT
      0019A3 CD 0B A3         [ 4] 4471 	CALL     PICK
      0019A6 CD 0F 92         [ 4] 4472         CALL     DOT     ;index stack, display contents
      0019A9 CD 04 85         [ 4] 4473 DOTS2:  CALL     DONXT
      0019AC 19 A0                 4474         .word      DOTS1   ;loop till done
      0019AE CD 0F 18         [ 4] 4475         CALL     DOTQP
      0019B1 05                    4476         .byte      5
      0019B2 20 3C 73 70 20        4477         .ascii     " <sp "
      0019B7 81               [ 4] 4478         RET
                                   4479 
                                   4480 ;       >NAME   ( ca -- na | F )
                                   4481 ;       Convert code address
                                   4482 ;       to a name address.
      0019B8 19 92                 4483         .word      LINK
                           0019BA  4484 LINK = . 
      0019BA 05                    4485         .byte      5
      0019BB 3E 4E 41 4D 45        4486         .ascii     ">NAME"
      0019C0                       4487 TNAME:
      0019C0 CD 06 E4         [ 4] 4488         CALL     CNTXT   ;vocabulary link
      0019C3 CD 04 EA         [ 4] 4489 TNAM2:  CALL     AT
      0019C6 CD 05 91         [ 4] 4490         CALL     DUPP    ;?last word in a vocabulary
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      0019C9 CD 04 9A         [ 4] 4491         CALL     QBRAN
      0019CC 19 E7                 4492         .word      TNAM4
      0019CE CD 07 AB         [ 4] 4493         CALL     DDUP
      0019D1 CD 11 5A         [ 4] 4494         CALL     NAMET
      0019D4 CD 06 19         [ 4] 4495         CALL     XORR    ;compare
      0019D7 CD 04 9A         [ 4] 4496         CALL     QBRAN
      0019DA 19 E1                 4497         .word      TNAM3
      0019DC CD 0A C2         [ 4] 4498         CALL     CELLM   ;continue with next word
      0019DF 20 E2            [ 2] 4499         JRA     TNAM2
      0019E1 CD 05 A1         [ 4] 4500 TNAM3:  CALL     SWAPP
      0019E4 CC 05 87         [ 2] 4501         JP     DROP
      0019E7 CD 07 A0         [ 4] 4502 TNAM4:  CALL     DDROP
      0019EA CC 0B 4A         [ 2] 4503         JP     ZERO
                                   4504 
                                   4505 ;       .ID     ( na -- )
                                   4506 ;        Display  name at address.
      0019ED 19 BA                 4507         .word      LINK
                           0019EF  4508 LINK = . 
      0019EF 03                    4509         .byte      3
      0019F0 2E 49 44              4510         .ascii     ".ID"
      0019F3                       4511 DOTID:
      0019F3 CD 07 4E         [ 4] 4512         CALL     QDUP    ;if zero no name
      0019F6 CD 04 9A         [ 4] 4513         CALL     QBRAN
      0019F9 1A 09                 4514         .word      DOTI1
      0019FB CD 0C 21         [ 4] 4515         CALL     COUNT
      0019FE CD 04 71         [ 4] 4516         CALL     DOLIT
      001A01 00 1F                 4517         .word      0x1F
      001A03 CD 05 F0         [ 4] 4518         CALL     ANDD    ;mask lexicon bits
      001A06 CC 18 F8         [ 2] 4519         JP     UTYPE
      001A09 CD 0F 18         [ 4] 4520 DOTI1:  CALL     DOTQP
      001A0C 09                    4521         .byte      9
      001A0D 20 6E 6F 4E 61 6D 65  4522         .ascii     " noName"
      001A14 81               [ 4] 4523         RET
                                   4524 
                           000000  4525 WANT_SEE=0
                           000000  4526 .if WANT_SEE 
                                   4527 ;       SEE     ( -- ; <string> )
                                   4528 ;       A simple decompiler.
                                   4529 ;       Updated for byte machines.
                                   4530         .word      LINK
                                   4531 LINK = . 
                                   4532         .byte      3
                                   4533         .ascii     "SEE"
                                   4534 SEE:
                                   4535         CALL     TICK    ;starting address
                                   4536         CALL     CR
                                   4537         CALL     ONEM
                                   4538 SEE1:   CALL     ONEP
                                   4539         CALL     DUPP
                                   4540         CALL     AT
                                   4541         CALL     DUPP
                                   4542         CALL     QBRAN
                                   4543         .word    SEE2
                                   4544         CALL     TNAME   ;?is it a name
                                   4545 SEE2:   CALL     QDUP    ;name address or zero
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                   4546         CALL     QBRAN
                                   4547         .word    SEE3
                                   4548         CALL     SPACE
                                   4549         CALL     DOTID   ;display name
                                   4550         CALL     ONEP
                                   4551         JRA      SEE4
                                   4552 SEE3:   CALL     DUPP
                                   4553         CALL     CAT
                                   4554         CALL     UDOT    ;display number
                                   4555 SEE4:   CALL     NUFQ    ;user control
                                   4556         CALL     QBRAN
                                   4557         .word    SEE1
                                   4558         JP     DROP
                                   4559 .endif ; WANT_SEE 
                                   4560 
                                   4561 ;       WORDS   ( -- )
                                   4562 ;       Display names in vocabulary.
      001A15 19 EF                 4563         .word      LINK
                           001A17  4564 LINK = . 
      001A17 05                    4565         .byte      5
      001A18 57 4F 52 44 53        4566         .ascii     "WORDS"
      001A1D                       4567 WORDS:
      001A1D CD 0E D9         [ 4] 4568         CALL     CR
      001A20 CD 06 E4         [ 4] 4569         CALL     CNTXT   ;only in context
      001A23 CD 04 EA         [ 4] 4570 WORS1:  CALL     AT
      001A26 CD 07 4E         [ 4] 4571         CALL     QDUP    ;?at end of list
      001A29 CD 04 9A         [ 4] 4572         CALL     QBRAN
      001A2C 1A 3F                 4573         .word      WORS2
      001A2E CD 05 91         [ 4] 4574         CALL     DUPP
      001A31 CD 0E 91         [ 4] 4575         CALL     SPACE
      001A34 CD 19 F3         [ 4] 4576         CALL     DOTID   ;display a name
      001A37 CD 0A C2         [ 4] 4577         CALL     CELLM
      001A3A CD 04 B6         [ 4] 4578         CALL     BRAN
      001A3D 1A 23                 4579         .word      WORS1
      001A3F 81               [ 4] 4580 WORS2:  RET
                                   4581 
                                   4582         
                                   4583 ;; Hardware reset
                                   4584 
                                   4585 ;       hi      ( -- )
                                   4586 ;       Display sign-on message.
      001A40 1A 17                 4587         .word      LINK
                           001A42  4588 LINK = . 
      001A42 02                    4589         .byte      2
      001A43 68 69                 4590         .ascii     "hi"
      001A45                       4591 HI:
      001A45 CD 0E D9         [ 4] 4592         CALL     CR
      001A48 CD 0F 18         [ 4] 4593         CALL     DOTQP   ;initialize I/O
      001A4B 0F                    4594         .byte      15
      001A4C 73 74 6D 38 65 46 6F  4595         .ascii     "stm8eForth v"
             72 74 68 20 76
      001A58 34                    4596 	.byte      VER+'0'
      001A59 2E                    4597         .byte      '.' 
      001A5A 30                    4598 	.byte      EXT+'0' ;version
      001A5B CD 0F 18         [ 4] 4599         CALL    DOTQP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                           000001  4600 .if NUCLEO          
      001A5E 12                    4601         .byte 18
      001A5F 20 6F 6E 20 4E 55 43  4602         .ascii  " on NUCLEO-8S208RB"
             4C 45 4F 2D 38 53 32
             30 38 52 42
                                   4603 .endif
                           000000  4604 .if DISCOVERY
                                   4605         .byte 19
                                   4606         .ascii  " on STM8S-DISCOVERY"
                                   4607 .endif
                           000000  4608 .if DOORBELL
                                   4609         .byte 16
                                   4610         .ascii " on stm8s105k6b6"
                                   4611 .endif
      001A71 CC 0E D9         [ 2] 4612         JP     CR
                                   4613 
                           000000  4614 WANT_DEBUG=0
                           000000  4615 .if WANT_DEBUG 
                                   4616 ;       DEBUG      ( -- )
                                   4617 ;       Display sign-on message.
                                   4618 ;        .word      LINK
                                   4619 LINK = . 
                                   4620         .byte      5
                                   4621         .ascii     "DEBUG"
                                   4622 DEBUG:
                                   4623 	CALL DOLIT
                                   4624 	.word 0x65
                                   4625 	CALL EMIT
                                   4626 	CALL DOLIT
                                   4627 	.word 0
                                   4628  	CALL ZLESS 
                                   4629 	CALL DOLIT
                                   4630 	.word 0xFFFE
                                   4631 	CALL ZLESS 
                                   4632 	CALL UPLUS 
                                   4633  	CALL DROP 
                                   4634 	CALL DOLIT
                                   4635 	.word 3
                                   4636 	CALL UPLUS 
                                   4637 	CALL UPLUS 
                                   4638  	CALL DROP
                                   4639 	CALL DOLIT
                                   4640 	.word 0x43
                                   4641 	CALL UPLUS 
                                   4642  	CALL DROP
                                   4643 	CALL EMIT
                                   4644 	CALL DOLIT
                                   4645 	.word 0x4F
                                   4646 	CALL DOLIT
                                   4647 	.word 0x6F
                                   4648  	CALL XORR
                                   4649 	CALL DOLIT
                                   4650 	.word 0xF0
                                   4651  	CALL ANDD
                                   4652 	CALL DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                   4653 	.word 0x4F
                                   4654  	CALL ORR
                                   4655 	CALL EMIT
                                   4656 	CALL DOLIT
                                   4657 	.word 8
                                   4658 	CALL DOLIT
                                   4659 	.word 6
                                   4660  	CALL SWAPP
                                   4661 	CALL OVER
                                   4662 	CALL XORR
                                   4663 	CALL DOLIT
                                   4664 	.word 3
                                   4665 	CALL ANDD 
                                   4666 	CALL ANDD
                                   4667 	CALL DOLIT
                                   4668 	.word 0x70
                                   4669 	CALL UPLUS 
                                   4670 	CALL DROP
                                   4671 	CALL EMIT
                                   4672 	CALL DOLIT
                                   4673 	.word 0
                                   4674 	CALL QBRAN
                                   4675 	.word DEBUG1
                                   4676 	CALL DOLIT
                                   4677 	.word 0x3F
                                   4678 DEBUG1:
                                   4679 	CALL DOLIT
                                   4680 	.word 0xFFFF
                                   4681 	CALL QBRAN
                                   4682 	.word DEBUG2
                                   4683 	CALL DOLIT
                                   4684 	.word 0x74
                                   4685 	CALL BRAN
                                   4686 	.word DEBUG3
                                   4687 DEBUG2:
                                   4688 	CALL DOLIT
                                   4689 	.word 0x21
                                   4690 DEBUG3:
                                   4691 	CALL EMIT
                                   4692 	CALL DOLIT
                                   4693 	.word 0x68
                                   4694 	CALL DOLIT
                                   4695 	.word 0x80
                                   4696 	CALL STORE
                                   4697 	CALL DOLIT
                                   4698 	.word 0x80
                                   4699 	CALL AT
                                   4700 	CALL EMIT
                                   4701 	CALL DOLIT
                                   4702 	.word 0x4D
                                   4703 	CALL TOR
                                   4704 	CALL RAT
                                   4705 	CALL RFROM
                                   4706 	CALL ANDD
                                   4707 	CALL EMIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



                                   4708 	CALL DOLIT
                                   4709 	.word 0x61
                                   4710 	CALL DOLIT
                                   4711 	.word 0xA
                                   4712 	CALL TOR
                                   4713 DEBUG4:
                                   4714 	CALL DOLIT
                                   4715 	.word 1
                                   4716 	CALL UPLUS 
                                   4717 	CALL DROP
                                   4718 	CALL DONXT
                                   4719 	.word DEBUG4
                                   4720 	CALL EMIT
                                   4721 	CALL DOLIT
                                   4722 	.word 0x656D
                                   4723 	CALL DOLIT
                                   4724 	.word 0x100
                                   4725 	CALL UMSTA
                                   4726 	CALL SWAPP
                                   4727 	CALL DOLIT
                                   4728 	.word 0x100
                                   4729 	CALL UMSTA
                                   4730 	CALL SWAPP 
                                   4731 	CALL DROP
                                   4732 	CALL EMIT
                                   4733 	CALL EMIT
                                   4734 	CALL DOLIT
                                   4735 	.word 0x2043
                                   4736 	CALL DOLIT
                                   4737 	.word 0
                                   4738 	CALL DOLIT
                                   4739 	.word 0x100
                                   4740 	CALL UMMOD
                                   4741 	CALL EMIT
                                   4742 	CALL EMIT
                                   4743 	;JP ORIG
                                   4744 	RET
                                   4745 .endif ; WANT_DEBUG 
                                   4746 
                                   4747 
                                   4748 ;       'BOOT   ( -- a )
                                   4749 ;       The application startup vector.
      001A74 1A 42                 4750         .word      LINK
                           001A76  4751 LINK = . 
      001A76 05                    4752         .byte      5
      001A77 27 42 4F 4F 54        4753         .ascii     "'BOOT"
      001A7C                       4754 TBOOT:
      001A7C CD 06 51         [ 4] 4755         CALL     DOVAR
      001A7F 40 02                 4756         .word    APP_RUN      ;application to boot
                                   4757 
                                   4758 ;       COLD    ( -- )
                                   4759 ;       The hilevel cold start s=ence.
      001A81 1A 76                 4760         .word      LINK
                           001A83  4761         LINK = . 
      001A83 04                    4762         .byte      4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      001A84 43 4F 4C 44           4763         .ascii     "COLD"
      001A88                       4764 COLD:
                           000000  4765 .if WANT_DEBUG
                                   4766         CALL DEBUG
                                   4767 .endif ; WANT_DEBUG
      001A88 CD 04 71         [ 4] 4768 COLD1:  CALL     DOLIT
      001A8B 00 2B                 4769         .word      UZERO
      001A8D CD 04 71         [ 4] 4770 	CALL     DOLIT
      001A90 00 06                 4771         .word      UPP
      001A92 CD 04 71         [ 4] 4772         CALL     DOLIT
      001A95 00 1C                 4773 	.word      UEND-UZERO
      001A97 CD 0C 85         [ 4] 4774         CALL     CMOVE   ;initialize user area
                           000001  4775 .if WANT_FLOAT 
      001A9A CD 2B 51         [ 4] 4776         CALL    FINIT 
                                   4777 .endif 
                                   4778 ; if APP_RUN==0 initialize with ca de 'hi'  
      001A9D 90 CE 40 02      [ 2] 4779         ldw y,APP_RUN 
      001AA1 26 0B            [ 1] 4780         jrne 0$
      001AA3 1D 00 02         [ 2] 4781         subw x,#CELLL 
      001AA6 90 AE 1A 45      [ 2] 4782         ldw y,#HI  
      001AAA FF               [ 2] 4783         ldw (x),y
      001AAB CD 1B A6         [ 4] 4784         call UPDATRUN 
      001AAE                       4785 0$:        
                                   4786 ; update LAST with APP_LAST 
                                   4787 ; if APP_LAST > LAST else do the opposite
      001AAE 90 CE 40 00      [ 2] 4788         ldw y,APP_LAST 
      001AB2 90 B3 1C         [ 2] 4789         cpw y,ULAST 
      001AB5 22 05            [ 1] 4790         jrugt 1$ 
                                   4791 ; save LAST at APP_LAST  
      001AB7 CD 1B 8E         [ 4] 4792         call UPDATLAST 
      001ABA 20 06            [ 2] 4793         jra 2$
      001ABC                       4794 1$: ; update LAST with APP_LAST 
      001ABC 90 BF 1C         [ 2] 4795         ldw ULAST,y
      001ABF 90 BF 16         [ 2] 4796         ldw UCNTXT,y
      001AC2                       4797 2$:  
                                   4798 ; update APP_CP if < app_space 
      001AC2 90 CE 40 04      [ 2] 4799         ldw y,APP_CP  
      001AC6 90 B3 1A         [ 2] 4800         cpw y,UCP   
      001AC9 24 06            [ 1] 4801         jruge 3$ 
      001ACB CD 1B B7         [ 4] 4802         call UPDATCP
      001ACE 90 BE 1A         [ 2] 4803         ldw y,UCP   
      001AD1                       4804 3$:
      001AD1 90 BF 1A         [ 2] 4805         ldw UCP,y                 
                                   4806 ; update UVP with APP_VP  
                                   4807 ; if APP_VP>UVP else do the opposite 
      001AD4 90 CE 40 06      [ 2] 4808         ldw y,APP_VP 
      001AD8 90 B3 18         [ 2] 4809         cpw y,UVP 
      001ADB 22 05            [ 1] 4810         jrugt 4$
      001ADD CD 1B CE         [ 4] 4811         call UPDATVP 
      001AE0 20 03            [ 2] 4812         jra 6$
      001AE2                       4813 4$: ; update UVP with APP_VP 
      001AE2 90 BF 18         [ 2] 4814         ldw UVP,y 
      001AE5                       4815 6$:      
      001AE5 CD 14 3D         [ 4] 4816         CALL     PRESE   ;initialize data stack and TIB
      001AE8 CD 1A 7C         [ 4] 4817         CALL     TBOOT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001AEB CD 0C 6E         [ 4] 4818         CALL     ATEXE   ;application boot
      001AEE CD 17 16         [ 4] 4819         CALL     OVERT
      001AF1 CC 14 5A         [ 2] 4820         JP     QUIT    ;start interpretation
                                   4821 
                                   4822 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                                   4823         .include "flash.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;  routines to write to FLASH, EEPROM 
                                     23 ;  and OPTION 
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27 ;--------------------------------
                                     28 ; initialize FPTR 
                                     29 ; FP!  ( ud -- )
                                     30 ;---------------------------------
      001AF4 1A 83                   31     .word LINK 
                           001AF6    32     LINK=.
      001AF6 03                      33     .byte 3 
      001AF7 46 50 21                34     .ascii "FP!"
      001AFA                         35 FPSTOR:
      001AFA 90 93            [ 1]   36     ldw y,x
      001AFC 90 FE            [ 2]   37     ldw y,(y)
      001AFE 90 9F            [ 1]   38     ld a,yl 
      001B00 B7 34            [ 1]   39     ld FPTR,a 
      001B02 1C 00 02         [ 2]   40     addw x,#CELLL 
      001B05 90 93            [ 1]   41     ldw y,x 
      001B07 90 FE            [ 2]   42     ldw y,(y)
      001B09 90 BF 35         [ 2]   43     ldw PTR16,y
      001B0C 1C 00 02         [ 2]   44     addw x,#CELLL 
      001B0F 81               [ 4]   45     ret 
                                     46 
                                     47 ;-----------------------------------
                                     48 ; return EEPROM base address 
                                     49 ; as a double 
                                     50 ;  EEPROM  ( -- ud )
                                     51 ;-----------------------------------
      001B10 1A F6                   52     .word LINK 
                           001B12    53 LINK=.
      001B12 06                      54     .byte 6 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001B13 45 45 50 52 4F 4D       55     .ascii "EEPROM"
      001B19                         56 EEPROM: 
      001B19 90 AE 40 00      [ 2]   57     ldw y,#EEPROM_BASE
      001B1D 1D 00 04         [ 2]   58     subw x,#2*CELLL 
      001B20 EF 02            [ 2]   59     ldw (2,x),y 
      001B22 90 5F            [ 1]   60     clrw y 
      001B24 FF               [ 2]   61     ldw (x),y 
      001B25 81               [ 4]   62     ret
                                     63 
                                     64 ;---------------------------------
                                     65 ; return APP_LAST pointer as double
                                     66 ; EEP-LAST ( -- ud )
                                     67 ;---------------------------------
      001B26 1B 12                   68 	.word LINK 
                           001B28    69 	LINK=.
      001B28 08                      70 	.byte 8 
      001B29 45 45 50 2D 4C 41 53    71 	.ascii "EEP-LAST"
             54
      001B31                         72 EEPLAST:
      001B31 1D 00 04         [ 2]   73 	subw x,#2*CELLL 
      001B34 90 AE 40 00      [ 2]   74 	ldw y,#APP_LAST 
      001B38 EF 02            [ 2]   75 	ldw (2,x),y 
      001B3A 90 5F            [ 1]   76 	clrw y 
      001B3C FF               [ 2]   77 	ldw (x),y 
      001B3D 81               [ 4]   78 	ret 
                                     79 
                                     80 ;----------------------------------
                                     81 ; return APP_RUN pointer as double	
                                     82 ; EEP-RUN ( -- ud )
                                     83 ;-----------------------------------
      001B3E 1B 28                   84 	.word LINK 
                           001B40    85 	LINK=.
      001B40 07                      86 	.byte 7
      001B41 45 45 50 2D 52 55 4E    87 	.ascii "EEP-RUN"
      001B48                         88 EEPRUN:
      001B48 1D 00 04         [ 2]   89 	subw x,#2*CELLL 
      001B4B 90 AE 40 02      [ 2]   90 	ldw y,#APP_RUN 
      001B4F EF 02            [ 2]   91 	ldw (2,x),y 
      001B51 90 5F            [ 1]   92 	clrw y 
      001B53 FF               [ 2]   93 	ldw (x),y 
      001B54 81               [ 4]   94 	ret 
                                     95 
                                     96 ;------------------------------------
                                     97 ; return APP_CP pointer as double 
                                     98 ; EEP-CP ( -- ud )
                                     99 ;------------------------------------
      001B55 1B 40                  100 	.word LINK
                           001B57   101 	LINK=.
      001B57 06                     102 	.byte 6 
      001B58 45 45 50 2D 43 50      103 	.ascii "EEP-CP"
      001B5E                        104 EEPCP:
      001B5E 1D 00 04         [ 2]  105 	subw x,#2*CELLL 
      001B61 90 AE 40 04      [ 2]  106 	ldw y,#APP_CP  
      001B65 EF 02            [ 2]  107 	ldw (2,x),y 
      001B67 90 5F            [ 1]  108 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001B69 FF               [ 2]  109 	ldw (x),y 
      001B6A 81               [ 4]  110 	ret 
                                    111 
                                    112 ;------------------------------------
                                    113 ; return APP_VP pointer as double 
                                    114 ; EEP-VP ( -- ud )
                                    115 ;-------------------------------------
      001B6B 1B 57                  116 	.word LINK
                           001B6D   117 	LINK=.
      001B6D 06                     118 	.byte 6
      001B6E 45 45 50 2D 56 50      119 	.ascii "EEP-VP"
      001B74                        120 EEPVP:
      001B74 1D 00 04         [ 2]  121 	subw x,#2*CELLL 
      001B77 90 AE 40 06      [ 2]  122 	ldw y,#APP_VP  
      001B7B EF 02            [ 2]  123 	ldw (2,x),y 
      001B7D 90 5F            [ 1]  124 	clrw y 
      001B7F FF               [ 2]  125 	ldw (x),y 
      001B80 81               [ 4]  126 	ret 
                                    127 
                                    128 ;----------------------------------
                                    129 ; update APP_LAST with LAST 
                                    130 ; UPDAT-LAST ( -- )
                                    131 ;----------------------------------
      001B81 1B 6D                  132 	.word LINK 
                           001B83   133 	LINK=.
      001B83 0A                     134 	.byte 10
      001B84 55 50 44 41 54 2D 4C   135 	.ascii "UPDAT-LAST"
             41 53 54
      001B8E                        136 UPDATLAST:
      001B8E CD 07 10         [ 4]  137 	call LAST
      001B91 CD 04 EA         [ 4]  138 	call AT  
      001B94 CD 1B 31         [ 4]  139 	call EEPLAST
      001B97 CC 1D 84         [ 2]  140 	jp EESTORE 
                                    141 
                                    142 ;---------------------------------
                                    143 ; update APP_RUN 
                                    144 ; UPDAT-RUN ( a -- )
                                    145 ;---------------------------------
      001B9A 1B 83                  146 	.word LINK
                           001B9C   147 	LINK=.
      001B9C 09                     148 	.byte 9
      001B9D 55 50 44 41 54 2D 52   149 	.ascii "UPDAT-RUN"
             55 4E
      001BA6                        150 UPDATRUN:
      001BA6 CD 1B 48         [ 4]  151 	call EEPRUN
      001BA9 CC 1D 84         [ 2]  152 	jp EESTORE 
                                    153 	
                                    154 ;---------------------------------
                                    155 ; update APP_CP with CP 
                                    156 ; UPDAT-CP ( -- )
                                    157 ;---------------------------------
      001BAC 1B 9C                  158 	.word LINK 
                           001BAE   159 	LINK=.
      001BAE 08                     160 	.byte 8 
      001BAF 55 50 44 41 54 2D 43   161 	.ascii "UPDAT-CP"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



             50
      001BB7                        162 UPDATCP:
      001BB7 CD 07 00         [ 4]  163 	call CPP 
      001BBA CD 04 EA         [ 4]  164 	call AT 
      001BBD CD 1B 5E         [ 4]  165 	call EEPCP 
      001BC0 CC 1D 84         [ 2]  166 	jp EESTORE 
                                    167 
                                    168 ;----------------------------------
                                    169 ; update APP_VP with VP 
                                    170 ; UPDAT-VP ( -- )
                                    171 ;----------------------------------
      001BC3 1B AE                  172 	.word LINK
                           001BC5   173 	LINK=.
      001BC5 08                     174 	.byte 8 
      001BC6 55 50 44 41 54 2D 56   175 	.ascii "UPDAT-VP" 
             50
      001BCE                        176 UPDATVP:
      001BCE CD 06 F2         [ 4]  177 	call VPP 
      001BD1 CD 04 EA         [ 4]  178 	call AT
      001BD4 CD 1B 74         [ 4]  179 	call EEPVP 
      001BD7 CC 1D 84         [ 2]  180 	jp EESTORE
                                    181 	
                           000001   182 .if NUCLEO
                                    183 ;----------------------------------
                                    184 ; fetch integer at address over 65535
                                    185 ;  F@   ( ud -- n )
                                    186 ;----------------------------------
      001BDA 1B C5                  187     .word LINK 
                           001BDC   188 LINK=.
      001BDC 02                     189     .byte 2
      001BDD 46 40                  190     .ascii "F@"
      001BDF                        191 FARAT:
      001BDF CD 1A FA         [ 4]  192     call FPSTOR
      001BE2 CC 1C A7         [ 2]  193 	jp EE_READ 
                                    194 
                                    195 
                                    196 ;-------------------------------------
                                    197 ; fetch C at address over 65535 
                                    198 ; FC@ ( ud -- c)
                                    199 ;-------------------------------------
      001BE5 1B DC                  200     .word LINK
                           001BE7   201     LINK=.
      001BE7 03                     202     .byte 3 
      001BE8 46 43 40               203     .ascii "FC@" 
      001BEB                        204 FARCAT:
      001BEB CD 1A FA         [ 4]  205     call FPSTOR
      001BEE CC 1C C9         [ 2]  206 	jp EE_CREAD  
                                    207 .endif ; NUCLEO 
                                    208 
                                    209 ;----------------------------------
                                    210 ; UNLOCK EEPROM/OPT for writing/erasing
                                    211 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    212 ;  UNLKEE   ( -- )
                                    213 ;----------------------------------
      001BF1 1B E7                  214     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                           001BF3   215 LINK=.
      001BF3 06                     216     .byte 6 
      001BF4 55 4E 4C 4B 45 45      217     .ascii "UNLKEE"
      001BFA                        218 UNLKEE:
      001BFA 35 00 50 5B      [ 1]  219 	mov FLASH_CR2,#0 
      001BFE 35 FF 50 5C      [ 1]  220 	mov FLASH_NCR2,#0xFF 
      001C02 35 AE 50 64      [ 1]  221 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001C06 35 56 50 64      [ 1]  222     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001C0A 72 07 50 5F FB   [ 2]  223 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001C0F 81               [ 4]  224 	ret
                                    225 
                                    226 ;----------------------------------
                                    227 ; UNLOCK FLASH for writing/erasing
                                    228 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    229 ; UNLKFL  ( -- )
                                    230 ;----------------------------------
      001C10 1B F3                  231     .word LINK 
                           001C12   232 LINK=. 
      001C12 06                     233     .byte 6 
      001C13 55 4E 4C 4B 46 4C      234     .ascii "UNLKFL"    
      001C19                        235 UNLKFL:
      001C19 35 00 50 5B      [ 1]  236 	mov FLASH_CR2,#0 
      001C1D 35 FF 50 5C      [ 1]  237 	mov FLASH_NCR2,#0xFF 
      001C21 35 56 50 62      [ 1]  238 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001C25 35 AE 50 62      [ 1]  239 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001C29 72 03 50 5F FB   [ 2]  240 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001C2E 81               [ 4]  241 	ret
                                    242 
                                    243 ;-----------------------------
                                    244 ; UNLOCK FLASH or EEPROM 
                                    245 ; according to FPTR address 
                                    246 ;  UNLOCK ( -- )
                                    247 ;-----------------------------
      001C2F 1C 12                  248 	.word LINK 
                           001C31   249 	LINK=.
      001C31 06                     250 	.byte 6
      001C32 55 4E 4C 4F 43 4B      251 	.ascii "UNLOCK"
      001C38                        252 UNLOCK:
                                    253 ; put addr[15:0] in Y, for bounds check.
      001C38 90 BE 35         [ 2]  254 	ldw y,PTR16   ; Y=addr15:0
                                    255 ; check addr[23:16], if <> 0 then it is extened flash memory
      001C3B 3D 34            [ 1]  256 	tnz FPTR 
      001C3D 26 16            [ 1]  257 	jrne 4$
      001C3F 90 A3 80 00      [ 2]  258     cpw y,#FLASH_BASE
      001C43 24 10            [ 1]  259     jruge 4$
      001C45 90 A3 40 00      [ 2]  260 	cpw y,#EEPROM_BASE  
      001C49 25 0D            [ 1]  261     jrult 9$
      001C4B 90 A3 48 7F      [ 2]  262 	cpw y,#OPTION_END 
      001C4F 22 07            [ 1]  263 	jrugt 9$
      001C51 CD 1B FA         [ 4]  264 	call UNLKEE
      001C54 81               [ 4]  265 	ret 
      001C55 CD 1C 19         [ 4]  266 4$: call UNLKFL
      001C58 81               [ 4]  267 9$: ret 
                                    268 
                                    269 ;-------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                                    270 ; LOCK write access to 
                                    271 ; FLASH and EEPROM 
                                    272 ; LOCK ( -- )
                                    273 ;-------------------------
      001C59 1C 31                  274 	.word LINK 
                           001C5B   275 	LINK=.
      001C5B 04                     276 	.byte 4 
      001C5C 4C 4F 43 4B            277 	.ascii "LOCK" 
      001C60                        278 LOCK: 
      001C60 72 13 50 5F      [ 1]  279 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001C64 72 17 50 5F      [ 1]  280 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001C68 81               [ 4]  281 	ret 
                                    282 
                                    283 ;-------------------------
                                    284 ; increment FPTR 
                                    285 ; INC-FPTR ( -- )
                                    286 ;-------------------------
      001C69 1C 5B                  287 	.word LINK 
                           001C6B   288 	LINK=. 
      001C6B 08                     289 	.byte 8 
      001C6C 49 4E 43 2D 46 50 54   290 	.ascii "INC-FPTR" 
             52
      001C74                        291 INC_FPTR:
      001C74 3C 36            [ 1]  292 	inc PTR8 
      001C76 26 0C            [ 1]  293 	jrne 1$
      001C78 90 89            [ 2]  294 	pushw y 
      001C7A 90 BE 34         [ 2]  295 	ldw y,FPTR 
      001C7D 90 5C            [ 1]  296 	incw y 
      001C7F 90 BF 34         [ 2]  297 	ldw FPTR,y
      001C82 90 85            [ 2]  298 	popw y  
      001C84 81               [ 4]  299 1$: ret 
                                    300 
                                    301 ;------------------------------
                                    302 ; add u to FPTR 
                                    303 ; PTR+ ( u -- )
                                    304 ;------------------------------
      001C85 1C 6B                  305 	.word LINK 
                           001C87   306 	LINK=.
      001C87 04                     307 	.byte 4 
      001C88 50 54 52 2B            308 	.ascii "PTR+"
      001C8C                        309 PTRPLUS:
      001C8C 90 93            [ 1]  310 	ldw y,x 
      001C8E 1C 00 02         [ 2]  311 	addw x,#CELLL 
      001C91 72 B9 00 35      [ 2]  312 	addw y,PTR16 
      001C95 90 BF 35         [ 2]  313 	ldw PTR16,y  
      001C98 24 02            [ 1]  314 	jrnc 1$
      001C9A 3C 34            [ 1]  315 	inc FPTR 
      001C9C 81               [ 4]  316 1$: ret 
                                    317 
                                    318 ;---------------------------------
                                    319 ; read word at address pointed FPTR
                                    320 ; increment FPTR 
                                    321 ; EE-READ ( -- w )
                                    322 ;------------------------------------
      001C9D 1C 87                  323 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                           001C9F   324 	LINK=.
      001C9F 07                     325 	.byte 7 
      001CA0 45 45 2D 52 45 41 44   326 	.ascii "EE-READ"
      001CA7                        327 EE_READ:
      001CA7 1D 00 02         [ 2]  328 	subw x,#CELLL 
      001CAA 92 BC 00 34      [ 5]  329 	ldf a,[FPTR]
      001CAE 90 95            [ 1]  330 	ld yh,a 
      001CB0 CD 1C 74         [ 4]  331 	call INC_FPTR 
      001CB3 92 BC 00 34      [ 5]  332 	ldf a,[FPTR]
      001CB7 CD 1C 74         [ 4]  333 	call INC_FPTR 
      001CBA 90 97            [ 1]  334 	ld yl,a 
      001CBC FF               [ 2]  335 	ldw (x),y 
      001CBD 81               [ 4]  336 	ret 
                                    337 
                                    338 ;---------------------------------------
                                    339 ; Read byte at address pointed by FPTR 
                                    340 ; EE-CREAD ( -- c )
                                    341 ;---------------------------------------
      001CBE 1C 9F                  342 	.word LINK 
                           001CC0   343 	LINK=.
      001CC0 08                     344 	.byte 8
      001CC1 45 45 2D 43 52 45 41   345 	.ascii "EE-CREAD" 
             44
      001CC9                        346 EE_CREAD:
      001CC9 1D 00 02         [ 2]  347 	subw x,#CELLL 
      001CCC 92 BC 00 34      [ 5]  348 	ldf a,[FPTR]	
      001CD0 CD 1C 74         [ 4]  349 	call INC_FPTR
      001CD3 90 5F            [ 1]  350 	clrw y 
      001CD5 90 97            [ 1]  351 	ld yl,a 
      001CD7 FF               [ 2]  352 	ldw (x),y 
      001CD8 81               [ 4]  353 	ret 
                                    354 
                                    355 ;----------------------------
                                    356 ; write a byte at address pointed 
                                    357 ; by FPTR and increment FPTR.
                                    358 ; Expect pointer already initialized 
                                    359 ; and memory unlocked 
                                    360 ; WR-BYTE ( c -- )
                                    361 ;----------------------------
      001CD9 1C C0                  362 	.word LINK 
                           001CDB   363 	LINK=. 
      001CDB 07                     364 	.byte 7 
      001CDC 57 52 2D 42 59 54 45   365 	.ascii "WR-BYTE" 
                                    366 
      001CE3                        367 WR_BYTE:
      001CE3 CD 04 63         [ 4]  368 	call FC_XOFF
      001CE6 90 93            [ 1]  369 	ldw y,x 
      001CE8 90 FE            [ 2]  370 	ldw y,(y)
      001CEA 1C 00 02         [ 2]  371 	addw x,#CELLL 
      001CED 90 9F            [ 1]  372 	ld a,yl
      001CEF 92 BD 00 34      [ 4]  373 	ldf [FPTR],a
      001CF3 72 05 50 5F FB   [ 2]  374 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001CF8 CD 04 4D         [ 4]  375 	call FC_XON
      001CFB CC 1C 74         [ 2]  376 	jp INC_FPTR 
                                    377 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                    378 ;---------------------------------------
                                    379 ; write a word at address pointed 
                                    380 ; by FPTR and increment FPTR 
                                    381 ; Expect pointer already initialzed 
                                    382 ; and memory unlocked 
                                    383 ; WR-WORD ( w -- )
                                    384 ;---------------------------------------
      001CFE 1C DB                  385 	.word LINK 
                           001D00   386 	LINK=.
      001D00 07                     387 	.byte 7 
      001D01 57 52 2D 57 4F 52 44   388 	.ascii "WR-WORD" 
      001D08                        389 WR_WORD:
      001D08 CD 04 63         [ 4]  390 	call FC_XOFF
      001D0B 90 93            [ 1]  391 	ldw y,x
      001D0D 90 FE            [ 2]  392 	ldw y,(y)
      001D0F 1C 00 02         [ 2]  393 	addw x,#CELLL 
      001D12 90 9E            [ 1]  394 	ld a,yh 
      001D14 92 BD 00 34      [ 4]  395 	ldf [FPTR],a
      001D18 72 05 50 5F FB   [ 2]  396 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001D1D CD 1C 74         [ 4]  397 	call INC_FPTR 
      001D20 90 9F            [ 1]  398 	ld a,yl 
      001D22 92 BD 00 34      [ 4]  399 	ldf [FPTR],a
      001D26 72 05 50 5F FB   [ 2]  400 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001D2B CD 04 4D         [ 4]  401 	call FC_XON
      001D2E CC 1C 74         [ 2]  402 	jp INC_FPTR 
                                    403 
                                    404 
                                    405 ;---------------------------------------
                                    406 ; write a byte to FLASH or EEPROM/OPTION  
                                    407 ; EEC!  (c ud -- )
                                    408 ;---------------------------------------
      001D31 1D 00                  409     .word LINK 
                           001D33   410 	LINK=.
      001D33 04                     411     .byte 4 
      001D34 45 45 43 21            412     .ascii "EEC!"
                                    413 	; local variables 
                           000001   414 	BTW = 1   ; byte to write offset on stack
                           000002   415     OPT = 2 
                           000002   416 	VSIZE = 2
      001D38                        417 EECSTORE:
      001D38 52 02            [ 2]  418 	sub sp,#VSIZE
      001D3A CD 1A FA         [ 4]  419     call FPSTOR
      001D3D E6 01            [ 1]  420 	ld a,(1,x)
      001D3F 43               [ 1]  421 	cpl a 
      001D40 6B 01            [ 1]  422 	ld (BTW,sp),a ; byte to write 
      001D42 0F 02            [ 1]  423 	clr (OPT,sp)  ; OPTION flag
      001D44 CD 1C 38         [ 4]  424 	call UNLOCK 
                                    425 	; check if option
      001D47 3D 34            [ 1]  426 	tnz FPTR 
      001D49 26 19            [ 1]  427 	jrne 2$
      001D4B 90 BE 35         [ 2]  428 	ldw y,PTR16 
      001D4E 90 A3 48 00      [ 2]  429 	cpw y,#OPTION_BASE
      001D52 2B 10            [ 1]  430 	jrmi 2$
      001D54 90 A3 48 80      [ 2]  431 	cpw y,#OPTION_END+1
      001D58 2A 0A            [ 1]  432 	jrpl 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001D5A 03 02            [ 1]  433 	cpl (OPT,sp)
                                    434 	; OPTION WRITE require this UNLOCK 
      001D5C 72 1E 50 5B      [ 1]  435     bset FLASH_CR2,#FLASH_CR2_OPT
      001D60 72 1F 50 5C      [ 1]  436     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001D64                        437 2$: 
      001D64 CD 1C E3         [ 4]  438 	call WR_BYTE 	
      001D67 0D 02            [ 1]  439 	tnz (OPT,sp)
      001D69 27 0D            [ 1]  440 	jreq 3$ 
      001D6B 7B 01            [ 1]  441     ld a,(BTW,sp)
      001D6D 90 5F            [ 1]  442     clrw y
      001D6F 90 97            [ 1]  443 	ld yl,a 
      001D71 1D 00 02         [ 2]  444 	subw x,#CELLL 
      001D74 FF               [ 2]  445 	ldw (x),y 
      001D75 CD 1C E3         [ 4]  446 	call WR_BYTE
      001D78                        447 3$: 
      001D78 CD 1C 60         [ 4]  448 	call LOCK 
      001D7B 5B 02            [ 2]  449 	addw sp,#VSIZE 
      001D7D 81               [ 4]  450     ret
                                    451 
                                    452 ;------------------------------
                                    453 ; write integer in FLASH|EEPROM
                                    454 ; EE! ( n ud -- )
                                    455 ;------------------------------
      001D7E 1D 33                  456 	.word LINK 
                           001D80   457 	LINK=.
      001D80 03                     458 	.byte 3 
      001D81 45 45 21               459 	.ascii "EE!"
      001D84                        460 EESTORE:
      001D84 CD 1A FA         [ 4]  461 	call FPSTOR 
      001D87 CD 1C 38         [ 4]  462 	call UNLOCK 
      001D8A 90 93            [ 1]  463 	ldw y,x 
      001D8C 90 FE            [ 2]  464 	ldw y,(y)
      001D8E 90 89            [ 2]  465 	pushw y 
      001D90 90 5E            [ 1]  466 	swapw y 
      001D92 FF               [ 2]  467 	ldw (x),y 
      001D93 CD 1C E3         [ 4]  468 	call WR_BYTE 
      001D96 90 85            [ 2]  469 	popw y 
      001D98 1D 00 02         [ 2]  470 	subw x,#CELLL
      001D9B FF               [ 2]  471 	ldw (x),y 
      001D9C CD 1C E3         [ 4]  472 	call WR_BYTE
      001D9F CC 1C 60         [ 2]  473 	jp LOCK 
                                    474 
                                    475 
                                    476 ;----------------------------
                                    477 ; Erase flash memory row 
                                    478 ; stm8s208 as 128 bytes rows
                                    479 ; ROW-ERASE ( ud -- )
                                    480 ;----------------------------
      001DA2 1D 80                  481 	.word LINK 
                           001DA4   482 	LINK=. 
      001DA4 09                     483 	.byte 9 
      001DA5 52 4F 57 2D 45 52 41   484 	.ascii "ROW-ERASE" 
             53 45
      001DAE                        485 row_erase:
      001DAE CD 04 63         [ 4]  486 	call FC_XOFF
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001DB1 CD 1A FA         [ 4]  487 	call FPSTOR
                                    488 ;code must be execute from RAM 
                                    489 ;copy routine to PAD 
      001DB4 1D 00 02         [ 2]  490 	subw x,#CELLL 
      001DB7 90 AE 1E 07      [ 2]  491 	ldw y,#row_erase_proc
      001DBB FF               [ 2]  492 	ldw (x),y 
      001DBC CD 0C 49         [ 4]  493 	call PAD 
      001DBF 90 AE 1E 2E      [ 2]  494 	ldw y,#row_erase_proc_end 
      001DC3 72 A2 1E 07      [ 2]  495 	subw y,#row_erase_proc
      001DC7 1D 00 02         [ 2]  496 	subw x,#CELLL 
      001DCA FF               [ 2]  497 	ldw (x),y 
      001DCB CD 0C 85         [ 4]  498 	call CMOVE 
      001DCE                        499 block_erase:
      001DCE 90 BE 35         [ 2]  500 	ldw y,FPTR+1
      001DD1 90 A3 33 00      [ 2]  501 	cpw y,#app_space 
      001DD5 2A 19            [ 1]  502 	jrpl erase_flash 
                                    503 ; erase EEPROM block
      001DD7 90 A3 40 00      [ 2]  504 	cpw y,#EEPROM_BASE 
      001DDB 24 04            [ 1]  505 	jruge 1$
      001DDD CD 04 4D         [ 4]  506 	call FC_XON
      001DE0 81               [ 4]  507 	ret ; bad address 
      001DE1 90 A3 47 FF      [ 2]  508 1$: cpw y,#EEPROM_END 
      001DE5 23 04            [ 2]  509 	jrule 2$ 
      001DE7 CD 04 4D         [ 4]  510 	call FC_XON
      001DEA 81               [ 4]  511 	ret ; bad address 
      001DEB                        512 2$:	
      001DEB CD 1B FA         [ 4]  513 	call UNLKEE 
      001DEE 20 03            [ 2]  514 	jra proceed_erase
                                    515 ; erase flash block:
      001DF0                        516 erase_flash:
      001DF0 CD 1C 19         [ 4]  517 	call UNLKFL 
      001DF3                        518 proceed_erase:
      001DF3 CD 0C 49         [ 4]  519 	call PAD 
      001DF6 90 93            [ 1]  520 	ldw y,x
      001DF8 90 FE            [ 2]  521 	ldw y,(y)
      001DFA 1C 00 02         [ 2]  522 	addw x,#CELLL  
      001DFD 90 FD            [ 4]  523 	call (y) 
      001DFF 72 17 50 5F      [ 1]  524 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001E03 CD 04 4D         [ 4]  525 	call FC_XON
      001E06 81               [ 4]  526 	ret 
                                    527 
                                    528 ; this routine is to be copied to PAD 
      001E07                        529 row_erase_proc:
      001E07 35 20 50 5B      [ 1]  530 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001E0B 35 DF 50 5C      [ 1]  531 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001E0F 4F               [ 1]  532 	clr a 
      001E10 90 5F            [ 1]  533 	clrw y 
      001E12 91 A7 00 34      [ 1]  534 	ldf ([FPTR],y),a
      001E16 90 5C            [ 1]  535     incw y
      001E18 91 A7 00 34      [ 1]  536 	ldf ([FPTR],y),a
      001E1C 90 5C            [ 1]  537     incw y
      001E1E 91 A7 00 34      [ 1]  538 	ldf ([FPTR],y),a
      001E22 90 5C            [ 1]  539     incw y
      001E24 91 A7 00 34      [ 1]  540 	ldf ([FPTR],y),a
      001E28 72 05 50 5F FB   [ 2]  541 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001E2D 81               [ 4]  542 	ret
      001E2E                        543 row_erase_proc_end:
                                    544 
                                    545 
                                    546 ;-----------------------------------
                                    547 ; block programming must be 
                                    548 ; executed from RAM 
                                    549 ; initial contidions: 
                                    550 ; 		memory unlocked
                                    551 ;       FPTR initialized 
                                    552 ; input: 
                                    553 ;    x   buffer address 
                                    554 ;-----------------------------------
                           000001   555 	BCNT=1 
      001E2E                        556 copy_buffer:
      001E2E 4B 80            [ 1]  557 	push #BLOCK_SIZE  
                                    558 ;enable block programming 
      001E30 72 10 50 5B      [ 1]  559 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001E34 72 11 50 5C      [ 1]  560 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001E38 90 5F            [ 1]  561 	clrw y
      001E3A F6               [ 1]  562 1$:	ld a,(x)
      001E3B 91 A7 00 34      [ 1]  563 	ldf ([FPTR],y),a
      001E3F 5C               [ 1]  564 	incw x 
      001E40 90 5C            [ 1]  565 	incw y 
      001E42 0A 01            [ 1]  566 	dec (BCNT,sp)
      001E44 26 F4            [ 1]  567 	jrne 1$
                                    568 ; wait EOP bit 
      001E46 72 05 50 5F FB   [ 2]  569 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001E4B 84               [ 1]  570 	pop a ; remove BCNT from stack 
      001E4C 81               [ 4]  571 	ret 
      001E4D                        572 copy_buffer_end:
                                    573 
                                    574 ;-------------------------
                                    575 ; move program_row to RAM 
                                    576 ; in TIB 
                                    577 ;------------------------
      001E4D                        578 copy_prog_to_ram:
      001E4D 1D 00 06         [ 2]  579 	subw x,#6
      001E50 90 AE 1E 2E      [ 2]  580 	ldw y,#copy_buffer 
      001E54 EF 04            [ 2]  581 	ldw (4,x),y 
      001E56 90 AE 17 00      [ 2]  582 	ldw y,#TIBBASE
      001E5A EF 02            [ 2]  583 	ldw (2,x),y 
      001E5C 90 AE 1E 4D      [ 2]  584 	ldw y,#copy_buffer_end 
      001E60 72 A2 1E 2E      [ 2]  585 	subw y,#copy_buffer  
      001E64 FF               [ 2]  586 	ldw (x),y 
      001E65 CD 0C 85         [ 4]  587 	call CMOVE 
      001E68 81               [ 4]  588 	ret 
                                    589 
                                    590 
                                    591 ;-----------------------------
                                    592 ; write a row in FLASH/EEPROM 
                                    593 ; WR-ROW ( a ud -- )
                                    594 ; a -> address 128 byte buffer to write 
                                    595 ; ud ->  row address in FLASH|EEPROM 
                                    596 ;-----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001E69 1D A4                  597 	.word LINK 
                           001E6B   598 	LINK=.
      001E6B 06                     599 	.byte 6 
      001E6C 57 52 2D 52 4F 57      600 	.ascii "WR-ROW"
      001E72                        601 write_row:
      001E72 CD 04 63         [ 4]  602 	call FC_XOFF
      001E75 CD 1A FA         [ 4]  603 	call FPSTOR
                                    604 ; align to FLASH block 
      001E78 A6 80            [ 1]  605 	ld a,#0x80 
      001E7A B4 36            [ 1]  606 	and a,PTR8 
      001E7C B7 36            [ 1]  607 	ld PTR8,a  
      001E7E CD 1E 4D         [ 4]  608 	call copy_prog_to_ram
      001E81 CD 1C 38         [ 4]  609 	call UNLOCK
      001E84 90 93            [ 1]  610 	ldw y,x 
      001E86 90 FE            [ 2]  611 	ldw y,(y)
      001E88 1C 00 02         [ 2]  612 	addw x,#CELLL 
      001E8B 89               [ 2]  613 	pushw x 
      001E8C 93               [ 1]  614 	ldw x,y ; buffer address in x 
      001E8D CD 17 00         [ 4]  615 	call TIBBASE
      001E90 CD 1C 60         [ 4]  616 	call LOCK
      001E93 85               [ 2]  617 	popw x 
      001E94 CD 04 4D         [ 4]  618 	call FC_XON 
      001E97 81               [ 4]  619 	ret 
                                    620 
                                    621 ;-------------------------------------
                                    622 ; change value of OPTION register 
                                    623 ; SET-OPT (c n -- ) 
                                    624 ; c new value.
                                    625 ; n OPT  number {1..7}
                                    626 ;--------------------------------------
      001E98 1E 6B                  627 		.word LINK 
                           001E9A   628 		LINK=.
      001E9A 07                     629 		.byte 7 
      001E9B 53 45 54 2D 4F 50 54   630 		.ascii "SET-OPT" 
      001EA2                        631 set_option: 
      001EA2 90 93            [ 1]  632 		ldw y,x 
      001EA4 90 FE            [ 2]  633 		ldw y,(y)
      001EA6 27 06            [ 1]  634 		jreq 1$
      001EA8 90 A3 00 07      [ 2]  635 		cpw y,#7 
      001EAC 23 04            [ 2]  636 		jrule 2$ 
                                    637 ; invalid OPTION number 		
      001EAE 1C 00 04         [ 2]  638 1$:		addw x,#2*CELLL
      001EB1 81               [ 4]  639 		ret
      001EB2 90 58            [ 2]  640 2$:		sllw y 
      001EB4 72 A9 47 FF      [ 2]  641 		addw y,#OPTION_BASE-1
      001EB8 FF               [ 2]  642 		ldw (x),y 
      001EB9 1D 00 02         [ 2]  643 		subw x,#CELLL 
      001EBC 90 5F            [ 1]  644 		clrw y 
      001EBE FF               [ 2]  645 		ldw (x),y 
      001EBF CD 1D 38         [ 4]  646 		call EECSTORE
      001EC2 81               [ 4]  647 		ret 
                                    648 
                                    649 
                                    650 
                                    651 ;--------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                    652 ; reset system to its original state 
                                    653 ; before any user modification
                                    654 ; PRISTINE ( -- )
                                    655 ;-------------------------------------
      001EC3 1E 9A                  656 	.word LINK  
                           001EC5   657 	LINK=.
      001EC5 08                     658 	.byte 8 
      001EC6 50 52 49 53 54 49 4E   659 	.ascii "PRISTINE"
             45
      001ECE                        660 pristine:
                                    661 ;;; erase EEPROM
      001ECE CD 1B 19         [ 4]  662 	call EEPROM 
      001ED1 CD 07 AB         [ 4]  663 1$:	call DDUP 
      001ED4 CD 1D AE         [ 4]  664 	call row_erase
      001ED7 90 93            [ 1]  665 	ldw y,x 
      001ED9 90 EE 02         [ 2]  666 	ldw y,(2,y)
      001EDC 72 A9 00 80      [ 2]  667 	addw y,#BLOCK_SIZE
      001EE0 EF 02            [ 2]  668 	ldw (2,x),y
      001EE2 90 A3 48 00      [ 2]  669 	cpw y,#OPTION_BASE 
      001EE6 25 E9            [ 1]  670 	jrult 1$
                                    671 ;;; reset OPTION to default values
      001EE8 90 AE 00 01      [ 2]  672 	ldw y,#1 ; OPT1 
      001EEC FF               [ 2]  673 2$:	ldw (x),y   
      001EED 90 5F            [ 1]  674 	clrw y 
      001EEF EF 02            [ 2]  675 	ldw (2,x),y  ; ( 0 1 -- ) 
      001EF1 CD 07 AB         [ 4]  676 	call DDUP    ; ( 0 1 0 1 -- )  
      001EF4 CD 1E A2         [ 4]  677 	call set_option
      001EF7 90 93            [ 1]  678 	ldw y,x 
      001EF9 90 FE            [ 2]  679 	ldw y,(y)
      001EFB 90 5C            [ 1]  680 	incw y  ; next OPTION 
      001EFD 90 A3 00 08      [ 2]  681 	cpw y,#8 
      001F01 25 E9            [ 1]  682 	jrult 2$
                                    683 ;;; erase first row of app_space 	
      001F03 90 AE 33 00      [ 2]  684 	ldw y,#app_space
      001F07 EF 02            [ 2]  685 	ldw (2,x),y  
      001F09 90 5F            [ 1]  686 	clrw y 
      001F0B FF               [ 2]  687 	ldw (x),y ; ( app_space 0 -- )
      001F0C CD 1D AE         [ 4]  688 	call row_erase 
                                    689 ; reset interrupt vectors 
      001F0F 1D 00 02         [ 2]  690 	subw x,#CELLL 
      001F12 90 5F            [ 1]  691 	clrw y  
      001F14 FF               [ 2]  692 4$:	ldw (x),y  ; ( n -- ) int# 
      001F15 CD 05 91         [ 4]  693 	call DUPP  
      001F18 CD 1F 35         [ 4]  694 	call reset_vector
      001F1B 90 93            [ 1]  695 	ldw y,x 
      001F1D 90 FE            [ 2]  696 	ldw y,(y)
      001F1F 90 5C            [ 1]  697 	incw y   ; next vector 
      001F21 90 A3 00 19      [ 2]  698 	cpw y,#25 
      001F25 25 ED            [ 1]  699 	jrult 4$
      001F27 CC 00 00         [ 2]  700 	jp NonHandledInterrupt ; reset MCU
                                    701 
                                    702 ;------------------------------
                                    703 ; reset an interrupt vector 
                                    704 ; to its initial value 
                                    705 ; i.e. NonHandledInterrupt
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                                    706 ; RST-IVEC ( n -- )
                                    707 ;-----------------------------
      001F2A 1E C5                  708 	.word LINK 
                           001F2C   709 	LINK=. 
      001F2C 08                     710 	.byte 8 
      001F2D 52 53 54 2D 49 56 45   711 	.ascii "RST-IVEC"
             43
      001F35                        712 reset_vector:
      001F35 90 93            [ 1]  713 	ldw y,x
      001F37 1C 00 02         [ 2]  714 	addw x,#CELLL 
      001F3A 90 FE            [ 2]  715 	ldw y,(y)
      001F3C 90 A3 00 17      [ 2]  716 	cpw y,#23 
      001F40 27 3A            [ 1]  717 	jreq 9$
      001F42 90 A3 00 1D      [ 2]  718 	cpw y,#29 ; last vector
      001F46 22 34            [ 1]  719 	jrugt 9$  
      001F48 90 58            [ 2]  720 	sllw y 
      001F4A 90 58            [ 2]  721 	sllw y 
      001F4C 72 A9 80 08      [ 2]  722 	addw y,#0x8008 ; irq0 address 
      001F50 90 BF 26         [ 2]  723 	ldw YTEMP,y
      001F53 1D 00 06         [ 2]  724 	subw x,#3*CELLL 
      001F56 EF 02            [ 2]  725 	ldw (2,x),y 
      001F58 90 5F            [ 1]  726 	clrw y
      001F5A FF               [ 2]  727 	ldw (x),y 
      001F5B A6 82            [ 1]  728 	ld a,#0x82 
      001F5D 90 95            [ 1]  729 	ld yh,a
      001F5F EF 04            [ 2]  730 	ldw (4,x),y
      001F61 CD 1D 84         [ 4]  731 	call EESTORE
      001F64 1D 00 06         [ 2]  732 	subw x,#3*CELLL
      001F67 90 5F            [ 1]  733 	clrw y 
      001F69 FF               [ 2]  734 	ldw (x),y 
      001F6A 90 AE 00 00      [ 2]  735 	ldw y,#NonHandledInterrupt
      001F6E EF 04            [ 2]  736 	ldw (4,x),y 
      001F70 90 BE 26         [ 2]  737 	ldw y,YTEMP  
      001F73 72 A9 00 02      [ 2]  738 	addw y,#2
      001F77 EF 02            [ 2]  739 	ldw (2,x),y 
      001F79 CD 1D 84         [ 4]  740 	call EESTORE
      001F7C 81               [ 4]  741 9$:	ret 
                                    742 
                                    743 
                                    744 ;------------------------------
                                    745 ; all interrupt vector with 
                                    746 ; an address >= a are resetted 
                                    747 ; to default
                                    748 ; CHKIVEC ( a -- )
                                    749 ;------------------------------
      001F7D 1F 2C                  750 	.word LINK 
                           001F7F   751 	LINK=.
      001F7F 07                     752 	.byte 7
      001F80 43 48 4B 49 56 45 43   753 	.ascii "CHKIVEC"
                                    754 ;local variables 
                           000001   755 	SSP=1
                           000003   756 	CADR=3
                           000005   757 	OFS=5
                           000006   758 	VSIZE=6  
      001F87                        759 CHKIVEC:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      001F87 52 06            [ 2]  760 	sub sp,#VSIZE ;alloc local variables 
      001F89 90 93            [ 1]  761 	ldw y,x 
      001F8B 90 FE            [ 2]  762 	ldw y,(y)
      001F8D 17 03            [ 2]  763 	ldw (CADR,sp),y ; ca 
      001F8F 1F 01            [ 2]  764 	ldw (SSP,sp),x 
      001F91 AE 80 0A         [ 2]  765 	ldw x,#0x800a ; irq0 address 
      001F94 BF 35            [ 2]  766 	ldw PTR16,X
      001F96 AE FF FC         [ 2]  767 	ldw x,#-4 
      001F99 1C 00 04         [ 2]  768 1$:	addw x,#4
      001F9C A3 00 78         [ 2]  769 	cpw x,#30*4 ; irq0-29 
      001F9F 27 22            [ 1]  770 	jreq 9$
      001FA1 90 93            [ 1]  771 	ldw y,x  
      001FA3 91 D6 35         [ 4]  772 	ld a,([PTR16],y)
      001FA6 11 03            [ 1]  773 	cp a,(CADR,sp)
      001FA8 25 EF            [ 1]  774 	jrult 1$
      001FAA 90 5C            [ 1]  775 	incw y 
      001FAC 91 D6 35         [ 4]  776 	ld a,([PTR16],y)
      001FAF 11 04            [ 1]  777 	cp a,(CADR+1,sp) 
      001FB1 25 E6            [ 1]  778 	jrult 1$ 
      001FB3 1F 05            [ 2]  779 	ldw (OFS,sp),x 
      001FB5 54               [ 2]  780 	srlw x
      001FB6 54               [ 2]  781 	srlw x 
      001FB7 90 93            [ 1]  782 	ldw y,x 
      001FB9 1E 01            [ 2]  783 	ldw x,(SSP,sp)
      001FBB FF               [ 2]  784 	ldw (x),y
      001FBC CD 1F 35         [ 4]  785 	call reset_vector
      001FBF 1E 05            [ 2]  786 	ldw x,(OFS,sp) 
      001FC1 20 D6            [ 2]  787 	jra 1$
      001FC3 1E 01            [ 2]  788 9$:	ldw x,(SSP,sp) 
      001FC5 1C 00 02         [ 2]  789 	addw x,#CELLL 
      001FC8 5B 06            [ 2]  790 	addw sp,#VSIZE ; drop local variables  
      001FCA 81               [ 4]  791 	ret 
                                    792 
                                    793 ;------------------------------
                                    794 ; set interrupt vector 
                                    795 ; SET-IVEC ( ud n -- )
                                    796 ;  ud Handler address
                                    797 ;  n  vector # 0 .. 29 
                                    798 ;-----------------------------
      001FCB 1F 7F                  799 	.word LINK
                           001FCD   800 	LINK=.
      001FCD 08                     801 	.byte 8 
      001FCE 53 45 54 2D 49 56 45   802 	.ascii "SET-IVEC" 
             43
      001FD6                        803 set_vector:
      001FD6 90 93            [ 1]  804     ldw y,x 
      001FD8 1C 00 02         [ 2]  805 	addw x,#CELLL 
      001FDB 90 FE            [ 2]  806 	ldw y,(y) ; vector #
      001FDD 90 A3 00 1D      [ 2]  807 	cpw y,#29 ; last vector
      001FE1 23 04            [ 2]  808 	jrule 2$
      001FE3 1C 00 04         [ 2]  809 	addw x,#2*CELLL 
      001FE6 81               [ 4]  810 	ret
      001FE7 90 58            [ 2]  811 2$:	sllw y 
      001FE9 90 58            [ 2]  812 	sllw y 
      001FEB 72 A9 80 08      [ 2]  813 	addw y,#0X8008 ; IRQ0 vector address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      001FEF 90 BF 26         [ 2]  814 	ldw YTEMP,y ; vector address 
      001FF2 A6 82            [ 1]  815 	ld a,#0x82 
      001FF4 90 95            [ 1]  816 	ld yh,a 
      001FF6 E6 01            [ 1]  817 	ld a,(1,x) ; isr address bits 23..16 
      001FF8 90 97            [ 1]  818 	ld yl,a 
                                    819 ;  write 0x82 + most significant byte of int address	
      001FFA 1D 00 06         [ 2]  820 	subw x,#3*CELLL 
      001FFD EF 04            [ 2]  821 	ldw (4,x),y 
      001FFF 90 BE 26         [ 2]  822 	ldw y,YTEMP
      002002 EF 02            [ 2]  823 	ldw (2,x),y ; vector address 
      002004 90 5F            [ 1]  824 	clrw y 
      002006 FF               [ 2]  825 	ldw (x),y   ; as a double 
      002007 CD 1D 84         [ 4]  826 	call EESTORE 
      00200A 90 93            [ 1]  827 	ldw y,x 
      00200C 90 EE 02         [ 2]  828 	ldw y,(2,y) ; bits 15..0 int vector 
      00200F 1D 00 06         [ 2]  829 	subw x,#3*CELLL 
      002012 EF 04            [ 2]  830 	ldw (4,x),y 
      002014 90 BE 26         [ 2]  831 	ldw y,YTEMP 
      002017 72 A9 00 02      [ 2]  832 	addw y,#2 
      00201B EF 02            [ 2]  833 	ldw (2,x),y 
      00201D 90 5F            [ 1]  834 	clrw y 
      00201F FF               [ 2]  835 	ldw (x),y 
      002020 CD 1D 84         [ 4]  836 	call EESTORE
      002023 1C 00 04         [ 2]  837 	addw x,#2*CELLL  
      002026 81               [ 4]  838 9$: ret 
                                    839 
                                    840 
                                    841 ;------------------------
                                    842 ; Compile word to flash
                                    843 ; EE, (w -- )
                                    844 ;-----------------------
      002027 1F CD                  845 	.word LINK
                           002029   846 	LINK=.
      002029 03                     847 	.byte 3
      00202A 45 45 2C               848 	.ascii "EE,"
      00202D                        849 EE_COMMA:
      00202D 1D 00 04         [ 2]  850 	subw x,#2*CELLL 
      002030 90 BE 1A         [ 2]  851 	ldw y,UCP
      002033 90 89            [ 2]  852 	pushw y 
      002035 EF 02            [ 2]  853 	ldw (2,x),y 
      002037 90 5F            [ 1]  854 	clrw y 
      002039 FF               [ 2]  855 	ldw (x),y
      00203A CD 1D 84         [ 4]  856 	call EESTORE
      00203D 90 85            [ 2]  857 	popw y 
      00203F 72 A9 00 02      [ 2]  858 	addw y,#2
      002043 90 BF 1A         [ 2]  859 	ldw UCP,y
      002046 81               [ 4]  860 	ret 
                                    861 
                                    862 
                                    863 ;-------------------------
                                    864 ; Compile byte to flash 
                                    865 ; EEC, ( c -- )	
                                    866 ;-------------------------
      002047 20 29                  867 	.word LINK 
                           002049   868 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      002049 04                     869 	.byte 4 
      00204A 45 45 43 2C            870 	.ascii "EEC,"
      00204E                        871 EE_CCOMMA:
      00204E 1D 00 04         [ 2]  872 	subw x,#2*CELLL 
      002051 90 BE 1A         [ 2]  873 	ldw y,UCP
      002054 90 89            [ 2]  874 	pushw y 
      002056 EF 02            [ 2]  875 	ldw (2,x),y 
      002058 90 5F            [ 1]  876 	clrw y 
      00205A FF               [ 2]  877 	ldw (x),y
      00205B CD 1D 38         [ 4]  878 	call EECSTORE
      00205E 90 85            [ 2]  879 	popw y 
      002060 90 5C            [ 1]  880 	incw y 
      002062 90 BF 1A         [ 2]  881 	ldw UCP,y
      002065 81               [ 4]  882 	ret 
                                    883 
                                    884 
                                    885 ;--------------------------
                                    886 ; copy FLASH block to ROWBUF
                                    887 ; ROW>BUF ( ud -- )
                                    888 ;--------------------------
      002066 20 49                  889 	.word LINK 
                           002068   890 	LINK=.
      002068 07                     891 	.byte 7 
      002069 52 4F 57 3E 42 55 46   892 	.ascii "ROW>BUF"
      002070                        893 ROW2BUF: 
      002070 CD 1A FA         [ 4]  894 	call FPSTOR 
      002073 A6 80            [ 1]  895 	ld a,#BLOCK_SIZE
      002075 88               [ 1]  896 	push a 
      002076 B4 36            [ 1]  897 	and a,PTR8 ; block align 
      002078 B7 36            [ 1]  898 	ld PTR8,a
      00207A 90 AE 16 80      [ 2]  899 	ldw y,#ROWBUFF 
      00207E 92 BC 00 34      [ 5]  900 1$: ldf a,[FPTR]
      002082 90 F7            [ 1]  901 	ld (y),a
      002084 CD 1C 74         [ 4]  902 	call INC_FPTR
      002087 90 5C            [ 1]  903 	incw y 
      002089 0A 01            [ 1]  904 	dec (1,sp)
      00208B 26 F1            [ 1]  905 	jrne 1$ 
      00208D 84               [ 1]  906 	pop a 
      00208E 81               [ 4]  907 	ret 
                                    908 
                                    909 
                                    910 ;---------------------------
                                    911 ; copy ROWBUFF to flash 
                                    912 ; BUF>ROW ( ud -- )
                                    913 ; ud is row address as double 
                                    914 ;---------------------------
      00208F 20 68                  915 	.word LINK 
                           002091   916 	LINK=.
      002091 07                     917 	.byte 7 
      002092 42 55 46 3E 52 4F 57   918 	.ascii "BUF>ROW" 
      002099                        919 BUF2ROW:
      002099 CD 06 9F         [ 4]  920 	call TBUF ; ( ud rb -- )
      00209C CD 07 5F         [ 4]  921 	call ROT 
      00209F CD 07 5F         [ 4]  922 	call ROT  ; ( rb ud -- )
      0020A2 CD 1E 72         [ 4]  923 	call write_row 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      0020A5 81               [ 4]  924 	ret 
                                    925 
                                    926 ;---------------------------------
                                    927 ; how many byte free in that row 
                                    928 ; RFREE ( a -- n )
                                    929 ; a is least byte of target address
                                    930 ;----------------------------------
      0020A6 20 91                  931 	.word LINK 
                           0020A8   932 	LINK=.
      0020A8 05                     933 	.byte 5 
      0020A9 52 46 52 45 45         934 	.ascii "RFREE"
      0020AE                        935 RFREE:
      0020AE E6 01            [ 1]  936 	ld a,(1,x)
      0020B0 A4 7F            [ 1]  937 	and a,#BLOCK_SIZE-1 
      0020B2 B7 26            [ 1]  938 	ld YTEMP,a 
      0020B4 A6 80            [ 1]  939 	ld a,#BLOCK_SIZE 
      0020B6 B0 26            [ 1]  940 	sub a,YTEMP 
      0020B8 90 5F            [ 1]  941 	clrw y 
      0020BA 90 97            [ 1]  942 	ld yl,a
      0020BC FF               [ 2]  943 	ldw (x),y 
      0020BD 81               [ 4]  944 	ret 
                                    945 
                                    946 ;---------------------------------
                                    947 ; write u bytes to flash/EEPROM 
                                    948 ; constraint to row limit 
                                    949 ; RAM>EE ( ud a u -- u2 )
                                    950 ; ud flash address 
                                    951 ; a ram address 
                                    952 ; u bytes count
                                    953 ; return u2 bytes written  
                                    954 ;-------------------------------
      0020BE 20 A8                  955 	.word LINK 
                           0020C0   956 	LINK=. 
      0020C0 06                     957 	.byte 6
      0020C1 52 41 4D 3E 45 45      958 	.ascii "RAM>EE"
                                    959 	
      0020C7                        960 RAM2EE:
                                    961 ; copy ud on top 
      0020C7 90 93            [ 1]  962 	ldw y,x 
      0020C9 90 EE 06         [ 2]  963 	ldw y,(6,y) ; LSW of ud  
      0020CC 90 BF 26         [ 2]  964 	ldw YTEMP,y 
      0020CF 90 93            [ 1]  965 	ldw y,x 
      0020D1 90 EE 04         [ 2]  966 	ldw y,(4,y)  ; MSW of ud 
      0020D4 1D 00 04         [ 2]  967 	subw x,#2*CELLL 
      0020D7 FF               [ 2]  968 	ldw (x),y 
      0020D8 90 BE 26         [ 2]  969 	ldw y,YTEMP 
      0020DB EF 02            [ 2]  970 	ldw (2,x),y 
      0020DD CD 20 70         [ 4]  971 	call ROW2BUF 
      0020E0 90 93            [ 1]  972 	ldw y,x 
      0020E2 90 EE 06         [ 2]  973 	ldw y,(6,y)
      0020E5 90 89            [ 2]  974 	pushw y ; udl 
      0020E7 90 9F            [ 1]  975 	ld a,yl
      0020E9 A4 7F            [ 1]  976 	and a,#BLOCK_SIZE-1 
      0020EB 90 5F            [ 1]  977 	clrw y 
      0020ED 90 97            [ 1]  978 	ld yl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      0020EF 72 A9 16 80      [ 2]  979 	addw y,#ROWBUFF 
      0020F3 1D 00 02         [ 2]  980 	subw x,#CELLL 
      0020F6 FF               [ 2]  981 	ldw (x),y  
      0020F7 CD 05 A1         [ 4]  982 	call SWAPP ;  ( ud a ra u -- )
      0020FA CD 05 3B         [ 4]  983 	call RFROM  
      0020FD CD 20 AE         [ 4]  984 	call RFREE 
      002100 CD 09 19         [ 4]  985 	call MIN
      002103 CD 05 91         [ 4]  986 	call DUPP 
      002106 CD 05 5A         [ 4]  987 	call TOR  
      002109 CD 0C 85         [ 4]  988 	call CMOVE
      00210C CD 20 99         [ 4]  989 	call BUF2ROW 
      00210F CD 05 3B         [ 4]  990 	call RFROM 
      002112 81               [ 4]  991 	ret 
                                    992 
                                    993 
                                    994 ;--------------------------
                                    995 ; expand 16 bit address 
                                    996 ; to 32 bit address 
                                    997 ; FADDR ( a -- ud )
                                    998 ;--------------------------
      002113 20 C0                  999 	.word LINK 
                           002115  1000 	LINK=. 
      002115 05                    1001 	.byte 5 
      002116 46 41 44 44 52        1002 	.ascii "FADDR"
      00211B                       1003 FADDR:
      00211B CC 0B 4A         [ 2] 1004 	jp ZERO 
                                   1005 
                                   1006 
                                   1007 ;--------------------------
                                   1008 ; move new colon definition to FLASH 
                                   1009 ; using WR-ROW for efficiency 
                                   1010 ; preserving bytes already used 
                                   1011 ; in the current block. 
                                   1012 ; At this point the compiler as completed
                                   1013 ; in RAM and pointers CP and CNTXT updated.
                                   1014 ; CNTXT point to nfa of new word and  
                                   1015 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                   1016 ; 
                                   1017 ; FMOVE ( -- cp+ )
                                   1018 ; 
                                   1019 ;--------------------------
      00211E 21 15                 1020 	.word LINK 
                           002120  1021 	LINK=.
      002120 05                    1022 	.byte 5 
      002121 46 4D 4F 56 45        1023 	.ascii "FMOVE" 
      002126                       1024 FMOVE:
      002126 CD 06 B1         [ 4] 1025 	call TFLASH 
      002129 CD 04 EA         [ 4] 1026 	CALL AT 
      00212C CD 04 9A         [ 4] 1027 	CALL QBRAN 
      00212F 21 AA                 1028 	.word no_move  
      002131 CD 07 00         [ 4] 1029 	call CPP
      002134 CD 04 EA         [ 4] 1030 	call AT  
      002137 CD 05 91         [ 4] 1031 	call DUPP ; ( udl udl -- )
      00213A CD 06 E4         [ 4] 1032 	call CNTXT 
      00213D CD 04 EA         [ 4] 1033 	call AT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      002140 CD 04 71         [ 4] 1034 	call DOLIT 
      002143 00 02                 1035 	.word 2 
      002145 CD 08 39         [ 4] 1036 	call SUBB ; ( udl udl a -- )
      002148 CD 05 A1         [ 4] 1037 	call SWAPP 
      00214B CD 21 1B         [ 4] 1038 	call FADDR 
      00214E CD 07 5F         [ 4] 1039 	call ROT  ; ( udl ud a -- )
      002151 CD 05 91         [ 4] 1040 	call DUPP 
      002154 CD 05 5A         [ 4] 1041 	call TOR    ; R: a 
      002157                       1042 FMOVE2: 
      002157 CD 0C 38         [ 4] 1043 	call HERE 
      00215A CD 05 4E         [ 4] 1044 	call RAT 
      00215D CD 08 39         [ 4] 1045 	call SUBB ; (udl ud a wl -- )
      002160                       1046 next_row:
      002160 CD 05 91         [ 4] 1047 	call DUPP 
      002163 CD 05 5A         [ 4] 1048 	call TOR  ; ( udl ud a wl -- ) R: a wl
      002166 CD 20 C7         [ 4] 1049 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      002169 CD 05 91         [ 4] 1050 	call DUPP 
      00216C CD 05 5A         [ 4] 1051 	call TOR
      00216F CD 07 C0         [ 4] 1052 	call PLUS  ; ( udl+ ) 
      002172 CD 05 91         [ 4] 1053 	call DUPP 
      002175 CD 0B 4A         [ 4] 1054 	call ZERO   ; ( udl+ ud -- )
      002178 CD 05 3B         [ 4] 1055 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      00217B CD 05 3B         [ 4] 1056 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      00217E CD 05 BB         [ 4] 1057 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      002181 CD 08 39         [ 4] 1058 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      002184 CD 05 91         [ 4] 1059 	call DUPP 
      002187 CD 04 9A         [ 4] 1060 	call QBRAN
      00218A 21 A3                 1061 	.word fmove_done 
      00218C CD 05 A1         [ 4] 1062 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      00218F CD 05 3B         [ 4] 1063 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      002192 CD 07 C0         [ 4] 1064 	call PLUS  ; ( udl+2 ud wl- a+ )
      002195 CD 05 91         [ 4] 1065 	call DUPP 
      002198 CD 05 5A         [ 4] 1066 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      00219B CD 05 A1         [ 4] 1067 	call SWAPP 
      00219E CD 04 B6         [ 4] 1068 	call BRAN
      0021A1 21 60                 1069 	.word next_row  
      0021A3                       1070 fmove_done:	
      0021A3 CD 05 3B         [ 4] 1071 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      0021A6 1C 00 0A         [ 2] 1072 	addw x,#5*CELLL ; (  -- cp+ ) new CP 
      0021A9 81               [ 4] 1073  	ret  
      0021AA                       1074 no_move:
      0021AA CD 0B 4A         [ 4] 1075 	call ZERO
      0021AD 81               [ 4] 1076 	ret 
                                   1077 
                                   1078 ;------------------------------------------
                                   1079 ; adjust pointers after **FMOVE** operetion.
                                   1080 ; UPDAT-PTR ( cp+ -- )
                                   1081 ; cp+ is new CP position after FMOVE 
                                   1082 ;-------------------------------------------
      0021AE 21 20                 1083 	.word LINK 
                           0021B0  1084 	LINK=.
      0021B0 09                    1085 	.byte 9
      0021B1 55 50 44 41 54 2D 50  1086 	.ascii "UPDAT-PTR" 
             54 52
      0021BA                       1087 UPDATPTR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



                                   1088 ;reset VP to previous position  
      0021BA CD 1B 74         [ 4] 1089 	call EEPVP 
      0021BD CD 05 87         [ 4] 1090 	call DROP 
      0021C0 CD 04 EA         [ 4] 1091 	call AT
      0021C3 CD 06 F2         [ 4] 1092 	call VPP 
      0021C6 CD 04 D3         [ 4] 1093 	call STORE
                                   1094 ;update CONTEXT and LAST 
      0021C9 CD 1B 5E         [ 4] 1095 	call EEPCP 
      0021CC CD 05 87         [ 4] 1096 	call DROP
      0021CF CD 04 EA         [ 4] 1097 	call AT
      0021D2 CD 04 71         [ 4] 1098 	call DOLIT 
      0021D5 00 02                 1099 	.word 2 
      0021D7 CD 07 C0         [ 4] 1100 	call PLUS 
      0021DA CD 05 91         [ 4] 1101 	call DUPP 
      0021DD CD 06 E4         [ 4] 1102 	call CNTXT 
      0021E0 CD 04 D3         [ 4] 1103 	call STORE
      0021E3 CD 07 10         [ 4] 1104 	call LAST
      0021E6 CD 04 D3         [ 4] 1105 	call STORE 
      0021E9 CD 1B 8E         [ 4] 1106 	call UPDATLAST 
                                   1107 ;update CP 
      0021EC CD 07 00         [ 4] 1108 	call CPP 
      0021EF CD 04 D3         [ 4] 1109 	call STORE
      0021F2 CD 1B B7         [ 4] 1110 	call UPDATCP 
      0021F5 81               [ 4] 1111 	ret 
                                   1112 
                                   1113 ;-----------------------------
                                   1114 ; move interrupt sub-routine
                                   1115 ; in flash memory
                                   1116 ;----------------------------- 
      0021F6 21 B0                 1117 	.word LINK 
                           0021F8  1118 	LINK=. 
      0021F8 06                    1119 	.byte 6
      0021F9 49 46 4D 4F 56 45     1120 	.ascii "IFMOVE" 
      0021FF                       1121 IFMOVE:
      0021FF CD 06 B1         [ 4] 1122 	call TFLASH 
      002202 CD 04 EA         [ 4] 1123 	CALL AT 
      002205 CD 04 9A         [ 4] 1124 	CALL QBRAN 
      002208 21 AA                 1125 	.word no_move 
      00220A CD 07 00         [ 4] 1126 	call CPP 
      00220D CD 04 EA         [ 4] 1127 	call AT 
      002210 CD 05 91         [ 4] 1128 	call DUPP ; ( udl udl -- )
      002213 CD 1B 74         [ 4] 1129 	call EEPVP 
      002216 CD 05 87         [ 4] 1130 	call DROP
      002219 CD 04 EA         [ 4] 1131 	call AT  ; ( udl udl a )
      00221C CD 05 5A         [ 4] 1132 	call TOR 
      00221F CD 21 1B         [ 4] 1133 	call FADDR
      002222 CD 05 4E         [ 4] 1134 	call RAT ; ( udl ud a -- ) R: a 
      002225 CC 21 57         [ 2] 1135 	jp FMOVE2 
                                   1136 
                                   1137 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



                           000001  4824 .if WANT_SCALING_CONST 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                                   4825         .include "const_ratio.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;--------------------------------------------------------------------
                                     22 ; Irrationals constants 
                                     23 ; expressed as 2 integers ratio
                                     24 ; aproximation. These are to be used with scaling operators */ and */MOD 
                                     25 ; REF: https://www.forth.com/starting-forth/5-fixed-point-arithmetic/
                                     26 ;---------------------------------------------------------------------
                                     27 
                                     28 ;       PI ( --  355 113 )
                                     29 ; precision 8.5e-8 
                                     30 ; usage example to compute circle area
                                     31 ; : CAREA DUP * PI */ ;
                                     32 ; 
                                     33 
      002228 21 F8                   34         .word LINK 
                           00222A    35         LINK=.
      00222A 02                      36         .byte 2
      00222B 50 49                   37         .ascii "PI" 
      00222D                         38 PII:
      00222D 1D 00 04         [ 2]   39         subw x,#2*CELLL 
      002230 90 AE 01 63      [ 2]   40         ldw y,#355 
      002234 EF 02            [ 2]   41         ldw (2,x),y 
      002236 90 AE 00 71      [ 2]   42         ldw y,#113 
      00223A FF               [ 2]   43         ldw (x),y 
      00223B 81               [ 4]   44         ret 
                                     45 
                                     46 ;      SQRT2 ( -- 19601  13860 )
                                     47 ; precision: 1.5e-9 
                                     48 ; usage example to compute Voltage peek to peek from Vrms 
                                     49 ; : VPP SQRT2 */ 2 * ;
                                     50 ;
      00223C 22 2A                   51         .word LINK 
                           00223E    52         LINK=.
      00223E 05                      53         .byte 5 
      00223F 53 51 52 54 32          54         .ascii "SQRT2" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      002244                         55 SQRT2:
      002244 1D 00 04         [ 2]   56         subw x,#2*CELLL 
      002247 90 AE 4C 91      [ 2]   57         ldw y,#19601 
      00224B EF 02            [ 2]   58         ldw (2,x),y 
      00224D 90 AE 36 24      [ 2]   59         ldw y,#13860 
      002251 FF               [ 2]   60         ldw (x),y 
      002252 81               [ 4]   61         ret 
                                     62 
                                     63 ;   SQRT3 ( -- 18817 10864 )
                                     64 ; precision: 1.1e-9
                                     65 ;
      002253 22 3E                   66         .word LINK 
                           002255    67         LINK=.
      002255 05                      68         .byte 5
      002256 53 51 52 54 33          69         .ascii "SQRT3" 
      00225B                         70 SQRT3: 
      00225B 1D 00 04         [ 2]   71     subw x,#2*CELLL 
      00225E 90 AE 49 81      [ 2]   72     ldw y,#18817 
      002262 EF 02            [ 2]   73     ldw (2,x),y 
      002264 90 AE 2A 70      [ 2]   74     ldw y,#10864 
      002268 FF               [ 2]   75     ldw (x),y 
      002269 81               [ 4]   76     ret 
                                     77 
                                     78 ;   E ( -- 28667 10546 )
                                     79 ; precision: 5.5e-9 
                                     80 ; natural log base 
      00226A 22 55                   81         .word LINK 
                           00226C    82         LINK=.
      00226C 01                      83         .byte 1
      00226D 45                      84         .ascii "E" 
      00226E                         85 ENEPER:
      00226E 1D 00 04         [ 2]   86     subw x,#2*CELLL 
      002271 90 AE 6F FB      [ 2]   87     ldw y,#28667 
      002275 EF 02            [ 2]   88     ldw (2,x),y 
      002277 90 AE 29 32      [ 2]   89     ldw y,#10546 
      00227B FF               [ 2]   90     ldw (x),y 
      00227C 81               [ 4]   91     ret 
                                     92 
                                     93 ;   SQRT10 ( -- 22936 7253 )
                                     94 ; precision: 5.7e-9 
      00227D 22 6C                   95         .word LINK 
                           00227F    96         LINK=.
      00227F 06                      97         .byte 6 
      002280 53 51 52 54 31 30       98         .ascii "SQRT10" 
      002286                         99 SQRT10:
      002286 1D 00 04         [ 2]  100     subw x,#2*CELLL
      002289 90 AE 59 98      [ 2]  101     ldw y,#22936 
      00228D EF 02            [ 2]  102     ldw (2,x),y 
      00228F 90 AE 1C 55      [ 2]  103     ldw y,#7253
      002293 FF               [ 2]  104     ldw (x),y 
      002294 81               [ 4]  105     ret 
                                    106 
                                    107 ;   12RT2 ( -- 26797 25293 )
                                    108 ; precision: 1.0e-9 
                                    109 ; used in music to compute well tempered scale
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      002295 22 7F                  110         .word LINK 
                           002297   111         LINK=. 
      002297 05                     112         .byte 5 
      002298 31 32 52 54 32         113         .ascii "12RT2"
      00229D                        114 RT12_2:
      00229D 1D 00 04         [ 2]  115     subw x,#2*CELLL 
      0022A0 90 AE 68 AD      [ 2]  116     ldw y,#26797
      0022A4 EF 02            [ 2]  117     ldw (2,x),y 
      0022A6 90 AE 62 CD      [ 2]  118     ldw y,#25293
      0022AA FF               [ 2]  119     ldw (x),y 
      0022AB 81               [ 4]  120     ret 
                                    121 
                                    122 ;   LOG2s ( -- 2040 11103 )
                                    123 ; log(2)/1.6384
                                    124 ; precision: 1.1e-8
      0022AC 22 97                  125         .word LINK 
                           0022AE   126         LINK=.
      0022AE 05                     127         .byte 5 
      0022AF 4C 4F 47 32 53         128         .ascii "LOG2S" 
      0022B4                        129 LOG2S:
      0022B4 1D 00 04         [ 2]  130     subw x,#2*CELLL
      0022B7 90 AE 07 F8      [ 2]  131     ldw y,#2040 
      0022BB EF 02            [ 2]  132     ldw (2,x),y 
      0022BD 90 AE 2B 5F      [ 2]  133     ldw y,#11103 
      0022C1 FF               [ 2]  134     ldw (x),y 
      0022C2 81               [ 4]  135     ret 
                                    136 
                                    137 ;   LN2 ( -- 485 11464 )
                                    138 ; ln(2)/16.384 
                                    139 ; precision: 1.0e-7 
      0022C3 22 AE                  140         .word LINK 
                           0022C5   141         LINK=.
      0022C5 04                     142         .byte 4 
      0022C6 4C 4E 32 53            143         .ascii "LN2S" 
      0022CA                        144 LN2S: 
      0022CA 1D 00 04         [ 2]  145     subw x,#2*CELLL
      0022CD 90 AE 01 E5      [ 2]  146     ldw y,#485
      0022D1 EF 02            [ 2]  147     ldw (2,x),y 
      0022D3 90 AE 2C C8      [ 2]  148     ldw y,#11464 
      0022D7 FF               [ 2]  149     ldw (x),y 
      0022D8 81               [ 4]  150     ret 
                                    151 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



                                   4826 .endif
                           000001  4827 .if WANT_CONST_TABLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



                                   4828         .include "ctable.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;------------------------------
                                     22 ; words to create and read 
                                     23 ; constants tables in FLASH 
                                     24 ; and EEPROM
                                     25 ;------------------------------
                                     26 
                                     27 ;-----------------------------
                                     28 ; allocate space in CODE area 
                                     29 ; for constant table.
                                     30 ; CALLOT ( u -- ad )
                                     31 ; u  bytes to allocates 
                                     32 ; ad data address as double.
                                     33 ;-----------------------------
      0022D9 22 C5                   34     .word LINK 
                           0022DB    35     LINK=.
      0022DB 06                      36     .byte 6
      0022DC 43 41 4C 4C 4F 54       37     .ascii "CALLOT"
      0022E2                         38 CALLOT:
      0022E2 CD 07 00         [ 4]   39     CALL CPP
      0022E5 CD 05 91         [ 4]   40     CALL DUPP 
      0022E8 CD 04 EA         [ 4]   41     CALL AT 
      0022EB CD 05 5A         [ 4]   42     CALL TOR 
      0022EE CD 0B BA         [ 4]   43     CALL PSTOR 
      0022F1 CD 1B B7         [ 4]   44     CALL UPDATCP 
      0022F4 CD 05 3B         [ 4]   45     CALL RFROM
      0022F7 CC 0B 4A         [ 2]   46     JP ZERO 
                                     47 
                                     48 ;------------------------------
                                     49 ; create constants bytes table 
                                     50 ; in persistant memory
                                     51 ;  CTABLE ( n+ -- ad ; <string> )
                                     52 ; n+ bytes reserved 
                                     53 ;-----------------------------
      0022FA 22 DB                   54     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



                           0022FC    55     LINK=.
      0022FC 06                      56     .byte 6
      0022FD 43 54 41 42 4C 45       57     .ascii "CTABLE"
      002303                         58 CTABLE:
      002303 CD 22 E2         [ 4]   59     CALL CALLOT     
      002306 CC 18 B9         [ 2]   60     JP DCONST 
                                     61      
                                     62 
                                     63 ;--------------------------------
                                     64 ; create constants words table 
                                     65 ; in persistant memory 
                                     66 ; WTABLE ( n+ -- ad ; <string> )
                                     67 ; n+  words reserved  
                                     68 ;--------------------------------
      002309 22 FC                   69     .word LINK 
                           00230B    70     LINK=.
      00230B 06                      71     .byte 6
      00230C 57 54 41 42 4C 45       72     .ascii "WTABLE"
      002312                         73 WTABLE:
      002312 CD 0A D1         [ 4]   74     CALL CELLS  
      002315 CD 22 E2         [ 4]   75     CALL CALLOT 
      002318 CC 18 B9         [ 2]   76     JP DCONST 
                                     77 
                                     78 ;---------------------------------
                                     79 ; stack an element of CTABLE 
                                     80 ; CTABL@ ( u ad -- c )
                                     81 ; u element order {0..size-1}
                                     82 ; a|ad table address 
                                     83 ;--------------------------------
      00231B 23 0B                   84     .word LINK 
                           00231D    85     LINK=.
      00231D 06                      86     .byte 6
      00231E 43 54 41 42 4C 40       87     .ascii "CTABL@" 
      002324                         88 CTAT:
      002324 CD 1A FA         [ 4]   89     call FPSTOR 
      002327 CD 1C 8C         [ 4]   90     call PTRPLUS 
      00232A CC 1C C9         [ 2]   91     jp EE_CREAD 
                                     92 
                                     93 ;---------------------------------
                                     94 ; stack an element of WTABLE 
                                     95 ; WTABL@ ( u ud -- w )
                                     96 ; u is element order {0..size-1}
                                     97 ; a|ud table address 
                                     98 ;----------------------------------
      00232D 23 1D                   99     .word LINK 
                           00232F   100     LINK=.
      00232F 06                     101     .byte 6
      002330 57 54 41 42 4C 40      102     .ascii "WTABL@" 
      002336                        103 WTAT:
      002336 CD 1A FA         [ 4]  104     call FPSTOR 
      002339 CD 0A D1         [ 4]  105     call CELLS 
      00233C CD 1C 8C         [ 4]  106     call PTRPLUS 
      00233F CD 1C A7         [ 4]  107     call EE_READ 
      002342 81               [ 4]  108     ret 
                                    109 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



                                    110 ;--------------------------
                                    111 ; tool to initialize character table 
                                    112 ; CTINIT ( ad -- )
                                    113 ; ad is table address 
                                    114 ;--------------------------
      002343 23 2F                  115     .word LINK 
                           002345   116     LINK=.
      002345 06                     117     .byte 6 
      002346 43 54 49 4E 49 54      118     .ascii "CTINIT"
      00234C                        119 CTINIT:
      00234C CD 1A FA         [ 4]  120     CALL FPSTOR
      00234F CD 1C 38         [ 4]  121     CALL UNLOCK
      002352 CD 0B 4A         [ 4]  122     CALL ZERO 
      002355 CD 0A DE         [ 4]  123 1$: CALL ONEP 
      002358 CD 05 91         [ 4]  124     CALL DUPP 
      00235B CD 23 A8         [ 4]  125     CALL INTQ 
      00235E CD 04 9A         [ 4]  126     CALL QBRAN 
      002361 23 6B                  127     .word 2$
      002363 CD 1C E3         [ 4]  128     call WR_BYTE 
      002366 CD 04 B6         [ 4]  129     CALL BRAN 
      002369 23 55                  130     .word 1$ 
      00236B CD 07 A0         [ 4]  131 2$: CALL DDROP 
      00236E CD 1C 60         [ 4]  132     CALL LOCK 
      002371 81               [ 4]  133     ret 
                                    134 
                                    135 ;--------------------------
                                    136 ; tool to initialize word table 
                                    137 ; WTINIT ( ad -- )
                                    138 ; ad is table address 
                                    139 ;--------------------------
      002372 23 45                  140     .word LINK 
                           002374   141     LINK=.
      002374 06                     142     .byte 6 
      002375 57 54 49 4E 49 54      143     .ascii "WTINIT"
      00237B                        144 WTINIT:
      00237B CD 1A FA         [ 4]  145     CALL FPSTOR
      00237E CD 1C 38         [ 4]  146     CALL UNLOCK
      002381 CD 0B 4A         [ 4]  147     CALL ZERO 
      002384 CD 0A DE         [ 4]  148 1$: CALL ONEP 
      002387 CD 05 91         [ 4]  149     CALL DUPP
      00238A CD 23 A8         [ 4]  150     CALL INTQ
      00238D CD 04 9A         [ 4]  151     CALL QBRAN 
      002390 23 9A                  152     .word 2$
      002392 CD 1D 08         [ 4]  153     call WR_WORD 
      002395 CD 04 B6         [ 4]  154     CALL BRAN 
      002398 23 84                  155     .word 1$ 
      00239A CD 07 A0         [ 4]  156 2$: CALL DDROP 
      00239D CD 1C 60         [ 4]  157     CALL LOCK 
      0023A0 81               [ 4]  158     ret 
                                    159 
                                    160 ;------------------------
                                    161 ; Prompted input for integer 
                                    162 ; display n+ in bracket and
                                    163 ; '?' 
                                    164 ; [N]? ( n+ -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



                                    165 ;------------------------
      0023A1 23 74                  166     .word LINK 
                           0023A3   167     LINK=.
      0023A3 04                     168     .byte 4
      0023A4 5B 4E 5D 3F            169     .ascii "[N]?" 
      0023A8                        170 INTQ:
      0023A8 CD 0E D9         [ 4]  171     CALL CR 
      0023AB CD 04 71         [ 4]  172     call DOLIT 
      0023AE 00 5B                  173     .word '[
      0023B0 CD 04 36         [ 4]  174     CALL EMIT 
      0023B3 CD 0F 92         [ 4]  175     CALL DOT 
      0023B6 CD 0F 18         [ 4]  176     CALL  DOTQP
      0023B9 03                     177     .byte 3
      0023BA 5D 3F 20               178     .ascii "]? " 
      0023BD CD 13 21         [ 4]  179     CALL QUERY 
      0023C0 CD 11 4C         [ 4]  180     call TOKEN 
      0023C3 CC 24 51         [ 2]  181     jp NUMBQ
                                    182 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



                                   4829 .endif
                           000001  4830 .if WANT_DOUBLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



                                   4831         .include "double.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;************************************
                                     21 ;    doubles integers library 
                                     22 ;    doubles are signed 32 bits 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26     .module DOUBLE 
                                     27 
                                     28 ; check for negative sign 
                                     29 ; ajust pointer and cntr 
      0023C6                         30 nsign: ; a cntr -- a cntr f 
      0023C6 CD 0B 4A         [ 4]   31     CALL ZERO 
      0023C9 CD 05 5A         [ 4]   32     CALL TOR  ; R: sign 
      0023CC CD 05 5A         [ 4]   33     CALL TOR  ; R: sign cntr 
      0023CF CD 05 91         [ 4]   34     CALL DUPP 
      0023D2 CD 05 08         [ 4]   35     CALL CAT 
      0023D5                         36     _DOLIT '-'
      0023D5 CD 04 71         [ 4]    1     CALL DOLIT 
      0023D8 00 2D                    2     .word '-' 
      0023DA CD 08 61         [ 4]   37     CALL EQUAL 
      0023DD                         38     _QBRAN nsign1 
      0023DD CD 04 9A         [ 4]    1     CALL QBRAN
      0023E0 23 F7                    2     .word nsign1
      0023E2 CD 0A DE         [ 4]   39     CALL ONEP ; a+ 
      0023E5 CD 05 3B         [ 4]   40     CALL RFROM 
      0023E8 CD 0A EB         [ 4]   41     CALL ONEM ; cntr-
      0023EB CD 05 3B         [ 4]   42     CALL RFROM ; sign 
      0023EE CD 07 DA         [ 4]   43     CALL INVER ; -1
      0023F1 CD 05 5A         [ 4]   44     CALL TOR   ; R: sign 
      0023F4 CD 05 5A         [ 4]   45     CALL TOR   ; R: cntr 
      0023F7                         46 nsign1:
      0023F7 CD 05 3B         [ 4]   47     CALL RFROM 
      0023FA CD 05 3B         [ 4]   48     CALL RFROM 
      0023FD 81               [ 4]   49     RET 
                                     50 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



                                     51 
                                     52 ; get all digits in row 
                                     53 ; stop at first non-digit or end of string 
                                     54 ; ( dlo dhi a cntr -- dlo dhi [ a+ cntr- | a+ 0 ] )
      0023FE                         55 parse_digits:
      0023FE                         56 1$:
      0023FE CD 05 91         [ 4]   57     CALL DUPP 
      002401                         58     _QBRAN 5$ 
      002401 CD 04 9A         [ 4]    1     CALL QBRAN
      002404 24 46                    2     .word 5$
      002406 CD 05 5A         [ 4]   59     CALL TOR   ; dlo dhi a R: cntr 
      002409 CD 0C 21         [ 4]   60     CALL COUNT ; dlo dhi a+ char 
      00240C CD 06 61         [ 4]   61     CALL BASE 
      00240F CD 04 EA         [ 4]   62     CALL AT 
      002412 CD 0E 19         [ 4]   63     CALL DIGTQ 
      002415                         64     _QBRAN 4$ ; not a digit
      002415 CD 04 9A         [ 4]    1     CALL QBRAN
      002418 24 3D                    2     .word 4$
      00241A CD 27 FE         [ 4]   65     CALL DTOR  ; dlo dhi R: cntr a+ c  
      00241D CD 06 61         [ 4]   66     CALL BASE 
      002420 CD 04 EA         [ 4]   67     CALL AT 
      002423 CD 26 38         [ 4]   68     CALL DSSTAR
      002426 CD 05 3B         [ 4]   69     CALL RFROM 
      002429 CD 0B 4A         [ 4]   70     CALL ZERO 
      00242C CD 2A C5         [ 4]   71     CALL DPLUS 
      00242F CD 05 3B         [ 4]   72     CALL RFROM  ; dlo dhi a+ 
      002432 CD 05 3B         [ 4]   73     CALL RFROM ; dlo dhi a+ cntr 
      002435 CD 0A EB         [ 4]   74     CALL ONEM 
      002438                         75     _BRAN 1$ ; dlo dhi a+ R: 
      002438 CD 04 B6         [ 4]    1     CALL BRAN 
      00243B 23 FE                    2     .word 1$ 
      00243D CD 05 87         [ 4]   76 4$: CALL DROP  ; dlo dhi a+ 
      002440 CD 0A EB         [ 4]   77     CALL ONEM  ; unget char 
      002443 CD 05 3B         [ 4]   78     CALL RFROM ; dlo dhi a+ cntr-
      002446                         79 5$:
      002446 81               [ 4]   80     RET 
                                     81 
                                     82 
                                     83 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     84 ;   NUMBER? (a -- s -1 |d -2 | a F )
                                     85 ;   convert string to integer 
                                     86 ;   double begin with '#' 
                                     87 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002447                         88     _HEADER NUMBQ,7,"NUMBER?"
      002447 23 A3                    1         .word LINK 
                           002449     2         LINK=.
      002449 07                       3         .byte 7  
      00244A 4E 55 4D 42 45 52 3F     4         .ascii "NUMBER?"
      002451                          5         NUMBQ:
                                     89 ; save current base value 
      002451 CD 06 61         [ 4]   90     CALL BASE 
      002454 CD 04 EA         [ 4]   91     CALL AT 
      002457 CD 05 5A         [ 4]   92     CALL TOR 
                                     93 ; initialize integer to 0     
      00245A 1D 00 04         [ 2]   94     SUBW X,#4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



      00245D 90 5F            [ 1]   95     CLRW Y 
      00245F FF               [ 2]   96     LDW (X),Y 
      002460 EF 02            [ 2]   97     LDW (2,X),Y ; a 0 0 R: base  
      002462                         98     _DOLIT 2 
      002462 CD 04 71         [ 4]    1     CALL DOLIT 
      002465 00 02                    2     .word 2 
      002467 CD 0B A3         [ 4]   99     CALL PICK  ; a 0 0 a R: base    
      00246A CD 0C 21         [ 4]  100     CALL COUNT ; a 0 0 a+ n 
                                    101 ; check for '#' double integer 
      00246D CD 05 BB         [ 4]  102     CALL OVER  ; a 0 0 a+ n a+
      002470 CD 05 08         [ 4]  103     CALL CAT   ; a 0 0 a+ n c 
      002473                        104     _DOLIT '#' ; a 0 0 a+ n c '#' 
      002473 CD 04 71         [ 4]    1     CALL DOLIT 
      002476 00 23                    2     .word '#' 
      002478 CD 08 61         [ 4]  105     CALL EQUAL 
      00247B CD 05 5A         [ 4]  106     CALL TOR   ; a 0 0 a+ n R: base d? 
      00247E CD 05 4E         [ 4]  107     CALL RAT   ; a 0 0 a+ n d? R: base d?
      002481                        108     _QBRAN NUMQ0
      002481 CD 04 9A         [ 4]    1     CALL QBRAN
      002484 24 92                    2     .word NUMQ0
                                    109 ; update a and count
      002486 CD 05 A1         [ 4]  110     CALL SWAPP 
      002489 CD 0A DE         [ 4]  111     CALL ONEP 
      00248C CD 05 A1         [ 4]  112     CALL SWAPP 
      00248F CD 0A EB         [ 4]  113     CALL ONEM  ; a 0 0 a+ n- R: base d?
                                    114 ; check for '$' hexadecimal  
      002492                        115 NUMQ0: 
      002492 CD 05 BB         [ 4]  116     CALL OVER   
      002495 CD 05 08         [ 4]  117     CALL CAT   
      002498                        118     _DOLIT '$'
      002498 CD 04 71         [ 4]    1     CALL DOLIT 
      00249B 00 24                    2     .word '$' 
      00249D CD 08 61         [ 4]  119     CALL EQUAL ; a 0 0 a+ n- f  
      0024A0                        120     _QBRAN NUMQ1 
      0024A0 CD 04 9A         [ 4]    1     CALL QBRAN
      0024A3 24 B4                    2     .word NUMQ1
      0024A5 CD 0D F0         [ 4]  121     CALL HEX   ; switch to hexadecimal base 
                                    122 ; update a and count 
      0024A8 CD 05 A1         [ 4]  123     CALL SWAPP 
      0024AB CD 0A DE         [ 4]  124     CALL ONEP 
      0024AE CD 05 A1         [ 4]  125     CALL SWAPP
      0024B1 CD 0A EB         [ 4]  126     CALL ONEM ; a 0 0 a+ n-  R: base d?
                                    127 ; check for minus sign 
      0024B4                        128 NUMQ1: 
      0024B4 CD 23 C6         [ 4]  129     CALL nsign 
      0024B7 CD 05 5A         [ 4]  130     CALL TOR ; R: base d? sign  
                                    131 ; check for end of string     
      0024BA CD 07 4E         [ 4]  132     CALL QDUP    ; a dlo dhi a+ cntr R: base d? sign 
      0024BD                        133     _QBRAN NUMQ4 ; yes , not a number 
      0024BD CD 04 9A         [ 4]    1     CALL QBRAN
      0024C0 24 FF                    2     .word NUMQ4
      0024C2 CD 23 FE         [ 4]  134     CALL parse_digits
      0024C5 CD 07 4E         [ 4]  135     CALL QDUP 
      0024C8 CD 05 DC         [ 4]  136     CALL ZEQUAL  
      0024CB                        137     _QBRAN NUMQ4 ; error not end of string  ( a dlo dhi a+ R: base d? sign )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      0024CB CD 04 9A         [ 4]    1     CALL QBRAN
      0024CE 24 FF                    2     .word NUMQ4
      0024D0 CD 05 87         [ 4]  138     CALL DROP  ; a dlo dhi 
      0024D3 CD 05 3B         [ 4]  139     CALL RFROM  ; a dlo dhi sign 
      0024D6                        140     _QBRAN NUMQ3
      0024D6 CD 04 9A         [ 4]    1     CALL QBRAN
      0024D9 24 DE                    2     .word NUMQ3
      0024DB CD 07 FD         [ 4]  141     CALL DNEGA
      0024DE                        142 NUMQ3: 
      0024DE CD 07 5F         [ 4]  143     CALL ROT ; dlo dhi a  R: base d?
      0024E1 CD 05 87         [ 4]  144     CALL DROP
      0024E4                        145     _DOLIT -2  ; double return -2 flag 
      0024E4 CD 04 71         [ 4]    1     CALL DOLIT 
      0024E7 FF FE                    2     .word -2 
      0024E9 CD 05 3B         [ 4]  146     CALL RFROM ; dlo dhi d? R: base 
      0024EC                        147     _TBRAN NUMQ8 
      0024EC CD 04 A8         [ 4]    1     CALL TBRAN 
      0024EF 25 08                    2     .word NUMQ8 
      0024F1 CD 05 A1         [ 4]  148     CALL SWAPP 
      0024F4 CD 05 87         [ 4]  149     CALL DROP
      0024F7 CD 0A DE         [ 4]  150     CALL ONEP   ; single return -1 flag   
      0024FA                        151     _BRAN NUMQ8
      0024FA CD 04 B6         [ 4]    1     CALL BRAN 
      0024FD 25 08                    2     .word NUMQ8 
      0024FF                        152 NUMQ4: ; not end of string error , ( a dlo dhi a+ cntr R: base d? sign )
                           000001   153 .if WANT_FLOAT
      0024FF CD 05 3B         [ 4]  154     CALL RFROM ; sign 
      002502 CD 05 3B         [ 4]  155     CALL RFROM ; d? 
      002505 CD 2E A6         [ 4]  156     CALL FLOATQ ; ( a dlo dhi a+ cntr sign d? )    
                           000000   157 .else 
                                    158     ADDW X,#4 ; drop dhi a+  , ( a dlo R: base d? sign ) 
                                    159     ADDW SP,#4 ; drop d? sign  R: base 
                                    160     CLRW Y 
                                    161     LDW (X),Y ; dlo replaced by 0 ( -- a 0 R: base ) 
                                    162 .endif 
                                    163 ; restore original base value     
      002508                        164 NUMQ8: 
      002508 CD 05 3B         [ 4]  165     CALL RFROM 
      00250B CD 06 61         [ 4]  166     CALL BASE 
      00250E CD 04 D3         [ 4]  167     CALL STORE 
      002511 81               [ 4]  168     RET 
                                    169 
                                    170 
                                    171 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    172 ;    D0= ( d -- 0|-1 )
                                    173 ;    check if double is 0 
                                    174 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002512                        175     _HEADER DZEQUAL,3,"D0="
      002512 24 49                    1         .word LINK 
                           002514     2         LINK=.
      002514 03                       3         .byte 3  
      002515 44 30 3D                 4         .ascii "D0="
      002518                          5         DZEQUAL:
      002518 CD 06 04         [ 4]  176     CALL ORR 
      00251B A6 FF            [ 1]  177     LD A,#0xFF
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      00251D 90 93            [ 1]  178     LDW Y,X
      00251F 90 FE            [ 2]  179     LDW Y,(Y)
      002521 90 A3 00 00      [ 2]  180     CPW Y,#0 
      002525 27 01            [ 1]  181     JREQ  ZEQ1
      002527 4F               [ 1]  182     CLR A   ;false
      002528                        183 ZEQ1:
      002528 F7               [ 1]  184     LD     (X),A
      002529 E7 01            [ 1]  185     LD (1,X),A
      00252B 81               [ 4]  186 	RET     
                                    187     
                                    188 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    189 ;  2NEGATE ( d -- d )
                                    190 ;  negate double (2's complement)
                                    191 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00252C                        192     _HEADER DNEGAT,7,"2NEGATE"
      00252C 25 14                    1         .word LINK 
                           00252E     2         LINK=.
      00252E 07                       3         .byte 7  
      00252F 32 4E 45 47 41 54 45     4         .ascii "2NEGATE"
      002536                          5         DNEGAT:
      002536 CD 07 DA         [ 4]  193     CALL INVER
      002539 CD 05 A1         [ 4]  194     CALL SWAPP 
      00253C CD 07 DA         [ 4]  195     CALL INVER 
      00253F 90 93            [ 1]  196     LDW  Y,X 
      002541 90 FE            [ 2]  197     LDW Y,(Y)
      002543 72 A9 00 01      [ 2]  198     ADDW Y,#1 
      002547 FF               [ 2]  199     LDW (X),Y 
      002548 24 0B            [ 1]  200     JRNC DNEG1 
      00254A 90 93            [ 1]  201     LDW Y,X 
      00254C 90 EE 02         [ 2]  202     LDW Y,(2,Y)
      00254F 72 A9 00 01      [ 2]  203     ADDW Y,#1
      002553 EF 02            [ 2]  204     LDW (2,X),Y 
      002555                        205 DNEG1:
      002555 CD 05 A1         [ 4]  206     CALL SWAPP 
      002558 81               [ 4]  207     RET      
                                    208 
                                    209 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    210 ;   DABS ( d -- d )
                                    211 ;   absolute value of double
                                    212 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002559                        213     _HEADER DABS,4,"DABS"
      002559 25 2E                    1         .word LINK 
                           00255B     2         LINK=.
      00255B 04                       3         .byte 4  
      00255C 44 41 42 53              4         .ascii "DABS"
      002560                          5         DABS:
      002560 CD 05 91         [ 4]  214     CALL DUPP 
      002563 CD 05 CA         [ 4]  215     CALL ZLESS 
      002566                        216     _QBRAN DABS1 
      002566 CD 04 9A         [ 4]    1     CALL QBRAN
      002569 25 6E                    2     .word DABS1
      00256B CD 07 FD         [ 4]  217     CALL DNEGA 
      00256E                        218 DABS1:
      00256E 81               [ 4]  219     RET 
                                    220 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



                                    221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    222 ;  DSIGN ( d -- d f )
                                    223 ;  sign of double 
                                    224 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00256F                        225     _HEADER DSIGN,5,"DSIGN"
      00256F 25 5B                    1         .word LINK 
                           002571     2         LINK=.
      002571 05                       3         .byte 5  
      002572 44 53 49 47 4E           4         .ascii "DSIGN"
      002577                          5         DSIGN:
      002577 A6 00            [ 1]  226     LD A,#0 
      002579 90 93            [ 1]  227     LDW Y,X 
      00257B 90 FE            [ 2]  228     LDW Y,(Y)
      00257D 2A 02            [ 1]  229     JRPL DSIGN1
      00257F A6 FF            [ 1]  230     LD A,#0XFF 
      002581                        231 DSIGN1:
      002581 1D 00 02         [ 2]  232     SUBW X,#2 
      002584 F7               [ 1]  233     LD (X),A 
      002585 E7 01            [ 1]  234     LD (1,X),A 
      002587 81               [ 4]  235     RET 
                                    236 
                                    237 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    238 ;   D/MOD ( d s - r qd )
                                    239 ;   unsigned divide double by single 
                                    240 ;   return double quotient 
                                    241 ;   and single remainder 
                                    242 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002588                        243     _HEADER DSLMOD,5,"D/MOD"
      002588 25 71                    1         .word LINK 
                           00258A     2         LINK=.
      00258A 05                       3         .byte 5  
      00258B 44 2F 4D 4F 44           4         .ascii "D/MOD"
      002590                          5         DSLMOD:
      002590 90 93            [ 1]  244         LDW     Y,X             ; stack pointer to Y
      002592 FE               [ 2]  245         LDW     X,(X)           ; un
      002593 BF 26            [ 2]  246         LDW     YTEMP,X         ; save un
      002595 93               [ 1]  247         LDW     X,Y
      002596 89               [ 2]  248         PUSHW   X               ; save stack pointer
      002597 90 89            [ 2]  249         PUSHW   Y 
      002599 EE 02            [ 2]  250         LDW     X,(2,X)           ; X=udh
      00259B 90 BE 26         [ 2]  251         LDW     Y,YTEMP         ; divisor 
      00259E 65               [ 2]  252         DIVW    X,Y 
      00259F BF 24            [ 2]  253         LDW     XTEMP,X         ; QUOTIENT hi 
      0025A1 93               [ 1]  254         LDW     X,Y             ; remainder in X 
      0025A2 90 85            [ 2]  255         POPW    Y 
      0025A4 90 EE 04         [ 2]  256         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      0025A7 A6 10            [ 1]  257         LD      A,#16           ; loop count
      0025A9 90 58            [ 2]  258         SLLW    Y               ; udl shift udl into udh
      0025AB                        259 DSLMOD3:
      0025AB 59               [ 2]  260         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      0025AC 25 04            [ 1]  261         JRC     DSLMODa         ; if carry out of rotate
      0025AE B3 26            [ 2]  262         CPW     X,YTEMP         ; compare udh to un
      0025B0 25 05            [ 1]  263         JRULT   DSLMOD4         ; can't subtract
      0025B2                        264 DSLMODa:
      0025B2 72 B0 00 26      [ 2]  265         SUBW    X,YTEMP         ; can subtract
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      0025B6 98               [ 1]  266         RCF
      0025B7                        267 DSLMOD4:
      0025B7 8C               [ 1]  268         CCF                     ; quotient bit
      0025B8 90 59            [ 2]  269         RLCW    Y               ; rotate into quotient, rotate out udl
      0025BA 4A               [ 1]  270         DEC     A               ; repeat
      0025BB 26 EE            [ 1]  271         JRNE    DSLMOD3           ; if A == 0
      0025BD                        272 DSLMODb:
      0025BD BF 26            [ 2]  273         LDW     YTEMP,X         ; done, save remainder
      0025BF 85               [ 2]  274         POPW    X               ; restore stack pointer
      0025C0 EF 02            [ 2]  275         LDW     (2,X),Y           ; save quotient low 
      0025C2 90 BE 24         [ 2]  276         LDW     Y,XTEMP         ; quotient hi 
      0025C5 FF               [ 2]  277         LDW     (X),Y           ; save quotient hi 
      0025C6 90 BE 26         [ 2]  278         LDW     Y,YTEMP         ; remainder onto stack
      0025C9 EF 04            [ 2]  279         LDW     (4,X),Y
      0025CB 81               [ 4]  280         RET 
                                    281 
                                    282 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    283 ;   D# ( d -- d )
                                    284 ;   extract least digit 
                                    285 ;   from double integer 
                                    286 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0025CC                        287     _HEADER DDIG,2,"D#"
      0025CC 25 8A                    1         .word LINK 
                           0025CE     2         LINK=.
      0025CE 02                       3         .byte 2  
      0025CF 44 23                    4         .ascii "D#"
      0025D1                          5         DDIG:
      0025D1 CD 06 61         [ 4]  288     CALL BASE 
      0025D4 CD 04 EA         [ 4]  289     CALL AT 
      0025D7 CD 25 90         [ 4]  290     CALL DSLMOD
      0025DA CD 07 5F         [ 4]  291     CALL ROT   
      0025DD CD 0D 19         [ 4]  292     CALL DIGIT 
      0025E0 CD 0D 65         [ 4]  293     CALL HOLD 
      0025E3 81               [ 4]  294     RET 
                                    295 
                                    296 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    297 ;    D#S ( d -- s )
                                    298 ;   extract digit from double 
                                    299 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0025E4                        300     _HEADER DDIGS,3,"D#S"
      0025E4 25 CE                    1         .word LINK 
                           0025E6     2         LINK=.
      0025E6 03                       3         .byte 3  
      0025E7 44 23 53                 4         .ascii "D#S"
      0025EA                          5         DDIGS:
      0025EA CD 25 D1         [ 4]  301     CALL    DDIG 
      0025ED CD 07 AB         [ 4]  302     CALL    DDUP 
      0025F0 CD 25 18         [ 4]  303     CALL    DZEQUAL
      0025F3                        304     _QBRAN  DDIGS 
      0025F3 CD 04 9A         [ 4]    1     CALL QBRAN
      0025F6 25 EA                    2     .word DDIGS
      0025F8 CD 05 87         [ 4]  305     CALL    DROP 
      0025FB 81               [ 4]  306     RET 
                                    307 
                                    308 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



                                    309 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    310 ;   D. ( d -- )
                                    311 ;   display double integer 
                                    312 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0025FC                        313     _HEADER DDOT,2,"D."
      0025FC 25 E6                    1         .word LINK 
                           0025FE     2         LINK=.
      0025FE 02                       3         .byte 2  
      0025FF 44 2E                    4         .ascii "D."
      002601                          5         DDOT:
      002601 CD 0E 91         [ 4]  314     CALL SPACE 
      002604 CD 25 77         [ 4]  315     CALL DSIGN 
      002607 CD 05 5A         [ 4]  316     CALL TOR
      00260A CD 05 4E         [ 4]  317     CALL RAT 
      00260D                        318     _QBRAN DDOT0
      00260D CD 04 9A         [ 4]    1     CALL QBRAN
      002610 26 15                    2     .word DDOT0
      002612 CD 07 FD         [ 4]  319     CALL DNEGA 
      002615                        320 DDOT0:     
      002615 CD 0D 55         [ 4]  321     CALL BDIGS 
      002618 CD 25 EA         [ 4]  322     CALL DDIGS 
      00261B CD 05 3B         [ 4]  323     CALL RFROM 
      00261E                        324     _QBRAN DDOT1 
      00261E CD 04 9A         [ 4]    1     CALL QBRAN
      002621 26 2B                    2     .word DDOT1
      002623                        325     _DOLIT '-' 
      002623 CD 04 71         [ 4]    1     CALL DOLIT 
      002626 00 2D                    2     .word '-' 
      002628 CD 0D 65         [ 4]  326     CALL HOLD 
      00262B                        327 DDOT1: 
      00262B CD 0D BA         [ 4]  328     CALL EDIGS 
      00262E CD 0E BB         [ 4]  329     CALL TYPES     
      002631 81               [ 4]  330     RET 
                                    331 
                                    332 
                                    333 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    334 ; multiply double by single 
                                    335 ; return double 
                                    336 ;  ( d s -- d )
                                    337 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002632                        338     _HEADER DSSTAR,3,"DS*"
      002632 25 FE                    1         .word LINK 
                           002634     2         LINK=.
      002634 03                       3         .byte 3  
      002635 44 53 2A                 4         .ascii "DS*"
      002638                          5         DSSTAR:
                                    339 ;DSSTAR:
      002638 CD 05 5A         [ 4]  340     CALL TOR
      00263B CD 05 91         [ 4]  341     CALL DUPP 
      00263E CD 05 CA         [ 4]  342     CALL ZLESS
      002641 CD 05 91         [ 4]  343     CALL DUPP 
      002644 CD 05 5A         [ 4]  344     CALL TOR 
      002647                        345     _QBRAN DSSTAR1 
      002647 CD 04 9A         [ 4]    1     CALL QBRAN
      00264A 26 4F                    2     .word DSSTAR1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



      00264C CD 07 FD         [ 4]  346     CALL DNEGA 
      00264F                        347 DSSTAR1:
      00264F CD 05 3B         [ 4]  348     CALL RFROM 
      002652 CD 07 7E         [ 4]  349     CALL NROT       
      002655 CD 05 A1         [ 4]  350     CALL SWAPP 
      002658 CD 05 4E         [ 4]  351     CALL RAT 
      00265B CD 0A 13         [ 4]  352     CALL UMSTA
      00265E CD 07 5F         [ 4]  353     CALL ROT 
      002661 CD 05 3B         [ 4]  354     CALL RFROM 
      002664 CD 0A 13         [ 4]  355     CALL UMSTA 
      002667 CD 05 87         [ 4]  356     CALL DROP ; DROP OVERFLOW 
      00266A CD 07 C0         [ 4]  357     CALL PLUS 
      00266D CD 07 5F         [ 4]  358     CALL ROT 
      002670                        359     _QBRAN DSSTAR3 
      002670 CD 04 9A         [ 4]    1     CALL QBRAN
      002673 26 78                    2     .word DSSTAR3
      002675 CD 07 FD         [ 4]  360     CALL DNEGA 
      002678                        361 DSSTAR3:
      002678 81               [ 4]  362     RET 
                                    363 
                                    364 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    365 ;  2SWAP ( d1 d2 -- d2 d1 )
                                    366 ;  swap double 
                                    367 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002679                        368     _HEADER DSWAP,5,"2SWAP"
      002679 26 34                    1         .word LINK 
                           00267B     2         LINK=.
      00267B 05                       3         .byte 5  
      00267C 32 53 57 41 50           4         .ascii "2SWAP"
      002681                          5         DSWAP:
      002681 90 93            [ 1]  369     LDW Y,X 
      002683 90 FE            [ 2]  370     LDW Y,(Y)
      002685 90 BF 26         [ 2]  371     LDW YTEMP,Y ; d2 hi 
      002688 90 93            [ 1]  372     LDW Y,X 
      00268A 90 EE 02         [ 2]  373     LDW Y,(2,Y)
      00268D 90 BF 24         [ 2]  374     LDW XTEMP,Y  ; d2 lo 
      002690 90 93            [ 1]  375     LDW Y,X 
      002692 90 EE 04         [ 2]  376     LDW Y,(4,Y)  ; d1 hi 
      002695 FF               [ 2]  377     LDW (X),Y 
      002696 90 93            [ 1]  378     LDW Y,X
      002698 90 EE 06         [ 2]  379     LDW Y,(6,Y)  ; d1 lo 
      00269B EF 02            [ 2]  380     LDW (2,X),Y
      00269D 90 BE 26         [ 2]  381     LDW Y,YTEMP  
      0026A0 EF 04            [ 2]  382     LDW (4,X),Y 
      0026A2 90 BE 24         [ 2]  383     LDW Y,XTEMP 
      0026A5 EF 06            [ 2]  384     LDW (6,X),Y 
      0026A7 81               [ 4]  385     RET 
                                    386 
                                    387 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    388 ;    DCLZ ( d -- u )
                                    389 ;    double count leading zeros
                                    390 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026A8                        391     _HEADER DCLZ,4,"DCLZ"
      0026A8 26 7B                    1         .word LINK 
                           0026AA     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      0026AA 04                       3         .byte 4  
      0026AB 44 43 4C 5A              4         .ascii "DCLZ"
      0026AF                          5         DCLZ:
      0026AF 4F               [ 1]  392     CLR A 
      0026B0 90 93            [ 1]  393     LDW Y,X 
      0026B2 90 FE            [ 2]  394     LDW Y,(Y)
      0026B4 2B 18            [ 1]  395     JRMI DCLZ8 ; no leading zero 
      0026B6 27 09            [ 1]  396     JREQ DCLZ4 ; >=16 
      0026B8                        397 DCLZ1: ; <16
      0026B8 90 58            [ 2]  398     SLLW Y
      0026BA 4C               [ 1]  399     INC A 
      0026BB 90 5D            [ 2]  400     TNZW Y 
      0026BD 2B 0F            [ 1]  401     JRMI DCLZ8
      0026BF 20 F7            [ 2]  402     JRA DCLZ1 
      0026C1                        403 DCLZ4:
      0026C1 A6 10            [ 1]  404     LD A,#16 
      0026C3 90 93            [ 1]  405     LDW Y,X 
      0026C5 90 EE 02         [ 2]  406     LDW Y,(2,Y)
      0026C8 2B 04            [ 1]  407     JRMI DCLZ8 
      0026CA 26 EC            [ 1]  408     JRNE DCLZ1 
      0026CC AB 10            [ 1]  409     ADD A,#16
      0026CE                        410 DCLZ8: 
      0026CE 1C 00 02         [ 2]  411     ADDW X,#2 
      0026D1 90 5F            [ 1]  412     CLRW Y 
      0026D3 90 97            [ 1]  413     LD YL,A 
      0026D5 FF               [ 2]  414     LDW (X),Y 
      0026D6 81               [ 4]  415     RET 
                                    416 
                                    417 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    418 ;   2<ROT ( d1 d2 d3 -- d3 d1 d2 )
                                    419 ;   rotate left doubles 
                                    420 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026D7                        421     _HEADER NDROT,5,"2<ROT"
      0026D7 26 AA                    1         .word LINK 
                           0026D9     2         LINK=.
      0026D9 05                       3         .byte 5  
      0026DA 32 3C 52 4F 54           4         .ascii "2<ROT"
      0026DF                          5         NDROT:
                                    422 ; save d3 in temp 
      0026DF 90 93            [ 1]  423     LDW Y,X 
      0026E1 90 FE            [ 2]  424     LDW Y,(Y)
      0026E3 90 BF 26         [ 2]  425     LDW YTEMP,Y  ; d3 hi 
      0026E6 90 93            [ 1]  426     LDW Y,X 
      0026E8 90 EE 02         [ 2]  427     LDW Y,(2,Y)
      0026EB 90 BF 24         [ 2]  428     LDW XTEMP,Y  ; d3 lo 
                                    429 ; put d2 in d1 slot 
      0026EE 90 93            [ 1]  430     LDW Y,X 
      0026F0 90 EE 04         [ 2]  431     LDW Y,(4,Y) 
      0026F3 FF               [ 2]  432     LDW (X),Y   ; d2 hi 
      0026F4 90 93            [ 1]  433     LDW Y,X 
      0026F6 90 EE 06         [ 2]  434     LDW Y,(6,Y)
      0026F9 EF 02            [ 2]  435     LDW (2,X),Y ; d2 lo
                                    436 ; put d1 in d2 slot 
      0026FB 90 93            [ 1]  437     LDW Y,X 
      0026FD 90 EE 08         [ 2]  438     LDW Y,(8,Y) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      002700 EF 04            [ 2]  439     LDW (4,X),Y ; d1 hi 
      002702 90 93            [ 1]  440     LDW Y,X 
      002704 90 EE 0A         [ 2]  441     LDW Y,(10,Y)
      002707 EF 06            [ 2]  442     LDW (6,X),Y  ; d1 lo 
                                    443 ; put d3 in d1 slot 
      002709 90 BE 26         [ 2]  444     LDW Y,YTEMP 
      00270C EF 08            [ 2]  445     LDW (8,X),Y  ; d3 hi 
      00270E 90 BE 24         [ 2]  446     LDW Y,XTEMP 
      002711 EF 0A            [ 2]  447     LDW (10,X),Y  ; d3 lo 
      002713 81               [ 4]  448     RET 
                                    449 
                                    450 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    451 ;   2ROT ( d1 d2 d3 -- d2 d3 d1 )
                                    452 ;   rotate right doubles 
                                    453 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002714                        454     _HEADER DROT,4,"2ROT"
      002714 26 D9                    1         .word LINK 
                           002716     2         LINK=.
      002716 04                       3         .byte 4  
      002717 32 52 4F 54              4         .ascii "2ROT"
      00271B                          5         DROT:
                                    455 ; save d3 in temp 
      00271B 90 93            [ 1]  456     LDW Y,X 
      00271D 90 FE            [ 2]  457     LDW Y,(Y)
      00271F 90 BF 26         [ 2]  458     LDW YTEMP,Y ; d3 hi 
      002722 90 93            [ 1]  459     LDW Y,X 
      002724 90 EE 02         [ 2]  460     LDW Y,(2,Y)
      002727 90 BF 24         [ 2]  461     LDW XTEMP,Y ; d3 lo 
                                    462 ; put d1 in d3 slot 
      00272A 90 93            [ 1]  463     LDW Y,X 
      00272C 90 EE 08         [ 2]  464     LDW Y,(8,Y)
      00272F FF               [ 2]  465     LDW (X),Y  ; d1 hi 
      002730 90 93            [ 1]  466     LDW Y,X 
      002732 90 EE 0A         [ 2]  467     LDW Y,(10,Y) 
      002735 EF 02            [ 2]  468     LDW (2,X),Y ; d1 lo 
                                    469 ; put d2 in d1 slot 
      002737 90 93            [ 1]  470     LDW Y,X 
      002739 90 EE 04         [ 2]  471     LDW Y,(4,Y) ; d2 hi 
      00273C EF 08            [ 2]  472     LDW (8,X),Y 
      00273E 90 93            [ 1]  473     LDW Y,X 
      002740 90 EE 06         [ 2]  474     LDW Y,(6,Y) ; d2 lo 
      002743 EF 0A            [ 2]  475     LDW (10,X),Y 
                                    476 ; put d3 in d2 slot 
      002745 90 BE 26         [ 2]  477     LDW Y,YTEMP 
      002748 EF 04            [ 2]  478     LDW (4,X),Y 
      00274A 90 BE 24         [ 2]  479     LDW Y,XTEMP 
      00274D EF 06            [ 2]  480     LDW (6,X),Y 
      00274F 81               [ 4]  481     RET 
                                    482 
                                    483 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    484 ;   D= ( d1 d2 -- f )
                                    485 ;   d1==d2?
                                    486 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002750                        487     _HEADER DEQUAL,2,"D="
      002750 27 16                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



                           002752     2         LINK=.
      002752 02                       3         .byte 2  
      002753 44 3D                    4         .ascii "D="
      002755                          5         DEQUAL:
      002755 A6 00            [ 1]  488     LD A,#0 
      002757 90 93            [ 1]  489     LDW Y,X 
      002759 90 FE            [ 2]  490     LDW Y,(Y)
      00275B E3 04            [ 2]  491     CPW Y,(4,X)
      00275D 26 0B            [ 1]  492     JRNE DEQU4 
      00275F 90 93            [ 1]  493     LDW Y,X 
      002761 90 EE 02         [ 2]  494     LDW Y,(2,Y)
      002764 E3 06            [ 2]  495     CPW Y,(6,X)
      002766 26 02            [ 1]  496     JRNE DEQU4 
      002768 A6 FF            [ 1]  497     LD A,#0XFF
      00276A                        498 DEQU4:
      00276A 1C 00 06         [ 2]  499     ADDW X,#6
      00276D F7               [ 1]  500     LD (X),A 
      00276E E7 01            [ 1]  501     LD (1,X),A 
      002770 81               [ 4]  502     RET 
                                    503 
                                    504 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    505 ;   D> ( d1 d2 -- f )
                                    506 ;   d1>d2?
                                    507 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002771                        508     _HEADER DGREAT,2,"D>"
      002771 27 52                    1         .word LINK 
                           002773     2         LINK=.
      002773 02                       3         .byte 2  
      002774 44 3E                    4         .ascii "D>"
      002776                          5         DGREAT:
      002776 A6 FF            [ 1]  509     LD A,#0XFF 
      002778 90 93            [ 1]  510     LDW Y,X 
      00277A 90 EE 04         [ 2]  511     LDW Y,(4,Y)  ; d1 hi 
      00277D F3               [ 2]  512     CPW Y,(X)    ; d2 hi 
      00277E 2C 0B            [ 1]  513     JRSGT DGREAT4 
      002780 90 93            [ 1]  514     LDW Y,X 
      002782 90 EE 06         [ 2]  515     LDW Y,(6,Y)
      002785 E3 02            [ 2]  516     CPW Y,(2,X)
      002787 22 02            [ 1]  517     JRUGT DGREAT4 
      002789 A6 00            [ 1]  518     LD A,#0
      00278B                        519 DGREAT4:
      00278B 1C 00 06         [ 2]  520     ADDW X,#6
      00278E F7               [ 1]  521     LD (X),A 
      00278F E7 01            [ 1]  522     LD (1,X),A 
      002791 81               [ 4]  523     RET
                                    524 
                                    525 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    526 ;   D< ( d1 d2 -- f )
                                    527 ;   d1<d2? 
                                    528 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002792                        529     _HEADER DLESS,2,"D<"
      002792 27 73                    1         .word LINK 
                           002794     2         LINK=.
      002794 02                       3         .byte 2  
      002795 44 3C                    4         .ascii "D<"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      002797                          5         DLESS:
      002797 CD 2A F7         [ 4]  530     CALL DSUB
      00279A                        531     _DOLIT 0 
      00279A CD 04 71         [ 4]    1     CALL DOLIT 
      00279D 00 00                    2     .word 0 
      00279F CD 07 7E         [ 4]  532     CALL NROT  
      0027A2 CD 27 B4         [ 4]  533     CALL DZLESS 
      0027A5                        534     _QBRAN DLESS4
      0027A5 CD 04 9A         [ 4]    1     CALL QBRAN
      0027A8 27 AD                    2     .word DLESS4
      0027AA CD 07 DA         [ 4]  535     CALL INVER  
      0027AD                        536 DLESS4:
      0027AD 81               [ 4]  537     RET
                                    538 
                                    539 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    540 ;  D0< ( d -- f )
                                    541 ;  d<0? 
                                    542 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027AE                        543     _HEADER DZLESS,3,"D0<"
      0027AE 27 94                    1         .word LINK 
                           0027B0     2         LINK=.
      0027B0 03                       3         .byte 3  
      0027B1 44 30 3C                 4         .ascii "D0<"
      0027B4                          5         DZLESS:
      0027B4 A6 00            [ 1]  544     LD A,#0 
      0027B6 90 93            [ 1]  545     LDW Y,X 
      0027B8 90 FE            [ 2]  546     LDW Y,(Y)
      0027BA 2A 02            [ 1]  547     JRPL DZLESS1 
      0027BC A6 FF            [ 1]  548     LD A,#0XFF 
      0027BE                        549 DZLESS1:
      0027BE 1C 00 02         [ 2]  550     ADDW X,#2 
      0027C1 F7               [ 1]  551     LD (X),A 
      0027C2 E7 01            [ 1]  552     LD (1,X),A    
      0027C4 81               [ 4]  553     RET 
                                    554 
                                    555 
                                    556 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    557 ;  DCMP ( d1 d2 -- d1 d2 -1|0|1 )
                                    558 ; compare 2 doubles 
                                    559 ; keep the doubles 
                                    560 ; return flag: 
                                    561 ;    -1 if d1<d2 
                                    562 ;     0 if d1==d2
                                    563 ;     1 if d1>d2 
                                    564 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027C5                        565     _HEADER DCMP,4,"DCMP"
      0027C5 27 B0                    1         .word LINK 
                           0027C7     2         LINK=.
      0027C7 04                       3         .byte 4  
      0027C8 44 43 4D 50              4         .ascii "DCMP"
      0027CC                          5         DCMP:
      0027CC 90 93            [ 1]  566     LDW Y,X 
      0027CE 90 EE 04         [ 2]  567     LDW Y,(4,Y)
      0027D1 F3               [ 2]  568     CPW Y,(X) 
      0027D2 27 04            [ 1]  569     JREQ DCMP2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



      0027D4 2F 13            [ 1]  570     JRSLT DCMP_SMALL 
      0027D6 20 17            [ 2]  571     JRA  DCMP_GREAT 
      0027D8                        572 DCMP2:    
      0027D8 90 93            [ 1]  573     LDW Y,X 
      0027DA 90 EE 06         [ 2]  574     LDW Y,(6,Y)
      0027DD E3 02            [ 2]  575     CPW Y,(2,X)
      0027DF 27 04            [ 1]  576     JREQ DCMP_EQUAL  
      0027E1 25 06            [ 1]  577     JRULT DCMP_SMALL 
      0027E3 20 0A            [ 2]  578     JRA DCMP_GREAT
      0027E5                        579 DCMP_EQUAL:
      0027E5 90 5F            [ 1]  580     CLRW Y 
      0027E7 20 0A            [ 2]  581     JRA DCMP4 
      0027E9                        582 DCMP_SMALL:
      0027E9 90 AE FF FF      [ 2]  583     LDW Y,#-1 
      0027ED 20 04            [ 2]  584     JRA DCMP4 
      0027EF                        585 DCMP_GREAT:
      0027EF 90 AE 00 01      [ 2]  586     LDW Y,#1
      0027F3                        587 DCMP4:
      0027F3 1D 00 02         [ 2]  588     SUBW X,#2 
      0027F6 FF               [ 2]  589     LDW (X),Y 
      0027F7 81               [ 4]  590     RET
                                    591 
                                    592 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    593 ;   2>R ( d -- R: d )
                                    594 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027F8                        595     _HEADER DTOR,3,"2>R"
      0027F8 27 C7                    1         .word LINK 
                           0027FA     2         LINK=.
      0027FA 03                       3         .byte 3  
      0027FB 32 3E 52                 4         .ascii "2>R"
      0027FE                          5         DTOR:
      0027FE 90 85            [ 2]  596     POPW Y 
      002800 90 BF 26         [ 2]  597     LDW YTEMP,Y 
      002803 90 93            [ 1]  598     LDW Y,X 
      002805 90 EE 02         [ 2]  599     LDW Y,(2,Y)
      002808 90 89            [ 2]  600     PUSHW Y   ; d low 
      00280A 90 93            [ 1]  601     LDW Y,X 
      00280C 90 FE            [ 2]  602     LDW Y,(Y)
      00280E 90 89            [ 2]  603     PUSHW Y   ; d hi 
      002810 1C 00 04         [ 2]  604     ADDW X,#4  
      002813 92 CC 26         [ 5]  605     JP [YTEMP]
                                    606 
                                    607 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    608 ;  2R> ( -- d ) R: d --      
                                    609 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002816                        610     _HEADER DRFROM,3,"2R>"
      002816 27 FA                    1         .word LINK 
                           002818     2         LINK=.
      002818 03                       3         .byte 3  
      002819 32 52 3E                 4         .ascii "2R>"
      00281C                          5         DRFROM:
      00281C 90 85            [ 2]  611     POPW Y      ; d hi 
      00281E 90 BF 26         [ 2]  612     LDW YTEMP,Y 
      002821 1D 00 04         [ 2]  613     SUBW X,#4
      002824 90 85            [ 2]  614     POPW Y       ; d hi 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



      002826 FF               [ 2]  615     LDW (X),Y 
      002827 90 85            [ 2]  616     POPW Y       ; d low  
      002829 EF 02            [ 2]  617     LDW (2,X),Y 
      00282B 92 CC 26         [ 5]  618     JP [YTEMP]
                                    619     
                                    620 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    621 ;   2R@ ( -- d )
                                    622 ;   fecth a double from RSTACK
                                    623 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00282E                        624     _HEADER DRAT,3,"2R@"
      00282E 28 18                    1         .word LINK 
                           002830     2         LINK=.
      002830 03                       3         .byte 3  
      002831 32 52 40                 4         .ascii "2R@"
      002834                          5         DRAT:
      002834 90 85            [ 2]  625     POPW Y 
      002836 90 BF 26         [ 2]  626     LDW YTEMP,Y 
      002839 1D 00 04         [ 2]  627     SUBW X,#4 
      00283C 16 01            [ 2]  628     LDW Y,(1,SP)
      00283E FF               [ 2]  629     LDW (X),Y 
      00283F 16 03            [ 2]  630     LDW Y,(3,SP)
      002841 EF 02            [ 2]  631     LDW (2,X),Y 
      002843 92 CC 26         [ 5]  632     JP [YTEMP]
                                    633 
                                    634 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    635 ;  2VARIABLE <name> 
                                    636 ;  create a double variable 
                                    637 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002846                        638     _HEADER DVARIA,9,"2VARIABLE"
      002846 28 30                    1         .word LINK 
                           002848     2         LINK=.
      002848 09                       3         .byte 9  
      002849 32 56 41 52 49 41 42     4         .ascii "2VARIABLE"
             4C 45
      002852                          5         DVARIA:
      002852 CD 0C 38         [ 4]  639         CALL HERE
      002855 CD 05 91         [ 4]  640         CALL DUPP
      002858                        641         _DOLIT 4  
      002858 CD 04 71         [ 4]    1     CALL DOLIT 
      00285B 00 04                    2     .word 4 
      00285D CD 07 C0         [ 4]  642         CALL PLUS 
      002860 CD 06 F2         [ 4]  643         CALL VPP 
      002863 CD 04 D3         [ 4]  644         CALL STORE
      002866 CD 18 20         [ 4]  645         CALL CREAT
      002869 CD 05 91         [ 4]  646         CALL DUPP
      00286C CD 14 92         [ 4]  647         CALL COMMA
      00286F CD 0B 4A         [ 4]  648         CALL ZERO
      002872 CD 05 BB         [ 4]  649         CALL OVER 
      002875 CD 04 D3         [ 4]  650         CALL STORE 
      002878 CD 0B 4A         [ 4]  651         CALL ZERO 
      00287B CD 05 A1         [ 4]  652         CALL SWAPP 
      00287E CD 04 D3         [ 4]  653         CALL STORE
      002881 CD 21 26         [ 4]  654         CALL FMOVE ; move definition to FLASH
      002884 CD 07 4E         [ 4]  655         CALL QDUP 
      002887 CD 04 9A         [ 4]  656         CALL QBRAN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



      00288A 18 6D                  657         .word SET_RAMLAST   
      00288C CD 1B CE         [ 4]  658         call UPDATVP  ; don't update if variable kept in RAM.
      00288F CD 21 BA         [ 4]  659         CALL UPDATPTR
      002892 81               [ 4]  660         RET         
                                    661 
                                    662 
                                    663 
                                    664 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    665 ;  2LITERAL ( d -- )
                                    666 ;  compile double literal 
                                    667 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002893                        668     _HEADER DLITER,IMEDD+8,"2LITERAL"
      002893 28 48                    1         .word LINK 
                           002895     2         LINK=.
      002895 88                       3         .byte IMEDD+8  
      002896 32 4C 49 54 45 52 41     4         .ascii "2LITERAL"
             4C
      00289E                          5         DLITER:
      00289E CD 14 D7         [ 4]  669     CALL COMPI 
      0028A1 28 A9                  670     .word do2lit 
      0028A3 CD 14 92         [ 4]  671     CALL COMMA 
      0028A6 CC 14 92         [ 2]  672     JP   COMMA 
                                    673 
                                    674 
                                    675 ; runtime for 2LITERAL 
      0028A9                        676 do2lit:
      0028A9 1D 00 04         [ 2]  677     SUBW X,#4 
      0028AC 16 01            [ 2]  678     LDW Y,(1,SP)
      0028AE 90 FE            [ 2]  679     LDW Y,(Y)
      0028B0 FF               [ 2]  680     LDW (X),Y 
      0028B1 16 01            [ 2]  681     LDW Y,(1,SP)
      0028B3 90 EE 02         [ 2]  682     LDW Y,(2,Y)
      0028B6 EF 02            [ 2]  683     LDW (2,X),Y 
      0028B8 90 85            [ 2]  684     POPW Y 
      0028BA 90 EC 04         [ 2]  685     JP (4,Y)
                                    686 
                                    687 
                                    688 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    689 ;   2OVER ( d1 d2 -- d1 d2 d1 )
                                    690 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028BD                        691     _HEADER DOVER,5,"2OVER"
      0028BD 28 95                    1         .word LINK 
                           0028BF     2         LINK=.
      0028BF 05                       3         .byte 5  
      0028C0 32 4F 56 45 52           4         .ascii "2OVER"
      0028C5                          5         DOVER:
      0028C5 90 93            [ 1]  692     LDW Y,X 
      0028C7 1D 00 04         [ 2]  693     SUBW X,#4 
      0028CA 90 89            [ 2]  694     PUSHW Y 
      0028CC 90 EE 04         [ 2]  695     LDW Y,(4,Y)  ; d1 hi 
      0028CF FF               [ 2]  696     LDW (X),Y 
      0028D0 90 85            [ 2]  697     POPW Y 
      0028D2 90 EE 06         [ 2]  698     LDW Y,(6,Y)  ;d1 lo 
      0028D5 EF 02            [ 2]  699     LDW (2,X),Y 
      0028D7 81               [ 4]  700     RET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



                                    701 
                                    702 
                                    703 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    704 ;   D2/ ( d -- d/2 )
                                    705 ;   divide double by 2 
                                    706 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028D8                        707     _HEADER D2SLASH,3,"D2/"
      0028D8 28 BF                    1         .word LINK 
                           0028DA     2         LINK=.
      0028DA 03                       3         .byte 3  
      0028DB 44 32 2F                 4         .ascii "D2/"
      0028DE                          5         D2SLASH:
      0028DE 90 93            [ 1]  708     LDW Y,X 
      0028E0 90 FE            [ 2]  709     LDW Y,(Y)
      0028E2 90 57            [ 2]  710     SRAW Y 
      0028E4 FF               [ 2]  711     LDW (X),Y 
      0028E5 90 93            [ 1]  712     LDW Y,X 
      0028E7 90 EE 02         [ 2]  713     LDW Y,(2,Y)
      0028EA 90 56            [ 2]  714     RRCW Y 
      0028EC EF 02            [ 2]  715     LDW (2,X),Y 
      0028EE 81               [ 4]  716     RET
                                    717 
                                    718 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    719 ;  D2* ( d -- d*2 )
                                    720 ;  multiply double by 2 
                                    721 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028EF                        722     _HEADER D2STAR,3,"D2*"
      0028EF 28 DA                    1         .word LINK 
                           0028F1     2         LINK=.
      0028F1 03                       3         .byte 3  
      0028F2 44 32 2A                 4         .ascii "D2*"
      0028F5                          5         D2STAR:
      0028F5 90 93            [ 1]  723     LDW Y,X 
      0028F7 90 EE 02         [ 2]  724     LDW Y,(2,Y)
      0028FA 98               [ 1]  725     RCF 
      0028FB 90 59            [ 2]  726     RLCW Y 
      0028FD EF 02            [ 2]  727     LDW (2,X),Y 
      0028FF 90 93            [ 1]  728     LDW Y,X 
      002901 90 FE            [ 2]  729     LDW Y,(Y)
      002903 90 59            [ 2]  730     RLCW Y 
      002905 FF               [ 2]  731     LDW (X),Y 
      002906 81               [ 4]  732     RET 
                                    733 
                                    734 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    735 ;   DLSHIFT ( d n -- d )
                                    736 ;   left shift double 
                                    737 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002907                        738     _HEADER DLSHIFT,7,"DLSHIFT"
      002907 28 F1                    1         .word LINK 
                           002909     2         LINK=.
      002909 07                       3         .byte 7  
      00290A 44 4C 53 48 49 46 54     4         .ascii "DLSHIFT"
      002911                          5         DLSHIFT:
      002911 E6 01            [ 1]  739     LD A,(1,X) ; shift count 
      002913 1C 00 02         [ 2]  740     ADDW X,#2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



      002916 90 93            [ 1]  741     LDW Y,X 
      002918 90 FE            [ 2]  742     LDW Y,(Y)
      00291A 90 BF 26         [ 2]  743     LDW YTEMP,Y  ; d hi 
      00291D 90 93            [ 1]  744     LDW Y,X 
      00291F 90 EE 02         [ 2]  745     LDW Y,(2,Y)  ; d low 
      002922                        746 DLSHIFT1:
      002922 4D               [ 1]  747     TNZ A 
      002923 27 12            [ 1]  748     JREQ DLSHIFT2 
      002925 98               [ 1]  749     RCF 
      002926 90 59            [ 2]  750     RLCW Y 
      002928 90 89            [ 2]  751     PUSHW Y 
      00292A 90 BE 26         [ 2]  752     LDW Y,YTEMP 
      00292D 90 59            [ 2]  753     RLCW Y 
      00292F 90 BF 26         [ 2]  754     LDW YTEMP,Y 
      002932 90 85            [ 2]  755     POPW Y 
      002934 4A               [ 1]  756     DEC A 
      002935 20 EB            [ 2]  757     JRA DLSHIFT1 
      002937                        758 DLSHIFT2:
      002937 EF 02            [ 2]  759     LDW (2,X),Y 
      002939 90 BE 26         [ 2]  760     LDW Y,YTEMP 
      00293C FF               [ 2]  761     LDW (X),Y 
      00293D 81               [ 4]  762     RET 
                                    763 
                                    764 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    765 ;  DRSHIFT ( d n -- d )
                                    766 ;  shift right n bits 
                                    767 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00293E                        768     _HEADER DRSHIFT,7,"DRSHIFT"
      00293E 29 09                    1         .word LINK 
                           002940     2         LINK=.
      002940 07                       3         .byte 7  
      002941 44 52 53 48 49 46 54     4         .ascii "DRSHIFT"
      002948                          5         DRSHIFT:
      002948 E6 01            [ 1]  769     LD A,(1,X)
      00294A A4 1F            [ 1]  770     AND A,#0X1F 
      00294C 1C 00 02         [ 2]  771     ADDW X,#2 
      00294F                        772 DRSHIFT1:
      00294F 4D               [ 1]  773     TNZ A 
      002950 27 13            [ 1]  774     JREQ DRSHIFT2 
      002952 90 93            [ 1]  775     LDW Y,X 
      002954 90 FE            [ 2]  776     LDW Y,(Y)
      002956 90 57            [ 2]  777     SRAW Y 
      002958 FF               [ 2]  778     LDW (X),Y 
      002959 90 93            [ 1]  779     LDW Y,X 
      00295B 90 EE 02         [ 2]  780     LDW Y,(2,Y)
      00295E 90 56            [ 2]  781     RRCW Y 
      002960 EF 02            [ 2]  782     LDW (2,X),Y 
      002962 4A               [ 1]  783     DEC A
      002963 20 EA            [ 2]  784     JRA DRSHIFT1  
      002965                        785 DRSHIFT2:
      002965 81               [ 4]  786     RET 
                                    787 
                                    788 
                                    789 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    790 ;   D* ( d1 d2 -- d3 )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



                                    791 ;   double product 
                                    792 ;   
                                    793 ;   d3 = d1 * d2
                                    794 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002966                        795     _HEADER DSTAR,2,"D*"
      002966 29 40                    1         .word LINK 
                           002968     2         LINK=.
      002968 02                       3         .byte 2  
      002969 44 2A                    4         .ascii "D*"
      00296B                          5         DSTAR:
      00296B CD 05 91         [ 4]  796     CALL DUPP 
      00296E CD 05 CA         [ 4]  797     CALL ZLESS  
      002971 CD 05 5A         [ 4]  798     CALL TOR    ; R: d2sign 
      002974 CD 25 60         [ 4]  799     CALL DABS   
      002977 CD 05 3B         [ 4]  800     CALL RFROM 
      00297A CD 07 7E         [ 4]  801     CALL NROT  ; d1 d2s ud2
      00297D CD 27 FE         [ 4]  802     CALL DTOR  ; d1 d2s R: ud2  
      002980 CD 05 5A         [ 4]  803     CALL TOR   ; d1 R: ud2 d2s   
      002983 CD 05 91         [ 4]  804     CALL DUPP 
      002986 CD 05 CA         [ 4]  805     CALL ZLESS 
      002989 CD 05 3B         [ 4]  806     CALL RFROM 
      00298C CD 06 19         [ 4]  807     CALL XORR   
      00298F CD 05 5A         [ 4]  808     CALL TOR   ; d1 R: ud2 prod_sign  
      002992 CD 25 60         [ 4]  809     CALL DABS ; ud1 R: ud2 ps  
      002995 CD 05 3B         [ 4]  810     CALL RFROM  
      002998 CD 07 7E         [ 4]  811     CALL NROT   ; ps ud1 
      00299B CD 07 AB         [ 4]  812     CALL DDUP   ; ps ud1 ud1  
      00299E CD 05 3B         [ 4]  813     CALL RFROM  ; ps ud1 ud1 ud2hi 
      0029A1 CD 26 38         [ 4]  814     CALL DSSTAR ; ps ud1 dprodhi 
                                    815 ; shift partial product 16 bits left 
      0029A4 CD 05 87         [ 4]  816     CALL DROP   ; drop overflow 
      0029A7 CD 0B 4A         [ 4]  817     CALL ZERO   ; ps ud1 prodhi 
      0029AA CD 05 A1         [ 4]  818     CALL SWAPP  
      0029AD CD 26 81         [ 4]  819     CALL DSWAP  ; ps dprodhi ud1 
      0029B0 CD 05 3B         [ 4]  820     CALL RFROM  ; ps dprodhi ud1 ud2lo
      0029B3 CD 26 38         [ 4]  821     CALL DSSTAR ; ps  dprodhi dprodlo 
      0029B6 CD 2A C5         [ 4]  822     CALL DPLUS
      0029B9 CD 07 5F         [ 4]  823     CALL ROT    ; dprod ps 
      0029BC                        824     _QBRAN DDSTAR3 
      0029BC CD 04 9A         [ 4]    1     CALL QBRAN
      0029BF 29 C4                    2     .word DDSTAR3
      0029C1 CD 07 FD         [ 4]  825     CALL DNEGA 
      0029C4                        826 DDSTAR3:  
      0029C4 81               [ 4]  827     RET 
                                    828 
                                    829 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    830 ;   DD/MOD  ( d1 d2 -- dr dq )
                                    831 ;   double division dq=d1/d2
                                    832 ;   dr remainder double 
                                    833 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0029C5                        834     _HEADER DDSLMOD,6,"DD/MOD"  
      0029C5 29 68                    1         .word LINK 
                           0029C7     2         LINK=.
      0029C7 06                       3         .byte 6  
      0029C8 44 44 2F 4D 4F 44        4         .ascii "DD/MOD"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      0029CE                          5         DDSLMOD:
      0029CE                        835     _DOLIT 0 
      0029CE CD 04 71         [ 4]    1     CALL DOLIT 
      0029D1 00 00                    2     .word 0 
      0029D3 CD 05 5A         [ 4]  836     CALL TOR   ; R: sign 
      0029D6 90 93            [ 1]  837     LDW Y,X     
      0029D8 90 FE            [ 2]  838     LDW Y,(Y)
      0029DA 2A 0C            [ 1]  839     JRPL DSLA1
      0029DC CD 07 FD         [ 4]  840     CALL DNEGA  ; ud2 
      0029DF CD 05 3B         [ 4]  841     CALL RFROM 
      0029E2 CD 07 DA         [ 4]  842     CALL INVER 
      0029E5 CD 05 5A         [ 4]  843     CALL TOR  ; sign inverted 
      0029E8                        844 DSLA1:
      0029E8                        845     _DOLIT 2 
      0029E8 CD 04 71         [ 4]    1     CALL DOLIT 
      0029EB 00 02                    2     .word 2 
      0029ED CD 0B A3         [ 4]  846     CALL PICK 
      0029F0 CD 05 CA         [ 4]  847     CALL ZLESS 
      0029F3                        848     _QBRAN DSLA2
      0029F3 CD 04 9A         [ 4]    1     CALL QBRAN
      0029F6 2A 0A                    2     .word DSLA2
      0029F8 CD 26 81         [ 4]  849     CALL DSWAP 
      0029FB CD 07 FD         [ 4]  850     CALL DNEGA  ; ud1 
      0029FE CD 26 81         [ 4]  851     CALL DSWAP  ; ud1 ud2 ( divident divisor )     
      002A01 CD 05 3B         [ 4]  852     CALL RFROM 
      002A04 CD 07 DA         [ 4]  853     CALL INVER 
      002A07 CD 05 5A         [ 4]  854     CALL TOR   ;  sign inverted again 
      002A0A                        855 DSLA2:
                                    856 ; unsigned double division 
      002A0A CD 0B 4A         [ 4]  857     CALL ZERO 
      002A0D CD 0B 4A         [ 4]  858     CALL ZERO
      002A10 CD 27 FE         [ 4]  859     CALL DTOR ; quotient  R: sign qlo qhi 
      002A13 CD 28 C5         [ 4]  860     CALL DOVER 
      002A16 CD 26 AF         [ 4]  861     CALL DCLZ ; n2, dividend leading zeros  
      002A19 CD 05 5A         [ 4]  862     CALL TOR 
      002A1C CD 07 AB         [ 4]  863     CALL DDUP    
      002A1F CD 26 AF         [ 4]  864     CALL DCLZ  ; n1, divisor leading zeros
      002A22 CD 05 3B         [ 4]  865     CALL RFROM ; n1 n2 
      002A25 CD 08 39         [ 4]  866     CALL SUBB
      002A28 CD 05 91         [ 4]  867     CALL DUPP   
      002A2B CD 05 CA         [ 4]  868     CALL ZLESS 
      002A2E                        869     _TBRAN DSLA7 ; quotient is null 
      002A2E CD 04 A8         [ 4]    1     CALL TBRAN 
      002A31 2A A1                    2     .word DSLA7 
      002A33 CD 05 91         [ 4]  870     CALL DUPP 
      002A36 CD 05 5A         [ 4]  871     CALL TOR    ; loop counter 
      002A39 CD 05 91         [ 4]  872     CALL DUPP 
      002A3C CD 05 5A         [ 4]  873     CALL TOR    ; need to copies 
      002A3F CD 07 4E         [ 4]  874     CALL QDUP 
      002A42                        875     _QBRAN DSLA3
      002A42 CD 04 9A         [ 4]    1     CALL QBRAN
      002A45 2A 4A                    2     .word DSLA3
      002A47 CD 29 11         [ 4]  876     CALL DLSHIFT ; align divisor with dividend 
      002A4A                        877 DSLA3: ; division loop -- dividend divisor  
      002A4A 90 5F            [ 1]  878     CLRW Y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



      002A4C 90 89            [ 2]  879     PUSHW Y  
      002A4E CD 28 C5         [ 4]  880     CALL DOVER 
      002A51 CD 28 C5         [ 4]  881     CALL DOVER 
      002A54 CD 27 97         [ 4]  882     CALL DLESS 
      002A57                        883     _TBRAN DSLA4 
      002A57 CD 04 A8         [ 4]    1     CALL TBRAN 
      002A5A 2A 70                    2     .word DSLA4 
      002A5C 90 85            [ 2]  884     POPW Y 
      002A5E 72 A9 00 01      [ 2]  885     ADDW Y,#1 
      002A62 90 89            [ 2]  886     PUSHW Y    ; quotiend least bit 
      002A64 CD 07 AB         [ 4]  887     CALL DDUP  ; dividend divisor divisor 
      002A67 CD 27 FE         [ 4]  888     CALL DTOR  
      002A6A CD 2A F7         [ 4]  889     CALL DSUB  ; dividend-divisor 
      002A6D CD 28 1C         [ 4]  890     CALL DRFROM  ; dividend- divisor  
      002A70                        891 DSLA4: ; shift quotient and add 1 bit 
      002A70 90 85            [ 2]  892     POPW Y 
      002A72 90 BF 26         [ 2]  893     LDW YTEMP,Y 
      002A75 16 07            [ 2]  894     LDW Y,(7,SP) ; quotient low 
      002A77 98               [ 1]  895     RCF 
      002A78 90 59            [ 2]  896     RLCW Y
      002A7A 17 07            [ 2]  897     LDW (7,SP),Y 
      002A7C 16 05            [ 2]  898     LDW Y,(5,SP) ; quotient hi 
      002A7E 90 59            [ 2]  899     RLCW Y 
      002A80 17 05            [ 2]  900     LDW (5,SP),Y 
      002A82 16 07            [ 2]  901     LDW Y,(7,SP) 
      002A84 72 B9 00 26      [ 2]  902     ADDW Y,YTEMP
      002A88 17 07            [ 2]  903     LDW (7,SP),Y 
      002A8A 16 01            [ 2]  904     LDW Y,(1,SP) ; loop counter 
      002A8C 90 5D            [ 2]  905     TNZW Y 
      002A8E 27 14            [ 1]  906     JREQ DSLA8
      002A90 72 A2 00 01      [ 2]  907     SUBW Y,#1  
      002A94 17 01            [ 2]  908     LDW (1,SP),Y  
                                    909 ; shift dividend left 1 bit      
      002A96 CD 26 81         [ 4]  910     CALL DSWAP 
      002A99 CD 28 F5         [ 4]  911     CALL D2STAR 
      002A9C CD 26 81         [ 4]  912     CALL DSWAP 
      002A9F 20 A9            [ 2]  913     JRA DSLA3 
      002AA1                        914 DSLA7:
      002AA1 1C 00 02         [ 2]  915     ADDW X,#2 ; drop shift count  
      002AA4                        916 DSLA8:
      002AA4 1C 00 04         [ 2]  917     ADDW X,#4 ; drop divisor
      002AA7 CD 05 3B         [ 4]  918     CALL RFROM
      002AAA CD 05 87         [ 4]  919     CALL DROP   ; loop counter 
      002AAD CD 05 3B         [ 4]  920     CALL RFROM   ; shift count
      002AB0 CD 29 48         [ 4]  921     CALL DRSHIFT 
                                    922     ; quotient replace dividend 
      002AB3 CD 28 1C         [ 4]  923     CALL DRFROM  ; quotient 
      002AB6 90 85            [ 2]  924     POPW Y ; sign 
      002AB8 90 5D            [ 2]  925     TNZW Y 
      002ABA 27 03            [ 1]  926     JREQ DSLA9 
      002ABC CD 07 FD         [ 4]  927     CALL DNEGA ; remainder quotient 
      002ABF                        928 DSLA9: 
      002ABF 81               [ 4]  929     RET 
                                    930 
                                    931 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



                                    932 ;   D+ ( d1 d2 -- d3 )
                                    933 ;   add 2 doubles 
                                    934 ;   d3=d1+d2 
                                    935 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002AC0                        936     _HEADER DPLUS,2,"D+"
      002AC0 29 C7                    1         .word LINK 
                           002AC2     2         LINK=.
      002AC2 02                       3         .byte 2  
      002AC3 44 2B                    4         .ascii "D+"
      002AC5                          5         DPLUS:
      002AC5 90 93            [ 1]  937     LDW Y,X 
      002AC7 90 FE            [ 2]  938     LDW Y,(Y)
      002AC9 90 BF 26         [ 2]  939     LDW YTEMP,Y ; d2 hi 
      002ACC 90 93            [ 1]  940     LDW Y,X 
      002ACE 90 EE 02         [ 2]  941     LDW Y,(2,Y)
      002AD1 90 BF 24         [ 2]  942     LDW XTEMP,Y ; d2 lo 
      002AD4 1C 00 04         [ 2]  943     ADDW X,#4 
      002AD7 90 93            [ 1]  944     LDW Y,X 
      002AD9 90 EE 02         [ 2]  945     LDW Y,(2,Y) ; d1 lo
      002ADC 72 B9 00 24      [ 2]  946     ADDW Y,XTEMP
      002AE0 EF 02            [ 2]  947     LDW (2,X),Y 
      002AE2 90 93            [ 1]  948     LDW Y,X 
      002AE4 90 FE            [ 2]  949     LDW Y,(Y) ; d1 hi 
      002AE6 24 04            [ 1]  950     JRNC DPLUS1 
      002AE8 72 A9 00 01      [ 2]  951     ADDW Y,#1 
      002AEC                        952 DPLUS1: 
      002AEC 72 B9 00 26      [ 2]  953     ADDW Y,YTEMP 
      002AF0 FF               [ 2]  954     LDW (X),Y 
      002AF1 81               [ 4]  955     RET 
                                    956 
                                    957 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    958 ;   D- ( d1 d2 -- d3 )
                                    959 ;   d3=d1-d2 
                                    960 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002AF2                        961     _HEADER DSUB,2,"D-"
      002AF2 2A C2                    1         .word LINK 
                           002AF4     2         LINK=.
      002AF4 02                       3         .byte 2  
      002AF5 44 2D                    4         .ascii "D-"
      002AF7                          5         DSUB:
      002AF7 90 93            [ 1]  962     LDW Y,X 
      002AF9 90 FE            [ 2]  963     LDW Y,(Y)
      002AFB 90 BF 26         [ 2]  964     LDW YTEMP,Y ; d2 hi 
      002AFE 90 93            [ 1]  965     LDW Y,X 
      002B00 90 EE 02         [ 2]  966     LDW Y,(2,Y)
      002B03 90 BF 24         [ 2]  967     LDW XTEMP,Y ; d2 lo 
      002B06 1C 00 04         [ 2]  968     ADDW X,#4 
      002B09 90 93            [ 1]  969     LDW Y,X 
      002B0B 90 EE 02         [ 2]  970     LDW Y,(2,Y) ; d1 lo
      002B0E 72 B2 00 24      [ 2]  971     SUBW Y,XTEMP
      002B12 EF 02            [ 2]  972     LDW (2,X),Y 
      002B14 90 93            [ 1]  973     LDW Y,X 
      002B16 90 FE            [ 2]  974     LDW Y,(Y) ; d1 hi 
      002B18 24 04            [ 1]  975     JRNC DSUB1 
      002B1A 72 A2 00 01      [ 2]  976     SUBW Y,#1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      002B1E                        977 DSUB1: 
      002B1E 72 B2 00 26      [ 2]  978     SUBW Y,YTEMP 
      002B22 FF               [ 2]  979     LDW (X),Y 
      002B23 81               [ 4]  980     RET 
                                    981 
                                    982 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



                                   4832 .endif 
                           000001  4833 .if WANT_FLOAT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



                                   4834         .include "float.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;*********************************
                                     21 ;    floating point library
                                     22 ;    adapted from 
                                     23 ;    Forth dimensions Vol. IV #1 
                                     24 ;    published in  may/june 1982
                                     25 ;
                                     26 ; Creation date: 2021-06-15 
                                     27 ;
                                     28 ; NOTE: I used a different format 
                                     29 ;       for float number. This 
                                     30 ;       enable comparison of floats 
                                     31 ;       as they were integer hence 
                                     32 ;       there no need for F>,F<,etc 
                                     33 ;
                                     34 ;  This file is part of stm8_eforth 
                                     35 ;  project and same licence apply.
                                     36 ;************************************
                                     37 
                                     38 ;*************************************************
                                     39 ;  FLOAT format double for storage 
                                     40 ;  bits 22:0  mantissa absolute value 
                                     41 ;  bits  30:23  exponent with 127 offset added  
                                     42 ;  bit 31  mantissa sign 
                                     43 ;  float value: if bit 31 is 1 negate mantissa
                                     44 ;                else keep mantissas as bits 22:0
                                     45 ;                as is
                                     46 ;                eponent: 10^^(exp-127) 
                                     47 ;***********************************************  
                                     48 
                                     49     .module FLOAT 
                                     50 
                           000001    51 .if WANT_DOUBLE 
                                     52 ; already included 
                           000000    53 .else
                                     54 ;  must be included  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



                                     55     .include "double.asm"
                                     56 .endif  
                                     57 
                           7FFFFF    58     MAX_MANTISSA = 0x7FFFFF 
                                     59 
                                     60 ;-------------------------
                                     61 ;    FPSW ( -- a )
                                     62 ;    floating state variable
                                     63 ;    bit 0 zero flag 
                                     64 ;    bit 1 negative flag 
                                     65 ;    bit 2 overflow/error flag 
                                     66 ;---------------------------
      002B24                         67     _HEADER FPSW,4,"FPSW"
      002B24 2A F4                    1         .word LINK 
                           002B26     2         LINK=.
      002B26 04                       3         .byte 4  
      002B27 46 50 53 57              4         .ascii "FPSW"
      002B2B                          5         FPSW:
      002B2B 90 AE 00 08      [ 2]   68 	LDW Y,#UFPSW  
      002B2F 1D 00 02         [ 2]   69 	SUBW X,#2
      002B32 FF               [ 2]   70     LDW (X),Y
      002B33 81               [ 4]   71     RET
                                     72 
                                     73 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     74 ;   FRESET ( -- )
                                     75 ;   reset FPSW variable 
                                     76 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
      002B34                         77     _HEADER FRESET,6,"FRESET"
      002B34 2B 26                    1         .word LINK 
                           002B36     2         LINK=.
      002B36 06                       3         .byte 6  
      002B37 46 52 45 53 45 54        4         .ascii "FRESET"
      002B3D                          5         FRESET:
      002B3D                         78     _DOLIT 0 
      002B3D CD 04 71         [ 4]    1     CALL DOLIT 
      002B40 00 00                    2     .word 0 
      002B42 CD 2B 2B         [ 4]   79     CALL FPSW 
      002B45 CD 04 D3         [ 4]   80     CALL STORE 
      002B48 81               [ 4]   81     RET 
                                     82 
                                     83 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     84 ;   FINIT ( -- )
                                     85 ;   initialize floating point 
                                     86 ;   library 
                                     87 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B49                         88     _HEADER FINIT,5,"FINIT"
      002B49 2B 36                    1         .word LINK 
                           002B4B     2         LINK=.
      002B4B 05                       3         .byte 5  
      002B4C 46 49 4E 49 54           4         .ascii "FINIT"
      002B51                          5         FINIT:
      002B51 CD 2B 3D         [ 4]   89     CALL FRESET 
      002B54 81               [ 4]   90     RET 
                                     91 
                                     92 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



                                     93 ;    FER ( -- u )
                                     94 ;    return FPSW value 
                                     95 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B55                         96     _HEADER FER,3,"FER"
      002B55 2B 4B                    1         .word LINK 
                           002B57     2         LINK=.
      002B57 03                       3         .byte 3  
      002B58 46 45 52                 4         .ascii "FER"
      002B5B                          5         FER:
      002B5B CD 2B 2B         [ 4]   97     CALL FPSW 
      002B5E CD 04 EA         [ 4]   98     CALL AT 
      002B61 81               [ 4]   99     RET 
                                    100 
                                    101 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    102 ;    FZE  ( -- z )
                                    103 ;    return FPSW zero flag 
                                    104 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B62                        105     _HEADER FZE,3,"FZE"
      002B62 2B 57                    1         .word LINK 
                           002B64     2         LINK=.
      002B64 03                       3         .byte 3  
      002B65 46 5A 45                 4         .ascii "FZE"
      002B68                          5         FZE:
      002B68 CD 2B 2B         [ 4]  106     CALL FPSW
      002B6B CD 04 EA         [ 4]  107     CALL AT  
      002B6E                        108     _DOLIT 1
      002B6E CD 04 71         [ 4]    1     CALL DOLIT 
      002B71 00 01                    2     .word 1 
      002B73 CD 05 F0         [ 4]  109     CALL ANDD 
      002B76 81               [ 4]  110     RET 
                                    111 
                                    112 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    113 ;    FNE ( -- n )
                                    114 ;    return FPSW negative flag 
                                    115 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B77                        116     _HEADER FNE,3,"FNE"
      002B77 2B 64                    1         .word LINK 
                           002B79     2         LINK=.
      002B79 03                       3         .byte 3  
      002B7A 46 4E 45                 4         .ascii "FNE"
      002B7D                          5         FNE:
      002B7D CD 2B 2B         [ 4]  117     CALL FPSW 
      002B80 CD 04 EA         [ 4]  118     CALL AT 
      002B83                        119     _DOLIT 2 
      002B83 CD 04 71         [ 4]    1     CALL DOLIT 
      002B86 00 02                    2     .word 2 
      002B88 CD 05 F0         [ 4]  120     CALL ANDD 
      002B8B 81               [ 4]  121     RET 
                                    122 
                                    123 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    124 ;   FOV (A -- v )
                                    125 ;   return FPSW overflow flag 
                                    126 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B8C                        127     _HEADER FOV,3,"FOV"
      002B8C 2B 79                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



                           002B8E     2         LINK=.
      002B8E 03                       3         .byte 3  
      002B8F 46 4F 56                 4         .ascii "FOV"
      002B92                          5         FOV:
      002B92 CD 2B 2B         [ 4]  128     CALL FPSW
      002B95 CD 04 EA         [ 4]  129     CALL AT  
      002B98                        130     _DOLIT 4 
      002B98 CD 04 71         [ 4]    1     CALL DOLIT 
      002B9B 00 04                    2     .word 4 
      002B9D CD 05 F0         [ 4]  131     CALL ANDD 
      002BA0 81               [ 4]  132     RET 
                                    133 
                                    134 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    135 ;    SFZ ( f# -- f# )
                                    136 ;    set FPSW zero flag 
                                    137 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BA1                        138     _HEADER SFZ,3,"SFZ"
      002BA1 2B 8E                    1         .word LINK 
                           002BA3     2         LINK=.
      002BA3 03                       3         .byte 3  
      002BA4 53 46 5A                 4         .ascii "SFZ"
      002BA7                          5         SFZ:
      002BA7 CD 07 AB         [ 4]  139     CALL DDUP 
      002BAA CD 2B 5B         [ 4]  140     CALL FER 
      002BAD                        141     _DOLIT 0xfffe 
      002BAD CD 04 71         [ 4]    1     CALL DOLIT 
      002BB0 FF FE                    2     .word 0xfffe 
      002BB2 CD 05 F0         [ 4]  142     CALL ANDD 
      002BB5 CD 05 5A         [ 4]  143     CALL TOR    
      002BB8                        144     _DOLIT 0x807F 
      002BB8 CD 04 71         [ 4]    1     CALL DOLIT 
      002BBB 80 7F                    2     .word 0x807F 
      002BBD CD 05 F0         [ 4]  145     CALL ANDD 
      002BC0 CD 25 18         [ 4]  146     CALL DZEQUAL 
      002BC3                        147     _DOLIT 1 
      002BC3 CD 04 71         [ 4]    1     CALL DOLIT 
      002BC6 00 01                    2     .word 1 
      002BC8 CD 05 F0         [ 4]  148     CALL ANDD 
      002BCB CD 05 3B         [ 4]  149     CALL RFROM 
      002BCE CD 06 04         [ 4]  150     CALL ORR 
      002BD1 CD 2B 2B         [ 4]  151     CALL FPSW 
      002BD4 CD 04 D3         [ 4]  152     CALL STORE 
      002BD7 81               [ 4]  153     RET 
                                    154 
                                    155 
                                    156 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    157 ;   SFN ( f# -- f# )
                                    158 ;   set FPSW negative flag 
                                    159 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BD8                        160     _HEADER SFN,3,"SFN"
      002BD8 2B A3                    1         .word LINK 
                           002BDA     2         LINK=.
      002BDA 03                       3         .byte 3  
      002BDB 53 46 4E                 4         .ascii "SFN"
      002BDE                          5         SFN:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



      002BDE CD 05 91         [ 4]  161     CALL DUPP  
      002BE1 CD 2B 5B         [ 4]  162     CALL FER 
      002BE4                        163     _DOLIT 0xFFFD 
      002BE4 CD 04 71         [ 4]    1     CALL DOLIT 
      002BE7 FF FD                    2     .word 0xFFFD 
      002BE9 CD 05 F0         [ 4]  164     CALL ANDD  
      002BEC CD 05 5A         [ 4]  165     CALL TOR 
      002BEF                        166     _DOLIT 0x8000
      002BEF CD 04 71         [ 4]    1     CALL DOLIT 
      002BF2 80 00                    2     .word 0x8000 
      002BF4 CD 05 F0         [ 4]  167     CALL ANDD
      002BF7 90 93            [ 1]  168     LDW Y,X 
      002BF9 90 FE            [ 2]  169     LDW Y,(Y)
      002BFB 98               [ 1]  170     RCF 
      002BFC 90 59            [ 2]  171     RLCW Y 
      002BFE 90 59            [ 2]  172     RLCW Y 
      002C00 90 59            [ 2]  173     RLCW Y 
      002C02 FF               [ 2]  174     LDW (X),Y 
      002C03 CD 05 3B         [ 4]  175     CALL RFROM 
      002C06 CD 06 04         [ 4]  176     CALL ORR 
      002C09 CD 2B 2B         [ 4]  177     CALL FPSW
      002C0C CD 04 D3         [ 4]  178     CALL STORE 
      002C0F 81               [ 4]  179     RET 
                                    180 
                                    181 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    182 ;   SFV ( -- )
                                    183 ;   set overflow flag 
                                    184 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C10                        185     _HEADER SFV,3,"SFV"
      002C10 2B DA                    1         .word LINK 
                           002C12     2         LINK=.
      002C12 03                       3         .byte 3  
      002C13 53 46 56                 4         .ascii "SFV"
      002C16                          5         SFV:
      002C16 CD 2B 2B         [ 4]  186     CALL FPSW 
      002C19 CD 04 EA         [ 4]  187     CALL AT 
      002C1C                        188     _DOLIT 4 
      002C1C CD 04 71         [ 4]    1     CALL DOLIT 
      002C1F 00 04                    2     .word 4 
      002C21 CD 06 04         [ 4]  189     CALL ORR 
      002C24 CD 2B 2B         [ 4]  190     CALL FPSW 
      002C27 CD 04 D3         [ 4]  191     CALL STORE 
      002C2A 81               [ 4]  192     RET 
                                    193 
                                    194 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    195 ;  F>ME ( f# -- m e )
                                    196 ;  split float in mantissa/exponent 
                                    197 ;  m mantissa as a double 
                                    198 ;  e exponent as a single 
                                    199 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C2B                        200     _HEADER ATEXP,4,"F>ME"             
      002C2B 2C 12                    1         .word LINK 
                           002C2D     2         LINK=.
      002C2D 04                       3         .byte 4  
      002C2E 46 3E 4D 45              4         .ascii "F>ME"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



      002C32                          5         ATEXP:
      002C32 CD 2B 3D         [ 4]  201     CALL FRESET
      002C35 CD 2B DE         [ 4]  202     CALL SFN
      002C38 CD 2B A7         [ 4]  203     CALL SFZ 
      002C3B CD 05 91         [ 4]  204     CALL DUPP
      002C3E                        205     _DOLIT 0X7F80 
      002C3E CD 04 71         [ 4]    1     CALL DOLIT 
      002C41 7F 80                    2     .word 0X7F80 
      002C43 CD 05 F0         [ 4]  206     CALL ANDD 
      002C46                        207     _DOLIT 7 
      002C46 CD 04 71         [ 4]    1     CALL DOLIT 
      002C49 00 07                    2     .word 7 
      002C4B CD 0B 18         [ 4]  208     CALL RSHIFT
      002C4E                        209     _DOLIT 127 
      002C4E CD 04 71         [ 4]    1     CALL DOLIT 
      002C51 00 7F                    2     .word 127 
      002C53 CD 08 39         [ 4]  210     CALL SUBB
      002C56 CD 05 5A         [ 4]  211     CALL TOR 
      002C59                        212     _DOLIT 0x7F
      002C59 CD 04 71         [ 4]    1     CALL DOLIT 
      002C5C 00 7F                    2     .word 0x7F 
      002C5E CD 05 F0         [ 4]  213     CALL ANDD  ; mantissa as double  
      002C61 CD 2B 7D         [ 4]  214     CALL FNE 
      002C64                        215     _QBRAN POSMANT 
      002C64 CD 04 9A         [ 4]    1     CALL QBRAN
      002C67 2C 6C                    2     .word POSMANT
      002C69 CD 25 36         [ 4]  216     CALL DNEGAT 
      002C6C                        217 POSMANT:
      002C6C CD 05 3B         [ 4]  218     CALL RFROM 
      002C6F 81               [ 4]  219     RET 
                                    220 
                                    221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    222 ;    ME>F ( m e -- f# )
                                    223 ;    built float from mantissa/exponent 
                                    224 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C70                        225     _HEADER STEXP,4,"ME>F"
      002C70 2C 2D                    1         .word LINK 
                           002C72     2         LINK=.
      002C72 04                       3         .byte 4  
      002C73 4D 45 3E 46              4         .ascii "ME>F"
      002C77                          5         STEXP:
      002C77 CD 05 91         [ 4]  226     CALL DUPP 
      002C7A CD 08 53         [ 4]  227     CALL ABSS 
      002C7D                        228     _DOLIT 127 
      002C7D CD 04 71         [ 4]    1     CALL DOLIT 
      002C80 00 7F                    2     .word 127 
      002C82 CD 08 BD         [ 4]  229     CALL UGREAT
      002C85                        230     _QBRAN STEXP1
      002C85 CD 04 9A         [ 4]    1     CALL QBRAN
      002C88 2C 8D                    2     .word STEXP1
      002C8A CD 2C 16         [ 4]  231     CALL SFV  
      002C8D                        232 STEXP1:
      002C8D                        233     _DOLIT 127 
      002C8D CD 04 71         [ 4]    1     CALL DOLIT 
      002C90 00 7F                    2     .word 127 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



      002C92 CD 07 C0         [ 4]  234     CALL PLUS 
      002C95                        235     _DOLIT 0XFF 
      002C95 CD 04 71         [ 4]    1     CALL DOLIT 
      002C98 00 FF                    2     .word 0XFF 
      002C9A CD 05 F0         [ 4]  236     CALL ANDD 
      002C9D                        237     _DOLIT 7 
      002C9D CD 04 71         [ 4]    1     CALL DOLIT 
      002CA0 00 07                    2     .word 7 
      002CA2 CD 0A FC         [ 4]  238     CALL LSHIFT 
      002CA5 CD 05 5A         [ 4]  239     CALL TOR   ; R: e 
      002CA8 CD 05 91         [ 4]  240     CALL DUPP 
      002CAB                        241     _DOLIT 0X8000 
      002CAB CD 04 71         [ 4]    1     CALL DOLIT 
      002CAE 80 00                    2     .word 0X8000 
      002CB0 CD 05 F0         [ 4]  242     CALL ANDD 
      002CB3                        243     _QBRAN STEXP2 
      002CB3 CD 04 9A         [ 4]    1     CALL QBRAN
      002CB6 2C C9                    2     .word STEXP2
      002CB8                        244     _DOLIT 0X8000 
      002CB8 CD 04 71         [ 4]    1     CALL DOLIT 
      002CBB 80 00                    2     .word 0X8000 
      002CBD CD 05 3B         [ 4]  245     CALL RFROM 
      002CC0 CD 06 04         [ 4]  246     CALL ORR
      002CC3 CD 05 5A         [ 4]  247     CALL TOR
      002CC6 CD 25 36         [ 4]  248     CALL DNEGAT  
      002CC9                        249 STEXP2:
      002CC9 CD 05 91         [ 4]  250     CALL DUPP 
      002CCC                        251     _DOLIT 0X7F
      002CCC CD 04 71         [ 4]    1     CALL DOLIT 
      002CCF 00 7F                    2     .word 0X7F 
      002CD1 CD 08 BD         [ 4]  252     CALL UGREAT 
      002CD4                        253     _QBRAN STEXP3 
      002CD4 CD 04 9A         [ 4]    1     CALL QBRAN
      002CD7 2C DC                    2     .word STEXP3
      002CD9 CD 2C 16         [ 4]  254     CALL SFV 
      002CDC                        255 STEXP3:
      002CDC                        256     _DOLIT 0X7F 
      002CDC CD 04 71         [ 4]    1     CALL DOLIT 
      002CDF 00 7F                    2     .word 0X7F 
      002CE1 CD 05 F0         [ 4]  257     CALL ANDD 
      002CE4 CD 05 3B         [ 4]  258     CALL RFROM 
      002CE7 CD 06 04         [ 4]  259     CALL ORR 
      002CEA CD 2B A7         [ 4]  260     CALL SFZ 
      002CED CD 2B DE         [ 4]  261     CALL SFN 
      002CF0 81               [ 4]  262     RET 
                                    263 
                                    264 
                                    265 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    266 ;   E. ( f# -- )
                                    267 ;   print float in scientific 
                                    268 ;   format 
                                    269 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002CF1                        270     _HEADER EDOT,2,"E."
      002CF1 2C 72                    1         .word LINK 
                           002CF3     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



      002CF3 02                       3         .byte 2  
      002CF4 45 2E                    4         .ascii "E."
      002CF6                          5         EDOT:
      002CF6 CD 06 61         [ 4]  271     CALL BASE 
      002CF9 CD 04 EA         [ 4]  272     CALL AT 
      002CFC CD 05 5A         [ 4]  273     CALL TOR 
      002CFF                        274     _DOLIT 10 
      002CFF CD 04 71         [ 4]    1     CALL DOLIT 
      002D02 00 0A                    2     .word 10 
      002D04 CD 06 61         [ 4]  275     CALL BASE 
      002D07 CD 04 D3         [ 4]  276     CALL STORE 
      002D0A CD 2C 32         [ 4]  277     CALL ATEXP ; m e 
      002D0D                        278 EDOT0:
      002D0D CD 05 5A         [ 4]  279     CALL TOR   
      002D10 CD 2B 7D         [ 4]  280     CALL FNE 
      002D13                        281     _QBRAN EDOT1
      002D13 CD 04 9A         [ 4]    1     CALL QBRAN
      002D16 2D 1B                    2     .word EDOT1
      002D18 CD 25 36         [ 4]  282     CALL DNEGAT
      002D1B                        283 EDOT1:
      002D1B CD 0E 91         [ 4]  284     CALL SPACE 
      002D1E CD 0D 55         [ 4]  285     CALL BDIGS     
      002D21                        286 EDOT2: 
      002D21 CD 25 D1         [ 4]  287     CALL DDIG
      002D24 CD 05 3B         [ 4]  288     CALL RFROM 
      002D27 CD 0A DE         [ 4]  289     CALL ONEP 
      002D2A CD 05 5A         [ 4]  290     CALL TOR 
      002D2D CD 05 91         [ 4]  291     CALL DUPP
      002D30                        292     _QBRAN EDOT3 
      002D30 CD 04 9A         [ 4]    1     CALL QBRAN
      002D33 2D 3A                    2     .word EDOT3
      002D35                        293     _BRAN EDOT2  
      002D35 CD 04 B6         [ 4]    1     CALL BRAN 
      002D38 2D 21                    2     .word EDOT2 
      002D3A                        294 EDOT3:
      002D3A CD 05 BB         [ 4]  295     CALL OVER 
      002D3D CD 06 61         [ 4]  296     CALL BASE 
      002D40 CD 04 EA         [ 4]  297     CALL AT 
      002D43 CD 08 80         [ 4]  298     CALL ULESS 
      002D46                        299     _QBRAN EDOT2 
      002D46 CD 04 9A         [ 4]    1     CALL QBRAN
      002D49 2D 21                    2     .word EDOT2
      002D4B                        300     _DOLIT '.'
      002D4B CD 04 71         [ 4]    1     CALL DOLIT 
      002D4E 00 2E                    2     .word '.' 
      002D50 CD 0D 65         [ 4]  301     CALL HOLD  
      002D53 CD 25 D1         [ 4]  302     CALL DDIG
      002D56 CD 2B 7D         [ 4]  303     CALL FNE 
      002D59                        304     _QBRAN EDOT4 
      002D59 CD 04 9A         [ 4]    1     CALL QBRAN
      002D5C 2D 69                    2     .word EDOT4
      002D5E                        305     _DOLIT '-'
      002D5E CD 04 71         [ 4]    1     CALL DOLIT 
      002D61 00 2D                    2     .word '-' 
      002D63 CD 0D 65         [ 4]  306     CALL HOLD 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



      002D66 CD 05 87         [ 4]  307     CALL DROP 
      002D69                        308 EDOT4:       
      002D69 CD 0D BA         [ 4]  309     CALL EDIGS 
      002D6C CD 0E BB         [ 4]  310     CALL TYPES
      002D6F CD 05 3B         [ 4]  311     CALL RFROM 
      002D72 CD 07 4E         [ 4]  312     CALL QDUP 
      002D75                        313     _QBRAN EDOT5     
      002D75 CD 04 9A         [ 4]    1     CALL QBRAN
      002D78 2D 85                    2     .word EDOT5
      002D7A                        314     _DOLIT 'E'
      002D7A CD 04 71         [ 4]    1     CALL DOLIT 
      002D7D 00 45                    2     .word 'E' 
      002D7F CD 04 36         [ 4]  315     CALL EMIT 
      002D82 CD 0F 92         [ 4]  316     CALL DOT
      002D85                        317 EDOT5: 
      002D85 CD 05 3B         [ 4]  318     CALL RFROM 
      002D88 CD 06 61         [ 4]  319     CALL BASE 
      002D8B CD 04 D3         [ 4]  320     CALL STORE  
      002D8E 81               [ 4]  321     RET 
                                    322 
                                    323 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                    324 ;   F. (f# -- )
                                    325 ;   print float in fixed
                                    326 ;   point format. 
                                    327 ;;;;;;;;;;;;;;;;;;;;;;;;;
      002D8F                        328     _HEADER FDOT,2,"F."
      002D8F 2C F3                    1         .word LINK 
                           002D91     2         LINK=.
      002D91 02                       3         .byte 2  
      002D92 46 2E                    4         .ascii "F."
      002D94                          5         FDOT:
      002D94 CD 06 61         [ 4]  329     CALL BASE 
      002D97 CD 04 EA         [ 4]  330     CALL AT 
      002D9A CD 05 5A         [ 4]  331     CALL TOR 
      002D9D                        332     _DOLIT 10 
      002D9D CD 04 71         [ 4]    1     CALL DOLIT 
      002DA0 00 0A                    2     .word 10 
      002DA2 CD 06 61         [ 4]  333     CALL BASE 
      002DA5 CD 04 D3         [ 4]  334     CALL STORE 
      002DA8 CD 2C 32         [ 4]  335     CALL    ATEXP
      002DAB CD 05 91         [ 4]  336     CALL    DUPP  
      002DAE CD 08 53         [ 4]  337     CALL    ABSS 
      002DB1                        338     _DOLIT  8
      002DB1 CD 04 71         [ 4]    1     CALL DOLIT 
      002DB4 00 08                    2     .word 8 
      002DB6 CD 08 DC         [ 4]  339     CALL    GREAT 
      002DB9                        340     _QBRAN  FDOT1 
      002DB9 CD 04 9A         [ 4]    1     CALL QBRAN
      002DBC 2D C1                    2     .word FDOT1
      002DBE CC 2D 0D         [ 2]  341     JP      EDOT0 
      002DC1                        342 FDOT1:
      002DC1 CD 0E 91         [ 4]  343     CALL    SPACE 
      002DC4 CD 05 5A         [ 4]  344     CALL    TOR 
      002DC7 CD 2B 7D         [ 4]  345     CALL    FNE 
      002DCA                        346     _QBRAN  FDOT0 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



      002DCA CD 04 9A         [ 4]    1     CALL QBRAN
      002DCD 2D D2                    2     .word FDOT0
      002DCF CD 25 36         [ 4]  347     CALL    DNEGAT 
      002DD2                        348 FDOT0: 
      002DD2 CD 0D 55         [ 4]  349     CALL    BDIGS
      002DD5 CD 05 4E         [ 4]  350     CALL    RAT  
      002DD8 CD 05 CA         [ 4]  351     CALL    ZLESS 
      002DDB                        352     _QBRAN  FDOT6 
      002DDB CD 04 9A         [ 4]    1     CALL QBRAN
      002DDE 2E 09                    2     .word FDOT6
      002DE0                        353 FDOT2: ; e<0 
      002DE0 CD 25 D1         [ 4]  354     CALL    DDIG 
      002DE3 CD 05 3B         [ 4]  355     CALL    RFROM
      002DE6 CD 0A DE         [ 4]  356     CALL    ONEP 
      002DE9 CD 07 4E         [ 4]  357     CALL    QDUP 
      002DEC                        358     _QBRAN  FDOT3 
      002DEC CD 04 9A         [ 4]    1     CALL QBRAN
      002DEF 2D F9                    2     .word FDOT3
      002DF1 CD 05 5A         [ 4]  359     CALL    TOR 
      002DF4                        360     _BRAN   FDOT2 
      002DF4 CD 04 B6         [ 4]    1     CALL BRAN 
      002DF7 2D E0                    2     .word FDOT2 
      002DF9                        361 FDOT3:
      002DF9                        362     _DOLIT  '.' 
      002DF9 CD 04 71         [ 4]    1     CALL DOLIT 
      002DFC 00 2E                    2     .word '.' 
      002DFE CD 0D 65         [ 4]  363     CALL    HOLD 
      002E01 CD 25 EA         [ 4]  364     CALL    DDIGS
      002E04                        365     _BRAN   FDOT9  
      002E04 CD 04 B6         [ 4]    1     CALL BRAN 
      002E07 2E 1E                    2     .word FDOT9 
      002E09                        366 FDOT6: ; e>=0 
      002E09                        367     _BRAN   FDOT8
      002E09 CD 04 B6         [ 4]    1     CALL BRAN 
      002E0C 2E 16                    2     .word FDOT8 
      002E0E                        368 FDOT7:     
      002E0E                        369     _DOLIT  '0'
      002E0E CD 04 71         [ 4]    1     CALL DOLIT 
      002E11 00 30                    2     .word '0' 
      002E13 CD 0D 65         [ 4]  370     CALL    HOLD 
      002E16                        371 FDOT8:
      002E16 CD 04 85         [ 4]  372     CALL    DONXT 
      002E19 2E 0E                  373     .word   FDOT7
      002E1B CD 25 EA         [ 4]  374     CALL    DDIGS 
      002E1E                        375 FDOT9:
      002E1E CD 2B 7D         [ 4]  376     CALL    FNE 
      002E21                        377     _QBRAN  FDOT10 
      002E21 CD 04 9A         [ 4]    1     CALL QBRAN
      002E24 2E 2E                    2     .word FDOT10
      002E26                        378     _DOLIT '-' 
      002E26 CD 04 71         [ 4]    1     CALL DOLIT 
      002E29 00 2D                    2     .word '-' 
      002E2B CD 0D 65         [ 4]  379     CALL   HOLD 
      002E2E                        380 FDOT10:
      002E2E CD 0D BA         [ 4]  381     CALL    EDIGS 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



      002E31 CD 0E BB         [ 4]  382     CALL    TYPES 
      002E34 CD 05 3B         [ 4]  383     CALL    RFROM 
      002E37 CD 06 61         [ 4]  384     CALL    BASE 
      002E3A CD 04 D3         [ 4]  385     CALL    STORE 
      002E3D 81               [ 4]  386     RET 
                                    387 
                                    388 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    389 ; return parsed exponent or 
                                    390 ; 0 if failed
                                    391 ; at entry exprect *a=='E'    
                                    392 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002E3E                        393 parse_exponent: ; a cntr -- e -1 | 0 
      002E3E CD 05 5A         [ 4]  394     CALL TOR   ; R: cntr 
      002E41 CD 05 91         [ 4]  395     CALL DUPP 
      002E44 CD 05 08         [ 4]  396     CALL CAT 
      002E47                        397     _DOLIT 'E' 
      002E47 CD 04 71         [ 4]    1     CALL DOLIT 
      002E4A 00 45                    2     .word 'E' 
      002E4C CD 08 61         [ 4]  398     CALL EQUAL 
      002E4F                        399     _QBRAN 1$
      002E4F CD 04 9A         [ 4]    1     CALL QBRAN
      002E52 2E 7F                    2     .word 1$
      002E54 CD 0A DE         [ 4]  400     CALL ONEP 
      002E57 CD 05 3B         [ 4]  401     CALL RFROM  ; a cntr 
      002E5A CD 0A EB         [ 4]  402     CALL ONEM
      002E5D CD 05 91         [ 4]  403     CALL DUPP 
      002E60                        404     _QBRAN 2$ ; a cntr 
      002E60 CD 04 9A         [ 4]    1     CALL QBRAN
      002E63 2E 82                    2     .word 2$
      002E65 CD 0B 4A         [ 4]  405     CALL ZERO
      002E68 CD 05 91         [ 4]  406     CALL DUPP 
      002E6B CD 26 81         [ 4]  407     CALL DSWAP ; 0 0 a cntr  
      002E6E CD 23 C6         [ 4]  408     CALL nsign 
      002E71 CD 05 5A         [ 4]  409     CALL TOR   ; R: esign  
      002E74 CD 23 FE         [ 4]  410     CALL parse_digits
      002E77                        411     _QBRAN PARSEXP_SUCCESS ; parsed to end of string 
      002E77 CD 04 9A         [ 4]    1     CALL QBRAN
      002E7A 2E 89                    2     .word PARSEXP_SUCCESS
                                    412 ; failed invalid character
      002E7C CD 07 A0         [ 4]  413     CALL DDROP ; 0 a 
      002E7F                        414 1$: 
      002E7F CD 05 3B         [ 4]  415     CALL RFROM ; sign||cntr  
      002E82                        416 2$:
      002E82 CD 07 A0         [ 4]  417     CALL DDROP  ; a cntr || a sign || 0 cntr   
      002E85 CD 0B 4A         [ 4]  418     CALL ZERO   ; return only 0 
      002E88 81               [ 4]  419     RET 
      002E89                        420 PARSEXP_SUCCESS: 
      002E89 CD 07 A0         [ 4]  421     CALL DDROP ; drop dhi a 
      002E8C CD 05 3B         [ 4]  422     CALL RFROM ; es 
      002E8F                        423     _QBRAN 1$
      002E8F CD 04 9A         [ 4]    1     CALL QBRAN
      002E92 2E 97                    2     .word 1$
      002E94 CD 07 EB         [ 4]  424     CALL NEGAT
      002E97                        425 1$:
      002E97                        426     _DOLIT -1 ; -- e -1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



      002E97 CD 04 71         [ 4]    1     CALL DOLIT 
      002E9A FF FF                    2     .word -1 
      002E9C 81               [ 4]  427     RET 
                                    428 
                                    429 
                                    430 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    431 ;   FLOAT?  ( a dlo dhi a+ cntr sign d? -- f -3 | a 0 )
                                    432 ;   called by NUMBER? 
                                    433 ;   convert string to float 
                                    434 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002E9D                        435     _HEADER FLOATQ,5,"FLOAT?"
      002E9D 2D 91                    1         .word LINK 
                           002E9F     2         LINK=.
      002E9F 05                       3         .byte 5  
      002EA0 46 4C 4F 41 54 3F        4         .ascii "FLOAT?"
      002EA6                          5         FLOATQ:
      002EA6                        436     _QBRAN FLOATQ0 
      002EA6 CD 04 9A         [ 4]    1     CALL QBRAN
      002EA9 2E B0                    2     .word FLOATQ0
      002EAB                        437     _BRAN FLOAT_ERROR  ; not a float, string start with '#'
      002EAB CD 04 B6         [ 4]    1     CALL BRAN 
      002EAE 2F 4F                    2     .word FLOAT_ERROR 
      002EB0                        438 FLOATQ0:
                                    439 ; BASE must be 10 
      002EB0 CD 06 61         [ 4]  440     CALL BASE 
      002EB3 CD 04 EA         [ 4]  441     CALL AT 
      002EB6                        442     _DOLIT 10 
      002EB6 CD 04 71         [ 4]    1     CALL DOLIT 
      002EB9 00 0A                    2     .word 10 
      002EBB CD 08 61         [ 4]  443     CALL EQUAL 
      002EBE                        444     _QBRAN FLOAT_ERROR 
      002EBE CD 04 9A         [ 4]    1     CALL QBRAN
      002EC1 2F 4F                    2     .word FLOAT_ERROR
                                    445 ; if float next char is '.' or 'E' 
      002EC3 CD 05 5A         [ 4]  446     CALL TOR ; R: sign  
      002EC6 CD 05 5A         [ 4]  447     CALL TOR ; R: sign cntr 
      002EC9 CD 05 91         [ 4]  448     CALL DUPP
      002ECC CD 05 08         [ 4]  449     CALL CAT 
      002ECF                        450     _DOLIT '.' 
      002ECF CD 04 71         [ 4]    1     CALL DOLIT 
      002ED2 00 2E                    2     .word '.' 
      002ED4 CD 08 61         [ 4]  451     CALL EQUAL 
      002ED7                        452     _QBRAN FLOATQ1 ; not a dot 
      002ED7 CD 04 9A         [ 4]    1     CALL QBRAN
      002EDA 2F 15                    2     .word FLOATQ1
      002EDC CD 0A DE         [ 4]  453     CALL ONEP 
      002EDF CD 05 3B         [ 4]  454     CALL RFROM  ; dlo dhi a cntr R: sign  
      002EE2 CD 0A EB         [ 4]  455     CALL ONEM 
      002EE5 CD 05 91         [ 4]  456     CALL DUPP 
      002EE8 CD 05 5A         [ 4]  457     CALL TOR  ; R: sign cntr 
                                    458 ; parse fractional part
      002EEB CD 23 FE         [ 4]  459     CALL parse_digits ; dlo dhi a cntr -- dm a cntr 
      002EEE CD 05 91         [ 4]  460     CALL DUPP 
      002EF1 CD 05 3B         [ 4]  461     CALL RFROM 
      002EF4 CD 05 A1         [ 4]  462     CALL SWAPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



      002EF7 CD 08 39         [ 4]  463     CALL SUBB ; fd -> fraction digits count 
      002EFA CD 05 5A         [ 4]  464     CALL TOR  ; dlo dhi a cntr R: sign fd 
      002EFD CD 05 91         [ 4]  465     CALL DUPP ; cntr cntr  
      002F00                        466     _QBRAN 1$ ; end of string, no exponent
      002F00 CD 04 9A         [ 4]    1     CALL QBRAN
      002F03 2F 0A                    2     .word 1$
      002F05                        467     _BRAN FLOATQ2
      002F05 CD 04 B6         [ 4]    1     CALL BRAN 
      002F08 2F 1E                    2     .word FLOATQ2 
      002F0A CD 05 A1         [ 4]  468 1$: CALL SWAPP 
      002F0D CD 05 87         [ 4]  469     CALL DROP ; a
      002F10                        470     _BRAN FLOATQ3        
      002F10 CD 04 B6         [ 4]    1     CALL BRAN 
      002F13 2F 26                    2     .word FLOATQ3 
      002F15                        471 FLOATQ1: ; must push fd==0 on RSTACK 
      002F15 CD 05 3B         [ 4]  472     CALL RFROM ; cntr 
      002F18 CD 0B 4A         [ 4]  473     CALL ZERO  ; fd 
      002F1B CD 05 5A         [ 4]  474     CALL TOR   ; dm a cntr R: sign fd 
      002F1E                        475 FLOATQ2: 
      002F1E CD 2E 3E         [ 4]  476     CALL parse_exponent 
      002F21                        477     _QBRAN FLOAT_ERROR0 ; exponent expected 
      002F21 CD 04 9A         [ 4]    1     CALL QBRAN
      002F24 2F 4C                    2     .word FLOAT_ERROR0
      002F26                        478 FLOATQ3: ; dm 0 || dm e  
      002F26 CD 05 3B         [ 4]  479     CALL RFROM ;  fd  
      002F29 CD 08 39         [ 4]  480     CALL SUBB  ; exp=e-fd 
      002F2C CD 07 7E         [ 4]  481     CALL NROT 
      002F2F CD 05 3B         [ 4]  482     CALL RFROM  ; sign 
      002F32                        483     _QBRAN FLOATQ4 
      002F32 CD 04 9A         [ 4]    1     CALL QBRAN
      002F35 2F 3A                    2     .word FLOATQ4
      002F37 CD 07 FD         [ 4]  484     CALL DNEGA 
      002F3A                        485 FLOATQ4:
      002F3A CD 07 5F         [ 4]  486     CALL ROT 
      002F3D CD 2C 77         [ 4]  487     CALL STEXP 
      002F40 CD 07 5F         [ 4]  488     CALL ROT 
      002F43 CD 05 87         [ 4]  489     CALL DROP 
      002F46                        490     _DOLIT -3 
      002F46 CD 04 71         [ 4]    1     CALL DOLIT 
      002F49 FF FD                    2     .word -3 
      002F4B 81               [ 4]  491     RET       
      002F4C                        492 FLOAT_ERROR0: 
      002F4C CD 28 1C         [ 4]  493     CALL DRFROM ; sign df      
      002F4F                        494 FLOAT_ERROR: 
      002F4F CD 0B 8C         [ 4]  495     CALL DEPTH 
      002F52 CD 0A D1         [ 4]  496     CALL CELLS 
      002F55 CD 05 71         [ 4]  497     CALL SPAT 
      002F58 CD 05 A1         [ 4]  498     CALL SWAPP 
      002F5B CD 07 C0         [ 4]  499     CALL PLUS  
      002F5E CD 05 7E         [ 4]  500     CALL SPSTO 
      002F61                        501     _DOLIT 0 
      002F61 CD 04 71         [ 4]    1     CALL DOLIT 
      002F64 00 00                    2     .word 0 
      002F66 81               [ 4]  502     RET 
                                    503 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



                                    504 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    505 ;  LSCALE ( f# -- f# )
                                    506 ;  m *=fbase , e -= 1
                                    507 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002F67                        508     _HEADER LSCALE,6,"LSCALE"
      002F67 2E 9F                    1         .word LINK 
                           002F69     2         LINK=.
      002F69 06                       3         .byte 6  
      002F6A 4C 53 43 41 4C 45        4         .ascii "LSCALE"
      002F70                          5         LSCALE:
      002F70 CD 2C 32         [ 4]  509     CALL ATEXP 
      002F73                        510     _DOLIT 1 
      002F73 CD 04 71         [ 4]    1     CALL DOLIT 
      002F76 00 01                    2     .word 1 
      002F78 CD 08 39         [ 4]  511     CALL SUBB 
      002F7B CD 05 5A         [ 4]  512     CALL TOR
      002F7E                        513     _DOLIT 10 
      002F7E CD 04 71         [ 4]    1     CALL DOLIT 
      002F81 00 0A                    2     .word 10 
      002F83 CD 26 38         [ 4]  514     CALL DSSTAR
      002F86 CD 05 3B         [ 4]  515     CALL RFROM 
      002F89 CD 2C 77         [ 4]  516     CALL STEXP 
      002F8C 81               [ 4]  517     RET  
                                    518 
                                    519 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    520 ;  RSCALE ( f# -- f# )
                                    521 ;  m /=fbase , e+=1 
                                    522 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002F8D                        523     _HEADER RSCALE,6,"RSCALE"
      002F8D 2F 69                    1         .word LINK 
                           002F8F     2         LINK=.
      002F8F 06                       3         .byte 6  
      002F90 52 53 43 41 4C 45        4         .ascii "RSCALE"
      002F96                          5         RSCALE:
      002F96 CD 2C 32         [ 4]  524     CALL ATEXP 
      002F99                        525     _DOLIT 1 
      002F99 CD 04 71         [ 4]    1     CALL DOLIT 
      002F9C 00 01                    2     .word 1 
      002F9E CD 07 C0         [ 4]  526     CALL PLUS 
      002FA1 CD 05 5A         [ 4]  527     CALL TOR 
      002FA4                        528     _DOLIT 10 
      002FA4 CD 04 71         [ 4]    1     CALL DOLIT 
      002FA7 00 0A                    2     .word 10 
      002FA9 CD 25 90         [ 4]  529     CALL DSLMOD 
      002FAC CD 07 5F         [ 4]  530     CALL ROT 
      002FAF CD 05 87         [ 4]  531     CALL DROP 
      002FB2 CD 05 3B         [ 4]  532     CALL RFROM 
      002FB5 CD 2C 77         [ 4]  533     CALL STEXP 
      002FB8 81               [ 4]  534     RET 
                                    535 
                                    536 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    537 ;   SCALE>M ( ud1 -- e ud2 )
                                    538 ;   scale down a double  
                                    539 ;   by repeated d/10
                                    540 ;   until ud<=MAX_MANTISSA   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



                                    541 ;   e is log10 exponent of scaled down
                                    542 ;   ud2 is scaled down ud1 
                                    543 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002FB9                        544     _HEADER SCALETOM,7,"SCALE>M"
      002FB9 2F 8F                    1         .word LINK 
                           002FBB     2         LINK=.
      002FBB 07                       3         .byte 7  
      002FBC 53 43 41 4C 45 3E 4D     4         .ascii "SCALE>M"
      002FC3                          5         SCALETOM:
      002FC3 CD 0B 4A         [ 4]  545     CALL ZERO 
      002FC6 CD 07 7E         [ 4]  546     CALL NROT 
      002FC9                        547 SCAL1:
      002FC9 CD 05 91         [ 4]  548     CALL DUPP 
      002FCC                        549     _DOLIT 0X7F 
      002FCC CD 04 71         [ 4]    1     CALL DOLIT 
      002FCF 00 7F                    2     .word 0X7F 
      002FD1 CD 08 BD         [ 4]  550     CALL UGREAT 
      002FD4                        551     _QBRAN SCAL2  
      002FD4 CD 04 9A         [ 4]    1     CALL QBRAN
      002FD7 2F F5                    2     .word SCAL2
      002FD9                        552     _DOLIT 10 
      002FD9 CD 04 71         [ 4]    1     CALL DOLIT 
      002FDC 00 0A                    2     .word 10 
      002FDE CD 25 90         [ 4]  553     CALL DSLMOD 
      002FE1 CD 07 5F         [ 4]  554     CALL ROT  
      002FE4 CD 05 87         [ 4]  555     CALL DROP
      002FE7 CD 07 5F         [ 4]  556     CALL ROT 
      002FEA CD 0A DE         [ 4]  557     CALL ONEP 
      002FED CD 07 7E         [ 4]  558     CALL NROT  
      002FF0                        559     _BRAN SCAL1 
      002FF0 CD 04 B6         [ 4]    1     CALL BRAN 
      002FF3 2F C9                    2     .word SCAL1 
      002FF5                        560 SCAL2: 
      002FF5 81               [ 4]  561     RET 
                                    562 
                                    563 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    564 ;  UDIV10 ( ut -- ut )
                                    565 ;  divide a 48 bits uint by 10 
                                    566 ;  used to scale down MM* 
                                    567 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002FF6                        568 UDIV10:
      002FF6 90 93            [ 1]  569     LDW Y,X 
      002FF8 90 FE            [ 2]  570     LDW Y,(Y)
      002FFA A6 0A            [ 1]  571     LD A,#10 
      002FFC 90 62            [ 2]  572     DIV Y,A 
      002FFE FF               [ 2]  573     LDW (X),Y 
      002FFF 90 95            [ 1]  574     LD YH,A 
      003001 E6 02            [ 1]  575     LD A,(2,X)
      003003 90 97            [ 1]  576     LD YL,A 
      003005 A6 0A            [ 1]  577     LD A,#10 
      003007 90 62            [ 2]  578     DIV Y,A 
      003009 90 95            [ 1]  579     LD YH,A 
      00300B 90 9F            [ 1]  580     LD A,YL 
      00300D E7 02            [ 1]  581     LD (2,X),A 
      00300F E6 03            [ 1]  582     LD A,(3,X)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



      003011 90 97            [ 1]  583     LD YL,A 
      003013 A6 0A            [ 1]  584     LD A,#10 
      003015 90 62            [ 2]  585     DIV Y,A 
      003017 90 95            [ 1]  586     LD YH,A 
      003019 90 9F            [ 1]  587     LD A,YL 
      00301B E7 03            [ 1]  588     LD (3,X),A 
      00301D E6 04            [ 1]  589     LD A,(4,X)
      00301F 90 97            [ 1]  590     LD YL,A 
      003021 A6 0A            [ 1]  591     LD A,#10 
      003023 90 62            [ 2]  592     DIV Y,A 
      003025 90 95            [ 1]  593     LD YH,A 
      003027 90 9F            [ 1]  594     LD A,YL 
      003029 E7 04            [ 1]  595     LD (4,X),A 
      00302B E6 05            [ 1]  596     LD A,(5,X)
      00302D 90 97            [ 1]  597     LD YL,A 
      00302F A6 0A            [ 1]  598     LD A,#10 
      003031 90 62            [ 2]  599     DIV Y,A 
      003033 90 9F            [ 1]  600     LD A,YL 
      003035 E7 05            [ 1]  601     LD (5,X),A 
      003037 81               [ 4]  602     RET 
                                    603 
                                    604 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    605 ;   MM* ( m1 m2 -- m3 e )
                                    606 ;   mantissa product 
                                    607 ;  scale down to 23 bits 
                                    608 ;   e  is log10 scaling factor.
                                    609 ;   The maximum product size 
                                    610 ;   before scaling is 46 bits .
                                    611 ;   UDIV10 is used to scale down.  
                                    612 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003038                        613     _HEADER MMSTAR,3,"MM*"
      003038 2F BB                    1         .word LINK 
                           00303A     2         LINK=.
      00303A 03                       3         .byte 3  
      00303B 4D 4D 2A                 4         .ascii "MM*"
      00303E                          5         MMSTAR:
      00303E CD 07 AB         [ 4]  614     CALL DDUP
      003041 CD 25 18         [ 4]  615     CALL DZEQUAL
      003044                        616     _TBRAN MMSTA2
      003044 CD 04 A8         [ 4]    1     CALL TBRAN 
      003047 30 54                    2     .word MMSTA2 
      003049                        617 MMSTA1:
      003049 CD 28 C5         [ 4]  618     CALL DOVER 
      00304C CD 25 18         [ 4]  619     CALL DZEQUAL 
      00304F                        620     _QBRAN MMSTA3 
      00304F CD 04 9A         [ 4]    1     CALL QBRAN
      003052 30 5F                    2     .word MMSTA3
      003054                        621 MMSTA2: ; ( -- 0 0 0 )
      003054 1C 00 02         [ 2]  622     ADDW X,#2 
      003057 90 5F            [ 1]  623     CLRW Y 
      003059 FF               [ 2]  624     LDW (X),Y 
      00305A EF 02            [ 2]  625     LDW (2,X),Y
      00305C EF 04            [ 2]  626     LDW (4,X),Y 
      00305E 81               [ 4]  627     RET 
      00305F                        628 MMSTA3:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



      00305F CD 25 77         [ 4]  629     CALL DSIGN 
      003062 CD 05 5A         [ 4]  630     CALL TOR    ; R: m2sign 
      003065 CD 25 60         [ 4]  631     CALL DABS   ; m1 um2 
      003068 CD 26 81         [ 4]  632     CALL DSWAP  ; um2 m1 
      00306B CD 25 77         [ 4]  633     CALL DSIGN  ; um2 m1 m1sign 
      00306E CD 05 3B         [ 4]  634     CALL RFROM 
      003071 CD 06 19         [ 4]  635     CALL XORR 
      003074 CD 05 5A         [ 4]  636     CALL TOR   ; R: product_sign 
      003077 CD 25 60         [ 4]  637     CALL DABS  ; um2 um1  
      00307A CD 27 FE         [ 4]  638     CALL DTOR  ; um2 
      00307D CD 05 91         [ 4]  639     CALL DUPP  ; um2 um2hi 
      003080 CD 05 4E         [ 4]  640     CALL RAT   ; um2 um2hi um1hi
                                    641 ; first partial product  
                                    642 ; pd1=um2hi*um1hi 
      003083 CD 0A 5D         [ 4]  643     CALL STAR 
      003086 CD 0B 4A         [ 4]  644     CALL ZERO 
      003089 CD 05 A1         [ 4]  645     CALL SWAPP ; pd1<<16  
      00308C CD 26 81         [ 4]  646     CALL DSWAP ; pd1 um2 
      00308F CD 05 BB         [ 4]  647     CALL OVER  ; pd1 um2 um2lo 
      003092 CD 05 3B         [ 4]  648     CALL RFROM ; pd1 um2 um2lo um1hi 
                                    649 ; pd2=um2lo*um1hi 
      003095 CD 0A 13         [ 4]  650     CALL UMSTA ; pd1 um2 pd2 
      003098 CD 26 81         [ 4]  651     CALL DSWAP ; pd1 pd2 um2 
      00309B CD 05 4E         [ 4]  652     CALL RAT   ; pd1 pd2 um2 um1lo 
                                    653 ; pd3= um2hi*um1lo 
      00309E CD 0A 13         [ 4]  654     CALL UMSTA ; pd1 pd2 um2lo pd3 
      0030A1 CD 07 5F         [ 4]  655     CALL ROT ; pd1 pd2 pd3 um2lo 
      0030A4 CD 05 5A         [ 4]  656     CALL TOR ; pd1 pd2 pd3 R: psign um1lo um2lo 
                                    657 ; pd1+pd2+pd3  pd1
      0030A7 CD 2A C5         [ 4]  658     CALL DPLUS 
      0030AA CD 2A C5         [ 4]  659     CALL DPLUS  
      0030AD CD 28 1C         [ 4]  660     CALL DRFROM ; triple um2lo um1lo 
                                    661 ; last partial product um2lo*um1lo 
      0030B0 CD 0A 13         [ 4]  662     CALL UMSTA ; prod pd4 
                                    663 ; mm*=prod<<16+pd4  
      0030B3 CD 27 FE         [ 4]  664     CALL DTOR ;   R: psign pd4lo pd4hi  
                                    665  ; add pd4hi to prodlo and propagate carry 
      0030B6 90 93            [ 1]  666     LDW Y,X 
      0030B8 90 EE 02         [ 2]  667     LDW Y,(2,Y)  ; prodlo 
      0030BB 72 F9 01         [ 2]  668     ADDW Y,(1,SP)  ; prodlo+pd4hi 
      0030BE 17 01            [ 2]  669     LDW (1,SP),Y    ; plo phi  
      0030C0 90 93            [ 1]  670     LDW Y,X
      0030C2 90 FE            [ 2]  671     LDW Y,(Y) ; prodhi  
      0030C4 24 04            [ 1]  672     JRNC MMSTA4
      0030C6 72 A9 00 01      [ 2]  673     ADDW Y,#1 ; add carry 
      0030CA                        674 MMSTA4:     
      0030CA 1D 00 02         [ 2]  675     SUBW X,#2 
      0030CD FF               [ 2]  676     LDW (X),Y 
      0030CE 90 85            [ 2]  677     POPW Y 
      0030D0 EF 02            [ 2]  678     LDW (2,X),Y 
      0030D2 90 85            [ 2]  679     POPW Y 
      0030D4 EF 04            [ 2]  680     LDW (4,X),Y
      0030D6 CD 0B 4A         [ 4]  681     CALL ZERO 
      0030D9 CD 05 5A         [ 4]  682     CALL TOR 
      0030DC                        683 MMSTA5:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



      0030DC CD 07 4E         [ 4]  684     CALL QDUP 
      0030DF                        685     _QBRAN MMSTA6 
      0030DF CD 04 9A         [ 4]    1     CALL QBRAN
      0030E2 30 F5                    2     .word MMSTA6
      0030E4 CD 2F F6         [ 4]  686     CALL UDIV10 
      0030E7 CD 05 3B         [ 4]  687     CALL RFROM 
      0030EA CD 0A DE         [ 4]  688     CALL ONEP 
      0030ED CD 05 5A         [ 4]  689     CALL TOR 
      0030F0                        690     _BRAN MMSTA5 
      0030F0 CD 04 B6         [ 4]    1     CALL BRAN 
      0030F3 30 DC                    2     .word MMSTA5 
                                    691 ; now scale to double 
                                    692 ; scale further <= MAX_MANTISSA 
      0030F5                        693 MMSTA6: 
      0030F5 CD 05 3B         [ 4]  694     CALL RFROM 
      0030F8 CD 07 7E         [ 4]  695     CALL NROT 
      0030FB CD 2F C3         [ 4]  696     CALL SCALETOM
      0030FE CD 27 FE         [ 4]  697     CALL DTOR 
      003101 CD 07 C0         [ 4]  698     CALL PLUS 
      003104 CD 28 1C         [ 4]  699     CALL DRFROM 
      003107 CD 05 3B         [ 4]  700     CALL RFROM
      00310A                        701     _QBRAN MMSTA7
      00310A CD 04 9A         [ 4]    1     CALL QBRAN
      00310D 31 12                    2     .word MMSTA7
      00310F CD 07 FD         [ 4]  702     CALL DNEGA
      003112                        703 MMSTA7:
      003112 CD 07 5F         [ 4]  704     CALL ROT ; m e 
      003115 81               [ 4]  705     RET 
                                    706 
                                    707 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    708 ;    F* ( f#1 f#2 -- f#3 )
                                    709 ;    float product 
                                    710 ;    f#3=f#1 * f#2 
                                    711 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003116                        712     _HEADER FSTAR,2,"F*"
      003116 30 3A                    1         .word LINK 
                           003118     2         LINK=.
      003118 02                       3         .byte 2  
      003119 46 2A                    4         .ascii "F*"
      00311B                          5         FSTAR:
      00311B CD 2C 32         [ 4]  713     CALL ATEXP ; f#1 m2 e2 
      00311E CD 05 5A         [ 4]  714     CALL TOR   
      003121 CD 26 81         [ 4]  715     CALL DSWAP ; m2 f#1
      003124 CD 2C 32         [ 4]  716     CALL ATEXP ; m2 m1 e1 
      003127 CD 05 3B         [ 4]  717     CALL RFROM ; m2 m1 e1 e2 
      00312A CD 07 C0         [ 4]  718     CALL PLUS  ; m2 m1 e 
      00312D CD 05 5A         [ 4]  719     CALL TOR   ; m2 m1 R: e 
      003130 CD 30 3E         [ 4]  720     CALL MMSTAR ; m2*m1 e   
      003133 CD 05 3B         [ 4]  721     CALL RFROM 
      003136 CD 07 C0         [ 4]  722     CALL PLUS 
      003139 CD 2C 77         [ 4]  723     CALL STEXP ; f#3 
      00313C 81               [ 4]  724     RET 
                                    725 
                                    726 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    727 ;  F/ ( f#1 f#2 -- f#3 )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



                                    728 ;  float division
                                    729 ;  f#3 = f#1/f#2
                                    730 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00313D                        731     _HEADER FSLASH,2,"F/"
      00313D 31 18                    1         .word LINK 
                           00313F     2         LINK=.
      00313F 02                       3         .byte 2  
      003140 46 2F                    4         .ascii "F/"
      003142                          5         FSLASH:
      003142 CD 2C 32         [ 4]  732     CALL ATEXP  ; f#1 m2 e2  
      003145 CD 05 5A         [ 4]  733     CALL TOR    ; f#1 m2   R: e2 
      003148 CD 26 81         [ 4]  734     CALL DSWAP  ; m2 f#1 
      00314B CD 2C 32         [ 4]  735     CALL ATEXP  ; m2 m1 e1 
      00314E CD 05 3B         [ 4]  736     CALL RFROM  ; m2 m1 e1 e2
      003151 CD 07 C0         [ 4]  737     CALL PLUS   ; m2 m1 e 
      003154 CD 05 5A         [ 4]  738     CALL TOR    ; m2 m1 R: e 
      003157 CD 26 81         [ 4]  739     CALL DSWAP  ; m1 m2 R: e
      00315A CD 07 AB         [ 4]  740     CALL DDUP  ; m1 m2 m2 R: e
      00315D CD 27 FE         [ 4]  741     CALL DTOR  ; m1 m2 R: e m2 ( keep divisor need later ) 
      003160 CD 29 CE         [ 4]  742     CALL DDSLMOD ; remainder m1/m2 R: e m2 
      003163 CD 28 C5         [ 4]  743     CALL DOVER ; if remainder null done 
      003166 CD 25 18         [ 4]  744     CALL DZEQUAL 
      003169                        745     _TBRAN FSLASH8 
      003169 CD 04 A8         [ 4]    1     CALL TBRAN 
      00316C 31 C5                    2     .word FSLASH8 
                                    746 ; get fractional digits from remainder until mantissa saturate
      00316E                        747 FSLASH1: ; remainder mantissa R: e divisor 
                                    748 ; check for mantissa saturation 
      00316E CD 07 AB         [ 4]  749     CALL DDUP 
      003171                        750     _DOLIT 0XCCCC 
      003171 CD 04 71         [ 4]    1     CALL DOLIT 
      003174 CC CC                    2     .word 0XCCCC 
      003176                        751     _DOLIT 0xC
      003176 CD 04 71         [ 4]    1     CALL DOLIT 
      003179 00 0C                    2     .word 0xC 
      00317B CD 27 76         [ 4]  752     CALL DGREAT 
      00317E                        753     _TBRAN FSLASH8 ; another loop would result in mantissa overflow 
      00317E CD 04 A8         [ 4]    1     CALL TBRAN 
      003181 31 C5                    2     .word FSLASH8 
                                    754 ; multiply mantissa by 10 
      003183                        755     _DOLIT 10 
      003183 CD 04 71         [ 4]    1     CALL DOLIT 
      003186 00 0A                    2     .word 10 
      003188 CD 0B 4A         [ 4]  756     CALL ZERO 
      00318B CD 29 6B         [ 4]  757     CALL DSTAR 
                                    758 ; mutliply remainder by 10     
      00318E CD 26 81         [ 4]  759     CALL DSWAP 
      003191                        760     _DOLIT 10 
      003191 CD 04 71         [ 4]    1     CALL DOLIT 
      003194 00 0A                    2     .word 10 
      003196 CD 0B 4A         [ 4]  761     CALL ZERO 
      003199 CD 29 6B         [ 4]  762     CALL DSTAR 
                                    763 ; divide remainder by m2     
      00319C CD 28 34         [ 4]  764     CALL DRAT 
      00319F CD 29 CE         [ 4]  765     CALL DDSLMOD 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



      0031A2 CD 26 81         [ 4]  766     CALL DSWAP ; mantissa frac_digit remainder R: e divisor  
      0031A5 CD 27 FE         [ 4]  767     CALL DTOR  ; mantissa frac_digit R: e divisor remainder 
      0031A8 CD 2A C5         [ 4]  768     CALL DPLUS ; mantissa+frac_digit 
      0031AB CD 28 1C         [ 4]  769     CALL DRFROM ; mantissa remainder 
      0031AE CD 28 1C         [ 4]  770     CALL DRFROM ; mantissa remainder divisor 
      0031B1 CD 05 3B         [ 4]  771     CALL RFROM  ; mantissa remainder divisor e 
      0031B4 CD 0A EB         [ 4]  772     CALL ONEM   ; decrement exponent 
      0031B7 CD 05 5A         [ 4]  773     CALL TOR    ; mantissa remainder divisor R: e 
      0031BA CD 27 FE         [ 4]  774     CALL DTOR   ; mantissa remainder R: e divisor 
      0031BD CD 26 81         [ 4]  775     CALL DSWAP  ; remainder mantissa  
      0031C0                        776     _BRAN FSLASH1
      0031C0 CD 04 B6         [ 4]    1     CALL BRAN 
      0031C3 31 6E                    2     .word FSLASH1 
      0031C5                        777 FSLASH8: ; remainder mantissa R: e divisor 
      0031C5 CD 26 81         [ 4]  778     CALL DSWAP  
      0031C8 CD 07 A0         [ 4]  779     CALL DDROP  ; drop remainder     
      0031CB CD 28 1C         [ 4]  780     CALL DRFROM
      0031CE CD 07 A0         [ 4]  781     CALL DDROP  ; drop divisor 
      0031D1 CD 05 3B         [ 4]  782     CALL RFROM  ; exponent 
      0031D4 CD 2C 77         [ 4]  783     CALL STEXP 
      0031D7 81               [ 4]  784     RET 
                                    785 
                                    786 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    787 ;   D>F  ( # -- f# )
                                    788 ;   convert double to float 
                                    789 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0031D8                        790     _HEADER DTOF,3,"D>F"
      0031D8 31 3F                    1         .word LINK 
                           0031DA     2         LINK=.
      0031DA 03                       3         .byte 3  
      0031DB 44 3E 46                 4         .ascii "D>F"
      0031DE                          5         DTOF:
      0031DE CD 25 77         [ 4]  791     CALL DSIGN 
      0031E1 CD 05 5A         [ 4]  792     CALL TOR
      0031E4 CD 25 60         [ 4]  793     CALL DABS  
      0031E7                        794 DTOF1:      
      0031E7 CD 2F C3         [ 4]  795     CALL SCALETOM 
      0031EA CD 05 3B         [ 4]  796     CALL RFROM
      0031ED                        797     _QBRAN DTOF2 
      0031ED CD 04 9A         [ 4]    1     CALL QBRAN
      0031F0 31 F5                    2     .word DTOF2
      0031F2 CD 25 36         [ 4]  798     CALL DNEGAT 
      0031F5                        799 DTOF2: 
      0031F5 CD 07 5F         [ 4]  800     CALL ROT 
      0031F8 CD 2C 77         [ 4]  801     CALL STEXP 
      0031FB 81               [ 4]  802     RET 
                                    803 
                                    804 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    805 ;   F>D  ( f# -- # )
                                    806 ;  convert float to double 
                                    807 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0031FC                        808     _HEADER FTOD,3,"F>D"
      0031FC 31 DA                    1         .word LINK 
                           0031FE     2         LINK=.
      0031FE 03                       3         .byte 3  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



      0031FF 46 3E 44                 4         .ascii "F>D"
      003202                          5         FTOD:
      003202 CD 2C 32         [ 4]  809     CALL ATEXP ; m e 
      003205 CD 07 4E         [ 4]  810     CALL QDUP
      003208                        811     _QBRAN FTOD9
      003208 CD 04 9A         [ 4]    1     CALL QBRAN
      00320B 32 98                    2     .word FTOD9
      00320D CD 05 5A         [ 4]  812     CALL TOR 
      003210 CD 25 77         [ 4]  813     CALL DSIGN 
      003213 CD 07 7E         [ 4]  814     CALL NROT 
      003216 CD 25 60         [ 4]  815     CALL DABS
      003219 CD 05 3B         [ 4]  816     CALL RFROM  
      00321C CD 05 91         [ 4]  817     CALL DUPP   
      00321F CD 05 CA         [ 4]  818     CALL ZLESS 
      003222                        819     _QBRAN FTOD4 
      003222 CD 04 9A         [ 4]    1     CALL QBRAN
      003225 32 60                    2     .word FTOD4
                                    820 ; negative exponent 
      003227 CD 08 53         [ 4]  821     CALL ABSS 
      00322A CD 05 5A         [ 4]  822     CALL TOR
      00322D                        823     _BRAN FTOD2  
      00322D CD 04 B6         [ 4]    1     CALL BRAN 
      003230 32 4B                    2     .word FTOD2 
      003232                        824 FTOD1:
      003232 CD 07 AB         [ 4]  825     CALL DDUP 
      003235 CD 25 18         [ 4]  826     CALL DZEQUAL 
      003238                        827     _TBRAN FTOD3 
      003238 CD 04 A8         [ 4]    1     CALL TBRAN 
      00323B 32 55                    2     .word FTOD3 
      00323D                        828     _DOLIT 10 
      00323D CD 04 71         [ 4]    1     CALL DOLIT 
      003240 00 0A                    2     .word 10 
      003242 CD 25 90         [ 4]  829     CALL DSLMOD 
      003245 CD 07 5F         [ 4]  830     CALL ROT 
      003248 CD 05 87         [ 4]  831     CALL DROP
      00324B                        832 FTOD2:      
      00324B                        833     _DONXT FTOD1
      00324B CD 04 85         [ 4]    1     CALL DONXT 
      00324E 32 32                    2     .word FTOD1 
      003250                        834     _BRAN FTOD8   
      003250 CD 04 B6         [ 4]    1     CALL BRAN 
      003253 32 8D                    2     .word FTOD8 
      003255                        835 FTOD3: 
      003255 CD 05 3B         [ 4]  836     CALL RFROM 
      003258 CD 05 87         [ 4]  837     CALL DROP 
      00325B                        838     _BRAN FTOD8  
      00325B CD 04 B6         [ 4]    1     CALL BRAN 
      00325E 32 8D                    2     .word FTOD8 
                                    839 ; positive exponent 
      003260                        840 FTOD4:
      003260 CD 05 5A         [ 4]  841     CALL TOR 
      003263                        842     _BRAN FTOD6
      003263 CD 04 B6         [ 4]    1     CALL BRAN 
      003266 32 88                    2     .word FTOD6 
      003268                        843 FTOD5:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



      003268 CD 07 AB         [ 4]  844     CALL DDUP 
      00326B                        845     _DOLIT 0XCCCC
      00326B CD 04 71         [ 4]    1     CALL DOLIT 
      00326E CC CC                    2     .word 0XCCCC 
      003270                        846     _DOLIT 0XCCC  
      003270 CD 04 71         [ 4]    1     CALL DOLIT 
      003273 0C CC                    2     .word 0XCCC 
      003275 CD 27 76         [ 4]  847     CALL DGREAT 
      003278                        848     _TBRAN FTOD3 
      003278 CD 04 A8         [ 4]    1     CALL TBRAN 
      00327B 32 55                    2     .word FTOD3 
      00327D                        849     _DOLIT 10 
      00327D CD 04 71         [ 4]    1     CALL DOLIT 
      003280 00 0A                    2     .word 10 
      003282 CD 0B 4A         [ 4]  850     CALL ZERO 
      003285 CD 29 6B         [ 4]  851     CALL DSTAR 
      003288                        852 FTOD6: 
      003288                        853     _DONXT FTOD5 
      003288 CD 04 85         [ 4]    1     CALL DONXT 
      00328B 32 68                    2     .word FTOD5 
      00328D                        854 FTOD8:
      00328D CD 07 5F         [ 4]  855     CALL ROT 
      003290                        856     _QBRAN FTOD9 
      003290 CD 04 9A         [ 4]    1     CALL QBRAN
      003293 32 98                    2     .word FTOD9
      003295 CD 07 FD         [ 4]  857     CALL DNEGA
      003298                        858 FTOD9:          
      003298 81               [ 4]  859     RET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



                                   4835 .endif 
                                   4836 
                                   4837 ;===============================================================
                                   4838 
                           0031FE  4839 LASTN =	LINK   ;last name defined
                                   4840 
                                   4841 ; application code begin here
      003300                       4842 	.bndry 128 ; align on flash block  
      003300                       4843 app_space: 
                                   4844 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        00085C R   |   6 ABOR1      00135D R
  6 ABOR2      001374 R   |   6 ABORQ      001355 R   |   6 ABORT      001346 R
  6 ABRTQ      001631 R   |   6 ABSS       000853 R   |   6 ACCEP      0012DC R
  6 ACCP1      0012E5 R   |   6 ACCP2      00130B R   |   6 ACCP3      00130E R
  6 ACCP4      001310 R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |   6 ADRADJ     00073E R
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  6 AFT        00161C R   |   6 AGAIN      001572 R   |   6 AHEAD      0015CF R
  6 ALLOT      001485 R   |   6 ANDD       0005F0 R   |     APP_CP  =  004004 
    APP_LAST=  004000     |     APP_RUN =  004002     |     APP_VP  =  004006 
  6 AT         0004EA R   |   6 ATEXE      000C6E R   |   6 ATEXP      002C32 R
  6 AUTORUN    000129 R   |     AWU_APR =  0050F1     |     AWU_CSR =  0050F0 
    AWU_TBR =  0050F2     |     B0_MASK =  000001     |     B115200 =  000006 
  6 B115K2     0003E0 R   |     B19200  =  000003     |   6 B19K2      0003BD R
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
  6 B2K4       00038E R   |     B2_MASK =  000004     |     B38400  =  000004 
    B3_MASK =  000008     |     B460800 =  000008     |     B4800   =  000001 
  6 B4K8       00039C R   |     B4_MASK =  000010     |     B57600  =  000005 
  6 B57K6      0003CE R   |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
  6 B9K6       0003AC R   |   6 BACK1      001284 R   |   6 BASE       000661 R
    BASEE   =  00000A     |   6 BAUD       0003F0 R   |     BCNT    =  000001 
  6 BCOMP      0014C7 R   |   6 BDIGS      000D55 R   |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
  6 BEGIN      001554 R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
  6 BKSLA      0010D9 R   |   6 BKSP       001254 R   |     BKSPP   =  000008 
  6 BLANK      000B3D R   |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |   6 BRAN       0004B6 R   |     BTW     =  000001 
  6 BUF2ROW    002099 R   |   6 BYE        0000B6 R   |     CADR    =  000003 
    CALLL   =  0000CD     |   6 CALLOT     0022E2 R   |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CARRY   =  00002A 
    CASE_SEN=  000000     |   6 CAT        000508 R   |   6 CCOMMA     0014A9 R
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CELLL   =  000002     |   6 CELLM      000AC2 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]

Symbol Table

  6 CELLP      000AB3 R   |   6 CELLS      000AD1 R   |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   6 CHAR1      000EAB R
  6 CHAR2      000EAE R   |   6 CHKIVEC    001F87 R   |     CLKOPT  =  004807 
    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |   6 CMOV1      000C8D R
  6 CMOV2      000CA5 R   |   6 CMOVE      000C85 R   |     CNTDWN  =  000032 
  6 CNTXT      0006E4 R   |   6 COLD       001A88 R   |   6 COLD1      001A88 R
  6 COLON      0017DA R   |   6 COMMA      001492 R   |   6 COMPI      0014D7 R
    COMPO   =  000040     |   6 CONSTANT   001884 R   |   6 COUNT      000C21 R
  6 CPP        000700 R   |     CPU_A   =  007F00     |     CPU_CCR =  007F0A 
    CPU_PCE =  007F01     |     CPU_PCH =  007F02     |     CPU_PCL =  007F03 
    CPU_SPH =  007F08     |     CPU_SPL =  007F09     |     CPU_XH  =  007F04 
    CPU_XL  =  007F05     |     CPU_YH  =  007F06     |     CPU_YL  =  007F07 
  6 CR         000ED9 R   |   6 CREAT      001820 R   |     CRR     =  00000D 
  6 CSTOR      0004F7 R   |   6 CTABLE     002303 R   |   6 CTAT       002324 R
  6 CTINIT     00234C R   |   6 D2SLASH    0028DE R   |   6 D2STAR     0028F5 R
  6 DABS       002560 R   |   6 DABS1      00256E R   |   6 DAT        000C01 R
    DATSTK  =  001680     |   6 DCLZ       0026AF R   |   6 DCLZ1      0026B8 R
  6 DCLZ4      0026C1 R   |   6 DCLZ8      0026CE R   |   6 DCMP       0027CC R
  6 DCMP2      0027D8 R   |   6 DCMP4      0027F3 R   |   6 DCMP_EQU   0027E5 R
  6 DCMP_GRE   0027EF R   |   6 DCMP_SMA   0027E9 R   |   6 DCONST     0018B9 R
  6 DDIG       0025D1 R   |   6 DDIGS      0025EA R   |   6 DDOT       002601 R
  6 DDOT0      002615 R   |   6 DDOT1      00262B R   |   6 DDROP      0007A0 R
  6 DDSLMOD    0029CE R   |   6 DDSTAR3    0029C4 R   |   6 DDUP       0007AB R
    DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF     |   6 DECIM      000E05 R
  6 DEPTH      000B8C R   |   6 DEQU4      00276A R   |   6 DEQUAL     002755 R
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |   6 DGREAT     002776 R
  6 DGREAT4    00278B R   |   6 DGTQ1      000E4A R   |   6 DI         0000C4 R
  6 DIG        000D7E R   |   6 DIGIT      000D19 R   |   6 DIGS       000D8F R
  6 DIGS1      000D8F R   |   6 DIGS2      000D9C R   |   6 DIGTQ      000E19 R
    DISCOVER=  000000     |   6 DLESS      002797 R   |   6 DLESS4     0027AD R
  6 DLITER     00289E R   |   6 DLSHIFT    002911 R   |   6 DLSHIFT1   002922 R
  6 DLSHIFT2   002937 R   |     DM_BK1RE=  007F90     |     DM_BK1RH=  007F91 
    DM_BK1RL=  007F92     |     DM_BK2RE=  007F93     |     DM_BK2RH=  007F94 
    DM_BK2RL=  007F95     |     DM_CR1  =  007F96     |     DM_CR2  =  007F97 
    DM_CSR1 =  007F98     |     DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A 
  6 DN1        00081A R   |   6 DNEG1      002555 R   |   6 DNEGA      0007FD R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]

Symbol Table

  6 DNEGAT     002536 R   |   6 DOCONST    0018A4 R   |   6 DOLIT      000471 R
  6 DONXT      000485 R   |     DOORBELL=  000000     |   6 DOSTR      000EEF R
  6 DOT        000F92 R   |   6 DOT1       000FA8 R   |   6 DOTI1      001A09 R
  6 DOTID      0019F3 R   |   6 DOTO1      0013E9 R   |   6 DOTOK      0013CF R
  6 DOTPR      0010BB R   |   6 DOTQ       00164B R   |   6 DOTQP      000F18 R
  6 DOTR       000F26 R   |   6 DOTS       001995 R   |   6 DOTS1      0019A0 R
  6 DOTS2      0019A9 R   |   6 DOVAR      000651 R   |   6 DOVER      0028C5 R
  6 DO_DCONS   0018DC R   |   6 DPLUS      002AC5 R   |   6 DPLUS1     002AEC R
  6 DRAT       002834 R   |   6 DRFROM     00281C R   |   6 DROP       000587 R
  6 DROT       00271B R   |   6 DRSHIFT    002948 R   |   6 DRSHIFT1   00294F R
  6 DRSHIFT2   002965 R   |   6 DSIGN      002577 R   |   6 DSIGN1     002581 R
  6 DSLA1      0029E8 R   |   6 DSLA2      002A0A R   |   6 DSLA3      002A4A R
  6 DSLA4      002A70 R   |   6 DSLA7      002AA1 R   |   6 DSLA8      002AA4 R
  6 DSLA9      002ABF R   |   6 DSLMOD     002590 R   |   6 DSLMOD3    0025AB R
  6 DSLMOD4    0025B7 R   |   6 DSLMODa    0025B2 R   |   6 DSLMODb    0025BD R
  6 DSSTAR     002638 R   |   6 DSSTAR1    00264F R   |   6 DSSTAR3    002678 R
  6 DSTAR      00296B R   |   6 DSTOR      000BDB R   |   6 DSUB       002AF7 R
  6 DSUB1      002B1E R   |   6 DSWAP      002681 R   |   6 DTOF       0031DE R
  6 DTOF1      0031E7 R   |   6 DTOF2      0031F5 R   |   6 DTOR       0027FE R
  6 DUMP       00194B R   |   6 DUMP1      001962 R   |   6 DUMP3      001984 R
  6 DUMPP      00191A R   |   6 DUPP       000591 R   |   6 DVARIA     002852 R
  6 DZEQUAL    002518 R   |   6 DZLESS     0027B4 R   |   6 DZLESS1    0027BE R
  6 EDIGS      000DBA R   |   6 EDOT       002CF6 R   |   6 EDOT0      002D0D R
  6 EDOT1      002D1B R   |   6 EDOT2      002D21 R   |   6 EDOT3      002D3A R
  6 EDOT4      002D69 R   |   6 EDOT5      002D85 R   |   6 EECSTORE   001D38 R
  6 EEPCP      001B5E R   |   6 EEPLAST    001B31 R   |   6 EEPROM     001B19 R
    EEPROM_B=  004000     |     EEPROM_E=  0047FF     |     EEPROM_R=  000010 
    EEPROM_S=  000800     |   6 EEPRUN     001B48 R   |   6 EEPVP      001B74 R
  6 EESTORE    001D84 R   |   6 EE_CCOMM   00204E R   |   6 EE_COMMA   00202D R
  6 EE_CREAD   001CC9 R   |   6 EE_READ    001CA7 R   |   6 EI         0000BD R
  6 ELSEE      0015AA R   |   6 EMIT       000436 R   |   6 ENEPER     00226E R
    EOL_CR  =  000001     |     EOL_LF  =  000000     |   6 EQ1        000877 R
  6 EQUAL      000861 R   |   6 ERASE      000CE7 R   |     ERR     =  00001B 
  6 EVAL       001412 R   |   6 EVAL1      001412 R   |   6 EVAL2      00142E R
  6 EXE1       000C7C R   |   6 EXECU      0004C6 R   |     EXT     =  000000 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |   6 EXTRC      000D41 R
  6 FADDR      00211B R   |   6 FARAT      001BDF R   |   6 FARCAT     001BEB R
  6 FC_XOFF    000463 R   |   6 FC_XON     00044D R   |   6 FDOT       002D94 R
  6 FDOT0      002DD2 R   |   6 FDOT1      002DC1 R   |   6 FDOT10     002E2E R
  6 FDOT2      002DE0 R   |   6 FDOT3      002DF9 R   |   6 FDOT6      002E09 R
  6 FDOT7      002E0E R   |   6 FDOT8      002E16 R   |   6 FDOT9      002E1E R
  6 FER        002B5B R   |     FHSE    =  7A1200     |     FHSI    =  F42400 
  6 FILL       000CB4 R   |   6 FILL1      000CD1 R   |   6 FILL2      000CDA R
  6 FIND       0011B0 R   |   6 FIND1      0011CE R   |   6 FIND2      0011FC R
  6 FIND3      001208 R   |   6 FIND4      00121C R   |   6 FIND5      001229 R
  6 FIND6      00120D R   |   6 FINIT      002B51 R   |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]

Symbol Table

    FLASH_IA=  000000     |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |   6 FLOATQ     002EA6 R
  6 FLOATQ0    002EB0 R   |   6 FLOATQ1    002F15 R   |   6 FLOATQ2    002F1E R
  6 FLOATQ3    002F26 R   |   6 FLOATQ4    002F3A R   |   6 FLOAT_ER   002F4F R
  6 FLOAT_ER   002F4C R   |     FLSI    =  01F400     |   6 FMOVE      002126 R
  6 FMOVE2     002157 R   |   6 FNE        002B7D R   |   6 FOR        001527 R
  6 FORGET     00015A R   |   6 FORGET1    000189 R   |   6 FORGET2    00020F R
  6 FORGET4    000218 R   |   6 FORGET6    0001D1 R   |   6 FOV        002B92 R
  6 FPSTOR     001AFA R   |   6 FPSW       002B2B R   |     FPTR    =  000034 
  6 FREEVAR    000225 R   |   6 FREEVAR4   00025B R   |   6 FRESET     002B3D R
  6 FSLASH     003142 R   |   6 FSLASH1    00316E R   |   6 FSLASH8    0031C5 R
  6 FSTAR      00311B R   |   6 FTOD       003202 R   |   6 FTOD1      003232 R
  6 FTOD2      00324B R   |   6 FTOD3      003255 R   |   6 FTOD4      003260 R
  6 FTOD5      003268 R   |   6 FTOD6      003288 R   |   6 FTOD8      00328D R
  6 FTOD9      003298 R   |   6 FZE        002B68 R   |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
  6 GREAT      0008DC R   |   6 GREAT1     0008F2 R   |   6 HDOT       000F75 R
  6 HERE       000C38 R   |   6 HEX        000DF0 R   |   6 HI         001A45 R
  6 HLD        0006D1 R   |   6 HOLD       000D65 R   |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  6 ICOLON     0017EB R   |   6 IFETCH     001545 R   |   6 IFF        001582 R
  6 IFMOVE     0021FF R   |     IMEDD   =  000080     |   6 IMMED      0017FD R
  6 INCH       00042A R   |   6 INC_FPTR   001C74 R   |   6 INITOFS    0017B3 R
  6 INN        00067F R   |     INPUT_DI=  000000     |     INPUT_EI=  000001 
    INPUT_FL=  000000     |     INPUT_PU=  000001     |   6 INTE1      0013B1 R
  6 INTER      001387 R   |   6 INTQ       0023A8 R   |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]

Symbol Table

    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
  6 INVER      0007DA R   |     IPR0    =  000002     |     IPR1    =  000001 
    IPR2    =  000000     |     IPR3    =  000003     |     IPR_MASK=  000003 
    IRET_COD=  000080     |   6 ISEMI      001748 R   |     ITC_SPR1=  007F70 
    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |   6 JSRC       00179D R   |   6 KEY        000E59 R
  6 KTAP       0012A1 R   |   6 KTAP1      0012C4 R   |   6 KTAP2      0012C7 R
  6 LAST       000710 R   |   6 LASTN   =  0031FE R   |   6 LBRAC      0013BE R
    LED2_BIT=  000005     |     LED2_MAS=  000020     |     LED2_POR=  00500A 
  6 LESS       00089E R   |     LF      =  00000A     |   6 LINK    =  0031FE R
  6 LITER      0014F9 R   |   6 LN2S       0022CA R   |   6 LOCK       001C60 R
  6 LOG2S      0022B4 R   |   6 LSCALE     002F70 R   |   6 LSHIFT     000AFC R
  6 LSHIFT1    000B05 R   |   6 LSHIFT4    000B0D R   |   6 LT1        0008B4 R
    MASKK   =  001F7F     |   6 MAX        0008FC R   |   6 MAX1       00090F R
    MAX_MANT=  7FFFFF     |   6 MIN        000919 R   |   6 MIN1       00092C R
  6 MMOD1      0009B5 R   |   6 MMOD2      0009C9 R   |   6 MMOD3      0009E0 R
  6 MMSM1      000970 R   |   6 MMSM3      000974 R   |   6 MMSM4      000980 R
  6 MMSMa      00097B R   |   6 MMSMb      000986 R   |   6 MMSTA1     003049 R
  6 MMSTA2     003054 R   |   6 MMSTA3     00305F R   |   6 MMSTA4     0030CA R
  6 MMSTA5     0030DC R   |   6 MMSTA6     0030F5 R   |   6 MMSTA7     003112 R
  6 MMSTAR     00303E R   |   6 MODD       0009FA R   |   6 MONE       000B63 R
    MS      =  000030     |   6 MSEC       0002D0 R   |   6 MSMOD      000998 R
  6 MSTA1      000A8B R   |   6 MSTAR      000A68 R   |     NAFR    =  004804 
  6 NAMEQ      001249 R   |   6 NAMET      00115A R   |     NCLKOPT =  004808 
  6 NDROT      0026DF R   |   6 NEGAT      0007EB R   |   6 NEX1       000492 R
  6 NEXT       001536 R   |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPT6   =  00480C 
    NOPT7   =  00480E     |     NOPTBL  =  00487F     |   6 NROT       00077E R
  6 NTIB       00068F R   |     NUBC    =  004802     |     NUCLEO  =  000001 
  6 NUFQ       000E6F R   |   6 NUFQ1      000E88 R   |   6 NUMBQ      002451 R
  6 NUMQ0      002492 R   |   6 NUMQ1      0024B4 R   |   6 NUMQ3      0024DE R
  6 NUMQ4      0024FF R   |   6 NUMQ8      002508 R   |     NWDGOPT =  004806 
    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   6 NonHandl   000000 R   |   6 OFFSET     000735 R
    OFS     =  000005     |   6 ONE        000B55 R   |   6 ONEM       000AEB R
  6 ONEP       000ADE R   |     OPT     =  000002     |     OPT0    =  004800 
    OPT1    =  004801     |     OPT2    =  004803     |     OPT3    =  004805 
    OPT4    =  004807     |     OPT5    =  004809     |     OPT6    =  00480B 
    OPT7    =  00480D     |     OPTBL   =  00487E     |     OPTIMIZE=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]

Symbol Table

    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  6 ORIG       000049 R   |   6 ORR        000604 R   |   6 OUTPUT     00043B R
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |   6 OVER       0005BB R   |   6 OVERT      001716 R
    PA      =  000000     |   6 PACKS      000CF8 R   |   6 PAD        000C49 R
  6 PAREN      0010CA R   |   6 PARS       000FC3 R   |   6 PARS1      000FEE R
  6 PARS2      001019 R   |   6 PARS3      00101C R   |   6 PARS4      001025 R
  6 PARS5      001048 R   |   6 PARS6      00105D R   |   6 PARS7      00106C R
  6 PARS8      00107B R   |   6 PARSE      00108C R   |   6 PARSEXP_   002E89 R
  6 PAUSE      0002E0 R   |     PA_BASE =  005000     |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_BASE =  005005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_BASE =  00500A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |   6 PDUM1      00192D R   |   6 PDUM2      00193E R
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |   6 PICK       000BA3 R
  6 PII        00222D R   |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   6 PLUS       0007C0 R   |   6 PNAM1      0016BB R
  6 POSMANT    002C6C R   |   6 PRESE      00143D R   |     PROD1   =  000024 
    PROD2   =  000026     |     PROD3   =  000028     |   6 PROTECTE   000201 R
  6 PSTOR      000BBA R   |     PTR16   =  000035     |     PTR8    =  000036 
  6 PTRPLUS    001C8C R   |   6 QBRAN      00049A R   |   6 QDUP       00074E R
  6 QDUP1      000758 R   |   6 QKEY       000418 R   |   6 QSTAC      0013F5 R
  6 QUERY      001321 R   |   6 QUEST      000FB5 R   |   6 QUIT       00145A R
  6 QUIT1      001462 R   |   6 QUIT2      001465 R   |   6 RAM2EE     0020C7 R
    RAMBASE =  000000     |   6 RAMLAST    000723 R   |     RAM_BASE=  000000 
    RAM_END =  0017FF     |     RAM_SIZE=  001800     |   6 RANDOM     00027E R
  6 RAT        00054E R   |   6 RBRAC      00178A R   |   6 REPEA      0015FF R
  6 RFREE      0020AE R   |   6 RFROM      00053B R   |     ROP     =  004800 
  6 ROT        00075F R   |   6 ROW2BUF    002070 R   |     ROWBUFF =  001680 
    RP0     =  00002E     |   6 RPAT       000518 R   |     RPP     =  0017FF 
  6 RPSTO      000525 R   |   6 RSCALE     002F96 R   |   6 RSHIFT     000B18 R
  6 RSHIFT1    000B21 R   |   6 RSHIFT4    000B29 R   |     RST_SR  =  0050B3 
  6 RT12_2     00229D R   |   6 SAME1      001178 R   |   6 SAME2      0011A1 R
  6 SAMEQ      001170 R   |   6 SCAL1      002FC9 R   |   6 SCAL2      002FF5 R
  6 SCALETOM   002FC3 R   |   6 SCOM1      0016F0 R   |   6 SCOM2      0016F3 R
  6 SCOMP      0016D2 R   |   6 SEED       000265 R   |     SEEDX   =  000038 
    SEEDY   =  00003A     |   6 SEMIS      001726 R   |   6 SETISP     0000D0 R
  6 SET_RAML   00186D R   |   6 SFN        002BDE R   |     SFR_BASE=  005000 
    SFR_END =  0057FF     |   6 SFV        002C16 R   |   6 SFZ        002BA7 R
  6 SIGN       000DA4 R   |   6 SIGN1      000DB4 R   |   6 SLASH      000A04 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]

Symbol Table

  6 SLMOD      0009E8 R   |   6 SNAME      001685 R   |     SP0     =  00002C 
  6 SPACE      000E91 R   |   6 SPACS      000EA0 R   |   6 SPAT       000571 R
    SPI_CR1 =  005200     |     SPI_CR2 =  005201     |     SPI_CRCP=  005205 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_TXCR=  005207     |     SPP     =  001680 
    SPSAVE  =  000001     |   6 SPSTO      00057E R   |   6 SQRT10     002286 R
  6 SQRT2      002244 R   |   6 SQRT3      00225B R   |   6 SSMOD      000A94 R
    SSP     =  000001     |     STACK   =  0017FF     |   6 STAR       000A5D R
  6 STASL      000AA5 R   |   6 STEXP      002C77 R   |   6 STEXP1     002C8D R
  6 STEXP2     002CC9 R   |   6 STEXP3     002CDC R   |   6 STOD       000822 R
  6 STORE      0004D3 R   |   6 STR        000DD2 R   |   6 STRCQ      001507 R
  6 STRQ       00163E R   |   6 STRQP      000F0E R   |   6 SUBB       000839 R
  6 SWAPP      0005A1 R   |     SWIM_CSR=  007F80     |   6 TAP        00128B R
  6 TBOOT      001A7C R   |   6 TBRAN      0004A8 R   |   6 TBUF       00069F R
    TBUFFBAS=  001680     |   6 TCHAR      000B74 R   |   6 TEMP       000670 R
  6 TEVAL      0006C2 R   |   6 TFLASH     0006B1 R   |   6 THENN      001597 R
  6 TIB        000C5A R   |     TIBB    =  001700     |     TIBBASE =  001700 
    TIC     =  000027     |   6 TICK       001471 R   |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  000000     |     TIM2_CCE=  000001     |     TIM2_CCE=  000004 
    TIM2_CCE=  000005     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCM=  000000 
    TIM2_CCM=  000004     |     TIM2_CCM=  000003     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_CR1=  000007 
    TIM2_CR1=  000000     |     TIM2_CR1=  000003     |     TIM2_CR1=  000001 
    TIM2_CR1=  000002     |     TIM2_EGR=  005304     |     TIM2_EGR=  000001 
    TIM2_EGR=  000002     |     TIM2_EGR=  000003     |     TIM2_EGR=  000006 
    TIM2_EGR=  000000     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
    TIM4_SR =  005342     |     TIM4_SR_=  000000     |   6 TIMEOUTQ   000310 R
  6 TIMER      0002FA R   |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
  6 TNAM2      0019C3 R   |   6 TNAM3      0019E1 R   |   6 TNAM4      0019E7 R
  6 TNAME      0019C0 R   |   6 TOFLASH    000335 R   |   6 TOKEN      00114C R
  6 TOR        00055A R   |   6 TORAM      000375 R   |     TRUEE   =  00FFFF 
  6 TWOSL      000B30 R   |   6 TYPE1      000EC0 R   |   6 TYPE2      000ECC R
  6 TYPES      000EBB R   |   6 Timer4Ha   000005 R   |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
    UART3   =  000001     |     UART3_BA=  005240     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]

Symbol Table

    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  005232 
    UART_BRR=  005233     |     UART_CR1=  005234     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  005235     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  005231     |     UART_GTR=  000009     |     UART_PSC=  00000A 
    UART_SR =  005230     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBASE   =  000006     |     UBC     =  004801     |     UCNTXT  =  000016 
    UCP     =  00001A     |     UCTIB   =  00000E     |     UD1     =  000001 
    UD2     =  000002     |     UD3     =  000003     |     UD4     =  000004 
  6 UDIV10     002FF6 R   |   6 UDOT       000F61 R   |   6 UDOTR      000F41 R
  6 UEND       000047 R   |     UFPSW   =  000008     |   6 UGREAT     0008BD R
  6 UGREAT1    0008D4 R   |     UHLD    =  000014     |     UINN    =  00000C 
    UINTER  =  000012     |     ULAST   =  00001C     |   6 ULES1      000896 R
  6 ULESS      000880 R   |   6 UMMOD      000954 R   |   6 UMSTA      000A13 R
  6 UNIQ1      00167C R   |   6 UNIQU      00165D R   |   6 UNLKEE     001BFA R
  6 UNLKFL     001C19 R   |   6 UNLOCK     001C38 R   |   6 UNTIL      00155F R
    UOFFSET =  00001E     |   6 UPDATCP    001BB7 R   |   6 UPDATLAS   001B8E R
  6 UPDATPTR   0021BA R   |   6 UPDATRUN   001BA6 R   |   6 UPDATVP    001BCE R
  6 UPL1       000645 R   |   6 UPLUS      00062E R   |     UPP     =  000006 
  6 UPPER      00110F R   |   6 UPPER1     001132 R   |   6 UPPER2     00113B R
    URLAST  =  000022     |     USR_BTN_=  000004     |     USR_BTN_=  000010 
    USR_BTN_=  005015     |     UTFLASH =  000020     |     UTIB    =  000010 
    UTMP    =  00000A     |   6 UTYP1      0018FD R   |   6 UTYP2      00190C R
  6 UTYPE      0018F8 R   |     UVP     =  000018     |   6 UZERO      00002B R
  6 VARIA      00183A R   |     VAR_BASE=  000080     |     VAR_TOP =  0017BF 
    VER     =  000004     |   6 VPP        0006F2 R   |     VSIZE   =  000006 
    WANT_CON=  000001     |     WANT_DEB=  000000     |     WANT_DOU=  000001 
    WANT_FLO=  000001     |     WANT_SCA=  000001     |     WANT_SEE=  000000 
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |   6 WHILE      0015E5 R
  6 WITHI      000939 R   |   6 WORDD      0010F5 R   |   6 WORDS      001A1D R
  6 WORS1      001A23 R   |   6 WORS2      001A3F R   |   6 WR_BYTE    001CE3 R
  6 WR_WORD    001D08 R   |   6 WTABLE     002312 R   |   6 WTAT       002336 R
  6 WTINIT     00237B R   |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
    XMEM_SIZ=  017830     |     XOFF    =  000013     |     XON     =  000011 
  6 XORR       000619 R   |     XTEMP   =  000024     |     YTEMP   =  000026 
  6 ZEQ1       002528 R   |   6 ZEQU1      0005E6 R   |   6 ZEQUAL     0005DC R
  6 ZERO       000B4A R   |   6 ZL1        0005D3 R   |   6 ZLESS      0005CA R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]

Symbol Table

  6 app_spac   003300 R   |   6 baudrate   00037B R   |   6 block_er   001DCE R
  6 clear_ra   000019 R   |   6 clock_in   000064 R   |   6 copy_buf   001E2E R
  6 copy_buf   001E4D R   |   6 copy_pro   001E4D R   |     da      =  000002 
    db      =  000003     |     dc      =  000000     |     dd      =  000001 
  6 do2lit     0028A9 R   |   6 erase_fl   001DF0 R   |   6 fmove_do   0021A3 R
  6 main       000016 R   |   6 next_row   002160 R   |   6 no_move    0021AA R
  6 nsign      0023C6 R   |   6 nsign1     0023F7 R   |   6 parse_di   0023FE R
  6 parse_ex   002E3E R   |   6 pristine   001ECE R   |   6 proceed_   001DF3 R
  6 reboot     000327 R   |   6 reset_ve   001F35 R   |   6 row_eras   001DAE R
  6 row_eras   001E07 R   |   6 row_eras   001E2E R   |   6 set_opti   001EA2 R
  6 set_vect   001FD6 R   |   6 uart_ini   000076 R   |   6 write_ro   001E72 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   3300   flags    0

