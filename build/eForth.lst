ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;-------------------------------------------------------------
                                     21 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                     22 ;  assemble using sdasstm8
                                     23 ;  implemented on NUCLEO-8S208RB board
                                     24 ;  Adapted by picatout 2019/10/27
                                     25 ;  https://github.com/picatout/stm8_nucleo/eForth
                                     26 ;--------------------------------------------------------------
                                     27 	.module EFORTH
                                     28          .optsdcc -mstm8
                                                .include "inc/macros.inc" 
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        
                                            ; macro to create dictionary header record
                                            .macro _HEADER label,len,name 
                                        
                                            ; runtime literal 
                                            .macro _DOLIT value 
                                        
                                            ; branch if TOS<>0
                                            ; TBRANCH 
                                            .macro _TBRAN target 
                                            
                                            ; branch if TOS==0 
                                            ; 0BRANCH 
                                            .macro _QBRAN target 
                                        
                                            ; uncondittionnal BRANCH 
                                            .macro _BRAN target 
                                        
                                            ; run time NEXT 
                                            .macro _DONXT target 
                                                .include "inc/config.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        
                                        ; constants to select board
                                        ; to assemble for a specific 
                                        ; board or MCU set it to 1 and the other
                                        ; to 0. 
                                 
                                 
                                 
                                        
                                        ; select end of line character
                                 
                                 
                                        
                                        ; set to 1 to include 
                                        ; scaling constants vocabulary
                                        ; see: const_ratio.asm 
                                 
                                        
                                        ; set to 1 to include 
                                        ; constants tables vocabulary 
                                        ; see: ctable.asm 
                                 
                                        
                                        ; include double library 
                                 
                                        
                                        ; to include floating point 
                                        ; library
                                        ; require double library  
                                 
                                        
                                        ; set to 1 to make vocabulary 
                                        ; case sensitive 
                                 
                                        
                                        ; how many bytes are reserved 
                                        ; by system at EEPROM base.
                                 
                                        
                                 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        .endif
                                        
                                 
                                        	.include "inc/stm8s105.inc"
                                        .if DISCOVERY
                                        	.include "inc/stm8s_disco.inc"
                                        .endif 
                                        XMEM_SIZE=0 ; size in bytes of EXTENDED MEMORY 
                                        UART_SR=UART2_SR
                                        UART_DR=UART2_DR
                                        UART_BRR1=UART2_BRR1
                                        UART_BRR2=UART2_BRR2
                                        UART_CR1=UART2_CR1
                                        UART_CR2=UART2_CR2
                                        .endif 
                                        
                                        	
                                         
                                        
                                        
                                        
                                     32 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     34 
                                     35 ;===============================================================
                                     36 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     37 ;  Date: 2020-06-07 
                                     38 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     39 ;  Date: 2019-10-26
                                     40 ;  Changes to memory map:
                                     41 ;       0x16f0  Data Stack, growing downward
                                     42 ;       0x1700  Terminal input buffer TIB
                                     43 ;       0x17ff  Return Stack, growing downard
                                     44 ;================================================================
                                     45 ;       STM8EF, Version 2.1, 13 July
                                     46 ;               Implemented on STM8S-Discovery Board.
                                     47 ;               Assembled by ST VisualDevelop STVD 
                                     48 ;               Bootup on internal 2 MHz clock
                                     49 ;               Switch to external 16 MHz crystal clock
                                     50 ;
                                     51 ; FORTH Virtual Machine:
                                     52 ; Subroutine threaded model
                                     53 ; SP Return stack pointer
                                     54 ; X Data stack pointer
                                     55 ; A,Y Scratch pad registers
                                     56 ;
                                     57 ; Memory Map:
                                     58 ; 0x0 RAM memory, system variables
                                     59 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     60 ; 0x780 Data stack, growing downward
                                     61 ; 0x790 Terminal input buffer TIB
                                     62 ; 0x7FF Return stack, growing downward
                                     63 ; 0x8000 Interrupt vector table
                                     64 ; 0x8080 FORTH startup code
                                     65 ; 0x80E7 Start of FORTH dictionary in ROM
                                     66 ; 0x9584 End of FORTH dictionary
                                     67 ;
                                     68 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     69 ;                  use UART1 instead of UART2 for communication with user.
                                     70 ;                  UART1 is available as ttyACM* device via USB connection.
                                     71 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     72 ;                  and MSEC word that return MS value.
                                     73 ;
                                     74 ;       EF12, Version 2.1, 18apr00cht
                                     75 ;               move to 8000H replacing WHYP.
                                     76 ;               copy interrupt vectors from WHYPFLSH.S19
                                     77 ;               to EF12.S19 before flashing
                                     78 ;               add TICKS1 and DELAY1 for motor stepping
                                     79 ;
                                     80 ;       EF12, 02/18/00, C. H. Ting
                                     81 ;       Adapt 86eForth v2.02 to 68HC12.
                                     82 ;               Use WHYP to seed EF12.ASM
                                     83 ;               Use AS12 native 68HC12 assembler:
                                     84 ;               as12 ef12.asm >ef12.lst
                                     85 ;       EF12A, add ADC code, 02mar00cht
                                     86 ;       EF12B, 01mar00cht
                                     87 ;               stack to 0x78, return stack to 0xf8.
                                     88 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     89 ;               add PWM registers
                                     90 ;               add SPI registers and code
                                     91 ;       EF12C, 12mar00cht
                                     92 ;               add MAX5250 D/A converter
                                     93 ;       EF12D, 15mar00cht
                                     94 ;               add all the Lexel interface words
                                     95 ;       EF12E, 18apr00cht, save for reference
                                     96 ;
                                     97 ;       Copyright (c) 2000
                                     98 ;       Dr. C. H. Ting
                                     99 ;       156 14th Avenue
                                    100 ;       San Mateo, CA 94402
                                    101 ;       (650) 571-7639
                                    102 ;
                                    103 
                                    104       
                                    105 ;*********************************************************
                                    106 ;	Assembler constants
                                    107 ;*********************************************************
                           000000   108 RAMBASE =	0x0000	   ;ram base
                           000001   109 .if NUCLEO 
                           0017FF   110 STACK   =	0x17FF 	;system (return) stack empty 
                           001680   111 DATSTK  =	0x1680	;data stack  empty
                           001680   112 TBUFFBASE =     0x1680  ; flash read/write transaction buffer address  
                           001700   113 TIBBASE =       0X1700  ; transaction input buffer addr.
                           000000   114 .else ; DISCOVERY
                                    115 STACK   =	0x7FF 	;system (return) stack empty 
                                    116 DATSTK  =	0x680	;data stack  empty
                                    117 TBUFFBASE =     0x680  ; flash read/write transaction buffer address  
                                    118 TIBBASE =       0X700  ; transaction input buffer addr.
                                    119 .endif
                                    120 
                                    121 ;; Memory allocation
                           000006   122 UPP     =     RAMBASE+6          ; systeme variables base address 
                           001680   123 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0017FF   124 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           001680   125 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           001700   126 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   127 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0017BF   128 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    129 
                                    130 ; user variables constants 
                           000006   131 UBASE = UPP       ; numeric base 
                           000008   132 UFPSW = UBASE+2  ; floating point state word 
                           00000A   133 UTMP = UFPSW+2    ; temporary storage
                           00000C   134 UINN = UTMP+2     ; >IN tib pointer 
                           00000E   135 UCTIB = UINN+2    ; tib count 
                           000010   136 UTIB = UCTIB+2    ; tib address 
                           000012   137 UINTER = UTIB+2   ; interpreter vector 
                           000014   138 UHLD = UINTER+2   ; hold 
                           000016   139 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000018   140 UVP = UCNTXT+2    ; variable pointer 
                           00001A   141 UCP = UVP+2      ; code pointer
                           00001C   142 ULAST = UCP+2    ; last dictionary pointer 
                           00001E   143 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000020   144 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
                           000022   145 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    146 
                                    147 ;******  System Variables  ******
                           000024   148 XTEMP	=	URLAST +2;address called by CREATE
                           000026   149 YTEMP	=	XTEMP+2	;address called by CREATE
                           000024   150 PROD1 = XTEMP	;space for UM*
                           000026   151 PROD2 = PROD1+2
                           000028   152 PROD3 = PROD2+2
                           00002A   153 CARRY = PROD3+2
                           00002C   154 SP0	= CARRY+2	;initial data stack pointer
                           00002E   155 RP0	= SP0+2		;initial return stack pointer
                           000030   156 MS    =   RP0+2         ; millisecond counter 
                           000032   157 CNTDWN =  MS+2          ; count down timer 
                           000034   158 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000035   159 PTR16 = FPTR+1          ; middle byte of farptr 
                           000036   160 PTR8 = FPTR+2           ; least byte of farptr 
                           000038   161 SEEDX = PTR8+2          ; PRNG seed X 
                           00003A   162 SEEDY = SEEDX+2         ; PRNG seed Y 
                                    163 
                                    164 ; EEPROM persistant data  
                           004000   165 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   166 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   167 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   168 APP_VP = APP_CP+2  ; free data space pointer 
                                    169 
                                    170 
                                    171 ;***********************************************
                                    172 ;; Version control
                                    173 
                           000004   174 VER     =     4         ;major release version
                           000000   175 EXT     =     0         ;minor extension
                                    176 
                                    177 ;; Constants
                                    178 
                           00FFFF   179 TRUEE   =     0xFFFF      ;true flag
                                    180 
                           000040   181 COMPO   =     0x40     ;lexicon compile only bit
                           000080   182 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   183 MASKK   =     0x1F7F  ;lexicon bit mask
                                    184 
                           000002   185 CELLL   =     2       ;size of a cell
                           00000A   186 BASEE   =     10      ;default radix
                           000008   187 BKSPP   =     8       ;back space
                           00000A   188 LF      =     10      ;line feed
                           00000D   189 CRR     =     13      ;carriage return
                           000011   190 XON     =     17
                           000013   191 XOFF    =     19
                           00001B   192 ERR     =     27      ;error escape
                           000027   193 TIC     =     39      ;tick
                           0000CD   194 CALLL   =     0xCD     ;CALL opcodes
                           000080   195 IRET_CODE =   0x80    ; IRET opcode 
                                    196 
                                    197         .macro _ledon
                                    198         .if NUCLEO
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    199         bset PC_ODR,#LED2_BIT
                                    200         .else ;DISCOVERY 
                                    201         .if DISCOVERY
                                    202         bres PD_ODR,#LD1_BIT 
                                    203         .endif
                                    204         .endif
                                    205         .endm
                                    206 
                                    207         .macro _ledoff
                                    208         .if NUCLEO 
                                    209         bres PC_ODR,#LED2_BIT
                                    210         .else ;DISCOVERY 
                                    211         .if DISCOVERY
                                    212         bset PD_ODR,#LD1_BIT 
                                    213         .endif 
                                    214         .endif
                                    215         .endm
                                    216 
                                    217 ;**********************************************************
                                    218         .area DATA (ABS)
      000000                        219         .org RAMBASE 
                                    220 ;**********************************************************
                                    221 
                                    222 ;**********************************************************
                                    223         .area SSEG (ABS) ; STACK
      001700                        224         .org 0x1700
      001700                        225         .ds 256 
                                    226 ; space for DATSTK,TIB and STACK         
                                    227 ;**********************************************************
                                    228 
                                    229 ;**********************************************************
                                    230         .area HOME ; vectors table
                                    231 ;**********************************************************
      000000 82 00 00 16            232 	int main	        ; reset
      000004 82 00 00 00            233 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            234 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            235 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            236 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            237 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            238 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            239 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            240 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            241 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            242 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            243 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            244 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            245 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            246 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            247 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            248 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            249 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            250 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            251 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            252 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            253 	int NonHandledInterrupt	; irq19
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      000058 82 00 00 00            254 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            255 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            256 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            257 	int Timer4Handler	; irq23
      000068 82 00 00 00            258 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            259 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            260 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            261 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            262 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            263 	int NonHandledInterrupt	; irq29
                                    264 
                                    265 ;**********************************************************
                                    266         .area CODE
                                    267 ;**********************************************************
                                    268 
                                    269 ; non handled interrupt reset MCU
      000000                        270 NonHandledInterrupt:
      000000 A6 80            [ 1]  271         ld a, #0x80
      000002 C7 50 D1         [ 1]  272         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    273 	;iret
                                    274 
                                    275 ; used for milliseconds counter 
                                    276 ; MS is 16 bits counter 
      000005                        277 Timer4Handler:
      000005 72 5F 53 42      [ 1]  278 	clr TIM4_SR 
      000009 BE 30            [ 2]  279         ldw x,MS 
      00000B 5C               [ 1]  280         incw x 
      00000C BF 30            [ 2]  281         ldw MS,x
      00000E BE 32            [ 2]  282         ldw x,CNTDWN 
      000010 27 03            [ 1]  283         jreq 1$
      000012 5A               [ 2]  284         decw x 
      000013 BF 32            [ 2]  285         ldw CNTDWN,x 
      000015                        286 1$:         
      000015 80               [11]  287         iret 
                                    288 
                                    289 
                                    290 ;; Main entry points and COLD start data
      000016                        291 main:
                                    292 ; clear all RAM
      000016 AE 00 00         [ 2]  293 	ldw X,#RAMBASE
      000019                        294 clear_ram0:
      000019 7F               [ 1]  295 	clr (X)
      00001A 5C               [ 1]  296 	incw X
      00001B A3 17 FF         [ 2]  297 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  298 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  299         ldw x,#RPP
      000023 94               [ 1]  300         ldw sp,x
                                    301 ; set SEEDX and SEEDY to 1 
      000024 3C 39            [ 1]  302         inc SEEDX+1 
      000026 3C 3B            [ 1]  303         inc SEEDY+1          
      000028 CC 00 49         [ 2]  304 	jp ORIG
                                    305 
                                    306 ; COLD initialize these variables.
      00002B                        307 UZERO:
      00002B 00 0A                  308         .word      BASEE   ;BASE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      00002D 00 00                  309         .word      0       ; floating point state 
      00002F 00 00                  310         .word      0       ;tmp
      000031 00 00                  311         .word      0       ;>IN
      000033 00 00                  312         .word      0       ;#TIB
      000035 17 00                  313         .word      TIBB    ;TIB
      000037 13 E3                  314         .word      INTER   ;'EVAL
      000039 00 00                  315         .word      0       ;HLD
      00003B 33 29                  316         .word      LASTN  ;CNTXT pointer
      00003D 00 80                  317         .word      VAR_BASE   ;variables free space pointer 
      00003F 33 80                  318         .word      app_space ; FLASH free space pointer 
      000041 33 29                  319         .word      LASTN   ;LAST
      000043 00 00                  320         .word      0        ; OFFSET 
      000045 00 00                  321         .word      0       ; TFLASH
                                    322 ;       .word      0       ; URLAST   
      000047 00 00                  323 UEND:   .word      0
                                    324 
      000049                        325 ORIG:   
                                    326 ; initialize SP
      000049 AE 17 FF         [ 2]  327         LDW     X,#STACK  ;initialize return stack
      00004C 94               [ 1]  328         LDW     SP,X
      00004D BF 2E            [ 2]  329         LDW     RP0,X
      00004F AE 16 80         [ 2]  330         LDW     X,#DATSTK ;initialize data stack
      000052 BF 2C            [ 2]  331         LDW     SP0,X
                           000001   332 .if NUCLEO        
                                    333 ; initialize PC_5 as output to control LED2
                                    334 ; added by Picatout 
      000054 72 1A 50 0D      [ 1]  335         bset PC_CR1,#LED2_BIT
      000058 72 1A 50 0E      [ 1]  336         bset PC_CR2,#LED2_BIT
      00005C 72 1A 50 0C      [ 1]  337         bset PC_DDR,#LED2_BIT
                                    338 .endif 
                           000000   339 .if DISCOVERY
                                    340         bset PD_CR1,#LD1_BIT
                                    341         bset PD_CR2,#LD1_BIT
                                    342         bset PD_DDR,#LD1_BIT 
                                    343 .endif
      000060                        344         _ledoff
                           000001     1         .if NUCLEO 
      000060 72 1B 50 0A      [ 1]    2         bres PC_ODR,#LED2_BIT
                           000000     3         .else ;DISCOVERY 
                                      4         .if DISCOVERY
                                      5         bset PD_ODR,#LD1_BIT 
                                      6         .endif 
                                      7         .endif
                                    345 ; initialize clock to HSI
                                    346 ; no divisor 16Mhz 
                                    347 ; Added by Picatout 
      000064                        348 clock_init:
      000064 72 5F 50 C6      [ 1]  349         clr CLK_CKDIVR
      000068 72 12 50 C5      [ 1]  350 	bset CLK_SWCR,#CLK_SWCR_SWEN
                           000001   351 .if NUCLEO|DOORBELL
      00006C A6 E1            [ 1]  352 	ld a,#CLK_SWR_HSI
                           000000   353 .else ; DISCOVERY as 16Mhz crystal
                                    354 	ld a,#CLK_SWR_HSE
                                    355 .endif 
      00006E C7 50 C4         [ 1]  356 	ld CLK_SWR,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      000071 C1 50 C3         [ 1]  357 1$:	cp a,CLK_CMSR
      000074 26 FB            [ 1]  358 	jrne 1$
                                    359         
                                    360 ; initialize UART, 115200 8N1
      000076                        361 uart_init:
                           000001   362 .if NUCLEO 
      000076 72 14 50 C7      [ 1]  363 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    364 	; configure tx pin
      00007A 72 1A 50 02      [ 1]  365 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      00007E 72 1A 50 03      [ 1]  366 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      000082 72 1A 50 04      [ 1]  367 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    368 	; baud rate 115200 Fmaster=16Mhz  16000000/115200=139=0x8b
                           000000   369 .else ; DISCOVERY use UART2 
                                    370 	bset CLK_PCKENR1,#CLK_PCKENR1_UART2
                                    371 	; configure tx pin
                                    372 	bset PD_DDR,#UART2_TX_PIN ; tx pin
                                    373 	bset PD_CR1,#UART2_TX_PIN ; push-pull output
                                    374 	bset PD_CR2,#UART2_TX_PIN ; fast output
                                    375 .endif
                                    376 ; baud rate 115200 Fmaster=8Mhz  
      000086 35 0B 52 33      [ 1]  377 	mov UART_BRR2,#0x0b ; must be loaded first
      00008A 35 08 52 32      [ 1]  378 	mov UART_BRR1,#0x8
      00008E 35 0C 52 35      [ 1]  379 	mov UART_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    380 ; initialize timer4, used for millisecond interrupt  
      000092 35 07 53 45      [ 1]  381 	mov TIM4_PSCR,#7 ; prescale 128  
      000096 35 7D 53 46      [ 1]  382 	mov TIM4_ARR,#125 ; set for 1msec.
      00009A 35 05 53 40      [ 1]  383 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      00009E 72 10 53 41      [ 1]  384 	bset TIM4_IER,#TIM4_IER_UIE 
                                    385 ; set TIM4 interrupt priority to highest
      0000A2 A6 3F            [ 1]  386         ld a,#~(IPR_MASK<<6)
      0000A4 C4 7F 75         [ 1]  387         and a,ITC_SPR6
      0000A7 AA C0            [ 1]  388         or a,#(IPR3<<6)
      0000A9 C7 7F 75         [ 1]  389         ld ITC_SPR6,a 
      0000AC 9A               [ 1]  390         rim
      0000AD CC 1A E4         [ 2]  391         jp  COLD   ;default=MN1
                                    392 
                           000000   393         LINK=0 
                                    394 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;        
                                    395 ;; place MCU in sleep mode with
                                    396 ;; halt opcode 
                                    397 ;; BYE ( -- )
                                    398 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000B0                        399         _HEADER BYE,3,"BYE"
      0000B0 00 00                    1         .word LINK 
                           0000B2     2         LINK=.
      0000B2 03                       3         .byte 3  
      0000B3 42 59 45                 4         .ascii "BYE"
      0000B6                          5         BYE:
      0000B6 8E               [10]  400         halt 
      0000B7 81               [ 4]  401         ret 
                                    402 
                                    403 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    404 ; Enable interrupts 
                                    405 ; EI ( -- )
                                    406 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      0000B8                        407         _HEADER EI,2,"EI"
      0000B8 00 B2                    1         .word LINK 
                           0000BA     2         LINK=.
      0000BA 02                       3         .byte 2  
      0000BB 45 49                    4         .ascii "EI"
      0000BD                          5         EI:
      0000BD 9A               [ 1]  408         rim 
      0000BE 81               [ 4]  409         ret 
                                    410 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    411 ; Disable interrupts
                                    412 ; DI ( -- )
                                    413 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000BF                        414         _HEADER DI,2,"DI"
      0000BF 00 BA                    1         .word LINK 
                           0000C1     2         LINK=.
      0000C1 02                       3         .byte 2  
      0000C2 44 49                    4         .ascii "DI"
      0000C4                          5         DI:
      0000C4 9B               [ 1]  415         sim 
      0000C5 81               [ 4]  416         ret 
                                    417 
                                    418 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    419 ; set interrupt priority level 
                                    420 ; SET-ISP ( n1 n2 -- )
                                    421 ; n1 level {1..3}
                                    422 ; n2 vector {0..29}
                                    423 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000C6                        424         _HEADER SETISP,7,"SET-ISP"
      0000C6 00 C1                    1         .word LINK 
                           0000C8     2         LINK=.
      0000C8 07                       3         .byte 7  
      0000C9 53 45 54 2D 49 53 50     4         .ascii "SET-ISP"
      0000D0                          5         SETISP:
      0000D0 90 93            [ 1]  425         ldw y,x 
      0000D2 90 FE            [ 2]  426         ldw y,(y)
      0000D4 A6 04            [ 1]  427         ld a,#4 ; 4 slot per register 
                                    428 ;  quotient select register, remainder select slot in register.        
      0000D6 90 62            [ 2]  429         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000D8 A4 03            [ 1]  430         and a,#3 
      0000DA 48               [ 1]  431         sll a ; 2*SLOT  lshift 
      0000DB 72 A9 7F 70      [ 2]  432         addw y,#ITC_SPR1 
      0000DF FF               [ 2]  433         ldw (x),y  ; ( level reg -- )
      0000E0 90 5F            [ 1]  434         clrw y 
      0000E2 90 97            [ 1]  435         ld yl,a 
      0000E4 1D 00 02         [ 2]  436         subw x,#CELLL 
      0000E7 FF               [ 2]  437         ldw (x),y  ; ( level reg lshift -- )
      0000E8 90 93            [ 1]  438         ldw y,x 
      0000EA 90 EE 02         [ 2]  439         ldw y,(2,y) 
      0000ED 90 F6            [ 1]  440         ld a,(y)   ; reg_value
      0000EF 1D 00 02         [ 2]  441         subw x,#CELLL 
      0000F2 FF               [ 2]  442         ldw (x),y ; ( level reg lshift rval -- )
      0000F3 CD 06 49         [ 4]  443         call OVER ; ( level reg lshift rval lshift -- )
      0000F6 CD 04 6F         [ 4]  444         call DOLIT 
      0000F9 00 03                  445         .word 3
      0000FB CD 06 31         [ 4]  446         call SWAPP  ; ( level reg lshift rval 3 lshift )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      0000FE CD 0B 80         [ 4]  447         call LSHIFT ; creat slot mask 
      000101 CD 08 60         [ 4]  448         call INVER  ; ( level reg lshift rval mask )
      000104 CD 06 7E         [ 4]  449         call ANDD ; ( level reg lshift slot_masked )
      000107 CD 05 EA         [ 4]  450         call TOR  ; ( level reg lshift -- R: slot_masked )
      00010A CD 07 E5         [ 4]  451         call ROT  ; ( reg lshift level )
      00010D CD 06 31         [ 4]  452         call SWAPP ; ( reg level lshift )
      000110 CD 0B 80         [ 4]  453         call LSHIFT  ; ( reg slot_level -- )
      000113 CD 05 34         [ 4]  454         call RFROM ; ( reg slot_level masked_val )
      000116 CD 06 92         [ 4]  455         call ORR   ; ( reg updated_rval )
      000119 CD 06 31         [ 4]  456         call SWAPP 
      00011C CD 04 F0         [ 4]  457         call CSTOR
                                    458 
                                    459 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    460 ; sélectionne l'application 
                                    461 ; qui démarre automatique lors 
                                    462 ; d'un COLD start 
                                    463 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00011F                        464         _HEADER AUTORUN,7,"AUTORUN"
      00011F 00 C8                    1         .word LINK 
                           000121     2         LINK=.
      000121 07                       3         .byte 7  
      000122 41 55 54 4F 52 55 4E     4         .ascii "AUTORUN"
      000129                          5         AUTORUN:
      000129 CD 11 A8         [ 4]  465         call TOKEN 
      00012C CD 06 21         [ 4]  466         call DUPP 
      00012F CD 04 98         [ 4]  467         call QBRAN 
      000132 02 0F                  468         .word FORGET2
      000134 CD 12 A5         [ 4]  469         call NAMEQ
      000137 CD 07 D4         [ 4]  470         call QDUP 
      00013A CD 04 98         [ 4]  471         call QBRAN 
      00013D 02 0F                  472         .word FORGET2
      00013F CD 06 17         [ 4]  473         call DROP 
      000142 1D 00 04         [ 2]  474         subw x,#2*CELLL 
      000145 90 5F            [ 1]  475         clrw y 
      000147 FF               [ 2]  476         ldw (x),y 
      000148 90 AE 40 02      [ 2]  477         ldw y,#APP_RUN 
      00014C EF 02            [ 2]  478         ldw (2,x),y 
      00014E CC 1D E0         [ 2]  479         jp EESTORE 
                                    480 
                                    481 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    482 ;; Reset dictionary pointer before 
                                    483 ;; forgotten word. RAM space and 
                                    484 ;; interrupt vector defined after 
                                    485 ;; must be resetted also.
                                    486 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000151                        487         _HEADER FORGET,6,"FORGET"
      000151 01 21                    1         .word LINK 
                           000153     2         LINK=.
      000153 06                       3         .byte 6  
      000154 46 4F 52 47 45 54        4         .ascii "FORGET"
      00015A                          5         FORGET:
      00015A CD 11 A8         [ 4]  488         call TOKEN
      00015D CD 06 21         [ 4]  489         call DUPP 
      000160 CD 04 98         [ 4]  490         call QBRAN 
      000163 02 0F                  491         .word FORGET2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      000165 CD 12 A5         [ 4]  492         call NAMEQ ; ( a -- ca na | a F )
      000168 CD 07 D4         [ 4]  493         call QDUP 
      00016B CD 04 98         [ 4]  494         call QBRAN 
      00016E 02 0F                  495         .word FORGET2
                                    496 ; only forget users words 
      000170 CD 06 21         [ 4]  497         call DUPP ; ( ca na na )
      000173 CD 04 6F         [ 4]  498         call DOLIT 
      000176 33 80                  499         .word app_space 
      000178 CD 06 31         [ 4]  500         call SWAPP 
      00017B CD 09 04         [ 4]  501         call  ULESS 
      00017E CD 04 98         [ 4]  502         call QBRAN 
      000181 01 D1                  503         .word FORGET6 
                                    504 ; ( ca na -- )        
                                    505 ;reset ivec with address >= ca
      000183 CD 06 31         [ 4]  506         call SWAPP ; ( na ca -- ) 
      000186 CD 1F E3         [ 4]  507         call CHKIVEC ; ( na -- ) 
                                    508 ; start at LAST and link back to na 
                                    509 ; if variable found reset VP at that point.
      000189                        510 FORGET1:
      000189 CD 07 96         [ 4]  511         call LAST 
      00018C CD 04 E3         [ 4]  512         call AT 
      00018F CD 06 21         [ 4]  513         call DUPP  ; ( -- na last last )
      000192 CD 02 25         [ 4]  514         call FREEVAR ; ( -- na last )
      000195 CD 06 21         [ 4]  515         call DUPP 
      000198 CD 04 6F         [ 4]  516         call DOLIT 
      00019B 00 02                  517         .word 2 
      00019D CD 08 BD         [ 4]  518         call SUBB ; ( na last -- na last lfa ) link address 
      0001A0 CD 04 E3         [ 4]  519         call AT 
      0001A3 CD 06 21         [ 4]  520         call DUPP ; ( -- na last a a )
      0001A6 CD 07 6A         [ 4]  521         call CNTXT 
      0001A9 CD 04 D1         [ 4]  522         call STORE
      0001AC CD 07 96         [ 4]  523         call LAST  
      0001AF CD 04 D1         [ 4]  524         call STORE ; ( --  na last )
      0001B2 CD 06 49         [ 4]  525         call OVER 
      0001B5 CD 08 E5         [ 4]  526         call EQUAL ; ( na last na -- na T|F ) 
      0001B8 CD 04 98         [ 4]  527         call QBRAN 
      0001BB 01 89                  528         .word FORGET1 
                                    529 ; ( na -- )
      0001BD CD 04 6F         [ 4]  530         call DOLIT 
      0001C0 00 02                  531         .word 2 
      0001C2 CD 08 BD         [ 4]  532         call SUBB 
      0001C5 CD 07 86         [ 4]  533         call CPP 
      0001C8 CD 04 D1         [ 4]  534         call STORE  
      0001CB CD 1C 13         [ 4]  535         call UPDATCP 
      0001CE CC 1B EA         [ 2]  536         jp UPDATLAST 
      0001D1                        537 FORGET6: ; tried to forget a RAM or system word 
                                    538 ; ( ca na -- )
      0001D1 1D 00 02         [ 2]  539         subw x,#CELLL 
      0001D4 90 BE 2C         [ 2]  540         ldw y,SP0 
      0001D7 FF               [ 2]  541         ldw (x),y  
      0001D8 CD 09 04         [ 4]  542         call ULESS
      0001DB CD 04 98         [ 4]  543         call QBRAN 
      0001DE 02 01                  544         .word PROTECTED 
      0001E0 CD 13 B1         [ 4]  545         call ABORQ 
      0001E3 1D                     546         .byte 29
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      0001E4 20 46 6F 72 20 52 41   547         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      000201                        548 PROTECTED:
      000201 CD 13 B1         [ 4]  549         call ABORQ
      000204 0A                     550         .byte 10
      000205 20 50 72 6F 74 65 63   551         .ascii " Protected"
             74 65 64
      00020F                        552 FORGET2: ; no name or not found in dictionary 
      00020F CD 13 B1         [ 4]  553         call ABORQ
      000212 05                     554         .byte 5
      000213 20 77 68 61 74         555         .ascii " what"
      000218                        556 FORGET4:
      000218 CC 06 17         [ 2]  557         jp DROP 
                                    558 
                                    559 
                                    560 ;;;;;;;;;;;;;;;;;;;;;
                                    561 ; if na is variable 
                                    562 ; free variable data  
                                    563 ; FREEVAR ( na -- )
                                    564 ;;;;;;;;;;;;;;;;;;;;;;
      00021B                        565         _HEADER FREEVAR,7,"FREEVAR"
      00021B 01 53                    1         .word LINK 
                           00021D     2         LINK=.
      00021D 07                       3         .byte 7  
      00021E 46 52 45 45 56 41 52     4         .ascii "FREEVAR"
      000225                          5         FREEVAR:
      000225 CD 06 21         [ 4]  566         call DUPP ; ( na na -- )
      000228 CD 05 01         [ 4]  567         CALL CAT  ; ( na c -- )
      00022B CD 0B 62         [ 4]  568         call ONEP ;
      00022E CD 08 46         [ 4]  569         CALL PLUS ; ( na c+1 -- ca ) 
      000231 CD 0B 62         [ 4]  570         call ONEP ; ( ca+ -- ) to get routne address 
      000234 CD 06 21         [ 4]  571         call DUPP ; ( ca+ ca+ -- )
      000237 CD 04 E3         [ 4]  572         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      00023A CD 04 6F         [ 4]  573         call DOLIT 
      00023D 06 D7                  574         .word DOVAR ; if routine address is DOVAR then variable 
      00023F CD 08 E5         [ 4]  575         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      000242 CD 04 98         [ 4]  576         call QBRAN 
      000245 02 5B                  577         .word FREEVAR4 
      000247 CD 04 6F         [ 4]  578         call DOLIT 
      00024A 00 02                  579         .word 2 
      00024C CD 08 46         [ 4]  580         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      00024F CD 04 E3         [ 4]  581         call AT 
      000252 CD 07 78         [ 4]  582         call VPP   
      000255 CD 04 D1         [ 4]  583         call STORE 
      000258 CC 1C 2A         [ 2]  584         jp UPDATVP 
      00025B                        585 FREEVAR4: ; not variable
      00025B CC 06 17         [ 2]  586         jp  DROP 
                                    587 
                                    588 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    589 ;    SEED ( n -- )
                                    590 ; Initialize PRNG seed with n 
                                    591 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      00025E                        592         _HEADER SEED,4,"SEED"
      00025E 02 1D                    1         .word LINK 
                           000260     2         LINK=.
      000260 04                       3         .byte 4  
      000261 53 45 45 44              4         .ascii "SEED"
      000265                          5         SEED:
      000265 90 93            [ 1]  593         ldw y,x 
      000267 1C 00 02         [ 2]  594         addw x,#CELLL
      00026A 90 FE            [ 2]  595         ldw y,(y)
      00026C 90 9E            [ 1]  596         ld a,yh 
      00026E B7 38            [ 1]  597         ld SEEDX,a 
      000270 90 9F            [ 1]  598         ld a,yl 
      000272 B7 3A            [ 1]  599         ld SEEDY,a 
      000274 81               [ 4]  600         ret 
                                    601 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    602 ;    RANDOM ( u1 -- u2 )
                                    603 ; Pseudo random number betwen 0 and u1-1
                                    604 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000275                        605         _HEADER RANDOM,6,"RANDOM"
      000275 02 60                    1         .word LINK 
                           000277     2         LINK=.
      000277 06                       3         .byte 6  
      000278 52 41 4E 44 4F 4D        4         .ascii "RANDOM"
      00027E                          5         RANDOM:
                                    606 ;local variable 
                           000001   607         SPSAVE=1
                           000002   608         VSIZE=2 
      00027E 52 02            [ 2]  609         sub sp,#VSIZE
      000280 1F 01            [ 2]  610         ldw (SPSAVE,sp),x  
                                    611 ; XTEMP=(SEEDX<<5)^SEEDX 
      000282 90 93            [ 1]  612         ldw y,x 
      000284 90 FE            [ 2]  613         ldw y,(y)
      000286 90 BF 26         [ 2]  614         ldw YTEMP,y 
      000289 BE 38            [ 2]  615 	ldw x,SEEDX 
      00028B 58               [ 2]  616 	sllw x 
      00028C 58               [ 2]  617 	sllw x 
      00028D 58               [ 2]  618 	sllw x 
      00028E 58               [ 2]  619 	sllw x 
      00028F 58               [ 2]  620 	sllw x 
      000290 9E               [ 1]  621 	ld a,xh 
      000291 B8 38            [ 1]  622 	xor a,SEEDX 
      000293 B7 24            [ 1]  623 	ld XTEMP,a 
      000295 9F               [ 1]  624 	ld a,xl 
      000296 B8 39            [ 1]  625 	xor a,SEEDX+1 
      000298 B7 25            [ 1]  626 	ld XTEMP+1,a 
                                    627 ; SEEDX=SEEDY 
      00029A BE 3A            [ 2]  628 	ldw x,SEEDY 
      00029C BF 38            [ 2]  629 	ldw SEEDX,x  
                                    630 ; SEEDY=SEEDY^(SEEDY>>1)
      00029E 54               [ 2]  631 	srlw x 
      00029F 9E               [ 1]  632 	ld a,xh 
      0002A0 B8 3A            [ 1]  633 	xor a,SEEDY 
      0002A2 B7 3A            [ 1]  634 	ld SEEDY,a  
      0002A4 9F               [ 1]  635 	ld a,xl 
      0002A5 B8 3B            [ 1]  636 	xor a,SEEDY+1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      0002A7 B7 3B            [ 1]  637 	ld SEEDY+1,a 
                                    638 ; XTEMP>>3 
      0002A9 BE 24            [ 2]  639 	ldw x,XTEMP 
      0002AB 54               [ 2]  640 	srlw x 
      0002AC 54               [ 2]  641 	srlw x 
      0002AD 54               [ 2]  642 	srlw x 
                                    643 ; x=XTEMP^x 
      0002AE 9E               [ 1]  644 	ld a,xh 
      0002AF B8 24            [ 1]  645 	xor a,XTEMP 
      0002B1 95               [ 1]  646 	ld xh,a 
      0002B2 9F               [ 1]  647 	ld a,xl 
      0002B3 B8 25            [ 1]  648 	xor a,XTEMP+1  
      0002B5 97               [ 1]  649 	ld xl,a 
                                    650 ; SEEDY=x^SEEDY 
      0002B6 B8 3B            [ 1]  651 	xor a,SEEDY+1
      0002B8 97               [ 1]  652 	ld xl,a 
      0002B9 9E               [ 1]  653 	ld a,xh 
      0002BA B8 3A            [ 1]  654 	xor a,SEEDY
      0002BC 95               [ 1]  655 	ld xh,a 
      0002BD BF 3A            [ 2]  656 	ldw SEEDY,x 
                                    657 ; return SEEDY modulo YTEMP  
      0002BF 90 BE 26         [ 2]  658 	ldw y,YTEMP  
      0002C2 65               [ 2]  659 	divw x,y 
      0002C3 1E 01            [ 2]  660 	ldw x,(SPSAVE,sp)
      0002C5 FF               [ 2]  661         ldw (x),y 
      0002C6 5B 02            [ 2]  662         addw sp,#VSIZE 
      0002C8 81               [ 4]  663 	ret 
                                    664 
                                    665 
                                    666 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    667 ;; get millisecond counter 
                                    668 ;; msec ( -- u )
                                    669 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002C9                        670         _HEADER MSEC,4,"MSEC"
      0002C9 02 77                    1         .word LINK 
                           0002CB     2         LINK=.
      0002CB 04                       3         .byte 4  
      0002CC 4D 53 45 43              4         .ascii "MSEC"
      0002D0                          5         MSEC:
      0002D0 1D 00 02         [ 2]  671         subw x,#CELLL 
      0002D3 90 BE 30         [ 2]  672         ldw y,MS 
      0002D6 FF               [ 2]  673         ldw (x),y 
      0002D7 81               [ 4]  674         ret 
                                    675 
                                    676 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    677 ; suspend execution for u msec 
                                    678 ;  pause ( u -- )
                                    679 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002D8                        680         _HEADER PAUSE,5,"PAUSE"
      0002D8 02 CB                    1         .word LINK 
                           0002DA     2         LINK=.
      0002DA 05                       3         .byte 5  
      0002DB 50 41 55 53 45           4         .ascii "PAUSE"
      0002E0                          5         PAUSE:
      0002E0 90 93            [ 1]  681         ldw y,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      0002E2 90 FE            [ 2]  682         ldw y,(y)
      0002E4 72 B9 00 30      [ 2]  683         addw y,MS 
      0002E8 8F               [10]  684 1$:     wfi  
      0002E9 90 B3 30         [ 2]  685         cpw y,MS  
      0002EC 26 FA            [ 1]  686         jrne 1$        
      0002EE 1C 00 02         [ 2]  687         addw x,#CELLL 
      0002F1 81               [ 4]  688         ret 
                                    689 
                                    690 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    691 ; initialize count down timer 
                                    692 ;  TIMER ( u -- )  milliseconds
                                    693 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002F2                        694         _HEADER TIMER,5,"TIMER"
      0002F2 02 DA                    1         .word LINK 
                           0002F4     2         LINK=.
      0002F4 05                       3         .byte 5  
      0002F5 54 49 4D 45 52           4         .ascii "TIMER"
      0002FA                          5         TIMER:
      0002FA 90 93            [ 1]  695         ldw y,x
      0002FC 90 FE            [ 2]  696         ldw y,(y) 
      0002FE 90 BF 32         [ 2]  697         ldw CNTDWN,y
      000301 1C 00 02         [ 2]  698         addw x,#CELLL 
      000304 81               [ 4]  699         ret 
                                    700 
                                    701 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    702 ; check for TIMER exiparition 
                                    703 ;  TIMEOUT? ( -- 0|-1 )
                                    704 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000305                        705         _HEADER TIMEOUTQ,8,"TIMEOUT?"
      000305 02 F4                    1         .word LINK 
                           000307     2         LINK=.
      000307 08                       3         .byte 8  
      000308 54 49 4D 45 4F 55 54     4         .ascii "TIMEOUT?"
             3F
      000310                          5         TIMEOUTQ:
      000310 4F               [ 1]  706         clr a
      000311 1D 00 02         [ 2]  707         subw x,#CELLL 
      000314 90 BE 32         [ 2]  708         ldw y,CNTDWN 
      000317 26 01            [ 1]  709         jrne 1$ 
      000319 43               [ 1]  710         cpl a 
      00031A E7 01            [ 1]  711 1$:     ld (1,x),a 
      00031C F7               [ 1]  712         ld (x),a 
      00031D 81               [ 4]  713         ret         
                                    714 
                                    715 ;;;;;;;;;;;;;;;;;;;;;
                                    716 ; reboot MCU 
                                    717 ; REBOOT ( -- )
                                    718 ;;;;;;;;;;;;;;;;;;;;;
      00031E                        719         _HEADER reboot,6,"REBOOT"
      00031E 03 07                    1         .word LINK 
                           000320     2         LINK=.
      000320 06                       3         .byte 6  
      000321 52 45 42 4F 4F 54        4         .ascii "REBOOT"
      000327                          5         reboot:
      000327 CC 00 00         [ 2]  720         jp NonHandledInterrupt
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    721 
                                    722 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    723 ; compile to flash memory 
                                    724 ; TO-FLASH ( -- )
                                    725 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      00032A                        726         _HEADER TOFLASH,8,"TO-FLASH"
      00032A 03 20                    1         .word LINK 
                           00032C     2         LINK=.
      00032C 08                       3         .byte 8  
      00032D 54 4F 2D 46 4C 41 53     4         .ascii "TO-FLASH"
             48
      000335                          5         TOFLASH:
      000335 CD 07 A9         [ 4]  727         call RAMLAST 
      000338 CD 04 E3         [ 4]  728         call AT 
      00033B CD 07 D4         [ 4]  729         call QDUP 
      00033E CD 04 98         [ 4]  730         call QBRAN
      000341 03 64                  731         .word 1$
      000343 CD 13 B1         [ 4]  732         call ABORQ 
      000346 1D                     733         .byte 29
      000347 20 4E 6F 74 20 77 68   734         .ascii " Not while definitions in RAM"   
             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      000364 90 AE FF FF      [ 2]  735 1$:     ldw y,#-1 
      000368 90 BF 20         [ 2]  736         ldw UTFLASH,y
      00036B 81               [ 4]  737         ret 
                                    738 
                                    739 ;;;;;;;;;;;;;;;;;;;;;;
                                    740 ; compile to RAM 
                                    741 ; TO-RAM ( -- )
                                    742 ;;;;;;;;;;;;;;;;;;;;;;
      00036C                        743         _HEADER TORAM,6,"TO-RAM"
      00036C 03 2C                    1         .word LINK 
                           00036E     2         LINK=.
      00036E 06                       3         .byte 6  
      00036F 54 4F 2D 52 41 4D        4         .ascii "TO-RAM"
      000375                          5         TORAM:
      000375 90 5F            [ 1]  744         clrw y 
      000377 90 BF 20         [ 2]  745         ldw UTFLASH,y 
      00037A 81               [ 4]  746         ret 
                                    747 
                                    748 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    749 ;; BAUD RATE constants table
                                    750 ; values to put in BRR1 & BRR2 
                                    751 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00037B                        752 baudrate: 
      00037B A0 1B                  753 	.byte 0xa0,0x1b ; 2400
      00037D D0 05                  754 	.byte 0xd0,0x5  ; 4800 
      00037F 68 03                  755 	.byte 0x68,0x3  ; 9600
      000381 34 01                  756 	.byte 0x34,0x1  ; 19200
      000383 11 06                  757 	.byte 0x11,0x6  ; 57600
      000385 08 0B                  758 	.byte 0x8,0xb   ; 115200
                                    759 
                                    760 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                                    761 ; BAUD RATE CONSTANTS names 
                                    762 ; 2400 baud  ( -- n )
                                    763 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000387                        764         _HEADER B2K4,4,"B2K4"
      000387 03 6E                    1         .word LINK 
                           000389     2         LINK=.
      000389 04                       3         .byte 4  
      00038A 42 32 4B 34              4         .ascii "B2K4"
      00038E                          5         B2K4:
      00038E 1D 00 02         [ 2]  765 	subw x,#CELLL 
      000391 90 5F            [ 1]  766         clrw y
      000393 FF               [ 2]  767         ldw (x),y
      000394 81               [ 4]  768 	ret
                                    769 
                                    770 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    771 ; 4800 baud	
                                    772 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000395                        773         _HEADER B4K8,4,"B4K8"
      000395 03 89                    1         .word LINK 
                           000397     2         LINK=.
      000397 04                       3         .byte 4  
      000398 42 34 4B 38              4         .ascii "B4K8"
      00039C                          5         B4K8:
      00039C 1D 00 02         [ 2]  774         subw x,#CELLL 
      00039F 90 AE 00 02      [ 2]  775         ldw y,#2 
      0003A3 FF               [ 2]  776         ldw (x),y
      0003A4 81               [ 4]  777         ret 
                                    778 
                                    779 ;;;;;;;;;;;;;;;;;;;;
                                    780 ; 9600 baud
                                    781 ;;;;;;;;;;;;;;;;;;;;
      0003A5                        782         _HEADER B9K6,4,"B9K6"
      0003A5 03 97                    1         .word LINK 
                           0003A7     2         LINK=.
      0003A7 04                       3         .byte 4  
      0003A8 42 39 4B 36              4         .ascii "B9K6"
      0003AC                          5         B9K6:
      0003AC 1D 00 02         [ 2]  783         subw x,#CELLL 
      0003AF 90 AE 00 04      [ 2]  784         ldw y,#4 
      0003B3 FF               [ 2]  785         ldw (x),y 
      0003B4 81               [ 4]  786         ret 
                                    787 ;;;;;;;;;;;;;;
                                    788 ; 19200 baud
                                    789 ;;;;;;;;;;;;;;
      0003B5                        790         _HEADER B19K2,5,"B19K2"
      0003B5 03 A7                    1         .word LINK 
                           0003B7     2         LINK=.
      0003B7 05                       3         .byte 5  
      0003B8 42 31 39 4B 32           4         .ascii "B19K2"
      0003BD                          5         B19K2:
      0003BD 1D 00 02         [ 2]  791         subw x,#CELLL
      0003C0 90 AE 00 06      [ 2]  792         ldw y,#6 
      0003C4 FF               [ 2]  793         ldw (x),y 
      0003C5 81               [ 4]  794         ret 
                                    795 ;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    796 ; 57600 baud  
                                    797 ;;;;;;;;;;;;;;
      0003C6                        798         _HEADER B57K6,5,"B57K6"
      0003C6 03 B7                    1         .word LINK 
                           0003C8     2         LINK=.
      0003C8 05                       3         .byte 5  
      0003C9 42 35 37 4B 36           4         .ascii "B57K6"
      0003CE                          5         B57K6:
      0003CE 1D 00 02         [ 2]  799         subw x,#CELLL 
      0003D1 90 AE 00 08      [ 2]  800         ldw y,#8 
      0003D5 FF               [ 2]  801         ldw (x),y 
      0003D6 81               [ 4]  802         ret 
                                    803 ;;;;;;;;;;;;;;
                                    804 ; 115200 baud 
                                    805 ;;;;;;;;;;;;;;
      0003D7                        806         _HEADER B115K2,6,"B115K2"
      0003D7 03 C8                    1         .word LINK 
                           0003D9     2         LINK=.
      0003D9 06                       3         .byte 6  
      0003DA 42 31 31 35 4B 32        4         .ascii "B115K2"
      0003E0                          5         B115K2:
      0003E0 1D 00 02         [ 2]  807 	subw x,#CELLL 
      0003E3 90 AE 00 0A      [ 2]  808         ldw y,#10 
      0003E7 FF               [ 2]  809         ldw (x),y 
      0003E8 81               [ 4]  810         ret 
                                    811 
                                    812 ;;;;;;;;;;;;;;;;;;;;;;;	
                                    813 ;; set UART2 BAUD rate
                                    814 ;	BAUD ( u -- )
                                    815 ;;;;;;;;;;;;;;;;;;;;;;;
      0003E9                        816         _HEADER BAUD,4,"BAUD"
      0003E9 03 D9                    1         .word LINK 
                           0003EB     2         LINK=.
      0003EB 04                       3         .byte 4  
      0003EC 42 41 55 44              4         .ascii "BAUD"
      0003F0                          5         BAUD:
      0003F0 1D 00 02         [ 2]  817 	subw x,#CELLL
      0003F3 90 AE 03 7B      [ 2]  818         ldw y,#baudrate 
      0003F7 FF               [ 2]  819         ldw (x),y 
      0003F8 CD 08 46         [ 4]  820         call PLUS
      0003FB 90 93            [ 1]  821         ldw y,x  
      0003FD 90 FE            [ 2]  822         ldw y,(y)
      0003FF 90 F6            [ 1]  823         ld a,(y)
      000401 88               [ 1]  824         push a 
      000402 90 5C            [ 1]  825         incw y 
      000404 90 F6            [ 1]  826         ld a,(y)
      000406 C7 52 33         [ 1]  827         ld UART_BRR2,a 
      000409 84               [ 1]  828         pop a
      00040A C7 52 32         [ 1]  829         ld UART_BRR1,a 
      00040D 1C 00 02         [ 2]  830         addw x,#CELLL 
      000410 81               [ 4]  831         ret 
                                    832 
                                    833 ;; Device dependent I/O
                                    834 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    835 ;       ?RX     ( -- c T | F )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                                    836 ;         Return input byte and true, or false.
                                    837 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000411                        838         _HEADER QKEY,4,"?KEY"
      000411 03 EB                    1         .word LINK 
                           000413     2         LINK=.
      000413 04                       3         .byte 4  
      000414 3F 4B 45 59              4         .ascii "?KEY"
      000418                          5         QKEY:
      000418 90 5F            [ 1]  839         CLRW Y 
      00041A 72 0B 52 30 0B   [ 2]  840         BTJF UART_SR,#UART_SR_RXNE,INCH   ;check status
      00041F C6 52 31         [ 1]  841         LD    A,UART_DR   ;get char in A
      000422 1D 00 02         [ 2]  842 	SUBW	X,#2
      000425 E7 01            [ 1]  843         LD     (1,X),A
      000427 7F               [ 1]  844 	CLR	(X)
      000428 90 53            [ 2]  845         CPLW     Y
      00042A                        846 INCH:
      00042A 1D 00 02         [ 2]  847 		SUBW	X,#2
      00042D FF               [ 2]  848         LDW     (X),Y
      00042E 81               [ 4]  849         RET
                                    850 
                                    851 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    852 ;       TX!     ( c -- )
                                    853 ;       Send character c to  output device.
                                    854 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00042F                        855         _HEADER EMIT,4,"EMIT"
      00042F 04 13                    1         .word LINK 
                           000431     2         LINK=.
      000431 04                       3         .byte 4  
      000432 45 4D 49 54              4         .ascii "EMIT"
      000436                          5         EMIT:
      000436 E6 01            [ 1]  856         LD     A,(1,X)
      000438 1C 00 02         [ 2]  857 	ADDW	X,#2
      00043B 72 0F 52 30 FB   [ 2]  858 OUTPUT: BTJF UART_SR,#UART_SR_TXE,OUTPUT  ;loop until tx empty 
      000440 C7 52 31         [ 1]  859         LD    UART_DR,A   ;send A
      000443 81               [ 4]  860         RET
                                    861 
                                    862 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    863 ;       FC-XON  ( -- )
                                    864 ;       send XON character 
                                    865 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000444                        866         _HEADER FC_XON,6,"FC-XON"
      000444 04 31                    1         .word LINK 
                           000446     2         LINK=.
      000446 06                       3         .byte 6  
      000447 46 43 2D 58 4F 4E        4         .ascii "FC-XON"
      00044D                          5         FC_XON:
      00044D 1D 00 02         [ 2]  867         subw x,#CELLL 
      000450 7F               [ 1]  868         clr (x)
      000451 A6 11            [ 1]  869         ld a,#XON 
      000453 E7 01            [ 1]  870         ld (1,x),a 
      000455 CD 04 36         [ 4]  871         call EMIT 
      000458 81               [ 4]  872         ret 
                                    873 
                                    874 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    875 ;       FC-XOFF ( -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                                    876 ;       Send XOFF character 
                                    877 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000459                        878         _HEADER FC_XOFF,7,"FC-XOFF"
      000459 04 46                    1         .word LINK 
                           00045B     2         LINK=.
      00045B 07                       3         .byte 7  
      00045C 46 43 2D 58 4F 46 46     4         .ascii "FC-XOFF"
      000463                          5         FC_XOFF:
      000463 1D 00 02         [ 2]  879         subw x,#CELLL 
      000466 7F               [ 1]  880         clr (x)
      000467 A6 13            [ 1]  881         ld a,#XOFF 
      000469 E7 01            [ 1]  882         ld (1,x),a 
      00046B CD 04 36         [ 4]  883         call EMIT 
      00046E 81               [ 4]  884         ret
                                    885 
                                    886 ;; The kernel
                                    887 
                                    888 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    889 ;       doLIT   ( -- w )
                                    890 ;       Push an inline literal.
                                    891 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00046F                        892 DOLIT:
      00046F 1D 00 02         [ 2]  893 	SUBW X,#2
      000472 16 01            [ 2]  894         ldw y,(1,sp)
      000474 90 FE            [ 2]  895         ldw y,(y)
      000476 FF               [ 2]  896         ldw (x),y
      000477 90 85            [ 2]  897         popw y 
      000479 90 EC 02         [ 2]  898         jp (2,y)
                                    899 
                                    900 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    901 ;       NEXT    ( -- )
                                    902 ;       Code for  single index loop.
                                    903 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00047C                        904         _HEADER DONXT,COMPO+4,"NEXT"
      00047C 04 5B                    1         .word LINK 
                           00047E     2         LINK=.
      00047E 44                       3         .byte COMPO+4  
      00047F 4E 45 58 54              4         .ascii "NEXT"
      000483                          5         DONXT:
      000483 16 03            [ 2]  905 	LDW Y,(3,SP)
      000485 90 5A            [ 2]  906 	DECW Y
      000487 2A 07            [ 1]  907 	JRPL NEX1 ; jump if N=0
      000489 90 85            [ 2]  908 	POPW Y
      00048B 5B 02            [ 2]  909         addw sp,#2
      00048D 90 EC 02         [ 2]  910         JP (2,Y)
      000490                        911 NEX1:
      000490 17 03            [ 2]  912         LDW (3,SP),Y
      000492 90 85            [ 2]  913         POPW Y
      000494 90 FE            [ 2]  914 	LDW Y,(Y)
      000496 90 FC            [ 2]  915 	JP (Y)
                                    916 
                                    917 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    918 ;       ?branch ( f -- )
                                    919 ;       Branch if flag is zero.
                                    920 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                    921 ;       _HEADER QBRAN,COMPO+7,"?BRANCH"        
      000498                        922 QBRAN:	
      000498 90 93            [ 1]  923         LDW Y,X
      00049A 1C 00 02         [ 2]  924 	ADDW X,#2
      00049D 90 FE            [ 2]  925 	LDW Y,(Y)
      00049F 27 13            [ 1]  926         JREQ     BRAN
      0004A1 90 85            [ 2]  927 	POPW Y
      0004A3 90 EC 02         [ 2]  928 	JP (2,Y)
                                    929 
                                    930 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    931 ;  TBRANCH ( f -- )
                                    932 ;  branch if f==TRUE 
                                    933 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    934 ;        _HEADER TBRAN,COMPO+7,"TBRANCH"
      0004A6                        935 TBRAN: 
      0004A6 90 93            [ 1]  936         LDW Y,X 
      0004A8 1C 00 02         [ 2]  937         ADDW X,#2 
      0004AB 90 FE            [ 2]  938         LDW Y,(Y)
      0004AD 26 05            [ 1]  939         JRNE BRAN 
      0004AF 90 85            [ 2]  940         POPW Y 
      0004B1 90 EC 02         [ 2]  941         JP (2,Y)
                                    942 
                                    943 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    944 ;       branch  ( -- )
                                    945 ;       Branch to an inline address.
                                    946 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    947 ;       _HEADER BRAN,COMPO+6,"BRANCH"
      0004B4                        948 BRAN:
      0004B4 90 85            [ 2]  949         POPW Y
      0004B6 90 FE            [ 2]  950 	LDW Y,(Y)
      0004B8 90 FC            [ 2]  951         JP     (Y)
                                    952 
                                    953 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    954 ;       EXECUTE ( ca -- )
                                    955 ;       Execute  word at ca.
                                    956 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004BA                        957         _HEADER EXECU,7,"EXECUTE"
      0004BA 04 7E                    1         .word LINK 
                           0004BC     2         LINK=.
      0004BC 07                       3         .byte 7  
      0004BD 45 58 45 43 55 54 45     4         .ascii "EXECUTE"
      0004C4                          5         EXECU:
      0004C4 90 93            [ 1]  958         LDW Y,X
      0004C6 1C 00 02         [ 2]  959 	ADDW X,#2
      0004C9 90 FE            [ 2]  960 	LDW  Y,(Y)
      0004CB 90 FC            [ 2]  961         JP   (Y)
                                    962 
                           000001   963 OPTIMIZE = 1
                           000001   964 .if OPTIMIZE 
                                    965 ; remplacement de CALL EXIT par 
                                    966 ; le opcode de RET.
                                    967 ; Voir modification au code de ";"
                           000000   968 .else 
                                    969 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    970 ;       EXIT    ( -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                    971 ;       Terminate a colon definition.
                                    972 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    973 ;       _HEADER EXIT,4,"EXIT"
                                    974 EXIT:
                                    975         POPW Y
                                    976         RET
                                    977 .endif 
                                    978 
                                    979 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    980 ;       !       ( w a -- )
                                    981 ;       Pop  data stack to memory.
                                    982 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004CD                        983         _HEADER STORE,1,"!"
      0004CD 04 BC                    1         .word LINK 
                           0004CF     2         LINK=.
      0004CF 01                       3         .byte 1  
      0004D0 21                       4         .ascii "!"
      0004D1                          5         STORE:
      0004D1 90 93            [ 1]  984         LDW Y,X
      0004D3 90 FE            [ 2]  985         LDW Y,(Y)    ;Y=a
      0004D5 89               [ 2]  986         PUSHW X
      0004D6 EE 02            [ 2]  987         LDW X,(2,X) ; x=w 
      0004D8 90 FF            [ 2]  988         LDW (Y),X 
      0004DA 85               [ 2]  989         POPW X  
      0004DB 1C 00 04         [ 2]  990         ADDW X,#4 ; DDROP 
      0004DE 81               [ 4]  991         RET     
                                    992 
                                    993 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    994 ;       @       ( a -- w )
                                    995 ;       Push memory location to stack.
                                    996 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004DF                        997         _HEADER AT,1,"@"
      0004DF 04 CF                    1         .word LINK 
                           0004E1     2         LINK=.
      0004E1 01                       3         .byte 1  
      0004E2 40                       4         .ascii "@"
      0004E3                          5         AT:
      0004E3 90 93            [ 1]  998         LDW Y,X     ;Y = a
      0004E5 90 FE            [ 2]  999         LDW Y,(Y)   ; address 
      0004E7 90 FE            [ 2] 1000         LDW Y,(Y)   ; value 
      0004E9 FF               [ 2] 1001         LDW (X),Y ;w = @Y
      0004EA 81               [ 4] 1002         RET     
                                   1003 
                                   1004 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1005 ;       C!      ( c b -- )
                                   1006 ;       Pop  data stack to byte memory.
                                   1007 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004EB                       1008         _HEADER CSTOR,2,"C!"
      0004EB 04 E1                    1         .word LINK 
                           0004ED     2         LINK=.
      0004ED 02                       3         .byte 2  
      0004EE 43 21                    4         .ascii "C!"
      0004F0                          5         CSTOR:
      0004F0 90 93            [ 1] 1009         LDW Y,X
      0004F2 90 FE            [ 2] 1010 	LDW Y,(Y)    ;Y=b
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      0004F4 E6 03            [ 1] 1011         LD A,(3,X)    ;D = c
      0004F6 90 F7            [ 1] 1012         LD  (Y),A     ;store c at b
      0004F8 1C 00 04         [ 2] 1013 	ADDW X,#4 ; DDROP 
      0004FB 81               [ 4] 1014         RET     
                                   1015 
                                   1016 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1017 ;       C@      ( b -- c )
                                   1018 ;       Push byte in memory to  stack.
                                   1019 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004FC                       1020         _HEADER CAT,2,"C@"
      0004FC 04 ED                    1         .word LINK 
                           0004FE     2         LINK=.
      0004FE 02                       3         .byte 2  
      0004FF 43 40                    4         .ascii "C@"
      000501                          5         CAT:
      000501 90 93            [ 1] 1021         LDW Y,X     ;Y=b
      000503 90 FE            [ 2] 1022         LDW Y,(Y)
      000505 90 F6            [ 1] 1023         LD A,(Y)
      000507 E7 01            [ 1] 1024         LD (1,X),A
      000509 7F               [ 1] 1025         CLR (X)
      00050A 81               [ 4] 1026         RET     
                                   1027 
                                   1028 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1029 ;       RP@     ( -- a )
                                   1030 ;       Push current RP to data stack.
                                   1031 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00050B                       1032         _HEADER RPAT,3,"RP@"
      00050B 04 FE                    1         .word LINK 
                           00050D     2         LINK=.
      00050D 03                       3         .byte 3  
      00050E 52 50 40                 4         .ascii "RP@"
      000511                          5         RPAT:
      000511 90 96            [ 1] 1033         LDW Y,SP    ;save return addr
      000513 1D 00 02         [ 2] 1034         SUBW X,#2
      000516 FF               [ 2] 1035         LDW (X),Y
      000517 81               [ 4] 1036         RET     
                                   1037 
                                   1038 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1039 ;       RP!     ( a -- )
                                   1040 ;       Set  return stack pointer.
                                   1041 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000518                       1042         _HEADER RPSTO,COMPO+3,"RP!"
      000518 05 0D                    1         .word LINK 
                           00051A     2         LINK=.
      00051A 43                       3         .byte COMPO+3  
      00051B 52 50 21                 4         .ascii "RP!"
      00051E                          5         RPSTO:
      00051E 90 85            [ 2] 1043         POPW Y
      000520 90 BF 26         [ 2] 1044         LDW YTEMP,Y
      000523 90 93            [ 1] 1045         LDW Y,X
      000525 90 FE            [ 2] 1046         LDW Y,(Y)
      000527 90 94            [ 1] 1047         LDW SP,Y
      000529 1C 00 02         [ 2] 1048         ADDW X,#CELLL ; a was not dropped, Picatout 2020-05-24
      00052C 92 CC 26         [ 5] 1049         JP [YTEMP]
                                   1050 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                                   1051 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1052 ;       R>      ( -- w )
                                   1053 ;       Pop return stack to data stack.
                                   1054 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00052F                       1055         _HEADER RFROM,2,"R>"
      00052F 05 1A                    1         .word LINK 
                           000531     2         LINK=.
      000531 02                       3         .byte 2  
      000532 52 3E                    4         .ascii "R>"
      000534                          5         RFROM:
      000534 1D 00 02         [ 2] 1056         SUBW X,#CELLL 
      000537 16 03            [ 2] 1057         LDW Y,(3,SP)
      000539 FF               [ 2] 1058         LDW (X),Y 
      00053A 90 85            [ 2] 1059         POPW Y 
      00053C 5B 02            [ 2] 1060         ADDW SP,#2 
      00053E 90 FC            [ 2] 1061         JP (Y)
                                   1062 
                                   1063 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1064 ;       R@      ( -- w )
                                   1065 ;       Copy top of return stack to stack.
                                   1066 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000540                       1067         _HEADER RAT,2,"R@"
      000540 05 31                    1         .word LINK 
                           000542     2         LINK=.
      000542 02                       3         .byte 2  
      000543 52 40                    4         .ascii "R@"
      000545                          5         RAT:
      000545 16 03            [ 2] 1068         ldw y,(3,sp)
      000547 1D 00 02         [ 2] 1069         subw x,#CELLL 
      00054A FF               [ 2] 1070         ldw (x),y 
      00054B 81               [ 4] 1071         ret 
                                   1072 
                                   1073 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1074 ;       LOCAL ( n -- )
                                   1075 ;       reserve n slots on return stack
                                   1076 ;       for local variables 
                                   1077 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00054C                       1078         _HEADER LOCAL,5,"LOCAL"
      00054C 05 42                    1         .word LINK 
                           00054E     2         LINK=.
      00054E 05                       3         .byte 5  
      00054F 4C 4F 43 41 4C           4         .ascii "LOCAL"
      000554                          5         LOCAL:
      000554 90 85            [ 2] 1079         POPW Y  
      000556 90 BF 26         [ 2] 1080         LDW YTEMP,Y ; RETURN ADDRESS 
      000559 90 5F            [ 1] 1081         CLRW Y 
      00055B E6 01            [ 1] 1082         LD A,(1,X)
      00055D 90 97            [ 1] 1083         LD YL,A 
      00055F A6 02            [ 1] 1084         LD A,#CELLL 
      000561 90 42            [ 4] 1085         MUL Y,A 
      000563 90 BF 24         [ 2] 1086         LDw XTEMP,Y
      000566 90 96            [ 1] 1087         LDW Y,SP 
      000568 72 B2 00 24      [ 2] 1088         SUBW Y,XTEMP
      00056C 90 94            [ 1] 1089         LDW SP,Y 
      00056E 1C 00 02         [ 2] 1090         ADDW X,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      000571 92 CC 26         [ 5] 1091         JP [YTEMP]
                                   1092 
                                   1093 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1094 ;       NRDROP ( n -- )
                                   1095 ;       drop n elements from rstack
                                   1096 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000574                       1097         _HEADER NRDROP,6,"NRDROP" 
      000574 05 4E                    1         .word LINK 
                           000576     2         LINK=.
      000576 06                       3         .byte 6  
      000577 4E 52 44 52 4F 50        4         .ascii "NRDROP"
      00057D                          5         NRDROP:
      00057D 90 85            [ 2] 1098         POPW Y 
      00057F 90 BF 26         [ 2] 1099         LDW YTEMP,Y ; RETOURN ADDRESS 
      000582 90 5F            [ 1] 1100         CLRW Y 
      000584 E6 01            [ 1] 1101         LD A,(1,X)
      000586 90 97            [ 1] 1102         LD YL,A  
      000588 A6 02            [ 1] 1103         LD A,#CELLL 
      00058A 90 42            [ 4] 1104         MUL Y,A 
      00058C 90 BF 24         [ 2] 1105         LDW XTEMP,Y 
      00058F 90 96            [ 1] 1106         LDW Y,SP 
      000591 72 B9 00 24      [ 2] 1107         ADDW Y,XTEMP 
      000595 90 94            [ 1] 1108         LDW SP,Y  
      000597 1C 00 02         [ 2] 1109         ADDW X,#CELLL 
      00059A 92 CC 26         [ 5] 1110         JP [YTEMP]
                                   1111 
                                   1112 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1113 ;      NR@ ( n -- w)
                                   1114 ;      fetch nth element ofr return stack 
                                   1115 ;      n==0 is same as R@ 
                                   1116 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00059D                       1117         _HEADER NRAT,3,"NR@"
      00059D 05 76                    1         .word LINK 
                           00059F     2         LINK=.
      00059F 03                       3         .byte 3  
      0005A0 4E 52 40                 4         .ascii "NR@"
      0005A3                          5         NRAT:
      0005A3 90 5F            [ 1] 1118         CLRW Y 
      0005A5 E6 01            [ 1] 1119         LD A,(1,X)
      0005A7 90 97            [ 1] 1120         LD YL,A 
      0005A9 A6 02            [ 1] 1121         LD A,#CELLL 
      0005AB 90 42            [ 4] 1122         MUL Y,A 
      0005AD 90 BF 26         [ 2] 1123         LDW YTEMP,Y 
      0005B0 90 96            [ 1] 1124         LDW Y,SP 
      0005B2 72 A9 00 03      [ 2] 1125         ADDW Y,#3 
      0005B6 72 B9 00 26      [ 2] 1126         ADDW Y,YTEMP 
      0005BA 90 FE            [ 2] 1127         LDW Y,(Y)
      0005BC FF               [ 2] 1128         LDW (X),Y 
      0005BD 81               [ 4] 1129         RET 
                                   1130 
                                   1131 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1132 ;       NR! ( w n --  )
                                   1133 ;       store w on nth position of 
                                   1134 ;       return stack 
                                   1135 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      0005BE                       1136         _HEADER NRSTO,3,"NR!"
      0005BE 05 9F                    1         .word LINK 
                           0005C0     2         LINK=.
      0005C0 03                       3         .byte 3  
      0005C1 4E 52 21                 4         .ascii "NR!"
      0005C4                          5         NRSTO:
      0005C4 90 96            [ 1] 1137         LDW Y,SP
      0005C6 72 A9 00 03      [ 2] 1138         ADDW Y,#3 
      0005CA 90 BF 26         [ 2] 1139         LDW YTEMP,Y 
      0005CD 90 5F            [ 1] 1140         CLRW Y 
      0005CF E6 01            [ 1] 1141         LD A,(1,X)
      0005D1 90 97            [ 1] 1142         LD YL,A 
      0005D3 A6 02            [ 1] 1143         LD A,#CELLL 
      0005D5 90 42            [ 4] 1144         MUL Y,A 
      0005D7 72 B9 00 26      [ 2] 1145         ADDW Y,YTEMP
      0005DB 89               [ 2] 1146         PUSHW X 
      0005DC EE 02            [ 2] 1147         LDW X,(2,X)
      0005DE 90 FF            [ 2] 1148         LDW (Y),X
      0005E0 85               [ 2] 1149         POPW X 
      0005E1 1C 00 04         [ 2] 1150         ADDW X,#2*CELLL 
      0005E4 81               [ 4] 1151         RET 
                                   1152 
                                   1153 
                                   1154 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1155 ;       >R      ( w -- )
                                   1156 ;       Push data stack to return stack.
                                   1157 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005E5                       1158         _HEADER TOR,COMPO+2,">R"
      0005E5 05 C0                    1         .word LINK 
                           0005E7     2         LINK=.
      0005E7 42                       3         .byte COMPO+2  
      0005E8 3E 52                    4         .ascii ">R"
      0005EA                          5         TOR:
      0005EA 90 85            [ 2] 1159         POPW Y    ;save return addr
      0005EC 90 BF 26         [ 2] 1160         LDW YTEMP,Y
      0005EF 90 93            [ 1] 1161         LDW Y,X
      0005F1 90 FE            [ 2] 1162         LDW Y,(Y)  ; W
      0005F3 90 89            [ 2] 1163         PUSHW Y    ;W >R 
      0005F5 1C 00 02         [ 2] 1164         ADDW X,#2
      0005F8 92 CC 26         [ 5] 1165         JP [YTEMP]
                                   1166 
                                   1167 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1168 ;       SP@     ( -- a )
                                   1169 ;       Push current stack pointer.
                                   1170 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005FB                       1171         _HEADER SPAT,3,"SP@"
      0005FB 05 E7                    1         .word LINK 
                           0005FD     2         LINK=.
      0005FD 03                       3         .byte 3  
      0005FE 53 50 40                 4         .ascii "SP@"
      000601                          5         SPAT:
      000601 90 93            [ 1] 1172 	LDW Y,X
      000603 1D 00 02         [ 2] 1173         SUBW X,#2
      000606 FF               [ 2] 1174 	LDW (X),Y
      000607 81               [ 4] 1175         RET     
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                   1176 
                                   1177 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1178 ;       SP!     ( a -- )
                                   1179 ;       Set  data stack pointer.
                                   1180 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000608                       1181         _HEADER SPSTO,3,"SP!"
      000608 05 FD                    1         .word LINK 
                           00060A     2         LINK=.
      00060A 03                       3         .byte 3  
      00060B 53 50 21                 4         .ascii "SP!"
      00060E                          5         SPSTO:
      00060E FE               [ 2] 1182         LDW     X,(X)     ;X = a
      00060F 81               [ 4] 1183         RET     
                                   1184 
                                   1185 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1186 ;       DROP    ( w -- )
                                   1187 ;       Discard top stack item.
                                   1188 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000610                       1189         _HEADER DROP,4,"DROP"
      000610 06 0A                    1         .word LINK 
                           000612     2         LINK=.
      000612 04                       3         .byte 4  
      000613 44 52 4F 50              4         .ascii "DROP"
      000617                          5         DROP:
      000617 1C 00 02         [ 2] 1190         ADDW X,#2     
      00061A 81               [ 4] 1191         RET     
                                   1192 
                                   1193 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1194 ;       DUP     ( w -- w w )
                                   1195 ;       Duplicate  top stack item.
                                   1196 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00061B                       1197         _HEADER DUPP,3,"DUP"
      00061B 06 12                    1         .word LINK 
                           00061D     2         LINK=.
      00061D 03                       3         .byte 3  
      00061E 44 55 50                 4         .ascii "DUP"
      000621                          5         DUPP:
      000621 90 93            [ 1] 1198 	LDW Y,X
      000623 1D 00 02         [ 2] 1199         SUBW X,#2
      000626 90 FE            [ 2] 1200 	LDW Y,(Y)
      000628 FF               [ 2] 1201 	LDW (X),Y
      000629 81               [ 4] 1202         RET     
                                   1203 
                                   1204 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1205 ;       SWAP    ( w1 w2 -- w2 w1 )
                                   1206 ;       Exchange top two stack items.
                                   1207 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00062A                       1208         _HEADER SWAPP,4,"SWAP"
      00062A 06 1D                    1         .word LINK 
                           00062C     2         LINK=.
      00062C 04                       3         .byte 4  
      00062D 53 57 41 50              4         .ascii "SWAP"
      000631                          5         SWAPP:
      000631 90 93            [ 1] 1209         LDW Y,X
      000633 90 FE            [ 2] 1210         LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      000635 90 89            [ 2] 1211         PUSHW Y  
      000637 90 93            [ 1] 1212         LDW Y,X
      000639 90 EE 02         [ 2] 1213         LDW Y,(2,Y)
      00063C FF               [ 2] 1214         LDW (X),Y
      00063D 90 85            [ 2] 1215         POPW Y 
      00063F EF 02            [ 2] 1216         LDW (2,X),Y
      000641 81               [ 4] 1217         RET     
                                   1218 
                                   1219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1220 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                   1221 ;       Copy second stack item to top.
                                   1222 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000642                       1223         _HEADER OVER,4,"OVER"
      000642 06 2C                    1         .word LINK 
                           000644     2         LINK=.
      000644 04                       3         .byte 4  
      000645 4F 56 45 52              4         .ascii "OVER"
      000649                          5         OVER:
      000649 1D 00 02         [ 2] 1224         SUBW X,#2
      00064C 90 93            [ 1] 1225         LDW Y,X
      00064E 90 EE 04         [ 2] 1226         LDW Y,(4,Y)
      000651 FF               [ 2] 1227         LDW (X),Y
      000652 81               [ 4] 1228         RET     
                                   1229 
                                   1230 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1231 ;       0<      ( n -- t )
                                   1232 ;       Return true if n is negative.
                                   1233 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000653                       1234         _HEADER ZLESS,2,"0<"
      000653 06 44                    1         .word LINK 
                           000655     2         LINK=.
      000655 02                       3         .byte 2  
      000656 30 3C                    4         .ascii "0<"
      000658                          5         ZLESS:
      000658 A6 FF            [ 1] 1235         LD A,#0xFF
      00065A 90 93            [ 1] 1236         LDW Y,X
      00065C 90 FE            [ 2] 1237         LDW Y,(Y)
      00065E 2B 01            [ 1] 1238         JRMI     ZL1
      000660 4F               [ 1] 1239         CLR A   ;false
      000661 F7               [ 1] 1240 ZL1:    LD     (X),A
      000662 E7 01            [ 1] 1241         LD (1,X),A
      000664 81               [ 4] 1242 	RET     
                                   1243 
                                   1244 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1245 ;       0= ( n -- f )
                                   1246 ;   n==0?
                                   1247 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000665                       1248         _HEADER ZEQUAL,2,"0="
      000665 06 55                    1         .word LINK 
                           000667     2         LINK=.
      000667 02                       3         .byte 2  
      000668 30 3D                    4         .ascii "0="
      00066A                          5         ZEQUAL:
      00066A A6 FF            [ 1] 1249         LD A,#0XFF 
      00066C 90 93            [ 1] 1250         LDW Y,X 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      00066E 90 FE            [ 2] 1251         LDW Y,(Y)
      000670 27 02            [ 1] 1252         JREQ ZEQU1 
      000672 A6 00            [ 1] 1253         LD A,#0 
      000674                       1254 ZEQU1:  
      000674 F7               [ 1] 1255         LD (X),A 
      000675 E7 01            [ 1] 1256         LD (1,X),A         
      000677 81               [ 4] 1257         RET 
                                   1258 
                                   1259 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1260 ;       AND     ( w w -- w )
                                   1261 ;       Bitwise AND.
                                   1262 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000678                       1263         _HEADER ANDD,3,"AND"
      000678 06 67                    1         .word LINK 
                           00067A     2         LINK=.
      00067A 03                       3         .byte 3  
      00067B 41 4E 44                 4         .ascii "AND"
      00067E                          5         ANDD:
      00067E F6               [ 1] 1264         LD  A,(X)    ;D=w
      00067F E4 02            [ 1] 1265         AND A,(2,X)
      000681 E7 02            [ 1] 1266         LD (2,X),A
      000683 E6 01            [ 1] 1267         LD A,(1,X)
      000685 E4 03            [ 1] 1268         AND A,(3,X)
      000687 E7 03            [ 1] 1269         LD (3,X),A
      000689 1C 00 02         [ 2] 1270         ADDW X,#2
      00068C 81               [ 4] 1271         RET
                                   1272 
                                   1273 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1274 ;       OR      ( w w -- w )
                                   1275 ;       Bitwise inclusive OR.
                                   1276 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00068D                       1277         _HEADER ORR,2,"OR"
      00068D 06 7A                    1         .word LINK 
                           00068F     2         LINK=.
      00068F 02                       3         .byte 2  
      000690 4F 52                    4         .ascii "OR"
      000692                          5         ORR:
      000692 F6               [ 1] 1278         LD A,(X)    ;D=w
      000693 EA 02            [ 1] 1279         OR A,(2,X)
      000695 E7 02            [ 1] 1280         LD (2,X),A
      000697 E6 01            [ 1] 1281         LD A,(1,X)
      000699 EA 03            [ 1] 1282         OR A,(3,X)
      00069B E7 03            [ 1] 1283         LD (3,X),A
      00069D 1C 00 02         [ 2] 1284         ADDW X,#2
      0006A0 81               [ 4] 1285         RET
                                   1286 
                                   1287 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1288 ;       XOR     ( w w -- w )
                                   1289 ;       Bitwise exclusive OR.
                                   1290 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006A1                       1291         _HEADER XORR,3,"XOR"
      0006A1 06 8F                    1         .word LINK 
                           0006A3     2         LINK=.
      0006A3 03                       3         .byte 3  
      0006A4 58 4F 52                 4         .ascii "XOR"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      0006A7                          5         XORR:
      0006A7 F6               [ 1] 1292         LD A,(X)    ;D=w
      0006A8 E8 02            [ 1] 1293         XOR A,(2,X)
      0006AA E7 02            [ 1] 1294         LD (2,X),A
      0006AC E6 01            [ 1] 1295         LD A,(1,X)
      0006AE E8 03            [ 1] 1296         XOR A,(3,X)
      0006B0 E7 03            [ 1] 1297         LD (3,X),A
      0006B2 1C 00 02         [ 2] 1298         ADDW X,#2
      0006B5 81               [ 4] 1299         RET
                                   1300 
                                   1301 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1302 ;       UM+     ( u u -- udsum )
                                   1303 ;       Add two unsigned single
                                   1304 ;       and return a double sum.
                                   1305 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006B6                       1306         _HEADER UPLUS,3,"UM+"
      0006B6 06 A3                    1         .word LINK 
                           0006B8     2         LINK=.
      0006B8 03                       3         .byte 3  
      0006B9 55 4D 2B                 4         .ascii "UM+"
      0006BC                          5         UPLUS:
      0006BC A6 01            [ 1] 1307         LD A,#1
      0006BE 90 93            [ 1] 1308         LDW Y,X
      0006C0 90 EE 02         [ 2] 1309         LDW Y,(2,Y)
      0006C3 90 BF 26         [ 2] 1310         LDW YTEMP,Y
      0006C6 90 93            [ 1] 1311         LDW Y,X
      0006C8 90 FE            [ 2] 1312         LDW Y,(Y)
      0006CA 72 B9 00 26      [ 2] 1313         ADDW Y,YTEMP
      0006CE EF 02            [ 2] 1314         LDW (2,X),Y
      0006D0 25 01            [ 1] 1315         JRC     UPL1
      0006D2 4F               [ 1] 1316         CLR A
      0006D3 E7 01            [ 1] 1317 UPL1:   LD     (1,X),A
      0006D5 7F               [ 1] 1318         CLR (X)
      0006D6 81               [ 4] 1319         RET
                                   1320 
                                   1321 ;; System and user variables
                                   1322 
                                   1323 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1324 ;       doVAR   ( -- a )
                                   1325 ;       run time code 
                                   1326 ;       for VARIABLE and CREATE.
                                   1327 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1328 ;       HEADER DOVAR,COMPO+5,"DOVAR"
      0006D7                       1329 DOVAR:
      0006D7 1D 00 02         [ 2] 1330 	SUBW X,#2
      0006DA 90 85            [ 2] 1331         POPW Y    ;get return addr (pfa)
      0006DC 90 FE            [ 2] 1332         LDW Y,(Y) ; indirect address 
      0006DE FF               [ 2] 1333         LDW (X),Y    ;push on stack
      0006DF 81               [ 4] 1334         RET     ;go to RET of EXEC
                                   1335 
                                   1336 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1337 ;       BASE    ( -- a )
                                   1338 ;       Radix base for numeric I/O.
                                   1339 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006E0                       1340         _HEADER BASE,4,"BASE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      0006E0 06 B8                    1         .word LINK 
                           0006E2     2         LINK=.
      0006E2 04                       3         .byte 4  
      0006E3 42 41 53 45              4         .ascii "BASE"
      0006E7                          5         BASE:
      0006E7 90 AE 00 06      [ 2] 1341 	LDW Y,#UBASE 
      0006EB 1D 00 02         [ 2] 1342 	SUBW X,#2
      0006EE FF               [ 2] 1343         LDW (X),Y
      0006EF 81               [ 4] 1344         RET
                                   1345 
                                   1346 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1347 ;       tmp     ( -- a )
                                   1348 ;       A temporary storage.
                                   1349 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006F0                       1350         _HEADER TEMP,3,"TMP"
      0006F0 06 E2                    1         .word LINK 
                           0006F2     2         LINK=.
      0006F2 03                       3         .byte 3  
      0006F3 54 4D 50                 4         .ascii "TMP"
      0006F6                          5         TEMP:
      0006F6 90 AE 00 0A      [ 2] 1351 	LDW Y,#UTMP
      0006FA 1D 00 02         [ 2] 1352 	SUBW X,#2
      0006FD FF               [ 2] 1353         LDW (X),Y
      0006FE 81               [ 4] 1354         RET
                                   1355 
                                   1356 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1357 ;       >IN     ( -- a )
                                   1358 ;        Hold parsing pointer.
                                   1359 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006FF                       1360         _HEADER INN,3,">IN"
      0006FF 06 F2                    1         .word LINK 
                           000701     2         LINK=.
      000701 03                       3         .byte 3  
      000702 3E 49 4E                 4         .ascii ">IN"
      000705                          5         INN:
      000705 90 AE 00 0C      [ 2] 1361 	LDW Y,#UINN 
      000709 1D 00 02         [ 2] 1362 	SUBW X,#2
      00070C FF               [ 2] 1363         LDW (X),Y
      00070D 81               [ 4] 1364         RET
                                   1365 
                                   1366 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1367 ;       #TIB    ( -- a )
                                   1368 ;       Count in terminal input 
                                   1369 ;       buffer.
                                   1370 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00070E                       1371         _HEADER NTIB,4,"#TIB"
      00070E 07 01                    1         .word LINK 
                           000710     2         LINK=.
      000710 04                       3         .byte 4  
      000711 23 54 49 42              4         .ascii "#TIB"
      000715                          5         NTIB:
      000715 90 AE 00 0E      [ 2] 1372 	LDW Y,#UCTIB 
      000719 1D 00 02         [ 2] 1373 	SUBW X,#2
      00071C FF               [ 2] 1374         LDW (X),Y
      00071D 81               [ 4] 1375         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                   1376 
                                   1377 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1378 ;       TBUF ( -- a )
                                   1379 ;       address of 128 bytes 
                                   1380 ;       transaction buffer
                                   1381 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00071E                       1382         _HEADER TBUF,4,"TBUF"
      00071E 07 10                    1         .word LINK 
                           000720     2         LINK=.
      000720 04                       3         .byte 4  
      000721 54 42 55 46              4         .ascii "TBUF"
      000725                          5         TBUF:
      000725 90 AE 16 80      [ 2] 1383         ldw y,#ROWBUFF
      000729 1D 00 02         [ 2] 1384         subw x,#CELLL
      00072C FF               [ 2] 1385         ldw (x),y 
      00072D 81               [ 4] 1386         ret 
                                   1387 
                                   1388 ; systeme variable 
                                   1389 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1390 ; compilation destination 
                                   1391 ; TFLASH ( -- A )
                                   1392 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00072E                       1393         _HEADER TFLASH,6,"TFLASH"
      00072E 07 20                    1         .word LINK 
                           000730     2         LINK=.
      000730 06                       3         .byte 6  
      000731 54 46 4C 41 53 48        4         .ascii "TFLASH"
      000737                          5         TFLASH:
      000737 1D 00 02         [ 2] 1394         subw x,#CELLL 
      00073A 90 AE 00 20      [ 2] 1395         ldw y,#UTFLASH
      00073E FF               [ 2] 1396         ldw (x),y 
      00073F 81               [ 4] 1397         ret 
                                   1398 
                                   1399 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1400 ;       "EVAL   ( -- a )
                                   1401 ;       Execution vector of EVAL.
                                   1402 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000740                       1403         _HEADER TEVAL,5,"'EVAL"
      000740 07 30                    1         .word LINK 
                           000742     2         LINK=.
      000742 05                       3         .byte 5  
      000743 27 45 56 41 4C           4         .ascii "'EVAL"
      000748                          5         TEVAL:
      000748 90 AE 00 12      [ 2] 1404 	LDW Y,#UINTER 
      00074C 1D 00 02         [ 2] 1405 	SUBW X,#2
      00074F FF               [ 2] 1406         LDW (X),Y
      000750 81               [ 4] 1407         RET
                                   1408 
                                   1409 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1410 ;       HLD     ( -- a )
                                   1411 ;       Hold a pointer of output
                                   1412 ;        string.
                                   1413 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000751                       1414         _HEADER HLD,3,"HLD"
      000751 07 42                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                           000753     2         LINK=.
      000753 03                       3         .byte 3  
      000754 48 4C 44                 4         .ascii "HLD"
      000757                          5         HLD:
      000757 90 AE 00 14      [ 2] 1415 	LDW Y,#UHLD 
      00075B 1D 00 02         [ 2] 1416 	SUBW X,#2
      00075E FF               [ 2] 1417         LDW (X),Y
      00075F 81               [ 4] 1418         RET
                                   1419 
                                   1420 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1421 ;       CONTEXT ( -- a )
                                   1422 ;       Start vocabulary search.
                                   1423 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000760                       1424         _HEADER CNTXT,7,"CONTEXT"
      000760 07 53                    1         .word LINK 
                           000762     2         LINK=.
      000762 07                       3         .byte 7  
      000763 43 4F 4E 54 45 58 54     4         .ascii "CONTEXT"
      00076A                          5         CNTXT:
      00076A 90 AE 00 16      [ 2] 1425 	LDW Y,#UCNTXT
      00076E 1D 00 02         [ 2] 1426 	SUBW X,#2
      000771 FF               [ 2] 1427         LDW (X),Y
      000772 81               [ 4] 1428         RET
                                   1429 
                                   1430 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1431 ;       VP      ( -- a )
                                   1432 ;       Point to top of variables
                                   1433 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000773                       1434         _HEADER VPP,2,"VP"
      000773 07 62                    1         .word LINK 
                           000775     2         LINK=.
      000775 02                       3         .byte 2  
      000776 56 50                    4         .ascii "VP"
      000778                          5         VPP:
      000778 90 AE 00 18      [ 2] 1435 	LDW Y,#UVP 
      00077C 1D 00 02         [ 2] 1436 	SUBW X,#2
      00077F FF               [ 2] 1437         LDW (X),Y
      000780 81               [ 4] 1438         RET
                                   1439 
                                   1440 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1441 ;       CP    ( -- a )
                                   1442 ;       Pointer to top of FLASH 
                                   1443 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000781                       1444         _HEADER CPP,2,"CP"
      000781 07 75                    1         .word LINK 
                           000783     2         LINK=.
      000783 02                       3         .byte 2  
      000784 43 50                    4         .ascii "CP"
      000786                          5         CPP:
      000786 90 AE 00 1A      [ 2] 1445         ldw y,#UCP 
      00078A 1D 00 02         [ 2] 1446         subw x,#CELLL 
      00078D FF               [ 2] 1447         ldw (x),y 
      00078E 81               [ 4] 1448         ret                
                                   1449 
                                   1450 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                                   1451 ;       LAST    ( -- a )
                                   1452 ;       Point to last name in 
                                   1453 ;       dictionary.
                                   1454 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00078F                       1455         _HEADER LAST,4,"LAST"
      00078F 07 83                    1         .word LINK 
                           000791     2         LINK=.
      000791 04                       3         .byte 4  
      000792 4C 41 53 54              4         .ascii "LAST"
      000796                          5         LAST:
      000796 90 AE 00 1C      [ 2] 1456 	LDW Y,#ULAST 
      00079A 1D 00 02         [ 2] 1457 	SUBW X,#2
      00079D FF               [ 2] 1458         LDW (X),Y
      00079E 81               [ 4] 1459         RET
                                   1460 
                                   1461 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1462 ; address of system variable URLAST 
                                   1463 ;       RAMLAST ( -- a )
                                   1464 ; RAM dictionary context 
                                   1465 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00079F                       1466         _HEADER RAMLAST,7,"RAMLAST"
      00079F 07 91                    1         .word LINK 
                           0007A1     2         LINK=.
      0007A1 07                       3         .byte 7  
      0007A2 52 41 4D 4C 41 53 54     4         .ascii "RAMLAST"
      0007A9                          5         RAMLAST:
      0007A9 90 AE 00 22      [ 2] 1467         ldw y,#URLAST 
      0007AD 1D 00 02         [ 2] 1468         subw x,#CELLL 
      0007B0 FF               [ 2] 1469         ldw (x),y 
      0007B1 81               [ 4] 1470         ret 
                                   1471 
                                   1472 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1473 ;       OFFSET ( -- a )
                                   1474 ;       address of system 
                                   1475 ;       variable OFFSET 
                                   1476 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007B2                       1477         _HEADER OFFSET,6,"OFFSET"
      0007B2 07 A1                    1         .word LINK 
                           0007B4     2         LINK=.
      0007B4 06                       3         .byte 6  
      0007B5 4F 46 46 53 45 54        4         .ascii "OFFSET"
      0007BB                          5         OFFSET:
      0007BB 1D 00 02         [ 2] 1478         subw x,#CELLL
      0007BE 90 AE 00 1E      [ 2] 1479         ldw y,#UOFFSET 
      0007C2 FF               [ 2] 1480         ldw (x),y 
      0007C3 81               [ 4] 1481         ret 
                                   1482 
                                   1483 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1484 ; adjust jump address 
                                   1485 ;  adding OFFSET
                                   1486 ; ADR-ADJ ( a -- a+offset )
                                   1487 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007C4                       1488 ADRADJ: 
      0007C4 CD 07 BB         [ 4] 1489         call OFFSET 
      0007C7 CD 04 E3         [ 4] 1490         call AT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      0007CA CC 08 46         [ 2] 1491         jp PLUS 
                                   1492 
                                   1493 
                                   1494 ;; Common functions
                                   1495 
                                   1496 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1497 ;       ?DUP    ( w -- w w | 0 )
                                   1498 ;       Dup tos if its is not zero.
                                   1499 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007CD                       1500         _HEADER QDUP,4,"?DUP"
      0007CD 07 B4                    1         .word LINK 
                           0007CF     2         LINK=.
      0007CF 04                       3         .byte 4  
      0007D0 3F 44 55 50              4         .ascii "?DUP"
      0007D4                          5         QDUP:
      0007D4 90 93            [ 1] 1501         LDW Y,X
      0007D6 90 FE            [ 2] 1502 	LDW Y,(Y)
      0007D8 27 04            [ 1] 1503         JREQ     QDUP1
      0007DA 1D 00 02         [ 2] 1504 	SUBW X,#2
      0007DD FF               [ 2] 1505         LDW (X),Y
      0007DE 81               [ 4] 1506 QDUP1:  RET
                                   1507 
                                   1508 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1509 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1510 ;       Rot 3rd item to top.
                                   1511 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007DF                       1512         _HEADER ROT,3,"ROT"
      0007DF 07 CF                    1         .word LINK 
                           0007E1     2         LINK=.
      0007E1 03                       3         .byte 3  
      0007E2 52 4F 54                 4         .ascii "ROT"
      0007E5                          5         ROT:
      0007E5 90 93            [ 1] 1513         ldw y,x 
      0007E7 90 FE            [ 2] 1514         ldw y,(y)
      0007E9 90 89            [ 2] 1515         pushw y 
      0007EB 90 93            [ 1] 1516         ldw y,x 
      0007ED 90 EE 04         [ 2] 1517         ldw y,(4,y)
      0007F0 FF               [ 2] 1518         ldw (x),y 
      0007F1 90 93            [ 1] 1519         ldw y,x 
      0007F3 90 EE 02         [ 2] 1520         ldw y,(2,y)
      0007F6 EF 04            [ 2] 1521         ldw (4,x),y 
      0007F8 90 85            [ 2] 1522         popw y 
      0007FA EF 02            [ 2] 1523         ldw (2,x),y
      0007FC 81               [ 4] 1524         ret 
                                   1525 
                                   1526 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1527 ;    <ROT ( n1 n2 n3 -- n3 n1 n2 )
                                   1528 ;    rotate left 3 top elements 
                                   1529 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007FD                       1530     _HEADER NROT,4,"<ROT"
      0007FD 07 E1                    1         .word LINK 
                           0007FF     2         LINK=.
      0007FF 04                       3         .byte 4  
      000800 3C 52 4F 54              4         .ascii "<ROT"
      000804                          5         NROT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000804 90 93            [ 1] 1531     LDW Y,X 
      000806 90 FE            [ 2] 1532     LDW Y,(Y)
      000808 90 BF 26         [ 2] 1533     LDW YTEMP,Y ; n3  
      00080B 90 93            [ 1] 1534     LDW Y,X 
      00080D 90 EE 02         [ 2] 1535     LDW Y,(2,Y) ; Y = n2 
      000810 FF               [ 2] 1536     LDW (X),Y   ; TOS = n2 
      000811 90 93            [ 1] 1537     LDW Y,X    
      000813 90 EE 04         [ 2] 1538     LDW Y,(4,Y) ; Y = n1 
      000816 EF 02            [ 2] 1539     LDW (2,X),Y ;   = n1 
      000818 90 BE 26         [ 2] 1540     LDW Y,YTEMP 
      00081B EF 04            [ 2] 1541     LDW (4,X),Y ; = n3 
      00081D 81               [ 4] 1542     RET 
                                   1543 
                                   1544 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1545 ;       2DROP   ( w w -- )
                                   1546 ;       Discard two items on stack.
                                   1547 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00081E                       1548         _HEADER DDROP,5,"2DROP"
      00081E 07 FF                    1         .word LINK 
                           000820     2         LINK=.
      000820 05                       3         .byte 5  
      000821 32 44 52 4F 50           4         .ascii "2DROP"
      000826                          5         DDROP:
      000826 1C 00 04         [ 2] 1549         ADDW X,#4
      000829 81               [ 4] 1550         RET
                                   1551 
                                   1552 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1553 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1554 ;       Duplicate top two items.
                                   1555 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00082A                       1556         _HEADER DDUP,4,"2DUP"
      00082A 08 20                    1         .word LINK 
                           00082C     2         LINK=.
      00082C 04                       3         .byte 4  
      00082D 32 44 55 50              4         .ascii "2DUP"
      000831                          5         DDUP:
      000831 1D 00 04         [ 2] 1557         SUBW X,#4
      000834 90 93            [ 1] 1558         LDW Y,X
      000836 90 EE 06         [ 2] 1559         LDW Y,(6,Y)
      000839 EF 02            [ 2] 1560         LDW (2,X),Y
      00083B 90 93            [ 1] 1561         LDW Y,X
      00083D 90 EE 04         [ 2] 1562         LDW Y,(4,Y)
      000840 FF               [ 2] 1563         LDW (X),Y
      000841 81               [ 4] 1564         RET
                                   1565 
                                   1566 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1567 ;       +       ( w w -- sum )
                                   1568 ;       Add top two items.
                                   1569 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000842                       1570         _HEADER PLUS,1,"+"
      000842 08 2C                    1         .word LINK 
                           000844     2         LINK=.
      000844 01                       3         .byte 1  
      000845 2B                       4         .ascii "+"
      000846                          5         PLUS:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000846 90 93            [ 1] 1571         LDW Y,X
      000848 90 FE            [ 2] 1572         LDW Y,(Y)
      00084A 90 BF 26         [ 2] 1573         LDW YTEMP,Y
      00084D 1C 00 02         [ 2] 1574         ADDW X,#2
      000850 90 93            [ 1] 1575         LDW Y,X
      000852 90 FE            [ 2] 1576         LDW Y,(Y)
      000854 72 B9 00 26      [ 2] 1577         ADDW Y,YTEMP
      000858 FF               [ 2] 1578         LDW (X),Y
      000859 81               [ 4] 1579         RET
                                   1580 
                                   1581 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1582 ;       NOT     ( w -- w )
                                   1583 ;       One's complement of tos.
                                   1584 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00085A                       1585         _HEADER INVER,3,"NOT"
      00085A 08 44                    1         .word LINK 
                           00085C     2         LINK=.
      00085C 03                       3         .byte 3  
      00085D 4E 4F 54                 4         .ascii "NOT"
      000860                          5         INVER:
      000860 90 93            [ 1] 1586         LDW Y,X
      000862 90 FE            [ 2] 1587         LDW Y,(Y)
      000864 90 53            [ 2] 1588         CPLW Y
      000866 FF               [ 2] 1589         LDW (X),Y
      000867 81               [ 4] 1590         RET
                                   1591 
                                   1592 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1593 ;       NEGATE  ( n -- -n )
                                   1594 ;       Two's complement of tos.
                                   1595 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000868                       1596         _HEADER NEGAT,6,"NEGATE"
      000868 08 5C                    1         .word LINK 
                           00086A     2         LINK=.
      00086A 06                       3         .byte 6  
      00086B 4E 45 47 41 54 45        4         .ascii "NEGATE"
      000871                          5         NEGAT:
      000871 90 93            [ 1] 1597         LDW Y,X
      000873 90 FE            [ 2] 1598         LDW Y,(Y)
      000875 90 50            [ 2] 1599         NEGW Y
      000877 FF               [ 2] 1600         LDW (X),Y
      000878 81               [ 4] 1601         RET
                                   1602 
                                   1603 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1604 ;       DNEGATE ( d -- -d )
                                   1605 ;       Two's complement of top double.
                                   1606 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000879                       1607         _HEADER DNEGA,7,"DNEGATE"
      000879 08 6A                    1         .word LINK 
                           00087B     2         LINK=.
      00087B 07                       3         .byte 7  
      00087C 44 4E 45 47 41 54 45     4         .ascii "DNEGATE"
      000883                          5         DNEGA:
      000883 90 93            [ 1] 1608         LDW Y,X
      000885 90 FE            [ 2] 1609 	LDW Y,(Y)
      000887 90 53            [ 2] 1610         CPLW Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      000889 90 89            [ 2] 1611         PUSHW Y      ; Y >R 
      00088B 90 93            [ 1] 1612         LDW Y,X
      00088D 90 EE 02         [ 2] 1613         LDW Y,(2,Y)
      000890 90 53            [ 2] 1614         CPLW Y
      000892 72 A9 00 01      [ 2] 1615         addw y,#1
      000896 EF 02            [ 2] 1616         LDW (2,X),Y
      000898 90 85            [ 2] 1617         POPW Y       ; R> Y  
      00089A 24 02            [ 1] 1618         JRNC DN1 
      00089C 90 5C            [ 1] 1619         INCW Y
      00089E FF               [ 2] 1620 DN1:    LDW (X),Y
      00089F 81               [ 4] 1621         RET
                                   1622 
                                   1623 
                                   1624 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1625 ;       S>D ( n -- d )
                                   1626 ; convert single integer to double 
                                   1627 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008A0                       1628         _HEADER STOD,3,"S>D"
      0008A0 08 7B                    1         .word LINK 
                           0008A2     2         LINK=.
      0008A2 03                       3         .byte 3  
      0008A3 53 3E 44                 4         .ascii "S>D"
      0008A6                          5         STOD:
      0008A6 1D 00 02         [ 2] 1629         subw x,#CELLL 
      0008A9 90 5F            [ 1] 1630         clrw y 
      0008AB FF               [ 2] 1631         ldw (x),y 
      0008AC 90 93            [ 1] 1632         ldw y,x 
      0008AE 90 EE 02         [ 2] 1633         ldw y,(2,y)
      0008B1 2A 05            [ 1] 1634         jrpl 1$ 
      0008B3 90 AE FF FF      [ 2] 1635         ldw y,#-1
      0008B7 FF               [ 2] 1636         ldw (x),y 
      0008B8 81               [ 4] 1637 1$:     ret 
                                   1638 
                                   1639 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1640 ;       -       ( n1 n2 -- n1-n2 )
                                   1641 ;       Subtraction.
                                   1642 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008B9                       1643         _HEADER SUBB,1,"-"
      0008B9 08 A2                    1         .word LINK 
                           0008BB     2         LINK=.
      0008BB 01                       3         .byte 1  
      0008BC 2D                       4         .ascii "-"
      0008BD                          5         SUBB:
      0008BD 90 93            [ 1] 1644         LDW Y,X
      0008BF 90 FE            [ 2] 1645         LDW Y,(Y)
      0008C1 90 BF 26         [ 2] 1646         LDW YTEMP,Y
      0008C4 1C 00 02         [ 2] 1647         ADDW X,#2
      0008C7 90 93            [ 1] 1648         LDW Y,X
      0008C9 90 FE            [ 2] 1649         LDW Y,(Y)
      0008CB 72 B2 00 26      [ 2] 1650         SUBW Y,YTEMP
      0008CF FF               [ 2] 1651         LDW (X),Y
      0008D0 81               [ 4] 1652         RET
                                   1653 
                                   1654 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1655 ;       ABS     ( n -- n )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                                   1656 ;       Return  absolute value of n.
                                   1657 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008D1                       1658         _HEADER ABSS,3,"ABS"
      0008D1 08 BB                    1         .word LINK 
                           0008D3     2         LINK=.
      0008D3 03                       3         .byte 3  
      0008D4 41 42 53                 4         .ascii "ABS"
      0008D7                          5         ABSS:
      0008D7 90 93            [ 1] 1659         LDW Y,X
      0008D9 90 FE            [ 2] 1660 	LDW Y,(Y)
      0008DB 2A 03            [ 1] 1661         JRPL     AB1     ;negate:
      0008DD 90 50            [ 2] 1662         NEGW     Y     ;else negate hi byte
      0008DF FF               [ 2] 1663         LDW (X),Y
      0008E0 81               [ 4] 1664 AB1:    RET
                                   1665 
                                   1666 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1667 ;       =       ( w w -- t )
                                   1668 ;       Return true if top two are =al.
                                   1669 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008E1                       1670         _HEADER EQUAL,1,"="
      0008E1 08 D3                    1         .word LINK 
                           0008E3     2         LINK=.
      0008E3 01                       3         .byte 1  
      0008E4 3D                       4         .ascii "="
      0008E5                          5         EQUAL:
      0008E5 A6 FF            [ 1] 1671         LD A,#0xFF  ;true
      0008E7 90 93            [ 1] 1672         LDW Y,X    ;D = n2
      0008E9 90 FE            [ 2] 1673         LDW Y,(Y)
      0008EB 90 BF 26         [ 2] 1674         LDW YTEMP,Y
      0008EE 1C 00 02         [ 2] 1675         ADDW X,#2
      0008F1 90 93            [ 1] 1676         LDW Y,X
      0008F3 90 FE            [ 2] 1677         LDW Y,(Y)
      0008F5 90 B3 26         [ 2] 1678         CPW Y,YTEMP     ;if n2 <> n1
      0008F8 27 01            [ 1] 1679         JREQ     EQ1
      0008FA 4F               [ 1] 1680         CLR A
      0008FB F7               [ 1] 1681 EQ1:    LD (X),A
      0008FC E7 01            [ 1] 1682         LD (1,X),A
      0008FE 81               [ 4] 1683 	RET     
                                   1684 
                                   1685 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1686 ;       U<      ( u u -- t )
                                   1687 ;       Unsigned compare of top two items.
                                   1688 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008FF                       1689         _HEADER ULESS,2,"U<"
      0008FF 08 E3                    1         .word LINK 
                           000901     2         LINK=.
      000901 02                       3         .byte 2  
      000902 55 3C                    4         .ascii "U<"
      000904                          5         ULESS:
      000904 A6 FF            [ 1] 1690         LD A,#0xFF  ;true
      000906 90 93            [ 1] 1691         LDW Y,X    ;D = n2
      000908 90 FE            [ 2] 1692         LDW Y,(Y)
      00090A 90 BF 26         [ 2] 1693         LDW YTEMP,Y
      00090D 1C 00 02         [ 2] 1694         ADDW X,#2
      000910 90 93            [ 1] 1695         LDW Y,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000912 90 FE            [ 2] 1696         LDW Y,(Y)
      000914 90 B3 26         [ 2] 1697         CPW Y,YTEMP     ;if n2 <> n1
      000917 25 01            [ 1] 1698         JRULT     ULES1
      000919 4F               [ 1] 1699         CLR A
      00091A F7               [ 1] 1700 ULES1:  LD (X),A
      00091B E7 01            [ 1] 1701         LD (1,X),A
      00091D 81               [ 4] 1702 	RET     
                                   1703 
                                   1704 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1705 ;       <       ( n1 n2 -- t )
                                   1706 ;       Signed compare of top two items.
                                   1707 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00091E                       1708         _HEADER LESS,1,"<"
      00091E 09 01                    1         .word LINK 
                           000920     2         LINK=.
      000920 01                       3         .byte 1  
      000921 3C                       4         .ascii "<"
      000922                          5         LESS:
      000922 A6 FF            [ 1] 1709         LD A,#0xFF  ;true
      000924 90 93            [ 1] 1710         LDW Y,X    ;D = n2
      000926 90 FE            [ 2] 1711         LDW Y,(Y)
      000928 90 BF 26         [ 2] 1712         LDW YTEMP,Y
      00092B 1C 00 02         [ 2] 1713         ADDW X,#2
      00092E 90 93            [ 1] 1714         LDW Y,X
      000930 90 FE            [ 2] 1715         LDW Y,(Y)
      000932 90 B3 26         [ 2] 1716         CPW Y,YTEMP     ;if n2 <> n1
      000935 2F 01            [ 1] 1717         JRSLT     LT1
      000937 4F               [ 1] 1718         CLR A
      000938 F7               [ 1] 1719 LT1:    LD (X),A
      000939 E7 01            [ 1] 1720         LD (1,X),A
      00093B 81               [ 4] 1721 	RET     
                                   1722 
                                   1723 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1724 ;   U> ( u1 u2 -- f )
                                   1725 ;   f = true if u1>u2 
                                   1726 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00093C                       1727     _HEADER UGREAT,2,"U>"
      00093C 09 20                    1         .word LINK 
                           00093E     2         LINK=.
      00093E 02                       3         .byte 2  
      00093F 55 3E                    4         .ascii "U>"
      000941                          5         UGREAT:
      000941 A6 00            [ 1] 1728     LD A,#0 
      000943 90 93            [ 1] 1729     LDW Y,X 
      000945 90 FE            [ 2] 1730     LDW Y,(Y)
      000947 90 BF 26         [ 2] 1731     LDW YTEMP,Y 
      00094A 1C 00 02         [ 2] 1732     ADDW X,#2 
      00094D 90 93            [ 1] 1733     LDW Y,X
      00094F 90 FE            [ 2] 1734     LDW Y,(Y)
      000951 90 B3 26         [ 2] 1735     CPW Y,YTEMP 
      000954 23 02            [ 2] 1736     JRULE UGREAT1 
      000956 A6 FF            [ 1] 1737     LD A,#0xff  
      000958                       1738 UGREAT1:
      000958 F7               [ 1] 1739     LD (X),A 
      000959 E7 01            [ 1] 1740     LD (1,X),A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      00095B 81               [ 4] 1741     RET 
                                   1742 
                                   1743 
                                   1744 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1745 ;       >   (n1 n2 -- f )
                                   1746 ;  signed compare n1 n2 
                                   1747 ;  true if n1 > n2 
                                   1748 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00095C                       1749         _HEADER GREAT,1,">"
      00095C 09 3E                    1         .word LINK 
                           00095E     2         LINK=.
      00095E 01                       3         .byte 1  
      00095F 3E                       4         .ascii ">"
      000960                          5         GREAT:
      000960 A6 FF            [ 1] 1750         LD A,#0xFF ;
      000962 90 93            [ 1] 1751         LDW Y,X 
      000964 90 FE            [ 2] 1752         LDW Y,(Y)
      000966 90 BF 26         [ 2] 1753         LDW YTEMP,Y 
      000969 1C 00 02         [ 2] 1754         ADDW X,#2 
      00096C 90 93            [ 1] 1755         LDW Y,X 
      00096E 90 FE            [ 2] 1756         LDW Y,(Y)
      000970 90 B3 26         [ 2] 1757         CPW  Y,YTEMP 
      000973 2C 01            [ 1] 1758         JRSGT GREAT1 
      000975 4F               [ 1] 1759         CLR  A
      000976                       1760 GREAT1:
      000976 F7               [ 1] 1761         LD (X),A 
      000977 E7 01            [ 1] 1762         LD (1,X),A 
      000979 81               [ 4] 1763         RET 
                                   1764 
                                   1765 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1766 ;       MAX     ( n n -- n )
                                   1767 ;       Return greater of two top items.
                                   1768 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00097A                       1769         _HEADER MAX,3,"MAX"
      00097A 09 5E                    1         .word LINK 
                           00097C     2         LINK=.
      00097C 03                       3         .byte 3  
      00097D 4D 41 58                 4         .ascii "MAX"
      000980                          5         MAX:
      000980 90 93            [ 1] 1770         LDW Y,X    ;D = n2
      000982 90 EE 02         [ 2] 1771         LDW Y,(2,Y)
      000985 90 BF 26         [ 2] 1772         LDW YTEMP,Y
      000988 90 93            [ 1] 1773         LDW Y,X
      00098A 90 FE            [ 2] 1774         LDW Y,(Y)
      00098C 90 B3 26         [ 2] 1775         CPW Y,YTEMP     ;if n2 <> n1
      00098F 2F 02            [ 1] 1776         JRSLT     MAX1
      000991 EF 02            [ 2] 1777         LDW (2,X),Y
      000993 1C 00 02         [ 2] 1778 MAX1:   ADDW X,#2
      000996 81               [ 4] 1779 	RET     
                                   1780 
                                   1781 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1782 ;       MIN     ( n n -- n )
                                   1783 ;       Return smaller of top two items.
                                   1784 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000997                       1785         _HEADER MIN,3,"MIN"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000997 09 7C                    1         .word LINK 
                           000999     2         LINK=.
      000999 03                       3         .byte 3  
      00099A 4D 49 4E                 4         .ascii "MIN"
      00099D                          5         MIN:
      00099D 90 93            [ 1] 1786         LDW Y,X    ;D = n2
      00099F 90 EE 02         [ 2] 1787         LDW Y,(2,Y)
      0009A2 90 BF 26         [ 2] 1788         LDW YTEMP,Y
      0009A5 90 93            [ 1] 1789         LDW Y,X
      0009A7 90 FE            [ 2] 1790         LDW Y,(Y)
      0009A9 90 B3 26         [ 2] 1791         CPW Y,YTEMP     ;if n2 <> n1
      0009AC 2C 02            [ 1] 1792         JRSGT     MIN1
      0009AE EF 02            [ 2] 1793         LDW (2,X),Y
      0009B0 1C 00 02         [ 2] 1794 MIN1:	ADDW X,#2
      0009B3 81               [ 4] 1795 	RET     
                                   1796 
                                   1797 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1798 ;       WITHIN  ( u ul uh -- t )
                                   1799 ;       Return true if u is within
                                   1800 ;       range of ul and uh. ( ul <= u < uh )
                                   1801 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0009B4                       1802         _HEADER WITHI,6,"WITHIN"
      0009B4 09 99                    1         .word LINK 
                           0009B6     2         LINK=.
      0009B6 06                       3         .byte 6  
      0009B7 57 49 54 48 49 4E        4         .ascii "WITHIN"
      0009BD                          5         WITHI:
      0009BD CD 06 49         [ 4] 1803         CALL     OVER
      0009C0 CD 08 BD         [ 4] 1804         CALL     SUBB
      0009C3 CD 05 EA         [ 4] 1805         CALL     TOR
      0009C6 CD 08 BD         [ 4] 1806         CALL     SUBB
      0009C9 CD 05 34         [ 4] 1807         CALL     RFROM
      0009CC CC 09 04         [ 2] 1808         JP     ULESS
                                   1809 
                                   1810 ;; Divide
                                   1811 
                                   1812 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1813 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1814 ;       Unsigned divide of a double by a
                                   1815 ;       single. Return mod and quotient.
                                   1816 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0009CF                       1817         _HEADER UMMOD,6,"UM/MOD"
      0009CF 09 B6                    1         .word LINK 
                           0009D1     2         LINK=.
      0009D1 06                       3         .byte 6  
      0009D2 55 4D 2F 4D 4F 44        4         .ascii "UM/MOD"
      0009D8                          5         UMMOD:
                                   1818 ; 2021-02-22
                                   1819 ; changed algortihm for Jeeek one 
                                   1820 ; ref: https://github.com/TG9541/stm8ef/pull/406        
      0009D8 90 93            [ 1] 1821         LDW     Y,X             ; stack pointer to Y
      0009DA FE               [ 2] 1822         LDW     X,(X)           ; un
      0009DB BF 26            [ 2] 1823         LDW     YTEMP,X         ; save un
      0009DD 93               [ 1] 1824         LDW     X,Y
      0009DE 5C               [ 1] 1825         INCW    X               ; drop un
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      0009DF 5C               [ 1] 1826         INCW    X
      0009E0 89               [ 2] 1827         PUSHW   X               ; save stack pointer
      0009E1 FE               [ 2] 1828         LDW     X,(X)           ; X=udh
      0009E2 90 EE 04         [ 2] 1829         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      0009E5 B3 26            [ 2] 1830         CPW     X,YTEMP
      0009E7 25 0B            [ 1] 1831         JRULT   MMSM1           ; X is still on the R-stack
      0009E9 85               [ 2] 1832         POPW    X               ; restore stack pointer
      0009EA 90 AE FF FF      [ 2] 1833         LDW     Y,#0xFFFF       ; overflow result:
      0009EE FF               [ 2] 1834         LDW     (X),Y           ; quotient max. 16 bit value
      0009EF 90 5F            [ 1] 1835         CLRW    Y
      0009F1 EF 02            [ 2] 1836         LDW     (2,X),Y         ; remainder 0
      0009F3 81               [ 4] 1837         RET
      0009F4                       1838 MMSM1:
      0009F4 A6 10            [ 1] 1839         LD      A,#16           ; loop count
      0009F6 90 58            [ 2] 1840         SLLW    Y               ; udl shift udl into udh
      0009F8                       1841 MMSM3:
      0009F8 59               [ 2] 1842         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      0009F9 25 04            [ 1] 1843         JRC     MMSMa           ; if carry out of rotate
      0009FB B3 26            [ 2] 1844         CPW     X,YTEMP         ; compare udh to un
      0009FD 25 05            [ 1] 1845         JRULT   MMSM4           ; can't subtract
      0009FF                       1846 MMSMa:
      0009FF 72 B0 00 26      [ 2] 1847         SUBW    X,YTEMP         ; can subtract
      000A03 98               [ 1] 1848         RCF
      000A04                       1849 MMSM4:
      000A04 8C               [ 1] 1850         CCF                     ; quotient bit
      000A05 90 59            [ 2] 1851         RLCW    Y               ; rotate into quotient, rotate out udl
      000A07 4A               [ 1] 1852         DEC     A               ; repeat
      000A08 26 EE            [ 1] 1853         JRNE    MMSM3           ; if A == 0
      000A0A                       1854 MMSMb:
      000A0A BF 26            [ 2] 1855         LDW     YTEMP,X         ; done, save remainder
      000A0C 85               [ 2] 1856         POPW    X               ; restore stack pointer
      000A0D FF               [ 2] 1857         LDW     (X),Y           ; save quotient
      000A0E 90 BE 26         [ 2] 1858         LDW     Y,YTEMP         ; remainder onto stack
      000A11 EF 02            [ 2] 1859         LDW     (2,X),Y
      000A13 81               [ 4] 1860         RET
                                   1861 
                                   1862 
                                   1863 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                   1864 ;       M/MOD   ( d n -- r q )
                                   1865 ;       Signed floored divide of double by
                                   1866 ;       single. Return mod and quotient.
                                   1867 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A14                       1868         _HEADER MSMOD,5,"M/MOD"
      000A14 09 D1                    1         .word LINK 
                           000A16     2         LINK=.
      000A16 05                       3         .byte 5  
      000A17 4D 2F 4D 4F 44           4         .ascii "M/MOD"
      000A1C                          5         MSMOD:
      000A1C CD 06 21         [ 4] 1869         CALL	DUPP
      000A1F CD 06 58         [ 4] 1870         CALL	ZLESS
      000A22 CD 06 21         [ 4] 1871         CALL	DUPP
      000A25 CD 05 EA         [ 4] 1872         CALL	TOR
      000A28 CD 04 98         [ 4] 1873         CALL	QBRAN
      000A2B 0A 39                 1874         .word	MMOD1
      000A2D CD 08 71         [ 4] 1875         CALL	NEGAT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000A30 CD 05 EA         [ 4] 1876         CALL	TOR
      000A33 CD 08 83         [ 4] 1877         CALL	DNEGA
      000A36 CD 05 34         [ 4] 1878         CALL	RFROM
      000A39 CD 05 EA         [ 4] 1879 MMOD1:	CALL	TOR
      000A3C CD 06 21         [ 4] 1880         CALL	DUPP
      000A3F CD 06 58         [ 4] 1881         CALL	ZLESS
      000A42 CD 04 98         [ 4] 1882         CALL	QBRAN
      000A45 0A 4D                 1883         .word	MMOD2
      000A47 CD 05 45         [ 4] 1884         CALL	RAT
      000A4A CD 08 46         [ 4] 1885         CALL	PLUS
      000A4D CD 05 34         [ 4] 1886 MMOD2:	CALL	RFROM
      000A50 CD 09 D8         [ 4] 1887         CALL	UMMOD
      000A53 CD 05 34         [ 4] 1888         CALL	RFROM
      000A56 CD 04 98         [ 4] 1889         CALL	QBRAN
      000A59 0A 64                 1890         .word	MMOD3
      000A5B CD 06 31         [ 4] 1891         CALL	SWAPP
      000A5E CD 08 71         [ 4] 1892         CALL	NEGAT
      000A61 CD 06 31         [ 4] 1893         CALL	SWAPP
      000A64 81               [ 4] 1894 MMOD3:	RET
                                   1895 
                                   1896 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1897 ;       /MOD    ( n n -- r q )
                                   1898 ;       Signed divide. Return mod 
                                   1899 ;       and quotient.
                                   1900 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A65                       1901         _HEADER SLMOD,4,"/MOD"
      000A65 0A 16                    1         .word LINK 
                           000A67     2         LINK=.
      000A67 04                       3         .byte 4  
      000A68 2F 4D 4F 44              4         .ascii "/MOD"
      000A6C                          5         SLMOD:
      000A6C CD 06 49         [ 4] 1902         CALL	OVER
      000A6F CD 06 58         [ 4] 1903         CALL	ZLESS
      000A72 CD 06 31         [ 4] 1904         CALL	SWAPP
      000A75 CC 0A 1C         [ 2] 1905         JP	MSMOD
                                   1906 
                                   1907 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1908 ;       MOD     ( n n -- r )
                                   1909 ;       Signed divide. Return mod only.
                                   1910 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A78                       1911         _HEADER MODD,3,"MOD"
      000A78 0A 67                    1         .word LINK 
                           000A7A     2         LINK=.
      000A7A 03                       3         .byte 3  
      000A7B 4D 4F 44                 4         .ascii "MOD"
      000A7E                          5         MODD:
      000A7E CD 0A 6C         [ 4] 1912 	CALL	SLMOD
      000A81 CC 06 17         [ 2] 1913 	JP	DROP
                                   1914 
                                   1915 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1916 ;       /       ( n n -- q )
                                   1917 ;       Signed divide. Return quotient only.
                                   1918 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A84                       1919         _HEADER SLASH,1,"/"
      000A84 0A 7A                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



                           000A86     2         LINK=.
      000A86 01                       3         .byte 1  
      000A87 2F                       4         .ascii "/"
      000A88                          5         SLASH:
      000A88 CD 0A 6C         [ 4] 1920         CALL	SLMOD
      000A8B CD 06 31         [ 4] 1921         CALL	SWAPP
      000A8E CC 06 17         [ 2] 1922         JP	DROP
                                   1923 
                                   1924 ;; Multiply
                                   1925 
                                   1926 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1927 ;       UM*     ( u u -- ud )
                                   1928 ;       Unsigned multiply. Return 
                                   1929 ;       double product.
                                   1930 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A91                       1931         _HEADER UMSTA,3,"UM*"
      000A91 0A 86                    1         .word LINK 
                           000A93     2         LINK=.
      000A93 03                       3         .byte 3  
      000A94 55 4D 2A                 4         .ascii "UM*"
      000A97                          5         UMSTA:
                                   1932 ; stack have 4 bytes u1=a,b u2=c,d
                                   1933 ; take advantage of SP addressing modes
                                   1934 ; these PRODx in RAM are not required
                                   1935 ; the product is kept on stack as local variable 
                                   1936         ;; bytes offset on data stack 
                           000002  1937         da=2 
                           000003  1938         db=3 
                           000000  1939         dc=0 
                           000001  1940         dd=1 
                                   1941         ;; product bytes offset on return stack 
                           000001  1942         UD1=1  ; ud bits 31..24
                           000002  1943         UD2=2  ; ud bits 23..16
                           000003  1944         UD3=3  ; ud bits 15..8 
                           000004  1945         UD4=4  ; ud bits 7..0 
                                   1946         ;; local variable for product set to zero   
      000A97 90 5F            [ 1] 1947         clrw y 
      000A99 90 89            [ 2] 1948         pushw y  ; bits 15..0
      000A9B 90 89            [ 2] 1949         pushw y  ; bits 31..16 
      000A9D E6 03            [ 1] 1950         ld a,(db,x) ; b 
      000A9F 90 97            [ 1] 1951         ld yl,a 
      000AA1 E6 01            [ 1] 1952         ld a,(dd,x)   ; d
      000AA3 90 42            [ 4] 1953         mul y,a    ; b*d  
      000AA5 17 03            [ 2] 1954         ldw (UD3,sp),y ; lowest weight product 
      000AA7 E6 03            [ 1] 1955         ld a,(db,x)
      000AA9 90 97            [ 1] 1956         ld yl,a 
      000AAB E6 00            [ 1] 1957         ld a,(dc,x)
      000AAD 90 42            [ 4] 1958         mul y,a  ; b*c 
                                   1959         ;;; do the partial sum 
      000AAF 72 F9 02         [ 2] 1960         addw y,(UD2,sp)
      000AB2 4F               [ 1] 1961         clr a 
      000AB3 49               [ 1] 1962         rlc a
      000AB4 6B 01            [ 1] 1963         ld (UD1,sp),a 
      000AB6 17 02            [ 2] 1964         ldw (UD2,sp),y 
      000AB8 E6 02            [ 1] 1965         ld a,(da,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000ABA 90 97            [ 1] 1966         ld yl,a 
      000ABC E6 01            [ 1] 1967         ld a,(dd,x)
      000ABE 90 42            [ 4] 1968         mul y,a   ; a*d 
                                   1969         ;; do partial sum 
      000AC0 72 F9 02         [ 2] 1970         addw y,(UD2,sp)
      000AC3 4F               [ 1] 1971         clr a 
      000AC4 19 01            [ 1] 1972         adc a,(UD1,sp)
      000AC6 6B 01            [ 1] 1973         ld (UD1,sp),a  
      000AC8 17 02            [ 2] 1974         ldw (UD2,sp),y 
      000ACA E6 02            [ 1] 1975         ld a,(da,x)
      000ACC 90 97            [ 1] 1976         ld yl,a 
      000ACE E6 00            [ 1] 1977         ld a,(dc,x)
      000AD0 90 42            [ 4] 1978         mul y,a  ;  a*c highest weight product 
                                   1979         ;;; do partial sum 
      000AD2 72 F9 01         [ 2] 1980         addw y,(UD1,sp)
      000AD5 FF               [ 2] 1981         ldw (x),y  ; udh 
      000AD6 16 03            [ 2] 1982         ldw y,(UD3,sp)
      000AD8 EF 02            [ 2] 1983         ldw (2,x),y  ; udl  
      000ADA 5B 04            [ 2] 1984         addw sp,#4 ; drop local variable 
      000ADC 81               [ 4] 1985         ret  
                                   1986 
                                   1987 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1988 ;       *       ( n n -- n )
                                   1989 ;       Signed multiply. Return 
                                   1990 ;       single product.
                                   1991 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000ADD                       1992         _HEADER STAR,1,"*"
      000ADD 0A 93                    1         .word LINK 
                           000ADF     2         LINK=.
      000ADF 01                       3         .byte 1  
      000AE0 2A                       4         .ascii "*"
      000AE1                          5         STAR:
      000AE1 CD 0A 97         [ 4] 1993 	CALL	UMSTA
      000AE4 CC 06 17         [ 2] 1994 	JP	DROP
                                   1995 
                                   1996 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1997 ;       M*      ( n n -- d )
                                   1998 ;       Signed multiply. Return 
                                   1999 ;       double product.
                                   2000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AE7                       2001         _HEADER MSTAR,2,"M*"
      000AE7 0A DF                    1         .word LINK 
                           000AE9     2         LINK=.
      000AE9 02                       3         .byte 2  
      000AEA 4D 2A                    4         .ascii "M*"
      000AEC                          5         MSTAR:
      000AEC CD 08 31         [ 4] 2002         CALL	DDUP
      000AEF CD 06 A7         [ 4] 2003         CALL	XORR
      000AF2 CD 06 58         [ 4] 2004         CALL	ZLESS
      000AF5 CD 05 EA         [ 4] 2005         CALL	TOR
      000AF8 CD 08 D7         [ 4] 2006         CALL	ABSS
      000AFB CD 06 31         [ 4] 2007         CALL	SWAPP
      000AFE CD 08 D7         [ 4] 2008         CALL	ABSS
      000B01 CD 0A 97         [ 4] 2009         CALL	UMSTA
      000B04 CD 05 34         [ 4] 2010         CALL	RFROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000B07 CD 04 98         [ 4] 2011         CALL	QBRAN
      000B0A 0B 0F                 2012         .word	MSTA1
      000B0C CD 08 83         [ 4] 2013         CALL	DNEGA
      000B0F 81               [ 4] 2014 MSTA1:	RET
                                   2015 
                                   2016 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2017 ;       */MOD   ( n1 n2 n3 -- r q )
                                   2018 ;       Multiply n1 and n2, then divide
                                   2019 ;       by n3. Return mod and quotient.
                                   2020 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B10                       2021         _HEADER SSMOD,5,"*/MOD"
      000B10 0A E9                    1         .word LINK 
                           000B12     2         LINK=.
      000B12 05                       3         .byte 5  
      000B13 2A 2F 4D 4F 44           4         .ascii "*/MOD"
      000B18                          5         SSMOD:
      000B18 CD 05 EA         [ 4] 2022         CALL     TOR
      000B1B CD 0A EC         [ 4] 2023         CALL     MSTAR
      000B1E CD 05 34         [ 4] 2024         CALL     RFROM
      000B21 CC 0A 1C         [ 2] 2025         JP     MSMOD
                                   2026 
                                   2027 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2028 ;       */      ( n1 n2 n3 -- q )
                                   2029 ;       Multiply n1 by n2, then divide
                                   2030 ;       by n3. Return quotient only.
                                   2031 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B24                       2032         _HEADER STASL,2,"*/"
      000B24 0B 12                    1         .word LINK 
                           000B26     2         LINK=.
      000B26 02                       3         .byte 2  
      000B27 2A 2F                    4         .ascii "*/"
      000B29                          5         STASL:
      000B29 CD 0B 18         [ 4] 2033         CALL	SSMOD
      000B2C CD 06 31         [ 4] 2034         CALL	SWAPP
      000B2F CC 06 17         [ 2] 2035         JP	DROP
                                   2036 
                                   2037 ;; Miscellaneous
                                   2038 
                                   2039 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2040 ;       CELL+   ( a -- a )
                                   2041 ;       Add cell size in byte to address.
                                   2042 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B32                       2043         _HEADER CELLP,2,"2+"
      000B32 0B 26                    1         .word LINK 
                           000B34     2         LINK=.
      000B34 02                       3         .byte 2  
      000B35 32 2B                    4         .ascii "2+"
      000B37                          5         CELLP:
      000B37 90 93            [ 1] 2044         LDW Y,X
      000B39 90 FE            [ 2] 2045 	LDW Y,(Y)
      000B3B 72 A9 00 02      [ 2] 2046         ADDW Y,#CELLL 
      000B3F FF               [ 2] 2047         LDW (X),Y
      000B40 81               [ 4] 2048         RET
                                   2049 
                                   2050 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



                                   2051 ;       CELL-   ( a -- a )
                                   2052 ;       Subtract 2 from address.
                                   2053 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B41                       2054         _HEADER CELLM,2,"2-"
      000B41 0B 34                    1         .word LINK 
                           000B43     2         LINK=.
      000B43 02                       3         .byte 2  
      000B44 32 2D                    4         .ascii "2-"
      000B46                          5         CELLM:
      000B46 90 93            [ 1] 2055         LDW Y,X
      000B48 90 FE            [ 2] 2056 	LDW Y,(Y)
      000B4A 72 A2 00 02      [ 2] 2057         SUBW Y,#CELLL
      000B4E FF               [ 2] 2058         LDW (X),Y
      000B4F 81               [ 4] 2059         RET
                                   2060 
                                   2061 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2062 ;       CELLS   ( n -- n )
                                   2063 ;       Multiply tos by 2.
                                   2064 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B50                       2065         _HEADER CELLS,2,"2*"
      000B50 0B 43                    1         .word LINK 
                           000B52     2         LINK=.
      000B52 02                       3         .byte 2  
      000B53 32 2A                    4         .ascii "2*"
      000B55                          5         CELLS:
      000B55 90 93            [ 1] 2066         LDW Y,X
      000B57 90 FE            [ 2] 2067 	LDW Y,(Y)
      000B59 90 58            [ 2] 2068         SLAW Y
      000B5B FF               [ 2] 2069         LDW (X),Y
      000B5C 81               [ 4] 2070         RET
                                   2071 
                                   2072 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2073 ;       1+      ( a -- a )
                                   2074 ;       Add cell size in byte 
                                   2075 ;       to address.
                                   2076 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B5D                       2077         _HEADER ONEP,2,"1+"
      000B5D 0B 52                    1         .word LINK 
                           000B5F     2         LINK=.
      000B5F 02                       3         .byte 2  
      000B60 31 2B                    4         .ascii "1+"
      000B62                          5         ONEP:
      000B62 90 93            [ 1] 2078         LDW Y,X
      000B64 90 FE            [ 2] 2079 	LDW Y,(Y)
      000B66 90 5C            [ 1] 2080         INCW Y
      000B68 FF               [ 2] 2081         LDW (X),Y
      000B69 81               [ 4] 2082         RET
                                   2083 
                                   2084 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2085 ;       1-      ( a -- a )
                                   2086 ;       Subtract 2 from address.
                                   2087 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B6A                       2088         _HEADER ONEM,2,"1-"
      000B6A 0B 5F                    1         .word LINK 
                           000B6C     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000B6C 02                       3         .byte 2  
      000B6D 31 2D                    4         .ascii "1-"
      000B6F                          5         ONEM:
      000B6F 90 93            [ 1] 2089         LDW Y,X
      000B71 90 FE            [ 2] 2090 	LDW Y,(Y)
      000B73 90 5A            [ 2] 2091         DECW Y
      000B75 FF               [ 2] 2092         LDW (X),Y
      000B76 81               [ 4] 2093         RET
                                   2094 
                                   2095 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2096 ;  shift left n times 
                                   2097 ; LSHIFT ( n1 n2 -- n1<<n2 )
                                   2098 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B77                       2099         _HEADER LSHIFT,6,"LSHIFT"
      000B77 0B 6C                    1         .word LINK 
                           000B79     2         LINK=.
      000B79 06                       3         .byte 6  
      000B7A 4C 53 48 49 46 54        4         .ascii "LSHIFT"
      000B80                          5         LSHIFT:
      000B80 E6 01            [ 1] 2100         ld a,(1,x)
      000B82 1C 00 02         [ 2] 2101         addw x,#CELLL 
      000B85 90 93            [ 1] 2102         ldw y,x 
      000B87 90 FE            [ 2] 2103         ldw y,(y)
      000B89                       2104 LSHIFT1:
      000B89 4D               [ 1] 2105         tnz a 
      000B8A 27 05            [ 1] 2106         jreq LSHIFT4 
      000B8C 90 58            [ 2] 2107         sllw y 
      000B8E 4A               [ 1] 2108         dec a 
      000B8F 20 F8            [ 2] 2109         jra LSHIFT1 
      000B91                       2110 LSHIFT4:
      000B91 FF               [ 2] 2111         ldw (x),y 
      000B92 81               [ 4] 2112         ret 
                                   2113 
                                   2114 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2115 ; shift right n times                 
                                   2116 ; RSHIFT (n1 n2 -- n1>>n2 )
                                   2117 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B93                       2118         _HEADER RSHIFT,6,"RSHIFT"
      000B93 0B 79                    1         .word LINK 
                           000B95     2         LINK=.
      000B95 06                       3         .byte 6  
      000B96 52 53 48 49 46 54        4         .ascii "RSHIFT"
      000B9C                          5         RSHIFT:
      000B9C E6 01            [ 1] 2119         ld a,(1,x)
      000B9E 1C 00 02         [ 2] 2120         addw x,#CELLL 
      000BA1 90 93            [ 1] 2121         ldw y,x 
      000BA3 90 FE            [ 2] 2122         ldw y,(y)
      000BA5                       2123 RSHIFT1:
      000BA5 4D               [ 1] 2124         tnz a 
      000BA6 27 05            [ 1] 2125         jreq RSHIFT4 
      000BA8 90 54            [ 2] 2126         srlw y 
      000BAA 4A               [ 1] 2127         dec a 
      000BAB 20 F8            [ 2] 2128         jra RSHIFT1 
      000BAD                       2129 RSHIFT4:
      000BAD FF               [ 2] 2130         ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000BAE 81               [ 4] 2131         ret 
                                   2132 
                                   2133 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2134 ;       2/      ( n -- n )
                                   2135 ;       divide  tos by 2.
                                   2136 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BAF                       2137         _HEADER TWOSL,2,"2/"
      000BAF 0B 95                    1         .word LINK 
                           000BB1     2         LINK=.
      000BB1 02                       3         .byte 2  
      000BB2 32 2F                    4         .ascii "2/"
      000BB4                          5         TWOSL:
      000BB4 90 93            [ 1] 2138         LDW Y,X
      000BB6 90 FE            [ 2] 2139 	LDW Y,(Y)
      000BB8 90 57            [ 2] 2140         SRAW Y
      000BBA FF               [ 2] 2141         LDW (X),Y
      000BBB 81               [ 4] 2142         RET
                                   2143 
                                   2144 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2145 ;       BL      ( -- 32 )
                                   2146 ;       Return 32,  blank character.
                                   2147 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BBC                       2148         _HEADER BLANK,2,"BL"
      000BBC 0B B1                    1         .word LINK 
                           000BBE     2         LINK=.
      000BBE 02                       3         .byte 2  
      000BBF 42 4C                    4         .ascii "BL"
      000BC1                          5         BLANK:
      000BC1 1D 00 02         [ 2] 2149         SUBW X,#2
      000BC4 90 AE 00 20      [ 2] 2150 	LDW Y,#32
      000BC8 FF               [ 2] 2151         LDW (X),Y
      000BC9 81               [ 4] 2152         RET
                                   2153 
                                   2154 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2155 ;         0     ( -- 0)
                                   2156 ;         Return 0.
                                   2157 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BCA                       2158         _HEADER ZERO,1,"0"
      000BCA 0B BE                    1         .word LINK 
                           000BCC     2         LINK=.
      000BCC 01                       3         .byte 1  
      000BCD 30                       4         .ascii "0"
      000BCE                          5         ZERO:
      000BCE 1D 00 02         [ 2] 2159         SUBW X,#2
      000BD1 90 5F            [ 1] 2160 	CLRW Y
      000BD3 FF               [ 2] 2161         LDW (X),Y
      000BD4 81               [ 4] 2162         RET
                                   2163 
                                   2164 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2165 ;         1     ( -- 1)
                                   2166 ;         Return 1.
                                   2167 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BD5                       2168         _HEADER ONE,1,"1"
      000BD5 0B CC                    1         .word LINK 
                           000BD7     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000BD7 01                       3         .byte 1  
      000BD8 31                       4         .ascii "1"
      000BD9                          5         ONE:
      000BD9 1D 00 02         [ 2] 2169         SUBW X,#2
      000BDC 90 AE 00 01      [ 2] 2170 	LDW Y,#1
      000BE0 FF               [ 2] 2171         LDW (X),Y
      000BE1 81               [ 4] 2172         RET
                                   2173 
                                   2174 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2175 ;         -1    ( -- -1)
                                   2176 ;   Return -1
                                   2177 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BE2                       2178         _HEADER MONE,2,"-1"
      000BE2 0B D7                    1         .word LINK 
                           000BE4     2         LINK=.
      000BE4 02                       3         .byte 2  
      000BE5 2D 31                    4         .ascii "-1"
      000BE7                          5         MONE:
      000BE7 1D 00 02         [ 2] 2179         SUBW X,#2
      000BEA 90 AE FF FF      [ 2] 2180 	LDW Y,#0xFFFF
      000BEE FF               [ 2] 2181         LDW (X),Y
      000BEF 81               [ 4] 2182         RET
                                   2183 
                                   2184 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2185 ;       >CHAR   ( c -- c )
                                   2186 ;       Filter non-printing characters.
                                   2187 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BF0                       2188         _HEADER TCHAR,5,">CHAR"
      000BF0 0B E4                    1         .word LINK 
                           000BF2     2         LINK=.
      000BF2 05                       3         .byte 5  
      000BF3 3E 43 48 41 52           4         .ascii ">CHAR"
      000BF8                          5         TCHAR:
      000BF8 E6 01            [ 1] 2189         ld a,(1,x)
      000BFA A1 20            [ 1] 2190         cp a,#32  
      000BFC 2B 05            [ 1] 2191         jrmi 1$ 
      000BFE A1 7F            [ 1] 2192         cp a,#127 
      000C00 2A 01            [ 1] 2193         jrpl 1$ 
      000C02 81               [ 4] 2194         ret 
      000C03 A6 5F            [ 1] 2195 1$:     ld a,#'_ 
      000C05 E7 01            [ 1] 2196         ld (1,x),a 
      000C07 81               [ 4] 2197         ret 
                                   2198 
                                   2199 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2200 ;       DEPTH   ( -- n )
                                   2201 ;       Return  depth of  data stack.
                                   2202 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C08                       2203         _HEADER DEPTH,5,"DEPTH"
      000C08 0B F2                    1         .word LINK 
                           000C0A     2         LINK=.
      000C0A 05                       3         .byte 5  
      000C0B 44 45 50 54 48           4         .ascii "DEPTH"
      000C10                          5         DEPTH:
      000C10 90 BE 2C         [ 2] 2204         LDW Y,SP0    ;save data stack ptr
      000C13 BF 24            [ 2] 2205 	LDW XTEMP,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000C15 72 B2 00 24      [ 2] 2206         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000C19 90 57            [ 2] 2207         SRAW Y    ;Y = #stack items
      000C1B 1D 00 02         [ 2] 2208 	SUBW X,#2
      000C1E FF               [ 2] 2209         LDW (X),Y     ; if neg, underflow
      000C1F 81               [ 4] 2210         RET
                                   2211 
                                   2212 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2213 ;       PICK    ( ... +n -- ... w )
                                   2214 ;       Copy  nth stack item to tos.
                                   2215 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C20                       2216         _HEADER PICK,4,"PICK"
      000C20 0C 0A                    1         .word LINK 
                           000C22     2         LINK=.
      000C22 04                       3         .byte 4  
      000C23 50 49 43 4B              4         .ascii "PICK"
      000C27                          5         PICK:
      000C27 90 93            [ 1] 2217         LDW Y,X   ;D = n1
      000C29 90 FE            [ 2] 2218         LDW Y,(Y)
                                   2219 ; modified for standard compliance          
                                   2220 ; 0 PICK must be equivalent to DUP 
      000C2B 90 5C            [ 1] 2221         INCW Y 
      000C2D 90 58            [ 2] 2222         SLAW Y
      000C2F BF 24            [ 2] 2223         LDW XTEMP,X
      000C31 72 B9 00 24      [ 2] 2224         ADDW Y,XTEMP
      000C35 90 FE            [ 2] 2225         LDW Y,(Y)
      000C37 FF               [ 2] 2226         LDW (X),Y
      000C38 81               [ 4] 2227         RET
                                   2228 
                                   2229 ;; Memory access
                                   2230 
                                   2231 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2232 ;       +!      ( n a -- )
                                   2233 ;       Add n to  contents at 
                                   2234 ;       address a.
                                   2235 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C39                       2236         _HEADER PSTOR,2,"+!"
      000C39 0C 22                    1         .word LINK 
                           000C3B     2         LINK=.
      000C3B 02                       3         .byte 2  
      000C3C 2B 21                    4         .ascii "+!"
      000C3E                          5         PSTOR:
      000C3E 90 93            [ 1] 2237         ldw y,x 
      000C40 90 FE            [ 2] 2238         ldw y,(y)
      000C42 90 BF 26         [ 2] 2239         ldw YTEMP,y  ; address
      000C45 90 FE            [ 2] 2240         ldw y,(y)  
      000C47 90 89            [ 2] 2241         pushw y  ; value at address 
      000C49 90 93            [ 1] 2242         ldw y,x 
      000C4B 90 EE 02         [ 2] 2243         ldw y,(2,y) ; n 
      000C4E 72 F9 01         [ 2] 2244         addw y,(1,sp) ; n+value
      000C51 91 CF 26         [ 5] 2245         ldw [YTEMP],y ;  a!
      000C54 90 85            [ 2] 2246         popw y    ;drop local var
      000C56 1C 00 04         [ 2] 2247         addw x,#4 ; DDROP 
      000C59 81               [ 4] 2248         ret 
                                   2249 
                                   2250 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                   2251 ;       2!      ( d a -- )
                                   2252 ;       Store  double integer 
                                   2253 ;       to address a.
                                   2254 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C5A                       2255         _HEADER DSTOR,2,"2!"
      000C5A 0C 3B                    1         .word LINK 
                           000C5C     2         LINK=.
      000C5C 02                       3         .byte 2  
      000C5D 32 21                    4         .ascii "2!"
      000C5F                          5         DSTOR:
      000C5F 90 93            [ 1] 2256         LDW Y,X 
      000C61 89               [ 2] 2257         PUSHW X 
      000C62 FE               [ 2] 2258         LDW X,(X) ; a 
      000C63 90 EE 02         [ 2] 2259         LDW Y,(2,Y) ; dhi 
      000C66 FF               [ 2] 2260         LDW (X),Y 
      000C67 16 01            [ 2] 2261         LDW Y,(1,SP)  
      000C69 90 EE 04         [ 2] 2262         LDW Y,(4,Y) ; dlo 
      000C6C EF 02            [ 2] 2263         LDW (2,X),Y  
      000C6E 85               [ 2] 2264         POPW X 
      000C6F 1C 00 06         [ 2] 2265         ADDW X,#3*CELLL 
      000C72 81               [ 4] 2266         RET 
                                   2267 
                                   2268 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2269 ;       2@      ( a -- d )
                                   2270 ;       Fetch double integer 
                                   2271 ;       from address a.
                                   2272 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C73                       2273         _HEADER DAT,2,"2@"
      000C73 0C 5C                    1         .word LINK 
                           000C75     2         LINK=.
      000C75 02                       3         .byte 2  
      000C76 32 40                    4         .ascii "2@"
      000C78                          5         DAT:
      000C78 90 93            [ 1] 2274         ldw y,x 
      000C7A 1D 00 02         [ 2] 2275         subw x,#CELLL 
      000C7D 90 FE            [ 2] 2276         ldw y,(y) ;address 
      000C7F 90 89            [ 2] 2277         pushw y  
      000C81 90 FE            [ 2] 2278         ldw y,(y) ; dhi 
      000C83 FF               [ 2] 2279         ldw (x),y 
      000C84 90 85            [ 2] 2280         popw y 
      000C86 90 EE 02         [ 2] 2281         ldw y,(2,y) ; dlo 
      000C89 EF 02            [ 2] 2282         ldw (2,x),y 
      000C8B 81               [ 4] 2283         ret 
                                   2284 
                                   2285 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2286 ;       COUNT   ( b -- b +n )
                                   2287 ;       Return count byte of a string
                                   2288 ;       and add 1 to byte address.
                                   2289 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C8C                       2290         _HEADER COUNT,5,"COUNT"
      000C8C 0C 75                    1         .word LINK 
                           000C8E     2         LINK=.
      000C8E 05                       3         .byte 5  
      000C8F 43 4F 55 4E 54           4         .ascii "COUNT"
      000C94                          5         COUNT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000C94 90 93            [ 1] 2291         ldw y,x 
      000C96 90 FE            [ 2] 2292         ldw y,(y) ; address 
      000C98 90 F6            [ 1] 2293         ld a,(y)  ; count 
      000C9A 90 5C            [ 1] 2294         incw y 
      000C9C FF               [ 2] 2295         ldw (x),y 
      000C9D 1D 00 02         [ 2] 2296         subw x,#CELLL 
      000CA0 E7 01            [ 1] 2297         ld (1,x),a 
      000CA2 7F               [ 1] 2298         clr (x)
      000CA3 81               [ 4] 2299         ret 
                                   2300 
                                   2301 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2302 ;       HERE    ( -- a )
                                   2303 ;       Return  top of  variables
                                   2304 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CA4                       2305         _HEADER HERE,4,"HERE"
      000CA4 0C 8E                    1         .word LINK 
                           000CA6     2         LINK=.
      000CA6 04                       3         .byte 4  
      000CA7 48 45 52 45              4         .ascii "HERE"
      000CAB                          5         HERE:
      000CAB 90 AE 00 18      [ 2] 2306       	ldw y,#UVP 
      000CAF 90 FE            [ 2] 2307         ldw y,(y)
      000CB1 1D 00 02         [ 2] 2308         subw x,#CELLL 
      000CB4 FF               [ 2] 2309         ldw (x),y 
      000CB5 81               [ 4] 2310         ret 
                                   2311 
                                   2312 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2313 ;       PAD     ( -- a )
                                   2314 ;       Return address of text buffer
                                   2315 ;       above  code dictionary.
                                   2316 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CB6                       2317         _HEADER PAD,3,"PAD"
      000CB6 0C A6                    1         .word LINK 
                           000CB8     2         LINK=.
      000CB8 03                       3         .byte 3  
      000CB9 50 41 44                 4         .ascii "PAD"
      000CBC                          5         PAD:
      000CBC CD 0C AB         [ 4] 2318         CALL     HERE
      000CBF                       2319         _DOLIT   80
      000CBF CD 04 6F         [ 4]    1     CALL DOLIT 
      000CC2 00 50                    2     .word 80 
      000CC4 CC 08 46         [ 2] 2320         JP     PLUS
                                   2321 
                                   2322 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2323 ;       TIB     ( -- a )
                                   2324 ;       Return address of 
                                   2325 ;       terminal input buffer.
                                   2326 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CC7                       2327         _HEADER TIB,3,"TIB"
      000CC7 0C B8                    1         .word LINK 
                           000CC9     2         LINK=.
      000CC9 03                       3         .byte 3  
      000CCA 54 49 42                 4         .ascii "TIB"
      000CCD                          5         TIB:
      000CCD CD 07 15         [ 4] 2328         CALL     NTIB
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000CD0 CD 0B 37         [ 4] 2329         CALL     CELLP
      000CD3 CC 04 E3         [ 2] 2330         JP     AT
                                   2331 
                                   2332 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2333 ;       @EXECUTE        ( a -- )
                                   2334 ;       Execute vector stored in 
                                   2335 ;       address a.
                                   2336 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CD6                       2337         _HEADER ATEXE,8,"@EXECUTE"
      000CD6 0C C9                    1         .word LINK 
                           000CD8     2         LINK=.
      000CD8 08                       3         .byte 8  
      000CD9 40 45 58 45 43 55 54     4         .ascii "@EXECUTE"
             45
      000CE1                          5         ATEXE:
      000CE1 CD 04 E3         [ 4] 2338         CALL     AT
      000CE4 CD 07 D4         [ 4] 2339         CALL     QDUP    ;?address or zero
      000CE7 CD 04 98         [ 4] 2340         CALL     QBRAN
      000CEA 0C EF                 2341         .word      EXE1
      000CEC CD 04 C4         [ 4] 2342         CALL     EXECU   ;execute if non-zero
      000CEF 81               [ 4] 2343 EXE1:   RET     ;do nothing if zero
                                   2344 
                                   2345 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2346 ;       CMOVE   ( b1 b2 u -- )
                                   2347 ;       Copy u bytes from b1 to b2.
                                   2348 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CF0                       2349         _HEADER CMOVE,5,"CMOVE"
      000CF0 0C D8                    1         .word LINK 
                           000CF2     2         LINK=.
      000CF2 05                       3         .byte 5  
      000CF3 43 4D 4F 56 45           4         .ascii "CMOVE"
      000CF8                          5         CMOVE:
      000CF8 CD 05 EA         [ 4] 2350         CALL	TOR
      000CFB CD 04 B4         [ 4] 2351         CALL	BRAN
      000CFE 0D 18                 2352         .word	CMOV2
      000D00 CD 05 EA         [ 4] 2353 CMOV1:	CALL	TOR
      000D03 CD 06 21         [ 4] 2354         CALL	DUPP
      000D06 CD 05 01         [ 4] 2355         CALL	CAT
      000D09 CD 05 45         [ 4] 2356         CALL	RAT
      000D0C CD 04 F0         [ 4] 2357         CALL	CSTOR
      000D0F CD 0B 62         [ 4] 2358         CALL	ONEP
      000D12 CD 05 34         [ 4] 2359         CALL	RFROM
      000D15 CD 0B 62         [ 4] 2360         CALL	ONEP
      000D18 CD 04 83         [ 4] 2361 CMOV2:	CALL	DONXT
      000D1B 0D 00                 2362         .word	CMOV1
      000D1D CC 08 26         [ 2] 2363         JP	DDROP
                                   2364 
                                   2365 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2366 ;       FILL    ( b u c -- )
                                   2367 ;       Fill u bytes of character c
                                   2368 ;       to area beginning at b.
                                   2369 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D20                       2370         _HEADER FILL,4,"FILL"
      000D20 0C F2                    1         .word LINK 
                           000D22     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      000D22 04                       3         .byte 4  
      000D23 46 49 4C 4C              4         .ascii "FILL"
      000D27                          5         FILL:
      000D27 90 93            [ 1] 2371         ldw y,x 
      000D29 90 E6 01         [ 1] 2372         ld a,(1,y) ; c 
      000D2C 1C 00 02         [ 2] 2373         addw x,#CELLL ; drop c 
      000D2F 90 93            [ 1] 2374         ldw y,x 
      000D31 90 FE            [ 2] 2375         ldw y,(y) ; count
      000D33 90 89            [ 2] 2376         pushw y 
      000D35 1C 00 02         [ 2] 2377         addw x,#CELLL ; drop u 
      000D38 90 93            [ 1] 2378         ldw y,x 
      000D3A 1C 00 02         [ 2] 2379         addw x,#CELLL ; drop b 
      000D3D 90 FE            [ 2] 2380         ldw y,(y) ; address
      000D3F 90 BF 26         [ 2] 2381         ldw YTEMP,y
      000D42 90 85            [ 2] 2382         popw y ; count 
      000D44                       2383 FILL1:  
      000D44 92 C7 26         [ 4] 2384         ld [YTEMP],a 
      000D47 3C 27            [ 1] 2385         inc YTEMP+1
      000D49 24 02            [ 1] 2386         jrnc FILL2 
      000D4B 3C 26            [ 1] 2387         inc YTEMP
      000D4D                       2388 FILL2: 
      000D4D 90 5A            [ 2] 2389         decw y ; count 
      000D4F 26 F3            [ 1] 2390         jrne FILL1  
      000D51 81               [ 4] 2391         ret 
                                   2392 
                                   2393 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2394 ;       ERASE   ( b u -- )
                                   2395 ;       Erase u bytes beginning at b.
                                   2396 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D52                       2397         _HEADER ERASE,5,"ERASE"
      000D52 0D 22                    1         .word LINK 
                           000D54     2         LINK=.
      000D54 05                       3         .byte 5  
      000D55 45 52 41 53 45           4         .ascii "ERASE"
      000D5A                          5         ERASE:
      000D5A 90 5F            [ 1] 2398         clrw y 
      000D5C 1D 00 02         [ 2] 2399         subw x,#CELLL 
      000D5F FF               [ 2] 2400         ldw (x),y 
      000D60 CC 0D 27         [ 2] 2401         jp FILL 
                                   2402 
                                   2403 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2404 ;       PACK0   ( b u a -- a )
                                   2405 ;       Build a counted string with
                                   2406 ;       u characters from b. Null fill.
                                   2407 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D63                       2408         _HEADER PACKS,5,"PACK0"
      000D63 0D 54                    1         .word LINK 
                           000D65     2         LINK=.
      000D65 05                       3         .byte 5  
      000D66 50 41 43 4B 30           4         .ascii "PACK0"
      000D6B                          5         PACKS:
      000D6B CD 06 21         [ 4] 2409         CALL     DUPP
      000D6E CD 05 EA         [ 4] 2410         CALL     TOR     ;strings only on cell boundary
      000D71 CD 08 31         [ 4] 2411         CALL     DDUP
      000D74 CD 04 F0         [ 4] 2412         CALL     CSTOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      000D77 CD 0B 62         [ 4] 2413         CALL     ONEP ;save count
      000D7A CD 06 31         [ 4] 2414         CALL     SWAPP
      000D7D CD 0C F8         [ 4] 2415         CALL     CMOVE
      000D80 CD 05 34         [ 4] 2416         CALL     RFROM
      000D83 81               [ 4] 2417         RET
                                   2418 
                                   2419 ;; Numeric output, single precision
                                   2420 
                                   2421 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2422 ;       DIGIT   ( u -- c )
                                   2423 ;       Convert digit u to a character.
                                   2424 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D84                       2425         _HEADER DIGIT,5,"DIGIT"
      000D84 0D 65                    1         .word LINK 
                           000D86     2         LINK=.
      000D86 05                       3         .byte 5  
      000D87 44 49 47 49 54           4         .ascii "DIGIT"
      000D8C                          5         DIGIT:
      000D8C CD 04 6F         [ 4] 2426         CALL	DOLIT
      000D8F 00 09                 2427         .word	9
      000D91 CD 06 49         [ 4] 2428         CALL	OVER
      000D94 CD 09 22         [ 4] 2429         CALL	LESS
      000D97 CD 04 6F         [ 4] 2430         CALL	DOLIT
      000D9A 00 07                 2431         .word	7
      000D9C CD 06 7E         [ 4] 2432         CALL	ANDD
      000D9F CD 08 46         [ 4] 2433         CALL	PLUS
      000DA2 CD 04 6F         [ 4] 2434         CALL	DOLIT
      000DA5 00 30                 2435         .word	48	;'0'
      000DA7 CC 08 46         [ 2] 2436         JP	PLUS
                                   2437 
                                   2438 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2439 ;       EXTRACT ( n base -- n c )
                                   2440 ;       Extract least significant 
                                   2441 ;       digit from n.
                                   2442 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DAA                       2443         _HEADER EXTRC,7,"EXTRACT"
      000DAA 0D 86                    1         .word LINK 
                           000DAC     2         LINK=.
      000DAC 07                       3         .byte 7  
      000DAD 45 58 54 52 41 43 54     4         .ascii "EXTRACT"
      000DB4                          5         EXTRC:
      000DB4 CD 0B CE         [ 4] 2444         CALL     ZERO
      000DB7 CD 06 31         [ 4] 2445         CALL     SWAPP
      000DBA CD 09 D8         [ 4] 2446         CALL     UMMOD
      000DBD CD 06 31         [ 4] 2447         CALL     SWAPP
      000DC0 CC 0D 8C         [ 2] 2448         JP     DIGIT
                                   2449 
                                   2450 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2451 ;       <#      ( -- )
                                   2452 ;       Initiate  numeric 
                                   2453 ;       output process.
                                   2454 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DC3                       2455         _HEADER BDIGS,2,"#<"
      000DC3 0D AC                    1         .word LINK 
                           000DC5     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      000DC5 02                       3         .byte 2  
      000DC6 23 3C                    4         .ascii "#<"
      000DC8                          5         BDIGS:
      000DC8 CD 0C BC         [ 4] 2456         CALL     PAD
      000DCB CD 07 57         [ 4] 2457         CALL     HLD
      000DCE CC 04 D1         [ 2] 2458         JP     STORE
                                   2459 
                                   2460 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2461 ;       HOLD    ( c -- )
                                   2462 ;       Insert a character 
                                   2463 ;       into output string.
                                   2464 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DD1                       2465         _HEADER HOLD,4,"HOLD"
      000DD1 0D C5                    1         .word LINK 
                           000DD3     2         LINK=.
      000DD3 04                       3         .byte 4  
      000DD4 48 4F 4C 44              4         .ascii "HOLD"
      000DD8                          5         HOLD:
      000DD8 CD 07 57         [ 4] 2466         CALL     HLD
      000DDB CD 04 E3         [ 4] 2467         CALL     AT
      000DDE CD 0B 6F         [ 4] 2468         CALL     ONEM
      000DE1 CD 06 21         [ 4] 2469         CALL     DUPP
      000DE4 CD 07 57         [ 4] 2470         CALL     HLD
      000DE7 CD 04 D1         [ 4] 2471         CALL     STORE
      000DEA CC 04 F0         [ 2] 2472         JP     CSTOR
                                   2473 
                                   2474 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2475 ;       #       ( u -- u )
                                   2476 ;       Extract one digit from u and
                                   2477 ;       append digit to output string.
                                   2478 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DED                       2479         _HEADER DIG,1,"#"
      000DED 0D D3                    1         .word LINK 
                           000DEF     2         LINK=.
      000DEF 01                       3         .byte 1  
      000DF0 23                       4         .ascii "#"
      000DF1                          5         DIG:
      000DF1 CD 06 E7         [ 4] 2480         CALL     BASE
      000DF4 CD 04 E3         [ 4] 2481         CALL     AT
      000DF7 CD 0D B4         [ 4] 2482         CALL     EXTRC
      000DFA CC 0D D8         [ 2] 2483         JP     HOLD
                                   2484 
                                   2485 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2486 ;       #S      ( u -- 0 )
                                   2487 ;       Convert u until all digits
                                   2488 ;       are added to output string.
                                   2489 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DFD                       2490         _HEADER DIGS,2,"#S"
      000DFD 0D EF                    1         .word LINK 
                           000DFF     2         LINK=.
      000DFF 02                       3         .byte 2  
      000E00 23 53                    4         .ascii "#S"
      000E02                          5         DIGS:
      000E02 CD 0D F1         [ 4] 2491 DIGS1:  CALL     DIG
      000E05 CD 06 21         [ 4] 2492         CALL     DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      000E08 CD 04 98         [ 4] 2493         CALL     QBRAN
      000E0B 0E 0F                 2494         .word      DIGS2
      000E0D 20 F3            [ 2] 2495         JRA     DIGS1
      000E0F 81               [ 4] 2496 DIGS2:  RET
                                   2497 
                                   2498 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2499 ;       SIGN    ( n -- )
                                   2500 ;       Add a minus sign to
                                   2501 ;       numeric output string.
                                   2502 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E10                       2503         _HEADER SIGN,4,"SIGN"
      000E10 0D FF                    1         .word LINK 
                           000E12     2         LINK=.
      000E12 04                       3         .byte 4  
      000E13 53 49 47 4E              4         .ascii "SIGN"
      000E17                          5         SIGN:
      000E17 CD 06 58         [ 4] 2504         CALL     ZLESS
      000E1A CD 04 98         [ 4] 2505         CALL     QBRAN
      000E1D 0E 27                 2506         .word      SIGN1
      000E1F CD 04 6F         [ 4] 2507         CALL     DOLIT
      000E22 00 2D                 2508         .word      45	;"-"
      000E24 CC 0D D8         [ 2] 2509         JP     HOLD
      000E27 81               [ 4] 2510 SIGN1:  RET
                                   2511 
                                   2512 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2513 ;       #>      ( w -- b u )
                                   2514 ;       Prepare output string.
                                   2515 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E28                       2516         _HEADER EDIGS,2,"#>"
      000E28 0E 12                    1         .word LINK 
                           000E2A     2         LINK=.
      000E2A 02                       3         .byte 2  
      000E2B 23 3E                    4         .ascii "#>"
      000E2D                          5         EDIGS:
      000E2D CD 06 17         [ 4] 2517         CALL     DROP
      000E30 CD 07 57         [ 4] 2518         CALL     HLD
      000E33 CD 04 E3         [ 4] 2519         CALL     AT
      000E36 CD 0C BC         [ 4] 2520         CALL     PAD
      000E39 CD 06 49         [ 4] 2521         CALL     OVER
      000E3C CC 08 BD         [ 2] 2522         JP     SUBB
                                   2523 
                                   2524 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2525 ;       str     ( w -- b u )
                                   2526 ;       Convert a signed integer
                                   2527 ;       to a numeric string.
                                   2528 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E3F                       2529         _HEADER STR,3,"STR"
      000E3F 0E 2A                    1         .word LINK 
                           000E41     2         LINK=.
      000E41 03                       3         .byte 3  
      000E42 53 54 52                 4         .ascii "STR"
      000E45                          5         STR:
      000E45 CD 06 21         [ 4] 2530         CALL     DUPP
      000E48 CD 05 EA         [ 4] 2531         CALL     TOR
      000E4B CD 08 D7         [ 4] 2532         CALL     ABSS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      000E4E CD 0D C8         [ 4] 2533         CALL     BDIGS
      000E51 CD 0E 02         [ 4] 2534         CALL     DIGS
      000E54 CD 05 34         [ 4] 2535         CALL     RFROM
      000E57 CD 0E 17         [ 4] 2536         CALL     SIGN
      000E5A CC 0E 2D         [ 2] 2537         JP     EDIGS
                                   2538 
                                   2539 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2540 ;       HEX     ( -- )
                                   2541 ;       Use radix 16 as base for
                                   2542 ;       numeric conversions.
                                   2543 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E5D                       2544         _HEADER HEX,3,"HEX"
      000E5D 0E 41                    1         .word LINK 
                           000E5F     2         LINK=.
      000E5F 03                       3         .byte 3  
      000E60 48 45 58                 4         .ascii "HEX"
      000E63                          5         HEX:
      000E63 CD 04 6F         [ 4] 2545         CALL     DOLIT
      000E66 00 10                 2546         .word      16
      000E68 CD 06 E7         [ 4] 2547         CALL     BASE
      000E6B CC 04 D1         [ 2] 2548         JP     STORE
                                   2549 
                                   2550 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2551 ;       DECIMAL ( -- )
                                   2552 ;       Use radix 10 as base
                                   2553 ;       for numeric conversions.
                                   2554 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E6E                       2555         _HEADER DECIM,7,"DECIMAL"
      000E6E 0E 5F                    1         .word LINK 
                           000E70     2         LINK=.
      000E70 07                       3         .byte 7  
      000E71 44 45 43 49 4D 41 4C     4         .ascii "DECIMAL"
      000E78                          5         DECIM:
      000E78 CD 04 6F         [ 4] 2556         CALL     DOLIT
      000E7B 00 0A                 2557         .word      10
      000E7D CD 06 E7         [ 4] 2558         CALL     BASE
      000E80 CC 04 D1         [ 2] 2559         JP     STORE
                                   2560 
                                   2561 ;; Numeric input, single precision
                                   2562 
                                   2563 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2564 ;       DIGIT?  ( c base -- u t )
                                   2565 ;       Convert a character to its numeric
                                   2566 ;       value. A flag indicates success.
                                   2567 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E83                       2568         _HEADER DIGTQ,6,"DIGIT?"
      000E83 0E 70                    1         .word LINK 
                           000E85     2         LINK=.
      000E85 06                       3         .byte 6  
      000E86 44 49 47 49 54 3F        4         .ascii "DIGIT?"
      000E8C                          5         DIGTQ:
      000E8C CD 05 EA         [ 4] 2569         CALL     TOR
      000E8F CD 04 6F         [ 4] 2570         CALL     DOLIT
      000E92 00 30                 2571         .word     48	; "0"
      000E94 CD 08 BD         [ 4] 2572         CALL     SUBB
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      000E97 CD 04 6F         [ 4] 2573         CALL     DOLIT
      000E9A 00 09                 2574         .word      9
      000E9C CD 06 49         [ 4] 2575         CALL     OVER
      000E9F CD 09 22         [ 4] 2576         CALL     LESS
      000EA2 CD 04 98         [ 4] 2577         CALL     QBRAN
      000EA5 0E BD                 2578         .word      DGTQ1
      000EA7 CD 04 6F         [ 4] 2579         CALL     DOLIT
      000EAA 00 07                 2580         .word      7
      000EAC CD 08 BD         [ 4] 2581         CALL     SUBB
      000EAF CD 06 21         [ 4] 2582         CALL     DUPP
      000EB2 CD 04 6F         [ 4] 2583         CALL     DOLIT
      000EB5 00 0A                 2584         .word      10
      000EB7 CD 09 22         [ 4] 2585         CALL     LESS
      000EBA CD 06 92         [ 4] 2586         CALL     ORR
      000EBD CD 06 21         [ 4] 2587 DGTQ1:  CALL     DUPP
      000EC0 CD 05 34         [ 4] 2588         CALL     RFROM
      000EC3 CC 09 04         [ 2] 2589         JP     ULESS
                                   2590 
                           000001  2591 .if  WANT_DOUBLE
                           000000  2592 .else 
                                   2593 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2594 ;       NUMBER? ( a -- n T | a F )
                                   2595 ;       Convert a number string to
                                   2596 ;       integer. Push a flag on tos.
                                   2597 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2598         _HEADER NUMBQ,7,"NUMBER?"
                                   2599         CALL     BASE
                                   2600         CALL     AT
                                   2601         CALL     TOR
                                   2602         CALL     ZERO
                                   2603         CALL     OVER
                                   2604         CALL     COUNT
                                   2605         CALL     OVER
                                   2606         CALL     CAT
                                   2607         CALL     DOLIT
                                   2608         .word     36	; "0x"
                                   2609         CALL     EQUAL
                                   2610         CALL     QBRAN
                                   2611         .word      NUMQ1
                                   2612         CALL     HEX
                                   2613         CALL     SWAPP
                                   2614         CALL     ONEP
                                   2615         CALL     SWAPP
                                   2616         CALL     ONEM
                                   2617 NUMQ1:  CALL     OVER
                                   2618         CALL     CAT
                                   2619         CALL     DOLIT
                                   2620         .word     45	; "-"
                                   2621         CALL     EQUAL
                                   2622         CALL     TOR
                                   2623         CALL     SWAPP
                                   2624         CALL     RAT
                                   2625         CALL     SUBB
                                   2626         CALL     SWAPP
                                   2627         CALL     RAT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



                                   2628         CALL     PLUS
                                   2629         CALL     QDUP
                                   2630         CALL     QBRAN
                                   2631         .word      NUMQ6
                                   2632         CALL     ONEM
                                   2633         CALL     TOR
                                   2634 NUMQ2:  CALL     DUPP
                                   2635         CALL     TOR
                                   2636         CALL     CAT
                                   2637         CALL     BASE
                                   2638         CALL     AT
                                   2639         CALL     DIGTQ
                                   2640         CALL     QBRAN
                                   2641         .word      NUMQ4
                                   2642         CALL     SWAPP
                                   2643         CALL     BASE
                                   2644         CALL     AT
                                   2645         CALL     STAR
                                   2646         CALL     PLUS
                                   2647         CALL     RFROM
                                   2648         CALL     ONEP
                                   2649         CALL     DONXT
                                   2650         .word      NUMQ2
                                   2651         CALL     RAT
                                   2652         CALL     SWAPP
                                   2653         CALL     DROP
                                   2654         CALL     QBRAN
                                   2655         .word      NUMQ3
                                   2656         CALL     NEGAT
                                   2657 NUMQ3:  CALL     SWAPP
                                   2658         JRA     NUMQ5
                                   2659 NUMQ4:  CALL     RFROM
                                   2660         CALL     RFROM
                                   2661         CALL     DDROP
                                   2662         CALL     DDROP
                                   2663         CALL     ZERO
                                   2664 NUMQ5:  CALL     DUPP
                                   2665 NUMQ6:  CALL     RFROM
                                   2666         CALL     DDROP
                                   2667         CALL     RFROM
                                   2668         CALL     BASE
                                   2669         JP     STORE
                                   2670 .endif ; WANT_DOUBLE  
                                   2671 
                                   2672 ;; Basic I/O
                                   2673 
                                   2674 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2675 ;       KEY     ( -- c )
                                   2676 ;       Wait for and return an
                                   2677 ;       input character.
                                   2678 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000EC6                       2679         _HEADER KEY,3,"KEY"
      000EC6 0E 85                    1         .word LINK 
                           000EC8     2         LINK=.
      000EC8 03                       3         .byte 3  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      000EC9 4B 45 59                 4         .ascii "KEY"
      000ECC                          5         KEY:
      000ECC 72 0B 52 30 FB   [ 2] 2680         btjf UART_SR,#UART_SR_RXNE,. 
      000ED1 C6 52 31         [ 1] 2681         ld a,UART_DR 
      000ED4 1D 00 02         [ 2] 2682         subw x,#CELLL 
      000ED7 E7 01            [ 1] 2683         ld (1,x),a 
      000ED9 7F               [ 1] 2684         clr (x)
      000EDA 81               [ 4] 2685         ret 
                                   2686 
                                   2687 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2688 ;       NUF?    ( -- t )
                                   2689 ;       Return false if no input,
                                   2690 ;       else pause and if CR return true.
                                   2691 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000EDB                       2692         _HEADER NUFQ,4,"NUF?"
      000EDB 0E C8                    1         .word LINK 
                           000EDD     2         LINK=.
      000EDD 04                       3         .byte 4  
      000EDE 4E 55 46 3F              4         .ascii "NUF?"
      000EE2                          5         NUFQ:
      000EE2 CD 04 18         [ 4] 2693         CALL     QKEY
      000EE5 CD 06 21         [ 4] 2694         CALL     DUPP
      000EE8 CD 04 98         [ 4] 2695         CALL     QBRAN
      000EEB 0E FB                 2696         .word    NUFQ1
      000EED CD 08 26         [ 4] 2697         CALL     DDROP
      000EF0 CD 0E CC         [ 4] 2698         CALL     KEY
      000EF3 CD 04 6F         [ 4] 2699         CALL     DOLIT
      000EF6 00 0D                 2700         .word      CRR
      000EF8 CC 08 E5         [ 2] 2701         JP     EQUAL
      000EFB 81               [ 4] 2702 NUFQ1:  RET
                                   2703 
                                   2704 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2705 ;       SPACE   ( -- )
                                   2706 ;       Send  blank character to
                                   2707 ;       output device.
                                   2708 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000EFC                       2709         _HEADER SPACE,5,"SPACE"
      000EFC 0E DD                    1         .word LINK 
                           000EFE     2         LINK=.
      000EFE 05                       3         .byte 5  
      000EFF 53 50 41 43 45           4         .ascii "SPACE"
      000F04                          5         SPACE:
      000F04 CD 0B C1         [ 4] 2710         CALL     BLANK
      000F07 CC 04 36         [ 2] 2711         JP     EMIT
                                   2712 
                                   2713 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2714 ;       SPACES  ( +n -- )
                                   2715 ;       Send n spaces to output device.
                                   2716 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F0A                       2717         _HEADER SPACS,6,"SPACES"
      000F0A 0E FE                    1         .word LINK 
                           000F0C     2         LINK=.
      000F0C 06                       3         .byte 6  
      000F0D 53 50 41 43 45 53        4         .ascii "SPACES"
      000F13                          5         SPACS:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      000F13 CD 0B CE         [ 4] 2718         CALL     ZERO
      000F16 CD 09 80         [ 4] 2719         CALL     MAX
      000F19 CD 05 EA         [ 4] 2720         CALL     TOR
      000F1C 20 03            [ 2] 2721         JRA      CHAR2
      000F1E CD 0F 04         [ 4] 2722 CHAR1:  CALL     SPACE
      000F21 CD 04 83         [ 4] 2723 CHAR2:  CALL     DONXT
      000F24 0F 1E                 2724         .word    CHAR1
      000F26 81               [ 4] 2725         RET
                                   2726 
                                   2727 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2728 ;       TYPE    ( b u -- )
                                   2729 ;       Output u characters from b.
                                   2730 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F27                       2731         _HEADER TYPES,4,"TYPE"
      000F27 0F 0C                    1         .word LINK 
                           000F29     2         LINK=.
      000F29 04                       3         .byte 4  
      000F2A 54 59 50 45              4         .ascii "TYPE"
      000F2E                          5         TYPES:
      000F2E CD 05 EA         [ 4] 2732         CALL     TOR
      000F31 20 06            [ 2] 2733         JRA     TYPE2
      000F33 CD 0C 94         [ 4] 2734 TYPE1:  CALL     COUNT 
      000F36 CD 04 36         [ 4] 2735         CALL     EMIT
      000F39                       2736 TYPE2:  _DONXT  TYPE1
      000F39 CD 04 83         [ 4]    1     CALL DONXT 
      000F3C 0F 33                    2     .word TYPE1 
      000F3E CC 06 17         [ 2] 2737         JP     DROP
                                   2738 
                                   2739 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2740 ;       CR      ( -- )
                                   2741 ;       Output a carriage return
                                   2742 ;       and a line feed.
                                   2743 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F41                       2744         _HEADER CR,2,"CR"
      000F41 0F 29                    1         .word LINK 
                           000F43     2         LINK=.
      000F43 02                       3         .byte 2  
      000F44 43 52                    4         .ascii "CR"
      000F46                          5         CR:
      000F46                       2745         _DOLIT  CRR 
      000F46 CD 04 6F         [ 4]    1     CALL DOLIT 
      000F49 00 0D                    2     .word CRR 
      000F4B CD 04 36         [ 4] 2746         CALL    EMIT
      000F4E                       2747         _DOLIT  LF
      000F4E CD 04 6F         [ 4]    1     CALL DOLIT 
      000F51 00 0A                    2     .word LF 
      000F53 CC 04 36         [ 2] 2748         JP      EMIT
                                   2749 
                                   2750 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2751 ;       do$     ( -- a )
                                   2752 ;       Return  address of a compiled
                                   2753 ;       string.
                                   2754 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2755 ;       _HEADER DOSTR,COMPO+3,"DO$"
      000F56                       2756 DOSTR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      000F56 CD 05 34         [ 4] 2757         CALL     RFROM
      000F59 CD 05 45         [ 4] 2758         CALL     RAT
      000F5C CD 05 34         [ 4] 2759         CALL     RFROM
      000F5F CD 0C 94         [ 4] 2760         CALL     COUNT
      000F62 CD 08 46         [ 4] 2761         CALL     PLUS
      000F65 CD 05 EA         [ 4] 2762         CALL     TOR
      000F68 CD 06 31         [ 4] 2763         CALL     SWAPP
      000F6B CD 05 EA         [ 4] 2764         CALL     TOR
      000F6E 81               [ 4] 2765         RET
                                   2766 
                                   2767 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2768 ;       $"|     ( -- a )
                                   2769 ;       Run time routine compiled by $".
                                   2770 ;       Return address of a compiled string.
                                   2771 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2772 ;       _HEADER STRQP,COMPO+3,"$\"|"
      000F6F                       2773 STRQP:
      000F6F CD 0F 56         [ 4] 2774         CALL     DOSTR
      000F72 81               [ 4] 2775         RET
                                   2776 
                                   2777 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2778 ;       ."|     ( -- )
                                   2779 ;       Run time routine of ." .
                                   2780 ;       Output a compiled string.
                                   2781 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2782 ;       _HEADER DOTQP,COMPO+3,".\"|"
      000F73                       2783 DOTQP:
      000F73 CD 0F 56         [ 4] 2784         CALL     DOSTR
      000F76 CD 0C 94         [ 4] 2785         CALL     COUNT
      000F79 CC 0F 2E         [ 2] 2786         JP     TYPES
                                   2787 
                                   2788 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2789 ;       .R      ( n +n -- )
                                   2790 ;       Display an integer in a field
                                   2791 ;       of n columns, right justified.
                                   2792 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F7C                       2793         _HEADER DOTR,2,".R"
      000F7C 0F 43                    1         .word LINK 
                           000F7E     2         LINK=.
      000F7E 02                       3         .byte 2  
      000F7F 2E 52                    4         .ascii ".R"
      000F81                          5         DOTR:
      000F81 CD 05 EA         [ 4] 2794         CALL     TOR
      000F84 CD 0E 45         [ 4] 2795         CALL     STR
      000F87 CD 05 34         [ 4] 2796         CALL     RFROM
      000F8A CD 06 49         [ 4] 2797         CALL     OVER
      000F8D CD 08 BD         [ 4] 2798         CALL     SUBB
      000F90 CD 0F 13         [ 4] 2799         CALL     SPACS
      000F93 CC 0F 2E         [ 2] 2800         JP     TYPES
                                   2801 
                                   2802 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2803 ;       U.R     ( u +n -- )
                                   2804 ;       Display an unsigned integer
                                   2805 ;       in n column, right justified.
                                   2806 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      000F96                       2807         _HEADER UDOTR,3,"U.R"
      000F96 0F 7E                    1         .word LINK 
                           000F98     2         LINK=.
      000F98 03                       3         .byte 3  
      000F99 55 2E 52                 4         .ascii "U.R"
      000F9C                          5         UDOTR:
      000F9C CD 05 EA         [ 4] 2808         CALL     TOR
      000F9F CD 0D C8         [ 4] 2809         CALL     BDIGS
      000FA2 CD 0E 02         [ 4] 2810         CALL     DIGS
      000FA5 CD 0E 2D         [ 4] 2811         CALL     EDIGS
      000FA8 CD 05 34         [ 4] 2812         CALL     RFROM
      000FAB CD 06 49         [ 4] 2813         CALL     OVER
      000FAE CD 08 BD         [ 4] 2814         CALL     SUBB
      000FB1 CD 0F 13         [ 4] 2815         CALL     SPACS
      000FB4 CC 0F 2E         [ 2] 2816         JP     TYPES
                                   2817 
                                   2818 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2819 ;       U.      ( u -- )
                                   2820 ;       Display an unsigned integer
                                   2821 ;       in free format.
                                   2822 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000FB7                       2823         _HEADER UDOT,2,"U."
      000FB7 0F 98                    1         .word LINK 
                           000FB9     2         LINK=.
      000FB9 02                       3         .byte 2  
      000FBA 55 2E                    4         .ascii "U."
      000FBC                          5         UDOT:
      000FBC CD 0D C8         [ 4] 2824         CALL     BDIGS
      000FBF CD 0E 02         [ 4] 2825         CALL     DIGS
      000FC2 CD 0E 2D         [ 4] 2826         CALL     EDIGS
      000FC5 CD 0F 04         [ 4] 2827         CALL     SPACE
      000FC8 CC 0F 2E         [ 2] 2828         JP     TYPES
                                   2829 
                                   2830 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2831 ;   H. ( n -- )
                                   2832 ;   display n in hexadecimal 
                                   2833 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000FCB                       2834         _HEADER HDOT,2,"H."
      000FCB 0F B9                    1         .word LINK 
                           000FCD     2         LINK=.
      000FCD 02                       3         .byte 2  
      000FCE 48 2E                    4         .ascii "H."
      000FD0                          5         HDOT:
      000FD0 CD 06 E7         [ 4] 2835         CALL BASE 
      000FD3 CD 04 E3         [ 4] 2836         CALL AT 
      000FD6 CD 05 EA         [ 4] 2837         CALL TOR 
      000FD9 CD 0E 63         [ 4] 2838         CALL HEX 
      000FDC CD 0F BC         [ 4] 2839         CALL UDOT 
      000FDF CD 05 34         [ 4] 2840         CALL RFROM 
      000FE2 CD 06 E7         [ 4] 2841         CALL BASE 
      000FE5 CD 04 D1         [ 4] 2842         CALL STORE 
      000FE8 81               [ 4] 2843         RET 
                                   2844 
                                   2845 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2846 ;       .       ( w -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



                                   2847 ;       Display an integer in free
                                   2848 ;       format, preceeded by a space.
                                   2849 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000FE9                       2850         _HEADER DOT,1,"."
      000FE9 0F CD                    1         .word LINK 
                           000FEB     2         LINK=.
      000FEB 01                       3         .byte 1  
      000FEC 2E                       4         .ascii "."
      000FED                          5         DOT:
      000FED CD 06 E7         [ 4] 2851         CALL     BASE
      000FF0 CD 04 E3         [ 4] 2852         CALL     AT
      000FF3 CD 04 6F         [ 4] 2853         CALL     DOLIT
      000FF6 00 0A                 2854         .word      10
      000FF8 CD 06 A7         [ 4] 2855         CALL     XORR    ;?decimal
      000FFB CD 04 98         [ 4] 2856         CALL     QBRAN
      000FFE 10 03                 2857         .word      DOT1
      001000 CC 0F BC         [ 2] 2858         JP     UDOT
      001003 CD 0E 45         [ 4] 2859 DOT1:   CALL     STR
      001006 CD 0F 04         [ 4] 2860         CALL     SPACE
      001009 CC 0F 2E         [ 2] 2861         JP     TYPES
                                   2862 
                                   2863 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2864 ;       ?       ( a -- )
                                   2865 ;       Display contents in memory cell.
                                   2866 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00100C                       2867         _HEADER QUEST,1,"?"
      00100C 0F EB                    1         .word LINK 
                           00100E     2         LINK=.
      00100E 01                       3         .byte 1  
      00100F 3F                       4         .ascii "?"
      001010                          5         QUEST:
      001010 CD 04 E3         [ 4] 2868         CALL     AT
      001013 CC 0F ED         [ 2] 2869         JP     DOT
                                   2870 
                                   2871 ;; Parsing
                                   2872 
                                   2873 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2874 ;       parse   ( b u c -- b u delta ; <string> )
                                   2875 ;       Scan string delimited by c.
                                   2876 ;       Return found string and its offset.
                                   2877 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001016                       2878         _HEADER PARS,5,"PARS$"
      001016 10 0E                    1         .word LINK 
                           001018     2         LINK=.
      001018 05                       3         .byte 5  
      001019 50 41 52 53 24           4         .ascii "PARS$"
      00101E                          5         PARS:
      00101E CD 06 F6         [ 4] 2879         CALL     TEMP
      001021 CD 04 D1         [ 4] 2880         CALL     STORE
      001024 CD 06 49         [ 4] 2881         CALL     OVER
      001027 CD 05 EA         [ 4] 2882         CALL     TOR
      00102A CD 06 21         [ 4] 2883         CALL     DUPP
      00102D CD 04 98         [ 4] 2884         CALL     QBRAN
      001030 10 D6                 2885         .word    PARS8
      001032 CD 0B 6F         [ 4] 2886         CALL     ONEM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      001035 CD 06 F6         [ 4] 2887         CALL     TEMP
      001038 CD 04 E3         [ 4] 2888         CALL     AT
      00103B CD 0B C1         [ 4] 2889         CALL     BLANK
      00103E CD 08 E5         [ 4] 2890         CALL     EQUAL
      001041 CD 04 98         [ 4] 2891         CALL     QBRAN
      001044 10 77                 2892         .word      PARS3
      001046 CD 05 EA         [ 4] 2893         CALL     TOR
      001049 CD 0B C1         [ 4] 2894 PARS1:  CALL     BLANK
      00104C CD 06 49         [ 4] 2895         CALL     OVER
      00104F CD 05 01         [ 4] 2896         CALL     CAT     ;skip leading blanks ONLY
      001052 CD 08 BD         [ 4] 2897         CALL     SUBB
      001055 CD 06 58         [ 4] 2898         CALL     ZLESS
      001058 CD 08 60         [ 4] 2899         CALL     INVER
      00105B CD 04 98         [ 4] 2900         CALL     QBRAN
      00105E 10 74                 2901         .word      PARS2
      001060 CD 0B 62         [ 4] 2902         CALL     ONEP
      001063 CD 04 83         [ 4] 2903         CALL     DONXT
      001066 10 49                 2904         .word      PARS1
      001068 CD 05 34         [ 4] 2905         CALL     RFROM
      00106B CD 06 17         [ 4] 2906         CALL     DROP
      00106E CD 0B CE         [ 4] 2907         CALL     ZERO
      001071 CC 06 21         [ 2] 2908         JP     DUPP
      001074 CD 05 34         [ 4] 2909 PARS2:  CALL     RFROM
      001077 CD 06 49         [ 4] 2910 PARS3:  CALL     OVER
      00107A CD 06 31         [ 4] 2911         CALL     SWAPP
      00107D CD 05 EA         [ 4] 2912         CALL     TOR
      001080 CD 06 F6         [ 4] 2913 PARS4:  CALL     TEMP
      001083 CD 04 E3         [ 4] 2914         CALL     AT
      001086 CD 06 49         [ 4] 2915         CALL     OVER
      001089 CD 05 01         [ 4] 2916         CALL     CAT
      00108C CD 08 BD         [ 4] 2917         CALL     SUBB    ;scan for delimiter
      00108F CD 06 F6         [ 4] 2918         CALL     TEMP
      001092 CD 04 E3         [ 4] 2919         CALL     AT
      001095 CD 0B C1         [ 4] 2920         CALL     BLANK
      001098 CD 08 E5         [ 4] 2921         CALL     EQUAL
      00109B CD 04 98         [ 4] 2922         CALL     QBRAN
      00109E 10 A3                 2923         .word      PARS5
      0010A0 CD 06 58         [ 4] 2924         CALL     ZLESS
      0010A3 CD 04 98         [ 4] 2925 PARS5:  CALL     QBRAN
      0010A6 10 B8                 2926         .word      PARS6
      0010A8 CD 0B 62         [ 4] 2927         CALL     ONEP
      0010AB CD 04 83         [ 4] 2928         CALL     DONXT
      0010AE 10 80                 2929         .word      PARS4
      0010B0 CD 06 21         [ 4] 2930         CALL     DUPP
      0010B3 CD 05 EA         [ 4] 2931         CALL     TOR
      0010B6 20 0F            [ 2] 2932         JRA     PARS7
      0010B8 CD 05 34         [ 4] 2933 PARS6:  CALL     RFROM
      0010BB CD 06 17         [ 4] 2934         CALL     DROP
      0010BE CD 06 21         [ 4] 2935         CALL     DUPP
      0010C1 CD 0B 62         [ 4] 2936         CALL     ONEP
      0010C4 CD 05 EA         [ 4] 2937         CALL     TOR
      0010C7 CD 06 49         [ 4] 2938 PARS7:  CALL     OVER
      0010CA CD 08 BD         [ 4] 2939         CALL     SUBB
      0010CD CD 05 34         [ 4] 2940         CALL     RFROM
      0010D0 CD 05 34         [ 4] 2941         CALL     RFROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      0010D3 CC 08 BD         [ 2] 2942         JP     SUBB
      0010D6 CD 06 49         [ 4] 2943 PARS8:  CALL     OVER
      0010D9 CD 05 34         [ 4] 2944         CALL     RFROM
      0010DC CC 08 BD         [ 2] 2945         JP     SUBB
                                   2946 
                                   2947 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2948 ;       PARSE   ( c -- b u ; <string> )
                                   2949 ;       Scan input stream and return
                                   2950 ;       counted string delimited by c.
                                   2951 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0010DF                       2952         _HEADER PARSE,5,"PARSE"
      0010DF 10 18                    1         .word LINK 
                           0010E1     2         LINK=.
      0010E1 05                       3         .byte 5  
      0010E2 50 41 52 53 45           4         .ascii "PARSE"
      0010E7                          5         PARSE:
      0010E7 CD 05 EA         [ 4] 2953         CALL     TOR
      0010EA CD 0C CD         [ 4] 2954         CALL     TIB
      0010ED CD 07 05         [ 4] 2955         CALL     INN
      0010F0 CD 04 E3         [ 4] 2956         CALL     AT
      0010F3 CD 08 46         [ 4] 2957         CALL     PLUS    ;current input buffer pointer
      0010F6 CD 07 15         [ 4] 2958         CALL     NTIB
      0010F9 CD 04 E3         [ 4] 2959         CALL     AT
      0010FC CD 07 05         [ 4] 2960         CALL     INN
      0010FF CD 04 E3         [ 4] 2961         CALL     AT
      001102 CD 08 BD         [ 4] 2962         CALL     SUBB    ;remaining count
      001105 CD 05 34         [ 4] 2963         CALL     RFROM
      001108 CD 10 1E         [ 4] 2964         CALL     PARS
      00110B CD 07 05         [ 4] 2965         CALL     INN
      00110E CC 0C 3E         [ 2] 2966         JP     PSTOR
                                   2967 
                                   2968 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2969 ;       .(      ( -- )
                                   2970 ;       Output following string up to next ) .
                                   2971 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001111                       2972         _HEADER DOTPR,IMEDD+2,".("
      001111 10 E1                    1         .word LINK 
                           001113     2         LINK=.
      001113 82                       3         .byte IMEDD+2  
      001114 2E 28                    4         .ascii ".("
      001116                          5         DOTPR:
      001116 CD 04 6F         [ 4] 2973         CALL     DOLIT
      001119 00 29                 2974         .word     41	; ")"
      00111B CD 10 E7         [ 4] 2975         CALL     PARSE
      00111E CC 0F 2E         [ 2] 2976         JP     TYPES
                                   2977 
                                   2978 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2979 ;       (       ( -- )
                                   2980 ;       Ignore following string up to next ).
                                   2981 ;       A comment.
                                   2982 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001121                       2983         _HEADER PAREN,IMEDD+1,"("
      001121 11 13                    1         .word LINK 
                           001123     2         LINK=.
      001123 81                       3         .byte IMEDD+1  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      001124 28                       4         .ascii "("
      001125                          5         PAREN:
      001125 CD 04 6F         [ 4] 2984         CALL     DOLIT
      001128 00 29                 2985         .word     41	; ")"
      00112A CD 10 E7         [ 4] 2986         CALL     PARSE
      00112D CC 08 26         [ 2] 2987         JP     DDROP
                                   2988 
                                   2989 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2990 ;       \       ( -- )
                                   2991 ;       Ignore following text till
                                   2992 ;       end of line.
                                   2993 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001130                       2994         _HEADER BKSLA,IMEDD+1,"\\"
      001130 11 23                    1         .word LINK 
                           001132     2         LINK=.
      001132 81                       3         .byte IMEDD+1  
      001133 5C 5C                    4         .ascii "\\"
      001135                          5         BKSLA:
      001135 90 AE 00 0E      [ 2] 2995         ldw y,#UCTIB ; #TIB  
      001139 90 FE            [ 2] 2996         ldw y,(y)
      00113B 90 89            [ 2] 2997         pushw y ; count in TIB 
      00113D 90 AE 00 0C      [ 2] 2998         ldw y,#UINN ; >IN 
      001141 90 BF 26         [ 2] 2999         ldw YTEMP,y
      001144 90 85            [ 2] 3000         popw y 
      001146 91 CF 26         [ 5] 3001         ldw [YTEMP],y
      001149 81               [ 4] 3002         ret 
                                   3003 
                                   3004 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3005 ;       WORD    ( c -- a ; <string> )
                                   3006 ;       Parse a word from input stream
                                   3007 ;       and copy it to code dictionary.
                                   3008 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00114A                       3009         _HEADER WORDD,4,"WORD"
      00114A 11 32                    1         .word LINK 
                           00114C     2         LINK=.
      00114C 04                       3         .byte 4  
      00114D 57 4F 52 44              4         .ascii "WORD"
      001151                          5         WORDD:
      001151 CD 10 E7         [ 4] 3010         CALL     PARSE
      001154 CD 0C AB         [ 4] 3011         CALL     HERE
      001157 CD 0B 37         [ 4] 3012         CALL     CELLP
                           000000  3013 .IF CASE_SENSE 
                                   3014         JP      PACKS 
                           000001  3015 .ELSE                 
      00115A CD 0D 6B         [ 4] 3016         CALL     PACKS
                                   3017 ; uppercase TOKEN 
      00115D CD 06 21         [ 4] 3018         CALL    DUPP 
      001160 CD 0C 94         [ 4] 3019         CALL    COUNT 
      001163 CD 05 EA         [ 4] 3020         CALL    TOR 
      001166 CD 04 B4         [ 4] 3021         CALL    BRAN 
      001169 11 97                 3022         .word   UPPER2  
      00116B                       3023 UPPER:
      00116B CD 06 21         [ 4] 3024         CALL    DUPP 
      00116E CD 05 01         [ 4] 3025         CALL    CAT
      001171 CD 06 21         [ 4] 3026         CALL    DUPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      001174 CD 04 6F         [ 4] 3027         CALL   DOLIT
      001177 00 61                 3028         .word   'a' 
      001179 CD 04 6F         [ 4] 3029         CALL    DOLIT
      00117C 00 7B                 3030         .word   'z'+1 
      00117E CD 09 BD         [ 4] 3031         CALL   WITHI 
      001181 CD 04 98         [ 4] 3032         CALL   QBRAN
      001184 11 8E                 3033         .word  UPPER1  
      001186 CD 04 6F         [ 4] 3034         CALL    DOLIT 
      001189 00 DF                 3035         .word   0xDF 
      00118B CD 06 7E         [ 4] 3036         CALL    ANDD 
      00118E                       3037 UPPER1:
      00118E CD 06 49         [ 4] 3038         CALL    OVER 
      001191 CD 04 F0         [ 4] 3039         CALL    CSTOR          
      001194 CD 0B 62         [ 4] 3040         CALL    ONEP 
      001197                       3041 UPPER2: 
      001197 CD 04 83         [ 4] 3042         CALL    DONXT
      00119A 11 6B                 3043         .word   UPPER  
      00119C CD 06 17         [ 4] 3044         CALL    DROP  
      00119F 81               [ 4] 3045         RET 
                                   3046 .ENDIF 
                                   3047 
                                   3048 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3049 ;       TOKEN   ( -- a ; <string> )
                                   3050 ;       Parse a word from input stream
                                   3051 ;       and copy it to name dictionary.
                                   3052 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0011A0                       3053         _HEADER TOKEN,5,"TOKEN"
      0011A0 11 4C                    1         .word LINK 
                           0011A2     2         LINK=.
      0011A2 05                       3         .byte 5  
      0011A3 54 4F 4B 45 4E           4         .ascii "TOKEN"
      0011A8                          5         TOKEN:
      0011A8 CD 0B C1         [ 4] 3054         CALL     BLANK
      0011AB CC 11 51         [ 2] 3055         JP     WORDD
                                   3056 
                                   3057 ;; Dictionary search
                                   3058 
                                   3059 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3060 ;       NAME>   ( na -- ca )
                                   3061 ;       Return a code address given
                                   3062 ;       a name address.
                                   3063 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0011AE                       3064         _HEADER NAMET,5,"NAME>"
      0011AE 11 A2                    1         .word LINK 
                           0011B0     2         LINK=.
      0011B0 05                       3         .byte 5  
      0011B1 4E 41 4D 45 3E           4         .ascii "NAME>"
      0011B6                          5         NAMET:
      0011B6 CD 0C 94         [ 4] 3065         CALL     COUNT
      0011B9 CD 04 6F         [ 4] 3066         CALL     DOLIT
      0011BC 00 1F                 3067         .word      31
      0011BE CD 06 7E         [ 4] 3068         CALL     ANDD
      0011C1 CC 08 46         [ 2] 3069         JP     PLUS
                                   3070 
                                   3071 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                   3072 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   3073 ;       Compare u cells in two
                                   3074 ;       strings. Return 0 if identical.
                                   3075 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0011C4                       3076         _HEADER SAMEQ,5,"SAME?"
      0011C4 11 B0                    1         .word LINK 
                           0011C6     2         LINK=.
      0011C6 05                       3         .byte 5  
      0011C7 53 41 4D 45 3F           4         .ascii "SAME?"
      0011CC                          5         SAMEQ:
      0011CC CD 0B 6F         [ 4] 3077         CALL     ONEM
      0011CF CD 05 EA         [ 4] 3078         CALL     TOR
      0011D2 20 29            [ 2] 3079         JRA     SAME2
      0011D4 CD 06 49         [ 4] 3080 SAME1:  CALL     OVER
      0011D7 CD 05 45         [ 4] 3081         CALL     RAT
      0011DA CD 08 46         [ 4] 3082         CALL     PLUS
      0011DD CD 05 01         [ 4] 3083         CALL     CAT
      0011E0 CD 06 49         [ 4] 3084         CALL     OVER
      0011E3 CD 05 45         [ 4] 3085         CALL     RAT
      0011E6 CD 08 46         [ 4] 3086         CALL     PLUS
      0011E9 CD 05 01         [ 4] 3087         CALL     CAT
      0011EC CD 08 BD         [ 4] 3088         CALL     SUBB
      0011EF CD 07 D4         [ 4] 3089         CALL     QDUP
      0011F2 CD 04 98         [ 4] 3090         CALL     QBRAN
      0011F5 11 FD                 3091         .word      SAME2
      0011F7 CD 05 34         [ 4] 3092         CALL     RFROM
      0011FA CC 06 17         [ 2] 3093         JP     DROP
      0011FD CD 04 83         [ 4] 3094 SAME2:  CALL     DONXT
      001200 11 D4                 3095         .word      SAME1
      001202 CC 0B CE         [ 2] 3096         JP     ZERO
                                   3097 
                                   3098 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3099 ;       find    ( a va -- ca na | a F )
                                   3100 ;       Search vocabulary for string.
                                   3101 ;       Return ca and na if succeeded.
                                   3102 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001205                       3103         _HEADER FIND,4,"FIND"
      001205 11 C6                    1         .word LINK 
                           001207     2         LINK=.
      001207 04                       3         .byte 4  
      001208 46 49 4E 44              4         .ascii "FIND"
      00120C                          5         FIND:
      00120C CD 06 31         [ 4] 3104         CALL     SWAPP
      00120F CD 06 21         [ 4] 3105         CALL     DUPP
      001212 CD 05 01         [ 4] 3106         CALL     CAT
      001215 CD 06 F6         [ 4] 3107         CALL     TEMP
      001218 CD 04 D1         [ 4] 3108         CALL     STORE
      00121B CD 06 21         [ 4] 3109         CALL     DUPP
      00121E CD 04 E3         [ 4] 3110         CALL     AT
      001221 CD 05 EA         [ 4] 3111         CALL     TOR
      001224 CD 0B 37         [ 4] 3112         CALL     CELLP
      001227 CD 06 31         [ 4] 3113         CALL     SWAPP
      00122A CD 04 E3         [ 4] 3114 FIND1:  CALL     AT
      00122D CD 06 21         [ 4] 3115         CALL     DUPP
      001230 CD 04 98         [ 4] 3116         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      001233 12 69                 3117         .word      FIND6
      001235 CD 06 21         [ 4] 3118         CALL     DUPP
      001238 CD 04 E3         [ 4] 3119         CALL     AT
      00123B CD 04 6F         [ 4] 3120         CALL     DOLIT
      00123E 1F 7F                 3121         .word      MASKK
      001240 CD 06 7E         [ 4] 3122         CALL     ANDD
      001243 CD 05 45         [ 4] 3123         CALL     RAT
      001246 CD 06 A7         [ 4] 3124         CALL     XORR
      001249 CD 04 98         [ 4] 3125         CALL     QBRAN
      00124C 12 58                 3126         .word      FIND2
      00124E CD 0B 37         [ 4] 3127         CALL     CELLP
      001251 CD 04 6F         [ 4] 3128         CALL     DOLIT
      001254 FF FF                 3129         .word     0xFFFF
      001256 20 0C            [ 2] 3130         JRA     FIND3
      001258 CD 0B 37         [ 4] 3131 FIND2:  CALL     CELLP
      00125B CD 06 F6         [ 4] 3132         CALL     TEMP
      00125E CD 04 E3         [ 4] 3133         CALL     AT
      001261 CD 11 CC         [ 4] 3134         CALL     SAMEQ
      001264 CD 04 B4         [ 4] 3135 FIND3:  CALL     BRAN
      001267 12 78                 3136         .word      FIND4
      001269 CD 05 34         [ 4] 3137 FIND6:  CALL     RFROM
      00126C CD 06 17         [ 4] 3138         CALL     DROP
      00126F CD 06 31         [ 4] 3139         CALL     SWAPP
      001272 CD 0B 46         [ 4] 3140         CALL     CELLM
      001275 CC 06 31         [ 2] 3141         JP     SWAPP
      001278 CD 04 98         [ 4] 3142 FIND4:  CALL     QBRAN
      00127B 12 85                 3143         .word      FIND5
      00127D CD 0B 46         [ 4] 3144         CALL     CELLM
      001280 CD 0B 46         [ 4] 3145         CALL     CELLM
      001283 20 A5            [ 2] 3146         JRA     FIND1
      001285 CD 05 34         [ 4] 3147 FIND5:  CALL     RFROM
      001288 CD 06 17         [ 4] 3148         CALL     DROP
      00128B CD 06 31         [ 4] 3149         CALL     SWAPP
      00128E CD 06 17         [ 4] 3150         CALL     DROP
      001291 CD 0B 46         [ 4] 3151         CALL     CELLM
      001294 CD 06 21         [ 4] 3152         CALL     DUPP
      001297 CD 11 B6         [ 4] 3153         CALL     NAMET
      00129A CC 06 31         [ 2] 3154         JP     SWAPP
                                   3155 
                                   3156 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3157 ;       NAME?   ( a -- ca na | a F )
                                   3158 ;       Search vocabularies for a string.
                                   3159 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00129D                       3160         _HEADER NAMEQ,5,"NAME?"
      00129D 12 07                    1         .word LINK 
                           00129F     2         LINK=.
      00129F 05                       3         .byte 5  
      0012A0 4E 41 4D 45 3F           4         .ascii "NAME?"
      0012A5                          5         NAMEQ:
      0012A5 CD 07 6A         [ 4] 3161         CALL   CNTXT
      0012A8 CC 12 0C         [ 2] 3162         JP     FIND
                                   3163 
                                   3164 ;; Terminal response
                                   3165 
                                   3166 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                                   3167 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3168 ;       Backup cursor by one character.
                                   3169 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0012AB                       3170         _HEADER BKSP,2,"^H"
      0012AB 12 9F                    1         .word LINK 
                           0012AD     2         LINK=.
      0012AD 02                       3         .byte 2  
      0012AE 5E 48                    4         .ascii "^H"
      0012B0                          5         BKSP:
      0012B0 CD 05 EA         [ 4] 3171         CALL     TOR
      0012B3 CD 06 49         [ 4] 3172         CALL     OVER
      0012B6 CD 05 34         [ 4] 3173         CALL     RFROM
      0012B9 CD 06 31         [ 4] 3174         CALL     SWAPP
      0012BC CD 06 49         [ 4] 3175         CALL     OVER
      0012BF CD 06 A7         [ 4] 3176         CALL     XORR
      0012C2 CD 04 98         [ 4] 3177         CALL     QBRAN
      0012C5 12 E0                 3178         .word      BACK1
      0012C7 CD 04 6F         [ 4] 3179         CALL     DOLIT
      0012CA 00 08                 3180         .word      BKSPP
      0012CC CD 04 36         [ 4] 3181         CALL     EMIT
      0012CF CD 0B 6F         [ 4] 3182         CALL     ONEM
      0012D2 CD 0B C1         [ 4] 3183         CALL     BLANK
      0012D5 CD 04 36         [ 4] 3184         CALL     EMIT
      0012D8 CD 04 6F         [ 4] 3185         CALL     DOLIT
      0012DB 00 08                 3186         .word      BKSPP
      0012DD CC 04 36         [ 2] 3187         JP     EMIT
      0012E0 81               [ 4] 3188 BACK1:  RET
                                   3189 
                                   3190 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3191 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3192 ;       Accept and echo key stroke
                                   3193 ;       and bump cursor.
                                   3194 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0012E1                       3195         _HEADER TAP,3,"TAP"
      0012E1 12 AD                    1         .word LINK 
                           0012E3     2         LINK=.
      0012E3 03                       3         .byte 3  
      0012E4 54 41 50                 4         .ascii "TAP"
      0012E7                          5         TAP:
      0012E7 CD 06 21         [ 4] 3196         CALL     DUPP
      0012EA CD 04 36         [ 4] 3197         CALL     EMIT
      0012ED CD 06 49         [ 4] 3198         CALL     OVER
      0012F0 CD 04 F0         [ 4] 3199         CALL     CSTOR
      0012F3 CC 0B 62         [ 2] 3200         JP     ONEP
                                   3201 
                                   3202 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3203 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3204 ;       Process a key stroke,
                                   3205 ;       CR,LF or backspace.
                                   3206 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0012F6                       3207         _HEADER KTAP,4,"KTAP"
      0012F6 12 E3                    1         .word LINK 
                           0012F8     2         LINK=.
      0012F8 04                       3         .byte 4  
      0012F9 4B 54 41 50              4         .ascii "KTAP"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      0012FD                          5         KTAP:
      0012FD CD 06 21         [ 4] 3208         CALL     DUPP
      001300 CD 04 6F         [ 4] 3209         CALL     DOLIT
                           000001  3210 .if EOL_CR
      001303 00 0D                 3211         .word   CRR
                           000000  3212 .else ; EOL_LF 
                                   3213         .word   LF
                                   3214 .endif 
      001305 CD 06 A7         [ 4] 3215         CALL     XORR
      001308 CD 04 98         [ 4] 3216         CALL     QBRAN
      00130B 13 23                 3217         .word      KTAP2
      00130D CD 04 6F         [ 4] 3218         CALL     DOLIT
      001310 00 08                 3219         .word      BKSPP
      001312 CD 06 A7         [ 4] 3220         CALL     XORR
      001315 CD 04 98         [ 4] 3221         CALL     QBRAN
      001318 13 20                 3222         .word      KTAP1
      00131A CD 0B C1         [ 4] 3223         CALL     BLANK
      00131D CC 12 E7         [ 2] 3224         JP     TAP
      001320 CC 12 B0         [ 2] 3225 KTAP1:  JP     BKSP
      001323 CD 06 17         [ 4] 3226 KTAP2:  CALL     DROP
      001326 CD 06 31         [ 4] 3227         CALL     SWAPP
      001329 CD 06 17         [ 4] 3228         CALL     DROP
      00132C CC 06 21         [ 2] 3229         JP     DUPP
                                   3230 
                                   3231 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3232 ;       accept  ( b u -- b u )
                                   3233 ;       Accept characters to input
                                   3234 ;       buffer. Return with actual count.
                                   3235 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00132F                       3236         _HEADER ACCEP,6,"ACCEPT"
      00132F 12 F8                    1         .word LINK 
                           001331     2         LINK=.
      001331 06                       3         .byte 6  
      001332 41 43 43 45 50 54        4         .ascii "ACCEPT"
      001338                          5         ACCEP:
      001338 CD 06 49         [ 4] 3237         CALL     OVER
      00133B CD 08 46         [ 4] 3238         CALL     PLUS
      00133E CD 06 49         [ 4] 3239         CALL     OVER
      001341 CD 08 31         [ 4] 3240 ACCP1:  CALL     DDUP
      001344 CD 06 A7         [ 4] 3241         CALL     XORR
      001347 CD 04 98         [ 4] 3242         CALL     QBRAN
      00134A 13 6C                 3243         .word      ACCP4
      00134C CD 0E CC         [ 4] 3244         CALL     KEY
      00134F CD 06 21         [ 4] 3245         CALL     DUPP
      001352 CD 0B C1         [ 4] 3246         CALL     BLANK
      001355 CD 04 6F         [ 4] 3247         CALL     DOLIT
      001358 00 7F                 3248         .word      127
      00135A CD 09 BD         [ 4] 3249         CALL     WITHI
      00135D CD 04 98         [ 4] 3250         CALL     QBRAN
      001360 13 67                 3251         .word      ACCP2
      001362 CD 12 E7         [ 4] 3252         CALL     TAP
      001365 20 03            [ 2] 3253         JRA     ACCP3
      001367 CD 12 FD         [ 4] 3254 ACCP2:  CALL     KTAP
      00136A 20 D5            [ 2] 3255 ACCP3:  JRA     ACCP1
      00136C CD 06 17         [ 4] 3256 ACCP4:  CALL     DROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      00136F CD 06 49         [ 4] 3257         CALL     OVER
      001372 CC 08 BD         [ 2] 3258         JP     SUBB
                                   3259 
                                   3260 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3261 ;       QUERY   ( -- )
                                   3262 ;       Accept input stream to
                                   3263 ;       terminal input buffer.
                                   3264 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001375                       3265         _HEADER QUERY,5,"QUERY"
      001375 13 31                    1         .word LINK 
                           001377     2         LINK=.
      001377 05                       3         .byte 5  
      001378 51 55 45 52 59           4         .ascii "QUERY"
      00137D                          5         QUERY:
      00137D CD 0C CD         [ 4] 3266         CALL     TIB
      001380 CD 04 6F         [ 4] 3267         CALL     DOLIT
      001383 00 50                 3268         .word      80
      001385 CD 13 38         [ 4] 3269         CALL     ACCEP
      001388 CD 07 15         [ 4] 3270         CALL     NTIB
      00138B CD 04 D1         [ 4] 3271         CALL     STORE
      00138E CD 06 17         [ 4] 3272         CALL     DROP
      001391 CD 0B CE         [ 4] 3273         CALL     ZERO
      001394 CD 07 05         [ 4] 3274         CALL     INN
      001397 CC 04 D1         [ 2] 3275         JP     STORE
                                   3276 
                                   3277 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3278 ;       ABORT   ( -- )
                                   3279 ;       Reset data stack and
                                   3280 ;       jump to QUIT.
                                   3281 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00139A                       3282         _HEADER ABORT,5,"ABORT"
      00139A 13 77                    1         .word LINK 
                           00139C     2         LINK=.
      00139C 05                       3         .byte 5  
      00139D 41 42 4F 52 54           4         .ascii "ABORT"
      0013A2                          5         ABORT:
      0013A2 CD 14 99         [ 4] 3283         CALL     PRESE
      0013A5 CC 14 B6         [ 2] 3284         JP     QUIT
                                   3285 
                                   3286 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3287 ;       abort"  ( f -- )
                                   3288 ;       Run time routine of ABORT".
                                   3289 ;       Abort with a message.
                                   3290 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0013A8                       3291         _HEADER ABORQ,COMPO+6,'ABORT"'
      0013A8 13 9C                    1         .word LINK 
                           0013AA     2         LINK=.
      0013AA 46                       3         .byte COMPO+6  
      0013AB 41 42 4F 52 54 22        4         .ascii 'ABORT"'
      0013B1                          5         ABORQ:
      0013B1 CD 04 98         [ 4] 3292         CALL     QBRAN
      0013B4 13 D0                 3293         .word      ABOR2   ;text flag
      0013B6 CD 0F 56         [ 4] 3294         CALL     DOSTR
      0013B9 CD 0F 04         [ 4] 3295 ABOR1:  CALL     SPACE
      0013BC CD 0C 94         [ 4] 3296         CALL     COUNT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      0013BF CD 0F 2E         [ 4] 3297         CALL     TYPES
      0013C2 CD 04 6F         [ 4] 3298         CALL     DOLIT
      0013C5 00 3F                 3299         .word     63 ; "?"
      0013C7 CD 04 36         [ 4] 3300         CALL     EMIT
      0013CA CD 0F 46         [ 4] 3301         CALL     CR
      0013CD CC 13 A2         [ 2] 3302         JP     ABORT   ;pass error string
      0013D0 CD 0F 56         [ 4] 3303 ABOR2:  CALL     DOSTR
      0013D3 CC 06 17         [ 2] 3304         JP     DROP
                                   3305 
                                   3306 ;; The text interpreter
                                   3307 
                                   3308 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3309 ;       $INTERPRET      ( a -- )
                                   3310 ;       Interpret a word. If failed,
                                   3311 ;       try to convert it to an integer.
                                   3312 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0013D6                       3313         _HEADER INTER,10,"$INTERPRET"
      0013D6 13 AA                    1         .word LINK 
                           0013D8     2         LINK=.
      0013D8 0A                       3         .byte 10  
      0013D9 24 49 4E 54 45 52 50     4         .ascii "$INTERPRET"
             52 45 54
      0013E3                          5         INTER:
      0013E3 CD 12 A5         [ 4] 3314         CALL     NAMEQ
      0013E6 CD 07 D4         [ 4] 3315         CALL     QDUP    ;?defined
      0013E9 CD 04 98         [ 4] 3316         CALL     QBRAN
      0013EC 14 0D                 3317         .word      INTE1
      0013EE CD 04 E3         [ 4] 3318         CALL     AT
      0013F1 CD 04 6F         [ 4] 3319         CALL     DOLIT
      0013F4 40 00                 3320 	.word       0x4000	; COMPO*256
      0013F6 CD 06 7E         [ 4] 3321         CALL     ANDD    ;?compile only lexicon bits
      0013F9 CD 13 B1         [ 4] 3322         CALL     ABORQ
      0013FC 0D                    3323         .byte      13
      0013FD 20 63 6F 6D 70 69 6C  3324         .ascii     " compile only"
             65 20 6F 6E 6C 79
      00140A CC 04 C4         [ 2] 3325         JP     EXECU
      00140D CD 24 AD         [ 4] 3326 INTE1:  CALL     NUMBQ   ;convert a number
      001410 CD 04 98         [ 4] 3327         CALL     QBRAN
      001413 13 B9                 3328         .word    ABOR1
      001415 81               [ 4] 3329         RET
                                   3330 
                                   3331 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3332 ;       [       ( -- )
                                   3333 ;       Start  text interpreter.
                                   3334 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001416                       3335         _HEADER LBRAC,IMEDD+1,"["
      001416 13 D8                    1         .word LINK 
                           001418     2         LINK=.
      001418 81                       3         .byte IMEDD+1  
      001419 5B                       4         .ascii "["
      00141A                          5         LBRAC:
      00141A CD 04 6F         [ 4] 3336         CALL   DOLIT
      00141D 13 E3                 3337         .word  INTER
      00141F CD 07 48         [ 4] 3338         CALL   TEVAL
      001422 CC 04 D1         [ 2] 3339         JP     STORE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                   3340 
                                   3341 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3342 ;       .OK     ( -- )
                                   3343 ;       Display 'ok' while interpreting.
                                   3344 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001425                       3345         _HEADER DOTOK,3,".OK"
      001425 14 18                    1         .word LINK 
                           001427     2         LINK=.
      001427 03                       3         .byte 3  
      001428 2E 4F 4B                 4         .ascii ".OK"
      00142B                          5         DOTOK:
      00142B CD 04 6F         [ 4] 3346         CALL     DOLIT
      00142E 13 E3                 3347         .word      INTER
      001430 CD 07 48         [ 4] 3348         CALL     TEVAL
      001433 CD 04 E3         [ 4] 3349         CALL     AT
      001436 CD 08 E5         [ 4] 3350         CALL     EQUAL
      001439 CD 04 98         [ 4] 3351         CALL     QBRAN
      00143C 14 45                 3352         .word      DOTO1
      00143E CD 0F 73         [ 4] 3353         CALL     DOTQP
      001441 03                    3354         .byte      3
      001442 20 6F 6B              3355         .ascii     " ok"
      001445 CC 0F 46         [ 2] 3356 DOTO1:  JP     CR
                                   3357 
                                   3358 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3359 ;       ?STACK  ( -- )
                                   3360 ;       Abort if stack underflows.
                                   3361 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001448                       3362         _HEADER QSTAC,6,"?STACK"
      001448 14 27                    1         .word LINK 
                           00144A     2         LINK=.
      00144A 06                       3         .byte 6  
      00144B 3F 53 54 41 43 4B        4         .ascii "?STACK"
      001451                          5         QSTAC:
      001451 CD 0C 10         [ 4] 3363         CALL     DEPTH
      001454 CD 06 58         [ 4] 3364         CALL     ZLESS   ;check only for underflow
      001457 CD 13 B1         [ 4] 3365         CALL     ABORQ
      00145A 0B                    3366         .byte      11
      00145B 20 75 6E 64 65 72 66  3367         .ascii     " underflow "
             6C 6F 77 20
      001466 81               [ 4] 3368         RET
                                   3369 
                                   3370 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3371 ;       EVAL    ( -- )
                                   3372 ;       Interpret  input stream.
                                   3373 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001467                       3374         _HEADER EVAL,4,"EVAL"
      001467 14 4A                    1         .word LINK 
                           001469     2         LINK=.
      001469 04                       3         .byte 4  
      00146A 45 56 41 4C              4         .ascii "EVAL"
      00146E                          5         EVAL:
      00146E CD 11 A8         [ 4] 3375 EVAL1:  CALL     TOKEN
      001471 CD 06 21         [ 4] 3376         CALL     DUPP
      001474 CD 05 01         [ 4] 3377         CALL     CAT     ;?input stream empty
      001477 CD 04 98         [ 4] 3378         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      00147A 14 8A                 3379         .word    EVAL2
      00147C CD 07 48         [ 4] 3380         CALL     TEVAL
      00147F CD 0C E1         [ 4] 3381         CALL     ATEXE
      001482 CD 14 51         [ 4] 3382         CALL     QSTAC   ;evaluate input, check stack
      001485 CD 04 B4         [ 4] 3383         CALL     BRAN
      001488 14 6E                 3384         .word    EVAL1
      00148A CD 06 17         [ 4] 3385 EVAL2:  CALL     DROP
      00148D CC 14 2B         [ 2] 3386         JP       DOTOK
                                   3387 
                                   3388 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3389 ;       PRESET  ( -- )
                                   3390 ;       Reset data stack pointer and
                                   3391 ;       terminal input buffer.
                                   3392 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001490                       3393         _HEADER PRESE,6,"PRESET"
      001490 14 69                    1         .word LINK 
                           001492     2         LINK=.
      001492 06                       3         .byte 6  
      001493 50 52 45 53 45 54        4         .ascii "PRESET"
      001499                          5         PRESE:
      001499 CD 04 6F         [ 4] 3394         CALL     DOLIT
      00149C 16 80                 3395         .word      SPP
      00149E CD 06 0E         [ 4] 3396         CALL     SPSTO
      0014A1 CD 04 6F         [ 4] 3397         CALL     DOLIT
      0014A4 17 00                 3398         .word      TIBB
      0014A6 CD 07 15         [ 4] 3399         CALL     NTIB
      0014A9 CD 0B 37         [ 4] 3400         CALL     CELLP
      0014AC CC 04 D1         [ 2] 3401         JP     STORE
                                   3402 
                                   3403 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3404 ;       QUIT    ( -- )
                                   3405 ;       Reset return stack pointer
                                   3406 ;       and start text interpreter.
                                   3407 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014AF                       3408         _HEADER QUIT,4,"QUIT"
      0014AF 14 92                    1         .word LINK 
                           0014B1     2         LINK=.
      0014B1 04                       3         .byte 4  
      0014B2 51 55 49 54              4         .ascii "QUIT"
      0014B6                          5         QUIT:
      0014B6 CD 04 6F         [ 4] 3409         CALL     DOLIT
      0014B9 17 FF                 3410         .word      RPP
      0014BB CD 05 1E         [ 4] 3411         CALL     RPSTO   ;reset return stack pointer
      0014BE CD 14 1A         [ 4] 3412 QUIT1:  CALL     LBRAC   ;start interpretation
      0014C1 CD 13 7D         [ 4] 3413 QUIT2:  CALL     QUERY   ;get input
      0014C4 CD 14 6E         [ 4] 3414         CALL     EVAL
      0014C7 20 F8            [ 2] 3415         JRA     QUIT2   ;continue till error
                                   3416 
                                   3417 ;; The compiler
                                   3418 
                                   3419 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3420 ;       '       ( -- ca )
                                   3421 ;       Search vocabularies for
                                   3422 ;       next word in input stream.
                                   3423 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      0014C9                       3424         _HEADER TICK,1,"'"
      0014C9 14 B1                    1         .word LINK 
                           0014CB     2         LINK=.
      0014CB 01                       3         .byte 1  
      0014CC 27                       4         .ascii "'"
      0014CD                          5         TICK:
      0014CD CD 11 A8         [ 4] 3425         CALL     TOKEN
      0014D0 CD 12 A5         [ 4] 3426         CALL     NAMEQ   ;?defined
      0014D3 CD 04 98         [ 4] 3427         CALL     QBRAN
      0014D6 13 B9                 3428         .word      ABOR1
      0014D8 81               [ 4] 3429         RET     ;yes, push code address
                                   3430 
                                   3431 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3432 ;       ALLOT   ( n -- )
                                   3433 ;       Allocate n bytes to RAM 
                                   3434 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014D9                       3435         _HEADER ALLOT,5,"ALLOT"
      0014D9 14 CB                    1         .word LINK 
                           0014DB     2         LINK=.
      0014DB 05                       3         .byte 5  
      0014DC 41 4C 4C 4F 54           4         .ascii "ALLOT"
      0014E1                          5         ALLOT:
      0014E1 CD 07 78         [ 4] 3436         CALL     VPP
                                   3437 ; must update APP_VP each time VP is modidied
      0014E4 CD 0C 3E         [ 4] 3438         call PSTOR 
      0014E7 CC 1C 2A         [ 2] 3439         jp UPDATVP 
                                   3440 
                                   3441 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3442 ;       ,       ( w -- )
                                   3443 ;         Compile an integer into
                                   3444 ;         variable space.
                                   3445 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014EA                       3446         _HEADER COMMA,1,^/"\,"/
      0014EA 14 DB                    1         .word LINK 
                           0014EC     2         LINK=.
      0014EC 01                       3         .byte 1  
      0014ED 5C 2C                    4         .ascii "\,"
      0014EF                          5         COMMA:
      0014EF CD 0C AB         [ 4] 3447         CALL     HERE
      0014F2 CD 06 21         [ 4] 3448         CALL     DUPP
      0014F5 CD 0B 37         [ 4] 3449         CALL     CELLP   ;cell boundary
      0014F8 CD 07 78         [ 4] 3450         CALL     VPP
      0014FB CD 04 D1         [ 4] 3451         CALL     STORE
      0014FE CC 04 D1         [ 2] 3452         JP     STORE
                                   3453 
                                   3454 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3455 ;       C,      ( c -- )
                                   3456 ;       Compile a byte into
                                   3457 ;       variables space.
                                   3458 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001501                       3459         _HEADER CCOMMA,2,^/"C,"/
      001501 14 EC                    1         .word LINK 
                           001503     2         LINK=.
      001503 02                       3         .byte 2  
      001504 43 2C                    4         .ascii "C,"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      001506                          5         CCOMMA:
      001506 CD 0C AB         [ 4] 3460         CALL     HERE
      001509 CD 06 21         [ 4] 3461         CALL     DUPP
      00150C CD 0B 62         [ 4] 3462         CALL     ONEP
      00150F CD 07 78         [ 4] 3463         CALL     VPP
      001512 CD 04 D1         [ 4] 3464         CALL     STORE
      001515 CC 04 F0         [ 2] 3465         JP     CSTOR
                                   3466 
                                   3467 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3468 ;       [COMPILE]       ( -- ; <string> )
                                   3469 ;       Compile next immediate
                                   3470 ;       word into code dictionary.
                                   3471 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001518                       3472         _HEADER BCOMP,IMEDD+9,"[COMPILE]"
      001518 15 03                    1         .word LINK 
                           00151A     2         LINK=.
      00151A 89                       3         .byte IMEDD+9  
      00151B 5B 43 4F 4D 50 49 4C     4         .ascii "[COMPILE]"
             45 5D
      001524                          5         BCOMP:
      001524 CD 14 CD         [ 4] 3473         CALL     TICK
      001527 CC 17 F9         [ 2] 3474         JP     JSRC
                                   3475 
                                   3476 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3477 ;       COMPILE ( -- )
                                   3478 ;       Compile next jsr in
                                   3479 ;       colon list to code dictionary.
                                   3480 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00152A                       3481         _HEADER COMPI,COMPO+7,"COMPILE"
      00152A 15 1A                    1         .word LINK 
                           00152C     2         LINK=.
      00152C 47                       3         .byte COMPO+7  
      00152D 43 4F 4D 50 49 4C 45     4         .ascii "COMPILE"
      001534                          5         COMPI:
      001534 CD 05 34         [ 4] 3482         CALL     RFROM
      001537 CD 06 21         [ 4] 3483         CALL     DUPP
      00153A CD 04 E3         [ 4] 3484         CALL     AT
      00153D CD 17 F9         [ 4] 3485         CALL     JSRC    ;compile subroutine
      001540 CD 0B 37         [ 4] 3486         CALL     CELLP
      001543 90 93            [ 1] 3487         ldw y,x 
      001545 90 FE            [ 2] 3488         ldw y,(y)
      001547 1C 00 02         [ 2] 3489         addw x,#CELLL 
      00154A 90 FC            [ 2] 3490         jp (y)
                                   3491 
                                   3492 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3493 ;       LITERAL ( w -- )
                                   3494 ;       Compile tos to dictionary
                                   3495 ;       as an integer literal.
                                   3496 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00154C                       3497         _HEADER LITER,COMPO+IMEDD+7,"LITERAL"
      00154C 15 2C                    1         .word LINK 
                           00154E     2         LINK=.
      00154E C7                       3         .byte COMPO+IMEDD+7  
      00154F 4C 49 54 45 52 41 4C     4         .ascii "LITERAL"
      001556                          5         LITER:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      001556 CD 15 34         [ 4] 3498         CALL     COMPI
      001559 04 6F                 3499         .word DOLIT 
      00155B CC 14 EF         [ 2] 3500         JP     COMMA
                                   3501 
                                   3502 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3503 ;       $,"     ( -- )
                                   3504 ;       Compile a literal string
                                   3505 ;       up to next " .
                                   3506 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3507 ;        _HEADER STRCQ,3,^/'$,"'/
      00155E                       3508 STRCQ:
      00155E CD 04 6F         [ 4] 3509         CALL     DOLIT
      001561 00 22                 3510         .word     34	; "
      001563 CD 10 E7         [ 4] 3511         CALL     PARSE
      001566 CD 0C AB         [ 4] 3512         CALL     HERE
      001569 CD 0D 6B         [ 4] 3513         CALL     PACKS   ;string to code dictionary
      00156C CD 0C 94         [ 4] 3514         CALL     COUNT
      00156F CD 08 46         [ 4] 3515         CALL     PLUS    ;calculate aligned end of string
      001572 CD 07 78         [ 4] 3516         CALL     VPP
      001575 CC 04 D1         [ 2] 3517         JP     STORE
                                   3518 
                                   3519 ;; Structures
                                   3520 
                                   3521 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3522 ;       FOR     ( -- a )
                                   3523 ;       Start a FOR-NEXT loop
                                   3524 ;       structure in a colon definition.
                                   3525 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001578                       3526         _HEADER FOR,IMEDD+3,"FOR"
      001578 15 4E                    1         .word LINK 
                           00157A     2         LINK=.
      00157A 83                       3         .byte IMEDD+3  
      00157B 46 4F 52                 4         .ascii "FOR"
      00157E                          5         FOR:
      00157E CD 15 34         [ 4] 3527         CALL     COMPI
      001581 05 EA                 3528         .word TOR 
      001583 CC 0C AB         [ 2] 3529         JP     HERE
                                   3530 
                                   3531 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3532 ;       NEXT    ( a -- )
                                   3533 ;       Terminate a FOR-NEXT loop.
                                   3534 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001586                       3535         _HEADER NEXT,IMEDD+4,"NEXT"
      001586 15 7A                    1         .word LINK 
                           001588     2         LINK=.
      001588 84                       3         .byte IMEDD+4  
      001589 4E 45 58 54              4         .ascii "NEXT"
      00158D                          5         NEXT:
      00158D CD 15 34         [ 4] 3536         CALL     COMPI
      001590 04 83                 3537         .word DONXT 
      001592 CD 07 C4         [ 4] 3538         call ADRADJ
      001595 CC 14 EF         [ 2] 3539         JP     COMMA
                                   3540 
                                   3541 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3542 ;       I ( -- n )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                   3543 ;       stack COUNTER
                                   3544 ;       of innermost FOR-NEXT  
                                   3545 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001598                       3546         _HEADER IFETCH,1,"I"
      001598 15 88                    1         .word LINK 
                           00159A     2         LINK=.
      00159A 01                       3         .byte 1  
      00159B 49                       4         .ascii "I"
      00159C                          5         IFETCH:
      00159C 1D 00 02         [ 2] 3547         subw x,#CELLL 
      00159F 16 03            [ 2] 3548         ldw y,(3,sp)
      0015A1 FF               [ 2] 3549         ldw (x),y 
      0015A2 81               [ 4] 3550         ret 
                                   3551 
                                   3552 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3553 ;       J ( -- n )
                                   3554 ;   stack COUNTER
                                   3555 ;   of outer FOR-NEXT  
                                   3556 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015A3                       3557         _HEADER JFETCH,1,"J"
      0015A3 15 9A                    1         .word LINK 
                           0015A5     2         LINK=.
      0015A5 01                       3         .byte 1  
      0015A6 4A                       4         .ascii "J"
      0015A7                          5         JFETCH:
      0015A7 1D 00 02         [ 2] 3558         SUBW X,#CELLL 
      0015AA 16 05            [ 2] 3559         LDW Y,(5,SP)
      0015AC FF               [ 2] 3560         LDW (X),Y 
      0015AD 81               [ 4] 3561         RET 
                                   3562 
                                   3563 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3564 ;       BEGIN   ( -- a )
                                   3565 ;       Start an infinite or
                                   3566 ;       indefinite loop structure.
                                   3567 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015AE                       3568         _HEADER BEGIN,IMEDD+5,"BEGIN"
      0015AE 15 A5                    1         .word LINK 
                           0015B0     2         LINK=.
      0015B0 85                       3         .byte IMEDD+5  
      0015B1 42 45 47 49 4E           4         .ascii "BEGIN"
      0015B6                          5         BEGIN:
      0015B6 CC 0C AB         [ 2] 3569         JP     HERE
                                   3570 
                                   3571 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3572 ;       UNTIL   ( a -- )
                                   3573 ;       Terminate a BEGIN-UNTIL
                                   3574 ;       indefinite loop structure.
                                   3575 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015B9                       3576         _HEADER UNTIL,IMEDD+5,"UNTIL"
      0015B9 15 B0                    1         .word LINK 
                           0015BB     2         LINK=.
      0015BB 85                       3         .byte IMEDD+5  
      0015BC 55 4E 54 49 4C           4         .ascii "UNTIL"
      0015C1                          5         UNTIL:
      0015C1 CD 15 34         [ 4] 3577         CALL     COMPI
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      0015C4 04 98                 3578         .word    QBRAN 
      0015C6 CD 07 C4         [ 4] 3579         call ADRADJ
      0015C9 CC 14 EF         [ 2] 3580         JP     COMMA
                                   3581 
                                   3582 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3583 ;       AGAIN   ( a -- )
                                   3584 ;       Terminate a BEGIN-AGAIN
                                   3585 ;       infinite loop structure.
                                   3586 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015CC                       3587         _HEADER AGAIN,IMEDD+5,"AGAIN"
      0015CC 15 BB                    1         .word LINK 
                           0015CE     2         LINK=.
      0015CE 85                       3         .byte IMEDD+5  
      0015CF 41 47 41 49 4E           4         .ascii "AGAIN"
      0015D4                          5         AGAIN:
      0015D4 CD 15 34         [ 4] 3588         CALL     COMPI
      0015D7 04 B4                 3589         .word BRAN
      0015D9 CD 07 C4         [ 4] 3590         call ADRADJ 
      0015DC CC 14 EF         [ 2] 3591         JP     COMMA
                                   3592 
                                   3593 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3594 ;       IF      ( -- A )
                                   3595 ;       Begin a conditional branch.
                                   3596 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015DF                       3597         _HEADER IFF,IMEDD+2,"IF"
      0015DF 15 CE                    1         .word LINK 
                           0015E1     2         LINK=.
      0015E1 82                       3         .byte IMEDD+2  
      0015E2 49 46                    4         .ascii "IF"
      0015E4                          5         IFF:
      0015E4 CD 15 34         [ 4] 3598         CALL     COMPI
      0015E7 04 98                 3599         .word QBRAN
      0015E9 CD 0C AB         [ 4] 3600         CALL     HERE
      0015EC CD 0B CE         [ 4] 3601         CALL     ZERO
      0015EF CC 14 EF         [ 2] 3602         JP     COMMA
                                   3603 
                                   3604 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3605 ;       THEN        ( A -- )
                                   3606 ;       Terminate a conditional 
                                   3607 ;       branch structure.
                                   3608 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015F2                       3609         _HEADER THENN,IMEDD+4,"THEN"
      0015F2 15 E1                    1         .word LINK 
                           0015F4     2         LINK=.
      0015F4 84                       3         .byte IMEDD+4  
      0015F5 54 48 45 4E              4         .ascii "THEN"
      0015F9                          5         THENN:
      0015F9 CD 0C AB         [ 4] 3610         CALL     HERE
      0015FC CD 07 C4         [ 4] 3611         call ADRADJ 
      0015FF CD 06 31         [ 4] 3612         CALL     SWAPP
      001602 CC 04 D1         [ 2] 3613         JP     STORE
                                   3614 
                                   3615 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3616 ;       ELSE        ( A -- A )
                                   3617 ;       Start the false clause in 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                   3618 ;       an IF-ELSE-THEN structure.
                                   3619 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001605                       3620         _HEADER ELSEE,IMEDD+4,"ELSE"
      001605 15 F4                    1         .word LINK 
                           001607     2         LINK=.
      001607 84                       3         .byte IMEDD+4  
      001608 45 4C 53 45              4         .ascii "ELSE"
      00160C                          5         ELSEE:
      00160C CD 15 34         [ 4] 3621         CALL     COMPI
      00160F 04 B4                 3622         .word BRAN
      001611 CD 0C AB         [ 4] 3623         CALL     HERE
      001614 CD 0B CE         [ 4] 3624         CALL     ZERO
      001617 CD 14 EF         [ 4] 3625         CALL     COMMA
      00161A CD 06 31         [ 4] 3626         CALL     SWAPP
      00161D CD 0C AB         [ 4] 3627         CALL     HERE
      001620 CD 07 C4         [ 4] 3628         call ADRADJ 
      001623 CD 06 31         [ 4] 3629         CALL     SWAPP
      001626 CC 04 D1         [ 2] 3630         JP     STORE
                                   3631 
                                   3632 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3633 ;       AHEAD       ( -- A )
                                   3634 ;       Compile a forward branch
                                   3635 ;       instruction.
                                   3636 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001629                       3637         _HEADER AHEAD,IMEDD+5,"AHEAD"
      001629 16 07                    1         .word LINK 
                           00162B     2         LINK=.
      00162B 85                       3         .byte IMEDD+5  
      00162C 41 48 45 41 44           4         .ascii "AHEAD"
      001631                          5         AHEAD:
      001631 CD 15 34         [ 4] 3638         CALL     COMPI
      001634 04 B4                 3639         .word BRAN
      001636 CD 0C AB         [ 4] 3640         CALL     HERE
      001639 CD 0B CE         [ 4] 3641         CALL     ZERO
      00163C CC 14 EF         [ 2] 3642         JP     COMMA
                                   3643 
                                   3644 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3645 ;       WHILE       ( a -- A a )
                                   3646 ;       Conditional branch out of a 
                                   3647 ;       BEGIN-WHILE-REPEAT loop.
                                   3648 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00163F                       3649         _HEADER WHILE,IMEDD+5,"WHILE"
      00163F 16 2B                    1         .word LINK 
                           001641     2         LINK=.
      001641 85                       3         .byte IMEDD+5  
      001642 57 48 49 4C 45           4         .ascii "WHILE"
      001647                          5         WHILE:
      001647 CD 15 34         [ 4] 3650         CALL     COMPI
      00164A 04 98                 3651         .word QBRAN
      00164C CD 0C AB         [ 4] 3652         CALL     HERE
      00164F CD 0B CE         [ 4] 3653         CALL     ZERO
      001652 CD 14 EF         [ 4] 3654         CALL     COMMA
      001655 CC 06 31         [ 2] 3655         JP     SWAPP
                                   3656 
                                   3657 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                                   3658 ;       REPEAT      ( A a -- )
                                   3659 ;       Terminate a BEGIN-WHILE-REPEAT 
                                   3660 ;       indefinite loop.
                                   3661 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001658                       3662         _HEADER REPEA,IMEDD+6,"REPEAT"
      001658 16 41                    1         .word LINK 
                           00165A     2         LINK=.
      00165A 86                       3         .byte IMEDD+6  
      00165B 52 45 50 45 41 54        4         .ascii "REPEAT"
      001661                          5         REPEA:
      001661 CD 15 34         [ 4] 3663         CALL     COMPI
      001664 04 B4                 3664         .word BRAN
      001666 CD 07 C4         [ 4] 3665         call ADRADJ 
      001669 CD 14 EF         [ 4] 3666         CALL     COMMA
      00166C CD 0C AB         [ 4] 3667         CALL     HERE
      00166F CD 07 C4         [ 4] 3668         call ADRADJ 
      001672 CD 06 31         [ 4] 3669         CALL     SWAPP
      001675 CC 04 D1         [ 2] 3670         JP     STORE
                                   3671 
                                   3672 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3673 ;       AFT         ( a -- a A )
                                   3674 ;       Jump to THEN in a FOR-AFT-THEN-NEXT 
                                   3675 ;       loop the first time through.
                                   3676 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001678                       3677         _HEADER AFT,IMEDD+3,"AFT"
      001678 16 5A                    1         .word LINK 
                           00167A     2         LINK=.
      00167A 83                       3         .byte IMEDD+3  
      00167B 41 46 54                 4         .ascii "AFT"
      00167E                          5         AFT:
      00167E CD 06 17         [ 4] 3678         CALL     DROP
      001681 CD 16 31         [ 4] 3679         CALL     AHEAD
      001684 CD 0C AB         [ 4] 3680         CALL     HERE
      001687 CC 06 31         [ 2] 3681         JP     SWAPP
                                   3682 
                                   3683 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3684 ;       ABORT"      ( -- ; <string> )
                                   3685 ;       Conditional abort with an error message.
                                   3686 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00168A                       3687         _HEADER ABRTQ,IMEDD+6,'ABORT"'
      00168A 16 7A                    1         .word LINK 
                           00168C     2         LINK=.
      00168C 86                       3         .byte IMEDD+6  
      00168D 41 42 4F 52 54 22        4         .ascii 'ABORT"'
      001693                          5         ABRTQ:
      001693 CD 15 34         [ 4] 3688         CALL     COMPI
      001696 13 B1                 3689         .word ABORQ
      001698 CC 15 5E         [ 2] 3690         JP     STRCQ
                                   3691 
                                   3692 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3693 ;       $"     ( -- ; <string> )
                                   3694 ;       Compile an inline string literal.
                                   3695 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00169B                       3696         _HEADER STRQ,IMEDD+2,'$"'
      00169B 16 8C                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                           00169D     2         LINK=.
      00169D 82                       3         .byte IMEDD+2  
      00169E 24 22                    4         .ascii '$"'
      0016A0                          5         STRQ:
      0016A0 CD 15 34         [ 4] 3697         CALL     COMPI
      0016A3 0F 6F                 3698         .word STRQP 
      0016A5 CC 15 5E         [ 2] 3699         JP     STRCQ
                                   3700 
                                   3701 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3702 ;       ."          ( -- ; <string> )
                                   3703 ;       Compile an inline string literal 
                                   3704 ;       to be typed out at run time.
                                   3705 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016A8                       3706         _HEADER DOTQ,IMEDD+2,'."'
      0016A8 16 9D                    1         .word LINK 
                           0016AA     2         LINK=.
      0016AA 82                       3         .byte IMEDD+2  
      0016AB 2E 22                    4         .ascii '."'
      0016AD                          5         DOTQ:
      0016AD CD 15 34         [ 4] 3707         CALL     COMPI
      0016B0 0F 73                 3708         .word DOTQP 
      0016B2 CC 15 5E         [ 2] 3709         JP     STRCQ
                                   3710 
                                   3711 ;; Name compiler
                                   3712 
                                   3713 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3714 ;       ?UNIQUE ( a -- a )
                                   3715 ;       Display a warning message
                                   3716 ;       if word already exists.
                                   3717 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016B5                       3718         _HEADER UNIQU,7,"?UNIQUE"
      0016B5 16 AA                    1         .word LINK 
                           0016B7     2         LINK=.
      0016B7 07                       3         .byte 7  
      0016B8 3F 55 4E 49 51 55 45     4         .ascii "?UNIQUE"
      0016BF                          5         UNIQU:
      0016BF CD 06 21         [ 4] 3719         CALL     DUPP
      0016C2 CD 12 A5         [ 4] 3720         CALL     NAMEQ   ;?name exists
      0016C5 CD 04 98         [ 4] 3721         CALL     QBRAN
      0016C8 16 DE                 3722         .word      UNIQ1
      0016CA CD 0F 73         [ 4] 3723         CALL     DOTQP   ;redef are OK
      0016CD 07                    3724         .byte       7
      0016CE 20 72 65 44 65 66 20  3725         .ascii     " reDef "       
      0016D5 CD 06 49         [ 4] 3726         CALL     OVER
      0016D8 CD 0C 94         [ 4] 3727         CALL     COUNT
      0016DB CD 0F 2E         [ 4] 3728         CALL     TYPES   ;just in case
      0016DE CC 06 17         [ 2] 3729 UNIQ1:  JP     DROP
                                   3730 
                                   3731 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3732 ;       $,n     ( na -- )
                                   3733 ;       Build a new dictionary name
                                   3734 ;       using string at na.
                                   3735 ; compile dans l'espace des variables 
                                   3736 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3737 ;        _HEADER SNAME,3,^/"$,n"/
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      0016E1                       3738 SNAME: 
      0016E1 CD 06 21         [ 4] 3739         CALL     DUPP
      0016E4 CD 05 01         [ 4] 3740         CALL     CAT     ;?null input
      0016E7 CD 04 98         [ 4] 3741         CALL     QBRAN
      0016EA 17 17                 3742         .word      PNAM1
      0016EC CD 16 BF         [ 4] 3743         CALL     UNIQU   ;?redefinition
      0016EF CD 06 21         [ 4] 3744         CALL     DUPP
      0016F2 CD 0C 94         [ 4] 3745         CALL     COUNT
      0016F5 CD 08 46         [ 4] 3746         CALL     PLUS
      0016F8 CD 07 78         [ 4] 3747         CALL     VPP
      0016FB CD 04 D1         [ 4] 3748         CALL     STORE
      0016FE CD 06 21         [ 4] 3749         CALL     DUPP
      001701 CD 07 96         [ 4] 3750         CALL     LAST
      001704 CD 04 D1         [ 4] 3751         CALL     STORE   ;save na for vocabulary link
      001707 CD 0B 46         [ 4] 3752         CALL     CELLM   ;link address
      00170A CD 07 6A         [ 4] 3753         CALL     CNTXT
      00170D CD 04 E3         [ 4] 3754         CALL     AT
      001710 CD 06 31         [ 4] 3755         CALL     SWAPP
      001713 CD 04 D1         [ 4] 3756         CALL     STORE
      001716 81               [ 4] 3757         RET     ;save code pointer
      001717 CD 0F 6F         [ 4] 3758 PNAM1:  CALL     STRQP
      00171A 05                    3759         .byte      5
      00171B 20 6E 61 6D 65        3760         .ascii     " name" ;null input
      001720 CC 13 B9         [ 2] 3761         JP     ABOR1
                                   3762 
                                   3763 ;; FORTH compiler
                                   3764 
                                   3765 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3766 ;       $COMPILE        ( a -- )
                                   3767 ;       Compile next word to
                                   3768 ;       dictionary as a token or literal.
                                   3769 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001723                       3770         _HEADER SCOMP,8,"$COMPILE"
      001723 16 B7                    1         .word LINK 
                           001725     2         LINK=.
      001725 08                       3         .byte 8  
      001726 24 43 4F 4D 50 49 4C     4         .ascii "$COMPILE"
             45
      00172E                          5         SCOMP:
      00172E CD 12 A5         [ 4] 3771         CALL     NAMEQ
      001731 CD 07 D4         [ 4] 3772         CALL     QDUP    ;?defined
      001734 CD 04 98         [ 4] 3773         CALL     QBRAN
      001737 17 4F                 3774         .word      SCOM2
      001739 CD 04 E3         [ 4] 3775         CALL     AT
      00173C CD 04 6F         [ 4] 3776         CALL     DOLIT
      00173F 80 00                 3777         .word     0x8000	;  IMEDD*256
      001741 CD 06 7E         [ 4] 3778         CALL     ANDD    ;?immediate
      001744 CD 04 98         [ 4] 3779         CALL     QBRAN
      001747 17 4C                 3780         .word      SCOM1
      001749 CC 04 C4         [ 2] 3781         JP     EXECU
      00174C CC 17 F9         [ 2] 3782 SCOM1:  JP     JSRC
      00174F CD 24 AD         [ 4] 3783 SCOM2:  CALL     NUMBQ   ;try to convert to number
      001752 CD 07 D4         [ 4] 3784         CALL    QDUP  
      001755 CD 04 98         [ 4] 3785         CALL     QBRAN
      001758 13 B9                 3786         .word      ABOR1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      00175A                       3787         _DOLIT  -1
      00175A CD 04 6F         [ 4]    1     CALL DOLIT 
      00175D FF FF                    2     .word -1 
      00175F CD 08 E5         [ 4] 3788         CALL    EQUAL
      001762                       3789         _QBRAN DLITER  
      001762 CD 04 98         [ 4]    1     CALL QBRAN
      001765 28 83                    2     .word DLITER
      001767 CC 15 56         [ 2] 3790         JP     LITER
                                   3791 
                                   3792 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3793 ;       OVERT   ( -- )
                                   3794 ;       Link a new word into vocabulary.
                                   3795 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00176A                       3796         _HEADER OVERT,5,"OVERT"
      00176A 17 25                    1         .word LINK 
                           00176C     2         LINK=.
      00176C 05                       3         .byte 5  
      00176D 4F 56 45 52 54           4         .ascii "OVERT"
      001772                          5         OVERT:
      001772 CD 07 96         [ 4] 3797         CALL     LAST
      001775 CD 04 E3         [ 4] 3798         CALL     AT
      001778 CD 07 6A         [ 4] 3799         CALL     CNTXT
      00177B CC 04 D1         [ 2] 3800         JP     STORE
                                   3801 
                                   3802 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3803 ;       ;       ( -- )
                                   3804 ;       Terminate a colon definition.
                                   3805 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00177E                       3806         _HEADER SEMIS,IMEDD+COMPO+1,^/";"/
      00177E 17 6C                    1         .word LINK 
                           001780     2         LINK=.
      001780 C1                       3         .byte IMEDD+COMPO+1  
      001781 3B                       4         .ascii ";"
      001782                          5         SEMIS:
                           000001  3807 .if OPTIMIZE ; more compact and faster
      001782 CD 04 6F         [ 4] 3808         call DOLIT 
      001785 00 81                 3809         .word 0x81   ; opcode for RET 
      001787 CD 15 06         [ 4] 3810         call CCOMMA 
                           000000  3811 .else
                                   3812         CALL     COMPI
                                   3813         .word EXIT 
                                   3814 .endif 
      00178A CD 14 1A         [ 4] 3815         CALL     LBRAC
      00178D CD 17 72         [ 4] 3816         call OVERT 
      001790 CD 21 82         [ 4] 3817         CALL FMOVE
      001793 CD 07 D4         [ 4] 3818         call QDUP 
      001796 CD 04 98         [ 4] 3819         call QBRAN 
      001799 18 C9                 3820         .word SET_RAMLAST 
      00179B CD 22 16         [ 4] 3821         CALL UPDATPTR
      00179E 81               [ 4] 3822         RET 
                                   3823 
                                   3824 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3825 ;       Terminate an ISR definition 
                                   3826 ;       retourn ca of ISR as double
                                   3827 ;       I; ( -- ud )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                   3828 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00179F                       3829        _HEADER ISEMI,2+IMEDD+COMPO,^/"I;"/
      00179F 17 80                    1         .word LINK 
                           0017A1     2         LINK=.
      0017A1 C2                       3         .byte 2+IMEDD+COMPO  
      0017A2 49 3B                    4         .ascii "I;"
      0017A4                          5         ISEMI:
      0017A4 1D 00 02         [ 2] 3830         subw x,#CELLL  
      0017A7 90 AE 00 80      [ 2] 3831         ldw y,#IRET_CODE 
      0017AB FF               [ 2] 3832         ldw (x),y 
      0017AC CD 15 06         [ 4] 3833         call CCOMMA
      0017AF CD 14 1A         [ 4] 3834         call LBRAC 
      0017B2 CD 22 5B         [ 4] 3835         call IFMOVE
      0017B5 CD 07 D4         [ 4] 3836         call QDUP 
      0017B8 CD 04 98         [ 4] 3837         CALL QBRAN 
      0017BB 18 C9                 3838         .word SET_RAMLAST
      0017BD CD 07 86         [ 4] 3839         CALL CPP
      0017C0 CD 04 E3         [ 4] 3840         call AT 
      0017C3 CD 06 31         [ 4] 3841         call SWAPP 
      0017C6 CD 07 86         [ 4] 3842         CALL CPP 
      0017C9 CD 04 D1         [ 4] 3843         call STORE 
      0017CC CD 1C 13         [ 4] 3844         call UPDATCP 
      0017CF CD 1B D0         [ 4] 3845         call EEPVP 
      0017D2 CD 06 17         [ 4] 3846         call DROP 
      0017D5 CD 04 E3         [ 4] 3847         call AT 
      0017D8 CD 07 78         [ 4] 3848         call VPP 
      0017DB CD 04 D1         [ 4] 3849         call STORE 
      0017DE CC 0B CE         [ 2] 3850         jp ZERO
      0017E1 81               [ 4] 3851         ret           
                                   3852         
                                   3853 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3854 ;       ]       ( -- )
                                   3855 ;       Start compiling words in
                                   3856 ;       input stream.
                                   3857 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017E2                       3858         _HEADER RBRAC,1,"]"
      0017E2 17 A1                    1         .word LINK 
                           0017E4     2         LINK=.
      0017E4 01                       3         .byte 1  
      0017E5 5D                       4         .ascii "]"
      0017E6                          5         RBRAC:
      0017E6 CD 04 6F         [ 4] 3859         CALL   DOLIT
      0017E9 17 2E                 3860         .word  SCOMP
      0017EB CD 07 48         [ 4] 3861         CALL   TEVAL
      0017EE CC 04 D1         [ 2] 3862         JP     STORE
                                   3863 
                                   3864 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3865 ;       CALL,    ( ca -- )
                                   3866 ;       Compile a subroutine call.
                                   3867 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017F1                       3868         _HEADER JSRC,5,^/"CALL,"/
      0017F1 17 E4                    1         .word LINK 
                           0017F3     2         LINK=.
      0017F3 05                       3         .byte 5  
      0017F4 43 41 4C 4C 2C           4         .ascii "CALL,"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      0017F9                          5         JSRC:
      0017F9 CD 04 6F         [ 4] 3869         CALL     DOLIT
      0017FC 00 CD                 3870         .word     CALLL     ;CALL
      0017FE CD 15 06         [ 4] 3871         CALL     CCOMMA
      001801 CC 14 EF         [ 2] 3872         JP     COMMA
                                   3873 
                                   3874 ;       INIT-OFS ( -- )
                                   3875 ;       compute offset to adjust jump address 
                                   3876 ;       set variable OFFSET 
      001804 17 F3                 3877         .word LINK 
                           001806  3878         LINK=.
      001806 08                    3879         .byte 8 
      001807 49 4E 49 54 2D 4F 46  3880         .ascii "INIT-OFS" 
             53
      00180F                       3881 INITOFS:
      00180F CD 07 37         [ 4] 3882         call TFLASH 
      001812 CD 04 E3         [ 4] 3883         CALL AT 
      001815 CD 06 21         [ 4] 3884         CALL DUPP 
      001818 CD 04 98         [ 4] 3885         call QBRAN
      00181B 18 2C                 3886         .word 1$
      00181D CD 06 17         [ 4] 3887         call DROP  
      001820 CD 07 86         [ 4] 3888         call CPP 
      001823 CD 04 E3         [ 4] 3889         call AT 
      001826 CD 0C AB         [ 4] 3890         call HERE
      001829 CD 08 BD         [ 4] 3891         call SUBB 
      00182C CD 07 BB         [ 4] 3892 1$:     call OFFSET 
      00182F CC 04 D1         [ 2] 3893         jp STORE  
                                   3894 
                                   3895 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3896 ;       :       ( -- ; <string> )
                                   3897 ;       Start a new colon definition
                                   3898 ;       using next word as its name.
                                   3899 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001832                       3900         _HEADER COLON,1,":"
      001832 18 06                    1         .word LINK 
                           001834     2         LINK=.
      001834 01                       3         .byte 1  
      001835 3A                       4         .ascii ":"
      001836                          5         COLON:
      001836 CD 18 0F         [ 4] 3901         call INITOFS       
      001839 CD 11 A8         [ 4] 3902         CALL   TOKEN
      00183C CD 16 E1         [ 4] 3903         CALL   SNAME
      00183F CC 17 E6         [ 2] 3904         JP     RBRAC
                                   3905 
                                   3906 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3907 ;       I:  ( -- )
                                   3908 ;       Start interrupt service 
                                   3909 ;       routine definition
                                   3910 ;       those definition have 
                                   3911 ;       no name.
                                   3912 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001842                       3913         _HEADER ICOLON,2,"I:"
      001842 18 34                    1         .word LINK 
                           001844     2         LINK=.
      001844 02                       3         .byte 2  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001845 49 3A                    4         .ascii "I:"
      001847                          5         ICOLON:
      001847 CD 18 0F         [ 4] 3914         call INITOFS 
      00184A CC 17 E6         [ 2] 3915         jp RBRAC  
                                   3916 
                                   3917 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3918 ;       IMMEDIATE       ( -- )
                                   3919 ;       Make last compiled word
                                   3920 ;       an immediate word.
                                   3921 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00184D                       3922         _HEADER IMMED,9,"IMMEDIATE"
      00184D 18 44                    1         .word LINK 
                           00184F     2         LINK=.
      00184F 09                       3         .byte 9  
      001850 49 4D 4D 45 44 49 41     4         .ascii "IMMEDIATE"
             54 45
      001859                          5         IMMED:
      001859 CD 04 6F         [ 4] 3923         CALL     DOLIT
      00185C 80 00                 3924         .word     0x8000	;  IMEDD*256
      00185E CD 07 96         [ 4] 3925         CALL     LAST
      001861 CD 04 E3         [ 4] 3926         CALL     AT
      001864 CD 04 E3         [ 4] 3927         CALL     AT
      001867 CD 06 92         [ 4] 3928         CALL     ORR
      00186A CD 07 96         [ 4] 3929         CALL     LAST
      00186D CD 04 E3         [ 4] 3930         CALL     AT
      001870 CC 04 D1         [ 2] 3931         JP     STORE
                                   3932 
                                   3933 ;; Defining words
                                   3934 
                                   3935 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3936 ;       CREATE  ( -- ; <string> )
                                   3937 ;       Compile a new array
                                   3938 ;       without allocating space.
                                   3939 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001873                       3940         _HEADER CREAT,6,"CREATE"
      001873 18 4F                    1         .word LINK 
                           001875     2         LINK=.
      001875 06                       3         .byte 6  
      001876 43 52 45 41 54 45        4         .ascii "CREATE"
      00187C                          5         CREAT:
      00187C CD 11 A8         [ 4] 3941         CALL     TOKEN
      00187F CD 16 E1         [ 4] 3942         CALL     SNAME
      001882 CD 17 72         [ 4] 3943         CALL     OVERT        
      001885 CD 15 34         [ 4] 3944         CALL     COMPI 
      001888 06 D7                 3945         .word DOVAR 
      00188A 81               [ 4] 3946         RET
                                   3947 
                                   3948 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3949 ;       VARIABLE  ( -- ; <string> )
                                   3950 ;       Compile a new variable
                                   3951 ;       initialized to 0.
                                   3952 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00188B                       3953         _HEADER VARIA,8,"VARIABLE"
      00188B 18 75                    1         .word LINK 
                           00188D     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      00188D 08                       3         .byte 8  
      00188E 56 41 52 49 41 42 4C     4         .ascii "VARIABLE"
             45
      001896                          5         VARIA:
                                   3954 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      001896 CD 0C AB         [ 4] 3955         CALL HERE
      001899 CD 06 21         [ 4] 3956         CALL DUPP 
      00189C CD 0B 37         [ 4] 3957         CALL CELLP
      00189F CD 07 78         [ 4] 3958         CALL VPP 
      0018A2 CD 04 D1         [ 4] 3959         CALL STORE
      0018A5 CD 18 7C         [ 4] 3960         CALL CREAT
      0018A8 CD 06 21         [ 4] 3961         CALL DUPP
      0018AB CD 14 EF         [ 4] 3962         CALL COMMA
      0018AE CD 0B CE         [ 4] 3963         CALL ZERO
      0018B1 CD 06 31         [ 4] 3964         call SWAPP 
      0018B4 CD 04 D1         [ 4] 3965         CALL STORE
      0018B7 CD 21 82         [ 4] 3966         CALL FMOVE ; move definition to FLASH
      0018BA CD 07 D4         [ 4] 3967         CALL QDUP 
      0018BD CD 04 98         [ 4] 3968         CALL QBRAN 
      0018C0 18 C9                 3969         .word SET_RAMLAST   
      0018C2 CD 1C 2A         [ 4] 3970         call UPDATVP  ; don't update if variable kept in RAM.
      0018C5 CD 22 16         [ 4] 3971         CALL UPDATPTR
      0018C8 81               [ 4] 3972         RET         
      0018C9                       3973 SET_RAMLAST: 
      0018C9 CD 07 96         [ 4] 3974         CALL LAST 
      0018CC CD 04 E3         [ 4] 3975         CALL AT 
      0018CF CD 07 A9         [ 4] 3976         CALL RAMLAST 
      0018D2 CC 04 D1         [ 2] 3977         jp STORE  
                                   3978 
                                   3979 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3980 ;       CONSTANT  ( n -- ; <string> )
                                   3981 ;       Compile a new constant 
                                   3982 ;       n CONSTANT name 
                                   3983 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0018D5                       3984         _HEADER CONSTANT,8,"CONSTANT"
      0018D5 18 8D                    1         .word LINK 
                           0018D7     2         LINK=.
      0018D7 08                       3         .byte 8  
      0018D8 43 4F 4E 53 54 41 4E     4         .ascii "CONSTANT"
             54
      0018E0                          5         CONSTANT:
      0018E0 CD 11 A8         [ 4] 3985         CALL TOKEN
      0018E3 CD 16 E1         [ 4] 3986         CALL SNAME 
      0018E6 CD 17 72         [ 4] 3987         CALL OVERT 
      0018E9 CD 15 34         [ 4] 3988         CALL COMPI 
      0018EC 19 00                 3989         .word DOCONST
      0018EE CD 14 EF         [ 4] 3990         CALL COMMA 
      0018F1 CD 21 82         [ 4] 3991         CALL FMOVE
      0018F4 CD 07 D4         [ 4] 3992         CALL QDUP 
      0018F7 CD 04 98         [ 4] 3993         CALL QBRAN 
      0018FA 18 C9                 3994         .word SET_RAMLAST  
      0018FC CD 22 16         [ 4] 3995         CALL UPDATPTR  
      0018FF 81               [ 4] 3996 1$:     RET          
                                   3997 
                                   3998 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                                   3999 ; CONSTANT runtime semantic 
                                   4000 ; doCONST  ( -- n )
                                   4001 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4002 ;       _HEADER DOCONST,7,"DOCONST"
      001900                       4003 DOCONST:
      001900 1D 00 02         [ 2] 4004         subw x,#CELLL
      001903 90 85            [ 2] 4005         popw y 
      001905 90 FE            [ 2] 4006         ldw y,(y) 
      001907 FF               [ 2] 4007         ldw (x),y 
      001908 81               [ 4] 4008         ret 
                                   4009 
                                   4010 ;----------------------------------
                                   4011 ; create double constant 
                                   4012 ; 2CONSTANT ( d -- ; <string> )
                                   4013 ;----------------------------------
      001909                       4014         _HEADER DCONST,9,"2CONSTANT"
      001909 18 D7                    1         .word LINK 
                           00190B     2         LINK=.
      00190B 09                       3         .byte 9  
      00190C 32 43 4F 4E 53 54 41     4         .ascii "2CONSTANT"
             4E 54
      001915                          5         DCONST:
      001915 CD 11 A8         [ 4] 4015         CALL TOKEN
      001918 CD 16 E1         [ 4] 4016         CALL SNAME 
      00191B CD 17 72         [ 4] 4017         CALL OVERT 
      00191E CD 15 34         [ 4] 4018         CALL COMPI 
      001921 19 38                 4019         .word DO_DCONST
      001923 CD 14 EF         [ 4] 4020         CALL COMMA
      001926 CD 14 EF         [ 4] 4021         CALL COMMA  
      001929 CD 21 82         [ 4] 4022         CALL FMOVE
      00192C CD 07 D4         [ 4] 4023         CALL QDUP 
      00192F CD 04 98         [ 4] 4024         CALL QBRAN 
      001932 18 C9                 4025         .word SET_RAMLAST  
      001934 CD 22 16         [ 4] 4026         CALL UPDATPTR  
      001937 81               [ 4] 4027 1$:     RET          
                                   4028     
                                   4029 ;----------------------------------
                                   4030 ; runtime for DCONST 
                                   4031 ; stack double constant 
                                   4032 ; DO-DCONST ( -- d )
                                   4033 ;-----------------------------------
                                   4034 ;       _HEADER DO_DCONST,9,"DO-DCONST"
      001938                       4035 DO_DCONST:
      001938 90 85            [ 2] 4036     popw y 
      00193A 90 BF 26         [ 2] 4037     ldw YTEMP,y 
      00193D 1D 00 04         [ 2] 4038     subw x,#2*CELLL 
      001940 90 FE            [ 2] 4039     ldw y,(y)
      001942 FF               [ 2] 4040     ldw (x),y 
      001943 90 BE 26         [ 2] 4041     ldw y,YTEMP 
      001946 90 EE 02         [ 2] 4042     ldw y,(2,y)
      001949 EF 02            [ 2] 4043     ldw (2,x),y 
      00194B 81               [ 4] 4044     ret 
                                   4045 
                                   4046 ;; Tools
                                   4047 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                   4048 ;       _TYPE   ( b u -- )
                                   4049 ;       Display a string. Filter
                                   4050 ;       non-printing characters.
                                   4051 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00194C                       4052         _HEADER UTYPE,5,"_TYPE"
      00194C 19 0B                    1         .word LINK 
                           00194E     2         LINK=.
      00194E 05                       3         .byte 5  
      00194F 5F 54 59 50 45           4         .ascii "_TYPE"
      001954                          5         UTYPE:
      001954 CD 05 EA         [ 4] 4053         CALL     TOR     ;start count down loop
      001957 20 0F            [ 2] 4054         JRA     UTYP2   ;skip first pass
      001959 CD 06 21         [ 4] 4055 UTYP1:  CALL     DUPP
      00195C CD 05 01         [ 4] 4056         CALL     CAT
      00195F CD 0B F8         [ 4] 4057         CALL     TCHAR
      001962 CD 04 36         [ 4] 4058         CALL     EMIT    ;display only printable
      001965 CD 0B 62         [ 4] 4059         CALL     ONEP    ;increment address
      001968 CD 04 83         [ 4] 4060 UTYP2:  CALL     DONXT
      00196B 19 59                 4061         .word      UTYP1   ;loop till done
      00196D CC 06 17         [ 2] 4062         JP     DROP
                                   4063 
                                   4064 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4065 ;       dm+     ( a u -- a )
                                   4066 ;       Dump u bytes from ,
                                   4067 ;       leaving a+u on  stack.
                                   4068 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001970                       4069         _HEADER DUMPP,3,"DM+"
      001970 19 4E                    1         .word LINK 
                           001972     2         LINK=.
      001972 03                       3         .byte 3  
      001973 44 4D 2B                 4         .ascii "DM+"
      001976                          5         DUMPP:
      001976 CD 06 49         [ 4] 4070         CALL     OVER
      001979 CD 04 6F         [ 4] 4071         CALL     DOLIT
      00197C 00 04                 4072         .word      4
      00197E CD 0F 9C         [ 4] 4073         CALL     UDOTR   ;display address
      001981 CD 0F 04         [ 4] 4074         CALL     SPACE
      001984 CD 05 EA         [ 4] 4075         CALL     TOR     ;start count down loop
      001987 20 11            [ 2] 4076         JRA     PDUM2   ;skip first pass
      001989 CD 06 21         [ 4] 4077 PDUM1:  CALL     DUPP
      00198C CD 05 01         [ 4] 4078         CALL     CAT
      00198F CD 04 6F         [ 4] 4079         CALL     DOLIT
      001992 00 03                 4080         .word      3
      001994 CD 0F 9C         [ 4] 4081         CALL     UDOTR   ;display numeric data
      001997 CD 0B 62         [ 4] 4082         CALL     ONEP    ;increment address
      00199A CD 04 83         [ 4] 4083 PDUM2:  CALL     DONXT
      00199D 19 89                 4084         .word      PDUM1   ;loop till done
      00199F 81               [ 4] 4085         RET
                                   4086 
                                   4087 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4088 ;       DUMP    ( a u -- )
                                   4089 ;       Dump u bytes from a,
                                   4090 ;       in a formatted manner.
                                   4091 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0019A0                       4092         _HEADER DUMP,4,"DUMP"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      0019A0 19 72                    1         .word LINK 
                           0019A2     2         LINK=.
      0019A2 04                       3         .byte 4  
      0019A3 44 55 4D 50              4         .ascii "DUMP"
      0019A7                          5         DUMP:
      0019A7 CD 06 E7         [ 4] 4093         CALL     BASE
      0019AA CD 04 E3         [ 4] 4094         CALL     AT
      0019AD CD 05 EA         [ 4] 4095         CALL     TOR
      0019B0 CD 0E 63         [ 4] 4096         CALL     HEX     ;save radix, set hex
      0019B3 CD 04 6F         [ 4] 4097         CALL     DOLIT
      0019B6 00 10                 4098         .word      16
      0019B8 CD 0A 88         [ 4] 4099         CALL     SLASH   ;change count to lines
      0019BB CD 05 EA         [ 4] 4100         CALL     TOR     ;start count down loop
      0019BE CD 0F 46         [ 4] 4101 DUMP1:  CALL     CR
      0019C1 CD 04 6F         [ 4] 4102         CALL     DOLIT
      0019C4 00 10                 4103         .word      16
      0019C6 CD 08 31         [ 4] 4104         CALL     DDUP
      0019C9 CD 19 76         [ 4] 4105         CALL     DUMPP   ;display numeric
      0019CC CD 07 E5         [ 4] 4106         CALL     ROT
      0019CF CD 07 E5         [ 4] 4107         CALL     ROT
      0019D2 CD 0F 04         [ 4] 4108         CALL     SPACE
      0019D5 CD 0F 04         [ 4] 4109         CALL     SPACE
      0019D8 CD 19 54         [ 4] 4110         CALL     UTYPE   ;display printable characters
      0019DB CD 04 83         [ 4] 4111         CALL     DONXT
      0019DE 19 BE                 4112         .word      DUMP1   ;loop till done
      0019E0 CD 06 17         [ 4] 4113 DUMP3:  CALL     DROP
      0019E3 CD 05 34         [ 4] 4114         CALL     RFROM
      0019E6 CD 06 E7         [ 4] 4115         CALL     BASE
      0019E9 CC 04 D1         [ 2] 4116         JP     STORE   ;restore radix
                                   4117 
                                   4118 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4119 ;       .S      ( ... -- ... )
                                   4120 ;        Display  contents of stack.
                                   4121 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0019EC                       4122         _HEADER DOTS,2,".S"
      0019EC 19 A2                    1         .word LINK 
                           0019EE     2         LINK=.
      0019EE 02                       3         .byte 2  
      0019EF 2E 53                    4         .ascii ".S"
      0019F1                          5         DOTS:
      0019F1 CD 0F 46         [ 4] 4123         CALL     CR
      0019F4 CD 0C 10         [ 4] 4124         CALL     DEPTH   ;stack depth
      0019F7 CD 05 EA         [ 4] 4125         CALL     TOR     ;start count down loop
      0019FA 20 09            [ 2] 4126         JRA     DOTS2   ;skip first pass
      0019FC CD 05 45         [ 4] 4127 DOTS1:  CALL     RAT
      0019FF CD 0C 27         [ 4] 4128 	CALL     PICK
      001A02 CD 0F ED         [ 4] 4129         CALL     DOT     ;index stack, display contents
      001A05 CD 04 83         [ 4] 4130 DOTS2:  CALL     DONXT
      001A08 19 FC                 4131         .word      DOTS1   ;loop till done
      001A0A CD 0F 73         [ 4] 4132         CALL     DOTQP
      001A0D 05                    4133         .byte      5
      001A0E 20 3C 73 70 20        4134         .ascii     " <sp "
      001A13 81               [ 4] 4135         RET
                                   4136 
                                   4137 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                                   4138 ;       >NAME   ( ca -- na | F )
                                   4139 ;       Convert code address
                                   4140 ;       to a name address.
                                   4141 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A14                       4142         _HEADER TNAME,5,">NAME"
      001A14 19 EE                    1         .word LINK 
                           001A16     2         LINK=.
      001A16 05                       3         .byte 5  
      001A17 3E 4E 41 4D 45           4         .ascii ">NAME"
      001A1C                          5         TNAME:
      001A1C CD 07 6A         [ 4] 4143         CALL     CNTXT   ;vocabulary link
      001A1F CD 04 E3         [ 4] 4144 TNAM2:  CALL     AT
      001A22 CD 06 21         [ 4] 4145         CALL     DUPP    ;?last word in a vocabulary
      001A25 CD 04 98         [ 4] 4146         CALL     QBRAN
      001A28 1A 43                 4147         .word      TNAM4
      001A2A CD 08 31         [ 4] 4148         CALL     DDUP
      001A2D CD 11 B6         [ 4] 4149         CALL     NAMET
      001A30 CD 06 A7         [ 4] 4150         CALL     XORR    ;compare
      001A33 CD 04 98         [ 4] 4151         CALL     QBRAN
      001A36 1A 3D                 4152         .word      TNAM3
      001A38 CD 0B 46         [ 4] 4153         CALL     CELLM   ;continue with next word
      001A3B 20 E2            [ 2] 4154         JRA     TNAM2
      001A3D CD 06 31         [ 4] 4155 TNAM3:  CALL     SWAPP
      001A40 CC 06 17         [ 2] 4156         JP     DROP
      001A43 CD 08 26         [ 4] 4157 TNAM4:  CALL     DDROP
      001A46 CC 0B CE         [ 2] 4158         JP     ZERO
                                   4159 
                                   4160 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4161 ;       .ID     ( na -- )
                                   4162 ;        Display  name at address.
                                   4163 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A49                       4164         _HEADER DOTID,3,".ID"
      001A49 1A 16                    1         .word LINK 
                           001A4B     2         LINK=.
      001A4B 03                       3         .byte 3  
      001A4C 2E 49 44                 4         .ascii ".ID"
      001A4F                          5         DOTID:
      001A4F CD 07 D4         [ 4] 4165         CALL     QDUP    ;if zero no name
      001A52 CD 04 98         [ 4] 4166         CALL     QBRAN
      001A55 1A 65                 4167         .word      DOTI1
      001A57 CD 0C 94         [ 4] 4168         CALL     COUNT
      001A5A CD 04 6F         [ 4] 4169         CALL     DOLIT
      001A5D 00 1F                 4170         .word      0x1F
      001A5F CD 06 7E         [ 4] 4171         CALL     ANDD    ;mask lexicon bits
      001A62 CC 19 54         [ 2] 4172         JP     UTYPE
      001A65 CD 0F 73         [ 4] 4173 DOTI1:  CALL     DOTQP
      001A68 09                    4174         .byte      9
      001A69 20 6E 6F 4E 61 6D 65  4175         .ascii     " noName"
      001A70 81               [ 4] 4176         RET
                                   4177 
                           000000  4178 WANT_SEE=0
                           000000  4179 .if WANT_SEE 
                                   4180 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4181 ;       SEE     ( -- ; <string> )
                                   4182 ;       A simple decompiler.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                   4183 ;       Updated for byte machines.
                                   4184 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4185         _HEADER SEE,3,"SEE"
                                   4186         CALL     TICK    ;starting address
                                   4187         CALL     CR
                                   4188         CALL     ONEM
                                   4189 SEE1:   CALL     ONEP
                                   4190         CALL     DUPP
                                   4191         CALL     AT
                                   4192         CALL     DUPP
                                   4193         CALL     QBRAN
                                   4194         .word    SEE2
                                   4195         CALL     TNAME   ;?is it a name
                                   4196 SEE2:   CALL     QDUP    ;name address or zero
                                   4197         CALL     QBRAN
                                   4198         .word    SEE3
                                   4199         CALL     SPACE
                                   4200         CALL     DOTID   ;display name
                                   4201         CALL     ONEP
                                   4202         JRA      SEE4
                                   4203 SEE3:   CALL     DUPP
                                   4204         CALL     CAT
                                   4205         CALL     UDOT    ;display number
                                   4206 SEE4:   CALL     NUFQ    ;user control
                                   4207         CALL     QBRAN
                                   4208         .word    SEE1
                                   4209         JP     DROP
                                   4210 .endif ; WANT_SEE 
                                   4211 
                                   4212 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4213 ;       WORDS   ( -- )
                                   4214 ;       Display names in vocabulary.
                                   4215 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A71                       4216         _HEADER WORDS,5,"WORDS"
      001A71 1A 4B                    1         .word LINK 
                           001A73     2         LINK=.
      001A73 05                       3         .byte 5  
      001A74 57 4F 52 44 53           4         .ascii "WORDS"
      001A79                          5         WORDS:
      001A79 CD 0F 46         [ 4] 4217         CALL     CR
      001A7C CD 07 6A         [ 4] 4218         CALL     CNTXT   ;only in context
      001A7F CD 04 E3         [ 4] 4219 WORS1:  CALL     AT
      001A82 CD 07 D4         [ 4] 4220         CALL     QDUP    ;?at end of list
      001A85 CD 04 98         [ 4] 4221         CALL     QBRAN
      001A88 1A 9B                 4222         .word      WORS2
      001A8A CD 06 21         [ 4] 4223         CALL     DUPP
      001A8D CD 0F 04         [ 4] 4224         CALL     SPACE
      001A90 CD 1A 4F         [ 4] 4225         CALL     DOTID   ;display a name
      001A93 CD 0B 46         [ 4] 4226         CALL     CELLM
      001A96 CD 04 B4         [ 4] 4227         CALL     BRAN
      001A99 1A 7F                 4228         .word      WORS1
      001A9B 81               [ 4] 4229 WORS2:  RET
                                   4230 
                                   4231         
                                   4232 ;; Hardware reset
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                                   4233 
                                   4234 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4235 ;       hi      ( -- )
                                   4236 ;       Display sign-on message.
                                   4237 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A9C                       4238         _HEADER HI,2,"HI"
      001A9C 1A 73                    1         .word LINK 
                           001A9E     2         LINK=.
      001A9E 02                       3         .byte 2  
      001A9F 48 49                    4         .ascii "HI"
      001AA1                          5         HI:
      001AA1 CD 0F 46         [ 4] 4239         CALL     CR
      001AA4 CD 0F 73         [ 4] 4240         CALL     DOTQP   ;initialize I/O
      001AA7 0F                    4241         .byte      15
      001AA8 73 74 6D 38 65 46 6F  4242         .ascii     "stm8eForth v"
             72 74 68 20 76
      001AB4 34                    4243 	.byte      VER+'0'
      001AB5 2E                    4244         .byte      '.' 
      001AB6 30                    4245 	.byte      EXT+'0' ;version
      001AB7 CD 0F 73         [ 4] 4246         CALL    DOTQP
                           000001  4247 .if NUCLEO          
      001ABA 12                    4248         .byte 18
      001ABB 20 6F 6E 20 4E 55 43  4249         .ascii  " on NUCLEO-8S208RB"
             4C 45 4F 2D 38 53 32
             30 38 52 42
                                   4250 .endif
                           000000  4251 .if DISCOVERY
                                   4252         .byte 19
                                   4253         .ascii  " on STM8S-DISCOVERY"
                                   4254 .endif
                           000000  4255 .if DOORBELL
                                   4256         .byte 16
                                   4257         .ascii " on stm8s105k6b6"
                                   4258 .endif
      001ACD CC 0F 46         [ 2] 4259         JP     CR
                                   4260 
                           000000  4261 WANT_DEBUG=0
                           000000  4262 .if WANT_DEBUG 
                                   4263 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4264 ;       DEBUG      ( -- )
                                   4265 ;       Display sign-on message.
                                   4266 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4267         _HEADER DEBUG,5,"DEBUG"
                                   4268 	CALL DOLIT
                                   4269 	.word 0x65
                                   4270 	CALL EMIT
                                   4271 	CALL ZERO
                                   4272  	CALL ZLESS 
                                   4273 	CALL DOLIT
                                   4274 	.word 0xFFFE
                                   4275 	CALL ZLESS 
                                   4276 	CALL UPLUS 
                                   4277  	CALL DROP 
                                   4278 	CALL DOLIT
                                   4279 	.word 3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                                   4280 	CALL UPLUS 
                                   4281 	CALL UPLUS 
                                   4282  	CALL DROP
                                   4283 	CALL DOLIT
                                   4284 	.word 0x43
                                   4285 	CALL UPLUS 
                                   4286  	CALL DROP
                                   4287 	CALL EMIT
                                   4288 	CALL DOLIT
                                   4289 	.word 0x4F
                                   4290 	CALL DOLIT
                                   4291 	.word 0x6F
                                   4292  	CALL XORR
                                   4293 	CALL DOLIT
                                   4294 	.word 0xF0
                                   4295  	CALL ANDD
                                   4296 	CALL DOLIT
                                   4297 	.word 0x4F
                                   4298  	CALL ORR
                                   4299 	CALL EMIT
                                   4300 	CALL DOLIT
                                   4301 	.word 8
                                   4302 	CALL DOLIT
                                   4303 	.word 6
                                   4304  	CALL SWAPP
                                   4305 	CALL OVER
                                   4306 	CALL XORR
                                   4307 	CALL DOLIT
                                   4308 	.word 3
                                   4309 	CALL ANDD 
                                   4310 	CALL ANDD
                                   4311 	CALL DOLIT
                                   4312 	.word 0x70
                                   4313 	CALL UPLUS 
                                   4314 	CALL DROP
                                   4315 	CALL EMIT
                                   4316 	CALL ZERO
                                   4317 	CALL QBRAN
                                   4318 	.word DEBUG1
                                   4319 	CALL DOLIT
                                   4320 	.word 0x3F
                                   4321 DEBUG1:
                                   4322 	CALL DOLIT
                                   4323 	.word 0xFFFF
                                   4324 	CALL QBRAN
                                   4325 	.word DEBUG2
                                   4326 	CALL DOLIT
                                   4327 	.word 0x74
                                   4328 	CALL BRAN
                                   4329 	.word DEBUG3
                                   4330 DEBUG2:
                                   4331 	CALL DOLIT
                                   4332 	.word 0x21
                                   4333 DEBUG3:
                                   4334 	CALL EMIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



                                   4335 	CALL DOLIT
                                   4336 	.word 0x68
                                   4337 	CALL DOLIT
                                   4338 	.word 0x80
                                   4339 	CALL STORE
                                   4340 	CALL DOLIT
                                   4341 	.word 0x80
                                   4342 	CALL AT
                                   4343 	CALL EMIT
                                   4344 	CALL DOLIT
                                   4345 	.word 0x4D
                                   4346 	CALL TOR
                                   4347 	CALL RAT
                                   4348 	CALL RFROM
                                   4349 	CALL ANDD
                                   4350 	CALL EMIT
                                   4351 	CALL DOLIT
                                   4352 	.word 0x61
                                   4353 	CALL DOLIT
                                   4354 	.word 0xA
                                   4355 	CALL TOR
                                   4356 DEBUG4:
                                   4357 	CALL ONE
                                   4358 	CALL UPLUS 
                                   4359 	CALL DROP
                                   4360 	CALL DONXT
                                   4361 	.word DEBUG4
                                   4362 	CALL EMIT
                                   4363 	CALL DOLIT
                                   4364 	.word 0x656D
                                   4365 	CALL DOLIT
                                   4366 	.word 0x100
                                   4367 	CALL UMSTA
                                   4368 	CALL SWAPP
                                   4369 	CALL DOLIT
                                   4370 	.word 0x100
                                   4371 	CALL UMSTA
                                   4372 	CALL SWAPP 
                                   4373 	CALL DROP
                                   4374 	CALL EMIT
                                   4375 	CALL EMIT
                                   4376 	CALL DOLIT
                                   4377 	.word 0x2043
                                   4378 	CALL ZERO
                                   4379 	CALL DOLIT
                                   4380 	.word 0x100
                                   4381 	CALL UMMOD
                                   4382 	CALL EMIT
                                   4383 	CALL EMIT
                                   4384 	;JP ORIG
                                   4385 	RET
                                   4386 .endif ; WANT_DEBUG 
                                   4387 
                                   4388 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4389 ;       'BOOT   ( -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



                                   4390 ;       The application startup vector.
                                   4391 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001AD0                       4392         _HEADER TBOOT,5,"'BOOT"
      001AD0 1A 9E                    1         .word LINK 
                           001AD2     2         LINK=.
      001AD2 05                       3         .byte 5  
      001AD3 27 42 4F 4F 54           4         .ascii "'BOOT"
      001AD8                          5         TBOOT:
      001AD8 CD 06 D7         [ 4] 4393         CALL     DOVAR
      001ADB 40 02                 4394         .word    APP_RUN      ;application to boot
                                   4395 
                                   4396 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4397 ;       COLD    ( -- )
                                   4398 ;       The hilevel cold start s=ence.
                                   4399 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001ADD                       4400         _HEADER COLD,4,"COLD"
      001ADD 1A D2                    1         .word LINK 
                           001ADF     2         LINK=.
      001ADF 04                       3         .byte 4  
      001AE0 43 4F 4C 44              4         .ascii "COLD"
      001AE4                          5         COLD:
                           000000  4401 .if WANT_DEBUG
                                   4402         CALL DEBUG
                                   4403 .endif ; WANT_DEBUG
      001AE4 CD 04 6F         [ 4] 4404 COLD1:  CALL     DOLIT
      001AE7 00 2B                 4405         .word      UZERO
      001AE9 CD 04 6F         [ 4] 4406 	CALL     DOLIT
      001AEC 00 06                 4407         .word      UPP
      001AEE CD 04 6F         [ 4] 4408         CALL     DOLIT
      001AF1 00 1C                 4409 	.word      UEND-UZERO
      001AF3 CD 0C F8         [ 4] 4410         CALL     CMOVE   ;initialize user area
                           000001  4411 .if WANT_FLOAT 
      001AF6 CD 2B 31         [ 4] 4412         CALL    FINIT 
                                   4413 .endif 
                                   4414 ; if APP_RUN==0 initialize with ca de 'hi'  
      001AF9 90 CE 40 02      [ 2] 4415         ldw y,APP_RUN 
      001AFD 26 0B            [ 1] 4416         jrne 0$
      001AFF 1D 00 02         [ 2] 4417         subw x,#CELLL 
      001B02 90 AE 1A A1      [ 2] 4418         ldw y,#HI  
      001B06 FF               [ 2] 4419         ldw (x),y
      001B07 CD 1C 02         [ 4] 4420         call UPDATRUN 
      001B0A                       4421 0$:        
                                   4422 ; update LAST with APP_LAST 
                                   4423 ; if APP_LAST > LAST else do the opposite
      001B0A 90 CE 40 00      [ 2] 4424         ldw y,APP_LAST 
      001B0E 90 B3 1C         [ 2] 4425         cpw y,ULAST 
      001B11 22 05            [ 1] 4426         jrugt 1$ 
                                   4427 ; save LAST at APP_LAST  
      001B13 CD 1B EA         [ 4] 4428         call UPDATLAST 
      001B16 20 06            [ 2] 4429         jra 2$
      001B18                       4430 1$: ; update LAST with APP_LAST 
      001B18 90 BF 1C         [ 2] 4431         ldw ULAST,y
      001B1B 90 BF 16         [ 2] 4432         ldw UCNTXT,y
      001B1E                       4433 2$:  
                                   4434 ; update APP_CP if < app_space 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      001B1E 90 CE 40 04      [ 2] 4435         ldw y,APP_CP  
      001B22 90 B3 1A         [ 2] 4436         cpw y,UCP   
      001B25 24 06            [ 1] 4437         jruge 3$ 
      001B27 CD 1C 13         [ 4] 4438         call UPDATCP
      001B2A 90 BE 1A         [ 2] 4439         ldw y,UCP   
      001B2D                       4440 3$:
      001B2D 90 BF 1A         [ 2] 4441         ldw UCP,y                 
                                   4442 ; update UVP with APP_VP  
                                   4443 ; if APP_VP>UVP else do the opposite 
      001B30 90 CE 40 06      [ 2] 4444         ldw y,APP_VP 
      001B34 90 B3 18         [ 2] 4445         cpw y,UVP 
      001B37 22 05            [ 1] 4446         jrugt 4$
      001B39 CD 1C 2A         [ 4] 4447         call UPDATVP 
      001B3C 20 03            [ 2] 4448         jra 6$
      001B3E                       4449 4$: ; update UVP with APP_VP 
      001B3E 90 BF 18         [ 2] 4450         ldw UVP,y 
      001B41                       4451 6$:      
      001B41 CD 14 99         [ 4] 4452         CALL     PRESE   ;initialize data stack and TIB
      001B44 CD 1A D8         [ 4] 4453         CALL     TBOOT
      001B47 CD 0C E1         [ 4] 4454         CALL     ATEXE   ;application boot
      001B4A CD 17 72         [ 4] 4455         CALL     OVERT
      001B4D CC 14 B6         [ 2] 4456         JP     QUIT    ;start interpretation
                                   4457 
                                   4458 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                                   4459         .include "flash.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;  routines to write to FLASH, EEPROM 
                                     23 ;  and OPTION 
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27 ;--------------------------------
                                     28 ; initialize FPTR 
                                     29 ; FP!  ( ud -- )
                                     30 ;---------------------------------
      001B50 1A DF                   31     .word LINK 
                           001B52    32     LINK=.
      001B52 03                      33     .byte 3 
      001B53 46 50 21                34     .ascii "FP!"
      001B56                         35 FPSTOR:
      001B56 90 93            [ 1]   36     ldw y,x
      001B58 90 FE            [ 2]   37     ldw y,(y)
      001B5A 90 9F            [ 1]   38     ld a,yl 
      001B5C B7 34            [ 1]   39     ld FPTR,a 
      001B5E 1C 00 02         [ 2]   40     addw x,#CELLL 
      001B61 90 93            [ 1]   41     ldw y,x 
      001B63 90 FE            [ 2]   42     ldw y,(y)
      001B65 90 BF 35         [ 2]   43     ldw PTR16,y
      001B68 1C 00 02         [ 2]   44     addw x,#CELLL 
      001B6B 81               [ 4]   45     ret 
                                     46 
                                     47 ;-----------------------------------
                                     48 ; return EEPROM base address 
                                     49 ; as a double 
                                     50 ;  EEPROM  ( -- ud )
                                     51 ;-----------------------------------
      001B6C 1B 52                   52     .word LINK 
                           001B6E    53 LINK=.
      001B6E 06                      54     .byte 6 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      001B6F 45 45 50 52 4F 4D       55     .ascii "EEPROM"
      001B75                         56 EEPROM: 
      001B75 90 AE 40 00      [ 2]   57     ldw y,#EEPROM_BASE
      001B79 1D 00 04         [ 2]   58     subw x,#2*CELLL 
      001B7C EF 02            [ 2]   59     ldw (2,x),y 
      001B7E 90 5F            [ 1]   60     clrw y 
      001B80 FF               [ 2]   61     ldw (x),y 
      001B81 81               [ 4]   62     ret
                                     63 
                                     64 ;---------------------------------
                                     65 ; return APP_LAST pointer as double
                                     66 ; EEP-LAST ( -- ud )
                                     67 ;---------------------------------
      001B82 1B 6E                   68 	.word LINK 
                           001B84    69 	LINK=.
      001B84 08                      70 	.byte 8 
      001B85 45 45 50 2D 4C 41 53    71 	.ascii "EEP-LAST"
             54
      001B8D                         72 EEPLAST:
      001B8D 1D 00 04         [ 2]   73 	subw x,#2*CELLL 
      001B90 90 AE 40 00      [ 2]   74 	ldw y,#APP_LAST 
      001B94 EF 02            [ 2]   75 	ldw (2,x),y 
      001B96 90 5F            [ 1]   76 	clrw y 
      001B98 FF               [ 2]   77 	ldw (x),y 
      001B99 81               [ 4]   78 	ret 
                                     79 
                                     80 ;----------------------------------
                                     81 ; return APP_RUN pointer as double	
                                     82 ; EEP-RUN ( -- ud )
                                     83 ;-----------------------------------
      001B9A 1B 84                   84 	.word LINK 
                           001B9C    85 	LINK=.
      001B9C 07                      86 	.byte 7
      001B9D 45 45 50 2D 52 55 4E    87 	.ascii "EEP-RUN"
      001BA4                         88 EEPRUN:
      001BA4 1D 00 04         [ 2]   89 	subw x,#2*CELLL 
      001BA7 90 AE 40 02      [ 2]   90 	ldw y,#APP_RUN 
      001BAB EF 02            [ 2]   91 	ldw (2,x),y 
      001BAD 90 5F            [ 1]   92 	clrw y 
      001BAF FF               [ 2]   93 	ldw (x),y 
      001BB0 81               [ 4]   94 	ret 
                                     95 
                                     96 ;------------------------------------
                                     97 ; return APP_CP pointer as double 
                                     98 ; EEP-CP ( -- ud )
                                     99 ;------------------------------------
      001BB1 1B 9C                  100 	.word LINK
                           001BB3   101 	LINK=.
      001BB3 06                     102 	.byte 6 
      001BB4 45 45 50 2D 43 50      103 	.ascii "EEP-CP"
      001BBA                        104 EEPCP:
      001BBA 1D 00 04         [ 2]  105 	subw x,#2*CELLL 
      001BBD 90 AE 40 04      [ 2]  106 	ldw y,#APP_CP  
      001BC1 EF 02            [ 2]  107 	ldw (2,x),y 
      001BC3 90 5F            [ 1]  108 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      001BC5 FF               [ 2]  109 	ldw (x),y 
      001BC6 81               [ 4]  110 	ret 
                                    111 
                                    112 ;------------------------------------
                                    113 ; return APP_VP pointer as double 
                                    114 ; EEP-VP ( -- ud )
                                    115 ;-------------------------------------
      001BC7 1B B3                  116 	.word LINK
                           001BC9   117 	LINK=.
      001BC9 06                     118 	.byte 6
      001BCA 45 45 50 2D 56 50      119 	.ascii "EEP-VP"
      001BD0                        120 EEPVP:
      001BD0 1D 00 04         [ 2]  121 	subw x,#2*CELLL 
      001BD3 90 AE 40 06      [ 2]  122 	ldw y,#APP_VP  
      001BD7 EF 02            [ 2]  123 	ldw (2,x),y 
      001BD9 90 5F            [ 1]  124 	clrw y 
      001BDB FF               [ 2]  125 	ldw (x),y 
      001BDC 81               [ 4]  126 	ret 
                                    127 
                                    128 ;----------------------------------
                                    129 ; update APP_LAST with LAST 
                                    130 ; UPDAT-LAST ( -- )
                                    131 ;----------------------------------
      001BDD 1B C9                  132 	.word LINK 
                           001BDF   133 	LINK=.
      001BDF 0A                     134 	.byte 10
      001BE0 55 50 44 41 54 2D 4C   135 	.ascii "UPDAT-LAST"
             41 53 54
      001BEA                        136 UPDATLAST:
      001BEA CD 07 96         [ 4]  137 	call LAST
      001BED CD 04 E3         [ 4]  138 	call AT  
      001BF0 CD 1B 8D         [ 4]  139 	call EEPLAST
      001BF3 CC 1D E0         [ 2]  140 	jp EESTORE 
                                    141 
                                    142 ;---------------------------------
                                    143 ; update APP_RUN 
                                    144 ; UPDAT-RUN ( a -- )
                                    145 ;---------------------------------
      001BF6 1B DF                  146 	.word LINK
                           001BF8   147 	LINK=.
      001BF8 09                     148 	.byte 9
      001BF9 55 50 44 41 54 2D 52   149 	.ascii "UPDAT-RUN"
             55 4E
      001C02                        150 UPDATRUN:
      001C02 CD 1B A4         [ 4]  151 	call EEPRUN
      001C05 CC 1D E0         [ 2]  152 	jp EESTORE 
                                    153 	
                                    154 ;---------------------------------
                                    155 ; update APP_CP with CP 
                                    156 ; UPDAT-CP ( -- )
                                    157 ;---------------------------------
      001C08 1B F8                  158 	.word LINK 
                           001C0A   159 	LINK=.
      001C0A 08                     160 	.byte 8 
      001C0B 55 50 44 41 54 2D 43   161 	.ascii "UPDAT-CP"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



             50
      001C13                        162 UPDATCP:
      001C13 CD 07 86         [ 4]  163 	call CPP 
      001C16 CD 04 E3         [ 4]  164 	call AT 
      001C19 CD 1B BA         [ 4]  165 	call EEPCP 
      001C1C CC 1D E0         [ 2]  166 	jp EESTORE 
                                    167 
                                    168 ;----------------------------------
                                    169 ; update APP_VP with VP 
                                    170 ; UPDAT-VP ( -- )
                                    171 ;----------------------------------
      001C1F 1C 0A                  172 	.word LINK
                           001C21   173 	LINK=.
      001C21 08                     174 	.byte 8 
      001C22 55 50 44 41 54 2D 56   175 	.ascii "UPDAT-VP" 
             50
      001C2A                        176 UPDATVP:
      001C2A CD 07 78         [ 4]  177 	call VPP 
      001C2D CD 04 E3         [ 4]  178 	call AT
      001C30 CD 1B D0         [ 4]  179 	call EEPVP 
      001C33 CC 1D E0         [ 2]  180 	jp EESTORE
                                    181 	
                           000001   182 .if NUCLEO
                                    183 ;----------------------------------
                                    184 ; fetch integer at address over 65535
                                    185 ;  F@   ( ud -- n )
                                    186 ;----------------------------------
      001C36 1C 21                  187     .word LINK 
                           001C38   188 LINK=.
      001C38 02                     189     .byte 2
      001C39 46 40                  190     .ascii "F@"
      001C3B                        191 FARAT:
      001C3B CD 1B 56         [ 4]  192     call FPSTOR
      001C3E CC 1D 03         [ 2]  193 	jp EE_READ 
                                    194 
                                    195 
                                    196 ;-------------------------------------
                                    197 ; fetch C at address over 65535 
                                    198 ; FC@ ( ud -- c)
                                    199 ;-------------------------------------
      001C41 1C 38                  200     .word LINK
                           001C43   201     LINK=.
      001C43 03                     202     .byte 3 
      001C44 46 43 40               203     .ascii "FC@" 
      001C47                        204 FARCAT:
      001C47 CD 1B 56         [ 4]  205     call FPSTOR
      001C4A CC 1D 25         [ 2]  206 	jp EE_CREAD  
                                    207 .endif ; NUCLEO 
                                    208 
                                    209 ;----------------------------------
                                    210 ; UNLOCK EEPROM/OPT for writing/erasing
                                    211 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    212 ;  UNLKEE   ( -- )
                                    213 ;----------------------------------
      001C4D 1C 43                  214     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



                           001C4F   215 LINK=.
      001C4F 06                     216     .byte 6 
      001C50 55 4E 4C 4B 45 45      217     .ascii "UNLKEE"
      001C56                        218 UNLKEE:
      001C56 35 00 50 5B      [ 1]  219 	mov FLASH_CR2,#0 
      001C5A 35 FF 50 5C      [ 1]  220 	mov FLASH_NCR2,#0xFF 
      001C5E 35 AE 50 64      [ 1]  221 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001C62 35 56 50 64      [ 1]  222     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001C66 72 07 50 5F FB   [ 2]  223 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001C6B 81               [ 4]  224 	ret
                                    225 
                                    226 ;----------------------------------
                                    227 ; UNLOCK FLASH for writing/erasing
                                    228 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    229 ; UNLKFL  ( -- )
                                    230 ;----------------------------------
      001C6C 1C 4F                  231     .word LINK 
                           001C6E   232 LINK=. 
      001C6E 06                     233     .byte 6 
      001C6F 55 4E 4C 4B 46 4C      234     .ascii "UNLKFL"    
      001C75                        235 UNLKFL:
      001C75 35 00 50 5B      [ 1]  236 	mov FLASH_CR2,#0 
      001C79 35 FF 50 5C      [ 1]  237 	mov FLASH_NCR2,#0xFF 
      001C7D 35 56 50 62      [ 1]  238 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001C81 35 AE 50 62      [ 1]  239 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001C85 72 03 50 5F FB   [ 2]  240 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001C8A 81               [ 4]  241 	ret
                                    242 
                                    243 ;-----------------------------
                                    244 ; UNLOCK FLASH or EEPROM 
                                    245 ; according to FPTR address 
                                    246 ;  UNLOCK ( -- )
                                    247 ;-----------------------------
      001C8B 1C 6E                  248 	.word LINK 
                           001C8D   249 	LINK=.
      001C8D 06                     250 	.byte 6
      001C8E 55 4E 4C 4F 43 4B      251 	.ascii "UNLOCK"
      001C94                        252 UNLOCK:
                                    253 ; put addr[15:0] in Y, for bounds check.
      001C94 90 BE 35         [ 2]  254 	ldw y,PTR16   ; Y=addr15:0
                                    255 ; check addr[23:16], if <> 0 then it is extened flash memory
      001C97 3D 34            [ 1]  256 	tnz FPTR 
      001C99 26 16            [ 1]  257 	jrne 4$
      001C9B 90 A3 80 00      [ 2]  258     cpw y,#FLASH_BASE
      001C9F 24 10            [ 1]  259     jruge 4$
      001CA1 90 A3 40 00      [ 2]  260 	cpw y,#EEPROM_BASE  
      001CA5 25 0D            [ 1]  261     jrult 9$
      001CA7 90 A3 48 7F      [ 2]  262 	cpw y,#OPTION_END 
      001CAB 22 07            [ 1]  263 	jrugt 9$
      001CAD CD 1C 56         [ 4]  264 	call UNLKEE
      001CB0 81               [ 4]  265 	ret 
      001CB1 CD 1C 75         [ 4]  266 4$: call UNLKFL
      001CB4 81               [ 4]  267 9$: ret 
                                    268 
                                    269 ;-------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



                                    270 ; LOCK write access to 
                                    271 ; FLASH and EEPROM 
                                    272 ; LOCK ( -- )
                                    273 ;-------------------------
      001CB5 1C 8D                  274 	.word LINK 
                           001CB7   275 	LINK=.
      001CB7 04                     276 	.byte 4 
      001CB8 4C 4F 43 4B            277 	.ascii "LOCK" 
      001CBC                        278 LOCK: 
      001CBC 72 13 50 5F      [ 1]  279 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001CC0 72 17 50 5F      [ 1]  280 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001CC4 81               [ 4]  281 	ret 
                                    282 
                                    283 ;-------------------------
                                    284 ; increment FPTR 
                                    285 ; INC-FPTR ( -- )
                                    286 ;-------------------------
      001CC5 1C B7                  287 	.word LINK 
                           001CC7   288 	LINK=. 
      001CC7 08                     289 	.byte 8 
      001CC8 49 4E 43 2D 46 50 54   290 	.ascii "INC-FPTR" 
             52
      001CD0                        291 INC_FPTR:
      001CD0 3C 36            [ 1]  292 	inc PTR8 
      001CD2 26 0C            [ 1]  293 	jrne 1$
      001CD4 90 89            [ 2]  294 	pushw y 
      001CD6 90 BE 34         [ 2]  295 	ldw y,FPTR 
      001CD9 90 5C            [ 1]  296 	incw y 
      001CDB 90 BF 34         [ 2]  297 	ldw FPTR,y
      001CDE 90 85            [ 2]  298 	popw y  
      001CE0 81               [ 4]  299 1$: ret 
                                    300 
                                    301 ;------------------------------
                                    302 ; add u to FPTR 
                                    303 ; PTR+ ( u -- )
                                    304 ;------------------------------
      001CE1 1C C7                  305 	.word LINK 
                           001CE3   306 	LINK=.
      001CE3 04                     307 	.byte 4 
      001CE4 50 54 52 2B            308 	.ascii "PTR+"
      001CE8                        309 PTRPLUS:
      001CE8 90 93            [ 1]  310 	ldw y,x 
      001CEA 1C 00 02         [ 2]  311 	addw x,#CELLL 
      001CED 72 B9 00 35      [ 2]  312 	addw y,PTR16 
      001CF1 90 BF 35         [ 2]  313 	ldw PTR16,y  
      001CF4 24 02            [ 1]  314 	jrnc 1$
      001CF6 3C 34            [ 1]  315 	inc FPTR 
      001CF8 81               [ 4]  316 1$: ret 
                                    317 
                                    318 ;---------------------------------
                                    319 ; read word at address pointed FPTR
                                    320 ; increment FPTR 
                                    321 ; EE-READ ( -- w )
                                    322 ;------------------------------------
      001CF9 1C E3                  323 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



                           001CFB   324 	LINK=.
      001CFB 07                     325 	.byte 7 
      001CFC 45 45 2D 52 45 41 44   326 	.ascii "EE-READ"
      001D03                        327 EE_READ:
      001D03 1D 00 02         [ 2]  328 	subw x,#CELLL 
      001D06 92 BC 00 34      [ 5]  329 	ldf a,[FPTR]
      001D0A 90 95            [ 1]  330 	ld yh,a 
      001D0C CD 1C D0         [ 4]  331 	call INC_FPTR 
      001D0F 92 BC 00 34      [ 5]  332 	ldf a,[FPTR]
      001D13 CD 1C D0         [ 4]  333 	call INC_FPTR 
      001D16 90 97            [ 1]  334 	ld yl,a 
      001D18 FF               [ 2]  335 	ldw (x),y 
      001D19 81               [ 4]  336 	ret 
                                    337 
                                    338 ;---------------------------------------
                                    339 ; Read byte at address pointed by FPTR 
                                    340 ; EE-CREAD ( -- c )
                                    341 ;---------------------------------------
      001D1A 1C FB                  342 	.word LINK 
                           001D1C   343 	LINK=.
      001D1C 08                     344 	.byte 8
      001D1D 45 45 2D 43 52 45 41   345 	.ascii "EE-CREAD" 
             44
      001D25                        346 EE_CREAD:
      001D25 1D 00 02         [ 2]  347 	subw x,#CELLL 
      001D28 92 BC 00 34      [ 5]  348 	ldf a,[FPTR]	
      001D2C CD 1C D0         [ 4]  349 	call INC_FPTR
      001D2F 90 5F            [ 1]  350 	clrw y 
      001D31 90 97            [ 1]  351 	ld yl,a 
      001D33 FF               [ 2]  352 	ldw (x),y 
      001D34 81               [ 4]  353 	ret 
                                    354 
                                    355 ;----------------------------
                                    356 ; write a byte at address pointed 
                                    357 ; by FPTR and increment FPTR.
                                    358 ; Expect pointer already initialized 
                                    359 ; and memory unlocked 
                                    360 ; WR-BYTE ( c -- )
                                    361 ;----------------------------
      001D35 1D 1C                  362 	.word LINK 
                           001D37   363 	LINK=. 
      001D37 07                     364 	.byte 7 
      001D38 57 52 2D 42 59 54 45   365 	.ascii "WR-BYTE" 
                                    366 
      001D3F                        367 WR_BYTE:
      001D3F CD 04 63         [ 4]  368 	call FC_XOFF
      001D42 90 93            [ 1]  369 	ldw y,x 
      001D44 90 FE            [ 2]  370 	ldw y,(y)
      001D46 1C 00 02         [ 2]  371 	addw x,#CELLL 
      001D49 90 9F            [ 1]  372 	ld a,yl
      001D4B 92 BD 00 34      [ 4]  373 	ldf [FPTR],a
      001D4F 72 05 50 5F FB   [ 2]  374 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001D54 CD 04 4D         [ 4]  375 	call FC_XON
      001D57 CC 1C D0         [ 2]  376 	jp INC_FPTR 
                                    377 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



                                    378 ;---------------------------------------
                                    379 ; write a word at address pointed 
                                    380 ; by FPTR and increment FPTR 
                                    381 ; Expect pointer already initialzed 
                                    382 ; and memory unlocked 
                                    383 ; WR-WORD ( w -- )
                                    384 ;---------------------------------------
      001D5A 1D 37                  385 	.word LINK 
                           001D5C   386 	LINK=.
      001D5C 07                     387 	.byte 7 
      001D5D 57 52 2D 57 4F 52 44   388 	.ascii "WR-WORD" 
      001D64                        389 WR_WORD:
      001D64 CD 04 63         [ 4]  390 	call FC_XOFF
      001D67 90 93            [ 1]  391 	ldw y,x
      001D69 90 FE            [ 2]  392 	ldw y,(y)
      001D6B 1C 00 02         [ 2]  393 	addw x,#CELLL 
      001D6E 90 9E            [ 1]  394 	ld a,yh 
      001D70 92 BD 00 34      [ 4]  395 	ldf [FPTR],a
      001D74 72 05 50 5F FB   [ 2]  396 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001D79 CD 1C D0         [ 4]  397 	call INC_FPTR 
      001D7C 90 9F            [ 1]  398 	ld a,yl 
      001D7E 92 BD 00 34      [ 4]  399 	ldf [FPTR],a
      001D82 72 05 50 5F FB   [ 2]  400 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001D87 CD 04 4D         [ 4]  401 	call FC_XON
      001D8A CC 1C D0         [ 2]  402 	jp INC_FPTR 
                                    403 
                                    404 
                                    405 ;---------------------------------------
                                    406 ; write a byte to FLASH or EEPROM/OPTION  
                                    407 ; EEC!  (c ud -- )
                                    408 ;---------------------------------------
      001D8D 1D 5C                  409     .word LINK 
                           001D8F   410 	LINK=.
      001D8F 04                     411     .byte 4 
      001D90 45 45 43 21            412     .ascii "EEC!"
                                    413 	; local variables 
                           000001   414 	BTW = 1   ; byte to write offset on stack
                           000002   415     OPT = 2 
                           000002   416 	VSIZE = 2
      001D94                        417 EECSTORE:
      001D94 52 02            [ 2]  418 	sub sp,#VSIZE
      001D96 CD 1B 56         [ 4]  419     call FPSTOR
      001D99 E6 01            [ 1]  420 	ld a,(1,x)
      001D9B 43               [ 1]  421 	cpl a 
      001D9C 6B 01            [ 1]  422 	ld (BTW,sp),a ; byte to write 
      001D9E 0F 02            [ 1]  423 	clr (OPT,sp)  ; OPTION flag
      001DA0 CD 1C 94         [ 4]  424 	call UNLOCK 
                                    425 	; check if option
      001DA3 3D 34            [ 1]  426 	tnz FPTR 
      001DA5 26 19            [ 1]  427 	jrne 2$
      001DA7 90 BE 35         [ 2]  428 	ldw y,PTR16 
      001DAA 90 A3 48 00      [ 2]  429 	cpw y,#OPTION_BASE
      001DAE 2B 10            [ 1]  430 	jrmi 2$
      001DB0 90 A3 48 80      [ 2]  431 	cpw y,#OPTION_END+1
      001DB4 2A 0A            [ 1]  432 	jrpl 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      001DB6 03 02            [ 1]  433 	cpl (OPT,sp)
                                    434 	; OPTION WRITE require this UNLOCK 
      001DB8 72 1E 50 5B      [ 1]  435     bset FLASH_CR2,#FLASH_CR2_OPT
      001DBC 72 1F 50 5C      [ 1]  436     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001DC0                        437 2$: 
      001DC0 CD 1D 3F         [ 4]  438 	call WR_BYTE 	
      001DC3 0D 02            [ 1]  439 	tnz (OPT,sp)
      001DC5 27 0D            [ 1]  440 	jreq 3$ 
      001DC7 7B 01            [ 1]  441     ld a,(BTW,sp)
      001DC9 90 5F            [ 1]  442     clrw y
      001DCB 90 97            [ 1]  443 	ld yl,a 
      001DCD 1D 00 02         [ 2]  444 	subw x,#CELLL 
      001DD0 FF               [ 2]  445 	ldw (x),y 
      001DD1 CD 1D 3F         [ 4]  446 	call WR_BYTE
      001DD4                        447 3$: 
      001DD4 CD 1C BC         [ 4]  448 	call LOCK 
      001DD7 5B 02            [ 2]  449 	addw sp,#VSIZE 
      001DD9 81               [ 4]  450     ret
                                    451 
                                    452 ;------------------------------
                                    453 ; write integer in FLASH|EEPROM
                                    454 ; EE! ( n ud -- )
                                    455 ;------------------------------
      001DDA 1D 8F                  456 	.word LINK 
                           001DDC   457 	LINK=.
      001DDC 03                     458 	.byte 3 
      001DDD 45 45 21               459 	.ascii "EE!"
      001DE0                        460 EESTORE:
      001DE0 CD 1B 56         [ 4]  461 	call FPSTOR 
      001DE3 CD 1C 94         [ 4]  462 	call UNLOCK 
      001DE6 90 93            [ 1]  463 	ldw y,x 
      001DE8 90 FE            [ 2]  464 	ldw y,(y)
      001DEA 90 89            [ 2]  465 	pushw y 
      001DEC 90 5E            [ 1]  466 	swapw y 
      001DEE FF               [ 2]  467 	ldw (x),y 
      001DEF CD 1D 3F         [ 4]  468 	call WR_BYTE 
      001DF2 90 85            [ 2]  469 	popw y 
      001DF4 1D 00 02         [ 2]  470 	subw x,#CELLL
      001DF7 FF               [ 2]  471 	ldw (x),y 
      001DF8 CD 1D 3F         [ 4]  472 	call WR_BYTE
      001DFB CC 1C BC         [ 2]  473 	jp LOCK 
                                    474 
                                    475 
                                    476 ;----------------------------
                                    477 ; Erase flash memory row 
                                    478 ; stm8s208 as 128 bytes rows
                                    479 ; ROW-ERASE ( ud -- )
                                    480 ;----------------------------
      001DFE 1D DC                  481 	.word LINK 
                           001E00   482 	LINK=. 
      001E00 09                     483 	.byte 9 
      001E01 52 4F 57 2D 45 52 41   484 	.ascii "ROW-ERASE" 
             53 45
      001E0A                        485 row_erase:
      001E0A CD 04 63         [ 4]  486 	call FC_XOFF
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



      001E0D CD 1B 56         [ 4]  487 	call FPSTOR
                                    488 ;code must be execute from RAM 
                                    489 ;copy routine to PAD 
      001E10 1D 00 02         [ 2]  490 	subw x,#CELLL 
      001E13 90 AE 1E 63      [ 2]  491 	ldw y,#row_erase_proc
      001E17 FF               [ 2]  492 	ldw (x),y 
      001E18 CD 0C BC         [ 4]  493 	call PAD 
      001E1B 90 AE 1E 8A      [ 2]  494 	ldw y,#row_erase_proc_end 
      001E1F 72 A2 1E 63      [ 2]  495 	subw y,#row_erase_proc
      001E23 1D 00 02         [ 2]  496 	subw x,#CELLL 
      001E26 FF               [ 2]  497 	ldw (x),y 
      001E27 CD 0C F8         [ 4]  498 	call CMOVE 
      001E2A                        499 block_erase:
      001E2A 90 BE 35         [ 2]  500 	ldw y,FPTR+1
      001E2D 90 A3 33 80      [ 2]  501 	cpw y,#app_space 
      001E31 2A 19            [ 1]  502 	jrpl erase_flash 
                                    503 ; erase EEPROM block
      001E33 90 A3 40 00      [ 2]  504 	cpw y,#EEPROM_BASE 
      001E37 24 04            [ 1]  505 	jruge 1$
      001E39 CD 04 4D         [ 4]  506 	call FC_XON
      001E3C 81               [ 4]  507 	ret ; bad address 
      001E3D 90 A3 47 FF      [ 2]  508 1$: cpw y,#EEPROM_END 
      001E41 23 04            [ 2]  509 	jrule 2$ 
      001E43 CD 04 4D         [ 4]  510 	call FC_XON
      001E46 81               [ 4]  511 	ret ; bad address 
      001E47                        512 2$:	
      001E47 CD 1C 56         [ 4]  513 	call UNLKEE 
      001E4A 20 03            [ 2]  514 	jra proceed_erase
                                    515 ; erase flash block:
      001E4C                        516 erase_flash:
      001E4C CD 1C 75         [ 4]  517 	call UNLKFL 
      001E4F                        518 proceed_erase:
      001E4F CD 0C BC         [ 4]  519 	call PAD 
      001E52 90 93            [ 1]  520 	ldw y,x
      001E54 90 FE            [ 2]  521 	ldw y,(y)
      001E56 1C 00 02         [ 2]  522 	addw x,#CELLL  
      001E59 90 FD            [ 4]  523 	call (y) 
      001E5B 72 17 50 5F      [ 1]  524 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001E5F CD 04 4D         [ 4]  525 	call FC_XON
      001E62 81               [ 4]  526 	ret 
                                    527 
                                    528 ; this routine is to be copied to PAD 
      001E63                        529 row_erase_proc:
      001E63 35 20 50 5B      [ 1]  530 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001E67 35 DF 50 5C      [ 1]  531 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001E6B 4F               [ 1]  532 	clr a 
      001E6C 90 5F            [ 1]  533 	clrw y 
      001E6E 91 A7 00 34      [ 1]  534 	ldf ([FPTR],y),a
      001E72 90 5C            [ 1]  535     incw y
      001E74 91 A7 00 34      [ 1]  536 	ldf ([FPTR],y),a
      001E78 90 5C            [ 1]  537     incw y
      001E7A 91 A7 00 34      [ 1]  538 	ldf ([FPTR],y),a
      001E7E 90 5C            [ 1]  539     incw y
      001E80 91 A7 00 34      [ 1]  540 	ldf ([FPTR],y),a
      001E84 72 05 50 5F FB   [ 2]  541 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      001E89 81               [ 4]  542 	ret
      001E8A                        543 row_erase_proc_end:
                                    544 
                                    545 
                                    546 ;-----------------------------------
                                    547 ; block programming must be 
                                    548 ; executed from RAM 
                                    549 ; initial contidions: 
                                    550 ; 		memory unlocked
                                    551 ;       FPTR initialized 
                                    552 ; input: 
                                    553 ;    x   buffer address 
                                    554 ;-----------------------------------
                           000001   555 	BCNT=1 
      001E8A                        556 copy_buffer:
      001E8A 4B 80            [ 1]  557 	push #BLOCK_SIZE  
                                    558 ;enable block programming 
      001E8C 72 10 50 5B      [ 1]  559 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001E90 72 11 50 5C      [ 1]  560 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001E94 90 5F            [ 1]  561 	clrw y
      001E96 F6               [ 1]  562 1$:	ld a,(x)
      001E97 91 A7 00 34      [ 1]  563 	ldf ([FPTR],y),a
      001E9B 5C               [ 1]  564 	incw x 
      001E9C 90 5C            [ 1]  565 	incw y 
      001E9E 0A 01            [ 1]  566 	dec (BCNT,sp)
      001EA0 26 F4            [ 1]  567 	jrne 1$
                                    568 ; wait EOP bit 
      001EA2 72 05 50 5F FB   [ 2]  569 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001EA7 84               [ 1]  570 	pop a ; remove BCNT from stack 
      001EA8 81               [ 4]  571 	ret 
      001EA9                        572 copy_buffer_end:
                                    573 
                                    574 ;-------------------------
                                    575 ; move program_row to RAM 
                                    576 ; in TIB 
                                    577 ;------------------------
      001EA9                        578 copy_prog_to_ram:
      001EA9 1D 00 06         [ 2]  579 	subw x,#6
      001EAC 90 AE 1E 8A      [ 2]  580 	ldw y,#copy_buffer 
      001EB0 EF 04            [ 2]  581 	ldw (4,x),y 
      001EB2 90 AE 17 00      [ 2]  582 	ldw y,#TIBBASE
      001EB6 EF 02            [ 2]  583 	ldw (2,x),y 
      001EB8 90 AE 1E A9      [ 2]  584 	ldw y,#copy_buffer_end 
      001EBC 72 A2 1E 8A      [ 2]  585 	subw y,#copy_buffer  
      001EC0 FF               [ 2]  586 	ldw (x),y 
      001EC1 CD 0C F8         [ 4]  587 	call CMOVE 
      001EC4 81               [ 4]  588 	ret 
                                    589 
                                    590 
                                    591 ;-----------------------------
                                    592 ; write a row in FLASH/EEPROM 
                                    593 ; WR-ROW ( a ud -- )
                                    594 ; a -> address 128 byte buffer to write 
                                    595 ; ud ->  row address in FLASH|EEPROM 
                                    596 ;-----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      001EC5 1E 00                  597 	.word LINK 
                           001EC7   598 	LINK=.
      001EC7 06                     599 	.byte 6 
      001EC8 57 52 2D 52 4F 57      600 	.ascii "WR-ROW"
      001ECE                        601 write_row:
      001ECE CD 04 63         [ 4]  602 	call FC_XOFF
      001ED1 CD 1B 56         [ 4]  603 	call FPSTOR
                                    604 ; align to FLASH block 
      001ED4 A6 80            [ 1]  605 	ld a,#0x80 
      001ED6 B4 36            [ 1]  606 	and a,PTR8 
      001ED8 B7 36            [ 1]  607 	ld PTR8,a  
      001EDA CD 1E A9         [ 4]  608 	call copy_prog_to_ram
      001EDD CD 1C 94         [ 4]  609 	call UNLOCK
      001EE0 90 93            [ 1]  610 	ldw y,x 
      001EE2 90 FE            [ 2]  611 	ldw y,(y)
      001EE4 1C 00 02         [ 2]  612 	addw x,#CELLL 
      001EE7 89               [ 2]  613 	pushw x 
      001EE8 93               [ 1]  614 	ldw x,y ; buffer address in x 
      001EE9 CD 17 00         [ 4]  615 	call TIBBASE
      001EEC CD 1C BC         [ 4]  616 	call LOCK
      001EEF 85               [ 2]  617 	popw x 
      001EF0 CD 04 4D         [ 4]  618 	call FC_XON 
      001EF3 81               [ 4]  619 	ret 
                                    620 
                                    621 ;-------------------------------------
                                    622 ; change value of OPTION register 
                                    623 ; SET-OPT (c n -- ) 
                                    624 ; c new value.
                                    625 ; n OPT  number {1..7}
                                    626 ;--------------------------------------
      001EF4 1E C7                  627 		.word LINK 
                           001EF6   628 		LINK=.
      001EF6 07                     629 		.byte 7 
      001EF7 53 45 54 2D 4F 50 54   630 		.ascii "SET-OPT" 
      001EFE                        631 set_option: 
      001EFE 90 93            [ 1]  632 		ldw y,x 
      001F00 90 FE            [ 2]  633 		ldw y,(y)
      001F02 27 06            [ 1]  634 		jreq 1$
      001F04 90 A3 00 07      [ 2]  635 		cpw y,#7 
      001F08 23 04            [ 2]  636 		jrule 2$ 
                                    637 ; invalid OPTION number 		
      001F0A 1C 00 04         [ 2]  638 1$:		addw x,#2*CELLL
      001F0D 81               [ 4]  639 		ret
      001F0E 90 58            [ 2]  640 2$:		sllw y 
      001F10 72 A9 47 FF      [ 2]  641 		addw y,#OPTION_BASE-1
      001F14 FF               [ 2]  642 		ldw (x),y 
      001F15 1D 00 02         [ 2]  643 		subw x,#CELLL 
      001F18 90 5F            [ 1]  644 		clrw y 
      001F1A FF               [ 2]  645 		ldw (x),y 
      001F1B CD 1D 94         [ 4]  646 		call EECSTORE
      001F1E 81               [ 4]  647 		ret 
                                    648 
                                    649 
                                    650 
                                    651 ;--------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



                                    652 ; reset system to its original state 
                                    653 ; before any user modification
                                    654 ; PRISTINE ( -- )
                                    655 ;-------------------------------------
      001F1F 1E F6                  656 	.word LINK  
                           001F21   657 	LINK=.
      001F21 08                     658 	.byte 8 
      001F22 50 52 49 53 54 49 4E   659 	.ascii "PRISTINE"
             45
      001F2A                        660 pristine:
                                    661 ;;; erase EEPROM
      001F2A CD 1B 75         [ 4]  662 	call EEPROM 
      001F2D CD 08 31         [ 4]  663 1$:	call DDUP 
      001F30 CD 1E 0A         [ 4]  664 	call row_erase
      001F33 90 93            [ 1]  665 	ldw y,x 
      001F35 90 EE 02         [ 2]  666 	ldw y,(2,y)
      001F38 72 A9 00 80      [ 2]  667 	addw y,#BLOCK_SIZE
      001F3C EF 02            [ 2]  668 	ldw (2,x),y
      001F3E 90 A3 48 00      [ 2]  669 	cpw y,#OPTION_BASE 
      001F42 25 E9            [ 1]  670 	jrult 1$
                                    671 ;;; reset OPTION to default values
      001F44 90 AE 00 01      [ 2]  672 	ldw y,#1 ; OPT1 
      001F48 FF               [ 2]  673 2$:	ldw (x),y   
      001F49 90 5F            [ 1]  674 	clrw y 
      001F4B EF 02            [ 2]  675 	ldw (2,x),y  ; ( 0 1 -- ) 
      001F4D CD 08 31         [ 4]  676 	call DDUP    ; ( 0 1 0 1 -- )  
      001F50 CD 1E FE         [ 4]  677 	call set_option
      001F53 90 93            [ 1]  678 	ldw y,x 
      001F55 90 FE            [ 2]  679 	ldw y,(y)
      001F57 90 5C            [ 1]  680 	incw y  ; next OPTION 
      001F59 90 A3 00 08      [ 2]  681 	cpw y,#8 
      001F5D 25 E9            [ 1]  682 	jrult 2$
                                    683 ;;; erase first row of app_space 	
      001F5F 90 AE 33 80      [ 2]  684 	ldw y,#app_space
      001F63 EF 02            [ 2]  685 	ldw (2,x),y  
      001F65 90 5F            [ 1]  686 	clrw y 
      001F67 FF               [ 2]  687 	ldw (x),y ; ( app_space 0 -- )
      001F68 CD 1E 0A         [ 4]  688 	call row_erase 
                                    689 ; reset interrupt vectors 
      001F6B 1D 00 02         [ 2]  690 	subw x,#CELLL 
      001F6E 90 5F            [ 1]  691 	clrw y  
      001F70 FF               [ 2]  692 4$:	ldw (x),y  ; ( n -- ) int# 
      001F71 CD 06 21         [ 4]  693 	call DUPP  
      001F74 CD 1F 91         [ 4]  694 	call reset_vector
      001F77 90 93            [ 1]  695 	ldw y,x 
      001F79 90 FE            [ 2]  696 	ldw y,(y)
      001F7B 90 5C            [ 1]  697 	incw y   ; next vector 
      001F7D 90 A3 00 19      [ 2]  698 	cpw y,#25 
      001F81 25 ED            [ 1]  699 	jrult 4$
      001F83 CC 00 00         [ 2]  700 	jp NonHandledInterrupt ; reset MCU
                                    701 
                                    702 ;------------------------------
                                    703 ; reset an interrupt vector 
                                    704 ; to its initial value 
                                    705 ; i.e. NonHandledInterrupt
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



                                    706 ; RST-IVEC ( n -- )
                                    707 ;-----------------------------
      001F86 1F 21                  708 	.word LINK 
                           001F88   709 	LINK=. 
      001F88 08                     710 	.byte 8 
      001F89 52 53 54 2D 49 56 45   711 	.ascii "RST-IVEC"
             43
      001F91                        712 reset_vector:
      001F91 90 93            [ 1]  713 	ldw y,x
      001F93 1C 00 02         [ 2]  714 	addw x,#CELLL 
      001F96 90 FE            [ 2]  715 	ldw y,(y)
      001F98 90 A3 00 17      [ 2]  716 	cpw y,#23 
      001F9C 27 3A            [ 1]  717 	jreq 9$
      001F9E 90 A3 00 1D      [ 2]  718 	cpw y,#29 ; last vector
      001FA2 22 34            [ 1]  719 	jrugt 9$  
      001FA4 90 58            [ 2]  720 	sllw y 
      001FA6 90 58            [ 2]  721 	sllw y 
      001FA8 72 A9 80 08      [ 2]  722 	addw y,#0x8008 ; irq0 address 
      001FAC 90 BF 26         [ 2]  723 	ldw YTEMP,y
      001FAF 1D 00 06         [ 2]  724 	subw x,#3*CELLL 
      001FB2 EF 02            [ 2]  725 	ldw (2,x),y 
      001FB4 90 5F            [ 1]  726 	clrw y
      001FB6 FF               [ 2]  727 	ldw (x),y 
      001FB7 A6 82            [ 1]  728 	ld a,#0x82 
      001FB9 90 95            [ 1]  729 	ld yh,a
      001FBB EF 04            [ 2]  730 	ldw (4,x),y
      001FBD CD 1D E0         [ 4]  731 	call EESTORE
      001FC0 1D 00 06         [ 2]  732 	subw x,#3*CELLL
      001FC3 90 5F            [ 1]  733 	clrw y 
      001FC5 FF               [ 2]  734 	ldw (x),y 
      001FC6 90 AE 00 00      [ 2]  735 	ldw y,#NonHandledInterrupt
      001FCA EF 04            [ 2]  736 	ldw (4,x),y 
      001FCC 90 BE 26         [ 2]  737 	ldw y,YTEMP  
      001FCF 72 A9 00 02      [ 2]  738 	addw y,#2
      001FD3 EF 02            [ 2]  739 	ldw (2,x),y 
      001FD5 CD 1D E0         [ 4]  740 	call EESTORE
      001FD8 81               [ 4]  741 9$:	ret 
                                    742 
                                    743 
                                    744 ;------------------------------
                                    745 ; all interrupt vector with 
                                    746 ; an address >= a are resetted 
                                    747 ; to default
                                    748 ; CHKIVEC ( a -- )
                                    749 ;------------------------------
      001FD9 1F 88                  750 	.word LINK 
                           001FDB   751 	LINK=.
      001FDB 07                     752 	.byte 7
      001FDC 43 48 4B 49 56 45 43   753 	.ascii "CHKIVEC"
                                    754 ;local variables 
                           000001   755 	SSP=1
                           000003   756 	CADR=3
                           000005   757 	OFS=5
                           000006   758 	VSIZE=6  
      001FE3                        759 CHKIVEC:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      001FE3 52 06            [ 2]  760 	sub sp,#VSIZE ;alloc local variables 
      001FE5 90 93            [ 1]  761 	ldw y,x 
      001FE7 90 FE            [ 2]  762 	ldw y,(y)
      001FE9 17 03            [ 2]  763 	ldw (CADR,sp),y ; ca 
      001FEB 1F 01            [ 2]  764 	ldw (SSP,sp),x 
      001FED AE 80 0A         [ 2]  765 	ldw x,#0x800a ; irq0 address 
      001FF0 BF 35            [ 2]  766 	ldw PTR16,X
      001FF2 AE FF FC         [ 2]  767 	ldw x,#-4 
      001FF5 1C 00 04         [ 2]  768 1$:	addw x,#4
      001FF8 A3 00 78         [ 2]  769 	cpw x,#30*4 ; irq0-29 
      001FFB 27 22            [ 1]  770 	jreq 9$
      001FFD 90 93            [ 1]  771 	ldw y,x  
      001FFF 91 D6 35         [ 4]  772 	ld a,([PTR16],y)
      002002 11 03            [ 1]  773 	cp a,(CADR,sp)
      002004 25 EF            [ 1]  774 	jrult 1$
      002006 90 5C            [ 1]  775 	incw y 
      002008 91 D6 35         [ 4]  776 	ld a,([PTR16],y)
      00200B 11 04            [ 1]  777 	cp a,(CADR+1,sp) 
      00200D 25 E6            [ 1]  778 	jrult 1$ 
      00200F 1F 05            [ 2]  779 	ldw (OFS,sp),x 
      002011 54               [ 2]  780 	srlw x
      002012 54               [ 2]  781 	srlw x 
      002013 90 93            [ 1]  782 	ldw y,x 
      002015 1E 01            [ 2]  783 	ldw x,(SSP,sp)
      002017 FF               [ 2]  784 	ldw (x),y
      002018 CD 1F 91         [ 4]  785 	call reset_vector
      00201B 1E 05            [ 2]  786 	ldw x,(OFS,sp) 
      00201D 20 D6            [ 2]  787 	jra 1$
      00201F 1E 01            [ 2]  788 9$:	ldw x,(SSP,sp) 
      002021 1C 00 02         [ 2]  789 	addw x,#CELLL 
      002024 5B 06            [ 2]  790 	addw sp,#VSIZE ; drop local variables  
      002026 81               [ 4]  791 	ret 
                                    792 
                                    793 ;------------------------------
                                    794 ; set interrupt vector 
                                    795 ; SET-IVEC ( ud n -- )
                                    796 ;  ud Handler address
                                    797 ;  n  vector # 0 .. 29 
                                    798 ;-----------------------------
      002027 1F DB                  799 	.word LINK
                           002029   800 	LINK=.
      002029 08                     801 	.byte 8 
      00202A 53 45 54 2D 49 56 45   802 	.ascii "SET-IVEC" 
             43
      002032                        803 set_vector:
      002032 90 93            [ 1]  804     ldw y,x 
      002034 1C 00 02         [ 2]  805 	addw x,#CELLL 
      002037 90 FE            [ 2]  806 	ldw y,(y) ; vector #
      002039 90 A3 00 1D      [ 2]  807 	cpw y,#29 ; last vector
      00203D 23 04            [ 2]  808 	jrule 2$
      00203F 1C 00 04         [ 2]  809 	addw x,#2*CELLL 
      002042 81               [ 4]  810 	ret
      002043 90 58            [ 2]  811 2$:	sllw y 
      002045 90 58            [ 2]  812 	sllw y 
      002047 72 A9 80 08      [ 2]  813 	addw y,#0X8008 ; IRQ0 vector address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      00204B 90 BF 26         [ 2]  814 	ldw YTEMP,y ; vector address 
      00204E A6 82            [ 1]  815 	ld a,#0x82 
      002050 90 95            [ 1]  816 	ld yh,a 
      002052 E6 01            [ 1]  817 	ld a,(1,x) ; isr address bits 23..16 
      002054 90 97            [ 1]  818 	ld yl,a 
                                    819 ;  write 0x82 + most significant byte of int address	
      002056 1D 00 06         [ 2]  820 	subw x,#3*CELLL 
      002059 EF 04            [ 2]  821 	ldw (4,x),y 
      00205B 90 BE 26         [ 2]  822 	ldw y,YTEMP
      00205E EF 02            [ 2]  823 	ldw (2,x),y ; vector address 
      002060 90 5F            [ 1]  824 	clrw y 
      002062 FF               [ 2]  825 	ldw (x),y   ; as a double 
      002063 CD 1D E0         [ 4]  826 	call EESTORE 
      002066 90 93            [ 1]  827 	ldw y,x 
      002068 90 EE 02         [ 2]  828 	ldw y,(2,y) ; bits 15..0 int vector 
      00206B 1D 00 06         [ 2]  829 	subw x,#3*CELLL 
      00206E EF 04            [ 2]  830 	ldw (4,x),y 
      002070 90 BE 26         [ 2]  831 	ldw y,YTEMP 
      002073 72 A9 00 02      [ 2]  832 	addw y,#2 
      002077 EF 02            [ 2]  833 	ldw (2,x),y 
      002079 90 5F            [ 1]  834 	clrw y 
      00207B FF               [ 2]  835 	ldw (x),y 
      00207C CD 1D E0         [ 4]  836 	call EESTORE
      00207F 1C 00 04         [ 2]  837 	addw x,#2*CELLL  
      002082 81               [ 4]  838 9$: ret 
                                    839 
                                    840 
                                    841 ;------------------------
                                    842 ; Compile word to flash
                                    843 ; EE, (w -- )
                                    844 ;-----------------------
      002083 20 29                  845 	.word LINK
                           002085   846 	LINK=.
      002085 03                     847 	.byte 3
      002086 45 45 2C               848 	.ascii "EE,"
      002089                        849 EE_COMMA:
      002089 1D 00 04         [ 2]  850 	subw x,#2*CELLL 
      00208C 90 BE 1A         [ 2]  851 	ldw y,UCP
      00208F 90 89            [ 2]  852 	pushw y 
      002091 EF 02            [ 2]  853 	ldw (2,x),y 
      002093 90 5F            [ 1]  854 	clrw y 
      002095 FF               [ 2]  855 	ldw (x),y
      002096 CD 1D E0         [ 4]  856 	call EESTORE
      002099 90 85            [ 2]  857 	popw y 
      00209B 72 A9 00 02      [ 2]  858 	addw y,#2
      00209F 90 BF 1A         [ 2]  859 	ldw UCP,y
      0020A2 81               [ 4]  860 	ret 
                                    861 
                                    862 
                                    863 ;-------------------------
                                    864 ; Compile byte to flash 
                                    865 ; EEC, ( c -- )	
                                    866 ;-------------------------
      0020A3 20 85                  867 	.word LINK 
                           0020A5   868 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



      0020A5 04                     869 	.byte 4 
      0020A6 45 45 43 2C            870 	.ascii "EEC,"
      0020AA                        871 EE_CCOMMA:
      0020AA 1D 00 04         [ 2]  872 	subw x,#2*CELLL 
      0020AD 90 BE 1A         [ 2]  873 	ldw y,UCP
      0020B0 90 89            [ 2]  874 	pushw y 
      0020B2 EF 02            [ 2]  875 	ldw (2,x),y 
      0020B4 90 5F            [ 1]  876 	clrw y 
      0020B6 FF               [ 2]  877 	ldw (x),y
      0020B7 CD 1D 94         [ 4]  878 	call EECSTORE
      0020BA 90 85            [ 2]  879 	popw y 
      0020BC 90 5C            [ 1]  880 	incw y 
      0020BE 90 BF 1A         [ 2]  881 	ldw UCP,y
      0020C1 81               [ 4]  882 	ret 
                                    883 
                                    884 
                                    885 ;--------------------------
                                    886 ; copy FLASH block to ROWBUF
                                    887 ; ROW>BUF ( ud -- )
                                    888 ;--------------------------
      0020C2 20 A5                  889 	.word LINK 
                           0020C4   890 	LINK=.
      0020C4 07                     891 	.byte 7 
      0020C5 52 4F 57 3E 42 55 46   892 	.ascii "ROW>BUF"
      0020CC                        893 ROW2BUF: 
      0020CC CD 1B 56         [ 4]  894 	call FPSTOR 
      0020CF A6 80            [ 1]  895 	ld a,#BLOCK_SIZE
      0020D1 88               [ 1]  896 	push a 
      0020D2 B4 36            [ 1]  897 	and a,PTR8 ; block align 
      0020D4 B7 36            [ 1]  898 	ld PTR8,a
      0020D6 90 AE 16 80      [ 2]  899 	ldw y,#ROWBUFF 
      0020DA 92 BC 00 34      [ 5]  900 1$: ldf a,[FPTR]
      0020DE 90 F7            [ 1]  901 	ld (y),a
      0020E0 CD 1C D0         [ 4]  902 	call INC_FPTR
      0020E3 90 5C            [ 1]  903 	incw y 
      0020E5 0A 01            [ 1]  904 	dec (1,sp)
      0020E7 26 F1            [ 1]  905 	jrne 1$ 
      0020E9 84               [ 1]  906 	pop a 
      0020EA 81               [ 4]  907 	ret 
                                    908 
                                    909 
                                    910 ;---------------------------
                                    911 ; copy ROWBUFF to flash 
                                    912 ; BUF>ROW ( ud -- )
                                    913 ; ud is row address as double 
                                    914 ;---------------------------
      0020EB 20 C4                  915 	.word LINK 
                           0020ED   916 	LINK=.
      0020ED 07                     917 	.byte 7 
      0020EE 42 55 46 3E 52 4F 57   918 	.ascii "BUF>ROW" 
      0020F5                        919 BUF2ROW:
      0020F5 CD 07 25         [ 4]  920 	call TBUF ; ( ud rb -- )
      0020F8 CD 07 E5         [ 4]  921 	call ROT 
      0020FB CD 07 E5         [ 4]  922 	call ROT  ; ( rb ud -- )
      0020FE CD 1E CE         [ 4]  923 	call write_row 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



      002101 81               [ 4]  924 	ret 
                                    925 
                                    926 ;---------------------------------
                                    927 ; how many byte free in that row 
                                    928 ; RFREE ( a -- n )
                                    929 ; a is least byte of target address
                                    930 ;----------------------------------
      002102 20 ED                  931 	.word LINK 
                           002104   932 	LINK=.
      002104 05                     933 	.byte 5 
      002105 52 46 52 45 45         934 	.ascii "RFREE"
      00210A                        935 RFREE:
      00210A E6 01            [ 1]  936 	ld a,(1,x)
      00210C A4 7F            [ 1]  937 	and a,#BLOCK_SIZE-1 
      00210E B7 26            [ 1]  938 	ld YTEMP,a 
      002110 A6 80            [ 1]  939 	ld a,#BLOCK_SIZE 
      002112 B0 26            [ 1]  940 	sub a,YTEMP 
      002114 90 5F            [ 1]  941 	clrw y 
      002116 90 97            [ 1]  942 	ld yl,a
      002118 FF               [ 2]  943 	ldw (x),y 
      002119 81               [ 4]  944 	ret 
                                    945 
                                    946 ;---------------------------------
                                    947 ; write u bytes to flash/EEPROM 
                                    948 ; constraint to row limit 
                                    949 ; RAM>EE ( ud a u -- u2 )
                                    950 ; ud flash address 
                                    951 ; a ram address 
                                    952 ; u bytes count
                                    953 ; return u2 bytes written  
                                    954 ;-------------------------------
      00211A 21 04                  955 	.word LINK 
                           00211C   956 	LINK=. 
      00211C 06                     957 	.byte 6
      00211D 52 41 4D 3E 45 45      958 	.ascii "RAM>EE"
                                    959 	
      002123                        960 RAM2EE:
                                    961 ; copy ud on top 
      002123 90 93            [ 1]  962 	ldw y,x 
      002125 90 EE 06         [ 2]  963 	ldw y,(6,y) ; LSW of ud  
      002128 90 BF 26         [ 2]  964 	ldw YTEMP,y 
      00212B 90 93            [ 1]  965 	ldw y,x 
      00212D 90 EE 04         [ 2]  966 	ldw y,(4,y)  ; MSW of ud 
      002130 1D 00 04         [ 2]  967 	subw x,#2*CELLL 
      002133 FF               [ 2]  968 	ldw (x),y 
      002134 90 BE 26         [ 2]  969 	ldw y,YTEMP 
      002137 EF 02            [ 2]  970 	ldw (2,x),y 
      002139 CD 20 CC         [ 4]  971 	call ROW2BUF 
      00213C 90 93            [ 1]  972 	ldw y,x 
      00213E 90 EE 06         [ 2]  973 	ldw y,(6,y)
      002141 90 89            [ 2]  974 	pushw y ; udl 
      002143 90 9F            [ 1]  975 	ld a,yl
      002145 A4 7F            [ 1]  976 	and a,#BLOCK_SIZE-1 
      002147 90 5F            [ 1]  977 	clrw y 
      002149 90 97            [ 1]  978 	ld yl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      00214B 72 A9 16 80      [ 2]  979 	addw y,#ROWBUFF 
      00214F 1D 00 02         [ 2]  980 	subw x,#CELLL 
      002152 FF               [ 2]  981 	ldw (x),y  
      002153 CD 06 31         [ 4]  982 	call SWAPP ;  ( ud a ra u -- )
      002156 CD 05 34         [ 4]  983 	call RFROM  
      002159 CD 21 0A         [ 4]  984 	call RFREE 
      00215C CD 09 9D         [ 4]  985 	call MIN
      00215F CD 06 21         [ 4]  986 	call DUPP 
      002162 CD 05 EA         [ 4]  987 	call TOR  
      002165 CD 0C F8         [ 4]  988 	call CMOVE
      002168 CD 20 F5         [ 4]  989 	call BUF2ROW 
      00216B CD 05 34         [ 4]  990 	call RFROM 
      00216E 81               [ 4]  991 	ret 
                                    992 
                                    993 
                                    994 ;--------------------------
                                    995 ; expand 16 bit address 
                                    996 ; to 32 bit address 
                                    997 ; FADDR ( a -- ud )
                                    998 ;--------------------------
      00216F 21 1C                  999 	.word LINK 
                           002171  1000 	LINK=. 
      002171 05                    1001 	.byte 5 
      002172 46 41 44 44 52        1002 	.ascii "FADDR"
      002177                       1003 FADDR:
      002177 CC 0B CE         [ 2] 1004 	jp ZERO 
                                   1005 
                                   1006 
                                   1007 ;--------------------------
                                   1008 ; move new colon definition to FLASH 
                                   1009 ; using WR-ROW for efficiency 
                                   1010 ; preserving bytes already used 
                                   1011 ; in the current block. 
                                   1012 ; At this point the compiler as completed
                                   1013 ; in RAM and pointers CP and CNTXT updated.
                                   1014 ; CNTXT point to nfa of new word and  
                                   1015 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                   1016 ; 
                                   1017 ; FMOVE ( -- cp+ )
                                   1018 ; 
                                   1019 ;--------------------------
      00217A 21 71                 1020 	.word LINK 
                           00217C  1021 	LINK=.
      00217C 05                    1022 	.byte 5 
      00217D 46 4D 4F 56 45        1023 	.ascii "FMOVE" 
      002182                       1024 FMOVE:
      002182 CD 07 37         [ 4] 1025 	call TFLASH 
      002185 CD 04 E3         [ 4] 1026 	CALL AT 
      002188 CD 04 98         [ 4] 1027 	CALL QBRAN 
      00218B 22 06                 1028 	.word no_move  
      00218D CD 07 86         [ 4] 1029 	call CPP
      002190 CD 04 E3         [ 4] 1030 	call AT  
      002193 CD 06 21         [ 4] 1031 	call DUPP ; ( udl udl -- )
      002196 CD 07 6A         [ 4] 1032 	call CNTXT 
      002199 CD 04 E3         [ 4] 1033 	call AT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      00219C CD 04 6F         [ 4] 1034 	call DOLIT 
      00219F 00 02                 1035 	.word 2 
      0021A1 CD 08 BD         [ 4] 1036 	call SUBB ; ( udl udl a -- )
      0021A4 CD 06 31         [ 4] 1037 	call SWAPP 
      0021A7 CD 21 77         [ 4] 1038 	call FADDR 
      0021AA CD 07 E5         [ 4] 1039 	call ROT  ; ( udl ud a -- )
      0021AD CD 06 21         [ 4] 1040 	call DUPP 
      0021B0 CD 05 EA         [ 4] 1041 	call TOR    ; R: a 
      0021B3                       1042 FMOVE2: 
      0021B3 CD 0C AB         [ 4] 1043 	call HERE 
      0021B6 CD 05 45         [ 4] 1044 	call RAT 
      0021B9 CD 08 BD         [ 4] 1045 	call SUBB ; (udl ud a wl -- )
      0021BC                       1046 next_row:
      0021BC CD 06 21         [ 4] 1047 	call DUPP 
      0021BF CD 05 EA         [ 4] 1048 	call TOR  ; ( udl ud a wl -- ) R: a wl
      0021C2 CD 21 23         [ 4] 1049 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      0021C5 CD 06 21         [ 4] 1050 	call DUPP 
      0021C8 CD 05 EA         [ 4] 1051 	call TOR
      0021CB CD 08 46         [ 4] 1052 	call PLUS  ; ( udl+ ) 
      0021CE CD 06 21         [ 4] 1053 	call DUPP 
      0021D1 CD 0B CE         [ 4] 1054 	call ZERO   ; ( udl+ ud -- )
      0021D4 CD 05 34         [ 4] 1055 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      0021D7 CD 05 34         [ 4] 1056 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      0021DA CD 06 49         [ 4] 1057 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      0021DD CD 08 BD         [ 4] 1058 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      0021E0 CD 06 21         [ 4] 1059 	call DUPP 
      0021E3 CD 04 98         [ 4] 1060 	call QBRAN
      0021E6 21 FF                 1061 	.word fmove_done 
      0021E8 CD 06 31         [ 4] 1062 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      0021EB CD 05 34         [ 4] 1063 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      0021EE CD 08 46         [ 4] 1064 	call PLUS  ; ( udl+2 ud wl- a+ )
      0021F1 CD 06 21         [ 4] 1065 	call DUPP 
      0021F4 CD 05 EA         [ 4] 1066 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      0021F7 CD 06 31         [ 4] 1067 	call SWAPP 
      0021FA CD 04 B4         [ 4] 1068 	call BRAN
      0021FD 21 BC                 1069 	.word next_row  
      0021FF                       1070 fmove_done:	
      0021FF CD 05 34         [ 4] 1071 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      002202 1C 00 0A         [ 2] 1072 	addw x,#5*CELLL ; (  -- cp+ ) new CP 
      002205 81               [ 4] 1073  	ret  
      002206                       1074 no_move:
      002206 CD 0B CE         [ 4] 1075 	call ZERO
      002209 81               [ 4] 1076 	ret 
                                   1077 
                                   1078 ;------------------------------------------
                                   1079 ; adjust pointers after **FMOVE** operetion.
                                   1080 ; UPDAT-PTR ( cp+ -- )
                                   1081 ; cp+ is new CP position after FMOVE 
                                   1082 ;-------------------------------------------
      00220A 21 7C                 1083 	.word LINK 
                           00220C  1084 	LINK=.
      00220C 09                    1085 	.byte 9
      00220D 55 50 44 41 54 2D 50  1086 	.ascii "UPDAT-PTR" 
             54 52
      002216                       1087 UPDATPTR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



                                   1088 ;reset VP to previous position  
      002216 CD 1B D0         [ 4] 1089 	call EEPVP 
      002219 CD 06 17         [ 4] 1090 	call DROP 
      00221C CD 04 E3         [ 4] 1091 	call AT
      00221F CD 07 78         [ 4] 1092 	call VPP 
      002222 CD 04 D1         [ 4] 1093 	call STORE
                                   1094 ;update CONTEXT and LAST 
      002225 CD 1B BA         [ 4] 1095 	call EEPCP 
      002228 CD 06 17         [ 4] 1096 	call DROP
      00222B CD 04 E3         [ 4] 1097 	call AT
      00222E CD 04 6F         [ 4] 1098 	call DOLIT 
      002231 00 02                 1099 	.word 2 
      002233 CD 08 46         [ 4] 1100 	call PLUS 
      002236 CD 06 21         [ 4] 1101 	call DUPP 
      002239 CD 07 6A         [ 4] 1102 	call CNTXT 
      00223C CD 04 D1         [ 4] 1103 	call STORE
      00223F CD 07 96         [ 4] 1104 	call LAST
      002242 CD 04 D1         [ 4] 1105 	call STORE 
      002245 CD 1B EA         [ 4] 1106 	call UPDATLAST 
                                   1107 ;update CP 
      002248 CD 07 86         [ 4] 1108 	call CPP 
      00224B CD 04 D1         [ 4] 1109 	call STORE
      00224E CD 1C 13         [ 4] 1110 	call UPDATCP 
      002251 81               [ 4] 1111 	ret 
                                   1112 
                                   1113 ;-----------------------------
                                   1114 ; move interrupt sub-routine
                                   1115 ; in flash memory
                                   1116 ;----------------------------- 
      002252 22 0C                 1117 	.word LINK 
                           002254  1118 	LINK=. 
      002254 06                    1119 	.byte 6
      002255 49 46 4D 4F 56 45     1120 	.ascii "IFMOVE" 
      00225B                       1121 IFMOVE:
      00225B CD 07 37         [ 4] 1122 	call TFLASH 
      00225E CD 04 E3         [ 4] 1123 	CALL AT 
      002261 CD 04 98         [ 4] 1124 	CALL QBRAN 
      002264 22 06                 1125 	.word no_move 
      002266 CD 07 86         [ 4] 1126 	call CPP 
      002269 CD 04 E3         [ 4] 1127 	call AT 
      00226C CD 06 21         [ 4] 1128 	call DUPP ; ( udl udl -- )
      00226F CD 1B D0         [ 4] 1129 	call EEPVP 
      002272 CD 06 17         [ 4] 1130 	call DROP
      002275 CD 04 E3         [ 4] 1131 	call AT  ; ( udl udl a )
      002278 CD 05 EA         [ 4] 1132 	call TOR 
      00227B CD 21 77         [ 4] 1133 	call FADDR
      00227E CD 05 45         [ 4] 1134 	call RAT ; ( udl ud a -- ) R: a 
      002281 CC 21 B3         [ 2] 1135 	jp FMOVE2 
                                   1136 
                                   1137 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



                           000001  4460 .if WANT_SCALING_CONST 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



                                   4461         .include "const_ratio.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;--------------------------------------------------------------------
                                     22 ; Irrationals constants 
                                     23 ; expressed as 2 integers ratio
                                     24 ; aproximation. These are to be used with scaling operators */ and */MOD 
                                     25 ; REF: https://www.forth.com/starting-forth/5-fixed-point-arithmetic/
                                     26 ;---------------------------------------------------------------------
                                     27 
                                     28 ;       PI ( --  355 113 )
                                     29 ; precision 8.5e-8 
                                     30 ; usage example to compute circle area
                                     31 ; : CAREA DUP * PI */ ;
                                     32 ; 
                                     33 
      002284 22 54                   34         .word LINK 
                           002286    35         LINK=.
      002286 02                      36         .byte 2
      002287 50 49                   37         .ascii "PI" 
      002289                         38 PII:
      002289 1D 00 04         [ 2]   39         subw x,#2*CELLL 
      00228C 90 AE 01 63      [ 2]   40         ldw y,#355 
      002290 EF 02            [ 2]   41         ldw (2,x),y 
      002292 90 AE 00 71      [ 2]   42         ldw y,#113 
      002296 FF               [ 2]   43         ldw (x),y 
      002297 81               [ 4]   44         ret 
                                     45 
                                     46 ;      SQRT2 ( -- 19601  13860 )
                                     47 ; precision: 1.5e-9 
                                     48 ; usage example to compute Voltage peek to peek from Vrms 
                                     49 ; : VPP SQRT2 */ 2 * ;
                                     50 ;
      002298 22 86                   51         .word LINK 
                           00229A    52         LINK=.
      00229A 05                      53         .byte 5 
      00229B 53 51 52 54 32          54         .ascii "SQRT2" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      0022A0                         55 SQRT2:
      0022A0 1D 00 04         [ 2]   56         subw x,#2*CELLL 
      0022A3 90 AE 4C 91      [ 2]   57         ldw y,#19601 
      0022A7 EF 02            [ 2]   58         ldw (2,x),y 
      0022A9 90 AE 36 24      [ 2]   59         ldw y,#13860 
      0022AD FF               [ 2]   60         ldw (x),y 
      0022AE 81               [ 4]   61         ret 
                                     62 
                                     63 ;   SQRT3 ( -- 18817 10864 )
                                     64 ; precision: 1.1e-9
                                     65 ;
      0022AF 22 9A                   66         .word LINK 
                           0022B1    67         LINK=.
      0022B1 05                      68         .byte 5
      0022B2 53 51 52 54 33          69         .ascii "SQRT3" 
      0022B7                         70 SQRT3: 
      0022B7 1D 00 04         [ 2]   71     subw x,#2*CELLL 
      0022BA 90 AE 49 81      [ 2]   72     ldw y,#18817 
      0022BE EF 02            [ 2]   73     ldw (2,x),y 
      0022C0 90 AE 2A 70      [ 2]   74     ldw y,#10864 
      0022C4 FF               [ 2]   75     ldw (x),y 
      0022C5 81               [ 4]   76     ret 
                                     77 
                                     78 ;   E ( -- 28667 10546 )
                                     79 ; precision: 5.5e-9 
                                     80 ; natural log base 
      0022C6 22 B1                   81         .word LINK 
                           0022C8    82         LINK=.
      0022C8 01                      83         .byte 1
      0022C9 45                      84         .ascii "E" 
      0022CA                         85 ENEPER:
      0022CA 1D 00 04         [ 2]   86     subw x,#2*CELLL 
      0022CD 90 AE 6F FB      [ 2]   87     ldw y,#28667 
      0022D1 EF 02            [ 2]   88     ldw (2,x),y 
      0022D3 90 AE 29 32      [ 2]   89     ldw y,#10546 
      0022D7 FF               [ 2]   90     ldw (x),y 
      0022D8 81               [ 4]   91     ret 
                                     92 
                                     93 ;   SQRT10 ( -- 22936 7253 )
                                     94 ; precision: 5.7e-9 
      0022D9 22 C8                   95         .word LINK 
                           0022DB    96         LINK=.
      0022DB 06                      97         .byte 6 
      0022DC 53 51 52 54 31 30       98         .ascii "SQRT10" 
      0022E2                         99 SQRT10:
      0022E2 1D 00 04         [ 2]  100     subw x,#2*CELLL
      0022E5 90 AE 59 98      [ 2]  101     ldw y,#22936 
      0022E9 EF 02            [ 2]  102     ldw (2,x),y 
      0022EB 90 AE 1C 55      [ 2]  103     ldw y,#7253
      0022EF FF               [ 2]  104     ldw (x),y 
      0022F0 81               [ 4]  105     ret 
                                    106 
                                    107 ;   12RT2 ( -- 26797 25293 )
                                    108 ; precision: 1.0e-9 
                                    109 ; used in music to compute well tempered scale
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      0022F1 22 DB                  110         .word LINK 
                           0022F3   111         LINK=. 
      0022F3 05                     112         .byte 5 
      0022F4 31 32 52 54 32         113         .ascii "12RT2"
      0022F9                        114 RT12_2:
      0022F9 1D 00 04         [ 2]  115     subw x,#2*CELLL 
      0022FC 90 AE 68 AD      [ 2]  116     ldw y,#26797
      002300 EF 02            [ 2]  117     ldw (2,x),y 
      002302 90 AE 62 CD      [ 2]  118     ldw y,#25293
      002306 FF               [ 2]  119     ldw (x),y 
      002307 81               [ 4]  120     ret 
                                    121 
                                    122 ;   LOG2s ( -- 2040 11103 )
                                    123 ; log(2)/1.6384
                                    124 ; precision: 1.1e-8
      002308 22 F3                  125         .word LINK 
                           00230A   126         LINK=.
      00230A 05                     127         .byte 5 
      00230B 4C 4F 47 32 53         128         .ascii "LOG2S" 
      002310                        129 LOG2S:
      002310 1D 00 04         [ 2]  130     subw x,#2*CELLL
      002313 90 AE 07 F8      [ 2]  131     ldw y,#2040 
      002317 EF 02            [ 2]  132     ldw (2,x),y 
      002319 90 AE 2B 5F      [ 2]  133     ldw y,#11103 
      00231D FF               [ 2]  134     ldw (x),y 
      00231E 81               [ 4]  135     ret 
                                    136 
                                    137 ;   LN2 ( -- 485 11464 )
                                    138 ; ln(2)/16.384 
                                    139 ; precision: 1.0e-7 
      00231F 23 0A                  140         .word LINK 
                           002321   141         LINK=.
      002321 04                     142         .byte 4 
      002322 4C 4E 32 53            143         .ascii "LN2S" 
      002326                        144 LN2S: 
      002326 1D 00 04         [ 2]  145     subw x,#2*CELLL
      002329 90 AE 01 E5      [ 2]  146     ldw y,#485
      00232D EF 02            [ 2]  147     ldw (2,x),y 
      00232F 90 AE 2C C8      [ 2]  148     ldw y,#11464 
      002333 FF               [ 2]  149     ldw (x),y 
      002334 81               [ 4]  150     ret 
                                    151 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



                                   4462 .endif
                           000001  4463 .if WANT_CONST_TABLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



                                   4464         .include "ctable.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;------------------------------
                                     22 ; words to create and read 
                                     23 ; constants tables in FLASH 
                                     24 ; and EEPROM
                                     25 ;------------------------------
                                     26 
                                     27 ;-----------------------------
                                     28 ; allocate space in CODE area 
                                     29 ; for constant table.
                                     30 ; CALLOT ( u -- ad )
                                     31 ; u  bytes to allocates 
                                     32 ; ad data address as double.
                                     33 ;-----------------------------
      002335 23 21                   34     .word LINK 
                           002337    35     LINK=.
      002337 06                      36     .byte 6
      002338 43 41 4C 4C 4F 54       37     .ascii "CALLOT"
      00233E                         38 CALLOT:
      00233E CD 07 86         [ 4]   39     CALL CPP
      002341 CD 06 21         [ 4]   40     CALL DUPP 
      002344 CD 04 E3         [ 4]   41     CALL AT 
      002347 CD 05 EA         [ 4]   42     CALL TOR 
      00234A CD 0C 3E         [ 4]   43     CALL PSTOR 
      00234D CD 1C 13         [ 4]   44     CALL UPDATCP 
      002350 CD 05 34         [ 4]   45     CALL RFROM
      002353 CC 0B CE         [ 2]   46     JP ZERO 
                                     47 
                                     48 ;------------------------------
                                     49 ; create constants bytes table 
                                     50 ; in persistant memory
                                     51 ;  CTABLE ( n+ -- ad ; <string> )
                                     52 ; n+ bytes reserved 
                                     53 ;-----------------------------
      002356 23 37                   54     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



                           002358    55     LINK=.
      002358 06                      56     .byte 6
      002359 43 54 41 42 4C 45       57     .ascii "CTABLE"
      00235F                         58 CTABLE:
      00235F CD 23 3E         [ 4]   59     CALL CALLOT     
      002362 CC 19 15         [ 2]   60     JP DCONST 
                                     61      
                                     62 
                                     63 ;--------------------------------
                                     64 ; create constants words table 
                                     65 ; in persistant memory 
                                     66 ; WTABLE ( n+ -- ad ; <string> )
                                     67 ; n+  words reserved  
                                     68 ;--------------------------------
      002365 23 58                   69     .word LINK 
                           002367    70     LINK=.
      002367 06                      71     .byte 6
      002368 57 54 41 42 4C 45       72     .ascii "WTABLE"
      00236E                         73 WTABLE:
      00236E CD 0B 55         [ 4]   74     CALL CELLS  
      002371 CD 23 3E         [ 4]   75     CALL CALLOT 
      002374 CC 19 15         [ 2]   76     JP DCONST 
                                     77 
                                     78 ;---------------------------------
                                     79 ; stack an element of CTABLE 
                                     80 ; CTABL@ ( u ad -- c )
                                     81 ; u element order {0..size-1}
                                     82 ; a|ad table address 
                                     83 ;--------------------------------
      002377 23 67                   84     .word LINK 
                           002379    85     LINK=.
      002379 06                      86     .byte 6
      00237A 43 54 41 42 4C 40       87     .ascii "CTABL@" 
      002380                         88 CTAT:
      002380 CD 1B 56         [ 4]   89     call FPSTOR 
      002383 CD 1C E8         [ 4]   90     call PTRPLUS 
      002386 CC 1D 25         [ 2]   91     jp EE_CREAD 
                                     92 
                                     93 ;---------------------------------
                                     94 ; stack an element of WTABLE 
                                     95 ; WTABL@ ( u ud -- w )
                                     96 ; u is element order {0..size-1}
                                     97 ; a|ud table address 
                                     98 ;----------------------------------
      002389 23 79                   99     .word LINK 
                           00238B   100     LINK=.
      00238B 06                     101     .byte 6
      00238C 57 54 41 42 4C 40      102     .ascii "WTABL@" 
      002392                        103 WTAT:
      002392 CD 1B 56         [ 4]  104     call FPSTOR 
      002395 CD 0B 55         [ 4]  105     call CELLS 
      002398 CD 1C E8         [ 4]  106     call PTRPLUS 
      00239B CD 1D 03         [ 4]  107     call EE_READ 
      00239E 81               [ 4]  108     ret 
                                    109 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



                                    110 ;--------------------------
                                    111 ; tool to initialize character table 
                                    112 ; CTINIT ( ad -- )
                                    113 ; ad is table address 
                                    114 ;--------------------------
      00239F 23 8B                  115     .word LINK 
                           0023A1   116     LINK=.
      0023A1 06                     117     .byte 6 
      0023A2 43 54 49 4E 49 54      118     .ascii "CTINIT"
      0023A8                        119 CTINIT:
      0023A8 CD 1B 56         [ 4]  120     CALL FPSTOR
      0023AB CD 1C 94         [ 4]  121     CALL UNLOCK
      0023AE CD 0B CE         [ 4]  122     CALL ZERO 
      0023B1 CD 0B 62         [ 4]  123 1$: CALL ONEP 
      0023B4 CD 06 21         [ 4]  124     CALL DUPP 
      0023B7 CD 24 04         [ 4]  125     CALL INTQ 
      0023BA CD 04 98         [ 4]  126     CALL QBRAN 
      0023BD 23 C7                  127     .word 2$
      0023BF CD 1D 3F         [ 4]  128     call WR_BYTE 
      0023C2 CD 04 B4         [ 4]  129     CALL BRAN 
      0023C5 23 B1                  130     .word 1$ 
      0023C7 CD 08 26         [ 4]  131 2$: CALL DDROP 
      0023CA CD 1C BC         [ 4]  132     CALL LOCK 
      0023CD 81               [ 4]  133     ret 
                                    134 
                                    135 ;--------------------------
                                    136 ; tool to initialize word table 
                                    137 ; WTINIT ( ad -- )
                                    138 ; ad is table address 
                                    139 ;--------------------------
      0023CE 23 A1                  140     .word LINK 
                           0023D0   141     LINK=.
      0023D0 06                     142     .byte 6 
      0023D1 57 54 49 4E 49 54      143     .ascii "WTINIT"
      0023D7                        144 WTINIT:
      0023D7 CD 1B 56         [ 4]  145     CALL FPSTOR
      0023DA CD 1C 94         [ 4]  146     CALL UNLOCK
      0023DD CD 0B CE         [ 4]  147     CALL ZERO 
      0023E0 CD 0B 62         [ 4]  148 1$: CALL ONEP 
      0023E3 CD 06 21         [ 4]  149     CALL DUPP
      0023E6 CD 24 04         [ 4]  150     CALL INTQ
      0023E9 CD 04 98         [ 4]  151     CALL QBRAN 
      0023EC 23 F6                  152     .word 2$
      0023EE CD 1D 64         [ 4]  153     call WR_WORD 
      0023F1 CD 04 B4         [ 4]  154     CALL BRAN 
      0023F4 23 E0                  155     .word 1$ 
      0023F6 CD 08 26         [ 4]  156 2$: CALL DDROP 
      0023F9 CD 1C BC         [ 4]  157     CALL LOCK 
      0023FC 81               [ 4]  158     ret 
                                    159 
                                    160 ;------------------------
                                    161 ; Prompted input for integer 
                                    162 ; display n+ in bracket and
                                    163 ; '?' 
                                    164 ; [N]? ( n+ -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



                                    165 ;------------------------
      0023FD 23 D0                  166     .word LINK 
                           0023FF   167     LINK=.
      0023FF 04                     168     .byte 4
      002400 5B 4E 5D 3F            169     .ascii "[N]?" 
      002404                        170 INTQ:
      002404 CD 0F 46         [ 4]  171     CALL CR 
      002407 CD 04 6F         [ 4]  172     call DOLIT 
      00240A 00 5B                  173     .word '[
      00240C CD 04 36         [ 4]  174     CALL EMIT 
      00240F CD 0F ED         [ 4]  175     CALL DOT 
      002412 CD 0F 73         [ 4]  176     CALL  DOTQP
      002415 03                     177     .byte 3
      002416 5D 3F 20               178     .ascii "]? " 
      002419 CD 13 7D         [ 4]  179     CALL QUERY 
      00241C CD 11 A8         [ 4]  180     call TOKEN 
      00241F CC 24 AD         [ 2]  181     jp NUMBQ
                                    182 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



                                   4465 .endif
                           000001  4466 .if WANT_DOUBLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



                                   4467         .include "double.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;************************************
                                     21 ;    doubles integers library 
                                     22 ;    doubles are signed 32 bits 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26     .module DOUBLE 
                                     27 
                                     28 ; check for negative sign 
                                     29 ; ajust pointer and cntr 
      002422                         30 nsign: ; a cntr -- a cntr f 
      002422 CD 0B CE         [ 4]   31     CALL ZERO 
      002425 CD 05 EA         [ 4]   32     CALL TOR  ; R: sign 
      002428 CD 05 EA         [ 4]   33     CALL TOR  ; R: sign cntr 
      00242B CD 06 21         [ 4]   34     CALL DUPP 
      00242E CD 05 01         [ 4]   35     CALL CAT 
      002431                         36     _DOLIT '-'
      002431 CD 04 6F         [ 4]    1     CALL DOLIT 
      002434 00 2D                    2     .word '-' 
      002436 CD 08 E5         [ 4]   37     CALL EQUAL 
      002439                         38     _QBRAN nsign1 
      002439 CD 04 98         [ 4]    1     CALL QBRAN
      00243C 24 53                    2     .word nsign1
      00243E CD 0B 62         [ 4]   39     CALL ONEP ; a+ 
      002441 CD 05 34         [ 4]   40     CALL RFROM 
      002444 CD 0B 6F         [ 4]   41     CALL ONEM ; cntr-
      002447 CD 05 34         [ 4]   42     CALL RFROM ; sign 
      00244A CD 08 60         [ 4]   43     CALL INVER ; -1
      00244D CD 05 EA         [ 4]   44     CALL TOR   ; R: sign 
      002450 CD 05 EA         [ 4]   45     CALL TOR   ; R: cntr 
      002453                         46 nsign1:
      002453 CD 05 34         [ 4]   47     CALL RFROM 
      002456 CD 05 34         [ 4]   48     CALL RFROM 
      002459 81               [ 4]   49     RET 
                                     50 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



                                     51 
                                     52 ; get all digits in row 
                                     53 ; stop at first non-digit or end of string 
                                     54 ; ( dlo dhi a cntr -- dlo dhi [ a+ cntr- | a+ 0 ] )
      00245A                         55 parse_digits:
      00245A                         56 1$:
      00245A CD 06 21         [ 4]   57     CALL DUPP 
      00245D                         58     _QBRAN 5$ 
      00245D CD 04 98         [ 4]    1     CALL QBRAN
      002460 24 A2                    2     .word 5$
      002462 CD 05 EA         [ 4]   59     CALL TOR   ; dlo dhi a R: cntr 
      002465 CD 0C 94         [ 4]   60     CALL COUNT ; dlo dhi a+ char 
      002468 CD 06 E7         [ 4]   61     CALL BASE 
      00246B CD 04 E3         [ 4]   62     CALL AT 
      00246E CD 0E 8C         [ 4]   63     CALL DIGTQ 
      002471                         64     _QBRAN 4$ ; not a digit
      002471 CD 04 98         [ 4]    1     CALL QBRAN
      002474 24 99                    2     .word 4$
      002476 CD 27 E3         [ 4]   65     CALL DTOR  ; dlo dhi R: cntr a+ c  
      002479 CD 06 E7         [ 4]   66     CALL BASE 
      00247C CD 04 E3         [ 4]   67     CALL AT 
      00247F CD 26 4E         [ 4]   68     CALL DSSTAR
      002482 CD 05 34         [ 4]   69     CALL RFROM 
      002485 CD 0B CE         [ 4]   70     CALL ZERO 
      002488 CD 2A A7         [ 4]   71     CALL DPLUS 
      00248B CD 05 34         [ 4]   72     CALL RFROM  ; dlo dhi a+ 
      00248E CD 05 34         [ 4]   73     CALL RFROM ; dlo dhi a+ cntr 
      002491 CD 0B 6F         [ 4]   74     CALL ONEM 
      002494                         75     _BRAN 1$ ; dlo dhi a+ R: 
      002494 CD 04 B4         [ 4]    1     CALL BRAN 
      002497 24 5A                    2     .word 1$ 
      002499 CD 06 17         [ 4]   76 4$: CALL DROP  ; dlo dhi a+ 
      00249C CD 0B 6F         [ 4]   77     CALL ONEM  ; unget char 
      00249F CD 05 34         [ 4]   78     CALL RFROM ; dlo dhi a+ cntr-
      0024A2                         79 5$:
      0024A2 81               [ 4]   80     RET 
                                     81 
                                     82 
                                     83 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     84 ;   NUMBER? (a -- s -1 |d -2 | a F )
                                     85 ;   convert string to integer 
                                     86 ;   double begin with '#' 
                                     87 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0024A3                         88     _HEADER NUMBQ,7,"NUMBER?"
      0024A3 23 FF                    1         .word LINK 
                           0024A5     2         LINK=.
      0024A5 07                       3         .byte 7  
      0024A6 4E 55 4D 42 45 52 3F     4         .ascii "NUMBER?"
      0024AD                          5         NUMBQ:
                                     89 ; save current base value 
      0024AD CD 06 E7         [ 4]   90     CALL BASE 
      0024B0 CD 04 E3         [ 4]   91     CALL AT 
      0024B3 CD 05 EA         [ 4]   92     CALL TOR 
                                     93 ; initialize integer to 0     
      0024B6 1D 00 04         [ 2]   94     SUBW X,#4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



      0024B9 90 5F            [ 1]   95     CLRW Y 
      0024BB FF               [ 2]   96     LDW (X),Y 
      0024BC EF 02            [ 2]   97     LDW (2,X),Y ; a 0 0 R: base  
      0024BE                         98     _DOLIT 2 
      0024BE CD 04 6F         [ 4]    1     CALL DOLIT 
      0024C1 00 02                    2     .word 2 
      0024C3 CD 0C 27         [ 4]   99     CALL PICK  ; a 0 0 a R: base    
      0024C6 CD 0C 94         [ 4]  100     CALL COUNT ; a 0 0 a+ n 
                                    101 ; check for '#' double integer 
      0024C9 CD 06 49         [ 4]  102     CALL OVER  ; a 0 0 a+ n a+
      0024CC CD 05 01         [ 4]  103     CALL CAT   ; a 0 0 a+ n c 
      0024CF                        104     _DOLIT '#' ; a 0 0 a+ n c '#' 
      0024CF CD 04 6F         [ 4]    1     CALL DOLIT 
      0024D2 00 23                    2     .word '#' 
      0024D4 CD 08 E5         [ 4]  105     CALL EQUAL 
      0024D7 CD 05 EA         [ 4]  106     CALL TOR   ; a 0 0 a+ n R: base d? 
      0024DA CD 05 45         [ 4]  107     CALL RAT   ; a 0 0 a+ n d? R: base d?
      0024DD                        108     _QBRAN NUMQ0
      0024DD CD 04 98         [ 4]    1     CALL QBRAN
      0024E0 24 EE                    2     .word NUMQ0
                                    109 ; update a and count
      0024E2 CD 06 31         [ 4]  110     CALL SWAPP 
      0024E5 CD 0B 62         [ 4]  111     CALL ONEP 
      0024E8 CD 06 31         [ 4]  112     CALL SWAPP 
      0024EB CD 0B 6F         [ 4]  113     CALL ONEM  ; a 0 0 a+ n- R: base d?
                                    114 ; check for '$' hexadecimal  
      0024EE                        115 NUMQ0: 
      0024EE CD 06 49         [ 4]  116     CALL OVER   
      0024F1 CD 05 01         [ 4]  117     CALL CAT   
      0024F4                        118     _DOLIT '$'
      0024F4 CD 04 6F         [ 4]    1     CALL DOLIT 
      0024F7 00 24                    2     .word '$' 
      0024F9 CD 08 E5         [ 4]  119     CALL EQUAL ; a 0 0 a+ n- f  
      0024FC                        120     _QBRAN NUMQ1 
      0024FC CD 04 98         [ 4]    1     CALL QBRAN
      0024FF 25 10                    2     .word NUMQ1
      002501 CD 0E 63         [ 4]  121     CALL HEX   ; switch to hexadecimal base 
                                    122 ; update a and count 
      002504 CD 06 31         [ 4]  123     CALL SWAPP 
      002507 CD 0B 62         [ 4]  124     CALL ONEP 
      00250A CD 06 31         [ 4]  125     CALL SWAPP
      00250D CD 0B 6F         [ 4]  126     CALL ONEM ; a 0 0 a+ n-  R: base d?
                                    127 ; check for minus sign 
      002510                        128 NUMQ1: 
      002510 CD 24 22         [ 4]  129     CALL nsign 
      002513 CD 05 EA         [ 4]  130     CALL TOR ; R: base d? sign  
                                    131 ; check for end of string     
      002516 CD 07 D4         [ 4]  132     CALL QDUP    ; a dlo dhi a+ cntr R: base d? sign 
      002519                        133     _QBRAN NUMQ4 ; yes , not a number 
      002519 CD 04 98         [ 4]    1     CALL QBRAN
      00251C 25 5B                    2     .word NUMQ4
      00251E CD 24 5A         [ 4]  134     CALL parse_digits
      002521 CD 07 D4         [ 4]  135     CALL QDUP 
      002524 CD 06 6A         [ 4]  136     CALL ZEQUAL  
      002527                        137     _QBRAN NUMQ4 ; error not end of string  ( a dlo dhi a+ R: base d? sign )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



      002527 CD 04 98         [ 4]    1     CALL QBRAN
      00252A 25 5B                    2     .word NUMQ4
      00252C CD 06 17         [ 4]  138     CALL DROP  ; a dlo dhi 
      00252F CD 05 34         [ 4]  139     CALL RFROM  ; a dlo dhi sign 
      002532                        140     _QBRAN NUMQ3
      002532 CD 04 98         [ 4]    1     CALL QBRAN
      002535 25 3A                    2     .word NUMQ3
      002537 CD 08 83         [ 4]  141     CALL DNEGA
      00253A                        142 NUMQ3: 
      00253A CD 07 E5         [ 4]  143     CALL ROT ; dlo dhi a  R: base d?
      00253D CD 06 17         [ 4]  144     CALL DROP
      002540                        145     _DOLIT -2  ; double return -2 flag 
      002540 CD 04 6F         [ 4]    1     CALL DOLIT 
      002543 FF FE                    2     .word -2 
      002545 CD 05 34         [ 4]  146     CALL RFROM ; dlo dhi d? R: base 
      002548                        147     _TBRAN NUMQ8 
      002548 CD 04 A6         [ 4]    1     CALL TBRAN 
      00254B 25 64                    2     .word NUMQ8 
      00254D CD 06 31         [ 4]  148     CALL SWAPP 
      002550 CD 06 17         [ 4]  149     CALL DROP
      002553 CD 0B 62         [ 4]  150     CALL ONEP   ; single return -1 flag   
      002556                        151     _BRAN NUMQ8
      002556 CD 04 B4         [ 4]    1     CALL BRAN 
      002559 25 64                    2     .word NUMQ8 
      00255B                        152 NUMQ4: ; not end of string error , ( a dlo dhi a+ cntr R: base d? sign )
                           000001   153 .if WANT_FLOAT
      00255B CD 05 34         [ 4]  154     CALL RFROM ; sign 
      00255E CD 05 34         [ 4]  155     CALL RFROM ; d? 
      002561 CD 2E 2B         [ 4]  156     CALL FLOATQ ; ( a dlo dhi a+ cntr sign d? )    
                           000000   157 .else 
                                    158     ADDW X,#4 ; drop dhi a+  , ( a dlo R: base d? sign ) 
                                    159     ADDW SP,#4 ; drop d? sign  R: base 
                                    160     CLRW Y 
                                    161     LDW (X),Y ; dlo replaced by 0 ( -- a 0 R: base ) 
                                    162 .endif 
                                    163 ; restore original base value     
      002564                        164 NUMQ8: 
      002564 CD 05 34         [ 4]  165     CALL RFROM 
      002567 CD 06 E7         [ 4]  166     CALL BASE 
      00256A CD 04 D1         [ 4]  167     CALL STORE 
      00256D 81               [ 4]  168     RET 
                                    169 
                                    170 
                                    171 
                                    172 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    173 ;   DABS ( d -- d )
                                    174 ;   absolute value of double
                                    175 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00256E                        176     _HEADER DABS,4,"DABS"
      00256E 24 A5                    1         .word LINK 
                           002570     2         LINK=.
      002570 04                       3         .byte 4  
      002571 44 41 42 53              4         .ascii "DABS"
      002575                          5         DABS:
      002575 CD 06 21         [ 4]  177     CALL DUPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



      002578 CD 06 58         [ 4]  178     CALL ZLESS 
      00257B                        179     _QBRAN DABS1 
      00257B CD 04 98         [ 4]    1     CALL QBRAN
      00257E 25 83                    2     .word DABS1
      002580 CD 08 83         [ 4]  180     CALL DNEGA 
      002583                        181 DABS1:
      002583 81               [ 4]  182     RET 
                                    183 
                                    184 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    185 ;  DSIGN ( d -- d f )
                                    186 ;  sign of double 
                                    187 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002584                        188     _HEADER DSIGN,5,"DSIGN"
      002584 25 70                    1         .word LINK 
                           002586     2         LINK=.
      002586 05                       3         .byte 5  
      002587 44 53 49 47 4E           4         .ascii "DSIGN"
      00258C                          5         DSIGN:
      00258C A6 00            [ 1]  189     LD A,#0 
      00258E 90 93            [ 1]  190     LDW Y,X 
      002590 90 FE            [ 2]  191     LDW Y,(Y)
      002592 2A 02            [ 1]  192     JRPL DSIGN1
      002594 A6 FF            [ 1]  193     LD A,#0XFF 
      002596                        194 DSIGN1:
      002596 1D 00 02         [ 2]  195     SUBW X,#2 
      002599 F7               [ 1]  196     LD (X),A 
      00259A E7 01            [ 1]  197     LD (1,X),A 
      00259C 81               [ 4]  198     RET 
                                    199 
                                    200 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    201 ;   DS/MOD ( ud us - ur qud )
                                    202 ;   unsigned divide double by single 
                                    203 ;   return double quotient 
                                    204 ;   and single remainder 
                                    205 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00259D                        206     _HEADER DSLMOD,6,"DS/MOD"
      00259D 25 86                    1         .word LINK 
                           00259F     2         LINK=.
      00259F 06                       3         .byte 6  
      0025A0 44 53 2F 4D 4F 44        4         .ascii "DS/MOD"
      0025A6                          5         DSLMOD:
      0025A6 90 93            [ 1]  207         LDW     Y,X             ; stack pointer to Y
      0025A8 FE               [ 2]  208         LDW     X,(X)           ; un
      0025A9 BF 26            [ 2]  209         LDW     YTEMP,X         ; save un
      0025AB 93               [ 1]  210         LDW     X,Y
      0025AC 89               [ 2]  211         PUSHW   X               ; save stack pointer
      0025AD 90 89            [ 2]  212         PUSHW   Y 
      0025AF EE 02            [ 2]  213         LDW     X,(2,X)           ; X=udh
      0025B1 90 BE 26         [ 2]  214         LDW     Y,YTEMP         ; divisor 
      0025B4 65               [ 2]  215         DIVW    X,Y 
      0025B5 BF 24            [ 2]  216         LDW     XTEMP,X         ; QUOTIENT hi 
      0025B7 93               [ 1]  217         LDW     X,Y             ; remainder in X 
      0025B8 90 85            [ 2]  218         POPW    Y 
      0025BA 90 EE 04         [ 2]  219         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      0025BD A6 10            [ 1]  220         LD      A,#16           ; loop count
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



      0025BF 90 58            [ 2]  221         SLLW    Y               ; udl shift udl into udh
      0025C1                        222 DSLMOD3:
      0025C1 59               [ 2]  223         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      0025C2 25 04            [ 1]  224         JRC     DSLMODa         ; if carry out of rotate
      0025C4 B3 26            [ 2]  225         CPW     X,YTEMP         ; compare udh to un
      0025C6 25 05            [ 1]  226         JRULT   DSLMOD4         ; can't subtract
      0025C8                        227 DSLMODa:
      0025C8 72 B0 00 26      [ 2]  228         SUBW    X,YTEMP         ; can subtract
      0025CC 98               [ 1]  229         RCF
      0025CD                        230 DSLMOD4:
      0025CD 8C               [ 1]  231         CCF                     ; quotient bit
      0025CE 90 59            [ 2]  232         RLCW    Y               ; rotate into quotient, rotate out udl
      0025D0 4A               [ 1]  233         DEC     A               ; repeat
      0025D1 26 EE            [ 1]  234         JRNE    DSLMOD3           ; if A == 0
      0025D3                        235 DSLMODb:
      0025D3 BF 26            [ 2]  236         LDW     YTEMP,X         ; done, save remainder
      0025D5 85               [ 2]  237         POPW    X               ; restore stack pointer
      0025D6 EF 02            [ 2]  238         LDW     (2,X),Y           ; save quotient low 
      0025D8 90 BE 24         [ 2]  239         LDW     Y,XTEMP         ; quotient hi 
      0025DB FF               [ 2]  240         LDW     (X),Y           ; save quotient hi 
      0025DC 90 BE 26         [ 2]  241         LDW     Y,YTEMP         ; remainder onto stack
      0025DF EF 04            [ 2]  242         LDW     (4,X),Y
      0025E1 81               [ 4]  243         RET 
                                    244 
                                    245 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    246 ;   D# ( d -- d )
                                    247 ;   extract least digit 
                                    248 ;   from double integer 
                                    249 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0025E2                        250     _HEADER DDIG,2,"D#"
      0025E2 25 9F                    1         .word LINK 
                           0025E4     2         LINK=.
      0025E4 02                       3         .byte 2  
      0025E5 44 23                    4         .ascii "D#"
      0025E7                          5         DDIG:
      0025E7 CD 06 E7         [ 4]  251     CALL BASE 
      0025EA CD 04 E3         [ 4]  252     CALL AT 
      0025ED CD 25 A6         [ 4]  253     CALL DSLMOD
      0025F0 CD 07 E5         [ 4]  254     CALL ROT   
      0025F3 CD 0D 8C         [ 4]  255     CALL DIGIT 
      0025F6 CD 0D D8         [ 4]  256     CALL HOLD 
      0025F9 81               [ 4]  257     RET 
                                    258 
                                    259 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    260 ;    D#S ( d -- s )
                                    261 ;   extract digit from double 
                                    262 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0025FA                        263     _HEADER DDIGS,3,"D#S"
      0025FA 25 E4                    1         .word LINK 
                           0025FC     2         LINK=.
      0025FC 03                       3         .byte 3  
      0025FD 44 23 53                 4         .ascii "D#S"
      002600                          5         DDIGS:
      002600 CD 25 E7         [ 4]  264     CALL    DDIG 
      002603 CD 08 31         [ 4]  265     CALL    DDUP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      002606 CD 27 6C         [ 4]  266     CALL    DZEQUAL
      002609                        267     _QBRAN  DDIGS 
      002609 CD 04 98         [ 4]    1     CALL QBRAN
      00260C 26 00                    2     .word DDIGS
      00260E CD 06 17         [ 4]  268     CALL    DROP 
      002611 81               [ 4]  269     RET 
                                    270 
                                    271 
                                    272 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    273 ;   D. ( d -- )
                                    274 ;   display double integer 
                                    275 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002612                        276     _HEADER DDOT,2,"D."
      002612 25 FC                    1         .word LINK 
                           002614     2         LINK=.
      002614 02                       3         .byte 2  
      002615 44 2E                    4         .ascii "D."
      002617                          5         DDOT:
      002617 CD 0F 04         [ 4]  277     CALL SPACE 
      00261A CD 25 8C         [ 4]  278     CALL DSIGN 
      00261D CD 05 EA         [ 4]  279     CALL TOR
      002620 CD 05 45         [ 4]  280     CALL RAT 
      002623                        281     _QBRAN DDOT0
      002623 CD 04 98         [ 4]    1     CALL QBRAN
      002626 26 2B                    2     .word DDOT0
      002628 CD 08 83         [ 4]  282     CALL DNEGA 
      00262B                        283 DDOT0:     
      00262B CD 0D C8         [ 4]  284     CALL BDIGS 
      00262E CD 26 00         [ 4]  285     CALL DDIGS 
      002631 CD 05 34         [ 4]  286     CALL RFROM 
      002634                        287     _QBRAN DDOT1 
      002634 CD 04 98         [ 4]    1     CALL QBRAN
      002637 26 41                    2     .word DDOT1
      002639                        288     _DOLIT '-' 
      002639 CD 04 6F         [ 4]    1     CALL DOLIT 
      00263C 00 2D                    2     .word '-' 
      00263E CD 0D D8         [ 4]  289     CALL HOLD 
      002641                        290 DDOT1: 
      002641 CD 0E 2D         [ 4]  291     CALL EDIGS 
      002644 CD 0F 2E         [ 4]  292     CALL TYPES     
      002647 81               [ 4]  293     RET 
                                    294 
                                    295 
                                    296 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    297 ; multiply double by single 
                                    298 ; return double 
                                    299 ;  ( d s -- d )
                                    300 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002648                        301     _HEADER DSSTAR,3,"DS*"
      002648 26 14                    1         .word LINK 
                           00264A     2         LINK=.
      00264A 03                       3         .byte 3  
      00264B 44 53 2A                 4         .ascii "DS*"
      00264E                          5         DSSTAR:
                                    302 ;DSSTAR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



      00264E CD 05 EA         [ 4]  303     CALL TOR
      002651 CD 06 21         [ 4]  304     CALL DUPP 
      002654 CD 06 58         [ 4]  305     CALL ZLESS
      002657 CD 06 21         [ 4]  306     CALL DUPP 
      00265A CD 05 EA         [ 4]  307     CALL TOR 
      00265D                        308     _QBRAN DSSTAR1 
      00265D CD 04 98         [ 4]    1     CALL QBRAN
      002660 26 65                    2     .word DSSTAR1
      002662 CD 08 83         [ 4]  309     CALL DNEGA 
      002665                        310 DSSTAR1:
      002665 CD 05 34         [ 4]  311     CALL RFROM 
      002668 CD 08 04         [ 4]  312     CALL NROT       
      00266B CD 06 31         [ 4]  313     CALL SWAPP 
      00266E CD 05 45         [ 4]  314     CALL RAT 
      002671 CD 0A 97         [ 4]  315     CALL UMSTA
      002674 CD 07 E5         [ 4]  316     CALL ROT 
      002677 CD 05 34         [ 4]  317     CALL RFROM 
      00267A CD 0A 97         [ 4]  318     CALL UMSTA 
      00267D CD 06 17         [ 4]  319     CALL DROP ; DROP OVERFLOW 
      002680 CD 08 46         [ 4]  320     CALL PLUS 
      002683 CD 07 E5         [ 4]  321     CALL ROT 
      002686                        322     _QBRAN DSSTAR3 
      002686 CD 04 98         [ 4]    1     CALL QBRAN
      002689 26 8E                    2     .word DSSTAR3
      00268B CD 08 83         [ 4]  323     CALL DNEGA 
      00268E                        324 DSSTAR3:
      00268E 81               [ 4]  325     RET 
                                    326 
                                    327 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    328 ;  2SWAP ( d1 d2 -- d2 d1 )
                                    329 ;  swap double 
                                    330 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00268F                        331     _HEADER DSWAP,5,"2SWAP"
      00268F 26 4A                    1         .word LINK 
                           002691     2         LINK=.
      002691 05                       3         .byte 5  
      002692 32 53 57 41 50           4         .ascii "2SWAP"
      002697                          5         DSWAP:
      002697 90 93            [ 1]  332     LDW Y,X 
      002699 90 FE            [ 2]  333     LDW Y,(Y)
      00269B 90 BF 26         [ 2]  334     LDW YTEMP,Y ; d2 hi 
      00269E 90 93            [ 1]  335     LDW Y,X 
      0026A0 90 EE 02         [ 2]  336     LDW Y,(2,Y)
      0026A3 90 BF 24         [ 2]  337     LDW XTEMP,Y  ; d2 lo 
      0026A6 90 93            [ 1]  338     LDW Y,X 
      0026A8 90 EE 04         [ 2]  339     LDW Y,(4,Y)  ; d1 hi 
      0026AB FF               [ 2]  340     LDW (X),Y 
      0026AC 90 93            [ 1]  341     LDW Y,X
      0026AE 90 EE 06         [ 2]  342     LDW Y,(6,Y)  ; d1 lo 
      0026B1 EF 02            [ 2]  343     LDW (2,X),Y
      0026B3 90 BE 26         [ 2]  344     LDW Y,YTEMP  
      0026B6 EF 04            [ 2]  345     LDW (4,X),Y 
      0026B8 90 BE 24         [ 2]  346     LDW Y,XTEMP 
      0026BB EF 06            [ 2]  347     LDW (6,X),Y 
      0026BD 81               [ 4]  348     RET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



                                    349 
                                    350 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    351 ;    DCLZ ( d -- u )
                                    352 ;    double count leading zeros
                                    353 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026BE                        354     _HEADER DCLZ,4,"DCLZ"
      0026BE 26 91                    1         .word LINK 
                           0026C0     2         LINK=.
      0026C0 04                       3         .byte 4  
      0026C1 44 43 4C 5A              4         .ascii "DCLZ"
      0026C5                          5         DCLZ:
      0026C5 4F               [ 1]  355     CLR A 
      0026C6 90 93            [ 1]  356     LDW Y,X 
      0026C8 90 FE            [ 2]  357     LDW Y,(Y)
      0026CA 2B 18            [ 1]  358     JRMI DCLZ8 ; no leading zero 
      0026CC 27 09            [ 1]  359     JREQ DCLZ4 ; >=16 
      0026CE                        360 DCLZ1: ; <16
      0026CE 90 58            [ 2]  361     SLLW Y
      0026D0 4C               [ 1]  362     INC A 
      0026D1 90 5D            [ 2]  363     TNZW Y 
      0026D3 2B 0F            [ 1]  364     JRMI DCLZ8
      0026D5 20 F7            [ 2]  365     JRA DCLZ1 
      0026D7                        366 DCLZ4:
      0026D7 A6 10            [ 1]  367     LD A,#16 
      0026D9 90 93            [ 1]  368     LDW Y,X 
      0026DB 90 EE 02         [ 2]  369     LDW Y,(2,Y)
      0026DE 2B 04            [ 1]  370     JRMI DCLZ8 
      0026E0 26 EC            [ 1]  371     JRNE DCLZ1 
      0026E2 AB 10            [ 1]  372     ADD A,#16
      0026E4                        373 DCLZ8: 
      0026E4 1C 00 02         [ 2]  374     ADDW X,#2 
      0026E7 90 5F            [ 1]  375     CLRW Y 
      0026E9 90 97            [ 1]  376     LD YL,A 
      0026EB FF               [ 2]  377     LDW (X),Y 
      0026EC 81               [ 4]  378     RET 
                                    379 
                                    380 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    381 ;   <2ROT ( d1 d2 d3 -- d3 d1 d2 )
                                    382 ;   rotate left doubles 
                                    383 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026ED                        384     _HEADER NDROT,5,"<2ROT"
      0026ED 26 C0                    1         .word LINK 
                           0026EF     2         LINK=.
      0026EF 05                       3         .byte 5  
      0026F0 3C 32 52 4F 54           4         .ascii "<2ROT"
      0026F5                          5         NDROT:
                                    385 ; save d3 in temp 
      0026F5 90 93            [ 1]  386     LDW Y,X 
      0026F7 90 FE            [ 2]  387     LDW Y,(Y)
      0026F9 90 BF 26         [ 2]  388     LDW YTEMP,Y  ; d3 hi 
      0026FC 90 93            [ 1]  389     LDW Y,X 
      0026FE 90 EE 02         [ 2]  390     LDW Y,(2,Y)
      002701 90 BF 24         [ 2]  391     LDW XTEMP,Y  ; d3 lo 
                                    392 ; put d2 in d1 slot 
      002704 90 93            [ 1]  393     LDW Y,X 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      002706 90 EE 04         [ 2]  394     LDW Y,(4,Y) 
      002709 FF               [ 2]  395     LDW (X),Y   ; d2 hi 
      00270A 90 93            [ 1]  396     LDW Y,X 
      00270C 90 EE 06         [ 2]  397     LDW Y,(6,Y)
      00270F EF 02            [ 2]  398     LDW (2,X),Y ; d2 lo
                                    399 ; put d1 in d2 slot 
      002711 90 93            [ 1]  400     LDW Y,X 
      002713 90 EE 08         [ 2]  401     LDW Y,(8,Y) 
      002716 EF 04            [ 2]  402     LDW (4,X),Y ; d1 hi 
      002718 90 93            [ 1]  403     LDW Y,X 
      00271A 90 EE 0A         [ 2]  404     LDW Y,(10,Y)
      00271D EF 06            [ 2]  405     LDW (6,X),Y  ; d1 lo 
                                    406 ; put d3 in d1 slot 
      00271F 90 BE 26         [ 2]  407     LDW Y,YTEMP 
      002722 EF 08            [ 2]  408     LDW (8,X),Y  ; d3 hi 
      002724 90 BE 24         [ 2]  409     LDW Y,XTEMP 
      002727 EF 0A            [ 2]  410     LDW (10,X),Y  ; d3 lo 
      002729 81               [ 4]  411     RET 
                                    412 
                                    413 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    414 ;   2ROT ( d1 d2 d3 -- d2 d3 d1 )
                                    415 ;   rotate right doubles 
                                    416 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00272A                        417     _HEADER DROT,4,"2ROT"
      00272A 26 EF                    1         .word LINK 
                           00272C     2         LINK=.
      00272C 04                       3         .byte 4  
      00272D 32 52 4F 54              4         .ascii "2ROT"
      002731                          5         DROT:
                                    418 ; save d3 in temp 
      002731 90 93            [ 1]  419     LDW Y,X 
      002733 90 FE            [ 2]  420     LDW Y,(Y)
      002735 90 BF 26         [ 2]  421     LDW YTEMP,Y ; d3 hi 
      002738 90 93            [ 1]  422     LDW Y,X 
      00273A 90 EE 02         [ 2]  423     LDW Y,(2,Y)
      00273D 90 BF 24         [ 2]  424     LDW XTEMP,Y ; d3 lo 
                                    425 ; put d1 in d3 slot 
      002740 90 93            [ 1]  426     LDW Y,X 
      002742 90 EE 08         [ 2]  427     LDW Y,(8,Y)
      002745 FF               [ 2]  428     LDW (X),Y  ; d1 hi 
      002746 90 93            [ 1]  429     LDW Y,X 
      002748 90 EE 0A         [ 2]  430     LDW Y,(10,Y) 
      00274B EF 02            [ 2]  431     LDW (2,X),Y ; d1 lo 
                                    432 ; put d2 in d1 slot 
      00274D 90 93            [ 1]  433     LDW Y,X 
      00274F 90 EE 04         [ 2]  434     LDW Y,(4,Y) ; d2 hi 
      002752 EF 08            [ 2]  435     LDW (8,X),Y 
      002754 90 93            [ 1]  436     LDW Y,X 
      002756 90 EE 06         [ 2]  437     LDW Y,(6,Y) ; d2 lo 
      002759 EF 0A            [ 2]  438     LDW (10,X),Y 
                                    439 ; put d3 in d2 slot 
      00275B 90 BE 26         [ 2]  440     LDW Y,YTEMP 
      00275E EF 04            [ 2]  441     LDW (4,X),Y 
      002760 90 BE 24         [ 2]  442     LDW Y,XTEMP 
      002763 EF 06            [ 2]  443     LDW (6,X),Y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



      002765 81               [ 4]  444     RET 
                                    445 
                                    446 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    447 ;    D0= ( d -- 0|-1 )
                                    448 ;    check if double is 0 
                                    449 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002766                        450     _HEADER DZEQUAL,3,"D0="
      002766 27 2C                    1         .word LINK 
                           002768     2         LINK=.
      002768 03                       3         .byte 3  
      002769 44 30 3D                 4         .ascii "D0="
      00276C                          5         DZEQUAL:
      00276C CD 06 92         [ 4]  451     CALL ORR 
      00276F A6 FF            [ 1]  452     LD A,#0xFF
      002771 90 93            [ 1]  453     LDW Y,X
      002773 90 FE            [ 2]  454     LDW Y,(Y)
      002775 90 A3 00 00      [ 2]  455     CPW Y,#0 
      002779 27 01            [ 1]  456     JREQ  ZEQ1
      00277B 4F               [ 1]  457     CLR A   ;false
      00277C                        458 ZEQ1:
      00277C F7               [ 1]  459     LD     (X),A
      00277D E7 01            [ 1]  460     LD (1,X),A
      00277F 81               [ 4]  461 	RET     
                                    462     
                                    463 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    464 ;   D= ( d1 d2 -- f )
                                    465 ;   d1==d2?
                                    466 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002780                        467     _HEADER DEQUAL,2,"D="
      002780 27 68                    1         .word LINK 
                           002782     2         LINK=.
      002782 02                       3         .byte 2  
      002783 44 3D                    4         .ascii "D="
      002785                          5         DEQUAL:
      002785 A6 00            [ 1]  468     LD A,#0 
      002787 90 93            [ 1]  469     LDW Y,X 
      002789 90 FE            [ 2]  470     LDW Y,(Y)
      00278B E3 04            [ 2]  471     CPW Y,(4,X)
      00278D 26 0B            [ 1]  472     JRNE DEQU4 
      00278F 90 93            [ 1]  473     LDW Y,X 
      002791 90 EE 02         [ 2]  474     LDW Y,(2,Y)
      002794 E3 06            [ 2]  475     CPW Y,(6,X)
      002796 26 02            [ 1]  476     JRNE DEQU4 
      002798 A6 FF            [ 1]  477     LD A,#0XFF
      00279A                        478 DEQU4:
      00279A 1C 00 06         [ 2]  479     ADDW X,#6
      00279D F7               [ 1]  480     LD (X),A 
      00279E E7 01            [ 1]  481     LD (1,X),A 
      0027A0 81               [ 4]  482     RET 
                                    483 
                                    484 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    485 ;   D> ( d1 d2 -- f )
                                    486 ;   d1>d2?
                                    487 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027A1                        488     _HEADER DGREAT,2,"D>"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



      0027A1 27 82                    1         .word LINK 
                           0027A3     2         LINK=.
      0027A3 02                       3         .byte 2  
      0027A4 44 3E                    4         .ascii "D>"
      0027A6                          5         DGREAT:
      0027A6 CD 26 97         [ 4]  489     CALL DSWAP 
      0027A9 CC 27 B1         [ 2]  490     JP DLESS 
                                    491 
                                    492 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    493 ;   D< ( d1 d2 -- f )
                                    494 ;   d1<d2? 
                                    495 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027AC                        496     _HEADER DLESS,2,"D<"
      0027AC 27 A3                    1         .word LINK 
                           0027AE     2         LINK=.
      0027AE 02                       3         .byte 2  
      0027AF 44 3C                    4         .ascii "D<"
      0027B1                          5         DLESS:
      0027B1 CD 2A D9         [ 4]  497     CALL DSUB
      0027B4 CD 0B CE         [ 4]  498     CALL ZERO
      0027B7 CD 08 04         [ 4]  499     CALL NROT  
      0027BA CD 27 CC         [ 4]  500     CALL DZLESS 
      0027BD                        501     _QBRAN DLESS4
      0027BD CD 04 98         [ 4]    1     CALL QBRAN
      0027C0 27 C5                    2     .word DLESS4
      0027C2 CD 08 60         [ 4]  502     CALL INVER  
      0027C5                        503 DLESS4:
      0027C5 81               [ 4]  504     RET
                                    505 
                                    506 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    507 ;  D0< ( d -- f )
                                    508 ;  d<0? 
                                    509 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027C6                        510     _HEADER DZLESS,3,"D0<"
      0027C6 27 AE                    1         .word LINK 
                           0027C8     2         LINK=.
      0027C8 03                       3         .byte 3  
      0027C9 44 30 3C                 4         .ascii "D0<"
      0027CC                          5         DZLESS:
      0027CC A6 00            [ 1]  511     LD A,#0 
      0027CE 90 93            [ 1]  512     LDW Y,X 
      0027D0 90 FE            [ 2]  513     LDW Y,(Y)
      0027D2 2A 02            [ 1]  514     JRPL DZLESS1 
      0027D4 A6 FF            [ 1]  515     LD A,#0XFF 
      0027D6                        516 DZLESS1:
      0027D6 1C 00 02         [ 2]  517     ADDW X,#2 
      0027D9 F7               [ 1]  518     LD (X),A 
      0027DA E7 01            [ 1]  519     LD (1,X),A    
      0027DC 81               [ 4]  520     RET 
                                    521 
                                    522 
                                    523 
                                    524 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    525 ;   2>R ( d -- R: d )
                                    526 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



      0027DD                        527     _HEADER DTOR,3,"2>R"
      0027DD 27 C8                    1         .word LINK 
                           0027DF     2         LINK=.
      0027DF 03                       3         .byte 3  
      0027E0 32 3E 52                 4         .ascii "2>R"
      0027E3                          5         DTOR:
      0027E3 90 85            [ 2]  528     POPW Y 
      0027E5 90 BF 26         [ 2]  529     LDW YTEMP,Y 
      0027E8 90 93            [ 1]  530     LDW Y,X 
      0027EA 90 EE 02         [ 2]  531     LDW Y,(2,Y)
      0027ED 90 89            [ 2]  532     PUSHW Y   ; d low 
      0027EF 90 93            [ 1]  533     LDW Y,X 
      0027F1 90 FE            [ 2]  534     LDW Y,(Y)
      0027F3 90 89            [ 2]  535     PUSHW Y   ; d hi 
      0027F5 1C 00 04         [ 2]  536     ADDW X,#4  
      0027F8 92 CC 26         [ 5]  537     JP [YTEMP]
                                    538 
                                    539 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    540 ;  2R> ( -- d ) R: d --      
                                    541 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027FB                        542     _HEADER DRFROM,3,"2R>"
      0027FB 27 DF                    1         .word LINK 
                           0027FD     2         LINK=.
      0027FD 03                       3         .byte 3  
      0027FE 32 52 3E                 4         .ascii "2R>"
      002801                          5         DRFROM:
      002801 90 85            [ 2]  543     POPW Y      ; d hi 
      002803 90 BF 26         [ 2]  544     LDW YTEMP,Y 
      002806 1D 00 04         [ 2]  545     SUBW X,#4
      002809 90 85            [ 2]  546     POPW Y       ; d hi 
      00280B FF               [ 2]  547     LDW (X),Y 
      00280C 90 85            [ 2]  548     POPW Y       ; d low  
      00280E EF 02            [ 2]  549     LDW (2,X),Y 
      002810 92 CC 26         [ 5]  550     JP [YTEMP]
                                    551     
                                    552 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    553 ;   2R@ ( -- d )
                                    554 ;   fecth a double from RSTACK
                                    555 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002813                        556     _HEADER DRAT,3,"2R@"
      002813 27 FD                    1         .word LINK 
                           002815     2         LINK=.
      002815 03                       3         .byte 3  
      002816 32 52 40                 4         .ascii "2R@"
      002819                          5         DRAT:
      002819 90 85            [ 2]  557     POPW Y 
      00281B 90 BF 26         [ 2]  558     LDW YTEMP,Y 
      00281E 1D 00 04         [ 2]  559     SUBW X,#4 
      002821 16 01            [ 2]  560     LDW Y,(1,SP)
      002823 FF               [ 2]  561     LDW (X),Y 
      002824 16 03            [ 2]  562     LDW Y,(3,SP)
      002826 EF 02            [ 2]  563     LDW (2,X),Y 
      002828 92 CC 26         [ 5]  564     JP [YTEMP]
                                    565 
                                    566 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



                                    567 ;  2VARIABLE <name> 
                                    568 ;  create a double variable 
                                    569 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00282B                        570     _HEADER DVARIA,9,"2VARIABLE"
      00282B 28 15                    1         .word LINK 
                           00282D     2         LINK=.
      00282D 09                       3         .byte 9  
      00282E 32 56 41 52 49 41 42     4         .ascii "2VARIABLE"
             4C 45
      002837                          5         DVARIA:
      002837 CD 0C AB         [ 4]  571         CALL HERE
      00283A CD 06 21         [ 4]  572         CALL DUPP
      00283D                        573         _DOLIT 4  
      00283D CD 04 6F         [ 4]    1     CALL DOLIT 
      002840 00 04                    2     .word 4 
      002842 CD 08 46         [ 4]  574         CALL PLUS 
      002845 CD 07 78         [ 4]  575         CALL VPP 
      002848 CD 04 D1         [ 4]  576         CALL STORE
      00284B CD 18 7C         [ 4]  577         CALL CREAT
      00284E CD 06 21         [ 4]  578         CALL DUPP
      002851 CD 14 EF         [ 4]  579         CALL COMMA
      002854 CD 0B CE         [ 4]  580         CALL ZERO
      002857 CD 06 49         [ 4]  581         CALL OVER 
      00285A CD 04 D1         [ 4]  582         CALL STORE 
      00285D CD 0B CE         [ 4]  583         CALL ZERO 
      002860 CD 06 31         [ 4]  584         CALL SWAPP 
      002863 CD 04 D1         [ 4]  585         CALL STORE
      002866 CD 21 82         [ 4]  586         CALL FMOVE ; move definition to FLASH
      002869 CD 07 D4         [ 4]  587         CALL QDUP 
      00286C CD 04 98         [ 4]  588         CALL QBRAN 
      00286F 18 C9                  589         .word SET_RAMLAST   
      002871 CD 1C 2A         [ 4]  590         call UPDATVP  ; don't update if variable kept in RAM.
      002874 CD 22 16         [ 4]  591         CALL UPDATPTR
      002877 81               [ 4]  592         RET         
                                    593 
                                    594 
                                    595 
                                    596 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    597 ;  2LITERAL ( d -- )
                                    598 ;  compile double literal 
                                    599 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002878                        600     _HEADER DLITER,IMEDD+8,"2LITERAL"
      002878 28 2D                    1         .word LINK 
                           00287A     2         LINK=.
      00287A 88                       3         .byte IMEDD+8  
      00287B 32 4C 49 54 45 52 41     4         .ascii "2LITERAL"
             4C
      002883                          5         DLITER:
      002883 CD 15 34         [ 4]  601     CALL COMPI 
      002886 28 8E                  602     .word do2lit 
      002888 CD 14 EF         [ 4]  603     CALL COMMA 
      00288B CC 14 EF         [ 2]  604     JP   COMMA 
                                    605 
                                    606 
                                    607 ; runtime for 2LITERAL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



      00288E                        608 do2lit:
      00288E 1D 00 04         [ 2]  609     SUBW X,#4 
      002891 16 01            [ 2]  610     LDW Y,(1,SP)
      002893 90 FE            [ 2]  611     LDW Y,(Y)
      002895 FF               [ 2]  612     LDW (X),Y 
      002896 16 01            [ 2]  613     LDW Y,(1,SP)
      002898 90 EE 02         [ 2]  614     LDW Y,(2,Y)
      00289B EF 02            [ 2]  615     LDW (2,X),Y 
      00289D 90 85            [ 2]  616     POPW Y 
      00289F 90 EC 04         [ 2]  617     JP (4,Y)
                                    618 
                                    619 
                                    620 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    621 ;   2OVER ( d1 d2 -- d1 d2 d1 )
                                    622 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028A2                        623     _HEADER DOVER,5,"2OVER"
      0028A2 28 7A                    1         .word LINK 
                           0028A4     2         LINK=.
      0028A4 05                       3         .byte 5  
      0028A5 32 4F 56 45 52           4         .ascii "2OVER"
      0028AA                          5         DOVER:
      0028AA 90 93            [ 1]  624     LDW Y,X 
      0028AC 1D 00 04         [ 2]  625     SUBW X,#4 
      0028AF 90 89            [ 2]  626     PUSHW Y 
      0028B1 90 EE 04         [ 2]  627     LDW Y,(4,Y)  ; d1 hi 
      0028B4 FF               [ 2]  628     LDW (X),Y 
      0028B5 90 85            [ 2]  629     POPW Y 
      0028B7 90 EE 06         [ 2]  630     LDW Y,(6,Y)  ;d1 lo 
      0028BA EF 02            [ 2]  631     LDW (2,X),Y 
      0028BC 81               [ 4]  632     RET 
                                    633 
                                    634 
                                    635 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    636 ;   D2/ ( d -- d/2 )
                                    637 ;   divide double by 2 
                                    638 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028BD                        639     _HEADER D2SLASH,3,"D2/"
      0028BD 28 A4                    1         .word LINK 
                           0028BF     2         LINK=.
      0028BF 03                       3         .byte 3  
      0028C0 44 32 2F                 4         .ascii "D2/"
      0028C3                          5         D2SLASH:
      0028C3 90 93            [ 1]  640     LDW Y,X 
      0028C5 90 FE            [ 2]  641     LDW Y,(Y)
      0028C7 90 57            [ 2]  642     SRAW Y 
      0028C9 FF               [ 2]  643     LDW (X),Y 
      0028CA 90 93            [ 1]  644     LDW Y,X 
      0028CC 90 EE 02         [ 2]  645     LDW Y,(2,Y)
      0028CF 90 56            [ 2]  646     RRCW Y 
      0028D1 EF 02            [ 2]  647     LDW (2,X),Y 
      0028D3 81               [ 4]  648     RET
                                    649 
                                    650 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    651 ;  D2* ( d -- d*2 )
                                    652 ;  multiply double by 2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



                                    653 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028D4                        654     _HEADER D2STAR,3,"D2*"
      0028D4 28 BF                    1         .word LINK 
                           0028D6     2         LINK=.
      0028D6 03                       3         .byte 3  
      0028D7 44 32 2A                 4         .ascii "D2*"
      0028DA                          5         D2STAR:
      0028DA 90 93            [ 1]  655     LDW Y,X 
      0028DC 90 EE 02         [ 2]  656     LDW Y,(2,Y)
      0028DF 98               [ 1]  657     RCF 
      0028E0 90 59            [ 2]  658     RLCW Y 
      0028E2 EF 02            [ 2]  659     LDW (2,X),Y 
      0028E4 90 93            [ 1]  660     LDW Y,X 
      0028E6 90 FE            [ 2]  661     LDW Y,(Y)
      0028E8 90 59            [ 2]  662     RLCW Y 
      0028EA FF               [ 2]  663     LDW (X),Y 
      0028EB 81               [ 4]  664     RET 
                                    665 
                                    666 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    667 ;   DLSHIFT ( d n -- d )
                                    668 ;   left shift double 
                                    669 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028EC                        670     _HEADER DLSHIFT,7,"DLSHIFT"
      0028EC 28 D6                    1         .word LINK 
                           0028EE     2         LINK=.
      0028EE 07                       3         .byte 7  
      0028EF 44 4C 53 48 49 46 54     4         .ascii "DLSHIFT"
      0028F6                          5         DLSHIFT:
      0028F6 E6 01            [ 1]  671     LD A,(1,X) ; shift count 
      0028F8 1C 00 02         [ 2]  672     ADDW X,#2 
      0028FB 90 93            [ 1]  673     LDW Y,X 
      0028FD 90 FE            [ 2]  674     LDW Y,(Y)
      0028FF 90 BF 26         [ 2]  675     LDW YTEMP,Y  ; d hi 
      002902 90 93            [ 1]  676     LDW Y,X 
      002904 90 EE 02         [ 2]  677     LDW Y,(2,Y)  ; d low 
      002907                        678 DLSHIFT1:
      002907 4D               [ 1]  679     TNZ A 
      002908 27 12            [ 1]  680     JREQ DLSHIFT2 
      00290A 98               [ 1]  681     RCF 
      00290B 90 59            [ 2]  682     RLCW Y 
      00290D 90 89            [ 2]  683     PUSHW Y 
      00290F 90 BE 26         [ 2]  684     LDW Y,YTEMP 
      002912 90 59            [ 2]  685     RLCW Y 
      002914 90 BF 26         [ 2]  686     LDW YTEMP,Y 
      002917 90 85            [ 2]  687     POPW Y 
      002919 4A               [ 1]  688     DEC A 
      00291A 20 EB            [ 2]  689     JRA DLSHIFT1 
      00291C                        690 DLSHIFT2:
      00291C EF 02            [ 2]  691     LDW (2,X),Y 
      00291E 90 BE 26         [ 2]  692     LDW Y,YTEMP 
      002921 FF               [ 2]  693     LDW (X),Y 
      002922 81               [ 4]  694     RET 
                                    695 
                                    696 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    697 ;  DRSHIFT ( d n -- d )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



                                    698 ;  shift right n bits 
                                    699 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002923                        700     _HEADER DRSHIFT,7,"DRSHIFT"
      002923 28 EE                    1         .word LINK 
                           002925     2         LINK=.
      002925 07                       3         .byte 7  
      002926 44 52 53 48 49 46 54     4         .ascii "DRSHIFT"
      00292D                          5         DRSHIFT:
      00292D E6 01            [ 1]  701     LD A,(1,X)
      00292F A4 1F            [ 1]  702     AND A,#0X1F 
      002931 1C 00 02         [ 2]  703     ADDW X,#2 
      002934                        704 DRSHIFT1:
      002934 4D               [ 1]  705     TNZ A 
      002935 27 13            [ 1]  706     JREQ DRSHIFT2 
      002937 90 93            [ 1]  707     LDW Y,X 
      002939 90 FE            [ 2]  708     LDW Y,(Y)
      00293B 90 57            [ 2]  709     SRAW Y 
      00293D FF               [ 2]  710     LDW (X),Y 
      00293E 90 93            [ 1]  711     LDW Y,X 
      002940 90 EE 02         [ 2]  712     LDW Y,(2,Y)
      002943 90 56            [ 2]  713     RRCW Y 
      002945 EF 02            [ 2]  714     LDW (2,X),Y 
      002947 4A               [ 1]  715     DEC A
      002948 20 EA            [ 2]  716     JRA DRSHIFT1  
      00294A                        717 DRSHIFT2:
      00294A 81               [ 4]  718     RET 
                                    719 
                                    720 
                                    721 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    722 ;   D* ( d1 d2 -- d3 )
                                    723 ;   double product 
                                    724 ;   
                                    725 ;   d3 = d1 * d2
                                    726 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00294B                        727     _HEADER DSTAR,2,"D*"
      00294B 29 25                    1         .word LINK 
                           00294D     2         LINK=.
      00294D 02                       3         .byte 2  
      00294E 44 2A                    4         .ascii "D*"
      002950                          5         DSTAR:
      002950 CD 06 21         [ 4]  728     CALL DUPP 
      002953 CD 06 58         [ 4]  729     CALL ZLESS  
      002956 CD 05 EA         [ 4]  730     CALL TOR    ; R: d2sign 
      002959 CD 25 75         [ 4]  731     CALL DABS   
      00295C CD 05 34         [ 4]  732     CALL RFROM 
      00295F CD 08 04         [ 4]  733     CALL NROT  ; d1 d2s ud2
      002962 CD 27 E3         [ 4]  734     CALL DTOR  ; d1 d2s R: ud2  
      002965 CD 05 EA         [ 4]  735     CALL TOR   ; d1 R: ud2 d2s   
      002968 CD 06 21         [ 4]  736     CALL DUPP 
      00296B CD 06 58         [ 4]  737     CALL ZLESS 
      00296E CD 05 34         [ 4]  738     CALL RFROM 
      002971 CD 06 A7         [ 4]  739     CALL XORR   
      002974 CD 05 EA         [ 4]  740     CALL TOR   ; d1 R: ud2 prod_sign  
      002977 CD 25 75         [ 4]  741     CALL DABS ; ud1 R: ud2 ps  
      00297A CD 05 34         [ 4]  742     CALL RFROM  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



      00297D CD 08 04         [ 4]  743     CALL NROT   ; ps ud1 
      002980 CD 08 31         [ 4]  744     CALL DDUP   ; ps ud1 ud1  
      002983 CD 05 34         [ 4]  745     CALL RFROM  ; ps ud1 ud1 ud2hi 
      002986 CD 26 4E         [ 4]  746     CALL DSSTAR ; ps ud1 dprodhi 
                                    747 ; shift partial product 16 bits left 
      002989 CD 06 17         [ 4]  748     CALL DROP   ; drop overflow 
      00298C CD 0B CE         [ 4]  749     CALL ZERO   ; ps ud1 prodhi 
      00298F CD 06 31         [ 4]  750     CALL SWAPP  
      002992 CD 26 97         [ 4]  751     CALL DSWAP  ; ps dprodhi ud1 
      002995 CD 05 34         [ 4]  752     CALL RFROM  ; ps dprodhi ud1 ud2lo
      002998 CD 26 4E         [ 4]  753     CALL DSSTAR ; ps  dprodhi dprodlo 
      00299B CD 2A A7         [ 4]  754     CALL DPLUS
      00299E CD 07 E5         [ 4]  755     CALL ROT    ; dprod ps 
      0029A1                        756     _QBRAN DDSTAR3 
      0029A1 CD 04 98         [ 4]    1     CALL QBRAN
      0029A4 29 A9                    2     .word DDSTAR3
      0029A6 CD 08 83         [ 4]  757     CALL DNEGA 
      0029A9                        758 DDSTAR3:  
      0029A9 81               [ 4]  759     RET 
                                    760 
                                    761 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    762 ;  UD/MOD ( ud1 ud2 -- dr udq )
                                    763 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0029AA                        764     _HEADER UDSLMOD,6,"UD/MOD"
      0029AA 29 4D                    1         .word LINK 
                           0029AC     2         LINK=.
      0029AC 06                       3         .byte 6  
      0029AD 55 44 2F 4D 4F 44        4         .ascii "UD/MOD"
      0029B3                          5         UDSLMOD:
                                    765 ; unsigned double division 
      0029B3 CD 0B CE         [ 4]  766     CALL ZERO 
      0029B6 CD 0B CE         [ 4]  767     CALL ZERO
      0029B9 CD 27 E3         [ 4]  768     CALL DTOR ; quotient  R: sign qlo qhi 
      0029BC CD 28 AA         [ 4]  769     CALL DOVER 
      0029BF CD 26 C5         [ 4]  770     CALL DCLZ ; n2, dividend leading zeros  
      0029C2 CD 05 EA         [ 4]  771     CALL TOR 
      0029C5 CD 08 31         [ 4]  772     CALL DDUP    
      0029C8 CD 26 C5         [ 4]  773     CALL DCLZ  ; n1, divisor leading zeros
      0029CB CD 05 34         [ 4]  774     CALL RFROM ; n1 n2 
      0029CE CD 08 BD         [ 4]  775     CALL SUBB
      0029D1 CD 06 21         [ 4]  776     CALL DUPP   
      0029D4 CD 06 58         [ 4]  777     CALL ZLESS 
      0029D7                        778     _TBRAN UDSLA7 ; quotient is null 
      0029D7 CD 04 A6         [ 4]    1     CALL TBRAN 
      0029DA 2A 4A                    2     .word UDSLA7 
      0029DC CD 06 21         [ 4]  779     CALL DUPP 
      0029DF CD 05 EA         [ 4]  780     CALL TOR    ; loop counter 
      0029E2 CD 06 21         [ 4]  781     CALL DUPP 
      0029E5 CD 05 EA         [ 4]  782     CALL TOR    ; need to copies 
      0029E8 CD 07 D4         [ 4]  783     CALL QDUP 
      0029EB                        784     _QBRAN UDSLA3
      0029EB CD 04 98         [ 4]    1     CALL QBRAN
      0029EE 29 F3                    2     .word UDSLA3
      0029F0 CD 28 F6         [ 4]  785     CALL DLSHIFT ; align divisor with dividend 
      0029F3                        786 UDSLA3: ; division loop -- dividend divisor  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



      0029F3 90 5F            [ 1]  787     CLRW Y 
      0029F5 90 89            [ 2]  788     PUSHW Y  
      0029F7 CD 28 AA         [ 4]  789     CALL DOVER 
      0029FA CD 28 AA         [ 4]  790     CALL DOVER 
      0029FD CD 27 B1         [ 4]  791     CALL DLESS 
      002A00                        792     _TBRAN UDSLA4 
      002A00 CD 04 A6         [ 4]    1     CALL TBRAN 
      002A03 2A 19                    2     .word UDSLA4 
      002A05 90 85            [ 2]  793     POPW Y 
      002A07 72 A9 00 01      [ 2]  794     ADDW Y,#1 
      002A0B 90 89            [ 2]  795     PUSHW Y    ; quotiend least bit 
      002A0D CD 08 31         [ 4]  796     CALL DDUP  ; dividend divisor divisor 
      002A10 CD 27 E3         [ 4]  797     CALL DTOR  
      002A13 CD 2A D9         [ 4]  798     CALL DSUB  ; dividend-divisor 
      002A16 CD 28 01         [ 4]  799     CALL DRFROM  ; dividend- divisor  
      002A19                        800 UDSLA4: ; shift quotient and add 1 bit 
      002A19 90 85            [ 2]  801     POPW Y 
      002A1B 90 BF 26         [ 2]  802     LDW YTEMP,Y 
      002A1E 16 07            [ 2]  803     LDW Y,(7,SP) ; quotient low 
      002A20 98               [ 1]  804     RCF 
      002A21 90 59            [ 2]  805     RLCW Y
      002A23 17 07            [ 2]  806     LDW (7,SP),Y 
      002A25 16 05            [ 2]  807     LDW Y,(5,SP) ; quotient hi 
      002A27 90 59            [ 2]  808     RLCW Y 
      002A29 17 05            [ 2]  809     LDW (5,SP),Y 
      002A2B 16 07            [ 2]  810     LDW Y,(7,SP) 
      002A2D 72 B9 00 26      [ 2]  811     ADDW Y,YTEMP
      002A31 17 07            [ 2]  812     LDW (7,SP),Y 
      002A33 16 01            [ 2]  813     LDW Y,(1,SP) ; loop counter 
      002A35 90 5D            [ 2]  814     TNZW Y 
      002A37 27 14            [ 1]  815     JREQ UDSLA8
      002A39 72 A2 00 01      [ 2]  816     SUBW Y,#1  
      002A3D 17 01            [ 2]  817     LDW (1,SP),Y  
                                    818 ; shift dividend left 1 bit      
      002A3F CD 26 97         [ 4]  819     CALL DSWAP 
      002A42 CD 28 DA         [ 4]  820     CALL D2STAR 
      002A45 CD 26 97         [ 4]  821     CALL DSWAP 
      002A48 20 A9            [ 2]  822     JRA UDSLA3 
      002A4A                        823 UDSLA7:
      002A4A 1C 00 02         [ 2]  824     ADDW X,#2 ; drop shift count  
      002A4D                        825 UDSLA8:
      002A4D 1C 00 04         [ 2]  826     ADDW X,#4 ; drop divisor
      002A50 CD 0B D9         [ 4]  827     CALL ONE 
      002A53 CD 05 7D         [ 4]  828     CALL NRDROP ; drop loop counter
      002A56 CD 05 34         [ 4]  829     CALL RFROM   ; shift count
      002A59 CD 29 2D         [ 4]  830     CALL DRSHIFT 
                                    831     ; quotient replace dividend 
      002A5C CD 28 01         [ 4]  832     CALL DRFROM  ; quotient 
      002A5F 81               [ 4]  833     RET 
                                    834 
                                    835 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    836 ;   D/MOD  ( d1 d2 -- dr dq )
                                    837 ;   double division dq=d1/d2
                                    838 ;   dr remainder double 
                                    839 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



      002A60                        840     _HEADER DDSLMOD,5,"D/MOD"  
      002A60 29 AC                    1         .word LINK 
                           002A62     2         LINK=.
      002A62 05                       3         .byte 5  
      002A63 44 2F 4D 4F 44           4         .ascii "D/MOD"
      002A68                          5         DDSLMOD:
      002A68 CD 25 8C         [ 4]  841     CALL DSIGN 
      002A6B CD 05 EA         [ 4]  842     CALL TOR   ; R: divisor sign 
      002A6E CD 26 97         [ 4]  843     CALL DSWAP 
      002A71 CD 25 8C         [ 4]  844     CALL DSIGN ; dividend sign 
      002A74 CD 05 34         [ 4]  845     CALL RFROM 
      002A77 CD 06 A7         [ 4]  846     CALL XORR  ; quotient sign
      002A7A CD 05 EA         [ 4]  847     CALL TOR   ; 
      002A7D CD 25 75         [ 4]  848     CALL DABS  ; d2 ud1 R: sign 
      002A80 CD 26 97         [ 4]  849     CALL DSWAP  ; ud1 d2 
      002A83 CD 25 75         [ 4]  850     CALL DABS  ; ud1 ud2 
      002A86 CD 29 B3         [ 4]  851     CALL UDSLMOD ; ud1/ud2 -- dr dq  
      002A89 90 85            [ 2]  852     POPW Y ; sign 
      002A8B 90 5D            [ 2]  853     TNZW Y 
      002A8D 2A 03            [ 1]  854     JRPL DSLA9 
      002A8F CD 08 83         [ 4]  855     CALL DNEGA ; remainder quotient 
      002A92                        856 DSLA9: 
      002A92 81               [ 4]  857     RET 
                                    858 
                                    859 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    860 ;   D/  ( d1 d2 -- dq )
                                    861 ;   division double by double 
                                    862 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002A93                        863     _HEADER DSLASH,2,"D/"
      002A93 2A 62                    1         .word LINK 
                           002A95     2         LINK=.
      002A95 02                       3         .byte 2  
      002A96 44 2F                    4         .ascii "D/"
      002A98                          5         DSLASH:
      002A98 CD 2A 68         [ 4]  864     CALL DDSLMOD
      002A9B CD 26 97         [ 4]  865     CALL DSWAP
      002A9E CD 08 26         [ 4]  866     CALL DDROP 
      002AA1 81               [ 4]  867     RET 
                                    868 
                                    869 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    870 ;   D+ ( d1 d2 -- d3 )
                                    871 ;   add 2 doubles 
                                    872 ;   d3=d1+d2 
                                    873 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002AA2                        874     _HEADER DPLUS,2,"D+"
      002AA2 2A 95                    1         .word LINK 
                           002AA4     2         LINK=.
      002AA4 02                       3         .byte 2  
      002AA5 44 2B                    4         .ascii "D+"
      002AA7                          5         DPLUS:
      002AA7 90 93            [ 1]  875     LDW Y,X 
      002AA9 90 FE            [ 2]  876     LDW Y,(Y)
      002AAB 90 BF 26         [ 2]  877     LDW YTEMP,Y ; d2 hi 
      002AAE 90 93            [ 1]  878     LDW Y,X 
      002AB0 90 EE 02         [ 2]  879     LDW Y,(2,Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



      002AB3 90 BF 24         [ 2]  880     LDW XTEMP,Y ; d2 lo 
      002AB6 1C 00 04         [ 2]  881     ADDW X,#4 
      002AB9 90 93            [ 1]  882     LDW Y,X 
      002ABB 90 EE 02         [ 2]  883     LDW Y,(2,Y) ; d1 lo
      002ABE 72 B9 00 24      [ 2]  884     ADDW Y,XTEMP
      002AC2 EF 02            [ 2]  885     LDW (2,X),Y 
      002AC4 90 93            [ 1]  886     LDW Y,X 
      002AC6 90 FE            [ 2]  887     LDW Y,(Y) ; d1 hi 
      002AC8 24 04            [ 1]  888     JRNC DPLUS1 
      002ACA 72 A9 00 01      [ 2]  889     ADDW Y,#1 
      002ACE                        890 DPLUS1: 
      002ACE 72 B9 00 26      [ 2]  891     ADDW Y,YTEMP 
      002AD2 FF               [ 2]  892     LDW (X),Y 
      002AD3 81               [ 4]  893     RET 
                                    894 
                                    895 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    896 ;   D- ( d1 d2 -- d3 )
                                    897 ;   d3=d1-d2 
                                    898 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002AD4                        899     _HEADER DSUB,2,"D-"
      002AD4 2A A4                    1         .word LINK 
                           002AD6     2         LINK=.
      002AD6 02                       3         .byte 2  
      002AD7 44 2D                    4         .ascii "D-"
      002AD9                          5         DSUB:
      002AD9 90 93            [ 1]  900     LDW Y,X 
      002ADB 90 FE            [ 2]  901     LDW Y,(Y)
      002ADD 90 BF 26         [ 2]  902     LDW YTEMP,Y ; d2 hi 
      002AE0 90 93            [ 1]  903     LDW Y,X 
      002AE2 90 EE 02         [ 2]  904     LDW Y,(2,Y)
      002AE5 90 BF 24         [ 2]  905     LDW XTEMP,Y ; d2 lo 
      002AE8 1C 00 04         [ 2]  906     ADDW X,#4 
      002AEB 90 93            [ 1]  907     LDW Y,X 
      002AED 90 EE 02         [ 2]  908     LDW Y,(2,Y) ; d1 lo
      002AF0 72 B2 00 24      [ 2]  909     SUBW Y,XTEMP
      002AF4 EF 02            [ 2]  910     LDW (2,X),Y 
      002AF6 90 93            [ 1]  911     LDW Y,X 
      002AF8 90 FE            [ 2]  912     LDW Y,(Y) ; d1 hi 
      002AFA 24 04            [ 1]  913     JRNC DSUB1 
      002AFC 72 A2 00 01      [ 2]  914     SUBW Y,#1 
      002B00                        915 DSUB1: 
      002B00 72 B2 00 26      [ 2]  916     SUBW Y,YTEMP 
      002B04 FF               [ 2]  917     LDW (X),Y 
      002B05 81               [ 4]  918     RET 
                                    919 
                                    920 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



                                   4468 .endif 
                           000001  4469 .if WANT_FLOAT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



                                   4470         .include "float.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;*********************************
                                     21 ;    floating point library
                                     22 ;    adapted from 
                                     23 ;    Forth dimensions Vol. IV #1 
                                     24 ;    published in  may/june 1982
                                     25 ;
                                     26 ; Creation date: 2021-06-15 
                                     27 ;
                                     28 ;  This file is part of stm8_eforth 
                                     29 ;  project and same licence apply.
                                     30 ;************************************
                                     31 
                                     32 ;*************************************************
                                     33 ;  FLOAT format double for storage 
                                     34 ;  bits 23:0  signed mantissa
                                     35 ;  bits  31:24  signed exponent
                                     36 ;***********************************************  
                                     37 
                                     38     .module FLOAT 
                                     39 
                           000001    40 .if WANT_DOUBLE 
                                     41 ; already included 
                           000000    42 .else
                                     43 ;  must be included  
                                     44     .include "double.asm"
                                     45 .endif  
                                     46 
                           7FFFFF    47     MAX_MANTISSA = 0x7FFFFF 
                                     48 
                                     49 ;-------------------------
                                     50 ;    FPSW ( -- a )
                                     51 ;    floating state variable
                                     52 ;    bit 0 zero flag 
                                     53 ;    bit 1 negative flag 
                                     54 ;    bit 2 overflow/error flag 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



                                     55 ;---------------------------
      002B06                         56     _HEADER FPSW,4,"FPSW"
      002B06 2A D6                    1         .word LINK 
                           002B08     2         LINK=.
      002B08 04                       3         .byte 4  
      002B09 46 50 53 57              4         .ascii "FPSW"
      002B0D                          5         FPSW:
      002B0D 90 AE 00 08      [ 2]   57 	LDW Y,#UFPSW  
      002B11 1D 00 02         [ 2]   58 	SUBW X,#2
      002B14 FF               [ 2]   59     LDW (X),Y
      002B15 81               [ 4]   60     RET
                                     61 
                                     62 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     63 ;   FRESET ( -- )
                                     64 ;   reset FPSW variable 
                                     65 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
      002B16                         66     _HEADER FRESET,6,"FRESET"
      002B16 2B 08                    1         .word LINK 
                           002B18     2         LINK=.
      002B18 06                       3         .byte 6  
      002B19 46 52 45 53 45 54        4         .ascii "FRESET"
      002B1F                          5         FRESET:
      002B1F CD 0B CE         [ 4]   67     CALL ZERO  
      002B22 CD 2B 0D         [ 4]   68     CALL FPSW 
      002B25 CD 04 D1         [ 4]   69     CALL STORE 
      002B28 81               [ 4]   70     RET 
                                     71 
                                     72 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     73 ;   FINIT ( -- )
                                     74 ;   initialize floating point 
                                     75 ;   library 
                                     76 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B29                         77     _HEADER FINIT,5,"FINIT"
      002B29 2B 18                    1         .word LINK 
                           002B2B     2         LINK=.
      002B2B 05                       3         .byte 5  
      002B2C 46 49 4E 49 54           4         .ascii "FINIT"
      002B31                          5         FINIT:
      002B31 CD 2B 1F         [ 4]   78     CALL FRESET 
      002B34 81               [ 4]   79     RET 
                                     80 
                                     81 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     82 ;    FER ( -- u )
                                     83 ;    return FPSW value 
                                     84 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B35                         85     _HEADER FER,3,"FER"
      002B35 2B 2B                    1         .word LINK 
                           002B37     2         LINK=.
      002B37 03                       3         .byte 3  
      002B38 46 45 52                 4         .ascii "FER"
      002B3B                          5         FER:
      002B3B CD 2B 0D         [ 4]   86     CALL FPSW 
      002B3E CD 04 E3         [ 4]   87     CALL AT 
      002B41 81               [ 4]   88     RET 
                                     89 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



                                     90 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     91 ;    FZE  ( -- z )
                                     92 ;    return FPSW zero flag 
                                     93 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B42                         94     _HEADER FZE,3,"FZE"
      002B42 2B 37                    1         .word LINK 
                           002B44     2         LINK=.
      002B44 03                       3         .byte 3  
      002B45 46 5A 45                 4         .ascii "FZE"
      002B48                          5         FZE:
      002B48 CD 2B 0D         [ 4]   95     CALL FPSW
      002B4B CD 04 E3         [ 4]   96     CALL AT  
      002B4E CD 0B D9         [ 4]   97     CALL ONE 
      002B51 CD 06 7E         [ 4]   98     CALL ANDD 
      002B54 81               [ 4]   99     RET 
                                    100 
                                    101 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    102 ;    FNE ( -- n )
                                    103 ;    return FPSW negative flag 
                                    104 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B55                        105     _HEADER FNE,3,"FNE"
      002B55 2B 44                    1         .word LINK 
                           002B57     2         LINK=.
      002B57 03                       3         .byte 3  
      002B58 46 4E 45                 4         .ascii "FNE"
      002B5B                          5         FNE:
      002B5B CD 2B 0D         [ 4]  106     CALL FPSW 
      002B5E CD 04 E3         [ 4]  107     CALL AT 
      002B61                        108     _DOLIT 2 
      002B61 CD 04 6F         [ 4]    1     CALL DOLIT 
      002B64 00 02                    2     .word 2 
      002B66 CD 06 7E         [ 4]  109     CALL ANDD 
      002B69 81               [ 4]  110     RET 
                                    111 
                                    112 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    113 ;   FOV (A -- v )
                                    114 ;   return FPSW overflow flag 
                                    115 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B6A                        116     _HEADER FOV,3,"FOV"
      002B6A 2B 57                    1         .word LINK 
                           002B6C     2         LINK=.
      002B6C 03                       3         .byte 3  
      002B6D 46 4F 56                 4         .ascii "FOV"
      002B70                          5         FOV:
      002B70 CD 2B 0D         [ 4]  117     CALL FPSW
      002B73 CD 04 E3         [ 4]  118     CALL AT  
      002B76                        119     _DOLIT 4 
      002B76 CD 04 6F         [ 4]    1     CALL DOLIT 
      002B79 00 04                    2     .word 4 
      002B7B CD 06 7E         [ 4]  120     CALL ANDD 
      002B7E 81               [ 4]  121     RET 
                                    122 
                                    123 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    124 ;    SFZ ( f# -- f# )
                                    125 ;    set FPSW zero flag 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



                                    126 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B7F                        127     _HEADER SFZ,3,"SFZ"
      002B7F 2B 6C                    1         .word LINK 
                           002B81     2         LINK=.
      002B81 03                       3         .byte 3  
      002B82 53 46 5A                 4         .ascii "SFZ"
      002B85                          5         SFZ:
      002B85 CD 2B 3B         [ 4]  128     CALL FER 
      002B88                        129     _DOLIT 0xfffe 
      002B88 CD 04 6F         [ 4]    1     CALL DOLIT 
      002B8B FF FE                    2     .word 0xfffe 
      002B8D CD 06 7E         [ 4]  130     CALL ANDD 
      002B90 CD 05 EA         [ 4]  131     CALL TOR    
      002B93 90 93            [ 1]  132     LDW Y,X 
      002B95 90 FE            [ 2]  133     LDW Y,(Y)
      002B97 26 0F            [ 1]  134     JRNE SFZ1  
      002B99 90 93            [ 1]  135     LDW Y,X 
      002B9B 90 EE 02         [ 2]  136     LDW Y,(2,Y)
      002B9E 26 08            [ 1]  137     JRNE SFZ1
      002BA0 16 01            [ 2]  138     LDW Y,(1,SP)
      002BA2 72 A9 00 01      [ 2]  139     ADDW Y,#1
      002BA6 17 01            [ 2]  140     LDW (1,SP),Y 
      002BA8                        141 SFZ1:
      002BA8 CD 05 34         [ 4]  142     CALL RFROM 
      002BAB CD 2B 0D         [ 4]  143     CALL FPSW 
      002BAE CD 04 D1         [ 4]  144     CALL STORE 
      002BB1 81               [ 4]  145     RET 
                                    146 
                                    147 
                                    148 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    149 ;   SFN ( f# -- f# )
                                    150 ;   set FPSW negative flag 
                                    151 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BB2                        152     _HEADER SFN,3,"SFN"
      002BB2 2B 81                    1         .word LINK 
                           002BB4     2         LINK=.
      002BB4 03                       3         .byte 3  
      002BB5 53 46 4E                 4         .ascii "SFN"
      002BB8                          5         SFN:
      002BB8 CD 2B 3B         [ 4]  153     CALL FER 
      002BBB                        154     _DOLIT 0xFFFD 
      002BBB CD 04 6F         [ 4]    1     CALL DOLIT 
      002BBE FF FD                    2     .word 0xFFFD 
      002BC0 CD 06 7E         [ 4]  155     CALL ANDD  
      002BC3 CD 05 EA         [ 4]  156     CALL TOR 
      002BC6 E6 01            [ 1]  157     LD A,(1,X) 
      002BC8 2A 08            [ 1]  158     JRPL SFN1 
      002BCA 16 01            [ 2]  159     LDW Y,(1,SP)  ; R@ -> Y 
      002BCC 72 A9 00 02      [ 2]  160     ADDW Y,#2     ; set negative flag 
      002BD0 17 01            [ 2]  161     LDW (1,SP),Y  ; Y -> R! 
      002BD2                        162 SFN1:
      002BD2 CD 05 34         [ 4]  163     CALL RFROM 
      002BD5 CD 2B 0D         [ 4]  164     CALL FPSW 
      002BD8 CD 04 D1         [ 4]  165     CALL STORE 
      002BDB 81               [ 4]  166     RET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



                                    167 
                                    168 
                                    169 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    170 ;   SFV ( -- )
                                    171 ;   set overflow flag 
                                    172 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BDC                        173     _HEADER SFV,3,"SFV"
      002BDC 2B B4                    1         .word LINK 
                           002BDE     2         LINK=.
      002BDE 03                       3         .byte 3  
      002BDF 53 46 56                 4         .ascii "SFV"
      002BE2                          5         SFV:
      002BE2 CD 2B 3B         [ 4]  174     CALL FER 
      002BE5                        175     _DOLIT 4 
      002BE5 CD 04 6F         [ 4]    1     CALL DOLIT 
      002BE8 00 04                    2     .word 4 
      002BEA CD 06 92         [ 4]  176     CALL ORR 
      002BED CD 2B 0D         [ 4]  177     CALL FPSW 
      002BF0 CD 04 D1         [ 4]  178     CALL STORE 
      002BF3 81               [ 4]  179     RET 
                                    180 
                                    181 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    182 ;  F>ME ( f# -- m e )
                                    183 ;  split float in mantissa/exponent 
                                    184 ;  m mantissa as a double 
                                    185 ;  e exponent as a single 
                                    186 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BF4                        187     _HEADER ATEXP,4,"F>ME"             
      002BF4 2B DE                    1         .word LINK 
                           002BF6     2         LINK=.
      002BF6 04                       3         .byte 4  
      002BF7 46 3E 4D 45              4         .ascii "F>ME"
      002BFB                          5         ATEXP:
      002BFB CD 2B 1F         [ 4]  188     CALL FRESET
      002BFE CD 2B B8         [ 4]  189     CALL SFN
      002C01 CD 2B 85         [ 4]  190     CALL SFZ 
      002C04 90 93            [ 1]  191     LDW Y,X 
      002C06 90 FE            [ 2]  192     LDW Y,(Y)
      002C08 90 89            [ 2]  193     PUSHW Y 
      002C0A 4F               [ 1]  194     CLR A  
      002C0B 90 5E            [ 1]  195     SWAPW Y 
      002C0D 2A 01            [ 1]  196     JRPL ATEXP1 
      002C0F 43               [ 1]  197     CPL A 
      002C10                        198 ATEXP1: ; sign extend mantissa 
      002C10 90 5E            [ 1]  199     SWAPW Y 
      002C12 90 95            [ 1]  200     LD YH,A 
      002C14 FF               [ 2]  201     LDW (X),Y 
      002C15 1D 00 02         [ 2]  202     SUBW X,#CELLL 
      002C18 90 85            [ 2]  203     POPW Y 
      002C1A 4F               [ 1]  204     CLR A 
      002C1B 90 5D            [ 2]  205     TNZW Y 
      002C1D 2A 01            [ 1]  206     JRPL ATEXP2 
      002C1F 43               [ 1]  207     CPL A 
      002C20                        208 ATEXP2:
      002C20 90 5E            [ 1]  209     SWAPW Y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



      002C22 90 95            [ 1]  210     LD YH,A 
      002C24 FF               [ 2]  211     LDW (X),Y 
      002C25 81               [ 4]  212     RET 
                                    213 
                                    214 
                                    215 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    216 ;    ME>F ( m e -- f# )
                                    217 ;    built float from mantissa/exponent 
                                    218 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C26                        219     _HEADER STEXP,4,"ME>F"
      002C26 2B F6                    1         .word LINK 
                           002C28     2         LINK=.
      002C28 04                       3         .byte 4  
      002C29 4D 45 3E 46              4         .ascii "ME>F"
      002C2D                          5         STEXP:
      002C2D CD 06 21         [ 4]  220     CALL DUPP 
      002C30 CD 08 D7         [ 4]  221     CALL ABSS 
      002C33                        222     _DOLIT 127 
      002C33 CD 04 6F         [ 4]    1     CALL DOLIT 
      002C36 00 7F                    2     .word 127 
      002C38 CD 09 60         [ 4]  223     CALL GREAT
      002C3B                        224     _QBRAN STEXP1
      002C3B CD 04 98         [ 4]    1     CALL QBRAN
      002C3E 2C 43                    2     .word STEXP1
      002C40 CD 2B E2         [ 4]  225     CALL SFV
      002C43                        226 STEXP1:
      002C43 90 93            [ 1]  227     LDW Y,X 
      002C45 90 FE            [ 2]  228     LDW Y,(Y)
      002C47 4F               [ 1]  229     CLR A 
      002C48 90 95            [ 1]  230     LD YH,A
      002C4A 90 5E            [ 1]  231     SWAPW Y 
      002C4C 90 89            [ 2]  232     PUSHW Y  
      002C4E 1C 00 02         [ 2]  233     ADDW X,#CELLL ; e >R 
      002C51 CD 06 21         [ 4]  234     CALL DUPP
      002C54 CD 08 D7         [ 4]  235     CALL ABSS 
      002C57                        236     _DOLIT 127  
      002C57 CD 04 6F         [ 4]    1     CALL DOLIT 
      002C5A 00 7F                    2     .word 127 
      002C5C CD 09 60         [ 4]  237     CALL GREAT 
      002C5F                        238     _QBRAN STEXP2 
      002C5F CD 04 98         [ 4]    1     CALL QBRAN
      002C62 2C 67                    2     .word STEXP2
      002C64 CD 2B E2         [ 4]  239     CALL SFV
      002C67                        240 STEXP2: 
      002C67 4F               [ 1]  241     CLR A 
      002C68 F7               [ 1]  242     LD (X),A 
      002C69 CD 05 34         [ 4]  243     CALL RFROM 
      002C6C CD 06 92         [ 4]  244     CALL ORR
      002C6F CD 2B 85         [ 4]  245     CALL SFZ 
      002C72 CD 2B B8         [ 4]  246     CALL SFN 
      002C75 81               [ 4]  247     RET 
                                    248 
                                    249 
                                    250 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    251 ;   E. ( f# -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



                                    252 ;   print float in scientific 
                                    253 ;   format 
                                    254 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C76                        255     _HEADER EDOT,2,"E."
      002C76 2C 28                    1         .word LINK 
                           002C78     2         LINK=.
      002C78 02                       3         .byte 2  
      002C79 45 2E                    4         .ascii "E."
      002C7B                          5         EDOT:
      002C7B CD 06 E7         [ 4]  256     CALL BASE 
      002C7E CD 04 E3         [ 4]  257     CALL AT 
      002C81 CD 05 EA         [ 4]  258     CALL TOR 
      002C84                        259     _DOLIT 10 
      002C84 CD 04 6F         [ 4]    1     CALL DOLIT 
      002C87 00 0A                    2     .word 10 
      002C89 CD 06 E7         [ 4]  260     CALL BASE 
      002C8C CD 04 D1         [ 4]  261     CALL STORE 
      002C8F CD 2B FB         [ 4]  262     CALL ATEXP ; m e 
      002C92                        263 EDOT0:
      002C92 CD 05 EA         [ 4]  264     CALL TOR   
      002C95 CD 2B 5B         [ 4]  265     CALL FNE 
      002C98                        266     _QBRAN EDOT1
      002C98 CD 04 98         [ 4]    1     CALL QBRAN
      002C9B 2C A0                    2     .word EDOT1
      002C9D CD 08 83         [ 4]  267     CALL DNEGA
      002CA0                        268 EDOT1:
      002CA0 CD 0F 04         [ 4]  269     CALL SPACE 
      002CA3 CD 0D C8         [ 4]  270     CALL BDIGS     
      002CA6                        271 EDOT2: 
      002CA6 CD 25 E7         [ 4]  272     CALL DDIG
      002CA9 CD 05 34         [ 4]  273     CALL RFROM 
      002CAC CD 0B 62         [ 4]  274     CALL ONEP 
      002CAF CD 05 EA         [ 4]  275     CALL TOR 
      002CB2 CD 06 21         [ 4]  276     CALL DUPP
      002CB5                        277     _QBRAN EDOT3 
      002CB5 CD 04 98         [ 4]    1     CALL QBRAN
      002CB8 2C BF                    2     .word EDOT3
      002CBA                        278     _BRAN EDOT2  
      002CBA CD 04 B4         [ 4]    1     CALL BRAN 
      002CBD 2C A6                    2     .word EDOT2 
      002CBF                        279 EDOT3:
      002CBF CD 06 49         [ 4]  280     CALL OVER 
      002CC2 CD 06 E7         [ 4]  281     CALL BASE 
      002CC5 CD 04 E3         [ 4]  282     CALL AT 
      002CC8 CD 09 04         [ 4]  283     CALL ULESS 
      002CCB                        284     _QBRAN EDOT2 
      002CCB CD 04 98         [ 4]    1     CALL QBRAN
      002CCE 2C A6                    2     .word EDOT2
      002CD0                        285     _DOLIT '.'
      002CD0 CD 04 6F         [ 4]    1     CALL DOLIT 
      002CD3 00 2E                    2     .word '.' 
      002CD5 CD 0D D8         [ 4]  286     CALL HOLD  
      002CD8 CD 25 E7         [ 4]  287     CALL DDIG
      002CDB CD 2B 5B         [ 4]  288     CALL FNE 
      002CDE                        289     _QBRAN EDOT4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



      002CDE CD 04 98         [ 4]    1     CALL QBRAN
      002CE1 2C EE                    2     .word EDOT4
      002CE3                        290     _DOLIT '-'
      002CE3 CD 04 6F         [ 4]    1     CALL DOLIT 
      002CE6 00 2D                    2     .word '-' 
      002CE8 CD 0D D8         [ 4]  291     CALL HOLD 
      002CEB CD 06 17         [ 4]  292     CALL DROP 
      002CEE                        293 EDOT4:       
      002CEE CD 0E 2D         [ 4]  294     CALL EDIGS 
      002CF1 CD 0F 2E         [ 4]  295     CALL TYPES
      002CF4 CD 05 34         [ 4]  296     CALL RFROM 
      002CF7 CD 07 D4         [ 4]  297     CALL QDUP 
      002CFA                        298     _QBRAN EDOT5     
      002CFA CD 04 98         [ 4]    1     CALL QBRAN
      002CFD 2D 0A                    2     .word EDOT5
      002CFF                        299     _DOLIT 'E'
      002CFF CD 04 6F         [ 4]    1     CALL DOLIT 
      002D02 00 45                    2     .word 'E' 
      002D04 CD 04 36         [ 4]  300     CALL EMIT 
      002D07 CD 0F ED         [ 4]  301     CALL DOT
      002D0A                        302 EDOT5: 
      002D0A CD 05 34         [ 4]  303     CALL RFROM 
      002D0D CD 06 E7         [ 4]  304     CALL BASE 
      002D10 CD 04 D1         [ 4]  305     CALL STORE  
      002D13 81               [ 4]  306     RET 
                                    307 
                                    308 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                    309 ;   F. (f# -- )
                                    310 ;   print float in fixed
                                    311 ;   point format. 
                                    312 ;;;;;;;;;;;;;;;;;;;;;;;;;
      002D14                        313     _HEADER FDOT,2,"F."
      002D14 2C 78                    1         .word LINK 
                           002D16     2         LINK=.
      002D16 02                       3         .byte 2  
      002D17 46 2E                    4         .ascii "F."
      002D19                          5         FDOT:
      002D19 CD 06 E7         [ 4]  314     CALL BASE 
      002D1C CD 04 E3         [ 4]  315     CALL AT 
      002D1F CD 05 EA         [ 4]  316     CALL TOR 
      002D22                        317     _DOLIT 10 
      002D22 CD 04 6F         [ 4]    1     CALL DOLIT 
      002D25 00 0A                    2     .word 10 
      002D27 CD 06 E7         [ 4]  318     CALL BASE 
      002D2A CD 04 D1         [ 4]  319     CALL STORE 
      002D2D CD 2B FB         [ 4]  320     CALL    ATEXP
      002D30 CD 06 21         [ 4]  321     CALL    DUPP  
      002D33 CD 08 D7         [ 4]  322     CALL    ABSS 
      002D36                        323     _DOLIT  8
      002D36 CD 04 6F         [ 4]    1     CALL DOLIT 
      002D39 00 08                    2     .word 8 
      002D3B CD 09 60         [ 4]  324     CALL    GREAT 
      002D3E                        325     _QBRAN  FDOT1 
      002D3E CD 04 98         [ 4]    1     CALL QBRAN
      002D41 2D 46                    2     .word FDOT1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



      002D43 CC 2C 92         [ 2]  326     JP      EDOT0 
      002D46                        327 FDOT1:
      002D46 CD 0F 04         [ 4]  328     CALL    SPACE 
      002D49 CD 05 EA         [ 4]  329     CALL    TOR 
      002D4C CD 2B 5B         [ 4]  330     CALL    FNE 
      002D4F                        331     _QBRAN  FDOT0 
      002D4F CD 04 98         [ 4]    1     CALL QBRAN
      002D52 2D 57                    2     .word FDOT0
      002D54 CD 08 83         [ 4]  332     CALL    DNEGA 
      002D57                        333 FDOT0: 
      002D57 CD 0D C8         [ 4]  334     CALL    BDIGS
      002D5A CD 05 45         [ 4]  335     CALL    RAT  
      002D5D CD 06 58         [ 4]  336     CALL    ZLESS 
      002D60                        337     _QBRAN  FDOT6 
      002D60 CD 04 98         [ 4]    1     CALL QBRAN
      002D63 2D 8E                    2     .word FDOT6
      002D65                        338 FDOT2: ; e<0 
      002D65 CD 25 E7         [ 4]  339     CALL    DDIG 
      002D68 CD 05 34         [ 4]  340     CALL    RFROM
      002D6B CD 0B 62         [ 4]  341     CALL    ONEP 
      002D6E CD 07 D4         [ 4]  342     CALL    QDUP 
      002D71                        343     _QBRAN  FDOT3 
      002D71 CD 04 98         [ 4]    1     CALL QBRAN
      002D74 2D 7E                    2     .word FDOT3
      002D76 CD 05 EA         [ 4]  344     CALL    TOR 
      002D79                        345     _BRAN   FDOT2 
      002D79 CD 04 B4         [ 4]    1     CALL BRAN 
      002D7C 2D 65                    2     .word FDOT2 
      002D7E                        346 FDOT3:
      002D7E                        347     _DOLIT  '.' 
      002D7E CD 04 6F         [ 4]    1     CALL DOLIT 
      002D81 00 2E                    2     .word '.' 
      002D83 CD 0D D8         [ 4]  348     CALL    HOLD 
      002D86 CD 26 00         [ 4]  349     CALL    DDIGS
      002D89                        350     _BRAN   FDOT9  
      002D89 CD 04 B4         [ 4]    1     CALL BRAN 
      002D8C 2D A3                    2     .word FDOT9 
      002D8E                        351 FDOT6: ; e>=0 
      002D8E                        352     _BRAN   FDOT8
      002D8E CD 04 B4         [ 4]    1     CALL BRAN 
      002D91 2D 9B                    2     .word FDOT8 
      002D93                        353 FDOT7:     
      002D93                        354     _DOLIT  '0'
      002D93 CD 04 6F         [ 4]    1     CALL DOLIT 
      002D96 00 30                    2     .word '0' 
      002D98 CD 0D D8         [ 4]  355     CALL    HOLD 
      002D9B                        356 FDOT8:
      002D9B CD 04 83         [ 4]  357     CALL    DONXT 
      002D9E 2D 93                  358     .word   FDOT7
      002DA0 CD 26 00         [ 4]  359     CALL    DDIGS 
      002DA3                        360 FDOT9:
      002DA3 CD 2B 5B         [ 4]  361     CALL    FNE 
      002DA6                        362     _QBRAN  FDOT10 
      002DA6 CD 04 98         [ 4]    1     CALL QBRAN
      002DA9 2D B3                    2     .word FDOT10
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



      002DAB                        363     _DOLIT '-' 
      002DAB CD 04 6F         [ 4]    1     CALL DOLIT 
      002DAE 00 2D                    2     .word '-' 
      002DB0 CD 0D D8         [ 4]  364     CALL   HOLD 
      002DB3                        365 FDOT10:
      002DB3 CD 0E 2D         [ 4]  366     CALL    EDIGS 
      002DB6 CD 0F 2E         [ 4]  367     CALL    TYPES 
      002DB9 CD 05 34         [ 4]  368     CALL    RFROM 
      002DBC CD 06 E7         [ 4]  369     CALL    BASE 
      002DBF CD 04 D1         [ 4]  370     CALL    STORE 
      002DC2 81               [ 4]  371     RET 
                                    372 
                                    373 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    374 ; return parsed exponent or 
                                    375 ; 0 if failed
                                    376 ; at entry exprect *a=='E'    
                                    377 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002DC3                        378 parse_exponent: ; a cntr -- e -1 | 0 
      002DC3 CD 05 EA         [ 4]  379     CALL TOR   ; R: cntr 
      002DC6 CD 06 21         [ 4]  380     CALL DUPP 
      002DC9 CD 05 01         [ 4]  381     CALL CAT 
      002DCC                        382     _DOLIT 'E' 
      002DCC CD 04 6F         [ 4]    1     CALL DOLIT 
      002DCF 00 45                    2     .word 'E' 
      002DD1 CD 08 E5         [ 4]  383     CALL EQUAL 
      002DD4                        384     _QBRAN 1$
      002DD4 CD 04 98         [ 4]    1     CALL QBRAN
      002DD7 2E 04                    2     .word 1$
      002DD9 CD 0B 62         [ 4]  385     CALL ONEP 
      002DDC CD 05 34         [ 4]  386     CALL RFROM  ; a cntr 
      002DDF CD 0B 6F         [ 4]  387     CALL ONEM
      002DE2 CD 06 21         [ 4]  388     CALL DUPP 
      002DE5                        389     _QBRAN 2$ ; a cntr 
      002DE5 CD 04 98         [ 4]    1     CALL QBRAN
      002DE8 2E 07                    2     .word 2$
      002DEA CD 0B CE         [ 4]  390     CALL ZERO
      002DED CD 06 21         [ 4]  391     CALL DUPP 
      002DF0 CD 26 97         [ 4]  392     CALL DSWAP ; 0 0 a cntr  
      002DF3 CD 24 22         [ 4]  393     CALL nsign 
      002DF6 CD 05 EA         [ 4]  394     CALL TOR   ; R: esign  
      002DF9 CD 24 5A         [ 4]  395     CALL parse_digits
      002DFC                        396     _QBRAN PARSEXP_SUCCESS ; parsed to end of string 
      002DFC CD 04 98         [ 4]    1     CALL QBRAN
      002DFF 2E 0E                    2     .word PARSEXP_SUCCESS
                                    397 ; failed invalid character
      002E01 CD 08 26         [ 4]  398     CALL DDROP ; 0 a 
      002E04                        399 1$: 
      002E04 CD 05 34         [ 4]  400     CALL RFROM ; sign||cntr  
      002E07                        401 2$:
      002E07 CD 08 26         [ 4]  402     CALL DDROP  ; a cntr || a sign || 0 cntr   
      002E0A CD 0B CE         [ 4]  403     CALL ZERO   ; return only 0 
      002E0D 81               [ 4]  404     RET 
      002E0E                        405 PARSEXP_SUCCESS: 
      002E0E CD 08 26         [ 4]  406     CALL DDROP ; drop dhi a 
      002E11 CD 05 34         [ 4]  407     CALL RFROM ; es 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



      002E14                        408     _QBRAN 1$
      002E14 CD 04 98         [ 4]    1     CALL QBRAN
      002E17 2E 1C                    2     .word 1$
      002E19 CD 08 71         [ 4]  409     CALL NEGAT
      002E1C                        410 1$:
      002E1C                        411     _DOLIT -1 ; -- e -1 
      002E1C CD 04 6F         [ 4]    1     CALL DOLIT 
      002E1F FF FF                    2     .word -1 
      002E21 81               [ 4]  412     RET 
                                    413 
                                    414 
                                    415 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    416 ;   FLOAT?  ( a dlo dhi a+ cntr sign d? -- f -3 | a 0 )
                                    417 ;   called by NUMBER? 
                                    418 ;   convert string to float 
                                    419 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002E22                        420     _HEADER FLOATQ,5,"FLOAT?"
      002E22 2D 16                    1         .word LINK 
                           002E24     2         LINK=.
      002E24 05                       3         .byte 5  
      002E25 46 4C 4F 41 54 3F        4         .ascii "FLOAT?"
      002E2B                          5         FLOATQ:
      002E2B                        421     _QBRAN FLOATQ0 
      002E2B CD 04 98         [ 4]    1     CALL QBRAN
      002E2E 2E 35                    2     .word FLOATQ0
      002E30                        422     _BRAN FLOAT_ERROR  ; not a float, string start with '#'
      002E30 CD 04 B4         [ 4]    1     CALL BRAN 
      002E33 2E D4                    2     .word FLOAT_ERROR 
      002E35                        423 FLOATQ0:
                                    424 ; BASE must be 10 
      002E35 CD 06 E7         [ 4]  425     CALL BASE 
      002E38 CD 04 E3         [ 4]  426     CALL AT 
      002E3B                        427     _DOLIT 10 
      002E3B CD 04 6F         [ 4]    1     CALL DOLIT 
      002E3E 00 0A                    2     .word 10 
      002E40 CD 08 E5         [ 4]  428     CALL EQUAL 
      002E43                        429     _QBRAN FLOAT_ERROR 
      002E43 CD 04 98         [ 4]    1     CALL QBRAN
      002E46 2E D4                    2     .word FLOAT_ERROR
                                    430 ; if float next char is '.' or 'E' 
      002E48 CD 05 EA         [ 4]  431     CALL TOR ; R: sign  
      002E4B CD 05 EA         [ 4]  432     CALL TOR ; R: sign cntr 
      002E4E CD 06 21         [ 4]  433     CALL DUPP
      002E51 CD 05 01         [ 4]  434     CALL CAT 
      002E54                        435     _DOLIT '.' 
      002E54 CD 04 6F         [ 4]    1     CALL DOLIT 
      002E57 00 2E                    2     .word '.' 
      002E59 CD 08 E5         [ 4]  436     CALL EQUAL 
      002E5C                        437     _QBRAN FLOATQ1 ; not a dot 
      002E5C CD 04 98         [ 4]    1     CALL QBRAN
      002E5F 2E 9A                    2     .word FLOATQ1
      002E61 CD 0B 62         [ 4]  438     CALL ONEP 
      002E64 CD 05 34         [ 4]  439     CALL RFROM  ; dlo dhi a cntr R: sign  
      002E67 CD 0B 6F         [ 4]  440     CALL ONEM 
      002E6A CD 06 21         [ 4]  441     CALL DUPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



      002E6D CD 05 EA         [ 4]  442     CALL TOR  ; R: sign cntr 
                                    443 ; parse fractional part
      002E70 CD 24 5A         [ 4]  444     CALL parse_digits ; dlo dhi a cntr -- dm a cntr 
      002E73 CD 06 21         [ 4]  445     CALL DUPP 
      002E76 CD 05 34         [ 4]  446     CALL RFROM 
      002E79 CD 06 31         [ 4]  447     CALL SWAPP 
      002E7C CD 08 BD         [ 4]  448     CALL SUBB ; fd -> fraction digits count 
      002E7F CD 05 EA         [ 4]  449     CALL TOR  ; dlo dhi a cntr R: sign fd 
      002E82 CD 06 21         [ 4]  450     CALL DUPP ; cntr cntr  
      002E85                        451     _QBRAN 1$ ; end of string, no exponent
      002E85 CD 04 98         [ 4]    1     CALL QBRAN
      002E88 2E 8F                    2     .word 1$
      002E8A                        452     _BRAN FLOATQ2
      002E8A CD 04 B4         [ 4]    1     CALL BRAN 
      002E8D 2E A3                    2     .word FLOATQ2 
      002E8F CD 06 31         [ 4]  453 1$: CALL SWAPP 
      002E92 CD 06 17         [ 4]  454     CALL DROP ; a
      002E95                        455     _BRAN FLOATQ3        
      002E95 CD 04 B4         [ 4]    1     CALL BRAN 
      002E98 2E AB                    2     .word FLOATQ3 
      002E9A                        456 FLOATQ1: ; must push fd==0 on RSTACK 
      002E9A CD 05 34         [ 4]  457     CALL RFROM ; cntr 
      002E9D CD 0B CE         [ 4]  458     CALL ZERO  ; fd 
      002EA0 CD 05 EA         [ 4]  459     CALL TOR   ; dm a cntr R: sign fd 
      002EA3                        460 FLOATQ2: 
      002EA3 CD 2D C3         [ 4]  461     CALL parse_exponent 
      002EA6                        462     _QBRAN FLOAT_ERROR0 ; exponent expected 
      002EA6 CD 04 98         [ 4]    1     CALL QBRAN
      002EA9 2E D1                    2     .word FLOAT_ERROR0
      002EAB                        463 FLOATQ3: ; dm 0 || dm e  
      002EAB CD 05 34         [ 4]  464     CALL RFROM ;  fd  
      002EAE CD 08 BD         [ 4]  465     CALL SUBB  ; exp=e-fd 
      002EB1 CD 08 04         [ 4]  466     CALL NROT 
      002EB4 CD 05 34         [ 4]  467     CALL RFROM  ; sign 
      002EB7                        468     _QBRAN FLOATQ4 
      002EB7 CD 04 98         [ 4]    1     CALL QBRAN
      002EBA 2E BF                    2     .word FLOATQ4
      002EBC CD 08 83         [ 4]  469     CALL DNEGA 
      002EBF                        470 FLOATQ4:
      002EBF CD 07 E5         [ 4]  471     CALL ROT 
      002EC2 CD 2C 2D         [ 4]  472     CALL STEXP 
      002EC5 CD 07 E5         [ 4]  473     CALL ROT 
      002EC8 CD 06 17         [ 4]  474     CALL DROP 
      002ECB                        475     _DOLIT -3 
      002ECB CD 04 6F         [ 4]    1     CALL DOLIT 
      002ECE FF FD                    2     .word -3 
      002ED0 81               [ 4]  476     RET       
      002ED1                        477 FLOAT_ERROR0: 
      002ED1 CD 28 01         [ 4]  478     CALL DRFROM ; sign df      
      002ED4                        479 FLOAT_ERROR: 
      002ED4 CD 0C 10         [ 4]  480     CALL DEPTH 
      002ED7 CD 0B 55         [ 4]  481     CALL CELLS 
      002EDA CD 06 01         [ 4]  482     CALL SPAT 
      002EDD CD 06 31         [ 4]  483     CALL SWAPP 
      002EE0 CD 08 46         [ 4]  484     CALL PLUS  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]



      002EE3 CD 06 0E         [ 4]  485     CALL SPSTO 
      002EE6 CD 0B CE         [ 4]  486     CALL ZERO 
      002EE9 81               [ 4]  487     RET 
                                    488 
                                    489 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    490 ;  LSCALE ( f# -- f# )
                                    491 ;  m *=10 , e -= 1
                                    492 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002EEA                        493     _HEADER LSCALE,6,"LSCALE"
      002EEA 2E 24                    1         .word LINK 
                           002EEC     2         LINK=.
      002EEC 06                       3         .byte 6  
      002EED 4C 53 43 41 4C 45        4         .ascii "LSCALE"
      002EF3                          5         LSCALE:
      002EF3 CD 2B FB         [ 4]  494     CALL ATEXP 
      002EF6 CD 0B D9         [ 4]  495     CALL ONE 
      002EF9 CD 08 BD         [ 4]  496     CALL SUBB 
      002EFC CD 05 EA         [ 4]  497     CALL TOR
      002EFF                        498     _DOLIT 10 
      002EFF CD 04 6F         [ 4]    1     CALL DOLIT 
      002F02 00 0A                    2     .word 10 
      002F04 CD 26 4E         [ 4]  499     CALL DSSTAR
      002F07 CD 05 34         [ 4]  500     CALL RFROM 
      002F0A CD 2C 2D         [ 4]  501     CALL STEXP 
      002F0D 81               [ 4]  502     RET  
                                    503 
                                    504 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    505 ;  RSCALE ( f# -- f# )
                                    506 ;  m /=10 , e+=1 
                                    507 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002F0E                        508     _HEADER RSCALE,6,"RSCALE"
      002F0E 2E EC                    1         .word LINK 
                           002F10     2         LINK=.
      002F10 06                       3         .byte 6  
      002F11 52 53 43 41 4C 45        4         .ascii "RSCALE"
      002F17                          5         RSCALE:
      002F17 CD 2B FB         [ 4]  509     CALL ATEXP 
      002F1A CD 0B D9         [ 4]  510     CALL ONE 
      002F1D CD 08 46         [ 4]  511     CALL PLUS 
      002F20 CD 05 EA         [ 4]  512     CALL TOR 
      002F23                        513     _DOLIT 10 
      002F23 CD 04 6F         [ 4]    1     CALL DOLIT 
      002F26 00 0A                    2     .word 10 
      002F28 CD 25 A6         [ 4]  514     CALL DSLMOD 
      002F2B CD 07 E5         [ 4]  515     CALL ROT 
      002F2E CD 06 17         [ 4]  516     CALL DROP 
      002F31 CD 05 34         [ 4]  517     CALL RFROM 
      002F34 CD 2C 2D         [ 4]  518     CALL STEXP 
      002F37 81               [ 4]  519     RET 
                                    520 
                                    521 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    522 ;  F-ALIGN ( f#1 f#2 -- m1 m2 e )
                                    523 ;  align to same exponent 
                                    524 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002F38                        525     _HEADER FALIGN,7,"F-ALIGN"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]



      002F38 2F 10                    1         .word LINK 
                           002F3A     2         LINK=.
      002F3A 07                       3         .byte 7  
      002F3B 46 2D 41 4C 49 47 4E     4         .ascii "F-ALIGN"
      002F42                          5         FALIGN:
      002F42 CD 2B FB         [ 4]  526     CALL ATEXP 
      002F45 CD 05 EA         [ 4]  527     CALL TOR    ; e2 >R
      002F48 CD 26 97         [ 4]  528     CALL DSWAP 
      002F4B CD 2B FB         [ 4]  529     CALL ATEXP  
      002F4E CD 05 EA         [ 4]  530     CALL TOR 
      002F51 CD 26 97         [ 4]  531     CALL DSWAP  ; m1 m2  R: e2 e1    
      002F54                        532 FALGN1:
      002F54 CD 15 A7         [ 4]  533     CALL JFETCH   ; E2 
      002F57 CD 15 9C         [ 4]  534     CALL IFETCH   ; E1 
      002F5A CD 08 E5         [ 4]  535     CALL EQUAL 
      002F5D                        536     _TBRAN FALGN8 
      002F5D CD 04 A6         [ 4]    1     CALL TBRAN 
      002F60 2F A8                    2     .word FALGN8 
      002F62 CD 15 A7         [ 4]  537     CALL JFETCH 
      002F65 CD 15 9C         [ 4]  538     CALL IFETCH  
      002F68 CD 09 22         [ 4]  539     CALL LESS ; E2<E1 
      002F6B                        540     _TBRAN FALGN4 
      002F6B CD 04 A6         [ 4]    1     CALL TBRAN 
      002F6E 2F 89                    2     .word FALGN4 
                                    541 ; E2>E1 
      002F70                        542     _DOLIT 10 
      002F70 CD 04 6F         [ 4]    1     CALL DOLIT 
      002F73 00 0A                    2     .word 10 
      002F75 CD 26 4E         [ 4]  543     CALL DSSTAR ; m2*10  
      002F78 CD 15 A7         [ 4]  544     CALL JFETCH 
      002F7B CD 0B 6F         [ 4]  545     CALL ONEM  ; e2-1 
      002F7E CD 0B D9         [ 4]  546     CALL ONE 
      002F81 CD 05 C4         [ 4]  547     CALL NRSTO  ; update J 
      002F84                        548     _BRAN FALGN1
      002F84 CD 04 B4         [ 4]    1     CALL BRAN 
      002F87 2F 54                    2     .word FALGN1 
      002F89                        549 FALGN4: ; E2<E1 
      002F89 CD 26 97         [ 4]  550     CALL DSWAP 
      002F8C                        551     _DOLIT 10 
      002F8C CD 04 6F         [ 4]    1     CALL DOLIT 
      002F8F 00 0A                    2     .word 10 
      002F91 CD 26 4E         [ 4]  552     CALL DSSTAR ; m1*10 
      002F94 CD 26 97         [ 4]  553     CALL DSWAP
      002F97 CD 15 9C         [ 4]  554     CALL IFETCH 
      002F9A CD 0B 6F         [ 4]  555     CALL ONEM   ; e1-1 
      002F9D CD 0B CE         [ 4]  556     CALL ZERO 
      002FA0 CD 05 C4         [ 4]  557     CALL NRSTO  ; update I   
      002FA3                        558     _BRAN FALGN1     
      002FA3 CD 04 B4         [ 4]    1     CALL BRAN 
      002FA6 2F 54                    2     .word FALGN1 
      002FA8                        559 FALGN8:
      002FA8 CD 28 01         [ 4]  560     CALL DRFROM 
      002FAB CD 06 17         [ 4]  561     CALL DROP 
      002FAE 81               [ 4]  562     RET 
                                    563 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]



                                    564 
                                    565 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    566 ;   F+ ( f#1 f#2 -- f#1+f#2 )
                                    567 ;   float addition 
                                    568 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002FAF                        569     _HEADER FPLUS,2,"F+"
      002FAF 2F 3A                    1         .word LINK 
                           002FB1     2         LINK=.
      002FB1 02                       3         .byte 2  
      002FB2 46 2B                    4         .ascii "F+"
      002FB4                          5         FPLUS:
      002FB4 CD 2F 42         [ 4]  570     CALL FALIGN 
      002FB7 CD 05 EA         [ 4]  571     CALL TOR 
      002FBA CD 2A A7         [ 4]  572     CALL DPLUS  
      002FBD CD 05 34         [ 4]  573     CALL RFROM 
      002FC0 CD 2C 2D         [ 4]  574     CALL STEXP 
      002FC3 81               [ 4]  575     RET 
                                    576 
                                    577 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    578 ;  F- ( f#1 f#2 -- f#1-f#2 )
                                    579 ;  substraction 
                                    580 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002FC4                        581     _HEADER FSUB,2,"F-"
      002FC4 2F B1                    1         .word LINK 
                           002FC6     2         LINK=.
      002FC6 02                       3         .byte 2  
      002FC7 46 2D                    4         .ascii "F-"
      002FC9                          5         FSUB:
      002FC9 CD 2F 42         [ 4]  582     CALL FALIGN 
      002FCC CD 05 EA         [ 4]  583     CALL TOR 
      002FCF CD 2A D9         [ 4]  584     CALL DSUB 
      002FD2 CD 05 34         [ 4]  585     CALL RFROM 
      002FD5 CD 2C 2D         [ 4]  586     CALL STEXP 
      002FD8 81               [ 4]  587     RET 
                                    588 
                                    589 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    590 ; /mod10  ( m -- m/10 r )
                                    591 ; divide mantissa by 10 
                                    592 ; return quotient and remainder 
                                    593 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002FD9                        594 UMOD10:
      002FD9                        595     _DOLIT 10 
      002FD9 CD 04 6F         [ 4]    1     CALL DOLIT 
      002FDC 00 0A                    2     .word 10 
      002FDE CD 25 A6         [ 4]  596     CALL DSLMOD
      002FE1 CD 07 E5         [ 4]  597     CALL ROT  
      002FE4 81               [ 4]  598     RET 
                                    599 
                                    600 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    601 ;   SCALE>M ( ud1 -- e ud2 )
                                    602 ;   scale down a double  
                                    603 ;   by repeated d/10
                                    604 ;   until ud<=MAX_MANTISSA   
                                    605 ;   e is log10 exponent of scaled down
                                    606 ;   ud2 is scaled down ud1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]



                                    607 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002FE5                        608     _HEADER SCALETOM,7,"SCALE>M"
      002FE5 2F C6                    1         .word LINK 
                           002FE7     2         LINK=.
      002FE7 07                       3         .byte 7  
      002FE8 53 43 41 4C 45 3E 4D     4         .ascii "SCALE>M"
      002FEF                          5         SCALETOM:
      002FEF CD 0B CE         [ 4]  609     CALL ZERO 
      002FF2 CD 08 04         [ 4]  610     CALL NROT 
      002FF5                        611 SCAL1:
      002FF5 CD 06 21         [ 4]  612     CALL DUPP 
      002FF8                        613     _DOLIT 0X7F 
      002FF8 CD 04 6F         [ 4]    1     CALL DOLIT 
      002FFB 00 7F                    2     .word 0X7F 
      002FFD CD 09 41         [ 4]  614     CALL UGREAT 
      003000                        615     _QBRAN SCAL2  
      003000 CD 04 98         [ 4]    1     CALL QBRAN
      003003 30 19                    2     .word SCAL2
      003005 CD 2F D9         [ 4]  616     CALL UMOD10 
      003008 CD 06 17         [ 4]  617     CALL DROP 
      00300B CD 07 E5         [ 4]  618     CALL ROT 
      00300E CD 0B 62         [ 4]  619     CALL ONEP 
      003011 CD 08 04         [ 4]  620     CALL NROT  
      003014                        621     _BRAN SCAL1 
      003014 CD 04 B4         [ 4]    1     CALL BRAN 
      003017 2F F5                    2     .word SCAL1 
      003019                        622 SCAL2: 
      003019 81               [ 4]  623     RET 
                                    624 
                                    625 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    626 ;  UDIV10 ( ut -- ut )
                                    627 ;  divide a 48 bits uint by 10 
                                    628 ;  used to scale down MM* 
                                    629 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00301A                        630 UDIV10:
      00301A 90 93            [ 1]  631     LDW Y,X 
      00301C 90 FE            [ 2]  632     LDW Y,(Y)
      00301E A6 0A            [ 1]  633     LD A,#10 
      003020 90 62            [ 2]  634     DIV Y,A 
      003022 FF               [ 2]  635     LDW (X),Y 
      003023 90 95            [ 1]  636     LD YH,A 
      003025 E6 02            [ 1]  637     LD A,(2,X)
      003027 90 97            [ 1]  638     LD YL,A 
      003029 A6 0A            [ 1]  639     LD A,#10 
      00302B 90 62            [ 2]  640     DIV Y,A 
      00302D 90 95            [ 1]  641     LD YH,A 
      00302F 90 9F            [ 1]  642     LD A,YL 
      003031 E7 02            [ 1]  643     LD (2,X),A 
      003033 E6 03            [ 1]  644     LD A,(3,X)
      003035 90 97            [ 1]  645     LD YL,A 
      003037 A6 0A            [ 1]  646     LD A,#10 
      003039 90 62            [ 2]  647     DIV Y,A 
      00303B 90 95            [ 1]  648     LD YH,A 
      00303D 90 9F            [ 1]  649     LD A,YL 
      00303F E7 03            [ 1]  650     LD (3,X),A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]



      003041 E6 04            [ 1]  651     LD A,(4,X)
      003043 90 97            [ 1]  652     LD YL,A 
      003045 A6 0A            [ 1]  653     LD A,#10 
      003047 90 62            [ 2]  654     DIV Y,A 
      003049 90 95            [ 1]  655     LD YH,A 
      00304B 90 9F            [ 1]  656     LD A,YL 
      00304D E7 04            [ 1]  657     LD (4,X),A 
      00304F E6 05            [ 1]  658     LD A,(5,X)
      003051 90 97            [ 1]  659     LD YL,A 
      003053 A6 0A            [ 1]  660     LD A,#10 
      003055 90 62            [ 2]  661     DIV Y,A 
      003057 90 9F            [ 1]  662     LD A,YL 
      003059 E7 05            [ 1]  663     LD (5,X),A 
      00305B 81               [ 4]  664     RET 
                                    665 
                                    666 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    667 ;   MM* ( m1 m2 -- m3 e )
                                    668 ;   mantissa product 
                                    669 ;  scale down to 23 bits 
                                    670 ;   e  is log10 scaling factor.
                                    671 ;   The maximum product size 
                                    672 ;   before scaling is 46 bits .
                                    673 ;   UDIV10 is used to scale down.  
                                    674 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00305C                        675     _HEADER MMSTAR,3,"MM*"
      00305C 2F E7                    1         .word LINK 
                           00305E     2         LINK=.
      00305E 03                       3         .byte 3  
      00305F 4D 4D 2A                 4         .ascii "MM*"
      003062                          5         MMSTAR:
      003062 CD 08 31         [ 4]  676     CALL DDUP
      003065 CD 27 6C         [ 4]  677     CALL DZEQUAL
      003068                        678     _TBRAN MMSTA2
      003068 CD 04 A6         [ 4]    1     CALL TBRAN 
      00306B 30 78                    2     .word MMSTA2 
      00306D                        679 MMSTA1:
      00306D CD 28 AA         [ 4]  680     CALL DOVER 
      003070 CD 27 6C         [ 4]  681     CALL DZEQUAL 
      003073                        682     _QBRAN MMSTA3 
      003073 CD 04 98         [ 4]    1     CALL QBRAN
      003076 30 83                    2     .word MMSTA3
      003078                        683 MMSTA2: ; ( -- 0 0 0 )
      003078 1C 00 02         [ 2]  684     ADDW X,#2 
      00307B 90 5F            [ 1]  685     CLRW Y 
      00307D FF               [ 2]  686     LDW (X),Y 
      00307E EF 02            [ 2]  687     LDW (2,X),Y
      003080 EF 04            [ 2]  688     LDW (4,X),Y 
      003082 81               [ 4]  689     RET 
      003083                        690 MMSTA3:
      003083 CD 25 8C         [ 4]  691     CALL DSIGN 
      003086 CD 05 EA         [ 4]  692     CALL TOR    ; R: m2sign 
      003089 CD 25 75         [ 4]  693     CALL DABS   ; m1 um2 
      00308C CD 26 97         [ 4]  694     CALL DSWAP  ; um2 m1 
      00308F CD 25 8C         [ 4]  695     CALL DSIGN  ; um2 m1 m1sign 
      003092 CD 05 34         [ 4]  696     CALL RFROM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]



      003095 CD 06 A7         [ 4]  697     CALL XORR 
      003098 CD 05 EA         [ 4]  698     CALL TOR   ; R: product_sign 
      00309B CD 25 75         [ 4]  699     CALL DABS  ; um2 um1  
      00309E CD 27 E3         [ 4]  700     CALL DTOR  ; um2 
      0030A1 CD 06 21         [ 4]  701     CALL DUPP  ; um2 um2hi 
      0030A4 CD 05 45         [ 4]  702     CALL RAT   ; um2 um2hi um1hi
                                    703 ; first partial product  
                                    704 ; pd1=um2hi*um1hi 
      0030A7 CD 0A E1         [ 4]  705     CALL STAR 
      0030AA CD 0B CE         [ 4]  706     CALL ZERO 
      0030AD CD 06 31         [ 4]  707     CALL SWAPP ; pd1<<16  
      0030B0 CD 26 97         [ 4]  708     CALL DSWAP ; pd1 um2 
      0030B3 CD 06 49         [ 4]  709     CALL OVER  ; pd1 um2 um2lo 
      0030B6 CD 05 34         [ 4]  710     CALL RFROM ; pd1 um2 um2lo um1hi 
                                    711 ; pd2=um2lo*um1hi 
      0030B9 CD 0A 97         [ 4]  712     CALL UMSTA ; pd1 um2 pd2 
      0030BC CD 26 97         [ 4]  713     CALL DSWAP ; pd1 pd2 um2 
      0030BF CD 05 45         [ 4]  714     CALL RAT   ; pd1 pd2 um2 um1lo 
                                    715 ; pd3= um2hi*um1lo 
      0030C2 CD 0A 97         [ 4]  716     CALL UMSTA ; pd1 pd2 um2lo pd3 
      0030C5 CD 07 E5         [ 4]  717     CALL ROT ; pd1 pd2 pd3 um2lo 
      0030C8 CD 05 EA         [ 4]  718     CALL TOR ; pd1 pd2 pd3 R: psign um1lo um2lo 
                                    719 ; pd1+pd2+pd3  pd1
      0030CB CD 2A A7         [ 4]  720     CALL DPLUS 
      0030CE CD 2A A7         [ 4]  721     CALL DPLUS  
      0030D1 CD 28 01         [ 4]  722     CALL DRFROM ; triple um2lo um1lo 
                                    723 ; last partial product um2lo*um1lo 
      0030D4 CD 0A 97         [ 4]  724     CALL UMSTA ; prod pd4 
                                    725 ; mm*=prod<<16+pd4  
      0030D7 CD 27 E3         [ 4]  726     CALL DTOR ;   R: psign pd4lo pd4hi  
                                    727  ; add pd4hi to prodlo and propagate carry 
      0030DA 90 93            [ 1]  728     LDW Y,X 
      0030DC 90 EE 02         [ 2]  729     LDW Y,(2,Y)  ; prodlo 
      0030DF 72 F9 01         [ 2]  730     ADDW Y,(1,SP)  ; prodlo+pd4hi 
      0030E2 17 01            [ 2]  731     LDW (1,SP),Y    ; plo phi  
      0030E4 90 93            [ 1]  732     LDW Y,X
      0030E6 90 FE            [ 2]  733     LDW Y,(Y) ; prodhi  
      0030E8 24 04            [ 1]  734     JRNC MMSTA4
      0030EA 72 A9 00 01      [ 2]  735     ADDW Y,#1 ; add carry 
      0030EE                        736 MMSTA4:     
      0030EE 1D 00 02         [ 2]  737     SUBW X,#2 
      0030F1 FF               [ 2]  738     LDW (X),Y 
      0030F2 90 85            [ 2]  739     POPW Y 
      0030F4 EF 02            [ 2]  740     LDW (2,X),Y 
      0030F6 90 85            [ 2]  741     POPW Y 
      0030F8 EF 04            [ 2]  742     LDW (4,X),Y
      0030FA CD 0B CE         [ 4]  743     CALL ZERO 
      0030FD CD 05 EA         [ 4]  744     CALL TOR 
      003100                        745 MMSTA5:
      003100 CD 07 D4         [ 4]  746     CALL QDUP 
      003103                        747     _QBRAN MMSTA6 
      003103 CD 04 98         [ 4]    1     CALL QBRAN
      003106 31 19                    2     .word MMSTA6
      003108 CD 30 1A         [ 4]  748     CALL UDIV10 
      00310B CD 05 34         [ 4]  749     CALL RFROM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]



      00310E CD 0B 62         [ 4]  750     CALL ONEP 
      003111 CD 05 EA         [ 4]  751     CALL TOR 
      003114                        752     _BRAN MMSTA5 
      003114 CD 04 B4         [ 4]    1     CALL BRAN 
      003117 31 00                    2     .word MMSTA5 
                                    753 ; now scale to double 
                                    754 ; scale further <= MAX_MANTISSA 
      003119                        755 MMSTA6: 
      003119 CD 05 34         [ 4]  756     CALL RFROM 
      00311C CD 08 04         [ 4]  757     CALL NROT 
      00311F CD 2F EF         [ 4]  758     CALL SCALETOM
      003122 CD 27 E3         [ 4]  759     CALL DTOR 
      003125 CD 08 46         [ 4]  760     CALL PLUS 
      003128 CD 28 01         [ 4]  761     CALL DRFROM 
      00312B CD 05 34         [ 4]  762     CALL RFROM
      00312E                        763     _QBRAN MMSTA7
      00312E CD 04 98         [ 4]    1     CALL QBRAN
      003131 31 36                    2     .word MMSTA7
      003133 CD 08 83         [ 4]  764     CALL DNEGA
      003136                        765 MMSTA7:
      003136 CD 07 E5         [ 4]  766     CALL ROT ; m e 
      003139 81               [ 4]  767     RET 
                                    768 
                                    769 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    770 ;    F* ( f#1 f#2 -- f#3 )
                                    771 ;    float product 
                                    772 ;    f#3=f#1 * f#2 
                                    773 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00313A                        774     _HEADER FSTAR,2,"F*"
      00313A 30 5E                    1         .word LINK 
                           00313C     2         LINK=.
      00313C 02                       3         .byte 2  
      00313D 46 2A                    4         .ascii "F*"
      00313F                          5         FSTAR:
      00313F CD 2B FB         [ 4]  775     CALL ATEXP ; f#1 m2 e2 
      003142 CD 05 EA         [ 4]  776     CALL TOR   
      003145 CD 26 97         [ 4]  777     CALL DSWAP ; m2 f#1
      003148 CD 2B FB         [ 4]  778     CALL ATEXP ; m2 m1 e1 
      00314B CD 05 34         [ 4]  779     CALL RFROM ; m2 m1 e1 e2 
      00314E CD 08 46         [ 4]  780     CALL PLUS  ; m2 m1 e 
      003151 CD 05 EA         [ 4]  781     CALL TOR   ; m2 m1 R: e 
      003154 CD 30 62         [ 4]  782     CALL MMSTAR ; m2*m1 e   
      003157 CD 05 34         [ 4]  783     CALL RFROM 
      00315A CD 08 46         [ 4]  784     CALL PLUS 
      00315D CD 2C 2D         [ 4]  785     CALL STEXP ; f#3 
      003160 81               [ 4]  786     RET 
                                    787 
                                    788 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    789 ;  F/ ( f#1 f#2 -- f#3 )
                                    790 ;  float division
                                    791 ;  f#3 = f#1/f#2
                                    792 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003161                        793     _HEADER FSLASH,2,"F/"
      003161 31 3C                    1         .word LINK 
                           003163     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]



      003163 02                       3         .byte 2  
      003164 46 2F                    4         .ascii "F/"
      003166                          5         FSLASH:
      003166 CD 2B FB         [ 4]  794     CALL ATEXP  ; f#1 m2 e2 
      003169 CD 05 EA         [ 4]  795     CALL TOR    ; f#1 m2   R: e2 
      00316C CD 25 8C         [ 4]  796     CALL DSIGN  ; f#1 m2 m2sign 
      00316F CD 05 EA         [ 4]  797     CALL TOR    ; F#1 m2 R: e2 m2s 
      003172 CD 25 75         [ 4]  798     CALL DABS   ; F#1 um2 
      003175 CD 26 97         [ 4]  799     CALL DSWAP  ; m2 f#1 
      003178 CD 2B FB         [ 4]  800     CALL ATEXP  ; m2 m1 e1 
      00317B CD 0B D9         [ 4]  801     CALL ONE    ; e2 slot on rstack  
      00317E CD 05 A3         [ 4]  802     CALL NRAT   ; m2 m1 e1 e2 
      003181 CD 08 46         [ 4]  803     CALL PLUS   ; m2 m1 e 
      003184 CD 0B D9         [ 4]  804     CALL ONE    ; e slot on rstack 
      003187 CD 05 C4         [ 4]  805     CALL NRSTO  ; m2 m1 R: e m2s 
      00318A CD 25 8C         [ 4]  806     CALL DSIGN  ; m2 m1 m1sign 
      00318D CD 05 34         [ 4]  807     CALL RFROM  ; m2 m1 m1s m2s  
      003190 CD 06 A7         [ 4]  808     CALL XORR   ; m2 m1 quot_sign R: e 
      003193 CD 05 34         [ 4]  809     CALL RFROM   
      003196 CD 27 E3         [ 4]  810     CALL DTOR   ; m2 m1 R: qs e  
      003199 CD 25 75         [ 4]  811     CALL DABS   ; um2 um1 R: qs e  
      00319C CD 26 97         [ 4]  812     CALL DSWAP  ; m1 m2 R: qs e
      00319F CD 08 31         [ 4]  813     CALL DDUP  ; m1 m2 m2 R: qs e
      0031A2 CD 27 E3         [ 4]  814     CALL DTOR  ; m1 m2 R: qs e m2 ( keep divisor need later ) 
      0031A5 CD 29 B3         [ 4]  815     CALL UDSLMOD ; remainder m1/m2 R: e m2 
      0031A8                        816 FSLASH1: 
      0031A8 CD 28 AA         [ 4]  817     CALL DOVER ; if remainder null done 
      0031AB CD 27 6C         [ 4]  818     CALL DZEQUAL 
      0031AE                        819     _TBRAN FSLASH8 
      0031AE CD 04 A6         [ 4]    1     CALL TBRAN 
      0031B1 32 0E                    2     .word FSLASH8 
                                    820 ; get fractional digits from remainder until mantissa saturate
                                    821 ; remainder mantissa R: e divisor 
                                    822 ; check for mantissa saturation 
      0031B3 CD 08 31         [ 4]  823     CALL DDUP 
      0031B6                        824     _DOLIT 0XCCCC 
      0031B6 CD 04 6F         [ 4]    1     CALL DOLIT 
      0031B9 CC CC                    2     .word 0XCCCC 
      0031BB                        825     _DOLIT 0xC
      0031BB CD 04 6F         [ 4]    1     CALL DOLIT 
      0031BE 00 0C                    2     .word 0xC 
      0031C0 CD 27 A6         [ 4]  826     CALL DGREAT 
      0031C3                        827     _TBRAN FSLASH8 ; another loop would result in mantissa overflow 
      0031C3 CD 04 A6         [ 4]    1     CALL TBRAN 
      0031C6 32 0E                    2     .word FSLASH8 
                                    828 ; multiply mantissa by 10 
      0031C8                        829     _DOLIT 10 
      0031C8 CD 04 6F         [ 4]    1     CALL DOLIT 
      0031CB 00 0A                    2     .word 10 
      0031CD CD 0B CE         [ 4]  830     CALL ZERO 
      0031D0 CD 29 50         [ 4]  831     CALL DSTAR 
                                    832 ; mutliply remainder by 10     
      0031D3 CD 26 97         [ 4]  833     CALL DSWAP 
      0031D6                        834     _DOLIT 10 
      0031D6 CD 04 6F         [ 4]    1     CALL DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]



      0031D9 00 0A                    2     .word 10 
      0031DB CD 0B CE         [ 4]  835     CALL ZERO 
      0031DE CD 29 50         [ 4]  836     CALL DSTAR 
                                    837 ; divide remainder by m2     
      0031E1 CD 28 19         [ 4]  838     CALL DRAT  ; mantissa remainder divisor R: e divisor 
      0031E4 CD 29 B3         [ 4]  839     CALL UDSLMOD ; mantissa dr dq R: qs e divisor 
      0031E7 CD 26 97         [ 4]  840     CALL DSWAP ; mantissa frac_digit remainder R: qs e divisor  
      0031EA CD 27 E3         [ 4]  841     CALL DTOR  ; mantissa frac_digit R: qs e divisor remainder 
      0031ED CD 2A A7         [ 4]  842     CALL DPLUS ; mantissa+frac_digit 
      0031F0 CD 28 01         [ 4]  843     CALL DRFROM ; mantissa remainder R: qs e divisor  
      0031F3 CD 26 97         [ 4]  844     CALL DSWAP  ; remainder mantissa  
                                    845 ; increment e 
      0031F6                        846     _DOLIT 2    ; e slot on rstack 
      0031F6 CD 04 6F         [ 4]    1     CALL DOLIT 
      0031F9 00 02                    2     .word 2 
      0031FB CD 05 A3         [ 4]  847     CALL NRAT   ;  2 NR@ -- e 
      0031FE CD 0B 62         [ 4]  848     CALL ONEP   ; increment exponent 
      003201                        849     _DOLIT 2 
      003201 CD 04 6F         [ 4]    1     CALL DOLIT 
      003204 00 02                    2     .word 2 
      003206 CD 05 C4         [ 4]  850     CALL NRSTO  ; e 2 NR! , update e on rstack     
      003209                        851     _BRAN FSLASH1
      003209 CD 04 B4         [ 4]    1     CALL BRAN 
      00320C 31 A8                    2     .word FSLASH1 
      00320E                        852 FSLASH8: ; remainder mantissa R: qs e divisor 
      00320E CD 26 97         [ 4]  853     CALL DSWAP  
      003211 CD 08 26         [ 4]  854     CALL DDROP  ; drop remainder     
      003214 CD 28 01         [ 4]  855     CALL DRFROM
      003217 CD 08 26         [ 4]  856     CALL DDROP  ; drop divisor 
      00321A CD 15 A7         [ 4]  857     CALL JFETCH    ; quotient sign 
      00321D                        858     _QBRAN FSLASH9 
      00321D CD 04 98         [ 4]    1     CALL QBRAN
      003220 32 25                    2     .word FSLASH9
      003222 CD 08 83         [ 4]  859     CALL DNEGA  
      003225                        860 FSLASH9:
      003225 CD 05 34         [ 4]  861     CALL RFROM  ; exponent 
      003228 CD 2C 2D         [ 4]  862     CALL STEXP 
      00322B CD 05 34         [ 4]  863     CALL RFROM 
      00322E CD 06 17         [ 4]  864     CALL DROP ; drop qs 
      003231 81               [ 4]  865     RET 
                                    866 
                                    867 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    868 ;   D>F  ( # -- f# )
                                    869 ;   convert double to float 
                                    870 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003232                        871     _HEADER DTOF,3,"D>F"
      003232 31 63                    1         .word LINK 
                           003234     2         LINK=.
      003234 03                       3         .byte 3  
      003235 44 3E 46                 4         .ascii "D>F"
      003238                          5         DTOF:
      003238 CD 25 8C         [ 4]  872     CALL DSIGN 
      00323B CD 05 EA         [ 4]  873     CALL TOR
      00323E CD 25 75         [ 4]  874     CALL DABS  
      003241                        875 DTOF1:      
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]



      003241 CD 2F EF         [ 4]  876     CALL SCALETOM 
      003244 CD 05 34         [ 4]  877     CALL RFROM
      003247                        878     _QBRAN DTOF2 
      003247 CD 04 98         [ 4]    1     CALL QBRAN
      00324A 32 4F                    2     .word DTOF2
      00324C CD 08 83         [ 4]  879     CALL DNEGA 
      00324F                        880 DTOF2: 
      00324F CD 07 E5         [ 4]  881     CALL ROT 
      003252 CD 2C 2D         [ 4]  882     CALL STEXP 
      003255 81               [ 4]  883     RET 
                                    884 
                                    885 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    886 ;   F>D  ( f# -- # )
                                    887 ;  convert float to double 
                                    888 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003256                        889     _HEADER FTOD,3,"F>D"
      003256 32 34                    1         .word LINK 
                           003258     2         LINK=.
      003258 03                       3         .byte 3  
      003259 46 3E 44                 4         .ascii "F>D"
      00325C                          5         FTOD:
      00325C CD 2B FB         [ 4]  890     CALL ATEXP ; m e 
      00325F CD 07 D4         [ 4]  891     CALL QDUP
      003262                        892     _QBRAN FTOD9
      003262 CD 04 98         [ 4]    1     CALL QBRAN
      003265 32 F2                    2     .word FTOD9
      003267 CD 05 EA         [ 4]  893     CALL TOR 
      00326A CD 25 8C         [ 4]  894     CALL DSIGN 
      00326D CD 08 04         [ 4]  895     CALL NROT 
      003270 CD 25 75         [ 4]  896     CALL DABS
      003273 CD 05 34         [ 4]  897     CALL RFROM  
      003276 CD 06 21         [ 4]  898     CALL DUPP   
      003279 CD 06 58         [ 4]  899     CALL ZLESS 
      00327C                        900     _QBRAN FTOD4 
      00327C CD 04 98         [ 4]    1     CALL QBRAN
      00327F 32 BA                    2     .word FTOD4
                                    901 ; negative exponent 
      003281 CD 08 D7         [ 4]  902     CALL ABSS 
      003284 CD 05 EA         [ 4]  903     CALL TOR
      003287                        904     _BRAN FTOD2  
      003287 CD 04 B4         [ 4]    1     CALL BRAN 
      00328A 32 A5                    2     .word FTOD2 
      00328C                        905 FTOD1:
      00328C CD 08 31         [ 4]  906     CALL DDUP 
      00328F CD 27 6C         [ 4]  907     CALL DZEQUAL 
      003292                        908     _TBRAN FTOD3 
      003292 CD 04 A6         [ 4]    1     CALL TBRAN 
      003295 32 AF                    2     .word FTOD3 
      003297                        909     _DOLIT 10 
      003297 CD 04 6F         [ 4]    1     CALL DOLIT 
      00329A 00 0A                    2     .word 10 
      00329C CD 25 A6         [ 4]  910     CALL DSLMOD 
      00329F CD 07 E5         [ 4]  911     CALL ROT 
      0032A2 CD 06 17         [ 4]  912     CALL DROP
      0032A5                        913 FTOD2:      
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]



      0032A5                        914     _DONXT FTOD1
      0032A5 CD 04 83         [ 4]    1     CALL DONXT 
      0032A8 32 8C                    2     .word FTOD1 
      0032AA                        915     _BRAN FTOD8   
      0032AA CD 04 B4         [ 4]    1     CALL BRAN 
      0032AD 32 E7                    2     .word FTOD8 
      0032AF                        916 FTOD3: 
      0032AF CD 05 34         [ 4]  917     CALL RFROM 
      0032B2 CD 06 17         [ 4]  918     CALL DROP 
      0032B5                        919     _BRAN FTOD8  
      0032B5 CD 04 B4         [ 4]    1     CALL BRAN 
      0032B8 32 E7                    2     .word FTOD8 
                                    920 ; positive exponent 
      0032BA                        921 FTOD4:
      0032BA CD 05 EA         [ 4]  922     CALL TOR 
      0032BD                        923     _BRAN FTOD6
      0032BD CD 04 B4         [ 4]    1     CALL BRAN 
      0032C0 32 E2                    2     .word FTOD6 
      0032C2                        924 FTOD5:
      0032C2 CD 08 31         [ 4]  925     CALL DDUP 
      0032C5                        926     _DOLIT 0XCCCC
      0032C5 CD 04 6F         [ 4]    1     CALL DOLIT 
      0032C8 CC CC                    2     .word 0XCCCC 
      0032CA                        927     _DOLIT 0XCCC  
      0032CA CD 04 6F         [ 4]    1     CALL DOLIT 
      0032CD 0C CC                    2     .word 0XCCC 
      0032CF CD 27 A6         [ 4]  928     CALL DGREAT 
      0032D2                        929     _TBRAN FTOD3 
      0032D2 CD 04 A6         [ 4]    1     CALL TBRAN 
      0032D5 32 AF                    2     .word FTOD3 
      0032D7                        930     _DOLIT 10 
      0032D7 CD 04 6F         [ 4]    1     CALL DOLIT 
      0032DA 00 0A                    2     .word 10 
      0032DC CD 0B CE         [ 4]  931     CALL ZERO 
      0032DF CD 29 50         [ 4]  932     CALL DSTAR 
      0032E2                        933 FTOD6: 
      0032E2                        934     _DONXT FTOD5 
      0032E2 CD 04 83         [ 4]    1     CALL DONXT 
      0032E5 32 C2                    2     .word FTOD5 
      0032E7                        935 FTOD8:
      0032E7 CD 07 E5         [ 4]  936     CALL ROT 
      0032EA                        937     _QBRAN FTOD9 
      0032EA CD 04 98         [ 4]    1     CALL QBRAN
      0032ED 32 F2                    2     .word FTOD9
      0032EF CD 08 83         [ 4]  938     CALL DNEGA
      0032F2                        939 FTOD9:          
      0032F2 81               [ 4]  940     RET 
                                    941 
                                    942 
                                    943 ;;;;;;;;;;;;;;;;;;;;;;;;
                                    944 ;   F0< ( f# -- f )
                                    945 ;   true if f#<0
                                    946 ;;;;;;;;;;;;;;;;;;;;;;;;
      0032F3                        947     _HEADER FZLESS,3,"F0<"
      0032F3 32 58                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 180.
Hexadecimal [24-Bits]



                           0032F5     2         LINK=.
      0032F5 03                       3         .byte 3  
      0032F6 46 30 3C                 4         .ascii "F0<"
      0032F9                          5         FZLESS:
      0032F9 CD 2B FB         [ 4]  948     CALL ATEXP 
      0032FC CD 06 17         [ 4]  949     CALL DROP 
      0032FF CD 06 31         [ 4]  950     CALL SWAPP 
      003302 CD 06 17         [ 4]  951     CALL DROP 
      003305 CD 06 58         [ 4]  952     CALL ZLESS 
      003308 81               [ 4]  953     RET
                                    954 
                                    955 ;;;;;;;;;;;;;;;;;;;;;;;;
                                    956 ;   F< ( f#1 f#2 -- f )
                                    957 ; true if f#1 < f#1 
                                    958 ;;;;;;;;;;;;;;;;;;;;;;;
      003309                        959     _HEADER FLESS,2,"F<"
      003309 32 F5                    1         .word LINK 
                           00330B     2         LINK=.
      00330B 02                       3         .byte 2  
      00330C 46 3C                    4         .ascii "F<"
      00330E                          5         FLESS:
      00330E CD 2F C9         [ 4]  960     CALL FSUB  
      003311 CC 32 F9         [ 2]  961     JP FZLESS
                                    962 
                                    963 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                    964 ;   F> ( f#1 f#2 -- f )
                                    965 ;   true fi f#1>f#2
                                    966 ;;;;;;;;;;;;;;;;;;;;;;;;;
      003314                        967     _HEADER FGREAT,2,"F>"
      003314 33 0B                    1         .word LINK 
                           003316     2         LINK=.
      003316 02                       3         .byte 2  
      003317 46 3E                    4         .ascii "F>"
      003319                          5         FGREAT:
      003319 CD 26 97         [ 4]  968     CALL DSWAP 
      00331C CC 33 0E         [ 2]  969     JP FLESS 
                                    970 
                                    971 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                    972 ;   F= ( f#1 f#2 -- f ) 
                                    973 ;   true fi f#1==f#2 
                                    974 ;;;;;;;;;;;;;;;;;;;;;;;;;
      00331F                        975     _HEADER FEQUAL,2,"F="
      00331F 33 16                    1         .word LINK 
                           003321     2         LINK=.
      003321 02                       3         .byte 2  
      003322 46 3D                    4         .ascii "F="
      003324                          5         FEQUAL:
      003324 CC 27 85         [ 2]  976     JP DEQUAL 
                                    977 
                                    978 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    979 ;   F0= ( f# -- f )
                                    980 ;   true fi f# is 0.0 
                                    981 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      003327                        982     _HEADER FZEQUAL,3,"F0="
      003327 33 21                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 181.
Hexadecimal [24-Bits]



                           003329     2         LINK=.
      003329 03                       3         .byte 3  
      00332A 46 30 3D                 4         .ascii "F0="
      00332D                          5         FZEQUAL:
      00332D CD 2B FB         [ 4]  983     CALL ATEXP 
      003330 CD 06 17         [ 4]  984     CALL DROP 
      003333 CC 27 6C         [ 2]  985     JP DZEQUAL  
                                    986 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 182.
Hexadecimal [24-Bits]



                                   4471 .endif 
                                   4472 
                                   4473 ;===============================================================
                                   4474 
                           003329  4475 LASTN =	LINK   ;last name defined
                                   4476 
                                   4477 ; application code begin here
      003380                       4478 	.bndry 128 ; align on flash block  
      003380                       4479 app_space: 
                                   4480 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 183.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        0008E0 R   |   6 ABOR1      0013B9 R
  6 ABOR2      0013D0 R   |   6 ABORQ      0013B1 R   |   6 ABORT      0013A2 R
  6 ABRTQ      001693 R   |   6 ABSS       0008D7 R   |   6 ACCEP      001338 R
  6 ACCP1      001341 R   |   6 ACCP2      001367 R   |   6 ACCP3      00136A R
  6 ACCP4      00136C R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |   6 ADRADJ     0007C4 R
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  6 AFT        00167E R   |   6 AGAIN      0015D4 R   |   6 AHEAD      001631 R
  6 ALLOT      0014E1 R   |   6 ANDD       00067E R   |     APP_CP  =  004004 
    APP_LAST=  004000     |     APP_RUN =  004002     |     APP_VP  =  004006 
  6 AT         0004E3 R   |   6 ATEXE      000CE1 R   |   6 ATEXP      002BFB R
  6 ATEXP1     002C10 R   |   6 ATEXP2     002C20 R   |   6 AUTORUN    000129 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |   6 B115K2     0003E0 R
    B19200  =  000003     |   6 B19K2      0003BD R   |     B1_MASK =  000002 
    B230400 =  000007     |     B2400   =  000000     |   6 B2K4       00038E R
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |   6 B4K8       00039C R
    B4_MASK =  000010     |     B57600  =  000005     |   6 B57K6      0003CE R
    B5_MASK =  000020     |     B6_MASK =  000040     |     B7_MASK =  000080 
    B921600 =  000009     |     B9600   =  000002     |   6 B9K6       0003AC R
  6 BACK1      0012E0 R   |   6 BASE       0006E7 R   |     BASEE   =  00000A 
  6 BAUD       0003F0 R   |     BCNT    =  000001     |   6 BCOMP      001524 R
  6 BDIGS      000DC8 R   |     BEEP_BIT=  000004     |     BEEP_CSR=  0050F3 
    BEEP_MAS=  000010     |     BEEP_POR=  00000F     |   6 BEGIN      0015B6 R
    BIT0    =  000000     |     BIT1    =  000001     |     BIT2    =  000002 
    BIT3    =  000003     |     BIT4    =  000004     |     BIT5    =  000005 
    BIT6    =  000006     |     BIT7    =  000007     |   6 BKSLA      001135 R
  6 BKSP       0012B0 R   |     BKSPP   =  000008     |   6 BLANK      000BC1 R
    BLOCK_SI=  000080     |     BOOT_ROM=  006000     |     BOOT_ROM=  007FFF 
  6 BRAN       0004B4 R   |     BTW     =  000001     |   6 BUF2ROW    0020F5 R
  6 BYE        0000B6 R   |     CADR    =  000003     |     CALLL   =  0000CD 
  6 CALLOT     00233E R   |     CAN_DGR =  005426     |     CAN_FPSR=  005427 
    CAN_IER =  005425     |     CAN_MCR =  005420     |     CAN_MSR =  005421 
    CAN_P0  =  005428     |     CAN_P1  =  005429     |     CAN_P2  =  00542A 
    CAN_P3  =  00542B     |     CAN_P4  =  00542C     |     CAN_P5  =  00542D 
    CAN_P6  =  00542E     |     CAN_P7  =  00542F     |     CAN_P8  =  005430 
    CAN_P9  =  005431     |     CAN_PA  =  005432     |     CAN_PB  =  005433 
    CAN_PC  =  005434     |     CAN_PD  =  005435     |     CAN_PE  =  005436 
    CAN_PF  =  005437     |     CAN_RFR =  005424     |     CAN_TPR =  005423 
    CAN_TSR =  005422     |     CARRY   =  00002A     |     CASE_SEN=  000000 
  6 CAT        000501 R   |   6 CCOMMA     001506 R   |     CC_C    =  000000 
    CC_H    =  000004     |     CC_I0   =  000003     |     CC_I1   =  000005 
    CC_N    =  000002     |     CC_V    =  000007     |     CC_Z    =  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 184.
Hexadecimal [24-Bits]

Symbol Table

    CELLL   =  000002     |   6 CELLM      000B46 R   |   6 CELLP      000B37 R
  6 CELLS      000B55 R   |     CFG_GCR =  007F60     |     CFG_GCR_=  000001 
    CFG_GCR_=  000000     |   6 CHAR1      000F1E R   |   6 CHAR2      000F21 R
  6 CHKIVEC    001FE3 R   |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |   6 CMOV1      000D00 R   |   6 CMOV2      000D18 R
  6 CMOVE      000CF8 R   |     CNTDWN  =  000032     |   6 CNTXT      00076A R
  6 COLD       001AE4 R   |   6 COLD1      001AE4 R   |   6 COLON      001836 R
  6 COMMA      0014EF R   |   6 COMPI      001534 R   |     COMPO   =  000040 
  6 CONSTANT   0018E0 R   |   6 COUNT      000C94 R   |   6 CPP        000786 R
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |   6 CR         000F46 R
  6 CREAT      00187C R   |     CRR     =  00000D     |   6 CSTOR      0004F0 R
  6 CTABLE     00235F R   |   6 CTAT       002380 R   |   6 CTINIT     0023A8 R
  6 D2SLASH    0028C3 R   |   6 D2STAR     0028DA R   |   6 DABS       002575 R
  6 DABS1      002583 R   |   6 DAT        000C78 R   |     DATSTK  =  001680 
  6 DCLZ       0026C5 R   |   6 DCLZ1      0026CE R   |   6 DCLZ4      0026D7 R
  6 DCLZ8      0026E4 R   |   6 DCONST     001915 R   |   6 DDIG       0025E7 R
  6 DDIGS      002600 R   |   6 DDOT       002617 R   |   6 DDOT0      00262B R
  6 DDOT1      002641 R   |   6 DDROP      000826 R   |   6 DDSLMOD    002A68 R
  6 DDSTAR3    0029A9 R   |   6 DDUP       000831 R   |     DEBUG_BA=  007F00 
    DEBUG_EN=  007FFF     |   6 DECIM      000E78 R   |   6 DEPTH      000C10 R
  6 DEQU4      00279A R   |   6 DEQUAL     002785 R   |     DEVID_BA=  0048CD 
    DEVID_EN=  0048D8     |     DEVID_LO=  0048D2     |     DEVID_LO=  0048D3 
    DEVID_LO=  0048D4     |     DEVID_LO=  0048D5     |     DEVID_LO=  0048D6 
    DEVID_LO=  0048D7     |     DEVID_LO=  0048D8     |     DEVID_WA=  0048D1 
    DEVID_XH=  0048CE     |     DEVID_XL=  0048CD     |     DEVID_YH=  0048D0 
    DEVID_YL=  0048CF     |   6 DGREAT     0027A6 R   |   6 DGTQ1      000EBD R
  6 DI         0000C4 R   |   6 DIG        000DF1 R   |   6 DIGIT      000D8C R
  6 DIGS       000E02 R   |   6 DIGS1      000E02 R   |   6 DIGS2      000E0F R
  6 DIGTQ      000E8C R   |     DISCOVER=  000000     |   6 DLESS      0027B1 R
  6 DLESS4     0027C5 R   |   6 DLITER     002883 R   |   6 DLSHIFT    0028F6 R
  6 DLSHIFT1   002907 R   |   6 DLSHIFT2   00291C R   |     DM_BK1RE=  007F90 
    DM_BK1RH=  007F91     |     DM_BK1RL=  007F92     |     DM_BK2RE=  007F93 
    DM_BK2RH=  007F94     |     DM_BK2RL=  007F95     |     DM_CR1  =  007F96 
    DM_CR2  =  007F97     |     DM_CSR1 =  007F98     |     DM_CSR2 =  007F99 
    DM_ENFCT=  007F9A     |   6 DN1        00089E R   |   6 DNEGA      000883 R
  6 DOCONST    001900 R   |   6 DOLIT      00046F R   |   6 DONXT      000483 R
    DOORBELL=  000000     |   6 DOSTR      000F56 R   |   6 DOT        000FED R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 185.
Hexadecimal [24-Bits]

Symbol Table

  6 DOT1       001003 R   |   6 DOTI1      001A65 R   |   6 DOTID      001A4F R
  6 DOTO1      001445 R   |   6 DOTOK      00142B R   |   6 DOTPR      001116 R
  6 DOTQ       0016AD R   |   6 DOTQP      000F73 R   |   6 DOTR       000F81 R
  6 DOTS       0019F1 R   |   6 DOTS1      0019FC R   |   6 DOTS2      001A05 R
  6 DOVAR      0006D7 R   |   6 DOVER      0028AA R   |   6 DO_DCONS   001938 R
  6 DPLUS      002AA7 R   |   6 DPLUS1     002ACE R   |   6 DRAT       002819 R
  6 DRFROM     002801 R   |   6 DROP       000617 R   |   6 DROT       002731 R
  6 DRSHIFT    00292D R   |   6 DRSHIFT1   002934 R   |   6 DRSHIFT2   00294A R
  6 DSIGN      00258C R   |   6 DSIGN1     002596 R   |   6 DSLA9      002A92 R
  6 DSLASH     002A98 R   |   6 DSLMOD     0025A6 R   |   6 DSLMOD3    0025C1 R
  6 DSLMOD4    0025CD R   |   6 DSLMODa    0025C8 R   |   6 DSLMODb    0025D3 R
  6 DSSTAR     00264E R   |   6 DSSTAR1    002665 R   |   6 DSSTAR3    00268E R
  6 DSTAR      002950 R   |   6 DSTOR      000C5F R   |   6 DSUB       002AD9 R
  6 DSUB1      002B00 R   |   6 DSWAP      002697 R   |   6 DTOF       003238 R
  6 DTOF1      003241 R   |   6 DTOF2      00324F R   |   6 DTOR       0027E3 R
  6 DUMP       0019A7 R   |   6 DUMP1      0019BE R   |   6 DUMP3      0019E0 R
  6 DUMPP      001976 R   |   6 DUPP       000621 R   |   6 DVARIA     002837 R
  6 DZEQUAL    00276C R   |   6 DZLESS     0027CC R   |   6 DZLESS1    0027D6 R
  6 EDIGS      000E2D R   |   6 EDOT       002C7B R   |   6 EDOT0      002C92 R
  6 EDOT1      002CA0 R   |   6 EDOT2      002CA6 R   |   6 EDOT3      002CBF R
  6 EDOT4      002CEE R   |   6 EDOT5      002D0A R   |   6 EECSTORE   001D94 R
  6 EEPCP      001BBA R   |   6 EEPLAST    001B8D R   |   6 EEPROM     001B75 R
    EEPROM_B=  004000     |     EEPROM_E=  0047FF     |     EEPROM_R=  000010 
    EEPROM_S=  000800     |   6 EEPRUN     001BA4 R   |   6 EEPVP      001BD0 R
  6 EESTORE    001DE0 R   |   6 EE_CCOMM   0020AA R   |   6 EE_COMMA   002089 R
  6 EE_CREAD   001D25 R   |   6 EE_READ    001D03 R   |   6 EI         0000BD R
  6 ELSEE      00160C R   |   6 EMIT       000436 R   |   6 ENEPER     0022CA R
    EOL_CR  =  000001     |     EOL_LF  =  000000     |   6 EQ1        0008FB R
  6 EQUAL      0008E5 R   |   6 ERASE      000D5A R   |     ERR     =  00001B 
  6 EVAL       00146E R   |   6 EVAL1      00146E R   |   6 EVAL2      00148A R
  6 EXE1       000CEF R   |   6 EXECU      0004C4 R   |     EXT     =  000000 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |   6 EXTRC      000DB4 R
  6 FADDR      002177 R   |   6 FALGN1     002F54 R   |   6 FALGN4     002F89 R
  6 FALGN8     002FA8 R   |   6 FALIGN     002F42 R   |   6 FARAT      001C3B R
  6 FARCAT     001C47 R   |   6 FC_XOFF    000463 R   |   6 FC_XON     00044D R
  6 FDOT       002D19 R   |   6 FDOT0      002D57 R   |   6 FDOT1      002D46 R
  6 FDOT10     002DB3 R   |   6 FDOT2      002D65 R   |   6 FDOT3      002D7E R
  6 FDOT6      002D8E R   |   6 FDOT7      002D93 R   |   6 FDOT8      002D9B R
  6 FDOT9      002DA3 R   |   6 FEQUAL     003324 R   |   6 FER        002B3B R
  6 FGREAT     003319 R   |     FHSE    =  7A1200     |     FHSI    =  F42400 
  6 FILL       000D27 R   |   6 FILL1      000D44 R   |   6 FILL2      000D4D R
  6 FIND       00120C R   |   6 FIND1      00122A R   |   6 FIND2      001258 R
  6 FIND3      001264 R   |   6 FIND4      001278 R   |   6 FIND5      001285 R
  6 FIND6      001269 R   |   6 FINIT      002B31 R   |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
    FLASH_IA=  000000     |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 186.
Hexadecimal [24-Bits]

Symbol Table

    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |   6 FLESS      00330E R
  6 FLOATQ     002E2B R   |   6 FLOATQ0    002E35 R   |   6 FLOATQ1    002E9A R
  6 FLOATQ2    002EA3 R   |   6 FLOATQ3    002EAB R   |   6 FLOATQ4    002EBF R
  6 FLOAT_ER   002ED4 R   |   6 FLOAT_ER   002ED1 R   |     FLSI    =  01F400 
  6 FMOVE      002182 R   |   6 FMOVE2     0021B3 R   |   6 FNE        002B5B R
  6 FOR        00157E R   |   6 FORGET     00015A R   |   6 FORGET1    000189 R
  6 FORGET2    00020F R   |   6 FORGET4    000218 R   |   6 FORGET6    0001D1 R
  6 FOV        002B70 R   |   6 FPLUS      002FB4 R   |   6 FPSTOR     001B56 R
  6 FPSW       002B0D R   |     FPTR    =  000034     |   6 FREEVAR    000225 R
  6 FREEVAR4   00025B R   |   6 FRESET     002B1F R   |   6 FSLASH     003166 R
  6 FSLASH1    0031A8 R   |   6 FSLASH8    00320E R   |   6 FSLASH9    003225 R
  6 FSTAR      00313F R   |   6 FSUB       002FC9 R   |   6 FTOD       00325C R
  6 FTOD1      00328C R   |   6 FTOD2      0032A5 R   |   6 FTOD3      0032AF R
  6 FTOD4      0032BA R   |   6 FTOD5      0032C2 R   |   6 FTOD6      0032E2 R
  6 FTOD8      0032E7 R   |   6 FTOD9      0032F2 R   |   6 FZE        002B48 R
  6 FZEQUAL    00332D R   |   6 FZLESS     0032F9 R   |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
  6 GREAT      000960 R   |   6 GREAT1     000976 R   |   6 HDOT       000FD0 R
  6 HERE       000CAB R   |   6 HEX        000E63 R   |   6 HI         001AA1 R
  6 HLD        000757 R   |   6 HOLD       000DD8 R   |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  6 ICOLON     001847 R   |   6 IFETCH     00159C R   |   6 IFF        0015E4 R
  6 IFMOVE     00225B R   |     IMEDD   =  000080     |   6 IMMED      001859 R
  6 INCH       00042A R   |   6 INC_FPTR   001CD0 R   |   6 INITOFS    00180F R
  6 INN        000705 R   |     INPUT_DI=  000000     |     INPUT_EI=  000001 
    INPUT_FL=  000000     |     INPUT_PU=  000001     |   6 INTE1      00140D R
  6 INTER      0013E3 R   |   6 INTQ       002404 R   |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 187.
Hexadecimal [24-Bits]

Symbol Table

    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
  6 INVER      000860 R   |     IPR0    =  000002     |     IPR1    =  000001 
    IPR2    =  000000     |     IPR3    =  000003     |     IPR_MASK=  000003 
    IRET_COD=  000080     |   6 ISEMI      0017A4 R   |     ITC_SPR1=  007F70 
    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |   6 JFETCH     0015A7 R   |   6 JSRC       0017F9 R
  6 KEY        000ECC R   |   6 KTAP       0012FD R   |   6 KTAP1      001320 R
  6 KTAP2      001323 R   |   6 LAST       000796 R   |   6 LASTN   =  003329 R
  6 LBRAC      00141A R   |     LED2_BIT=  000005     |     LED2_MAS=  000020 
    LED2_POR=  00500A     |   6 LESS       000922 R   |     LF      =  00000A 
  6 LINK    =  003329 R   |   6 LITER      001556 R   |   6 LN2S       002326 R
  6 LOCAL      000554 R   |   6 LOCK       001CBC R   |   6 LOG2S      002310 R
  6 LSCALE     002EF3 R   |   6 LSHIFT     000B80 R   |   6 LSHIFT1    000B89 R
  6 LSHIFT4    000B91 R   |   6 LT1        000938 R   |     MASKK   =  001F7F 
  6 MAX        000980 R   |   6 MAX1       000993 R   |     MAX_MANT=  7FFFFF 
  6 MIN        00099D R   |   6 MIN1       0009B0 R   |   6 MMOD1      000A39 R
  6 MMOD2      000A4D R   |   6 MMOD3      000A64 R   |   6 MMSM1      0009F4 R
  6 MMSM3      0009F8 R   |   6 MMSM4      000A04 R   |   6 MMSMa      0009FF R
  6 MMSMb      000A0A R   |   6 MMSTA1     00306D R   |   6 MMSTA2     003078 R
  6 MMSTA3     003083 R   |   6 MMSTA4     0030EE R   |   6 MMSTA5     003100 R
  6 MMSTA6     003119 R   |   6 MMSTA7     003136 R   |   6 MMSTAR     003062 R
  6 MODD       000A7E R   |   6 MONE       000BE7 R   |     MS      =  000030 
  6 MSEC       0002D0 R   |   6 MSMOD      000A1C R   |   6 MSTA1      000B0F R
  6 MSTAR      000AEC R   |     NAFR    =  004804     |   6 NAMEQ      0012A5 R
  6 NAMET      0011B6 R   |     NCLKOPT =  004808     |   6 NDROT      0026F5 R
  6 NEGAT      000871 R   |   6 NEX1       000490 R   |   6 NEXT       00158D R
    NFLASH_W=  00480E     |     NHSECNT =  00480A     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
    NOPTBL  =  00487F     |   6 NRAT       0005A3 R   |   6 NRDROP     00057D R
  6 NROT       000804 R   |   6 NRSTO      0005C4 R   |   6 NTIB       000715 R
    NUBC    =  004802     |     NUCLEO  =  000001     |   6 NUFQ       000EE2 R
  6 NUFQ1      000EFB R   |   6 NUMBQ      0024AD R   |   6 NUMQ0      0024EE R
  6 NUMQ1      002510 R   |   6 NUMQ3      00253A R   |   6 NUMQ4      00255B R
  6 NUMQ8      002564 R   |     NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD 
    NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE 
  6 NonHandl   000000 R   |   6 OFFSET     0007BB R   |     OFS     =  000005 
  6 ONE        000BD9 R   |   6 ONEM       000B6F R   |   6 ONEP       000B62 R
    OPT     =  000002     |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 188.
Hexadecimal [24-Bits]

Symbol Table

    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTIMIZE=  000001     |     OPTION_B=  004800 
    OPTION_E=  00487F     |     OPTION_S=  000080     |   6 ORIG       000049 R
  6 ORR        000692 R   |   6 OUTPUT     00043B R   |     OUTPUT_F=  000001 
    OUTPUT_O=  000000     |     OUTPUT_P=  000001     |     OUTPUT_S=  000000 
  6 OVER       000649 R   |   6 OVERT      001772 R   |     PA      =  000000 
  6 PACKS      000D6B R   |   6 PAD        000CBC R   |   6 PAREN      001125 R
  6 PARS       00101E R   |   6 PARS1      001049 R   |   6 PARS2      001074 R
  6 PARS3      001077 R   |   6 PARS4      001080 R   |   6 PARS5      0010A3 R
  6 PARS6      0010B8 R   |   6 PARS7      0010C7 R   |   6 PARS8      0010D6 R
  6 PARSE      0010E7 R   |   6 PARSEXP_   002E0E R   |   6 PAUSE      0002E0 R
    PA_BASE =  005000     |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_BASE =  005005     |     PB_CR1  =  005008 
    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
    PB_ODR  =  005005     |     PC      =  00000A     |     PC_BASE =  00500A 
    PC_CR1  =  00500D     |     PC_CR2  =  00500E     |     PC_DDR  =  00500C 
    PC_IDR  =  00500B     |     PC_ODR  =  00500A     |     PD      =  00000F 
  6 PDUM1      001989 R   |   6 PDUM2      00199A R   |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
    PE_BASE =  005014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_BASE =  005019     |     PF_CR1  =  00501C 
    PF_CR2  =  00501D     |     PF_DDR  =  00501B     |     PF_IDR  =  00501A 
    PF_ODR  =  005019     |     PG      =  00001E     |     PG_BASE =  00501E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |     PH      =  000023 
    PH_BASE =  005023     |     PH_CR1  =  005026     |     PH_CR2  =  005027 
    PH_DDR  =  005025     |     PH_IDR  =  005024     |     PH_ODR  =  005023 
    PI      =  000028     |   6 PICK       000C27 R   |   6 PII        002289 R
    PI_BASE =  005028     |     PI_CR1  =  00502B     |     PI_CR2  =  00502C 
    PI_DDR  =  00502A     |     PI_IDR  =  005029     |     PI_ODR  =  005028 
  6 PLUS       000846 R   |   6 PNAM1      001717 R   |   6 PRESE      001499 R
    PROD1   =  000024     |     PROD2   =  000026     |     PROD3   =  000028 
  6 PROTECTE   000201 R   |   6 PSTOR      000C3E R   |     PTR16   =  000035 
    PTR8    =  000036     |   6 PTRPLUS    001CE8 R   |   6 QBRAN      000498 R
  6 QDUP       0007D4 R   |   6 QDUP1      0007DE R   |   6 QKEY       000418 R
  6 QSTAC      001451 R   |   6 QUERY      00137D R   |   6 QUEST      001010 R
  6 QUIT       0014B6 R   |   6 QUIT1      0014BE R   |   6 QUIT2      0014C1 R
  6 RAM2EE     002123 R   |     RAMBASE =  000000     |   6 RAMLAST    0007A9 R
    RAM_BASE=  000000     |     RAM_END =  0017FF     |     RAM_SIZE=  001800 
  6 RANDOM     00027E R   |   6 RAT        000545 R   |   6 RBRAC      0017E6 R
  6 REPEA      001661 R   |   6 RFREE      00210A R   |   6 RFROM      000534 R
    ROP     =  004800     |   6 ROT        0007E5 R   |   6 ROW2BUF    0020CC R
    ROWBUFF =  001680     |     RP0     =  00002E     |   6 RPAT       000511 R
    RPP     =  0017FF     |   6 RPSTO      00051E R   |   6 RSCALE     002F17 R
  6 RSHIFT     000B9C R   |   6 RSHIFT1    000BA5 R   |   6 RSHIFT4    000BAD R
    RST_SR  =  0050B3     |   6 RT12_2     0022F9 R   |   6 SAME1      0011D4 R
  6 SAME2      0011FD R   |   6 SAMEQ      0011CC R   |   6 SCAL1      002FF5 R
  6 SCAL2      003019 R   |   6 SCALETOM   002FEF R   |   6 SCOM1      00174C R
  6 SCOM2      00174F R   |   6 SCOMP      00172E R   |   6 SEED       000265 R
    SEEDX   =  000038     |     SEEDY   =  00003A     |   6 SEMIS      001782 R
  6 SETISP     0000D0 R   |   6 SET_RAML   0018C9 R   |   6 SFN        002BB8 R
  6 SFN1       002BD2 R   |     SFR_BASE=  005000     |     SFR_END =  0057FF 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 189.
Hexadecimal [24-Bits]

Symbol Table

  6 SFV        002BE2 R   |   6 SFZ        002B85 R   |   6 SFZ1       002BA8 R
  6 SIGN       000E17 R   |   6 SIGN1      000E27 R   |   6 SLASH      000A88 R
  6 SLMOD      000A6C R   |   6 SNAME      0016E1 R   |     SP0     =  00002C 
  6 SPACE      000F04 R   |   6 SPACS      000F13 R   |   6 SPAT       000601 R
    SPI_CR1 =  005200     |     SPI_CR2 =  005201     |     SPI_CRCP=  005205 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_TXCR=  005207     |     SPP     =  001680 
    SPSAVE  =  000001     |   6 SPSTO      00060E R   |   6 SQRT10     0022E2 R
  6 SQRT2      0022A0 R   |   6 SQRT3      0022B7 R   |   6 SSMOD      000B18 R
    SSP     =  000001     |     STACK   =  0017FF     |   6 STAR       000AE1 R
  6 STASL      000B29 R   |   6 STEXP      002C2D R   |   6 STEXP1     002C43 R
  6 STEXP2     002C67 R   |   6 STOD       0008A6 R   |   6 STORE      0004D1 R
  6 STR        000E45 R   |   6 STRCQ      00155E R   |   6 STRQ       0016A0 R
  6 STRQP      000F6F R   |   6 SUBB       0008BD R   |   6 SWAPP      000631 R
    SWIM_CSR=  007F80     |   6 TAP        0012E7 R   |   6 TBOOT      001AD8 R
  6 TBRAN      0004A6 R   |   6 TBUF       000725 R   |     TBUFFBAS=  001680 
  6 TCHAR      000BF8 R   |   6 TEMP       0006F6 R   |   6 TEVAL      000748 R
  6 TFLASH     000737 R   |   6 THENN      0015F9 R   |   6 TIB        000CCD R
    TIBB    =  001700     |     TIBBASE =  001700     |     TIC     =  000027 
  6 TICK       0014CD R   |     TIM1_ARR=  005262     |     TIM1_ARR=  005263 
    TIM1_BKR=  00526D     |     TIM1_CCE=  00525C     |     TIM1_CCE=  00525D 
    TIM1_CCM=  005258     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  005259     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525A     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525B     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCR=  005265     |     TIM1_CCR=  005266     |     TIM1_CCR=  005267 
    TIM1_CCR=  005268     |     TIM1_CCR=  005269     |     TIM1_CCR=  00526A 
    TIM1_CCR=  00526B     |     TIM1_CCR=  00526C     |     TIM1_CNT=  00525E 
    TIM1_CNT=  00525F     |     TIM1_CR1=  005250     |     TIM1_CR2=  005251 
    TIM1_CR2=  000000     |     TIM1_CR2=  000002     |     TIM1_CR2=  000004 
    TIM1_CR2=  000005     |     TIM1_CR2=  000006     |     TIM1_DTR=  00526E 
    TIM1_EGR=  005257     |     TIM1_EGR=  000007     |     TIM1_EGR=  000001 
    TIM1_EGR=  000002     |     TIM1_EGR=  000003     |     TIM1_EGR=  000004 
    TIM1_EGR=  000005     |     TIM1_EGR=  000006     |     TIM1_EGR=  000000 
    TIM1_ETR=  005253     |     TIM1_ETR=  000006     |     TIM1_ETR=  000000 
    TIM1_ETR=  000001     |     TIM1_ETR=  000002     |     TIM1_ETR=  000003 
    TIM1_ETR=  000007     |     TIM1_ETR=  000004     |     TIM1_ETR=  000005 
    TIM1_IER=  005254     |     TIM1_IER=  000007     |     TIM1_IER=  000001 
    TIM1_IER=  000002     |     TIM1_IER=  000003     |     TIM1_IER=  000004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 190.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_IER=  000005     |     TIM1_IER=  000006     |     TIM1_IER=  000000 
    TIM1_OIS=  00526F     |     TIM1_PSC=  005260     |     TIM1_PSC=  005261 
    TIM1_RCR=  005264     |     TIM1_SMC=  005252     |     TIM1_SMC=  000007 
    TIM1_SMC=  000000     |     TIM1_SMC=  000001     |     TIM1_SMC=  000002 
    TIM1_SMC=  000004     |     TIM1_SMC=  000005     |     TIM1_SMC=  000006 
    TIM1_SR1=  005255     |     TIM1_SR1=  000007     |     TIM1_SR1=  000001 
    TIM1_SR1=  000002     |     TIM1_SR1=  000003     |     TIM1_SR1=  000004 
    TIM1_SR1=  000005     |     TIM1_SR1=  000006     |     TIM1_SR1=  000000 
    TIM1_SR2=  005256     |     TIM1_SR2=  000001     |     TIM1_SR2=  000002 
    TIM1_SR2=  000003     |     TIM1_SR2=  000004     |     TIM2_ARR=  00530D 
    TIM2_ARR=  00530E     |     TIM2_CCE=  005308     |     TIM2_CCE=  000000 
    TIM2_CCE=  000001     |     TIM2_CCE=  000004     |     TIM2_CCE=  000005 
    TIM2_CCE=  005309     |     TIM2_CCM=  005305     |     TIM2_CCM=  005306 
    TIM2_CCM=  005307     |     TIM2_CCM=  000000     |     TIM2_CCM=  000004 
    TIM2_CCM=  000003     |     TIM2_CCR=  00530F     |     TIM2_CCR=  005310 
    TIM2_CCR=  005311     |     TIM2_CCR=  005312     |     TIM2_CCR=  005313 
    TIM2_CCR=  005314     |     TIM2_CNT=  00530A     |     TIM2_CNT=  00530B 
    TIM2_CR1=  005300     |     TIM2_CR1=  000007     |     TIM2_CR1=  000000 
    TIM2_CR1=  000003     |     TIM2_CR1=  000001     |     TIM2_CR1=  000002 
    TIM2_EGR=  005304     |     TIM2_EGR=  000001     |     TIM2_EGR=  000002 
    TIM2_EGR=  000003     |     TIM2_EGR=  000006     |     TIM2_EGR=  000000 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |   6 TIMEOUTQ   000310 R   |   6 TIMER      0002FA R
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |   6 TNAM2      001A1F R
  6 TNAM3      001A3D R   |   6 TNAM4      001A43 R   |   6 TNAME      001A1C R
  6 TOFLASH    000335 R   |   6 TOKEN      0011A8 R   |   6 TOR        0005EA R
  6 TORAM      000375 R   |     TRUEE   =  00FFFF     |   6 TWOSL      000BB4 R
  6 TYPE1      000F33 R   |   6 TYPE2      000F39 R   |   6 TYPES      000F2E R
  6 Timer4Ha   000005 R   |     UART1   =  000000     |     UART1_BA=  005230 
    UART1_BR=  005232     |     UART1_BR=  005233     |     UART1_CR=  005234 
    UART1_CR=  005235     |     UART1_CR=  005236     |     UART1_CR=  005237 
    UART1_CR=  005238     |     UART1_DR=  005231     |     UART1_GT=  005239 
    UART1_PO=  000000     |     UART1_PS=  00523A     |     UART1_RX=  000004 
    UART1_SR=  005230     |     UART1_TX=  000005     |     UART3   =  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 191.
Hexadecimal [24-Bits]

Symbol Table

    UART3_BA=  005240     |     UART3_BR=  005242     |     UART3_BR=  005243 
    UART3_CR=  005244     |     UART3_CR=  005245     |     UART3_CR=  005246 
    UART3_CR=  005247     |     UART3_CR=  004249     |     UART3_DR=  005241 
    UART3_PO=  00000F     |     UART3_RX=  000006     |     UART3_SR=  005240 
    UART3_TX=  000005     |     UART_BRR=  005232     |     UART_BRR=  005233 
    UART_CR1=  005234     |     UART_CR1=  000004     |     UART_CR1=  000002 
    UART_CR1=  000000     |     UART_CR1=  000001     |     UART_CR1=  000007 
    UART_CR1=  000006     |     UART_CR1=  000005     |     UART_CR1=  000003 
    UART_CR2=  005235     |     UART_CR2=  000004     |     UART_CR2=  000002 
    UART_CR2=  000005     |     UART_CR2=  000001     |     UART_CR2=  000000 
    UART_CR2=  000006     |     UART_CR2=  000003     |     UART_CR2=  000007 
    UART_CR3=  000006     |     UART_CR3=  000003     |     UART_CR3=  000001 
    UART_CR3=  000002     |     UART_CR3=  000000     |     UART_CR3=  000006 
    UART_CR3=  000004     |     UART_CR3=  000005     |     UART_CR4=  000007 
    UART_CR4=  000000     |     UART_CR4=  000001     |     UART_CR4=  000002 
    UART_CR4=  000003     |     UART_CR4=  000004     |     UART_CR4=  000006 
    UART_CR4=  000005     |     UART_CR5=  000008     |     UART_CR5=  000003 
    UART_CR5=  000001     |     UART_CR5=  000002     |     UART_CR5=  000004 
    UART_CR5=  000005     |     UART_CR6=  000009     |     UART_CR6=  000004 
    UART_CR6=  000007     |     UART_CR6=  000001     |     UART_CR6=  000002 
    UART_CR6=  000000     |     UART_CR6=  000005     |     UART_DR =  005231 
    UART_GTR=  000009     |     UART_PSC=  00000A     |     UART_SR =  005230 
    UART_SR_=  000001     |     UART_SR_=  000004     |     UART_SR_=  000002 
    UART_SR_=  000003     |     UART_SR_=  000000     |     UART_SR_=  000005 
    UART_SR_=  000006     |     UART_SR_=  000007     |     UBASE   =  000006 
    UBC     =  004801     |     UCNTXT  =  000016     |     UCP     =  00001A 
    UCTIB   =  00000E     |     UD1     =  000001     |     UD2     =  000002 
    UD3     =  000003     |     UD4     =  000004     |   6 UDIV10     00301A R
  6 UDOT       000FBC R   |   6 UDOTR      000F9C R   |   6 UDSLA3     0029F3 R
  6 UDSLA4     002A19 R   |   6 UDSLA7     002A4A R   |   6 UDSLA8     002A4D R
  6 UDSLMOD    0029B3 R   |   6 UEND       000047 R   |     UFPSW   =  000008 
  6 UGREAT     000941 R   |   6 UGREAT1    000958 R   |     UHLD    =  000014 
    UINN    =  00000C     |     UINTER  =  000012     |     ULAST   =  00001C 
  6 ULES1      00091A R   |   6 ULESS      000904 R   |   6 UMMOD      0009D8 R
  6 UMOD10     002FD9 R   |   6 UMSTA      000A97 R   |   6 UNIQ1      0016DE R
  6 UNIQU      0016BF R   |   6 UNLKEE     001C56 R   |   6 UNLKFL     001C75 R
  6 UNLOCK     001C94 R   |   6 UNTIL      0015C1 R   |     UOFFSET =  00001E 
  6 UPDATCP    001C13 R   |   6 UPDATLAS   001BEA R   |   6 UPDATPTR   002216 R
  6 UPDATRUN   001C02 R   |   6 UPDATVP    001C2A R   |   6 UPL1       0006D3 R
  6 UPLUS      0006BC R   |     UPP     =  000006     |   6 UPPER      00116B R
  6 UPPER1     00118E R   |   6 UPPER2     001197 R   |     URLAST  =  000022 
    USR_BTN_=  000004     |     USR_BTN_=  000010     |     USR_BTN_=  005015 
    UTFLASH =  000020     |     UTIB    =  000010     |     UTMP    =  00000A 
  6 UTYP1      001959 R   |   6 UTYP2      001968 R   |   6 UTYPE      001954 R
    UVP     =  000018     |   6 UZERO      00002B R   |   6 VARIA      001896 R
    VAR_BASE=  000080     |     VAR_TOP =  0017BF     |     VER     =  000004 
  6 VPP        000778 R   |     VSIZE   =  000006     |     WANT_CON=  000001 
    WANT_DEB=  000000     |     WANT_DOU=  000001     |     WANT_FLO=  000001 
    WANT_SCA=  000001     |     WANT_SEE=  000000     |     WDGOPT  =  004805 
    WDGOPT_I=  000002     |     WDGOPT_L=  000003     |     WDGOPT_W=  000000 
    WDGOPT_W=  000001     |   6 WHILE      001647 R   |   6 WITHI      0009BD R
  6 WORDD      001151 R   |   6 WORDS      001A79 R   |   6 WORS1      001A7F R
  6 WORS2      001A9B R   |   6 WR_BYTE    001D3F R   |   6 WR_WORD    001D64 R
  6 WTABLE     00236E R   |   6 WTAT       002392 R   |   6 WTINIT     0023D7 R
    WWDG_CR =  0050D1     |     WWDG_WR =  0050D2     |     XMEM_SIZ=  017830 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 192.
Hexadecimal [24-Bits]

Symbol Table

    XOFF    =  000013     |     XON     =  000011     |   6 XORR       0006A7 R
    XTEMP   =  000024     |     YTEMP   =  000026     |   6 ZEQ1       00277C R
  6 ZEQU1      000674 R   |   6 ZEQUAL     00066A R   |   6 ZERO       000BCE R
  6 ZL1        000661 R   |   6 ZLESS      000658 R   |   6 app_spac   003380 R
  6 baudrate   00037B R   |   6 block_er   001E2A R   |   6 clear_ra   000019 R
  6 clock_in   000064 R   |   6 copy_buf   001E8A R   |   6 copy_buf   001EA9 R
  6 copy_pro   001EA9 R   |     da      =  000002     |     db      =  000003 
    dc      =  000000     |     dd      =  000001     |   6 do2lit     00288E R
  6 erase_fl   001E4C R   |   6 fmove_do   0021FF R   |   6 main       000016 R
  6 next_row   0021BC R   |   6 no_move    002206 R   |   6 nsign      002422 R
  6 nsign1     002453 R   |   6 parse_di   00245A R   |   6 parse_ex   002DC3 R
  6 pristine   001F2A R   |   6 proceed_   001E4F R   |   6 reboot     000327 R
  6 reset_ve   001F91 R   |   6 row_eras   001E0A R   |   6 row_eras   001E63 R
  6 row_eras   001E8A R   |   6 set_opti   001EFE R   |   6 set_vect   002032 R
  6 uart_ini   000076 R   |   6 write_ro   001ECE R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 193.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   3380   flags    0

